
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d244  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0810d4e0  0810d4e0  0001d4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d5f0  0810d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d5f8  0810d5f8  0001d5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d5fc  0810d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  10000000  0810d600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000574  10000078  0810d678  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100005ec  0810d678  000205ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a8f1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004613  00000000  00000000  0004a999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001300  00000000  00000000  0004efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001198  00000000  00000000  000502b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ac3e  00000000  00000000  00051448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ad16  00000000  00000000  0008c086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ae30  00000000  00000000  000a6d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00221bcc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005250  00000000  00000000  00221c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000078 	.word	0x10000078
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d4c4 	.word	0x0810d4c4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000007c 	.word	0x1000007c
 81002d4:	0810d4c4 	.word	0x0810d4c4

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <CheckBMP280ChipID>:

int flag = 0;


uint8_t CheckBMP280ChipID()
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b082      	sub	sp, #8
 8101240:	af00      	add	r7, sp, #0
  uint8_t SerialData[3] = {(BMP280_REG_ID | 0x80), 0, 0};
 8101242:	4a19      	ldr	r2, [pc, #100]	; (81012a8 <CheckBMP280ChipID+0x6c>)
 8101244:	1d3b      	adds	r3, r7, #4
 8101246:	6812      	ldr	r2, [r2, #0]
 8101248:	4611      	mov	r1, r2
 810124a:	8019      	strh	r1, [r3, #0]
 810124c:	3302      	adds	r3, #2
 810124e:	0c12      	lsrs	r2, r2, #16
 8101250:	701a      	strb	r2, [r3, #0]
  volatile uint8_t aRxBuffer[3]= {0};
 8101252:	4b16      	ldr	r3, [pc, #88]	; (81012ac <CheckBMP280ChipID+0x70>)
 8101254:	881b      	ldrh	r3, [r3, #0]
 8101256:	803b      	strh	r3, [r7, #0]
 8101258:	2300      	movs	r3, #0
 810125a:	70bb      	strb	r3, [r7, #2]

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 810125c:	2200      	movs	r2, #0
 810125e:	2110      	movs	r1, #16
 8101260:	4813      	ldr	r0, [pc, #76]	; (81012b0 <CheckBMP280ChipID+0x74>)
 8101262:	f005 fb97 	bl	8106994 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8101266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810126a:	f002 f9cd 	bl	8103608 <HAL_Delay>
  if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 2) == HAL_OK)
 810126e:	463a      	mov	r2, r7
 8101270:	1d39      	adds	r1, r7, #4
 8101272:	2302      	movs	r3, #2
 8101274:	480f      	ldr	r0, [pc, #60]	; (81012b4 <CheckBMP280ChipID+0x78>)
 8101276:	f008 fe51 	bl	8109f1c <HAL_SPI_TransmitReceive_DMA>
 810127a:	4603      	mov	r3, r0
 810127c:	2b00      	cmp	r3, #0
 810127e:	d10a      	bne.n	8101296 <CheckBMP280ChipID+0x5a>
  {
   while(flag == 1)
 8101280:	e005      	b.n	810128e <CheckBMP280ChipID+0x52>
    {
      if(aRxBuffer[1] != BMP280_CHIP_ID)
 8101282:	787b      	ldrb	r3, [r7, #1]
 8101284:	b2db      	uxtb	r3, r3
 8101286:	2b58      	cmp	r3, #88	; 0x58
 8101288:	d001      	beq.n	810128e <CheckBMP280ChipID+0x52>
      {
        return HAL_ERROR;
 810128a:	2301      	movs	r3, #1
 810128c:	e007      	b.n	810129e <CheckBMP280ChipID+0x62>
   while(flag == 1)
 810128e:	4b0a      	ldr	r3, [pc, #40]	; (81012b8 <CheckBMP280ChipID+0x7c>)
 8101290:	681b      	ldr	r3, [r3, #0]
 8101292:	2b01      	cmp	r3, #1
 8101294:	d0f5      	beq.n	8101282 <CheckBMP280ChipID+0x46>
      }
    }

  }

  flag = 0;
 8101296:	4b08      	ldr	r3, [pc, #32]	; (81012b8 <CheckBMP280ChipID+0x7c>)
 8101298:	2200      	movs	r2, #0
 810129a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 810129c:	2300      	movs	r3, #0

}
 810129e:	4618      	mov	r0, r3
 81012a0:	3708      	adds	r7, #8
 81012a2:	46bd      	mov	sp, r7
 81012a4:	bd80      	pop	{r7, pc}
 81012a6:	bf00      	nop
 81012a8:	0810d4e0 	.word	0x0810d4e0
 81012ac:	0810d4e4 	.word	0x0810d4e4
 81012b0:	58020000 	.word	0x58020000
 81012b4:	100002f0 	.word	0x100002f0
 81012b8:	10000094 	.word	0x10000094

081012bc <Read16Bit>:
{
  return HAL_OK;
}

uint16_t Read16Bit(uint8_t reg)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b084      	sub	sp, #16
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	4603      	mov	r3, r0
 81012c4:	71fb      	strb	r3, [r7, #7]
   uint16_t result;
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81012c6:	2200      	movs	r2, #0
 81012c8:	2110      	movs	r1, #16
 81012ca:	4815      	ldr	r0, [pc, #84]	; (8101320 <Read16Bit+0x64>)
 81012cc:	f005 fb62 	bl	8106994 <HAL_GPIO_WritePin>
   uint8_t SerialData[3] = {(reg|0x80), 0, 0};
 81012d0:	79fb      	ldrb	r3, [r7, #7]
 81012d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81012d6:	b2db      	uxtb	r3, r3
 81012d8:	723b      	strb	r3, [r7, #8]
 81012da:	2300      	movs	r3, #0
 81012dc:	727b      	strb	r3, [r7, #9]
 81012de:	2300      	movs	r3, #0
 81012e0:	72bb      	strb	r3, [r7, #10]
   static uint8_t aRxBuffer[3]= {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 3);
 81012e2:	f107 0108 	add.w	r1, r7, #8
 81012e6:	2303      	movs	r3, #3
 81012e8:	4a0e      	ldr	r2, [pc, #56]	; (8101324 <Read16Bit+0x68>)
 81012ea:	480f      	ldr	r0, [pc, #60]	; (8101328 <Read16Bit+0x6c>)
 81012ec:	f008 fe16 	bl	8109f1c <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 81012f0:	e00c      	b.n	810130c <Read16Bit+0x50>
   {
     result = aRxBuffer[2] << 8 | aRxBuffer [1];
 81012f2:	4b0c      	ldr	r3, [pc, #48]	; (8101324 <Read16Bit+0x68>)
 81012f4:	789b      	ldrb	r3, [r3, #2]
 81012f6:	021b      	lsls	r3, r3, #8
 81012f8:	b21a      	sxth	r2, r3
 81012fa:	4b0a      	ldr	r3, [pc, #40]	; (8101324 <Read16Bit+0x68>)
 81012fc:	785b      	ldrb	r3, [r3, #1]
 81012fe:	b21b      	sxth	r3, r3
 8101300:	4313      	orrs	r3, r2
 8101302:	b21b      	sxth	r3, r3
 8101304:	81fb      	strh	r3, [r7, #14]
     flag = 0;
 8101306:	4b09      	ldr	r3, [pc, #36]	; (810132c <Read16Bit+0x70>)
 8101308:	2200      	movs	r2, #0
 810130a:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 810130c:	4b07      	ldr	r3, [pc, #28]	; (810132c <Read16Bit+0x70>)
 810130e:	681b      	ldr	r3, [r3, #0]
 8101310:	2b01      	cmp	r3, #1
 8101312:	d0ee      	beq.n	81012f2 <Read16Bit+0x36>

   }


   return result;
 8101314:	89fb      	ldrh	r3, [r7, #14]
}
 8101316:	4618      	mov	r0, r3
 8101318:	3710      	adds	r7, #16
 810131a:	46bd      	mov	sp, r7
 810131c:	bd80      	pop	{r7, pc}
 810131e:	bf00      	nop
 8101320:	58020000 	.word	0x58020000
 8101324:	10000098 	.word	0x10000098
 8101328:	100002f0 	.word	0x100002f0
 810132c:	10000094 	.word	0x10000094

08101330 <Read24Bit>:


uint32_t Read24Bit(uint8_t reg)
{
 8101330:	b580      	push	{r7, lr}
 8101332:	b084      	sub	sp, #16
 8101334:	af00      	add	r7, sp, #0
 8101336:	4603      	mov	r3, r0
 8101338:	71fb      	strb	r3, [r7, #7]
  uint32_t result;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810133a:	2200      	movs	r2, #0
 810133c:	2110      	movs	r1, #16
 810133e:	4817      	ldr	r0, [pc, #92]	; (810139c <Read24Bit+0x6c>)
 8101340:	f005 fb28 	bl	8106994 <HAL_GPIO_WritePin>
  uint8_t SerialData[4] = {(reg|0x80), 0, 0,0};
 8101344:	79fb      	ldrb	r3, [r7, #7]
 8101346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810134a:	b2db      	uxtb	r3, r3
 810134c:	723b      	strb	r3, [r7, #8]
 810134e:	2300      	movs	r3, #0
 8101350:	727b      	strb	r3, [r7, #9]
 8101352:	2300      	movs	r3, #0
 8101354:	72bb      	strb	r3, [r7, #10]
 8101356:	2300      	movs	r3, #0
 8101358:	72fb      	strb	r3, [r7, #11]
  static uint8_t aRxBuffer[4] = {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 4);
 810135a:	f107 0108 	add.w	r1, r7, #8
 810135e:	2304      	movs	r3, #4
 8101360:	4a0f      	ldr	r2, [pc, #60]	; (81013a0 <Read24Bit+0x70>)
 8101362:	4810      	ldr	r0, [pc, #64]	; (81013a4 <Read24Bit+0x74>)
 8101364:	f008 fdda 	bl	8109f1c <HAL_SPI_TransmitReceive_DMA>
  while(flag == 1)
 8101368:	e00f      	b.n	810138a <Read24Bit+0x5a>
     {
        result = aRxBuffer[1] << 16 | aRxBuffer[2] << 8 | aRxBuffer[3] >> 4;
 810136a:	4b0d      	ldr	r3, [pc, #52]	; (81013a0 <Read24Bit+0x70>)
 810136c:	785b      	ldrb	r3, [r3, #1]
 810136e:	041a      	lsls	r2, r3, #16
 8101370:	4b0b      	ldr	r3, [pc, #44]	; (81013a0 <Read24Bit+0x70>)
 8101372:	789b      	ldrb	r3, [r3, #2]
 8101374:	021b      	lsls	r3, r3, #8
 8101376:	4313      	orrs	r3, r2
 8101378:	4a09      	ldr	r2, [pc, #36]	; (81013a0 <Read24Bit+0x70>)
 810137a:	78d2      	ldrb	r2, [r2, #3]
 810137c:	0912      	lsrs	r2, r2, #4
 810137e:	b2d2      	uxtb	r2, r2
 8101380:	4313      	orrs	r3, r2
 8101382:	60fb      	str	r3, [r7, #12]
        flag = 0;
 8101384:	4b08      	ldr	r3, [pc, #32]	; (81013a8 <Read24Bit+0x78>)
 8101386:	2200      	movs	r2, #0
 8101388:	601a      	str	r2, [r3, #0]
  while(flag == 1)
 810138a:	4b07      	ldr	r3, [pc, #28]	; (81013a8 <Read24Bit+0x78>)
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	2b01      	cmp	r3, #1
 8101390:	d0eb      	beq.n	810136a <Read24Bit+0x3a>
     }


  return result;
 8101392:	68fb      	ldr	r3, [r7, #12]
}
 8101394:	4618      	mov	r0, r3
 8101396:	3710      	adds	r7, #16
 8101398:	46bd      	mov	sp, r7
 810139a:	bd80      	pop	{r7, pc}
 810139c:	58020000 	.word	0x58020000
 81013a0:	1000009c 	.word	0x1000009c
 81013a4:	100002f0 	.word	0x100002f0
 81013a8:	10000094 	.word	0x10000094

081013ac <ReadTemp>:

void ReadTemp(BMP280Handle* baro)
{
 81013ac:	b580      	push	{r7, lr}
 81013ae:	b086      	sub	sp, #24
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 81013b4:	20fa      	movs	r0, #250	; 0xfa
 81013b6:	f7ff ffbb 	bl	8101330 <Read24Bit>
 81013ba:	4603      	mov	r3, r0
 81013bc:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 81013be:	697b      	ldr	r3, [r7, #20]
 81013c0:	111b      	asrs	r3, r3, #4
 81013c2:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013c4:	697b      	ldr	r3, [r7, #20]
 81013c6:	10da      	asrs	r2, r3, #3
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	8b1b      	ldrh	r3, [r3, #24]
 81013cc:	005b      	lsls	r3, r3, #1
 81013ce:	1ad3      	subs	r3, r2, r3
         ((int32_t)baro->comp_vals.dig_T2)) >> 11;
 81013d0:	687a      	ldr	r2, [r7, #4]
 81013d2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013d6:	fb02 f303 	mul.w	r3, r2, r3
 81013da:	12db      	asrs	r3, r3, #11
 81013dc:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013de:	697b      	ldr	r3, [r7, #20]
 81013e0:	111b      	asrs	r3, r3, #4
 81013e2:	687a      	ldr	r2, [r7, #4]
 81013e4:	8b12      	ldrh	r2, [r2, #24]
 81013e6:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013e8:	697a      	ldr	r2, [r7, #20]
 81013ea:	1112      	asrs	r2, r2, #4
 81013ec:	6879      	ldr	r1, [r7, #4]
 81013ee:	8b09      	ldrh	r1, [r1, #24]
 81013f0:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013f2:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013f6:	131b      	asrs	r3, r3, #12
            12) *
           ((int32_t)baro->comp_vals.dig_T3)) >>
 81013f8:	687a      	ldr	r2, [r7, #4]
 81013fa:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
            12) *
 81013fe:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 8101402:	139b      	asrs	r3, r3, #14
 8101404:	60fb      	str	r3, [r7, #12]
          14;

  t_fine = var1 + var2;
 8101406:	693a      	ldr	r2, [r7, #16]
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	4413      	add	r3, r2
 810140c:	4a0d      	ldr	r2, [pc, #52]	; (8101444 <ReadTemp+0x98>)
 810140e:	6013      	str	r3, [r2, #0]

  float T = (t_fine * 5 + 128) >> 8;
 8101410:	4b0c      	ldr	r3, [pc, #48]	; (8101444 <ReadTemp+0x98>)
 8101412:	681a      	ldr	r2, [r3, #0]
 8101414:	4613      	mov	r3, r2
 8101416:	009b      	lsls	r3, r3, #2
 8101418:	4413      	add	r3, r2
 810141a:	3380      	adds	r3, #128	; 0x80
 810141c:	121b      	asrs	r3, r3, #8
 810141e:	ee07 3a90 	vmov	s15, r3
 8101422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101426:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T/100;
 810142a:	ed97 7a02 	vldr	s14, [r7, #8]
 810142e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8101448 <ReadTemp+0x9c>
 8101432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	edc3 7a00 	vstr	s15, [r3]

}
 810143c:	bf00      	nop
 810143e:	3718      	adds	r7, #24
 8101440:	46bd      	mov	sp, r7
 8101442:	bd80      	pop	{r7, pc}
 8101444:	100000b0 	.word	0x100000b0
 8101448:	42c80000 	.word	0x42c80000

0810144c <ReadPressure>:

void ReadPressure(BMP280Handle* baro)
{
 810144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101450:	b09c      	sub	sp, #112	; 0x70
 8101452:	af00      	add	r7, sp, #0
 8101454:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 8101456:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8101458:	f7ff ffa8 	bl	81013ac <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 810145c:	20f7      	movs	r0, #247	; 0xf7
 810145e:	f7ff ff67 	bl	8101330 <Read24Bit>
 8101462:	4603      	mov	r3, r0
 8101464:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>=4;
 8101466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101468:	111b      	asrs	r3, r3, #4
 810146a:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t)t_fine) - 128000;
 810146c:	4b6b      	ldr	r3, [pc, #428]	; (810161c <ReadPressure+0x1d0>)
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	461a      	mov	r2, r3
 8101472:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101476:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 810147a:	f143 35ff 	adc.w	r5, r3, #4294967295
 810147e:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t)baro->comp_vals.dig_P6;
 8101482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101486:	fb03 f102 	mul.w	r1, r3, r2
 810148a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810148c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810148e:	fb03 f302 	mul.w	r3, r3, r2
 8101492:	18ca      	adds	r2, r1, r3
 8101494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101496:	fba3 4503 	umull	r4, r5, r3, r3
 810149a:	1953      	adds	r3, r2, r5
 810149c:	461d      	mov	r5, r3
 810149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 81014a4:	b21a      	sxth	r2, r3
 81014a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014aa:	fb02 f005 	mul.w	r0, r2, r5
 81014ae:	fb04 f103 	mul.w	r1, r4, r3
 81014b2:	4401      	add	r1, r0
 81014b4:	fba4 2302 	umull	r2, r3, r4, r2
 81014b8:	4419      	add	r1, r3
 81014ba:	460b      	mov	r3, r1
 81014bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 81014c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t)baro->comp_vals.dig_P5) << 17);
 81014c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014c6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 81014ca:	b21a      	sxth	r2, r3
 81014cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014d2:	fb03 f001 	mul.w	r0, r3, r1
 81014d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81014d8:	fb02 f101 	mul.w	r1, r2, r1
 81014dc:	4408      	add	r0, r1
 81014de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014e0:	fba1 2302 	umull	r2, r3, r1, r2
 81014e4:	18c1      	adds	r1, r0, r3
 81014e6:	460b      	mov	r3, r1
 81014e8:	f04f 0000 	mov.w	r0, #0
 81014ec:	f04f 0100 	mov.w	r1, #0
 81014f0:	0459      	lsls	r1, r3, #17
 81014f2:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 81014f6:	0450      	lsls	r0, r2, #17
 81014f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81014fc:	eb12 0800 	adds.w	r8, r2, r0
 8101500:	eb43 0901 	adc.w	r9, r3, r1
 8101504:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t)baro->comp_vals.dig_P4) << 35);
 8101508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810150a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 810150e:	b21a      	sxth	r2, r3
 8101510:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101514:	f04f 0000 	mov.w	r0, #0
 8101518:	f04f 0100 	mov.w	r1, #0
 810151c:	00d1      	lsls	r1, r2, #3
 810151e:	2000      	movs	r0, #0
 8101520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101524:	1814      	adds	r4, r2, r0
 8101526:	61bc      	str	r4, [r7, #24]
 8101528:	414b      	adcs	r3, r1
 810152a:	61fb      	str	r3, [r7, #28]
 810152c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8101530:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101534:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101538:	fb03 f102 	mul.w	r1, r3, r2
 810153c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810153e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101540:	fb03 f302 	mul.w	r3, r3, r2
 8101544:	18ca      	adds	r2, r1, r3
 8101546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101548:	fba3 4503 	umull	r4, r5, r3, r3
 810154c:	1953      	adds	r3, r2, r5
 810154e:	461d      	mov	r5, r3
 8101550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101552:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8101556:	b21a      	sxth	r2, r3
 8101558:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810155c:	fb02 f005 	mul.w	r0, r2, r5
 8101560:	fb04 f103 	mul.w	r1, r4, r3
 8101564:	4401      	add	r1, r0
 8101566:	fba4 2302 	umull	r2, r3, r4, r2
 810156a:	4419      	add	r1, r3
 810156c:	460b      	mov	r3, r1
 810156e:	f04f 0800 	mov.w	r8, #0
 8101572:	f04f 0900 	mov.w	r9, #0
 8101576:	ea4f 2812 	mov.w	r8, r2, lsr #8
 810157a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 810157e:	ea4f 2923 	mov.w	r9, r3, asr #8
           ((var1 * (int64_t)baro->comp_vals.dig_P2) << 12);
 8101582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101584:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8101588:	b21a      	sxth	r2, r3
 810158a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810158e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101590:	fb03 f001 	mul.w	r0, r3, r1
 8101594:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101596:	fb02 f101 	mul.w	r1, r2, r1
 810159a:	1844      	adds	r4, r0, r1
 810159c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810159e:	fba1 0102 	umull	r0, r1, r1, r2
 81015a2:	1863      	adds	r3, r4, r1
 81015a4:	4619      	mov	r1, r3
 81015a6:	f04f 0200 	mov.w	r2, #0
 81015aa:	f04f 0300 	mov.w	r3, #0
 81015ae:	030b      	lsls	r3, r1, #12
 81015b0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 81015b4:	0302      	lsls	r2, r0, #12
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 81015b6:	eb18 0102 	adds.w	r1, r8, r2
 81015ba:	6139      	str	r1, [r7, #16]
 81015bc:	eb49 0303 	adc.w	r3, r9, r3
 81015c0:	617b      	str	r3, [r7, #20]
 81015c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 81015c6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 =
        (((((int64_t)1) << 47) + var1)) * ((int64_t)baro->comp_vals.dig_P1) >> 33;
 81015ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81015ce:	1c11      	adds	r1, r2, #0
 81015d0:	6439      	str	r1, [r7, #64]	; 0x40
 81015d2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 81015d6:	647b      	str	r3, [r7, #68]	; 0x44
 81015d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015da:	8bdb      	ldrh	r3, [r3, #30]
 81015dc:	b29a      	uxth	r2, r3
 81015de:	f04f 0300 	mov.w	r3, #0
 81015e2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 81015e6:	4629      	mov	r1, r5
 81015e8:	fb02 f001 	mul.w	r0, r2, r1
 81015ec:	4621      	mov	r1, r4
 81015ee:	fb01 f103 	mul.w	r1, r1, r3
 81015f2:	4401      	add	r1, r0
 81015f4:	4620      	mov	r0, r4
 81015f6:	fba0 2302 	umull	r2, r3, r0, r2
 81015fa:	4419      	add	r1, r3
 81015fc:	460b      	mov	r3, r1
  var1 =
 81015fe:	f04f 0000 	mov.w	r0, #0
 8101602:	f04f 0100 	mov.w	r1, #0
 8101606:	1058      	asrs	r0, r3, #1
 8101608:	17d9      	asrs	r1, r3, #31
 810160a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    if (var1 == 0) {
 810160e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101612:	4313      	orrs	r3, r2
 8101614:	f000 80f5 	beq.w	8101802 <ReadPressure+0x3b6>
 8101618:	e004      	b.n	8101624 <ReadPressure+0x1d8>
 810161a:	bf00      	nop
 810161c:	100000b0 	.word	0x100000b0
 8101620:	43800000 	.word	0x43800000
        return; // avoid exception caused by division by zero
      }
    p = 1048576 - adc_P;
 8101624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101626:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810162a:	461a      	mov	r2, r3
 810162c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101630:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    p = (((p << 31) - var2) * 3125) / var1;
 8101634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101636:	105b      	asrs	r3, r3, #1
 8101638:	63fb      	str	r3, [r7, #60]	; 0x3c
 810163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810163c:	07db      	lsls	r3, r3, #31
 810163e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101644:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8101648:	4621      	mov	r1, r4
 810164a:	ebb1 0a02 	subs.w	sl, r1, r2
 810164e:	4629      	mov	r1, r5
 8101650:	eb61 0b03 	sbc.w	fp, r1, r3
 8101654:	4652      	mov	r2, sl
 8101656:	465b      	mov	r3, fp
 8101658:	1891      	adds	r1, r2, r2
 810165a:	60b9      	str	r1, [r7, #8]
 810165c:	415b      	adcs	r3, r3
 810165e:	60fb      	str	r3, [r7, #12]
 8101660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101664:	eb12 020a 	adds.w	r2, r2, sl
 8101668:	eb43 030b 	adc.w	r3, r3, fp
 810166c:	f04f 0000 	mov.w	r0, #0
 8101670:	f04f 0100 	mov.w	r1, #0
 8101674:	0199      	lsls	r1, r3, #6
 8101676:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 810167a:	0190      	lsls	r0, r2, #6
 810167c:	1812      	adds	r2, r2, r0
 810167e:	eb41 0303 	adc.w	r3, r1, r3
 8101682:	f04f 0000 	mov.w	r0, #0
 8101686:	f04f 0100 	mov.w	r1, #0
 810168a:	0099      	lsls	r1, r3, #2
 810168c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101690:	0090      	lsls	r0, r2, #2
 8101692:	4602      	mov	r2, r0
 8101694:	460b      	mov	r3, r1
 8101696:	eb12 020a 	adds.w	r2, r2, sl
 810169a:	eb43 030b 	adc.w	r3, r3, fp
 810169e:	f04f 0000 	mov.w	r0, #0
 81016a2:	f04f 0100 	mov.w	r1, #0
 81016a6:	0099      	lsls	r1, r3, #2
 81016a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 81016ac:	0090      	lsls	r0, r2, #2
 81016ae:	4602      	mov	r2, r0
 81016b0:	460b      	mov	r3, r1
 81016b2:	eb12 010a 	adds.w	r1, r2, sl
 81016b6:	6339      	str	r1, [r7, #48]	; 0x30
 81016b8:	eb43 030b 	adc.w	r3, r3, fp
 81016bc:	637b      	str	r3, [r7, #52]	; 0x34
 81016be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81016c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81016c6:	f7ff fbd1 	bl	8100e6c <__aeabi_ldivmod>
 81016ca:	4602      	mov	r2, r0
 81016cc:	460b      	mov	r3, r1
 81016ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    var1 = (((int64_t)baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 81016d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016d4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 81016d8:	b218      	sxth	r0, r3
 81016da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 81016de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81016e2:	f04f 0200 	mov.w	r2, #0
 81016e6:	f04f 0300 	mov.w	r3, #0
 81016ea:	0b62      	lsrs	r2, r4, #13
 81016ec:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81016f0:	136b      	asrs	r3, r5, #13
 81016f2:	fb02 f501 	mul.w	r5, r2, r1
 81016f6:	fb00 f403 	mul.w	r4, r0, r3
 81016fa:	442c      	add	r4, r5
 81016fc:	fba0 0102 	umull	r0, r1, r0, r2
 8101700:	1863      	adds	r3, r4, r1
 8101702:	4619      	mov	r1, r3
 8101704:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8101708:	f04f 0200 	mov.w	r2, #0
 810170c:	f04f 0300 	mov.w	r3, #0
 8101710:	0b62      	lsrs	r2, r4, #13
 8101712:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8101716:	136b      	asrs	r3, r5, #13
 8101718:	fb02 f501 	mul.w	r5, r2, r1
 810171c:	fb00 f403 	mul.w	r4, r0, r3
 8101720:	442c      	add	r4, r5
 8101722:	fba0 0102 	umull	r0, r1, r0, r2
 8101726:	1863      	adds	r3, r4, r1
 8101728:	4619      	mov	r1, r3
 810172a:	f04f 0200 	mov.w	r2, #0
 810172e:	f04f 0300 	mov.w	r3, #0
 8101732:	0e42      	lsrs	r2, r0, #25
 8101734:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8101738:	164b      	asrs	r3, r1, #25
 810173a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    var2 = (((int64_t)baro->comp_vals.dig_P8) * p) >> 19;
 810173e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101740:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8101744:	b21a      	sxth	r2, r3
 8101746:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810174a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810174c:	fb03 f001 	mul.w	r0, r3, r1
 8101750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8101752:	fb02 f101 	mul.w	r1, r2, r1
 8101756:	1844      	adds	r4, r0, r1
 8101758:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810175a:	fba1 0102 	umull	r0, r1, r1, r2
 810175e:	1863      	adds	r3, r4, r1
 8101760:	4619      	mov	r1, r3
 8101762:	f04f 0200 	mov.w	r2, #0
 8101766:	f04f 0300 	mov.w	r3, #0
 810176a:	0cc2      	lsrs	r2, r0, #19
 810176c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8101770:	14cb      	asrs	r3, r1, #19
 8101772:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    p = ((p + var1 + var2) >> 8) + (((int64_t)baro->comp_vals.dig_P7) << 4);
 8101776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 810177a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810177e:	1884      	adds	r4, r0, r2
 8101780:	62bc      	str	r4, [r7, #40]	; 0x28
 8101782:	eb41 0303 	adc.w	r3, r1, r3
 8101786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101788:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 810178c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101790:	4621      	mov	r1, r4
 8101792:	1889      	adds	r1, r1, r2
 8101794:	6239      	str	r1, [r7, #32]
 8101796:	4629      	mov	r1, r5
 8101798:	eb43 0101 	adc.w	r1, r3, r1
 810179c:	6279      	str	r1, [r7, #36]	; 0x24
 810179e:	f04f 0000 	mov.w	r0, #0
 81017a2:	f04f 0100 	mov.w	r1, #0
 81017a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 81017aa:	4623      	mov	r3, r4
 81017ac:	0a18      	lsrs	r0, r3, #8
 81017ae:	462b      	mov	r3, r5
 81017b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 81017b4:	462b      	mov	r3, r5
 81017b6:	1219      	asrs	r1, r3, #8
 81017b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017ba:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 81017be:	b21c      	sxth	r4, r3
 81017c0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 81017c4:	f04f 0200 	mov.w	r2, #0
 81017c8:	f04f 0300 	mov.w	r3, #0
 81017cc:	012b      	lsls	r3, r5, #4
 81017ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 81017d2:	0122      	lsls	r2, r4, #4
 81017d4:	1884      	adds	r4, r0, r2
 81017d6:	603c      	str	r4, [r7, #0]
 81017d8:	eb41 0303 	adc.w	r3, r1, r3
 81017dc:	607b      	str	r3, [r7, #4]
 81017de:	e9d7 3400 	ldrd	r3, r4, [r7]
 81017e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    baro->pressure = (float) p/256;
 81017e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81017ea:	f7ff fb01 	bl	8100df0 <__aeabi_l2f>
 81017ee:	ee06 0a90 	vmov	s13, r0
 81017f2:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8101620 <ReadPressure+0x1d4>
 81017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017fc:	edc3 7a01 	vstr	s15, [r3, #4]
 8101800:	e000      	b.n	8101804 <ReadPressure+0x3b8>
        return; // avoid exception caused by division by zero
 8101802:	bf00      	nop

}
 8101804:	3770      	adds	r7, #112	; 0x70
 8101806:	46bd      	mov	sp, r7
 8101808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810180c:	0000      	movs	r0, r0
	...

08101810 <ReadAltitude>:

void ReadAltitude(BMP280Handle* baro)
{
 8101810:	b580      	push	{r7, lr}
 8101812:	b084      	sub	sp, #16
 8101814:	af00      	add	r7, sp, #0
 8101816:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 8101818:	f04f 0300 	mov.w	r3, #0
 810181c:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	685b      	ldr	r3, [r3, #4]
 8101822:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure/ SEA_LEVEL_PRESSURE), (1/5.255)));
 8101824:	edd7 7a02 	vldr	s15, [r7, #8]
 8101828:	ed9f 7a25 	vldr	s14, [pc, #148]	; 81018c0 <ReadAltitude+0xb0>
 810182c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101830:	ee16 0a90 	vmov	r0, s13
 8101834:	f7fe feb4 	bl	81005a0 <__aeabi_f2d>
 8101838:	4602      	mov	r2, r0
 810183a:	460b      	mov	r3, r1
 810183c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 81018b0 <ReadAltitude+0xa0>
 8101840:	ec43 2b10 	vmov	d0, r2, r3
 8101844:	f00a fe88 	bl	810c558 <pow>
 8101848:	ec53 2b10 	vmov	r2, r3, d0
 810184c:	f04f 0000 	mov.w	r0, #0
 8101850:	491c      	ldr	r1, [pc, #112]	; (81018c4 <ReadAltitude+0xb4>)
 8101852:	f7fe fd45 	bl	81002e0 <__aeabi_dsub>
 8101856:	4602      	mov	r2, r0
 8101858:	460b      	mov	r3, r1
 810185a:	4610      	mov	r0, r2
 810185c:	4619      	mov	r1, r3
 810185e:	a316      	add	r3, pc, #88	; (adr r3, 81018b8 <ReadAltitude+0xa8>)
 8101860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101864:	f7fe fef4 	bl	8100650 <__aeabi_dmul>
 8101868:	4602      	mov	r2, r0
 810186a:	460b      	mov	r3, r1
 810186c:	4610      	mov	r0, r2
 810186e:	4619      	mov	r1, r3
 8101870:	f7ff f99e 	bl	8100bb0 <__aeabi_d2f>
 8101874:	4603      	mov	r3, r0
 8101876:	60fb      	str	r3, [r7, #12]

  if((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 8101878:	edd7 7a03 	vldr	s15, [r7, #12]
 810187c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 81018c8 <ReadAltitude+0xb8>
 8101880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101888:	d90c      	bls.n	81018a4 <ReadAltitude+0x94>
 810188a:	edd7 7a03 	vldr	s15, [r7, #12]
 810188e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 81018cc <ReadAltitude+0xbc>
 8101892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810189a:	da03      	bge.n	81018a4 <ReadAltitude+0x94>
  {
    return;
  }

  baro->altitude = altitude;
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	68fa      	ldr	r2, [r7, #12]
 81018a0:	609a      	str	r2, [r3, #8]
 81018a2:	e000      	b.n	81018a6 <ReadAltitude+0x96>
    return;
 81018a4:	bf00      	nop

}
 81018a6:	3710      	adds	r7, #16
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	f3af 8000 	nop.w
 81018b0:	ccd9456c 	.word	0xccd9456c
 81018b4:	3fc85b95 	.word	0x3fc85b95
 81018b8:	00000000 	.word	0x00000000
 81018bc:	40e5a540 	.word	0x40e5a540
 81018c0:	47c5e680 	.word	0x47c5e680
 81018c4:	3ff00000 	.word	0x3ff00000
 81018c8:	c3fa0000 	.word	0xc3fa0000
 81018cc:	460ca000 	.word	0x460ca000

081018d0 <ReadCalibCoefficients>:



void ReadCalibCoefficients(BMP280Handle* baro)
{
 81018d0:	b580      	push	{r7, lr}
 81018d2:	b082      	sub	sp, #8
 81018d4:	af00      	add	r7, sp, #0
 81018d6:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16Bit(dig_T1);
 81018d8:	2088      	movs	r0, #136	; 0x88
 81018da:	f7ff fcef 	bl	81012bc <Read16Bit>
 81018de:	4603      	mov	r3, r0
 81018e0:	461a      	mov	r2, r3
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_T2 = Read16Bit(dig_T2);
 81018e6:	208a      	movs	r0, #138	; 0x8a
 81018e8:	f7ff fce8 	bl	81012bc <Read16Bit>
 81018ec:	4603      	mov	r3, r0
 81018ee:	b21a      	sxth	r2, r3
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_T3 = Read16Bit(dig_T3);
 81018f4:	208c      	movs	r0, #140	; 0x8c
 81018f6:	f7ff fce1 	bl	81012bc <Read16Bit>
 81018fa:	4603      	mov	r3, r0
 81018fc:	b21a      	sxth	r2, r3
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P1 = Read16Bit(dig_P1);
 8101902:	208e      	movs	r0, #142	; 0x8e
 8101904:	f7ff fcda 	bl	81012bc <Read16Bit>
 8101908:	4603      	mov	r3, r0
 810190a:	461a      	mov	r2, r3
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P2 = Read16Bit(dig_P2);
 8101910:	2090      	movs	r0, #144	; 0x90
 8101912:	f7ff fcd3 	bl	81012bc <Read16Bit>
 8101916:	4603      	mov	r3, r0
 8101918:	b21a      	sxth	r2, r3
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P3 = Read16Bit(dig_P3);
 810191e:	2092      	movs	r0, #146	; 0x92
 8101920:	f7ff fccc 	bl	81012bc <Read16Bit>
 8101924:	4603      	mov	r3, r0
 8101926:	b21a      	sxth	r2, r3
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P4 = Read16Bit(dig_P4);
 810192c:	2094      	movs	r0, #148	; 0x94
 810192e:	f7ff fcc5 	bl	81012bc <Read16Bit>
 8101932:	4603      	mov	r3, r0
 8101934:	b21a      	sxth	r2, r3
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P5 = Read16Bit(dig_P5);
 810193a:	2096      	movs	r0, #150	; 0x96
 810193c:	f7ff fcbe 	bl	81012bc <Read16Bit>
 8101940:	4603      	mov	r3, r0
 8101942:	b21a      	sxth	r2, r3
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P6 = Read16Bit(dig_P6);
 8101948:	2098      	movs	r0, #152	; 0x98
 810194a:	f7ff fcb7 	bl	81012bc <Read16Bit>
 810194e:	4603      	mov	r3, r0
 8101950:	b21a      	sxth	r2, r3
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	851a      	strh	r2, [r3, #40]	; 0x28
  baro->comp_vals.dig_P7 = Read16Bit(dig_P7);
 8101956:	209a      	movs	r0, #154	; 0x9a
 8101958:	f7ff fcb0 	bl	81012bc <Read16Bit>
 810195c:	4603      	mov	r3, r0
 810195e:	b21a      	sxth	r2, r3
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	855a      	strh	r2, [r3, #42]	; 0x2a
  baro->comp_vals.dig_P8 = Read16Bit(dig_P8);
 8101964:	209c      	movs	r0, #156	; 0x9c
 8101966:	f7ff fca9 	bl	81012bc <Read16Bit>
 810196a:	4603      	mov	r3, r0
 810196c:	b21a      	sxth	r2, r3
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	859a      	strh	r2, [r3, #44]	; 0x2c
  baro->comp_vals.dig_P9 = Read16Bit(dig_P9);
 8101972:	209e      	movs	r0, #158	; 0x9e
 8101974:	f7ff fca2 	bl	81012bc <Read16Bit>
 8101978:	4603      	mov	r3, r0
 810197a:	b21a      	sxth	r2, r3
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 8101980:	bf00      	nop
 8101982:	3708      	adds	r7, #8
 8101984:	46bd      	mov	sp, r7
 8101986:	bd80      	pop	{r7, pc}

08101988 <setConfig>:
void WriteRegister(uint8_t reg, uint8_t data)
{

}
uint8_t setConfig(BMP280Handle* baro)
{
 8101988:	b580      	push	{r7, lr}
 810198a:	b084      	sub	sp, #16
 810198c:	af00      	add	r7, sp, #0
 810198e:	6078      	str	r0, [r7, #4]


    // Ultra High resolution 26.3 Hz
   baro->config.mode = NORMAL;
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	2203      	movs	r2, #3
 8101994:	749a      	strb	r2, [r3, #18]
   baro->config.pressure_oversampling =  X16; // X16;
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	2205      	movs	r2, #5
 810199a:	755a      	strb	r2, [r3, #21]
   baro->config.temp_oversampling =  X2; //X2;
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	2202      	movs	r2, #2
 81019a0:	759a      	strb	r2, [r3, #22]

   uint8_t SerialData[2] = {0};
 81019a2:	2300      	movs	r3, #0
 81019a4:	81bb      	strh	r3, [r7, #12]
   uint8_t aRxBuffer[3]= {0};
 81019a6:	4b3c      	ldr	r3, [pc, #240]	; (8101a98 <setConfig+0x110>)
 81019a8:	881b      	ldrh	r3, [r3, #0]
 81019aa:	813b      	strh	r3, [r7, #8]
 81019ac:	2300      	movs	r3, #0
 81019ae:	72bb      	strb	r3, [r7, #10]
   SerialData[0] = BMP280_REG_CTRL_MEAS & ~0x80;
 81019b0:	2374      	movs	r3, #116	; 0x74
 81019b2:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode ;
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	7d9b      	ldrb	r3, [r3, #22]
 81019b8:	015b      	lsls	r3, r3, #5
 81019ba:	b25a      	sxtb	r2, r3
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	7d5b      	ldrb	r3, [r3, #21]
 81019c0:	009b      	lsls	r3, r3, #2
 81019c2:	b25b      	sxtb	r3, r3
 81019c4:	4313      	orrs	r3, r2
 81019c6:	b25a      	sxtb	r2, r3
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	7c9b      	ldrb	r3, [r3, #18]
 81019cc:	b25b      	sxtb	r3, r3
 81019ce:	4313      	orrs	r3, r2
 81019d0:	b25b      	sxtb	r3, r3
 81019d2:	b2db      	uxtb	r3, r3
 81019d4:	737b      	strb	r3, [r7, #13]
   //SerialData[1] = 0x27;

   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81019d6:	2200      	movs	r2, #0
 81019d8:	2110      	movs	r1, #16
 81019da:	4830      	ldr	r0, [pc, #192]	; (8101a9c <setConfig+0x114>)
 81019dc:	f004 ffda 	bl	8106994 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 81019e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81019e4:	f001 fe10 	bl	8103608 <HAL_Delay>

   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 81019e8:	f107 0208 	add.w	r2, r7, #8
 81019ec:	f107 010c 	add.w	r1, r7, #12
 81019f0:	2303      	movs	r3, #3
 81019f2:	482b      	ldr	r0, [pc, #172]	; (8101aa0 <setConfig+0x118>)
 81019f4:	f008 fa92 	bl	8109f1c <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 81019f8:	e010      	b.n	8101a1c <setConfig+0x94>
   {
        memset(SerialData, 0, sizeof(SerialData));
 81019fa:	f107 030c 	add.w	r3, r7, #12
 81019fe:	2202      	movs	r2, #2
 8101a00:	2100      	movs	r1, #0
 8101a02:	4618      	mov	r0, r3
 8101a04:	f00a fda0 	bl	810c548 <memset>
        memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8101a08:	f107 0308 	add.w	r3, r7, #8
 8101a0c:	2203      	movs	r2, #3
 8101a0e:	2100      	movs	r1, #0
 8101a10:	4618      	mov	r0, r3
 8101a12:	f00a fd99 	bl	810c548 <memset>
        flag  = 0;
 8101a16:	4b23      	ldr	r3, [pc, #140]	; (8101aa4 <setConfig+0x11c>)
 8101a18:	2200      	movs	r2, #0
 8101a1a:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 8101a1c:	4b21      	ldr	r3, [pc, #132]	; (8101aa4 <setConfig+0x11c>)
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	2b01      	cmp	r3, #1
 8101a22:	d0ea      	beq.n	81019fa <setConfig+0x72>
   }


       baro->config.IIR_Filter = FILTER_OFF;
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	2200      	movs	r2, #0
 8101a28:	74da      	strb	r2, [r3, #19]
       baro->config.standby = STANDBY_0_5;
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	2200      	movs	r2, #0
 8101a2e:	751a      	strb	r2, [r3, #20]

       SerialData[0] = BMP280_REG_CONFIG & ~0x80;
 8101a30:	2375      	movs	r3, #117	; 0x75
 8101a32:	733b      	strb	r3, [r7, #12]
       SerialData[1] = baro->config.standby << 5 | baro->config.IIR_Filter ;
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	7d1b      	ldrb	r3, [r3, #20]
 8101a38:	015b      	lsls	r3, r3, #5
 8101a3a:	b25a      	sxtb	r2, r3
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	7cdb      	ldrb	r3, [r3, #19]
 8101a40:	b25b      	sxtb	r3, r3
 8101a42:	4313      	orrs	r3, r2
 8101a44:	b25b      	sxtb	r3, r3
 8101a46:	b2db      	uxtb	r3, r3
 8101a48:	737b      	strb	r3, [r7, #13]
       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	2110      	movs	r1, #16
 8101a4e:	4813      	ldr	r0, [pc, #76]	; (8101a9c <setConfig+0x114>)
 8101a50:	f004 ffa0 	bl	8106994 <HAL_GPIO_WritePin>

       uint8_t res = HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101a54:	f107 0208 	add.w	r2, r7, #8
 8101a58:	f107 010c 	add.w	r1, r7, #12
 8101a5c:	2303      	movs	r3, #3
 8101a5e:	4810      	ldr	r0, [pc, #64]	; (8101aa0 <setConfig+0x118>)
 8101a60:	f008 fa5c 	bl	8109f1c <HAL_SPI_TransmitReceive_DMA>
 8101a64:	4603      	mov	r3, r0
 8101a66:	73fb      	strb	r3, [r7, #15]

       while(flag == 1)
 8101a68:	bf00      	nop
 8101a6a:	4b0e      	ldr	r3, [pc, #56]	; (8101aa4 <setConfig+0x11c>)
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	2b01      	cmp	r3, #1
 8101a70:	d10c      	bne.n	8101a8c <setConfig+0x104>
       {
          if(res == HAL_OK)
 8101a72:	7bfb      	ldrb	r3, [r7, #15]
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d104      	bne.n	8101a82 <setConfig+0xfa>
          {
            flag = 0;
 8101a78:	4b0a      	ldr	r3, [pc, #40]	; (8101aa4 <setConfig+0x11c>)
 8101a7a:	2200      	movs	r2, #0
 8101a7c:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8101a7e:	2300      	movs	r3, #0
 8101a80:	e005      	b.n	8101a8e <setConfig+0x106>
          }

          else
          {
            flag = 0;
 8101a82:	4b08      	ldr	r3, [pc, #32]	; (8101aa4 <setConfig+0x11c>)
 8101a84:	2200      	movs	r2, #0
 8101a86:	601a      	str	r2, [r3, #0]
              return HAL_ERROR;
 8101a88:	2301      	movs	r3, #1
 8101a8a:	e000      	b.n	8101a8e <setConfig+0x106>
          }

       }


       return HAL_OK;
 8101a8c:	2300      	movs	r3, #0


}
 8101a8e:	4618      	mov	r0, r3
 8101a90:	3710      	adds	r7, #16
 8101a92:	46bd      	mov	sp, r7
 8101a94:	bd80      	pop	{r7, pc}
 8101a96:	bf00      	nop
 8101a98:	0810d4e4 	.word	0x0810d4e4
 8101a9c:	58020000 	.word	0x58020000
 8101aa0:	100002f0 	.word	0x100002f0
 8101aa4:	10000094 	.word	0x10000094

08101aa8 <HAL_SPI_TxRxCpltCallback>:

void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8101aa8:	b580      	push	{r7, lr}
 8101aaa:	b082      	sub	sp, #8
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	4a07      	ldr	r2, [pc, #28]	; (8101ad4 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8101ab6:	4293      	cmp	r3, r2
 8101ab8:	d107      	bne.n	8101aca <HAL_SPI_TxRxCpltCallback+0x22>
    {
      flag = 1;
 8101aba:	4b07      	ldr	r3, [pc, #28]	; (8101ad8 <HAL_SPI_TxRxCpltCallback+0x30>)
 8101abc:	2201      	movs	r2, #1
 8101abe:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8101ac0:	2201      	movs	r2, #1
 8101ac2:	2110      	movs	r1, #16
 8101ac4:	4805      	ldr	r0, [pc, #20]	; (8101adc <HAL_SPI_TxRxCpltCallback+0x34>)
 8101ac6:	f004 ff65 	bl	8106994 <HAL_GPIO_WritePin>
    }
}
 8101aca:	bf00      	nop
 8101acc:	3708      	adds	r7, #8
 8101ace:	46bd      	mov	sp, r7
 8101ad0:	bd80      	pop	{r7, pc}
 8101ad2:	bf00      	nop
 8101ad4:	40013000 	.word	0x40013000
 8101ad8:	10000094 	.word	0x10000094
 8101adc:	58020000 	.word	0x58020000

08101ae0 <ResetBMP280>:
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);

}

uint8_t ResetBMP280(void)
{
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	b082      	sub	sp, #8
 8101ae4:	af00      	add	r7, sp, #0
   uint8_t SerialData[2] = {(BMP280_REG_RESET & ~0x80), BMP280_RESET_VALUE}; // Register address, Data,
 8101ae6:	f24b 6360 	movw	r3, #46688	; 0xb660
 8101aea:	80bb      	strh	r3, [r7, #4]
   static uint8_t aRxBuffer[3]= {0};
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101aec:	2200      	movs	r2, #0
 8101aee:	2110      	movs	r1, #16
 8101af0:	4809      	ldr	r0, [pc, #36]	; (8101b18 <ResetBMP280+0x38>)
 8101af2:	f004 ff4f 	bl	8106994 <HAL_GPIO_WritePin>

   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101af6:	1d39      	adds	r1, r7, #4
 8101af8:	2302      	movs	r3, #2
 8101afa:	4a08      	ldr	r2, [pc, #32]	; (8101b1c <ResetBMP280+0x3c>)
 8101afc:	4808      	ldr	r0, [pc, #32]	; (8101b20 <ResetBMP280+0x40>)
 8101afe:	f008 fa0d 	bl	8109f1c <HAL_SPI_TransmitReceive_DMA>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d101      	bne.n	8101b0c <ResetBMP280+0x2c>
   {
     return HAL_OK;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	e000      	b.n	8101b0e <ResetBMP280+0x2e>
//     return HAL_OK;
//   }

   else
   {
     return HAL_ERROR;
 8101b0c:	2301      	movs	r3, #1
   }



}
 8101b0e:	4618      	mov	r0, r3
 8101b10:	3708      	adds	r7, #8
 8101b12:	46bd      	mov	sp, r7
 8101b14:	bd80      	pop	{r7, pc}
 8101b16:	bf00      	nop
 8101b18:	58020000 	.word	0x58020000
 8101b1c:	100000a0 	.word	0x100000a0
 8101b20:	100002f0 	.word	0x100002f0

08101b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101b24:	b580      	push	{r7, lr}
 8101b26:	b082      	sub	sp, #8
 8101b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101b2a:	4b29      	ldr	r3, [pc, #164]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b30:	4a27      	ldr	r2, [pc, #156]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b32:	f043 0301 	orr.w	r3, r3, #1
 8101b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b3a:	4b25      	ldr	r3, [pc, #148]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b40:	f003 0301 	and.w	r3, r3, #1
 8101b44:	607b      	str	r3, [r7, #4]
 8101b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b48:	4b21      	ldr	r3, [pc, #132]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b4e:	4a20      	ldr	r2, [pc, #128]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b50:	f043 0302 	orr.w	r3, r3, #2
 8101b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b58:	4b1d      	ldr	r3, [pc, #116]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b5e:	f003 0302 	and.w	r3, r3, #2
 8101b62:	603b      	str	r3, [r7, #0]
 8101b64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b66:	2200      	movs	r2, #0
 8101b68:	2100      	movs	r1, #0
 8101b6a:	200b      	movs	r0, #11
 8101b6c:	f001 fe4b 	bl	8103806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101b70:	200b      	movs	r0, #11
 8101b72:	f001 fe62 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101b76:	2200      	movs	r2, #0
 8101b78:	2100      	movs	r1, #0
 8101b7a:	200c      	movs	r0, #12
 8101b7c:	f001 fe43 	bl	8103806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101b80:	200c      	movs	r0, #12
 8101b82:	f001 fe5a 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101b86:	2200      	movs	r2, #0
 8101b88:	2100      	movs	r1, #0
 8101b8a:	200d      	movs	r0, #13
 8101b8c:	f001 fe3b 	bl	8103806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101b90:	200d      	movs	r0, #13
 8101b92:	f001 fe52 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101b96:	2200      	movs	r2, #0
 8101b98:	2100      	movs	r1, #0
 8101b9a:	200e      	movs	r0, #14
 8101b9c:	f001 fe33 	bl	8103806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101ba0:	200e      	movs	r0, #14
 8101ba2:	f001 fe4a 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101ba6:	2200      	movs	r2, #0
 8101ba8:	2100      	movs	r1, #0
 8101baa:	202f      	movs	r0, #47	; 0x2f
 8101bac:	f001 fe2b 	bl	8103806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101bb0:	202f      	movs	r0, #47	; 0x2f
 8101bb2:	f001 fe42 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101bb6:	2200      	movs	r2, #0
 8101bb8:	2100      	movs	r1, #0
 8101bba:	2038      	movs	r0, #56	; 0x38
 8101bbc:	f001 fe23 	bl	8103806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101bc0:	2038      	movs	r0, #56	; 0x38
 8101bc2:	f001 fe3a 	bl	810383a <HAL_NVIC_EnableIRQ>

}
 8101bc6:	bf00      	nop
 8101bc8:	3708      	adds	r7, #8
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	bd80      	pop	{r7, pc}
 8101bce:	bf00      	nop
 8101bd0:	58024400 	.word	0x58024400

08101bd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b088      	sub	sp, #32
 8101bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bda:	f107 030c 	add.w	r3, r7, #12
 8101bde:	2200      	movs	r2, #0
 8101be0:	601a      	str	r2, [r3, #0]
 8101be2:	605a      	str	r2, [r3, #4]
 8101be4:	609a      	str	r2, [r3, #8]
 8101be6:	60da      	str	r2, [r3, #12]
 8101be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bea:	4b22      	ldr	r3, [pc, #136]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf0:	4a20      	ldr	r2, [pc, #128]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101bf2:	f043 0301 	orr.w	r3, r3, #1
 8101bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bfa:	4b1e      	ldr	r3, [pc, #120]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c00:	f003 0301 	and.w	r3, r3, #1
 8101c04:	60bb      	str	r3, [r7, #8]
 8101c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c08:	4b1a      	ldr	r3, [pc, #104]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c0e:	4a19      	ldr	r2, [pc, #100]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c10:	f043 0308 	orr.w	r3, r3, #8
 8101c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c18:	4b16      	ldr	r3, [pc, #88]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c1e:	f003 0308 	and.w	r3, r3, #8
 8101c22:	607b      	str	r3, [r7, #4]
 8101c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c26:	4b13      	ldr	r3, [pc, #76]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c2c:	4a11      	ldr	r2, [pc, #68]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c2e:	f043 0302 	orr.w	r3, r3, #2
 8101c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c36:	4b0f      	ldr	r3, [pc, #60]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c3c:	f003 0302 	and.w	r3, r3, #2
 8101c40:	603b      	str	r3, [r7, #0]
 8101c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101c44:	2200      	movs	r2, #0
 8101c46:	2110      	movs	r1, #16
 8101c48:	480b      	ldr	r0, [pc, #44]	; (8101c78 <MX_GPIO_Init+0xa4>)
 8101c4a:	f004 fea3 	bl	8106994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c4e:	2310      	movs	r3, #16
 8101c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c52:	2301      	movs	r3, #1
 8101c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c56:	2300      	movs	r3, #0
 8101c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c5a:	2300      	movs	r3, #0
 8101c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c5e:	f107 030c 	add.w	r3, r7, #12
 8101c62:	4619      	mov	r1, r3
 8101c64:	4804      	ldr	r0, [pc, #16]	; (8101c78 <MX_GPIO_Init+0xa4>)
 8101c66:	f004 fce5 	bl	8106634 <HAL_GPIO_Init>

}
 8101c6a:	bf00      	nop
 8101c6c:	3720      	adds	r7, #32
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	bd80      	pop	{r7, pc}
 8101c72:	bf00      	nop
 8101c74:	58024400 	.word	0x58024400
 8101c78:	58020000 	.word	0x58020000

08101c7c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101c7c:	b580      	push	{r7, lr}
 8101c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101c80:	4b1b      	ldr	r3, [pc, #108]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c82:	4a1c      	ldr	r2, [pc, #112]	; (8101cf4 <MX_I2C1_Init+0x78>)
 8101c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101c86:	4b1a      	ldr	r3, [pc, #104]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c88:	4a1b      	ldr	r2, [pc, #108]	; (8101cf8 <MX_I2C1_Init+0x7c>)
 8101c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101c8c:	4b18      	ldr	r3, [pc, #96]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c8e:	2200      	movs	r2, #0
 8101c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101c92:	4b17      	ldr	r3, [pc, #92]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c94:	2201      	movs	r2, #1
 8101c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101c98:	4b15      	ldr	r3, [pc, #84]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c9a:	2200      	movs	r2, #0
 8101c9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101c9e:	4b14      	ldr	r3, [pc, #80]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101ca0:	2200      	movs	r2, #0
 8101ca2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101ca4:	4b12      	ldr	r3, [pc, #72]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101ca6:	2200      	movs	r2, #0
 8101ca8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101caa:	4b11      	ldr	r3, [pc, #68]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cac:	2200      	movs	r2, #0
 8101cae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101cb0:	4b0f      	ldr	r3, [pc, #60]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cb2:	2200      	movs	r2, #0
 8101cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101cb6:	480e      	ldr	r0, [pc, #56]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cb8:	f004 fe98 	bl	81069ec <HAL_I2C_Init>
 8101cbc:	4603      	mov	r3, r0
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d001      	beq.n	8101cc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101cc2:	f000 ff08 	bl	8102ad6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101cc6:	2100      	movs	r1, #0
 8101cc8:	4809      	ldr	r0, [pc, #36]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cca:	f006 f9cb 	bl	8108064 <HAL_I2CEx_ConfigAnalogFilter>
 8101cce:	4603      	mov	r3, r0
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d001      	beq.n	8101cd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101cd4:	f000 feff 	bl	8102ad6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101cd8:	2100      	movs	r1, #0
 8101cda:	4805      	ldr	r0, [pc, #20]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cdc:	f006 fa0d 	bl	81080fa <HAL_I2CEx_ConfigDigitalFilter>
 8101ce0:	4603      	mov	r3, r0
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d001      	beq.n	8101cea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101ce6:	f000 fef6 	bl	8102ad6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101cea:	bf00      	nop
 8101cec:	bd80      	pop	{r7, pc}
 8101cee:	bf00      	nop
 8101cf0:	1000012c 	.word	0x1000012c
 8101cf4:	40005400 	.word	0x40005400
 8101cf8:	307075b1 	.word	0x307075b1

08101cfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101cfc:	b580      	push	{r7, lr}
 8101cfe:	b0b8      	sub	sp, #224	; 0xe0
 8101d00:	af00      	add	r7, sp, #0
 8101d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d08:	2200      	movs	r2, #0
 8101d0a:	601a      	str	r2, [r3, #0]
 8101d0c:	605a      	str	r2, [r3, #4]
 8101d0e:	609a      	str	r2, [r3, #8]
 8101d10:	60da      	str	r2, [r3, #12]
 8101d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d14:	f107 0310 	add.w	r3, r7, #16
 8101d18:	22bc      	movs	r2, #188	; 0xbc
 8101d1a:	2100      	movs	r1, #0
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	f00a fc13 	bl	810c548 <memset>
  if(i2cHandle->Instance==I2C1)
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	4a5b      	ldr	r2, [pc, #364]	; (8101e94 <HAL_I2C_MspInit+0x198>)
 8101d28:	4293      	cmp	r3, r2
 8101d2a:	f040 80af 	bne.w	8101e8c <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101d2e:	2308      	movs	r3, #8
 8101d30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101d32:	2300      	movs	r3, #0
 8101d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d38:	f107 0310 	add.w	r3, r7, #16
 8101d3c:	4618      	mov	r0, r3
 8101d3e:	f006 fc89 	bl	8108654 <HAL_RCCEx_PeriphCLKConfig>
 8101d42:	4603      	mov	r3, r0
 8101d44:	2b00      	cmp	r3, #0
 8101d46:	d001      	beq.n	8101d4c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101d48:	f000 fec5 	bl	8102ad6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d4c:	4b52      	ldr	r3, [pc, #328]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d52:	4a51      	ldr	r2, [pc, #324]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d54:	f043 0302 	orr.w	r3, r3, #2
 8101d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d5c:	4b4e      	ldr	r3, [pc, #312]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d62:	f003 0302 	and.w	r3, r3, #2
 8101d66:	60fb      	str	r3, [r7, #12]
 8101d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101d72:	2312      	movs	r3, #18
 8101d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d78:	2300      	movs	r3, #0
 8101d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d7e:	2300      	movs	r3, #0
 8101d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101d84:	2304      	movs	r3, #4
 8101d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d8e:	4619      	mov	r1, r3
 8101d90:	4842      	ldr	r0, [pc, #264]	; (8101e9c <HAL_I2C_MspInit+0x1a0>)
 8101d92:	f004 fc4f 	bl	8106634 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d96:	4b40      	ldr	r3, [pc, #256]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d9c:	4a3e      	ldr	r2, [pc, #248]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101da6:	4b3c      	ldr	r3, [pc, #240]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101db0:	60bb      	str	r3, [r7, #8]
 8101db2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101db4:	4b3a      	ldr	r3, [pc, #232]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101db6:	4a3b      	ldr	r2, [pc, #236]	; (8101ea4 <HAL_I2C_MspInit+0x1a8>)
 8101db8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101dba:	4b39      	ldr	r3, [pc, #228]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dbc:	2221      	movs	r2, #33	; 0x21
 8101dbe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101dc0:	4b37      	ldr	r3, [pc, #220]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dc2:	2200      	movs	r2, #0
 8101dc4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101dc6:	4b36      	ldr	r3, [pc, #216]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dc8:	2200      	movs	r2, #0
 8101dca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101dcc:	4b34      	ldr	r3, [pc, #208]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101dd2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101dd4:	4b32      	ldr	r3, [pc, #200]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dd6:	2200      	movs	r2, #0
 8101dd8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101dda:	4b31      	ldr	r3, [pc, #196]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101ddc:	2200      	movs	r2, #0
 8101dde:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101de0:	4b2f      	ldr	r3, [pc, #188]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101de2:	2200      	movs	r2, #0
 8101de4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101de6:	4b2e      	ldr	r3, [pc, #184]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101dec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101dee:	4b2c      	ldr	r3, [pc, #176]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101df0:	2200      	movs	r2, #0
 8101df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101df4:	482a      	ldr	r0, [pc, #168]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101df6:	f001 fdcb 	bl	8103990 <HAL_DMA_Init>
 8101dfa:	4603      	mov	r3, r0
 8101dfc:	2b00      	cmp	r3, #0
 8101dfe:	d001      	beq.n	8101e04 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101e00:	f000 fe69 	bl	8102ad6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	4a26      	ldr	r2, [pc, #152]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8101e0a:	4a25      	ldr	r2, [pc, #148]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101e10:	4b25      	ldr	r3, [pc, #148]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e12:	4a26      	ldr	r2, [pc, #152]	; (8101eac <HAL_I2C_MspInit+0x1b0>)
 8101e14:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101e16:	4b24      	ldr	r3, [pc, #144]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e18:	2222      	movs	r2, #34	; 0x22
 8101e1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101e1c:	4b22      	ldr	r3, [pc, #136]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e1e:	2240      	movs	r2, #64	; 0x40
 8101e20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e22:	4b21      	ldr	r3, [pc, #132]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e24:	2200      	movs	r2, #0
 8101e26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101e28:	4b1f      	ldr	r3, [pc, #124]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e2e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e30:	4b1d      	ldr	r3, [pc, #116]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e32:	2200      	movs	r2, #0
 8101e34:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e36:	4b1c      	ldr	r3, [pc, #112]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e38:	2200      	movs	r2, #0
 8101e3a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101e3c:	4b1a      	ldr	r3, [pc, #104]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e3e:	2200      	movs	r2, #0
 8101e40:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e42:	4b19      	ldr	r3, [pc, #100]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e48:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e4a:	4b17      	ldr	r3, [pc, #92]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e4c:	2200      	movs	r2, #0
 8101e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101e50:	4815      	ldr	r0, [pc, #84]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e52:	f001 fd9d 	bl	8103990 <HAL_DMA_Init>
 8101e56:	4603      	mov	r3, r0
 8101e58:	2b00      	cmp	r3, #0
 8101e5a:	d001      	beq.n	8101e60 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101e5c:	f000 fe3b 	bl	8102ad6 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	4a11      	ldr	r2, [pc, #68]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e64:	639a      	str	r2, [r3, #56]	; 0x38
 8101e66:	4a10      	ldr	r2, [pc, #64]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101e6c:	2200      	movs	r2, #0
 8101e6e:	2100      	movs	r1, #0
 8101e70:	201f      	movs	r0, #31
 8101e72:	f001 fcc8 	bl	8103806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101e76:	201f      	movs	r0, #31
 8101e78:	f001 fcdf 	bl	810383a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	2100      	movs	r1, #0
 8101e80:	2020      	movs	r0, #32
 8101e82:	f001 fcc0 	bl	8103806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101e86:	2020      	movs	r0, #32
 8101e88:	f001 fcd7 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101e8c:	bf00      	nop
 8101e8e:	37e0      	adds	r7, #224	; 0xe0
 8101e90:	46bd      	mov	sp, r7
 8101e92:	bd80      	pop	{r7, pc}
 8101e94:	40005400 	.word	0x40005400
 8101e98:	58024400 	.word	0x58024400
 8101e9c:	58020400 	.word	0x58020400
 8101ea0:	10000178 	.word	0x10000178
 8101ea4:	40020040 	.word	0x40020040
 8101ea8:	100000b4 	.word	0x100000b4
 8101eac:	40020058 	.word	0x40020058

08101eb0 <CheckIMUSensorID>:
#include "lsm9ds1.h"
#include <stm32h7xx_hal.h>


uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8101eb0:	b580      	push	{r7, lr}
 8101eb2:	b088      	sub	sp, #32
 8101eb4:	af04      	add	r7, sp, #16
 8101eb6:	4603      	mov	r3, r0
 8101eb8:	460a      	mov	r2, r1
 8101eba:	71fb      	strb	r3, [r7, #7]
 8101ebc:	4613      	mov	r3, r2
 8101ebe:	71bb      	strb	r3, [r7, #6]

//  HAL_Delay(100);
//   uint8_t result = I2CReadByte(address, reg);
//

    uint8_t value = 0x00;
 8101ec0:	2300      	movs	r3, #0
 8101ec2:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
//    status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,100);
 8101ec4:	79fb      	ldrb	r3, [r7, #7]
 8101ec6:	b29b      	uxth	r3, r3
 8101ec8:	005b      	lsls	r3, r3, #1
 8101eca:	b299      	uxth	r1, r3
 8101ecc:	79bb      	ldrb	r3, [r7, #6]
 8101ece:	b29a      	uxth	r2, r3
 8101ed0:	2364      	movs	r3, #100	; 0x64
 8101ed2:	9302      	str	r3, [sp, #8]
 8101ed4:	2301      	movs	r3, #1
 8101ed6:	9301      	str	r3, [sp, #4]
 8101ed8:	f107 030e 	add.w	r3, r7, #14
 8101edc:	9300      	str	r3, [sp, #0]
 8101ede:	2301      	movs	r3, #1
 8101ee0:	4807      	ldr	r0, [pc, #28]	; (8101f00 <CheckIMUSensorID+0x50>)
 8101ee2:	f004 ff27 	bl	8106d34 <HAL_I2C_Mem_Read>
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK)
 8101eea:	7bfb      	ldrb	r3, [r7, #15]
 8101eec:	2b00      	cmp	r3, #0
 8101eee:	d001      	beq.n	8101ef4 <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8101ef0:	2301      	movs	r3, #1
 8101ef2:	e000      	b.n	8101ef6 <CheckIMUSensorID+0x46>
    }
    return value;
 8101ef4:	7bbb      	ldrb	r3, [r7, #14]
   //return result;


}
 8101ef6:	4618      	mov	r0, r3
 8101ef8:	3710      	adds	r7, #16
 8101efa:	46bd      	mov	sp, r7
 8101efc:	bd80      	pop	{r7, pc}
 8101efe:	bf00      	nop
 8101f00:	1000012c 	.word	0x1000012c

08101f04 <init>:

void init(LSM9DS1Handle* imu)
{
 8101f04:	b480      	push	{r7}
 8101f06:	b083      	sub	sp, #12
 8101f08:	af00      	add	r7, sp, #0
 8101f0a:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	2201      	movs	r2, #1
 8101f10:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	2201      	movs	r2, #1
 8101f16:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	2201      	movs	r2, #1
 8101f1c:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	2201      	movs	r2, #1
 8101f22:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale  245, 500, 2000
  imu->gyro_settings.scale = 245;
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	22f5      	movs	r2, #245	; 0xf5
 8101f28:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	2206      	movs	r2, #6
 8101f2e:	711a      	strb	r2, [r3, #4]
  // set cutoff frequency // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	2200      	movs	r2, #0
 8101f34:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	2200      	movs	r2, #0
 8101f3a:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	2200      	movs	r2, #0
 8101f40:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	2200      	movs	r2, #0
 8101f46:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	2200      	movs	r2, #0
 8101f4c:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	2200      	movs	r2, #0
 8101f52:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	2200      	movs	r2, #0
 8101f58:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	2200      	movs	r2, #0
 8101f5e:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	2201      	movs	r2, #1
 8101f64:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	2201      	movs	r2, #1
 8101f6a:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	2201      	movs	r2, #1
 8101f70:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	2201      	movs	r2, #1
 8101f76:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	2201      	movs	r2, #1
 8101f7c:	75da      	strb	r2, [r3, #23]

  // 2,4, 8,16
  imu->accel_settings.scale = 2;
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	2202      	movs	r2, #2
 8101f82:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	2206      	movs	r2, #6
 8101f88:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	22ff      	movs	r2, #255	; 0xff
 8101f8e:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	2200      	movs	r2, #0
 8101f94:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	2200      	movs	r2, #0
 8101f9a:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	2201      	movs	r2, #1
 8101fa0:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	2204      	movs	r2, #4
 8101fa6:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	2207      	movs	r2, #7
 8101fac:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	2200      	movs	r2, #0
 8101fb2:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2203      	movs	r2, #3
 8101fb8:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	2203      	movs	r2, #3
 8101fbe:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	2200      	movs	r2, #0
 8101fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	2200      	movs	r2, #0
 8101fce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  imu->temp_settings.enabled = 1;
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	2201      	movs	r2, #1
 8101fd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
 8101fda:	bf00      	nop
 8101fdc:	370c      	adds	r7, #12
 8101fde:	46bd      	mov	sp, r7
 8101fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe4:	4770      	bx	lr

08101fe6 <setup>:

uint16_t setup(LSM9DS1Handle* imu)
{
 8101fe6:	b580      	push	{r7, lr}
 8101fe8:	b084      	sub	sp, #16
 8101fea:	af00      	add	r7, sp, #0
 8101fec:	6078      	str	r0, [r7, #4]

  // initialise the sensors
  init(imu);
 8101fee:	6878      	ldr	r0, [r7, #4]
 8101ff0:	f7ff ff88 	bl	8101f04 <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8101ff4:	6878      	ldr	r0, [r7, #4]
 8101ff6:	f000 f9ea 	bl	81023ce <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 8101ffa:	6878      	ldr	r0, [r7, #4]
 8101ffc:	f000 fb5e 	bl	81026bc <calcGyroResolution>
  calcAccResoltuion(imu);
 8102000:	6878      	ldr	r0, [r7, #4]
 8102002:	f000 fb89 	bl	8102718 <calcAccResoltuion>
  calcMagResolution(imu);
 8102006:	6878      	ldr	r0, [r7, #4]
 8102008:	f000 fbd2 	bl	81027b0 <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check = CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 810200c:	210f      	movs	r1, #15
 810200e:	206b      	movs	r0, #107	; 0x6b
 8102010:	f7ff ff4e 	bl	8101eb0 <CheckIMUSensorID>
 8102014:	4603      	mov	r3, r0
 8102016:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 8102018:	210f      	movs	r1, #15
 810201a:	201e      	movs	r0, #30
 810201c:	f7ff ff48 	bl	8101eb0 <CheckIMUSensorID>
 8102020:	4603      	mov	r3, r0
 8102022:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8102024:	7bfb      	ldrb	r3, [r7, #15]
 8102026:	021b      	lsls	r3, r3, #8
 8102028:	b21a      	sxth	r2, r3
 810202a:	7bbb      	ldrb	r3, [r7, #14]
 810202c:	b21b      	sxth	r3, r3
 810202e:	4313      	orrs	r3, r2
 8102030:	b21b      	sxth	r3, r3
 8102032:	81bb      	strh	r3, [r7, #12]

  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 8102034:	89bb      	ldrh	r3, [r7, #12]
 8102036:	f646 023d 	movw	r2, #26685	; 0x683d
 810203a:	4293      	cmp	r3, r2
 810203c:	d001      	beq.n	8102042 <setup+0x5c>
  {
          return 0;
 810203e:	2300      	movs	r3, #0
 8102040:	e009      	b.n	8102056 <setup+0x70>
  }

  // initialise gyro
  initGyro(imu);
 8102042:	6878      	ldr	r0, [r7, #4]
 8102044:	f000 f80b 	bl	810205e <initGyro>
  // initialise accel
  initAccel(imu);
 8102048:	6878      	ldr	r0, [r7, #4]
 810204a:	f000 f8ad 	bl	81021a8 <initAccel>
  // init Mag
 initMag(imu);
 810204e:	6878      	ldr	r0, [r7, #4]
 8102050:	f000 f931 	bl	81022b6 <initMag>
  return imu_response;
 8102054:	89bb      	ldrh	r3, [r7, #12]
}
 8102056:	4618      	mov	r0, r3
 8102058:	3710      	adds	r7, #16
 810205a:	46bd      	mov	sp, r7
 810205c:	bd80      	pop	{r7, pc}

0810205e <initGyro>:


void initGyro(LSM9DS1Handle* imu)
{
 810205e:	b580      	push	{r7, lr}
 8102060:	b084      	sub	sp, #16
 8102062:	af00      	add	r7, sp, #0
 8102064:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 8102066:	2300      	movs	r3, #0
 8102068:	73fb      	strb	r3, [r7, #15]
  // ONly set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	781b      	ldrb	r3, [r3, #0]
 810206e:	2b01      	cmp	r3, #1
 8102070:	d103      	bne.n	810207a <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	791b      	ldrb	r3, [r3, #4]
 8102076:	015b      	lsls	r3, r3, #5
 8102078:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	885b      	ldrh	r3, [r3, #2]
 810207e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102082:	d003      	beq.n	810208c <initGyro+0x2e>
 8102084:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102088:	d005      	beq.n	8102096 <initGyro+0x38>
 810208a:	e009      	b.n	81020a0 <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 810208c:	7bfb      	ldrb	r3, [r7, #15]
 810208e:	f043 0308 	orr.w	r3, r3, #8
 8102092:	73fb      	strb	r3, [r7, #15]
      break;
 8102094:	e004      	b.n	81020a0 <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 8102096:	7bfb      	ldrb	r3, [r7, #15]
 8102098:	f043 0318 	orr.w	r3, r3, #24
 810209c:	73fb      	strb	r3, [r7, #15]
      break;
 810209e:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	795b      	ldrb	r3, [r3, #5]
 81020a4:	b25b      	sxtb	r3, r3
 81020a6:	f003 0303 	and.w	r3, r3, #3
 81020aa:	b25a      	sxtb	r2, r3
 81020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81020b0:	4313      	orrs	r3, r2
 81020b2:	b25b      	sxtb	r3, r3
 81020b4:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 81020b6:	7bfb      	ldrb	r3, [r7, #15]
 81020b8:	461a      	mov	r2, r3
 81020ba:	2110      	movs	r1, #16
 81020bc:	206b      	movs	r0, #107	; 0x6b
 81020be:	f000 fbed 	bl	810289c <WriteByte>

   // reset tempValue
   tempRegValue = 0;
 81020c2:	2300      	movs	r3, #0
 81020c4:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 81020c6:	7bfb      	ldrb	r3, [r7, #15]
 81020c8:	461a      	mov	r2, r3
 81020ca:	2111      	movs	r1, #17
 81020cc:	206b      	movs	r0, #107	; 0x6b
 81020ce:	f000 fbe5 	bl	810289c <WriteByte>

   tempRegValue = 0;
 81020d2:	2300      	movs	r3, #0
 81020d4:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	799b      	ldrb	r3, [r3, #6]
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d001      	beq.n	81020e2 <initGyro+0x84>
 81020de:	2380      	movs	r3, #128	; 0x80
 81020e0:	e000      	b.n	81020e4 <initGyro+0x86>
 81020e2:	2300      	movs	r3, #0
 81020e4:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	79db      	ldrb	r3, [r3, #7]
 81020ea:	2b01      	cmp	r3, #1
 81020ec:	d10a      	bne.n	8102104 <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	7a1b      	ldrb	r3, [r3, #8]
 81020f2:	f003 030f 	and.w	r3, r3, #15
 81020f6:	b2da      	uxtb	r2, r3
 81020f8:	7bfb      	ldrb	r3, [r7, #15]
 81020fa:	4313      	orrs	r3, r2
 81020fc:	b2db      	uxtb	r3, r3
 81020fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102102:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 8102104:	7bfb      	ldrb	r3, [r7, #15]
 8102106:	461a      	mov	r2, r3
 8102108:	2112      	movs	r1, #18
 810210a:	206b      	movs	r0, #107	; 0x6b
 810210c:	f000 fbc6 	bl	810289c <WriteByte>


   tempRegValue = 0;
 8102110:	2300      	movs	r3, #0
 8102112:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	7bdb      	ldrb	r3, [r3, #15]
 8102118:	2b00      	cmp	r3, #0
 810211a:	d003      	beq.n	8102124 <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 810211c:	7bfb      	ldrb	r3, [r7, #15]
 810211e:	f043 0320 	orr.w	r3, r3, #32
 8102122:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	7b9b      	ldrb	r3, [r3, #14]
 8102128:	2b00      	cmp	r3, #0
 810212a:	d003      	beq.n	8102134 <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 810212c:	7bfb      	ldrb	r3, [r7, #15]
 810212e:	f043 0310 	orr.w	r3, r3, #16
 8102132:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	7b5b      	ldrb	r3, [r3, #13]
 8102138:	2b00      	cmp	r3, #0
 810213a:	d003      	beq.n	8102144 <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 810213c:	7bfb      	ldrb	r3, [r7, #15]
 810213e:	f043 0308 	orr.w	r3, r3, #8
 8102142:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	7c1b      	ldrb	r3, [r3, #16]
 8102148:	2b00      	cmp	r3, #0
 810214a:	d003      	beq.n	8102154 <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 810214c:	7bfb      	ldrb	r3, [r7, #15]
 810214e:	f043 0302 	orr.w	r3, r3, #2
 8102152:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 8102154:	7bfb      	ldrb	r3, [r7, #15]
 8102156:	461a      	mov	r2, r3
 8102158:	211e      	movs	r1, #30
 810215a:	206b      	movs	r0, #107	; 0x6b
 810215c:	f000 fb9e 	bl	810289c <WriteByte>

   tempRegValue = 0;
 8102160:	2300      	movs	r3, #0
 8102162:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	7a5b      	ldrb	r3, [r3, #9]
 8102168:	2b00      	cmp	r3, #0
 810216a:	d003      	beq.n	8102174 <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 810216c:	7bfb      	ldrb	r3, [r7, #15]
 810216e:	f043 0320 	orr.w	r3, r3, #32
 8102172:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	7a9b      	ldrb	r3, [r3, #10]
 8102178:	2b00      	cmp	r3, #0
 810217a:	d003      	beq.n	8102184 <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 810217c:	7bfb      	ldrb	r3, [r7, #15]
 810217e:	f043 0310 	orr.w	r3, r3, #16
 8102182:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	7adb      	ldrb	r3, [r3, #11]
 8102188:	2b00      	cmp	r3, #0
 810218a:	d003      	beq.n	8102194 <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 810218c:	7bfb      	ldrb	r3, [r7, #15]
 810218e:	f043 0308 	orr.w	r3, r3, #8
 8102192:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 8102194:	7bfb      	ldrb	r3, [r7, #15]
 8102196:	461a      	mov	r2, r3
 8102198:	2113      	movs	r1, #19
 810219a:	206b      	movs	r0, #107	; 0x6b
 810219c:	f000 fb7e 	bl	810289c <WriteByte>
}
 81021a0:	bf00      	nop
 81021a2:	3710      	adds	r7, #16
 81021a4:	46bd      	mov	sp, r7
 81021a6:	bd80      	pop	{r7, pc}

081021a8 <initAccel>:

void initAccel(LSM9DS1Handle* imu)
{
 81021a8:	b580      	push	{r7, lr}
 81021aa:	b084      	sub	sp, #16
 81021ac:	af00      	add	r7, sp, #0
 81021ae:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 81021b0:	2300      	movs	r3, #0
 81021b2:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	7ddb      	ldrb	r3, [r3, #23]
 81021b8:	2b00      	cmp	r3, #0
 81021ba:	d003      	beq.n	81021c4 <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 81021bc:	7bfb      	ldrb	r3, [r7, #15]
 81021be:	f043 0320 	orr.w	r3, r3, #32
 81021c2:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	7d9b      	ldrb	r3, [r3, #22]
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d003      	beq.n	81021d4 <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 81021cc:	7bfb      	ldrb	r3, [r7, #15]
 81021ce:	f043 0310 	orr.w	r3, r3, #16
 81021d2:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	7d5b      	ldrb	r3, [r3, #21]
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d003      	beq.n	81021e4 <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 81021dc:	7bfb      	ldrb	r3, [r7, #15]
 81021de:	f043 0308 	orr.w	r3, r3, #8
 81021e2:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 81021e4:	7bfb      	ldrb	r3, [r7, #15]
 81021e6:	461a      	mov	r2, r3
 81021e8:	211f      	movs	r1, #31
 81021ea:	206b      	movs	r0, #107	; 0x6b
 81021ec:	f000 fb56 	bl	810289c <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 81021f0:	2300      	movs	r3, #0
 81021f2:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	7c9b      	ldrb	r3, [r3, #18]
 81021f8:	2b00      	cmp	r3, #0
 81021fa:	d008      	beq.n	810220e <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	7d1b      	ldrb	r3, [r3, #20]
 8102200:	015b      	lsls	r3, r3, #5
 8102202:	b25a      	sxtb	r2, r3
 8102204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102208:	4313      	orrs	r3, r2
 810220a:	b25b      	sxtb	r3, r3
 810220c:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	7cdb      	ldrb	r3, [r3, #19]
 8102212:	2b10      	cmp	r3, #16
 8102214:	d010      	beq.n	8102238 <initAccel+0x90>
 8102216:	2b10      	cmp	r3, #16
 8102218:	dc13      	bgt.n	8102242 <initAccel+0x9a>
 810221a:	2b04      	cmp	r3, #4
 810221c:	d002      	beq.n	8102224 <initAccel+0x7c>
 810221e:	2b08      	cmp	r3, #8
 8102220:	d005      	beq.n	810222e <initAccel+0x86>
 8102222:	e00e      	b.n	8102242 <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 8102224:	7bfb      	ldrb	r3, [r7, #15]
 8102226:	f043 0310 	orr.w	r3, r3, #16
 810222a:	73fb      	strb	r3, [r7, #15]
      break;
 810222c:	e009      	b.n	8102242 <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 810222e:	7bfb      	ldrb	r3, [r7, #15]
 8102230:	f043 0318 	orr.w	r3, r3, #24
 8102234:	73fb      	strb	r3, [r7, #15]
      break;
 8102236:	e004      	b.n	8102242 <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 8102238:	7bfb      	ldrb	r3, [r7, #15]
 810223a:	f043 0308 	orr.w	r3, r3, #8
 810223e:	73fb      	strb	r3, [r7, #15]
      break;
 8102240:	bf00      	nop

  }

  if(imu->accel_settings.bandwidth >= 0)
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102248:	2b00      	cmp	r3, #0
 810224a:	db0e      	blt.n	810226a <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 810224c:	7bfb      	ldrb	r3, [r7, #15]
 810224e:	f043 0304 	orr.w	r3, r3, #4
 8102252:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	f993 3018 	ldrsb.w	r3, [r3, #24]
 810225a:	f003 0303 	and.w	r3, r3, #3
 810225e:	b25a      	sxtb	r2, r3
 8102260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102264:	4313      	orrs	r3, r2
 8102266:	b25b      	sxtb	r3, r3
 8102268:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 810226a:	7bfb      	ldrb	r3, [r7, #15]
 810226c:	461a      	mov	r2, r3
 810226e:	2120      	movs	r1, #32
 8102270:	206b      	movs	r0, #107	; 0x6b
 8102272:	f000 fb13 	bl	810289c <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 8102276:	2300      	movs	r3, #0
 8102278:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	7e5b      	ldrb	r3, [r3, #25]
 810227e:	2b01      	cmp	r3, #1
 8102280:	d10f      	bne.n	81022a2 <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 8102282:	7bfb      	ldrb	r3, [r7, #15]
 8102284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8102288:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	7e9b      	ldrb	r3, [r3, #26]
 810228e:	015b      	lsls	r3, r3, #5
 8102290:	b25b      	sxtb	r3, r3
 8102292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102296:	b25a      	sxtb	r2, r3
 8102298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810229c:	4313      	orrs	r3, r2
 810229e:	b25b      	sxtb	r3, r3
 81022a0:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 81022a2:	7bfb      	ldrb	r3, [r7, #15]
 81022a4:	461a      	mov	r2, r3
 81022a6:	2121      	movs	r1, #33	; 0x21
 81022a8:	206b      	movs	r0, #107	; 0x6b
 81022aa:	f000 faf7 	bl	810289c <WriteByte>
}
 81022ae:	bf00      	nop
 81022b0:	3710      	adds	r7, #16
 81022b2:	46bd      	mov	sp, r7
 81022b4:	bd80      	pop	{r7, pc}

081022b6 <initMag>:



void initMag(LSM9DS1Handle* imu)
{
 81022b6:	b580      	push	{r7, lr}
 81022b8:	b084      	sub	sp, #16
 81022ba:	af00      	add	r7, sp, #0
 81022bc:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 81022be:	2300      	movs	r3, #0
 81022c0:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	7f9b      	ldrb	r3, [r3, #30]
 81022c6:	2b01      	cmp	r3, #1
 81022c8:	d103      	bne.n	81022d2 <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 81022ca:	7bfb      	ldrb	r3, [r7, #15]
 81022cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81022d0:	73fb      	strb	r3, [r7, #15]
  }
  // Make Operative mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	7fdb      	ldrb	r3, [r3, #31]
 81022d6:	015b      	lsls	r3, r3, #5
 81022d8:	b25b      	sxtb	r3, r3
 81022da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81022de:	b25a      	sxtb	r2, r3
 81022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022e4:	4313      	orrs	r3, r2
 81022e6:	b25b      	sxtb	r3, r3
 81022e8:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	7f5b      	ldrb	r3, [r3, #29]
 81022ee:	009b      	lsls	r3, r3, #2
 81022f0:	b25b      	sxtb	r3, r3
 81022f2:	f003 031c 	and.w	r3, r3, #28
 81022f6:	b25a      	sxtb	r2, r3
 81022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022fc:	4313      	orrs	r3, r2
 81022fe:	b25b      	sxtb	r3, r3
 8102300:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 8102302:	7bfb      	ldrb	r3, [r7, #15]
 8102304:	461a      	mov	r2, r3
 8102306:	2120      	movs	r1, #32
 8102308:	201e      	movs	r0, #30
 810230a:	f000 fac7 	bl	810289c <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 810230e:	2300      	movs	r3, #0
 8102310:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	7f1b      	ldrb	r3, [r3, #28]
 8102316:	2b10      	cmp	r3, #16
 8102318:	d010      	beq.n	810233c <initMag+0x86>
 810231a:	2b10      	cmp	r3, #16
 810231c:	dc13      	bgt.n	8102346 <initMag+0x90>
 810231e:	2b08      	cmp	r3, #8
 8102320:	d002      	beq.n	8102328 <initMag+0x72>
 8102322:	2b0c      	cmp	r3, #12
 8102324:	d005      	beq.n	8102332 <initMag+0x7c>
 8102326:	e00e      	b.n	8102346 <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 8102328:	7bfb      	ldrb	r3, [r7, #15]
 810232a:	f043 0320 	orr.w	r3, r3, #32
 810232e:	73fb      	strb	r3, [r7, #15]
      break;
 8102330:	e009      	b.n	8102346 <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 8102332:	7bfb      	ldrb	r3, [r7, #15]
 8102334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102338:	73fb      	strb	r3, [r7, #15]
      break;
 810233a:	e004      	b.n	8102346 <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 810233c:	7bfb      	ldrb	r3, [r7, #15]
 810233e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8102342:	73fb      	strb	r3, [r7, #15]
      break;
 8102344:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 8102346:	7bfb      	ldrb	r3, [r7, #15]
 8102348:	461a      	mov	r2, r3
 810234a:	2121      	movs	r1, #33	; 0x21
 810234c:	201e      	movs	r0, #30
 810234e:	f000 faa5 	bl	810289c <WriteByte>

   tempRegValue = 0;
 8102352:	2300      	movs	r3, #0
 8102354:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 810235c:	2b01      	cmp	r3, #1
 810235e:	d103      	bne.n	8102368 <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 8102360:	7bfb      	ldrb	r3, [r7, #15]
 8102362:	f043 0320 	orr.w	r3, r3, #32
 8102366:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 810236e:	b25b      	sxtb	r3, r3
 8102370:	f003 0303 	and.w	r3, r3, #3
 8102374:	b25a      	sxtb	r2, r3
 8102376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810237a:	4313      	orrs	r3, r2
 810237c:	b25b      	sxtb	r3, r3
 810237e:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 8102380:	7bfb      	ldrb	r3, [r7, #15]
 8102382:	461a      	mov	r2, r3
 8102384:	2122      	movs	r1, #34	; 0x22
 8102386:	201e      	movs	r0, #30
 8102388:	f000 fa88 	bl	810289c <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 810238c:	2300      	movs	r3, #0
 810238e:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102396:	009b      	lsls	r3, r3, #2
 8102398:	b25b      	sxtb	r3, r3
 810239a:	f003 030c 	and.w	r3, r3, #12
 810239e:	b25a      	sxtb	r2, r3
 81023a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81023a4:	4313      	orrs	r3, r2
 81023a6:	b25b      	sxtb	r3, r3
 81023a8:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 81023aa:	7bfb      	ldrb	r3, [r7, #15]
 81023ac:	461a      	mov	r2, r3
 81023ae:	2123      	movs	r1, #35	; 0x23
 81023b0:	201e      	movs	r0, #30
 81023b2:	f000 fa73 	bl	810289c <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 81023b6:	2300      	movs	r3, #0
 81023b8:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 81023ba:	7bfb      	ldrb	r3, [r7, #15]
 81023bc:	461a      	mov	r2, r3
 81023be:	2124      	movs	r1, #36	; 0x24
 81023c0:	201e      	movs	r0, #30
 81023c2:	f000 fa6b 	bl	810289c <WriteByte>

}
 81023c6:	bf00      	nop
 81023c8:	3710      	adds	r7, #16
 81023ca:	46bd      	mov	sp, r7
 81023cc:	bd80      	pop	{r7, pc}

081023ce <clampScales>:


void clampScales(LSM9DS1Handle* imu)
{
 81023ce:	b480      	push	{r7}
 81023d0:	b083      	sub	sp, #12
 81023d2:	af00      	add	r7, sp, #0
 81023d4:	6078      	str	r0, [r7, #4]

  // clamp gyro scales
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	885b      	ldrh	r3, [r3, #2]
 81023da:	2bf5      	cmp	r3, #245	; 0xf5
 81023dc:	d00c      	beq.n	81023f8 <clampScales+0x2a>
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	885b      	ldrh	r3, [r3, #2]
 81023e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81023e6:	d007      	beq.n	81023f8 <clampScales+0x2a>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	885b      	ldrh	r3, [r3, #2]
 81023ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81023f0:	d002      	beq.n	81023f8 <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	22f5      	movs	r2, #245	; 0xf5
 81023f6:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	7cdb      	ldrb	r3, [r3, #19]
 81023fc:	2b02      	cmp	r3, #2
 81023fe:	d00e      	beq.n	810241e <clampScales+0x50>
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	7cdb      	ldrb	r3, [r3, #19]
 8102404:	2b04      	cmp	r3, #4
 8102406:	d00a      	beq.n	810241e <clampScales+0x50>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	7cdb      	ldrb	r3, [r3, #19]
 810240c:	2b08      	cmp	r3, #8
 810240e:	d006      	beq.n	810241e <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	7cdb      	ldrb	r3, [r3, #19]
 8102414:	2b10      	cmp	r3, #16
 8102416:	d002      	beq.n	810241e <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	22f5      	movs	r2, #245	; 0xf5
 810241c:	74da      	strb	r2, [r3, #19]
  }


  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	7f1b      	ldrb	r3, [r3, #28]
 8102422:	2b04      	cmp	r3, #4
 8102424:	d00e      	beq.n	8102444 <clampScales+0x76>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	7f1b      	ldrb	r3, [r3, #28]
 810242a:	2b08      	cmp	r3, #8
 810242c:	d00a      	beq.n	8102444 <clampScales+0x76>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	7f1b      	ldrb	r3, [r3, #28]
 8102432:	2b0c      	cmp	r3, #12
 8102434:	d006      	beq.n	8102444 <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 810243a:	2b10      	cmp	r3, #16
 810243c:	d002      	beq.n	8102444 <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	2204      	movs	r2, #4
 8102442:	771a      	strb	r2, [r3, #28]
  }

}
 8102444:	bf00      	nop
 8102446:	370c      	adds	r7, #12
 8102448:	46bd      	mov	sp, r7
 810244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244e:	4770      	bx	lr

08102450 <calcGyro>:

float calcGyro(float gyro)
{
 8102450:	b480      	push	{r7}
 8102452:	b083      	sub	sp, #12
 8102454:	af00      	add	r7, sp, #0
 8102456:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 810245a:	4b07      	ldr	r3, [pc, #28]	; (8102478 <calcGyro+0x28>)
 810245c:	ed93 7a00 	vldr	s14, [r3]
 8102460:	edd7 7a01 	vldr	s15, [r7, #4]
 8102464:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102468:	eeb0 0a67 	vmov.f32	s0, s15
 810246c:	370c      	adds	r7, #12
 810246e:	46bd      	mov	sp, r7
 8102470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102474:	4770      	bx	lr
 8102476:	bf00      	nop
 8102478:	100001f8 	.word	0x100001f8

0810247c <calcMag>:
float calcMag(float mag)
{
 810247c:	b480      	push	{r7}
 810247e:	b083      	sub	sp, #12
 8102480:	af00      	add	r7, sp, #0
 8102482:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 8102486:	4b07      	ldr	r3, [pc, #28]	; (81024a4 <calcMag+0x28>)
 8102488:	ed93 7a00 	vldr	s14, [r3]
 810248c:	edd7 7a01 	vldr	s15, [r7, #4]
 8102490:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102494:	eeb0 0a67 	vmov.f32	s0, s15
 8102498:	370c      	adds	r7, #12
 810249a:	46bd      	mov	sp, r7
 810249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024a0:	4770      	bx	lr
 81024a2:	bf00      	nop
 81024a4:	100001f4 	.word	0x100001f4

081024a8 <calcAccel>:
float calcAccel(float accel)
{
 81024a8:	b480      	push	{r7}
 81024aa:	b083      	sub	sp, #12
 81024ac:	af00      	add	r7, sp, #0
 81024ae:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 81024b2:	4b07      	ldr	r3, [pc, #28]	; (81024d0 <calcAccel+0x28>)
 81024b4:	ed93 7a00 	vldr	s14, [r3]
 81024b8:	edd7 7a01 	vldr	s15, [r7, #4]
 81024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81024c0:	eeb0 0a67 	vmov.f32	s0, s15
 81024c4:	370c      	adds	r7, #12
 81024c6:	46bd      	mov	sp, r7
 81024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024cc:	4770      	bx	lr
 81024ce:	bf00      	nop
 81024d0:	100001f0 	.word	0x100001f0

081024d4 <readGyro>:

void readGyro(LSM9DS1Handle* imu)
{
 81024d4:	b580      	push	{r7, lr}
 81024d6:	b086      	sub	sp, #24
 81024d8:	af00      	add	r7, sp, #0
 81024da:	6078      	str	r0, [r7, #4]

  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 81024dc:	f107 020c 	add.w	r2, r7, #12
 81024e0:	2306      	movs	r3, #6
 81024e2:	2118      	movs	r1, #24
 81024e4:	206b      	movs	r0, #107	; 0x6b
 81024e6:	f000 f9af 	bl	8102848 <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 81024ea:	7b7b      	ldrb	r3, [r7, #13]
 81024ec:	021b      	lsls	r3, r3, #8
 81024ee:	b21a      	sxth	r2, r3
 81024f0:	7b3b      	ldrb	r3, [r7, #12]
 81024f2:	b21b      	sxth	r3, r3
 81024f4:	4313      	orrs	r3, r2
 81024f6:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 81024f8:	7bfb      	ldrb	r3, [r7, #15]
 81024fa:	021b      	lsls	r3, r3, #8
 81024fc:	b21a      	sxth	r2, r3
 81024fe:	7bbb      	ldrb	r3, [r7, #14]
 8102500:	b21b      	sxth	r3, r3
 8102502:	4313      	orrs	r3, r2
 8102504:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8102506:	7c7b      	ldrb	r3, [r7, #17]
 8102508:	021b      	lsls	r3, r3, #8
 810250a:	b21a      	sxth	r2, r3
 810250c:	7c3b      	ldrb	r3, [r7, #16]
 810250e:	b21b      	sxth	r3, r3
 8102510:	4313      	orrs	r3, r2
 8102512:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 8102514:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102518:	ee07 3a90 	vmov	s15, r3
 810251c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102520:	eeb0 0a67 	vmov.f32	s0, s15
 8102524:	f7ff ff94 	bl	8102450 <calcGyro>
 8102528:	eef0 7a40 	vmov.f32	s15, s0
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 8102532:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102536:	ee07 3a90 	vmov	s15, r3
 810253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810253e:	eeb0 0a67 	vmov.f32	s0, s15
 8102542:	f7ff ff85 	bl	8102450 <calcGyro>
 8102546:	eef0 7a40 	vmov.f32	s15, s0
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 8102550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102554:	ee07 3a90 	vmov	s15, r3
 8102558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810255c:	eeb0 0a67 	vmov.f32	s0, s15
 8102560:	f7ff ff76 	bl	8102450 <calcGyro>
 8102564:	eef0 7a40 	vmov.f32	s15, s0
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 810256e:	bf00      	nop
 8102570:	3718      	adds	r7, #24
 8102572:	46bd      	mov	sp, r7
 8102574:	bd80      	pop	{r7, pc}

08102576 <readMag>:
void readMag(LSM9DS1Handle* imu)
{
 8102576:	b580      	push	{r7, lr}
 8102578:	b086      	sub	sp, #24
 810257a:	af00      	add	r7, sp, #0
 810257c:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 810257e:	f107 020c 	add.w	r2, r7, #12
 8102582:	2306      	movs	r3, #6
 8102584:	2128      	movs	r1, #40	; 0x28
 8102586:	201e      	movs	r0, #30
 8102588:	f000 f95e 	bl	8102848 <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 810258c:	7b7b      	ldrb	r3, [r7, #13]
 810258e:	021b      	lsls	r3, r3, #8
 8102590:	b21a      	sxth	r2, r3
 8102592:	7b3b      	ldrb	r3, [r7, #12]
 8102594:	b21b      	sxth	r3, r3
 8102596:	4313      	orrs	r3, r2
 8102598:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 810259a:	7bfb      	ldrb	r3, [r7, #15]
 810259c:	021b      	lsls	r3, r3, #8
 810259e:	b21a      	sxth	r2, r3
 81025a0:	7bbb      	ldrb	r3, [r7, #14]
 81025a2:	b21b      	sxth	r3, r3
 81025a4:	4313      	orrs	r3, r2
 81025a6:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 81025a8:	7c7b      	ldrb	r3, [r7, #17]
 81025aa:	021b      	lsls	r3, r3, #8
 81025ac:	b21a      	sxth	r2, r3
 81025ae:	7c3b      	ldrb	r3, [r7, #16]
 81025b0:	b21b      	sxth	r3, r3
 81025b2:	4313      	orrs	r3, r2
 81025b4:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 81025b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81025ba:	ee07 3a90 	vmov	s15, r3
 81025be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025c2:	eeb0 0a67 	vmov.f32	s0, s15
 81025c6:	f7ff ff59 	bl	810247c <calcMag>
 81025ca:	eef0 7a40 	vmov.f32	s15, s0
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 81025d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81025d8:	ee07 3a90 	vmov	s15, r3
 81025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025e0:	eeb0 0a67 	vmov.f32	s0, s15
 81025e4:	f7ff ff4a 	bl	810247c <calcMag>
 81025e8:	eef0 7a40 	vmov.f32	s15, s0
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 81025f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81025f6:	ee07 3a90 	vmov	s15, r3
 81025fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8102602:	f7ff ff3b 	bl	810247c <calcMag>
 8102606:	eef0 7a40 	vmov.f32	s15, s0
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 8102610:	bf00      	nop
 8102612:	3718      	adds	r7, #24
 8102614:	46bd      	mov	sp, r7
 8102616:	bd80      	pop	{r7, pc}

08102618 <readAccel>:
void readAccel(LSM9DS1Handle* imu)
{
 8102618:	b580      	push	{r7, lr}
 810261a:	b086      	sub	sp, #24
 810261c:	af00      	add	r7, sp, #0
 810261e:	6078      	str	r0, [r7, #4]

  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 8102620:	f107 020c 	add.w	r2, r7, #12
 8102624:	2306      	movs	r3, #6
 8102626:	2128      	movs	r1, #40	; 0x28
 8102628:	206b      	movs	r0, #107	; 0x6b
 810262a:	f000 f90d 	bl	8102848 <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 810262e:	7b7b      	ldrb	r3, [r7, #13]
 8102630:	021b      	lsls	r3, r3, #8
 8102632:	b21a      	sxth	r2, r3
 8102634:	7b3b      	ldrb	r3, [r7, #12]
 8102636:	b21b      	sxth	r3, r3
 8102638:	4313      	orrs	r3, r2
 810263a:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 810263c:	7bfb      	ldrb	r3, [r7, #15]
 810263e:	021b      	lsls	r3, r3, #8
 8102640:	b21a      	sxth	r2, r3
 8102642:	7bbb      	ldrb	r3, [r7, #14]
 8102644:	b21b      	sxth	r3, r3
 8102646:	4313      	orrs	r3, r2
 8102648:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 810264a:	7c7b      	ldrb	r3, [r7, #17]
 810264c:	021b      	lsls	r3, r3, #8
 810264e:	b21a      	sxth	r2, r3
 8102650:	7c3b      	ldrb	r3, [r7, #16]
 8102652:	b21b      	sxth	r3, r3
 8102654:	4313      	orrs	r3, r2
 8102656:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 8102658:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810265c:	ee07 3a90 	vmov	s15, r3
 8102660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102664:	eeb0 0a67 	vmov.f32	s0, s15
 8102668:	f7ff ff1e 	bl	81024a8 <calcAccel>
 810266c:	eef0 7a40 	vmov.f32	s15, s0
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 8102676:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 810267a:	ee07 3a90 	vmov	s15, r3
 810267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102682:	eeb0 0a67 	vmov.f32	s0, s15
 8102686:	f7ff ff0f 	bl	81024a8 <calcAccel>
 810268a:	eef0 7a40 	vmov.f32	s15, s0
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 8102694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102698:	ee07 3a90 	vmov	s15, r3
 810269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81026a0:	eeb0 0a67 	vmov.f32	s0, s15
 81026a4:	f7ff ff00 	bl	81024a8 <calcAccel>
 81026a8:	eef0 7a40 	vmov.f32	s15, s0
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

}
 81026b2:	bf00      	nop
 81026b4:	3718      	adds	r7, #24
 81026b6:	46bd      	mov	sp, r7
 81026b8:	bd80      	pop	{r7, pc}
	...

081026bc <calcGyroResolution>:
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG9, temp);
}


void calcGyroResolution(LSM9DS1Handle* imu)
{
 81026bc:	b480      	push	{r7}
 81026be:	b083      	sub	sp, #12
 81026c0:	af00      	add	r7, sp, #0
 81026c2:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	885b      	ldrh	r3, [r3, #2]
 81026c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026cc:	d010      	beq.n	81026f0 <calcGyroResolution+0x34>
 81026ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026d2:	dc11      	bgt.n	81026f8 <calcGyroResolution+0x3c>
 81026d4:	2bf5      	cmp	r3, #245	; 0xf5
 81026d6:	d003      	beq.n	81026e0 <calcGyroResolution+0x24>
 81026d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81026dc:	d004      	beq.n	81026e8 <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 81026de:	e00b      	b.n	81026f8 <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 81026e0:	4b09      	ldr	r3, [pc, #36]	; (8102708 <calcGyroResolution+0x4c>)
 81026e2:	4a0a      	ldr	r2, [pc, #40]	; (810270c <calcGyroResolution+0x50>)
 81026e4:	601a      	str	r2, [r3, #0]
      break;
 81026e6:	e008      	b.n	81026fa <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 81026e8:	4b07      	ldr	r3, [pc, #28]	; (8102708 <calcGyroResolution+0x4c>)
 81026ea:	4a09      	ldr	r2, [pc, #36]	; (8102710 <calcGyroResolution+0x54>)
 81026ec:	601a      	str	r2, [r3, #0]
      break;
 81026ee:	e004      	b.n	81026fa <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 81026f0:	4b05      	ldr	r3, [pc, #20]	; (8102708 <calcGyroResolution+0x4c>)
 81026f2:	4a08      	ldr	r2, [pc, #32]	; (8102714 <calcGyroResolution+0x58>)
 81026f4:	601a      	str	r2, [r3, #0]
      break;
 81026f6:	e000      	b.n	81026fa <calcGyroResolution+0x3e>
      break;
 81026f8:	bf00      	nop
  }
}
 81026fa:	bf00      	nop
 81026fc:	370c      	adds	r7, #12
 81026fe:	46bd      	mov	sp, r7
 8102700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102704:	4770      	bx	lr
 8102706:	bf00      	nop
 8102708:	100001f8 	.word	0x100001f8
 810270c:	3c0f5c29 	.word	0x3c0f5c29
 8102710:	3c8f5c29 	.word	0x3c8f5c29
 8102714:	3d8f5c29 	.word	0x3d8f5c29

08102718 <calcAccResoltuion>:

void calcAccResoltuion(LSM9DS1Handle* imu)
{
 8102718:	b480      	push	{r7}
 810271a:	b083      	sub	sp, #12
 810271c:	af00      	add	r7, sp, #0
 810271e:	6078      	str	r0, [r7, #4]

  switch(imu->accel_settings.scale)
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	7cdb      	ldrb	r3, [r3, #19]
 8102724:	3b02      	subs	r3, #2
 8102726:	2b0e      	cmp	r3, #14
 8102728:	d830      	bhi.n	810278c <calcAccResoltuion+0x74>
 810272a:	a201      	add	r2, pc, #4	; (adr r2, 8102730 <calcAccResoltuion+0x18>)
 810272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102730:	0810276d 	.word	0x0810276d
 8102734:	0810278d 	.word	0x0810278d
 8102738:	08102775 	.word	0x08102775
 810273c:	0810278d 	.word	0x0810278d
 8102740:	0810278d 	.word	0x0810278d
 8102744:	0810278d 	.word	0x0810278d
 8102748:	0810277d 	.word	0x0810277d
 810274c:	0810278d 	.word	0x0810278d
 8102750:	0810278d 	.word	0x0810278d
 8102754:	0810278d 	.word	0x0810278d
 8102758:	0810278d 	.word	0x0810278d
 810275c:	0810278d 	.word	0x0810278d
 8102760:	0810278d 	.word	0x0810278d
 8102764:	0810278d 	.word	0x0810278d
 8102768:	08102785 	.word	0x08102785
  {
    case 2:
      acc_res = ACC_FS_2G;
 810276c:	4b0b      	ldr	r3, [pc, #44]	; (810279c <calcAccResoltuion+0x84>)
 810276e:	4a0c      	ldr	r2, [pc, #48]	; (81027a0 <calcAccResoltuion+0x88>)
 8102770:	601a      	str	r2, [r3, #0]
    break;
 8102772:	e00c      	b.n	810278e <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 8102774:	4b09      	ldr	r3, [pc, #36]	; (810279c <calcAccResoltuion+0x84>)
 8102776:	4a0b      	ldr	r2, [pc, #44]	; (81027a4 <calcAccResoltuion+0x8c>)
 8102778:	601a      	str	r2, [r3, #0]
     break;
 810277a:	e008      	b.n	810278e <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 810277c:	4b07      	ldr	r3, [pc, #28]	; (810279c <calcAccResoltuion+0x84>)
 810277e:	4a0a      	ldr	r2, [pc, #40]	; (81027a8 <calcAccResoltuion+0x90>)
 8102780:	601a      	str	r2, [r3, #0]
      break;
 8102782:	e004      	b.n	810278e <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 8102784:	4b05      	ldr	r3, [pc, #20]	; (810279c <calcAccResoltuion+0x84>)
 8102786:	4a09      	ldr	r2, [pc, #36]	; (81027ac <calcAccResoltuion+0x94>)
 8102788:	601a      	str	r2, [r3, #0]
      break;
 810278a:	e000      	b.n	810278e <calcAccResoltuion+0x76>

    default:
      break;
 810278c:	bf00      	nop

  }

}
 810278e:	bf00      	nop
 8102790:	370c      	adds	r7, #12
 8102792:	46bd      	mov	sp, r7
 8102794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102798:	4770      	bx	lr
 810279a:	bf00      	nop
 810279c:	100001f0 	.word	0x100001f0
 81027a0:	387fda40 	.word	0x387fda40
 81027a4:	38ffda40 	.word	0x38ffda40
 81027a8:	397fda40 	.word	0x397fda40
 81027ac:	3a3fe3b0 	.word	0x3a3fe3b0

081027b0 <calcMagResolution>:
void calcMagResolution(LSM9DS1Handle* imu)
{
 81027b0:	b480      	push	{r7}
 81027b2:	b083      	sub	sp, #12
 81027b4:	af00      	add	r7, sp, #0
 81027b6:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	7f1b      	ldrb	r3, [r3, #28]
 81027bc:	3b02      	subs	r3, #2
 81027be:	2b0e      	cmp	r3, #14
 81027c0:	d830      	bhi.n	8102824 <calcMagResolution+0x74>
 81027c2:	a201      	add	r2, pc, #4	; (adr r2, 81027c8 <calcMagResolution+0x18>)
 81027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027c8:	08102805 	.word	0x08102805
 81027cc:	08102825 	.word	0x08102825
 81027d0:	0810280d 	.word	0x0810280d
 81027d4:	08102825 	.word	0x08102825
 81027d8:	08102825 	.word	0x08102825
 81027dc:	08102825 	.word	0x08102825
 81027e0:	08102815 	.word	0x08102815
 81027e4:	08102825 	.word	0x08102825
 81027e8:	08102825 	.word	0x08102825
 81027ec:	08102825 	.word	0x08102825
 81027f0:	08102825 	.word	0x08102825
 81027f4:	08102825 	.word	0x08102825
 81027f8:	08102825 	.word	0x08102825
 81027fc:	08102825 	.word	0x08102825
 8102800:	0810281d 	.word	0x0810281d
  {
    case 2:
      mag_res = MAG_FS_4G;
 8102804:	4b0b      	ldr	r3, [pc, #44]	; (8102834 <calcMagResolution+0x84>)
 8102806:	4a0c      	ldr	r2, [pc, #48]	; (8102838 <calcMagResolution+0x88>)
 8102808:	601a      	str	r2, [r3, #0]
    break;
 810280a:	e00c      	b.n	8102826 <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 810280c:	4b09      	ldr	r3, [pc, #36]	; (8102834 <calcMagResolution+0x84>)
 810280e:	4a0b      	ldr	r2, [pc, #44]	; (810283c <calcMagResolution+0x8c>)
 8102810:	601a      	str	r2, [r3, #0]
     break;
 8102812:	e008      	b.n	8102826 <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 8102814:	4b07      	ldr	r3, [pc, #28]	; (8102834 <calcMagResolution+0x84>)
 8102816:	4a0a      	ldr	r2, [pc, #40]	; (8102840 <calcMagResolution+0x90>)
 8102818:	601a      	str	r2, [r3, #0]
      break;
 810281a:	e004      	b.n	8102826 <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 810281c:	4b05      	ldr	r3, [pc, #20]	; (8102834 <calcMagResolution+0x84>)
 810281e:	4a09      	ldr	r2, [pc, #36]	; (8102844 <calcMagResolution+0x94>)
 8102820:	601a      	str	r2, [r3, #0]
      break;
 8102822:	e000      	b.n	8102826 <calcMagResolution+0x76>

    default:
      break;
 8102824:	bf00      	nop

  }

}
 8102826:	bf00      	nop
 8102828:	370c      	adds	r7, #12
 810282a:	46bd      	mov	sp, r7
 810282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102830:	4770      	bx	lr
 8102832:	bf00      	nop
 8102834:	100001f4 	.word	0x100001f4
 8102838:	3912ccf7 	.word	0x3912ccf7
 810283c:	39980b24 	.word	0x39980b24
 8102840:	39e1719f 	.word	0x39e1719f
 8102844:	3a180b24 	.word	0x3a180b24

08102848 <I2CReadBytes>:
   }
   return value;
}

uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8102848:	b580      	push	{r7, lr}
 810284a:	b088      	sub	sp, #32
 810284c:	af04      	add	r7, sp, #16
 810284e:	603a      	str	r2, [r7, #0]
 8102850:	461a      	mov	r2, r3
 8102852:	4603      	mov	r3, r0
 8102854:	71fb      	strb	r3, [r7, #7]
 8102856:	460b      	mov	r3, r1
 8102858:	71bb      	strb	r3, [r7, #6]
 810285a:	4613      	mov	r3, r2
 810285c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;

  //status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 810285e:	79fb      	ldrb	r3, [r7, #7]
 8102860:	b29b      	uxth	r3, r3
 8102862:	005b      	lsls	r3, r3, #1
 8102864:	b299      	uxth	r1, r3
 8102866:	79bb      	ldrb	r3, [r7, #6]
 8102868:	b29a      	uxth	r2, r3
 810286a:	797b      	ldrb	r3, [r7, #5]
 810286c:	b29b      	uxth	r3, r3
 810286e:	2064      	movs	r0, #100	; 0x64
 8102870:	9002      	str	r0, [sp, #8]
 8102872:	9301      	str	r3, [sp, #4]
 8102874:	683b      	ldr	r3, [r7, #0]
 8102876:	9300      	str	r3, [sp, #0]
 8102878:	2301      	movs	r3, #1
 810287a:	4807      	ldr	r0, [pc, #28]	; (8102898 <I2CReadBytes+0x50>)
 810287c:	f004 fa5a 	bl	8106d34 <HAL_I2C_Mem_Read>
 8102880:	4603      	mov	r3, r0
 8102882:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 8102884:	7bfb      	ldrb	r3, [r7, #15]
 8102886:	2b00      	cmp	r3, #0
 8102888:	d001      	beq.n	810288e <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 810288a:	2301      	movs	r3, #1
 810288c:	e000      	b.n	8102890 <I2CReadBytes+0x48>
  }

  return numBytes;
 810288e:	797b      	ldrb	r3, [r7, #5]

}
 8102890:	4618      	mov	r0, r3
 8102892:	3710      	adds	r7, #16
 8102894:	46bd      	mov	sp, r7
 8102896:	bd80      	pop	{r7, pc}
 8102898:	1000012c 	.word	0x1000012c

0810289c <WriteByte>:

HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 810289c:	b580      	push	{r7, lr}
 810289e:	b088      	sub	sp, #32
 81028a0:	af04      	add	r7, sp, #16
 81028a2:	4603      	mov	r3, r0
 81028a4:	71fb      	strb	r3, [r7, #7]
 81028a6:	460b      	mov	r3, r1
 81028a8:	71bb      	strb	r3, [r7, #6]
 81028aa:	4613      	mov	r3, r2
 81028ac:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status;

//  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 81028ae:	79fb      	ldrb	r3, [r7, #7]
 81028b0:	b29b      	uxth	r3, r3
 81028b2:	005b      	lsls	r3, r3, #1
 81028b4:	b299      	uxth	r1, r3
 81028b6:	79bb      	ldrb	r3, [r7, #6]
 81028b8:	b29a      	uxth	r2, r3
 81028ba:	2364      	movs	r3, #100	; 0x64
 81028bc:	9302      	str	r3, [sp, #8]
 81028be:	2301      	movs	r3, #1
 81028c0:	9301      	str	r3, [sp, #4]
 81028c2:	1d7b      	adds	r3, r7, #5
 81028c4:	9300      	str	r3, [sp, #0]
 81028c6:	2301      	movs	r3, #1
 81028c8:	4807      	ldr	r0, [pc, #28]	; (81028e8 <WriteByte+0x4c>)
 81028ca:	f004 f91f 	bl	8106b0c <HAL_I2C_Mem_Write>
 81028ce:	4603      	mov	r3, r0
 81028d0:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81028d2:	7bfb      	ldrb	r3, [r7, #15]
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d001      	beq.n	81028dc <WriteByte+0x40>
  {
    return HAL_ERROR;
 81028d8:	2301      	movs	r3, #1
 81028da:	e000      	b.n	81028de <WriteByte+0x42>
  }

  return HAL_OK;
 81028dc:	2300      	movs	r3, #0

}
 81028de:	4618      	mov	r0, r3
 81028e0:	3710      	adds	r7, #16
 81028e2:	46bd      	mov	sp, r7
 81028e4:	bd80      	pop	{r7, pc}
 81028e6:	bf00      	nop
 81028e8:	1000012c 	.word	0x1000012c

081028ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81028ec:	b580      	push	{r7, lr}
 81028ee:	b082      	sub	sp, #8
 81028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 81028f2:	f000 f8c3 	bl	8102a7c <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81028f6:	4b21      	ldr	r3, [pc, #132]	; (810297c <main+0x90>)
 81028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028fc:	4a1f      	ldr	r2, [pc, #124]	; (810297c <main+0x90>)
 81028fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102906:	4b1d      	ldr	r3, [pc, #116]	; (810297c <main+0x90>)
 8102908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102910:	607b      	str	r3, [r7, #4]
 8102912:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102914:	2001      	movs	r0, #1
 8102916:	f004 f857 	bl	81069c8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810291a:	f005 fcb5 	bl	8108288 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810291e:	2201      	movs	r2, #1
 8102920:	2102      	movs	r1, #2
 8102922:	2000      	movs	r0, #0
 8102924:	f005 fc36 	bl	8108194 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102928:	4b15      	ldr	r3, [pc, #84]	; (8102980 <main+0x94>)
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	091b      	lsrs	r3, r3, #4
 810292e:	f003 030f 	and.w	r3, r3, #15
 8102932:	2b07      	cmp	r3, #7
 8102934:	d108      	bne.n	8102948 <main+0x5c>
 8102936:	4b13      	ldr	r3, [pc, #76]	; (8102984 <main+0x98>)
 8102938:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810293c:	4a11      	ldr	r2, [pc, #68]	; (8102984 <main+0x98>)
 810293e:	f043 0301 	orr.w	r3, r3, #1
 8102942:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102946:	e007      	b.n	8102958 <main+0x6c>
 8102948:	4b0e      	ldr	r3, [pc, #56]	; (8102984 <main+0x98>)
 810294a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810294e:	4a0d      	ldr	r2, [pc, #52]	; (8102984 <main+0x98>)
 8102950:	f043 0301 	orr.w	r3, r3, #1
 8102954:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102958:	f000 fda2 	bl	81034a0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810295c:	f7ff f93a 	bl	8101bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8102960:	f7ff f8e0 	bl	8101b24 <MX_DMA_Init>
  MX_SPI1_Init();
 8102964:	f000 f8bc 	bl	8102ae0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8102968:	f7ff f988 	bl	8101c7c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 810296c:	f000 fc50 	bl	8103210 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
   ConfigSensors();
 8102970:	f000 f850 	bl	8102a14 <ConfigSensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ReadSensors();
 8102974:	f000 f840 	bl	81029f8 <ReadSensors>
 8102978:	e7fc      	b.n	8102974 <main+0x88>
 810297a:	bf00      	nop
 810297c:	58024400 	.word	0x58024400
 8102980:	e000ed00 	.word	0xe000ed00
 8102984:	58026400 	.word	0x58026400

08102988 <GpsTask>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void GpsTask(void)
{
 8102988:	b580      	push	{r7, lr}
 810298a:	af00      	add	r7, sp, #0
  // Setup an update of the GPS sensor accroding to the update rate
  //if(HAL_GetTick() - gps_timer >= GPS_SAMPLE_TIME)
 // {
     processGPS(&gps);
 810298c:	4802      	ldr	r0, [pc, #8]	; (8102998 <GpsTask+0x10>)
 810298e:	f000 faa7 	bl	8102ee0 <processGPS>

  //   gps_timer += GPS_SAMPLE_TIME;
 // }

}
 8102992:	bf00      	nop
 8102994:	bd80      	pop	{r7, pc}
 8102996:	bf00      	nop
 8102998:	100001fc 	.word	0x100001fc

0810299c <AccelTask>:
void AccelTask(void)
{
 810299c:	b580      	push	{r7, lr}
 810299e:	af00      	add	r7, sp, #0
 // if(HAL_GetTick() - accel_timer >= IMU_SAMPLE_TIME)
  //{
    readAccel(&imu);
 81029a0:	4802      	ldr	r0, [pc, #8]	; (81029ac <AccelTask+0x10>)
 81029a2:	f7ff fe39 	bl	8102618 <readAccel>

    //accel_timer+=IMU_SAMPLE_TIME;

  //}

}
 81029a6:	bf00      	nop
 81029a8:	bd80      	pop	{r7, pc}
 81029aa:	bf00      	nop
 81029ac:	10000278 	.word	0x10000278

081029b0 <GyroTask>:
void GyroTask(void)
{
 81029b0:	b580      	push	{r7, lr}
 81029b2:	af00      	add	r7, sp, #0
  //if(HAL_GetTick() - gyro_timer >= IMU_SAMPLE_TIME)
//  {
    readGyro(&imu);
 81029b4:	4802      	ldr	r0, [pc, #8]	; (81029c0 <GyroTask+0x10>)
 81029b6:	f7ff fd8d 	bl	81024d4 <readGyro>

 //   gyro_timer+=IMU_SAMPLE_TIME;

//  }

}
 81029ba:	bf00      	nop
 81029bc:	bd80      	pop	{r7, pc}
 81029be:	bf00      	nop
 81029c0:	10000278 	.word	0x10000278

081029c4 <MagTask>:
void MagTask(void)
{
 81029c4:	b580      	push	{r7, lr}
 81029c6:	af00      	add	r7, sp, #0

 // if(HAL_GetTick() - mag_timer >= MAG_SAMPLE_TIME)
 // {
    readMag(&imu);
 81029c8:	4802      	ldr	r0, [pc, #8]	; (81029d4 <MagTask+0x10>)
 81029ca:	f7ff fdd4 	bl	8102576 <readMag>

   // mag_timer+=MAG_SAMPLE_TIME;

 // }

}
 81029ce:	bf00      	nop
 81029d0:	bd80      	pop	{r7, pc}
 81029d2:	bf00      	nop
 81029d4:	10000278 	.word	0x10000278

081029d8 <BaroTask>:

void BaroTask(void)
{
 81029d8:	b580      	push	{r7, lr}
 81029da:	af00      	add	r7, sp, #0
  //if(HAL_GetTick() - baro_timer >= BARO_SAMPLE_TIME)
  //{

    ReadTemp(&baro);
 81029dc:	4805      	ldr	r0, [pc, #20]	; (81029f4 <BaroTask+0x1c>)
 81029de:	f7fe fce5 	bl	81013ac <ReadTemp>
    ReadPressure(&baro);
 81029e2:	4804      	ldr	r0, [pc, #16]	; (81029f4 <BaroTask+0x1c>)
 81029e4:	f7fe fd32 	bl	810144c <ReadPressure>
    ReadAltitude(&baro);
 81029e8:	4802      	ldr	r0, [pc, #8]	; (81029f4 <BaroTask+0x1c>)
 81029ea:	f7fe ff11 	bl	8101810 <ReadAltitude>
    //baro_timer+=BARO_SAMPLE_TIME;

 // }


}
 81029ee:	bf00      	nop
 81029f0:	bd80      	pop	{r7, pc}
 81029f2:	bf00      	nop
 81029f4:	100002c0 	.word	0x100002c0

081029f8 <ReadSensors>:
void ReadSensors(void)
{
 81029f8:	b580      	push	{r7, lr}
 81029fa:	af00      	add	r7, sp, #0
  GpsTask();
 81029fc:	f7ff ffc4 	bl	8102988 <GpsTask>

  AccelTask();
 8102a00:	f7ff ffcc 	bl	810299c <AccelTask>

  GyroTask();
 8102a04:	f7ff ffd4 	bl	81029b0 <GyroTask>

  MagTask();
 8102a08:	f7ff ffdc 	bl	81029c4 <MagTask>

  BaroTask();
 8102a0c:	f7ff ffe4 	bl	81029d8 <BaroTask>

}
 8102a10:	bf00      	nop
 8102a12:	bd80      	pop	{r7, pc}

08102a14 <ConfigSensors>:




void ConfigSensors(void)
{
 8102a14:	b580      	push	{r7, lr}
 8102a16:	b082      	sub	sp, #8
 8102a18:	af00      	add	r7, sp, #0

  // COnfigure GPS Sensor
  ConfigGPS();
 8102a1a:	f000 fadb 	bl	8102fd4 <ConfigGPS>

  // Configure BMP280
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8102a1e:	2201      	movs	r2, #1
 8102a20:	2110      	movs	r1, #16
 8102a22:	4813      	ldr	r0, [pc, #76]	; (8102a70 <ConfigSensors+0x5c>)
 8102a24:	f003 ffb6 	bl	8106994 <HAL_GPIO_WritePin>
  uint8_t baro_res = CheckBMP280ChipID();
 8102a28:	f7fe fc08 	bl	810123c <CheckBMP280ChipID>
 8102a2c:	4603      	mov	r3, r0
 8102a2e:	71fb      	strb	r3, [r7, #7]
  if(baro_res == HAL_OK)
 8102a30:	79fb      	ldrb	r3, [r7, #7]
 8102a32:	2b00      	cmp	r3, #0
 8102a34:	d10f      	bne.n	8102a56 <ConfigSensors+0x42>
  {
    uint8_t reset_chip_ok = ResetBMP280();
 8102a36:	f7ff f853 	bl	8101ae0 <ResetBMP280>
 8102a3a:	4603      	mov	r3, r0
 8102a3c:	71bb      	strb	r3, [r7, #6]
    HAL_Delay(1000);
 8102a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102a42:	f000 fde1 	bl	8103608 <HAL_Delay>
    uint8_t set_config_ok = setConfig(&baro);
 8102a46:	480b      	ldr	r0, [pc, #44]	; (8102a74 <ConfigSensors+0x60>)
 8102a48:	f7fe ff9e 	bl	8101988 <setConfig>
 8102a4c:	4603      	mov	r3, r0
 8102a4e:	717b      	strb	r3, [r7, #5]
    ReadCalibCoefficients(&baro);
 8102a50:	4808      	ldr	r0, [pc, #32]	; (8102a74 <ConfigSensors+0x60>)
 8102a52:	f7fe ff3d 	bl	81018d0 <ReadCalibCoefficients>
  }

  HAL_Delay(1000);
 8102a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102a5a:	f000 fdd5 	bl	8103608 <HAL_Delay>

  // Configure IMU;
  uint16_t imu_res = setup(&imu);
 8102a5e:	4806      	ldr	r0, [pc, #24]	; (8102a78 <ConfigSensors+0x64>)
 8102a60:	f7ff fac1 	bl	8101fe6 <setup>
 8102a64:	4603      	mov	r3, r0
 8102a66:	807b      	strh	r3, [r7, #2]


}
 8102a68:	bf00      	nop
 8102a6a:	3708      	adds	r7, #8
 8102a6c:	46bd      	mov	sp, r7
 8102a6e:	bd80      	pop	{r7, pc}
 8102a70:	58020000 	.word	0x58020000
 8102a74:	100002c0 	.word	0x100002c0
 8102a78:	10000278 	.word	0x10000278

08102a7c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8102a7c:	b580      	push	{r7, lr}
 8102a7e:	b084      	sub	sp, #16
 8102a80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102a82:	463b      	mov	r3, r7
 8102a84:	2200      	movs	r2, #0
 8102a86:	601a      	str	r2, [r3, #0]
 8102a88:	605a      	str	r2, [r3, #4]
 8102a8a:	609a      	str	r2, [r3, #8]
 8102a8c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8102a8e:	f000 feef 	bl	8103870 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102a92:	2301      	movs	r3, #1
 8102a94:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8102a96:	2300      	movs	r3, #0
 8102a98:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x10000000;
 8102a9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8102a9e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8102aa0:	2311      	movs	r3, #17
 8102aa2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8102aa4:	2300      	movs	r3, #0
 8102aa6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8102aa8:	2300      	movs	r3, #0
 8102aaa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102aac:	2303      	movs	r3, #3
 8102aae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102ab0:	2300      	movs	r3, #0
 8102ab2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8102ab4:	2300      	movs	r3, #0
 8102ab6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8102ab8:	2300      	movs	r3, #0
 8102aba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8102abc:	2300      	movs	r3, #0
 8102abe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102ac0:	463b      	mov	r3, r7
 8102ac2:	4618      	mov	r0, r3
 8102ac4:	f000 ff0c 	bl	81038e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8102ac8:	2004      	movs	r0, #4
 8102aca:	f000 fee9 	bl	81038a0 <HAL_MPU_Enable>

}
 8102ace:	bf00      	nop
 8102ad0:	3710      	adds	r7, #16
 8102ad2:	46bd      	mov	sp, r7
 8102ad4:	bd80      	pop	{r7, pc}

08102ad6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102ad6:	b480      	push	{r7}
 8102ad8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102ada:	b672      	cpsid	i
}
 8102adc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102ade:	e7fe      	b.n	8102ade <Error_Handler+0x8>

08102ae0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102ae0:	b580      	push	{r7, lr}
 8102ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102ae4:	4b27      	ldr	r3, [pc, #156]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102ae6:	4a28      	ldr	r2, [pc, #160]	; (8102b88 <MX_SPI1_Init+0xa8>)
 8102ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102aea:	4b26      	ldr	r3, [pc, #152]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102aec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102af2:	4b24      	ldr	r3, [pc, #144]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102af4:	2200      	movs	r2, #0
 8102af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102af8:	4b22      	ldr	r3, [pc, #136]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102afa:	2207      	movs	r2, #7
 8102afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102afe:	4b21      	ldr	r3, [pc, #132]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b00:	2200      	movs	r2, #0
 8102b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102b04:	4b1f      	ldr	r3, [pc, #124]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b06:	2200      	movs	r2, #0
 8102b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102b0a:	4b1e      	ldr	r3, [pc, #120]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102b12:	4b1c      	ldr	r3, [pc, #112]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b14:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102b18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102b1a:	4b1a      	ldr	r3, [pc, #104]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b1c:	2200      	movs	r2, #0
 8102b1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102b20:	4b18      	ldr	r3, [pc, #96]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b22:	2200      	movs	r2, #0
 8102b24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102b26:	4b17      	ldr	r3, [pc, #92]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b28:	2200      	movs	r2, #0
 8102b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102b2c:	4b15      	ldr	r3, [pc, #84]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b2e:	2200      	movs	r2, #0
 8102b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102b32:	4b14      	ldr	r3, [pc, #80]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102b38:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102b3a:	4b12      	ldr	r3, [pc, #72]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b3c:	2200      	movs	r2, #0
 8102b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102b40:	4b10      	ldr	r3, [pc, #64]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b42:	2200      	movs	r2, #0
 8102b44:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102b46:	4b0f      	ldr	r3, [pc, #60]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b48:	2200      	movs	r2, #0
 8102b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102b4c:	4b0d      	ldr	r3, [pc, #52]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b4e:	2200      	movs	r2, #0
 8102b50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102b52:	4b0c      	ldr	r3, [pc, #48]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b54:	2200      	movs	r2, #0
 8102b56:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102b58:	4b0a      	ldr	r3, [pc, #40]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b5a:	2200      	movs	r2, #0
 8102b5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102b5e:	4b09      	ldr	r3, [pc, #36]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b60:	2200      	movs	r2, #0
 8102b62:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102b64:	4b07      	ldr	r3, [pc, #28]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b66:	2200      	movs	r2, #0
 8102b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102b6a:	4b06      	ldr	r3, [pc, #24]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b6c:	2200      	movs	r2, #0
 8102b6e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102b70:	4804      	ldr	r0, [pc, #16]	; (8102b84 <MX_SPI1_Init+0xa4>)
 8102b72:	f007 f8d1 	bl	8109d18 <HAL_SPI_Init>
 8102b76:	4603      	mov	r3, r0
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d001      	beq.n	8102b80 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102b7c:	f7ff ffab 	bl	8102ad6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102b80:	bf00      	nop
 8102b82:	bd80      	pop	{r7, pc}
 8102b84:	100002f0 	.word	0x100002f0
 8102b88:	40013000 	.word	0x40013000

08102b8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102b8c:	b580      	push	{r7, lr}
 8102b8e:	b0b8      	sub	sp, #224	; 0xe0
 8102b90:	af00      	add	r7, sp, #0
 8102b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102b98:	2200      	movs	r2, #0
 8102b9a:	601a      	str	r2, [r3, #0]
 8102b9c:	605a      	str	r2, [r3, #4]
 8102b9e:	609a      	str	r2, [r3, #8]
 8102ba0:	60da      	str	r2, [r3, #12]
 8102ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102ba4:	f107 0310 	add.w	r3, r7, #16
 8102ba8:	22bc      	movs	r2, #188	; 0xbc
 8102baa:	2100      	movs	r1, #0
 8102bac:	4618      	mov	r0, r3
 8102bae:	f009 fccb 	bl	810c548 <memset>
  if(spiHandle->Instance==SPI1)
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	4a57      	ldr	r2, [pc, #348]	; (8102d14 <HAL_SPI_MspInit+0x188>)
 8102bb8:	4293      	cmp	r3, r2
 8102bba:	f040 80a6 	bne.w	8102d0a <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102bc2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102bc4:	2300      	movs	r3, #0
 8102bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102bc8:	f107 0310 	add.w	r3, r7, #16
 8102bcc:	4618      	mov	r0, r3
 8102bce:	f005 fd41 	bl	8108654 <HAL_RCCEx_PeriphCLKConfig>
 8102bd2:	4603      	mov	r3, r0
 8102bd4:	2b00      	cmp	r3, #0
 8102bd6:	d001      	beq.n	8102bdc <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8102bd8:	f7ff ff7d 	bl	8102ad6 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102bdc:	4b4e      	ldr	r3, [pc, #312]	; (8102d18 <HAL_SPI_MspInit+0x18c>)
 8102bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102be2:	4a4d      	ldr	r2, [pc, #308]	; (8102d18 <HAL_SPI_MspInit+0x18c>)
 8102be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102bec:	4b4a      	ldr	r3, [pc, #296]	; (8102d18 <HAL_SPI_MspInit+0x18c>)
 8102bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102bf6:	60fb      	str	r3, [r7, #12]
 8102bf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102bfa:	4b47      	ldr	r3, [pc, #284]	; (8102d18 <HAL_SPI_MspInit+0x18c>)
 8102bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c00:	4a45      	ldr	r2, [pc, #276]	; (8102d18 <HAL_SPI_MspInit+0x18c>)
 8102c02:	f043 0301 	orr.w	r3, r3, #1
 8102c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102c0a:	4b43      	ldr	r3, [pc, #268]	; (8102d18 <HAL_SPI_MspInit+0x18c>)
 8102c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c10:	f003 0301 	and.w	r3, r3, #1
 8102c14:	60bb      	str	r3, [r7, #8]
 8102c16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8102c18:	23e0      	movs	r3, #224	; 0xe0
 8102c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c1e:	2302      	movs	r3, #2
 8102c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c24:	2300      	movs	r3, #0
 8102c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c2a:	2300      	movs	r3, #0
 8102c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102c30:	2305      	movs	r3, #5
 8102c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102c36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102c3a:	4619      	mov	r1, r3
 8102c3c:	4837      	ldr	r0, [pc, #220]	; (8102d1c <HAL_SPI_MspInit+0x190>)
 8102c3e:	f003 fcf9 	bl	8106634 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102c42:	4b37      	ldr	r3, [pc, #220]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c44:	4a37      	ldr	r2, [pc, #220]	; (8102d24 <HAL_SPI_MspInit+0x198>)
 8102c46:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102c48:	4b35      	ldr	r3, [pc, #212]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c4a:	2225      	movs	r2, #37	; 0x25
 8102c4c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102c4e:	4b34      	ldr	r3, [pc, #208]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c50:	2200      	movs	r2, #0
 8102c52:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102c54:	4b32      	ldr	r3, [pc, #200]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c56:	2200      	movs	r2, #0
 8102c58:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102c5a:	4b31      	ldr	r3, [pc, #196]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102c60:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102c62:	4b2f      	ldr	r3, [pc, #188]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c64:	2200      	movs	r2, #0
 8102c66:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102c68:	4b2d      	ldr	r3, [pc, #180]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c6a:	2200      	movs	r2, #0
 8102c6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102c6e:	4b2c      	ldr	r3, [pc, #176]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c70:	2200      	movs	r2, #0
 8102c72:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102c74:	4b2a      	ldr	r3, [pc, #168]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102c7a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102c7c:	4b28      	ldr	r3, [pc, #160]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c7e:	2200      	movs	r2, #0
 8102c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102c82:	4827      	ldr	r0, [pc, #156]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c84:	f000 fe84 	bl	8103990 <HAL_DMA_Init>
 8102c88:	4603      	mov	r3, r0
 8102c8a:	2b00      	cmp	r3, #0
 8102c8c:	d001      	beq.n	8102c92 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102c8e:	f7ff ff22 	bl	8102ad6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	4a22      	ldr	r2, [pc, #136]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c96:	67da      	str	r2, [r3, #124]	; 0x7c
 8102c98:	4a21      	ldr	r2, [pc, #132]	; (8102d20 <HAL_SPI_MspInit+0x194>)
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102c9e:	4b22      	ldr	r3, [pc, #136]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102ca0:	4a22      	ldr	r2, [pc, #136]	; (8102d2c <HAL_SPI_MspInit+0x1a0>)
 8102ca2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102ca4:	4b20      	ldr	r3, [pc, #128]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102ca6:	2226      	movs	r2, #38	; 0x26
 8102ca8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102caa:	4b1f      	ldr	r3, [pc, #124]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cac:	2240      	movs	r2, #64	; 0x40
 8102cae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102cb0:	4b1d      	ldr	r3, [pc, #116]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cb2:	2200      	movs	r2, #0
 8102cb4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102cb6:	4b1c      	ldr	r3, [pc, #112]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102cbc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102cbe:	4b1a      	ldr	r3, [pc, #104]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cc0:	2200      	movs	r2, #0
 8102cc2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102cc4:	4b18      	ldr	r3, [pc, #96]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cc6:	2200      	movs	r2, #0
 8102cc8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8102cca:	4b17      	ldr	r3, [pc, #92]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102ccc:	2200      	movs	r2, #0
 8102cce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102cd0:	4b15      	ldr	r3, [pc, #84]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102cd6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102cd8:	4b13      	ldr	r3, [pc, #76]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cda:	2200      	movs	r2, #0
 8102cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102cde:	4812      	ldr	r0, [pc, #72]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102ce0:	f000 fe56 	bl	8103990 <HAL_DMA_Init>
 8102ce4:	4603      	mov	r3, r0
 8102ce6:	2b00      	cmp	r3, #0
 8102ce8:	d001      	beq.n	8102cee <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8102cea:	f7ff fef4 	bl	8102ad6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	4a0d      	ldr	r2, [pc, #52]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cf2:	679a      	str	r2, [r3, #120]	; 0x78
 8102cf4:	4a0c      	ldr	r2, [pc, #48]	; (8102d28 <HAL_SPI_MspInit+0x19c>)
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102cfa:	2200      	movs	r2, #0
 8102cfc:	2100      	movs	r1, #0
 8102cfe:	2023      	movs	r0, #35	; 0x23
 8102d00:	f000 fd81 	bl	8103806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102d04:	2023      	movs	r0, #35	; 0x23
 8102d06:	f000 fd98 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8102d0a:	bf00      	nop
 8102d0c:	37e0      	adds	r7, #224	; 0xe0
 8102d0e:	46bd      	mov	sp, r7
 8102d10:	bd80      	pop	{r7, pc}
 8102d12:	bf00      	nop
 8102d14:	40013000 	.word	0x40013000
 8102d18:	58024400 	.word	0x58024400
 8102d1c:	58020000 	.word	0x58020000
 8102d20:	10000378 	.word	0x10000378
 8102d24:	40020010 	.word	0x40020010
 8102d28:	100003f0 	.word	0x100003f0
 8102d2c:	40020028 	.word	0x40020028

08102d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102d30:	b480      	push	{r7}
 8102d32:	b083      	sub	sp, #12
 8102d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102d36:	4b0a      	ldr	r3, [pc, #40]	; (8102d60 <HAL_MspInit+0x30>)
 8102d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102d3c:	4a08      	ldr	r2, [pc, #32]	; (8102d60 <HAL_MspInit+0x30>)
 8102d3e:	f043 0302 	orr.w	r3, r3, #2
 8102d42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102d46:	4b06      	ldr	r3, [pc, #24]	; (8102d60 <HAL_MspInit+0x30>)
 8102d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102d4c:	f003 0302 	and.w	r3, r3, #2
 8102d50:	607b      	str	r3, [r7, #4]
 8102d52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102d54:	bf00      	nop
 8102d56:	370c      	adds	r7, #12
 8102d58:	46bd      	mov	sp, r7
 8102d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d5e:	4770      	bx	lr
 8102d60:	58024400 	.word	0x58024400

08102d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102d64:	b480      	push	{r7}
 8102d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102d68:	e7fe      	b.n	8102d68 <NMI_Handler+0x4>

08102d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102d6a:	b480      	push	{r7}
 8102d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102d6e:	e7fe      	b.n	8102d6e <HardFault_Handler+0x4>

08102d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102d70:	b480      	push	{r7}
 8102d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102d74:	e7fe      	b.n	8102d74 <MemManage_Handler+0x4>

08102d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102d76:	b480      	push	{r7}
 8102d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102d7a:	e7fe      	b.n	8102d7a <BusFault_Handler+0x4>

08102d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102d7c:	b480      	push	{r7}
 8102d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102d80:	e7fe      	b.n	8102d80 <UsageFault_Handler+0x4>

08102d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102d82:	b480      	push	{r7}
 8102d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102d86:	bf00      	nop
 8102d88:	46bd      	mov	sp, r7
 8102d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d8e:	4770      	bx	lr

08102d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102d90:	b480      	push	{r7}
 8102d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102d94:	bf00      	nop
 8102d96:	46bd      	mov	sp, r7
 8102d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d9c:	4770      	bx	lr

08102d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102d9e:	b480      	push	{r7}
 8102da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102da2:	bf00      	nop
 8102da4:	46bd      	mov	sp, r7
 8102da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102daa:	4770      	bx	lr

08102dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102dac:	b580      	push	{r7, lr}
 8102dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102db0:	f000 fc0a 	bl	81035c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102db4:	bf00      	nop
 8102db6:	bd80      	pop	{r7, pc}

08102db8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102db8:	b580      	push	{r7, lr}
 8102dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102dbc:	4802      	ldr	r0, [pc, #8]	; (8102dc8 <DMA1_Stream0_IRQHandler+0x10>)
 8102dbe:	f002 f90d 	bl	8104fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102dc2:	bf00      	nop
 8102dc4:	bd80      	pop	{r7, pc}
 8102dc6:	bf00      	nop
 8102dc8:	10000378 	.word	0x10000378

08102dcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102dcc:	b580      	push	{r7, lr}
 8102dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102dd0:	4802      	ldr	r0, [pc, #8]	; (8102ddc <DMA1_Stream1_IRQHandler+0x10>)
 8102dd2:	f002 f903 	bl	8104fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102dd6:	bf00      	nop
 8102dd8:	bd80      	pop	{r7, pc}
 8102dda:	bf00      	nop
 8102ddc:	100003f0 	.word	0x100003f0

08102de0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8102de0:	b580      	push	{r7, lr}
 8102de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8102de4:	4802      	ldr	r0, [pc, #8]	; (8102df0 <DMA1_Stream2_IRQHandler+0x10>)
 8102de6:	f002 f8f9 	bl	8104fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8102dea:	bf00      	nop
 8102dec:	bd80      	pop	{r7, pc}
 8102dee:	bf00      	nop
 8102df0:	10000178 	.word	0x10000178

08102df4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8102df4:	b580      	push	{r7, lr}
 8102df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102df8:	4802      	ldr	r0, [pc, #8]	; (8102e04 <DMA1_Stream3_IRQHandler+0x10>)
 8102dfa:	f002 f8ef 	bl	8104fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8102dfe:	bf00      	nop
 8102e00:	bd80      	pop	{r7, pc}
 8102e02:	bf00      	nop
 8102e04:	100000b4 	.word	0x100000b4

08102e08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102e08:	b580      	push	{r7, lr}
 8102e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102e0c:	4802      	ldr	r0, [pc, #8]	; (8102e18 <I2C1_EV_IRQHandler+0x10>)
 8102e0e:	f004 f8ab 	bl	8106f68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8102e12:	bf00      	nop
 8102e14:	bd80      	pop	{r7, pc}
 8102e16:	bf00      	nop
 8102e18:	1000012c 	.word	0x1000012c

08102e1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102e1c:	b580      	push	{r7, lr}
 8102e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8102e20:	4802      	ldr	r0, [pc, #8]	; (8102e2c <I2C1_ER_IRQHandler+0x10>)
 8102e22:	f004 f8bb 	bl	8106f9c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102e26:	bf00      	nop
 8102e28:	bd80      	pop	{r7, pc}
 8102e2a:	bf00      	nop
 8102e2c:	1000012c 	.word	0x1000012c

08102e30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8102e30:	b580      	push	{r7, lr}
 8102e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102e34:	4802      	ldr	r0, [pc, #8]	; (8102e40 <SPI1_IRQHandler+0x10>)
 8102e36:	f007 fa3d 	bl	810a2b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102e3a:	bf00      	nop
 8102e3c:	bd80      	pop	{r7, pc}
 8102e3e:	bf00      	nop
 8102e40:	100002f0 	.word	0x100002f0

08102e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102e44:	b580      	push	{r7, lr}
 8102e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102e48:	4802      	ldr	r0, [pc, #8]	; (8102e54 <USART3_IRQHandler+0x10>)
 8102e4a:	f007 feb5 	bl	810abb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8102e4e:	bf00      	nop
 8102e50:	bd80      	pop	{r7, pc}
 8102e52:	bf00      	nop
 8102e54:	100004e0 	.word	0x100004e0

08102e58 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102e5c:	4802      	ldr	r0, [pc, #8]	; (8102e68 <DMA1_Stream7_IRQHandler+0x10>)
 8102e5e:	f002 f8bd 	bl	8104fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8102e62:	bf00      	nop
 8102e64:	bd80      	pop	{r7, pc}
 8102e66:	bf00      	nop
 8102e68:	10000468 	.word	0x10000468

08102e6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8102e6c:	b580      	push	{r7, lr}
 8102e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102e70:	4802      	ldr	r0, [pc, #8]	; (8102e7c <DMA2_Stream0_IRQHandler+0x10>)
 8102e72:	f002 f8b3 	bl	8104fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8102e76:	bf00      	nop
 8102e78:	bd80      	pop	{r7, pc}
 8102e7a:	bf00      	nop
 8102e7c:	10000570 	.word	0x10000570

08102e80 <calcChecksum>:
//      }
//
// }

 void calcChecksum(unsigned char* ck)
 {
 8102e80:	b580      	push	{r7, lr}
 8102e82:	b084      	sub	sp, #16
 8102e84:	af00      	add	r7, sp, #0
 8102e86:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 8102e88:	2202      	movs	r2, #2
 8102e8a:	2100      	movs	r1, #0
 8102e8c:	6878      	ldr	r0, [r7, #4]
 8102e8e:	f009 fb5b 	bl	810c548 <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8102e92:	2300      	movs	r3, #0
 8102e94:	60fb      	str	r3, [r7, #12]
 8102e96:	e016      	b.n	8102ec6 <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	781a      	ldrb	r2, [r3, #0]
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	490e      	ldr	r1, [pc, #56]	; (8102ed8 <calcChecksum+0x58>)
 8102ea0:	440b      	add	r3, r1
 8102ea2:	781b      	ldrb	r3, [r3, #0]
 8102ea4:	4413      	add	r3, r2
 8102ea6:	b2da      	uxtb	r2, r3
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	3301      	adds	r3, #1
 8102eb0:	7819      	ldrb	r1, [r3, #0]
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	781a      	ldrb	r2, [r3, #0]
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	3301      	adds	r3, #1
 8102eba:	440a      	add	r2, r1
 8102ebc:	b2d2      	uxtb	r2, r2
 8102ebe:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8102ec0:	68fb      	ldr	r3, [r7, #12]
 8102ec2:	3301      	adds	r3, #1
 8102ec4:	60fb      	str	r3, [r7, #12]
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	2b5f      	cmp	r3, #95	; 0x5f
 8102eca:	dde5      	ble.n	8102e98 <calcChecksum+0x18>
      }

 }
 8102ecc:	bf00      	nop
 8102ece:	bf00      	nop
 8102ed0:	3710      	adds	r7, #16
 8102ed2:	46bd      	mov	sp, r7
 8102ed4:	bd80      	pop	{r7, pc}
 8102ed6:	bf00      	nop
 8102ed8:	10000218 	.word	0x10000218
 8102edc:	00000000 	.word	0x00000000

08102ee0 <processGPS>:


 void processGPS(GPSHandle* gps)
 {
 8102ee0:	b580      	push	{r7, lr}
 8102ee2:	b082      	sub	sp, #8
 8102ee4:	af00      	add	r7, sp, #0
 8102ee6:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 8102ee8:	4b37      	ldr	r3, [pc, #220]	; (8102fc8 <processGPS+0xe8>)
 8102eea:	6a1b      	ldr	r3, [r3, #32]
 8102eec:	4618      	mov	r0, r3
 8102eee:	f7fd fb45 	bl	810057c <__aeabi_i2d>
 8102ef2:	a333      	add	r3, pc, #204	; (adr r3, 8102fc0 <processGPS+0xe0>)
 8102ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ef8:	f7fd fbaa 	bl	8100650 <__aeabi_dmul>
 8102efc:	4602      	mov	r2, r0
 8102efe:	460b      	mov	r3, r1
 8102f00:	4610      	mov	r0, r2
 8102f02:	4619      	mov	r1, r3
 8102f04:	f7fd fe54 	bl	8100bb0 <__aeabi_d2f>
 8102f08:	4602      	mov	r2, r0
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 8102f0e:	4b2e      	ldr	r3, [pc, #184]	; (8102fc8 <processGPS+0xe8>)
 8102f10:	69db      	ldr	r3, [r3, #28]
 8102f12:	4618      	mov	r0, r3
 8102f14:	f7fd fb32 	bl	810057c <__aeabi_i2d>
 8102f18:	a329      	add	r3, pc, #164	; (adr r3, 8102fc0 <processGPS+0xe0>)
 8102f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f1e:	f7fd fb97 	bl	8100650 <__aeabi_dmul>
 8102f22:	4602      	mov	r2, r0
 8102f24:	460b      	mov	r3, r1
 8102f26:	4610      	mov	r0, r2
 8102f28:	4619      	mov	r1, r3
 8102f2a:	f7fd fe41 	bl	8100bb0 <__aeabi_d2f>
 8102f2e:	4602      	mov	r2, r0
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.height / 1000.0f;
 8102f34:	4b24      	ldr	r3, [pc, #144]	; (8102fc8 <processGPS+0xe8>)
 8102f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102f38:	ee07 3a90 	vmov	s15, r3
 8102f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102f40:	eddf 6a22 	vldr	s13, [pc, #136]	; 8102fcc <processGPS+0xec>
 8102f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 8102f4e:	4b1e      	ldr	r3, [pc, #120]	; (8102fc8 <processGPS+0xe8>)
 8102f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102f52:	ee07 3a90 	vmov	s15, r3
 8102f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102f5a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8102fcc <processGPS+0xec>
 8102f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 8102f68:	4b17      	ldr	r3, [pc, #92]	; (8102fc8 <processGPS+0xe8>)
 8102f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102f6c:	ee07 3a90 	vmov	s15, r3
 8102f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102f74:	eddf 6a15 	vldr	s13, [pc, #84]	; 8102fcc <processGPS+0xec>
 8102f78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 8102f82:	4b11      	ldr	r3, [pc, #68]	; (8102fc8 <processGPS+0xe8>)
 8102f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102f86:	ee07 3a90 	vmov	s15, r3
 8102f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102f8e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8102fd0 <processGPS+0xf0>
 8102f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 8102f9c:	4b0a      	ldr	r3, [pc, #40]	; (8102fc8 <processGPS+0xe8>)
 8102f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102fa0:	ee07 3a90 	vmov	s15, r3
 8102fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8102fa8:	eddf 6a08 	vldr	s13, [pc, #32]	; 8102fcc <processGPS+0xec>
 8102fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	edc3 7a06 	vstr	s15, [r3, #24]


 }
 8102fb6:	bf00      	nop
 8102fb8:	3708      	adds	r7, #8
 8102fba:	46bd      	mov	sp, r7
 8102fbc:	bd80      	pop	{r7, pc}
 8102fbe:	bf00      	nop
 8102fc0:	9abcaf48 	.word	0x9abcaf48
 8102fc4:	3e7ad7f2 	.word	0x3e7ad7f2
 8102fc8:	10000218 	.word	0x10000218
 8102fcc:	447a0000 	.word	0x447a0000
 8102fd0:	c47a0000 	.word	0xc47a0000

08102fd4 <ConfigGPS>:
//     return *gps;
// }


 void ConfigGPS(void)
 {
 8102fd4:	b590      	push	{r4, r7, lr}
 8102fd6:	b0c1      	sub	sp, #260	; 0x104
 8102fd8:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 8102fda:	4b43      	ldr	r3, [pc, #268]	; (81030e8 <ConfigGPS+0x114>)
 8102fdc:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8102fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102fe2:	c407      	stmia	r4!, {r0, r1, r2}
 8102fe4:	8023      	strh	r3, [r4, #0]
 8102fe6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8102fea:	220e      	movs	r2, #14
 8102fec:	4619      	mov	r1, r3
 8102fee:	483f      	ldr	r0, [pc, #252]	; (81030ec <ConfigGPS+0x118>)
 8102ff0:	f007 fd1c 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102ff4:	2032      	movs	r0, #50	; 0x32
 8102ff6:	f000 fb07 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 8102ffa:	4b3d      	ldr	r3, [pc, #244]	; (81030f0 <ConfigGPS+0x11c>)
 8102ffc:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8103000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103006:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 810300a:	2210      	movs	r2, #16
 810300c:	4619      	mov	r1, r3
 810300e:	4837      	ldr	r0, [pc, #220]	; (81030ec <ConfigGPS+0x118>)
 8103010:	f007 fd0c 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103014:	2032      	movs	r0, #50	; 0x32
 8103016:	f000 faf7 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 810301a:	4b36      	ldr	r3, [pc, #216]	; (81030f4 <ConfigGPS+0x120>)
 810301c:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8103020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103026:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 810302a:	2210      	movs	r2, #16
 810302c:	4619      	mov	r1, r3
 810302e:	482f      	ldr	r0, [pc, #188]	; (81030ec <ConfigGPS+0x118>)
 8103030:	f007 fcfc 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103034:	2032      	movs	r0, #50	; 0x32
 8103036:	f000 fae7 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 810303a:	4b2f      	ldr	r3, [pc, #188]	; (81030f8 <ConfigGPS+0x124>)
 810303c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8103040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103046:	f107 0390 	add.w	r3, r7, #144	; 0x90
 810304a:	2210      	movs	r2, #16
 810304c:	4619      	mov	r1, r3
 810304e:	4827      	ldr	r0, [pc, #156]	; (81030ec <ConfigGPS+0x118>)
 8103050:	f007 fcec 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103054:	2032      	movs	r0, #50	; 0x32
 8103056:	f000 fad7 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 810305a:	4b28      	ldr	r3, [pc, #160]	; (81030fc <ConfigGPS+0x128>)
 810305c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8103060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103066:	f107 0370 	add.w	r3, r7, #112	; 0x70
 810306a:	2210      	movs	r2, #16
 810306c:	4619      	mov	r1, r3
 810306e:	481f      	ldr	r0, [pc, #124]	; (81030ec <ConfigGPS+0x118>)
 8103070:	f007 fcdc 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103074:	2032      	movs	r0, #50	; 0x32
 8103076:	f000 fac7 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 810307a:	4b21      	ldr	r3, [pc, #132]	; (8103100 <ConfigGPS+0x12c>)
 810307c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8103080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103086:	f107 0350 	add.w	r3, r7, #80	; 0x50
 810308a:	2210      	movs	r2, #16
 810308c:	4619      	mov	r1, r3
 810308e:	4817      	ldr	r0, [pc, #92]	; (81030ec <ConfigGPS+0x118>)
 8103090:	f007 fccc 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103094:	2032      	movs	r0, #50	; 0x32
 8103096:	f000 fab7 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 810309a:	4b1a      	ldr	r3, [pc, #104]	; (8103104 <ConfigGPS+0x130>)
 810309c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 81030a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81030a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81030a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81030aa:	2210      	movs	r2, #16
 81030ac:	4619      	mov	r1, r3
 81030ae:	480f      	ldr	r0, [pc, #60]	; (81030ec <ConfigGPS+0x118>)
 81030b0:	f007 fcbc 	bl	810aa2c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81030b4:	2032      	movs	r0, #50	; 0x32
 81030b6:	f000 faa7 	bl	8103608 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 81030ba:	4b13      	ldr	r3, [pc, #76]	; (8103108 <ConfigGPS+0x134>)
 81030bc:	f107 0410 	add.w	r4, r7, #16
 81030c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81030c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81030c6:	f107 0310 	add.w	r3, r7, #16
 81030ca:	2210      	movs	r2, #16
 81030cc:	4619      	mov	r1, r3
 81030ce:	4807      	ldr	r0, [pc, #28]	; (81030ec <ConfigGPS+0x118>)
 81030d0:	f007 fcac 	bl	810aa2c <HAL_UART_Transmit_DMA>

   HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 81030d4:	2201      	movs	r2, #1
 81030d6:	490d      	ldr	r1, [pc, #52]	; (810310c <ConfigGPS+0x138>)
 81030d8:	4804      	ldr	r0, [pc, #16]	; (81030ec <ConfigGPS+0x118>)
 81030da:	f007 fd27 	bl	810ab2c <HAL_UART_Receive_DMA>
 }
 81030de:	bf00      	nop
 81030e0:	f507 7782 	add.w	r7, r7, #260	; 0x104
 81030e4:	46bd      	mov	sp, r7
 81030e6:	bd90      	pop	{r4, r7, pc}
 81030e8:	0810d4e8 	.word	0x0810d4e8
 81030ec:	100004e0 	.word	0x100004e0
 81030f0:	0810d4f8 	.word	0x0810d4f8
 81030f4:	0810d508 	.word	0x0810d508
 81030f8:	0810d518 	.word	0x0810d518
 81030fc:	0810d528 	.word	0x0810d528
 8103100:	0810d538 	.word	0x0810d538
 8103104:	0810d548 	.word	0x0810d548
 8103108:	0810d558 	.word	0x0810d558
 810310c:	100000a4 	.word	0x100000a4

08103110 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103110:	b480      	push	{r7}
 8103112:	b083      	sub	sp, #12
 8103114:	af00      	add	r7, sp, #0
 8103116:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8103118:	bf00      	nop
 810311a:	370c      	adds	r7, #12
 810311c:	46bd      	mov	sp, r7
 810311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103122:	4770      	bx	lr

08103124 <HAL_UART_RxCpltCallback>:


 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103124:	b580      	push	{r7, lr}
 8103126:	b084      	sub	sp, #16
 8103128:	af00      	add	r7, sp, #0
 810312a:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	4a31      	ldr	r2, [pc, #196]	; (81031f8 <HAL_UART_RxCpltCallback+0xd4>)
 8103132:	4293      	cmp	r3, r2
 8103134:	d15b      	bne.n	81031ee <HAL_UART_RxCpltCallback+0xca>
    {
      if(byte_pos < 2)
 8103136:	4b31      	ldr	r3, [pc, #196]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	2b01      	cmp	r3, #1
 810313c:	dc17      	bgt.n	810316e <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 810313e:	4b30      	ldr	r3, [pc, #192]	; (8103200 <HAL_UART_RxCpltCallback+0xdc>)
 8103140:	781a      	ldrb	r2, [r3, #0]
 8103142:	4b30      	ldr	r3, [pc, #192]	; (8103204 <HAL_UART_RxCpltCallback+0xe0>)
 8103144:	881b      	ldrh	r3, [r3, #0]
 8103146:	81bb      	strh	r3, [r7, #12]
 8103148:	4b2c      	ldr	r3, [pc, #176]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	f107 0110 	add.w	r1, r7, #16
 8103150:	440b      	add	r3, r1
 8103152:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8103156:	429a      	cmp	r2, r3
 8103158:	d105      	bne.n	8103166 <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 810315a:	4b28      	ldr	r3, [pc, #160]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	3301      	adds	r3, #1
 8103160:	4a26      	ldr	r2, [pc, #152]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 8103162:	6013      	str	r3, [r2, #0]
        }
      }
    }

    //processGPS(&gps);
 }
 8103164:	e043      	b.n	81031ee <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8103166:	4b25      	ldr	r3, [pc, #148]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 8103168:	2200      	movs	r2, #0
 810316a:	601a      	str	r2, [r3, #0]
 }
 810316c:	e03f      	b.n	81031ee <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 810316e:	4b23      	ldr	r3, [pc, #140]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	3b01      	subs	r3, #1
 8103174:	2260      	movs	r2, #96	; 0x60
 8103176:	4293      	cmp	r3, r2
 8103178:	dc07      	bgt.n	810318a <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 810317a:	4b20      	ldr	r3, [pc, #128]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	3b02      	subs	r3, #2
 8103180:	4a21      	ldr	r2, [pc, #132]	; (8103208 <HAL_UART_RxCpltCallback+0xe4>)
 8103182:	4413      	add	r3, r2
 8103184:	4a1e      	ldr	r2, [pc, #120]	; (8103200 <HAL_UART_RxCpltCallback+0xdc>)
 8103186:	7812      	ldrb	r2, [r2, #0]
 8103188:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 810318a:	4b1c      	ldr	r3, [pc, #112]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	3301      	adds	r3, #1
 8103190:	4a1a      	ldr	r2, [pc, #104]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 8103192:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 8103194:	2360      	movs	r3, #96	; 0x60
 8103196:	1c9a      	adds	r2, r3, #2
 8103198:	4b18      	ldr	r3, [pc, #96]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	429a      	cmp	r2, r3
 810319e:	d103      	bne.n	81031a8 <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 81031a0:	481a      	ldr	r0, [pc, #104]	; (810320c <HAL_UART_RxCpltCallback+0xe8>)
 81031a2:	f7ff fe6d 	bl	8102e80 <calcChecksum>
 }
 81031a6:	e022      	b.n	81031ee <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 81031a8:	2360      	movs	r3, #96	; 0x60
 81031aa:	1cda      	adds	r2, r3, #3
 81031ac:	4b13      	ldr	r3, [pc, #76]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 81031ae:	681b      	ldr	r3, [r3, #0]
 81031b0:	429a      	cmp	r2, r3
 81031b2:	d109      	bne.n	81031c8 <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 81031b4:	4b12      	ldr	r3, [pc, #72]	; (8103200 <HAL_UART_RxCpltCallback+0xdc>)
 81031b6:	781a      	ldrb	r2, [r3, #0]
 81031b8:	4b14      	ldr	r3, [pc, #80]	; (810320c <HAL_UART_RxCpltCallback+0xe8>)
 81031ba:	781b      	ldrb	r3, [r3, #0]
 81031bc:	429a      	cmp	r2, r3
 81031be:	d016      	beq.n	81031ee <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 81031c0:	4b0e      	ldr	r3, [pc, #56]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 81031c2:	2200      	movs	r2, #0
 81031c4:	601a      	str	r2, [r3, #0]
 }
 81031c6:	e012      	b.n	81031ee <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 81031c8:	2360      	movs	r3, #96	; 0x60
 81031ca:	1d1a      	adds	r2, r3, #4
 81031cc:	4b0b      	ldr	r3, [pc, #44]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	429a      	cmp	r2, r3
 81031d2:	d103      	bne.n	81031dc <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 81031d4:	4b09      	ldr	r3, [pc, #36]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 81031d6:	2200      	movs	r2, #0
 81031d8:	601a      	str	r2, [r3, #0]
 }
 81031da:	e008      	b.n	81031ee <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 81031dc:	2360      	movs	r3, #96	; 0x60
 81031de:	1d1a      	adds	r2, r3, #4
 81031e0:	4b06      	ldr	r3, [pc, #24]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	429a      	cmp	r2, r3
 81031e6:	da02      	bge.n	81031ee <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 81031e8:	4b04      	ldr	r3, [pc, #16]	; (81031fc <HAL_UART_RxCpltCallback+0xd8>)
 81031ea:	2200      	movs	r2, #0
 81031ec:	601a      	str	r2, [r3, #0]
 }
 81031ee:	bf00      	nop
 81031f0:	3710      	adds	r7, #16
 81031f2:	46bd      	mov	sp, r7
 81031f4:	bd80      	pop	{r7, pc}
 81031f6:	bf00      	nop
 81031f8:	40004800 	.word	0x40004800
 81031fc:	100000a8 	.word	0x100000a8
 8103200:	100000a4 	.word	0x100000a4
 8103204:	0810d568 	.word	0x0810d568
 8103208:	10000218 	.word	0x10000218
 810320c:	100000ac 	.word	0x100000ac

08103210 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8103210:	b580      	push	{r7, lr}
 8103212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103214:	4b22      	ldr	r3, [pc, #136]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103216:	4a23      	ldr	r2, [pc, #140]	; (81032a4 <MX_USART3_UART_Init+0x94>)
 8103218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 810321a:	4b21      	ldr	r3, [pc, #132]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810321c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8103220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103222:	4b1f      	ldr	r3, [pc, #124]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103224:	2200      	movs	r2, #0
 8103226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103228:	4b1d      	ldr	r3, [pc, #116]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810322a:	2200      	movs	r2, #0
 810322c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810322e:	4b1c      	ldr	r3, [pc, #112]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103230:	2200      	movs	r2, #0
 8103232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103234:	4b1a      	ldr	r3, [pc, #104]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103236:	220c      	movs	r2, #12
 8103238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810323a:	4b19      	ldr	r3, [pc, #100]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810323c:	2200      	movs	r2, #0
 810323e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103240:	4b17      	ldr	r3, [pc, #92]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103242:	2200      	movs	r2, #0
 8103244:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103246:	4b16      	ldr	r3, [pc, #88]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103248:	2200      	movs	r2, #0
 810324a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810324c:	4b14      	ldr	r3, [pc, #80]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810324e:	2200      	movs	r2, #0
 8103250:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103252:	4b13      	ldr	r3, [pc, #76]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 8103254:	2200      	movs	r2, #0
 8103256:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103258:	4811      	ldr	r0, [pc, #68]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810325a:	f007 fb97 	bl	810a98c <HAL_UART_Init>
 810325e:	4603      	mov	r3, r0
 8103260:	2b00      	cmp	r3, #0
 8103262:	d001      	beq.n	8103268 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103264:	f7ff fc37 	bl	8102ad6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103268:	2100      	movs	r1, #0
 810326a:	480d      	ldr	r0, [pc, #52]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810326c:	f009 f878 	bl	810c360 <HAL_UARTEx_SetTxFifoThreshold>
 8103270:	4603      	mov	r3, r0
 8103272:	2b00      	cmp	r3, #0
 8103274:	d001      	beq.n	810327a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8103276:	f7ff fc2e 	bl	8102ad6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810327a:	2100      	movs	r1, #0
 810327c:	4808      	ldr	r0, [pc, #32]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810327e:	f009 f8ad 	bl	810c3dc <HAL_UARTEx_SetRxFifoThreshold>
 8103282:	4603      	mov	r3, r0
 8103284:	2b00      	cmp	r3, #0
 8103286:	d001      	beq.n	810328c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103288:	f7ff fc25 	bl	8102ad6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810328c:	4804      	ldr	r0, [pc, #16]	; (81032a0 <MX_USART3_UART_Init+0x90>)
 810328e:	f009 f82e 	bl	810c2ee <HAL_UARTEx_DisableFifoMode>
 8103292:	4603      	mov	r3, r0
 8103294:	2b00      	cmp	r3, #0
 8103296:	d001      	beq.n	810329c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103298:	f7ff fc1d 	bl	8102ad6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810329c:	bf00      	nop
 810329e:	bd80      	pop	{r7, pc}
 81032a0:	100004e0 	.word	0x100004e0
 81032a4:	40004800 	.word	0x40004800

081032a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81032a8:	b580      	push	{r7, lr}
 81032aa:	b0b8      	sub	sp, #224	; 0xe0
 81032ac:	af00      	add	r7, sp, #0
 81032ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81032b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81032b4:	2200      	movs	r2, #0
 81032b6:	601a      	str	r2, [r3, #0]
 81032b8:	605a      	str	r2, [r3, #4]
 81032ba:	609a      	str	r2, [r3, #8]
 81032bc:	60da      	str	r2, [r3, #12]
 81032be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81032c0:	f107 0310 	add.w	r3, r7, #16
 81032c4:	22bc      	movs	r2, #188	; 0xbc
 81032c6:	2100      	movs	r1, #0
 81032c8:	4618      	mov	r0, r3
 81032ca:	f009 f93d 	bl	810c548 <memset>
  if(uartHandle->Instance==USART3)
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	4a57      	ldr	r2, [pc, #348]	; (8103430 <HAL_UART_MspInit+0x188>)
 81032d4:	4293      	cmp	r3, r2
 81032d6:	f040 80a7 	bne.w	8103428 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81032da:	2302      	movs	r3, #2
 81032dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81032de:	2300      	movs	r3, #0
 81032e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81032e4:	f107 0310 	add.w	r3, r7, #16
 81032e8:	4618      	mov	r0, r3
 81032ea:	f005 f9b3 	bl	8108654 <HAL_RCCEx_PeriphCLKConfig>
 81032ee:	4603      	mov	r3, r0
 81032f0:	2b00      	cmp	r3, #0
 81032f2:	d001      	beq.n	81032f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 81032f4:	f7ff fbef 	bl	8102ad6 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81032f8:	4b4e      	ldr	r3, [pc, #312]	; (8103434 <HAL_UART_MspInit+0x18c>)
 81032fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81032fe:	4a4d      	ldr	r2, [pc, #308]	; (8103434 <HAL_UART_MspInit+0x18c>)
 8103300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103304:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103308:	4b4a      	ldr	r3, [pc, #296]	; (8103434 <HAL_UART_MspInit+0x18c>)
 810330a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810330e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103312:	60fb      	str	r3, [r7, #12]
 8103314:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103316:	4b47      	ldr	r3, [pc, #284]	; (8103434 <HAL_UART_MspInit+0x18c>)
 8103318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810331c:	4a45      	ldr	r2, [pc, #276]	; (8103434 <HAL_UART_MspInit+0x18c>)
 810331e:	f043 0308 	orr.w	r3, r3, #8
 8103322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103326:	4b43      	ldr	r3, [pc, #268]	; (8103434 <HAL_UART_MspInit+0x18c>)
 8103328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810332c:	f003 0308 	and.w	r3, r3, #8
 8103330:	60bb      	str	r3, [r7, #8]
 8103332:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8103334:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810333c:	2302      	movs	r3, #2
 810333e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103342:	2300      	movs	r3, #0
 8103344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103348:	2300      	movs	r3, #0
 810334a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810334e:	2307      	movs	r3, #7
 8103350:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103354:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103358:	4619      	mov	r1, r3
 810335a:	4837      	ldr	r0, [pc, #220]	; (8103438 <HAL_UART_MspInit+0x190>)
 810335c:	f003 f96a 	bl	8106634 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8103360:	4b36      	ldr	r3, [pc, #216]	; (810343c <HAL_UART_MspInit+0x194>)
 8103362:	4a37      	ldr	r2, [pc, #220]	; (8103440 <HAL_UART_MspInit+0x198>)
 8103364:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8103366:	4b35      	ldr	r3, [pc, #212]	; (810343c <HAL_UART_MspInit+0x194>)
 8103368:	222d      	movs	r2, #45	; 0x2d
 810336a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810336c:	4b33      	ldr	r3, [pc, #204]	; (810343c <HAL_UART_MspInit+0x194>)
 810336e:	2200      	movs	r2, #0
 8103370:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103372:	4b32      	ldr	r3, [pc, #200]	; (810343c <HAL_UART_MspInit+0x194>)
 8103374:	2200      	movs	r2, #0
 8103376:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8103378:	4b30      	ldr	r3, [pc, #192]	; (810343c <HAL_UART_MspInit+0x194>)
 810337a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810337e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103380:	4b2e      	ldr	r3, [pc, #184]	; (810343c <HAL_UART_MspInit+0x194>)
 8103382:	2200      	movs	r2, #0
 8103384:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103386:	4b2d      	ldr	r3, [pc, #180]	; (810343c <HAL_UART_MspInit+0x194>)
 8103388:	2200      	movs	r2, #0
 810338a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 810338c:	4b2b      	ldr	r3, [pc, #172]	; (810343c <HAL_UART_MspInit+0x194>)
 810338e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103392:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8103394:	4b29      	ldr	r3, [pc, #164]	; (810343c <HAL_UART_MspInit+0x194>)
 8103396:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810339a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810339c:	4b27      	ldr	r3, [pc, #156]	; (810343c <HAL_UART_MspInit+0x194>)
 810339e:	2200      	movs	r2, #0
 81033a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81033a2:	4826      	ldr	r0, [pc, #152]	; (810343c <HAL_UART_MspInit+0x194>)
 81033a4:	f000 faf4 	bl	8103990 <HAL_DMA_Init>
 81033a8:	4603      	mov	r3, r0
 81033aa:	2b00      	cmp	r3, #0
 81033ac:	d001      	beq.n	81033b2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 81033ae:	f7ff fb92 	bl	8102ad6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	4a21      	ldr	r2, [pc, #132]	; (810343c <HAL_UART_MspInit+0x194>)
 81033b6:	67da      	str	r2, [r3, #124]	; 0x7c
 81033b8:	4a20      	ldr	r2, [pc, #128]	; (810343c <HAL_UART_MspInit+0x194>)
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81033be:	4b21      	ldr	r3, [pc, #132]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033c0:	4a21      	ldr	r2, [pc, #132]	; (8103448 <HAL_UART_MspInit+0x1a0>)
 81033c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81033c4:	4b1f      	ldr	r3, [pc, #124]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033c6:	222e      	movs	r2, #46	; 0x2e
 81033c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81033ca:	4b1e      	ldr	r3, [pc, #120]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033cc:	2240      	movs	r2, #64	; 0x40
 81033ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81033d0:	4b1c      	ldr	r3, [pc, #112]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033d2:	2200      	movs	r2, #0
 81033d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81033d6:	4b1b      	ldr	r3, [pc, #108]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81033dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81033de:	4b19      	ldr	r3, [pc, #100]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033e0:	2200      	movs	r2, #0
 81033e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81033e4:	4b17      	ldr	r3, [pc, #92]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033e6:	2200      	movs	r2, #0
 81033e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81033ea:	4b16      	ldr	r3, [pc, #88]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033ec:	2200      	movs	r2, #0
 81033ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 81033f0:	4b14      	ldr	r3, [pc, #80]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033f2:	2200      	movs	r2, #0
 81033f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81033f6:	4b13      	ldr	r3, [pc, #76]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033f8:	2200      	movs	r2, #0
 81033fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81033fc:	4811      	ldr	r0, [pc, #68]	; (8103444 <HAL_UART_MspInit+0x19c>)
 81033fe:	f000 fac7 	bl	8103990 <HAL_DMA_Init>
 8103402:	4603      	mov	r3, r0
 8103404:	2b00      	cmp	r3, #0
 8103406:	d001      	beq.n	810340c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8103408:	f7ff fb65 	bl	8102ad6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	4a0d      	ldr	r2, [pc, #52]	; (8103444 <HAL_UART_MspInit+0x19c>)
 8103410:	679a      	str	r2, [r3, #120]	; 0x78
 8103412:	4a0c      	ldr	r2, [pc, #48]	; (8103444 <HAL_UART_MspInit+0x19c>)
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8103418:	2200      	movs	r2, #0
 810341a:	2105      	movs	r1, #5
 810341c:	2027      	movs	r0, #39	; 0x27
 810341e:	f000 f9f2 	bl	8103806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8103422:	2027      	movs	r0, #39	; 0x27
 8103424:	f000 fa09 	bl	810383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8103428:	bf00      	nop
 810342a:	37e0      	adds	r7, #224	; 0xe0
 810342c:	46bd      	mov	sp, r7
 810342e:	bd80      	pop	{r7, pc}
 8103430:	40004800 	.word	0x40004800
 8103434:	58024400 	.word	0x58024400
 8103438:	58020c00 	.word	0x58020c00
 810343c:	10000468 	.word	0x10000468
 8103440:	400200b8 	.word	0x400200b8
 8103444:	10000570 	.word	0x10000570
 8103448:	40020410 	.word	0x40020410

0810344c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810344c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103484 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103450:	f7fd fed8 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103454:	480c      	ldr	r0, [pc, #48]	; (8103488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103456:	490d      	ldr	r1, [pc, #52]	; (810348c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103458:	4a0d      	ldr	r2, [pc, #52]	; (8103490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810345a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810345c:	e002      	b.n	8103464 <LoopCopyDataInit>

0810345e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810345e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103462:	3304      	adds	r3, #4

08103464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103468:	d3f9      	bcc.n	810345e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810346a:	4a0a      	ldr	r2, [pc, #40]	; (8103494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810346c:	4c0a      	ldr	r4, [pc, #40]	; (8103498 <LoopFillZerobss+0x22>)
  movs r3, #0
 810346e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103470:	e001      	b.n	8103476 <LoopFillZerobss>

08103472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103474:	3204      	adds	r2, #4

08103476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103478:	d3fb      	bcc.n	8103472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810347a:	f009 f841 	bl	810c500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810347e:	f7ff fa35 	bl	81028ec <main>
  bx  lr
 8103482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103484:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103488:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810348c:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8103490:	0810d600 	.word	0x0810d600
  ldr r2, =_sbss
 8103494:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8103498:	100005ec 	.word	0x100005ec

0810349c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810349c:	e7fe      	b.n	810349c <ADC3_IRQHandler>
	...

081034a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81034a0:	b580      	push	{r7, lr}
 81034a2:	b082      	sub	sp, #8
 81034a4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81034a6:	4b28      	ldr	r3, [pc, #160]	; (8103548 <HAL_Init+0xa8>)
 81034a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81034ac:	4a26      	ldr	r2, [pc, #152]	; (8103548 <HAL_Init+0xa8>)
 81034ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81034b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81034b6:	4b24      	ldr	r3, [pc, #144]	; (8103548 <HAL_Init+0xa8>)
 81034b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81034bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81034c0:	603b      	str	r3, [r7, #0]
 81034c2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81034c4:	4b21      	ldr	r3, [pc, #132]	; (810354c <HAL_Init+0xac>)
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81034cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81034d0:	4a1e      	ldr	r2, [pc, #120]	; (810354c <HAL_Init+0xac>)
 81034d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81034d6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81034d8:	4b1c      	ldr	r3, [pc, #112]	; (810354c <HAL_Init+0xac>)
 81034da:	681b      	ldr	r3, [r3, #0]
 81034dc:	4a1b      	ldr	r2, [pc, #108]	; (810354c <HAL_Init+0xac>)
 81034de:	f043 0301 	orr.w	r3, r3, #1
 81034e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81034e4:	2003      	movs	r0, #3
 81034e6:	f000 f983 	bl	81037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81034ea:	f004 fedb 	bl	81082a4 <HAL_RCC_GetSysClockFreq>
 81034ee:	4602      	mov	r2, r0
 81034f0:	4b15      	ldr	r3, [pc, #84]	; (8103548 <HAL_Init+0xa8>)
 81034f2:	699b      	ldr	r3, [r3, #24]
 81034f4:	0a1b      	lsrs	r3, r3, #8
 81034f6:	f003 030f 	and.w	r3, r3, #15
 81034fa:	4915      	ldr	r1, [pc, #84]	; (8103550 <HAL_Init+0xb0>)
 81034fc:	5ccb      	ldrb	r3, [r1, r3]
 81034fe:	f003 031f 	and.w	r3, r3, #31
 8103502:	fa22 f303 	lsr.w	r3, r2, r3
 8103506:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103508:	4b0f      	ldr	r3, [pc, #60]	; (8103548 <HAL_Init+0xa8>)
 810350a:	699b      	ldr	r3, [r3, #24]
 810350c:	f003 030f 	and.w	r3, r3, #15
 8103510:	4a0f      	ldr	r2, [pc, #60]	; (8103550 <HAL_Init+0xb0>)
 8103512:	5cd3      	ldrb	r3, [r2, r3]
 8103514:	f003 031f 	and.w	r3, r3, #31
 8103518:	687a      	ldr	r2, [r7, #4]
 810351a:	fa22 f303 	lsr.w	r3, r2, r3
 810351e:	4a0d      	ldr	r2, [pc, #52]	; (8103554 <HAL_Init+0xb4>)
 8103520:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103522:	4b0c      	ldr	r3, [pc, #48]	; (8103554 <HAL_Init+0xb4>)
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	4a0c      	ldr	r2, [pc, #48]	; (8103558 <HAL_Init+0xb8>)
 8103528:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810352a:	2000      	movs	r0, #0
 810352c:	f000 f816 	bl	810355c <HAL_InitTick>
 8103530:	4603      	mov	r3, r0
 8103532:	2b00      	cmp	r3, #0
 8103534:	d001      	beq.n	810353a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103536:	2301      	movs	r3, #1
 8103538:	e002      	b.n	8103540 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810353a:	f7ff fbf9 	bl	8102d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810353e:	2300      	movs	r3, #0
}
 8103540:	4618      	mov	r0, r3
 8103542:	3708      	adds	r7, #8
 8103544:	46bd      	mov	sp, r7
 8103546:	bd80      	pop	{r7, pc}
 8103548:	58024400 	.word	0x58024400
 810354c:	40024400 	.word	0x40024400
 8103550:	0810d56c 	.word	0x0810d56c
 8103554:	10000004 	.word	0x10000004
 8103558:	10000000 	.word	0x10000000

0810355c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810355c:	b580      	push	{r7, lr}
 810355e:	b082      	sub	sp, #8
 8103560:	af00      	add	r7, sp, #0
 8103562:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103564:	4b15      	ldr	r3, [pc, #84]	; (81035bc <HAL_InitTick+0x60>)
 8103566:	781b      	ldrb	r3, [r3, #0]
 8103568:	2b00      	cmp	r3, #0
 810356a:	d101      	bne.n	8103570 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810356c:	2301      	movs	r3, #1
 810356e:	e021      	b.n	81035b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103570:	4b13      	ldr	r3, [pc, #76]	; (81035c0 <HAL_InitTick+0x64>)
 8103572:	681a      	ldr	r2, [r3, #0]
 8103574:	4b11      	ldr	r3, [pc, #68]	; (81035bc <HAL_InitTick+0x60>)
 8103576:	781b      	ldrb	r3, [r3, #0]
 8103578:	4619      	mov	r1, r3
 810357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810357e:	fbb3 f3f1 	udiv	r3, r3, r1
 8103582:	fbb2 f3f3 	udiv	r3, r2, r3
 8103586:	4618      	mov	r0, r3
 8103588:	f000 f965 	bl	8103856 <HAL_SYSTICK_Config>
 810358c:	4603      	mov	r3, r0
 810358e:	2b00      	cmp	r3, #0
 8103590:	d001      	beq.n	8103596 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103592:	2301      	movs	r3, #1
 8103594:	e00e      	b.n	81035b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	2b0f      	cmp	r3, #15
 810359a:	d80a      	bhi.n	81035b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810359c:	2200      	movs	r2, #0
 810359e:	6879      	ldr	r1, [r7, #4]
 81035a0:	f04f 30ff 	mov.w	r0, #4294967295
 81035a4:	f000 f92f 	bl	8103806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81035a8:	4a06      	ldr	r2, [pc, #24]	; (81035c4 <HAL_InitTick+0x68>)
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81035ae:	2300      	movs	r3, #0
 81035b0:	e000      	b.n	81035b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81035b2:	2301      	movs	r3, #1
}
 81035b4:	4618      	mov	r0, r3
 81035b6:	3708      	adds	r7, #8
 81035b8:	46bd      	mov	sp, r7
 81035ba:	bd80      	pop	{r7, pc}
 81035bc:	1000000c 	.word	0x1000000c
 81035c0:	10000000 	.word	0x10000000
 81035c4:	10000008 	.word	0x10000008

081035c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81035c8:	b480      	push	{r7}
 81035ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81035cc:	4b06      	ldr	r3, [pc, #24]	; (81035e8 <HAL_IncTick+0x20>)
 81035ce:	781b      	ldrb	r3, [r3, #0]
 81035d0:	461a      	mov	r2, r3
 81035d2:	4b06      	ldr	r3, [pc, #24]	; (81035ec <HAL_IncTick+0x24>)
 81035d4:	681b      	ldr	r3, [r3, #0]
 81035d6:	4413      	add	r3, r2
 81035d8:	4a04      	ldr	r2, [pc, #16]	; (81035ec <HAL_IncTick+0x24>)
 81035da:	6013      	str	r3, [r2, #0]
}
 81035dc:	bf00      	nop
 81035de:	46bd      	mov	sp, r7
 81035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e4:	4770      	bx	lr
 81035e6:	bf00      	nop
 81035e8:	1000000c 	.word	0x1000000c
 81035ec:	100005e8 	.word	0x100005e8

081035f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81035f0:	b480      	push	{r7}
 81035f2:	af00      	add	r7, sp, #0
  return uwTick;
 81035f4:	4b03      	ldr	r3, [pc, #12]	; (8103604 <HAL_GetTick+0x14>)
 81035f6:	681b      	ldr	r3, [r3, #0]
}
 81035f8:	4618      	mov	r0, r3
 81035fa:	46bd      	mov	sp, r7
 81035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103600:	4770      	bx	lr
 8103602:	bf00      	nop
 8103604:	100005e8 	.word	0x100005e8

08103608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103608:	b580      	push	{r7, lr}
 810360a:	b084      	sub	sp, #16
 810360c:	af00      	add	r7, sp, #0
 810360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103610:	f7ff ffee 	bl	81035f0 <HAL_GetTick>
 8103614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810361a:	68fb      	ldr	r3, [r7, #12]
 810361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103620:	d005      	beq.n	810362e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103622:	4b0a      	ldr	r3, [pc, #40]	; (810364c <HAL_Delay+0x44>)
 8103624:	781b      	ldrb	r3, [r3, #0]
 8103626:	461a      	mov	r2, r3
 8103628:	68fb      	ldr	r3, [r7, #12]
 810362a:	4413      	add	r3, r2
 810362c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810362e:	bf00      	nop
 8103630:	f7ff ffde 	bl	81035f0 <HAL_GetTick>
 8103634:	4602      	mov	r2, r0
 8103636:	68bb      	ldr	r3, [r7, #8]
 8103638:	1ad3      	subs	r3, r2, r3
 810363a:	68fa      	ldr	r2, [r7, #12]
 810363c:	429a      	cmp	r2, r3
 810363e:	d8f7      	bhi.n	8103630 <HAL_Delay+0x28>
  {
  }
}
 8103640:	bf00      	nop
 8103642:	bf00      	nop
 8103644:	3710      	adds	r7, #16
 8103646:	46bd      	mov	sp, r7
 8103648:	bd80      	pop	{r7, pc}
 810364a:	bf00      	nop
 810364c:	1000000c 	.word	0x1000000c

08103650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103650:	b480      	push	{r7}
 8103652:	b085      	sub	sp, #20
 8103654:	af00      	add	r7, sp, #0
 8103656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	f003 0307 	and.w	r3, r3, #7
 810365e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103660:	4b0c      	ldr	r3, [pc, #48]	; (8103694 <__NVIC_SetPriorityGrouping+0x44>)
 8103662:	68db      	ldr	r3, [r3, #12]
 8103664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103666:	68ba      	ldr	r2, [r7, #8]
 8103668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810366c:	4013      	ands	r3, r2
 810366e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103670:	68fb      	ldr	r3, [r7, #12]
 8103672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103674:	68bb      	ldr	r3, [r7, #8]
 8103676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810367c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103682:	4a04      	ldr	r2, [pc, #16]	; (8103694 <__NVIC_SetPriorityGrouping+0x44>)
 8103684:	68bb      	ldr	r3, [r7, #8]
 8103686:	60d3      	str	r3, [r2, #12]
}
 8103688:	bf00      	nop
 810368a:	3714      	adds	r7, #20
 810368c:	46bd      	mov	sp, r7
 810368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103692:	4770      	bx	lr
 8103694:	e000ed00 	.word	0xe000ed00

08103698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103698:	b480      	push	{r7}
 810369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810369c:	4b04      	ldr	r3, [pc, #16]	; (81036b0 <__NVIC_GetPriorityGrouping+0x18>)
 810369e:	68db      	ldr	r3, [r3, #12]
 81036a0:	0a1b      	lsrs	r3, r3, #8
 81036a2:	f003 0307 	and.w	r3, r3, #7
}
 81036a6:	4618      	mov	r0, r3
 81036a8:	46bd      	mov	sp, r7
 81036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036ae:	4770      	bx	lr
 81036b0:	e000ed00 	.word	0xe000ed00

081036b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81036b4:	b480      	push	{r7}
 81036b6:	b083      	sub	sp, #12
 81036b8:	af00      	add	r7, sp, #0
 81036ba:	4603      	mov	r3, r0
 81036bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81036be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81036c2:	2b00      	cmp	r3, #0
 81036c4:	db0b      	blt.n	81036de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81036c6:	88fb      	ldrh	r3, [r7, #6]
 81036c8:	f003 021f 	and.w	r2, r3, #31
 81036cc:	4907      	ldr	r1, [pc, #28]	; (81036ec <__NVIC_EnableIRQ+0x38>)
 81036ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81036d2:	095b      	lsrs	r3, r3, #5
 81036d4:	2001      	movs	r0, #1
 81036d6:	fa00 f202 	lsl.w	r2, r0, r2
 81036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81036de:	bf00      	nop
 81036e0:	370c      	adds	r7, #12
 81036e2:	46bd      	mov	sp, r7
 81036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036e8:	4770      	bx	lr
 81036ea:	bf00      	nop
 81036ec:	e000e100 	.word	0xe000e100

081036f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81036f0:	b480      	push	{r7}
 81036f2:	b083      	sub	sp, #12
 81036f4:	af00      	add	r7, sp, #0
 81036f6:	4603      	mov	r3, r0
 81036f8:	6039      	str	r1, [r7, #0]
 81036fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81036fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103700:	2b00      	cmp	r3, #0
 8103702:	db0a      	blt.n	810371a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103704:	683b      	ldr	r3, [r7, #0]
 8103706:	b2da      	uxtb	r2, r3
 8103708:	490c      	ldr	r1, [pc, #48]	; (810373c <__NVIC_SetPriority+0x4c>)
 810370a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810370e:	0112      	lsls	r2, r2, #4
 8103710:	b2d2      	uxtb	r2, r2
 8103712:	440b      	add	r3, r1
 8103714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103718:	e00a      	b.n	8103730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810371a:	683b      	ldr	r3, [r7, #0]
 810371c:	b2da      	uxtb	r2, r3
 810371e:	4908      	ldr	r1, [pc, #32]	; (8103740 <__NVIC_SetPriority+0x50>)
 8103720:	88fb      	ldrh	r3, [r7, #6]
 8103722:	f003 030f 	and.w	r3, r3, #15
 8103726:	3b04      	subs	r3, #4
 8103728:	0112      	lsls	r2, r2, #4
 810372a:	b2d2      	uxtb	r2, r2
 810372c:	440b      	add	r3, r1
 810372e:	761a      	strb	r2, [r3, #24]
}
 8103730:	bf00      	nop
 8103732:	370c      	adds	r7, #12
 8103734:	46bd      	mov	sp, r7
 8103736:	f85d 7b04 	ldr.w	r7, [sp], #4
 810373a:	4770      	bx	lr
 810373c:	e000e100 	.word	0xe000e100
 8103740:	e000ed00 	.word	0xe000ed00

08103744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103744:	b480      	push	{r7}
 8103746:	b089      	sub	sp, #36	; 0x24
 8103748:	af00      	add	r7, sp, #0
 810374a:	60f8      	str	r0, [r7, #12]
 810374c:	60b9      	str	r1, [r7, #8]
 810374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103750:	68fb      	ldr	r3, [r7, #12]
 8103752:	f003 0307 	and.w	r3, r3, #7
 8103756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103758:	69fb      	ldr	r3, [r7, #28]
 810375a:	f1c3 0307 	rsb	r3, r3, #7
 810375e:	2b04      	cmp	r3, #4
 8103760:	bf28      	it	cs
 8103762:	2304      	movcs	r3, #4
 8103764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103766:	69fb      	ldr	r3, [r7, #28]
 8103768:	3304      	adds	r3, #4
 810376a:	2b06      	cmp	r3, #6
 810376c:	d902      	bls.n	8103774 <NVIC_EncodePriority+0x30>
 810376e:	69fb      	ldr	r3, [r7, #28]
 8103770:	3b03      	subs	r3, #3
 8103772:	e000      	b.n	8103776 <NVIC_EncodePriority+0x32>
 8103774:	2300      	movs	r3, #0
 8103776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103778:	f04f 32ff 	mov.w	r2, #4294967295
 810377c:	69bb      	ldr	r3, [r7, #24]
 810377e:	fa02 f303 	lsl.w	r3, r2, r3
 8103782:	43da      	mvns	r2, r3
 8103784:	68bb      	ldr	r3, [r7, #8]
 8103786:	401a      	ands	r2, r3
 8103788:	697b      	ldr	r3, [r7, #20]
 810378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810378c:	f04f 31ff 	mov.w	r1, #4294967295
 8103790:	697b      	ldr	r3, [r7, #20]
 8103792:	fa01 f303 	lsl.w	r3, r1, r3
 8103796:	43d9      	mvns	r1, r3
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810379c:	4313      	orrs	r3, r2
         );
}
 810379e:	4618      	mov	r0, r3
 81037a0:	3724      	adds	r7, #36	; 0x24
 81037a2:	46bd      	mov	sp, r7
 81037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037a8:	4770      	bx	lr
	...

081037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81037ac:	b580      	push	{r7, lr}
 81037ae:	b082      	sub	sp, #8
 81037b0:	af00      	add	r7, sp, #0
 81037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	3b01      	subs	r3, #1
 81037b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81037bc:	d301      	bcc.n	81037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81037be:	2301      	movs	r3, #1
 81037c0:	e00f      	b.n	81037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81037c2:	4a0a      	ldr	r2, [pc, #40]	; (81037ec <SysTick_Config+0x40>)
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	3b01      	subs	r3, #1
 81037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81037ca:	210f      	movs	r1, #15
 81037cc:	f04f 30ff 	mov.w	r0, #4294967295
 81037d0:	f7ff ff8e 	bl	81036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81037d4:	4b05      	ldr	r3, [pc, #20]	; (81037ec <SysTick_Config+0x40>)
 81037d6:	2200      	movs	r2, #0
 81037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81037da:	4b04      	ldr	r3, [pc, #16]	; (81037ec <SysTick_Config+0x40>)
 81037dc:	2207      	movs	r2, #7
 81037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81037e0:	2300      	movs	r3, #0
}
 81037e2:	4618      	mov	r0, r3
 81037e4:	3708      	adds	r7, #8
 81037e6:	46bd      	mov	sp, r7
 81037e8:	bd80      	pop	{r7, pc}
 81037ea:	bf00      	nop
 81037ec:	e000e010 	.word	0xe000e010

081037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81037f0:	b580      	push	{r7, lr}
 81037f2:	b082      	sub	sp, #8
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81037f8:	6878      	ldr	r0, [r7, #4]
 81037fa:	f7ff ff29 	bl	8103650 <__NVIC_SetPriorityGrouping>
}
 81037fe:	bf00      	nop
 8103800:	3708      	adds	r7, #8
 8103802:	46bd      	mov	sp, r7
 8103804:	bd80      	pop	{r7, pc}

08103806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103806:	b580      	push	{r7, lr}
 8103808:	b086      	sub	sp, #24
 810380a:	af00      	add	r7, sp, #0
 810380c:	4603      	mov	r3, r0
 810380e:	60b9      	str	r1, [r7, #8]
 8103810:	607a      	str	r2, [r7, #4]
 8103812:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103814:	f7ff ff40 	bl	8103698 <__NVIC_GetPriorityGrouping>
 8103818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810381a:	687a      	ldr	r2, [r7, #4]
 810381c:	68b9      	ldr	r1, [r7, #8]
 810381e:	6978      	ldr	r0, [r7, #20]
 8103820:	f7ff ff90 	bl	8103744 <NVIC_EncodePriority>
 8103824:	4602      	mov	r2, r0
 8103826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810382a:	4611      	mov	r1, r2
 810382c:	4618      	mov	r0, r3
 810382e:	f7ff ff5f 	bl	81036f0 <__NVIC_SetPriority>
}
 8103832:	bf00      	nop
 8103834:	3718      	adds	r7, #24
 8103836:	46bd      	mov	sp, r7
 8103838:	bd80      	pop	{r7, pc}

0810383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810383a:	b580      	push	{r7, lr}
 810383c:	b082      	sub	sp, #8
 810383e:	af00      	add	r7, sp, #0
 8103840:	4603      	mov	r3, r0
 8103842:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103848:	4618      	mov	r0, r3
 810384a:	f7ff ff33 	bl	81036b4 <__NVIC_EnableIRQ>
}
 810384e:	bf00      	nop
 8103850:	3708      	adds	r7, #8
 8103852:	46bd      	mov	sp, r7
 8103854:	bd80      	pop	{r7, pc}

08103856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103856:	b580      	push	{r7, lr}
 8103858:	b082      	sub	sp, #8
 810385a:	af00      	add	r7, sp, #0
 810385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810385e:	6878      	ldr	r0, [r7, #4]
 8103860:	f7ff ffa4 	bl	81037ac <SysTick_Config>
 8103864:	4603      	mov	r3, r0
}
 8103866:	4618      	mov	r0, r3
 8103868:	3708      	adds	r7, #8
 810386a:	46bd      	mov	sp, r7
 810386c:	bd80      	pop	{r7, pc}
	...

08103870 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8103870:	b480      	push	{r7}
 8103872:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8103874:	f3bf 8f5f 	dmb	sy
}
 8103878:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 810387a:	4b07      	ldr	r3, [pc, #28]	; (8103898 <HAL_MPU_Disable+0x28>)
 810387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810387e:	4a06      	ldr	r2, [pc, #24]	; (8103898 <HAL_MPU_Disable+0x28>)
 8103880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103884:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8103886:	4b05      	ldr	r3, [pc, #20]	; (810389c <HAL_MPU_Disable+0x2c>)
 8103888:	2200      	movs	r2, #0
 810388a:	605a      	str	r2, [r3, #4]
}
 810388c:	bf00      	nop
 810388e:	46bd      	mov	sp, r7
 8103890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103894:	4770      	bx	lr
 8103896:	bf00      	nop
 8103898:	e000ed00 	.word	0xe000ed00
 810389c:	e000ed90 	.word	0xe000ed90

081038a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 81038a0:	b480      	push	{r7}
 81038a2:	b083      	sub	sp, #12
 81038a4:	af00      	add	r7, sp, #0
 81038a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 81038a8:	4a0b      	ldr	r2, [pc, #44]	; (81038d8 <HAL_MPU_Enable+0x38>)
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	f043 0301 	orr.w	r3, r3, #1
 81038b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 81038b2:	4b0a      	ldr	r3, [pc, #40]	; (81038dc <HAL_MPU_Enable+0x3c>)
 81038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81038b6:	4a09      	ldr	r2, [pc, #36]	; (81038dc <HAL_MPU_Enable+0x3c>)
 81038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81038bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 81038be:	f3bf 8f4f 	dsb	sy
}
 81038c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81038c4:	f3bf 8f6f 	isb	sy
}
 81038c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 81038ca:	bf00      	nop
 81038cc:	370c      	adds	r7, #12
 81038ce:	46bd      	mov	sp, r7
 81038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038d4:	4770      	bx	lr
 81038d6:	bf00      	nop
 81038d8:	e000ed90 	.word	0xe000ed90
 81038dc:	e000ed00 	.word	0xe000ed00

081038e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 81038e0:	b480      	push	{r7}
 81038e2:	b083      	sub	sp, #12
 81038e4:	af00      	add	r7, sp, #0
 81038e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	785a      	ldrb	r2, [r3, #1]
 81038ec:	4b1d      	ldr	r3, [pc, #116]	; (8103964 <HAL_MPU_ConfigRegion+0x84>)
 81038ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	781b      	ldrb	r3, [r3, #0]
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d029      	beq.n	810394c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 81038f8:	4a1a      	ldr	r2, [pc, #104]	; (8103964 <HAL_MPU_ConfigRegion+0x84>)
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	685b      	ldr	r3, [r3, #4]
 81038fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	7b1b      	ldrb	r3, [r3, #12]
 8103904:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	7adb      	ldrb	r3, [r3, #11]
 810390a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 810390c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	7a9b      	ldrb	r3, [r3, #10]
 8103912:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8103914:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	7b5b      	ldrb	r3, [r3, #13]
 810391a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810391c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	7b9b      	ldrb	r3, [r3, #14]
 8103922:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8103924:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	7bdb      	ldrb	r3, [r3, #15]
 810392a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810392c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	7a5b      	ldrb	r3, [r3, #9]
 8103932:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8103934:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	7a1b      	ldrb	r3, [r3, #8]
 810393a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810393c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 810393e:	687a      	ldr	r2, [r7, #4]
 8103940:	7812      	ldrb	r2, [r2, #0]
 8103942:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103944:	4a07      	ldr	r2, [pc, #28]	; (8103964 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8103946:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103948:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 810394a:	e005      	b.n	8103958 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 810394c:	4b05      	ldr	r3, [pc, #20]	; (8103964 <HAL_MPU_ConfigRegion+0x84>)
 810394e:	2200      	movs	r2, #0
 8103950:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8103952:	4b04      	ldr	r3, [pc, #16]	; (8103964 <HAL_MPU_ConfigRegion+0x84>)
 8103954:	2200      	movs	r2, #0
 8103956:	611a      	str	r2, [r3, #16]
}
 8103958:	bf00      	nop
 810395a:	370c      	adds	r7, #12
 810395c:	46bd      	mov	sp, r7
 810395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103962:	4770      	bx	lr
 8103964:	e000ed90 	.word	0xe000ed90

08103968 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103968:	b480      	push	{r7}
 810396a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810396c:	4b07      	ldr	r3, [pc, #28]	; (810398c <HAL_GetCurrentCPUID+0x24>)
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	091b      	lsrs	r3, r3, #4
 8103972:	f003 030f 	and.w	r3, r3, #15
 8103976:	2b07      	cmp	r3, #7
 8103978:	d101      	bne.n	810397e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810397a:	2303      	movs	r3, #3
 810397c:	e000      	b.n	8103980 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810397e:	2301      	movs	r3, #1
  }
}
 8103980:	4618      	mov	r0, r3
 8103982:	46bd      	mov	sp, r7
 8103984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103988:	4770      	bx	lr
 810398a:	bf00      	nop
 810398c:	e000ed00 	.word	0xe000ed00

08103990 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103990:	b580      	push	{r7, lr}
 8103992:	b086      	sub	sp, #24
 8103994:	af00      	add	r7, sp, #0
 8103996:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103998:	f7ff fe2a 	bl	81035f0 <HAL_GetTick>
 810399c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	2b00      	cmp	r3, #0
 81039a2:	d101      	bne.n	81039a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81039a4:	2301      	movs	r3, #1
 81039a6:	e314      	b.n	8103fd2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	4a66      	ldr	r2, [pc, #408]	; (8103b48 <HAL_DMA_Init+0x1b8>)
 81039ae:	4293      	cmp	r3, r2
 81039b0:	d04a      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	4a65      	ldr	r2, [pc, #404]	; (8103b4c <HAL_DMA_Init+0x1bc>)
 81039b8:	4293      	cmp	r3, r2
 81039ba:	d045      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	4a63      	ldr	r2, [pc, #396]	; (8103b50 <HAL_DMA_Init+0x1c0>)
 81039c2:	4293      	cmp	r3, r2
 81039c4:	d040      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	4a62      	ldr	r2, [pc, #392]	; (8103b54 <HAL_DMA_Init+0x1c4>)
 81039cc:	4293      	cmp	r3, r2
 81039ce:	d03b      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	4a60      	ldr	r2, [pc, #384]	; (8103b58 <HAL_DMA_Init+0x1c8>)
 81039d6:	4293      	cmp	r3, r2
 81039d8:	d036      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	4a5f      	ldr	r2, [pc, #380]	; (8103b5c <HAL_DMA_Init+0x1cc>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	d031      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	4a5d      	ldr	r2, [pc, #372]	; (8103b60 <HAL_DMA_Init+0x1d0>)
 81039ea:	4293      	cmp	r3, r2
 81039ec:	d02c      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	4a5c      	ldr	r2, [pc, #368]	; (8103b64 <HAL_DMA_Init+0x1d4>)
 81039f4:	4293      	cmp	r3, r2
 81039f6:	d027      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	681b      	ldr	r3, [r3, #0]
 81039fc:	4a5a      	ldr	r2, [pc, #360]	; (8103b68 <HAL_DMA_Init+0x1d8>)
 81039fe:	4293      	cmp	r3, r2
 8103a00:	d022      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	4a59      	ldr	r2, [pc, #356]	; (8103b6c <HAL_DMA_Init+0x1dc>)
 8103a08:	4293      	cmp	r3, r2
 8103a0a:	d01d      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	4a57      	ldr	r2, [pc, #348]	; (8103b70 <HAL_DMA_Init+0x1e0>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d018      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	4a56      	ldr	r2, [pc, #344]	; (8103b74 <HAL_DMA_Init+0x1e4>)
 8103a1c:	4293      	cmp	r3, r2
 8103a1e:	d013      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	4a54      	ldr	r2, [pc, #336]	; (8103b78 <HAL_DMA_Init+0x1e8>)
 8103a26:	4293      	cmp	r3, r2
 8103a28:	d00e      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	4a53      	ldr	r2, [pc, #332]	; (8103b7c <HAL_DMA_Init+0x1ec>)
 8103a30:	4293      	cmp	r3, r2
 8103a32:	d009      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	4a51      	ldr	r2, [pc, #324]	; (8103b80 <HAL_DMA_Init+0x1f0>)
 8103a3a:	4293      	cmp	r3, r2
 8103a3c:	d004      	beq.n	8103a48 <HAL_DMA_Init+0xb8>
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	4a50      	ldr	r2, [pc, #320]	; (8103b84 <HAL_DMA_Init+0x1f4>)
 8103a44:	4293      	cmp	r3, r2
 8103a46:	d101      	bne.n	8103a4c <HAL_DMA_Init+0xbc>
 8103a48:	2301      	movs	r3, #1
 8103a4a:	e000      	b.n	8103a4e <HAL_DMA_Init+0xbe>
 8103a4c:	2300      	movs	r3, #0
 8103a4e:	2b00      	cmp	r3, #0
 8103a50:	f000 813b 	beq.w	8103cca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	2200      	movs	r2, #0
 8103a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	2202      	movs	r2, #2
 8103a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a37      	ldr	r2, [pc, #220]	; (8103b48 <HAL_DMA_Init+0x1b8>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d04a      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a36      	ldr	r2, [pc, #216]	; (8103b4c <HAL_DMA_Init+0x1bc>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d045      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a34      	ldr	r2, [pc, #208]	; (8103b50 <HAL_DMA_Init+0x1c0>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d040      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a33      	ldr	r2, [pc, #204]	; (8103b54 <HAL_DMA_Init+0x1c4>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d03b      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a31      	ldr	r2, [pc, #196]	; (8103b58 <HAL_DMA_Init+0x1c8>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d036      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a30      	ldr	r2, [pc, #192]	; (8103b5c <HAL_DMA_Init+0x1cc>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d031      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a2e      	ldr	r2, [pc, #184]	; (8103b60 <HAL_DMA_Init+0x1d0>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d02c      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a2d      	ldr	r2, [pc, #180]	; (8103b64 <HAL_DMA_Init+0x1d4>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d027      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a2b      	ldr	r2, [pc, #172]	; (8103b68 <HAL_DMA_Init+0x1d8>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d022      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a2a      	ldr	r2, [pc, #168]	; (8103b6c <HAL_DMA_Init+0x1dc>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d01d      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a28      	ldr	r2, [pc, #160]	; (8103b70 <HAL_DMA_Init+0x1e0>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d018      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a27      	ldr	r2, [pc, #156]	; (8103b74 <HAL_DMA_Init+0x1e4>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d013      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a25      	ldr	r2, [pc, #148]	; (8103b78 <HAL_DMA_Init+0x1e8>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d00e      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a24      	ldr	r2, [pc, #144]	; (8103b7c <HAL_DMA_Init+0x1ec>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d009      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a22      	ldr	r2, [pc, #136]	; (8103b80 <HAL_DMA_Init+0x1f0>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d004      	beq.n	8103b04 <HAL_DMA_Init+0x174>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	4a21      	ldr	r2, [pc, #132]	; (8103b84 <HAL_DMA_Init+0x1f4>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d108      	bne.n	8103b16 <HAL_DMA_Init+0x186>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	681a      	ldr	r2, [r3, #0]
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	f022 0201 	bic.w	r2, r2, #1
 8103b12:	601a      	str	r2, [r3, #0]
 8103b14:	e007      	b.n	8103b26 <HAL_DMA_Init+0x196>
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	681a      	ldr	r2, [r3, #0]
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	f022 0201 	bic.w	r2, r2, #1
 8103b24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103b26:	e02f      	b.n	8103b88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103b28:	f7ff fd62 	bl	81035f0 <HAL_GetTick>
 8103b2c:	4602      	mov	r2, r0
 8103b2e:	693b      	ldr	r3, [r7, #16]
 8103b30:	1ad3      	subs	r3, r2, r3
 8103b32:	2b05      	cmp	r3, #5
 8103b34:	d928      	bls.n	8103b88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	2220      	movs	r2, #32
 8103b3a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	2203      	movs	r2, #3
 8103b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103b44:	2301      	movs	r3, #1
 8103b46:	e244      	b.n	8103fd2 <HAL_DMA_Init+0x642>
 8103b48:	40020010 	.word	0x40020010
 8103b4c:	40020028 	.word	0x40020028
 8103b50:	40020040 	.word	0x40020040
 8103b54:	40020058 	.word	0x40020058
 8103b58:	40020070 	.word	0x40020070
 8103b5c:	40020088 	.word	0x40020088
 8103b60:	400200a0 	.word	0x400200a0
 8103b64:	400200b8 	.word	0x400200b8
 8103b68:	40020410 	.word	0x40020410
 8103b6c:	40020428 	.word	0x40020428
 8103b70:	40020440 	.word	0x40020440
 8103b74:	40020458 	.word	0x40020458
 8103b78:	40020470 	.word	0x40020470
 8103b7c:	40020488 	.word	0x40020488
 8103b80:	400204a0 	.word	0x400204a0
 8103b84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	f003 0301 	and.w	r3, r3, #1
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	d1c8      	bne.n	8103b28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	681b      	ldr	r3, [r3, #0]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103b9e:	697a      	ldr	r2, [r7, #20]
 8103ba0:	4b84      	ldr	r3, [pc, #528]	; (8103db4 <HAL_DMA_Init+0x424>)
 8103ba2:	4013      	ands	r3, r2
 8103ba4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8103bae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	691b      	ldr	r3, [r3, #16]
 8103bb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103bba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	699b      	ldr	r3, [r3, #24]
 8103bc0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103bc6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	6a1b      	ldr	r3, [r3, #32]
 8103bcc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103bce:	697a      	ldr	r2, [r7, #20]
 8103bd0:	4313      	orrs	r3, r2
 8103bd2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103bd8:	2b04      	cmp	r3, #4
 8103bda:	d107      	bne.n	8103bec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103be4:	4313      	orrs	r3, r2
 8103be6:	697a      	ldr	r2, [r7, #20]
 8103be8:	4313      	orrs	r3, r2
 8103bea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103bec:	4b72      	ldr	r3, [pc, #456]	; (8103db8 <HAL_DMA_Init+0x428>)
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	0c1b      	lsrs	r3, r3, #16
 8103bf2:	041b      	lsls	r3, r3, #16
 8103bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103bf8:	d328      	bcc.n	8103c4c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	685b      	ldr	r3, [r3, #4]
 8103bfe:	2b28      	cmp	r3, #40	; 0x28
 8103c00:	d903      	bls.n	8103c0a <HAL_DMA_Init+0x27a>
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	685b      	ldr	r3, [r3, #4]
 8103c06:	2b2e      	cmp	r3, #46	; 0x2e
 8103c08:	d917      	bls.n	8103c3a <HAL_DMA_Init+0x2aa>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	685b      	ldr	r3, [r3, #4]
 8103c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8103c10:	d903      	bls.n	8103c1a <HAL_DMA_Init+0x28a>
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	685b      	ldr	r3, [r3, #4]
 8103c16:	2b42      	cmp	r3, #66	; 0x42
 8103c18:	d90f      	bls.n	8103c3a <HAL_DMA_Init+0x2aa>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	685b      	ldr	r3, [r3, #4]
 8103c1e:	2b46      	cmp	r3, #70	; 0x46
 8103c20:	d903      	bls.n	8103c2a <HAL_DMA_Init+0x29a>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	685b      	ldr	r3, [r3, #4]
 8103c26:	2b48      	cmp	r3, #72	; 0x48
 8103c28:	d907      	bls.n	8103c3a <HAL_DMA_Init+0x2aa>
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	685b      	ldr	r3, [r3, #4]
 8103c2e:	2b4e      	cmp	r3, #78	; 0x4e
 8103c30:	d905      	bls.n	8103c3e <HAL_DMA_Init+0x2ae>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	685b      	ldr	r3, [r3, #4]
 8103c36:	2b52      	cmp	r3, #82	; 0x52
 8103c38:	d801      	bhi.n	8103c3e <HAL_DMA_Init+0x2ae>
 8103c3a:	2301      	movs	r3, #1
 8103c3c:	e000      	b.n	8103c40 <HAL_DMA_Init+0x2b0>
 8103c3e:	2300      	movs	r3, #0
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	d003      	beq.n	8103c4c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103c44:	697b      	ldr	r3, [r7, #20]
 8103c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103c4a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	697a      	ldr	r2, [r7, #20]
 8103c52:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	695b      	ldr	r3, [r3, #20]
 8103c5a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103c5c:	697b      	ldr	r3, [r7, #20]
 8103c5e:	f023 0307 	bic.w	r3, r3, #7
 8103c62:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c68:	697a      	ldr	r2, [r7, #20]
 8103c6a:	4313      	orrs	r3, r2
 8103c6c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c72:	2b04      	cmp	r3, #4
 8103c74:	d117      	bne.n	8103ca6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c7a:	697a      	ldr	r2, [r7, #20]
 8103c7c:	4313      	orrs	r3, r2
 8103c7e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c84:	2b00      	cmp	r3, #0
 8103c86:	d00e      	beq.n	8103ca6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103c88:	6878      	ldr	r0, [r7, #4]
 8103c8a:	f002 fb49 	bl	8106320 <DMA_CheckFifoParam>
 8103c8e:	4603      	mov	r3, r0
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d008      	beq.n	8103ca6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	2240      	movs	r2, #64	; 0x40
 8103c98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	2201      	movs	r2, #1
 8103c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8103ca2:	2301      	movs	r3, #1
 8103ca4:	e195      	b.n	8103fd2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	681b      	ldr	r3, [r3, #0]
 8103caa:	697a      	ldr	r2, [r7, #20]
 8103cac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103cae:	6878      	ldr	r0, [r7, #4]
 8103cb0:	f002 fa84 	bl	81061bc <DMA_CalcBaseAndBitshift>
 8103cb4:	4603      	mov	r3, r0
 8103cb6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cbc:	f003 031f 	and.w	r3, r3, #31
 8103cc0:	223f      	movs	r2, #63	; 0x3f
 8103cc2:	409a      	lsls	r2, r3
 8103cc4:	68bb      	ldr	r3, [r7, #8]
 8103cc6:	609a      	str	r2, [r3, #8]
 8103cc8:	e0cb      	b.n	8103e62 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	4a3b      	ldr	r2, [pc, #236]	; (8103dbc <HAL_DMA_Init+0x42c>)
 8103cd0:	4293      	cmp	r3, r2
 8103cd2:	d022      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	4a39      	ldr	r2, [pc, #228]	; (8103dc0 <HAL_DMA_Init+0x430>)
 8103cda:	4293      	cmp	r3, r2
 8103cdc:	d01d      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	4a38      	ldr	r2, [pc, #224]	; (8103dc4 <HAL_DMA_Init+0x434>)
 8103ce4:	4293      	cmp	r3, r2
 8103ce6:	d018      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	4a36      	ldr	r2, [pc, #216]	; (8103dc8 <HAL_DMA_Init+0x438>)
 8103cee:	4293      	cmp	r3, r2
 8103cf0:	d013      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	4a35      	ldr	r2, [pc, #212]	; (8103dcc <HAL_DMA_Init+0x43c>)
 8103cf8:	4293      	cmp	r3, r2
 8103cfa:	d00e      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	4a33      	ldr	r2, [pc, #204]	; (8103dd0 <HAL_DMA_Init+0x440>)
 8103d02:	4293      	cmp	r3, r2
 8103d04:	d009      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	4a32      	ldr	r2, [pc, #200]	; (8103dd4 <HAL_DMA_Init+0x444>)
 8103d0c:	4293      	cmp	r3, r2
 8103d0e:	d004      	beq.n	8103d1a <HAL_DMA_Init+0x38a>
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	4a30      	ldr	r2, [pc, #192]	; (8103dd8 <HAL_DMA_Init+0x448>)
 8103d16:	4293      	cmp	r3, r2
 8103d18:	d101      	bne.n	8103d1e <HAL_DMA_Init+0x38e>
 8103d1a:	2301      	movs	r3, #1
 8103d1c:	e000      	b.n	8103d20 <HAL_DMA_Init+0x390>
 8103d1e:	2300      	movs	r3, #0
 8103d20:	2b00      	cmp	r3, #0
 8103d22:	f000 8095 	beq.w	8103e50 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	681b      	ldr	r3, [r3, #0]
 8103d2a:	4a24      	ldr	r2, [pc, #144]	; (8103dbc <HAL_DMA_Init+0x42c>)
 8103d2c:	4293      	cmp	r3, r2
 8103d2e:	d021      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	4a22      	ldr	r2, [pc, #136]	; (8103dc0 <HAL_DMA_Init+0x430>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d01c      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	4a21      	ldr	r2, [pc, #132]	; (8103dc4 <HAL_DMA_Init+0x434>)
 8103d40:	4293      	cmp	r3, r2
 8103d42:	d017      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	4a1f      	ldr	r2, [pc, #124]	; (8103dc8 <HAL_DMA_Init+0x438>)
 8103d4a:	4293      	cmp	r3, r2
 8103d4c:	d012      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	4a1e      	ldr	r2, [pc, #120]	; (8103dcc <HAL_DMA_Init+0x43c>)
 8103d54:	4293      	cmp	r3, r2
 8103d56:	d00d      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	4a1c      	ldr	r2, [pc, #112]	; (8103dd0 <HAL_DMA_Init+0x440>)
 8103d5e:	4293      	cmp	r3, r2
 8103d60:	d008      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	4a1b      	ldr	r2, [pc, #108]	; (8103dd4 <HAL_DMA_Init+0x444>)
 8103d68:	4293      	cmp	r3, r2
 8103d6a:	d003      	beq.n	8103d74 <HAL_DMA_Init+0x3e4>
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	4a19      	ldr	r2, [pc, #100]	; (8103dd8 <HAL_DMA_Init+0x448>)
 8103d72:	4293      	cmp	r3, r2
 8103d74:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	2200      	movs	r2, #0
 8103d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	2202      	movs	r2, #2
 8103d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103d8e:	697b      	ldr	r3, [r7, #20]
 8103d90:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103d94:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103d98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	689b      	ldr	r3, [r3, #8]
 8103d9e:	2b40      	cmp	r3, #64	; 0x40
 8103da0:	d01c      	beq.n	8103ddc <HAL_DMA_Init+0x44c>
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	689b      	ldr	r3, [r3, #8]
 8103da6:	2b80      	cmp	r3, #128	; 0x80
 8103da8:	d102      	bne.n	8103db0 <HAL_DMA_Init+0x420>
 8103daa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103dae:	e016      	b.n	8103dde <HAL_DMA_Init+0x44e>
 8103db0:	2300      	movs	r3, #0
 8103db2:	e014      	b.n	8103dde <HAL_DMA_Init+0x44e>
 8103db4:	fe10803f 	.word	0xfe10803f
 8103db8:	5c001000 	.word	0x5c001000
 8103dbc:	58025408 	.word	0x58025408
 8103dc0:	5802541c 	.word	0x5802541c
 8103dc4:	58025430 	.word	0x58025430
 8103dc8:	58025444 	.word	0x58025444
 8103dcc:	58025458 	.word	0x58025458
 8103dd0:	5802546c 	.word	0x5802546c
 8103dd4:	58025480 	.word	0x58025480
 8103dd8:	58025494 	.word	0x58025494
 8103ddc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103dde:	687a      	ldr	r2, [r7, #4]
 8103de0:	68d2      	ldr	r2, [r2, #12]
 8103de2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	691b      	ldr	r3, [r3, #16]
 8103dea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	695b      	ldr	r3, [r3, #20]
 8103df2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	699b      	ldr	r3, [r3, #24]
 8103dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	69db      	ldr	r3, [r3, #28]
 8103e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6a1b      	ldr	r3, [r3, #32]
 8103e0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103e0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103e0e:	697a      	ldr	r2, [r7, #20]
 8103e10:	4313      	orrs	r3, r2
 8103e12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	697a      	ldr	r2, [r7, #20]
 8103e1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	461a      	mov	r2, r3
 8103e22:	4b6e      	ldr	r3, [pc, #440]	; (8103fdc <HAL_DMA_Init+0x64c>)
 8103e24:	4413      	add	r3, r2
 8103e26:	4a6e      	ldr	r2, [pc, #440]	; (8103fe0 <HAL_DMA_Init+0x650>)
 8103e28:	fba2 2303 	umull	r2, r3, r2, r3
 8103e2c:	091b      	lsrs	r3, r3, #4
 8103e2e:	009a      	lsls	r2, r3, #2
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103e34:	6878      	ldr	r0, [r7, #4]
 8103e36:	f002 f9c1 	bl	81061bc <DMA_CalcBaseAndBitshift>
 8103e3a:	4603      	mov	r3, r0
 8103e3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e42:	f003 031f 	and.w	r3, r3, #31
 8103e46:	2201      	movs	r2, #1
 8103e48:	409a      	lsls	r2, r3
 8103e4a:	68fb      	ldr	r3, [r7, #12]
 8103e4c:	605a      	str	r2, [r3, #4]
 8103e4e:	e008      	b.n	8103e62 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	2240      	movs	r2, #64	; 0x40
 8103e54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	2203      	movs	r2, #3
 8103e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103e5e:	2301      	movs	r3, #1
 8103e60:	e0b7      	b.n	8103fd2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a5f      	ldr	r2, [pc, #380]	; (8103fe4 <HAL_DMA_Init+0x654>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d072      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a5d      	ldr	r2, [pc, #372]	; (8103fe8 <HAL_DMA_Init+0x658>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d06d      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	4a5c      	ldr	r2, [pc, #368]	; (8103fec <HAL_DMA_Init+0x65c>)
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d068      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	4a5a      	ldr	r2, [pc, #360]	; (8103ff0 <HAL_DMA_Init+0x660>)
 8103e86:	4293      	cmp	r3, r2
 8103e88:	d063      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	4a59      	ldr	r2, [pc, #356]	; (8103ff4 <HAL_DMA_Init+0x664>)
 8103e90:	4293      	cmp	r3, r2
 8103e92:	d05e      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4a57      	ldr	r2, [pc, #348]	; (8103ff8 <HAL_DMA_Init+0x668>)
 8103e9a:	4293      	cmp	r3, r2
 8103e9c:	d059      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4a56      	ldr	r2, [pc, #344]	; (8103ffc <HAL_DMA_Init+0x66c>)
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d054      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	4a54      	ldr	r2, [pc, #336]	; (8104000 <HAL_DMA_Init+0x670>)
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	d04f      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	681b      	ldr	r3, [r3, #0]
 8103eb6:	4a53      	ldr	r2, [pc, #332]	; (8104004 <HAL_DMA_Init+0x674>)
 8103eb8:	4293      	cmp	r3, r2
 8103eba:	d04a      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	4a51      	ldr	r2, [pc, #324]	; (8104008 <HAL_DMA_Init+0x678>)
 8103ec2:	4293      	cmp	r3, r2
 8103ec4:	d045      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	4a50      	ldr	r2, [pc, #320]	; (810400c <HAL_DMA_Init+0x67c>)
 8103ecc:	4293      	cmp	r3, r2
 8103ece:	d040      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	4a4e      	ldr	r2, [pc, #312]	; (8104010 <HAL_DMA_Init+0x680>)
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	d03b      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	4a4d      	ldr	r2, [pc, #308]	; (8104014 <HAL_DMA_Init+0x684>)
 8103ee0:	4293      	cmp	r3, r2
 8103ee2:	d036      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	4a4b      	ldr	r2, [pc, #300]	; (8104018 <HAL_DMA_Init+0x688>)
 8103eea:	4293      	cmp	r3, r2
 8103eec:	d031      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	4a4a      	ldr	r2, [pc, #296]	; (810401c <HAL_DMA_Init+0x68c>)
 8103ef4:	4293      	cmp	r3, r2
 8103ef6:	d02c      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	4a48      	ldr	r2, [pc, #288]	; (8104020 <HAL_DMA_Init+0x690>)
 8103efe:	4293      	cmp	r3, r2
 8103f00:	d027      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	4a47      	ldr	r2, [pc, #284]	; (8104024 <HAL_DMA_Init+0x694>)
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d022      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	4a45      	ldr	r2, [pc, #276]	; (8104028 <HAL_DMA_Init+0x698>)
 8103f12:	4293      	cmp	r3, r2
 8103f14:	d01d      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	4a44      	ldr	r2, [pc, #272]	; (810402c <HAL_DMA_Init+0x69c>)
 8103f1c:	4293      	cmp	r3, r2
 8103f1e:	d018      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	4a42      	ldr	r2, [pc, #264]	; (8104030 <HAL_DMA_Init+0x6a0>)
 8103f26:	4293      	cmp	r3, r2
 8103f28:	d013      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	4a41      	ldr	r2, [pc, #260]	; (8104034 <HAL_DMA_Init+0x6a4>)
 8103f30:	4293      	cmp	r3, r2
 8103f32:	d00e      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	4a3f      	ldr	r2, [pc, #252]	; (8104038 <HAL_DMA_Init+0x6a8>)
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d009      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	4a3e      	ldr	r2, [pc, #248]	; (810403c <HAL_DMA_Init+0x6ac>)
 8103f44:	4293      	cmp	r3, r2
 8103f46:	d004      	beq.n	8103f52 <HAL_DMA_Init+0x5c2>
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	4a3c      	ldr	r2, [pc, #240]	; (8104040 <HAL_DMA_Init+0x6b0>)
 8103f4e:	4293      	cmp	r3, r2
 8103f50:	d101      	bne.n	8103f56 <HAL_DMA_Init+0x5c6>
 8103f52:	2301      	movs	r3, #1
 8103f54:	e000      	b.n	8103f58 <HAL_DMA_Init+0x5c8>
 8103f56:	2300      	movs	r3, #0
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	d032      	beq.n	8103fc2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103f5c:	6878      	ldr	r0, [r7, #4]
 8103f5e:	f002 fa5b 	bl	8106418 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	689b      	ldr	r3, [r3, #8]
 8103f66:	2b80      	cmp	r3, #128	; 0x80
 8103f68:	d102      	bne.n	8103f70 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	2200      	movs	r2, #0
 8103f6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	685a      	ldr	r2, [r3, #4]
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103f78:	b2d2      	uxtb	r2, r2
 8103f7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103f80:	687a      	ldr	r2, [r7, #4]
 8103f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103f84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	685b      	ldr	r3, [r3, #4]
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d010      	beq.n	8103fb0 <HAL_DMA_Init+0x620>
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	685b      	ldr	r3, [r3, #4]
 8103f92:	2b08      	cmp	r3, #8
 8103f94:	d80c      	bhi.n	8103fb0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103f96:	6878      	ldr	r0, [r7, #4]
 8103f98:	f002 fad8 	bl	810654c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103fa0:	2200      	movs	r2, #0
 8103fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fa8:	687a      	ldr	r2, [r7, #4]
 8103faa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103fac:	605a      	str	r2, [r3, #4]
 8103fae:	e008      	b.n	8103fc2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	2200      	movs	r2, #0
 8103fb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	2200      	movs	r2, #0
 8103fba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	2200      	movs	r2, #0
 8103fc0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	2200      	movs	r2, #0
 8103fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	2201      	movs	r2, #1
 8103fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103fd0:	2300      	movs	r3, #0
}
 8103fd2:	4618      	mov	r0, r3
 8103fd4:	3718      	adds	r7, #24
 8103fd6:	46bd      	mov	sp, r7
 8103fd8:	bd80      	pop	{r7, pc}
 8103fda:	bf00      	nop
 8103fdc:	a7fdabf8 	.word	0xa7fdabf8
 8103fe0:	cccccccd 	.word	0xcccccccd
 8103fe4:	40020010 	.word	0x40020010
 8103fe8:	40020028 	.word	0x40020028
 8103fec:	40020040 	.word	0x40020040
 8103ff0:	40020058 	.word	0x40020058
 8103ff4:	40020070 	.word	0x40020070
 8103ff8:	40020088 	.word	0x40020088
 8103ffc:	400200a0 	.word	0x400200a0
 8104000:	400200b8 	.word	0x400200b8
 8104004:	40020410 	.word	0x40020410
 8104008:	40020428 	.word	0x40020428
 810400c:	40020440 	.word	0x40020440
 8104010:	40020458 	.word	0x40020458
 8104014:	40020470 	.word	0x40020470
 8104018:	40020488 	.word	0x40020488
 810401c:	400204a0 	.word	0x400204a0
 8104020:	400204b8 	.word	0x400204b8
 8104024:	58025408 	.word	0x58025408
 8104028:	5802541c 	.word	0x5802541c
 810402c:	58025430 	.word	0x58025430
 8104030:	58025444 	.word	0x58025444
 8104034:	58025458 	.word	0x58025458
 8104038:	5802546c 	.word	0x5802546c
 810403c:	58025480 	.word	0x58025480
 8104040:	58025494 	.word	0x58025494

08104044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104044:	b580      	push	{r7, lr}
 8104046:	b086      	sub	sp, #24
 8104048:	af00      	add	r7, sp, #0
 810404a:	60f8      	str	r0, [r7, #12]
 810404c:	60b9      	str	r1, [r7, #8]
 810404e:	607a      	str	r2, [r7, #4]
 8104050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104052:	2300      	movs	r3, #0
 8104054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104056:	68fb      	ldr	r3, [r7, #12]
 8104058:	2b00      	cmp	r3, #0
 810405a:	d101      	bne.n	8104060 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 810405c:	2301      	movs	r3, #1
 810405e:	e226      	b.n	81044ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8104066:	2b01      	cmp	r3, #1
 8104068:	d101      	bne.n	810406e <HAL_DMA_Start_IT+0x2a>
 810406a:	2302      	movs	r3, #2
 810406c:	e21f      	b.n	81044ae <HAL_DMA_Start_IT+0x46a>
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	2201      	movs	r2, #1
 8104072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810407c:	b2db      	uxtb	r3, r3
 810407e:	2b01      	cmp	r3, #1
 8104080:	f040 820a 	bne.w	8104498 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104084:	68fb      	ldr	r3, [r7, #12]
 8104086:	2202      	movs	r2, #2
 8104088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	2200      	movs	r2, #0
 8104090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	4a68      	ldr	r2, [pc, #416]	; (8104238 <HAL_DMA_Start_IT+0x1f4>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d04a      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a66      	ldr	r2, [pc, #408]	; (810423c <HAL_DMA_Start_IT+0x1f8>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d045      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a65      	ldr	r2, [pc, #404]	; (8104240 <HAL_DMA_Start_IT+0x1fc>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d040      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a63      	ldr	r2, [pc, #396]	; (8104244 <HAL_DMA_Start_IT+0x200>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d03b      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a62      	ldr	r2, [pc, #392]	; (8104248 <HAL_DMA_Start_IT+0x204>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d036      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a60      	ldr	r2, [pc, #384]	; (810424c <HAL_DMA_Start_IT+0x208>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d031      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a5f      	ldr	r2, [pc, #380]	; (8104250 <HAL_DMA_Start_IT+0x20c>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d02c      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040d8:	68fb      	ldr	r3, [r7, #12]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	4a5d      	ldr	r2, [pc, #372]	; (8104254 <HAL_DMA_Start_IT+0x210>)
 81040de:	4293      	cmp	r3, r2
 81040e0:	d027      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040e2:	68fb      	ldr	r3, [r7, #12]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a5c      	ldr	r2, [pc, #368]	; (8104258 <HAL_DMA_Start_IT+0x214>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d022      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a5a      	ldr	r2, [pc, #360]	; (810425c <HAL_DMA_Start_IT+0x218>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d01d      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a59      	ldr	r2, [pc, #356]	; (8104260 <HAL_DMA_Start_IT+0x21c>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d018      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a57      	ldr	r2, [pc, #348]	; (8104264 <HAL_DMA_Start_IT+0x220>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d013      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 810410a:	68fb      	ldr	r3, [r7, #12]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a56      	ldr	r2, [pc, #344]	; (8104268 <HAL_DMA_Start_IT+0x224>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d00e      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 8104114:	68fb      	ldr	r3, [r7, #12]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a54      	ldr	r2, [pc, #336]	; (810426c <HAL_DMA_Start_IT+0x228>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d009      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 810411e:	68fb      	ldr	r3, [r7, #12]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a53      	ldr	r2, [pc, #332]	; (8104270 <HAL_DMA_Start_IT+0x22c>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d004      	beq.n	8104132 <HAL_DMA_Start_IT+0xee>
 8104128:	68fb      	ldr	r3, [r7, #12]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a51      	ldr	r2, [pc, #324]	; (8104274 <HAL_DMA_Start_IT+0x230>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d108      	bne.n	8104144 <HAL_DMA_Start_IT+0x100>
 8104132:	68fb      	ldr	r3, [r7, #12]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	681a      	ldr	r2, [r3, #0]
 8104138:	68fb      	ldr	r3, [r7, #12]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	f022 0201 	bic.w	r2, r2, #1
 8104140:	601a      	str	r2, [r3, #0]
 8104142:	e007      	b.n	8104154 <HAL_DMA_Start_IT+0x110>
 8104144:	68fb      	ldr	r3, [r7, #12]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	681a      	ldr	r2, [r3, #0]
 810414a:	68fb      	ldr	r3, [r7, #12]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	f022 0201 	bic.w	r2, r2, #1
 8104152:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104154:	683b      	ldr	r3, [r7, #0]
 8104156:	687a      	ldr	r2, [r7, #4]
 8104158:	68b9      	ldr	r1, [r7, #8]
 810415a:	68f8      	ldr	r0, [r7, #12]
 810415c:	f001 fe82 	bl	8105e64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104160:	68fb      	ldr	r3, [r7, #12]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	4a34      	ldr	r2, [pc, #208]	; (8104238 <HAL_DMA_Start_IT+0x1f4>)
 8104166:	4293      	cmp	r3, r2
 8104168:	d04a      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 810416a:	68fb      	ldr	r3, [r7, #12]
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	4a33      	ldr	r2, [pc, #204]	; (810423c <HAL_DMA_Start_IT+0x1f8>)
 8104170:	4293      	cmp	r3, r2
 8104172:	d045      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	681b      	ldr	r3, [r3, #0]
 8104178:	4a31      	ldr	r2, [pc, #196]	; (8104240 <HAL_DMA_Start_IT+0x1fc>)
 810417a:	4293      	cmp	r3, r2
 810417c:	d040      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	681b      	ldr	r3, [r3, #0]
 8104182:	4a30      	ldr	r2, [pc, #192]	; (8104244 <HAL_DMA_Start_IT+0x200>)
 8104184:	4293      	cmp	r3, r2
 8104186:	d03b      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	4a2e      	ldr	r2, [pc, #184]	; (8104248 <HAL_DMA_Start_IT+0x204>)
 810418e:	4293      	cmp	r3, r2
 8104190:	d036      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	4a2d      	ldr	r2, [pc, #180]	; (810424c <HAL_DMA_Start_IT+0x208>)
 8104198:	4293      	cmp	r3, r2
 810419a:	d031      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 810419c:	68fb      	ldr	r3, [r7, #12]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	4a2b      	ldr	r2, [pc, #172]	; (8104250 <HAL_DMA_Start_IT+0x20c>)
 81041a2:	4293      	cmp	r3, r2
 81041a4:	d02c      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041a6:	68fb      	ldr	r3, [r7, #12]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	4a2a      	ldr	r2, [pc, #168]	; (8104254 <HAL_DMA_Start_IT+0x210>)
 81041ac:	4293      	cmp	r3, r2
 81041ae:	d027      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041b0:	68fb      	ldr	r3, [r7, #12]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	4a28      	ldr	r2, [pc, #160]	; (8104258 <HAL_DMA_Start_IT+0x214>)
 81041b6:	4293      	cmp	r3, r2
 81041b8:	d022      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	4a27      	ldr	r2, [pc, #156]	; (810425c <HAL_DMA_Start_IT+0x218>)
 81041c0:	4293      	cmp	r3, r2
 81041c2:	d01d      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041c4:	68fb      	ldr	r3, [r7, #12]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	4a25      	ldr	r2, [pc, #148]	; (8104260 <HAL_DMA_Start_IT+0x21c>)
 81041ca:	4293      	cmp	r3, r2
 81041cc:	d018      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	4a24      	ldr	r2, [pc, #144]	; (8104264 <HAL_DMA_Start_IT+0x220>)
 81041d4:	4293      	cmp	r3, r2
 81041d6:	d013      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041d8:	68fb      	ldr	r3, [r7, #12]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	4a22      	ldr	r2, [pc, #136]	; (8104268 <HAL_DMA_Start_IT+0x224>)
 81041de:	4293      	cmp	r3, r2
 81041e0:	d00e      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041e2:	68fb      	ldr	r3, [r7, #12]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	4a21      	ldr	r2, [pc, #132]	; (810426c <HAL_DMA_Start_IT+0x228>)
 81041e8:	4293      	cmp	r3, r2
 81041ea:	d009      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041ec:	68fb      	ldr	r3, [r7, #12]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	4a1f      	ldr	r2, [pc, #124]	; (8104270 <HAL_DMA_Start_IT+0x22c>)
 81041f2:	4293      	cmp	r3, r2
 81041f4:	d004      	beq.n	8104200 <HAL_DMA_Start_IT+0x1bc>
 81041f6:	68fb      	ldr	r3, [r7, #12]
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	4a1e      	ldr	r2, [pc, #120]	; (8104274 <HAL_DMA_Start_IT+0x230>)
 81041fc:	4293      	cmp	r3, r2
 81041fe:	d101      	bne.n	8104204 <HAL_DMA_Start_IT+0x1c0>
 8104200:	2301      	movs	r3, #1
 8104202:	e000      	b.n	8104206 <HAL_DMA_Start_IT+0x1c2>
 8104204:	2300      	movs	r3, #0
 8104206:	2b00      	cmp	r3, #0
 8104208:	d036      	beq.n	8104278 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810420a:	68fb      	ldr	r3, [r7, #12]
 810420c:	681b      	ldr	r3, [r3, #0]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	f023 021e 	bic.w	r2, r3, #30
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	681b      	ldr	r3, [r3, #0]
 8104218:	f042 0216 	orr.w	r2, r2, #22
 810421c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810421e:	68fb      	ldr	r3, [r7, #12]
 8104220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104222:	2b00      	cmp	r3, #0
 8104224:	d03e      	beq.n	81042a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	681a      	ldr	r2, [r3, #0]
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	f042 0208 	orr.w	r2, r2, #8
 8104234:	601a      	str	r2, [r3, #0]
 8104236:	e035      	b.n	81042a4 <HAL_DMA_Start_IT+0x260>
 8104238:	40020010 	.word	0x40020010
 810423c:	40020028 	.word	0x40020028
 8104240:	40020040 	.word	0x40020040
 8104244:	40020058 	.word	0x40020058
 8104248:	40020070 	.word	0x40020070
 810424c:	40020088 	.word	0x40020088
 8104250:	400200a0 	.word	0x400200a0
 8104254:	400200b8 	.word	0x400200b8
 8104258:	40020410 	.word	0x40020410
 810425c:	40020428 	.word	0x40020428
 8104260:	40020440 	.word	0x40020440
 8104264:	40020458 	.word	0x40020458
 8104268:	40020470 	.word	0x40020470
 810426c:	40020488 	.word	0x40020488
 8104270:	400204a0 	.word	0x400204a0
 8104274:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	681b      	ldr	r3, [r3, #0]
 810427e:	f023 020e 	bic.w	r2, r3, #14
 8104282:	68fb      	ldr	r3, [r7, #12]
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	f042 020a 	orr.w	r2, r2, #10
 810428a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810428c:	68fb      	ldr	r3, [r7, #12]
 810428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104290:	2b00      	cmp	r3, #0
 8104292:	d007      	beq.n	81042a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104294:	68fb      	ldr	r3, [r7, #12]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	681a      	ldr	r2, [r3, #0]
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	f042 0204 	orr.w	r2, r2, #4
 81042a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	4a83      	ldr	r2, [pc, #524]	; (81044b8 <HAL_DMA_Start_IT+0x474>)
 81042aa:	4293      	cmp	r3, r2
 81042ac:	d072      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042ae:	68fb      	ldr	r3, [r7, #12]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	4a82      	ldr	r2, [pc, #520]	; (81044bc <HAL_DMA_Start_IT+0x478>)
 81042b4:	4293      	cmp	r3, r2
 81042b6:	d06d      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	4a80      	ldr	r2, [pc, #512]	; (81044c0 <HAL_DMA_Start_IT+0x47c>)
 81042be:	4293      	cmp	r3, r2
 81042c0:	d068      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	4a7f      	ldr	r2, [pc, #508]	; (81044c4 <HAL_DMA_Start_IT+0x480>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d063      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042cc:	68fb      	ldr	r3, [r7, #12]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	4a7d      	ldr	r2, [pc, #500]	; (81044c8 <HAL_DMA_Start_IT+0x484>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d05e      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042d6:	68fb      	ldr	r3, [r7, #12]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	4a7c      	ldr	r2, [pc, #496]	; (81044cc <HAL_DMA_Start_IT+0x488>)
 81042dc:	4293      	cmp	r3, r2
 81042de:	d059      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	4a7a      	ldr	r2, [pc, #488]	; (81044d0 <HAL_DMA_Start_IT+0x48c>)
 81042e6:	4293      	cmp	r3, r2
 81042e8:	d054      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	4a79      	ldr	r2, [pc, #484]	; (81044d4 <HAL_DMA_Start_IT+0x490>)
 81042f0:	4293      	cmp	r3, r2
 81042f2:	d04f      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	4a77      	ldr	r2, [pc, #476]	; (81044d8 <HAL_DMA_Start_IT+0x494>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d04a      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4a76      	ldr	r2, [pc, #472]	; (81044dc <HAL_DMA_Start_IT+0x498>)
 8104304:	4293      	cmp	r3, r2
 8104306:	d045      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	4a74      	ldr	r2, [pc, #464]	; (81044e0 <HAL_DMA_Start_IT+0x49c>)
 810430e:	4293      	cmp	r3, r2
 8104310:	d040      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	4a73      	ldr	r2, [pc, #460]	; (81044e4 <HAL_DMA_Start_IT+0x4a0>)
 8104318:	4293      	cmp	r3, r2
 810431a:	d03b      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	4a71      	ldr	r2, [pc, #452]	; (81044e8 <HAL_DMA_Start_IT+0x4a4>)
 8104322:	4293      	cmp	r3, r2
 8104324:	d036      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104326:	68fb      	ldr	r3, [r7, #12]
 8104328:	681b      	ldr	r3, [r3, #0]
 810432a:	4a70      	ldr	r2, [pc, #448]	; (81044ec <HAL_DMA_Start_IT+0x4a8>)
 810432c:	4293      	cmp	r3, r2
 810432e:	d031      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104330:	68fb      	ldr	r3, [r7, #12]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	4a6e      	ldr	r2, [pc, #440]	; (81044f0 <HAL_DMA_Start_IT+0x4ac>)
 8104336:	4293      	cmp	r3, r2
 8104338:	d02c      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 810433a:	68fb      	ldr	r3, [r7, #12]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	4a6d      	ldr	r2, [pc, #436]	; (81044f4 <HAL_DMA_Start_IT+0x4b0>)
 8104340:	4293      	cmp	r3, r2
 8104342:	d027      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	4a6b      	ldr	r2, [pc, #428]	; (81044f8 <HAL_DMA_Start_IT+0x4b4>)
 810434a:	4293      	cmp	r3, r2
 810434c:	d022      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 810434e:	68fb      	ldr	r3, [r7, #12]
 8104350:	681b      	ldr	r3, [r3, #0]
 8104352:	4a6a      	ldr	r2, [pc, #424]	; (81044fc <HAL_DMA_Start_IT+0x4b8>)
 8104354:	4293      	cmp	r3, r2
 8104356:	d01d      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	4a68      	ldr	r2, [pc, #416]	; (8104500 <HAL_DMA_Start_IT+0x4bc>)
 810435e:	4293      	cmp	r3, r2
 8104360:	d018      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104362:	68fb      	ldr	r3, [r7, #12]
 8104364:	681b      	ldr	r3, [r3, #0]
 8104366:	4a67      	ldr	r2, [pc, #412]	; (8104504 <HAL_DMA_Start_IT+0x4c0>)
 8104368:	4293      	cmp	r3, r2
 810436a:	d013      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 810436c:	68fb      	ldr	r3, [r7, #12]
 810436e:	681b      	ldr	r3, [r3, #0]
 8104370:	4a65      	ldr	r2, [pc, #404]	; (8104508 <HAL_DMA_Start_IT+0x4c4>)
 8104372:	4293      	cmp	r3, r2
 8104374:	d00e      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104376:	68fb      	ldr	r3, [r7, #12]
 8104378:	681b      	ldr	r3, [r3, #0]
 810437a:	4a64      	ldr	r2, [pc, #400]	; (810450c <HAL_DMA_Start_IT+0x4c8>)
 810437c:	4293      	cmp	r3, r2
 810437e:	d009      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 8104380:	68fb      	ldr	r3, [r7, #12]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	4a62      	ldr	r2, [pc, #392]	; (8104510 <HAL_DMA_Start_IT+0x4cc>)
 8104386:	4293      	cmp	r3, r2
 8104388:	d004      	beq.n	8104394 <HAL_DMA_Start_IT+0x350>
 810438a:	68fb      	ldr	r3, [r7, #12]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	4a61      	ldr	r2, [pc, #388]	; (8104514 <HAL_DMA_Start_IT+0x4d0>)
 8104390:	4293      	cmp	r3, r2
 8104392:	d101      	bne.n	8104398 <HAL_DMA_Start_IT+0x354>
 8104394:	2301      	movs	r3, #1
 8104396:	e000      	b.n	810439a <HAL_DMA_Start_IT+0x356>
 8104398:	2300      	movs	r3, #0
 810439a:	2b00      	cmp	r3, #0
 810439c:	d01a      	beq.n	81043d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810439e:	68fb      	ldr	r3, [r7, #12]
 81043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81043a8:	2b00      	cmp	r3, #0
 81043aa:	d007      	beq.n	81043bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81043b0:	681a      	ldr	r2, [r3, #0]
 81043b2:	68fb      	ldr	r3, [r7, #12]
 81043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81043ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 81043bc:	68fb      	ldr	r3, [r7, #12]
 81043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	d007      	beq.n	81043d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81043c4:	68fb      	ldr	r3, [r7, #12]
 81043c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81043c8:	681a      	ldr	r2, [r3, #0]
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81043d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a37      	ldr	r2, [pc, #220]	; (81044b8 <HAL_DMA_Start_IT+0x474>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d04a      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 81043de:	68fb      	ldr	r3, [r7, #12]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	4a36      	ldr	r2, [pc, #216]	; (81044bc <HAL_DMA_Start_IT+0x478>)
 81043e4:	4293      	cmp	r3, r2
 81043e6:	d045      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a34      	ldr	r2, [pc, #208]	; (81044c0 <HAL_DMA_Start_IT+0x47c>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d040      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a33      	ldr	r2, [pc, #204]	; (81044c4 <HAL_DMA_Start_IT+0x480>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d03b      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a31      	ldr	r2, [pc, #196]	; (81044c8 <HAL_DMA_Start_IT+0x484>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d036      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a30      	ldr	r2, [pc, #192]	; (81044cc <HAL_DMA_Start_IT+0x488>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d031      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a2e      	ldr	r2, [pc, #184]	; (81044d0 <HAL_DMA_Start_IT+0x48c>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d02c      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a2d      	ldr	r2, [pc, #180]	; (81044d4 <HAL_DMA_Start_IT+0x490>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d027      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	4a2b      	ldr	r2, [pc, #172]	; (81044d8 <HAL_DMA_Start_IT+0x494>)
 810442a:	4293      	cmp	r3, r2
 810442c:	d022      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	4a2a      	ldr	r2, [pc, #168]	; (81044dc <HAL_DMA_Start_IT+0x498>)
 8104434:	4293      	cmp	r3, r2
 8104436:	d01d      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	4a28      	ldr	r2, [pc, #160]	; (81044e0 <HAL_DMA_Start_IT+0x49c>)
 810443e:	4293      	cmp	r3, r2
 8104440:	d018      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	4a27      	ldr	r2, [pc, #156]	; (81044e4 <HAL_DMA_Start_IT+0x4a0>)
 8104448:	4293      	cmp	r3, r2
 810444a:	d013      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 810444c:	68fb      	ldr	r3, [r7, #12]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	4a25      	ldr	r2, [pc, #148]	; (81044e8 <HAL_DMA_Start_IT+0x4a4>)
 8104452:	4293      	cmp	r3, r2
 8104454:	d00e      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	4a24      	ldr	r2, [pc, #144]	; (81044ec <HAL_DMA_Start_IT+0x4a8>)
 810445c:	4293      	cmp	r3, r2
 810445e:	d009      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a22      	ldr	r2, [pc, #136]	; (81044f0 <HAL_DMA_Start_IT+0x4ac>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d004      	beq.n	8104474 <HAL_DMA_Start_IT+0x430>
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a21      	ldr	r2, [pc, #132]	; (81044f4 <HAL_DMA_Start_IT+0x4b0>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d108      	bne.n	8104486 <HAL_DMA_Start_IT+0x442>
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	681a      	ldr	r2, [r3, #0]
 810447a:	68fb      	ldr	r3, [r7, #12]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	f042 0201 	orr.w	r2, r2, #1
 8104482:	601a      	str	r2, [r3, #0]
 8104484:	e012      	b.n	81044ac <HAL_DMA_Start_IT+0x468>
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	681b      	ldr	r3, [r3, #0]
 810448a:	681a      	ldr	r2, [r3, #0]
 810448c:	68fb      	ldr	r3, [r7, #12]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	f042 0201 	orr.w	r2, r2, #1
 8104494:	601a      	str	r2, [r3, #0]
 8104496:	e009      	b.n	81044ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104498:	68fb      	ldr	r3, [r7, #12]
 810449a:	2200      	movs	r2, #0
 810449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81044a0:	68fb      	ldr	r3, [r7, #12]
 81044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81044a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 81044a8:	2301      	movs	r3, #1
 81044aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 81044ac:	7dfb      	ldrb	r3, [r7, #23]
}
 81044ae:	4618      	mov	r0, r3
 81044b0:	3718      	adds	r7, #24
 81044b2:	46bd      	mov	sp, r7
 81044b4:	bd80      	pop	{r7, pc}
 81044b6:	bf00      	nop
 81044b8:	40020010 	.word	0x40020010
 81044bc:	40020028 	.word	0x40020028
 81044c0:	40020040 	.word	0x40020040
 81044c4:	40020058 	.word	0x40020058
 81044c8:	40020070 	.word	0x40020070
 81044cc:	40020088 	.word	0x40020088
 81044d0:	400200a0 	.word	0x400200a0
 81044d4:	400200b8 	.word	0x400200b8
 81044d8:	40020410 	.word	0x40020410
 81044dc:	40020428 	.word	0x40020428
 81044e0:	40020440 	.word	0x40020440
 81044e4:	40020458 	.word	0x40020458
 81044e8:	40020470 	.word	0x40020470
 81044ec:	40020488 	.word	0x40020488
 81044f0:	400204a0 	.word	0x400204a0
 81044f4:	400204b8 	.word	0x400204b8
 81044f8:	58025408 	.word	0x58025408
 81044fc:	5802541c 	.word	0x5802541c
 8104500:	58025430 	.word	0x58025430
 8104504:	58025444 	.word	0x58025444
 8104508:	58025458 	.word	0x58025458
 810450c:	5802546c 	.word	0x5802546c
 8104510:	58025480 	.word	0x58025480
 8104514:	58025494 	.word	0x58025494

08104518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104518:	b580      	push	{r7, lr}
 810451a:	b086      	sub	sp, #24
 810451c:	af00      	add	r7, sp, #0
 810451e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104520:	f7ff f866 	bl	81035f0 <HAL_GetTick>
 8104524:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	2b00      	cmp	r3, #0
 810452a:	d101      	bne.n	8104530 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 810452c:	2301      	movs	r3, #1
 810452e:	e2dc      	b.n	8104aea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104536:	b2db      	uxtb	r3, r3
 8104538:	2b02      	cmp	r3, #2
 810453a:	d008      	beq.n	810454e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	2280      	movs	r2, #128	; 0x80
 8104540:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	2200      	movs	r2, #0
 8104546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 810454a:	2301      	movs	r3, #1
 810454c:	e2cd      	b.n	8104aea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	4a76      	ldr	r2, [pc, #472]	; (810472c <HAL_DMA_Abort+0x214>)
 8104554:	4293      	cmp	r3, r2
 8104556:	d04a      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	4a74      	ldr	r2, [pc, #464]	; (8104730 <HAL_DMA_Abort+0x218>)
 810455e:	4293      	cmp	r3, r2
 8104560:	d045      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	681b      	ldr	r3, [r3, #0]
 8104566:	4a73      	ldr	r2, [pc, #460]	; (8104734 <HAL_DMA_Abort+0x21c>)
 8104568:	4293      	cmp	r3, r2
 810456a:	d040      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	4a71      	ldr	r2, [pc, #452]	; (8104738 <HAL_DMA_Abort+0x220>)
 8104572:	4293      	cmp	r3, r2
 8104574:	d03b      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	4a70      	ldr	r2, [pc, #448]	; (810473c <HAL_DMA_Abort+0x224>)
 810457c:	4293      	cmp	r3, r2
 810457e:	d036      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	4a6e      	ldr	r2, [pc, #440]	; (8104740 <HAL_DMA_Abort+0x228>)
 8104586:	4293      	cmp	r3, r2
 8104588:	d031      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	4a6d      	ldr	r2, [pc, #436]	; (8104744 <HAL_DMA_Abort+0x22c>)
 8104590:	4293      	cmp	r3, r2
 8104592:	d02c      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	4a6b      	ldr	r2, [pc, #428]	; (8104748 <HAL_DMA_Abort+0x230>)
 810459a:	4293      	cmp	r3, r2
 810459c:	d027      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	4a6a      	ldr	r2, [pc, #424]	; (810474c <HAL_DMA_Abort+0x234>)
 81045a4:	4293      	cmp	r3, r2
 81045a6:	d022      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045a8:	687b      	ldr	r3, [r7, #4]
 81045aa:	681b      	ldr	r3, [r3, #0]
 81045ac:	4a68      	ldr	r2, [pc, #416]	; (8104750 <HAL_DMA_Abort+0x238>)
 81045ae:	4293      	cmp	r3, r2
 81045b0:	d01d      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	4a67      	ldr	r2, [pc, #412]	; (8104754 <HAL_DMA_Abort+0x23c>)
 81045b8:	4293      	cmp	r3, r2
 81045ba:	d018      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	4a65      	ldr	r2, [pc, #404]	; (8104758 <HAL_DMA_Abort+0x240>)
 81045c2:	4293      	cmp	r3, r2
 81045c4:	d013      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	4a64      	ldr	r2, [pc, #400]	; (810475c <HAL_DMA_Abort+0x244>)
 81045cc:	4293      	cmp	r3, r2
 81045ce:	d00e      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	4a62      	ldr	r2, [pc, #392]	; (8104760 <HAL_DMA_Abort+0x248>)
 81045d6:	4293      	cmp	r3, r2
 81045d8:	d009      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	681b      	ldr	r3, [r3, #0]
 81045de:	4a61      	ldr	r2, [pc, #388]	; (8104764 <HAL_DMA_Abort+0x24c>)
 81045e0:	4293      	cmp	r3, r2
 81045e2:	d004      	beq.n	81045ee <HAL_DMA_Abort+0xd6>
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	4a5f      	ldr	r2, [pc, #380]	; (8104768 <HAL_DMA_Abort+0x250>)
 81045ea:	4293      	cmp	r3, r2
 81045ec:	d101      	bne.n	81045f2 <HAL_DMA_Abort+0xda>
 81045ee:	2301      	movs	r3, #1
 81045f0:	e000      	b.n	81045f4 <HAL_DMA_Abort+0xdc>
 81045f2:	2300      	movs	r3, #0
 81045f4:	2b00      	cmp	r3, #0
 81045f6:	d013      	beq.n	8104620 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	681a      	ldr	r2, [r3, #0]
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	f022 021e 	bic.w	r2, r2, #30
 8104606:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	695a      	ldr	r2, [r3, #20]
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104616:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	617b      	str	r3, [r7, #20]
 810461e:	e00a      	b.n	8104636 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	681a      	ldr	r2, [r3, #0]
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	f022 020e 	bic.w	r2, r2, #14
 810462e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	4a3c      	ldr	r2, [pc, #240]	; (810472c <HAL_DMA_Abort+0x214>)
 810463c:	4293      	cmp	r3, r2
 810463e:	d072      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	681b      	ldr	r3, [r3, #0]
 8104644:	4a3a      	ldr	r2, [pc, #232]	; (8104730 <HAL_DMA_Abort+0x218>)
 8104646:	4293      	cmp	r3, r2
 8104648:	d06d      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a39      	ldr	r2, [pc, #228]	; (8104734 <HAL_DMA_Abort+0x21c>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d068      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	4a37      	ldr	r2, [pc, #220]	; (8104738 <HAL_DMA_Abort+0x220>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d063      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	4a36      	ldr	r2, [pc, #216]	; (810473c <HAL_DMA_Abort+0x224>)
 8104664:	4293      	cmp	r3, r2
 8104666:	d05e      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	4a34      	ldr	r2, [pc, #208]	; (8104740 <HAL_DMA_Abort+0x228>)
 810466e:	4293      	cmp	r3, r2
 8104670:	d059      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	4a33      	ldr	r2, [pc, #204]	; (8104744 <HAL_DMA_Abort+0x22c>)
 8104678:	4293      	cmp	r3, r2
 810467a:	d054      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	4a31      	ldr	r2, [pc, #196]	; (8104748 <HAL_DMA_Abort+0x230>)
 8104682:	4293      	cmp	r3, r2
 8104684:	d04f      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	4a30      	ldr	r2, [pc, #192]	; (810474c <HAL_DMA_Abort+0x234>)
 810468c:	4293      	cmp	r3, r2
 810468e:	d04a      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a2e      	ldr	r2, [pc, #184]	; (8104750 <HAL_DMA_Abort+0x238>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d045      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	4a2d      	ldr	r2, [pc, #180]	; (8104754 <HAL_DMA_Abort+0x23c>)
 81046a0:	4293      	cmp	r3, r2
 81046a2:	d040      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a2b      	ldr	r2, [pc, #172]	; (8104758 <HAL_DMA_Abort+0x240>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d03b      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	4a2a      	ldr	r2, [pc, #168]	; (810475c <HAL_DMA_Abort+0x244>)
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d036      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	4a28      	ldr	r2, [pc, #160]	; (8104760 <HAL_DMA_Abort+0x248>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d031      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	4a27      	ldr	r2, [pc, #156]	; (8104764 <HAL_DMA_Abort+0x24c>)
 81046c8:	4293      	cmp	r3, r2
 81046ca:	d02c      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	4a25      	ldr	r2, [pc, #148]	; (8104768 <HAL_DMA_Abort+0x250>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d027      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a24      	ldr	r2, [pc, #144]	; (810476c <HAL_DMA_Abort+0x254>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d022      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a22      	ldr	r2, [pc, #136]	; (8104770 <HAL_DMA_Abort+0x258>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d01d      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a21      	ldr	r2, [pc, #132]	; (8104774 <HAL_DMA_Abort+0x25c>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d018      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a1f      	ldr	r2, [pc, #124]	; (8104778 <HAL_DMA_Abort+0x260>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d013      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a1e      	ldr	r2, [pc, #120]	; (810477c <HAL_DMA_Abort+0x264>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d00e      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a1c      	ldr	r2, [pc, #112]	; (8104780 <HAL_DMA_Abort+0x268>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d009      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a1b      	ldr	r2, [pc, #108]	; (8104784 <HAL_DMA_Abort+0x26c>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d004      	beq.n	8104726 <HAL_DMA_Abort+0x20e>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a19      	ldr	r2, [pc, #100]	; (8104788 <HAL_DMA_Abort+0x270>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d132      	bne.n	810478c <HAL_DMA_Abort+0x274>
 8104726:	2301      	movs	r3, #1
 8104728:	e031      	b.n	810478e <HAL_DMA_Abort+0x276>
 810472a:	bf00      	nop
 810472c:	40020010 	.word	0x40020010
 8104730:	40020028 	.word	0x40020028
 8104734:	40020040 	.word	0x40020040
 8104738:	40020058 	.word	0x40020058
 810473c:	40020070 	.word	0x40020070
 8104740:	40020088 	.word	0x40020088
 8104744:	400200a0 	.word	0x400200a0
 8104748:	400200b8 	.word	0x400200b8
 810474c:	40020410 	.word	0x40020410
 8104750:	40020428 	.word	0x40020428
 8104754:	40020440 	.word	0x40020440
 8104758:	40020458 	.word	0x40020458
 810475c:	40020470 	.word	0x40020470
 8104760:	40020488 	.word	0x40020488
 8104764:	400204a0 	.word	0x400204a0
 8104768:	400204b8 	.word	0x400204b8
 810476c:	58025408 	.word	0x58025408
 8104770:	5802541c 	.word	0x5802541c
 8104774:	58025430 	.word	0x58025430
 8104778:	58025444 	.word	0x58025444
 810477c:	58025458 	.word	0x58025458
 8104780:	5802546c 	.word	0x5802546c
 8104784:	58025480 	.word	0x58025480
 8104788:	58025494 	.word	0x58025494
 810478c:	2300      	movs	r3, #0
 810478e:	2b00      	cmp	r3, #0
 8104790:	d007      	beq.n	81047a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104796:	681a      	ldr	r2, [r3, #0]
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810479c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81047a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	4a6d      	ldr	r2, [pc, #436]	; (810495c <HAL_DMA_Abort+0x444>)
 81047a8:	4293      	cmp	r3, r2
 81047aa:	d04a      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	4a6b      	ldr	r2, [pc, #428]	; (8104960 <HAL_DMA_Abort+0x448>)
 81047b2:	4293      	cmp	r3, r2
 81047b4:	d045      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	681b      	ldr	r3, [r3, #0]
 81047ba:	4a6a      	ldr	r2, [pc, #424]	; (8104964 <HAL_DMA_Abort+0x44c>)
 81047bc:	4293      	cmp	r3, r2
 81047be:	d040      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	4a68      	ldr	r2, [pc, #416]	; (8104968 <HAL_DMA_Abort+0x450>)
 81047c6:	4293      	cmp	r3, r2
 81047c8:	d03b      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	4a67      	ldr	r2, [pc, #412]	; (810496c <HAL_DMA_Abort+0x454>)
 81047d0:	4293      	cmp	r3, r2
 81047d2:	d036      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	4a65      	ldr	r2, [pc, #404]	; (8104970 <HAL_DMA_Abort+0x458>)
 81047da:	4293      	cmp	r3, r2
 81047dc:	d031      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	4a64      	ldr	r2, [pc, #400]	; (8104974 <HAL_DMA_Abort+0x45c>)
 81047e4:	4293      	cmp	r3, r2
 81047e6:	d02c      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	4a62      	ldr	r2, [pc, #392]	; (8104978 <HAL_DMA_Abort+0x460>)
 81047ee:	4293      	cmp	r3, r2
 81047f0:	d027      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	4a61      	ldr	r2, [pc, #388]	; (810497c <HAL_DMA_Abort+0x464>)
 81047f8:	4293      	cmp	r3, r2
 81047fa:	d022      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	4a5f      	ldr	r2, [pc, #380]	; (8104980 <HAL_DMA_Abort+0x468>)
 8104802:	4293      	cmp	r3, r2
 8104804:	d01d      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a5e      	ldr	r2, [pc, #376]	; (8104984 <HAL_DMA_Abort+0x46c>)
 810480c:	4293      	cmp	r3, r2
 810480e:	d018      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a5c      	ldr	r2, [pc, #368]	; (8104988 <HAL_DMA_Abort+0x470>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d013      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a5b      	ldr	r2, [pc, #364]	; (810498c <HAL_DMA_Abort+0x474>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d00e      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a59      	ldr	r2, [pc, #356]	; (8104990 <HAL_DMA_Abort+0x478>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d009      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	4a58      	ldr	r2, [pc, #352]	; (8104994 <HAL_DMA_Abort+0x47c>)
 8104834:	4293      	cmp	r3, r2
 8104836:	d004      	beq.n	8104842 <HAL_DMA_Abort+0x32a>
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	4a56      	ldr	r2, [pc, #344]	; (8104998 <HAL_DMA_Abort+0x480>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d108      	bne.n	8104854 <HAL_DMA_Abort+0x33c>
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	681a      	ldr	r2, [r3, #0]
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	681b      	ldr	r3, [r3, #0]
 810484c:	f022 0201 	bic.w	r2, r2, #1
 8104850:	601a      	str	r2, [r3, #0]
 8104852:	e007      	b.n	8104864 <HAL_DMA_Abort+0x34c>
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	681a      	ldr	r2, [r3, #0]
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	681b      	ldr	r3, [r3, #0]
 810485e:	f022 0201 	bic.w	r2, r2, #1
 8104862:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104864:	e013      	b.n	810488e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104866:	f7fe fec3 	bl	81035f0 <HAL_GetTick>
 810486a:	4602      	mov	r2, r0
 810486c:	693b      	ldr	r3, [r7, #16]
 810486e:	1ad3      	subs	r3, r2, r3
 8104870:	2b05      	cmp	r3, #5
 8104872:	d90c      	bls.n	810488e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	2220      	movs	r2, #32
 8104878:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	2200      	movs	r2, #0
 810487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	2203      	movs	r2, #3
 8104886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 810488a:	2301      	movs	r3, #1
 810488c:	e12d      	b.n	8104aea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810488e:	697b      	ldr	r3, [r7, #20]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	f003 0301 	and.w	r3, r3, #1
 8104896:	2b00      	cmp	r3, #0
 8104898:	d1e5      	bne.n	8104866 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	4a2f      	ldr	r2, [pc, #188]	; (810495c <HAL_DMA_Abort+0x444>)
 81048a0:	4293      	cmp	r3, r2
 81048a2:	d04a      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	4a2d      	ldr	r2, [pc, #180]	; (8104960 <HAL_DMA_Abort+0x448>)
 81048aa:	4293      	cmp	r3, r2
 81048ac:	d045      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	4a2c      	ldr	r2, [pc, #176]	; (8104964 <HAL_DMA_Abort+0x44c>)
 81048b4:	4293      	cmp	r3, r2
 81048b6:	d040      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	4a2a      	ldr	r2, [pc, #168]	; (8104968 <HAL_DMA_Abort+0x450>)
 81048be:	4293      	cmp	r3, r2
 81048c0:	d03b      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	4a29      	ldr	r2, [pc, #164]	; (810496c <HAL_DMA_Abort+0x454>)
 81048c8:	4293      	cmp	r3, r2
 81048ca:	d036      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	4a27      	ldr	r2, [pc, #156]	; (8104970 <HAL_DMA_Abort+0x458>)
 81048d2:	4293      	cmp	r3, r2
 81048d4:	d031      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	4a26      	ldr	r2, [pc, #152]	; (8104974 <HAL_DMA_Abort+0x45c>)
 81048dc:	4293      	cmp	r3, r2
 81048de:	d02c      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	4a24      	ldr	r2, [pc, #144]	; (8104978 <HAL_DMA_Abort+0x460>)
 81048e6:	4293      	cmp	r3, r2
 81048e8:	d027      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	681b      	ldr	r3, [r3, #0]
 81048ee:	4a23      	ldr	r2, [pc, #140]	; (810497c <HAL_DMA_Abort+0x464>)
 81048f0:	4293      	cmp	r3, r2
 81048f2:	d022      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	681b      	ldr	r3, [r3, #0]
 81048f8:	4a21      	ldr	r2, [pc, #132]	; (8104980 <HAL_DMA_Abort+0x468>)
 81048fa:	4293      	cmp	r3, r2
 81048fc:	d01d      	beq.n	810493a <HAL_DMA_Abort+0x422>
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	4a20      	ldr	r2, [pc, #128]	; (8104984 <HAL_DMA_Abort+0x46c>)
 8104904:	4293      	cmp	r3, r2
 8104906:	d018      	beq.n	810493a <HAL_DMA_Abort+0x422>
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	4a1e      	ldr	r2, [pc, #120]	; (8104988 <HAL_DMA_Abort+0x470>)
 810490e:	4293      	cmp	r3, r2
 8104910:	d013      	beq.n	810493a <HAL_DMA_Abort+0x422>
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	4a1d      	ldr	r2, [pc, #116]	; (810498c <HAL_DMA_Abort+0x474>)
 8104918:	4293      	cmp	r3, r2
 810491a:	d00e      	beq.n	810493a <HAL_DMA_Abort+0x422>
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	4a1b      	ldr	r2, [pc, #108]	; (8104990 <HAL_DMA_Abort+0x478>)
 8104922:	4293      	cmp	r3, r2
 8104924:	d009      	beq.n	810493a <HAL_DMA_Abort+0x422>
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	4a1a      	ldr	r2, [pc, #104]	; (8104994 <HAL_DMA_Abort+0x47c>)
 810492c:	4293      	cmp	r3, r2
 810492e:	d004      	beq.n	810493a <HAL_DMA_Abort+0x422>
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	4a18      	ldr	r2, [pc, #96]	; (8104998 <HAL_DMA_Abort+0x480>)
 8104936:	4293      	cmp	r3, r2
 8104938:	d101      	bne.n	810493e <HAL_DMA_Abort+0x426>
 810493a:	2301      	movs	r3, #1
 810493c:	e000      	b.n	8104940 <HAL_DMA_Abort+0x428>
 810493e:	2300      	movs	r3, #0
 8104940:	2b00      	cmp	r3, #0
 8104942:	d02b      	beq.n	810499c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104948:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810494e:	f003 031f 	and.w	r3, r3, #31
 8104952:	223f      	movs	r2, #63	; 0x3f
 8104954:	409a      	lsls	r2, r3
 8104956:	68bb      	ldr	r3, [r7, #8]
 8104958:	609a      	str	r2, [r3, #8]
 810495a:	e02a      	b.n	81049b2 <HAL_DMA_Abort+0x49a>
 810495c:	40020010 	.word	0x40020010
 8104960:	40020028 	.word	0x40020028
 8104964:	40020040 	.word	0x40020040
 8104968:	40020058 	.word	0x40020058
 810496c:	40020070 	.word	0x40020070
 8104970:	40020088 	.word	0x40020088
 8104974:	400200a0 	.word	0x400200a0
 8104978:	400200b8 	.word	0x400200b8
 810497c:	40020410 	.word	0x40020410
 8104980:	40020428 	.word	0x40020428
 8104984:	40020440 	.word	0x40020440
 8104988:	40020458 	.word	0x40020458
 810498c:	40020470 	.word	0x40020470
 8104990:	40020488 	.word	0x40020488
 8104994:	400204a0 	.word	0x400204a0
 8104998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81049a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049a6:	f003 031f 	and.w	r3, r3, #31
 81049aa:	2201      	movs	r2, #1
 81049ac:	409a      	lsls	r2, r3
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	681b      	ldr	r3, [r3, #0]
 81049b6:	4a4f      	ldr	r2, [pc, #316]	; (8104af4 <HAL_DMA_Abort+0x5dc>)
 81049b8:	4293      	cmp	r3, r2
 81049ba:	d072      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	4a4d      	ldr	r2, [pc, #308]	; (8104af8 <HAL_DMA_Abort+0x5e0>)
 81049c2:	4293      	cmp	r3, r2
 81049c4:	d06d      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	4a4c      	ldr	r2, [pc, #304]	; (8104afc <HAL_DMA_Abort+0x5e4>)
 81049cc:	4293      	cmp	r3, r2
 81049ce:	d068      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	4a4a      	ldr	r2, [pc, #296]	; (8104b00 <HAL_DMA_Abort+0x5e8>)
 81049d6:	4293      	cmp	r3, r2
 81049d8:	d063      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	681b      	ldr	r3, [r3, #0]
 81049de:	4a49      	ldr	r2, [pc, #292]	; (8104b04 <HAL_DMA_Abort+0x5ec>)
 81049e0:	4293      	cmp	r3, r2
 81049e2:	d05e      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	681b      	ldr	r3, [r3, #0]
 81049e8:	4a47      	ldr	r2, [pc, #284]	; (8104b08 <HAL_DMA_Abort+0x5f0>)
 81049ea:	4293      	cmp	r3, r2
 81049ec:	d059      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	681b      	ldr	r3, [r3, #0]
 81049f2:	4a46      	ldr	r2, [pc, #280]	; (8104b0c <HAL_DMA_Abort+0x5f4>)
 81049f4:	4293      	cmp	r3, r2
 81049f6:	d054      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	681b      	ldr	r3, [r3, #0]
 81049fc:	4a44      	ldr	r2, [pc, #272]	; (8104b10 <HAL_DMA_Abort+0x5f8>)
 81049fe:	4293      	cmp	r3, r2
 8104a00:	d04f      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	4a43      	ldr	r2, [pc, #268]	; (8104b14 <HAL_DMA_Abort+0x5fc>)
 8104a08:	4293      	cmp	r3, r2
 8104a0a:	d04a      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	681b      	ldr	r3, [r3, #0]
 8104a10:	4a41      	ldr	r2, [pc, #260]	; (8104b18 <HAL_DMA_Abort+0x600>)
 8104a12:	4293      	cmp	r3, r2
 8104a14:	d045      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	681b      	ldr	r3, [r3, #0]
 8104a1a:	4a40      	ldr	r2, [pc, #256]	; (8104b1c <HAL_DMA_Abort+0x604>)
 8104a1c:	4293      	cmp	r3, r2
 8104a1e:	d040      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	4a3e      	ldr	r2, [pc, #248]	; (8104b20 <HAL_DMA_Abort+0x608>)
 8104a26:	4293      	cmp	r3, r2
 8104a28:	d03b      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	4a3d      	ldr	r2, [pc, #244]	; (8104b24 <HAL_DMA_Abort+0x60c>)
 8104a30:	4293      	cmp	r3, r2
 8104a32:	d036      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	681b      	ldr	r3, [r3, #0]
 8104a38:	4a3b      	ldr	r2, [pc, #236]	; (8104b28 <HAL_DMA_Abort+0x610>)
 8104a3a:	4293      	cmp	r3, r2
 8104a3c:	d031      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	4a3a      	ldr	r2, [pc, #232]	; (8104b2c <HAL_DMA_Abort+0x614>)
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d02c      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	4a38      	ldr	r2, [pc, #224]	; (8104b30 <HAL_DMA_Abort+0x618>)
 8104a4e:	4293      	cmp	r3, r2
 8104a50:	d027      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	4a37      	ldr	r2, [pc, #220]	; (8104b34 <HAL_DMA_Abort+0x61c>)
 8104a58:	4293      	cmp	r3, r2
 8104a5a:	d022      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a5c:	687b      	ldr	r3, [r7, #4]
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	4a35      	ldr	r2, [pc, #212]	; (8104b38 <HAL_DMA_Abort+0x620>)
 8104a62:	4293      	cmp	r3, r2
 8104a64:	d01d      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	4a34      	ldr	r2, [pc, #208]	; (8104b3c <HAL_DMA_Abort+0x624>)
 8104a6c:	4293      	cmp	r3, r2
 8104a6e:	d018      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	4a32      	ldr	r2, [pc, #200]	; (8104b40 <HAL_DMA_Abort+0x628>)
 8104a76:	4293      	cmp	r3, r2
 8104a78:	d013      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	4a31      	ldr	r2, [pc, #196]	; (8104b44 <HAL_DMA_Abort+0x62c>)
 8104a80:	4293      	cmp	r3, r2
 8104a82:	d00e      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a84:	687b      	ldr	r3, [r7, #4]
 8104a86:	681b      	ldr	r3, [r3, #0]
 8104a88:	4a2f      	ldr	r2, [pc, #188]	; (8104b48 <HAL_DMA_Abort+0x630>)
 8104a8a:	4293      	cmp	r3, r2
 8104a8c:	d009      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	681b      	ldr	r3, [r3, #0]
 8104a92:	4a2e      	ldr	r2, [pc, #184]	; (8104b4c <HAL_DMA_Abort+0x634>)
 8104a94:	4293      	cmp	r3, r2
 8104a96:	d004      	beq.n	8104aa2 <HAL_DMA_Abort+0x58a>
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	4a2c      	ldr	r2, [pc, #176]	; (8104b50 <HAL_DMA_Abort+0x638>)
 8104a9e:	4293      	cmp	r3, r2
 8104aa0:	d101      	bne.n	8104aa6 <HAL_DMA_Abort+0x58e>
 8104aa2:	2301      	movs	r3, #1
 8104aa4:	e000      	b.n	8104aa8 <HAL_DMA_Abort+0x590>
 8104aa6:	2300      	movs	r3, #0
 8104aa8:	2b00      	cmp	r3, #0
 8104aaa:	d015      	beq.n	8104ad8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ab0:	687a      	ldr	r2, [r7, #4]
 8104ab2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104ab4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104aba:	2b00      	cmp	r3, #0
 8104abc:	d00c      	beq.n	8104ad8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104ac2:	681a      	ldr	r2, [r3, #0]
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104acc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104ad2:	687a      	ldr	r2, [r7, #4]
 8104ad4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104ad6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	2200      	movs	r2, #0
 8104adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	2201      	movs	r2, #1
 8104ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8104ae8:	2300      	movs	r3, #0
}
 8104aea:	4618      	mov	r0, r3
 8104aec:	3718      	adds	r7, #24
 8104aee:	46bd      	mov	sp, r7
 8104af0:	bd80      	pop	{r7, pc}
 8104af2:	bf00      	nop
 8104af4:	40020010 	.word	0x40020010
 8104af8:	40020028 	.word	0x40020028
 8104afc:	40020040 	.word	0x40020040
 8104b00:	40020058 	.word	0x40020058
 8104b04:	40020070 	.word	0x40020070
 8104b08:	40020088 	.word	0x40020088
 8104b0c:	400200a0 	.word	0x400200a0
 8104b10:	400200b8 	.word	0x400200b8
 8104b14:	40020410 	.word	0x40020410
 8104b18:	40020428 	.word	0x40020428
 8104b1c:	40020440 	.word	0x40020440
 8104b20:	40020458 	.word	0x40020458
 8104b24:	40020470 	.word	0x40020470
 8104b28:	40020488 	.word	0x40020488
 8104b2c:	400204a0 	.word	0x400204a0
 8104b30:	400204b8 	.word	0x400204b8
 8104b34:	58025408 	.word	0x58025408
 8104b38:	5802541c 	.word	0x5802541c
 8104b3c:	58025430 	.word	0x58025430
 8104b40:	58025444 	.word	0x58025444
 8104b44:	58025458 	.word	0x58025458
 8104b48:	5802546c 	.word	0x5802546c
 8104b4c:	58025480 	.word	0x58025480
 8104b50:	58025494 	.word	0x58025494

08104b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8104b54:	b580      	push	{r7, lr}
 8104b56:	b084      	sub	sp, #16
 8104b58:	af00      	add	r7, sp, #0
 8104b5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	2b00      	cmp	r3, #0
 8104b60:	d101      	bne.n	8104b66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8104b62:	2301      	movs	r3, #1
 8104b64:	e205      	b.n	8104f72 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104b6c:	b2db      	uxtb	r3, r3
 8104b6e:	2b02      	cmp	r3, #2
 8104b70:	d004      	beq.n	8104b7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	2280      	movs	r2, #128	; 0x80
 8104b76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8104b78:	2301      	movs	r3, #1
 8104b7a:	e1fa      	b.n	8104f72 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	4a8c      	ldr	r2, [pc, #560]	; (8104db4 <HAL_DMA_Abort_IT+0x260>)
 8104b82:	4293      	cmp	r3, r2
 8104b84:	d04a      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	4a8b      	ldr	r2, [pc, #556]	; (8104db8 <HAL_DMA_Abort_IT+0x264>)
 8104b8c:	4293      	cmp	r3, r2
 8104b8e:	d045      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	4a89      	ldr	r2, [pc, #548]	; (8104dbc <HAL_DMA_Abort_IT+0x268>)
 8104b96:	4293      	cmp	r3, r2
 8104b98:	d040      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	681b      	ldr	r3, [r3, #0]
 8104b9e:	4a88      	ldr	r2, [pc, #544]	; (8104dc0 <HAL_DMA_Abort_IT+0x26c>)
 8104ba0:	4293      	cmp	r3, r2
 8104ba2:	d03b      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	4a86      	ldr	r2, [pc, #536]	; (8104dc4 <HAL_DMA_Abort_IT+0x270>)
 8104baa:	4293      	cmp	r3, r2
 8104bac:	d036      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	4a85      	ldr	r2, [pc, #532]	; (8104dc8 <HAL_DMA_Abort_IT+0x274>)
 8104bb4:	4293      	cmp	r3, r2
 8104bb6:	d031      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	4a83      	ldr	r2, [pc, #524]	; (8104dcc <HAL_DMA_Abort_IT+0x278>)
 8104bbe:	4293      	cmp	r3, r2
 8104bc0:	d02c      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	4a82      	ldr	r2, [pc, #520]	; (8104dd0 <HAL_DMA_Abort_IT+0x27c>)
 8104bc8:	4293      	cmp	r3, r2
 8104bca:	d027      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	4a80      	ldr	r2, [pc, #512]	; (8104dd4 <HAL_DMA_Abort_IT+0x280>)
 8104bd2:	4293      	cmp	r3, r2
 8104bd4:	d022      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	4a7f      	ldr	r2, [pc, #508]	; (8104dd8 <HAL_DMA_Abort_IT+0x284>)
 8104bdc:	4293      	cmp	r3, r2
 8104bde:	d01d      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	4a7d      	ldr	r2, [pc, #500]	; (8104ddc <HAL_DMA_Abort_IT+0x288>)
 8104be6:	4293      	cmp	r3, r2
 8104be8:	d018      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	4a7c      	ldr	r2, [pc, #496]	; (8104de0 <HAL_DMA_Abort_IT+0x28c>)
 8104bf0:	4293      	cmp	r3, r2
 8104bf2:	d013      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	4a7a      	ldr	r2, [pc, #488]	; (8104de4 <HAL_DMA_Abort_IT+0x290>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d00e      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	4a79      	ldr	r2, [pc, #484]	; (8104de8 <HAL_DMA_Abort_IT+0x294>)
 8104c04:	4293      	cmp	r3, r2
 8104c06:	d009      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	4a77      	ldr	r2, [pc, #476]	; (8104dec <HAL_DMA_Abort_IT+0x298>)
 8104c0e:	4293      	cmp	r3, r2
 8104c10:	d004      	beq.n	8104c1c <HAL_DMA_Abort_IT+0xc8>
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4a76      	ldr	r2, [pc, #472]	; (8104df0 <HAL_DMA_Abort_IT+0x29c>)
 8104c18:	4293      	cmp	r3, r2
 8104c1a:	d101      	bne.n	8104c20 <HAL_DMA_Abort_IT+0xcc>
 8104c1c:	2301      	movs	r3, #1
 8104c1e:	e000      	b.n	8104c22 <HAL_DMA_Abort_IT+0xce>
 8104c20:	2300      	movs	r3, #0
 8104c22:	2b00      	cmp	r3, #0
 8104c24:	d065      	beq.n	8104cf2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	2204      	movs	r2, #4
 8104c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	4a60      	ldr	r2, [pc, #384]	; (8104db4 <HAL_DMA_Abort_IT+0x260>)
 8104c34:	4293      	cmp	r3, r2
 8104c36:	d04a      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	4a5e      	ldr	r2, [pc, #376]	; (8104db8 <HAL_DMA_Abort_IT+0x264>)
 8104c3e:	4293      	cmp	r3, r2
 8104c40:	d045      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	4a5d      	ldr	r2, [pc, #372]	; (8104dbc <HAL_DMA_Abort_IT+0x268>)
 8104c48:	4293      	cmp	r3, r2
 8104c4a:	d040      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	681b      	ldr	r3, [r3, #0]
 8104c50:	4a5b      	ldr	r2, [pc, #364]	; (8104dc0 <HAL_DMA_Abort_IT+0x26c>)
 8104c52:	4293      	cmp	r3, r2
 8104c54:	d03b      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	4a5a      	ldr	r2, [pc, #360]	; (8104dc4 <HAL_DMA_Abort_IT+0x270>)
 8104c5c:	4293      	cmp	r3, r2
 8104c5e:	d036      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4a58      	ldr	r2, [pc, #352]	; (8104dc8 <HAL_DMA_Abort_IT+0x274>)
 8104c66:	4293      	cmp	r3, r2
 8104c68:	d031      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	4a57      	ldr	r2, [pc, #348]	; (8104dcc <HAL_DMA_Abort_IT+0x278>)
 8104c70:	4293      	cmp	r3, r2
 8104c72:	d02c      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	4a55      	ldr	r2, [pc, #340]	; (8104dd0 <HAL_DMA_Abort_IT+0x27c>)
 8104c7a:	4293      	cmp	r3, r2
 8104c7c:	d027      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	4a54      	ldr	r2, [pc, #336]	; (8104dd4 <HAL_DMA_Abort_IT+0x280>)
 8104c84:	4293      	cmp	r3, r2
 8104c86:	d022      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	4a52      	ldr	r2, [pc, #328]	; (8104dd8 <HAL_DMA_Abort_IT+0x284>)
 8104c8e:	4293      	cmp	r3, r2
 8104c90:	d01d      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	4a51      	ldr	r2, [pc, #324]	; (8104ddc <HAL_DMA_Abort_IT+0x288>)
 8104c98:	4293      	cmp	r3, r2
 8104c9a:	d018      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	681b      	ldr	r3, [r3, #0]
 8104ca0:	4a4f      	ldr	r2, [pc, #316]	; (8104de0 <HAL_DMA_Abort_IT+0x28c>)
 8104ca2:	4293      	cmp	r3, r2
 8104ca4:	d013      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	4a4e      	ldr	r2, [pc, #312]	; (8104de4 <HAL_DMA_Abort_IT+0x290>)
 8104cac:	4293      	cmp	r3, r2
 8104cae:	d00e      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	4a4c      	ldr	r2, [pc, #304]	; (8104de8 <HAL_DMA_Abort_IT+0x294>)
 8104cb6:	4293      	cmp	r3, r2
 8104cb8:	d009      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	4a4b      	ldr	r2, [pc, #300]	; (8104dec <HAL_DMA_Abort_IT+0x298>)
 8104cc0:	4293      	cmp	r3, r2
 8104cc2:	d004      	beq.n	8104cce <HAL_DMA_Abort_IT+0x17a>
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	4a49      	ldr	r2, [pc, #292]	; (8104df0 <HAL_DMA_Abort_IT+0x29c>)
 8104cca:	4293      	cmp	r3, r2
 8104ccc:	d108      	bne.n	8104ce0 <HAL_DMA_Abort_IT+0x18c>
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	681a      	ldr	r2, [r3, #0]
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	f022 0201 	bic.w	r2, r2, #1
 8104cdc:	601a      	str	r2, [r3, #0]
 8104cde:	e147      	b.n	8104f70 <HAL_DMA_Abort_IT+0x41c>
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	681a      	ldr	r2, [r3, #0]
 8104ce6:	687b      	ldr	r3, [r7, #4]
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	f022 0201 	bic.w	r2, r2, #1
 8104cee:	601a      	str	r2, [r3, #0]
 8104cf0:	e13e      	b.n	8104f70 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	681a      	ldr	r2, [r3, #0]
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	f022 020e 	bic.w	r2, r2, #14
 8104d00:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	4a2b      	ldr	r2, [pc, #172]	; (8104db4 <HAL_DMA_Abort_IT+0x260>)
 8104d08:	4293      	cmp	r3, r2
 8104d0a:	d04a      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	681b      	ldr	r3, [r3, #0]
 8104d10:	4a29      	ldr	r2, [pc, #164]	; (8104db8 <HAL_DMA_Abort_IT+0x264>)
 8104d12:	4293      	cmp	r3, r2
 8104d14:	d045      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	4a28      	ldr	r2, [pc, #160]	; (8104dbc <HAL_DMA_Abort_IT+0x268>)
 8104d1c:	4293      	cmp	r3, r2
 8104d1e:	d040      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	4a26      	ldr	r2, [pc, #152]	; (8104dc0 <HAL_DMA_Abort_IT+0x26c>)
 8104d26:	4293      	cmp	r3, r2
 8104d28:	d03b      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	681b      	ldr	r3, [r3, #0]
 8104d2e:	4a25      	ldr	r2, [pc, #148]	; (8104dc4 <HAL_DMA_Abort_IT+0x270>)
 8104d30:	4293      	cmp	r3, r2
 8104d32:	d036      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	4a23      	ldr	r2, [pc, #140]	; (8104dc8 <HAL_DMA_Abort_IT+0x274>)
 8104d3a:	4293      	cmp	r3, r2
 8104d3c:	d031      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	4a22      	ldr	r2, [pc, #136]	; (8104dcc <HAL_DMA_Abort_IT+0x278>)
 8104d44:	4293      	cmp	r3, r2
 8104d46:	d02c      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	4a20      	ldr	r2, [pc, #128]	; (8104dd0 <HAL_DMA_Abort_IT+0x27c>)
 8104d4e:	4293      	cmp	r3, r2
 8104d50:	d027      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	4a1f      	ldr	r2, [pc, #124]	; (8104dd4 <HAL_DMA_Abort_IT+0x280>)
 8104d58:	4293      	cmp	r3, r2
 8104d5a:	d022      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	4a1d      	ldr	r2, [pc, #116]	; (8104dd8 <HAL_DMA_Abort_IT+0x284>)
 8104d62:	4293      	cmp	r3, r2
 8104d64:	d01d      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	681b      	ldr	r3, [r3, #0]
 8104d6a:	4a1c      	ldr	r2, [pc, #112]	; (8104ddc <HAL_DMA_Abort_IT+0x288>)
 8104d6c:	4293      	cmp	r3, r2
 8104d6e:	d018      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	4a1a      	ldr	r2, [pc, #104]	; (8104de0 <HAL_DMA_Abort_IT+0x28c>)
 8104d76:	4293      	cmp	r3, r2
 8104d78:	d013      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	4a19      	ldr	r2, [pc, #100]	; (8104de4 <HAL_DMA_Abort_IT+0x290>)
 8104d80:	4293      	cmp	r3, r2
 8104d82:	d00e      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	4a17      	ldr	r2, [pc, #92]	; (8104de8 <HAL_DMA_Abort_IT+0x294>)
 8104d8a:	4293      	cmp	r3, r2
 8104d8c:	d009      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	4a16      	ldr	r2, [pc, #88]	; (8104dec <HAL_DMA_Abort_IT+0x298>)
 8104d94:	4293      	cmp	r3, r2
 8104d96:	d004      	beq.n	8104da2 <HAL_DMA_Abort_IT+0x24e>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	4a14      	ldr	r2, [pc, #80]	; (8104df0 <HAL_DMA_Abort_IT+0x29c>)
 8104d9e:	4293      	cmp	r3, r2
 8104da0:	d128      	bne.n	8104df4 <HAL_DMA_Abort_IT+0x2a0>
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	681a      	ldr	r2, [r3, #0]
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	f022 0201 	bic.w	r2, r2, #1
 8104db0:	601a      	str	r2, [r3, #0]
 8104db2:	e027      	b.n	8104e04 <HAL_DMA_Abort_IT+0x2b0>
 8104db4:	40020010 	.word	0x40020010
 8104db8:	40020028 	.word	0x40020028
 8104dbc:	40020040 	.word	0x40020040
 8104dc0:	40020058 	.word	0x40020058
 8104dc4:	40020070 	.word	0x40020070
 8104dc8:	40020088 	.word	0x40020088
 8104dcc:	400200a0 	.word	0x400200a0
 8104dd0:	400200b8 	.word	0x400200b8
 8104dd4:	40020410 	.word	0x40020410
 8104dd8:	40020428 	.word	0x40020428
 8104ddc:	40020440 	.word	0x40020440
 8104de0:	40020458 	.word	0x40020458
 8104de4:	40020470 	.word	0x40020470
 8104de8:	40020488 	.word	0x40020488
 8104dec:	400204a0 	.word	0x400204a0
 8104df0:	400204b8 	.word	0x400204b8
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	681a      	ldr	r2, [r3, #0]
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f022 0201 	bic.w	r2, r2, #1
 8104e02:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	681b      	ldr	r3, [r3, #0]
 8104e08:	4a5c      	ldr	r2, [pc, #368]	; (8104f7c <HAL_DMA_Abort_IT+0x428>)
 8104e0a:	4293      	cmp	r3, r2
 8104e0c:	d072      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e0e:	687b      	ldr	r3, [r7, #4]
 8104e10:	681b      	ldr	r3, [r3, #0]
 8104e12:	4a5b      	ldr	r2, [pc, #364]	; (8104f80 <HAL_DMA_Abort_IT+0x42c>)
 8104e14:	4293      	cmp	r3, r2
 8104e16:	d06d      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	681b      	ldr	r3, [r3, #0]
 8104e1c:	4a59      	ldr	r2, [pc, #356]	; (8104f84 <HAL_DMA_Abort_IT+0x430>)
 8104e1e:	4293      	cmp	r3, r2
 8104e20:	d068      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	681b      	ldr	r3, [r3, #0]
 8104e26:	4a58      	ldr	r2, [pc, #352]	; (8104f88 <HAL_DMA_Abort_IT+0x434>)
 8104e28:	4293      	cmp	r3, r2
 8104e2a:	d063      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	4a56      	ldr	r2, [pc, #344]	; (8104f8c <HAL_DMA_Abort_IT+0x438>)
 8104e32:	4293      	cmp	r3, r2
 8104e34:	d05e      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	4a55      	ldr	r2, [pc, #340]	; (8104f90 <HAL_DMA_Abort_IT+0x43c>)
 8104e3c:	4293      	cmp	r3, r2
 8104e3e:	d059      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	4a53      	ldr	r2, [pc, #332]	; (8104f94 <HAL_DMA_Abort_IT+0x440>)
 8104e46:	4293      	cmp	r3, r2
 8104e48:	d054      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	4a52      	ldr	r2, [pc, #328]	; (8104f98 <HAL_DMA_Abort_IT+0x444>)
 8104e50:	4293      	cmp	r3, r2
 8104e52:	d04f      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	4a50      	ldr	r2, [pc, #320]	; (8104f9c <HAL_DMA_Abort_IT+0x448>)
 8104e5a:	4293      	cmp	r3, r2
 8104e5c:	d04a      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	4a4f      	ldr	r2, [pc, #316]	; (8104fa0 <HAL_DMA_Abort_IT+0x44c>)
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d045      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	4a4d      	ldr	r2, [pc, #308]	; (8104fa4 <HAL_DMA_Abort_IT+0x450>)
 8104e6e:	4293      	cmp	r3, r2
 8104e70:	d040      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	4a4c      	ldr	r2, [pc, #304]	; (8104fa8 <HAL_DMA_Abort_IT+0x454>)
 8104e78:	4293      	cmp	r3, r2
 8104e7a:	d03b      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	4a4a      	ldr	r2, [pc, #296]	; (8104fac <HAL_DMA_Abort_IT+0x458>)
 8104e82:	4293      	cmp	r3, r2
 8104e84:	d036      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	4a49      	ldr	r2, [pc, #292]	; (8104fb0 <HAL_DMA_Abort_IT+0x45c>)
 8104e8c:	4293      	cmp	r3, r2
 8104e8e:	d031      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	4a47      	ldr	r2, [pc, #284]	; (8104fb4 <HAL_DMA_Abort_IT+0x460>)
 8104e96:	4293      	cmp	r3, r2
 8104e98:	d02c      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	4a46      	ldr	r2, [pc, #280]	; (8104fb8 <HAL_DMA_Abort_IT+0x464>)
 8104ea0:	4293      	cmp	r3, r2
 8104ea2:	d027      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	4a44      	ldr	r2, [pc, #272]	; (8104fbc <HAL_DMA_Abort_IT+0x468>)
 8104eaa:	4293      	cmp	r3, r2
 8104eac:	d022      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	4a43      	ldr	r2, [pc, #268]	; (8104fc0 <HAL_DMA_Abort_IT+0x46c>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d01d      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a41      	ldr	r2, [pc, #260]	; (8104fc4 <HAL_DMA_Abort_IT+0x470>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d018      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	4a40      	ldr	r2, [pc, #256]	; (8104fc8 <HAL_DMA_Abort_IT+0x474>)
 8104ec8:	4293      	cmp	r3, r2
 8104eca:	d013      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	4a3e      	ldr	r2, [pc, #248]	; (8104fcc <HAL_DMA_Abort_IT+0x478>)
 8104ed2:	4293      	cmp	r3, r2
 8104ed4:	d00e      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	4a3d      	ldr	r2, [pc, #244]	; (8104fd0 <HAL_DMA_Abort_IT+0x47c>)
 8104edc:	4293      	cmp	r3, r2
 8104ede:	d009      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	4a3b      	ldr	r2, [pc, #236]	; (8104fd4 <HAL_DMA_Abort_IT+0x480>)
 8104ee6:	4293      	cmp	r3, r2
 8104ee8:	d004      	beq.n	8104ef4 <HAL_DMA_Abort_IT+0x3a0>
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	681b      	ldr	r3, [r3, #0]
 8104eee:	4a3a      	ldr	r2, [pc, #232]	; (8104fd8 <HAL_DMA_Abort_IT+0x484>)
 8104ef0:	4293      	cmp	r3, r2
 8104ef2:	d101      	bne.n	8104ef8 <HAL_DMA_Abort_IT+0x3a4>
 8104ef4:	2301      	movs	r3, #1
 8104ef6:	e000      	b.n	8104efa <HAL_DMA_Abort_IT+0x3a6>
 8104ef8:	2300      	movs	r3, #0
 8104efa:	2b00      	cmp	r3, #0
 8104efc:	d028      	beq.n	8104f50 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104f02:	681a      	ldr	r2, [r3, #0]
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104f0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f18:	f003 031f 	and.w	r3, r3, #31
 8104f1c:	2201      	movs	r2, #1
 8104f1e:	409a      	lsls	r2, r3
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104f28:	687a      	ldr	r2, [r7, #4]
 8104f2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104f2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104f32:	2b00      	cmp	r3, #0
 8104f34:	d00c      	beq.n	8104f50 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104f3a:	681a      	ldr	r2, [r3, #0]
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104f44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f4a:	687a      	ldr	r2, [r7, #4]
 8104f4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104f4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	2200      	movs	r2, #0
 8104f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	2201      	movs	r2, #1
 8104f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104f60:	687b      	ldr	r3, [r7, #4]
 8104f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f64:	2b00      	cmp	r3, #0
 8104f66:	d003      	beq.n	8104f70 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f6c:	6878      	ldr	r0, [r7, #4]
 8104f6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8104f70:	2300      	movs	r3, #0
}
 8104f72:	4618      	mov	r0, r3
 8104f74:	3710      	adds	r7, #16
 8104f76:	46bd      	mov	sp, r7
 8104f78:	bd80      	pop	{r7, pc}
 8104f7a:	bf00      	nop
 8104f7c:	40020010 	.word	0x40020010
 8104f80:	40020028 	.word	0x40020028
 8104f84:	40020040 	.word	0x40020040
 8104f88:	40020058 	.word	0x40020058
 8104f8c:	40020070 	.word	0x40020070
 8104f90:	40020088 	.word	0x40020088
 8104f94:	400200a0 	.word	0x400200a0
 8104f98:	400200b8 	.word	0x400200b8
 8104f9c:	40020410 	.word	0x40020410
 8104fa0:	40020428 	.word	0x40020428
 8104fa4:	40020440 	.word	0x40020440
 8104fa8:	40020458 	.word	0x40020458
 8104fac:	40020470 	.word	0x40020470
 8104fb0:	40020488 	.word	0x40020488
 8104fb4:	400204a0 	.word	0x400204a0
 8104fb8:	400204b8 	.word	0x400204b8
 8104fbc:	58025408 	.word	0x58025408
 8104fc0:	5802541c 	.word	0x5802541c
 8104fc4:	58025430 	.word	0x58025430
 8104fc8:	58025444 	.word	0x58025444
 8104fcc:	58025458 	.word	0x58025458
 8104fd0:	5802546c 	.word	0x5802546c
 8104fd4:	58025480 	.word	0x58025480
 8104fd8:	58025494 	.word	0x58025494

08104fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104fdc:	b580      	push	{r7, lr}
 8104fde:	b08a      	sub	sp, #40	; 0x28
 8104fe0:	af00      	add	r7, sp, #0
 8104fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8104fe4:	2300      	movs	r3, #0
 8104fe6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104fe8:	4b67      	ldr	r3, [pc, #412]	; (8105188 <HAL_DMA_IRQHandler+0x1ac>)
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	4a67      	ldr	r2, [pc, #412]	; (810518c <HAL_DMA_IRQHandler+0x1b0>)
 8104fee:	fba2 2303 	umull	r2, r3, r2, r3
 8104ff2:	0a9b      	lsrs	r3, r3, #10
 8104ff4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ffa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105000:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8105002:	6a3b      	ldr	r3, [r7, #32]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105008:	69fb      	ldr	r3, [r7, #28]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	681b      	ldr	r3, [r3, #0]
 8105012:	4a5f      	ldr	r2, [pc, #380]	; (8105190 <HAL_DMA_IRQHandler+0x1b4>)
 8105014:	4293      	cmp	r3, r2
 8105016:	d04a      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	4a5d      	ldr	r2, [pc, #372]	; (8105194 <HAL_DMA_IRQHandler+0x1b8>)
 810501e:	4293      	cmp	r3, r2
 8105020:	d045      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	681b      	ldr	r3, [r3, #0]
 8105026:	4a5c      	ldr	r2, [pc, #368]	; (8105198 <HAL_DMA_IRQHandler+0x1bc>)
 8105028:	4293      	cmp	r3, r2
 810502a:	d040      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	4a5a      	ldr	r2, [pc, #360]	; (810519c <HAL_DMA_IRQHandler+0x1c0>)
 8105032:	4293      	cmp	r3, r2
 8105034:	d03b      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	681b      	ldr	r3, [r3, #0]
 810503a:	4a59      	ldr	r2, [pc, #356]	; (81051a0 <HAL_DMA_IRQHandler+0x1c4>)
 810503c:	4293      	cmp	r3, r2
 810503e:	d036      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	4a57      	ldr	r2, [pc, #348]	; (81051a4 <HAL_DMA_IRQHandler+0x1c8>)
 8105046:	4293      	cmp	r3, r2
 8105048:	d031      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	4a56      	ldr	r2, [pc, #344]	; (81051a8 <HAL_DMA_IRQHandler+0x1cc>)
 8105050:	4293      	cmp	r3, r2
 8105052:	d02c      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	4a54      	ldr	r2, [pc, #336]	; (81051ac <HAL_DMA_IRQHandler+0x1d0>)
 810505a:	4293      	cmp	r3, r2
 810505c:	d027      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 810505e:	687b      	ldr	r3, [r7, #4]
 8105060:	681b      	ldr	r3, [r3, #0]
 8105062:	4a53      	ldr	r2, [pc, #332]	; (81051b0 <HAL_DMA_IRQHandler+0x1d4>)
 8105064:	4293      	cmp	r3, r2
 8105066:	d022      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	4a51      	ldr	r2, [pc, #324]	; (81051b4 <HAL_DMA_IRQHandler+0x1d8>)
 810506e:	4293      	cmp	r3, r2
 8105070:	d01d      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	4a50      	ldr	r2, [pc, #320]	; (81051b8 <HAL_DMA_IRQHandler+0x1dc>)
 8105078:	4293      	cmp	r3, r2
 810507a:	d018      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	4a4e      	ldr	r2, [pc, #312]	; (81051bc <HAL_DMA_IRQHandler+0x1e0>)
 8105082:	4293      	cmp	r3, r2
 8105084:	d013      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	681b      	ldr	r3, [r3, #0]
 810508a:	4a4d      	ldr	r2, [pc, #308]	; (81051c0 <HAL_DMA_IRQHandler+0x1e4>)
 810508c:	4293      	cmp	r3, r2
 810508e:	d00e      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	4a4b      	ldr	r2, [pc, #300]	; (81051c4 <HAL_DMA_IRQHandler+0x1e8>)
 8105096:	4293      	cmp	r3, r2
 8105098:	d009      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	681b      	ldr	r3, [r3, #0]
 810509e:	4a4a      	ldr	r2, [pc, #296]	; (81051c8 <HAL_DMA_IRQHandler+0x1ec>)
 81050a0:	4293      	cmp	r3, r2
 81050a2:	d004      	beq.n	81050ae <HAL_DMA_IRQHandler+0xd2>
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	4a48      	ldr	r2, [pc, #288]	; (81051cc <HAL_DMA_IRQHandler+0x1f0>)
 81050aa:	4293      	cmp	r3, r2
 81050ac:	d101      	bne.n	81050b2 <HAL_DMA_IRQHandler+0xd6>
 81050ae:	2301      	movs	r3, #1
 81050b0:	e000      	b.n	81050b4 <HAL_DMA_IRQHandler+0xd8>
 81050b2:	2300      	movs	r3, #0
 81050b4:	2b00      	cmp	r3, #0
 81050b6:	f000 842b 	beq.w	8105910 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050be:	f003 031f 	and.w	r3, r3, #31
 81050c2:	2208      	movs	r2, #8
 81050c4:	409a      	lsls	r2, r3
 81050c6:	69bb      	ldr	r3, [r7, #24]
 81050c8:	4013      	ands	r3, r2
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	f000 80a2 	beq.w	8105214 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	4a2e      	ldr	r2, [pc, #184]	; (8105190 <HAL_DMA_IRQHandler+0x1b4>)
 81050d6:	4293      	cmp	r3, r2
 81050d8:	d04a      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	4a2d      	ldr	r2, [pc, #180]	; (8105194 <HAL_DMA_IRQHandler+0x1b8>)
 81050e0:	4293      	cmp	r3, r2
 81050e2:	d045      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	4a2b      	ldr	r2, [pc, #172]	; (8105198 <HAL_DMA_IRQHandler+0x1bc>)
 81050ea:	4293      	cmp	r3, r2
 81050ec:	d040      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	4a2a      	ldr	r2, [pc, #168]	; (810519c <HAL_DMA_IRQHandler+0x1c0>)
 81050f4:	4293      	cmp	r3, r2
 81050f6:	d03b      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	4a28      	ldr	r2, [pc, #160]	; (81051a0 <HAL_DMA_IRQHandler+0x1c4>)
 81050fe:	4293      	cmp	r3, r2
 8105100:	d036      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	4a27      	ldr	r2, [pc, #156]	; (81051a4 <HAL_DMA_IRQHandler+0x1c8>)
 8105108:	4293      	cmp	r3, r2
 810510a:	d031      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	681b      	ldr	r3, [r3, #0]
 8105110:	4a25      	ldr	r2, [pc, #148]	; (81051a8 <HAL_DMA_IRQHandler+0x1cc>)
 8105112:	4293      	cmp	r3, r2
 8105114:	d02c      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	4a24      	ldr	r2, [pc, #144]	; (81051ac <HAL_DMA_IRQHandler+0x1d0>)
 810511c:	4293      	cmp	r3, r2
 810511e:	d027      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	4a22      	ldr	r2, [pc, #136]	; (81051b0 <HAL_DMA_IRQHandler+0x1d4>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d022      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	4a21      	ldr	r2, [pc, #132]	; (81051b4 <HAL_DMA_IRQHandler+0x1d8>)
 8105130:	4293      	cmp	r3, r2
 8105132:	d01d      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	4a1f      	ldr	r2, [pc, #124]	; (81051b8 <HAL_DMA_IRQHandler+0x1dc>)
 810513a:	4293      	cmp	r3, r2
 810513c:	d018      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	4a1e      	ldr	r2, [pc, #120]	; (81051bc <HAL_DMA_IRQHandler+0x1e0>)
 8105144:	4293      	cmp	r3, r2
 8105146:	d013      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	681b      	ldr	r3, [r3, #0]
 810514c:	4a1c      	ldr	r2, [pc, #112]	; (81051c0 <HAL_DMA_IRQHandler+0x1e4>)
 810514e:	4293      	cmp	r3, r2
 8105150:	d00e      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	681b      	ldr	r3, [r3, #0]
 8105156:	4a1b      	ldr	r2, [pc, #108]	; (81051c4 <HAL_DMA_IRQHandler+0x1e8>)
 8105158:	4293      	cmp	r3, r2
 810515a:	d009      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	4a19      	ldr	r2, [pc, #100]	; (81051c8 <HAL_DMA_IRQHandler+0x1ec>)
 8105162:	4293      	cmp	r3, r2
 8105164:	d004      	beq.n	8105170 <HAL_DMA_IRQHandler+0x194>
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	4a18      	ldr	r2, [pc, #96]	; (81051cc <HAL_DMA_IRQHandler+0x1f0>)
 810516c:	4293      	cmp	r3, r2
 810516e:	d12f      	bne.n	81051d0 <HAL_DMA_IRQHandler+0x1f4>
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	f003 0304 	and.w	r3, r3, #4
 810517a:	2b00      	cmp	r3, #0
 810517c:	bf14      	ite	ne
 810517e:	2301      	movne	r3, #1
 8105180:	2300      	moveq	r3, #0
 8105182:	b2db      	uxtb	r3, r3
 8105184:	e02e      	b.n	81051e4 <HAL_DMA_IRQHandler+0x208>
 8105186:	bf00      	nop
 8105188:	10000000 	.word	0x10000000
 810518c:	1b4e81b5 	.word	0x1b4e81b5
 8105190:	40020010 	.word	0x40020010
 8105194:	40020028 	.word	0x40020028
 8105198:	40020040 	.word	0x40020040
 810519c:	40020058 	.word	0x40020058
 81051a0:	40020070 	.word	0x40020070
 81051a4:	40020088 	.word	0x40020088
 81051a8:	400200a0 	.word	0x400200a0
 81051ac:	400200b8 	.word	0x400200b8
 81051b0:	40020410 	.word	0x40020410
 81051b4:	40020428 	.word	0x40020428
 81051b8:	40020440 	.word	0x40020440
 81051bc:	40020458 	.word	0x40020458
 81051c0:	40020470 	.word	0x40020470
 81051c4:	40020488 	.word	0x40020488
 81051c8:	400204a0 	.word	0x400204a0
 81051cc:	400204b8 	.word	0x400204b8
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	f003 0308 	and.w	r3, r3, #8
 81051da:	2b00      	cmp	r3, #0
 81051dc:	bf14      	ite	ne
 81051de:	2301      	movne	r3, #1
 81051e0:	2300      	moveq	r3, #0
 81051e2:	b2db      	uxtb	r3, r3
 81051e4:	2b00      	cmp	r3, #0
 81051e6:	d015      	beq.n	8105214 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	681b      	ldr	r3, [r3, #0]
 81051ec:	681a      	ldr	r2, [r3, #0]
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	f022 0204 	bic.w	r2, r2, #4
 81051f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051fc:	f003 031f 	and.w	r3, r3, #31
 8105200:	2208      	movs	r2, #8
 8105202:	409a      	lsls	r2, r3
 8105204:	6a3b      	ldr	r3, [r7, #32]
 8105206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810520c:	f043 0201 	orr.w	r2, r3, #1
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105218:	f003 031f 	and.w	r3, r3, #31
 810521c:	69ba      	ldr	r2, [r7, #24]
 810521e:	fa22 f303 	lsr.w	r3, r2, r3
 8105222:	f003 0301 	and.w	r3, r3, #1
 8105226:	2b00      	cmp	r3, #0
 8105228:	d06e      	beq.n	8105308 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	4a69      	ldr	r2, [pc, #420]	; (81053d4 <HAL_DMA_IRQHandler+0x3f8>)
 8105230:	4293      	cmp	r3, r2
 8105232:	d04a      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	4a67      	ldr	r2, [pc, #412]	; (81053d8 <HAL_DMA_IRQHandler+0x3fc>)
 810523a:	4293      	cmp	r3, r2
 810523c:	d045      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	4a66      	ldr	r2, [pc, #408]	; (81053dc <HAL_DMA_IRQHandler+0x400>)
 8105244:	4293      	cmp	r3, r2
 8105246:	d040      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	4a64      	ldr	r2, [pc, #400]	; (81053e0 <HAL_DMA_IRQHandler+0x404>)
 810524e:	4293      	cmp	r3, r2
 8105250:	d03b      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	4a63      	ldr	r2, [pc, #396]	; (81053e4 <HAL_DMA_IRQHandler+0x408>)
 8105258:	4293      	cmp	r3, r2
 810525a:	d036      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	4a61      	ldr	r2, [pc, #388]	; (81053e8 <HAL_DMA_IRQHandler+0x40c>)
 8105262:	4293      	cmp	r3, r2
 8105264:	d031      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	681b      	ldr	r3, [r3, #0]
 810526a:	4a60      	ldr	r2, [pc, #384]	; (81053ec <HAL_DMA_IRQHandler+0x410>)
 810526c:	4293      	cmp	r3, r2
 810526e:	d02c      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	4a5e      	ldr	r2, [pc, #376]	; (81053f0 <HAL_DMA_IRQHandler+0x414>)
 8105276:	4293      	cmp	r3, r2
 8105278:	d027      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	4a5d      	ldr	r2, [pc, #372]	; (81053f4 <HAL_DMA_IRQHandler+0x418>)
 8105280:	4293      	cmp	r3, r2
 8105282:	d022      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	4a5b      	ldr	r2, [pc, #364]	; (81053f8 <HAL_DMA_IRQHandler+0x41c>)
 810528a:	4293      	cmp	r3, r2
 810528c:	d01d      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	4a5a      	ldr	r2, [pc, #360]	; (81053fc <HAL_DMA_IRQHandler+0x420>)
 8105294:	4293      	cmp	r3, r2
 8105296:	d018      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	4a58      	ldr	r2, [pc, #352]	; (8105400 <HAL_DMA_IRQHandler+0x424>)
 810529e:	4293      	cmp	r3, r2
 81052a0:	d013      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	681b      	ldr	r3, [r3, #0]
 81052a6:	4a57      	ldr	r2, [pc, #348]	; (8105404 <HAL_DMA_IRQHandler+0x428>)
 81052a8:	4293      	cmp	r3, r2
 81052aa:	d00e      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	4a55      	ldr	r2, [pc, #340]	; (8105408 <HAL_DMA_IRQHandler+0x42c>)
 81052b2:	4293      	cmp	r3, r2
 81052b4:	d009      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	4a54      	ldr	r2, [pc, #336]	; (810540c <HAL_DMA_IRQHandler+0x430>)
 81052bc:	4293      	cmp	r3, r2
 81052be:	d004      	beq.n	81052ca <HAL_DMA_IRQHandler+0x2ee>
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	681b      	ldr	r3, [r3, #0]
 81052c4:	4a52      	ldr	r2, [pc, #328]	; (8105410 <HAL_DMA_IRQHandler+0x434>)
 81052c6:	4293      	cmp	r3, r2
 81052c8:	d10a      	bne.n	81052e0 <HAL_DMA_IRQHandler+0x304>
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	695b      	ldr	r3, [r3, #20]
 81052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81052d4:	2b00      	cmp	r3, #0
 81052d6:	bf14      	ite	ne
 81052d8:	2301      	movne	r3, #1
 81052da:	2300      	moveq	r3, #0
 81052dc:	b2db      	uxtb	r3, r3
 81052de:	e003      	b.n	81052e8 <HAL_DMA_IRQHandler+0x30c>
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	681b      	ldr	r3, [r3, #0]
 81052e4:	681b      	ldr	r3, [r3, #0]
 81052e6:	2300      	movs	r3, #0
 81052e8:	2b00      	cmp	r3, #0
 81052ea:	d00d      	beq.n	8105308 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052f0:	f003 031f 	and.w	r3, r3, #31
 81052f4:	2201      	movs	r2, #1
 81052f6:	409a      	lsls	r2, r3
 81052f8:	6a3b      	ldr	r3, [r7, #32]
 81052fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105300:	f043 0202 	orr.w	r2, r3, #2
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810530c:	f003 031f 	and.w	r3, r3, #31
 8105310:	2204      	movs	r2, #4
 8105312:	409a      	lsls	r2, r3
 8105314:	69bb      	ldr	r3, [r7, #24]
 8105316:	4013      	ands	r3, r2
 8105318:	2b00      	cmp	r3, #0
 810531a:	f000 808f 	beq.w	810543c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810531e:	687b      	ldr	r3, [r7, #4]
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	4a2c      	ldr	r2, [pc, #176]	; (81053d4 <HAL_DMA_IRQHandler+0x3f8>)
 8105324:	4293      	cmp	r3, r2
 8105326:	d04a      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105328:	687b      	ldr	r3, [r7, #4]
 810532a:	681b      	ldr	r3, [r3, #0]
 810532c:	4a2a      	ldr	r2, [pc, #168]	; (81053d8 <HAL_DMA_IRQHandler+0x3fc>)
 810532e:	4293      	cmp	r3, r2
 8105330:	d045      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	4a29      	ldr	r2, [pc, #164]	; (81053dc <HAL_DMA_IRQHandler+0x400>)
 8105338:	4293      	cmp	r3, r2
 810533a:	d040      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	4a27      	ldr	r2, [pc, #156]	; (81053e0 <HAL_DMA_IRQHandler+0x404>)
 8105342:	4293      	cmp	r3, r2
 8105344:	d03b      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	4a26      	ldr	r2, [pc, #152]	; (81053e4 <HAL_DMA_IRQHandler+0x408>)
 810534c:	4293      	cmp	r3, r2
 810534e:	d036      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	4a24      	ldr	r2, [pc, #144]	; (81053e8 <HAL_DMA_IRQHandler+0x40c>)
 8105356:	4293      	cmp	r3, r2
 8105358:	d031      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	4a23      	ldr	r2, [pc, #140]	; (81053ec <HAL_DMA_IRQHandler+0x410>)
 8105360:	4293      	cmp	r3, r2
 8105362:	d02c      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	681b      	ldr	r3, [r3, #0]
 8105368:	4a21      	ldr	r2, [pc, #132]	; (81053f0 <HAL_DMA_IRQHandler+0x414>)
 810536a:	4293      	cmp	r3, r2
 810536c:	d027      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	4a20      	ldr	r2, [pc, #128]	; (81053f4 <HAL_DMA_IRQHandler+0x418>)
 8105374:	4293      	cmp	r3, r2
 8105376:	d022      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	4a1e      	ldr	r2, [pc, #120]	; (81053f8 <HAL_DMA_IRQHandler+0x41c>)
 810537e:	4293      	cmp	r3, r2
 8105380:	d01d      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	4a1d      	ldr	r2, [pc, #116]	; (81053fc <HAL_DMA_IRQHandler+0x420>)
 8105388:	4293      	cmp	r3, r2
 810538a:	d018      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	4a1b      	ldr	r2, [pc, #108]	; (8105400 <HAL_DMA_IRQHandler+0x424>)
 8105392:	4293      	cmp	r3, r2
 8105394:	d013      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	4a1a      	ldr	r2, [pc, #104]	; (8105404 <HAL_DMA_IRQHandler+0x428>)
 810539c:	4293      	cmp	r3, r2
 810539e:	d00e      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	681b      	ldr	r3, [r3, #0]
 81053a4:	4a18      	ldr	r2, [pc, #96]	; (8105408 <HAL_DMA_IRQHandler+0x42c>)
 81053a6:	4293      	cmp	r3, r2
 81053a8:	d009      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	4a17      	ldr	r2, [pc, #92]	; (810540c <HAL_DMA_IRQHandler+0x430>)
 81053b0:	4293      	cmp	r3, r2
 81053b2:	d004      	beq.n	81053be <HAL_DMA_IRQHandler+0x3e2>
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	4a15      	ldr	r2, [pc, #84]	; (8105410 <HAL_DMA_IRQHandler+0x434>)
 81053ba:	4293      	cmp	r3, r2
 81053bc:	d12a      	bne.n	8105414 <HAL_DMA_IRQHandler+0x438>
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	f003 0302 	and.w	r3, r3, #2
 81053c8:	2b00      	cmp	r3, #0
 81053ca:	bf14      	ite	ne
 81053cc:	2301      	movne	r3, #1
 81053ce:	2300      	moveq	r3, #0
 81053d0:	b2db      	uxtb	r3, r3
 81053d2:	e023      	b.n	810541c <HAL_DMA_IRQHandler+0x440>
 81053d4:	40020010 	.word	0x40020010
 81053d8:	40020028 	.word	0x40020028
 81053dc:	40020040 	.word	0x40020040
 81053e0:	40020058 	.word	0x40020058
 81053e4:	40020070 	.word	0x40020070
 81053e8:	40020088 	.word	0x40020088
 81053ec:	400200a0 	.word	0x400200a0
 81053f0:	400200b8 	.word	0x400200b8
 81053f4:	40020410 	.word	0x40020410
 81053f8:	40020428 	.word	0x40020428
 81053fc:	40020440 	.word	0x40020440
 8105400:	40020458 	.word	0x40020458
 8105404:	40020470 	.word	0x40020470
 8105408:	40020488 	.word	0x40020488
 810540c:	400204a0 	.word	0x400204a0
 8105410:	400204b8 	.word	0x400204b8
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	681b      	ldr	r3, [r3, #0]
 810541a:	2300      	movs	r3, #0
 810541c:	2b00      	cmp	r3, #0
 810541e:	d00d      	beq.n	810543c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105420:	687b      	ldr	r3, [r7, #4]
 8105422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105424:	f003 031f 	and.w	r3, r3, #31
 8105428:	2204      	movs	r2, #4
 810542a:	409a      	lsls	r2, r3
 810542c:	6a3b      	ldr	r3, [r7, #32]
 810542e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105434:	f043 0204 	orr.w	r2, r3, #4
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105440:	f003 031f 	and.w	r3, r3, #31
 8105444:	2210      	movs	r2, #16
 8105446:	409a      	lsls	r2, r3
 8105448:	69bb      	ldr	r3, [r7, #24]
 810544a:	4013      	ands	r3, r2
 810544c:	2b00      	cmp	r3, #0
 810544e:	f000 80a6 	beq.w	810559e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	4a85      	ldr	r2, [pc, #532]	; (810566c <HAL_DMA_IRQHandler+0x690>)
 8105458:	4293      	cmp	r3, r2
 810545a:	d04a      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	681b      	ldr	r3, [r3, #0]
 8105460:	4a83      	ldr	r2, [pc, #524]	; (8105670 <HAL_DMA_IRQHandler+0x694>)
 8105462:	4293      	cmp	r3, r2
 8105464:	d045      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 8105466:	687b      	ldr	r3, [r7, #4]
 8105468:	681b      	ldr	r3, [r3, #0]
 810546a:	4a82      	ldr	r2, [pc, #520]	; (8105674 <HAL_DMA_IRQHandler+0x698>)
 810546c:	4293      	cmp	r3, r2
 810546e:	d040      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	681b      	ldr	r3, [r3, #0]
 8105474:	4a80      	ldr	r2, [pc, #512]	; (8105678 <HAL_DMA_IRQHandler+0x69c>)
 8105476:	4293      	cmp	r3, r2
 8105478:	d03b      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 810547a:	687b      	ldr	r3, [r7, #4]
 810547c:	681b      	ldr	r3, [r3, #0]
 810547e:	4a7f      	ldr	r2, [pc, #508]	; (810567c <HAL_DMA_IRQHandler+0x6a0>)
 8105480:	4293      	cmp	r3, r2
 8105482:	d036      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 8105484:	687b      	ldr	r3, [r7, #4]
 8105486:	681b      	ldr	r3, [r3, #0]
 8105488:	4a7d      	ldr	r2, [pc, #500]	; (8105680 <HAL_DMA_IRQHandler+0x6a4>)
 810548a:	4293      	cmp	r3, r2
 810548c:	d031      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	4a7c      	ldr	r2, [pc, #496]	; (8105684 <HAL_DMA_IRQHandler+0x6a8>)
 8105494:	4293      	cmp	r3, r2
 8105496:	d02c      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	681b      	ldr	r3, [r3, #0]
 810549c:	4a7a      	ldr	r2, [pc, #488]	; (8105688 <HAL_DMA_IRQHandler+0x6ac>)
 810549e:	4293      	cmp	r3, r2
 81054a0:	d027      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	681b      	ldr	r3, [r3, #0]
 81054a6:	4a79      	ldr	r2, [pc, #484]	; (810568c <HAL_DMA_IRQHandler+0x6b0>)
 81054a8:	4293      	cmp	r3, r2
 81054aa:	d022      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054ac:	687b      	ldr	r3, [r7, #4]
 81054ae:	681b      	ldr	r3, [r3, #0]
 81054b0:	4a77      	ldr	r2, [pc, #476]	; (8105690 <HAL_DMA_IRQHandler+0x6b4>)
 81054b2:	4293      	cmp	r3, r2
 81054b4:	d01d      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	681b      	ldr	r3, [r3, #0]
 81054ba:	4a76      	ldr	r2, [pc, #472]	; (8105694 <HAL_DMA_IRQHandler+0x6b8>)
 81054bc:	4293      	cmp	r3, r2
 81054be:	d018      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054c0:	687b      	ldr	r3, [r7, #4]
 81054c2:	681b      	ldr	r3, [r3, #0]
 81054c4:	4a74      	ldr	r2, [pc, #464]	; (8105698 <HAL_DMA_IRQHandler+0x6bc>)
 81054c6:	4293      	cmp	r3, r2
 81054c8:	d013      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	4a73      	ldr	r2, [pc, #460]	; (810569c <HAL_DMA_IRQHandler+0x6c0>)
 81054d0:	4293      	cmp	r3, r2
 81054d2:	d00e      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	681b      	ldr	r3, [r3, #0]
 81054d8:	4a71      	ldr	r2, [pc, #452]	; (81056a0 <HAL_DMA_IRQHandler+0x6c4>)
 81054da:	4293      	cmp	r3, r2
 81054dc:	d009      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	681b      	ldr	r3, [r3, #0]
 81054e2:	4a70      	ldr	r2, [pc, #448]	; (81056a4 <HAL_DMA_IRQHandler+0x6c8>)
 81054e4:	4293      	cmp	r3, r2
 81054e6:	d004      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x516>
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	4a6e      	ldr	r2, [pc, #440]	; (81056a8 <HAL_DMA_IRQHandler+0x6cc>)
 81054ee:	4293      	cmp	r3, r2
 81054f0:	d10a      	bne.n	8105508 <HAL_DMA_IRQHandler+0x52c>
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	681b      	ldr	r3, [r3, #0]
 81054f8:	f003 0308 	and.w	r3, r3, #8
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	bf14      	ite	ne
 8105500:	2301      	movne	r3, #1
 8105502:	2300      	moveq	r3, #0
 8105504:	b2db      	uxtb	r3, r3
 8105506:	e009      	b.n	810551c <HAL_DMA_IRQHandler+0x540>
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	681b      	ldr	r3, [r3, #0]
 810550c:	681b      	ldr	r3, [r3, #0]
 810550e:	f003 0304 	and.w	r3, r3, #4
 8105512:	2b00      	cmp	r3, #0
 8105514:	bf14      	ite	ne
 8105516:	2301      	movne	r3, #1
 8105518:	2300      	moveq	r3, #0
 810551a:	b2db      	uxtb	r3, r3
 810551c:	2b00      	cmp	r3, #0
 810551e:	d03e      	beq.n	810559e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105524:	f003 031f 	and.w	r3, r3, #31
 8105528:	2210      	movs	r2, #16
 810552a:	409a      	lsls	r2, r3
 810552c:	6a3b      	ldr	r3, [r7, #32]
 810552e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	681b      	ldr	r3, [r3, #0]
 8105536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810553a:	2b00      	cmp	r3, #0
 810553c:	d018      	beq.n	8105570 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105548:	2b00      	cmp	r3, #0
 810554a:	d108      	bne.n	810555e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105550:	2b00      	cmp	r3, #0
 8105552:	d024      	beq.n	810559e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105558:	6878      	ldr	r0, [r7, #4]
 810555a:	4798      	blx	r3
 810555c:	e01f      	b.n	810559e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105562:	2b00      	cmp	r3, #0
 8105564:	d01b      	beq.n	810559e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810556a:	6878      	ldr	r0, [r7, #4]
 810556c:	4798      	blx	r3
 810556e:	e016      	b.n	810559e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	681b      	ldr	r3, [r3, #0]
 8105576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810557a:	2b00      	cmp	r3, #0
 810557c:	d107      	bne.n	810558e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	681a      	ldr	r2, [r3, #0]
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	f022 0208 	bic.w	r2, r2, #8
 810558c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105592:	2b00      	cmp	r3, #0
 8105594:	d003      	beq.n	810559e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810559a:	6878      	ldr	r0, [r7, #4]
 810559c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81055a2:	f003 031f 	and.w	r3, r3, #31
 81055a6:	2220      	movs	r2, #32
 81055a8:	409a      	lsls	r2, r3
 81055aa:	69bb      	ldr	r3, [r7, #24]
 81055ac:	4013      	ands	r3, r2
 81055ae:	2b00      	cmp	r3, #0
 81055b0:	f000 8110 	beq.w	81057d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	4a2c      	ldr	r2, [pc, #176]	; (810566c <HAL_DMA_IRQHandler+0x690>)
 81055ba:	4293      	cmp	r3, r2
 81055bc:	d04a      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	4a2b      	ldr	r2, [pc, #172]	; (8105670 <HAL_DMA_IRQHandler+0x694>)
 81055c4:	4293      	cmp	r3, r2
 81055c6:	d045      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	4a29      	ldr	r2, [pc, #164]	; (8105674 <HAL_DMA_IRQHandler+0x698>)
 81055ce:	4293      	cmp	r3, r2
 81055d0:	d040      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	4a28      	ldr	r2, [pc, #160]	; (8105678 <HAL_DMA_IRQHandler+0x69c>)
 81055d8:	4293      	cmp	r3, r2
 81055da:	d03b      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	4a26      	ldr	r2, [pc, #152]	; (810567c <HAL_DMA_IRQHandler+0x6a0>)
 81055e2:	4293      	cmp	r3, r2
 81055e4:	d036      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	4a25      	ldr	r2, [pc, #148]	; (8105680 <HAL_DMA_IRQHandler+0x6a4>)
 81055ec:	4293      	cmp	r3, r2
 81055ee:	d031      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	4a23      	ldr	r2, [pc, #140]	; (8105684 <HAL_DMA_IRQHandler+0x6a8>)
 81055f6:	4293      	cmp	r3, r2
 81055f8:	d02c      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	4a22      	ldr	r2, [pc, #136]	; (8105688 <HAL_DMA_IRQHandler+0x6ac>)
 8105600:	4293      	cmp	r3, r2
 8105602:	d027      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	681b      	ldr	r3, [r3, #0]
 8105608:	4a20      	ldr	r2, [pc, #128]	; (810568c <HAL_DMA_IRQHandler+0x6b0>)
 810560a:	4293      	cmp	r3, r2
 810560c:	d022      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 810560e:	687b      	ldr	r3, [r7, #4]
 8105610:	681b      	ldr	r3, [r3, #0]
 8105612:	4a1f      	ldr	r2, [pc, #124]	; (8105690 <HAL_DMA_IRQHandler+0x6b4>)
 8105614:	4293      	cmp	r3, r2
 8105616:	d01d      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	681b      	ldr	r3, [r3, #0]
 810561c:	4a1d      	ldr	r2, [pc, #116]	; (8105694 <HAL_DMA_IRQHandler+0x6b8>)
 810561e:	4293      	cmp	r3, r2
 8105620:	d018      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	4a1c      	ldr	r2, [pc, #112]	; (8105698 <HAL_DMA_IRQHandler+0x6bc>)
 8105628:	4293      	cmp	r3, r2
 810562a:	d013      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	4a1a      	ldr	r2, [pc, #104]	; (810569c <HAL_DMA_IRQHandler+0x6c0>)
 8105632:	4293      	cmp	r3, r2
 8105634:	d00e      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	681b      	ldr	r3, [r3, #0]
 810563a:	4a19      	ldr	r2, [pc, #100]	; (81056a0 <HAL_DMA_IRQHandler+0x6c4>)
 810563c:	4293      	cmp	r3, r2
 810563e:	d009      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	4a17      	ldr	r2, [pc, #92]	; (81056a4 <HAL_DMA_IRQHandler+0x6c8>)
 8105646:	4293      	cmp	r3, r2
 8105648:	d004      	beq.n	8105654 <HAL_DMA_IRQHandler+0x678>
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	681b      	ldr	r3, [r3, #0]
 810564e:	4a16      	ldr	r2, [pc, #88]	; (81056a8 <HAL_DMA_IRQHandler+0x6cc>)
 8105650:	4293      	cmp	r3, r2
 8105652:	d12b      	bne.n	81056ac <HAL_DMA_IRQHandler+0x6d0>
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	f003 0310 	and.w	r3, r3, #16
 810565e:	2b00      	cmp	r3, #0
 8105660:	bf14      	ite	ne
 8105662:	2301      	movne	r3, #1
 8105664:	2300      	moveq	r3, #0
 8105666:	b2db      	uxtb	r3, r3
 8105668:	e02a      	b.n	81056c0 <HAL_DMA_IRQHandler+0x6e4>
 810566a:	bf00      	nop
 810566c:	40020010 	.word	0x40020010
 8105670:	40020028 	.word	0x40020028
 8105674:	40020040 	.word	0x40020040
 8105678:	40020058 	.word	0x40020058
 810567c:	40020070 	.word	0x40020070
 8105680:	40020088 	.word	0x40020088
 8105684:	400200a0 	.word	0x400200a0
 8105688:	400200b8 	.word	0x400200b8
 810568c:	40020410 	.word	0x40020410
 8105690:	40020428 	.word	0x40020428
 8105694:	40020440 	.word	0x40020440
 8105698:	40020458 	.word	0x40020458
 810569c:	40020470 	.word	0x40020470
 81056a0:	40020488 	.word	0x40020488
 81056a4:	400204a0 	.word	0x400204a0
 81056a8:	400204b8 	.word	0x400204b8
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	681b      	ldr	r3, [r3, #0]
 81056b2:	f003 0302 	and.w	r3, r3, #2
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	bf14      	ite	ne
 81056ba:	2301      	movne	r3, #1
 81056bc:	2300      	moveq	r3, #0
 81056be:	b2db      	uxtb	r3, r3
 81056c0:	2b00      	cmp	r3, #0
 81056c2:	f000 8087 	beq.w	81057d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056ca:	f003 031f 	and.w	r3, r3, #31
 81056ce:	2220      	movs	r2, #32
 81056d0:	409a      	lsls	r2, r3
 81056d2:	6a3b      	ldr	r3, [r7, #32]
 81056d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81056dc:	b2db      	uxtb	r3, r3
 81056de:	2b04      	cmp	r3, #4
 81056e0:	d139      	bne.n	8105756 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	681b      	ldr	r3, [r3, #0]
 81056e6:	681a      	ldr	r2, [r3, #0]
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	681b      	ldr	r3, [r3, #0]
 81056ec:	f022 0216 	bic.w	r2, r2, #22
 81056f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	695a      	ldr	r2, [r3, #20]
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105700:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105706:	2b00      	cmp	r3, #0
 8105708:	d103      	bne.n	8105712 <HAL_DMA_IRQHandler+0x736>
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810570e:	2b00      	cmp	r3, #0
 8105710:	d007      	beq.n	8105722 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	681b      	ldr	r3, [r3, #0]
 8105716:	681a      	ldr	r2, [r3, #0]
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	f022 0208 	bic.w	r2, r2, #8
 8105720:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105726:	f003 031f 	and.w	r3, r3, #31
 810572a:	223f      	movs	r2, #63	; 0x3f
 810572c:	409a      	lsls	r2, r3
 810572e:	6a3b      	ldr	r3, [r7, #32]
 8105730:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	2200      	movs	r2, #0
 8105736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	2201      	movs	r2, #1
 810573e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105746:	2b00      	cmp	r3, #0
 8105748:	f000 834a 	beq.w	8105de0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105750:	6878      	ldr	r0, [r7, #4]
 8105752:	4798      	blx	r3
          }
          return;
 8105754:	e344      	b.n	8105de0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	681b      	ldr	r3, [r3, #0]
 810575c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105760:	2b00      	cmp	r3, #0
 8105762:	d018      	beq.n	8105796 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	681b      	ldr	r3, [r3, #0]
 810576a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810576e:	2b00      	cmp	r3, #0
 8105770:	d108      	bne.n	8105784 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105776:	2b00      	cmp	r3, #0
 8105778:	d02c      	beq.n	81057d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810577e:	6878      	ldr	r0, [r7, #4]
 8105780:	4798      	blx	r3
 8105782:	e027      	b.n	81057d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105788:	2b00      	cmp	r3, #0
 810578a:	d023      	beq.n	81057d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105790:	6878      	ldr	r0, [r7, #4]
 8105792:	4798      	blx	r3
 8105794:	e01e      	b.n	81057d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d10f      	bne.n	81057c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81057a4:	687b      	ldr	r3, [r7, #4]
 81057a6:	681b      	ldr	r3, [r3, #0]
 81057a8:	681a      	ldr	r2, [r3, #0]
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	f022 0210 	bic.w	r2, r2, #16
 81057b2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	2200      	movs	r2, #0
 81057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	2201      	movs	r2, #1
 81057c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 81057c4:	687b      	ldr	r3, [r7, #4]
 81057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81057c8:	2b00      	cmp	r3, #0
 81057ca:	d003      	beq.n	81057d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81057d0:	6878      	ldr	r0, [r7, #4]
 81057d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057d8:	2b00      	cmp	r3, #0
 81057da:	f000 8306 	beq.w	8105dea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057e2:	f003 0301 	and.w	r3, r3, #1
 81057e6:	2b00      	cmp	r3, #0
 81057e8:	f000 8088 	beq.w	81058fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	2204      	movs	r2, #4
 81057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81057f4:	687b      	ldr	r3, [r7, #4]
 81057f6:	681b      	ldr	r3, [r3, #0]
 81057f8:	4a7a      	ldr	r2, [pc, #488]	; (81059e4 <HAL_DMA_IRQHandler+0xa08>)
 81057fa:	4293      	cmp	r3, r2
 81057fc:	d04a      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	681b      	ldr	r3, [r3, #0]
 8105802:	4a79      	ldr	r2, [pc, #484]	; (81059e8 <HAL_DMA_IRQHandler+0xa0c>)
 8105804:	4293      	cmp	r3, r2
 8105806:	d045      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	4a77      	ldr	r2, [pc, #476]	; (81059ec <HAL_DMA_IRQHandler+0xa10>)
 810580e:	4293      	cmp	r3, r2
 8105810:	d040      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	4a76      	ldr	r2, [pc, #472]	; (81059f0 <HAL_DMA_IRQHandler+0xa14>)
 8105818:	4293      	cmp	r3, r2
 810581a:	d03b      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	4a74      	ldr	r2, [pc, #464]	; (81059f4 <HAL_DMA_IRQHandler+0xa18>)
 8105822:	4293      	cmp	r3, r2
 8105824:	d036      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	4a73      	ldr	r2, [pc, #460]	; (81059f8 <HAL_DMA_IRQHandler+0xa1c>)
 810582c:	4293      	cmp	r3, r2
 810582e:	d031      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	4a71      	ldr	r2, [pc, #452]	; (81059fc <HAL_DMA_IRQHandler+0xa20>)
 8105836:	4293      	cmp	r3, r2
 8105838:	d02c      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	4a70      	ldr	r2, [pc, #448]	; (8105a00 <HAL_DMA_IRQHandler+0xa24>)
 8105840:	4293      	cmp	r3, r2
 8105842:	d027      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	4a6e      	ldr	r2, [pc, #440]	; (8105a04 <HAL_DMA_IRQHandler+0xa28>)
 810584a:	4293      	cmp	r3, r2
 810584c:	d022      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	4a6d      	ldr	r2, [pc, #436]	; (8105a08 <HAL_DMA_IRQHandler+0xa2c>)
 8105854:	4293      	cmp	r3, r2
 8105856:	d01d      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	681b      	ldr	r3, [r3, #0]
 810585c:	4a6b      	ldr	r2, [pc, #428]	; (8105a0c <HAL_DMA_IRQHandler+0xa30>)
 810585e:	4293      	cmp	r3, r2
 8105860:	d018      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	4a6a      	ldr	r2, [pc, #424]	; (8105a10 <HAL_DMA_IRQHandler+0xa34>)
 8105868:	4293      	cmp	r3, r2
 810586a:	d013      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	4a68      	ldr	r2, [pc, #416]	; (8105a14 <HAL_DMA_IRQHandler+0xa38>)
 8105872:	4293      	cmp	r3, r2
 8105874:	d00e      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	4a67      	ldr	r2, [pc, #412]	; (8105a18 <HAL_DMA_IRQHandler+0xa3c>)
 810587c:	4293      	cmp	r3, r2
 810587e:	d009      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 8105880:	687b      	ldr	r3, [r7, #4]
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	4a65      	ldr	r2, [pc, #404]	; (8105a1c <HAL_DMA_IRQHandler+0xa40>)
 8105886:	4293      	cmp	r3, r2
 8105888:	d004      	beq.n	8105894 <HAL_DMA_IRQHandler+0x8b8>
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	4a64      	ldr	r2, [pc, #400]	; (8105a20 <HAL_DMA_IRQHandler+0xa44>)
 8105890:	4293      	cmp	r3, r2
 8105892:	d108      	bne.n	81058a6 <HAL_DMA_IRQHandler+0x8ca>
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	681a      	ldr	r2, [r3, #0]
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	681b      	ldr	r3, [r3, #0]
 810589e:	f022 0201 	bic.w	r2, r2, #1
 81058a2:	601a      	str	r2, [r3, #0]
 81058a4:	e007      	b.n	81058b6 <HAL_DMA_IRQHandler+0x8da>
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	681a      	ldr	r2, [r3, #0]
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	681b      	ldr	r3, [r3, #0]
 81058b0:	f022 0201 	bic.w	r2, r2, #1
 81058b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81058b6:	68fb      	ldr	r3, [r7, #12]
 81058b8:	3301      	adds	r3, #1
 81058ba:	60fb      	str	r3, [r7, #12]
 81058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81058be:	429a      	cmp	r2, r3
 81058c0:	d307      	bcc.n	81058d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	f003 0301 	and.w	r3, r3, #1
 81058cc:	2b00      	cmp	r3, #0
 81058ce:	d1f2      	bne.n	81058b6 <HAL_DMA_IRQHandler+0x8da>
 81058d0:	e000      	b.n	81058d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81058d2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	2200      	movs	r2, #0
 81058d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	681b      	ldr	r3, [r3, #0]
 81058e0:	681b      	ldr	r3, [r3, #0]
 81058e2:	f003 0301 	and.w	r3, r3, #1
 81058e6:	2b00      	cmp	r3, #0
 81058e8:	d004      	beq.n	81058f4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	2203      	movs	r2, #3
 81058ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81058f2:	e003      	b.n	81058fc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	2201      	movs	r2, #1
 81058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105900:	2b00      	cmp	r3, #0
 8105902:	f000 8272 	beq.w	8105dea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810590a:	6878      	ldr	r0, [r7, #4]
 810590c:	4798      	blx	r3
 810590e:	e26c      	b.n	8105dea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	4a43      	ldr	r2, [pc, #268]	; (8105a24 <HAL_DMA_IRQHandler+0xa48>)
 8105916:	4293      	cmp	r3, r2
 8105918:	d022      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	4a42      	ldr	r2, [pc, #264]	; (8105a28 <HAL_DMA_IRQHandler+0xa4c>)
 8105920:	4293      	cmp	r3, r2
 8105922:	d01d      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	4a40      	ldr	r2, [pc, #256]	; (8105a2c <HAL_DMA_IRQHandler+0xa50>)
 810592a:	4293      	cmp	r3, r2
 810592c:	d018      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 810592e:	687b      	ldr	r3, [r7, #4]
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	4a3f      	ldr	r2, [pc, #252]	; (8105a30 <HAL_DMA_IRQHandler+0xa54>)
 8105934:	4293      	cmp	r3, r2
 8105936:	d013      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	4a3d      	ldr	r2, [pc, #244]	; (8105a34 <HAL_DMA_IRQHandler+0xa58>)
 810593e:	4293      	cmp	r3, r2
 8105940:	d00e      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	4a3c      	ldr	r2, [pc, #240]	; (8105a38 <HAL_DMA_IRQHandler+0xa5c>)
 8105948:	4293      	cmp	r3, r2
 810594a:	d009      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	681b      	ldr	r3, [r3, #0]
 8105950:	4a3a      	ldr	r2, [pc, #232]	; (8105a3c <HAL_DMA_IRQHandler+0xa60>)
 8105952:	4293      	cmp	r3, r2
 8105954:	d004      	beq.n	8105960 <HAL_DMA_IRQHandler+0x984>
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	4a39      	ldr	r2, [pc, #228]	; (8105a40 <HAL_DMA_IRQHandler+0xa64>)
 810595c:	4293      	cmp	r3, r2
 810595e:	d101      	bne.n	8105964 <HAL_DMA_IRQHandler+0x988>
 8105960:	2301      	movs	r3, #1
 8105962:	e000      	b.n	8105966 <HAL_DMA_IRQHandler+0x98a>
 8105964:	2300      	movs	r3, #0
 8105966:	2b00      	cmp	r3, #0
 8105968:	f000 823f 	beq.w	8105dea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105978:	f003 031f 	and.w	r3, r3, #31
 810597c:	2204      	movs	r2, #4
 810597e:	409a      	lsls	r2, r3
 8105980:	697b      	ldr	r3, [r7, #20]
 8105982:	4013      	ands	r3, r2
 8105984:	2b00      	cmp	r3, #0
 8105986:	f000 80cd 	beq.w	8105b24 <HAL_DMA_IRQHandler+0xb48>
 810598a:	693b      	ldr	r3, [r7, #16]
 810598c:	f003 0304 	and.w	r3, r3, #4
 8105990:	2b00      	cmp	r3, #0
 8105992:	f000 80c7 	beq.w	8105b24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810599a:	f003 031f 	and.w	r3, r3, #31
 810599e:	2204      	movs	r2, #4
 81059a0:	409a      	lsls	r2, r3
 81059a2:	69fb      	ldr	r3, [r7, #28]
 81059a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81059a6:	693b      	ldr	r3, [r7, #16]
 81059a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81059ac:	2b00      	cmp	r3, #0
 81059ae:	d049      	beq.n	8105a44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81059b0:	693b      	ldr	r3, [r7, #16]
 81059b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81059b6:	2b00      	cmp	r3, #0
 81059b8:	d109      	bne.n	81059ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81059be:	2b00      	cmp	r3, #0
 81059c0:	f000 8210 	beq.w	8105de4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81059c8:	6878      	ldr	r0, [r7, #4]
 81059ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81059cc:	e20a      	b.n	8105de4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81059ce:	687b      	ldr	r3, [r7, #4]
 81059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81059d2:	2b00      	cmp	r3, #0
 81059d4:	f000 8206 	beq.w	8105de4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81059dc:	6878      	ldr	r0, [r7, #4]
 81059de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81059e0:	e200      	b.n	8105de4 <HAL_DMA_IRQHandler+0xe08>
 81059e2:	bf00      	nop
 81059e4:	40020010 	.word	0x40020010
 81059e8:	40020028 	.word	0x40020028
 81059ec:	40020040 	.word	0x40020040
 81059f0:	40020058 	.word	0x40020058
 81059f4:	40020070 	.word	0x40020070
 81059f8:	40020088 	.word	0x40020088
 81059fc:	400200a0 	.word	0x400200a0
 8105a00:	400200b8 	.word	0x400200b8
 8105a04:	40020410 	.word	0x40020410
 8105a08:	40020428 	.word	0x40020428
 8105a0c:	40020440 	.word	0x40020440
 8105a10:	40020458 	.word	0x40020458
 8105a14:	40020470 	.word	0x40020470
 8105a18:	40020488 	.word	0x40020488
 8105a1c:	400204a0 	.word	0x400204a0
 8105a20:	400204b8 	.word	0x400204b8
 8105a24:	58025408 	.word	0x58025408
 8105a28:	5802541c 	.word	0x5802541c
 8105a2c:	58025430 	.word	0x58025430
 8105a30:	58025444 	.word	0x58025444
 8105a34:	58025458 	.word	0x58025458
 8105a38:	5802546c 	.word	0x5802546c
 8105a3c:	58025480 	.word	0x58025480
 8105a40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105a44:	693b      	ldr	r3, [r7, #16]
 8105a46:	f003 0320 	and.w	r3, r3, #32
 8105a4a:	2b00      	cmp	r3, #0
 8105a4c:	d160      	bne.n	8105b10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	681b      	ldr	r3, [r3, #0]
 8105a52:	4a8c      	ldr	r2, [pc, #560]	; (8105c84 <HAL_DMA_IRQHandler+0xca8>)
 8105a54:	4293      	cmp	r3, r2
 8105a56:	d04a      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	681b      	ldr	r3, [r3, #0]
 8105a5c:	4a8a      	ldr	r2, [pc, #552]	; (8105c88 <HAL_DMA_IRQHandler+0xcac>)
 8105a5e:	4293      	cmp	r3, r2
 8105a60:	d045      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	4a89      	ldr	r2, [pc, #548]	; (8105c8c <HAL_DMA_IRQHandler+0xcb0>)
 8105a68:	4293      	cmp	r3, r2
 8105a6a:	d040      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	681b      	ldr	r3, [r3, #0]
 8105a70:	4a87      	ldr	r2, [pc, #540]	; (8105c90 <HAL_DMA_IRQHandler+0xcb4>)
 8105a72:	4293      	cmp	r3, r2
 8105a74:	d03b      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	4a86      	ldr	r2, [pc, #536]	; (8105c94 <HAL_DMA_IRQHandler+0xcb8>)
 8105a7c:	4293      	cmp	r3, r2
 8105a7e:	d036      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	4a84      	ldr	r2, [pc, #528]	; (8105c98 <HAL_DMA_IRQHandler+0xcbc>)
 8105a86:	4293      	cmp	r3, r2
 8105a88:	d031      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	4a83      	ldr	r2, [pc, #524]	; (8105c9c <HAL_DMA_IRQHandler+0xcc0>)
 8105a90:	4293      	cmp	r3, r2
 8105a92:	d02c      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	4a81      	ldr	r2, [pc, #516]	; (8105ca0 <HAL_DMA_IRQHandler+0xcc4>)
 8105a9a:	4293      	cmp	r3, r2
 8105a9c:	d027      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	4a80      	ldr	r2, [pc, #512]	; (8105ca4 <HAL_DMA_IRQHandler+0xcc8>)
 8105aa4:	4293      	cmp	r3, r2
 8105aa6:	d022      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	4a7e      	ldr	r2, [pc, #504]	; (8105ca8 <HAL_DMA_IRQHandler+0xccc>)
 8105aae:	4293      	cmp	r3, r2
 8105ab0:	d01d      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	4a7d      	ldr	r2, [pc, #500]	; (8105cac <HAL_DMA_IRQHandler+0xcd0>)
 8105ab8:	4293      	cmp	r3, r2
 8105aba:	d018      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	681b      	ldr	r3, [r3, #0]
 8105ac0:	4a7b      	ldr	r2, [pc, #492]	; (8105cb0 <HAL_DMA_IRQHandler+0xcd4>)
 8105ac2:	4293      	cmp	r3, r2
 8105ac4:	d013      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	4a7a      	ldr	r2, [pc, #488]	; (8105cb4 <HAL_DMA_IRQHandler+0xcd8>)
 8105acc:	4293      	cmp	r3, r2
 8105ace:	d00e      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	681b      	ldr	r3, [r3, #0]
 8105ad4:	4a78      	ldr	r2, [pc, #480]	; (8105cb8 <HAL_DMA_IRQHandler+0xcdc>)
 8105ad6:	4293      	cmp	r3, r2
 8105ad8:	d009      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	4a77      	ldr	r2, [pc, #476]	; (8105cbc <HAL_DMA_IRQHandler+0xce0>)
 8105ae0:	4293      	cmp	r3, r2
 8105ae2:	d004      	beq.n	8105aee <HAL_DMA_IRQHandler+0xb12>
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	4a75      	ldr	r2, [pc, #468]	; (8105cc0 <HAL_DMA_IRQHandler+0xce4>)
 8105aea:	4293      	cmp	r3, r2
 8105aec:	d108      	bne.n	8105b00 <HAL_DMA_IRQHandler+0xb24>
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	681a      	ldr	r2, [r3, #0]
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	681b      	ldr	r3, [r3, #0]
 8105af8:	f022 0208 	bic.w	r2, r2, #8
 8105afc:	601a      	str	r2, [r3, #0]
 8105afe:	e007      	b.n	8105b10 <HAL_DMA_IRQHandler+0xb34>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	681a      	ldr	r2, [r3, #0]
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	f022 0204 	bic.w	r2, r2, #4
 8105b0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b14:	2b00      	cmp	r3, #0
 8105b16:	f000 8165 	beq.w	8105de4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b1e:	6878      	ldr	r0, [r7, #4]
 8105b20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b22:	e15f      	b.n	8105de4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b28:	f003 031f 	and.w	r3, r3, #31
 8105b2c:	2202      	movs	r2, #2
 8105b2e:	409a      	lsls	r2, r3
 8105b30:	697b      	ldr	r3, [r7, #20]
 8105b32:	4013      	ands	r3, r2
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	f000 80c5 	beq.w	8105cc4 <HAL_DMA_IRQHandler+0xce8>
 8105b3a:	693b      	ldr	r3, [r7, #16]
 8105b3c:	f003 0302 	and.w	r3, r3, #2
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	f000 80bf 	beq.w	8105cc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b4a:	f003 031f 	and.w	r3, r3, #31
 8105b4e:	2202      	movs	r2, #2
 8105b50:	409a      	lsls	r2, r3
 8105b52:	69fb      	ldr	r3, [r7, #28]
 8105b54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b56:	693b      	ldr	r3, [r7, #16]
 8105b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	d018      	beq.n	8105b92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105b60:	693b      	ldr	r3, [r7, #16]
 8105b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105b66:	2b00      	cmp	r3, #0
 8105b68:	d109      	bne.n	8105b7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b6e:	2b00      	cmp	r3, #0
 8105b70:	f000 813a 	beq.w	8105de8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b78:	6878      	ldr	r0, [r7, #4]
 8105b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b7c:	e134      	b.n	8105de8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105b82:	2b00      	cmp	r3, #0
 8105b84:	f000 8130 	beq.w	8105de8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105b8c:	6878      	ldr	r0, [r7, #4]
 8105b8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b90:	e12a      	b.n	8105de8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105b92:	693b      	ldr	r3, [r7, #16]
 8105b94:	f003 0320 	and.w	r3, r3, #32
 8105b98:	2b00      	cmp	r3, #0
 8105b9a:	d168      	bne.n	8105c6e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	681b      	ldr	r3, [r3, #0]
 8105ba0:	4a38      	ldr	r2, [pc, #224]	; (8105c84 <HAL_DMA_IRQHandler+0xca8>)
 8105ba2:	4293      	cmp	r3, r2
 8105ba4:	d04a      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	4a37      	ldr	r2, [pc, #220]	; (8105c88 <HAL_DMA_IRQHandler+0xcac>)
 8105bac:	4293      	cmp	r3, r2
 8105bae:	d045      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	4a35      	ldr	r2, [pc, #212]	; (8105c8c <HAL_DMA_IRQHandler+0xcb0>)
 8105bb6:	4293      	cmp	r3, r2
 8105bb8:	d040      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	4a34      	ldr	r2, [pc, #208]	; (8105c90 <HAL_DMA_IRQHandler+0xcb4>)
 8105bc0:	4293      	cmp	r3, r2
 8105bc2:	d03b      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	681b      	ldr	r3, [r3, #0]
 8105bc8:	4a32      	ldr	r2, [pc, #200]	; (8105c94 <HAL_DMA_IRQHandler+0xcb8>)
 8105bca:	4293      	cmp	r3, r2
 8105bcc:	d036      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	681b      	ldr	r3, [r3, #0]
 8105bd2:	4a31      	ldr	r2, [pc, #196]	; (8105c98 <HAL_DMA_IRQHandler+0xcbc>)
 8105bd4:	4293      	cmp	r3, r2
 8105bd6:	d031      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	681b      	ldr	r3, [r3, #0]
 8105bdc:	4a2f      	ldr	r2, [pc, #188]	; (8105c9c <HAL_DMA_IRQHandler+0xcc0>)
 8105bde:	4293      	cmp	r3, r2
 8105be0:	d02c      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	681b      	ldr	r3, [r3, #0]
 8105be6:	4a2e      	ldr	r2, [pc, #184]	; (8105ca0 <HAL_DMA_IRQHandler+0xcc4>)
 8105be8:	4293      	cmp	r3, r2
 8105bea:	d027      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	4a2c      	ldr	r2, [pc, #176]	; (8105ca4 <HAL_DMA_IRQHandler+0xcc8>)
 8105bf2:	4293      	cmp	r3, r2
 8105bf4:	d022      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	4a2b      	ldr	r2, [pc, #172]	; (8105ca8 <HAL_DMA_IRQHandler+0xccc>)
 8105bfc:	4293      	cmp	r3, r2
 8105bfe:	d01d      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105c00:	687b      	ldr	r3, [r7, #4]
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	4a29      	ldr	r2, [pc, #164]	; (8105cac <HAL_DMA_IRQHandler+0xcd0>)
 8105c06:	4293      	cmp	r3, r2
 8105c08:	d018      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	4a28      	ldr	r2, [pc, #160]	; (8105cb0 <HAL_DMA_IRQHandler+0xcd4>)
 8105c10:	4293      	cmp	r3, r2
 8105c12:	d013      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	681b      	ldr	r3, [r3, #0]
 8105c18:	4a26      	ldr	r2, [pc, #152]	; (8105cb4 <HAL_DMA_IRQHandler+0xcd8>)
 8105c1a:	4293      	cmp	r3, r2
 8105c1c:	d00e      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	681b      	ldr	r3, [r3, #0]
 8105c22:	4a25      	ldr	r2, [pc, #148]	; (8105cb8 <HAL_DMA_IRQHandler+0xcdc>)
 8105c24:	4293      	cmp	r3, r2
 8105c26:	d009      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	681b      	ldr	r3, [r3, #0]
 8105c2c:	4a23      	ldr	r2, [pc, #140]	; (8105cbc <HAL_DMA_IRQHandler+0xce0>)
 8105c2e:	4293      	cmp	r3, r2
 8105c30:	d004      	beq.n	8105c3c <HAL_DMA_IRQHandler+0xc60>
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	681b      	ldr	r3, [r3, #0]
 8105c36:	4a22      	ldr	r2, [pc, #136]	; (8105cc0 <HAL_DMA_IRQHandler+0xce4>)
 8105c38:	4293      	cmp	r3, r2
 8105c3a:	d108      	bne.n	8105c4e <HAL_DMA_IRQHandler+0xc72>
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	681a      	ldr	r2, [r3, #0]
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	681b      	ldr	r3, [r3, #0]
 8105c46:	f022 0214 	bic.w	r2, r2, #20
 8105c4a:	601a      	str	r2, [r3, #0]
 8105c4c:	e007      	b.n	8105c5e <HAL_DMA_IRQHandler+0xc82>
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	681a      	ldr	r2, [r3, #0]
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	f022 020a 	bic.w	r2, r2, #10
 8105c5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	2200      	movs	r2, #0
 8105c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	2201      	movs	r2, #1
 8105c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c72:	2b00      	cmp	r3, #0
 8105c74:	f000 80b8 	beq.w	8105de8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c7c:	6878      	ldr	r0, [r7, #4]
 8105c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105c80:	e0b2      	b.n	8105de8 <HAL_DMA_IRQHandler+0xe0c>
 8105c82:	bf00      	nop
 8105c84:	40020010 	.word	0x40020010
 8105c88:	40020028 	.word	0x40020028
 8105c8c:	40020040 	.word	0x40020040
 8105c90:	40020058 	.word	0x40020058
 8105c94:	40020070 	.word	0x40020070
 8105c98:	40020088 	.word	0x40020088
 8105c9c:	400200a0 	.word	0x400200a0
 8105ca0:	400200b8 	.word	0x400200b8
 8105ca4:	40020410 	.word	0x40020410
 8105ca8:	40020428 	.word	0x40020428
 8105cac:	40020440 	.word	0x40020440
 8105cb0:	40020458 	.word	0x40020458
 8105cb4:	40020470 	.word	0x40020470
 8105cb8:	40020488 	.word	0x40020488
 8105cbc:	400204a0 	.word	0x400204a0
 8105cc0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cc8:	f003 031f 	and.w	r3, r3, #31
 8105ccc:	2208      	movs	r2, #8
 8105cce:	409a      	lsls	r2, r3
 8105cd0:	697b      	ldr	r3, [r7, #20]
 8105cd2:	4013      	ands	r3, r2
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	f000 8088 	beq.w	8105dea <HAL_DMA_IRQHandler+0xe0e>
 8105cda:	693b      	ldr	r3, [r7, #16]
 8105cdc:	f003 0308 	and.w	r3, r3, #8
 8105ce0:	2b00      	cmp	r3, #0
 8105ce2:	f000 8082 	beq.w	8105dea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8105ce6:	687b      	ldr	r3, [r7, #4]
 8105ce8:	681b      	ldr	r3, [r3, #0]
 8105cea:	4a41      	ldr	r2, [pc, #260]	; (8105df0 <HAL_DMA_IRQHandler+0xe14>)
 8105cec:	4293      	cmp	r3, r2
 8105cee:	d04a      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	681b      	ldr	r3, [r3, #0]
 8105cf4:	4a3f      	ldr	r2, [pc, #252]	; (8105df4 <HAL_DMA_IRQHandler+0xe18>)
 8105cf6:	4293      	cmp	r3, r2
 8105cf8:	d045      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	681b      	ldr	r3, [r3, #0]
 8105cfe:	4a3e      	ldr	r2, [pc, #248]	; (8105df8 <HAL_DMA_IRQHandler+0xe1c>)
 8105d00:	4293      	cmp	r3, r2
 8105d02:	d040      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	4a3c      	ldr	r2, [pc, #240]	; (8105dfc <HAL_DMA_IRQHandler+0xe20>)
 8105d0a:	4293      	cmp	r3, r2
 8105d0c:	d03b      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	681b      	ldr	r3, [r3, #0]
 8105d12:	4a3b      	ldr	r2, [pc, #236]	; (8105e00 <HAL_DMA_IRQHandler+0xe24>)
 8105d14:	4293      	cmp	r3, r2
 8105d16:	d036      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	4a39      	ldr	r2, [pc, #228]	; (8105e04 <HAL_DMA_IRQHandler+0xe28>)
 8105d1e:	4293      	cmp	r3, r2
 8105d20:	d031      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	4a38      	ldr	r2, [pc, #224]	; (8105e08 <HAL_DMA_IRQHandler+0xe2c>)
 8105d28:	4293      	cmp	r3, r2
 8105d2a:	d02c      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	4a36      	ldr	r2, [pc, #216]	; (8105e0c <HAL_DMA_IRQHandler+0xe30>)
 8105d32:	4293      	cmp	r3, r2
 8105d34:	d027      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	4a35      	ldr	r2, [pc, #212]	; (8105e10 <HAL_DMA_IRQHandler+0xe34>)
 8105d3c:	4293      	cmp	r3, r2
 8105d3e:	d022      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	4a33      	ldr	r2, [pc, #204]	; (8105e14 <HAL_DMA_IRQHandler+0xe38>)
 8105d46:	4293      	cmp	r3, r2
 8105d48:	d01d      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	4a32      	ldr	r2, [pc, #200]	; (8105e18 <HAL_DMA_IRQHandler+0xe3c>)
 8105d50:	4293      	cmp	r3, r2
 8105d52:	d018      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	4a30      	ldr	r2, [pc, #192]	; (8105e1c <HAL_DMA_IRQHandler+0xe40>)
 8105d5a:	4293      	cmp	r3, r2
 8105d5c:	d013      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	4a2f      	ldr	r2, [pc, #188]	; (8105e20 <HAL_DMA_IRQHandler+0xe44>)
 8105d64:	4293      	cmp	r3, r2
 8105d66:	d00e      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	4a2d      	ldr	r2, [pc, #180]	; (8105e24 <HAL_DMA_IRQHandler+0xe48>)
 8105d6e:	4293      	cmp	r3, r2
 8105d70:	d009      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	4a2c      	ldr	r2, [pc, #176]	; (8105e28 <HAL_DMA_IRQHandler+0xe4c>)
 8105d78:	4293      	cmp	r3, r2
 8105d7a:	d004      	beq.n	8105d86 <HAL_DMA_IRQHandler+0xdaa>
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	4a2a      	ldr	r2, [pc, #168]	; (8105e2c <HAL_DMA_IRQHandler+0xe50>)
 8105d82:	4293      	cmp	r3, r2
 8105d84:	d108      	bne.n	8105d98 <HAL_DMA_IRQHandler+0xdbc>
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	681a      	ldr	r2, [r3, #0]
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	f022 021c 	bic.w	r2, r2, #28
 8105d94:	601a      	str	r2, [r3, #0]
 8105d96:	e007      	b.n	8105da8 <HAL_DMA_IRQHandler+0xdcc>
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	681a      	ldr	r2, [r3, #0]
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	f022 020e 	bic.w	r2, r2, #14
 8105da6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105dac:	f003 031f 	and.w	r3, r3, #31
 8105db0:	2201      	movs	r2, #1
 8105db2:	409a      	lsls	r2, r3
 8105db4:	69fb      	ldr	r3, [r7, #28]
 8105db6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	2201      	movs	r2, #1
 8105dbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	2200      	movs	r2, #0
 8105dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105dc6:	687b      	ldr	r3, [r7, #4]
 8105dc8:	2201      	movs	r2, #1
 8105dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105dd2:	2b00      	cmp	r3, #0
 8105dd4:	d009      	beq.n	8105dea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105dda:	6878      	ldr	r0, [r7, #4]
 8105ddc:	4798      	blx	r3
 8105dde:	e004      	b.n	8105dea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105de0:	bf00      	nop
 8105de2:	e002      	b.n	8105dea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105de4:	bf00      	nop
 8105de6:	e000      	b.n	8105dea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105de8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105dea:	3728      	adds	r7, #40	; 0x28
 8105dec:	46bd      	mov	sp, r7
 8105dee:	bd80      	pop	{r7, pc}
 8105df0:	40020010 	.word	0x40020010
 8105df4:	40020028 	.word	0x40020028
 8105df8:	40020040 	.word	0x40020040
 8105dfc:	40020058 	.word	0x40020058
 8105e00:	40020070 	.word	0x40020070
 8105e04:	40020088 	.word	0x40020088
 8105e08:	400200a0 	.word	0x400200a0
 8105e0c:	400200b8 	.word	0x400200b8
 8105e10:	40020410 	.word	0x40020410
 8105e14:	40020428 	.word	0x40020428
 8105e18:	40020440 	.word	0x40020440
 8105e1c:	40020458 	.word	0x40020458
 8105e20:	40020470 	.word	0x40020470
 8105e24:	40020488 	.word	0x40020488
 8105e28:	400204a0 	.word	0x400204a0
 8105e2c:	400204b8 	.word	0x400204b8

08105e30 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8105e30:	b480      	push	{r7}
 8105e32:	b083      	sub	sp, #12
 8105e34:	af00      	add	r7, sp, #0
 8105e36:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105e3e:	b2db      	uxtb	r3, r3
}
 8105e40:	4618      	mov	r0, r3
 8105e42:	370c      	adds	r7, #12
 8105e44:	46bd      	mov	sp, r7
 8105e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e4a:	4770      	bx	lr

08105e4c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8105e4c:	b480      	push	{r7}
 8105e4e:	b083      	sub	sp, #12
 8105e50:	af00      	add	r7, sp, #0
 8105e52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8105e58:	4618      	mov	r0, r3
 8105e5a:	370c      	adds	r7, #12
 8105e5c:	46bd      	mov	sp, r7
 8105e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e62:	4770      	bx	lr

08105e64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105e64:	b480      	push	{r7}
 8105e66:	b087      	sub	sp, #28
 8105e68:	af00      	add	r7, sp, #0
 8105e6a:	60f8      	str	r0, [r7, #12]
 8105e6c:	60b9      	str	r1, [r7, #8]
 8105e6e:	607a      	str	r2, [r7, #4]
 8105e70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105e72:	68fb      	ldr	r3, [r7, #12]
 8105e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105e78:	68fb      	ldr	r3, [r7, #12]
 8105e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105e7e:	68fb      	ldr	r3, [r7, #12]
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	4a84      	ldr	r2, [pc, #528]	; (8106094 <DMA_SetConfig+0x230>)
 8105e84:	4293      	cmp	r3, r2
 8105e86:	d072      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105e88:	68fb      	ldr	r3, [r7, #12]
 8105e8a:	681b      	ldr	r3, [r3, #0]
 8105e8c:	4a82      	ldr	r2, [pc, #520]	; (8106098 <DMA_SetConfig+0x234>)
 8105e8e:	4293      	cmp	r3, r2
 8105e90:	d06d      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105e92:	68fb      	ldr	r3, [r7, #12]
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	4a81      	ldr	r2, [pc, #516]	; (810609c <DMA_SetConfig+0x238>)
 8105e98:	4293      	cmp	r3, r2
 8105e9a:	d068      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	681b      	ldr	r3, [r3, #0]
 8105ea0:	4a7f      	ldr	r2, [pc, #508]	; (81060a0 <DMA_SetConfig+0x23c>)
 8105ea2:	4293      	cmp	r3, r2
 8105ea4:	d063      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	4a7e      	ldr	r2, [pc, #504]	; (81060a4 <DMA_SetConfig+0x240>)
 8105eac:	4293      	cmp	r3, r2
 8105eae:	d05e      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	4a7c      	ldr	r2, [pc, #496]	; (81060a8 <DMA_SetConfig+0x244>)
 8105eb6:	4293      	cmp	r3, r2
 8105eb8:	d059      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105eba:	68fb      	ldr	r3, [r7, #12]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	4a7b      	ldr	r2, [pc, #492]	; (81060ac <DMA_SetConfig+0x248>)
 8105ec0:	4293      	cmp	r3, r2
 8105ec2:	d054      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105ec4:	68fb      	ldr	r3, [r7, #12]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	4a79      	ldr	r2, [pc, #484]	; (81060b0 <DMA_SetConfig+0x24c>)
 8105eca:	4293      	cmp	r3, r2
 8105ecc:	d04f      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	4a78      	ldr	r2, [pc, #480]	; (81060b4 <DMA_SetConfig+0x250>)
 8105ed4:	4293      	cmp	r3, r2
 8105ed6:	d04a      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	4a76      	ldr	r2, [pc, #472]	; (81060b8 <DMA_SetConfig+0x254>)
 8105ede:	4293      	cmp	r3, r2
 8105ee0:	d045      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105ee2:	68fb      	ldr	r3, [r7, #12]
 8105ee4:	681b      	ldr	r3, [r3, #0]
 8105ee6:	4a75      	ldr	r2, [pc, #468]	; (81060bc <DMA_SetConfig+0x258>)
 8105ee8:	4293      	cmp	r3, r2
 8105eea:	d040      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105eec:	68fb      	ldr	r3, [r7, #12]
 8105eee:	681b      	ldr	r3, [r3, #0]
 8105ef0:	4a73      	ldr	r2, [pc, #460]	; (81060c0 <DMA_SetConfig+0x25c>)
 8105ef2:	4293      	cmp	r3, r2
 8105ef4:	d03b      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105ef6:	68fb      	ldr	r3, [r7, #12]
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	4a72      	ldr	r2, [pc, #456]	; (81060c4 <DMA_SetConfig+0x260>)
 8105efc:	4293      	cmp	r3, r2
 8105efe:	d036      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f00:	68fb      	ldr	r3, [r7, #12]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	4a70      	ldr	r2, [pc, #448]	; (81060c8 <DMA_SetConfig+0x264>)
 8105f06:	4293      	cmp	r3, r2
 8105f08:	d031      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f0a:	68fb      	ldr	r3, [r7, #12]
 8105f0c:	681b      	ldr	r3, [r3, #0]
 8105f0e:	4a6f      	ldr	r2, [pc, #444]	; (81060cc <DMA_SetConfig+0x268>)
 8105f10:	4293      	cmp	r3, r2
 8105f12:	d02c      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f14:	68fb      	ldr	r3, [r7, #12]
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	4a6d      	ldr	r2, [pc, #436]	; (81060d0 <DMA_SetConfig+0x26c>)
 8105f1a:	4293      	cmp	r3, r2
 8105f1c:	d027      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f1e:	68fb      	ldr	r3, [r7, #12]
 8105f20:	681b      	ldr	r3, [r3, #0]
 8105f22:	4a6c      	ldr	r2, [pc, #432]	; (81060d4 <DMA_SetConfig+0x270>)
 8105f24:	4293      	cmp	r3, r2
 8105f26:	d022      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f28:	68fb      	ldr	r3, [r7, #12]
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	4a6a      	ldr	r2, [pc, #424]	; (81060d8 <DMA_SetConfig+0x274>)
 8105f2e:	4293      	cmp	r3, r2
 8105f30:	d01d      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f32:	68fb      	ldr	r3, [r7, #12]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	4a69      	ldr	r2, [pc, #420]	; (81060dc <DMA_SetConfig+0x278>)
 8105f38:	4293      	cmp	r3, r2
 8105f3a:	d018      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f3c:	68fb      	ldr	r3, [r7, #12]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	4a67      	ldr	r2, [pc, #412]	; (81060e0 <DMA_SetConfig+0x27c>)
 8105f42:	4293      	cmp	r3, r2
 8105f44:	d013      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f46:	68fb      	ldr	r3, [r7, #12]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	4a66      	ldr	r2, [pc, #408]	; (81060e4 <DMA_SetConfig+0x280>)
 8105f4c:	4293      	cmp	r3, r2
 8105f4e:	d00e      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f50:	68fb      	ldr	r3, [r7, #12]
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	4a64      	ldr	r2, [pc, #400]	; (81060e8 <DMA_SetConfig+0x284>)
 8105f56:	4293      	cmp	r3, r2
 8105f58:	d009      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f5a:	68fb      	ldr	r3, [r7, #12]
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	4a63      	ldr	r2, [pc, #396]	; (81060ec <DMA_SetConfig+0x288>)
 8105f60:	4293      	cmp	r3, r2
 8105f62:	d004      	beq.n	8105f6e <DMA_SetConfig+0x10a>
 8105f64:	68fb      	ldr	r3, [r7, #12]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	4a61      	ldr	r2, [pc, #388]	; (81060f0 <DMA_SetConfig+0x28c>)
 8105f6a:	4293      	cmp	r3, r2
 8105f6c:	d101      	bne.n	8105f72 <DMA_SetConfig+0x10e>
 8105f6e:	2301      	movs	r3, #1
 8105f70:	e000      	b.n	8105f74 <DMA_SetConfig+0x110>
 8105f72:	2300      	movs	r3, #0
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d00d      	beq.n	8105f94 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105f78:	68fb      	ldr	r3, [r7, #12]
 8105f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f7c:	68fa      	ldr	r2, [r7, #12]
 8105f7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105f80:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8105f82:	68fb      	ldr	r3, [r7, #12]
 8105f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	d004      	beq.n	8105f94 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105f8a:	68fb      	ldr	r3, [r7, #12]
 8105f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f8e:	68fa      	ldr	r2, [r7, #12]
 8105f90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105f92:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105f94:	68fb      	ldr	r3, [r7, #12]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	4a3e      	ldr	r2, [pc, #248]	; (8106094 <DMA_SetConfig+0x230>)
 8105f9a:	4293      	cmp	r3, r2
 8105f9c:	d04a      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105f9e:	68fb      	ldr	r3, [r7, #12]
 8105fa0:	681b      	ldr	r3, [r3, #0]
 8105fa2:	4a3d      	ldr	r2, [pc, #244]	; (8106098 <DMA_SetConfig+0x234>)
 8105fa4:	4293      	cmp	r3, r2
 8105fa6:	d045      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fa8:	68fb      	ldr	r3, [r7, #12]
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	4a3b      	ldr	r2, [pc, #236]	; (810609c <DMA_SetConfig+0x238>)
 8105fae:	4293      	cmp	r3, r2
 8105fb0:	d040      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fb2:	68fb      	ldr	r3, [r7, #12]
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	4a3a      	ldr	r2, [pc, #232]	; (81060a0 <DMA_SetConfig+0x23c>)
 8105fb8:	4293      	cmp	r3, r2
 8105fba:	d03b      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fbc:	68fb      	ldr	r3, [r7, #12]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	4a38      	ldr	r2, [pc, #224]	; (81060a4 <DMA_SetConfig+0x240>)
 8105fc2:	4293      	cmp	r3, r2
 8105fc4:	d036      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fc6:	68fb      	ldr	r3, [r7, #12]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	4a37      	ldr	r2, [pc, #220]	; (81060a8 <DMA_SetConfig+0x244>)
 8105fcc:	4293      	cmp	r3, r2
 8105fce:	d031      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fd0:	68fb      	ldr	r3, [r7, #12]
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	4a35      	ldr	r2, [pc, #212]	; (81060ac <DMA_SetConfig+0x248>)
 8105fd6:	4293      	cmp	r3, r2
 8105fd8:	d02c      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fda:	68fb      	ldr	r3, [r7, #12]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	4a34      	ldr	r2, [pc, #208]	; (81060b0 <DMA_SetConfig+0x24c>)
 8105fe0:	4293      	cmp	r3, r2
 8105fe2:	d027      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fe4:	68fb      	ldr	r3, [r7, #12]
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	4a32      	ldr	r2, [pc, #200]	; (81060b4 <DMA_SetConfig+0x250>)
 8105fea:	4293      	cmp	r3, r2
 8105fec:	d022      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105fee:	68fb      	ldr	r3, [r7, #12]
 8105ff0:	681b      	ldr	r3, [r3, #0]
 8105ff2:	4a31      	ldr	r2, [pc, #196]	; (81060b8 <DMA_SetConfig+0x254>)
 8105ff4:	4293      	cmp	r3, r2
 8105ff6:	d01d      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8105ff8:	68fb      	ldr	r3, [r7, #12]
 8105ffa:	681b      	ldr	r3, [r3, #0]
 8105ffc:	4a2f      	ldr	r2, [pc, #188]	; (81060bc <DMA_SetConfig+0x258>)
 8105ffe:	4293      	cmp	r3, r2
 8106000:	d018      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8106002:	68fb      	ldr	r3, [r7, #12]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	4a2e      	ldr	r2, [pc, #184]	; (81060c0 <DMA_SetConfig+0x25c>)
 8106008:	4293      	cmp	r3, r2
 810600a:	d013      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 810600c:	68fb      	ldr	r3, [r7, #12]
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	4a2c      	ldr	r2, [pc, #176]	; (81060c4 <DMA_SetConfig+0x260>)
 8106012:	4293      	cmp	r3, r2
 8106014:	d00e      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8106016:	68fb      	ldr	r3, [r7, #12]
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	4a2b      	ldr	r2, [pc, #172]	; (81060c8 <DMA_SetConfig+0x264>)
 810601c:	4293      	cmp	r3, r2
 810601e:	d009      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 8106020:	68fb      	ldr	r3, [r7, #12]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	4a29      	ldr	r2, [pc, #164]	; (81060cc <DMA_SetConfig+0x268>)
 8106026:	4293      	cmp	r3, r2
 8106028:	d004      	beq.n	8106034 <DMA_SetConfig+0x1d0>
 810602a:	68fb      	ldr	r3, [r7, #12]
 810602c:	681b      	ldr	r3, [r3, #0]
 810602e:	4a28      	ldr	r2, [pc, #160]	; (81060d0 <DMA_SetConfig+0x26c>)
 8106030:	4293      	cmp	r3, r2
 8106032:	d101      	bne.n	8106038 <DMA_SetConfig+0x1d4>
 8106034:	2301      	movs	r3, #1
 8106036:	e000      	b.n	810603a <DMA_SetConfig+0x1d6>
 8106038:	2300      	movs	r3, #0
 810603a:	2b00      	cmp	r3, #0
 810603c:	d05a      	beq.n	81060f4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810603e:	68fb      	ldr	r3, [r7, #12]
 8106040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106042:	f003 031f 	and.w	r3, r3, #31
 8106046:	223f      	movs	r2, #63	; 0x3f
 8106048:	409a      	lsls	r2, r3
 810604a:	697b      	ldr	r3, [r7, #20]
 810604c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810604e:	68fb      	ldr	r3, [r7, #12]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	681a      	ldr	r2, [r3, #0]
 8106054:	68fb      	ldr	r3, [r7, #12]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810605c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810605e:	68fb      	ldr	r3, [r7, #12]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	683a      	ldr	r2, [r7, #0]
 8106064:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106066:	68fb      	ldr	r3, [r7, #12]
 8106068:	689b      	ldr	r3, [r3, #8]
 810606a:	2b40      	cmp	r3, #64	; 0x40
 810606c:	d108      	bne.n	8106080 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810606e:	68fb      	ldr	r3, [r7, #12]
 8106070:	681b      	ldr	r3, [r3, #0]
 8106072:	687a      	ldr	r2, [r7, #4]
 8106074:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8106076:	68fb      	ldr	r3, [r7, #12]
 8106078:	681b      	ldr	r3, [r3, #0]
 810607a:	68ba      	ldr	r2, [r7, #8]
 810607c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810607e:	e087      	b.n	8106190 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8106080:	68fb      	ldr	r3, [r7, #12]
 8106082:	681b      	ldr	r3, [r3, #0]
 8106084:	68ba      	ldr	r2, [r7, #8]
 8106086:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8106088:	68fb      	ldr	r3, [r7, #12]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	687a      	ldr	r2, [r7, #4]
 810608e:	60da      	str	r2, [r3, #12]
}
 8106090:	e07e      	b.n	8106190 <DMA_SetConfig+0x32c>
 8106092:	bf00      	nop
 8106094:	40020010 	.word	0x40020010
 8106098:	40020028 	.word	0x40020028
 810609c:	40020040 	.word	0x40020040
 81060a0:	40020058 	.word	0x40020058
 81060a4:	40020070 	.word	0x40020070
 81060a8:	40020088 	.word	0x40020088
 81060ac:	400200a0 	.word	0x400200a0
 81060b0:	400200b8 	.word	0x400200b8
 81060b4:	40020410 	.word	0x40020410
 81060b8:	40020428 	.word	0x40020428
 81060bc:	40020440 	.word	0x40020440
 81060c0:	40020458 	.word	0x40020458
 81060c4:	40020470 	.word	0x40020470
 81060c8:	40020488 	.word	0x40020488
 81060cc:	400204a0 	.word	0x400204a0
 81060d0:	400204b8 	.word	0x400204b8
 81060d4:	58025408 	.word	0x58025408
 81060d8:	5802541c 	.word	0x5802541c
 81060dc:	58025430 	.word	0x58025430
 81060e0:	58025444 	.word	0x58025444
 81060e4:	58025458 	.word	0x58025458
 81060e8:	5802546c 	.word	0x5802546c
 81060ec:	58025480 	.word	0x58025480
 81060f0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81060f4:	68fb      	ldr	r3, [r7, #12]
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	4a28      	ldr	r2, [pc, #160]	; (810619c <DMA_SetConfig+0x338>)
 81060fa:	4293      	cmp	r3, r2
 81060fc:	d022      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 81060fe:	68fb      	ldr	r3, [r7, #12]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	4a27      	ldr	r2, [pc, #156]	; (81061a0 <DMA_SetConfig+0x33c>)
 8106104:	4293      	cmp	r3, r2
 8106106:	d01d      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 8106108:	68fb      	ldr	r3, [r7, #12]
 810610a:	681b      	ldr	r3, [r3, #0]
 810610c:	4a25      	ldr	r2, [pc, #148]	; (81061a4 <DMA_SetConfig+0x340>)
 810610e:	4293      	cmp	r3, r2
 8106110:	d018      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 8106112:	68fb      	ldr	r3, [r7, #12]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	4a24      	ldr	r2, [pc, #144]	; (81061a8 <DMA_SetConfig+0x344>)
 8106118:	4293      	cmp	r3, r2
 810611a:	d013      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 810611c:	68fb      	ldr	r3, [r7, #12]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	4a22      	ldr	r2, [pc, #136]	; (81061ac <DMA_SetConfig+0x348>)
 8106122:	4293      	cmp	r3, r2
 8106124:	d00e      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 8106126:	68fb      	ldr	r3, [r7, #12]
 8106128:	681b      	ldr	r3, [r3, #0]
 810612a:	4a21      	ldr	r2, [pc, #132]	; (81061b0 <DMA_SetConfig+0x34c>)
 810612c:	4293      	cmp	r3, r2
 810612e:	d009      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 8106130:	68fb      	ldr	r3, [r7, #12]
 8106132:	681b      	ldr	r3, [r3, #0]
 8106134:	4a1f      	ldr	r2, [pc, #124]	; (81061b4 <DMA_SetConfig+0x350>)
 8106136:	4293      	cmp	r3, r2
 8106138:	d004      	beq.n	8106144 <DMA_SetConfig+0x2e0>
 810613a:	68fb      	ldr	r3, [r7, #12]
 810613c:	681b      	ldr	r3, [r3, #0]
 810613e:	4a1e      	ldr	r2, [pc, #120]	; (81061b8 <DMA_SetConfig+0x354>)
 8106140:	4293      	cmp	r3, r2
 8106142:	d101      	bne.n	8106148 <DMA_SetConfig+0x2e4>
 8106144:	2301      	movs	r3, #1
 8106146:	e000      	b.n	810614a <DMA_SetConfig+0x2e6>
 8106148:	2300      	movs	r3, #0
 810614a:	2b00      	cmp	r3, #0
 810614c:	d020      	beq.n	8106190 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810614e:	68fb      	ldr	r3, [r7, #12]
 8106150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106152:	f003 031f 	and.w	r3, r3, #31
 8106156:	2201      	movs	r2, #1
 8106158:	409a      	lsls	r2, r3
 810615a:	693b      	ldr	r3, [r7, #16]
 810615c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810615e:	68fb      	ldr	r3, [r7, #12]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	683a      	ldr	r2, [r7, #0]
 8106164:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106166:	68fb      	ldr	r3, [r7, #12]
 8106168:	689b      	ldr	r3, [r3, #8]
 810616a:	2b40      	cmp	r3, #64	; 0x40
 810616c:	d108      	bne.n	8106180 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810616e:	68fb      	ldr	r3, [r7, #12]
 8106170:	681b      	ldr	r3, [r3, #0]
 8106172:	687a      	ldr	r2, [r7, #4]
 8106174:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8106176:	68fb      	ldr	r3, [r7, #12]
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	68ba      	ldr	r2, [r7, #8]
 810617c:	60da      	str	r2, [r3, #12]
}
 810617e:	e007      	b.n	8106190 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106180:	68fb      	ldr	r3, [r7, #12]
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	68ba      	ldr	r2, [r7, #8]
 8106186:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8106188:	68fb      	ldr	r3, [r7, #12]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	687a      	ldr	r2, [r7, #4]
 810618e:	60da      	str	r2, [r3, #12]
}
 8106190:	bf00      	nop
 8106192:	371c      	adds	r7, #28
 8106194:	46bd      	mov	sp, r7
 8106196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810619a:	4770      	bx	lr
 810619c:	58025408 	.word	0x58025408
 81061a0:	5802541c 	.word	0x5802541c
 81061a4:	58025430 	.word	0x58025430
 81061a8:	58025444 	.word	0x58025444
 81061ac:	58025458 	.word	0x58025458
 81061b0:	5802546c 	.word	0x5802546c
 81061b4:	58025480 	.word	0x58025480
 81061b8:	58025494 	.word	0x58025494

081061bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81061bc:	b480      	push	{r7}
 81061be:	b085      	sub	sp, #20
 81061c0:	af00      	add	r7, sp, #0
 81061c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	4a43      	ldr	r2, [pc, #268]	; (81062d8 <DMA_CalcBaseAndBitshift+0x11c>)
 81061ca:	4293      	cmp	r3, r2
 81061cc:	d04a      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	681b      	ldr	r3, [r3, #0]
 81061d2:	4a42      	ldr	r2, [pc, #264]	; (81062dc <DMA_CalcBaseAndBitshift+0x120>)
 81061d4:	4293      	cmp	r3, r2
 81061d6:	d045      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	4a40      	ldr	r2, [pc, #256]	; (81062e0 <DMA_CalcBaseAndBitshift+0x124>)
 81061de:	4293      	cmp	r3, r2
 81061e0:	d040      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	681b      	ldr	r3, [r3, #0]
 81061e6:	4a3f      	ldr	r2, [pc, #252]	; (81062e4 <DMA_CalcBaseAndBitshift+0x128>)
 81061e8:	4293      	cmp	r3, r2
 81061ea:	d03b      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	4a3d      	ldr	r2, [pc, #244]	; (81062e8 <DMA_CalcBaseAndBitshift+0x12c>)
 81061f2:	4293      	cmp	r3, r2
 81061f4:	d036      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	4a3c      	ldr	r2, [pc, #240]	; (81062ec <DMA_CalcBaseAndBitshift+0x130>)
 81061fc:	4293      	cmp	r3, r2
 81061fe:	d031      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	4a3a      	ldr	r2, [pc, #232]	; (81062f0 <DMA_CalcBaseAndBitshift+0x134>)
 8106206:	4293      	cmp	r3, r2
 8106208:	d02c      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	4a39      	ldr	r2, [pc, #228]	; (81062f4 <DMA_CalcBaseAndBitshift+0x138>)
 8106210:	4293      	cmp	r3, r2
 8106212:	d027      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	4a37      	ldr	r2, [pc, #220]	; (81062f8 <DMA_CalcBaseAndBitshift+0x13c>)
 810621a:	4293      	cmp	r3, r2
 810621c:	d022      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	4a36      	ldr	r2, [pc, #216]	; (81062fc <DMA_CalcBaseAndBitshift+0x140>)
 8106224:	4293      	cmp	r3, r2
 8106226:	d01d      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	4a34      	ldr	r2, [pc, #208]	; (8106300 <DMA_CalcBaseAndBitshift+0x144>)
 810622e:	4293      	cmp	r3, r2
 8106230:	d018      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	4a33      	ldr	r2, [pc, #204]	; (8106304 <DMA_CalcBaseAndBitshift+0x148>)
 8106238:	4293      	cmp	r3, r2
 810623a:	d013      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	4a31      	ldr	r2, [pc, #196]	; (8106308 <DMA_CalcBaseAndBitshift+0x14c>)
 8106242:	4293      	cmp	r3, r2
 8106244:	d00e      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	681b      	ldr	r3, [r3, #0]
 810624a:	4a30      	ldr	r2, [pc, #192]	; (810630c <DMA_CalcBaseAndBitshift+0x150>)
 810624c:	4293      	cmp	r3, r2
 810624e:	d009      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	4a2e      	ldr	r2, [pc, #184]	; (8106310 <DMA_CalcBaseAndBitshift+0x154>)
 8106256:	4293      	cmp	r3, r2
 8106258:	d004      	beq.n	8106264 <DMA_CalcBaseAndBitshift+0xa8>
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	4a2d      	ldr	r2, [pc, #180]	; (8106314 <DMA_CalcBaseAndBitshift+0x158>)
 8106260:	4293      	cmp	r3, r2
 8106262:	d101      	bne.n	8106268 <DMA_CalcBaseAndBitshift+0xac>
 8106264:	2301      	movs	r3, #1
 8106266:	e000      	b.n	810626a <DMA_CalcBaseAndBitshift+0xae>
 8106268:	2300      	movs	r3, #0
 810626a:	2b00      	cmp	r3, #0
 810626c:	d026      	beq.n	81062bc <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	b2db      	uxtb	r3, r3
 8106274:	3b10      	subs	r3, #16
 8106276:	4a28      	ldr	r2, [pc, #160]	; (8106318 <DMA_CalcBaseAndBitshift+0x15c>)
 8106278:	fba2 2303 	umull	r2, r3, r2, r3
 810627c:	091b      	lsrs	r3, r3, #4
 810627e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106280:	68fb      	ldr	r3, [r7, #12]
 8106282:	f003 0307 	and.w	r3, r3, #7
 8106286:	4a25      	ldr	r2, [pc, #148]	; (810631c <DMA_CalcBaseAndBitshift+0x160>)
 8106288:	5cd3      	ldrb	r3, [r2, r3]
 810628a:	461a      	mov	r2, r3
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106290:	68fb      	ldr	r3, [r7, #12]
 8106292:	2b03      	cmp	r3, #3
 8106294:	d909      	bls.n	81062aa <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106296:	687b      	ldr	r3, [r7, #4]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810629e:	f023 0303 	bic.w	r3, r3, #3
 81062a2:	1d1a      	adds	r2, r3, #4
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	659a      	str	r2, [r3, #88]	; 0x58
 81062a8:	e00e      	b.n	81062c8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81062aa:	687b      	ldr	r3, [r7, #4]
 81062ac:	681b      	ldr	r3, [r3, #0]
 81062ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81062b2:	f023 0303 	bic.w	r3, r3, #3
 81062b6:	687a      	ldr	r2, [r7, #4]
 81062b8:	6593      	str	r3, [r2, #88]	; 0x58
 81062ba:	e005      	b.n	81062c8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	681b      	ldr	r3, [r3, #0]
 81062c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81062cc:	4618      	mov	r0, r3
 81062ce:	3714      	adds	r7, #20
 81062d0:	46bd      	mov	sp, r7
 81062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062d6:	4770      	bx	lr
 81062d8:	40020010 	.word	0x40020010
 81062dc:	40020028 	.word	0x40020028
 81062e0:	40020040 	.word	0x40020040
 81062e4:	40020058 	.word	0x40020058
 81062e8:	40020070 	.word	0x40020070
 81062ec:	40020088 	.word	0x40020088
 81062f0:	400200a0 	.word	0x400200a0
 81062f4:	400200b8 	.word	0x400200b8
 81062f8:	40020410 	.word	0x40020410
 81062fc:	40020428 	.word	0x40020428
 8106300:	40020440 	.word	0x40020440
 8106304:	40020458 	.word	0x40020458
 8106308:	40020470 	.word	0x40020470
 810630c:	40020488 	.word	0x40020488
 8106310:	400204a0 	.word	0x400204a0
 8106314:	400204b8 	.word	0x400204b8
 8106318:	aaaaaaab 	.word	0xaaaaaaab
 810631c:	0810d57c 	.word	0x0810d57c

08106320 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106320:	b480      	push	{r7}
 8106322:	b085      	sub	sp, #20
 8106324:	af00      	add	r7, sp, #0
 8106326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106328:	2300      	movs	r3, #0
 810632a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	699b      	ldr	r3, [r3, #24]
 8106330:	2b00      	cmp	r3, #0
 8106332:	d120      	bne.n	8106376 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106338:	2b03      	cmp	r3, #3
 810633a:	d858      	bhi.n	81063ee <DMA_CheckFifoParam+0xce>
 810633c:	a201      	add	r2, pc, #4	; (adr r2, 8106344 <DMA_CheckFifoParam+0x24>)
 810633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106342:	bf00      	nop
 8106344:	08106355 	.word	0x08106355
 8106348:	08106367 	.word	0x08106367
 810634c:	08106355 	.word	0x08106355
 8106350:	081063ef 	.word	0x081063ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810635c:	2b00      	cmp	r3, #0
 810635e:	d048      	beq.n	81063f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106360:	2301      	movs	r3, #1
 8106362:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106364:	e045      	b.n	81063f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810636a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810636e:	d142      	bne.n	81063f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106370:	2301      	movs	r3, #1
 8106372:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106374:	e03f      	b.n	81063f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	699b      	ldr	r3, [r3, #24]
 810637a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810637e:	d123      	bne.n	81063c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106384:	2b03      	cmp	r3, #3
 8106386:	d838      	bhi.n	81063fa <DMA_CheckFifoParam+0xda>
 8106388:	a201      	add	r2, pc, #4	; (adr r2, 8106390 <DMA_CheckFifoParam+0x70>)
 810638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810638e:	bf00      	nop
 8106390:	081063a1 	.word	0x081063a1
 8106394:	081063a7 	.word	0x081063a7
 8106398:	081063a1 	.word	0x081063a1
 810639c:	081063b9 	.word	0x081063b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81063a0:	2301      	movs	r3, #1
 81063a2:	73fb      	strb	r3, [r7, #15]
        break;
 81063a4:	e030      	b.n	8106408 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81063ae:	2b00      	cmp	r3, #0
 81063b0:	d025      	beq.n	81063fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81063b2:	2301      	movs	r3, #1
 81063b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81063b6:	e022      	b.n	81063fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81063c0:	d11f      	bne.n	8106402 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81063c2:	2301      	movs	r3, #1
 81063c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81063c6:	e01c      	b.n	8106402 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063cc:	2b02      	cmp	r3, #2
 81063ce:	d902      	bls.n	81063d6 <DMA_CheckFifoParam+0xb6>
 81063d0:	2b03      	cmp	r3, #3
 81063d2:	d003      	beq.n	81063dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81063d4:	e018      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81063d6:	2301      	movs	r3, #1
 81063d8:	73fb      	strb	r3, [r7, #15]
        break;
 81063da:	e015      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81063e4:	2b00      	cmp	r3, #0
 81063e6:	d00e      	beq.n	8106406 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81063e8:	2301      	movs	r3, #1
 81063ea:	73fb      	strb	r3, [r7, #15]
    break;
 81063ec:	e00b      	b.n	8106406 <DMA_CheckFifoParam+0xe6>
        break;
 81063ee:	bf00      	nop
 81063f0:	e00a      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        break;
 81063f2:	bf00      	nop
 81063f4:	e008      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        break;
 81063f6:	bf00      	nop
 81063f8:	e006      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        break;
 81063fa:	bf00      	nop
 81063fc:	e004      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        break;
 81063fe:	bf00      	nop
 8106400:	e002      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
        break;
 8106402:	bf00      	nop
 8106404:	e000      	b.n	8106408 <DMA_CheckFifoParam+0xe8>
    break;
 8106406:	bf00      	nop
    }
  }

  return status;
 8106408:	7bfb      	ldrb	r3, [r7, #15]
}
 810640a:	4618      	mov	r0, r3
 810640c:	3714      	adds	r7, #20
 810640e:	46bd      	mov	sp, r7
 8106410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106414:	4770      	bx	lr
 8106416:	bf00      	nop

08106418 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106418:	b480      	push	{r7}
 810641a:	b085      	sub	sp, #20
 810641c:	af00      	add	r7, sp, #0
 810641e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	681b      	ldr	r3, [r3, #0]
 810642a:	4a3a      	ldr	r2, [pc, #232]	; (8106514 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810642c:	4293      	cmp	r3, r2
 810642e:	d022      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	4a38      	ldr	r2, [pc, #224]	; (8106518 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106436:	4293      	cmp	r3, r2
 8106438:	d01d      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	4a37      	ldr	r2, [pc, #220]	; (810651c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106440:	4293      	cmp	r3, r2
 8106442:	d018      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	681b      	ldr	r3, [r3, #0]
 8106448:	4a35      	ldr	r2, [pc, #212]	; (8106520 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810644a:	4293      	cmp	r3, r2
 810644c:	d013      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	681b      	ldr	r3, [r3, #0]
 8106452:	4a34      	ldr	r2, [pc, #208]	; (8106524 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106454:	4293      	cmp	r3, r2
 8106456:	d00e      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	681b      	ldr	r3, [r3, #0]
 810645c:	4a32      	ldr	r2, [pc, #200]	; (8106528 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810645e:	4293      	cmp	r3, r2
 8106460:	d009      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	4a31      	ldr	r2, [pc, #196]	; (810652c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106468:	4293      	cmp	r3, r2
 810646a:	d004      	beq.n	8106476 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	4a2f      	ldr	r2, [pc, #188]	; (8106530 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106472:	4293      	cmp	r3, r2
 8106474:	d101      	bne.n	810647a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106476:	2301      	movs	r3, #1
 8106478:	e000      	b.n	810647c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810647a:	2300      	movs	r3, #0
 810647c:	2b00      	cmp	r3, #0
 810647e:	d01c      	beq.n	81064ba <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	b2db      	uxtb	r3, r3
 8106486:	3b08      	subs	r3, #8
 8106488:	4a2a      	ldr	r2, [pc, #168]	; (8106534 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810648a:	fba2 2303 	umull	r2, r3, r2, r3
 810648e:	091b      	lsrs	r3, r3, #4
 8106490:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106492:	68fb      	ldr	r3, [r7, #12]
 8106494:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106498:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810649c:	009b      	lsls	r3, r3, #2
 810649e:	461a      	mov	r2, r3
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	4a24      	ldr	r2, [pc, #144]	; (8106538 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81064a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81064aa:	68fb      	ldr	r3, [r7, #12]
 81064ac:	f003 031f 	and.w	r3, r3, #31
 81064b0:	2201      	movs	r2, #1
 81064b2:	409a      	lsls	r2, r3
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81064b8:	e026      	b.n	8106508 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	681b      	ldr	r3, [r3, #0]
 81064be:	b2db      	uxtb	r3, r3
 81064c0:	3b10      	subs	r3, #16
 81064c2:	4a1e      	ldr	r2, [pc, #120]	; (810653c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81064c4:	fba2 2303 	umull	r2, r3, r2, r3
 81064c8:	091b      	lsrs	r3, r3, #4
 81064ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81064cc:	68bb      	ldr	r3, [r7, #8]
 81064ce:	4a1c      	ldr	r2, [pc, #112]	; (8106540 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81064d0:	4293      	cmp	r3, r2
 81064d2:	d806      	bhi.n	81064e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81064d4:	68bb      	ldr	r3, [r7, #8]
 81064d6:	4a1b      	ldr	r2, [pc, #108]	; (8106544 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81064d8:	4293      	cmp	r3, r2
 81064da:	d902      	bls.n	81064e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81064dc:	68fb      	ldr	r3, [r7, #12]
 81064de:	3308      	adds	r3, #8
 81064e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81064e2:	68fb      	ldr	r3, [r7, #12]
 81064e4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81064e8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81064ec:	009b      	lsls	r3, r3, #2
 81064ee:	461a      	mov	r2, r3
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	4a14      	ldr	r2, [pc, #80]	; (8106548 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81064f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	f003 031f 	and.w	r3, r3, #31
 8106500:	2201      	movs	r2, #1
 8106502:	409a      	lsls	r2, r3
 8106504:	687b      	ldr	r3, [r7, #4]
 8106506:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106508:	bf00      	nop
 810650a:	3714      	adds	r7, #20
 810650c:	46bd      	mov	sp, r7
 810650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106512:	4770      	bx	lr
 8106514:	58025408 	.word	0x58025408
 8106518:	5802541c 	.word	0x5802541c
 810651c:	58025430 	.word	0x58025430
 8106520:	58025444 	.word	0x58025444
 8106524:	58025458 	.word	0x58025458
 8106528:	5802546c 	.word	0x5802546c
 810652c:	58025480 	.word	0x58025480
 8106530:	58025494 	.word	0x58025494
 8106534:	cccccccd 	.word	0xcccccccd
 8106538:	58025880 	.word	0x58025880
 810653c:	aaaaaaab 	.word	0xaaaaaaab
 8106540:	400204b8 	.word	0x400204b8
 8106544:	4002040f 	.word	0x4002040f
 8106548:	40020880 	.word	0x40020880

0810654c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810654c:	b480      	push	{r7}
 810654e:	b085      	sub	sp, #20
 8106550:	af00      	add	r7, sp, #0
 8106552:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	685b      	ldr	r3, [r3, #4]
 8106558:	b2db      	uxtb	r3, r3
 810655a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810655c:	68fb      	ldr	r3, [r7, #12]
 810655e:	2b00      	cmp	r3, #0
 8106560:	d04a      	beq.n	81065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106562:	68fb      	ldr	r3, [r7, #12]
 8106564:	2b08      	cmp	r3, #8
 8106566:	d847      	bhi.n	81065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	681b      	ldr	r3, [r3, #0]
 810656c:	4a25      	ldr	r2, [pc, #148]	; (8106604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810656e:	4293      	cmp	r3, r2
 8106570:	d022      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	681b      	ldr	r3, [r3, #0]
 8106576:	4a24      	ldr	r2, [pc, #144]	; (8106608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106578:	4293      	cmp	r3, r2
 810657a:	d01d      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	681b      	ldr	r3, [r3, #0]
 8106580:	4a22      	ldr	r2, [pc, #136]	; (810660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106582:	4293      	cmp	r3, r2
 8106584:	d018      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	681b      	ldr	r3, [r3, #0]
 810658a:	4a21      	ldr	r2, [pc, #132]	; (8106610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810658c:	4293      	cmp	r3, r2
 810658e:	d013      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106590:	687b      	ldr	r3, [r7, #4]
 8106592:	681b      	ldr	r3, [r3, #0]
 8106594:	4a1f      	ldr	r2, [pc, #124]	; (8106614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106596:	4293      	cmp	r3, r2
 8106598:	d00e      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	681b      	ldr	r3, [r3, #0]
 810659e:	4a1e      	ldr	r2, [pc, #120]	; (8106618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81065a0:	4293      	cmp	r3, r2
 81065a2:	d009      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	681b      	ldr	r3, [r3, #0]
 81065a8:	4a1c      	ldr	r2, [pc, #112]	; (810661c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81065aa:	4293      	cmp	r3, r2
 81065ac:	d004      	beq.n	81065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	681b      	ldr	r3, [r3, #0]
 81065b2:	4a1b      	ldr	r2, [pc, #108]	; (8106620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81065b4:	4293      	cmp	r3, r2
 81065b6:	d101      	bne.n	81065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81065b8:	2301      	movs	r3, #1
 81065ba:	e000      	b.n	81065be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81065bc:	2300      	movs	r3, #0
 81065be:	2b00      	cmp	r3, #0
 81065c0:	d00a      	beq.n	81065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81065c2:	68fa      	ldr	r2, [r7, #12]
 81065c4:	4b17      	ldr	r3, [pc, #92]	; (8106624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81065c6:	4413      	add	r3, r2
 81065c8:	009b      	lsls	r3, r3, #2
 81065ca:	461a      	mov	r2, r3
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	4a15      	ldr	r2, [pc, #84]	; (8106628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81065d4:	671a      	str	r2, [r3, #112]	; 0x70
 81065d6:	e009      	b.n	81065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81065d8:	68fa      	ldr	r2, [r7, #12]
 81065da:	4b14      	ldr	r3, [pc, #80]	; (810662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81065dc:	4413      	add	r3, r2
 81065de:	009b      	lsls	r3, r3, #2
 81065e0:	461a      	mov	r2, r3
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	4a11      	ldr	r2, [pc, #68]	; (8106630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81065ea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81065ec:	68fb      	ldr	r3, [r7, #12]
 81065ee:	3b01      	subs	r3, #1
 81065f0:	2201      	movs	r2, #1
 81065f2:	409a      	lsls	r2, r3
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81065f8:	bf00      	nop
 81065fa:	3714      	adds	r7, #20
 81065fc:	46bd      	mov	sp, r7
 81065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106602:	4770      	bx	lr
 8106604:	58025408 	.word	0x58025408
 8106608:	5802541c 	.word	0x5802541c
 810660c:	58025430 	.word	0x58025430
 8106610:	58025444 	.word	0x58025444
 8106614:	58025458 	.word	0x58025458
 8106618:	5802546c 	.word	0x5802546c
 810661c:	58025480 	.word	0x58025480
 8106620:	58025494 	.word	0x58025494
 8106624:	1600963f 	.word	0x1600963f
 8106628:	58025940 	.word	0x58025940
 810662c:	1000823f 	.word	0x1000823f
 8106630:	40020940 	.word	0x40020940

08106634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106634:	b480      	push	{r7}
 8106636:	b089      	sub	sp, #36	; 0x24
 8106638:	af00      	add	r7, sp, #0
 810663a:	6078      	str	r0, [r7, #4]
 810663c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810663e:	2300      	movs	r3, #0
 8106640:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106642:	4b89      	ldr	r3, [pc, #548]	; (8106868 <HAL_GPIO_Init+0x234>)
 8106644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106646:	e194      	b.n	8106972 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106648:	683b      	ldr	r3, [r7, #0]
 810664a:	681a      	ldr	r2, [r3, #0]
 810664c:	2101      	movs	r1, #1
 810664e:	69fb      	ldr	r3, [r7, #28]
 8106650:	fa01 f303 	lsl.w	r3, r1, r3
 8106654:	4013      	ands	r3, r2
 8106656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106658:	693b      	ldr	r3, [r7, #16]
 810665a:	2b00      	cmp	r3, #0
 810665c:	f000 8186 	beq.w	810696c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106660:	683b      	ldr	r3, [r7, #0]
 8106662:	685b      	ldr	r3, [r3, #4]
 8106664:	2b01      	cmp	r3, #1
 8106666:	d00b      	beq.n	8106680 <HAL_GPIO_Init+0x4c>
 8106668:	683b      	ldr	r3, [r7, #0]
 810666a:	685b      	ldr	r3, [r3, #4]
 810666c:	2b02      	cmp	r3, #2
 810666e:	d007      	beq.n	8106680 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106670:	683b      	ldr	r3, [r7, #0]
 8106672:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106674:	2b11      	cmp	r3, #17
 8106676:	d003      	beq.n	8106680 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106678:	683b      	ldr	r3, [r7, #0]
 810667a:	685b      	ldr	r3, [r3, #4]
 810667c:	2b12      	cmp	r3, #18
 810667e:	d130      	bne.n	81066e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	689b      	ldr	r3, [r3, #8]
 8106684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106686:	69fb      	ldr	r3, [r7, #28]
 8106688:	005b      	lsls	r3, r3, #1
 810668a:	2203      	movs	r2, #3
 810668c:	fa02 f303 	lsl.w	r3, r2, r3
 8106690:	43db      	mvns	r3, r3
 8106692:	69ba      	ldr	r2, [r7, #24]
 8106694:	4013      	ands	r3, r2
 8106696:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106698:	683b      	ldr	r3, [r7, #0]
 810669a:	68da      	ldr	r2, [r3, #12]
 810669c:	69fb      	ldr	r3, [r7, #28]
 810669e:	005b      	lsls	r3, r3, #1
 81066a0:	fa02 f303 	lsl.w	r3, r2, r3
 81066a4:	69ba      	ldr	r2, [r7, #24]
 81066a6:	4313      	orrs	r3, r2
 81066a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	69ba      	ldr	r2, [r7, #24]
 81066ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	685b      	ldr	r3, [r3, #4]
 81066b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81066b6:	2201      	movs	r2, #1
 81066b8:	69fb      	ldr	r3, [r7, #28]
 81066ba:	fa02 f303 	lsl.w	r3, r2, r3
 81066be:	43db      	mvns	r3, r3
 81066c0:	69ba      	ldr	r2, [r7, #24]
 81066c2:	4013      	ands	r3, r2
 81066c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81066c6:	683b      	ldr	r3, [r7, #0]
 81066c8:	685b      	ldr	r3, [r3, #4]
 81066ca:	091b      	lsrs	r3, r3, #4
 81066cc:	f003 0201 	and.w	r2, r3, #1
 81066d0:	69fb      	ldr	r3, [r7, #28]
 81066d2:	fa02 f303 	lsl.w	r3, r2, r3
 81066d6:	69ba      	ldr	r2, [r7, #24]
 81066d8:	4313      	orrs	r3, r2
 81066da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	69ba      	ldr	r2, [r7, #24]
 81066e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	68db      	ldr	r3, [r3, #12]
 81066e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81066e8:	69fb      	ldr	r3, [r7, #28]
 81066ea:	005b      	lsls	r3, r3, #1
 81066ec:	2203      	movs	r2, #3
 81066ee:	fa02 f303 	lsl.w	r3, r2, r3
 81066f2:	43db      	mvns	r3, r3
 81066f4:	69ba      	ldr	r2, [r7, #24]
 81066f6:	4013      	ands	r3, r2
 81066f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81066fa:	683b      	ldr	r3, [r7, #0]
 81066fc:	689a      	ldr	r2, [r3, #8]
 81066fe:	69fb      	ldr	r3, [r7, #28]
 8106700:	005b      	lsls	r3, r3, #1
 8106702:	fa02 f303 	lsl.w	r3, r2, r3
 8106706:	69ba      	ldr	r2, [r7, #24]
 8106708:	4313      	orrs	r3, r2
 810670a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	69ba      	ldr	r2, [r7, #24]
 8106710:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106712:	683b      	ldr	r3, [r7, #0]
 8106714:	685b      	ldr	r3, [r3, #4]
 8106716:	2b02      	cmp	r3, #2
 8106718:	d003      	beq.n	8106722 <HAL_GPIO_Init+0xee>
 810671a:	683b      	ldr	r3, [r7, #0]
 810671c:	685b      	ldr	r3, [r3, #4]
 810671e:	2b12      	cmp	r3, #18
 8106720:	d123      	bne.n	810676a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106722:	69fb      	ldr	r3, [r7, #28]
 8106724:	08da      	lsrs	r2, r3, #3
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	3208      	adds	r2, #8
 810672a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810672e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106730:	69fb      	ldr	r3, [r7, #28]
 8106732:	f003 0307 	and.w	r3, r3, #7
 8106736:	009b      	lsls	r3, r3, #2
 8106738:	220f      	movs	r2, #15
 810673a:	fa02 f303 	lsl.w	r3, r2, r3
 810673e:	43db      	mvns	r3, r3
 8106740:	69ba      	ldr	r2, [r7, #24]
 8106742:	4013      	ands	r3, r2
 8106744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106746:	683b      	ldr	r3, [r7, #0]
 8106748:	691a      	ldr	r2, [r3, #16]
 810674a:	69fb      	ldr	r3, [r7, #28]
 810674c:	f003 0307 	and.w	r3, r3, #7
 8106750:	009b      	lsls	r3, r3, #2
 8106752:	fa02 f303 	lsl.w	r3, r2, r3
 8106756:	69ba      	ldr	r2, [r7, #24]
 8106758:	4313      	orrs	r3, r2
 810675a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810675c:	69fb      	ldr	r3, [r7, #28]
 810675e:	08da      	lsrs	r2, r3, #3
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	3208      	adds	r2, #8
 8106764:	69b9      	ldr	r1, [r7, #24]
 8106766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106770:	69fb      	ldr	r3, [r7, #28]
 8106772:	005b      	lsls	r3, r3, #1
 8106774:	2203      	movs	r2, #3
 8106776:	fa02 f303 	lsl.w	r3, r2, r3
 810677a:	43db      	mvns	r3, r3
 810677c:	69ba      	ldr	r2, [r7, #24]
 810677e:	4013      	ands	r3, r2
 8106780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106782:	683b      	ldr	r3, [r7, #0]
 8106784:	685b      	ldr	r3, [r3, #4]
 8106786:	f003 0203 	and.w	r2, r3, #3
 810678a:	69fb      	ldr	r3, [r7, #28]
 810678c:	005b      	lsls	r3, r3, #1
 810678e:	fa02 f303 	lsl.w	r3, r2, r3
 8106792:	69ba      	ldr	r2, [r7, #24]
 8106794:	4313      	orrs	r3, r2
 8106796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	69ba      	ldr	r2, [r7, #24]
 810679c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810679e:	683b      	ldr	r3, [r7, #0]
 81067a0:	685b      	ldr	r3, [r3, #4]
 81067a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81067a6:	2b00      	cmp	r3, #0
 81067a8:	f000 80e0 	beq.w	810696c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81067ac:	4b2f      	ldr	r3, [pc, #188]	; (810686c <HAL_GPIO_Init+0x238>)
 81067ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81067b2:	4a2e      	ldr	r2, [pc, #184]	; (810686c <HAL_GPIO_Init+0x238>)
 81067b4:	f043 0302 	orr.w	r3, r3, #2
 81067b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81067bc:	4b2b      	ldr	r3, [pc, #172]	; (810686c <HAL_GPIO_Init+0x238>)
 81067be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81067c2:	f003 0302 	and.w	r3, r3, #2
 81067c6:	60fb      	str	r3, [r7, #12]
 81067c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81067ca:	4a29      	ldr	r2, [pc, #164]	; (8106870 <HAL_GPIO_Init+0x23c>)
 81067cc:	69fb      	ldr	r3, [r7, #28]
 81067ce:	089b      	lsrs	r3, r3, #2
 81067d0:	3302      	adds	r3, #2
 81067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81067d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81067d8:	69fb      	ldr	r3, [r7, #28]
 81067da:	f003 0303 	and.w	r3, r3, #3
 81067de:	009b      	lsls	r3, r3, #2
 81067e0:	220f      	movs	r2, #15
 81067e2:	fa02 f303 	lsl.w	r3, r2, r3
 81067e6:	43db      	mvns	r3, r3
 81067e8:	69ba      	ldr	r2, [r7, #24]
 81067ea:	4013      	ands	r3, r2
 81067ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	4a20      	ldr	r2, [pc, #128]	; (8106874 <HAL_GPIO_Init+0x240>)
 81067f2:	4293      	cmp	r3, r2
 81067f4:	d052      	beq.n	810689c <HAL_GPIO_Init+0x268>
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	4a1f      	ldr	r2, [pc, #124]	; (8106878 <HAL_GPIO_Init+0x244>)
 81067fa:	4293      	cmp	r3, r2
 81067fc:	d031      	beq.n	8106862 <HAL_GPIO_Init+0x22e>
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	4a1e      	ldr	r2, [pc, #120]	; (810687c <HAL_GPIO_Init+0x248>)
 8106802:	4293      	cmp	r3, r2
 8106804:	d02b      	beq.n	810685e <HAL_GPIO_Init+0x22a>
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	4a1d      	ldr	r2, [pc, #116]	; (8106880 <HAL_GPIO_Init+0x24c>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d025      	beq.n	810685a <HAL_GPIO_Init+0x226>
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	4a1c      	ldr	r2, [pc, #112]	; (8106884 <HAL_GPIO_Init+0x250>)
 8106812:	4293      	cmp	r3, r2
 8106814:	d01f      	beq.n	8106856 <HAL_GPIO_Init+0x222>
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	4a1b      	ldr	r2, [pc, #108]	; (8106888 <HAL_GPIO_Init+0x254>)
 810681a:	4293      	cmp	r3, r2
 810681c:	d019      	beq.n	8106852 <HAL_GPIO_Init+0x21e>
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	4a1a      	ldr	r2, [pc, #104]	; (810688c <HAL_GPIO_Init+0x258>)
 8106822:	4293      	cmp	r3, r2
 8106824:	d013      	beq.n	810684e <HAL_GPIO_Init+0x21a>
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	4a19      	ldr	r2, [pc, #100]	; (8106890 <HAL_GPIO_Init+0x25c>)
 810682a:	4293      	cmp	r3, r2
 810682c:	d00d      	beq.n	810684a <HAL_GPIO_Init+0x216>
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	4a18      	ldr	r2, [pc, #96]	; (8106894 <HAL_GPIO_Init+0x260>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d007      	beq.n	8106846 <HAL_GPIO_Init+0x212>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	4a17      	ldr	r2, [pc, #92]	; (8106898 <HAL_GPIO_Init+0x264>)
 810683a:	4293      	cmp	r3, r2
 810683c:	d101      	bne.n	8106842 <HAL_GPIO_Init+0x20e>
 810683e:	2309      	movs	r3, #9
 8106840:	e02d      	b.n	810689e <HAL_GPIO_Init+0x26a>
 8106842:	230a      	movs	r3, #10
 8106844:	e02b      	b.n	810689e <HAL_GPIO_Init+0x26a>
 8106846:	2308      	movs	r3, #8
 8106848:	e029      	b.n	810689e <HAL_GPIO_Init+0x26a>
 810684a:	2307      	movs	r3, #7
 810684c:	e027      	b.n	810689e <HAL_GPIO_Init+0x26a>
 810684e:	2306      	movs	r3, #6
 8106850:	e025      	b.n	810689e <HAL_GPIO_Init+0x26a>
 8106852:	2305      	movs	r3, #5
 8106854:	e023      	b.n	810689e <HAL_GPIO_Init+0x26a>
 8106856:	2304      	movs	r3, #4
 8106858:	e021      	b.n	810689e <HAL_GPIO_Init+0x26a>
 810685a:	2303      	movs	r3, #3
 810685c:	e01f      	b.n	810689e <HAL_GPIO_Init+0x26a>
 810685e:	2302      	movs	r3, #2
 8106860:	e01d      	b.n	810689e <HAL_GPIO_Init+0x26a>
 8106862:	2301      	movs	r3, #1
 8106864:	e01b      	b.n	810689e <HAL_GPIO_Init+0x26a>
 8106866:	bf00      	nop
 8106868:	580000c0 	.word	0x580000c0
 810686c:	58024400 	.word	0x58024400
 8106870:	58000400 	.word	0x58000400
 8106874:	58020000 	.word	0x58020000
 8106878:	58020400 	.word	0x58020400
 810687c:	58020800 	.word	0x58020800
 8106880:	58020c00 	.word	0x58020c00
 8106884:	58021000 	.word	0x58021000
 8106888:	58021400 	.word	0x58021400
 810688c:	58021800 	.word	0x58021800
 8106890:	58021c00 	.word	0x58021c00
 8106894:	58022000 	.word	0x58022000
 8106898:	58022400 	.word	0x58022400
 810689c:	2300      	movs	r3, #0
 810689e:	69fa      	ldr	r2, [r7, #28]
 81068a0:	f002 0203 	and.w	r2, r2, #3
 81068a4:	0092      	lsls	r2, r2, #2
 81068a6:	4093      	lsls	r3, r2
 81068a8:	69ba      	ldr	r2, [r7, #24]
 81068aa:	4313      	orrs	r3, r2
 81068ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81068ae:	4938      	ldr	r1, [pc, #224]	; (8106990 <HAL_GPIO_Init+0x35c>)
 81068b0:	69fb      	ldr	r3, [r7, #28]
 81068b2:	089b      	lsrs	r3, r3, #2
 81068b4:	3302      	adds	r3, #2
 81068b6:	69ba      	ldr	r2, [r7, #24]
 81068b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81068bc:	697b      	ldr	r3, [r7, #20]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81068c2:	693b      	ldr	r3, [r7, #16]
 81068c4:	43db      	mvns	r3, r3
 81068c6:	69ba      	ldr	r2, [r7, #24]
 81068c8:	4013      	ands	r3, r2
 81068ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81068cc:	683b      	ldr	r3, [r7, #0]
 81068ce:	685b      	ldr	r3, [r3, #4]
 81068d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81068d4:	2b00      	cmp	r3, #0
 81068d6:	d003      	beq.n	81068e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81068d8:	69ba      	ldr	r2, [r7, #24]
 81068da:	693b      	ldr	r3, [r7, #16]
 81068dc:	4313      	orrs	r3, r2
 81068de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81068e0:	697b      	ldr	r3, [r7, #20]
 81068e2:	69ba      	ldr	r2, [r7, #24]
 81068e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81068e6:	697b      	ldr	r3, [r7, #20]
 81068e8:	685b      	ldr	r3, [r3, #4]
 81068ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81068ec:	693b      	ldr	r3, [r7, #16]
 81068ee:	43db      	mvns	r3, r3
 81068f0:	69ba      	ldr	r2, [r7, #24]
 81068f2:	4013      	ands	r3, r2
 81068f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81068f6:	683b      	ldr	r3, [r7, #0]
 81068f8:	685b      	ldr	r3, [r3, #4]
 81068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81068fe:	2b00      	cmp	r3, #0
 8106900:	d003      	beq.n	810690a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106902:	69ba      	ldr	r2, [r7, #24]
 8106904:	693b      	ldr	r3, [r7, #16]
 8106906:	4313      	orrs	r3, r2
 8106908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810690a:	697b      	ldr	r3, [r7, #20]
 810690c:	69ba      	ldr	r2, [r7, #24]
 810690e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106914:	681b      	ldr	r3, [r3, #0]
 8106916:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106918:	693b      	ldr	r3, [r7, #16]
 810691a:	43db      	mvns	r3, r3
 810691c:	69ba      	ldr	r2, [r7, #24]
 810691e:	4013      	ands	r3, r2
 8106920:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106922:	683b      	ldr	r3, [r7, #0]
 8106924:	685b      	ldr	r3, [r3, #4]
 8106926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810692a:	2b00      	cmp	r3, #0
 810692c:	d003      	beq.n	8106936 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810692e:	69ba      	ldr	r2, [r7, #24]
 8106930:	693b      	ldr	r3, [r7, #16]
 8106932:	4313      	orrs	r3, r2
 8106934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810693a:	69bb      	ldr	r3, [r7, #24]
 810693c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810693e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106942:	685b      	ldr	r3, [r3, #4]
 8106944:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106946:	693b      	ldr	r3, [r7, #16]
 8106948:	43db      	mvns	r3, r3
 810694a:	69ba      	ldr	r2, [r7, #24]
 810694c:	4013      	ands	r3, r2
 810694e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106950:	683b      	ldr	r3, [r7, #0]
 8106952:	685b      	ldr	r3, [r3, #4]
 8106954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106958:	2b00      	cmp	r3, #0
 810695a:	d003      	beq.n	8106964 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810695c:	69ba      	ldr	r2, [r7, #24]
 810695e:	693b      	ldr	r3, [r7, #16]
 8106960:	4313      	orrs	r3, r2
 8106962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106968:	69bb      	ldr	r3, [r7, #24]
 810696a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810696c:	69fb      	ldr	r3, [r7, #28]
 810696e:	3301      	adds	r3, #1
 8106970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106972:	683b      	ldr	r3, [r7, #0]
 8106974:	681a      	ldr	r2, [r3, #0]
 8106976:	69fb      	ldr	r3, [r7, #28]
 8106978:	fa22 f303 	lsr.w	r3, r2, r3
 810697c:	2b00      	cmp	r3, #0
 810697e:	f47f ae63 	bne.w	8106648 <HAL_GPIO_Init+0x14>
  }
}
 8106982:	bf00      	nop
 8106984:	bf00      	nop
 8106986:	3724      	adds	r7, #36	; 0x24
 8106988:	46bd      	mov	sp, r7
 810698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810698e:	4770      	bx	lr
 8106990:	58000400 	.word	0x58000400

08106994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106994:	b480      	push	{r7}
 8106996:	b083      	sub	sp, #12
 8106998:	af00      	add	r7, sp, #0
 810699a:	6078      	str	r0, [r7, #4]
 810699c:	460b      	mov	r3, r1
 810699e:	807b      	strh	r3, [r7, #2]
 81069a0:	4613      	mov	r3, r2
 81069a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81069a4:	787b      	ldrb	r3, [r7, #1]
 81069a6:	2b00      	cmp	r3, #0
 81069a8:	d003      	beq.n	81069b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81069aa:	887a      	ldrh	r2, [r7, #2]
 81069ac:	687b      	ldr	r3, [r7, #4]
 81069ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81069b0:	e003      	b.n	81069ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81069b2:	887b      	ldrh	r3, [r7, #2]
 81069b4:	041a      	lsls	r2, r3, #16
 81069b6:	687b      	ldr	r3, [r7, #4]
 81069b8:	619a      	str	r2, [r3, #24]
}
 81069ba:	bf00      	nop
 81069bc:	370c      	adds	r7, #12
 81069be:	46bd      	mov	sp, r7
 81069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069c4:	4770      	bx	lr
	...

081069c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81069c8:	b480      	push	{r7}
 81069ca:	b083      	sub	sp, #12
 81069cc:	af00      	add	r7, sp, #0
 81069ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81069d0:	4b05      	ldr	r3, [pc, #20]	; (81069e8 <HAL_HSEM_ActivateNotification+0x20>)
 81069d2:	681a      	ldr	r2, [r3, #0]
 81069d4:	4904      	ldr	r1, [pc, #16]	; (81069e8 <HAL_HSEM_ActivateNotification+0x20>)
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	4313      	orrs	r3, r2
 81069da:	600b      	str	r3, [r1, #0]
#endif
}
 81069dc:	bf00      	nop
 81069de:	370c      	adds	r7, #12
 81069e0:	46bd      	mov	sp, r7
 81069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069e6:	4770      	bx	lr
 81069e8:	58026510 	.word	0x58026510

081069ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81069ec:	b580      	push	{r7, lr}
 81069ee:	b082      	sub	sp, #8
 81069f0:	af00      	add	r7, sp, #0
 81069f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	2b00      	cmp	r3, #0
 81069f8:	d101      	bne.n	81069fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81069fa:	2301      	movs	r3, #1
 81069fc:	e081      	b.n	8106b02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106a04:	b2db      	uxtb	r3, r3
 8106a06:	2b00      	cmp	r3, #0
 8106a08:	d106      	bne.n	8106a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	2200      	movs	r2, #0
 8106a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106a12:	6878      	ldr	r0, [r7, #4]
 8106a14:	f7fb f972 	bl	8101cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	2224      	movs	r2, #36	; 0x24
 8106a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	681a      	ldr	r2, [r3, #0]
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	f022 0201 	bic.w	r2, r2, #1
 8106a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	685a      	ldr	r2, [r3, #4]
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	681b      	ldr	r3, [r3, #0]
 8106a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8106a3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	689a      	ldr	r2, [r3, #8]
 8106a44:	687b      	ldr	r3, [r7, #4]
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106a4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	68db      	ldr	r3, [r3, #12]
 8106a52:	2b01      	cmp	r3, #1
 8106a54:	d107      	bne.n	8106a66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	689a      	ldr	r2, [r3, #8]
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	681b      	ldr	r3, [r3, #0]
 8106a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106a62:	609a      	str	r2, [r3, #8]
 8106a64:	e006      	b.n	8106a74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	689a      	ldr	r2, [r3, #8]
 8106a6a:	687b      	ldr	r3, [r7, #4]
 8106a6c:	681b      	ldr	r3, [r3, #0]
 8106a6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8106a72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8106a74:	687b      	ldr	r3, [r7, #4]
 8106a76:	68db      	ldr	r3, [r3, #12]
 8106a78:	2b02      	cmp	r3, #2
 8106a7a:	d104      	bne.n	8106a86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8106a86:	687b      	ldr	r3, [r7, #4]
 8106a88:	681b      	ldr	r3, [r3, #0]
 8106a8a:	685b      	ldr	r3, [r3, #4]
 8106a8c:	687a      	ldr	r2, [r7, #4]
 8106a8e:	6812      	ldr	r2, [r2, #0]
 8106a90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8106a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8106a98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	68da      	ldr	r2, [r3, #12]
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	681b      	ldr	r3, [r3, #0]
 8106aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106aa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	691a      	ldr	r2, [r3, #16]
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	695b      	ldr	r3, [r3, #20]
 8106ab2:	ea42 0103 	orr.w	r1, r2, r3
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	699b      	ldr	r3, [r3, #24]
 8106aba:	021a      	lsls	r2, r3, #8
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	430a      	orrs	r2, r1
 8106ac2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	69d9      	ldr	r1, [r3, #28]
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	6a1a      	ldr	r2, [r3, #32]
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	681b      	ldr	r3, [r3, #0]
 8106ad0:	430a      	orrs	r2, r1
 8106ad2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	681a      	ldr	r2, [r3, #0]
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	681b      	ldr	r3, [r3, #0]
 8106ade:	f042 0201 	orr.w	r2, r2, #1
 8106ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	2200      	movs	r2, #0
 8106ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	2220      	movs	r2, #32
 8106aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	2200      	movs	r2, #0
 8106af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106af8:	687b      	ldr	r3, [r7, #4]
 8106afa:	2200      	movs	r2, #0
 8106afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8106b00:	2300      	movs	r3, #0
}
 8106b02:	4618      	mov	r0, r3
 8106b04:	3708      	adds	r7, #8
 8106b06:	46bd      	mov	sp, r7
 8106b08:	bd80      	pop	{r7, pc}
	...

08106b0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106b0c:	b580      	push	{r7, lr}
 8106b0e:	b088      	sub	sp, #32
 8106b10:	af02      	add	r7, sp, #8
 8106b12:	60f8      	str	r0, [r7, #12]
 8106b14:	4608      	mov	r0, r1
 8106b16:	4611      	mov	r1, r2
 8106b18:	461a      	mov	r2, r3
 8106b1a:	4603      	mov	r3, r0
 8106b1c:	817b      	strh	r3, [r7, #10]
 8106b1e:	460b      	mov	r3, r1
 8106b20:	813b      	strh	r3, [r7, #8]
 8106b22:	4613      	mov	r3, r2
 8106b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106b2c:	b2db      	uxtb	r3, r3
 8106b2e:	2b20      	cmp	r3, #32
 8106b30:	f040 80f9 	bne.w	8106d26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8106b34:	6a3b      	ldr	r3, [r7, #32]
 8106b36:	2b00      	cmp	r3, #0
 8106b38:	d002      	beq.n	8106b40 <HAL_I2C_Mem_Write+0x34>
 8106b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106b3c:	2b00      	cmp	r3, #0
 8106b3e:	d105      	bne.n	8106b4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106b46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106b48:	2301      	movs	r3, #1
 8106b4a:	e0ed      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106b4c:	68fb      	ldr	r3, [r7, #12]
 8106b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106b52:	2b01      	cmp	r3, #1
 8106b54:	d101      	bne.n	8106b5a <HAL_I2C_Mem_Write+0x4e>
 8106b56:	2302      	movs	r3, #2
 8106b58:	e0e6      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
 8106b5a:	68fb      	ldr	r3, [r7, #12]
 8106b5c:	2201      	movs	r2, #1
 8106b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106b62:	f7fc fd45 	bl	81035f0 <HAL_GetTick>
 8106b66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106b68:	697b      	ldr	r3, [r7, #20]
 8106b6a:	9300      	str	r3, [sp, #0]
 8106b6c:	2319      	movs	r3, #25
 8106b6e:	2201      	movs	r2, #1
 8106b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8106b74:	68f8      	ldr	r0, [r7, #12]
 8106b76:	f001 f8c6 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 8106b7a:	4603      	mov	r3, r0
 8106b7c:	2b00      	cmp	r3, #0
 8106b7e:	d001      	beq.n	8106b84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8106b80:	2301      	movs	r3, #1
 8106b82:	e0d1      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8106b84:	68fb      	ldr	r3, [r7, #12]
 8106b86:	2221      	movs	r2, #33	; 0x21
 8106b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106b8c:	68fb      	ldr	r3, [r7, #12]
 8106b8e:	2240      	movs	r2, #64	; 0x40
 8106b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106b94:	68fb      	ldr	r3, [r7, #12]
 8106b96:	2200      	movs	r2, #0
 8106b98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106b9a:	68fb      	ldr	r3, [r7, #12]
 8106b9c:	6a3a      	ldr	r2, [r7, #32]
 8106b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8106ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8106ba6:	68fb      	ldr	r3, [r7, #12]
 8106ba8:	2200      	movs	r2, #0
 8106baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106bac:	88f8      	ldrh	r0, [r7, #6]
 8106bae:	893a      	ldrh	r2, [r7, #8]
 8106bb0:	8979      	ldrh	r1, [r7, #10]
 8106bb2:	697b      	ldr	r3, [r7, #20]
 8106bb4:	9301      	str	r3, [sp, #4]
 8106bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106bb8:	9300      	str	r3, [sp, #0]
 8106bba:	4603      	mov	r3, r0
 8106bbc:	68f8      	ldr	r0, [r7, #12]
 8106bbe:	f000 fb91 	bl	81072e4 <I2C_RequestMemoryWrite>
 8106bc2:	4603      	mov	r3, r0
 8106bc4:	2b00      	cmp	r3, #0
 8106bc6:	d005      	beq.n	8106bd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106bc8:	68fb      	ldr	r3, [r7, #12]
 8106bca:	2200      	movs	r2, #0
 8106bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106bd0:	2301      	movs	r3, #1
 8106bd2:	e0a9      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106bd4:	68fb      	ldr	r3, [r7, #12]
 8106bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106bd8:	b29b      	uxth	r3, r3
 8106bda:	2bff      	cmp	r3, #255	; 0xff
 8106bdc:	d90e      	bls.n	8106bfc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	22ff      	movs	r2, #255	; 0xff
 8106be2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106be8:	b2da      	uxtb	r2, r3
 8106bea:	8979      	ldrh	r1, [r7, #10]
 8106bec:	2300      	movs	r3, #0
 8106bee:	9300      	str	r3, [sp, #0]
 8106bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106bf4:	68f8      	ldr	r0, [r7, #12]
 8106bf6:	f001 f9a9 	bl	8107f4c <I2C_TransferConfig>
 8106bfa:	e00f      	b.n	8106c1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106bfc:	68fb      	ldr	r3, [r7, #12]
 8106bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c00:	b29a      	uxth	r2, r3
 8106c02:	68fb      	ldr	r3, [r7, #12]
 8106c04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106c06:	68fb      	ldr	r3, [r7, #12]
 8106c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c0a:	b2da      	uxtb	r2, r3
 8106c0c:	8979      	ldrh	r1, [r7, #10]
 8106c0e:	2300      	movs	r3, #0
 8106c10:	9300      	str	r3, [sp, #0]
 8106c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106c16:	68f8      	ldr	r0, [r7, #12]
 8106c18:	f001 f998 	bl	8107f4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106c1c:	697a      	ldr	r2, [r7, #20]
 8106c1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106c20:	68f8      	ldr	r0, [r7, #12]
 8106c22:	f001 f8b0 	bl	8107d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8106c26:	4603      	mov	r3, r0
 8106c28:	2b00      	cmp	r3, #0
 8106c2a:	d001      	beq.n	8106c30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8106c2c:	2301      	movs	r3, #1
 8106c2e:	e07b      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8106c30:	68fb      	ldr	r3, [r7, #12]
 8106c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c34:	781a      	ldrb	r2, [r3, #0]
 8106c36:	68fb      	ldr	r3, [r7, #12]
 8106c38:	681b      	ldr	r3, [r3, #0]
 8106c3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106c3c:	68fb      	ldr	r3, [r7, #12]
 8106c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c40:	1c5a      	adds	r2, r3, #1
 8106c42:	68fb      	ldr	r3, [r7, #12]
 8106c44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8106c46:	68fb      	ldr	r3, [r7, #12]
 8106c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c4a:	b29b      	uxth	r3, r3
 8106c4c:	3b01      	subs	r3, #1
 8106c4e:	b29a      	uxth	r2, r3
 8106c50:	68fb      	ldr	r3, [r7, #12]
 8106c52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8106c54:	68fb      	ldr	r3, [r7, #12]
 8106c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c58:	3b01      	subs	r3, #1
 8106c5a:	b29a      	uxth	r2, r3
 8106c5c:	68fb      	ldr	r3, [r7, #12]
 8106c5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106c60:	68fb      	ldr	r3, [r7, #12]
 8106c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c64:	b29b      	uxth	r3, r3
 8106c66:	2b00      	cmp	r3, #0
 8106c68:	d034      	beq.n	8106cd4 <HAL_I2C_Mem_Write+0x1c8>
 8106c6a:	68fb      	ldr	r3, [r7, #12]
 8106c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c6e:	2b00      	cmp	r3, #0
 8106c70:	d130      	bne.n	8106cd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106c72:	697b      	ldr	r3, [r7, #20]
 8106c74:	9300      	str	r3, [sp, #0]
 8106c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c78:	2200      	movs	r2, #0
 8106c7a:	2180      	movs	r1, #128	; 0x80
 8106c7c:	68f8      	ldr	r0, [r7, #12]
 8106c7e:	f001 f842 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 8106c82:	4603      	mov	r3, r0
 8106c84:	2b00      	cmp	r3, #0
 8106c86:	d001      	beq.n	8106c8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8106c88:	2301      	movs	r3, #1
 8106c8a:	e04d      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106c8c:	68fb      	ldr	r3, [r7, #12]
 8106c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c90:	b29b      	uxth	r3, r3
 8106c92:	2bff      	cmp	r3, #255	; 0xff
 8106c94:	d90e      	bls.n	8106cb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106c96:	68fb      	ldr	r3, [r7, #12]
 8106c98:	22ff      	movs	r2, #255	; 0xff
 8106c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ca0:	b2da      	uxtb	r2, r3
 8106ca2:	8979      	ldrh	r1, [r7, #10]
 8106ca4:	2300      	movs	r3, #0
 8106ca6:	9300      	str	r3, [sp, #0]
 8106ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106cac:	68f8      	ldr	r0, [r7, #12]
 8106cae:	f001 f94d 	bl	8107f4c <I2C_TransferConfig>
 8106cb2:	e00f      	b.n	8106cd4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106cb4:	68fb      	ldr	r3, [r7, #12]
 8106cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106cb8:	b29a      	uxth	r2, r3
 8106cba:	68fb      	ldr	r3, [r7, #12]
 8106cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106cbe:	68fb      	ldr	r3, [r7, #12]
 8106cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106cc2:	b2da      	uxtb	r2, r3
 8106cc4:	8979      	ldrh	r1, [r7, #10]
 8106cc6:	2300      	movs	r3, #0
 8106cc8:	9300      	str	r3, [sp, #0]
 8106cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106cce:	68f8      	ldr	r0, [r7, #12]
 8106cd0:	f001 f93c 	bl	8107f4c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8106cd4:	68fb      	ldr	r3, [r7, #12]
 8106cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106cd8:	b29b      	uxth	r3, r3
 8106cda:	2b00      	cmp	r3, #0
 8106cdc:	d19e      	bne.n	8106c1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106cde:	697a      	ldr	r2, [r7, #20]
 8106ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106ce2:	68f8      	ldr	r0, [r7, #12]
 8106ce4:	f001 f88f 	bl	8107e06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8106ce8:	4603      	mov	r3, r0
 8106cea:	2b00      	cmp	r3, #0
 8106cec:	d001      	beq.n	8106cf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8106cee:	2301      	movs	r3, #1
 8106cf0:	e01a      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106cf2:	68fb      	ldr	r3, [r7, #12]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	2220      	movs	r2, #32
 8106cf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106cfa:	68fb      	ldr	r3, [r7, #12]
 8106cfc:	681b      	ldr	r3, [r3, #0]
 8106cfe:	6859      	ldr	r1, [r3, #4]
 8106d00:	68fb      	ldr	r3, [r7, #12]
 8106d02:	681a      	ldr	r2, [r3, #0]
 8106d04:	4b0a      	ldr	r3, [pc, #40]	; (8106d30 <HAL_I2C_Mem_Write+0x224>)
 8106d06:	400b      	ands	r3, r1
 8106d08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106d0a:	68fb      	ldr	r3, [r7, #12]
 8106d0c:	2220      	movs	r2, #32
 8106d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106d12:	68fb      	ldr	r3, [r7, #12]
 8106d14:	2200      	movs	r2, #0
 8106d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106d1a:	68fb      	ldr	r3, [r7, #12]
 8106d1c:	2200      	movs	r2, #0
 8106d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106d22:	2300      	movs	r3, #0
 8106d24:	e000      	b.n	8106d28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8106d26:	2302      	movs	r3, #2
  }
}
 8106d28:	4618      	mov	r0, r3
 8106d2a:	3718      	adds	r7, #24
 8106d2c:	46bd      	mov	sp, r7
 8106d2e:	bd80      	pop	{r7, pc}
 8106d30:	fe00e800 	.word	0xfe00e800

08106d34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106d34:	b580      	push	{r7, lr}
 8106d36:	b088      	sub	sp, #32
 8106d38:	af02      	add	r7, sp, #8
 8106d3a:	60f8      	str	r0, [r7, #12]
 8106d3c:	4608      	mov	r0, r1
 8106d3e:	4611      	mov	r1, r2
 8106d40:	461a      	mov	r2, r3
 8106d42:	4603      	mov	r3, r0
 8106d44:	817b      	strh	r3, [r7, #10]
 8106d46:	460b      	mov	r3, r1
 8106d48:	813b      	strh	r3, [r7, #8]
 8106d4a:	4613      	mov	r3, r2
 8106d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106d4e:	68fb      	ldr	r3, [r7, #12]
 8106d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106d54:	b2db      	uxtb	r3, r3
 8106d56:	2b20      	cmp	r3, #32
 8106d58:	f040 80fd 	bne.w	8106f56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8106d5c:	6a3b      	ldr	r3, [r7, #32]
 8106d5e:	2b00      	cmp	r3, #0
 8106d60:	d002      	beq.n	8106d68 <HAL_I2C_Mem_Read+0x34>
 8106d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106d64:	2b00      	cmp	r3, #0
 8106d66:	d105      	bne.n	8106d74 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106d68:	68fb      	ldr	r3, [r7, #12]
 8106d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106d6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106d70:	2301      	movs	r3, #1
 8106d72:	e0f1      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106d74:	68fb      	ldr	r3, [r7, #12]
 8106d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106d7a:	2b01      	cmp	r3, #1
 8106d7c:	d101      	bne.n	8106d82 <HAL_I2C_Mem_Read+0x4e>
 8106d7e:	2302      	movs	r3, #2
 8106d80:	e0ea      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
 8106d82:	68fb      	ldr	r3, [r7, #12]
 8106d84:	2201      	movs	r2, #1
 8106d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106d8a:	f7fc fc31 	bl	81035f0 <HAL_GetTick>
 8106d8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106d90:	697b      	ldr	r3, [r7, #20]
 8106d92:	9300      	str	r3, [sp, #0]
 8106d94:	2319      	movs	r3, #25
 8106d96:	2201      	movs	r2, #1
 8106d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8106d9c:	68f8      	ldr	r0, [r7, #12]
 8106d9e:	f000 ffb2 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 8106da2:	4603      	mov	r3, r0
 8106da4:	2b00      	cmp	r3, #0
 8106da6:	d001      	beq.n	8106dac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8106da8:	2301      	movs	r3, #1
 8106daa:	e0d5      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	2222      	movs	r2, #34	; 0x22
 8106db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106db4:	68fb      	ldr	r3, [r7, #12]
 8106db6:	2240      	movs	r2, #64	; 0x40
 8106db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106dbc:	68fb      	ldr	r3, [r7, #12]
 8106dbe:	2200      	movs	r2, #0
 8106dc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106dc2:	68fb      	ldr	r3, [r7, #12]
 8106dc4:	6a3a      	ldr	r2, [r7, #32]
 8106dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8106dc8:	68fb      	ldr	r3, [r7, #12]
 8106dca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8106dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8106dce:	68fb      	ldr	r3, [r7, #12]
 8106dd0:	2200      	movs	r2, #0
 8106dd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106dd4:	88f8      	ldrh	r0, [r7, #6]
 8106dd6:	893a      	ldrh	r2, [r7, #8]
 8106dd8:	8979      	ldrh	r1, [r7, #10]
 8106dda:	697b      	ldr	r3, [r7, #20]
 8106ddc:	9301      	str	r3, [sp, #4]
 8106dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106de0:	9300      	str	r3, [sp, #0]
 8106de2:	4603      	mov	r3, r0
 8106de4:	68f8      	ldr	r0, [r7, #12]
 8106de6:	f000 fad1 	bl	810738c <I2C_RequestMemoryRead>
 8106dea:	4603      	mov	r3, r0
 8106dec:	2b00      	cmp	r3, #0
 8106dee:	d005      	beq.n	8106dfc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	2200      	movs	r2, #0
 8106df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106df8:	2301      	movs	r3, #1
 8106dfa:	e0ad      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106dfc:	68fb      	ldr	r3, [r7, #12]
 8106dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e00:	b29b      	uxth	r3, r3
 8106e02:	2bff      	cmp	r3, #255	; 0xff
 8106e04:	d90e      	bls.n	8106e24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106e06:	68fb      	ldr	r3, [r7, #12]
 8106e08:	22ff      	movs	r2, #255	; 0xff
 8106e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8106e0c:	68fb      	ldr	r3, [r7, #12]
 8106e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e10:	b2da      	uxtb	r2, r3
 8106e12:	8979      	ldrh	r1, [r7, #10]
 8106e14:	4b52      	ldr	r3, [pc, #328]	; (8106f60 <HAL_I2C_Mem_Read+0x22c>)
 8106e16:	9300      	str	r3, [sp, #0]
 8106e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106e1c:	68f8      	ldr	r0, [r7, #12]
 8106e1e:	f001 f895 	bl	8107f4c <I2C_TransferConfig>
 8106e22:	e00f      	b.n	8106e44 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106e24:	68fb      	ldr	r3, [r7, #12]
 8106e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e28:	b29a      	uxth	r2, r3
 8106e2a:	68fb      	ldr	r3, [r7, #12]
 8106e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8106e2e:	68fb      	ldr	r3, [r7, #12]
 8106e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e32:	b2da      	uxtb	r2, r3
 8106e34:	8979      	ldrh	r1, [r7, #10]
 8106e36:	4b4a      	ldr	r3, [pc, #296]	; (8106f60 <HAL_I2C_Mem_Read+0x22c>)
 8106e38:	9300      	str	r3, [sp, #0]
 8106e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106e3e:	68f8      	ldr	r0, [r7, #12]
 8106e40:	f001 f884 	bl	8107f4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8106e44:	697b      	ldr	r3, [r7, #20]
 8106e46:	9300      	str	r3, [sp, #0]
 8106e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e4a:	2200      	movs	r2, #0
 8106e4c:	2104      	movs	r1, #4
 8106e4e:	68f8      	ldr	r0, [r7, #12]
 8106e50:	f000 ff59 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 8106e54:	4603      	mov	r3, r0
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d001      	beq.n	8106e5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8106e5a:	2301      	movs	r3, #1
 8106e5c:	e07c      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106e64:	68fb      	ldr	r3, [r7, #12]
 8106e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e68:	b2d2      	uxtb	r2, r2
 8106e6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106e6c:	68fb      	ldr	r3, [r7, #12]
 8106e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e70:	1c5a      	adds	r2, r3, #1
 8106e72:	68fb      	ldr	r3, [r7, #12]
 8106e74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8106e76:	68fb      	ldr	r3, [r7, #12]
 8106e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e7a:	3b01      	subs	r3, #1
 8106e7c:	b29a      	uxth	r2, r3
 8106e7e:	68fb      	ldr	r3, [r7, #12]
 8106e80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8106e82:	68fb      	ldr	r3, [r7, #12]
 8106e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e86:	b29b      	uxth	r3, r3
 8106e88:	3b01      	subs	r3, #1
 8106e8a:	b29a      	uxth	r2, r3
 8106e8c:	68fb      	ldr	r3, [r7, #12]
 8106e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106e90:	68fb      	ldr	r3, [r7, #12]
 8106e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e94:	b29b      	uxth	r3, r3
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d034      	beq.n	8106f04 <HAL_I2C_Mem_Read+0x1d0>
 8106e9a:	68fb      	ldr	r3, [r7, #12]
 8106e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e9e:	2b00      	cmp	r3, #0
 8106ea0:	d130      	bne.n	8106f04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106ea2:	697b      	ldr	r3, [r7, #20]
 8106ea4:	9300      	str	r3, [sp, #0]
 8106ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ea8:	2200      	movs	r2, #0
 8106eaa:	2180      	movs	r1, #128	; 0x80
 8106eac:	68f8      	ldr	r0, [r7, #12]
 8106eae:	f000 ff2a 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 8106eb2:	4603      	mov	r3, r0
 8106eb4:	2b00      	cmp	r3, #0
 8106eb6:	d001      	beq.n	8106ebc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8106eb8:	2301      	movs	r3, #1
 8106eba:	e04d      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106ebc:	68fb      	ldr	r3, [r7, #12]
 8106ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ec0:	b29b      	uxth	r3, r3
 8106ec2:	2bff      	cmp	r3, #255	; 0xff
 8106ec4:	d90e      	bls.n	8106ee4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106ec6:	68fb      	ldr	r3, [r7, #12]
 8106ec8:	22ff      	movs	r2, #255	; 0xff
 8106eca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106ecc:	68fb      	ldr	r3, [r7, #12]
 8106ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ed0:	b2da      	uxtb	r2, r3
 8106ed2:	8979      	ldrh	r1, [r7, #10]
 8106ed4:	2300      	movs	r3, #0
 8106ed6:	9300      	str	r3, [sp, #0]
 8106ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106edc:	68f8      	ldr	r0, [r7, #12]
 8106ede:	f001 f835 	bl	8107f4c <I2C_TransferConfig>
 8106ee2:	e00f      	b.n	8106f04 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106ee4:	68fb      	ldr	r3, [r7, #12]
 8106ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ee8:	b29a      	uxth	r2, r3
 8106eea:	68fb      	ldr	r3, [r7, #12]
 8106eec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ef2:	b2da      	uxtb	r2, r3
 8106ef4:	8979      	ldrh	r1, [r7, #10]
 8106ef6:	2300      	movs	r3, #0
 8106ef8:	9300      	str	r3, [sp, #0]
 8106efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106efe:	68f8      	ldr	r0, [r7, #12]
 8106f00:	f001 f824 	bl	8107f4c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8106f04:	68fb      	ldr	r3, [r7, #12]
 8106f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106f08:	b29b      	uxth	r3, r3
 8106f0a:	2b00      	cmp	r3, #0
 8106f0c:	d19a      	bne.n	8106e44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106f0e:	697a      	ldr	r2, [r7, #20]
 8106f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106f12:	68f8      	ldr	r0, [r7, #12]
 8106f14:	f000 ff77 	bl	8107e06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8106f18:	4603      	mov	r3, r0
 8106f1a:	2b00      	cmp	r3, #0
 8106f1c:	d001      	beq.n	8106f22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8106f1e:	2301      	movs	r3, #1
 8106f20:	e01a      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106f22:	68fb      	ldr	r3, [r7, #12]
 8106f24:	681b      	ldr	r3, [r3, #0]
 8106f26:	2220      	movs	r2, #32
 8106f28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106f2a:	68fb      	ldr	r3, [r7, #12]
 8106f2c:	681b      	ldr	r3, [r3, #0]
 8106f2e:	6859      	ldr	r1, [r3, #4]
 8106f30:	68fb      	ldr	r3, [r7, #12]
 8106f32:	681a      	ldr	r2, [r3, #0]
 8106f34:	4b0b      	ldr	r3, [pc, #44]	; (8106f64 <HAL_I2C_Mem_Read+0x230>)
 8106f36:	400b      	ands	r3, r1
 8106f38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106f3a:	68fb      	ldr	r3, [r7, #12]
 8106f3c:	2220      	movs	r2, #32
 8106f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106f42:	68fb      	ldr	r3, [r7, #12]
 8106f44:	2200      	movs	r2, #0
 8106f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106f4a:	68fb      	ldr	r3, [r7, #12]
 8106f4c:	2200      	movs	r2, #0
 8106f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106f52:	2300      	movs	r3, #0
 8106f54:	e000      	b.n	8106f58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8106f56:	2302      	movs	r3, #2
  }
}
 8106f58:	4618      	mov	r0, r3
 8106f5a:	3718      	adds	r7, #24
 8106f5c:	46bd      	mov	sp, r7
 8106f5e:	bd80      	pop	{r7, pc}
 8106f60:	80002400 	.word	0x80002400
 8106f64:	fe00e800 	.word	0xfe00e800

08106f68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106f68:	b580      	push	{r7, lr}
 8106f6a:	b084      	sub	sp, #16
 8106f6c:	af00      	add	r7, sp, #0
 8106f6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106f70:	687b      	ldr	r3, [r7, #4]
 8106f72:	681b      	ldr	r3, [r3, #0]
 8106f74:	699b      	ldr	r3, [r3, #24]
 8106f76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f84:	2b00      	cmp	r3, #0
 8106f86:	d005      	beq.n	8106f94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8106f88:	687b      	ldr	r3, [r7, #4]
 8106f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f8c:	68ba      	ldr	r2, [r7, #8]
 8106f8e:	68f9      	ldr	r1, [r7, #12]
 8106f90:	6878      	ldr	r0, [r7, #4]
 8106f92:	4798      	blx	r3
  }
}
 8106f94:	bf00      	nop
 8106f96:	3710      	adds	r7, #16
 8106f98:	46bd      	mov	sp, r7
 8106f9a:	bd80      	pop	{r7, pc}

08106f9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106f9c:	b580      	push	{r7, lr}
 8106f9e:	b086      	sub	sp, #24
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	699b      	ldr	r3, [r3, #24]
 8106faa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	681b      	ldr	r3, [r3, #0]
 8106fb0:	681b      	ldr	r3, [r3, #0]
 8106fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106fb4:	697b      	ldr	r3, [r7, #20]
 8106fb6:	0a1b      	lsrs	r3, r3, #8
 8106fb8:	f003 0301 	and.w	r3, r3, #1
 8106fbc:	2b00      	cmp	r3, #0
 8106fbe:	d010      	beq.n	8106fe2 <HAL_I2C_ER_IRQHandler+0x46>
 8106fc0:	693b      	ldr	r3, [r7, #16]
 8106fc2:	09db      	lsrs	r3, r3, #7
 8106fc4:	f003 0301 	and.w	r3, r3, #1
 8106fc8:	2b00      	cmp	r3, #0
 8106fca:	d00a      	beq.n	8106fe2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106fd0:	f043 0201 	orr.w	r2, r3, #1
 8106fd4:	687b      	ldr	r3, [r7, #4]
 8106fd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8106fe0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106fe2:	697b      	ldr	r3, [r7, #20]
 8106fe4:	0a9b      	lsrs	r3, r3, #10
 8106fe6:	f003 0301 	and.w	r3, r3, #1
 8106fea:	2b00      	cmp	r3, #0
 8106fec:	d010      	beq.n	8107010 <HAL_I2C_ER_IRQHandler+0x74>
 8106fee:	693b      	ldr	r3, [r7, #16]
 8106ff0:	09db      	lsrs	r3, r3, #7
 8106ff2:	f003 0301 	and.w	r3, r3, #1
 8106ff6:	2b00      	cmp	r3, #0
 8106ff8:	d00a      	beq.n	8107010 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106ffe:	f043 0208 	orr.w	r2, r3, #8
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	681b      	ldr	r3, [r3, #0]
 810700a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810700e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107010:	697b      	ldr	r3, [r7, #20]
 8107012:	0a5b      	lsrs	r3, r3, #9
 8107014:	f003 0301 	and.w	r3, r3, #1
 8107018:	2b00      	cmp	r3, #0
 810701a:	d010      	beq.n	810703e <HAL_I2C_ER_IRQHandler+0xa2>
 810701c:	693b      	ldr	r3, [r7, #16]
 810701e:	09db      	lsrs	r3, r3, #7
 8107020:	f003 0301 	and.w	r3, r3, #1
 8107024:	2b00      	cmp	r3, #0
 8107026:	d00a      	beq.n	810703e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810702c:	f043 0202 	orr.w	r2, r3, #2
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107034:	687b      	ldr	r3, [r7, #4]
 8107036:	681b      	ldr	r3, [r3, #0]
 8107038:	f44f 7200 	mov.w	r2, #512	; 0x200
 810703c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 810703e:	687b      	ldr	r3, [r7, #4]
 8107040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107042:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8107044:	68fb      	ldr	r3, [r7, #12]
 8107046:	f003 030b 	and.w	r3, r3, #11
 810704a:	2b00      	cmp	r3, #0
 810704c:	d003      	beq.n	8107056 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 810704e:	68f9      	ldr	r1, [r7, #12]
 8107050:	6878      	ldr	r0, [r7, #4]
 8107052:	f000 fd1f 	bl	8107a94 <I2C_ITError>
  }
}
 8107056:	bf00      	nop
 8107058:	3718      	adds	r7, #24
 810705a:	46bd      	mov	sp, r7
 810705c:	bd80      	pop	{r7, pc}

0810705e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810705e:	b480      	push	{r7}
 8107060:	b083      	sub	sp, #12
 8107062:	af00      	add	r7, sp, #0
 8107064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8107066:	bf00      	nop
 8107068:	370c      	adds	r7, #12
 810706a:	46bd      	mov	sp, r7
 810706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107070:	4770      	bx	lr

08107072 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107072:	b480      	push	{r7}
 8107074:	b083      	sub	sp, #12
 8107076:	af00      	add	r7, sp, #0
 8107078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 810707a:	bf00      	nop
 810707c:	370c      	adds	r7, #12
 810707e:	46bd      	mov	sp, r7
 8107080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107084:	4770      	bx	lr

08107086 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8107086:	b480      	push	{r7}
 8107088:	b083      	sub	sp, #12
 810708a:	af00      	add	r7, sp, #0
 810708c:	6078      	str	r0, [r7, #4]
 810708e:	460b      	mov	r3, r1
 8107090:	70fb      	strb	r3, [r7, #3]
 8107092:	4613      	mov	r3, r2
 8107094:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8107096:	bf00      	nop
 8107098:	370c      	adds	r7, #12
 810709a:	46bd      	mov	sp, r7
 810709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070a0:	4770      	bx	lr

081070a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81070a2:	b480      	push	{r7}
 81070a4:	b083      	sub	sp, #12
 81070a6:	af00      	add	r7, sp, #0
 81070a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 81070aa:	bf00      	nop
 81070ac:	370c      	adds	r7, #12
 81070ae:	46bd      	mov	sp, r7
 81070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070b4:	4770      	bx	lr

081070b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81070b6:	b480      	push	{r7}
 81070b8:	b083      	sub	sp, #12
 81070ba:	af00      	add	r7, sp, #0
 81070bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 81070be:	bf00      	nop
 81070c0:	370c      	adds	r7, #12
 81070c2:	46bd      	mov	sp, r7
 81070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070c8:	4770      	bx	lr

081070ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81070ca:	b480      	push	{r7}
 81070cc:	b083      	sub	sp, #12
 81070ce:	af00      	add	r7, sp, #0
 81070d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 81070d2:	bf00      	nop
 81070d4:	370c      	adds	r7, #12
 81070d6:	46bd      	mov	sp, r7
 81070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070dc:	4770      	bx	lr

081070de <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81070de:	b580      	push	{r7, lr}
 81070e0:	b086      	sub	sp, #24
 81070e2:	af00      	add	r7, sp, #0
 81070e4:	60f8      	str	r0, [r7, #12]
 81070e6:	60b9      	str	r1, [r7, #8]
 81070e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81070ea:	68fb      	ldr	r3, [r7, #12]
 81070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 81070f0:	68bb      	ldr	r3, [r7, #8]
 81070f2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81070fa:	2b01      	cmp	r3, #1
 81070fc:	d101      	bne.n	8107102 <I2C_Slave_ISR_IT+0x24>
 81070fe:	2302      	movs	r3, #2
 8107100:	e0ec      	b.n	81072dc <I2C_Slave_ISR_IT+0x1fe>
 8107102:	68fb      	ldr	r3, [r7, #12]
 8107104:	2201      	movs	r2, #1
 8107106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 810710a:	693b      	ldr	r3, [r7, #16]
 810710c:	095b      	lsrs	r3, r3, #5
 810710e:	f003 0301 	and.w	r3, r3, #1
 8107112:	2b00      	cmp	r3, #0
 8107114:	d009      	beq.n	810712a <I2C_Slave_ISR_IT+0x4c>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	095b      	lsrs	r3, r3, #5
 810711a:	f003 0301 	and.w	r3, r3, #1
 810711e:	2b00      	cmp	r3, #0
 8107120:	d003      	beq.n	810712a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8107122:	6939      	ldr	r1, [r7, #16]
 8107124:	68f8      	ldr	r0, [r7, #12]
 8107126:	f000 fa67 	bl	81075f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810712a:	693b      	ldr	r3, [r7, #16]
 810712c:	091b      	lsrs	r3, r3, #4
 810712e:	f003 0301 	and.w	r3, r3, #1
 8107132:	2b00      	cmp	r3, #0
 8107134:	d04d      	beq.n	81071d2 <I2C_Slave_ISR_IT+0xf4>
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	091b      	lsrs	r3, r3, #4
 810713a:	f003 0301 	and.w	r3, r3, #1
 810713e:	2b00      	cmp	r3, #0
 8107140:	d047      	beq.n	81071d2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8107142:	68fb      	ldr	r3, [r7, #12]
 8107144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107146:	b29b      	uxth	r3, r3
 8107148:	2b00      	cmp	r3, #0
 810714a:	d128      	bne.n	810719e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810714c:	68fb      	ldr	r3, [r7, #12]
 810714e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107152:	b2db      	uxtb	r3, r3
 8107154:	2b28      	cmp	r3, #40	; 0x28
 8107156:	d108      	bne.n	810716a <I2C_Slave_ISR_IT+0x8c>
 8107158:	697b      	ldr	r3, [r7, #20]
 810715a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810715e:	d104      	bne.n	810716a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8107160:	6939      	ldr	r1, [r7, #16]
 8107162:	68f8      	ldr	r0, [r7, #12]
 8107164:	f000 fc40 	bl	81079e8 <I2C_ITListenCplt>
 8107168:	e032      	b.n	81071d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810716a:	68fb      	ldr	r3, [r7, #12]
 810716c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107170:	b2db      	uxtb	r3, r3
 8107172:	2b29      	cmp	r3, #41	; 0x29
 8107174:	d10e      	bne.n	8107194 <I2C_Slave_ISR_IT+0xb6>
 8107176:	697b      	ldr	r3, [r7, #20]
 8107178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810717c:	d00a      	beq.n	8107194 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810717e:	68fb      	ldr	r3, [r7, #12]
 8107180:	681b      	ldr	r3, [r3, #0]
 8107182:	2210      	movs	r2, #16
 8107184:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8107186:	68f8      	ldr	r0, [r7, #12]
 8107188:	f000 fd7b 	bl	8107c82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 810718c:	68f8      	ldr	r0, [r7, #12]
 810718e:	f000 f9d5 	bl	810753c <I2C_ITSlaveSeqCplt>
 8107192:	e01d      	b.n	81071d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107194:	68fb      	ldr	r3, [r7, #12]
 8107196:	681b      	ldr	r3, [r3, #0]
 8107198:	2210      	movs	r2, #16
 810719a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 810719c:	e096      	b.n	81072cc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810719e:	68fb      	ldr	r3, [r7, #12]
 81071a0:	681b      	ldr	r3, [r3, #0]
 81071a2:	2210      	movs	r2, #16
 81071a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071aa:	f043 0204 	orr.w	r2, r3, #4
 81071ae:	68fb      	ldr	r3, [r7, #12]
 81071b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81071b2:	697b      	ldr	r3, [r7, #20]
 81071b4:	2b00      	cmp	r3, #0
 81071b6:	d004      	beq.n	81071c2 <I2C_Slave_ISR_IT+0xe4>
 81071b8:	697b      	ldr	r3, [r7, #20]
 81071ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81071be:	f040 8085 	bne.w	81072cc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 81071c2:	68fb      	ldr	r3, [r7, #12]
 81071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071c6:	4619      	mov	r1, r3
 81071c8:	68f8      	ldr	r0, [r7, #12]
 81071ca:	f000 fc63 	bl	8107a94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 81071ce:	e07d      	b.n	81072cc <I2C_Slave_ISR_IT+0x1ee>
 81071d0:	e07c      	b.n	81072cc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 81071d2:	693b      	ldr	r3, [r7, #16]
 81071d4:	089b      	lsrs	r3, r3, #2
 81071d6:	f003 0301 	and.w	r3, r3, #1
 81071da:	2b00      	cmp	r3, #0
 81071dc:	d030      	beq.n	8107240 <I2C_Slave_ISR_IT+0x162>
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	089b      	lsrs	r3, r3, #2
 81071e2:	f003 0301 	and.w	r3, r3, #1
 81071e6:	2b00      	cmp	r3, #0
 81071e8:	d02a      	beq.n	8107240 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 81071ea:	68fb      	ldr	r3, [r7, #12]
 81071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81071ee:	b29b      	uxth	r3, r3
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d018      	beq.n	8107226 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81071f4:	68fb      	ldr	r3, [r7, #12]
 81071f6:	681b      	ldr	r3, [r3, #0]
 81071f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81071fa:	68fb      	ldr	r3, [r7, #12]
 81071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81071fe:	b2d2      	uxtb	r2, r2
 8107200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107206:	1c5a      	adds	r2, r3, #1
 8107208:	68fb      	ldr	r3, [r7, #12]
 810720a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810720c:	68fb      	ldr	r3, [r7, #12]
 810720e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107210:	3b01      	subs	r3, #1
 8107212:	b29a      	uxth	r2, r3
 8107214:	68fb      	ldr	r3, [r7, #12]
 8107216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107218:	68fb      	ldr	r3, [r7, #12]
 810721a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810721c:	b29b      	uxth	r3, r3
 810721e:	3b01      	subs	r3, #1
 8107220:	b29a      	uxth	r2, r3
 8107222:	68fb      	ldr	r3, [r7, #12]
 8107224:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8107226:	68fb      	ldr	r3, [r7, #12]
 8107228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810722a:	b29b      	uxth	r3, r3
 810722c:	2b00      	cmp	r3, #0
 810722e:	d14f      	bne.n	81072d0 <I2C_Slave_ISR_IT+0x1f2>
 8107230:	697b      	ldr	r3, [r7, #20]
 8107232:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107236:	d04b      	beq.n	81072d0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107238:	68f8      	ldr	r0, [r7, #12]
 810723a:	f000 f97f 	bl	810753c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 810723e:	e047      	b.n	81072d0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107240:	693b      	ldr	r3, [r7, #16]
 8107242:	08db      	lsrs	r3, r3, #3
 8107244:	f003 0301 	and.w	r3, r3, #1
 8107248:	2b00      	cmp	r3, #0
 810724a:	d00a      	beq.n	8107262 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	08db      	lsrs	r3, r3, #3
 8107250:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107254:	2b00      	cmp	r3, #0
 8107256:	d004      	beq.n	8107262 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8107258:	6939      	ldr	r1, [r7, #16]
 810725a:	68f8      	ldr	r0, [r7, #12]
 810725c:	f000 f8ea 	bl	8107434 <I2C_ITAddrCplt>
 8107260:	e037      	b.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8107262:	693b      	ldr	r3, [r7, #16]
 8107264:	085b      	lsrs	r3, r3, #1
 8107266:	f003 0301 	and.w	r3, r3, #1
 810726a:	2b00      	cmp	r3, #0
 810726c:	d031      	beq.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
 810726e:	687b      	ldr	r3, [r7, #4]
 8107270:	085b      	lsrs	r3, r3, #1
 8107272:	f003 0301 	and.w	r3, r3, #1
 8107276:	2b00      	cmp	r3, #0
 8107278:	d02b      	beq.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810727e:	b29b      	uxth	r3, r3
 8107280:	2b00      	cmp	r3, #0
 8107282:	d018      	beq.n	81072b6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8107284:	68fb      	ldr	r3, [r7, #12]
 8107286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107288:	781a      	ldrb	r2, [r3, #0]
 810728a:	68fb      	ldr	r3, [r7, #12]
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107290:	68fb      	ldr	r3, [r7, #12]
 8107292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107294:	1c5a      	adds	r2, r3, #1
 8107296:	68fb      	ldr	r3, [r7, #12]
 8107298:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810729a:	68fb      	ldr	r3, [r7, #12]
 810729c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810729e:	b29b      	uxth	r3, r3
 81072a0:	3b01      	subs	r3, #1
 81072a2:	b29a      	uxth	r2, r3
 81072a4:	68fb      	ldr	r3, [r7, #12]
 81072a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81072a8:	68fb      	ldr	r3, [r7, #12]
 81072aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81072ac:	3b01      	subs	r3, #1
 81072ae:	b29a      	uxth	r2, r3
 81072b0:	68fb      	ldr	r3, [r7, #12]
 81072b2:	851a      	strh	r2, [r3, #40]	; 0x28
 81072b4:	e00d      	b.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 81072b6:	697b      	ldr	r3, [r7, #20]
 81072b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81072bc:	d002      	beq.n	81072c4 <I2C_Slave_ISR_IT+0x1e6>
 81072be:	697b      	ldr	r3, [r7, #20]
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d106      	bne.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81072c4:	68f8      	ldr	r0, [r7, #12]
 81072c6:	f000 f939 	bl	810753c <I2C_ITSlaveSeqCplt>
 81072ca:	e002      	b.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 81072cc:	bf00      	nop
 81072ce:	e000      	b.n	81072d2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 81072d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	2200      	movs	r2, #0
 81072d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 81072da:	2300      	movs	r3, #0
}
 81072dc:	4618      	mov	r0, r3
 81072de:	3718      	adds	r7, #24
 81072e0:	46bd      	mov	sp, r7
 81072e2:	bd80      	pop	{r7, pc}

081072e4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81072e4:	b580      	push	{r7, lr}
 81072e6:	b086      	sub	sp, #24
 81072e8:	af02      	add	r7, sp, #8
 81072ea:	60f8      	str	r0, [r7, #12]
 81072ec:	4608      	mov	r0, r1
 81072ee:	4611      	mov	r1, r2
 81072f0:	461a      	mov	r2, r3
 81072f2:	4603      	mov	r3, r0
 81072f4:	817b      	strh	r3, [r7, #10]
 81072f6:	460b      	mov	r3, r1
 81072f8:	813b      	strh	r3, [r7, #8]
 81072fa:	4613      	mov	r3, r2
 81072fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81072fe:	88fb      	ldrh	r3, [r7, #6]
 8107300:	b2da      	uxtb	r2, r3
 8107302:	8979      	ldrh	r1, [r7, #10]
 8107304:	4b20      	ldr	r3, [pc, #128]	; (8107388 <I2C_RequestMemoryWrite+0xa4>)
 8107306:	9300      	str	r3, [sp, #0]
 8107308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810730c:	68f8      	ldr	r0, [r7, #12]
 810730e:	f000 fe1d 	bl	8107f4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107312:	69fa      	ldr	r2, [r7, #28]
 8107314:	69b9      	ldr	r1, [r7, #24]
 8107316:	68f8      	ldr	r0, [r7, #12]
 8107318:	f000 fd35 	bl	8107d86 <I2C_WaitOnTXISFlagUntilTimeout>
 810731c:	4603      	mov	r3, r0
 810731e:	2b00      	cmp	r3, #0
 8107320:	d001      	beq.n	8107326 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8107322:	2301      	movs	r3, #1
 8107324:	e02c      	b.n	8107380 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107326:	88fb      	ldrh	r3, [r7, #6]
 8107328:	2b01      	cmp	r3, #1
 810732a:	d105      	bne.n	8107338 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810732c:	893b      	ldrh	r3, [r7, #8]
 810732e:	b2da      	uxtb	r2, r3
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	629a      	str	r2, [r3, #40]	; 0x28
 8107336:	e015      	b.n	8107364 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107338:	893b      	ldrh	r3, [r7, #8]
 810733a:	0a1b      	lsrs	r3, r3, #8
 810733c:	b29b      	uxth	r3, r3
 810733e:	b2da      	uxtb	r2, r3
 8107340:	68fb      	ldr	r3, [r7, #12]
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107346:	69fa      	ldr	r2, [r7, #28]
 8107348:	69b9      	ldr	r1, [r7, #24]
 810734a:	68f8      	ldr	r0, [r7, #12]
 810734c:	f000 fd1b 	bl	8107d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8107350:	4603      	mov	r3, r0
 8107352:	2b00      	cmp	r3, #0
 8107354:	d001      	beq.n	810735a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8107356:	2301      	movs	r3, #1
 8107358:	e012      	b.n	8107380 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810735a:	893b      	ldrh	r3, [r7, #8]
 810735c:	b2da      	uxtb	r2, r3
 810735e:	68fb      	ldr	r3, [r7, #12]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8107364:	69fb      	ldr	r3, [r7, #28]
 8107366:	9300      	str	r3, [sp, #0]
 8107368:	69bb      	ldr	r3, [r7, #24]
 810736a:	2200      	movs	r2, #0
 810736c:	2180      	movs	r1, #128	; 0x80
 810736e:	68f8      	ldr	r0, [r7, #12]
 8107370:	f000 fcc9 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 8107374:	4603      	mov	r3, r0
 8107376:	2b00      	cmp	r3, #0
 8107378:	d001      	beq.n	810737e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810737a:	2301      	movs	r3, #1
 810737c:	e000      	b.n	8107380 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810737e:	2300      	movs	r3, #0
}
 8107380:	4618      	mov	r0, r3
 8107382:	3710      	adds	r7, #16
 8107384:	46bd      	mov	sp, r7
 8107386:	bd80      	pop	{r7, pc}
 8107388:	80002000 	.word	0x80002000

0810738c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 810738c:	b580      	push	{r7, lr}
 810738e:	b086      	sub	sp, #24
 8107390:	af02      	add	r7, sp, #8
 8107392:	60f8      	str	r0, [r7, #12]
 8107394:	4608      	mov	r0, r1
 8107396:	4611      	mov	r1, r2
 8107398:	461a      	mov	r2, r3
 810739a:	4603      	mov	r3, r0
 810739c:	817b      	strh	r3, [r7, #10]
 810739e:	460b      	mov	r3, r1
 81073a0:	813b      	strh	r3, [r7, #8]
 81073a2:	4613      	mov	r3, r2
 81073a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81073a6:	88fb      	ldrh	r3, [r7, #6]
 81073a8:	b2da      	uxtb	r2, r3
 81073aa:	8979      	ldrh	r1, [r7, #10]
 81073ac:	4b20      	ldr	r3, [pc, #128]	; (8107430 <I2C_RequestMemoryRead+0xa4>)
 81073ae:	9300      	str	r3, [sp, #0]
 81073b0:	2300      	movs	r3, #0
 81073b2:	68f8      	ldr	r0, [r7, #12]
 81073b4:	f000 fdca 	bl	8107f4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81073b8:	69fa      	ldr	r2, [r7, #28]
 81073ba:	69b9      	ldr	r1, [r7, #24]
 81073bc:	68f8      	ldr	r0, [r7, #12]
 81073be:	f000 fce2 	bl	8107d86 <I2C_WaitOnTXISFlagUntilTimeout>
 81073c2:	4603      	mov	r3, r0
 81073c4:	2b00      	cmp	r3, #0
 81073c6:	d001      	beq.n	81073cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81073c8:	2301      	movs	r3, #1
 81073ca:	e02c      	b.n	8107426 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81073cc:	88fb      	ldrh	r3, [r7, #6]
 81073ce:	2b01      	cmp	r3, #1
 81073d0:	d105      	bne.n	81073de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81073d2:	893b      	ldrh	r3, [r7, #8]
 81073d4:	b2da      	uxtb	r2, r3
 81073d6:	68fb      	ldr	r3, [r7, #12]
 81073d8:	681b      	ldr	r3, [r3, #0]
 81073da:	629a      	str	r2, [r3, #40]	; 0x28
 81073dc:	e015      	b.n	810740a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81073de:	893b      	ldrh	r3, [r7, #8]
 81073e0:	0a1b      	lsrs	r3, r3, #8
 81073e2:	b29b      	uxth	r3, r3
 81073e4:	b2da      	uxtb	r2, r3
 81073e6:	68fb      	ldr	r3, [r7, #12]
 81073e8:	681b      	ldr	r3, [r3, #0]
 81073ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81073ec:	69fa      	ldr	r2, [r7, #28]
 81073ee:	69b9      	ldr	r1, [r7, #24]
 81073f0:	68f8      	ldr	r0, [r7, #12]
 81073f2:	f000 fcc8 	bl	8107d86 <I2C_WaitOnTXISFlagUntilTimeout>
 81073f6:	4603      	mov	r3, r0
 81073f8:	2b00      	cmp	r3, #0
 81073fa:	d001      	beq.n	8107400 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81073fc:	2301      	movs	r3, #1
 81073fe:	e012      	b.n	8107426 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107400:	893b      	ldrh	r3, [r7, #8]
 8107402:	b2da      	uxtb	r2, r3
 8107404:	68fb      	ldr	r3, [r7, #12]
 8107406:	681b      	ldr	r3, [r3, #0]
 8107408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810740a:	69fb      	ldr	r3, [r7, #28]
 810740c:	9300      	str	r3, [sp, #0]
 810740e:	69bb      	ldr	r3, [r7, #24]
 8107410:	2200      	movs	r2, #0
 8107412:	2140      	movs	r1, #64	; 0x40
 8107414:	68f8      	ldr	r0, [r7, #12]
 8107416:	f000 fc76 	bl	8107d06 <I2C_WaitOnFlagUntilTimeout>
 810741a:	4603      	mov	r3, r0
 810741c:	2b00      	cmp	r3, #0
 810741e:	d001      	beq.n	8107424 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8107420:	2301      	movs	r3, #1
 8107422:	e000      	b.n	8107426 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107424:	2300      	movs	r3, #0
}
 8107426:	4618      	mov	r0, r3
 8107428:	3710      	adds	r7, #16
 810742a:	46bd      	mov	sp, r7
 810742c:	bd80      	pop	{r7, pc}
 810742e:	bf00      	nop
 8107430:	80002000 	.word	0x80002000

08107434 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107434:	b580      	push	{r7, lr}
 8107436:	b084      	sub	sp, #16
 8107438:	af00      	add	r7, sp, #0
 810743a:	6078      	str	r0, [r7, #4]
 810743c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 810743e:	687b      	ldr	r3, [r7, #4]
 8107440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107444:	b2db      	uxtb	r3, r3
 8107446:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810744a:	2b28      	cmp	r3, #40	; 0x28
 810744c:	d16a      	bne.n	8107524 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 810744e:	687b      	ldr	r3, [r7, #4]
 8107450:	681b      	ldr	r3, [r3, #0]
 8107452:	699b      	ldr	r3, [r3, #24]
 8107454:	0c1b      	lsrs	r3, r3, #16
 8107456:	b2db      	uxtb	r3, r3
 8107458:	f003 0301 	and.w	r3, r3, #1
 810745c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 810745e:	687b      	ldr	r3, [r7, #4]
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	699b      	ldr	r3, [r3, #24]
 8107464:	0c1b      	lsrs	r3, r3, #16
 8107466:	b29b      	uxth	r3, r3
 8107468:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 810746c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 810746e:	687b      	ldr	r3, [r7, #4]
 8107470:	681b      	ldr	r3, [r3, #0]
 8107472:	689b      	ldr	r3, [r3, #8]
 8107474:	b29b      	uxth	r3, r3
 8107476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 810747a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	68db      	ldr	r3, [r3, #12]
 8107482:	b29b      	uxth	r3, r3
 8107484:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107488:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	68db      	ldr	r3, [r3, #12]
 810748e:	2b02      	cmp	r3, #2
 8107490:	d138      	bne.n	8107504 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107492:	897b      	ldrh	r3, [r7, #10]
 8107494:	09db      	lsrs	r3, r3, #7
 8107496:	b29a      	uxth	r2, r3
 8107498:	89bb      	ldrh	r3, [r7, #12]
 810749a:	4053      	eors	r3, r2
 810749c:	b29b      	uxth	r3, r3
 810749e:	f003 0306 	and.w	r3, r3, #6
 81074a2:	2b00      	cmp	r3, #0
 81074a4:	d11c      	bne.n	81074e0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81074a6:	897b      	ldrh	r3, [r7, #10]
 81074a8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81074ae:	1c5a      	adds	r2, r3, #1
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81074b8:	2b02      	cmp	r3, #2
 81074ba:	d13b      	bne.n	8107534 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	2200      	movs	r2, #0
 81074c0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	2208      	movs	r2, #8
 81074c8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	2200      	movs	r2, #0
 81074ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 81074d2:	89ba      	ldrh	r2, [r7, #12]
 81074d4:	7bfb      	ldrb	r3, [r7, #15]
 81074d6:	4619      	mov	r1, r3
 81074d8:	6878      	ldr	r0, [r7, #4]
 81074da:	f7ff fdd4 	bl	8107086 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 81074de:	e029      	b.n	8107534 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 81074e0:	893b      	ldrh	r3, [r7, #8]
 81074e2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 81074e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81074e8:	6878      	ldr	r0, [r7, #4]
 81074ea:	f000 fd5d 	bl	8107fa8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	2200      	movs	r2, #0
 81074f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 81074f6:	89ba      	ldrh	r2, [r7, #12]
 81074f8:	7bfb      	ldrb	r3, [r7, #15]
 81074fa:	4619      	mov	r1, r3
 81074fc:	6878      	ldr	r0, [r7, #4]
 81074fe:	f7ff fdc2 	bl	8107086 <HAL_I2C_AddrCallback>
}
 8107502:	e017      	b.n	8107534 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107508:	6878      	ldr	r0, [r7, #4]
 810750a:	f000 fd4d 	bl	8107fa8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	2200      	movs	r2, #0
 8107512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107516:	89ba      	ldrh	r2, [r7, #12]
 8107518:	7bfb      	ldrb	r3, [r7, #15]
 810751a:	4619      	mov	r1, r3
 810751c:	6878      	ldr	r0, [r7, #4]
 810751e:	f7ff fdb2 	bl	8107086 <HAL_I2C_AddrCallback>
}
 8107522:	e007      	b.n	8107534 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	2208      	movs	r2, #8
 810752a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	2200      	movs	r2, #0
 8107530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107534:	bf00      	nop
 8107536:	3710      	adds	r7, #16
 8107538:	46bd      	mov	sp, r7
 810753a:	bd80      	pop	{r7, pc}

0810753c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 810753c:	b580      	push	{r7, lr}
 810753e:	b084      	sub	sp, #16
 8107540:	af00      	add	r7, sp, #0
 8107542:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107544:	687b      	ldr	r3, [r7, #4]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	681b      	ldr	r3, [r3, #0]
 810754a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810754c:	687b      	ldr	r3, [r7, #4]
 810754e:	2200      	movs	r2, #0
 8107550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	0b9b      	lsrs	r3, r3, #14
 8107558:	f003 0301 	and.w	r3, r3, #1
 810755c:	2b00      	cmp	r3, #0
 810755e:	d008      	beq.n	8107572 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	681b      	ldr	r3, [r3, #0]
 8107564:	681a      	ldr	r2, [r3, #0]
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	681b      	ldr	r3, [r3, #0]
 810756a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 810756e:	601a      	str	r2, [r3, #0]
 8107570:	e00d      	b.n	810758e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107572:	68fb      	ldr	r3, [r7, #12]
 8107574:	0bdb      	lsrs	r3, r3, #15
 8107576:	f003 0301 	and.w	r3, r3, #1
 810757a:	2b00      	cmp	r3, #0
 810757c:	d007      	beq.n	810758e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	681a      	ldr	r2, [r3, #0]
 8107584:	687b      	ldr	r3, [r7, #4]
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810758c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107594:	b2db      	uxtb	r3, r3
 8107596:	2b29      	cmp	r3, #41	; 0x29
 8107598:	d112      	bne.n	81075c0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	2228      	movs	r2, #40	; 0x28
 810759e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	2221      	movs	r2, #33	; 0x21
 81075a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81075a8:	2101      	movs	r1, #1
 81075aa:	6878      	ldr	r0, [r7, #4]
 81075ac:	f000 fcfc 	bl	8107fa8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81075b0:	687b      	ldr	r3, [r7, #4]
 81075b2:	2200      	movs	r2, #0
 81075b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81075b8:	6878      	ldr	r0, [r7, #4]
 81075ba:	f7ff fd50 	bl	810705e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 81075be:	e017      	b.n	81075f0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81075c6:	b2db      	uxtb	r3, r3
 81075c8:	2b2a      	cmp	r3, #42	; 0x2a
 81075ca:	d111      	bne.n	81075f0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	2228      	movs	r2, #40	; 0x28
 81075d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	2222      	movs	r2, #34	; 0x22
 81075d8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 81075da:	2102      	movs	r1, #2
 81075dc:	6878      	ldr	r0, [r7, #4]
 81075de:	f000 fce3 	bl	8107fa8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 81075e2:	687b      	ldr	r3, [r7, #4]
 81075e4:	2200      	movs	r2, #0
 81075e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81075ea:	6878      	ldr	r0, [r7, #4]
 81075ec:	f7ff fd41 	bl	8107072 <HAL_I2C_SlaveRxCpltCallback>
}
 81075f0:	bf00      	nop
 81075f2:	3710      	adds	r7, #16
 81075f4:	46bd      	mov	sp, r7
 81075f6:	bd80      	pop	{r7, pc}

081075f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81075f8:	b580      	push	{r7, lr}
 81075fa:	b086      	sub	sp, #24
 81075fc:	af00      	add	r7, sp, #0
 81075fe:	6078      	str	r0, [r7, #4]
 8107600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107602:	687b      	ldr	r3, [r7, #4]
 8107604:	681b      	ldr	r3, [r3, #0]
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 810760a:	683b      	ldr	r3, [r7, #0]
 810760c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107614:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107616:	687b      	ldr	r3, [r7, #4]
 8107618:	681b      	ldr	r3, [r3, #0]
 810761a:	2220      	movs	r2, #32
 810761c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810761e:	7bfb      	ldrb	r3, [r7, #15]
 8107620:	2b21      	cmp	r3, #33	; 0x21
 8107622:	d002      	beq.n	810762a <I2C_ITSlaveCplt+0x32>
 8107624:	7bfb      	ldrb	r3, [r7, #15]
 8107626:	2b29      	cmp	r3, #41	; 0x29
 8107628:	d108      	bne.n	810763c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 810762a:	f248 0101 	movw	r1, #32769	; 0x8001
 810762e:	6878      	ldr	r0, [r7, #4]
 8107630:	f000 fcba 	bl	8107fa8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	2221      	movs	r2, #33	; 0x21
 8107638:	631a      	str	r2, [r3, #48]	; 0x30
 810763a:	e00d      	b.n	8107658 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 810763c:	7bfb      	ldrb	r3, [r7, #15]
 810763e:	2b22      	cmp	r3, #34	; 0x22
 8107640:	d002      	beq.n	8107648 <I2C_ITSlaveCplt+0x50>
 8107642:	7bfb      	ldrb	r3, [r7, #15]
 8107644:	2b2a      	cmp	r3, #42	; 0x2a
 8107646:	d107      	bne.n	8107658 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107648:	f248 0102 	movw	r1, #32770	; 0x8002
 810764c:	6878      	ldr	r0, [r7, #4]
 810764e:	f000 fcab 	bl	8107fa8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	2222      	movs	r2, #34	; 0x22
 8107656:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	685a      	ldr	r2, [r3, #4]
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107666:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	681b      	ldr	r3, [r3, #0]
 810766c:	6859      	ldr	r1, [r3, #4]
 810766e:	687b      	ldr	r3, [r7, #4]
 8107670:	681a      	ldr	r2, [r3, #0]
 8107672:	4b80      	ldr	r3, [pc, #512]	; (8107874 <I2C_ITSlaveCplt+0x27c>)
 8107674:	400b      	ands	r3, r1
 8107676:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107678:	6878      	ldr	r0, [r7, #4]
 810767a:	f000 fb02 	bl	8107c82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 810767e:	693b      	ldr	r3, [r7, #16]
 8107680:	0b9b      	lsrs	r3, r3, #14
 8107682:	f003 0301 	and.w	r3, r3, #1
 8107686:	2b00      	cmp	r3, #0
 8107688:	d07a      	beq.n	8107780 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810768a:	687b      	ldr	r3, [r7, #4]
 810768c:	681b      	ldr	r3, [r3, #0]
 810768e:	681a      	ldr	r2, [r3, #0]
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	681b      	ldr	r3, [r3, #0]
 8107694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107698:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 810769a:	687b      	ldr	r3, [r7, #4]
 810769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810769e:	2b00      	cmp	r3, #0
 81076a0:	f000 8111 	beq.w	81078c6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 81076a4:	687b      	ldr	r3, [r7, #4]
 81076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076a8:	681b      	ldr	r3, [r3, #0]
 81076aa:	4a73      	ldr	r2, [pc, #460]	; (8107878 <I2C_ITSlaveCplt+0x280>)
 81076ac:	4293      	cmp	r3, r2
 81076ae:	d059      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076b4:	681b      	ldr	r3, [r3, #0]
 81076b6:	4a71      	ldr	r2, [pc, #452]	; (810787c <I2C_ITSlaveCplt+0x284>)
 81076b8:	4293      	cmp	r3, r2
 81076ba:	d053      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	4a6f      	ldr	r2, [pc, #444]	; (8107880 <I2C_ITSlaveCplt+0x288>)
 81076c4:	4293      	cmp	r3, r2
 81076c6:	d04d      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	4a6d      	ldr	r2, [pc, #436]	; (8107884 <I2C_ITSlaveCplt+0x28c>)
 81076d0:	4293      	cmp	r3, r2
 81076d2:	d047      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076d4:	687b      	ldr	r3, [r7, #4]
 81076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076d8:	681b      	ldr	r3, [r3, #0]
 81076da:	4a6b      	ldr	r2, [pc, #428]	; (8107888 <I2C_ITSlaveCplt+0x290>)
 81076dc:	4293      	cmp	r3, r2
 81076de:	d041      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076e4:	681b      	ldr	r3, [r3, #0]
 81076e6:	4a69      	ldr	r2, [pc, #420]	; (810788c <I2C_ITSlaveCplt+0x294>)
 81076e8:	4293      	cmp	r3, r2
 81076ea:	d03b      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076ec:	687b      	ldr	r3, [r7, #4]
 81076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076f0:	681b      	ldr	r3, [r3, #0]
 81076f2:	4a67      	ldr	r2, [pc, #412]	; (8107890 <I2C_ITSlaveCplt+0x298>)
 81076f4:	4293      	cmp	r3, r2
 81076f6:	d035      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076fc:	681b      	ldr	r3, [r3, #0]
 81076fe:	4a65      	ldr	r2, [pc, #404]	; (8107894 <I2C_ITSlaveCplt+0x29c>)
 8107700:	4293      	cmp	r3, r2
 8107702:	d02f      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	4a63      	ldr	r2, [pc, #396]	; (8107898 <I2C_ITSlaveCplt+0x2a0>)
 810770c:	4293      	cmp	r3, r2
 810770e:	d029      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107714:	681b      	ldr	r3, [r3, #0]
 8107716:	4a61      	ldr	r2, [pc, #388]	; (810789c <I2C_ITSlaveCplt+0x2a4>)
 8107718:	4293      	cmp	r3, r2
 810771a:	d023      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 810771c:	687b      	ldr	r3, [r7, #4]
 810771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107720:	681b      	ldr	r3, [r3, #0]
 8107722:	4a5f      	ldr	r2, [pc, #380]	; (81078a0 <I2C_ITSlaveCplt+0x2a8>)
 8107724:	4293      	cmp	r3, r2
 8107726:	d01d      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810772c:	681b      	ldr	r3, [r3, #0]
 810772e:	4a5d      	ldr	r2, [pc, #372]	; (81078a4 <I2C_ITSlaveCplt+0x2ac>)
 8107730:	4293      	cmp	r3, r2
 8107732:	d017      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107738:	681b      	ldr	r3, [r3, #0]
 810773a:	4a5b      	ldr	r2, [pc, #364]	; (81078a8 <I2C_ITSlaveCplt+0x2b0>)
 810773c:	4293      	cmp	r3, r2
 810773e:	d011      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 8107740:	687b      	ldr	r3, [r7, #4]
 8107742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107744:	681b      	ldr	r3, [r3, #0]
 8107746:	4a59      	ldr	r2, [pc, #356]	; (81078ac <I2C_ITSlaveCplt+0x2b4>)
 8107748:	4293      	cmp	r3, r2
 810774a:	d00b      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	4a57      	ldr	r2, [pc, #348]	; (81078b0 <I2C_ITSlaveCplt+0x2b8>)
 8107754:	4293      	cmp	r3, r2
 8107756:	d005      	beq.n	8107764 <I2C_ITSlaveCplt+0x16c>
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	4a55      	ldr	r2, [pc, #340]	; (81078b4 <I2C_ITSlaveCplt+0x2bc>)
 8107760:	4293      	cmp	r3, r2
 8107762:	d105      	bne.n	8107770 <I2C_ITSlaveCplt+0x178>
 8107764:	687b      	ldr	r3, [r7, #4]
 8107766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107768:	681b      	ldr	r3, [r3, #0]
 810776a:	685b      	ldr	r3, [r3, #4]
 810776c:	b29b      	uxth	r3, r3
 810776e:	e004      	b.n	810777a <I2C_ITSlaveCplt+0x182>
 8107770:	687b      	ldr	r3, [r7, #4]
 8107772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107774:	681b      	ldr	r3, [r3, #0]
 8107776:	685b      	ldr	r3, [r3, #4]
 8107778:	b29b      	uxth	r3, r3
 810777a:	687a      	ldr	r2, [r7, #4]
 810777c:	8553      	strh	r3, [r2, #42]	; 0x2a
 810777e:	e0a2      	b.n	81078c6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107780:	693b      	ldr	r3, [r7, #16]
 8107782:	0bdb      	lsrs	r3, r3, #15
 8107784:	f003 0301 	and.w	r3, r3, #1
 8107788:	2b00      	cmp	r3, #0
 810778a:	f000 809c 	beq.w	81078c6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810778e:	687b      	ldr	r3, [r7, #4]
 8107790:	681b      	ldr	r3, [r3, #0]
 8107792:	681a      	ldr	r2, [r3, #0]
 8107794:	687b      	ldr	r3, [r7, #4]
 8107796:	681b      	ldr	r3, [r3, #0]
 8107798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810779c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077a2:	2b00      	cmp	r3, #0
 81077a4:	f000 808f 	beq.w	81078c6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077ac:	681b      	ldr	r3, [r3, #0]
 81077ae:	4a32      	ldr	r2, [pc, #200]	; (8107878 <I2C_ITSlaveCplt+0x280>)
 81077b0:	4293      	cmp	r3, r2
 81077b2:	d059      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077b4:	687b      	ldr	r3, [r7, #4]
 81077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077b8:	681b      	ldr	r3, [r3, #0]
 81077ba:	4a30      	ldr	r2, [pc, #192]	; (810787c <I2C_ITSlaveCplt+0x284>)
 81077bc:	4293      	cmp	r3, r2
 81077be:	d053      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077c4:	681b      	ldr	r3, [r3, #0]
 81077c6:	4a2e      	ldr	r2, [pc, #184]	; (8107880 <I2C_ITSlaveCplt+0x288>)
 81077c8:	4293      	cmp	r3, r2
 81077ca:	d04d      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077d0:	681b      	ldr	r3, [r3, #0]
 81077d2:	4a2c      	ldr	r2, [pc, #176]	; (8107884 <I2C_ITSlaveCplt+0x28c>)
 81077d4:	4293      	cmp	r3, r2
 81077d6:	d047      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077dc:	681b      	ldr	r3, [r3, #0]
 81077de:	4a2a      	ldr	r2, [pc, #168]	; (8107888 <I2C_ITSlaveCplt+0x290>)
 81077e0:	4293      	cmp	r3, r2
 81077e2:	d041      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	4a28      	ldr	r2, [pc, #160]	; (810788c <I2C_ITSlaveCplt+0x294>)
 81077ec:	4293      	cmp	r3, r2
 81077ee:	d03b      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077f0:	687b      	ldr	r3, [r7, #4]
 81077f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	4a26      	ldr	r2, [pc, #152]	; (8107890 <I2C_ITSlaveCplt+0x298>)
 81077f8:	4293      	cmp	r3, r2
 81077fa:	d035      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 81077fc:	687b      	ldr	r3, [r7, #4]
 81077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107800:	681b      	ldr	r3, [r3, #0]
 8107802:	4a24      	ldr	r2, [pc, #144]	; (8107894 <I2C_ITSlaveCplt+0x29c>)
 8107804:	4293      	cmp	r3, r2
 8107806:	d02f      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810780c:	681b      	ldr	r3, [r3, #0]
 810780e:	4a22      	ldr	r2, [pc, #136]	; (8107898 <I2C_ITSlaveCplt+0x2a0>)
 8107810:	4293      	cmp	r3, r2
 8107812:	d029      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	4a20      	ldr	r2, [pc, #128]	; (810789c <I2C_ITSlaveCplt+0x2a4>)
 810781c:	4293      	cmp	r3, r2
 810781e:	d023      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107824:	681b      	ldr	r3, [r3, #0]
 8107826:	4a1e      	ldr	r2, [pc, #120]	; (81078a0 <I2C_ITSlaveCplt+0x2a8>)
 8107828:	4293      	cmp	r3, r2
 810782a:	d01d      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107830:	681b      	ldr	r3, [r3, #0]
 8107832:	4a1c      	ldr	r2, [pc, #112]	; (81078a4 <I2C_ITSlaveCplt+0x2ac>)
 8107834:	4293      	cmp	r3, r2
 8107836:	d017      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810783c:	681b      	ldr	r3, [r3, #0]
 810783e:	4a1a      	ldr	r2, [pc, #104]	; (81078a8 <I2C_ITSlaveCplt+0x2b0>)
 8107840:	4293      	cmp	r3, r2
 8107842:	d011      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	4a18      	ldr	r2, [pc, #96]	; (81078ac <I2C_ITSlaveCplt+0x2b4>)
 810784c:	4293      	cmp	r3, r2
 810784e:	d00b      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107854:	681b      	ldr	r3, [r3, #0]
 8107856:	4a16      	ldr	r2, [pc, #88]	; (81078b0 <I2C_ITSlaveCplt+0x2b8>)
 8107858:	4293      	cmp	r3, r2
 810785a:	d005      	beq.n	8107868 <I2C_ITSlaveCplt+0x270>
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107860:	681b      	ldr	r3, [r3, #0]
 8107862:	4a14      	ldr	r2, [pc, #80]	; (81078b4 <I2C_ITSlaveCplt+0x2bc>)
 8107864:	4293      	cmp	r3, r2
 8107866:	d127      	bne.n	81078b8 <I2C_ITSlaveCplt+0x2c0>
 8107868:	687b      	ldr	r3, [r7, #4]
 810786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810786c:	681b      	ldr	r3, [r3, #0]
 810786e:	685b      	ldr	r3, [r3, #4]
 8107870:	b29b      	uxth	r3, r3
 8107872:	e026      	b.n	81078c2 <I2C_ITSlaveCplt+0x2ca>
 8107874:	fe00e800 	.word	0xfe00e800
 8107878:	40020010 	.word	0x40020010
 810787c:	40020028 	.word	0x40020028
 8107880:	40020040 	.word	0x40020040
 8107884:	40020058 	.word	0x40020058
 8107888:	40020070 	.word	0x40020070
 810788c:	40020088 	.word	0x40020088
 8107890:	400200a0 	.word	0x400200a0
 8107894:	400200b8 	.word	0x400200b8
 8107898:	40020410 	.word	0x40020410
 810789c:	40020428 	.word	0x40020428
 81078a0:	40020440 	.word	0x40020440
 81078a4:	40020458 	.word	0x40020458
 81078a8:	40020470 	.word	0x40020470
 81078ac:	40020488 	.word	0x40020488
 81078b0:	400204a0 	.word	0x400204a0
 81078b4:	400204b8 	.word	0x400204b8
 81078b8:	687b      	ldr	r3, [r7, #4]
 81078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81078bc:	681b      	ldr	r3, [r3, #0]
 81078be:	685b      	ldr	r3, [r3, #4]
 81078c0:	b29b      	uxth	r3, r3
 81078c2:	687a      	ldr	r2, [r7, #4]
 81078c4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 81078c6:	697b      	ldr	r3, [r7, #20]
 81078c8:	089b      	lsrs	r3, r3, #2
 81078ca:	f003 0301 	and.w	r3, r3, #1
 81078ce:	2b00      	cmp	r3, #0
 81078d0:	d020      	beq.n	8107914 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 81078d2:	697b      	ldr	r3, [r7, #20]
 81078d4:	f023 0304 	bic.w	r3, r3, #4
 81078d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	681b      	ldr	r3, [r3, #0]
 81078de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81078e0:	687b      	ldr	r3, [r7, #4]
 81078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078e4:	b2d2      	uxtb	r2, r2
 81078e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078ec:	1c5a      	adds	r2, r3, #1
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81078f6:	2b00      	cmp	r3, #0
 81078f8:	d00c      	beq.n	8107914 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81078fe:	3b01      	subs	r3, #1
 8107900:	b29a      	uxth	r2, r3
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107906:	687b      	ldr	r3, [r7, #4]
 8107908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810790a:	b29b      	uxth	r3, r3
 810790c:	3b01      	subs	r3, #1
 810790e:	b29a      	uxth	r2, r3
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107918:	b29b      	uxth	r3, r3
 810791a:	2b00      	cmp	r3, #0
 810791c:	d005      	beq.n	810792a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107922:	f043 0204 	orr.w	r2, r3, #4
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	2200      	movs	r2, #0
 810792e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	2200      	movs	r2, #0
 8107936:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810793c:	2b00      	cmp	r3, #0
 810793e:	d010      	beq.n	8107962 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107944:	4619      	mov	r1, r3
 8107946:	6878      	ldr	r0, [r7, #4]
 8107948:	f000 f8a4 	bl	8107a94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 810794c:	687b      	ldr	r3, [r7, #4]
 810794e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107952:	b2db      	uxtb	r3, r3
 8107954:	2b28      	cmp	r3, #40	; 0x28
 8107956:	d141      	bne.n	81079dc <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107958:	6979      	ldr	r1, [r7, #20]
 810795a:	6878      	ldr	r0, [r7, #4]
 810795c:	f000 f844 	bl	81079e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107960:	e03c      	b.n	81079dc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107962:	687b      	ldr	r3, [r7, #4]
 8107964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107966:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810796a:	d014      	beq.n	8107996 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 810796c:	6878      	ldr	r0, [r7, #4]
 810796e:	f7ff fde5 	bl	810753c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	4a1b      	ldr	r2, [pc, #108]	; (81079e4 <I2C_ITSlaveCplt+0x3ec>)
 8107976:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	2220      	movs	r2, #32
 810797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	2200      	movs	r2, #0
 8107984:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	2200      	movs	r2, #0
 810798a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 810798e:	6878      	ldr	r0, [r7, #4]
 8107990:	f7ff fb87 	bl	81070a2 <HAL_I2C_ListenCpltCallback>
}
 8107994:	e022      	b.n	81079dc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810799c:	b2db      	uxtb	r3, r3
 810799e:	2b22      	cmp	r3, #34	; 0x22
 81079a0:	d10e      	bne.n	81079c0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	2220      	movs	r2, #32
 81079a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	2200      	movs	r2, #0
 81079ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	2200      	movs	r2, #0
 81079b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81079b8:	6878      	ldr	r0, [r7, #4]
 81079ba:	f7ff fb5a 	bl	8107072 <HAL_I2C_SlaveRxCpltCallback>
}
 81079be:	e00d      	b.n	81079dc <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	2220      	movs	r2, #32
 81079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81079c8:	687b      	ldr	r3, [r7, #4]
 81079ca:	2200      	movs	r2, #0
 81079cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	2200      	movs	r2, #0
 81079d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81079d6:	6878      	ldr	r0, [r7, #4]
 81079d8:	f7ff fb41 	bl	810705e <HAL_I2C_SlaveTxCpltCallback>
}
 81079dc:	bf00      	nop
 81079de:	3718      	adds	r7, #24
 81079e0:	46bd      	mov	sp, r7
 81079e2:	bd80      	pop	{r7, pc}
 81079e4:	ffff0000 	.word	0xffff0000

081079e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81079e8:	b580      	push	{r7, lr}
 81079ea:	b082      	sub	sp, #8
 81079ec:	af00      	add	r7, sp, #0
 81079ee:	6078      	str	r0, [r7, #4]
 81079f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	4a26      	ldr	r2, [pc, #152]	; (8107a90 <I2C_ITListenCplt+0xa8>)
 81079f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	2200      	movs	r2, #0
 81079fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	2220      	movs	r2, #32
 8107a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	2200      	movs	r2, #0
 8107a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107a0e:	687b      	ldr	r3, [r7, #4]
 8107a10:	2200      	movs	r2, #0
 8107a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107a14:	683b      	ldr	r3, [r7, #0]
 8107a16:	089b      	lsrs	r3, r3, #2
 8107a18:	f003 0301 	and.w	r3, r3, #1
 8107a1c:	2b00      	cmp	r3, #0
 8107a1e:	d022      	beq.n	8107a66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a2a:	b2d2      	uxtb	r2, r2
 8107a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107a2e:	687b      	ldr	r3, [r7, #4]
 8107a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a32:	1c5a      	adds	r2, r3, #1
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107a3c:	2b00      	cmp	r3, #0
 8107a3e:	d012      	beq.n	8107a66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107a44:	3b01      	subs	r3, #1
 8107a46:	b29a      	uxth	r2, r3
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107a50:	b29b      	uxth	r3, r3
 8107a52:	3b01      	subs	r3, #1
 8107a54:	b29a      	uxth	r2, r3
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107a5e:	f043 0204 	orr.w	r2, r3, #4
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107a66:	f248 0103 	movw	r1, #32771	; 0x8003
 8107a6a:	6878      	ldr	r0, [r7, #4]
 8107a6c:	f000 fa9c 	bl	8107fa8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	2210      	movs	r2, #16
 8107a76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	2200      	movs	r2, #0
 8107a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8107a80:	6878      	ldr	r0, [r7, #4]
 8107a82:	f7ff fb0e 	bl	81070a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8107a86:	bf00      	nop
 8107a88:	3708      	adds	r7, #8
 8107a8a:	46bd      	mov	sp, r7
 8107a8c:	bd80      	pop	{r7, pc}
 8107a8e:	bf00      	nop
 8107a90:	ffff0000 	.word	0xffff0000

08107a94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8107a94:	b580      	push	{r7, lr}
 8107a96:	b084      	sub	sp, #16
 8107a98:	af00      	add	r7, sp, #0
 8107a9a:	6078      	str	r0, [r7, #4]
 8107a9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	2200      	movs	r2, #0
 8107aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107aae:	687b      	ldr	r3, [r7, #4]
 8107ab0:	4a5d      	ldr	r2, [pc, #372]	; (8107c28 <I2C_ITError+0x194>)
 8107ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	2200      	movs	r2, #0
 8107ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107abe:	683b      	ldr	r3, [r7, #0]
 8107ac0:	431a      	orrs	r2, r3
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8107ac6:	7bfb      	ldrb	r3, [r7, #15]
 8107ac8:	2b28      	cmp	r3, #40	; 0x28
 8107aca:	d005      	beq.n	8107ad8 <I2C_ITError+0x44>
 8107acc:	7bfb      	ldrb	r3, [r7, #15]
 8107ace:	2b29      	cmp	r3, #41	; 0x29
 8107ad0:	d002      	beq.n	8107ad8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8107ad2:	7bfb      	ldrb	r3, [r7, #15]
 8107ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8107ad6:	d10b      	bne.n	8107af0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107ad8:	2103      	movs	r1, #3
 8107ada:	6878      	ldr	r0, [r7, #4]
 8107adc:	f000 fa64 	bl	8107fa8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	2228      	movs	r2, #40	; 0x28
 8107ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	4a50      	ldr	r2, [pc, #320]	; (8107c2c <I2C_ITError+0x198>)
 8107aec:	635a      	str	r2, [r3, #52]	; 0x34
 8107aee:	e011      	b.n	8107b14 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107af0:	f248 0103 	movw	r1, #32771	; 0x8003
 8107af4:	6878      	ldr	r0, [r7, #4]
 8107af6:	f000 fa57 	bl	8107fa8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107b00:	b2db      	uxtb	r3, r3
 8107b02:	2b60      	cmp	r3, #96	; 0x60
 8107b04:	d003      	beq.n	8107b0e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	2220      	movs	r2, #32
 8107b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8107b0e:	687b      	ldr	r3, [r7, #4]
 8107b10:	2200      	movs	r2, #0
 8107b12:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107b18:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b1e:	2b00      	cmp	r3, #0
 8107b20:	d039      	beq.n	8107b96 <I2C_ITError+0x102>
 8107b22:	68bb      	ldr	r3, [r7, #8]
 8107b24:	2b11      	cmp	r3, #17
 8107b26:	d002      	beq.n	8107b2e <I2C_ITError+0x9a>
 8107b28:	68bb      	ldr	r3, [r7, #8]
 8107b2a:	2b21      	cmp	r3, #33	; 0x21
 8107b2c:	d133      	bne.n	8107b96 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	681b      	ldr	r3, [r3, #0]
 8107b32:	681b      	ldr	r3, [r3, #0]
 8107b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107b3c:	d107      	bne.n	8107b4e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	681b      	ldr	r3, [r3, #0]
 8107b42:	681a      	ldr	r2, [r3, #0]
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	681b      	ldr	r3, [r3, #0]
 8107b48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107b4c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107b4e:	687b      	ldr	r3, [r7, #4]
 8107b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b52:	4618      	mov	r0, r3
 8107b54:	f7fe f96c 	bl	8105e30 <HAL_DMA_GetState>
 8107b58:	4603      	mov	r3, r0
 8107b5a:	2b01      	cmp	r3, #1
 8107b5c:	d017      	beq.n	8107b8e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b62:	4a33      	ldr	r2, [pc, #204]	; (8107c30 <I2C_ITError+0x19c>)
 8107b64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	2200      	movs	r2, #0
 8107b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8107b6e:	687b      	ldr	r3, [r7, #4]
 8107b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b72:	4618      	mov	r0, r3
 8107b74:	f7fc ffee 	bl	8104b54 <HAL_DMA_Abort_IT>
 8107b78:	4603      	mov	r3, r0
 8107b7a:	2b00      	cmp	r3, #0
 8107b7c:	d04d      	beq.n	8107c1a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107b84:	687a      	ldr	r2, [r7, #4]
 8107b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8107b88:	4610      	mov	r0, r2
 8107b8a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107b8c:	e045      	b.n	8107c1a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8107b8e:	6878      	ldr	r0, [r7, #4]
 8107b90:	f000 f850 	bl	8107c34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107b94:	e041      	b.n	8107c1a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107b9a:	2b00      	cmp	r3, #0
 8107b9c:	d039      	beq.n	8107c12 <I2C_ITError+0x17e>
 8107b9e:	68bb      	ldr	r3, [r7, #8]
 8107ba0:	2b12      	cmp	r3, #18
 8107ba2:	d002      	beq.n	8107baa <I2C_ITError+0x116>
 8107ba4:	68bb      	ldr	r3, [r7, #8]
 8107ba6:	2b22      	cmp	r3, #34	; 0x22
 8107ba8:	d133      	bne.n	8107c12 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	681b      	ldr	r3, [r3, #0]
 8107bae:	681b      	ldr	r3, [r3, #0]
 8107bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107bb8:	d107      	bne.n	8107bca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	681a      	ldr	r2, [r3, #0]
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	681b      	ldr	r3, [r3, #0]
 8107bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107bc8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bce:	4618      	mov	r0, r3
 8107bd0:	f7fe f92e 	bl	8105e30 <HAL_DMA_GetState>
 8107bd4:	4603      	mov	r3, r0
 8107bd6:	2b01      	cmp	r3, #1
 8107bd8:	d017      	beq.n	8107c0a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bde:	4a14      	ldr	r2, [pc, #80]	; (8107c30 <I2C_ITError+0x19c>)
 8107be0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107be2:	687b      	ldr	r3, [r7, #4]
 8107be4:	2200      	movs	r2, #0
 8107be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bee:	4618      	mov	r0, r3
 8107bf0:	f7fc ffb0 	bl	8104b54 <HAL_DMA_Abort_IT>
 8107bf4:	4603      	mov	r3, r0
 8107bf6:	2b00      	cmp	r3, #0
 8107bf8:	d011      	beq.n	8107c1e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107c00:	687a      	ldr	r2, [r7, #4]
 8107c02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8107c04:	4610      	mov	r0, r2
 8107c06:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107c08:	e009      	b.n	8107c1e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8107c0a:	6878      	ldr	r0, [r7, #4]
 8107c0c:	f000 f812 	bl	8107c34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107c10:	e005      	b.n	8107c1e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8107c12:	6878      	ldr	r0, [r7, #4]
 8107c14:	f000 f80e 	bl	8107c34 <I2C_TreatErrorCallback>
  }
}
 8107c18:	e002      	b.n	8107c20 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107c1a:	bf00      	nop
 8107c1c:	e000      	b.n	8107c20 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107c1e:	bf00      	nop
}
 8107c20:	bf00      	nop
 8107c22:	3710      	adds	r7, #16
 8107c24:	46bd      	mov	sp, r7
 8107c26:	bd80      	pop	{r7, pc}
 8107c28:	ffff0000 	.word	0xffff0000
 8107c2c:	081070df 	.word	0x081070df
 8107c30:	08107ccb 	.word	0x08107ccb

08107c34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107c34:	b580      	push	{r7, lr}
 8107c36:	b082      	sub	sp, #8
 8107c38:	af00      	add	r7, sp, #0
 8107c3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8107c3c:	687b      	ldr	r3, [r7, #4]
 8107c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c42:	b2db      	uxtb	r3, r3
 8107c44:	2b60      	cmp	r3, #96	; 0x60
 8107c46:	d10e      	bne.n	8107c66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8107c48:	687b      	ldr	r3, [r7, #4]
 8107c4a:	2220      	movs	r2, #32
 8107c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	2200      	movs	r2, #0
 8107c54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107c56:	687b      	ldr	r3, [r7, #4]
 8107c58:	2200      	movs	r2, #0
 8107c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8107c5e:	6878      	ldr	r0, [r7, #4]
 8107c60:	f7ff fa33 	bl	81070ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107c64:	e009      	b.n	8107c7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	2200      	movs	r2, #0
 8107c6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	2200      	movs	r2, #0
 8107c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8107c74:	6878      	ldr	r0, [r7, #4]
 8107c76:	f7ff fa1e 	bl	81070b6 <HAL_I2C_ErrorCallback>
}
 8107c7a:	bf00      	nop
 8107c7c:	3708      	adds	r7, #8
 8107c7e:	46bd      	mov	sp, r7
 8107c80:	bd80      	pop	{r7, pc}

08107c82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8107c82:	b480      	push	{r7}
 8107c84:	b083      	sub	sp, #12
 8107c86:	af00      	add	r7, sp, #0
 8107c88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	681b      	ldr	r3, [r3, #0]
 8107c8e:	699b      	ldr	r3, [r3, #24]
 8107c90:	f003 0302 	and.w	r3, r3, #2
 8107c94:	2b02      	cmp	r3, #2
 8107c96:	d103      	bne.n	8107ca0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	681b      	ldr	r3, [r3, #0]
 8107c9c:	2200      	movs	r2, #0
 8107c9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	681b      	ldr	r3, [r3, #0]
 8107ca4:	699b      	ldr	r3, [r3, #24]
 8107ca6:	f003 0301 	and.w	r3, r3, #1
 8107caa:	2b01      	cmp	r3, #1
 8107cac:	d007      	beq.n	8107cbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	681b      	ldr	r3, [r3, #0]
 8107cb2:	699a      	ldr	r2, [r3, #24]
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	681b      	ldr	r3, [r3, #0]
 8107cb8:	f042 0201 	orr.w	r2, r2, #1
 8107cbc:	619a      	str	r2, [r3, #24]
  }
}
 8107cbe:	bf00      	nop
 8107cc0:	370c      	adds	r7, #12
 8107cc2:	46bd      	mov	sp, r7
 8107cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cc8:	4770      	bx	lr

08107cca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8107cca:	b580      	push	{r7, lr}
 8107ccc:	b084      	sub	sp, #16
 8107cce:	af00      	add	r7, sp, #0
 8107cd0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cd6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8107cd8:	68fb      	ldr	r3, [r7, #12]
 8107cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cdc:	2b00      	cmp	r3, #0
 8107cde:	d003      	beq.n	8107ce8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8107ce0:	68fb      	ldr	r3, [r7, #12]
 8107ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ce4:	2200      	movs	r2, #0
 8107ce6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8107ce8:	68fb      	ldr	r3, [r7, #12]
 8107cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cec:	2b00      	cmp	r3, #0
 8107cee:	d003      	beq.n	8107cf8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8107cf0:	68fb      	ldr	r3, [r7, #12]
 8107cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cf4:	2200      	movs	r2, #0
 8107cf6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8107cf8:	68f8      	ldr	r0, [r7, #12]
 8107cfa:	f7ff ff9b 	bl	8107c34 <I2C_TreatErrorCallback>
}
 8107cfe:	bf00      	nop
 8107d00:	3710      	adds	r7, #16
 8107d02:	46bd      	mov	sp, r7
 8107d04:	bd80      	pop	{r7, pc}

08107d06 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8107d06:	b580      	push	{r7, lr}
 8107d08:	b084      	sub	sp, #16
 8107d0a:	af00      	add	r7, sp, #0
 8107d0c:	60f8      	str	r0, [r7, #12]
 8107d0e:	60b9      	str	r1, [r7, #8]
 8107d10:	603b      	str	r3, [r7, #0]
 8107d12:	4613      	mov	r3, r2
 8107d14:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107d16:	e022      	b.n	8107d5e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107d18:	683b      	ldr	r3, [r7, #0]
 8107d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107d1e:	d01e      	beq.n	8107d5e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107d20:	f7fb fc66 	bl	81035f0 <HAL_GetTick>
 8107d24:	4602      	mov	r2, r0
 8107d26:	69bb      	ldr	r3, [r7, #24]
 8107d28:	1ad3      	subs	r3, r2, r3
 8107d2a:	683a      	ldr	r2, [r7, #0]
 8107d2c:	429a      	cmp	r2, r3
 8107d2e:	d302      	bcc.n	8107d36 <I2C_WaitOnFlagUntilTimeout+0x30>
 8107d30:	683b      	ldr	r3, [r7, #0]
 8107d32:	2b00      	cmp	r3, #0
 8107d34:	d113      	bne.n	8107d5e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107d36:	68fb      	ldr	r3, [r7, #12]
 8107d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d3a:	f043 0220 	orr.w	r2, r3, #32
 8107d3e:	68fb      	ldr	r3, [r7, #12]
 8107d40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107d42:	68fb      	ldr	r3, [r7, #12]
 8107d44:	2220      	movs	r2, #32
 8107d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d4a:	68fb      	ldr	r3, [r7, #12]
 8107d4c:	2200      	movs	r2, #0
 8107d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107d52:	68fb      	ldr	r3, [r7, #12]
 8107d54:	2200      	movs	r2, #0
 8107d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8107d5a:	2301      	movs	r3, #1
 8107d5c:	e00f      	b.n	8107d7e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107d5e:	68fb      	ldr	r3, [r7, #12]
 8107d60:	681b      	ldr	r3, [r3, #0]
 8107d62:	699a      	ldr	r2, [r3, #24]
 8107d64:	68bb      	ldr	r3, [r7, #8]
 8107d66:	4013      	ands	r3, r2
 8107d68:	68ba      	ldr	r2, [r7, #8]
 8107d6a:	429a      	cmp	r2, r3
 8107d6c:	bf0c      	ite	eq
 8107d6e:	2301      	moveq	r3, #1
 8107d70:	2300      	movne	r3, #0
 8107d72:	b2db      	uxtb	r3, r3
 8107d74:	461a      	mov	r2, r3
 8107d76:	79fb      	ldrb	r3, [r7, #7]
 8107d78:	429a      	cmp	r2, r3
 8107d7a:	d0cd      	beq.n	8107d18 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8107d7c:	2300      	movs	r3, #0
}
 8107d7e:	4618      	mov	r0, r3
 8107d80:	3710      	adds	r7, #16
 8107d82:	46bd      	mov	sp, r7
 8107d84:	bd80      	pop	{r7, pc}

08107d86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107d86:	b580      	push	{r7, lr}
 8107d88:	b084      	sub	sp, #16
 8107d8a:	af00      	add	r7, sp, #0
 8107d8c:	60f8      	str	r0, [r7, #12]
 8107d8e:	60b9      	str	r1, [r7, #8]
 8107d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107d92:	e02c      	b.n	8107dee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8107d94:	687a      	ldr	r2, [r7, #4]
 8107d96:	68b9      	ldr	r1, [r7, #8]
 8107d98:	68f8      	ldr	r0, [r7, #12]
 8107d9a:	f000 f871 	bl	8107e80 <I2C_IsAcknowledgeFailed>
 8107d9e:	4603      	mov	r3, r0
 8107da0:	2b00      	cmp	r3, #0
 8107da2:	d001      	beq.n	8107da8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107da4:	2301      	movs	r3, #1
 8107da6:	e02a      	b.n	8107dfe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107da8:	68bb      	ldr	r3, [r7, #8]
 8107daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107dae:	d01e      	beq.n	8107dee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107db0:	f7fb fc1e 	bl	81035f0 <HAL_GetTick>
 8107db4:	4602      	mov	r2, r0
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	1ad3      	subs	r3, r2, r3
 8107dba:	68ba      	ldr	r2, [r7, #8]
 8107dbc:	429a      	cmp	r2, r3
 8107dbe:	d302      	bcc.n	8107dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8107dc0:	68bb      	ldr	r3, [r7, #8]
 8107dc2:	2b00      	cmp	r3, #0
 8107dc4:	d113      	bne.n	8107dee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107dc6:	68fb      	ldr	r3, [r7, #12]
 8107dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107dca:	f043 0220 	orr.w	r2, r3, #32
 8107dce:	68fb      	ldr	r3, [r7, #12]
 8107dd0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107dd2:	68fb      	ldr	r3, [r7, #12]
 8107dd4:	2220      	movs	r2, #32
 8107dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107dda:	68fb      	ldr	r3, [r7, #12]
 8107ddc:	2200      	movs	r2, #0
 8107dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107de2:	68fb      	ldr	r3, [r7, #12]
 8107de4:	2200      	movs	r2, #0
 8107de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8107dea:	2301      	movs	r3, #1
 8107dec:	e007      	b.n	8107dfe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107dee:	68fb      	ldr	r3, [r7, #12]
 8107df0:	681b      	ldr	r3, [r3, #0]
 8107df2:	699b      	ldr	r3, [r3, #24]
 8107df4:	f003 0302 	and.w	r3, r3, #2
 8107df8:	2b02      	cmp	r3, #2
 8107dfa:	d1cb      	bne.n	8107d94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8107dfc:	2300      	movs	r3, #0
}
 8107dfe:	4618      	mov	r0, r3
 8107e00:	3710      	adds	r7, #16
 8107e02:	46bd      	mov	sp, r7
 8107e04:	bd80      	pop	{r7, pc}

08107e06 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107e06:	b580      	push	{r7, lr}
 8107e08:	b084      	sub	sp, #16
 8107e0a:	af00      	add	r7, sp, #0
 8107e0c:	60f8      	str	r0, [r7, #12]
 8107e0e:	60b9      	str	r1, [r7, #8]
 8107e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107e12:	e028      	b.n	8107e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8107e14:	687a      	ldr	r2, [r7, #4]
 8107e16:	68b9      	ldr	r1, [r7, #8]
 8107e18:	68f8      	ldr	r0, [r7, #12]
 8107e1a:	f000 f831 	bl	8107e80 <I2C_IsAcknowledgeFailed>
 8107e1e:	4603      	mov	r3, r0
 8107e20:	2b00      	cmp	r3, #0
 8107e22:	d001      	beq.n	8107e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107e24:	2301      	movs	r3, #1
 8107e26:	e026      	b.n	8107e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107e28:	f7fb fbe2 	bl	81035f0 <HAL_GetTick>
 8107e2c:	4602      	mov	r2, r0
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	1ad3      	subs	r3, r2, r3
 8107e32:	68ba      	ldr	r2, [r7, #8]
 8107e34:	429a      	cmp	r2, r3
 8107e36:	d302      	bcc.n	8107e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8107e38:	68bb      	ldr	r3, [r7, #8]
 8107e3a:	2b00      	cmp	r3, #0
 8107e3c:	d113      	bne.n	8107e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107e3e:	68fb      	ldr	r3, [r7, #12]
 8107e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107e42:	f043 0220 	orr.w	r2, r3, #32
 8107e46:	68fb      	ldr	r3, [r7, #12]
 8107e48:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8107e4a:	68fb      	ldr	r3, [r7, #12]
 8107e4c:	2220      	movs	r2, #32
 8107e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107e52:	68fb      	ldr	r3, [r7, #12]
 8107e54:	2200      	movs	r2, #0
 8107e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107e5a:	68fb      	ldr	r3, [r7, #12]
 8107e5c:	2200      	movs	r2, #0
 8107e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8107e62:	2301      	movs	r3, #1
 8107e64:	e007      	b.n	8107e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107e66:	68fb      	ldr	r3, [r7, #12]
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	699b      	ldr	r3, [r3, #24]
 8107e6c:	f003 0320 	and.w	r3, r3, #32
 8107e70:	2b20      	cmp	r3, #32
 8107e72:	d1cf      	bne.n	8107e14 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8107e74:	2300      	movs	r3, #0
}
 8107e76:	4618      	mov	r0, r3
 8107e78:	3710      	adds	r7, #16
 8107e7a:	46bd      	mov	sp, r7
 8107e7c:	bd80      	pop	{r7, pc}
	...

08107e80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107e80:	b580      	push	{r7, lr}
 8107e82:	b084      	sub	sp, #16
 8107e84:	af00      	add	r7, sp, #0
 8107e86:	60f8      	str	r0, [r7, #12]
 8107e88:	60b9      	str	r1, [r7, #8]
 8107e8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8107e8c:	68fb      	ldr	r3, [r7, #12]
 8107e8e:	681b      	ldr	r3, [r3, #0]
 8107e90:	699b      	ldr	r3, [r3, #24]
 8107e92:	f003 0310 	and.w	r3, r3, #16
 8107e96:	2b10      	cmp	r3, #16
 8107e98:	d151      	bne.n	8107f3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107e9a:	e022      	b.n	8107ee2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8107e9c:	68bb      	ldr	r3, [r7, #8]
 8107e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107ea2:	d01e      	beq.n	8107ee2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107ea4:	f7fb fba4 	bl	81035f0 <HAL_GetTick>
 8107ea8:	4602      	mov	r2, r0
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	1ad3      	subs	r3, r2, r3
 8107eae:	68ba      	ldr	r2, [r7, #8]
 8107eb0:	429a      	cmp	r2, r3
 8107eb2:	d302      	bcc.n	8107eba <I2C_IsAcknowledgeFailed+0x3a>
 8107eb4:	68bb      	ldr	r3, [r7, #8]
 8107eb6:	2b00      	cmp	r3, #0
 8107eb8:	d113      	bne.n	8107ee2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107eba:	68fb      	ldr	r3, [r7, #12]
 8107ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ebe:	f043 0220 	orr.w	r2, r3, #32
 8107ec2:	68fb      	ldr	r3, [r7, #12]
 8107ec4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8107ec6:	68fb      	ldr	r3, [r7, #12]
 8107ec8:	2220      	movs	r2, #32
 8107eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8107ece:	68fb      	ldr	r3, [r7, #12]
 8107ed0:	2200      	movs	r2, #0
 8107ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107ed6:	68fb      	ldr	r3, [r7, #12]
 8107ed8:	2200      	movs	r2, #0
 8107eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8107ede:	2301      	movs	r3, #1
 8107ee0:	e02e      	b.n	8107f40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107ee2:	68fb      	ldr	r3, [r7, #12]
 8107ee4:	681b      	ldr	r3, [r3, #0]
 8107ee6:	699b      	ldr	r3, [r3, #24]
 8107ee8:	f003 0320 	and.w	r3, r3, #32
 8107eec:	2b20      	cmp	r3, #32
 8107eee:	d1d5      	bne.n	8107e9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	681b      	ldr	r3, [r3, #0]
 8107ef4:	2210      	movs	r2, #16
 8107ef6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107ef8:	68fb      	ldr	r3, [r7, #12]
 8107efa:	681b      	ldr	r3, [r3, #0]
 8107efc:	2220      	movs	r2, #32
 8107efe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107f00:	68f8      	ldr	r0, [r7, #12]
 8107f02:	f7ff febe 	bl	8107c82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107f06:	68fb      	ldr	r3, [r7, #12]
 8107f08:	681b      	ldr	r3, [r3, #0]
 8107f0a:	6859      	ldr	r1, [r3, #4]
 8107f0c:	68fb      	ldr	r3, [r7, #12]
 8107f0e:	681a      	ldr	r2, [r3, #0]
 8107f10:	4b0d      	ldr	r3, [pc, #52]	; (8107f48 <I2C_IsAcknowledgeFailed+0xc8>)
 8107f12:	400b      	ands	r3, r1
 8107f14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107f16:	68fb      	ldr	r3, [r7, #12]
 8107f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f1a:	f043 0204 	orr.w	r2, r3, #4
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8107f22:	68fb      	ldr	r3, [r7, #12]
 8107f24:	2220      	movs	r2, #32
 8107f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8107f2a:	68fb      	ldr	r3, [r7, #12]
 8107f2c:	2200      	movs	r2, #0
 8107f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107f32:	68fb      	ldr	r3, [r7, #12]
 8107f34:	2200      	movs	r2, #0
 8107f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8107f3a:	2301      	movs	r3, #1
 8107f3c:	e000      	b.n	8107f40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8107f3e:	2300      	movs	r3, #0
}
 8107f40:	4618      	mov	r0, r3
 8107f42:	3710      	adds	r7, #16
 8107f44:	46bd      	mov	sp, r7
 8107f46:	bd80      	pop	{r7, pc}
 8107f48:	fe00e800 	.word	0xfe00e800

08107f4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8107f4c:	b480      	push	{r7}
 8107f4e:	b085      	sub	sp, #20
 8107f50:	af00      	add	r7, sp, #0
 8107f52:	60f8      	str	r0, [r7, #12]
 8107f54:	607b      	str	r3, [r7, #4]
 8107f56:	460b      	mov	r3, r1
 8107f58:	817b      	strh	r3, [r7, #10]
 8107f5a:	4613      	mov	r3, r2
 8107f5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8107f5e:	68fb      	ldr	r3, [r7, #12]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	685a      	ldr	r2, [r3, #4]
 8107f64:	69bb      	ldr	r3, [r7, #24]
 8107f66:	0d5b      	lsrs	r3, r3, #21
 8107f68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8107f6c:	4b0d      	ldr	r3, [pc, #52]	; (8107fa4 <I2C_TransferConfig+0x58>)
 8107f6e:	430b      	orrs	r3, r1
 8107f70:	43db      	mvns	r3, r3
 8107f72:	ea02 0103 	and.w	r1, r2, r3
 8107f76:	897b      	ldrh	r3, [r7, #10]
 8107f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8107f7c:	7a7b      	ldrb	r3, [r7, #9]
 8107f7e:	041b      	lsls	r3, r3, #16
 8107f80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8107f84:	431a      	orrs	r2, r3
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	431a      	orrs	r2, r3
 8107f8a:	69bb      	ldr	r3, [r7, #24]
 8107f8c:	431a      	orrs	r2, r3
 8107f8e:	68fb      	ldr	r3, [r7, #12]
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	430a      	orrs	r2, r1
 8107f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8107f96:	bf00      	nop
 8107f98:	3714      	adds	r7, #20
 8107f9a:	46bd      	mov	sp, r7
 8107f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fa0:	4770      	bx	lr
 8107fa2:	bf00      	nop
 8107fa4:	03ff63ff 	.word	0x03ff63ff

08107fa8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8107fa8:	b480      	push	{r7}
 8107faa:	b085      	sub	sp, #20
 8107fac:	af00      	add	r7, sp, #0
 8107fae:	6078      	str	r0, [r7, #4]
 8107fb0:	460b      	mov	r3, r1
 8107fb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8107fb4:	2300      	movs	r3, #0
 8107fb6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8107fb8:	887b      	ldrh	r3, [r7, #2]
 8107fba:	f003 0301 	and.w	r3, r3, #1
 8107fbe:	2b00      	cmp	r3, #0
 8107fc0:	d00f      	beq.n	8107fe2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8107fc2:	68fb      	ldr	r3, [r7, #12]
 8107fc4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8107fc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107fd0:	b2db      	uxtb	r3, r3
 8107fd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107fd6:	2b28      	cmp	r3, #40	; 0x28
 8107fd8:	d003      	beq.n	8107fe2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107fda:	68fb      	ldr	r3, [r7, #12]
 8107fdc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8107fe0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8107fe2:	887b      	ldrh	r3, [r7, #2]
 8107fe4:	f003 0302 	and.w	r3, r3, #2
 8107fe8:	2b00      	cmp	r3, #0
 8107fea:	d00f      	beq.n	810800c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8107fec:	68fb      	ldr	r3, [r7, #12]
 8107fee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8107ff2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ffa:	b2db      	uxtb	r3, r3
 8107ffc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108000:	2b28      	cmp	r3, #40	; 0x28
 8108002:	d003      	beq.n	810800c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108004:	68fb      	ldr	r3, [r7, #12]
 8108006:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 810800a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 810800c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108010:	2b00      	cmp	r3, #0
 8108012:	da03      	bge.n	810801c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108014:	68fb      	ldr	r3, [r7, #12]
 8108016:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 810801a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 810801c:	887b      	ldrh	r3, [r7, #2]
 810801e:	2b10      	cmp	r3, #16
 8108020:	d103      	bne.n	810802a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108022:	68fb      	ldr	r3, [r7, #12]
 8108024:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108028:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 810802a:	887b      	ldrh	r3, [r7, #2]
 810802c:	2b20      	cmp	r3, #32
 810802e:	d103      	bne.n	8108038 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8108030:	68fb      	ldr	r3, [r7, #12]
 8108032:	f043 0320 	orr.w	r3, r3, #32
 8108036:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108038:	887b      	ldrh	r3, [r7, #2]
 810803a:	2b40      	cmp	r3, #64	; 0x40
 810803c:	d103      	bne.n	8108046 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 810803e:	68fb      	ldr	r3, [r7, #12]
 8108040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108044:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	6819      	ldr	r1, [r3, #0]
 810804c:	68fb      	ldr	r3, [r7, #12]
 810804e:	43da      	mvns	r2, r3
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	400a      	ands	r2, r1
 8108056:	601a      	str	r2, [r3, #0]
}
 8108058:	bf00      	nop
 810805a:	3714      	adds	r7, #20
 810805c:	46bd      	mov	sp, r7
 810805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108062:	4770      	bx	lr

08108064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8108064:	b480      	push	{r7}
 8108066:	b083      	sub	sp, #12
 8108068:	af00      	add	r7, sp, #0
 810806a:	6078      	str	r0, [r7, #4]
 810806c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108074:	b2db      	uxtb	r3, r3
 8108076:	2b20      	cmp	r3, #32
 8108078:	d138      	bne.n	81080ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108080:	2b01      	cmp	r3, #1
 8108082:	d101      	bne.n	8108088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8108084:	2302      	movs	r3, #2
 8108086:	e032      	b.n	81080ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	2201      	movs	r2, #1
 810808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	2224      	movs	r2, #36	; 0x24
 8108094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	681b      	ldr	r3, [r3, #0]
 810809c:	681a      	ldr	r2, [r3, #0]
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	681b      	ldr	r3, [r3, #0]
 81080a2:	f022 0201 	bic.w	r2, r2, #1
 81080a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	681b      	ldr	r3, [r3, #0]
 81080ac:	681a      	ldr	r2, [r3, #0]
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	681b      	ldr	r3, [r3, #0]
 81080b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81080b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	6819      	ldr	r1, [r3, #0]
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	681b      	ldr	r3, [r3, #0]
 81080c2:	683a      	ldr	r2, [r7, #0]
 81080c4:	430a      	orrs	r2, r1
 81080c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	681b      	ldr	r3, [r3, #0]
 81080cc:	681a      	ldr	r2, [r3, #0]
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	681b      	ldr	r3, [r3, #0]
 81080d2:	f042 0201 	orr.w	r2, r2, #1
 81080d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	2220      	movs	r2, #32
 81080dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	2200      	movs	r2, #0
 81080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81080e8:	2300      	movs	r3, #0
 81080ea:	e000      	b.n	81080ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81080ec:	2302      	movs	r3, #2
  }
}
 81080ee:	4618      	mov	r0, r3
 81080f0:	370c      	adds	r7, #12
 81080f2:	46bd      	mov	sp, r7
 81080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080f8:	4770      	bx	lr

081080fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81080fa:	b480      	push	{r7}
 81080fc:	b085      	sub	sp, #20
 81080fe:	af00      	add	r7, sp, #0
 8108100:	6078      	str	r0, [r7, #4]
 8108102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108104:	687b      	ldr	r3, [r7, #4]
 8108106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810810a:	b2db      	uxtb	r3, r3
 810810c:	2b20      	cmp	r3, #32
 810810e:	d139      	bne.n	8108184 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108116:	2b01      	cmp	r3, #1
 8108118:	d101      	bne.n	810811e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810811a:	2302      	movs	r3, #2
 810811c:	e033      	b.n	8108186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	2201      	movs	r2, #1
 8108122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	2224      	movs	r2, #36	; 0x24
 810812a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	681b      	ldr	r3, [r3, #0]
 8108132:	681a      	ldr	r2, [r3, #0]
 8108134:	687b      	ldr	r3, [r7, #4]
 8108136:	681b      	ldr	r3, [r3, #0]
 8108138:	f022 0201 	bic.w	r2, r2, #1
 810813c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	681b      	ldr	r3, [r3, #0]
 8108144:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8108146:	68fb      	ldr	r3, [r7, #12]
 8108148:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810814c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810814e:	683b      	ldr	r3, [r7, #0]
 8108150:	021b      	lsls	r3, r3, #8
 8108152:	68fa      	ldr	r2, [r7, #12]
 8108154:	4313      	orrs	r3, r2
 8108156:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108158:	687b      	ldr	r3, [r7, #4]
 810815a:	681b      	ldr	r3, [r3, #0]
 810815c:	68fa      	ldr	r2, [r7, #12]
 810815e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	681b      	ldr	r3, [r3, #0]
 8108164:	681a      	ldr	r2, [r3, #0]
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	681b      	ldr	r3, [r3, #0]
 810816a:	f042 0201 	orr.w	r2, r2, #1
 810816e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	2220      	movs	r2, #32
 8108174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	2200      	movs	r2, #0
 810817c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108180:	2300      	movs	r3, #0
 8108182:	e000      	b.n	8108186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8108184:	2302      	movs	r3, #2
  }
}
 8108186:	4618      	mov	r0, r3
 8108188:	3714      	adds	r7, #20
 810818a:	46bd      	mov	sp, r7
 810818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108190:	4770      	bx	lr
	...

08108194 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108194:	b580      	push	{r7, lr}
 8108196:	b084      	sub	sp, #16
 8108198:	af00      	add	r7, sp, #0
 810819a:	60f8      	str	r0, [r7, #12]
 810819c:	460b      	mov	r3, r1
 810819e:	607a      	str	r2, [r7, #4]
 81081a0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81081a2:	4b37      	ldr	r3, [pc, #220]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81081a4:	681b      	ldr	r3, [r3, #0]
 81081a6:	f023 0201 	bic.w	r2, r3, #1
 81081aa:	4935      	ldr	r1, [pc, #212]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81081ac:	68fb      	ldr	r3, [r7, #12]
 81081ae:	4313      	orrs	r3, r2
 81081b0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	2b00      	cmp	r3, #0
 81081b6:	d123      	bne.n	8108200 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81081b8:	f7fb fbd6 	bl	8103968 <HAL_GetCurrentCPUID>
 81081bc:	4603      	mov	r3, r0
 81081be:	2b03      	cmp	r3, #3
 81081c0:	d158      	bne.n	8108274 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81081c2:	4b2f      	ldr	r3, [pc, #188]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81081c4:	691b      	ldr	r3, [r3, #16]
 81081c6:	4a2e      	ldr	r2, [pc, #184]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81081c8:	f023 0301 	bic.w	r3, r3, #1
 81081cc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81081ce:	4b2d      	ldr	r3, [pc, #180]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81081d0:	691b      	ldr	r3, [r3, #16]
 81081d2:	4a2c      	ldr	r2, [pc, #176]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81081d4:	f043 0304 	orr.w	r3, r3, #4
 81081d8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81081da:	f3bf 8f4f 	dsb	sy
}
 81081de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81081e0:	f3bf 8f6f 	isb	sy
}
 81081e4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81081e6:	7afb      	ldrb	r3, [r7, #11]
 81081e8:	2b01      	cmp	r3, #1
 81081ea:	d101      	bne.n	81081f0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81081ec:	bf30      	wfi
 81081ee:	e000      	b.n	81081f2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81081f0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81081f2:	4b24      	ldr	r3, [pc, #144]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81081f4:	691b      	ldr	r3, [r3, #16]
 81081f6:	4a23      	ldr	r2, [pc, #140]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81081f8:	f023 0304 	bic.w	r3, r3, #4
 81081fc:	6113      	str	r3, [r2, #16]
 81081fe:	e03c      	b.n	810827a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	2b01      	cmp	r3, #1
 8108204:	d123      	bne.n	810824e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108206:	f7fb fbaf 	bl	8103968 <HAL_GetCurrentCPUID>
 810820a:	4603      	mov	r3, r0
 810820c:	2b01      	cmp	r3, #1
 810820e:	d133      	bne.n	8108278 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108210:	4b1b      	ldr	r3, [pc, #108]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108212:	695b      	ldr	r3, [r3, #20]
 8108214:	4a1a      	ldr	r2, [pc, #104]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108216:	f023 0302 	bic.w	r3, r3, #2
 810821a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810821c:	4b19      	ldr	r3, [pc, #100]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810821e:	691b      	ldr	r3, [r3, #16]
 8108220:	4a18      	ldr	r2, [pc, #96]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108222:	f043 0304 	orr.w	r3, r3, #4
 8108226:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108228:	f3bf 8f4f 	dsb	sy
}
 810822c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810822e:	f3bf 8f6f 	isb	sy
}
 8108232:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108234:	7afb      	ldrb	r3, [r7, #11]
 8108236:	2b01      	cmp	r3, #1
 8108238:	d101      	bne.n	810823e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810823a:	bf30      	wfi
 810823c:	e000      	b.n	8108240 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810823e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108240:	4b10      	ldr	r3, [pc, #64]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108242:	691b      	ldr	r3, [r3, #16]
 8108244:	4a0f      	ldr	r2, [pc, #60]	; (8108284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108246:	f023 0304 	bic.w	r3, r3, #4
 810824a:	6113      	str	r3, [r2, #16]
 810824c:	e015      	b.n	810827a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810824e:	f7fb fb8b 	bl	8103968 <HAL_GetCurrentCPUID>
 8108252:	4603      	mov	r3, r0
 8108254:	2b03      	cmp	r3, #3
 8108256:	d106      	bne.n	8108266 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8108258:	4b09      	ldr	r3, [pc, #36]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 810825a:	691b      	ldr	r3, [r3, #16]
 810825c:	4a08      	ldr	r2, [pc, #32]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 810825e:	f023 0304 	bic.w	r3, r3, #4
 8108262:	6113      	str	r3, [r2, #16]
 8108264:	e009      	b.n	810827a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8108266:	4b06      	ldr	r3, [pc, #24]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108268:	695b      	ldr	r3, [r3, #20]
 810826a:	4a05      	ldr	r2, [pc, #20]	; (8108280 <HAL_PWREx_EnterSTOPMode+0xec>)
 810826c:	f023 0304 	bic.w	r3, r3, #4
 8108270:	6153      	str	r3, [r2, #20]
 8108272:	e002      	b.n	810827a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108274:	bf00      	nop
 8108276:	e000      	b.n	810827a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108278:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810827a:	3710      	adds	r7, #16
 810827c:	46bd      	mov	sp, r7
 810827e:	bd80      	pop	{r7, pc}
 8108280:	58024800 	.word	0x58024800
 8108284:	e000ed00 	.word	0xe000ed00

08108288 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108288:	b580      	push	{r7, lr}
 810828a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810828c:	f7fb fb6c 	bl	8103968 <HAL_GetCurrentCPUID>
 8108290:	4603      	mov	r3, r0
 8108292:	2b03      	cmp	r3, #3
 8108294:	d101      	bne.n	810829a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8108296:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108298:	e001      	b.n	810829e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810829a:	bf40      	sev
    __WFE ();
 810829c:	bf20      	wfe
}
 810829e:	bf00      	nop
 81082a0:	bd80      	pop	{r7, pc}
	...

081082a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81082a4:	b480      	push	{r7}
 81082a6:	b089      	sub	sp, #36	; 0x24
 81082a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81082aa:	4bb3      	ldr	r3, [pc, #716]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81082ac:	691b      	ldr	r3, [r3, #16]
 81082ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81082b2:	2b18      	cmp	r3, #24
 81082b4:	f200 8155 	bhi.w	8108562 <HAL_RCC_GetSysClockFreq+0x2be>
 81082b8:	a201      	add	r2, pc, #4	; (adr r2, 81082c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082be:	bf00      	nop
 81082c0:	08108325 	.word	0x08108325
 81082c4:	08108563 	.word	0x08108563
 81082c8:	08108563 	.word	0x08108563
 81082cc:	08108563 	.word	0x08108563
 81082d0:	08108563 	.word	0x08108563
 81082d4:	08108563 	.word	0x08108563
 81082d8:	08108563 	.word	0x08108563
 81082dc:	08108563 	.word	0x08108563
 81082e0:	0810834b 	.word	0x0810834b
 81082e4:	08108563 	.word	0x08108563
 81082e8:	08108563 	.word	0x08108563
 81082ec:	08108563 	.word	0x08108563
 81082f0:	08108563 	.word	0x08108563
 81082f4:	08108563 	.word	0x08108563
 81082f8:	08108563 	.word	0x08108563
 81082fc:	08108563 	.word	0x08108563
 8108300:	08108351 	.word	0x08108351
 8108304:	08108563 	.word	0x08108563
 8108308:	08108563 	.word	0x08108563
 810830c:	08108563 	.word	0x08108563
 8108310:	08108563 	.word	0x08108563
 8108314:	08108563 	.word	0x08108563
 8108318:	08108563 	.word	0x08108563
 810831c:	08108563 	.word	0x08108563
 8108320:	08108357 	.word	0x08108357
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108324:	4b94      	ldr	r3, [pc, #592]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108326:	681b      	ldr	r3, [r3, #0]
 8108328:	f003 0320 	and.w	r3, r3, #32
 810832c:	2b00      	cmp	r3, #0
 810832e:	d009      	beq.n	8108344 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108330:	4b91      	ldr	r3, [pc, #580]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108332:	681b      	ldr	r3, [r3, #0]
 8108334:	08db      	lsrs	r3, r3, #3
 8108336:	f003 0303 	and.w	r3, r3, #3
 810833a:	4a90      	ldr	r2, [pc, #576]	; (810857c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810833c:	fa22 f303 	lsr.w	r3, r2, r3
 8108340:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8108342:	e111      	b.n	8108568 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8108344:	4b8d      	ldr	r3, [pc, #564]	; (810857c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108346:	61bb      	str	r3, [r7, #24]
    break;
 8108348:	e10e      	b.n	8108568 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810834a:	4b8d      	ldr	r3, [pc, #564]	; (8108580 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810834c:	61bb      	str	r3, [r7, #24]
    break;
 810834e:	e10b      	b.n	8108568 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108350:	4b8c      	ldr	r3, [pc, #560]	; (8108584 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8108352:	61bb      	str	r3, [r7, #24]
    break;
 8108354:	e108      	b.n	8108568 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108356:	4b88      	ldr	r3, [pc, #544]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810835a:	f003 0303 	and.w	r3, r3, #3
 810835e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8108360:	4b85      	ldr	r3, [pc, #532]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108364:	091b      	lsrs	r3, r3, #4
 8108366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810836a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810836c:	4b82      	ldr	r3, [pc, #520]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108370:	f003 0301 	and.w	r3, r3, #1
 8108374:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8108376:	4b80      	ldr	r3, [pc, #512]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810837a:	08db      	lsrs	r3, r3, #3
 810837c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108380:	68fa      	ldr	r2, [r7, #12]
 8108382:	fb02 f303 	mul.w	r3, r2, r3
 8108386:	ee07 3a90 	vmov	s15, r3
 810838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810838e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8108392:	693b      	ldr	r3, [r7, #16]
 8108394:	2b00      	cmp	r3, #0
 8108396:	f000 80e1 	beq.w	810855c <HAL_RCC_GetSysClockFreq+0x2b8>
 810839a:	697b      	ldr	r3, [r7, #20]
 810839c:	2b02      	cmp	r3, #2
 810839e:	f000 8083 	beq.w	81084a8 <HAL_RCC_GetSysClockFreq+0x204>
 81083a2:	697b      	ldr	r3, [r7, #20]
 81083a4:	2b02      	cmp	r3, #2
 81083a6:	f200 80a1 	bhi.w	81084ec <HAL_RCC_GetSysClockFreq+0x248>
 81083aa:	697b      	ldr	r3, [r7, #20]
 81083ac:	2b00      	cmp	r3, #0
 81083ae:	d003      	beq.n	81083b8 <HAL_RCC_GetSysClockFreq+0x114>
 81083b0:	697b      	ldr	r3, [r7, #20]
 81083b2:	2b01      	cmp	r3, #1
 81083b4:	d056      	beq.n	8108464 <HAL_RCC_GetSysClockFreq+0x1c0>
 81083b6:	e099      	b.n	81084ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81083b8:	4b6f      	ldr	r3, [pc, #444]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81083ba:	681b      	ldr	r3, [r3, #0]
 81083bc:	f003 0320 	and.w	r3, r3, #32
 81083c0:	2b00      	cmp	r3, #0
 81083c2:	d02d      	beq.n	8108420 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81083c4:	4b6c      	ldr	r3, [pc, #432]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81083c6:	681b      	ldr	r3, [r3, #0]
 81083c8:	08db      	lsrs	r3, r3, #3
 81083ca:	f003 0303 	and.w	r3, r3, #3
 81083ce:	4a6b      	ldr	r2, [pc, #428]	; (810857c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81083d0:	fa22 f303 	lsr.w	r3, r2, r3
 81083d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81083d6:	687b      	ldr	r3, [r7, #4]
 81083d8:	ee07 3a90 	vmov	s15, r3
 81083dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083e0:	693b      	ldr	r3, [r7, #16]
 81083e2:	ee07 3a90 	vmov	s15, r3
 81083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81083ee:	4b62      	ldr	r3, [pc, #392]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81083f6:	ee07 3a90 	vmov	s15, r3
 81083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8108402:	eddf 5a61 	vldr	s11, [pc, #388]	; 8108588 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108416:	ee67 7a27 	vmul.f32	s15, s14, s15
 810841a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810841e:	e087      	b.n	8108530 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108420:	693b      	ldr	r3, [r7, #16]
 8108422:	ee07 3a90 	vmov	s15, r3
 8108426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810842a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810858c <HAL_RCC_GetSysClockFreq+0x2e8>
 810842e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108432:	4b51      	ldr	r3, [pc, #324]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810843a:	ee07 3a90 	vmov	s15, r3
 810843e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108442:	ed97 6a02 	vldr	s12, [r7, #8]
 8108446:	eddf 5a50 	vldr	s11, [pc, #320]	; 8108588 <HAL_RCC_GetSysClockFreq+0x2e4>
 810844a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810844e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810845a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810845e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108462:	e065      	b.n	8108530 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108464:	693b      	ldr	r3, [r7, #16]
 8108466:	ee07 3a90 	vmov	s15, r3
 810846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810846e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8108590 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108476:	4b40      	ldr	r3, [pc, #256]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810847e:	ee07 3a90 	vmov	s15, r3
 8108482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108486:	ed97 6a02 	vldr	s12, [r7, #8]
 810848a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8108588 <HAL_RCC_GetSysClockFreq+0x2e4>
 810848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81084a6:	e043      	b.n	8108530 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81084a8:	693b      	ldr	r3, [r7, #16]
 81084aa:	ee07 3a90 	vmov	s15, r3
 81084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8108594 <HAL_RCC_GetSysClockFreq+0x2f0>
 81084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084ba:	4b2f      	ldr	r3, [pc, #188]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81084c2:	ee07 3a90 	vmov	s15, r3
 81084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81084ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8108588 <HAL_RCC_GetSysClockFreq+0x2e4>
 81084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81084da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81084ea:	e021      	b.n	8108530 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81084ec:	693b      	ldr	r3, [r7, #16]
 81084ee:	ee07 3a90 	vmov	s15, r3
 81084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8108590 <HAL_RCC_GetSysClockFreq+0x2ec>
 81084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084fe:	4b1e      	ldr	r3, [pc, #120]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108506:	ee07 3a90 	vmov	s15, r3
 810850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810850e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108512:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8108588 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810851a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108526:	ee67 7a27 	vmul.f32	s15, s14, s15
 810852a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810852e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108530:	4b11      	ldr	r3, [pc, #68]	; (8108578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108534:	0a5b      	lsrs	r3, r3, #9
 8108536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810853a:	3301      	adds	r3, #1
 810853c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810853e:	683b      	ldr	r3, [r7, #0]
 8108540:	ee07 3a90 	vmov	s15, r3
 8108544:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108548:	edd7 6a07 	vldr	s13, [r7, #28]
 810854c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108554:	ee17 3a90 	vmov	r3, s15
 8108558:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810855a:	e005      	b.n	8108568 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810855c:	2300      	movs	r3, #0
 810855e:	61bb      	str	r3, [r7, #24]
    break;
 8108560:	e002      	b.n	8108568 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8108562:	4b07      	ldr	r3, [pc, #28]	; (8108580 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108564:	61bb      	str	r3, [r7, #24]
    break;
 8108566:	bf00      	nop
  }

  return sysclockfreq;
 8108568:	69bb      	ldr	r3, [r7, #24]
}
 810856a:	4618      	mov	r0, r3
 810856c:	3724      	adds	r7, #36	; 0x24
 810856e:	46bd      	mov	sp, r7
 8108570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108574:	4770      	bx	lr
 8108576:	bf00      	nop
 8108578:	58024400 	.word	0x58024400
 810857c:	03d09000 	.word	0x03d09000
 8108580:	003d0900 	.word	0x003d0900
 8108584:	00f42400 	.word	0x00f42400
 8108588:	46000000 	.word	0x46000000
 810858c:	4c742400 	.word	0x4c742400
 8108590:	4a742400 	.word	0x4a742400
 8108594:	4b742400 	.word	0x4b742400

08108598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8108598:	b580      	push	{r7, lr}
 810859a:	b082      	sub	sp, #8
 810859c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810859e:	f7ff fe81 	bl	81082a4 <HAL_RCC_GetSysClockFreq>
 81085a2:	4602      	mov	r2, r0
 81085a4:	4b11      	ldr	r3, [pc, #68]	; (81085ec <HAL_RCC_GetHCLKFreq+0x54>)
 81085a6:	699b      	ldr	r3, [r3, #24]
 81085a8:	0a1b      	lsrs	r3, r3, #8
 81085aa:	f003 030f 	and.w	r3, r3, #15
 81085ae:	4910      	ldr	r1, [pc, #64]	; (81085f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81085b0:	5ccb      	ldrb	r3, [r1, r3]
 81085b2:	f003 031f 	and.w	r3, r3, #31
 81085b6:	fa22 f303 	lsr.w	r3, r2, r3
 81085ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81085bc:	4b0b      	ldr	r3, [pc, #44]	; (81085ec <HAL_RCC_GetHCLKFreq+0x54>)
 81085be:	699b      	ldr	r3, [r3, #24]
 81085c0:	f003 030f 	and.w	r3, r3, #15
 81085c4:	4a0a      	ldr	r2, [pc, #40]	; (81085f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81085c6:	5cd3      	ldrb	r3, [r2, r3]
 81085c8:	f003 031f 	and.w	r3, r3, #31
 81085cc:	687a      	ldr	r2, [r7, #4]
 81085ce:	fa22 f303 	lsr.w	r3, r2, r3
 81085d2:	4a08      	ldr	r2, [pc, #32]	; (81085f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81085d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81085d6:	4b07      	ldr	r3, [pc, #28]	; (81085f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81085d8:	681b      	ldr	r3, [r3, #0]
 81085da:	4a07      	ldr	r2, [pc, #28]	; (81085f8 <HAL_RCC_GetHCLKFreq+0x60>)
 81085dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81085de:	4b05      	ldr	r3, [pc, #20]	; (81085f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81085e0:	681b      	ldr	r3, [r3, #0]
}
 81085e2:	4618      	mov	r0, r3
 81085e4:	3708      	adds	r7, #8
 81085e6:	46bd      	mov	sp, r7
 81085e8:	bd80      	pop	{r7, pc}
 81085ea:	bf00      	nop
 81085ec:	58024400 	.word	0x58024400
 81085f0:	0810d56c 	.word	0x0810d56c
 81085f4:	10000004 	.word	0x10000004
 81085f8:	10000000 	.word	0x10000000

081085fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81085fc:	b580      	push	{r7, lr}
 81085fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108600:	f7ff ffca 	bl	8108598 <HAL_RCC_GetHCLKFreq>
 8108604:	4602      	mov	r2, r0
 8108606:	4b06      	ldr	r3, [pc, #24]	; (8108620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8108608:	69db      	ldr	r3, [r3, #28]
 810860a:	091b      	lsrs	r3, r3, #4
 810860c:	f003 0307 	and.w	r3, r3, #7
 8108610:	4904      	ldr	r1, [pc, #16]	; (8108624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8108612:	5ccb      	ldrb	r3, [r1, r3]
 8108614:	f003 031f 	and.w	r3, r3, #31
 8108618:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810861c:	4618      	mov	r0, r3
 810861e:	bd80      	pop	{r7, pc}
 8108620:	58024400 	.word	0x58024400
 8108624:	0810d56c 	.word	0x0810d56c

08108628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8108628:	b580      	push	{r7, lr}
 810862a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810862c:	f7ff ffb4 	bl	8108598 <HAL_RCC_GetHCLKFreq>
 8108630:	4602      	mov	r2, r0
 8108632:	4b06      	ldr	r3, [pc, #24]	; (810864c <HAL_RCC_GetPCLK2Freq+0x24>)
 8108634:	69db      	ldr	r3, [r3, #28]
 8108636:	0a1b      	lsrs	r3, r3, #8
 8108638:	f003 0307 	and.w	r3, r3, #7
 810863c:	4904      	ldr	r1, [pc, #16]	; (8108650 <HAL_RCC_GetPCLK2Freq+0x28>)
 810863e:	5ccb      	ldrb	r3, [r1, r3]
 8108640:	f003 031f 	and.w	r3, r3, #31
 8108644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108648:	4618      	mov	r0, r3
 810864a:	bd80      	pop	{r7, pc}
 810864c:	58024400 	.word	0x58024400
 8108650:	0810d56c 	.word	0x0810d56c

08108654 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8108654:	b580      	push	{r7, lr}
 8108656:	b086      	sub	sp, #24
 8108658:	af00      	add	r7, sp, #0
 810865a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810865c:	2300      	movs	r3, #0
 810865e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8108660:	2300      	movs	r3, #0
 8108662:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	681b      	ldr	r3, [r3, #0]
 8108668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810866c:	2b00      	cmp	r3, #0
 810866e:	d03f      	beq.n	81086f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108674:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108678:	d02a      	beq.n	81086d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810867a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810867e:	d824      	bhi.n	81086ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108684:	d018      	beq.n	81086b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810868a:	d81e      	bhi.n	81086ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 810868c:	2b00      	cmp	r3, #0
 810868e:	d003      	beq.n	8108698 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8108690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108694:	d007      	beq.n	81086a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8108696:	e018      	b.n	81086ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108698:	4bab      	ldr	r3, [pc, #684]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810869c:	4aaa      	ldr	r2, [pc, #680]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810869e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81086a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81086a4:	e015      	b.n	81086d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81086a6:	687b      	ldr	r3, [r7, #4]
 81086a8:	3304      	adds	r3, #4
 81086aa:	2102      	movs	r1, #2
 81086ac:	4618      	mov	r0, r3
 81086ae:	f001 f9cf 	bl	8109a50 <RCCEx_PLL2_Config>
 81086b2:	4603      	mov	r3, r0
 81086b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81086b6:	e00c      	b.n	81086d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81086b8:	687b      	ldr	r3, [r7, #4]
 81086ba:	3324      	adds	r3, #36	; 0x24
 81086bc:	2102      	movs	r1, #2
 81086be:	4618      	mov	r0, r3
 81086c0:	f001 fa78 	bl	8109bb4 <RCCEx_PLL3_Config>
 81086c4:	4603      	mov	r3, r0
 81086c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81086c8:	e003      	b.n	81086d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81086ca:	2301      	movs	r3, #1
 81086cc:	75fb      	strb	r3, [r7, #23]
      break;
 81086ce:	e000      	b.n	81086d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81086d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81086d2:	7dfb      	ldrb	r3, [r7, #23]
 81086d4:	2b00      	cmp	r3, #0
 81086d6:	d109      	bne.n	81086ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81086d8:	4b9b      	ldr	r3, [pc, #620]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81086da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81086dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81086e0:	687b      	ldr	r3, [r7, #4]
 81086e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81086e4:	4998      	ldr	r1, [pc, #608]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81086e6:	4313      	orrs	r3, r2
 81086e8:	650b      	str	r3, [r1, #80]	; 0x50
 81086ea:	e001      	b.n	81086f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086ec:	7dfb      	ldrb	r3, [r7, #23]
 81086ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81086f8:	2b00      	cmp	r3, #0
 81086fa:	d03d      	beq.n	8108778 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108700:	2b04      	cmp	r3, #4
 8108702:	d826      	bhi.n	8108752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108704:	a201      	add	r2, pc, #4	; (adr r2, 810870c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8108706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810870a:	bf00      	nop
 810870c:	08108721 	.word	0x08108721
 8108710:	0810872f 	.word	0x0810872f
 8108714:	08108741 	.word	0x08108741
 8108718:	08108759 	.word	0x08108759
 810871c:	08108759 	.word	0x08108759
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108720:	4b89      	ldr	r3, [pc, #548]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108724:	4a88      	ldr	r2, [pc, #544]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810872a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810872c:	e015      	b.n	810875a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	3304      	adds	r3, #4
 8108732:	2100      	movs	r1, #0
 8108734:	4618      	mov	r0, r3
 8108736:	f001 f98b 	bl	8109a50 <RCCEx_PLL2_Config>
 810873a:	4603      	mov	r3, r0
 810873c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810873e:	e00c      	b.n	810875a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	3324      	adds	r3, #36	; 0x24
 8108744:	2100      	movs	r1, #0
 8108746:	4618      	mov	r0, r3
 8108748:	f001 fa34 	bl	8109bb4 <RCCEx_PLL3_Config>
 810874c:	4603      	mov	r3, r0
 810874e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108750:	e003      	b.n	810875a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108752:	2301      	movs	r3, #1
 8108754:	75fb      	strb	r3, [r7, #23]
      break;
 8108756:	e000      	b.n	810875a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8108758:	bf00      	nop
    }

    if(ret == HAL_OK)
 810875a:	7dfb      	ldrb	r3, [r7, #23]
 810875c:	2b00      	cmp	r3, #0
 810875e:	d109      	bne.n	8108774 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108760:	4b79      	ldr	r3, [pc, #484]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108764:	f023 0207 	bic.w	r2, r3, #7
 8108768:	687b      	ldr	r3, [r7, #4]
 810876a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810876c:	4976      	ldr	r1, [pc, #472]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810876e:	4313      	orrs	r3, r2
 8108770:	650b      	str	r3, [r1, #80]	; 0x50
 8108772:	e001      	b.n	8108778 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108774:	7dfb      	ldrb	r3, [r7, #23]
 8108776:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8108778:	687b      	ldr	r3, [r7, #4]
 810877a:	681b      	ldr	r3, [r3, #0]
 810877c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108780:	2b00      	cmp	r3, #0
 8108782:	d042      	beq.n	810880a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8108784:	687b      	ldr	r3, [r7, #4]
 8108786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810878c:	d02b      	beq.n	81087e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810878e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108792:	d825      	bhi.n	81087e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108794:	2bc0      	cmp	r3, #192	; 0xc0
 8108796:	d028      	beq.n	81087ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8108798:	2bc0      	cmp	r3, #192	; 0xc0
 810879a:	d821      	bhi.n	81087e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810879c:	2b80      	cmp	r3, #128	; 0x80
 810879e:	d016      	beq.n	81087ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81087a0:	2b80      	cmp	r3, #128	; 0x80
 81087a2:	d81d      	bhi.n	81087e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81087a4:	2b00      	cmp	r3, #0
 81087a6:	d002      	beq.n	81087ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81087a8:	2b40      	cmp	r3, #64	; 0x40
 81087aa:	d007      	beq.n	81087bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 81087ac:	e018      	b.n	81087e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81087ae:	4b66      	ldr	r3, [pc, #408]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81087b2:	4a65      	ldr	r2, [pc, #404]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81087b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81087b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81087ba:	e017      	b.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	3304      	adds	r3, #4
 81087c0:	2100      	movs	r1, #0
 81087c2:	4618      	mov	r0, r3
 81087c4:	f001 f944 	bl	8109a50 <RCCEx_PLL2_Config>
 81087c8:	4603      	mov	r3, r0
 81087ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81087cc:	e00e      	b.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	3324      	adds	r3, #36	; 0x24
 81087d2:	2100      	movs	r1, #0
 81087d4:	4618      	mov	r0, r3
 81087d6:	f001 f9ed 	bl	8109bb4 <RCCEx_PLL3_Config>
 81087da:	4603      	mov	r3, r0
 81087dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81087de:	e005      	b.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81087e0:	2301      	movs	r3, #1
 81087e2:	75fb      	strb	r3, [r7, #23]
      break;
 81087e4:	e002      	b.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81087e6:	bf00      	nop
 81087e8:	e000      	b.n	81087ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81087ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81087ec:	7dfb      	ldrb	r3, [r7, #23]
 81087ee:	2b00      	cmp	r3, #0
 81087f0:	d109      	bne.n	8108806 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81087f2:	4b55      	ldr	r3, [pc, #340]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81087f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81087fa:	687b      	ldr	r3, [r7, #4]
 81087fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81087fe:	4952      	ldr	r1, [pc, #328]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108800:	4313      	orrs	r3, r2
 8108802:	650b      	str	r3, [r1, #80]	; 0x50
 8108804:	e001      	b.n	810880a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108806:	7dfb      	ldrb	r3, [r7, #23]
 8108808:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810880a:	687b      	ldr	r3, [r7, #4]
 810880c:	681b      	ldr	r3, [r3, #0]
 810880e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108812:	2b00      	cmp	r3, #0
 8108814:	d049      	beq.n	81088aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8108816:	687b      	ldr	r3, [r7, #4]
 8108818:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810881c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108820:	d030      	beq.n	8108884 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108826:	d82a      	bhi.n	810887e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108828:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810882c:	d02c      	beq.n	8108888 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810882e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108832:	d824      	bhi.n	810887e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108838:	d018      	beq.n	810886c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810883a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810883e:	d81e      	bhi.n	810887e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108840:	2b00      	cmp	r3, #0
 8108842:	d003      	beq.n	810884c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8108844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108848:	d007      	beq.n	810885a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810884a:	e018      	b.n	810887e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810884c:	4b3e      	ldr	r3, [pc, #248]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108850:	4a3d      	ldr	r2, [pc, #244]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108858:	e017      	b.n	810888a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810885a:	687b      	ldr	r3, [r7, #4]
 810885c:	3304      	adds	r3, #4
 810885e:	2100      	movs	r1, #0
 8108860:	4618      	mov	r0, r3
 8108862:	f001 f8f5 	bl	8109a50 <RCCEx_PLL2_Config>
 8108866:	4603      	mov	r3, r0
 8108868:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810886a:	e00e      	b.n	810888a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810886c:	687b      	ldr	r3, [r7, #4]
 810886e:	3324      	adds	r3, #36	; 0x24
 8108870:	2100      	movs	r1, #0
 8108872:	4618      	mov	r0, r3
 8108874:	f001 f99e 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108878:	4603      	mov	r3, r0
 810887a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810887c:	e005      	b.n	810888a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810887e:	2301      	movs	r3, #1
 8108880:	75fb      	strb	r3, [r7, #23]
      break;
 8108882:	e002      	b.n	810888a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108884:	bf00      	nop
 8108886:	e000      	b.n	810888a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108888:	bf00      	nop
    }

    if(ret == HAL_OK)
 810888a:	7dfb      	ldrb	r3, [r7, #23]
 810888c:	2b00      	cmp	r3, #0
 810888e:	d10a      	bne.n	81088a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8108890:	4b2d      	ldr	r3, [pc, #180]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108894:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8108898:	687b      	ldr	r3, [r7, #4]
 810889a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810889e:	492a      	ldr	r1, [pc, #168]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81088a0:	4313      	orrs	r3, r2
 81088a2:	658b      	str	r3, [r1, #88]	; 0x58
 81088a4:	e001      	b.n	81088aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81088a6:	7dfb      	ldrb	r3, [r7, #23]
 81088a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81088aa:	687b      	ldr	r3, [r7, #4]
 81088ac:	681b      	ldr	r3, [r3, #0]
 81088ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81088b2:	2b00      	cmp	r3, #0
 81088b4:	d04c      	beq.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81088bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81088c0:	d030      	beq.n	8108924 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81088c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81088c6:	d82a      	bhi.n	810891e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81088c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81088cc:	d02c      	beq.n	8108928 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81088ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81088d2:	d824      	bhi.n	810891e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81088d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81088d8:	d018      	beq.n	810890c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81088da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81088de:	d81e      	bhi.n	810891e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81088e0:	2b00      	cmp	r3, #0
 81088e2:	d003      	beq.n	81088ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 81088e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81088e8:	d007      	beq.n	81088fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81088ea:	e018      	b.n	810891e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81088ec:	4b16      	ldr	r3, [pc, #88]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81088f0:	4a15      	ldr	r2, [pc, #84]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81088f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81088f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81088f8:	e017      	b.n	810892a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81088fa:	687b      	ldr	r3, [r7, #4]
 81088fc:	3304      	adds	r3, #4
 81088fe:	2100      	movs	r1, #0
 8108900:	4618      	mov	r0, r3
 8108902:	f001 f8a5 	bl	8109a50 <RCCEx_PLL2_Config>
 8108906:	4603      	mov	r3, r0
 8108908:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810890a:	e00e      	b.n	810892a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810890c:	687b      	ldr	r3, [r7, #4]
 810890e:	3324      	adds	r3, #36	; 0x24
 8108910:	2100      	movs	r1, #0
 8108912:	4618      	mov	r0, r3
 8108914:	f001 f94e 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108918:	4603      	mov	r3, r0
 810891a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810891c:	e005      	b.n	810892a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810891e:	2301      	movs	r3, #1
 8108920:	75fb      	strb	r3, [r7, #23]
      break;
 8108922:	e002      	b.n	810892a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108924:	bf00      	nop
 8108926:	e000      	b.n	810892a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108928:	bf00      	nop
    }

    if(ret == HAL_OK)
 810892a:	7dfb      	ldrb	r3, [r7, #23]
 810892c:	2b00      	cmp	r3, #0
 810892e:	d10d      	bne.n	810894c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108930:	4b05      	ldr	r3, [pc, #20]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108934:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810893e:	4902      	ldr	r1, [pc, #8]	; (8108948 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108940:	4313      	orrs	r3, r2
 8108942:	658b      	str	r3, [r1, #88]	; 0x58
 8108944:	e004      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8108946:	bf00      	nop
 8108948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810894c:	7dfb      	ldrb	r3, [r7, #23]
 810894e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108958:	2b00      	cmp	r3, #0
 810895a:	d032      	beq.n	81089c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810895c:	687b      	ldr	r3, [r7, #4]
 810895e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108960:	2b30      	cmp	r3, #48	; 0x30
 8108962:	d01c      	beq.n	810899e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8108964:	2b30      	cmp	r3, #48	; 0x30
 8108966:	d817      	bhi.n	8108998 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108968:	2b20      	cmp	r3, #32
 810896a:	d00c      	beq.n	8108986 <HAL_RCCEx_PeriphCLKConfig+0x332>
 810896c:	2b20      	cmp	r3, #32
 810896e:	d813      	bhi.n	8108998 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108970:	2b00      	cmp	r3, #0
 8108972:	d016      	beq.n	81089a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8108974:	2b10      	cmp	r3, #16
 8108976:	d10f      	bne.n	8108998 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108978:	4baf      	ldr	r3, [pc, #700]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810897c:	4aae      	ldr	r2, [pc, #696]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810897e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108984:	e00e      	b.n	81089a4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	3304      	adds	r3, #4
 810898a:	2102      	movs	r1, #2
 810898c:	4618      	mov	r0, r3
 810898e:	f001 f85f 	bl	8109a50 <RCCEx_PLL2_Config>
 8108992:	4603      	mov	r3, r0
 8108994:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108996:	e005      	b.n	81089a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108998:	2301      	movs	r3, #1
 810899a:	75fb      	strb	r3, [r7, #23]
      break;
 810899c:	e002      	b.n	81089a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810899e:	bf00      	nop
 81089a0:	e000      	b.n	81089a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81089a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81089a4:	7dfb      	ldrb	r3, [r7, #23]
 81089a6:	2b00      	cmp	r3, #0
 81089a8:	d109      	bne.n	81089be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81089aa:	4ba3      	ldr	r3, [pc, #652]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81089ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81089ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81089b6:	49a0      	ldr	r1, [pc, #640]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81089b8:	4313      	orrs	r3, r2
 81089ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 81089bc:	e001      	b.n	81089c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81089be:	7dfb      	ldrb	r3, [r7, #23]
 81089c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81089c2:	687b      	ldr	r3, [r7, #4]
 81089c4:	681b      	ldr	r3, [r3, #0]
 81089c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81089ca:	2b00      	cmp	r3, #0
 81089cc:	d047      	beq.n	8108a5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81089ce:	687b      	ldr	r3, [r7, #4]
 81089d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81089d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81089d6:	d030      	beq.n	8108a3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81089d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81089dc:	d82a      	bhi.n	8108a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81089de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81089e2:	d02c      	beq.n	8108a3e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81089e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81089e8:	d824      	bhi.n	8108a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81089ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81089ee:	d018      	beq.n	8108a22 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81089f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81089f4:	d81e      	bhi.n	8108a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81089f6:	2b00      	cmp	r3, #0
 81089f8:	d003      	beq.n	8108a02 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81089fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81089fe:	d007      	beq.n	8108a10 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8108a00:	e018      	b.n	8108a34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108a02:	4b8d      	ldr	r3, [pc, #564]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108a06:	4a8c      	ldr	r2, [pc, #560]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108a0e:	e017      	b.n	8108a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108a10:	687b      	ldr	r3, [r7, #4]
 8108a12:	3304      	adds	r3, #4
 8108a14:	2100      	movs	r1, #0
 8108a16:	4618      	mov	r0, r3
 8108a18:	f001 f81a 	bl	8109a50 <RCCEx_PLL2_Config>
 8108a1c:	4603      	mov	r3, r0
 8108a1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108a20:	e00e      	b.n	8108a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	3324      	adds	r3, #36	; 0x24
 8108a26:	2100      	movs	r1, #0
 8108a28:	4618      	mov	r0, r3
 8108a2a:	f001 f8c3 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108a2e:	4603      	mov	r3, r0
 8108a30:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108a32:	e005      	b.n	8108a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108a34:	2301      	movs	r3, #1
 8108a36:	75fb      	strb	r3, [r7, #23]
      break;
 8108a38:	e002      	b.n	8108a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8108a3a:	bf00      	nop
 8108a3c:	e000      	b.n	8108a40 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8108a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108a40:	7dfb      	ldrb	r3, [r7, #23]
 8108a42:	2b00      	cmp	r3, #0
 8108a44:	d109      	bne.n	8108a5a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8108a46:	4b7c      	ldr	r3, [pc, #496]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108a4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108a52:	4979      	ldr	r1, [pc, #484]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108a54:	4313      	orrs	r3, r2
 8108a56:	650b      	str	r3, [r1, #80]	; 0x50
 8108a58:	e001      	b.n	8108a5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a5a:	7dfb      	ldrb	r3, [r7, #23]
 8108a5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8108a5e:	687b      	ldr	r3, [r7, #4]
 8108a60:	681b      	ldr	r3, [r3, #0]
 8108a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8108a66:	2b00      	cmp	r3, #0
 8108a68:	d049      	beq.n	8108afe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108a72:	d02e      	beq.n	8108ad2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8108a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108a78:	d828      	bhi.n	8108acc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108a7e:	d02a      	beq.n	8108ad6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8108a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108a84:	d822      	bhi.n	8108acc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8108a8a:	d026      	beq.n	8108ada <HAL_RCCEx_PeriphCLKConfig+0x486>
 8108a8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8108a90:	d81c      	bhi.n	8108acc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108a96:	d010      	beq.n	8108aba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8108a98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108a9c:	d816      	bhi.n	8108acc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108a9e:	2b00      	cmp	r3, #0
 8108aa0:	d01d      	beq.n	8108ade <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8108aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108aa6:	d111      	bne.n	8108acc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108aa8:	687b      	ldr	r3, [r7, #4]
 8108aaa:	3304      	adds	r3, #4
 8108aac:	2101      	movs	r1, #1
 8108aae:	4618      	mov	r0, r3
 8108ab0:	f000 ffce 	bl	8109a50 <RCCEx_PLL2_Config>
 8108ab4:	4603      	mov	r3, r0
 8108ab6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8108ab8:	e012      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108aba:	687b      	ldr	r3, [r7, #4]
 8108abc:	3324      	adds	r3, #36	; 0x24
 8108abe:	2101      	movs	r1, #1
 8108ac0:	4618      	mov	r0, r3
 8108ac2:	f001 f877 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108ac6:	4603      	mov	r3, r0
 8108ac8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8108aca:	e009      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108acc:	2301      	movs	r3, #1
 8108ace:	75fb      	strb	r3, [r7, #23]
      break;
 8108ad0:	e006      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108ad2:	bf00      	nop
 8108ad4:	e004      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108ad6:	bf00      	nop
 8108ad8:	e002      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108ada:	bf00      	nop
 8108adc:	e000      	b.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108ade:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ae0:	7dfb      	ldrb	r3, [r7, #23]
 8108ae2:	2b00      	cmp	r3, #0
 8108ae4:	d109      	bne.n	8108afa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8108ae6:	4b54      	ldr	r3, [pc, #336]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108aea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108af2:	4951      	ldr	r1, [pc, #324]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108af4:	4313      	orrs	r3, r2
 8108af6:	650b      	str	r3, [r1, #80]	; 0x50
 8108af8:	e001      	b.n	8108afe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108afa:	7dfb      	ldrb	r3, [r7, #23]
 8108afc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8108afe:	687b      	ldr	r3, [r7, #4]
 8108b00:	681b      	ldr	r3, [r3, #0]
 8108b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d04b      	beq.n	8108ba2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8108b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108b14:	d02e      	beq.n	8108b74 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8108b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108b1a:	d828      	bhi.n	8108b6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108b20:	d02a      	beq.n	8108b78 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8108b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108b26:	d822      	bhi.n	8108b6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108b28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108b2c:	d026      	beq.n	8108b7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8108b2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108b32:	d81c      	bhi.n	8108b6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108b38:	d010      	beq.n	8108b5c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8108b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108b3e:	d816      	bhi.n	8108b6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108b40:	2b00      	cmp	r3, #0
 8108b42:	d01d      	beq.n	8108b80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8108b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108b48:	d111      	bne.n	8108b6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	3304      	adds	r3, #4
 8108b4e:	2101      	movs	r1, #1
 8108b50:	4618      	mov	r0, r3
 8108b52:	f000 ff7d 	bl	8109a50 <RCCEx_PLL2_Config>
 8108b56:	4603      	mov	r3, r0
 8108b58:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8108b5a:	e012      	b.n	8108b82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108b5c:	687b      	ldr	r3, [r7, #4]
 8108b5e:	3324      	adds	r3, #36	; 0x24
 8108b60:	2101      	movs	r1, #1
 8108b62:	4618      	mov	r0, r3
 8108b64:	f001 f826 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108b68:	4603      	mov	r3, r0
 8108b6a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8108b6c:	e009      	b.n	8108b82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8108b6e:	2301      	movs	r3, #1
 8108b70:	75fb      	strb	r3, [r7, #23]
      break;
 8108b72:	e006      	b.n	8108b82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108b74:	bf00      	nop
 8108b76:	e004      	b.n	8108b82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108b78:	bf00      	nop
 8108b7a:	e002      	b.n	8108b82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108b7c:	bf00      	nop
 8108b7e:	e000      	b.n	8108b82 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108b82:	7dfb      	ldrb	r3, [r7, #23]
 8108b84:	2b00      	cmp	r3, #0
 8108b86:	d10a      	bne.n	8108b9e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8108b88:	4b2b      	ldr	r3, [pc, #172]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108b8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8108b90:	687b      	ldr	r3, [r7, #4]
 8108b92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8108b96:	4928      	ldr	r1, [pc, #160]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108b98:	4313      	orrs	r3, r2
 8108b9a:	658b      	str	r3, [r1, #88]	; 0x58
 8108b9c:	e001      	b.n	8108ba2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b9e:	7dfb      	ldrb	r3, [r7, #23]
 8108ba0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	681b      	ldr	r3, [r3, #0]
 8108ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108baa:	2b00      	cmp	r3, #0
 8108bac:	d02f      	beq.n	8108c0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108bb6:	d00e      	beq.n	8108bd6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8108bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108bbc:	d814      	bhi.n	8108be8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8108bbe:	2b00      	cmp	r3, #0
 8108bc0:	d015      	beq.n	8108bee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8108bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108bc6:	d10f      	bne.n	8108be8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108bc8:	4b1b      	ldr	r3, [pc, #108]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108bcc:	4a1a      	ldr	r2, [pc, #104]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8108bd4:	e00c      	b.n	8108bf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	3304      	adds	r3, #4
 8108bda:	2101      	movs	r1, #1
 8108bdc:	4618      	mov	r0, r3
 8108bde:	f000 ff37 	bl	8109a50 <RCCEx_PLL2_Config>
 8108be2:	4603      	mov	r3, r0
 8108be4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8108be6:	e003      	b.n	8108bf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108be8:	2301      	movs	r3, #1
 8108bea:	75fb      	strb	r3, [r7, #23]
      break;
 8108bec:	e000      	b.n	8108bf0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8108bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108bf0:	7dfb      	ldrb	r3, [r7, #23]
 8108bf2:	2b00      	cmp	r3, #0
 8108bf4:	d109      	bne.n	8108c0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8108bf6:	4b10      	ldr	r3, [pc, #64]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108bfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108c02:	490d      	ldr	r1, [pc, #52]	; (8108c38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108c04:	4313      	orrs	r3, r2
 8108c06:	650b      	str	r3, [r1, #80]	; 0x50
 8108c08:	e001      	b.n	8108c0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c0a:	7dfb      	ldrb	r3, [r7, #23]
 8108c0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	681b      	ldr	r3, [r3, #0]
 8108c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108c16:	2b00      	cmp	r3, #0
 8108c18:	d033      	beq.n	8108c82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c1e:	2b03      	cmp	r3, #3
 8108c20:	d81c      	bhi.n	8108c5c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8108c22:	a201      	add	r2, pc, #4	; (adr r2, 8108c28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8108c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c28:	08108c63 	.word	0x08108c63
 8108c2c:	08108c3d 	.word	0x08108c3d
 8108c30:	08108c4b 	.word	0x08108c4b
 8108c34:	08108c63 	.word	0x08108c63
 8108c38:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108c3c:	4bb9      	ldr	r3, [pc, #740]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c40:	4ab8      	ldr	r2, [pc, #736]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108c48:	e00c      	b.n	8108c64 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108c4a:	687b      	ldr	r3, [r7, #4]
 8108c4c:	3304      	adds	r3, #4
 8108c4e:	2102      	movs	r1, #2
 8108c50:	4618      	mov	r0, r3
 8108c52:	f000 fefd 	bl	8109a50 <RCCEx_PLL2_Config>
 8108c56:	4603      	mov	r3, r0
 8108c58:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108c5a:	e003      	b.n	8108c64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108c5c:	2301      	movs	r3, #1
 8108c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8108c60:	e000      	b.n	8108c64 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8108c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108c64:	7dfb      	ldrb	r3, [r7, #23]
 8108c66:	2b00      	cmp	r3, #0
 8108c68:	d109      	bne.n	8108c7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8108c6a:	4bae      	ldr	r3, [pc, #696]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108c6e:	f023 0203 	bic.w	r2, r3, #3
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c76:	49ab      	ldr	r1, [pc, #684]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108c78:	4313      	orrs	r3, r2
 8108c7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108c7c:	e001      	b.n	8108c82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c7e:	7dfb      	ldrb	r3, [r7, #23]
 8108c80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8108c82:	687b      	ldr	r3, [r7, #4]
 8108c84:	681b      	ldr	r3, [r3, #0]
 8108c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8108c8a:	2b00      	cmp	r3, #0
 8108c8c:	f000 8088 	beq.w	8108da0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8108c90:	4ba5      	ldr	r3, [pc, #660]	; (8108f28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8108c92:	681b      	ldr	r3, [r3, #0]
 8108c94:	4aa4      	ldr	r2, [pc, #656]	; (8108f28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8108c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8108c9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8108c9c:	f7fa fca8 	bl	81035f0 <HAL_GetTick>
 8108ca0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108ca2:	e009      	b.n	8108cb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8108ca4:	f7fa fca4 	bl	81035f0 <HAL_GetTick>
 8108ca8:	4602      	mov	r2, r0
 8108caa:	693b      	ldr	r3, [r7, #16]
 8108cac:	1ad3      	subs	r3, r2, r3
 8108cae:	2b64      	cmp	r3, #100	; 0x64
 8108cb0:	d902      	bls.n	8108cb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8108cb2:	2303      	movs	r3, #3
 8108cb4:	75fb      	strb	r3, [r7, #23]
        break;
 8108cb6:	e005      	b.n	8108cc4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108cb8:	4b9b      	ldr	r3, [pc, #620]	; (8108f28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108cc0:	2b00      	cmp	r3, #0
 8108cc2:	d0ef      	beq.n	8108ca4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8108cc4:	7dfb      	ldrb	r3, [r7, #23]
 8108cc6:	2b00      	cmp	r3, #0
 8108cc8:	d168      	bne.n	8108d9c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8108cca:	4b96      	ldr	r3, [pc, #600]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108cd4:	4053      	eors	r3, r2
 8108cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108cda:	2b00      	cmp	r3, #0
 8108cdc:	d013      	beq.n	8108d06 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108cde:	4b91      	ldr	r3, [pc, #580]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108ce6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108ce8:	4b8e      	ldr	r3, [pc, #568]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108cec:	4a8d      	ldr	r2, [pc, #564]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8108cf2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8108cf4:	4b8b      	ldr	r3, [pc, #556]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108cf8:	4a8a      	ldr	r2, [pc, #552]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108cfe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108d00:	4a88      	ldr	r2, [pc, #544]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d02:	68fb      	ldr	r3, [r7, #12]
 8108d04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108d06:	687b      	ldr	r3, [r7, #4]
 8108d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108d10:	d115      	bne.n	8108d3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108d12:	f7fa fc6d 	bl	81035f0 <HAL_GetTick>
 8108d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108d18:	e00b      	b.n	8108d32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8108d1a:	f7fa fc69 	bl	81035f0 <HAL_GetTick>
 8108d1e:	4602      	mov	r2, r0
 8108d20:	693b      	ldr	r3, [r7, #16]
 8108d22:	1ad3      	subs	r3, r2, r3
 8108d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8108d28:	4293      	cmp	r3, r2
 8108d2a:	d902      	bls.n	8108d32 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8108d2c:	2303      	movs	r3, #3
 8108d2e:	75fb      	strb	r3, [r7, #23]
            break;
 8108d30:	e005      	b.n	8108d3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108d32:	4b7c      	ldr	r3, [pc, #496]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108d36:	f003 0302 	and.w	r3, r3, #2
 8108d3a:	2b00      	cmp	r3, #0
 8108d3c:	d0ed      	beq.n	8108d1a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8108d3e:	7dfb      	ldrb	r3, [r7, #23]
 8108d40:	2b00      	cmp	r3, #0
 8108d42:	d128      	bne.n	8108d96 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108d52:	d10f      	bne.n	8108d74 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8108d54:	4b73      	ldr	r3, [pc, #460]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d56:	691b      	ldr	r3, [r3, #16]
 8108d58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108d62:	091b      	lsrs	r3, r3, #4
 8108d64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8108d68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8108d6c:	496d      	ldr	r1, [pc, #436]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d6e:	4313      	orrs	r3, r2
 8108d70:	610b      	str	r3, [r1, #16]
 8108d72:	e005      	b.n	8108d80 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8108d74:	4b6b      	ldr	r3, [pc, #428]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d76:	691b      	ldr	r3, [r3, #16]
 8108d78:	4a6a      	ldr	r2, [pc, #424]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8108d7e:	6113      	str	r3, [r2, #16]
 8108d80:	4b68      	ldr	r3, [pc, #416]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8108d8e:	4965      	ldr	r1, [pc, #404]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108d90:	4313      	orrs	r3, r2
 8108d92:	670b      	str	r3, [r1, #112]	; 0x70
 8108d94:	e004      	b.n	8108da0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8108d96:	7dfb      	ldrb	r3, [r7, #23]
 8108d98:	75bb      	strb	r3, [r7, #22]
 8108d9a:	e001      	b.n	8108da0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d9c:	7dfb      	ldrb	r3, [r7, #23]
 8108d9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8108da0:	687b      	ldr	r3, [r7, #4]
 8108da2:	681b      	ldr	r3, [r3, #0]
 8108da4:	f003 0301 	and.w	r3, r3, #1
 8108da8:	2b00      	cmp	r3, #0
 8108daa:	d07e      	beq.n	8108eaa <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108db0:	2b28      	cmp	r3, #40	; 0x28
 8108db2:	d867      	bhi.n	8108e84 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8108db4:	a201      	add	r2, pc, #4	; (adr r2, 8108dbc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8108db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108dba:	bf00      	nop
 8108dbc:	08108e8b 	.word	0x08108e8b
 8108dc0:	08108e85 	.word	0x08108e85
 8108dc4:	08108e85 	.word	0x08108e85
 8108dc8:	08108e85 	.word	0x08108e85
 8108dcc:	08108e85 	.word	0x08108e85
 8108dd0:	08108e85 	.word	0x08108e85
 8108dd4:	08108e85 	.word	0x08108e85
 8108dd8:	08108e85 	.word	0x08108e85
 8108ddc:	08108e61 	.word	0x08108e61
 8108de0:	08108e85 	.word	0x08108e85
 8108de4:	08108e85 	.word	0x08108e85
 8108de8:	08108e85 	.word	0x08108e85
 8108dec:	08108e85 	.word	0x08108e85
 8108df0:	08108e85 	.word	0x08108e85
 8108df4:	08108e85 	.word	0x08108e85
 8108df8:	08108e85 	.word	0x08108e85
 8108dfc:	08108e73 	.word	0x08108e73
 8108e00:	08108e85 	.word	0x08108e85
 8108e04:	08108e85 	.word	0x08108e85
 8108e08:	08108e85 	.word	0x08108e85
 8108e0c:	08108e85 	.word	0x08108e85
 8108e10:	08108e85 	.word	0x08108e85
 8108e14:	08108e85 	.word	0x08108e85
 8108e18:	08108e85 	.word	0x08108e85
 8108e1c:	08108e8b 	.word	0x08108e8b
 8108e20:	08108e85 	.word	0x08108e85
 8108e24:	08108e85 	.word	0x08108e85
 8108e28:	08108e85 	.word	0x08108e85
 8108e2c:	08108e85 	.word	0x08108e85
 8108e30:	08108e85 	.word	0x08108e85
 8108e34:	08108e85 	.word	0x08108e85
 8108e38:	08108e85 	.word	0x08108e85
 8108e3c:	08108e8b 	.word	0x08108e8b
 8108e40:	08108e85 	.word	0x08108e85
 8108e44:	08108e85 	.word	0x08108e85
 8108e48:	08108e85 	.word	0x08108e85
 8108e4c:	08108e85 	.word	0x08108e85
 8108e50:	08108e85 	.word	0x08108e85
 8108e54:	08108e85 	.word	0x08108e85
 8108e58:	08108e85 	.word	0x08108e85
 8108e5c:	08108e8b 	.word	0x08108e8b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	3304      	adds	r3, #4
 8108e64:	2101      	movs	r1, #1
 8108e66:	4618      	mov	r0, r3
 8108e68:	f000 fdf2 	bl	8109a50 <RCCEx_PLL2_Config>
 8108e6c:	4603      	mov	r3, r0
 8108e6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108e70:	e00c      	b.n	8108e8c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	3324      	adds	r3, #36	; 0x24
 8108e76:	2101      	movs	r1, #1
 8108e78:	4618      	mov	r0, r3
 8108e7a:	f000 fe9b 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108e7e:	4603      	mov	r3, r0
 8108e80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108e82:	e003      	b.n	8108e8c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108e84:	2301      	movs	r3, #1
 8108e86:	75fb      	strb	r3, [r7, #23]
      break;
 8108e88:	e000      	b.n	8108e8c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8108e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108e8c:	7dfb      	ldrb	r3, [r7, #23]
 8108e8e:	2b00      	cmp	r3, #0
 8108e90:	d109      	bne.n	8108ea6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108e92:	4b24      	ldr	r3, [pc, #144]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e96:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108e9e:	4921      	ldr	r1, [pc, #132]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ea0:	4313      	orrs	r3, r2
 8108ea2:	654b      	str	r3, [r1, #84]	; 0x54
 8108ea4:	e001      	b.n	8108eaa <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ea6:	7dfb      	ldrb	r3, [r7, #23]
 8108ea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	681b      	ldr	r3, [r3, #0]
 8108eae:	f003 0302 	and.w	r3, r3, #2
 8108eb2:	2b00      	cmp	r3, #0
 8108eb4:	d03c      	beq.n	8108f30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108eba:	2b05      	cmp	r3, #5
 8108ebc:	d820      	bhi.n	8108f00 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8108ebe:	a201      	add	r2, pc, #4	; (adr r2, 8108ec4 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8108ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ec4:	08108f07 	.word	0x08108f07
 8108ec8:	08108edd 	.word	0x08108edd
 8108ecc:	08108eef 	.word	0x08108eef
 8108ed0:	08108f07 	.word	0x08108f07
 8108ed4:	08108f07 	.word	0x08108f07
 8108ed8:	08108f07 	.word	0x08108f07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108edc:	687b      	ldr	r3, [r7, #4]
 8108ede:	3304      	adds	r3, #4
 8108ee0:	2101      	movs	r1, #1
 8108ee2:	4618      	mov	r0, r3
 8108ee4:	f000 fdb4 	bl	8109a50 <RCCEx_PLL2_Config>
 8108ee8:	4603      	mov	r3, r0
 8108eea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108eec:	e00c      	b.n	8108f08 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108eee:	687b      	ldr	r3, [r7, #4]
 8108ef0:	3324      	adds	r3, #36	; 0x24
 8108ef2:	2101      	movs	r1, #1
 8108ef4:	4618      	mov	r0, r3
 8108ef6:	f000 fe5d 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108efa:	4603      	mov	r3, r0
 8108efc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108efe:	e003      	b.n	8108f08 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108f00:	2301      	movs	r3, #1
 8108f02:	75fb      	strb	r3, [r7, #23]
      break;
 8108f04:	e000      	b.n	8108f08 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8108f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f08:	7dfb      	ldrb	r3, [r7, #23]
 8108f0a:	2b00      	cmp	r3, #0
 8108f0c:	d10e      	bne.n	8108f2c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108f0e:	4b05      	ldr	r3, [pc, #20]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108f12:	f023 0207 	bic.w	r2, r3, #7
 8108f16:	687b      	ldr	r3, [r7, #4]
 8108f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108f1a:	4902      	ldr	r1, [pc, #8]	; (8108f24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108f1c:	4313      	orrs	r3, r2
 8108f1e:	654b      	str	r3, [r1, #84]	; 0x54
 8108f20:	e006      	b.n	8108f30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8108f22:	bf00      	nop
 8108f24:	58024400 	.word	0x58024400
 8108f28:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f2c:	7dfb      	ldrb	r3, [r7, #23]
 8108f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	681b      	ldr	r3, [r3, #0]
 8108f34:	f003 0304 	and.w	r3, r3, #4
 8108f38:	2b00      	cmp	r3, #0
 8108f3a:	d039      	beq.n	8108fb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8108f3c:	687b      	ldr	r3, [r7, #4]
 8108f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108f42:	2b05      	cmp	r3, #5
 8108f44:	d820      	bhi.n	8108f88 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8108f46:	a201      	add	r2, pc, #4	; (adr r2, 8108f4c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8108f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f4c:	08108f8f 	.word	0x08108f8f
 8108f50:	08108f65 	.word	0x08108f65
 8108f54:	08108f77 	.word	0x08108f77
 8108f58:	08108f8f 	.word	0x08108f8f
 8108f5c:	08108f8f 	.word	0x08108f8f
 8108f60:	08108f8f 	.word	0x08108f8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	3304      	adds	r3, #4
 8108f68:	2101      	movs	r1, #1
 8108f6a:	4618      	mov	r0, r3
 8108f6c:	f000 fd70 	bl	8109a50 <RCCEx_PLL2_Config>
 8108f70:	4603      	mov	r3, r0
 8108f72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108f74:	e00c      	b.n	8108f90 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	3324      	adds	r3, #36	; 0x24
 8108f7a:	2101      	movs	r1, #1
 8108f7c:	4618      	mov	r0, r3
 8108f7e:	f000 fe19 	bl	8109bb4 <RCCEx_PLL3_Config>
 8108f82:	4603      	mov	r3, r0
 8108f84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108f86:	e003      	b.n	8108f90 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108f88:	2301      	movs	r3, #1
 8108f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8108f8c:	e000      	b.n	8108f90 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8108f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f90:	7dfb      	ldrb	r3, [r7, #23]
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	d10a      	bne.n	8108fac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8108f96:	4bb7      	ldr	r3, [pc, #732]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f9a:	f023 0207 	bic.w	r2, r3, #7
 8108f9e:	687b      	ldr	r3, [r7, #4]
 8108fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108fa4:	49b3      	ldr	r1, [pc, #716]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108fa6:	4313      	orrs	r3, r2
 8108fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8108faa:	e001      	b.n	8108fb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108fac:	7dfb      	ldrb	r3, [r7, #23]
 8108fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	681b      	ldr	r3, [r3, #0]
 8108fb4:	f003 0320 	and.w	r3, r3, #32
 8108fb8:	2b00      	cmp	r3, #0
 8108fba:	d04b      	beq.n	8109054 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108fc6:	d02e      	beq.n	8109026 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8108fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108fcc:	d828      	bhi.n	8109020 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108fd2:	d02a      	beq.n	810902a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8108fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108fd8:	d822      	bhi.n	8109020 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108fda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108fde:	d026      	beq.n	810902e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8108fe0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108fe4:	d81c      	bhi.n	8109020 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108fea:	d010      	beq.n	810900e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8108fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108ff0:	d816      	bhi.n	8109020 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108ff2:	2b00      	cmp	r3, #0
 8108ff4:	d01d      	beq.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8108ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108ffa:	d111      	bne.n	8109020 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	3304      	adds	r3, #4
 8109000:	2100      	movs	r1, #0
 8109002:	4618      	mov	r0, r3
 8109004:	f000 fd24 	bl	8109a50 <RCCEx_PLL2_Config>
 8109008:	4603      	mov	r3, r0
 810900a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810900c:	e012      	b.n	8109034 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	3324      	adds	r3, #36	; 0x24
 8109012:	2102      	movs	r1, #2
 8109014:	4618      	mov	r0, r3
 8109016:	f000 fdcd 	bl	8109bb4 <RCCEx_PLL3_Config>
 810901a:	4603      	mov	r3, r0
 810901c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810901e:	e009      	b.n	8109034 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109020:	2301      	movs	r3, #1
 8109022:	75fb      	strb	r3, [r7, #23]
      break;
 8109024:	e006      	b.n	8109034 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8109026:	bf00      	nop
 8109028:	e004      	b.n	8109034 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810902a:	bf00      	nop
 810902c:	e002      	b.n	8109034 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810902e:	bf00      	nop
 8109030:	e000      	b.n	8109034 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8109032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109034:	7dfb      	ldrb	r3, [r7, #23]
 8109036:	2b00      	cmp	r3, #0
 8109038:	d10a      	bne.n	8109050 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810903a:	4b8e      	ldr	r3, [pc, #568]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810903c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810903e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8109042:	687b      	ldr	r3, [r7, #4]
 8109044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109048:	498a      	ldr	r1, [pc, #552]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810904a:	4313      	orrs	r3, r2
 810904c:	654b      	str	r3, [r1, #84]	; 0x54
 810904e:	e001      	b.n	8109054 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109050:	7dfb      	ldrb	r3, [r7, #23]
 8109052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8109054:	687b      	ldr	r3, [r7, #4]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810905c:	2b00      	cmp	r3, #0
 810905e:	d04b      	beq.n	81090f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8109060:	687b      	ldr	r3, [r7, #4]
 8109062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109066:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810906a:	d02e      	beq.n	81090ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810906c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109070:	d828      	bhi.n	81090c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8109072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109076:	d02a      	beq.n	81090ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8109078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810907c:	d822      	bhi.n	81090c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810907e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109082:	d026      	beq.n	81090d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8109084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109088:	d81c      	bhi.n	81090c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810908a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810908e:	d010      	beq.n	81090b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8109090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109094:	d816      	bhi.n	81090c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8109096:	2b00      	cmp	r3, #0
 8109098:	d01d      	beq.n	81090d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810909a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810909e:	d111      	bne.n	81090c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81090a0:	687b      	ldr	r3, [r7, #4]
 81090a2:	3304      	adds	r3, #4
 81090a4:	2100      	movs	r1, #0
 81090a6:	4618      	mov	r0, r3
 81090a8:	f000 fcd2 	bl	8109a50 <RCCEx_PLL2_Config>
 81090ac:	4603      	mov	r3, r0
 81090ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81090b0:	e012      	b.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81090b2:	687b      	ldr	r3, [r7, #4]
 81090b4:	3324      	adds	r3, #36	; 0x24
 81090b6:	2102      	movs	r1, #2
 81090b8:	4618      	mov	r0, r3
 81090ba:	f000 fd7b 	bl	8109bb4 <RCCEx_PLL3_Config>
 81090be:	4603      	mov	r3, r0
 81090c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81090c2:	e009      	b.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81090c4:	2301      	movs	r3, #1
 81090c6:	75fb      	strb	r3, [r7, #23]
      break;
 81090c8:	e006      	b.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81090ca:	bf00      	nop
 81090cc:	e004      	b.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81090ce:	bf00      	nop
 81090d0:	e002      	b.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81090d2:	bf00      	nop
 81090d4:	e000      	b.n	81090d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81090d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81090d8:	7dfb      	ldrb	r3, [r7, #23]
 81090da:	2b00      	cmp	r3, #0
 81090dc:	d10a      	bne.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81090de:	4b65      	ldr	r3, [pc, #404]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81090e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81090e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81090ec:	4961      	ldr	r1, [pc, #388]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81090ee:	4313      	orrs	r3, r2
 81090f0:	658b      	str	r3, [r1, #88]	; 0x58
 81090f2:	e001      	b.n	81090f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81090f4:	7dfb      	ldrb	r3, [r7, #23]
 81090f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81090f8:	687b      	ldr	r3, [r7, #4]
 81090fa:	681b      	ldr	r3, [r3, #0]
 81090fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109100:	2b00      	cmp	r3, #0
 8109102:	d04b      	beq.n	810919c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810910a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810910e:	d02e      	beq.n	810916e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8109110:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109114:	d828      	bhi.n	8109168 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810911a:	d02a      	beq.n	8109172 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810911c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109120:	d822      	bhi.n	8109168 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109122:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109126:	d026      	beq.n	8109176 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8109128:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810912c:	d81c      	bhi.n	8109168 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810912e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109132:	d010      	beq.n	8109156 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8109134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109138:	d816      	bhi.n	8109168 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810913a:	2b00      	cmp	r3, #0
 810913c:	d01d      	beq.n	810917a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810913e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109142:	d111      	bne.n	8109168 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	3304      	adds	r3, #4
 8109148:	2100      	movs	r1, #0
 810914a:	4618      	mov	r0, r3
 810914c:	f000 fc80 	bl	8109a50 <RCCEx_PLL2_Config>
 8109150:	4603      	mov	r3, r0
 8109152:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109154:	e012      	b.n	810917c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	3324      	adds	r3, #36	; 0x24
 810915a:	2102      	movs	r1, #2
 810915c:	4618      	mov	r0, r3
 810915e:	f000 fd29 	bl	8109bb4 <RCCEx_PLL3_Config>
 8109162:	4603      	mov	r3, r0
 8109164:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109166:	e009      	b.n	810917c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109168:	2301      	movs	r3, #1
 810916a:	75fb      	strb	r3, [r7, #23]
      break;
 810916c:	e006      	b.n	810917c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810916e:	bf00      	nop
 8109170:	e004      	b.n	810917c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8109172:	bf00      	nop
 8109174:	e002      	b.n	810917c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8109176:	bf00      	nop
 8109178:	e000      	b.n	810917c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810917a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810917c:	7dfb      	ldrb	r3, [r7, #23]
 810917e:	2b00      	cmp	r3, #0
 8109180:	d10a      	bne.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8109182:	4b3c      	ldr	r3, [pc, #240]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810918a:	687b      	ldr	r3, [r7, #4]
 810918c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109190:	4938      	ldr	r1, [pc, #224]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109192:	4313      	orrs	r3, r2
 8109194:	658b      	str	r3, [r1, #88]	; 0x58
 8109196:	e001      	b.n	810919c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109198:	7dfb      	ldrb	r3, [r7, #23]
 810919a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	681b      	ldr	r3, [r3, #0]
 81091a0:	f003 0308 	and.w	r3, r3, #8
 81091a4:	2b00      	cmp	r3, #0
 81091a6:	d01a      	beq.n	81091de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81091ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81091b2:	d10a      	bne.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	3324      	adds	r3, #36	; 0x24
 81091b8:	2102      	movs	r1, #2
 81091ba:	4618      	mov	r0, r3
 81091bc:	f000 fcfa 	bl	8109bb4 <RCCEx_PLL3_Config>
 81091c0:	4603      	mov	r3, r0
 81091c2:	2b00      	cmp	r3, #0
 81091c4:	d001      	beq.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81091c6:	2301      	movs	r3, #1
 81091c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81091ca:	4b2a      	ldr	r3, [pc, #168]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81091cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81091ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81091d2:	687b      	ldr	r3, [r7, #4]
 81091d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81091d8:	4926      	ldr	r1, [pc, #152]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81091da:	4313      	orrs	r3, r2
 81091dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	681b      	ldr	r3, [r3, #0]
 81091e2:	f003 0310 	and.w	r3, r3, #16
 81091e6:	2b00      	cmp	r3, #0
 81091e8:	d01a      	beq.n	8109220 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81091f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81091f4:	d10a      	bne.n	810920c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	3324      	adds	r3, #36	; 0x24
 81091fa:	2102      	movs	r1, #2
 81091fc:	4618      	mov	r0, r3
 81091fe:	f000 fcd9 	bl	8109bb4 <RCCEx_PLL3_Config>
 8109202:	4603      	mov	r3, r0
 8109204:	2b00      	cmp	r3, #0
 8109206:	d001      	beq.n	810920c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8109208:	2301      	movs	r3, #1
 810920a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810920c:	4b19      	ldr	r3, [pc, #100]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810920e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810921a:	4916      	ldr	r1, [pc, #88]	; (8109274 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810921c:	4313      	orrs	r3, r2
 810921e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	681b      	ldr	r3, [r3, #0]
 8109224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8109228:	2b00      	cmp	r3, #0
 810922a:	d036      	beq.n	810929a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810922c:	687b      	ldr	r3, [r7, #4]
 810922e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109236:	d01f      	beq.n	8109278 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8109238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810923c:	d817      	bhi.n	810926e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810923e:	2b00      	cmp	r3, #0
 8109240:	d003      	beq.n	810924a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8109242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109246:	d009      	beq.n	810925c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8109248:	e011      	b.n	810926e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	3304      	adds	r3, #4
 810924e:	2100      	movs	r1, #0
 8109250:	4618      	mov	r0, r3
 8109252:	f000 fbfd 	bl	8109a50 <RCCEx_PLL2_Config>
 8109256:	4603      	mov	r3, r0
 8109258:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810925a:	e00e      	b.n	810927a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	3324      	adds	r3, #36	; 0x24
 8109260:	2102      	movs	r1, #2
 8109262:	4618      	mov	r0, r3
 8109264:	f000 fca6 	bl	8109bb4 <RCCEx_PLL3_Config>
 8109268:	4603      	mov	r3, r0
 810926a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810926c:	e005      	b.n	810927a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810926e:	2301      	movs	r3, #1
 8109270:	75fb      	strb	r3, [r7, #23]
      break;
 8109272:	e002      	b.n	810927a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8109274:	58024400 	.word	0x58024400
      break;
 8109278:	bf00      	nop
    }

    if(ret == HAL_OK)
 810927a:	7dfb      	ldrb	r3, [r7, #23]
 810927c:	2b00      	cmp	r3, #0
 810927e:	d10a      	bne.n	8109296 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8109280:	4b93      	ldr	r3, [pc, #588]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810928e:	4990      	ldr	r1, [pc, #576]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109290:	4313      	orrs	r3, r2
 8109292:	658b      	str	r3, [r1, #88]	; 0x58
 8109294:	e001      	b.n	810929a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109296:	7dfb      	ldrb	r3, [r7, #23]
 8109298:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	681b      	ldr	r3, [r3, #0]
 810929e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81092a2:	2b00      	cmp	r3, #0
 81092a4:	d033      	beq.n	810930e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81092ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81092b0:	d01c      	beq.n	81092ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81092b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81092b6:	d816      	bhi.n	81092e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81092b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81092bc:	d003      	beq.n	81092c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81092be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81092c2:	d007      	beq.n	81092d4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81092c4:	e00f      	b.n	81092e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81092c6:	4b82      	ldr	r3, [pc, #520]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81092c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81092ca:	4a81      	ldr	r2, [pc, #516]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81092cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81092d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81092d2:	e00c      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	3324      	adds	r3, #36	; 0x24
 81092d8:	2101      	movs	r1, #1
 81092da:	4618      	mov	r0, r3
 81092dc:	f000 fc6a 	bl	8109bb4 <RCCEx_PLL3_Config>
 81092e0:	4603      	mov	r3, r0
 81092e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81092e4:	e003      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81092e6:	2301      	movs	r3, #1
 81092e8:	75fb      	strb	r3, [r7, #23]
      break;
 81092ea:	e000      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81092ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81092ee:	7dfb      	ldrb	r3, [r7, #23]
 81092f0:	2b00      	cmp	r3, #0
 81092f2:	d10a      	bne.n	810930a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81092f4:	4b76      	ldr	r3, [pc, #472]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81092f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81092f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109302:	4973      	ldr	r1, [pc, #460]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109304:	4313      	orrs	r3, r2
 8109306:	654b      	str	r3, [r1, #84]	; 0x54
 8109308:	e001      	b.n	810930e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810930a:	7dfb      	ldrb	r3, [r7, #23]
 810930c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	681b      	ldr	r3, [r3, #0]
 8109312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109316:	2b00      	cmp	r3, #0
 8109318:	d029      	beq.n	810936e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810931e:	2b00      	cmp	r3, #0
 8109320:	d003      	beq.n	810932a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8109322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109326:	d007      	beq.n	8109338 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8109328:	e00f      	b.n	810934a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810932a:	4b69      	ldr	r3, [pc, #420]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810932e:	4a68      	ldr	r2, [pc, #416]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109336:	e00b      	b.n	8109350 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109338:	687b      	ldr	r3, [r7, #4]
 810933a:	3304      	adds	r3, #4
 810933c:	2102      	movs	r1, #2
 810933e:	4618      	mov	r0, r3
 8109340:	f000 fb86 	bl	8109a50 <RCCEx_PLL2_Config>
 8109344:	4603      	mov	r3, r0
 8109346:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109348:	e002      	b.n	8109350 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810934a:	2301      	movs	r3, #1
 810934c:	75fb      	strb	r3, [r7, #23]
      break;
 810934e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109350:	7dfb      	ldrb	r3, [r7, #23]
 8109352:	2b00      	cmp	r3, #0
 8109354:	d109      	bne.n	810936a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8109356:	4b5e      	ldr	r3, [pc, #376]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810935a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810935e:	687b      	ldr	r3, [r7, #4]
 8109360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109362:	495b      	ldr	r1, [pc, #364]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109364:	4313      	orrs	r3, r2
 8109366:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109368:	e001      	b.n	810936e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810936a:	7dfb      	ldrb	r3, [r7, #23]
 810936c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810936e:	687b      	ldr	r3, [r7, #4]
 8109370:	681b      	ldr	r3, [r3, #0]
 8109372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109376:	2b00      	cmp	r3, #0
 8109378:	d00a      	beq.n	8109390 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810937a:	687b      	ldr	r3, [r7, #4]
 810937c:	3324      	adds	r3, #36	; 0x24
 810937e:	2102      	movs	r1, #2
 8109380:	4618      	mov	r0, r3
 8109382:	f000 fc17 	bl	8109bb4 <RCCEx_PLL3_Config>
 8109386:	4603      	mov	r3, r0
 8109388:	2b00      	cmp	r3, #0
 810938a:	d001      	beq.n	8109390 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810938c:	2301      	movs	r3, #1
 810938e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	681b      	ldr	r3, [r3, #0]
 8109394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109398:	2b00      	cmp	r3, #0
 810939a:	d030      	beq.n	81093fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81093a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81093a4:	d017      	beq.n	81093d6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81093a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81093aa:	d811      	bhi.n	81093d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81093ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81093b0:	d013      	beq.n	81093da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81093b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81093b6:	d80b      	bhi.n	81093d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81093b8:	2b00      	cmp	r3, #0
 81093ba:	d010      	beq.n	81093de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81093bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81093c0:	d106      	bne.n	81093d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81093c2:	4b43      	ldr	r3, [pc, #268]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81093c6:	4a42      	ldr	r2, [pc, #264]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81093c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81093cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81093ce:	e007      	b.n	81093e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81093d0:	2301      	movs	r3, #1
 81093d2:	75fb      	strb	r3, [r7, #23]
      break;
 81093d4:	e004      	b.n	81093e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81093d6:	bf00      	nop
 81093d8:	e002      	b.n	81093e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81093da:	bf00      	nop
 81093dc:	e000      	b.n	81093e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81093de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81093e0:	7dfb      	ldrb	r3, [r7, #23]
 81093e2:	2b00      	cmp	r3, #0
 81093e4:	d109      	bne.n	81093fa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81093e6:	4b3a      	ldr	r3, [pc, #232]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81093e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81093ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81093ee:	687b      	ldr	r3, [r7, #4]
 81093f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81093f2:	4937      	ldr	r1, [pc, #220]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81093f4:	4313      	orrs	r3, r2
 81093f6:	654b      	str	r3, [r1, #84]	; 0x54
 81093f8:	e001      	b.n	81093fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81093fa:	7dfb      	ldrb	r3, [r7, #23]
 81093fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	681b      	ldr	r3, [r3, #0]
 8109402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109406:	2b00      	cmp	r3, #0
 8109408:	d008      	beq.n	810941c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810940a:	4b31      	ldr	r3, [pc, #196]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810940c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810940e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8109412:	687b      	ldr	r3, [r7, #4]
 8109414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109416:	492e      	ldr	r1, [pc, #184]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109418:	4313      	orrs	r3, r2
 810941a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810941c:	687b      	ldr	r3, [r7, #4]
 810941e:	681b      	ldr	r3, [r3, #0]
 8109420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109424:	2b00      	cmp	r3, #0
 8109426:	d009      	beq.n	810943c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8109428:	4b29      	ldr	r3, [pc, #164]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810942a:	691b      	ldr	r3, [r3, #16]
 810942c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109430:	687b      	ldr	r3, [r7, #4]
 8109432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8109436:	4926      	ldr	r1, [pc, #152]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109438:	4313      	orrs	r3, r2
 810943a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	681b      	ldr	r3, [r3, #0]
 8109440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109444:	2b00      	cmp	r3, #0
 8109446:	d008      	beq.n	810945a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8109448:	4b21      	ldr	r3, [pc, #132]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810944a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810944c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109454:	491e      	ldr	r1, [pc, #120]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109456:	4313      	orrs	r3, r2
 8109458:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	681b      	ldr	r3, [r3, #0]
 810945e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109462:	2b00      	cmp	r3, #0
 8109464:	d00d      	beq.n	8109482 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8109466:	4b1a      	ldr	r3, [pc, #104]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109468:	691b      	ldr	r3, [r3, #16]
 810946a:	4a19      	ldr	r2, [pc, #100]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810946c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8109470:	6113      	str	r3, [r2, #16]
 8109472:	4b17      	ldr	r3, [pc, #92]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109474:	691a      	ldr	r2, [r3, #16]
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810947c:	4914      	ldr	r1, [pc, #80]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810947e:	4313      	orrs	r3, r2
 8109480:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8109482:	687b      	ldr	r3, [r7, #4]
 8109484:	681b      	ldr	r3, [r3, #0]
 8109486:	2b00      	cmp	r3, #0
 8109488:	da08      	bge.n	810949c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810948a:	4b11      	ldr	r3, [pc, #68]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810948c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810948e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8109492:	687b      	ldr	r3, [r7, #4]
 8109494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109496:	490e      	ldr	r1, [pc, #56]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109498:	4313      	orrs	r3, r2
 810949a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	681b      	ldr	r3, [r3, #0]
 81094a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81094a4:	2b00      	cmp	r3, #0
 81094a6:	d009      	beq.n	81094bc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81094a8:	4b09      	ldr	r3, [pc, #36]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81094aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81094ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81094b0:	687b      	ldr	r3, [r7, #4]
 81094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81094b6:	4906      	ldr	r1, [pc, #24]	; (81094d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81094b8:	4313      	orrs	r3, r2
 81094ba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81094bc:	7dbb      	ldrb	r3, [r7, #22]
 81094be:	2b00      	cmp	r3, #0
 81094c0:	d101      	bne.n	81094c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81094c2:	2300      	movs	r3, #0
 81094c4:	e000      	b.n	81094c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81094c6:	2301      	movs	r3, #1
}
 81094c8:	4618      	mov	r0, r3
 81094ca:	3718      	adds	r7, #24
 81094cc:	46bd      	mov	sp, r7
 81094ce:	bd80      	pop	{r7, pc}
 81094d0:	58024400 	.word	0x58024400

081094d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81094d4:	b580      	push	{r7, lr}
 81094d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81094d8:	f7ff f85e 	bl	8108598 <HAL_RCC_GetHCLKFreq>
 81094dc:	4602      	mov	r2, r0
 81094de:	4b06      	ldr	r3, [pc, #24]	; (81094f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81094e0:	6a1b      	ldr	r3, [r3, #32]
 81094e2:	091b      	lsrs	r3, r3, #4
 81094e4:	f003 0307 	and.w	r3, r3, #7
 81094e8:	4904      	ldr	r1, [pc, #16]	; (81094fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81094ea:	5ccb      	ldrb	r3, [r1, r3]
 81094ec:	f003 031f 	and.w	r3, r3, #31
 81094f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81094f4:	4618      	mov	r0, r3
 81094f6:	bd80      	pop	{r7, pc}
 81094f8:	58024400 	.word	0x58024400
 81094fc:	0810d56c 	.word	0x0810d56c

08109500 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8109500:	b480      	push	{r7}
 8109502:	b089      	sub	sp, #36	; 0x24
 8109504:	af00      	add	r7, sp, #0
 8109506:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109508:	4ba1      	ldr	r3, [pc, #644]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810950a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810950c:	f003 0303 	and.w	r3, r3, #3
 8109510:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8109512:	4b9f      	ldr	r3, [pc, #636]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109516:	0b1b      	lsrs	r3, r3, #12
 8109518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810951c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810951e:	4b9c      	ldr	r3, [pc, #624]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109522:	091b      	lsrs	r3, r3, #4
 8109524:	f003 0301 	and.w	r3, r3, #1
 8109528:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810952a:	4b99      	ldr	r3, [pc, #612]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810952e:	08db      	lsrs	r3, r3, #3
 8109530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109534:	693a      	ldr	r2, [r7, #16]
 8109536:	fb02 f303 	mul.w	r3, r2, r3
 810953a:	ee07 3a90 	vmov	s15, r3
 810953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109542:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109546:	697b      	ldr	r3, [r7, #20]
 8109548:	2b00      	cmp	r3, #0
 810954a:	f000 8111 	beq.w	8109770 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810954e:	69bb      	ldr	r3, [r7, #24]
 8109550:	2b02      	cmp	r3, #2
 8109552:	f000 8083 	beq.w	810965c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109556:	69bb      	ldr	r3, [r7, #24]
 8109558:	2b02      	cmp	r3, #2
 810955a:	f200 80a1 	bhi.w	81096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810955e:	69bb      	ldr	r3, [r7, #24]
 8109560:	2b00      	cmp	r3, #0
 8109562:	d003      	beq.n	810956c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109564:	69bb      	ldr	r3, [r7, #24]
 8109566:	2b01      	cmp	r3, #1
 8109568:	d056      	beq.n	8109618 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810956a:	e099      	b.n	81096a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810956c:	4b88      	ldr	r3, [pc, #544]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810956e:	681b      	ldr	r3, [r3, #0]
 8109570:	f003 0320 	and.w	r3, r3, #32
 8109574:	2b00      	cmp	r3, #0
 8109576:	d02d      	beq.n	81095d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109578:	4b85      	ldr	r3, [pc, #532]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810957a:	681b      	ldr	r3, [r3, #0]
 810957c:	08db      	lsrs	r3, r3, #3
 810957e:	f003 0303 	and.w	r3, r3, #3
 8109582:	4a84      	ldr	r2, [pc, #528]	; (8109794 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109584:	fa22 f303 	lsr.w	r3, r2, r3
 8109588:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810958a:	68bb      	ldr	r3, [r7, #8]
 810958c:	ee07 3a90 	vmov	s15, r3
 8109590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109594:	697b      	ldr	r3, [r7, #20]
 8109596:	ee07 3a90 	vmov	s15, r3
 810959a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810959e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81095a2:	4b7b      	ldr	r3, [pc, #492]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81095a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81095aa:	ee07 3a90 	vmov	s15, r3
 81095ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81095b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81095b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81095ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81095be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81095c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81095c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81095ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81095ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81095d2:	e087      	b.n	81096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81095d4:	697b      	ldr	r3, [r7, #20]
 81095d6:	ee07 3a90 	vmov	s15, r3
 81095da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810979c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81095e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81095e6:	4b6a      	ldr	r3, [pc, #424]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81095e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81095ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81095ee:	ee07 3a90 	vmov	s15, r3
 81095f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81095f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81095fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81095fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810960a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810960e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109616:	e065      	b.n	81096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109618:	697b      	ldr	r3, [r7, #20]
 810961a:	ee07 3a90 	vmov	s15, r3
 810961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109622:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810962a:	4b59      	ldr	r3, [pc, #356]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810962c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810962e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109632:	ee07 3a90 	vmov	s15, r3
 8109636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810963a:	ed97 6a03 	vldr	s12, [r7, #12]
 810963e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810964a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810964e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810965a:	e043      	b.n	81096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810965c:	697b      	ldr	r3, [r7, #20]
 810965e:	ee07 3a90 	vmov	s15, r3
 8109662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109666:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810966a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810966e:	4b48      	ldr	r3, [pc, #288]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109676:	ee07 3a90 	vmov	s15, r3
 810967a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810967e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109682:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810968a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810968e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109696:	ee67 7a27 	vmul.f32	s15, s14, s15
 810969a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810969e:	e021      	b.n	81096e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81096a0:	697b      	ldr	r3, [r7, #20]
 81096a2:	ee07 3a90 	vmov	s15, r3
 81096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81096aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81097a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81096ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81096b2:	4b37      	ldr	r3, [pc, #220]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81096b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81096ba:	ee07 3a90 	vmov	s15, r3
 81096be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81096c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81096c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81096ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81096ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81096d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81096d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81096da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81096de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81096e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81096e4:	4b2a      	ldr	r3, [pc, #168]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81096e8:	0a5b      	lsrs	r3, r3, #9
 81096ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81096ee:	ee07 3a90 	vmov	s15, r3
 81096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81096f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81096fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81096fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8109702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810970a:	ee17 2a90 	vmov	r2, s15
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8109712:	4b1f      	ldr	r3, [pc, #124]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109716:	0c1b      	lsrs	r3, r3, #16
 8109718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810971c:	ee07 3a90 	vmov	s15, r3
 8109720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109728:	ee37 7a87 	vadd.f32	s14, s15, s14
 810972c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109738:	ee17 2a90 	vmov	r2, s15
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8109740:	4b13      	ldr	r3, [pc, #76]	; (8109790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109744:	0e1b      	lsrs	r3, r3, #24
 8109746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810974a:	ee07 3a90 	vmov	s15, r3
 810974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109756:	ee37 7a87 	vadd.f32	s14, s15, s14
 810975a:	edd7 6a07 	vldr	s13, [r7, #28]
 810975e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109766:	ee17 2a90 	vmov	r2, s15
 810976a:	687b      	ldr	r3, [r7, #4]
 810976c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810976e:	e008      	b.n	8109782 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8109770:	687b      	ldr	r3, [r7, #4]
 8109772:	2200      	movs	r2, #0
 8109774:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	2200      	movs	r2, #0
 810977a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	2200      	movs	r2, #0
 8109780:	609a      	str	r2, [r3, #8]
}
 8109782:	bf00      	nop
 8109784:	3724      	adds	r7, #36	; 0x24
 8109786:	46bd      	mov	sp, r7
 8109788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810978c:	4770      	bx	lr
 810978e:	bf00      	nop
 8109790:	58024400 	.word	0x58024400
 8109794:	03d09000 	.word	0x03d09000
 8109798:	46000000 	.word	0x46000000
 810979c:	4c742400 	.word	0x4c742400
 81097a0:	4a742400 	.word	0x4a742400
 81097a4:	4b742400 	.word	0x4b742400

081097a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81097a8:	b480      	push	{r7}
 81097aa:	b089      	sub	sp, #36	; 0x24
 81097ac:	af00      	add	r7, sp, #0
 81097ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81097b0:	4ba1      	ldr	r3, [pc, #644]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81097b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097b4:	f003 0303 	and.w	r3, r3, #3
 81097b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81097ba:	4b9f      	ldr	r3, [pc, #636]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097be:	0d1b      	lsrs	r3, r3, #20
 81097c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81097c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81097c6:	4b9c      	ldr	r3, [pc, #624]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81097ca:	0a1b      	lsrs	r3, r3, #8
 81097cc:	f003 0301 	and.w	r3, r3, #1
 81097d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81097d2:	4b99      	ldr	r3, [pc, #612]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81097d6:	08db      	lsrs	r3, r3, #3
 81097d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81097dc:	693a      	ldr	r2, [r7, #16]
 81097de:	fb02 f303 	mul.w	r3, r2, r3
 81097e2:	ee07 3a90 	vmov	s15, r3
 81097e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81097ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81097ee:	697b      	ldr	r3, [r7, #20]
 81097f0:	2b00      	cmp	r3, #0
 81097f2:	f000 8111 	beq.w	8109a18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81097f6:	69bb      	ldr	r3, [r7, #24]
 81097f8:	2b02      	cmp	r3, #2
 81097fa:	f000 8083 	beq.w	8109904 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81097fe:	69bb      	ldr	r3, [r7, #24]
 8109800:	2b02      	cmp	r3, #2
 8109802:	f200 80a1 	bhi.w	8109948 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8109806:	69bb      	ldr	r3, [r7, #24]
 8109808:	2b00      	cmp	r3, #0
 810980a:	d003      	beq.n	8109814 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810980c:	69bb      	ldr	r3, [r7, #24]
 810980e:	2b01      	cmp	r3, #1
 8109810:	d056      	beq.n	81098c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109812:	e099      	b.n	8109948 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109814:	4b88      	ldr	r3, [pc, #544]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109816:	681b      	ldr	r3, [r3, #0]
 8109818:	f003 0320 	and.w	r3, r3, #32
 810981c:	2b00      	cmp	r3, #0
 810981e:	d02d      	beq.n	810987c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109820:	4b85      	ldr	r3, [pc, #532]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109822:	681b      	ldr	r3, [r3, #0]
 8109824:	08db      	lsrs	r3, r3, #3
 8109826:	f003 0303 	and.w	r3, r3, #3
 810982a:	4a84      	ldr	r2, [pc, #528]	; (8109a3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810982c:	fa22 f303 	lsr.w	r3, r2, r3
 8109830:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109832:	68bb      	ldr	r3, [r7, #8]
 8109834:	ee07 3a90 	vmov	s15, r3
 8109838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810983c:	697b      	ldr	r3, [r7, #20]
 810983e:	ee07 3a90 	vmov	s15, r3
 8109842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810984a:	4b7b      	ldr	r3, [pc, #492]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810984e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109852:	ee07 3a90 	vmov	s15, r3
 8109856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810985a:	ed97 6a03 	vldr	s12, [r7, #12]
 810985e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810986a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810986e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109876:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810987a:	e087      	b.n	810998c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810987c:	697b      	ldr	r3, [r7, #20]
 810987e:	ee07 3a90 	vmov	s15, r3
 8109882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109886:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109a44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810988a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810988e:	4b6a      	ldr	r3, [pc, #424]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109896:	ee07 3a90 	vmov	s15, r3
 810989a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810989e:	ed97 6a03 	vldr	s12, [r7, #12]
 81098a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81098a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81098aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81098ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81098b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81098b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81098ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81098be:	e065      	b.n	810998c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81098c0:	697b      	ldr	r3, [r7, #20]
 81098c2:	ee07 3a90 	vmov	s15, r3
 81098c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81098ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109a48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81098ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81098d2:	4b59      	ldr	r3, [pc, #356]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81098d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81098d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81098da:	ee07 3a90 	vmov	s15, r3
 81098de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81098e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81098e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81098ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81098ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81098f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81098f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81098fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81098fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109902:	e043      	b.n	810998c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109904:	697b      	ldr	r3, [r7, #20]
 8109906:	ee07 3a90 	vmov	s15, r3
 810990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810990e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8109912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109916:	4b48      	ldr	r3, [pc, #288]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810991a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810991e:	ee07 3a90 	vmov	s15, r3
 8109922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109926:	ed97 6a03 	vldr	s12, [r7, #12]
 810992a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810992e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810993a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810993e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109946:	e021      	b.n	810998c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109948:	697b      	ldr	r3, [r7, #20]
 810994a:	ee07 3a90 	vmov	s15, r3
 810994e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109952:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109a48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810995a:	4b37      	ldr	r3, [pc, #220]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810995e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109962:	ee07 3a90 	vmov	s15, r3
 8109966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810996a:	ed97 6a03 	vldr	s12, [r7, #12]
 810996e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810997a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810997e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810998a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810998c:	4b2a      	ldr	r3, [pc, #168]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810998e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109990:	0a5b      	lsrs	r3, r3, #9
 8109992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109996:	ee07 3a90 	vmov	s15, r3
 810999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810999e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81099a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81099a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81099aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81099ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81099b2:	ee17 2a90 	vmov	r2, s15
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81099ba:	4b1f      	ldr	r3, [pc, #124]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099be:	0c1b      	lsrs	r3, r3, #16
 81099c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81099c4:	ee07 3a90 	vmov	s15, r3
 81099c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81099d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81099d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81099d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81099dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81099e0:	ee17 2a90 	vmov	r2, s15
 81099e4:	687b      	ldr	r3, [r7, #4]
 81099e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81099e8:	4b13      	ldr	r3, [pc, #76]	; (8109a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099ec:	0e1b      	lsrs	r3, r3, #24
 81099ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81099f2:	ee07 3a90 	vmov	s15, r3
 81099f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81099fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8109a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109a0e:	ee17 2a90 	vmov	r2, s15
 8109a12:	687b      	ldr	r3, [r7, #4]
 8109a14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8109a16:	e008      	b.n	8109a2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	2200      	movs	r2, #0
 8109a1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8109a1e:	687b      	ldr	r3, [r7, #4]
 8109a20:	2200      	movs	r2, #0
 8109a22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8109a24:	687b      	ldr	r3, [r7, #4]
 8109a26:	2200      	movs	r2, #0
 8109a28:	609a      	str	r2, [r3, #8]
}
 8109a2a:	bf00      	nop
 8109a2c:	3724      	adds	r7, #36	; 0x24
 8109a2e:	46bd      	mov	sp, r7
 8109a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a34:	4770      	bx	lr
 8109a36:	bf00      	nop
 8109a38:	58024400 	.word	0x58024400
 8109a3c:	03d09000 	.word	0x03d09000
 8109a40:	46000000 	.word	0x46000000
 8109a44:	4c742400 	.word	0x4c742400
 8109a48:	4a742400 	.word	0x4a742400
 8109a4c:	4b742400 	.word	0x4b742400

08109a50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8109a50:	b580      	push	{r7, lr}
 8109a52:	b084      	sub	sp, #16
 8109a54:	af00      	add	r7, sp, #0
 8109a56:	6078      	str	r0, [r7, #4]
 8109a58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109a5a:	2300      	movs	r3, #0
 8109a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109a5e:	4b54      	ldr	r3, [pc, #336]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109a62:	f003 0303 	and.w	r3, r3, #3
 8109a66:	2b03      	cmp	r3, #3
 8109a68:	d101      	bne.n	8109a6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8109a6a:	2301      	movs	r3, #1
 8109a6c:	e09b      	b.n	8109ba6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8109a6e:	4b50      	ldr	r3, [pc, #320]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109a70:	681b      	ldr	r3, [r3, #0]
 8109a72:	4a4f      	ldr	r2, [pc, #316]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109a74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8109a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109a7a:	f7f9 fdb9 	bl	81035f0 <HAL_GetTick>
 8109a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109a80:	e008      	b.n	8109a94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109a82:	f7f9 fdb5 	bl	81035f0 <HAL_GetTick>
 8109a86:	4602      	mov	r2, r0
 8109a88:	68bb      	ldr	r3, [r7, #8]
 8109a8a:	1ad3      	subs	r3, r2, r3
 8109a8c:	2b02      	cmp	r3, #2
 8109a8e:	d901      	bls.n	8109a94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109a90:	2303      	movs	r3, #3
 8109a92:	e088      	b.n	8109ba6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109a94:	4b46      	ldr	r3, [pc, #280]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109a96:	681b      	ldr	r3, [r3, #0]
 8109a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109a9c:	2b00      	cmp	r3, #0
 8109a9e:	d1f0      	bne.n	8109a82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8109aa0:	4b43      	ldr	r3, [pc, #268]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109aa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8109aa8:	687b      	ldr	r3, [r7, #4]
 8109aaa:	681b      	ldr	r3, [r3, #0]
 8109aac:	031b      	lsls	r3, r3, #12
 8109aae:	4940      	ldr	r1, [pc, #256]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109ab0:	4313      	orrs	r3, r2
 8109ab2:	628b      	str	r3, [r1, #40]	; 0x28
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	685b      	ldr	r3, [r3, #4]
 8109ab8:	3b01      	subs	r3, #1
 8109aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	689b      	ldr	r3, [r3, #8]
 8109ac2:	3b01      	subs	r3, #1
 8109ac4:	025b      	lsls	r3, r3, #9
 8109ac6:	b29b      	uxth	r3, r3
 8109ac8:	431a      	orrs	r2, r3
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	68db      	ldr	r3, [r3, #12]
 8109ace:	3b01      	subs	r3, #1
 8109ad0:	041b      	lsls	r3, r3, #16
 8109ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109ad6:	431a      	orrs	r2, r3
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	691b      	ldr	r3, [r3, #16]
 8109adc:	3b01      	subs	r3, #1
 8109ade:	061b      	lsls	r3, r3, #24
 8109ae0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109ae4:	4932      	ldr	r1, [pc, #200]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109ae6:	4313      	orrs	r3, r2
 8109ae8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8109aea:	4b31      	ldr	r3, [pc, #196]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	695b      	ldr	r3, [r3, #20]
 8109af6:	492e      	ldr	r1, [pc, #184]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109af8:	4313      	orrs	r3, r2
 8109afa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109afc:	4b2c      	ldr	r3, [pc, #176]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b00:	f023 0220 	bic.w	r2, r3, #32
 8109b04:	687b      	ldr	r3, [r7, #4]
 8109b06:	699b      	ldr	r3, [r3, #24]
 8109b08:	4929      	ldr	r1, [pc, #164]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b0a:	4313      	orrs	r3, r2
 8109b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8109b0e:	4b28      	ldr	r3, [pc, #160]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b12:	4a27      	ldr	r2, [pc, #156]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b14:	f023 0310 	bic.w	r3, r3, #16
 8109b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109b1a:	4b25      	ldr	r3, [pc, #148]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109b22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109b26:	687a      	ldr	r2, [r7, #4]
 8109b28:	69d2      	ldr	r2, [r2, #28]
 8109b2a:	00d2      	lsls	r2, r2, #3
 8109b2c:	4920      	ldr	r1, [pc, #128]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b2e:	4313      	orrs	r3, r2
 8109b30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8109b32:	4b1f      	ldr	r3, [pc, #124]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b36:	4a1e      	ldr	r2, [pc, #120]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b38:	f043 0310 	orr.w	r3, r3, #16
 8109b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109b3e:	683b      	ldr	r3, [r7, #0]
 8109b40:	2b00      	cmp	r3, #0
 8109b42:	d106      	bne.n	8109b52 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109b44:	4b1a      	ldr	r3, [pc, #104]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b48:	4a19      	ldr	r2, [pc, #100]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8109b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109b50:	e00f      	b.n	8109b72 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109b52:	683b      	ldr	r3, [r7, #0]
 8109b54:	2b01      	cmp	r3, #1
 8109b56:	d106      	bne.n	8109b66 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109b58:	4b15      	ldr	r3, [pc, #84]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b5c:	4a14      	ldr	r2, [pc, #80]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109b64:	e005      	b.n	8109b72 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8109b66:	4b12      	ldr	r3, [pc, #72]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b6a:	4a11      	ldr	r2, [pc, #68]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8109b70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8109b72:	4b0f      	ldr	r3, [pc, #60]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b74:	681b      	ldr	r3, [r3, #0]
 8109b76:	4a0e      	ldr	r2, [pc, #56]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109b7e:	f7f9 fd37 	bl	81035f0 <HAL_GetTick>
 8109b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109b84:	e008      	b.n	8109b98 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109b86:	f7f9 fd33 	bl	81035f0 <HAL_GetTick>
 8109b8a:	4602      	mov	r2, r0
 8109b8c:	68bb      	ldr	r3, [r7, #8]
 8109b8e:	1ad3      	subs	r3, r2, r3
 8109b90:	2b02      	cmp	r3, #2
 8109b92:	d901      	bls.n	8109b98 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109b94:	2303      	movs	r3, #3
 8109b96:	e006      	b.n	8109ba6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109b98:	4b05      	ldr	r3, [pc, #20]	; (8109bb0 <RCCEx_PLL2_Config+0x160>)
 8109b9a:	681b      	ldr	r3, [r3, #0]
 8109b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109ba0:	2b00      	cmp	r3, #0
 8109ba2:	d0f0      	beq.n	8109b86 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8109ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8109ba6:	4618      	mov	r0, r3
 8109ba8:	3710      	adds	r7, #16
 8109baa:	46bd      	mov	sp, r7
 8109bac:	bd80      	pop	{r7, pc}
 8109bae:	bf00      	nop
 8109bb0:	58024400 	.word	0x58024400

08109bb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8109bb4:	b580      	push	{r7, lr}
 8109bb6:	b084      	sub	sp, #16
 8109bb8:	af00      	add	r7, sp, #0
 8109bba:	6078      	str	r0, [r7, #4]
 8109bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109bbe:	2300      	movs	r3, #0
 8109bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109bc2:	4b54      	ldr	r3, [pc, #336]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109bc6:	f003 0303 	and.w	r3, r3, #3
 8109bca:	2b03      	cmp	r3, #3
 8109bcc:	d101      	bne.n	8109bd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8109bce:	2301      	movs	r3, #1
 8109bd0:	e09b      	b.n	8109d0a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8109bd2:	4b50      	ldr	r3, [pc, #320]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	4a4f      	ldr	r2, [pc, #316]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109bde:	f7f9 fd07 	bl	81035f0 <HAL_GetTick>
 8109be2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109be4:	e008      	b.n	8109bf8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109be6:	f7f9 fd03 	bl	81035f0 <HAL_GetTick>
 8109bea:	4602      	mov	r2, r0
 8109bec:	68bb      	ldr	r3, [r7, #8]
 8109bee:	1ad3      	subs	r3, r2, r3
 8109bf0:	2b02      	cmp	r3, #2
 8109bf2:	d901      	bls.n	8109bf8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109bf4:	2303      	movs	r3, #3
 8109bf6:	e088      	b.n	8109d0a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109bf8:	4b46      	ldr	r3, [pc, #280]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109bfa:	681b      	ldr	r3, [r3, #0]
 8109bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109c00:	2b00      	cmp	r3, #0
 8109c02:	d1f0      	bne.n	8109be6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8109c04:	4b43      	ldr	r3, [pc, #268]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109c08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	681b      	ldr	r3, [r3, #0]
 8109c10:	051b      	lsls	r3, r3, #20
 8109c12:	4940      	ldr	r1, [pc, #256]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c14:	4313      	orrs	r3, r2
 8109c16:	628b      	str	r3, [r1, #40]	; 0x28
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	685b      	ldr	r3, [r3, #4]
 8109c1c:	3b01      	subs	r3, #1
 8109c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	689b      	ldr	r3, [r3, #8]
 8109c26:	3b01      	subs	r3, #1
 8109c28:	025b      	lsls	r3, r3, #9
 8109c2a:	b29b      	uxth	r3, r3
 8109c2c:	431a      	orrs	r2, r3
 8109c2e:	687b      	ldr	r3, [r7, #4]
 8109c30:	68db      	ldr	r3, [r3, #12]
 8109c32:	3b01      	subs	r3, #1
 8109c34:	041b      	lsls	r3, r3, #16
 8109c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109c3a:	431a      	orrs	r2, r3
 8109c3c:	687b      	ldr	r3, [r7, #4]
 8109c3e:	691b      	ldr	r3, [r3, #16]
 8109c40:	3b01      	subs	r3, #1
 8109c42:	061b      	lsls	r3, r3, #24
 8109c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109c48:	4932      	ldr	r1, [pc, #200]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c4a:	4313      	orrs	r3, r2
 8109c4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109c4e:	4b31      	ldr	r3, [pc, #196]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8109c56:	687b      	ldr	r3, [r7, #4]
 8109c58:	695b      	ldr	r3, [r3, #20]
 8109c5a:	492e      	ldr	r1, [pc, #184]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c5c:	4313      	orrs	r3, r2
 8109c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8109c60:	4b2c      	ldr	r3, [pc, #176]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8109c68:	687b      	ldr	r3, [r7, #4]
 8109c6a:	699b      	ldr	r3, [r3, #24]
 8109c6c:	4929      	ldr	r1, [pc, #164]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c6e:	4313      	orrs	r3, r2
 8109c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8109c72:	4b28      	ldr	r3, [pc, #160]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c76:	4a27      	ldr	r2, [pc, #156]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109c7e:	4b25      	ldr	r3, [pc, #148]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109c86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109c8a:	687a      	ldr	r2, [r7, #4]
 8109c8c:	69d2      	ldr	r2, [r2, #28]
 8109c8e:	00d2      	lsls	r2, r2, #3
 8109c90:	4920      	ldr	r1, [pc, #128]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c92:	4313      	orrs	r3, r2
 8109c94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8109c96:	4b1f      	ldr	r3, [pc, #124]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c9a:	4a1e      	ldr	r2, [pc, #120]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8109ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109ca2:	683b      	ldr	r3, [r7, #0]
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d106      	bne.n	8109cb6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109ca8:	4b1a      	ldr	r3, [pc, #104]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cac:	4a19      	ldr	r2, [pc, #100]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8109cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109cb4:	e00f      	b.n	8109cd6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109cb6:	683b      	ldr	r3, [r7, #0]
 8109cb8:	2b01      	cmp	r3, #1
 8109cba:	d106      	bne.n	8109cca <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109cbc:	4b15      	ldr	r3, [pc, #84]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cc0:	4a14      	ldr	r2, [pc, #80]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8109cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109cc8:	e005      	b.n	8109cd6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109cca:	4b12      	ldr	r3, [pc, #72]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cce:	4a11      	ldr	r2, [pc, #68]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8109cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8109cd6:	4b0f      	ldr	r3, [pc, #60]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cd8:	681b      	ldr	r3, [r3, #0]
 8109cda:	4a0e      	ldr	r2, [pc, #56]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109ce2:	f7f9 fc85 	bl	81035f0 <HAL_GetTick>
 8109ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109ce8:	e008      	b.n	8109cfc <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109cea:	f7f9 fc81 	bl	81035f0 <HAL_GetTick>
 8109cee:	4602      	mov	r2, r0
 8109cf0:	68bb      	ldr	r3, [r7, #8]
 8109cf2:	1ad3      	subs	r3, r2, r3
 8109cf4:	2b02      	cmp	r3, #2
 8109cf6:	d901      	bls.n	8109cfc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109cf8:	2303      	movs	r3, #3
 8109cfa:	e006      	b.n	8109d0a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109cfc:	4b05      	ldr	r3, [pc, #20]	; (8109d14 <RCCEx_PLL3_Config+0x160>)
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109d04:	2b00      	cmp	r3, #0
 8109d06:	d0f0      	beq.n	8109cea <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8109d0a:	4618      	mov	r0, r3
 8109d0c:	3710      	adds	r7, #16
 8109d0e:	46bd      	mov	sp, r7
 8109d10:	bd80      	pop	{r7, pc}
 8109d12:	bf00      	nop
 8109d14:	58024400 	.word	0x58024400

08109d18 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109d18:	b580      	push	{r7, lr}
 8109d1a:	b084      	sub	sp, #16
 8109d1c:	af00      	add	r7, sp, #0
 8109d1e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8109d20:	2300      	movs	r3, #0
 8109d22:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	2b00      	cmp	r3, #0
 8109d28:	d101      	bne.n	8109d2e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8109d2a:	2301      	movs	r3, #1
 8109d2c:	e0eb      	b.n	8109f06 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109d2e:	687b      	ldr	r3, [r7, #4]
 8109d30:	2200      	movs	r2, #0
 8109d32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8109d34:	687b      	ldr	r3, [r7, #4]
 8109d36:	681b      	ldr	r3, [r3, #0]
 8109d38:	4a75      	ldr	r2, [pc, #468]	; (8109f10 <HAL_SPI_Init+0x1f8>)
 8109d3a:	4293      	cmp	r3, r2
 8109d3c:	d00f      	beq.n	8109d5e <HAL_SPI_Init+0x46>
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	681b      	ldr	r3, [r3, #0]
 8109d42:	4a74      	ldr	r2, [pc, #464]	; (8109f14 <HAL_SPI_Init+0x1fc>)
 8109d44:	4293      	cmp	r3, r2
 8109d46:	d00a      	beq.n	8109d5e <HAL_SPI_Init+0x46>
 8109d48:	687b      	ldr	r3, [r7, #4]
 8109d4a:	681b      	ldr	r3, [r3, #0]
 8109d4c:	4a72      	ldr	r2, [pc, #456]	; (8109f18 <HAL_SPI_Init+0x200>)
 8109d4e:	4293      	cmp	r3, r2
 8109d50:	d005      	beq.n	8109d5e <HAL_SPI_Init+0x46>
 8109d52:	687b      	ldr	r3, [r7, #4]
 8109d54:	68db      	ldr	r3, [r3, #12]
 8109d56:	2b0f      	cmp	r3, #15
 8109d58:	d901      	bls.n	8109d5e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8109d5a:	2301      	movs	r3, #1
 8109d5c:	e0d3      	b.n	8109f06 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109d5e:	6878      	ldr	r0, [r7, #4]
 8109d60:	f000 fdf9 	bl	810a956 <SPI_GetPacketSize>
 8109d64:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109d66:	687b      	ldr	r3, [r7, #4]
 8109d68:	681b      	ldr	r3, [r3, #0]
 8109d6a:	4a69      	ldr	r2, [pc, #420]	; (8109f10 <HAL_SPI_Init+0x1f8>)
 8109d6c:	4293      	cmp	r3, r2
 8109d6e:	d00c      	beq.n	8109d8a <HAL_SPI_Init+0x72>
 8109d70:	687b      	ldr	r3, [r7, #4]
 8109d72:	681b      	ldr	r3, [r3, #0]
 8109d74:	4a67      	ldr	r2, [pc, #412]	; (8109f14 <HAL_SPI_Init+0x1fc>)
 8109d76:	4293      	cmp	r3, r2
 8109d78:	d007      	beq.n	8109d8a <HAL_SPI_Init+0x72>
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	681b      	ldr	r3, [r3, #0]
 8109d7e:	4a66      	ldr	r2, [pc, #408]	; (8109f18 <HAL_SPI_Init+0x200>)
 8109d80:	4293      	cmp	r3, r2
 8109d82:	d002      	beq.n	8109d8a <HAL_SPI_Init+0x72>
 8109d84:	68bb      	ldr	r3, [r7, #8]
 8109d86:	2b08      	cmp	r3, #8
 8109d88:	d811      	bhi.n	8109dae <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109d8e:	4a60      	ldr	r2, [pc, #384]	; (8109f10 <HAL_SPI_Init+0x1f8>)
 8109d90:	4293      	cmp	r3, r2
 8109d92:	d009      	beq.n	8109da8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109d94:	687b      	ldr	r3, [r7, #4]
 8109d96:	681b      	ldr	r3, [r3, #0]
 8109d98:	4a5e      	ldr	r2, [pc, #376]	; (8109f14 <HAL_SPI_Init+0x1fc>)
 8109d9a:	4293      	cmp	r3, r2
 8109d9c:	d004      	beq.n	8109da8 <HAL_SPI_Init+0x90>
 8109d9e:	687b      	ldr	r3, [r7, #4]
 8109da0:	681b      	ldr	r3, [r3, #0]
 8109da2:	4a5d      	ldr	r2, [pc, #372]	; (8109f18 <HAL_SPI_Init+0x200>)
 8109da4:	4293      	cmp	r3, r2
 8109da6:	d104      	bne.n	8109db2 <HAL_SPI_Init+0x9a>
 8109da8:	68bb      	ldr	r3, [r7, #8]
 8109daa:	2b10      	cmp	r3, #16
 8109dac:	d901      	bls.n	8109db2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8109dae:	2301      	movs	r3, #1
 8109db0:	e0a9      	b.n	8109f06 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8109db2:	687b      	ldr	r3, [r7, #4]
 8109db4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109db8:	b2db      	uxtb	r3, r3
 8109dba:	2b00      	cmp	r3, #0
 8109dbc:	d106      	bne.n	8109dcc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8109dbe:	687b      	ldr	r3, [r7, #4]
 8109dc0:	2200      	movs	r2, #0
 8109dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8109dc6:	6878      	ldr	r0, [r7, #4]
 8109dc8:	f7f8 fee0 	bl	8102b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	2202      	movs	r2, #2
 8109dd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	681b      	ldr	r3, [r3, #0]
 8109dd8:	681a      	ldr	r2, [r3, #0]
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	681b      	ldr	r3, [r3, #0]
 8109dde:	f022 0201 	bic.w	r2, r2, #1
 8109de2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109de4:	687b      	ldr	r3, [r7, #4]
 8109de6:	699b      	ldr	r3, [r3, #24]
 8109de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109dec:	d119      	bne.n	8109e22 <HAL_SPI_Init+0x10a>
 8109dee:	687b      	ldr	r3, [r7, #4]
 8109df0:	685b      	ldr	r3, [r3, #4]
 8109df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109df6:	d103      	bne.n	8109e00 <HAL_SPI_Init+0xe8>
 8109df8:	687b      	ldr	r3, [r7, #4]
 8109dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109dfc:	2b00      	cmp	r3, #0
 8109dfe:	d008      	beq.n	8109e12 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109e00:	687b      	ldr	r3, [r7, #4]
 8109e02:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109e04:	2b00      	cmp	r3, #0
 8109e06:	d10c      	bne.n	8109e22 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109e08:	687b      	ldr	r3, [r7, #4]
 8109e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109e10:	d107      	bne.n	8109e22 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109e12:	687b      	ldr	r3, [r7, #4]
 8109e14:	681b      	ldr	r3, [r3, #0]
 8109e16:	681a      	ldr	r2, [r3, #0]
 8109e18:	687b      	ldr	r3, [r7, #4]
 8109e1a:	681b      	ldr	r3, [r3, #0]
 8109e1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8109e20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109e22:	687b      	ldr	r3, [r7, #4]
 8109e24:	69da      	ldr	r2, [r3, #28]
 8109e26:	687b      	ldr	r3, [r7, #4]
 8109e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e2a:	431a      	orrs	r2, r3
 8109e2c:	68fb      	ldr	r3, [r7, #12]
 8109e2e:	431a      	orrs	r2, r3
 8109e30:	687b      	ldr	r3, [r7, #4]
 8109e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109e34:	ea42 0103 	orr.w	r1, r2, r3
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	68da      	ldr	r2, [r3, #12]
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	430a      	orrs	r2, r1
 8109e42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e4c:	431a      	orrs	r2, r3
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109e52:	431a      	orrs	r2, r3
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	699b      	ldr	r3, [r3, #24]
 8109e58:	431a      	orrs	r2, r3
 8109e5a:	687b      	ldr	r3, [r7, #4]
 8109e5c:	691b      	ldr	r3, [r3, #16]
 8109e5e:	431a      	orrs	r2, r3
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	695b      	ldr	r3, [r3, #20]
 8109e64:	431a      	orrs	r2, r3
 8109e66:	687b      	ldr	r3, [r7, #4]
 8109e68:	6a1b      	ldr	r3, [r3, #32]
 8109e6a:	431a      	orrs	r2, r3
 8109e6c:	687b      	ldr	r3, [r7, #4]
 8109e6e:	685b      	ldr	r3, [r3, #4]
 8109e70:	431a      	orrs	r2, r3
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109e76:	431a      	orrs	r2, r3
 8109e78:	687b      	ldr	r3, [r7, #4]
 8109e7a:	689b      	ldr	r3, [r3, #8]
 8109e7c:	431a      	orrs	r2, r3
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109e82:	ea42 0103 	orr.w	r1, r2, r3
 8109e86:	687b      	ldr	r3, [r7, #4]
 8109e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	681b      	ldr	r3, [r3, #0]
 8109e8e:	430a      	orrs	r2, r1
 8109e90:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109e92:	687b      	ldr	r3, [r7, #4]
 8109e94:	685b      	ldr	r3, [r3, #4]
 8109e96:	2b00      	cmp	r3, #0
 8109e98:	d113      	bne.n	8109ec2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8109e9a:	687b      	ldr	r3, [r7, #4]
 8109e9c:	681b      	ldr	r3, [r3, #0]
 8109e9e:	689b      	ldr	r3, [r3, #8]
 8109ea0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	681b      	ldr	r3, [r3, #0]
 8109ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8109eac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	681b      	ldr	r3, [r3, #0]
 8109eb2:	689b      	ldr	r3, [r3, #8]
 8109eb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8109eb8:	687b      	ldr	r3, [r7, #4]
 8109eba:	681b      	ldr	r3, [r3, #0]
 8109ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8109ec0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8109ec2:	687b      	ldr	r3, [r7, #4]
 8109ec4:	681b      	ldr	r3, [r3, #0]
 8109ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	f022 0201 	bic.w	r2, r2, #1
 8109ed0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8109ed2:	687b      	ldr	r3, [r7, #4]
 8109ed4:	685b      	ldr	r3, [r3, #4]
 8109ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8109eda:	2b00      	cmp	r3, #0
 8109edc:	d00a      	beq.n	8109ef4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	681b      	ldr	r3, [r3, #0]
 8109ee2:	68db      	ldr	r3, [r3, #12]
 8109ee4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8109ee8:	687b      	ldr	r3, [r7, #4]
 8109eea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8109eec:	687b      	ldr	r3, [r7, #4]
 8109eee:	681b      	ldr	r3, [r3, #0]
 8109ef0:	430a      	orrs	r2, r1
 8109ef2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	2200      	movs	r2, #0
 8109ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8109efc:	687b      	ldr	r3, [r7, #4]
 8109efe:	2201      	movs	r2, #1
 8109f00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8109f04:	2300      	movs	r3, #0
}
 8109f06:	4618      	mov	r0, r3
 8109f08:	3710      	adds	r7, #16
 8109f0a:	46bd      	mov	sp, r7
 8109f0c:	bd80      	pop	{r7, pc}
 8109f0e:	bf00      	nop
 8109f10:	40013000 	.word	0x40013000
 8109f14:	40003800 	.word	0x40003800
 8109f18:	40003c00 	.word	0x40003c00

08109f1c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8109f1c:	b580      	push	{r7, lr}
 8109f1e:	b086      	sub	sp, #24
 8109f20:	af00      	add	r7, sp, #0
 8109f22:	60f8      	str	r0, [r7, #12]
 8109f24:	60b9      	str	r1, [r7, #8]
 8109f26:	607a      	str	r2, [r7, #4]
 8109f28:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8109f2a:	2300      	movs	r3, #0
 8109f2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8109f2e:	68fb      	ldr	r3, [r7, #12]
 8109f30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109f34:	2b01      	cmp	r3, #1
 8109f36:	d101      	bne.n	8109f3c <HAL_SPI_TransmitReceive_DMA+0x20>
 8109f38:	2302      	movs	r3, #2
 8109f3a:	e1ac      	b.n	810a296 <HAL_SPI_TransmitReceive_DMA+0x37a>
 8109f3c:	68fb      	ldr	r3, [r7, #12]
 8109f3e:	2201      	movs	r2, #1
 8109f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8109f44:	68fb      	ldr	r3, [r7, #12]
 8109f46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109f4a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8109f4c:	68fb      	ldr	r3, [r7, #12]
 8109f4e:	685b      	ldr	r3, [r3, #4]
 8109f50:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8109f52:	693b      	ldr	r3, [r7, #16]
 8109f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109f58:	d106      	bne.n	8109f68 <HAL_SPI_TransmitReceive_DMA+0x4c>
 8109f5a:	68fb      	ldr	r3, [r7, #12]
 8109f5c:	689b      	ldr	r3, [r3, #8]
 8109f5e:	2b00      	cmp	r3, #0
 8109f60:	d102      	bne.n	8109f68 <HAL_SPI_TransmitReceive_DMA+0x4c>
 8109f62:	7dbb      	ldrb	r3, [r7, #22]
 8109f64:	2b04      	cmp	r3, #4
 8109f66:	d00a      	beq.n	8109f7e <HAL_SPI_TransmitReceive_DMA+0x62>
 8109f68:	7dbb      	ldrb	r3, [r7, #22]
 8109f6a:	2b01      	cmp	r3, #1
 8109f6c:	d007      	beq.n	8109f7e <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8109f6e:	2302      	movs	r3, #2
 8109f70:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8109f72:	68fb      	ldr	r3, [r7, #12]
 8109f74:	2200      	movs	r2, #0
 8109f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8109f7a:	7dfb      	ldrb	r3, [r7, #23]
 8109f7c:	e18b      	b.n	810a296 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8109f7e:	68bb      	ldr	r3, [r7, #8]
 8109f80:	2b00      	cmp	r3, #0
 8109f82:	d005      	beq.n	8109f90 <HAL_SPI_TransmitReceive_DMA+0x74>
 8109f84:	687b      	ldr	r3, [r7, #4]
 8109f86:	2b00      	cmp	r3, #0
 8109f88:	d002      	beq.n	8109f90 <HAL_SPI_TransmitReceive_DMA+0x74>
 8109f8a:	887b      	ldrh	r3, [r7, #2]
 8109f8c:	2b00      	cmp	r3, #0
 8109f8e:	d107      	bne.n	8109fa0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8109f90:	2301      	movs	r3, #1
 8109f92:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8109f94:	68fb      	ldr	r3, [r7, #12]
 8109f96:	2200      	movs	r2, #0
 8109f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8109f9c:	7dfb      	ldrb	r3, [r7, #23]
 8109f9e:	e17a      	b.n	810a296 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8109fa0:	68fb      	ldr	r3, [r7, #12]
 8109fa2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109fa6:	b2db      	uxtb	r3, r3
 8109fa8:	2b04      	cmp	r3, #4
 8109faa:	d003      	beq.n	8109fb4 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8109fac:	68fb      	ldr	r3, [r7, #12]
 8109fae:	2205      	movs	r2, #5
 8109fb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8109fb4:	68fb      	ldr	r3, [r7, #12]
 8109fb6:	2200      	movs	r2, #0
 8109fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8109fbc:	68fb      	ldr	r3, [r7, #12]
 8109fbe:	68ba      	ldr	r2, [r7, #8]
 8109fc0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8109fc2:	68fb      	ldr	r3, [r7, #12]
 8109fc4:	887a      	ldrh	r2, [r7, #2]
 8109fc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8109fca:	68fb      	ldr	r3, [r7, #12]
 8109fcc:	887a      	ldrh	r2, [r7, #2]
 8109fce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8109fd2:	68fb      	ldr	r3, [r7, #12]
 8109fd4:	687a      	ldr	r2, [r7, #4]
 8109fd6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8109fd8:	68fb      	ldr	r3, [r7, #12]
 8109fda:	887a      	ldrh	r2, [r7, #2]
 8109fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8109fe0:	68fb      	ldr	r3, [r7, #12]
 8109fe2:	887a      	ldrh	r2, [r7, #2]
 8109fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8109fe8:	68fb      	ldr	r3, [r7, #12]
 8109fea:	2200      	movs	r2, #0
 8109fec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8109fee:	68fb      	ldr	r3, [r7, #12]
 8109ff0:	2200      	movs	r2, #0
 8109ff2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8109ff4:	68fb      	ldr	r3, [r7, #12]
 8109ff6:	681b      	ldr	r3, [r3, #0]
 8109ff8:	689a      	ldr	r2, [r3, #8]
 8109ffa:	68fb      	ldr	r3, [r7, #12]
 8109ffc:	681b      	ldr	r3, [r3, #0]
 8109ffe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a002:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a004:	68fb      	ldr	r3, [r7, #12]
 810a006:	68db      	ldr	r3, [r3, #12]
 810a008:	2b0f      	cmp	r3, #15
 810a00a:	d905      	bls.n	810a018 <HAL_SPI_TransmitReceive_DMA+0xfc>
 810a00c:	68fb      	ldr	r3, [r7, #12]
 810a00e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a010:	699b      	ldr	r3, [r3, #24]
 810a012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a016:	d10f      	bne.n	810a038 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a018:	68fb      	ldr	r3, [r7, #12]
 810a01a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a01c:	2b07      	cmp	r3, #7
 810a01e:	d913      	bls.n	810a048 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a020:	68fb      	ldr	r3, [r7, #12]
 810a022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a024:	699b      	ldr	r3, [r3, #24]
 810a026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a02a:	d00d      	beq.n	810a048 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 810a02c:	68fb      	ldr	r3, [r7, #12]
 810a02e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a030:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a036:	d007      	beq.n	810a048 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 810a038:	2301      	movs	r3, #1
 810a03a:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 810a03c:	68fb      	ldr	r3, [r7, #12]
 810a03e:	2200      	movs	r2, #0
 810a040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a044:	7dfb      	ldrb	r3, [r7, #23]
 810a046:	e126      	b.n	810a296 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 810a048:	68fb      	ldr	r3, [r7, #12]
 810a04a:	68db      	ldr	r3, [r3, #12]
 810a04c:	2b07      	cmp	r3, #7
 810a04e:	d840      	bhi.n	810a0d2 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a050:	68fb      	ldr	r3, [r7, #12]
 810a052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a054:	699b      	ldr	r3, [r3, #24]
 810a056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a05a:	d109      	bne.n	810a070 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a05c:	68fb      	ldr	r3, [r7, #12]
 810a05e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a062:	b29b      	uxth	r3, r3
 810a064:	3301      	adds	r3, #1
 810a066:	105b      	asrs	r3, r3, #1
 810a068:	b29a      	uxth	r2, r3
 810a06a:	68fb      	ldr	r3, [r7, #12]
 810a06c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a070:	68fb      	ldr	r3, [r7, #12]
 810a072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a074:	699b      	ldr	r3, [r3, #24]
 810a076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a07a:	d109      	bne.n	810a090 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 810a07c:	68fb      	ldr	r3, [r7, #12]
 810a07e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a082:	b29b      	uxth	r3, r3
 810a084:	3303      	adds	r3, #3
 810a086:	109b      	asrs	r3, r3, #2
 810a088:	b29a      	uxth	r2, r3
 810a08a:	68fb      	ldr	r3, [r7, #12]
 810a08c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a090:	68fb      	ldr	r3, [r7, #12]
 810a092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a094:	699b      	ldr	r3, [r3, #24]
 810a096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a09a:	d109      	bne.n	810a0b0 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a09c:	68fb      	ldr	r3, [r7, #12]
 810a09e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a0a2:	b29b      	uxth	r3, r3
 810a0a4:	3301      	adds	r3, #1
 810a0a6:	105b      	asrs	r3, r3, #1
 810a0a8:	b29a      	uxth	r2, r3
 810a0aa:	68fb      	ldr	r3, [r7, #12]
 810a0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a0b0:	68fb      	ldr	r3, [r7, #12]
 810a0b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a0b4:	699b      	ldr	r3, [r3, #24]
 810a0b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a0ba:	d12e      	bne.n	810a11a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 810a0bc:	68fb      	ldr	r3, [r7, #12]
 810a0be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a0c2:	b29b      	uxth	r3, r3
 810a0c4:	3303      	adds	r3, #3
 810a0c6:	109b      	asrs	r3, r3, #2
 810a0c8:	b29a      	uxth	r2, r3
 810a0ca:	68fb      	ldr	r3, [r7, #12]
 810a0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810a0d0:	e023      	b.n	810a11a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 810a0d2:	68fb      	ldr	r3, [r7, #12]
 810a0d4:	68db      	ldr	r3, [r3, #12]
 810a0d6:	2b0f      	cmp	r3, #15
 810a0d8:	d81f      	bhi.n	810a11a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a0da:	68fb      	ldr	r3, [r7, #12]
 810a0dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a0de:	699b      	ldr	r3, [r3, #24]
 810a0e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a0e4:	d109      	bne.n	810a0fa <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a0e6:	68fb      	ldr	r3, [r7, #12]
 810a0e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a0ec:	b29b      	uxth	r3, r3
 810a0ee:	3301      	adds	r3, #1
 810a0f0:	105b      	asrs	r3, r3, #1
 810a0f2:	b29a      	uxth	r2, r3
 810a0f4:	68fb      	ldr	r3, [r7, #12]
 810a0f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a0fa:	68fb      	ldr	r3, [r7, #12]
 810a0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a0fe:	699b      	ldr	r3, [r3, #24]
 810a100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a104:	d109      	bne.n	810a11a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a106:	68fb      	ldr	r3, [r7, #12]
 810a108:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a10c:	b29b      	uxth	r3, r3
 810a10e:	3301      	adds	r3, #1
 810a110:	105b      	asrs	r3, r3, #1
 810a112:	b29a      	uxth	r2, r3
 810a114:	68fb      	ldr	r3, [r7, #12]
 810a116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 810a11a:	68fb      	ldr	r3, [r7, #12]
 810a11c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a120:	b2db      	uxtb	r3, r3
 810a122:	2b04      	cmp	r3, #4
 810a124:	d108      	bne.n	810a138 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 810a126:	68fb      	ldr	r3, [r7, #12]
 810a128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a12a:	4a5d      	ldr	r2, [pc, #372]	; (810a2a0 <HAL_SPI_TransmitReceive_DMA+0x384>)
 810a12c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 810a12e:	68fb      	ldr	r3, [r7, #12]
 810a130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a132:	4a5c      	ldr	r2, [pc, #368]	; (810a2a4 <HAL_SPI_TransmitReceive_DMA+0x388>)
 810a134:	63da      	str	r2, [r3, #60]	; 0x3c
 810a136:	e007      	b.n	810a148 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 810a138:	68fb      	ldr	r3, [r7, #12]
 810a13a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a13c:	4a5a      	ldr	r2, [pc, #360]	; (810a2a8 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 810a13e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 810a140:	68fb      	ldr	r3, [r7, #12]
 810a142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a144:	4a59      	ldr	r2, [pc, #356]	; (810a2ac <HAL_SPI_TransmitReceive_DMA+0x390>)
 810a146:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 810a148:	68fb      	ldr	r3, [r7, #12]
 810a14a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a14c:	4a58      	ldr	r2, [pc, #352]	; (810a2b0 <HAL_SPI_TransmitReceive_DMA+0x394>)
 810a14e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 810a150:	68fb      	ldr	r3, [r7, #12]
 810a152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a154:	2200      	movs	r2, #0
 810a156:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 810a158:	68fb      	ldr	r3, [r7, #12]
 810a15a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810a15c:	68fb      	ldr	r3, [r7, #12]
 810a15e:	681b      	ldr	r3, [r3, #0]
 810a160:	3330      	adds	r3, #48	; 0x30
 810a162:	4619      	mov	r1, r3
 810a164:	68fb      	ldr	r3, [r7, #12]
 810a166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a168:	461a      	mov	r2, r3
 810a16a:	68fb      	ldr	r3, [r7, #12]
 810a16c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a170:	b29b      	uxth	r3, r3
 810a172:	f7f9 ff67 	bl	8104044 <HAL_DMA_Start_IT>
 810a176:	4603      	mov	r3, r0
 810a178:	2b00      	cmp	r3, #0
 810a17a:	d00f      	beq.n	810a19c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a17c:	68fb      	ldr	r3, [r7, #12]
 810a17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a182:	f043 0210 	orr.w	r2, r3, #16
 810a186:	68fb      	ldr	r3, [r7, #12]
 810a188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a18c:	2301      	movs	r3, #1
 810a18e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a190:	68fb      	ldr	r3, [r7, #12]
 810a192:	2201      	movs	r2, #1
 810a194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a198:	7dfb      	ldrb	r3, [r7, #23]
 810a19a:	e07c      	b.n	810a296 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 810a19c:	68fb      	ldr	r3, [r7, #12]
 810a19e:	681b      	ldr	r3, [r3, #0]
 810a1a0:	689a      	ldr	r2, [r3, #8]
 810a1a2:	68fb      	ldr	r3, [r7, #12]
 810a1a4:	681b      	ldr	r3, [r3, #0]
 810a1a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810a1aa:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 810a1ac:	68fb      	ldr	r3, [r7, #12]
 810a1ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a1b0:	2200      	movs	r2, #0
 810a1b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 810a1b4:	68fb      	ldr	r3, [r7, #12]
 810a1b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a1b8:	2200      	movs	r2, #0
 810a1ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 810a1bc:	68fb      	ldr	r3, [r7, #12]
 810a1be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a1c0:	2200      	movs	r2, #0
 810a1c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 810a1c4:	68fb      	ldr	r3, [r7, #12]
 810a1c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a1c8:	2200      	movs	r2, #0
 810a1ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 810a1cc:	68fb      	ldr	r3, [r7, #12]
 810a1ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810a1d0:	68fb      	ldr	r3, [r7, #12]
 810a1d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a1d4:	4619      	mov	r1, r3
 810a1d6:	68fb      	ldr	r3, [r7, #12]
 810a1d8:	681b      	ldr	r3, [r3, #0]
 810a1da:	3320      	adds	r3, #32
 810a1dc:	461a      	mov	r2, r3
 810a1de:	68fb      	ldr	r3, [r7, #12]
 810a1e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a1e4:	b29b      	uxth	r3, r3
 810a1e6:	f7f9 ff2d 	bl	8104044 <HAL_DMA_Start_IT>
 810a1ea:	4603      	mov	r3, r0
 810a1ec:	2b00      	cmp	r3, #0
 810a1ee:	d00f      	beq.n	810a210 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a1f0:	68fb      	ldr	r3, [r7, #12]
 810a1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a1f6:	f043 0210 	orr.w	r2, r3, #16
 810a1fa:	68fb      	ldr	r3, [r7, #12]
 810a1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a200:	2301      	movs	r3, #1
 810a202:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a204:	68fb      	ldr	r3, [r7, #12]
 810a206:	2201      	movs	r2, #1
 810a208:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a20c:	7dfb      	ldrb	r3, [r7, #23]
 810a20e:	e042      	b.n	810a296 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a210:	68fb      	ldr	r3, [r7, #12]
 810a212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a214:	69db      	ldr	r3, [r3, #28]
 810a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a21a:	d108      	bne.n	810a22e <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 810a21c:	68fb      	ldr	r3, [r7, #12]
 810a21e:	681b      	ldr	r3, [r3, #0]
 810a220:	685b      	ldr	r3, [r3, #4]
 810a222:	68fa      	ldr	r2, [r7, #12]
 810a224:	6812      	ldr	r2, [r2, #0]
 810a226:	0c1b      	lsrs	r3, r3, #16
 810a228:	041b      	lsls	r3, r3, #16
 810a22a:	6053      	str	r3, [r2, #4]
 810a22c:	e009      	b.n	810a242 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810a22e:	68fb      	ldr	r3, [r7, #12]
 810a230:	681b      	ldr	r3, [r3, #0]
 810a232:	685b      	ldr	r3, [r3, #4]
 810a234:	0c1b      	lsrs	r3, r3, #16
 810a236:	041b      	lsls	r3, r3, #16
 810a238:	8879      	ldrh	r1, [r7, #2]
 810a23a:	68fa      	ldr	r2, [r7, #12]
 810a23c:	6812      	ldr	r2, [r2, #0]
 810a23e:	430b      	orrs	r3, r1
 810a240:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 810a242:	68fb      	ldr	r3, [r7, #12]
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	689a      	ldr	r2, [r3, #8]
 810a248:	68fb      	ldr	r3, [r7, #12]
 810a24a:	681b      	ldr	r3, [r3, #0]
 810a24c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810a250:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 810a252:	68fb      	ldr	r3, [r7, #12]
 810a254:	681b      	ldr	r3, [r3, #0]
 810a256:	691a      	ldr	r2, [r3, #16]
 810a258:	68fb      	ldr	r3, [r7, #12]
 810a25a:	681b      	ldr	r3, [r3, #0]
 810a25c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 810a260:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810a262:	68fb      	ldr	r3, [r7, #12]
 810a264:	681b      	ldr	r3, [r3, #0]
 810a266:	681a      	ldr	r2, [r3, #0]
 810a268:	68fb      	ldr	r3, [r7, #12]
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	f042 0201 	orr.w	r2, r2, #1
 810a270:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810a272:	68fb      	ldr	r3, [r7, #12]
 810a274:	685b      	ldr	r3, [r3, #4]
 810a276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a27a:	d107      	bne.n	810a28c <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810a27c:	68fb      	ldr	r3, [r7, #12]
 810a27e:	681b      	ldr	r3, [r3, #0]
 810a280:	681a      	ldr	r2, [r3, #0]
 810a282:	68fb      	ldr	r3, [r7, #12]
 810a284:	681b      	ldr	r3, [r3, #0]
 810a286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a28a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810a28c:	68fb      	ldr	r3, [r7, #12]
 810a28e:	2200      	movs	r2, #0
 810a290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 810a294:	7dfb      	ldrb	r3, [r7, #23]
}
 810a296:	4618      	mov	r0, r3
 810a298:	3718      	adds	r7, #24
 810a29a:	46bd      	mov	sp, r7
 810a29c:	bd80      	pop	{r7, pc}
 810a29e:	bf00      	nop
 810a2a0:	0810a765 	.word	0x0810a765
 810a2a4:	0810a6d9 	.word	0x0810a6d9
 810a2a8:	0810a781 	.word	0x0810a781
 810a2ac:	0810a71f 	.word	0x0810a71f
 810a2b0:	0810a79d 	.word	0x0810a79d

0810a2b4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810a2b4:	b580      	push	{r7, lr}
 810a2b6:	b08a      	sub	sp, #40	; 0x28
 810a2b8:	af00      	add	r7, sp, #0
 810a2ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810a2bc:	687b      	ldr	r3, [r7, #4]
 810a2be:	681b      	ldr	r3, [r3, #0]
 810a2c0:	691b      	ldr	r3, [r3, #16]
 810a2c2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810a2c4:	687b      	ldr	r3, [r7, #4]
 810a2c6:	681b      	ldr	r3, [r3, #0]
 810a2c8:	695b      	ldr	r3, [r3, #20]
 810a2ca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810a2cc:	6a3a      	ldr	r2, [r7, #32]
 810a2ce:	69fb      	ldr	r3, [r7, #28]
 810a2d0:	4013      	ands	r3, r2
 810a2d2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810a2d4:	687b      	ldr	r3, [r7, #4]
 810a2d6:	681b      	ldr	r3, [r3, #0]
 810a2d8:	689b      	ldr	r3, [r3, #8]
 810a2da:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810a2dc:	2300      	movs	r3, #0
 810a2de:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810a2e0:	687b      	ldr	r3, [r7, #4]
 810a2e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a2e6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810a2e8:	687b      	ldr	r3, [r7, #4]
 810a2ea:	681b      	ldr	r3, [r3, #0]
 810a2ec:	3330      	adds	r3, #48	; 0x30
 810a2ee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810a2f0:	69bb      	ldr	r3, [r7, #24]
 810a2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a2f6:	2b00      	cmp	r3, #0
 810a2f8:	d113      	bne.n	810a322 <HAL_SPI_IRQHandler+0x6e>
 810a2fa:	69bb      	ldr	r3, [r7, #24]
 810a2fc:	f003 0320 	and.w	r3, r3, #32
 810a300:	2b00      	cmp	r3, #0
 810a302:	d10e      	bne.n	810a322 <HAL_SPI_IRQHandler+0x6e>
 810a304:	69bb      	ldr	r3, [r7, #24]
 810a306:	f003 0304 	and.w	r3, r3, #4
 810a30a:	2b00      	cmp	r3, #0
 810a30c:	d009      	beq.n	810a322 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810a30e:	687b      	ldr	r3, [r7, #4]
 810a310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a312:	6878      	ldr	r0, [r7, #4]
 810a314:	4798      	blx	r3
    hspi->RxISR(hspi);
 810a316:	687b      	ldr	r3, [r7, #4]
 810a318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a31a:	6878      	ldr	r0, [r7, #4]
 810a31c:	4798      	blx	r3
    handled = 1UL;
 810a31e:	2301      	movs	r3, #1
 810a320:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a322:	69bb      	ldr	r3, [r7, #24]
 810a324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a328:	2b00      	cmp	r3, #0
 810a32a:	d10f      	bne.n	810a34c <HAL_SPI_IRQHandler+0x98>
 810a32c:	69bb      	ldr	r3, [r7, #24]
 810a32e:	f003 0301 	and.w	r3, r3, #1
 810a332:	2b00      	cmp	r3, #0
 810a334:	d00a      	beq.n	810a34c <HAL_SPI_IRQHandler+0x98>
 810a336:	69bb      	ldr	r3, [r7, #24]
 810a338:	f003 0304 	and.w	r3, r3, #4
 810a33c:	2b00      	cmp	r3, #0
 810a33e:	d105      	bne.n	810a34c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810a340:	687b      	ldr	r3, [r7, #4]
 810a342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a344:	6878      	ldr	r0, [r7, #4]
 810a346:	4798      	blx	r3
    handled = 1UL;
 810a348:	2301      	movs	r3, #1
 810a34a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a34c:	69bb      	ldr	r3, [r7, #24]
 810a34e:	f003 0320 	and.w	r3, r3, #32
 810a352:	2b00      	cmp	r3, #0
 810a354:	d10f      	bne.n	810a376 <HAL_SPI_IRQHandler+0xc2>
 810a356:	69bb      	ldr	r3, [r7, #24]
 810a358:	f003 0302 	and.w	r3, r3, #2
 810a35c:	2b00      	cmp	r3, #0
 810a35e:	d00a      	beq.n	810a376 <HAL_SPI_IRQHandler+0xc2>
 810a360:	69bb      	ldr	r3, [r7, #24]
 810a362:	f003 0304 	and.w	r3, r3, #4
 810a366:	2b00      	cmp	r3, #0
 810a368:	d105      	bne.n	810a376 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810a36a:	687b      	ldr	r3, [r7, #4]
 810a36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a36e:	6878      	ldr	r0, [r7, #4]
 810a370:	4798      	blx	r3
    handled = 1UL;
 810a372:	2301      	movs	r3, #1
 810a374:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a378:	2b00      	cmp	r3, #0
 810a37a:	f040 8171 	bne.w	810a660 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810a37e:	69bb      	ldr	r3, [r7, #24]
 810a380:	f003 0308 	and.w	r3, r3, #8
 810a384:	2b00      	cmp	r3, #0
 810a386:	f000 80a0 	beq.w	810a4ca <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a38a:	687b      	ldr	r3, [r7, #4]
 810a38c:	681b      	ldr	r3, [r3, #0]
 810a38e:	699a      	ldr	r2, [r3, #24]
 810a390:	687b      	ldr	r3, [r7, #4]
 810a392:	681b      	ldr	r3, [r3, #0]
 810a394:	f042 0208 	orr.w	r2, r2, #8
 810a398:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a39a:	687b      	ldr	r3, [r7, #4]
 810a39c:	681b      	ldr	r3, [r3, #0]
 810a39e:	699a      	ldr	r2, [r3, #24]
 810a3a0:	687b      	ldr	r3, [r7, #4]
 810a3a2:	681b      	ldr	r3, [r3, #0]
 810a3a4:	f042 0210 	orr.w	r2, r2, #16
 810a3a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a3aa:	687b      	ldr	r3, [r7, #4]
 810a3ac:	681b      	ldr	r3, [r3, #0]
 810a3ae:	699a      	ldr	r2, [r3, #24]
 810a3b0:	687b      	ldr	r3, [r7, #4]
 810a3b2:	681b      	ldr	r3, [r3, #0]
 810a3b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a3b8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810a3ba:	687b      	ldr	r3, [r7, #4]
 810a3bc:	681b      	ldr	r3, [r3, #0]
 810a3be:	691a      	ldr	r2, [r3, #16]
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	681b      	ldr	r3, [r3, #0]
 810a3c4:	f022 0208 	bic.w	r2, r2, #8
 810a3c8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810a3ca:	697b      	ldr	r3, [r7, #20]
 810a3cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a3d0:	2b00      	cmp	r3, #0
 810a3d2:	d00f      	beq.n	810a3f4 <HAL_SPI_IRQHandler+0x140>
 810a3d4:	7cfb      	ldrb	r3, [r7, #19]
 810a3d6:	2b04      	cmp	r3, #4
 810a3d8:	d004      	beq.n	810a3e4 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810a3da:	687b      	ldr	r3, [r7, #4]
 810a3dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a3de:	69db      	ldr	r3, [r3, #28]
 810a3e0:	2b00      	cmp	r3, #0
 810a3e2:	d007      	beq.n	810a3f4 <HAL_SPI_IRQHandler+0x140>
 810a3e4:	7cfb      	ldrb	r3, [r7, #19]
 810a3e6:	2b03      	cmp	r3, #3
 810a3e8:	d059      	beq.n	810a49e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810a3ea:	687b      	ldr	r3, [r7, #4]
 810a3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a3ee:	69db      	ldr	r3, [r3, #28]
 810a3f0:	2b00      	cmp	r3, #0
 810a3f2:	d154      	bne.n	810a49e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a3f4:	687b      	ldr	r3, [r7, #4]
 810a3f6:	681b      	ldr	r3, [r3, #0]
 810a3f8:	689b      	ldr	r3, [r3, #8]
 810a3fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a3fe:	2b00      	cmp	r3, #0
 810a400:	d13d      	bne.n	810a47e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810a402:	e036      	b.n	810a472 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810a404:	687b      	ldr	r3, [r7, #4]
 810a406:	68db      	ldr	r3, [r3, #12]
 810a408:	2b0f      	cmp	r3, #15
 810a40a:	d90b      	bls.n	810a424 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810a40c:	687b      	ldr	r3, [r7, #4]
 810a40e:	681a      	ldr	r2, [r3, #0]
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810a416:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810a418:	687b      	ldr	r3, [r7, #4]
 810a41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a41c:	1d1a      	adds	r2, r3, #4
 810a41e:	687b      	ldr	r3, [r7, #4]
 810a420:	665a      	str	r2, [r3, #100]	; 0x64
 810a422:	e01d      	b.n	810a460 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810a424:	687b      	ldr	r3, [r7, #4]
 810a426:	68db      	ldr	r3, [r3, #12]
 810a428:	2b07      	cmp	r3, #7
 810a42a:	d90b      	bls.n	810a444 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a430:	68fa      	ldr	r2, [r7, #12]
 810a432:	8812      	ldrh	r2, [r2, #0]
 810a434:	b292      	uxth	r2, r2
 810a436:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a43c:	1c9a      	adds	r2, r3, #2
 810a43e:	687b      	ldr	r3, [r7, #4]
 810a440:	665a      	str	r2, [r3, #100]	; 0x64
 810a442:	e00d      	b.n	810a460 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	681b      	ldr	r3, [r3, #0]
 810a448:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810a44c:	687b      	ldr	r3, [r7, #4]
 810a44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a450:	7812      	ldrb	r2, [r2, #0]
 810a452:	b2d2      	uxtb	r2, r2
 810a454:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810a456:	687b      	ldr	r3, [r7, #4]
 810a458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a45a:	1c5a      	adds	r2, r3, #1
 810a45c:	687b      	ldr	r3, [r7, #4]
 810a45e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810a460:	687b      	ldr	r3, [r7, #4]
 810a462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a466:	b29b      	uxth	r3, r3
 810a468:	3b01      	subs	r3, #1
 810a46a:	b29a      	uxth	r2, r3
 810a46c:	687b      	ldr	r3, [r7, #4]
 810a46e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a478:	b29b      	uxth	r3, r3
 810a47a:	2b00      	cmp	r3, #0
 810a47c:	d1c2      	bne.n	810a404 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810a47e:	6878      	ldr	r0, [r7, #4]
 810a480:	f000 f9c9 	bl	810a816 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810a484:	687b      	ldr	r3, [r7, #4]
 810a486:	2201      	movs	r2, #1
 810a488:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a48c:	687b      	ldr	r3, [r7, #4]
 810a48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a492:	2b00      	cmp	r3, #0
 810a494:	d003      	beq.n	810a49e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810a496:	6878      	ldr	r0, [r7, #4]
 810a498:	f000 f914 	bl	810a6c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810a49c:	e0e5      	b.n	810a66a <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810a49e:	7cfb      	ldrb	r3, [r7, #19]
 810a4a0:	2b05      	cmp	r3, #5
 810a4a2:	d103      	bne.n	810a4ac <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810a4a4:	6878      	ldr	r0, [r7, #4]
 810a4a6:	f7f7 faff 	bl	8101aa8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810a4aa:	e0db      	b.n	810a664 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810a4ac:	7cfb      	ldrb	r3, [r7, #19]
 810a4ae:	2b04      	cmp	r3, #4
 810a4b0:	d103      	bne.n	810a4ba <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810a4b2:	6878      	ldr	r0, [r7, #4]
 810a4b4:	f000 f8e8 	bl	810a688 <HAL_SPI_RxCpltCallback>
    return;
 810a4b8:	e0d4      	b.n	810a664 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810a4ba:	7cfb      	ldrb	r3, [r7, #19]
 810a4bc:	2b03      	cmp	r3, #3
 810a4be:	f040 80d1 	bne.w	810a664 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810a4c2:	6878      	ldr	r0, [r7, #4]
 810a4c4:	f000 f8d6 	bl	810a674 <HAL_SPI_TxCpltCallback>
    return;
 810a4c8:	e0cc      	b.n	810a664 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810a4ca:	69fb      	ldr	r3, [r7, #28]
 810a4cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a4d0:	2b00      	cmp	r3, #0
 810a4d2:	d00d      	beq.n	810a4f0 <HAL_SPI_IRQHandler+0x23c>
 810a4d4:	6a3b      	ldr	r3, [r7, #32]
 810a4d6:	f003 0308 	and.w	r3, r3, #8
 810a4da:	2b00      	cmp	r3, #0
 810a4dc:	d008      	beq.n	810a4f0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a4de:	687b      	ldr	r3, [r7, #4]
 810a4e0:	681b      	ldr	r3, [r3, #0]
 810a4e2:	699a      	ldr	r2, [r3, #24]
 810a4e4:	687b      	ldr	r3, [r7, #4]
 810a4e6:	681b      	ldr	r3, [r3, #0]
 810a4e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a4ec:	619a      	str	r2, [r3, #24]

    return;
 810a4ee:	e0bc      	b.n	810a66a <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810a4f0:	69bb      	ldr	r3, [r7, #24]
 810a4f2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810a4f6:	2b00      	cmp	r3, #0
 810a4f8:	f000 80b7 	beq.w	810a66a <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810a4fc:	69bb      	ldr	r3, [r7, #24]
 810a4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a502:	2b00      	cmp	r3, #0
 810a504:	d00f      	beq.n	810a526 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a506:	687b      	ldr	r3, [r7, #4]
 810a508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a50c:	f043 0204 	orr.w	r2, r3, #4
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a516:	687b      	ldr	r3, [r7, #4]
 810a518:	681b      	ldr	r3, [r3, #0]
 810a51a:	699a      	ldr	r2, [r3, #24]
 810a51c:	687b      	ldr	r3, [r7, #4]
 810a51e:	681b      	ldr	r3, [r3, #0]
 810a520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a524:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810a526:	69bb      	ldr	r3, [r7, #24]
 810a528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a52c:	2b00      	cmp	r3, #0
 810a52e:	d00f      	beq.n	810a550 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a530:	687b      	ldr	r3, [r7, #4]
 810a532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a536:	f043 0201 	orr.w	r2, r3, #1
 810a53a:	687b      	ldr	r3, [r7, #4]
 810a53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a540:	687b      	ldr	r3, [r7, #4]
 810a542:	681b      	ldr	r3, [r3, #0]
 810a544:	699a      	ldr	r2, [r3, #24]
 810a546:	687b      	ldr	r3, [r7, #4]
 810a548:	681b      	ldr	r3, [r3, #0]
 810a54a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a54e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810a550:	69bb      	ldr	r3, [r7, #24]
 810a552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a556:	2b00      	cmp	r3, #0
 810a558:	d00f      	beq.n	810a57a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a55a:	687b      	ldr	r3, [r7, #4]
 810a55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a560:	f043 0208 	orr.w	r2, r3, #8
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a56a:	687b      	ldr	r3, [r7, #4]
 810a56c:	681b      	ldr	r3, [r3, #0]
 810a56e:	699a      	ldr	r2, [r3, #24]
 810a570:	687b      	ldr	r3, [r7, #4]
 810a572:	681b      	ldr	r3, [r3, #0]
 810a574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a578:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810a57a:	69bb      	ldr	r3, [r7, #24]
 810a57c:	f003 0320 	and.w	r3, r3, #32
 810a580:	2b00      	cmp	r3, #0
 810a582:	d00f      	beq.n	810a5a4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a58a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a594:	687b      	ldr	r3, [r7, #4]
 810a596:	681b      	ldr	r3, [r3, #0]
 810a598:	699a      	ldr	r2, [r3, #24]
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	681b      	ldr	r3, [r3, #0]
 810a59e:	f042 0220 	orr.w	r2, r2, #32
 810a5a2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a5a4:	687b      	ldr	r3, [r7, #4]
 810a5a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a5aa:	2b00      	cmp	r3, #0
 810a5ac:	d05c      	beq.n	810a668 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	681b      	ldr	r3, [r3, #0]
 810a5b2:	681a      	ldr	r2, [r3, #0]
 810a5b4:	687b      	ldr	r3, [r7, #4]
 810a5b6:	681b      	ldr	r3, [r3, #0]
 810a5b8:	f022 0201 	bic.w	r2, r2, #1
 810a5bc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	681b      	ldr	r3, [r3, #0]
 810a5c2:	691b      	ldr	r3, [r3, #16]
 810a5c4:	687a      	ldr	r2, [r7, #4]
 810a5c6:	6812      	ldr	r2, [r2, #0]
 810a5c8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810a5cc:	f023 0303 	bic.w	r3, r3, #3
 810a5d0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a5d2:	697b      	ldr	r3, [r7, #20]
 810a5d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a5d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810a5dc:	d138      	bne.n	810a650 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	689a      	ldr	r2, [r3, #8]
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	681b      	ldr	r3, [r3, #0]
 810a5e8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a5ec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810a5ee:	687b      	ldr	r3, [r7, #4]
 810a5f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a5f2:	2b00      	cmp	r3, #0
 810a5f4:	d013      	beq.n	810a61e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a5fa:	4a1d      	ldr	r2, [pc, #116]	; (810a670 <HAL_SPI_IRQHandler+0x3bc>)
 810a5fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810a5fe:	687b      	ldr	r3, [r7, #4]
 810a600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a602:	4618      	mov	r0, r3
 810a604:	f7fa faa6 	bl	8104b54 <HAL_DMA_Abort_IT>
 810a608:	4603      	mov	r3, r0
 810a60a:	2b00      	cmp	r3, #0
 810a60c:	d007      	beq.n	810a61e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a60e:	687b      	ldr	r3, [r7, #4]
 810a610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a614:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a618:	687b      	ldr	r3, [r7, #4]
 810a61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a622:	2b00      	cmp	r3, #0
 810a624:	d020      	beq.n	810a668 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a62a:	4a11      	ldr	r2, [pc, #68]	; (810a670 <HAL_SPI_IRQHandler+0x3bc>)
 810a62c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810a62e:	687b      	ldr	r3, [r7, #4]
 810a630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a632:	4618      	mov	r0, r3
 810a634:	f7fa fa8e 	bl	8104b54 <HAL_DMA_Abort_IT>
 810a638:	4603      	mov	r3, r0
 810a63a:	2b00      	cmp	r3, #0
 810a63c:	d014      	beq.n	810a668 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a63e:	687b      	ldr	r3, [r7, #4]
 810a640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a648:	687b      	ldr	r3, [r7, #4]
 810a64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810a64e:	e00b      	b.n	810a668 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	2201      	movs	r2, #1
 810a654:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810a658:	6878      	ldr	r0, [r7, #4]
 810a65a:	f000 f833 	bl	810a6c4 <HAL_SPI_ErrorCallback>
    return;
 810a65e:	e003      	b.n	810a668 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810a660:	bf00      	nop
 810a662:	e002      	b.n	810a66a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a664:	bf00      	nop
 810a666:	e000      	b.n	810a66a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a668:	bf00      	nop
  }
}
 810a66a:	3728      	adds	r7, #40	; 0x28
 810a66c:	46bd      	mov	sp, r7
 810a66e:	bd80      	pop	{r7, pc}
 810a670:	0810a7e3 	.word	0x0810a7e3

0810a674 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a674:	b480      	push	{r7}
 810a676:	b083      	sub	sp, #12
 810a678:	af00      	add	r7, sp, #0
 810a67a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810a67c:	bf00      	nop
 810a67e:	370c      	adds	r7, #12
 810a680:	46bd      	mov	sp, r7
 810a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a686:	4770      	bx	lr

0810a688 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a688:	b480      	push	{r7}
 810a68a:	b083      	sub	sp, #12
 810a68c:	af00      	add	r7, sp, #0
 810a68e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810a690:	bf00      	nop
 810a692:	370c      	adds	r7, #12
 810a694:	46bd      	mov	sp, r7
 810a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a69a:	4770      	bx	lr

0810a69c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a69c:	b480      	push	{r7}
 810a69e:	b083      	sub	sp, #12
 810a6a0:	af00      	add	r7, sp, #0
 810a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810a6a4:	bf00      	nop
 810a6a6:	370c      	adds	r7, #12
 810a6a8:	46bd      	mov	sp, r7
 810a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6ae:	4770      	bx	lr

0810a6b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a6b0:	b480      	push	{r7}
 810a6b2:	b083      	sub	sp, #12
 810a6b4:	af00      	add	r7, sp, #0
 810a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810a6b8:	bf00      	nop
 810a6ba:	370c      	adds	r7, #12
 810a6bc:	46bd      	mov	sp, r7
 810a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6c2:	4770      	bx	lr

0810a6c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810a6c4:	b480      	push	{r7}
 810a6c6:	b083      	sub	sp, #12
 810a6c8:	af00      	add	r7, sp, #0
 810a6ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810a6cc:	bf00      	nop
 810a6ce:	370c      	adds	r7, #12
 810a6d0:	46bd      	mov	sp, r7
 810a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6d6:	4770      	bx	lr

0810a6d8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a6d8:	b580      	push	{r7, lr}
 810a6da:	b084      	sub	sp, #16
 810a6dc:	af00      	add	r7, sp, #0
 810a6de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a6e0:	687b      	ldr	r3, [r7, #4]
 810a6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a6e4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810a6e6:	68fb      	ldr	r3, [r7, #12]
 810a6e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a6ec:	b2db      	uxtb	r3, r3
 810a6ee:	2b07      	cmp	r3, #7
 810a6f0:	d011      	beq.n	810a716 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810a6f2:	68fb      	ldr	r3, [r7, #12]
 810a6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a6f6:	69db      	ldr	r3, [r3, #28]
 810a6f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a6fc:	d103      	bne.n	810a706 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810a6fe:	68f8      	ldr	r0, [r7, #12]
 810a700:	f7ff ffc2 	bl	810a688 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810a704:	e007      	b.n	810a716 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810a706:	68fb      	ldr	r3, [r7, #12]
 810a708:	681b      	ldr	r3, [r3, #0]
 810a70a:	691a      	ldr	r2, [r3, #16]
 810a70c:	68fb      	ldr	r3, [r7, #12]
 810a70e:	681b      	ldr	r3, [r3, #0]
 810a710:	f042 0208 	orr.w	r2, r2, #8
 810a714:	611a      	str	r2, [r3, #16]
}
 810a716:	bf00      	nop
 810a718:	3710      	adds	r7, #16
 810a71a:	46bd      	mov	sp, r7
 810a71c:	bd80      	pop	{r7, pc}

0810a71e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a71e:	b580      	push	{r7, lr}
 810a720:	b084      	sub	sp, #16
 810a722:	af00      	add	r7, sp, #0
 810a724:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a726:	687b      	ldr	r3, [r7, #4]
 810a728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a72a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810a72c:	68fb      	ldr	r3, [r7, #12]
 810a72e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a732:	b2db      	uxtb	r3, r3
 810a734:	2b07      	cmp	r3, #7
 810a736:	d011      	beq.n	810a75c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a738:	68fb      	ldr	r3, [r7, #12]
 810a73a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a73c:	69db      	ldr	r3, [r3, #28]
 810a73e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a742:	d103      	bne.n	810a74c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810a744:	68f8      	ldr	r0, [r7, #12]
 810a746:	f7f7 f9af 	bl	8101aa8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810a74a:	e007      	b.n	810a75c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810a74c:	68fb      	ldr	r3, [r7, #12]
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	691a      	ldr	r2, [r3, #16]
 810a752:	68fb      	ldr	r3, [r7, #12]
 810a754:	681b      	ldr	r3, [r3, #0]
 810a756:	f042 0208 	orr.w	r2, r2, #8
 810a75a:	611a      	str	r2, [r3, #16]
}
 810a75c:	bf00      	nop
 810a75e:	3710      	adds	r7, #16
 810a760:	46bd      	mov	sp, r7
 810a762:	bd80      	pop	{r7, pc}

0810a764 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a764:	b580      	push	{r7, lr}
 810a766:	b084      	sub	sp, #16
 810a768:	af00      	add	r7, sp, #0
 810a76a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a76c:	687b      	ldr	r3, [r7, #4]
 810a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a770:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810a772:	68f8      	ldr	r0, [r7, #12]
 810a774:	f7ff ff92 	bl	810a69c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a778:	bf00      	nop
 810a77a:	3710      	adds	r7, #16
 810a77c:	46bd      	mov	sp, r7
 810a77e:	bd80      	pop	{r7, pc}

0810a780 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a780:	b580      	push	{r7, lr}
 810a782:	b084      	sub	sp, #16
 810a784:	af00      	add	r7, sp, #0
 810a786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a78c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810a78e:	68f8      	ldr	r0, [r7, #12]
 810a790:	f7ff ff8e 	bl	810a6b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a794:	bf00      	nop
 810a796:	3710      	adds	r7, #16
 810a798:	46bd      	mov	sp, r7
 810a79a:	bd80      	pop	{r7, pc}

0810a79c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810a79c:	b580      	push	{r7, lr}
 810a79e:	b084      	sub	sp, #16
 810a7a0:	af00      	add	r7, sp, #0
 810a7a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a7a4:	687b      	ldr	r3, [r7, #4]
 810a7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a7a8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810a7aa:	6878      	ldr	r0, [r7, #4]
 810a7ac:	f7fb fb4e 	bl	8105e4c <HAL_DMA_GetError>
 810a7b0:	4603      	mov	r3, r0
 810a7b2:	2b02      	cmp	r3, #2
 810a7b4:	d011      	beq.n	810a7da <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810a7b6:	68f8      	ldr	r0, [r7, #12]
 810a7b8:	f000 f82d 	bl	810a816 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a7bc:	68fb      	ldr	r3, [r7, #12]
 810a7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a7c2:	f043 0210 	orr.w	r2, r3, #16
 810a7c6:	68fb      	ldr	r3, [r7, #12]
 810a7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810a7cc:	68fb      	ldr	r3, [r7, #12]
 810a7ce:	2201      	movs	r2, #1
 810a7d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810a7d4:	68f8      	ldr	r0, [r7, #12]
 810a7d6:	f7ff ff75 	bl	810a6c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810a7da:	bf00      	nop
 810a7dc:	3710      	adds	r7, #16
 810a7de:	46bd      	mov	sp, r7
 810a7e0:	bd80      	pop	{r7, pc}

0810a7e2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a7e2:	b580      	push	{r7, lr}
 810a7e4:	b084      	sub	sp, #16
 810a7e6:	af00      	add	r7, sp, #0
 810a7e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a7ee:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810a7f0:	68fb      	ldr	r3, [r7, #12]
 810a7f2:	2200      	movs	r2, #0
 810a7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810a7f8:	68fb      	ldr	r3, [r7, #12]
 810a7fa:	2200      	movs	r2, #0
 810a7fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810a800:	68fb      	ldr	r3, [r7, #12]
 810a802:	2201      	movs	r2, #1
 810a804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810a808:	68f8      	ldr	r0, [r7, #12]
 810a80a:	f7ff ff5b 	bl	810a6c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a80e:	bf00      	nop
 810a810:	3710      	adds	r7, #16
 810a812:	46bd      	mov	sp, r7
 810a814:	bd80      	pop	{r7, pc}

0810a816 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810a816:	b480      	push	{r7}
 810a818:	b085      	sub	sp, #20
 810a81a:	af00      	add	r7, sp, #0
 810a81c:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810a81e:	687b      	ldr	r3, [r7, #4]
 810a820:	681b      	ldr	r3, [r3, #0]
 810a822:	695b      	ldr	r3, [r3, #20]
 810a824:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a826:	687b      	ldr	r3, [r7, #4]
 810a828:	681b      	ldr	r3, [r3, #0]
 810a82a:	699a      	ldr	r2, [r3, #24]
 810a82c:	687b      	ldr	r3, [r7, #4]
 810a82e:	681b      	ldr	r3, [r3, #0]
 810a830:	f042 0208 	orr.w	r2, r2, #8
 810a834:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a836:	687b      	ldr	r3, [r7, #4]
 810a838:	681b      	ldr	r3, [r3, #0]
 810a83a:	699a      	ldr	r2, [r3, #24]
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	681b      	ldr	r3, [r3, #0]
 810a840:	f042 0210 	orr.w	r2, r2, #16
 810a844:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a846:	687b      	ldr	r3, [r7, #4]
 810a848:	681b      	ldr	r3, [r3, #0]
 810a84a:	681a      	ldr	r2, [r3, #0]
 810a84c:	687b      	ldr	r3, [r7, #4]
 810a84e:	681b      	ldr	r3, [r3, #0]
 810a850:	f022 0201 	bic.w	r2, r2, #1
 810a854:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	681b      	ldr	r3, [r3, #0]
 810a85a:	691b      	ldr	r3, [r3, #16]
 810a85c:	687a      	ldr	r2, [r7, #4]
 810a85e:	6812      	ldr	r2, [r2, #0]
 810a860:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810a864:	f023 0303 	bic.w	r3, r3, #3
 810a868:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	689a      	ldr	r2, [r3, #8]
 810a870:	687b      	ldr	r3, [r7, #4]
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a878:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a880:	b2db      	uxtb	r3, r3
 810a882:	2b04      	cmp	r3, #4
 810a884:	d014      	beq.n	810a8b0 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810a886:	68fb      	ldr	r3, [r7, #12]
 810a888:	f003 0320 	and.w	r3, r3, #32
 810a88c:	2b00      	cmp	r3, #0
 810a88e:	d00f      	beq.n	810a8b0 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a896:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a89a:	687b      	ldr	r3, [r7, #4]
 810a89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	681b      	ldr	r3, [r3, #0]
 810a8a4:	699a      	ldr	r2, [r3, #24]
 810a8a6:	687b      	ldr	r3, [r7, #4]
 810a8a8:	681b      	ldr	r3, [r3, #0]
 810a8aa:	f042 0220 	orr.w	r2, r2, #32
 810a8ae:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810a8b0:	687b      	ldr	r3, [r7, #4]
 810a8b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a8b6:	b2db      	uxtb	r3, r3
 810a8b8:	2b03      	cmp	r3, #3
 810a8ba:	d014      	beq.n	810a8e6 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810a8bc:	68fb      	ldr	r3, [r7, #12]
 810a8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a8c2:	2b00      	cmp	r3, #0
 810a8c4:	d00f      	beq.n	810a8e6 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a8c6:	687b      	ldr	r3, [r7, #4]
 810a8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a8cc:	f043 0204 	orr.w	r2, r3, #4
 810a8d0:	687b      	ldr	r3, [r7, #4]
 810a8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a8d6:	687b      	ldr	r3, [r7, #4]
 810a8d8:	681b      	ldr	r3, [r3, #0]
 810a8da:	699a      	ldr	r2, [r3, #24]
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	681b      	ldr	r3, [r3, #0]
 810a8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a8e4:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a8ec:	2b00      	cmp	r3, #0
 810a8ee:	d00f      	beq.n	810a910 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a8f0:	687b      	ldr	r3, [r7, #4]
 810a8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a8f6:	f043 0201 	orr.w	r2, r3, #1
 810a8fa:	687b      	ldr	r3, [r7, #4]
 810a8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a900:	687b      	ldr	r3, [r7, #4]
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	699a      	ldr	r2, [r3, #24]
 810a906:	687b      	ldr	r3, [r7, #4]
 810a908:	681b      	ldr	r3, [r3, #0]
 810a90a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a90e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810a910:	68fb      	ldr	r3, [r7, #12]
 810a912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a916:	2b00      	cmp	r3, #0
 810a918:	d00f      	beq.n	810a93a <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a91a:	687b      	ldr	r3, [r7, #4]
 810a91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a920:	f043 0208 	orr.w	r2, r3, #8
 810a924:	687b      	ldr	r3, [r7, #4]
 810a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a92a:	687b      	ldr	r3, [r7, #4]
 810a92c:	681b      	ldr	r3, [r3, #0]
 810a92e:	699a      	ldr	r2, [r3, #24]
 810a930:	687b      	ldr	r3, [r7, #4]
 810a932:	681b      	ldr	r3, [r3, #0]
 810a934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a938:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810a93a:	687b      	ldr	r3, [r7, #4]
 810a93c:	2200      	movs	r2, #0
 810a93e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	2200      	movs	r2, #0
 810a946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810a94a:	bf00      	nop
 810a94c:	3714      	adds	r7, #20
 810a94e:	46bd      	mov	sp, r7
 810a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a954:	4770      	bx	lr

0810a956 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810a956:	b480      	push	{r7}
 810a958:	b085      	sub	sp, #20
 810a95a:	af00      	add	r7, sp, #0
 810a95c:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810a95e:	687b      	ldr	r3, [r7, #4]
 810a960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a962:	095b      	lsrs	r3, r3, #5
 810a964:	3301      	adds	r3, #1
 810a966:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	68db      	ldr	r3, [r3, #12]
 810a96c:	3301      	adds	r3, #1
 810a96e:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810a970:	68bb      	ldr	r3, [r7, #8]
 810a972:	3307      	adds	r3, #7
 810a974:	08db      	lsrs	r3, r3, #3
 810a976:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810a978:	68bb      	ldr	r3, [r7, #8]
 810a97a:	68fa      	ldr	r2, [r7, #12]
 810a97c:	fb02 f303 	mul.w	r3, r2, r3
}
 810a980:	4618      	mov	r0, r3
 810a982:	3714      	adds	r7, #20
 810a984:	46bd      	mov	sp, r7
 810a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a98a:	4770      	bx	lr

0810a98c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a98c:	b580      	push	{r7, lr}
 810a98e:	b082      	sub	sp, #8
 810a990:	af00      	add	r7, sp, #0
 810a992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a994:	687b      	ldr	r3, [r7, #4]
 810a996:	2b00      	cmp	r3, #0
 810a998:	d101      	bne.n	810a99e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a99a:	2301      	movs	r3, #1
 810a99c:	e042      	b.n	810aa24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a99e:	687b      	ldr	r3, [r7, #4]
 810a9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a9a4:	2b00      	cmp	r3, #0
 810a9a6:	d106      	bne.n	810a9b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810a9a8:	687b      	ldr	r3, [r7, #4]
 810a9aa:	2200      	movs	r2, #0
 810a9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810a9b0:	6878      	ldr	r0, [r7, #4]
 810a9b2:	f7f8 fc79 	bl	81032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810a9b6:	687b      	ldr	r3, [r7, #4]
 810a9b8:	2224      	movs	r2, #36	; 0x24
 810a9ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810a9be:	687b      	ldr	r3, [r7, #4]
 810a9c0:	681b      	ldr	r3, [r3, #0]
 810a9c2:	681a      	ldr	r2, [r3, #0]
 810a9c4:	687b      	ldr	r3, [r7, #4]
 810a9c6:	681b      	ldr	r3, [r3, #0]
 810a9c8:	f022 0201 	bic.w	r2, r2, #1
 810a9cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810a9ce:	6878      	ldr	r0, [r7, #4]
 810a9d0:	f000 fbd6 	bl	810b180 <UART_SetConfig>
 810a9d4:	4603      	mov	r3, r0
 810a9d6:	2b01      	cmp	r3, #1
 810a9d8:	d101      	bne.n	810a9de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810a9da:	2301      	movs	r3, #1
 810a9dc:	e022      	b.n	810aa24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810a9de:	687b      	ldr	r3, [r7, #4]
 810a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a9e2:	2b00      	cmp	r3, #0
 810a9e4:	d002      	beq.n	810a9ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810a9e6:	6878      	ldr	r0, [r7, #4]
 810a9e8:	f001 f92a 	bl	810bc40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	681b      	ldr	r3, [r3, #0]
 810a9f0:	685a      	ldr	r2, [r3, #4]
 810a9f2:	687b      	ldr	r3, [r7, #4]
 810a9f4:	681b      	ldr	r3, [r3, #0]
 810a9f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810a9fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	681b      	ldr	r3, [r3, #0]
 810aa00:	689a      	ldr	r2, [r3, #8]
 810aa02:	687b      	ldr	r3, [r7, #4]
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810aa0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810aa0c:	687b      	ldr	r3, [r7, #4]
 810aa0e:	681b      	ldr	r3, [r3, #0]
 810aa10:	681a      	ldr	r2, [r3, #0]
 810aa12:	687b      	ldr	r3, [r7, #4]
 810aa14:	681b      	ldr	r3, [r3, #0]
 810aa16:	f042 0201 	orr.w	r2, r2, #1
 810aa1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810aa1c:	6878      	ldr	r0, [r7, #4]
 810aa1e:	f001 f9b1 	bl	810bd84 <UART_CheckIdleState>
 810aa22:	4603      	mov	r3, r0
}
 810aa24:	4618      	mov	r0, r3
 810aa26:	3708      	adds	r7, #8
 810aa28:	46bd      	mov	sp, r7
 810aa2a:	bd80      	pop	{r7, pc}

0810aa2c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810aa2c:	b580      	push	{r7, lr}
 810aa2e:	b084      	sub	sp, #16
 810aa30:	af00      	add	r7, sp, #0
 810aa32:	60f8      	str	r0, [r7, #12]
 810aa34:	60b9      	str	r1, [r7, #8]
 810aa36:	4613      	mov	r3, r2
 810aa38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810aa3a:	68fb      	ldr	r3, [r7, #12]
 810aa3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aa40:	2b20      	cmp	r3, #32
 810aa42:	d168      	bne.n	810ab16 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810aa44:	68bb      	ldr	r3, [r7, #8]
 810aa46:	2b00      	cmp	r3, #0
 810aa48:	d002      	beq.n	810aa50 <HAL_UART_Transmit_DMA+0x24>
 810aa4a:	88fb      	ldrh	r3, [r7, #6]
 810aa4c:	2b00      	cmp	r3, #0
 810aa4e:	d101      	bne.n	810aa54 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810aa50:	2301      	movs	r3, #1
 810aa52:	e061      	b.n	810ab18 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810aa54:	68fb      	ldr	r3, [r7, #12]
 810aa56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810aa5a:	2b01      	cmp	r3, #1
 810aa5c:	d101      	bne.n	810aa62 <HAL_UART_Transmit_DMA+0x36>
 810aa5e:	2302      	movs	r3, #2
 810aa60:	e05a      	b.n	810ab18 <HAL_UART_Transmit_DMA+0xec>
 810aa62:	68fb      	ldr	r3, [r7, #12]
 810aa64:	2201      	movs	r2, #1
 810aa66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810aa6a:	68fb      	ldr	r3, [r7, #12]
 810aa6c:	68ba      	ldr	r2, [r7, #8]
 810aa6e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810aa70:	68fb      	ldr	r3, [r7, #12]
 810aa72:	88fa      	ldrh	r2, [r7, #6]
 810aa74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810aa78:	68fb      	ldr	r3, [r7, #12]
 810aa7a:	88fa      	ldrh	r2, [r7, #6]
 810aa7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810aa80:	68fb      	ldr	r3, [r7, #12]
 810aa82:	2200      	movs	r2, #0
 810aa84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810aa88:	68fb      	ldr	r3, [r7, #12]
 810aa8a:	2221      	movs	r2, #33	; 0x21
 810aa8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810aa90:	68fb      	ldr	r3, [r7, #12]
 810aa92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d02c      	beq.n	810aaf2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810aa98:	68fb      	ldr	r3, [r7, #12]
 810aa9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aa9c:	4a20      	ldr	r2, [pc, #128]	; (810ab20 <HAL_UART_Transmit_DMA+0xf4>)
 810aa9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810aaa0:	68fb      	ldr	r3, [r7, #12]
 810aaa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aaa4:	4a1f      	ldr	r2, [pc, #124]	; (810ab24 <HAL_UART_Transmit_DMA+0xf8>)
 810aaa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810aaa8:	68fb      	ldr	r3, [r7, #12]
 810aaaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aaac:	4a1e      	ldr	r2, [pc, #120]	; (810ab28 <HAL_UART_Transmit_DMA+0xfc>)
 810aaae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810aab0:	68fb      	ldr	r3, [r7, #12]
 810aab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aab4:	2200      	movs	r2, #0
 810aab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810aab8:	68fb      	ldr	r3, [r7, #12]
 810aaba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810aabc:	68fb      	ldr	r3, [r7, #12]
 810aabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810aac0:	4619      	mov	r1, r3
 810aac2:	68fb      	ldr	r3, [r7, #12]
 810aac4:	681b      	ldr	r3, [r3, #0]
 810aac6:	3328      	adds	r3, #40	; 0x28
 810aac8:	461a      	mov	r2, r3
 810aaca:	88fb      	ldrh	r3, [r7, #6]
 810aacc:	f7f9 faba 	bl	8104044 <HAL_DMA_Start_IT>
 810aad0:	4603      	mov	r3, r0
 810aad2:	2b00      	cmp	r3, #0
 810aad4:	d00d      	beq.n	810aaf2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810aad6:	68fb      	ldr	r3, [r7, #12]
 810aad8:	2210      	movs	r2, #16
 810aada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810aade:	68fb      	ldr	r3, [r7, #12]
 810aae0:	2200      	movs	r2, #0
 810aae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810aae6:	68fb      	ldr	r3, [r7, #12]
 810aae8:	2220      	movs	r2, #32
 810aaea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810aaee:	2301      	movs	r3, #1
 810aaf0:	e012      	b.n	810ab18 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810aaf2:	68fb      	ldr	r3, [r7, #12]
 810aaf4:	681b      	ldr	r3, [r3, #0]
 810aaf6:	2240      	movs	r2, #64	; 0x40
 810aaf8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810aafa:	68fb      	ldr	r3, [r7, #12]
 810aafc:	2200      	movs	r2, #0
 810aafe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	689a      	ldr	r2, [r3, #8]
 810ab08:	68fb      	ldr	r3, [r7, #12]
 810ab0a:	681b      	ldr	r3, [r3, #0]
 810ab0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810ab10:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810ab12:	2300      	movs	r3, #0
 810ab14:	e000      	b.n	810ab18 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810ab16:	2302      	movs	r3, #2
  }
}
 810ab18:	4618      	mov	r0, r3
 810ab1a:	3710      	adds	r7, #16
 810ab1c:	46bd      	mov	sp, r7
 810ab1e:	bd80      	pop	{r7, pc}
 810ab20:	0810c099 	.word	0x0810c099
 810ab24:	0810c0e9 	.word	0x0810c0e9
 810ab28:	0810c1d3 	.word	0x0810c1d3

0810ab2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810ab2c:	b580      	push	{r7, lr}
 810ab2e:	b084      	sub	sp, #16
 810ab30:	af00      	add	r7, sp, #0
 810ab32:	60f8      	str	r0, [r7, #12]
 810ab34:	60b9      	str	r1, [r7, #8]
 810ab36:	4613      	mov	r3, r2
 810ab38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810ab3a:	68fb      	ldr	r3, [r7, #12]
 810ab3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810ab40:	2b20      	cmp	r3, #32
 810ab42:	d131      	bne.n	810aba8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810ab44:	68bb      	ldr	r3, [r7, #8]
 810ab46:	2b00      	cmp	r3, #0
 810ab48:	d002      	beq.n	810ab50 <HAL_UART_Receive_DMA+0x24>
 810ab4a:	88fb      	ldrh	r3, [r7, #6]
 810ab4c:	2b00      	cmp	r3, #0
 810ab4e:	d101      	bne.n	810ab54 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810ab50:	2301      	movs	r3, #1
 810ab52:	e02a      	b.n	810abaa <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810ab54:	68fb      	ldr	r3, [r7, #12]
 810ab56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ab5a:	2b01      	cmp	r3, #1
 810ab5c:	d101      	bne.n	810ab62 <HAL_UART_Receive_DMA+0x36>
 810ab5e:	2302      	movs	r3, #2
 810ab60:	e023      	b.n	810abaa <HAL_UART_Receive_DMA+0x7e>
 810ab62:	68fb      	ldr	r3, [r7, #12]
 810ab64:	2201      	movs	r2, #1
 810ab66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ab6a:	68fb      	ldr	r3, [r7, #12]
 810ab6c:	2200      	movs	r2, #0
 810ab6e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810ab70:	68fb      	ldr	r3, [r7, #12]
 810ab72:	681b      	ldr	r3, [r3, #0]
 810ab74:	4a0f      	ldr	r2, [pc, #60]	; (810abb4 <HAL_UART_Receive_DMA+0x88>)
 810ab76:	4293      	cmp	r3, r2
 810ab78:	d00e      	beq.n	810ab98 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810ab7a:	68fb      	ldr	r3, [r7, #12]
 810ab7c:	681b      	ldr	r3, [r3, #0]
 810ab7e:	685b      	ldr	r3, [r3, #4]
 810ab80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810ab84:	2b00      	cmp	r3, #0
 810ab86:	d007      	beq.n	810ab98 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810ab88:	68fb      	ldr	r3, [r7, #12]
 810ab8a:	681b      	ldr	r3, [r3, #0]
 810ab8c:	681a      	ldr	r2, [r3, #0]
 810ab8e:	68fb      	ldr	r3, [r7, #12]
 810ab90:	681b      	ldr	r3, [r3, #0]
 810ab92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810ab96:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810ab98:	88fb      	ldrh	r3, [r7, #6]
 810ab9a:	461a      	mov	r2, r3
 810ab9c:	68b9      	ldr	r1, [r7, #8]
 810ab9e:	68f8      	ldr	r0, [r7, #12]
 810aba0:	f001 f9bc 	bl	810bf1c <UART_Start_Receive_DMA>
 810aba4:	4603      	mov	r3, r0
 810aba6:	e000      	b.n	810abaa <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810aba8:	2302      	movs	r3, #2
  }
}
 810abaa:	4618      	mov	r0, r3
 810abac:	3710      	adds	r7, #16
 810abae:	46bd      	mov	sp, r7
 810abb0:	bd80      	pop	{r7, pc}
 810abb2:	bf00      	nop
 810abb4:	58000c00 	.word	0x58000c00

0810abb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810abb8:	b580      	push	{r7, lr}
 810abba:	b088      	sub	sp, #32
 810abbc:	af00      	add	r7, sp, #0
 810abbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810abc0:	687b      	ldr	r3, [r7, #4]
 810abc2:	681b      	ldr	r3, [r3, #0]
 810abc4:	69db      	ldr	r3, [r3, #28]
 810abc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810abc8:	687b      	ldr	r3, [r7, #4]
 810abca:	681b      	ldr	r3, [r3, #0]
 810abcc:	681b      	ldr	r3, [r3, #0]
 810abce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810abd0:	687b      	ldr	r3, [r7, #4]
 810abd2:	681b      	ldr	r3, [r3, #0]
 810abd4:	689b      	ldr	r3, [r3, #8]
 810abd6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810abd8:	69fa      	ldr	r2, [r7, #28]
 810abda:	f640 030f 	movw	r3, #2063	; 0x80f
 810abde:	4013      	ands	r3, r2
 810abe0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810abe2:	693b      	ldr	r3, [r7, #16]
 810abe4:	2b00      	cmp	r3, #0
 810abe6:	d118      	bne.n	810ac1a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810abe8:	69fb      	ldr	r3, [r7, #28]
 810abea:	f003 0320 	and.w	r3, r3, #32
 810abee:	2b00      	cmp	r3, #0
 810abf0:	d013      	beq.n	810ac1a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810abf2:	69bb      	ldr	r3, [r7, #24]
 810abf4:	f003 0320 	and.w	r3, r3, #32
 810abf8:	2b00      	cmp	r3, #0
 810abfa:	d104      	bne.n	810ac06 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810abfc:	697b      	ldr	r3, [r7, #20]
 810abfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810ac02:	2b00      	cmp	r3, #0
 810ac04:	d009      	beq.n	810ac1a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810ac06:	687b      	ldr	r3, [r7, #4]
 810ac08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810ac0a:	2b00      	cmp	r3, #0
 810ac0c:	f000 8282 	beq.w	810b114 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810ac14:	6878      	ldr	r0, [r7, #4]
 810ac16:	4798      	blx	r3
      }
      return;
 810ac18:	e27c      	b.n	810b114 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810ac1a:	693b      	ldr	r3, [r7, #16]
 810ac1c:	2b00      	cmp	r3, #0
 810ac1e:	f000 80ef 	beq.w	810ae00 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810ac22:	697a      	ldr	r2, [r7, #20]
 810ac24:	4b73      	ldr	r3, [pc, #460]	; (810adf4 <HAL_UART_IRQHandler+0x23c>)
 810ac26:	4013      	ands	r3, r2
 810ac28:	2b00      	cmp	r3, #0
 810ac2a:	d105      	bne.n	810ac38 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810ac2c:	69ba      	ldr	r2, [r7, #24]
 810ac2e:	4b72      	ldr	r3, [pc, #456]	; (810adf8 <HAL_UART_IRQHandler+0x240>)
 810ac30:	4013      	ands	r3, r2
 810ac32:	2b00      	cmp	r3, #0
 810ac34:	f000 80e4 	beq.w	810ae00 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810ac38:	69fb      	ldr	r3, [r7, #28]
 810ac3a:	f003 0301 	and.w	r3, r3, #1
 810ac3e:	2b00      	cmp	r3, #0
 810ac40:	d010      	beq.n	810ac64 <HAL_UART_IRQHandler+0xac>
 810ac42:	69bb      	ldr	r3, [r7, #24]
 810ac44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ac48:	2b00      	cmp	r3, #0
 810ac4a:	d00b      	beq.n	810ac64 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810ac4c:	687b      	ldr	r3, [r7, #4]
 810ac4e:	681b      	ldr	r3, [r3, #0]
 810ac50:	2201      	movs	r2, #1
 810ac52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810ac54:	687b      	ldr	r3, [r7, #4]
 810ac56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ac5a:	f043 0201 	orr.w	r2, r3, #1
 810ac5e:	687b      	ldr	r3, [r7, #4]
 810ac60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810ac64:	69fb      	ldr	r3, [r7, #28]
 810ac66:	f003 0302 	and.w	r3, r3, #2
 810ac6a:	2b00      	cmp	r3, #0
 810ac6c:	d010      	beq.n	810ac90 <HAL_UART_IRQHandler+0xd8>
 810ac6e:	697b      	ldr	r3, [r7, #20]
 810ac70:	f003 0301 	and.w	r3, r3, #1
 810ac74:	2b00      	cmp	r3, #0
 810ac76:	d00b      	beq.n	810ac90 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810ac78:	687b      	ldr	r3, [r7, #4]
 810ac7a:	681b      	ldr	r3, [r3, #0]
 810ac7c:	2202      	movs	r2, #2
 810ac7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810ac80:	687b      	ldr	r3, [r7, #4]
 810ac82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ac86:	f043 0204 	orr.w	r2, r3, #4
 810ac8a:	687b      	ldr	r3, [r7, #4]
 810ac8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810ac90:	69fb      	ldr	r3, [r7, #28]
 810ac92:	f003 0304 	and.w	r3, r3, #4
 810ac96:	2b00      	cmp	r3, #0
 810ac98:	d010      	beq.n	810acbc <HAL_UART_IRQHandler+0x104>
 810ac9a:	697b      	ldr	r3, [r7, #20]
 810ac9c:	f003 0301 	and.w	r3, r3, #1
 810aca0:	2b00      	cmp	r3, #0
 810aca2:	d00b      	beq.n	810acbc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810aca4:	687b      	ldr	r3, [r7, #4]
 810aca6:	681b      	ldr	r3, [r3, #0]
 810aca8:	2204      	movs	r2, #4
 810acaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810acac:	687b      	ldr	r3, [r7, #4]
 810acae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810acb2:	f043 0202 	orr.w	r2, r3, #2
 810acb6:	687b      	ldr	r3, [r7, #4]
 810acb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810acbc:	69fb      	ldr	r3, [r7, #28]
 810acbe:	f003 0308 	and.w	r3, r3, #8
 810acc2:	2b00      	cmp	r3, #0
 810acc4:	d015      	beq.n	810acf2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810acc6:	69bb      	ldr	r3, [r7, #24]
 810acc8:	f003 0320 	and.w	r3, r3, #32
 810accc:	2b00      	cmp	r3, #0
 810acce:	d104      	bne.n	810acda <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810acd0:	697a      	ldr	r2, [r7, #20]
 810acd2:	4b48      	ldr	r3, [pc, #288]	; (810adf4 <HAL_UART_IRQHandler+0x23c>)
 810acd4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810acd6:	2b00      	cmp	r3, #0
 810acd8:	d00b      	beq.n	810acf2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810acda:	687b      	ldr	r3, [r7, #4]
 810acdc:	681b      	ldr	r3, [r3, #0]
 810acde:	2208      	movs	r2, #8
 810ace0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810ace2:	687b      	ldr	r3, [r7, #4]
 810ace4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ace8:	f043 0208 	orr.w	r2, r3, #8
 810acec:	687b      	ldr	r3, [r7, #4]
 810acee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810acf2:	69fb      	ldr	r3, [r7, #28]
 810acf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810acf8:	2b00      	cmp	r3, #0
 810acfa:	d011      	beq.n	810ad20 <HAL_UART_IRQHandler+0x168>
 810acfc:	69bb      	ldr	r3, [r7, #24]
 810acfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810ad02:	2b00      	cmp	r3, #0
 810ad04:	d00c      	beq.n	810ad20 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ad06:	687b      	ldr	r3, [r7, #4]
 810ad08:	681b      	ldr	r3, [r3, #0]
 810ad0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ad0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810ad10:	687b      	ldr	r3, [r7, #4]
 810ad12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ad16:	f043 0220 	orr.w	r2, r3, #32
 810ad1a:	687b      	ldr	r3, [r7, #4]
 810ad1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ad26:	2b00      	cmp	r3, #0
 810ad28:	f000 81f6 	beq.w	810b118 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810ad2c:	69fb      	ldr	r3, [r7, #28]
 810ad2e:	f003 0320 	and.w	r3, r3, #32
 810ad32:	2b00      	cmp	r3, #0
 810ad34:	d011      	beq.n	810ad5a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810ad36:	69bb      	ldr	r3, [r7, #24]
 810ad38:	f003 0320 	and.w	r3, r3, #32
 810ad3c:	2b00      	cmp	r3, #0
 810ad3e:	d104      	bne.n	810ad4a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810ad40:	697b      	ldr	r3, [r7, #20]
 810ad42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810ad46:	2b00      	cmp	r3, #0
 810ad48:	d007      	beq.n	810ad5a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810ad4a:	687b      	ldr	r3, [r7, #4]
 810ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810ad4e:	2b00      	cmp	r3, #0
 810ad50:	d003      	beq.n	810ad5a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810ad52:	687b      	ldr	r3, [r7, #4]
 810ad54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810ad56:	6878      	ldr	r0, [r7, #4]
 810ad58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810ad5a:	687b      	ldr	r3, [r7, #4]
 810ad5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ad60:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810ad62:	687b      	ldr	r3, [r7, #4]
 810ad64:	681b      	ldr	r3, [r3, #0]
 810ad66:	689b      	ldr	r3, [r3, #8]
 810ad68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ad6c:	2b40      	cmp	r3, #64	; 0x40
 810ad6e:	d004      	beq.n	810ad7a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810ad70:	68fb      	ldr	r3, [r7, #12]
 810ad72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810ad76:	2b00      	cmp	r3, #0
 810ad78:	d031      	beq.n	810adde <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810ad7a:	6878      	ldr	r0, [r7, #4]
 810ad7c:	f001 f95a 	bl	810c034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ad80:	687b      	ldr	r3, [r7, #4]
 810ad82:	681b      	ldr	r3, [r3, #0]
 810ad84:	689b      	ldr	r3, [r3, #8]
 810ad86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ad8a:	2b40      	cmp	r3, #64	; 0x40
 810ad8c:	d123      	bne.n	810add6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810ad8e:	687b      	ldr	r3, [r7, #4]
 810ad90:	681b      	ldr	r3, [r3, #0]
 810ad92:	689a      	ldr	r2, [r3, #8]
 810ad94:	687b      	ldr	r3, [r7, #4]
 810ad96:	681b      	ldr	r3, [r3, #0]
 810ad98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810ad9c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810ad9e:	687b      	ldr	r3, [r7, #4]
 810ada0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ada2:	2b00      	cmp	r3, #0
 810ada4:	d013      	beq.n	810adce <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810ada6:	687b      	ldr	r3, [r7, #4]
 810ada8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810adaa:	4a14      	ldr	r2, [pc, #80]	; (810adfc <HAL_UART_IRQHandler+0x244>)
 810adac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810adae:	687b      	ldr	r3, [r7, #4]
 810adb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810adb2:	4618      	mov	r0, r3
 810adb4:	f7f9 fece 	bl	8104b54 <HAL_DMA_Abort_IT>
 810adb8:	4603      	mov	r3, r0
 810adba:	2b00      	cmp	r3, #0
 810adbc:	d017      	beq.n	810adee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810adbe:	687b      	ldr	r3, [r7, #4]
 810adc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810adc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810adc4:	687a      	ldr	r2, [r7, #4]
 810adc6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810adc8:	4610      	mov	r0, r2
 810adca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810adcc:	e00f      	b.n	810adee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810adce:	6878      	ldr	r0, [r7, #4]
 810add0:	f000 f9c0 	bl	810b154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810add4:	e00b      	b.n	810adee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810add6:	6878      	ldr	r0, [r7, #4]
 810add8:	f000 f9bc 	bl	810b154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810addc:	e007      	b.n	810adee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810adde:	6878      	ldr	r0, [r7, #4]
 810ade0:	f000 f9b8 	bl	810b154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ade4:	687b      	ldr	r3, [r7, #4]
 810ade6:	2200      	movs	r2, #0
 810ade8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810adec:	e194      	b.n	810b118 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810adee:	bf00      	nop
    return;
 810adf0:	e192      	b.n	810b118 <HAL_UART_IRQHandler+0x560>
 810adf2:	bf00      	nop
 810adf4:	10000001 	.word	0x10000001
 810adf8:	04000120 	.word	0x04000120
 810adfc:	0810c253 	.word	0x0810c253

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ae00:	687b      	ldr	r3, [r7, #4]
 810ae02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ae04:	2b01      	cmp	r3, #1
 810ae06:	f040 8111 	bne.w	810b02c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810ae0a:	69fb      	ldr	r3, [r7, #28]
 810ae0c:	f003 0310 	and.w	r3, r3, #16
 810ae10:	2b00      	cmp	r3, #0
 810ae12:	f000 810b 	beq.w	810b02c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810ae16:	69bb      	ldr	r3, [r7, #24]
 810ae18:	f003 0310 	and.w	r3, r3, #16
 810ae1c:	2b00      	cmp	r3, #0
 810ae1e:	f000 8105 	beq.w	810b02c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810ae22:	687b      	ldr	r3, [r7, #4]
 810ae24:	681b      	ldr	r3, [r3, #0]
 810ae26:	2210      	movs	r2, #16
 810ae28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ae2a:	687b      	ldr	r3, [r7, #4]
 810ae2c:	681b      	ldr	r3, [r3, #0]
 810ae2e:	689b      	ldr	r3, [r3, #8]
 810ae30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ae34:	2b40      	cmp	r3, #64	; 0x40
 810ae36:	f040 80bb 	bne.w	810afb0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810ae3a:	687b      	ldr	r3, [r7, #4]
 810ae3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae3e:	681b      	ldr	r3, [r3, #0]
 810ae40:	4a97      	ldr	r2, [pc, #604]	; (810b0a0 <HAL_UART_IRQHandler+0x4e8>)
 810ae42:	4293      	cmp	r3, r2
 810ae44:	d059      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae46:	687b      	ldr	r3, [r7, #4]
 810ae48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae4a:	681b      	ldr	r3, [r3, #0]
 810ae4c:	4a95      	ldr	r2, [pc, #596]	; (810b0a4 <HAL_UART_IRQHandler+0x4ec>)
 810ae4e:	4293      	cmp	r3, r2
 810ae50:	d053      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae52:	687b      	ldr	r3, [r7, #4]
 810ae54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae56:	681b      	ldr	r3, [r3, #0]
 810ae58:	4a93      	ldr	r2, [pc, #588]	; (810b0a8 <HAL_UART_IRQHandler+0x4f0>)
 810ae5a:	4293      	cmp	r3, r2
 810ae5c:	d04d      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae5e:	687b      	ldr	r3, [r7, #4]
 810ae60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae62:	681b      	ldr	r3, [r3, #0]
 810ae64:	4a91      	ldr	r2, [pc, #580]	; (810b0ac <HAL_UART_IRQHandler+0x4f4>)
 810ae66:	4293      	cmp	r3, r2
 810ae68:	d047      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae6a:	687b      	ldr	r3, [r7, #4]
 810ae6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae6e:	681b      	ldr	r3, [r3, #0]
 810ae70:	4a8f      	ldr	r2, [pc, #572]	; (810b0b0 <HAL_UART_IRQHandler+0x4f8>)
 810ae72:	4293      	cmp	r3, r2
 810ae74:	d041      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae76:	687b      	ldr	r3, [r7, #4]
 810ae78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae7a:	681b      	ldr	r3, [r3, #0]
 810ae7c:	4a8d      	ldr	r2, [pc, #564]	; (810b0b4 <HAL_UART_IRQHandler+0x4fc>)
 810ae7e:	4293      	cmp	r3, r2
 810ae80:	d03b      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae82:	687b      	ldr	r3, [r7, #4]
 810ae84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae86:	681b      	ldr	r3, [r3, #0]
 810ae88:	4a8b      	ldr	r2, [pc, #556]	; (810b0b8 <HAL_UART_IRQHandler+0x500>)
 810ae8a:	4293      	cmp	r3, r2
 810ae8c:	d035      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae8e:	687b      	ldr	r3, [r7, #4]
 810ae90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae92:	681b      	ldr	r3, [r3, #0]
 810ae94:	4a89      	ldr	r2, [pc, #548]	; (810b0bc <HAL_UART_IRQHandler+0x504>)
 810ae96:	4293      	cmp	r3, r2
 810ae98:	d02f      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810ae9a:	687b      	ldr	r3, [r7, #4]
 810ae9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	4a87      	ldr	r2, [pc, #540]	; (810b0c0 <HAL_UART_IRQHandler+0x508>)
 810aea2:	4293      	cmp	r3, r2
 810aea4:	d029      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aea6:	687b      	ldr	r3, [r7, #4]
 810aea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aeaa:	681b      	ldr	r3, [r3, #0]
 810aeac:	4a85      	ldr	r2, [pc, #532]	; (810b0c4 <HAL_UART_IRQHandler+0x50c>)
 810aeae:	4293      	cmp	r3, r2
 810aeb0:	d023      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aeb2:	687b      	ldr	r3, [r7, #4]
 810aeb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aeb6:	681b      	ldr	r3, [r3, #0]
 810aeb8:	4a83      	ldr	r2, [pc, #524]	; (810b0c8 <HAL_UART_IRQHandler+0x510>)
 810aeba:	4293      	cmp	r3, r2
 810aebc:	d01d      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aebe:	687b      	ldr	r3, [r7, #4]
 810aec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aec2:	681b      	ldr	r3, [r3, #0]
 810aec4:	4a81      	ldr	r2, [pc, #516]	; (810b0cc <HAL_UART_IRQHandler+0x514>)
 810aec6:	4293      	cmp	r3, r2
 810aec8:	d017      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aeca:	687b      	ldr	r3, [r7, #4]
 810aecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aece:	681b      	ldr	r3, [r3, #0]
 810aed0:	4a7f      	ldr	r2, [pc, #508]	; (810b0d0 <HAL_UART_IRQHandler+0x518>)
 810aed2:	4293      	cmp	r3, r2
 810aed4:	d011      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aed6:	687b      	ldr	r3, [r7, #4]
 810aed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aeda:	681b      	ldr	r3, [r3, #0]
 810aedc:	4a7d      	ldr	r2, [pc, #500]	; (810b0d4 <HAL_UART_IRQHandler+0x51c>)
 810aede:	4293      	cmp	r3, r2
 810aee0:	d00b      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aee2:	687b      	ldr	r3, [r7, #4]
 810aee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aee6:	681b      	ldr	r3, [r3, #0]
 810aee8:	4a7b      	ldr	r2, [pc, #492]	; (810b0d8 <HAL_UART_IRQHandler+0x520>)
 810aeea:	4293      	cmp	r3, r2
 810aeec:	d005      	beq.n	810aefa <HAL_UART_IRQHandler+0x342>
 810aeee:	687b      	ldr	r3, [r7, #4]
 810aef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aef2:	681b      	ldr	r3, [r3, #0]
 810aef4:	4a79      	ldr	r2, [pc, #484]	; (810b0dc <HAL_UART_IRQHandler+0x524>)
 810aef6:	4293      	cmp	r3, r2
 810aef8:	d105      	bne.n	810af06 <HAL_UART_IRQHandler+0x34e>
 810aefa:	687b      	ldr	r3, [r7, #4]
 810aefc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aefe:	681b      	ldr	r3, [r3, #0]
 810af00:	685b      	ldr	r3, [r3, #4]
 810af02:	b29b      	uxth	r3, r3
 810af04:	e004      	b.n	810af10 <HAL_UART_IRQHandler+0x358>
 810af06:	687b      	ldr	r3, [r7, #4]
 810af08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af0a:	681b      	ldr	r3, [r3, #0]
 810af0c:	685b      	ldr	r3, [r3, #4]
 810af0e:	b29b      	uxth	r3, r3
 810af10:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810af12:	893b      	ldrh	r3, [r7, #8]
 810af14:	2b00      	cmp	r3, #0
 810af16:	f000 8101 	beq.w	810b11c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810af1a:	687b      	ldr	r3, [r7, #4]
 810af1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810af20:	893a      	ldrh	r2, [r7, #8]
 810af22:	429a      	cmp	r2, r3
 810af24:	f080 80fa 	bcs.w	810b11c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810af28:	687b      	ldr	r3, [r7, #4]
 810af2a:	893a      	ldrh	r2, [r7, #8]
 810af2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810af30:	687b      	ldr	r3, [r7, #4]
 810af32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af34:	69db      	ldr	r3, [r3, #28]
 810af36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810af3a:	d02b      	beq.n	810af94 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810af3c:	687b      	ldr	r3, [r7, #4]
 810af3e:	681b      	ldr	r3, [r3, #0]
 810af40:	681a      	ldr	r2, [r3, #0]
 810af42:	687b      	ldr	r3, [r7, #4]
 810af44:	681b      	ldr	r3, [r3, #0]
 810af46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810af4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810af4c:	687b      	ldr	r3, [r7, #4]
 810af4e:	681b      	ldr	r3, [r3, #0]
 810af50:	689a      	ldr	r2, [r3, #8]
 810af52:	687b      	ldr	r3, [r7, #4]
 810af54:	681b      	ldr	r3, [r3, #0]
 810af56:	f022 0201 	bic.w	r2, r2, #1
 810af5a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	681b      	ldr	r3, [r3, #0]
 810af60:	689a      	ldr	r2, [r3, #8]
 810af62:	687b      	ldr	r3, [r7, #4]
 810af64:	681b      	ldr	r3, [r3, #0]
 810af66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810af6a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810af6c:	687b      	ldr	r3, [r7, #4]
 810af6e:	2220      	movs	r2, #32
 810af70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810af74:	687b      	ldr	r3, [r7, #4]
 810af76:	2200      	movs	r2, #0
 810af78:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810af7a:	687b      	ldr	r3, [r7, #4]
 810af7c:	681b      	ldr	r3, [r3, #0]
 810af7e:	681a      	ldr	r2, [r3, #0]
 810af80:	687b      	ldr	r3, [r7, #4]
 810af82:	681b      	ldr	r3, [r3, #0]
 810af84:	f022 0210 	bic.w	r2, r2, #16
 810af88:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810af8a:	687b      	ldr	r3, [r7, #4]
 810af8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af8e:	4618      	mov	r0, r3
 810af90:	f7f9 fac2 	bl	8104518 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810af94:	687b      	ldr	r3, [r7, #4]
 810af96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810af9a:	687b      	ldr	r3, [r7, #4]
 810af9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810afa0:	b29b      	uxth	r3, r3
 810afa2:	1ad3      	subs	r3, r2, r3
 810afa4:	b29b      	uxth	r3, r3
 810afa6:	4619      	mov	r1, r3
 810afa8:	6878      	ldr	r0, [r7, #4]
 810afaa:	f000 f8dd 	bl	810b168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810afae:	e0b5      	b.n	810b11c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810afb0:	687b      	ldr	r3, [r7, #4]
 810afb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810afbc:	b29b      	uxth	r3, r3
 810afbe:	1ad3      	subs	r3, r2, r3
 810afc0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810afc2:	687b      	ldr	r3, [r7, #4]
 810afc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810afc8:	b29b      	uxth	r3, r3
 810afca:	2b00      	cmp	r3, #0
 810afcc:	f000 80a8 	beq.w	810b120 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810afd0:	897b      	ldrh	r3, [r7, #10]
 810afd2:	2b00      	cmp	r3, #0
 810afd4:	f000 80a4 	beq.w	810b120 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810afd8:	687b      	ldr	r3, [r7, #4]
 810afda:	681b      	ldr	r3, [r3, #0]
 810afdc:	681a      	ldr	r2, [r3, #0]
 810afde:	687b      	ldr	r3, [r7, #4]
 810afe0:	681b      	ldr	r3, [r3, #0]
 810afe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810afe6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810afe8:	687b      	ldr	r3, [r7, #4]
 810afea:	681b      	ldr	r3, [r3, #0]
 810afec:	689b      	ldr	r3, [r3, #8]
 810afee:	687a      	ldr	r2, [r7, #4]
 810aff0:	6812      	ldr	r2, [r2, #0]
 810aff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810aff6:	f023 0301 	bic.w	r3, r3, #1
 810affa:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810affc:	687b      	ldr	r3, [r7, #4]
 810affe:	2220      	movs	r2, #32
 810b000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b004:	687b      	ldr	r3, [r7, #4]
 810b006:	2200      	movs	r2, #0
 810b008:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b00a:	687b      	ldr	r3, [r7, #4]
 810b00c:	2200      	movs	r2, #0
 810b00e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b010:	687b      	ldr	r3, [r7, #4]
 810b012:	681b      	ldr	r3, [r3, #0]
 810b014:	681a      	ldr	r2, [r3, #0]
 810b016:	687b      	ldr	r3, [r7, #4]
 810b018:	681b      	ldr	r3, [r3, #0]
 810b01a:	f022 0210 	bic.w	r2, r2, #16
 810b01e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810b020:	897b      	ldrh	r3, [r7, #10]
 810b022:	4619      	mov	r1, r3
 810b024:	6878      	ldr	r0, [r7, #4]
 810b026:	f000 f89f 	bl	810b168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b02a:	e079      	b.n	810b120 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810b02c:	69fb      	ldr	r3, [r7, #28]
 810b02e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810b032:	2b00      	cmp	r3, #0
 810b034:	d00d      	beq.n	810b052 <HAL_UART_IRQHandler+0x49a>
 810b036:	697b      	ldr	r3, [r7, #20]
 810b038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810b03c:	2b00      	cmp	r3, #0
 810b03e:	d008      	beq.n	810b052 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810b040:	687b      	ldr	r3, [r7, #4]
 810b042:	681b      	ldr	r3, [r3, #0]
 810b044:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810b048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810b04a:	6878      	ldr	r0, [r7, #4]
 810b04c:	f001 f931 	bl	810c2b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b050:	e069      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810b052:	69fb      	ldr	r3, [r7, #28]
 810b054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b058:	2b00      	cmp	r3, #0
 810b05a:	d012      	beq.n	810b082 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810b05c:	69bb      	ldr	r3, [r7, #24]
 810b05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b062:	2b00      	cmp	r3, #0
 810b064:	d104      	bne.n	810b070 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810b066:	697b      	ldr	r3, [r7, #20]
 810b068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b06c:	2b00      	cmp	r3, #0
 810b06e:	d008      	beq.n	810b082 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810b070:	687b      	ldr	r3, [r7, #4]
 810b072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b074:	2b00      	cmp	r3, #0
 810b076:	d055      	beq.n	810b124 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810b078:	687b      	ldr	r3, [r7, #4]
 810b07a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b07c:	6878      	ldr	r0, [r7, #4]
 810b07e:	4798      	blx	r3
    }
    return;
 810b080:	e050      	b.n	810b124 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810b082:	69fb      	ldr	r3, [r7, #28]
 810b084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b088:	2b00      	cmp	r3, #0
 810b08a:	d029      	beq.n	810b0e0 <HAL_UART_IRQHandler+0x528>
 810b08c:	69bb      	ldr	r3, [r7, #24]
 810b08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b092:	2b00      	cmp	r3, #0
 810b094:	d024      	beq.n	810b0e0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810b096:	6878      	ldr	r0, [r7, #4]
 810b098:	f001 f8f1 	bl	810c27e <UART_EndTransmit_IT>
    return;
 810b09c:	e043      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
 810b09e:	bf00      	nop
 810b0a0:	40020010 	.word	0x40020010
 810b0a4:	40020028 	.word	0x40020028
 810b0a8:	40020040 	.word	0x40020040
 810b0ac:	40020058 	.word	0x40020058
 810b0b0:	40020070 	.word	0x40020070
 810b0b4:	40020088 	.word	0x40020088
 810b0b8:	400200a0 	.word	0x400200a0
 810b0bc:	400200b8 	.word	0x400200b8
 810b0c0:	40020410 	.word	0x40020410
 810b0c4:	40020428 	.word	0x40020428
 810b0c8:	40020440 	.word	0x40020440
 810b0cc:	40020458 	.word	0x40020458
 810b0d0:	40020470 	.word	0x40020470
 810b0d4:	40020488 	.word	0x40020488
 810b0d8:	400204a0 	.word	0x400204a0
 810b0dc:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810b0e0:	69fb      	ldr	r3, [r7, #28]
 810b0e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b0e6:	2b00      	cmp	r3, #0
 810b0e8:	d008      	beq.n	810b0fc <HAL_UART_IRQHandler+0x544>
 810b0ea:	69bb      	ldr	r3, [r7, #24]
 810b0ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810b0f0:	2b00      	cmp	r3, #0
 810b0f2:	d003      	beq.n	810b0fc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810b0f4:	6878      	ldr	r0, [r7, #4]
 810b0f6:	f001 f8f0 	bl	810c2da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b0fa:	e014      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810b0fc:	69fb      	ldr	r3, [r7, #28]
 810b0fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810b102:	2b00      	cmp	r3, #0
 810b104:	d00f      	beq.n	810b126 <HAL_UART_IRQHandler+0x56e>
 810b106:	69bb      	ldr	r3, [r7, #24]
 810b108:	2b00      	cmp	r3, #0
 810b10a:	da0c      	bge.n	810b126 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810b10c:	6878      	ldr	r0, [r7, #4]
 810b10e:	f001 f8da 	bl	810c2c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b112:	e008      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
      return;
 810b114:	bf00      	nop
 810b116:	e006      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
    return;
 810b118:	bf00      	nop
 810b11a:	e004      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
      return;
 810b11c:	bf00      	nop
 810b11e:	e002      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
      return;
 810b120:	bf00      	nop
 810b122:	e000      	b.n	810b126 <HAL_UART_IRQHandler+0x56e>
    return;
 810b124:	bf00      	nop
  }
}
 810b126:	3720      	adds	r7, #32
 810b128:	46bd      	mov	sp, r7
 810b12a:	bd80      	pop	{r7, pc}

0810b12c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b12c:	b480      	push	{r7}
 810b12e:	b083      	sub	sp, #12
 810b130:	af00      	add	r7, sp, #0
 810b132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810b134:	bf00      	nop
 810b136:	370c      	adds	r7, #12
 810b138:	46bd      	mov	sp, r7
 810b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b13e:	4770      	bx	lr

0810b140 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b140:	b480      	push	{r7}
 810b142:	b083      	sub	sp, #12
 810b144:	af00      	add	r7, sp, #0
 810b146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810b148:	bf00      	nop
 810b14a:	370c      	adds	r7, #12
 810b14c:	46bd      	mov	sp, r7
 810b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b152:	4770      	bx	lr

0810b154 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810b154:	b480      	push	{r7}
 810b156:	b083      	sub	sp, #12
 810b158:	af00      	add	r7, sp, #0
 810b15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810b15c:	bf00      	nop
 810b15e:	370c      	adds	r7, #12
 810b160:	46bd      	mov	sp, r7
 810b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b166:	4770      	bx	lr

0810b168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810b168:	b480      	push	{r7}
 810b16a:	b083      	sub	sp, #12
 810b16c:	af00      	add	r7, sp, #0
 810b16e:	6078      	str	r0, [r7, #4]
 810b170:	460b      	mov	r3, r1
 810b172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810b174:	bf00      	nop
 810b176:	370c      	adds	r7, #12
 810b178:	46bd      	mov	sp, r7
 810b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b17e:	4770      	bx	lr

0810b180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b180:	b5b0      	push	{r4, r5, r7, lr}
 810b182:	b08e      	sub	sp, #56	; 0x38
 810b184:	af00      	add	r7, sp, #0
 810b186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b188:	2300      	movs	r3, #0
 810b18a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b18e:	687b      	ldr	r3, [r7, #4]
 810b190:	689a      	ldr	r2, [r3, #8]
 810b192:	687b      	ldr	r3, [r7, #4]
 810b194:	691b      	ldr	r3, [r3, #16]
 810b196:	431a      	orrs	r2, r3
 810b198:	687b      	ldr	r3, [r7, #4]
 810b19a:	695b      	ldr	r3, [r3, #20]
 810b19c:	431a      	orrs	r2, r3
 810b19e:	687b      	ldr	r3, [r7, #4]
 810b1a0:	69db      	ldr	r3, [r3, #28]
 810b1a2:	4313      	orrs	r3, r2
 810b1a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b1a6:	687b      	ldr	r3, [r7, #4]
 810b1a8:	681b      	ldr	r3, [r3, #0]
 810b1aa:	681a      	ldr	r2, [r3, #0]
 810b1ac:	4bc0      	ldr	r3, [pc, #768]	; (810b4b0 <UART_SetConfig+0x330>)
 810b1ae:	4013      	ands	r3, r2
 810b1b0:	687a      	ldr	r2, [r7, #4]
 810b1b2:	6812      	ldr	r2, [r2, #0]
 810b1b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b1b6:	430b      	orrs	r3, r1
 810b1b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b1ba:	687b      	ldr	r3, [r7, #4]
 810b1bc:	681b      	ldr	r3, [r3, #0]
 810b1be:	685b      	ldr	r3, [r3, #4]
 810b1c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810b1c4:	687b      	ldr	r3, [r7, #4]
 810b1c6:	68da      	ldr	r2, [r3, #12]
 810b1c8:	687b      	ldr	r3, [r7, #4]
 810b1ca:	681b      	ldr	r3, [r3, #0]
 810b1cc:	430a      	orrs	r2, r1
 810b1ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b1d0:	687b      	ldr	r3, [r7, #4]
 810b1d2:	699b      	ldr	r3, [r3, #24]
 810b1d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b1d6:	687b      	ldr	r3, [r7, #4]
 810b1d8:	681b      	ldr	r3, [r3, #0]
 810b1da:	4ab6      	ldr	r2, [pc, #728]	; (810b4b4 <UART_SetConfig+0x334>)
 810b1dc:	4293      	cmp	r3, r2
 810b1de:	d004      	beq.n	810b1ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b1e0:	687b      	ldr	r3, [r7, #4]
 810b1e2:	6a1b      	ldr	r3, [r3, #32]
 810b1e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b1e6:	4313      	orrs	r3, r2
 810b1e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b1ea:	687b      	ldr	r3, [r7, #4]
 810b1ec:	681b      	ldr	r3, [r3, #0]
 810b1ee:	689b      	ldr	r3, [r3, #8]
 810b1f0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810b1f4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810b1f8:	687a      	ldr	r2, [r7, #4]
 810b1fa:	6812      	ldr	r2, [r2, #0]
 810b1fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b1fe:	430b      	orrs	r3, r1
 810b200:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b202:	687b      	ldr	r3, [r7, #4]
 810b204:	681b      	ldr	r3, [r3, #0]
 810b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b208:	f023 010f 	bic.w	r1, r3, #15
 810b20c:	687b      	ldr	r3, [r7, #4]
 810b20e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810b210:	687b      	ldr	r3, [r7, #4]
 810b212:	681b      	ldr	r3, [r3, #0]
 810b214:	430a      	orrs	r2, r1
 810b216:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	681b      	ldr	r3, [r3, #0]
 810b21c:	4aa6      	ldr	r2, [pc, #664]	; (810b4b8 <UART_SetConfig+0x338>)
 810b21e:	4293      	cmp	r3, r2
 810b220:	d176      	bne.n	810b310 <UART_SetConfig+0x190>
 810b222:	4ba6      	ldr	r3, [pc, #664]	; (810b4bc <UART_SetConfig+0x33c>)
 810b224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b22a:	2b28      	cmp	r3, #40	; 0x28
 810b22c:	d86c      	bhi.n	810b308 <UART_SetConfig+0x188>
 810b22e:	a201      	add	r2, pc, #4	; (adr r2, 810b234 <UART_SetConfig+0xb4>)
 810b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b234:	0810b2d9 	.word	0x0810b2d9
 810b238:	0810b309 	.word	0x0810b309
 810b23c:	0810b309 	.word	0x0810b309
 810b240:	0810b309 	.word	0x0810b309
 810b244:	0810b309 	.word	0x0810b309
 810b248:	0810b309 	.word	0x0810b309
 810b24c:	0810b309 	.word	0x0810b309
 810b250:	0810b309 	.word	0x0810b309
 810b254:	0810b2e1 	.word	0x0810b2e1
 810b258:	0810b309 	.word	0x0810b309
 810b25c:	0810b309 	.word	0x0810b309
 810b260:	0810b309 	.word	0x0810b309
 810b264:	0810b309 	.word	0x0810b309
 810b268:	0810b309 	.word	0x0810b309
 810b26c:	0810b309 	.word	0x0810b309
 810b270:	0810b309 	.word	0x0810b309
 810b274:	0810b2e9 	.word	0x0810b2e9
 810b278:	0810b309 	.word	0x0810b309
 810b27c:	0810b309 	.word	0x0810b309
 810b280:	0810b309 	.word	0x0810b309
 810b284:	0810b309 	.word	0x0810b309
 810b288:	0810b309 	.word	0x0810b309
 810b28c:	0810b309 	.word	0x0810b309
 810b290:	0810b309 	.word	0x0810b309
 810b294:	0810b2f1 	.word	0x0810b2f1
 810b298:	0810b309 	.word	0x0810b309
 810b29c:	0810b309 	.word	0x0810b309
 810b2a0:	0810b309 	.word	0x0810b309
 810b2a4:	0810b309 	.word	0x0810b309
 810b2a8:	0810b309 	.word	0x0810b309
 810b2ac:	0810b309 	.word	0x0810b309
 810b2b0:	0810b309 	.word	0x0810b309
 810b2b4:	0810b2f9 	.word	0x0810b2f9
 810b2b8:	0810b309 	.word	0x0810b309
 810b2bc:	0810b309 	.word	0x0810b309
 810b2c0:	0810b309 	.word	0x0810b309
 810b2c4:	0810b309 	.word	0x0810b309
 810b2c8:	0810b309 	.word	0x0810b309
 810b2cc:	0810b309 	.word	0x0810b309
 810b2d0:	0810b309 	.word	0x0810b309
 810b2d4:	0810b301 	.word	0x0810b301
 810b2d8:	2301      	movs	r3, #1
 810b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2de:	e220      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b2e0:	2304      	movs	r3, #4
 810b2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2e6:	e21c      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b2e8:	2308      	movs	r3, #8
 810b2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2ee:	e218      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b2f0:	2310      	movs	r3, #16
 810b2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2f6:	e214      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b2f8:	2320      	movs	r3, #32
 810b2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2fe:	e210      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b300:	2340      	movs	r3, #64	; 0x40
 810b302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b306:	e20c      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b308:	2380      	movs	r3, #128	; 0x80
 810b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b30e:	e208      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b310:	687b      	ldr	r3, [r7, #4]
 810b312:	681b      	ldr	r3, [r3, #0]
 810b314:	4a6a      	ldr	r2, [pc, #424]	; (810b4c0 <UART_SetConfig+0x340>)
 810b316:	4293      	cmp	r3, r2
 810b318:	d130      	bne.n	810b37c <UART_SetConfig+0x1fc>
 810b31a:	4b68      	ldr	r3, [pc, #416]	; (810b4bc <UART_SetConfig+0x33c>)
 810b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b31e:	f003 0307 	and.w	r3, r3, #7
 810b322:	2b05      	cmp	r3, #5
 810b324:	d826      	bhi.n	810b374 <UART_SetConfig+0x1f4>
 810b326:	a201      	add	r2, pc, #4	; (adr r2, 810b32c <UART_SetConfig+0x1ac>)
 810b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b32c:	0810b345 	.word	0x0810b345
 810b330:	0810b34d 	.word	0x0810b34d
 810b334:	0810b355 	.word	0x0810b355
 810b338:	0810b35d 	.word	0x0810b35d
 810b33c:	0810b365 	.word	0x0810b365
 810b340:	0810b36d 	.word	0x0810b36d
 810b344:	2300      	movs	r3, #0
 810b346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b34a:	e1ea      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b34c:	2304      	movs	r3, #4
 810b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b352:	e1e6      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b354:	2308      	movs	r3, #8
 810b356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b35a:	e1e2      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b35c:	2310      	movs	r3, #16
 810b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b362:	e1de      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b364:	2320      	movs	r3, #32
 810b366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b36a:	e1da      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b36c:	2340      	movs	r3, #64	; 0x40
 810b36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b372:	e1d6      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b374:	2380      	movs	r3, #128	; 0x80
 810b376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b37a:	e1d2      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b37c:	687b      	ldr	r3, [r7, #4]
 810b37e:	681b      	ldr	r3, [r3, #0]
 810b380:	4a50      	ldr	r2, [pc, #320]	; (810b4c4 <UART_SetConfig+0x344>)
 810b382:	4293      	cmp	r3, r2
 810b384:	d130      	bne.n	810b3e8 <UART_SetConfig+0x268>
 810b386:	4b4d      	ldr	r3, [pc, #308]	; (810b4bc <UART_SetConfig+0x33c>)
 810b388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b38a:	f003 0307 	and.w	r3, r3, #7
 810b38e:	2b05      	cmp	r3, #5
 810b390:	d826      	bhi.n	810b3e0 <UART_SetConfig+0x260>
 810b392:	a201      	add	r2, pc, #4	; (adr r2, 810b398 <UART_SetConfig+0x218>)
 810b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b398:	0810b3b1 	.word	0x0810b3b1
 810b39c:	0810b3b9 	.word	0x0810b3b9
 810b3a0:	0810b3c1 	.word	0x0810b3c1
 810b3a4:	0810b3c9 	.word	0x0810b3c9
 810b3a8:	0810b3d1 	.word	0x0810b3d1
 810b3ac:	0810b3d9 	.word	0x0810b3d9
 810b3b0:	2300      	movs	r3, #0
 810b3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3b6:	e1b4      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3b8:	2304      	movs	r3, #4
 810b3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3be:	e1b0      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3c0:	2308      	movs	r3, #8
 810b3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3c6:	e1ac      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3c8:	2310      	movs	r3, #16
 810b3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3ce:	e1a8      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3d0:	2320      	movs	r3, #32
 810b3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3d6:	e1a4      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3d8:	2340      	movs	r3, #64	; 0x40
 810b3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3de:	e1a0      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3e0:	2380      	movs	r3, #128	; 0x80
 810b3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3e6:	e19c      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b3e8:	687b      	ldr	r3, [r7, #4]
 810b3ea:	681b      	ldr	r3, [r3, #0]
 810b3ec:	4a36      	ldr	r2, [pc, #216]	; (810b4c8 <UART_SetConfig+0x348>)
 810b3ee:	4293      	cmp	r3, r2
 810b3f0:	d130      	bne.n	810b454 <UART_SetConfig+0x2d4>
 810b3f2:	4b32      	ldr	r3, [pc, #200]	; (810b4bc <UART_SetConfig+0x33c>)
 810b3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b3f6:	f003 0307 	and.w	r3, r3, #7
 810b3fa:	2b05      	cmp	r3, #5
 810b3fc:	d826      	bhi.n	810b44c <UART_SetConfig+0x2cc>
 810b3fe:	a201      	add	r2, pc, #4	; (adr r2, 810b404 <UART_SetConfig+0x284>)
 810b400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b404:	0810b41d 	.word	0x0810b41d
 810b408:	0810b425 	.word	0x0810b425
 810b40c:	0810b42d 	.word	0x0810b42d
 810b410:	0810b435 	.word	0x0810b435
 810b414:	0810b43d 	.word	0x0810b43d
 810b418:	0810b445 	.word	0x0810b445
 810b41c:	2300      	movs	r3, #0
 810b41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b422:	e17e      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b424:	2304      	movs	r3, #4
 810b426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b42a:	e17a      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b42c:	2308      	movs	r3, #8
 810b42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b432:	e176      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b434:	2310      	movs	r3, #16
 810b436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b43a:	e172      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b43c:	2320      	movs	r3, #32
 810b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b442:	e16e      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b444:	2340      	movs	r3, #64	; 0x40
 810b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b44a:	e16a      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b44c:	2380      	movs	r3, #128	; 0x80
 810b44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b452:	e166      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b454:	687b      	ldr	r3, [r7, #4]
 810b456:	681b      	ldr	r3, [r3, #0]
 810b458:	4a1c      	ldr	r2, [pc, #112]	; (810b4cc <UART_SetConfig+0x34c>)
 810b45a:	4293      	cmp	r3, r2
 810b45c:	d140      	bne.n	810b4e0 <UART_SetConfig+0x360>
 810b45e:	4b17      	ldr	r3, [pc, #92]	; (810b4bc <UART_SetConfig+0x33c>)
 810b460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b462:	f003 0307 	and.w	r3, r3, #7
 810b466:	2b05      	cmp	r3, #5
 810b468:	d836      	bhi.n	810b4d8 <UART_SetConfig+0x358>
 810b46a:	a201      	add	r2, pc, #4	; (adr r2, 810b470 <UART_SetConfig+0x2f0>)
 810b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b470:	0810b489 	.word	0x0810b489
 810b474:	0810b491 	.word	0x0810b491
 810b478:	0810b499 	.word	0x0810b499
 810b47c:	0810b4a1 	.word	0x0810b4a1
 810b480:	0810b4a9 	.word	0x0810b4a9
 810b484:	0810b4d1 	.word	0x0810b4d1
 810b488:	2300      	movs	r3, #0
 810b48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b48e:	e148      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b490:	2304      	movs	r3, #4
 810b492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b496:	e144      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b498:	2308      	movs	r3, #8
 810b49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b49e:	e140      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b4a0:	2310      	movs	r3, #16
 810b4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4a6:	e13c      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b4a8:	2320      	movs	r3, #32
 810b4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4ae:	e138      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b4b0:	cfff69f3 	.word	0xcfff69f3
 810b4b4:	58000c00 	.word	0x58000c00
 810b4b8:	40011000 	.word	0x40011000
 810b4bc:	58024400 	.word	0x58024400
 810b4c0:	40004400 	.word	0x40004400
 810b4c4:	40004800 	.word	0x40004800
 810b4c8:	40004c00 	.word	0x40004c00
 810b4cc:	40005000 	.word	0x40005000
 810b4d0:	2340      	movs	r3, #64	; 0x40
 810b4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4d6:	e124      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b4d8:	2380      	movs	r3, #128	; 0x80
 810b4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4de:	e120      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	681b      	ldr	r3, [r3, #0]
 810b4e4:	4acc      	ldr	r2, [pc, #816]	; (810b818 <UART_SetConfig+0x698>)
 810b4e6:	4293      	cmp	r3, r2
 810b4e8:	d176      	bne.n	810b5d8 <UART_SetConfig+0x458>
 810b4ea:	4bcc      	ldr	r3, [pc, #816]	; (810b81c <UART_SetConfig+0x69c>)
 810b4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b4ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b4f2:	2b28      	cmp	r3, #40	; 0x28
 810b4f4:	d86c      	bhi.n	810b5d0 <UART_SetConfig+0x450>
 810b4f6:	a201      	add	r2, pc, #4	; (adr r2, 810b4fc <UART_SetConfig+0x37c>)
 810b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b4fc:	0810b5a1 	.word	0x0810b5a1
 810b500:	0810b5d1 	.word	0x0810b5d1
 810b504:	0810b5d1 	.word	0x0810b5d1
 810b508:	0810b5d1 	.word	0x0810b5d1
 810b50c:	0810b5d1 	.word	0x0810b5d1
 810b510:	0810b5d1 	.word	0x0810b5d1
 810b514:	0810b5d1 	.word	0x0810b5d1
 810b518:	0810b5d1 	.word	0x0810b5d1
 810b51c:	0810b5a9 	.word	0x0810b5a9
 810b520:	0810b5d1 	.word	0x0810b5d1
 810b524:	0810b5d1 	.word	0x0810b5d1
 810b528:	0810b5d1 	.word	0x0810b5d1
 810b52c:	0810b5d1 	.word	0x0810b5d1
 810b530:	0810b5d1 	.word	0x0810b5d1
 810b534:	0810b5d1 	.word	0x0810b5d1
 810b538:	0810b5d1 	.word	0x0810b5d1
 810b53c:	0810b5b1 	.word	0x0810b5b1
 810b540:	0810b5d1 	.word	0x0810b5d1
 810b544:	0810b5d1 	.word	0x0810b5d1
 810b548:	0810b5d1 	.word	0x0810b5d1
 810b54c:	0810b5d1 	.word	0x0810b5d1
 810b550:	0810b5d1 	.word	0x0810b5d1
 810b554:	0810b5d1 	.word	0x0810b5d1
 810b558:	0810b5d1 	.word	0x0810b5d1
 810b55c:	0810b5b9 	.word	0x0810b5b9
 810b560:	0810b5d1 	.word	0x0810b5d1
 810b564:	0810b5d1 	.word	0x0810b5d1
 810b568:	0810b5d1 	.word	0x0810b5d1
 810b56c:	0810b5d1 	.word	0x0810b5d1
 810b570:	0810b5d1 	.word	0x0810b5d1
 810b574:	0810b5d1 	.word	0x0810b5d1
 810b578:	0810b5d1 	.word	0x0810b5d1
 810b57c:	0810b5c1 	.word	0x0810b5c1
 810b580:	0810b5d1 	.word	0x0810b5d1
 810b584:	0810b5d1 	.word	0x0810b5d1
 810b588:	0810b5d1 	.word	0x0810b5d1
 810b58c:	0810b5d1 	.word	0x0810b5d1
 810b590:	0810b5d1 	.word	0x0810b5d1
 810b594:	0810b5d1 	.word	0x0810b5d1
 810b598:	0810b5d1 	.word	0x0810b5d1
 810b59c:	0810b5c9 	.word	0x0810b5c9
 810b5a0:	2301      	movs	r3, #1
 810b5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5a6:	e0bc      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5a8:	2304      	movs	r3, #4
 810b5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5ae:	e0b8      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5b0:	2308      	movs	r3, #8
 810b5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5b6:	e0b4      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5b8:	2310      	movs	r3, #16
 810b5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5be:	e0b0      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5c0:	2320      	movs	r3, #32
 810b5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5c6:	e0ac      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5c8:	2340      	movs	r3, #64	; 0x40
 810b5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5ce:	e0a8      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5d0:	2380      	movs	r3, #128	; 0x80
 810b5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5d6:	e0a4      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	681b      	ldr	r3, [r3, #0]
 810b5dc:	4a90      	ldr	r2, [pc, #576]	; (810b820 <UART_SetConfig+0x6a0>)
 810b5de:	4293      	cmp	r3, r2
 810b5e0:	d130      	bne.n	810b644 <UART_SetConfig+0x4c4>
 810b5e2:	4b8e      	ldr	r3, [pc, #568]	; (810b81c <UART_SetConfig+0x69c>)
 810b5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b5e6:	f003 0307 	and.w	r3, r3, #7
 810b5ea:	2b05      	cmp	r3, #5
 810b5ec:	d826      	bhi.n	810b63c <UART_SetConfig+0x4bc>
 810b5ee:	a201      	add	r2, pc, #4	; (adr r2, 810b5f4 <UART_SetConfig+0x474>)
 810b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b5f4:	0810b60d 	.word	0x0810b60d
 810b5f8:	0810b615 	.word	0x0810b615
 810b5fc:	0810b61d 	.word	0x0810b61d
 810b600:	0810b625 	.word	0x0810b625
 810b604:	0810b62d 	.word	0x0810b62d
 810b608:	0810b635 	.word	0x0810b635
 810b60c:	2300      	movs	r3, #0
 810b60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b612:	e086      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b614:	2304      	movs	r3, #4
 810b616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b61a:	e082      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b61c:	2308      	movs	r3, #8
 810b61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b622:	e07e      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b624:	2310      	movs	r3, #16
 810b626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b62a:	e07a      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b62c:	2320      	movs	r3, #32
 810b62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b632:	e076      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b634:	2340      	movs	r3, #64	; 0x40
 810b636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b63a:	e072      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b63c:	2380      	movs	r3, #128	; 0x80
 810b63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b642:	e06e      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b644:	687b      	ldr	r3, [r7, #4]
 810b646:	681b      	ldr	r3, [r3, #0]
 810b648:	4a76      	ldr	r2, [pc, #472]	; (810b824 <UART_SetConfig+0x6a4>)
 810b64a:	4293      	cmp	r3, r2
 810b64c:	d130      	bne.n	810b6b0 <UART_SetConfig+0x530>
 810b64e:	4b73      	ldr	r3, [pc, #460]	; (810b81c <UART_SetConfig+0x69c>)
 810b650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b652:	f003 0307 	and.w	r3, r3, #7
 810b656:	2b05      	cmp	r3, #5
 810b658:	d826      	bhi.n	810b6a8 <UART_SetConfig+0x528>
 810b65a:	a201      	add	r2, pc, #4	; (adr r2, 810b660 <UART_SetConfig+0x4e0>)
 810b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b660:	0810b679 	.word	0x0810b679
 810b664:	0810b681 	.word	0x0810b681
 810b668:	0810b689 	.word	0x0810b689
 810b66c:	0810b691 	.word	0x0810b691
 810b670:	0810b699 	.word	0x0810b699
 810b674:	0810b6a1 	.word	0x0810b6a1
 810b678:	2300      	movs	r3, #0
 810b67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b67e:	e050      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b680:	2304      	movs	r3, #4
 810b682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b686:	e04c      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b688:	2308      	movs	r3, #8
 810b68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b68e:	e048      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b690:	2310      	movs	r3, #16
 810b692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b696:	e044      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b698:	2320      	movs	r3, #32
 810b69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b69e:	e040      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b6a0:	2340      	movs	r3, #64	; 0x40
 810b6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6a6:	e03c      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b6a8:	2380      	movs	r3, #128	; 0x80
 810b6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6ae:	e038      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b6b0:	687b      	ldr	r3, [r7, #4]
 810b6b2:	681b      	ldr	r3, [r3, #0]
 810b6b4:	4a5c      	ldr	r2, [pc, #368]	; (810b828 <UART_SetConfig+0x6a8>)
 810b6b6:	4293      	cmp	r3, r2
 810b6b8:	d130      	bne.n	810b71c <UART_SetConfig+0x59c>
 810b6ba:	4b58      	ldr	r3, [pc, #352]	; (810b81c <UART_SetConfig+0x69c>)
 810b6bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b6be:	f003 0307 	and.w	r3, r3, #7
 810b6c2:	2b05      	cmp	r3, #5
 810b6c4:	d826      	bhi.n	810b714 <UART_SetConfig+0x594>
 810b6c6:	a201      	add	r2, pc, #4	; (adr r2, 810b6cc <UART_SetConfig+0x54c>)
 810b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b6cc:	0810b6e5 	.word	0x0810b6e5
 810b6d0:	0810b6ed 	.word	0x0810b6ed
 810b6d4:	0810b6f5 	.word	0x0810b6f5
 810b6d8:	0810b6fd 	.word	0x0810b6fd
 810b6dc:	0810b705 	.word	0x0810b705
 810b6e0:	0810b70d 	.word	0x0810b70d
 810b6e4:	2302      	movs	r3, #2
 810b6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6ea:	e01a      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b6ec:	2304      	movs	r3, #4
 810b6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6f2:	e016      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b6f4:	2308      	movs	r3, #8
 810b6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b6fa:	e012      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b6fc:	2310      	movs	r3, #16
 810b6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b702:	e00e      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b704:	2320      	movs	r3, #32
 810b706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b70a:	e00a      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b70c:	2340      	movs	r3, #64	; 0x40
 810b70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b712:	e006      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b714:	2380      	movs	r3, #128	; 0x80
 810b716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b71a:	e002      	b.n	810b722 <UART_SetConfig+0x5a2>
 810b71c:	2380      	movs	r3, #128	; 0x80
 810b71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b722:	687b      	ldr	r3, [r7, #4]
 810b724:	681b      	ldr	r3, [r3, #0]
 810b726:	4a40      	ldr	r2, [pc, #256]	; (810b828 <UART_SetConfig+0x6a8>)
 810b728:	4293      	cmp	r3, r2
 810b72a:	f040 80ef 	bne.w	810b90c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b72e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b732:	2b20      	cmp	r3, #32
 810b734:	dc46      	bgt.n	810b7c4 <UART_SetConfig+0x644>
 810b736:	2b02      	cmp	r3, #2
 810b738:	f2c0 8081 	blt.w	810b83e <UART_SetConfig+0x6be>
 810b73c:	3b02      	subs	r3, #2
 810b73e:	2b1e      	cmp	r3, #30
 810b740:	d87d      	bhi.n	810b83e <UART_SetConfig+0x6be>
 810b742:	a201      	add	r2, pc, #4	; (adr r2, 810b748 <UART_SetConfig+0x5c8>)
 810b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b748:	0810b7cb 	.word	0x0810b7cb
 810b74c:	0810b83f 	.word	0x0810b83f
 810b750:	0810b7d3 	.word	0x0810b7d3
 810b754:	0810b83f 	.word	0x0810b83f
 810b758:	0810b83f 	.word	0x0810b83f
 810b75c:	0810b83f 	.word	0x0810b83f
 810b760:	0810b7e3 	.word	0x0810b7e3
 810b764:	0810b83f 	.word	0x0810b83f
 810b768:	0810b83f 	.word	0x0810b83f
 810b76c:	0810b83f 	.word	0x0810b83f
 810b770:	0810b83f 	.word	0x0810b83f
 810b774:	0810b83f 	.word	0x0810b83f
 810b778:	0810b83f 	.word	0x0810b83f
 810b77c:	0810b83f 	.word	0x0810b83f
 810b780:	0810b7f3 	.word	0x0810b7f3
 810b784:	0810b83f 	.word	0x0810b83f
 810b788:	0810b83f 	.word	0x0810b83f
 810b78c:	0810b83f 	.word	0x0810b83f
 810b790:	0810b83f 	.word	0x0810b83f
 810b794:	0810b83f 	.word	0x0810b83f
 810b798:	0810b83f 	.word	0x0810b83f
 810b79c:	0810b83f 	.word	0x0810b83f
 810b7a0:	0810b83f 	.word	0x0810b83f
 810b7a4:	0810b83f 	.word	0x0810b83f
 810b7a8:	0810b83f 	.word	0x0810b83f
 810b7ac:	0810b83f 	.word	0x0810b83f
 810b7b0:	0810b83f 	.word	0x0810b83f
 810b7b4:	0810b83f 	.word	0x0810b83f
 810b7b8:	0810b83f 	.word	0x0810b83f
 810b7bc:	0810b83f 	.word	0x0810b83f
 810b7c0:	0810b831 	.word	0x0810b831
 810b7c4:	2b40      	cmp	r3, #64	; 0x40
 810b7c6:	d036      	beq.n	810b836 <UART_SetConfig+0x6b6>
 810b7c8:	e039      	b.n	810b83e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b7ca:	f7fd fe83 	bl	81094d4 <HAL_RCCEx_GetD3PCLK1Freq>
 810b7ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b7d0:	e03b      	b.n	810b84a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b7d2:	f107 0314 	add.w	r3, r7, #20
 810b7d6:	4618      	mov	r0, r3
 810b7d8:	f7fd fe92 	bl	8109500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b7dc:	69bb      	ldr	r3, [r7, #24]
 810b7de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b7e0:	e033      	b.n	810b84a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b7e2:	f107 0308 	add.w	r3, r7, #8
 810b7e6:	4618      	mov	r0, r3
 810b7e8:	f7fd ffde 	bl	81097a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b7ec:	68fb      	ldr	r3, [r7, #12]
 810b7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b7f0:	e02b      	b.n	810b84a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b7f2:	4b0a      	ldr	r3, [pc, #40]	; (810b81c <UART_SetConfig+0x69c>)
 810b7f4:	681b      	ldr	r3, [r3, #0]
 810b7f6:	f003 0320 	and.w	r3, r3, #32
 810b7fa:	2b00      	cmp	r3, #0
 810b7fc:	d009      	beq.n	810b812 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b7fe:	4b07      	ldr	r3, [pc, #28]	; (810b81c <UART_SetConfig+0x69c>)
 810b800:	681b      	ldr	r3, [r3, #0]
 810b802:	08db      	lsrs	r3, r3, #3
 810b804:	f003 0303 	and.w	r3, r3, #3
 810b808:	4a08      	ldr	r2, [pc, #32]	; (810b82c <UART_SetConfig+0x6ac>)
 810b80a:	fa22 f303 	lsr.w	r3, r2, r3
 810b80e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b810:	e01b      	b.n	810b84a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810b812:	4b06      	ldr	r3, [pc, #24]	; (810b82c <UART_SetConfig+0x6ac>)
 810b814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b816:	e018      	b.n	810b84a <UART_SetConfig+0x6ca>
 810b818:	40011400 	.word	0x40011400
 810b81c:	58024400 	.word	0x58024400
 810b820:	40007800 	.word	0x40007800
 810b824:	40007c00 	.word	0x40007c00
 810b828:	58000c00 	.word	0x58000c00
 810b82c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b830:	4bc4      	ldr	r3, [pc, #784]	; (810bb44 <UART_SetConfig+0x9c4>)
 810b832:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b834:	e009      	b.n	810b84a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b83a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b83c:	e005      	b.n	810b84a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810b83e:	2300      	movs	r3, #0
 810b840:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b842:	2301      	movs	r3, #1
 810b844:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b84c:	2b00      	cmp	r3, #0
 810b84e:	f000 81da 	beq.w	810bc06 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b852:	687b      	ldr	r3, [r7, #4]
 810b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b856:	4abc      	ldr	r2, [pc, #752]	; (810bb48 <UART_SetConfig+0x9c8>)
 810b858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b85c:	461a      	mov	r2, r3
 810b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b860:	fbb3 f3f2 	udiv	r3, r3, r2
 810b864:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b866:	687b      	ldr	r3, [r7, #4]
 810b868:	685a      	ldr	r2, [r3, #4]
 810b86a:	4613      	mov	r3, r2
 810b86c:	005b      	lsls	r3, r3, #1
 810b86e:	4413      	add	r3, r2
 810b870:	6a3a      	ldr	r2, [r7, #32]
 810b872:	429a      	cmp	r2, r3
 810b874:	d305      	bcc.n	810b882 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b876:	687b      	ldr	r3, [r7, #4]
 810b878:	685b      	ldr	r3, [r3, #4]
 810b87a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b87c:	6a3a      	ldr	r2, [r7, #32]
 810b87e:	429a      	cmp	r2, r3
 810b880:	d903      	bls.n	810b88a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810b882:	2301      	movs	r3, #1
 810b884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b888:	e1bd      	b.n	810bc06 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b88c:	4618      	mov	r0, r3
 810b88e:	f04f 0100 	mov.w	r1, #0
 810b892:	687b      	ldr	r3, [r7, #4]
 810b894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b896:	4aac      	ldr	r2, [pc, #688]	; (810bb48 <UART_SetConfig+0x9c8>)
 810b898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b89c:	b29a      	uxth	r2, r3
 810b89e:	f04f 0300 	mov.w	r3, #0
 810b8a2:	f7f5 fb33 	bl	8100f0c <__aeabi_uldivmod>
 810b8a6:	4602      	mov	r2, r0
 810b8a8:	460b      	mov	r3, r1
 810b8aa:	4610      	mov	r0, r2
 810b8ac:	4619      	mov	r1, r3
 810b8ae:	f04f 0200 	mov.w	r2, #0
 810b8b2:	f04f 0300 	mov.w	r3, #0
 810b8b6:	020b      	lsls	r3, r1, #8
 810b8b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b8bc:	0202      	lsls	r2, r0, #8
 810b8be:	6879      	ldr	r1, [r7, #4]
 810b8c0:	6849      	ldr	r1, [r1, #4]
 810b8c2:	0849      	lsrs	r1, r1, #1
 810b8c4:	4608      	mov	r0, r1
 810b8c6:	f04f 0100 	mov.w	r1, #0
 810b8ca:	1814      	adds	r4, r2, r0
 810b8cc:	eb43 0501 	adc.w	r5, r3, r1
 810b8d0:	687b      	ldr	r3, [r7, #4]
 810b8d2:	685b      	ldr	r3, [r3, #4]
 810b8d4:	461a      	mov	r2, r3
 810b8d6:	f04f 0300 	mov.w	r3, #0
 810b8da:	4620      	mov	r0, r4
 810b8dc:	4629      	mov	r1, r5
 810b8de:	f7f5 fb15 	bl	8100f0c <__aeabi_uldivmod>
 810b8e2:	4602      	mov	r2, r0
 810b8e4:	460b      	mov	r3, r1
 810b8e6:	4613      	mov	r3, r2
 810b8e8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b8ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810b8f0:	d308      	bcc.n	810b904 <UART_SetConfig+0x784>
 810b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b8f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b8f8:	d204      	bcs.n	810b904 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810b8fa:	687b      	ldr	r3, [r7, #4]
 810b8fc:	681b      	ldr	r3, [r3, #0]
 810b8fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b900:	60da      	str	r2, [r3, #12]
 810b902:	e180      	b.n	810bc06 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810b904:	2301      	movs	r3, #1
 810b906:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b90a:	e17c      	b.n	810bc06 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b90c:	687b      	ldr	r3, [r7, #4]
 810b90e:	69db      	ldr	r3, [r3, #28]
 810b910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b914:	f040 80bf 	bne.w	810ba96 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810b918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b91c:	2b20      	cmp	r3, #32
 810b91e:	dc49      	bgt.n	810b9b4 <UART_SetConfig+0x834>
 810b920:	2b00      	cmp	r3, #0
 810b922:	db7c      	blt.n	810ba1e <UART_SetConfig+0x89e>
 810b924:	2b20      	cmp	r3, #32
 810b926:	d87a      	bhi.n	810ba1e <UART_SetConfig+0x89e>
 810b928:	a201      	add	r2, pc, #4	; (adr r2, 810b930 <UART_SetConfig+0x7b0>)
 810b92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b92e:	bf00      	nop
 810b930:	0810b9bb 	.word	0x0810b9bb
 810b934:	0810b9c3 	.word	0x0810b9c3
 810b938:	0810ba1f 	.word	0x0810ba1f
 810b93c:	0810ba1f 	.word	0x0810ba1f
 810b940:	0810b9cb 	.word	0x0810b9cb
 810b944:	0810ba1f 	.word	0x0810ba1f
 810b948:	0810ba1f 	.word	0x0810ba1f
 810b94c:	0810ba1f 	.word	0x0810ba1f
 810b950:	0810b9db 	.word	0x0810b9db
 810b954:	0810ba1f 	.word	0x0810ba1f
 810b958:	0810ba1f 	.word	0x0810ba1f
 810b95c:	0810ba1f 	.word	0x0810ba1f
 810b960:	0810ba1f 	.word	0x0810ba1f
 810b964:	0810ba1f 	.word	0x0810ba1f
 810b968:	0810ba1f 	.word	0x0810ba1f
 810b96c:	0810ba1f 	.word	0x0810ba1f
 810b970:	0810b9eb 	.word	0x0810b9eb
 810b974:	0810ba1f 	.word	0x0810ba1f
 810b978:	0810ba1f 	.word	0x0810ba1f
 810b97c:	0810ba1f 	.word	0x0810ba1f
 810b980:	0810ba1f 	.word	0x0810ba1f
 810b984:	0810ba1f 	.word	0x0810ba1f
 810b988:	0810ba1f 	.word	0x0810ba1f
 810b98c:	0810ba1f 	.word	0x0810ba1f
 810b990:	0810ba1f 	.word	0x0810ba1f
 810b994:	0810ba1f 	.word	0x0810ba1f
 810b998:	0810ba1f 	.word	0x0810ba1f
 810b99c:	0810ba1f 	.word	0x0810ba1f
 810b9a0:	0810ba1f 	.word	0x0810ba1f
 810b9a4:	0810ba1f 	.word	0x0810ba1f
 810b9a8:	0810ba1f 	.word	0x0810ba1f
 810b9ac:	0810ba1f 	.word	0x0810ba1f
 810b9b0:	0810ba11 	.word	0x0810ba11
 810b9b4:	2b40      	cmp	r3, #64	; 0x40
 810b9b6:	d02e      	beq.n	810ba16 <UART_SetConfig+0x896>
 810b9b8:	e031      	b.n	810ba1e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b9ba:	f7fc fe1f 	bl	81085fc <HAL_RCC_GetPCLK1Freq>
 810b9be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b9c0:	e033      	b.n	810ba2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b9c2:	f7fc fe31 	bl	8108628 <HAL_RCC_GetPCLK2Freq>
 810b9c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b9c8:	e02f      	b.n	810ba2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b9ca:	f107 0314 	add.w	r3, r7, #20
 810b9ce:	4618      	mov	r0, r3
 810b9d0:	f7fd fd96 	bl	8109500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b9d4:	69bb      	ldr	r3, [r7, #24]
 810b9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b9d8:	e027      	b.n	810ba2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b9da:	f107 0308 	add.w	r3, r7, #8
 810b9de:	4618      	mov	r0, r3
 810b9e0:	f7fd fee2 	bl	81097a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b9e4:	68fb      	ldr	r3, [r7, #12]
 810b9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b9e8:	e01f      	b.n	810ba2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b9ea:	4b58      	ldr	r3, [pc, #352]	; (810bb4c <UART_SetConfig+0x9cc>)
 810b9ec:	681b      	ldr	r3, [r3, #0]
 810b9ee:	f003 0320 	and.w	r3, r3, #32
 810b9f2:	2b00      	cmp	r3, #0
 810b9f4:	d009      	beq.n	810ba0a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b9f6:	4b55      	ldr	r3, [pc, #340]	; (810bb4c <UART_SetConfig+0x9cc>)
 810b9f8:	681b      	ldr	r3, [r3, #0]
 810b9fa:	08db      	lsrs	r3, r3, #3
 810b9fc:	f003 0303 	and.w	r3, r3, #3
 810ba00:	4a53      	ldr	r2, [pc, #332]	; (810bb50 <UART_SetConfig+0x9d0>)
 810ba02:	fa22 f303 	lsr.w	r3, r2, r3
 810ba06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ba08:	e00f      	b.n	810ba2a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810ba0a:	4b51      	ldr	r3, [pc, #324]	; (810bb50 <UART_SetConfig+0x9d0>)
 810ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ba0e:	e00c      	b.n	810ba2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ba10:	4b4c      	ldr	r3, [pc, #304]	; (810bb44 <UART_SetConfig+0x9c4>)
 810ba12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ba14:	e009      	b.n	810ba2a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ba16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810ba1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810ba1c:	e005      	b.n	810ba2a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810ba1e:	2300      	movs	r3, #0
 810ba20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810ba22:	2301      	movs	r3, #1
 810ba24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810ba28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ba2c:	2b00      	cmp	r3, #0
 810ba2e:	f000 80ea 	beq.w	810bc06 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ba32:	687b      	ldr	r3, [r7, #4]
 810ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ba36:	4a44      	ldr	r2, [pc, #272]	; (810bb48 <UART_SetConfig+0x9c8>)
 810ba38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ba3c:	461a      	mov	r2, r3
 810ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ba40:	fbb3 f3f2 	udiv	r3, r3, r2
 810ba44:	005a      	lsls	r2, r3, #1
 810ba46:	687b      	ldr	r3, [r7, #4]
 810ba48:	685b      	ldr	r3, [r3, #4]
 810ba4a:	085b      	lsrs	r3, r3, #1
 810ba4c:	441a      	add	r2, r3
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	685b      	ldr	r3, [r3, #4]
 810ba52:	fbb2 f3f3 	udiv	r3, r2, r3
 810ba56:	b29b      	uxth	r3, r3
 810ba58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba5c:	2b0f      	cmp	r3, #15
 810ba5e:	d916      	bls.n	810ba8e <UART_SetConfig+0x90e>
 810ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ba66:	d212      	bcs.n	810ba8e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba6a:	b29b      	uxth	r3, r3
 810ba6c:	f023 030f 	bic.w	r3, r3, #15
 810ba70:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba74:	085b      	lsrs	r3, r3, #1
 810ba76:	b29b      	uxth	r3, r3
 810ba78:	f003 0307 	and.w	r3, r3, #7
 810ba7c:	b29a      	uxth	r2, r3
 810ba7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810ba80:	4313      	orrs	r3, r2
 810ba82:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810ba84:	687b      	ldr	r3, [r7, #4]
 810ba86:	681b      	ldr	r3, [r3, #0]
 810ba88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810ba8a:	60da      	str	r2, [r3, #12]
 810ba8c:	e0bb      	b.n	810bc06 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810ba8e:	2301      	movs	r3, #1
 810ba90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810ba94:	e0b7      	b.n	810bc06 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810ba96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810ba9a:	2b20      	cmp	r3, #32
 810ba9c:	dc4a      	bgt.n	810bb34 <UART_SetConfig+0x9b4>
 810ba9e:	2b00      	cmp	r3, #0
 810baa0:	f2c0 8086 	blt.w	810bbb0 <UART_SetConfig+0xa30>
 810baa4:	2b20      	cmp	r3, #32
 810baa6:	f200 8083 	bhi.w	810bbb0 <UART_SetConfig+0xa30>
 810baaa:	a201      	add	r2, pc, #4	; (adr r2, 810bab0 <UART_SetConfig+0x930>)
 810baac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bab0:	0810bb3b 	.word	0x0810bb3b
 810bab4:	0810bb55 	.word	0x0810bb55
 810bab8:	0810bbb1 	.word	0x0810bbb1
 810babc:	0810bbb1 	.word	0x0810bbb1
 810bac0:	0810bb5d 	.word	0x0810bb5d
 810bac4:	0810bbb1 	.word	0x0810bbb1
 810bac8:	0810bbb1 	.word	0x0810bbb1
 810bacc:	0810bbb1 	.word	0x0810bbb1
 810bad0:	0810bb6d 	.word	0x0810bb6d
 810bad4:	0810bbb1 	.word	0x0810bbb1
 810bad8:	0810bbb1 	.word	0x0810bbb1
 810badc:	0810bbb1 	.word	0x0810bbb1
 810bae0:	0810bbb1 	.word	0x0810bbb1
 810bae4:	0810bbb1 	.word	0x0810bbb1
 810bae8:	0810bbb1 	.word	0x0810bbb1
 810baec:	0810bbb1 	.word	0x0810bbb1
 810baf0:	0810bb7d 	.word	0x0810bb7d
 810baf4:	0810bbb1 	.word	0x0810bbb1
 810baf8:	0810bbb1 	.word	0x0810bbb1
 810bafc:	0810bbb1 	.word	0x0810bbb1
 810bb00:	0810bbb1 	.word	0x0810bbb1
 810bb04:	0810bbb1 	.word	0x0810bbb1
 810bb08:	0810bbb1 	.word	0x0810bbb1
 810bb0c:	0810bbb1 	.word	0x0810bbb1
 810bb10:	0810bbb1 	.word	0x0810bbb1
 810bb14:	0810bbb1 	.word	0x0810bbb1
 810bb18:	0810bbb1 	.word	0x0810bbb1
 810bb1c:	0810bbb1 	.word	0x0810bbb1
 810bb20:	0810bbb1 	.word	0x0810bbb1
 810bb24:	0810bbb1 	.word	0x0810bbb1
 810bb28:	0810bbb1 	.word	0x0810bbb1
 810bb2c:	0810bbb1 	.word	0x0810bbb1
 810bb30:	0810bba3 	.word	0x0810bba3
 810bb34:	2b40      	cmp	r3, #64	; 0x40
 810bb36:	d037      	beq.n	810bba8 <UART_SetConfig+0xa28>
 810bb38:	e03a      	b.n	810bbb0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bb3a:	f7fc fd5f 	bl	81085fc <HAL_RCC_GetPCLK1Freq>
 810bb3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bb40:	e03c      	b.n	810bbbc <UART_SetConfig+0xa3c>
 810bb42:	bf00      	nop
 810bb44:	003d0900 	.word	0x003d0900
 810bb48:	0810d584 	.word	0x0810d584
 810bb4c:	58024400 	.word	0x58024400
 810bb50:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bb54:	f7fc fd68 	bl	8108628 <HAL_RCC_GetPCLK2Freq>
 810bb58:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bb5a:	e02f      	b.n	810bbbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb5c:	f107 0314 	add.w	r3, r7, #20
 810bb60:	4618      	mov	r0, r3
 810bb62:	f7fd fccd 	bl	8109500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bb66:	69bb      	ldr	r3, [r7, #24]
 810bb68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb6a:	e027      	b.n	810bbbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb6c:	f107 0308 	add.w	r3, r7, #8
 810bb70:	4618      	mov	r0, r3
 810bb72:	f7fd fe19 	bl	81097a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bb76:	68fb      	ldr	r3, [r7, #12]
 810bb78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb7a:	e01f      	b.n	810bbbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bb7c:	4b2c      	ldr	r3, [pc, #176]	; (810bc30 <UART_SetConfig+0xab0>)
 810bb7e:	681b      	ldr	r3, [r3, #0]
 810bb80:	f003 0320 	and.w	r3, r3, #32
 810bb84:	2b00      	cmp	r3, #0
 810bb86:	d009      	beq.n	810bb9c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bb88:	4b29      	ldr	r3, [pc, #164]	; (810bc30 <UART_SetConfig+0xab0>)
 810bb8a:	681b      	ldr	r3, [r3, #0]
 810bb8c:	08db      	lsrs	r3, r3, #3
 810bb8e:	f003 0303 	and.w	r3, r3, #3
 810bb92:	4a28      	ldr	r2, [pc, #160]	; (810bc34 <UART_SetConfig+0xab4>)
 810bb94:	fa22 f303 	lsr.w	r3, r2, r3
 810bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bb9a:	e00f      	b.n	810bbbc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810bb9c:	4b25      	ldr	r3, [pc, #148]	; (810bc34 <UART_SetConfig+0xab4>)
 810bb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bba0:	e00c      	b.n	810bbbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bba2:	4b25      	ldr	r3, [pc, #148]	; (810bc38 <UART_SetConfig+0xab8>)
 810bba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bba6:	e009      	b.n	810bbbc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bbac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bbae:	e005      	b.n	810bbbc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810bbb0:	2300      	movs	r3, #0
 810bbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bbb4:	2301      	movs	r3, #1
 810bbb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bbba:	bf00      	nop
    }

    if (pclk != 0U)
 810bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bbbe:	2b00      	cmp	r3, #0
 810bbc0:	d021      	beq.n	810bc06 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bbc2:	687b      	ldr	r3, [r7, #4]
 810bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bbc6:	4a1d      	ldr	r2, [pc, #116]	; (810bc3c <UART_SetConfig+0xabc>)
 810bbc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bbcc:	461a      	mov	r2, r3
 810bbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bbd0:	fbb3 f2f2 	udiv	r2, r3, r2
 810bbd4:	687b      	ldr	r3, [r7, #4]
 810bbd6:	685b      	ldr	r3, [r3, #4]
 810bbd8:	085b      	lsrs	r3, r3, #1
 810bbda:	441a      	add	r2, r3
 810bbdc:	687b      	ldr	r3, [r7, #4]
 810bbde:	685b      	ldr	r3, [r3, #4]
 810bbe0:	fbb2 f3f3 	udiv	r3, r2, r3
 810bbe4:	b29b      	uxth	r3, r3
 810bbe6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bbea:	2b0f      	cmp	r3, #15
 810bbec:	d908      	bls.n	810bc00 <UART_SetConfig+0xa80>
 810bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bbf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bbf4:	d204      	bcs.n	810bc00 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810bbf6:	687b      	ldr	r3, [r7, #4]
 810bbf8:	681b      	ldr	r3, [r3, #0]
 810bbfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810bbfc:	60da      	str	r2, [r3, #12]
 810bbfe:	e002      	b.n	810bc06 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810bc00:	2301      	movs	r3, #1
 810bc02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810bc06:	687b      	ldr	r3, [r7, #4]
 810bc08:	2201      	movs	r2, #1
 810bc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810bc0e:	687b      	ldr	r3, [r7, #4]
 810bc10:	2201      	movs	r2, #1
 810bc12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	2200      	movs	r2, #0
 810bc1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810bc1c:	687b      	ldr	r3, [r7, #4]
 810bc1e:	2200      	movs	r2, #0
 810bc20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810bc22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810bc26:	4618      	mov	r0, r3
 810bc28:	3738      	adds	r7, #56	; 0x38
 810bc2a:	46bd      	mov	sp, r7
 810bc2c:	bdb0      	pop	{r4, r5, r7, pc}
 810bc2e:	bf00      	nop
 810bc30:	58024400 	.word	0x58024400
 810bc34:	03d09000 	.word	0x03d09000
 810bc38:	003d0900 	.word	0x003d0900
 810bc3c:	0810d584 	.word	0x0810d584

0810bc40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810bc40:	b480      	push	{r7}
 810bc42:	b083      	sub	sp, #12
 810bc44:	af00      	add	r7, sp, #0
 810bc46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810bc48:	687b      	ldr	r3, [r7, #4]
 810bc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bc4c:	f003 0301 	and.w	r3, r3, #1
 810bc50:	2b00      	cmp	r3, #0
 810bc52:	d00a      	beq.n	810bc6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810bc54:	687b      	ldr	r3, [r7, #4]
 810bc56:	681b      	ldr	r3, [r3, #0]
 810bc58:	685b      	ldr	r3, [r3, #4]
 810bc5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810bc5e:	687b      	ldr	r3, [r7, #4]
 810bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bc62:	687b      	ldr	r3, [r7, #4]
 810bc64:	681b      	ldr	r3, [r3, #0]
 810bc66:	430a      	orrs	r2, r1
 810bc68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810bc6a:	687b      	ldr	r3, [r7, #4]
 810bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bc6e:	f003 0302 	and.w	r3, r3, #2
 810bc72:	2b00      	cmp	r3, #0
 810bc74:	d00a      	beq.n	810bc8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	681b      	ldr	r3, [r3, #0]
 810bc7a:	685b      	ldr	r3, [r3, #4]
 810bc7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810bc84:	687b      	ldr	r3, [r7, #4]
 810bc86:	681b      	ldr	r3, [r3, #0]
 810bc88:	430a      	orrs	r2, r1
 810bc8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810bc8c:	687b      	ldr	r3, [r7, #4]
 810bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bc90:	f003 0304 	and.w	r3, r3, #4
 810bc94:	2b00      	cmp	r3, #0
 810bc96:	d00a      	beq.n	810bcae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810bc98:	687b      	ldr	r3, [r7, #4]
 810bc9a:	681b      	ldr	r3, [r3, #0]
 810bc9c:	685b      	ldr	r3, [r3, #4]
 810bc9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810bca2:	687b      	ldr	r3, [r7, #4]
 810bca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810bca6:	687b      	ldr	r3, [r7, #4]
 810bca8:	681b      	ldr	r3, [r3, #0]
 810bcaa:	430a      	orrs	r2, r1
 810bcac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810bcae:	687b      	ldr	r3, [r7, #4]
 810bcb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bcb2:	f003 0308 	and.w	r3, r3, #8
 810bcb6:	2b00      	cmp	r3, #0
 810bcb8:	d00a      	beq.n	810bcd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810bcba:	687b      	ldr	r3, [r7, #4]
 810bcbc:	681b      	ldr	r3, [r3, #0]
 810bcbe:	685b      	ldr	r3, [r3, #4]
 810bcc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810bcc4:	687b      	ldr	r3, [r7, #4]
 810bcc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810bcc8:	687b      	ldr	r3, [r7, #4]
 810bcca:	681b      	ldr	r3, [r3, #0]
 810bccc:	430a      	orrs	r2, r1
 810bcce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810bcd0:	687b      	ldr	r3, [r7, #4]
 810bcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bcd4:	f003 0310 	and.w	r3, r3, #16
 810bcd8:	2b00      	cmp	r3, #0
 810bcda:	d00a      	beq.n	810bcf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810bcdc:	687b      	ldr	r3, [r7, #4]
 810bcde:	681b      	ldr	r3, [r3, #0]
 810bce0:	689b      	ldr	r3, [r3, #8]
 810bce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810bce6:	687b      	ldr	r3, [r7, #4]
 810bce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810bcea:	687b      	ldr	r3, [r7, #4]
 810bcec:	681b      	ldr	r3, [r3, #0]
 810bcee:	430a      	orrs	r2, r1
 810bcf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810bcf2:	687b      	ldr	r3, [r7, #4]
 810bcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bcf6:	f003 0320 	and.w	r3, r3, #32
 810bcfa:	2b00      	cmp	r3, #0
 810bcfc:	d00a      	beq.n	810bd14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810bcfe:	687b      	ldr	r3, [r7, #4]
 810bd00:	681b      	ldr	r3, [r3, #0]
 810bd02:	689b      	ldr	r3, [r3, #8]
 810bd04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810bd08:	687b      	ldr	r3, [r7, #4]
 810bd0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810bd0c:	687b      	ldr	r3, [r7, #4]
 810bd0e:	681b      	ldr	r3, [r3, #0]
 810bd10:	430a      	orrs	r2, r1
 810bd12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810bd14:	687b      	ldr	r3, [r7, #4]
 810bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bd1c:	2b00      	cmp	r3, #0
 810bd1e:	d01a      	beq.n	810bd56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810bd20:	687b      	ldr	r3, [r7, #4]
 810bd22:	681b      	ldr	r3, [r3, #0]
 810bd24:	685b      	ldr	r3, [r3, #4]
 810bd26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810bd2a:	687b      	ldr	r3, [r7, #4]
 810bd2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810bd2e:	687b      	ldr	r3, [r7, #4]
 810bd30:	681b      	ldr	r3, [r3, #0]
 810bd32:	430a      	orrs	r2, r1
 810bd34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810bd36:	687b      	ldr	r3, [r7, #4]
 810bd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810bd3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810bd3e:	d10a      	bne.n	810bd56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810bd40:	687b      	ldr	r3, [r7, #4]
 810bd42:	681b      	ldr	r3, [r3, #0]
 810bd44:	685b      	ldr	r3, [r3, #4]
 810bd46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810bd4a:	687b      	ldr	r3, [r7, #4]
 810bd4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810bd4e:	687b      	ldr	r3, [r7, #4]
 810bd50:	681b      	ldr	r3, [r3, #0]
 810bd52:	430a      	orrs	r2, r1
 810bd54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810bd56:	687b      	ldr	r3, [r7, #4]
 810bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810bd5e:	2b00      	cmp	r3, #0
 810bd60:	d00a      	beq.n	810bd78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810bd62:	687b      	ldr	r3, [r7, #4]
 810bd64:	681b      	ldr	r3, [r3, #0]
 810bd66:	685b      	ldr	r3, [r3, #4]
 810bd68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810bd6c:	687b      	ldr	r3, [r7, #4]
 810bd6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810bd70:	687b      	ldr	r3, [r7, #4]
 810bd72:	681b      	ldr	r3, [r3, #0]
 810bd74:	430a      	orrs	r2, r1
 810bd76:	605a      	str	r2, [r3, #4]
  }
}
 810bd78:	bf00      	nop
 810bd7a:	370c      	adds	r7, #12
 810bd7c:	46bd      	mov	sp, r7
 810bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd82:	4770      	bx	lr

0810bd84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810bd84:	b580      	push	{r7, lr}
 810bd86:	b086      	sub	sp, #24
 810bd88:	af02      	add	r7, sp, #8
 810bd8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	2200      	movs	r2, #0
 810bd90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810bd94:	f7f7 fc2c 	bl	81035f0 <HAL_GetTick>
 810bd98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810bd9a:	687b      	ldr	r3, [r7, #4]
 810bd9c:	681b      	ldr	r3, [r3, #0]
 810bd9e:	681b      	ldr	r3, [r3, #0]
 810bda0:	f003 0308 	and.w	r3, r3, #8
 810bda4:	2b08      	cmp	r3, #8
 810bda6:	d10e      	bne.n	810bdc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bda8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810bdac:	9300      	str	r3, [sp, #0]
 810bdae:	68fb      	ldr	r3, [r7, #12]
 810bdb0:	2200      	movs	r2, #0
 810bdb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810bdb6:	6878      	ldr	r0, [r7, #4]
 810bdb8:	f000 f82f 	bl	810be1a <UART_WaitOnFlagUntilTimeout>
 810bdbc:	4603      	mov	r3, r0
 810bdbe:	2b00      	cmp	r3, #0
 810bdc0:	d001      	beq.n	810bdc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bdc2:	2303      	movs	r3, #3
 810bdc4:	e025      	b.n	810be12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810bdc6:	687b      	ldr	r3, [r7, #4]
 810bdc8:	681b      	ldr	r3, [r3, #0]
 810bdca:	681b      	ldr	r3, [r3, #0]
 810bdcc:	f003 0304 	and.w	r3, r3, #4
 810bdd0:	2b04      	cmp	r3, #4
 810bdd2:	d10e      	bne.n	810bdf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bdd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810bdd8:	9300      	str	r3, [sp, #0]
 810bdda:	68fb      	ldr	r3, [r7, #12]
 810bddc:	2200      	movs	r2, #0
 810bdde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810bde2:	6878      	ldr	r0, [r7, #4]
 810bde4:	f000 f819 	bl	810be1a <UART_WaitOnFlagUntilTimeout>
 810bde8:	4603      	mov	r3, r0
 810bdea:	2b00      	cmp	r3, #0
 810bdec:	d001      	beq.n	810bdf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bdee:	2303      	movs	r3, #3
 810bdf0:	e00f      	b.n	810be12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810bdf2:	687b      	ldr	r3, [r7, #4]
 810bdf4:	2220      	movs	r2, #32
 810bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810bdfa:	687b      	ldr	r3, [r7, #4]
 810bdfc:	2220      	movs	r2, #32
 810bdfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810be02:	687b      	ldr	r3, [r7, #4]
 810be04:	2200      	movs	r2, #0
 810be06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810be08:	687b      	ldr	r3, [r7, #4]
 810be0a:	2200      	movs	r2, #0
 810be0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810be10:	2300      	movs	r3, #0
}
 810be12:	4618      	mov	r0, r3
 810be14:	3710      	adds	r7, #16
 810be16:	46bd      	mov	sp, r7
 810be18:	bd80      	pop	{r7, pc}

0810be1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810be1a:	b580      	push	{r7, lr}
 810be1c:	b084      	sub	sp, #16
 810be1e:	af00      	add	r7, sp, #0
 810be20:	60f8      	str	r0, [r7, #12]
 810be22:	60b9      	str	r1, [r7, #8]
 810be24:	603b      	str	r3, [r7, #0]
 810be26:	4613      	mov	r3, r2
 810be28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810be2a:	e062      	b.n	810bef2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810be2c:	69bb      	ldr	r3, [r7, #24]
 810be2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810be32:	d05e      	beq.n	810bef2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810be34:	f7f7 fbdc 	bl	81035f0 <HAL_GetTick>
 810be38:	4602      	mov	r2, r0
 810be3a:	683b      	ldr	r3, [r7, #0]
 810be3c:	1ad3      	subs	r3, r2, r3
 810be3e:	69ba      	ldr	r2, [r7, #24]
 810be40:	429a      	cmp	r2, r3
 810be42:	d302      	bcc.n	810be4a <UART_WaitOnFlagUntilTimeout+0x30>
 810be44:	69bb      	ldr	r3, [r7, #24]
 810be46:	2b00      	cmp	r3, #0
 810be48:	d11d      	bne.n	810be86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810be4a:	68fb      	ldr	r3, [r7, #12]
 810be4c:	681b      	ldr	r3, [r3, #0]
 810be4e:	681a      	ldr	r2, [r3, #0]
 810be50:	68fb      	ldr	r3, [r7, #12]
 810be52:	681b      	ldr	r3, [r3, #0]
 810be54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810be58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810be5a:	68fb      	ldr	r3, [r7, #12]
 810be5c:	681b      	ldr	r3, [r3, #0]
 810be5e:	689a      	ldr	r2, [r3, #8]
 810be60:	68fb      	ldr	r3, [r7, #12]
 810be62:	681b      	ldr	r3, [r3, #0]
 810be64:	f022 0201 	bic.w	r2, r2, #1
 810be68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810be6a:	68fb      	ldr	r3, [r7, #12]
 810be6c:	2220      	movs	r2, #32
 810be6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810be72:	68fb      	ldr	r3, [r7, #12]
 810be74:	2220      	movs	r2, #32
 810be76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810be7a:	68fb      	ldr	r3, [r7, #12]
 810be7c:	2200      	movs	r2, #0
 810be7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810be82:	2303      	movs	r3, #3
 810be84:	e045      	b.n	810bf12 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810be86:	68fb      	ldr	r3, [r7, #12]
 810be88:	681b      	ldr	r3, [r3, #0]
 810be8a:	681b      	ldr	r3, [r3, #0]
 810be8c:	f003 0304 	and.w	r3, r3, #4
 810be90:	2b00      	cmp	r3, #0
 810be92:	d02e      	beq.n	810bef2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810be94:	68fb      	ldr	r3, [r7, #12]
 810be96:	681b      	ldr	r3, [r3, #0]
 810be98:	69db      	ldr	r3, [r3, #28]
 810be9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810be9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810bea2:	d126      	bne.n	810bef2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810bea4:	68fb      	ldr	r3, [r7, #12]
 810bea6:	681b      	ldr	r3, [r3, #0]
 810bea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810beac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810beae:	68fb      	ldr	r3, [r7, #12]
 810beb0:	681b      	ldr	r3, [r3, #0]
 810beb2:	681a      	ldr	r2, [r3, #0]
 810beb4:	68fb      	ldr	r3, [r7, #12]
 810beb6:	681b      	ldr	r3, [r3, #0]
 810beb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810bebc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bebe:	68fb      	ldr	r3, [r7, #12]
 810bec0:	681b      	ldr	r3, [r3, #0]
 810bec2:	689a      	ldr	r2, [r3, #8]
 810bec4:	68fb      	ldr	r3, [r7, #12]
 810bec6:	681b      	ldr	r3, [r3, #0]
 810bec8:	f022 0201 	bic.w	r2, r2, #1
 810becc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810bece:	68fb      	ldr	r3, [r7, #12]
 810bed0:	2220      	movs	r2, #32
 810bed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810bed6:	68fb      	ldr	r3, [r7, #12]
 810bed8:	2220      	movs	r2, #32
 810beda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810bede:	68fb      	ldr	r3, [r7, #12]
 810bee0:	2220      	movs	r2, #32
 810bee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810bee6:	68fb      	ldr	r3, [r7, #12]
 810bee8:	2200      	movs	r2, #0
 810beea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810beee:	2303      	movs	r3, #3
 810bef0:	e00f      	b.n	810bf12 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810bef2:	68fb      	ldr	r3, [r7, #12]
 810bef4:	681b      	ldr	r3, [r3, #0]
 810bef6:	69da      	ldr	r2, [r3, #28]
 810bef8:	68bb      	ldr	r3, [r7, #8]
 810befa:	4013      	ands	r3, r2
 810befc:	68ba      	ldr	r2, [r7, #8]
 810befe:	429a      	cmp	r2, r3
 810bf00:	bf0c      	ite	eq
 810bf02:	2301      	moveq	r3, #1
 810bf04:	2300      	movne	r3, #0
 810bf06:	b2db      	uxtb	r3, r3
 810bf08:	461a      	mov	r2, r3
 810bf0a:	79fb      	ldrb	r3, [r7, #7]
 810bf0c:	429a      	cmp	r2, r3
 810bf0e:	d08d      	beq.n	810be2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810bf10:	2300      	movs	r3, #0
}
 810bf12:	4618      	mov	r0, r3
 810bf14:	3710      	adds	r7, #16
 810bf16:	46bd      	mov	sp, r7
 810bf18:	bd80      	pop	{r7, pc}
	...

0810bf1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810bf1c:	b580      	push	{r7, lr}
 810bf1e:	b084      	sub	sp, #16
 810bf20:	af00      	add	r7, sp, #0
 810bf22:	60f8      	str	r0, [r7, #12]
 810bf24:	60b9      	str	r1, [r7, #8]
 810bf26:	4613      	mov	r3, r2
 810bf28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810bf2a:	68fb      	ldr	r3, [r7, #12]
 810bf2c:	68ba      	ldr	r2, [r7, #8]
 810bf2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810bf30:	68fb      	ldr	r3, [r7, #12]
 810bf32:	88fa      	ldrh	r2, [r7, #6]
 810bf34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bf38:	68fb      	ldr	r3, [r7, #12]
 810bf3a:	2200      	movs	r2, #0
 810bf3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810bf40:	68fb      	ldr	r3, [r7, #12]
 810bf42:	2222      	movs	r2, #34	; 0x22
 810bf44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810bf48:	68fb      	ldr	r3, [r7, #12]
 810bf4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bf4c:	2b00      	cmp	r3, #0
 810bf4e:	d02c      	beq.n	810bfaa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810bf50:	68fb      	ldr	r3, [r7, #12]
 810bf52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bf54:	4a25      	ldr	r2, [pc, #148]	; (810bfec <UART_Start_Receive_DMA+0xd0>)
 810bf56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810bf58:	68fb      	ldr	r3, [r7, #12]
 810bf5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bf5c:	4a24      	ldr	r2, [pc, #144]	; (810bff0 <UART_Start_Receive_DMA+0xd4>)
 810bf5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810bf60:	68fb      	ldr	r3, [r7, #12]
 810bf62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bf64:	4a23      	ldr	r2, [pc, #140]	; (810bff4 <UART_Start_Receive_DMA+0xd8>)
 810bf66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810bf68:	68fb      	ldr	r3, [r7, #12]
 810bf6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bf6c:	2200      	movs	r2, #0
 810bf6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810bf70:	68fb      	ldr	r3, [r7, #12]
 810bf72:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810bf74:	68fb      	ldr	r3, [r7, #12]
 810bf76:	681b      	ldr	r3, [r3, #0]
 810bf78:	3324      	adds	r3, #36	; 0x24
 810bf7a:	4619      	mov	r1, r3
 810bf7c:	68fb      	ldr	r3, [r7, #12]
 810bf7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810bf80:	461a      	mov	r2, r3
 810bf82:	88fb      	ldrh	r3, [r7, #6]
 810bf84:	f7f8 f85e 	bl	8104044 <HAL_DMA_Start_IT>
 810bf88:	4603      	mov	r3, r0
 810bf8a:	2b00      	cmp	r3, #0
 810bf8c:	d00d      	beq.n	810bfaa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810bf8e:	68fb      	ldr	r3, [r7, #12]
 810bf90:	2210      	movs	r2, #16
 810bf92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810bf96:	68fb      	ldr	r3, [r7, #12]
 810bf98:	2200      	movs	r2, #0
 810bf9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810bf9e:	68fb      	ldr	r3, [r7, #12]
 810bfa0:	2220      	movs	r2, #32
 810bfa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810bfa6:	2301      	movs	r3, #1
 810bfa8:	e01c      	b.n	810bfe4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810bfaa:	68fb      	ldr	r3, [r7, #12]
 810bfac:	2200      	movs	r2, #0
 810bfae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810bfb2:	68fb      	ldr	r3, [r7, #12]
 810bfb4:	681b      	ldr	r3, [r3, #0]
 810bfb6:	681a      	ldr	r2, [r3, #0]
 810bfb8:	68fb      	ldr	r3, [r7, #12]
 810bfba:	681b      	ldr	r3, [r3, #0]
 810bfbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810bfc0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bfc2:	68fb      	ldr	r3, [r7, #12]
 810bfc4:	681b      	ldr	r3, [r3, #0]
 810bfc6:	689a      	ldr	r2, [r3, #8]
 810bfc8:	68fb      	ldr	r3, [r7, #12]
 810bfca:	681b      	ldr	r3, [r3, #0]
 810bfcc:	f042 0201 	orr.w	r2, r2, #1
 810bfd0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810bfd2:	68fb      	ldr	r3, [r7, #12]
 810bfd4:	681b      	ldr	r3, [r3, #0]
 810bfd6:	689a      	ldr	r2, [r3, #8]
 810bfd8:	68fb      	ldr	r3, [r7, #12]
 810bfda:	681b      	ldr	r3, [r3, #0]
 810bfdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bfe0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810bfe2:	2300      	movs	r3, #0
}
 810bfe4:	4618      	mov	r0, r3
 810bfe6:	3710      	adds	r7, #16
 810bfe8:	46bd      	mov	sp, r7
 810bfea:	bd80      	pop	{r7, pc}
 810bfec:	0810c105 	.word	0x0810c105
 810bff0:	0810c19b 	.word	0x0810c19b
 810bff4:	0810c1d3 	.word	0x0810c1d3

0810bff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810bff8:	b480      	push	{r7}
 810bffa:	b083      	sub	sp, #12
 810bffc:	af00      	add	r7, sp, #0
 810bffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810c000:	687b      	ldr	r3, [r7, #4]
 810c002:	681b      	ldr	r3, [r3, #0]
 810c004:	681a      	ldr	r2, [r3, #0]
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	681b      	ldr	r3, [r3, #0]
 810c00a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810c00e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810c010:	687b      	ldr	r3, [r7, #4]
 810c012:	681b      	ldr	r3, [r3, #0]
 810c014:	689a      	ldr	r2, [r3, #8]
 810c016:	687b      	ldr	r3, [r7, #4]
 810c018:	681b      	ldr	r3, [r3, #0]
 810c01a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810c01e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c020:	687b      	ldr	r3, [r7, #4]
 810c022:	2220      	movs	r2, #32
 810c024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810c028:	bf00      	nop
 810c02a:	370c      	adds	r7, #12
 810c02c:	46bd      	mov	sp, r7
 810c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c032:	4770      	bx	lr

0810c034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c034:	b480      	push	{r7}
 810c036:	b083      	sub	sp, #12
 810c038:	af00      	add	r7, sp, #0
 810c03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c03c:	687b      	ldr	r3, [r7, #4]
 810c03e:	681b      	ldr	r3, [r3, #0]
 810c040:	681a      	ldr	r2, [r3, #0]
 810c042:	687b      	ldr	r3, [r7, #4]
 810c044:	681b      	ldr	r3, [r3, #0]
 810c046:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810c04a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c04c:	687b      	ldr	r3, [r7, #4]
 810c04e:	681b      	ldr	r3, [r3, #0]
 810c050:	689b      	ldr	r3, [r3, #8]
 810c052:	687a      	ldr	r2, [r7, #4]
 810c054:	6812      	ldr	r2, [r2, #0]
 810c056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c05a:	f023 0301 	bic.w	r3, r3, #1
 810c05e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c060:	687b      	ldr	r3, [r7, #4]
 810c062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c064:	2b01      	cmp	r3, #1
 810c066:	d107      	bne.n	810c078 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c068:	687b      	ldr	r3, [r7, #4]
 810c06a:	681b      	ldr	r3, [r3, #0]
 810c06c:	681a      	ldr	r2, [r3, #0]
 810c06e:	687b      	ldr	r3, [r7, #4]
 810c070:	681b      	ldr	r3, [r3, #0]
 810c072:	f022 0210 	bic.w	r2, r2, #16
 810c076:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	2220      	movs	r2, #32
 810c07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c080:	687b      	ldr	r3, [r7, #4]
 810c082:	2200      	movs	r2, #0
 810c084:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	2200      	movs	r2, #0
 810c08a:	671a      	str	r2, [r3, #112]	; 0x70
}
 810c08c:	bf00      	nop
 810c08e:	370c      	adds	r7, #12
 810c090:	46bd      	mov	sp, r7
 810c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c096:	4770      	bx	lr

0810c098 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810c098:	b580      	push	{r7, lr}
 810c09a:	b084      	sub	sp, #16
 810c09c:	af00      	add	r7, sp, #0
 810c09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c0a0:	687b      	ldr	r3, [r7, #4]
 810c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c0a4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c0a6:	687b      	ldr	r3, [r7, #4]
 810c0a8:	69db      	ldr	r3, [r3, #28]
 810c0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c0ae:	d014      	beq.n	810c0da <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810c0b0:	68fb      	ldr	r3, [r7, #12]
 810c0b2:	2200      	movs	r2, #0
 810c0b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810c0b8:	68fb      	ldr	r3, [r7, #12]
 810c0ba:	681b      	ldr	r3, [r3, #0]
 810c0bc:	689a      	ldr	r2, [r3, #8]
 810c0be:	68fb      	ldr	r3, [r7, #12]
 810c0c0:	681b      	ldr	r3, [r3, #0]
 810c0c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c0c6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c0c8:	68fb      	ldr	r3, [r7, #12]
 810c0ca:	681b      	ldr	r3, [r3, #0]
 810c0cc:	681a      	ldr	r2, [r3, #0]
 810c0ce:	68fb      	ldr	r3, [r7, #12]
 810c0d0:	681b      	ldr	r3, [r3, #0]
 810c0d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c0d6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c0d8:	e002      	b.n	810c0e0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810c0da:	68f8      	ldr	r0, [r7, #12]
 810c0dc:	f7f7 f818 	bl	8103110 <HAL_UART_TxCpltCallback>
}
 810c0e0:	bf00      	nop
 810c0e2:	3710      	adds	r7, #16
 810c0e4:	46bd      	mov	sp, r7
 810c0e6:	bd80      	pop	{r7, pc}

0810c0e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c0e8:	b580      	push	{r7, lr}
 810c0ea:	b084      	sub	sp, #16
 810c0ec:	af00      	add	r7, sp, #0
 810c0ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c0f0:	687b      	ldr	r3, [r7, #4]
 810c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c0f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810c0f6:	68f8      	ldr	r0, [r7, #12]
 810c0f8:	f7ff f818 	bl	810b12c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c0fc:	bf00      	nop
 810c0fe:	3710      	adds	r7, #16
 810c100:	46bd      	mov	sp, r7
 810c102:	bd80      	pop	{r7, pc}

0810c104 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810c104:	b580      	push	{r7, lr}
 810c106:	b084      	sub	sp, #16
 810c108:	af00      	add	r7, sp, #0
 810c10a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c10c:	687b      	ldr	r3, [r7, #4]
 810c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c110:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c112:	687b      	ldr	r3, [r7, #4]
 810c114:	69db      	ldr	r3, [r3, #28]
 810c116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c11a:	d02b      	beq.n	810c174 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810c11c:	68fb      	ldr	r3, [r7, #12]
 810c11e:	2200      	movs	r2, #0
 810c120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c124:	68fb      	ldr	r3, [r7, #12]
 810c126:	681b      	ldr	r3, [r3, #0]
 810c128:	681a      	ldr	r2, [r3, #0]
 810c12a:	68fb      	ldr	r3, [r7, #12]
 810c12c:	681b      	ldr	r3, [r3, #0]
 810c12e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810c132:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c134:	68fb      	ldr	r3, [r7, #12]
 810c136:	681b      	ldr	r3, [r3, #0]
 810c138:	689a      	ldr	r2, [r3, #8]
 810c13a:	68fb      	ldr	r3, [r7, #12]
 810c13c:	681b      	ldr	r3, [r3, #0]
 810c13e:	f022 0201 	bic.w	r2, r2, #1
 810c142:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c144:	68fb      	ldr	r3, [r7, #12]
 810c146:	681b      	ldr	r3, [r3, #0]
 810c148:	689a      	ldr	r2, [r3, #8]
 810c14a:	68fb      	ldr	r3, [r7, #12]
 810c14c:	681b      	ldr	r3, [r3, #0]
 810c14e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c152:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810c154:	68fb      	ldr	r3, [r7, #12]
 810c156:	2220      	movs	r2, #32
 810c158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c15c:	68fb      	ldr	r3, [r7, #12]
 810c15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c160:	2b01      	cmp	r3, #1
 810c162:	d107      	bne.n	810c174 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c164:	68fb      	ldr	r3, [r7, #12]
 810c166:	681b      	ldr	r3, [r3, #0]
 810c168:	681a      	ldr	r2, [r3, #0]
 810c16a:	68fb      	ldr	r3, [r7, #12]
 810c16c:	681b      	ldr	r3, [r3, #0]
 810c16e:	f022 0210 	bic.w	r2, r2, #16
 810c172:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c174:	68fb      	ldr	r3, [r7, #12]
 810c176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c178:	2b01      	cmp	r3, #1
 810c17a:	d107      	bne.n	810c18c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810c17c:	68fb      	ldr	r3, [r7, #12]
 810c17e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c182:	4619      	mov	r1, r3
 810c184:	68f8      	ldr	r0, [r7, #12]
 810c186:	f7fe ffef 	bl	810b168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c18a:	e002      	b.n	810c192 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810c18c:	68f8      	ldr	r0, [r7, #12]
 810c18e:	f7f6 ffc9 	bl	8103124 <HAL_UART_RxCpltCallback>
}
 810c192:	bf00      	nop
 810c194:	3710      	adds	r7, #16
 810c196:	46bd      	mov	sp, r7
 810c198:	bd80      	pop	{r7, pc}

0810c19a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c19a:	b580      	push	{r7, lr}
 810c19c:	b084      	sub	sp, #16
 810c19e:	af00      	add	r7, sp, #0
 810c1a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c1a2:	687b      	ldr	r3, [r7, #4]
 810c1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c1a8:	68fb      	ldr	r3, [r7, #12]
 810c1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c1ac:	2b01      	cmp	r3, #1
 810c1ae:	d109      	bne.n	810c1c4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810c1b0:	68fb      	ldr	r3, [r7, #12]
 810c1b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c1b6:	085b      	lsrs	r3, r3, #1
 810c1b8:	b29b      	uxth	r3, r3
 810c1ba:	4619      	mov	r1, r3
 810c1bc:	68f8      	ldr	r0, [r7, #12]
 810c1be:	f7fe ffd3 	bl	810b168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c1c2:	e002      	b.n	810c1ca <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810c1c4:	68f8      	ldr	r0, [r7, #12]
 810c1c6:	f7fe ffbb 	bl	810b140 <HAL_UART_RxHalfCpltCallback>
}
 810c1ca:	bf00      	nop
 810c1cc:	3710      	adds	r7, #16
 810c1ce:	46bd      	mov	sp, r7
 810c1d0:	bd80      	pop	{r7, pc}

0810c1d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810c1d2:	b580      	push	{r7, lr}
 810c1d4:	b086      	sub	sp, #24
 810c1d6:	af00      	add	r7, sp, #0
 810c1d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c1da:	687b      	ldr	r3, [r7, #4]
 810c1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c1de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810c1e0:	697b      	ldr	r3, [r7, #20]
 810c1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810c1e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810c1e8:	697b      	ldr	r3, [r7, #20]
 810c1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810c1ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810c1f0:	697b      	ldr	r3, [r7, #20]
 810c1f2:	681b      	ldr	r3, [r3, #0]
 810c1f4:	689b      	ldr	r3, [r3, #8]
 810c1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c1fa:	2b80      	cmp	r3, #128	; 0x80
 810c1fc:	d109      	bne.n	810c212 <UART_DMAError+0x40>
 810c1fe:	693b      	ldr	r3, [r7, #16]
 810c200:	2b21      	cmp	r3, #33	; 0x21
 810c202:	d106      	bne.n	810c212 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810c204:	697b      	ldr	r3, [r7, #20]
 810c206:	2200      	movs	r2, #0
 810c208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810c20c:	6978      	ldr	r0, [r7, #20]
 810c20e:	f7ff fef3 	bl	810bff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810c212:	697b      	ldr	r3, [r7, #20]
 810c214:	681b      	ldr	r3, [r3, #0]
 810c216:	689b      	ldr	r3, [r3, #8]
 810c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c21c:	2b40      	cmp	r3, #64	; 0x40
 810c21e:	d109      	bne.n	810c234 <UART_DMAError+0x62>
 810c220:	68fb      	ldr	r3, [r7, #12]
 810c222:	2b22      	cmp	r3, #34	; 0x22
 810c224:	d106      	bne.n	810c234 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810c226:	697b      	ldr	r3, [r7, #20]
 810c228:	2200      	movs	r2, #0
 810c22a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810c22e:	6978      	ldr	r0, [r7, #20]
 810c230:	f7ff ff00 	bl	810c034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810c234:	697b      	ldr	r3, [r7, #20]
 810c236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c23a:	f043 0210 	orr.w	r2, r3, #16
 810c23e:	697b      	ldr	r3, [r7, #20]
 810c240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c244:	6978      	ldr	r0, [r7, #20]
 810c246:	f7fe ff85 	bl	810b154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c24a:	bf00      	nop
 810c24c:	3718      	adds	r7, #24
 810c24e:	46bd      	mov	sp, r7
 810c250:	bd80      	pop	{r7, pc}

0810c252 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810c252:	b580      	push	{r7, lr}
 810c254:	b084      	sub	sp, #16
 810c256:	af00      	add	r7, sp, #0
 810c258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c25a:	687b      	ldr	r3, [r7, #4]
 810c25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c25e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810c260:	68fb      	ldr	r3, [r7, #12]
 810c262:	2200      	movs	r2, #0
 810c264:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810c268:	68fb      	ldr	r3, [r7, #12]
 810c26a:	2200      	movs	r2, #0
 810c26c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c270:	68f8      	ldr	r0, [r7, #12]
 810c272:	f7fe ff6f 	bl	810b154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c276:	bf00      	nop
 810c278:	3710      	adds	r7, #16
 810c27a:	46bd      	mov	sp, r7
 810c27c:	bd80      	pop	{r7, pc}

0810c27e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810c27e:	b580      	push	{r7, lr}
 810c280:	b082      	sub	sp, #8
 810c282:	af00      	add	r7, sp, #0
 810c284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c286:	687b      	ldr	r3, [r7, #4]
 810c288:	681b      	ldr	r3, [r3, #0]
 810c28a:	681a      	ldr	r2, [r3, #0]
 810c28c:	687b      	ldr	r3, [r7, #4]
 810c28e:	681b      	ldr	r3, [r3, #0]
 810c290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c294:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c296:	687b      	ldr	r3, [r7, #4]
 810c298:	2220      	movs	r2, #32
 810c29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810c29e:	687b      	ldr	r3, [r7, #4]
 810c2a0:	2200      	movs	r2, #0
 810c2a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810c2a4:	6878      	ldr	r0, [r7, #4]
 810c2a6:	f7f6 ff33 	bl	8103110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c2aa:	bf00      	nop
 810c2ac:	3708      	adds	r7, #8
 810c2ae:	46bd      	mov	sp, r7
 810c2b0:	bd80      	pop	{r7, pc}

0810c2b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810c2b2:	b480      	push	{r7}
 810c2b4:	b083      	sub	sp, #12
 810c2b6:	af00      	add	r7, sp, #0
 810c2b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810c2ba:	bf00      	nop
 810c2bc:	370c      	adds	r7, #12
 810c2be:	46bd      	mov	sp, r7
 810c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2c4:	4770      	bx	lr

0810c2c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810c2c6:	b480      	push	{r7}
 810c2c8:	b083      	sub	sp, #12
 810c2ca:	af00      	add	r7, sp, #0
 810c2cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810c2ce:	bf00      	nop
 810c2d0:	370c      	adds	r7, #12
 810c2d2:	46bd      	mov	sp, r7
 810c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2d8:	4770      	bx	lr

0810c2da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810c2da:	b480      	push	{r7}
 810c2dc:	b083      	sub	sp, #12
 810c2de:	af00      	add	r7, sp, #0
 810c2e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810c2e2:	bf00      	nop
 810c2e4:	370c      	adds	r7, #12
 810c2e6:	46bd      	mov	sp, r7
 810c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2ec:	4770      	bx	lr

0810c2ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c2ee:	b480      	push	{r7}
 810c2f0:	b085      	sub	sp, #20
 810c2f2:	af00      	add	r7, sp, #0
 810c2f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c2f6:	687b      	ldr	r3, [r7, #4]
 810c2f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c2fc:	2b01      	cmp	r3, #1
 810c2fe:	d101      	bne.n	810c304 <HAL_UARTEx_DisableFifoMode+0x16>
 810c300:	2302      	movs	r3, #2
 810c302:	e027      	b.n	810c354 <HAL_UARTEx_DisableFifoMode+0x66>
 810c304:	687b      	ldr	r3, [r7, #4]
 810c306:	2201      	movs	r2, #1
 810c308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c30c:	687b      	ldr	r3, [r7, #4]
 810c30e:	2224      	movs	r2, #36	; 0x24
 810c310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c314:	687b      	ldr	r3, [r7, #4]
 810c316:	681b      	ldr	r3, [r3, #0]
 810c318:	681b      	ldr	r3, [r3, #0]
 810c31a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c31c:	687b      	ldr	r3, [r7, #4]
 810c31e:	681b      	ldr	r3, [r3, #0]
 810c320:	681a      	ldr	r2, [r3, #0]
 810c322:	687b      	ldr	r3, [r7, #4]
 810c324:	681b      	ldr	r3, [r3, #0]
 810c326:	f022 0201 	bic.w	r2, r2, #1
 810c32a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c32c:	68fb      	ldr	r3, [r7, #12]
 810c32e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810c332:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c334:	687b      	ldr	r3, [r7, #4]
 810c336:	2200      	movs	r2, #0
 810c338:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	681b      	ldr	r3, [r3, #0]
 810c33e:	68fa      	ldr	r2, [r7, #12]
 810c340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c342:	687b      	ldr	r3, [r7, #4]
 810c344:	2220      	movs	r2, #32
 810c346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c34a:	687b      	ldr	r3, [r7, #4]
 810c34c:	2200      	movs	r2, #0
 810c34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c352:	2300      	movs	r3, #0
}
 810c354:	4618      	mov	r0, r3
 810c356:	3714      	adds	r7, #20
 810c358:	46bd      	mov	sp, r7
 810c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c35e:	4770      	bx	lr

0810c360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c360:	b580      	push	{r7, lr}
 810c362:	b084      	sub	sp, #16
 810c364:	af00      	add	r7, sp, #0
 810c366:	6078      	str	r0, [r7, #4]
 810c368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c36a:	687b      	ldr	r3, [r7, #4]
 810c36c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c370:	2b01      	cmp	r3, #1
 810c372:	d101      	bne.n	810c378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c374:	2302      	movs	r3, #2
 810c376:	e02d      	b.n	810c3d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c378:	687b      	ldr	r3, [r7, #4]
 810c37a:	2201      	movs	r2, #1
 810c37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c380:	687b      	ldr	r3, [r7, #4]
 810c382:	2224      	movs	r2, #36	; 0x24
 810c384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c388:	687b      	ldr	r3, [r7, #4]
 810c38a:	681b      	ldr	r3, [r3, #0]
 810c38c:	681b      	ldr	r3, [r3, #0]
 810c38e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c390:	687b      	ldr	r3, [r7, #4]
 810c392:	681b      	ldr	r3, [r3, #0]
 810c394:	681a      	ldr	r2, [r3, #0]
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	681b      	ldr	r3, [r3, #0]
 810c39a:	f022 0201 	bic.w	r2, r2, #1
 810c39e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c3a0:	687b      	ldr	r3, [r7, #4]
 810c3a2:	681b      	ldr	r3, [r3, #0]
 810c3a4:	689b      	ldr	r3, [r3, #8]
 810c3a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810c3aa:	687b      	ldr	r3, [r7, #4]
 810c3ac:	681b      	ldr	r3, [r3, #0]
 810c3ae:	683a      	ldr	r2, [r7, #0]
 810c3b0:	430a      	orrs	r2, r1
 810c3b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c3b4:	6878      	ldr	r0, [r7, #4]
 810c3b6:	f000 f84f 	bl	810c458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c3ba:	687b      	ldr	r3, [r7, #4]
 810c3bc:	681b      	ldr	r3, [r3, #0]
 810c3be:	68fa      	ldr	r2, [r7, #12]
 810c3c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c3c2:	687b      	ldr	r3, [r7, #4]
 810c3c4:	2220      	movs	r2, #32
 810c3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c3ca:	687b      	ldr	r3, [r7, #4]
 810c3cc:	2200      	movs	r2, #0
 810c3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c3d2:	2300      	movs	r3, #0
}
 810c3d4:	4618      	mov	r0, r3
 810c3d6:	3710      	adds	r7, #16
 810c3d8:	46bd      	mov	sp, r7
 810c3da:	bd80      	pop	{r7, pc}

0810c3dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c3dc:	b580      	push	{r7, lr}
 810c3de:	b084      	sub	sp, #16
 810c3e0:	af00      	add	r7, sp, #0
 810c3e2:	6078      	str	r0, [r7, #4]
 810c3e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c3e6:	687b      	ldr	r3, [r7, #4]
 810c3e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c3ec:	2b01      	cmp	r3, #1
 810c3ee:	d101      	bne.n	810c3f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c3f0:	2302      	movs	r3, #2
 810c3f2:	e02d      	b.n	810c450 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c3f4:	687b      	ldr	r3, [r7, #4]
 810c3f6:	2201      	movs	r2, #1
 810c3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c3fc:	687b      	ldr	r3, [r7, #4]
 810c3fe:	2224      	movs	r2, #36	; 0x24
 810c400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c404:	687b      	ldr	r3, [r7, #4]
 810c406:	681b      	ldr	r3, [r3, #0]
 810c408:	681b      	ldr	r3, [r3, #0]
 810c40a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c40c:	687b      	ldr	r3, [r7, #4]
 810c40e:	681b      	ldr	r3, [r3, #0]
 810c410:	681a      	ldr	r2, [r3, #0]
 810c412:	687b      	ldr	r3, [r7, #4]
 810c414:	681b      	ldr	r3, [r3, #0]
 810c416:	f022 0201 	bic.w	r2, r2, #1
 810c41a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c41c:	687b      	ldr	r3, [r7, #4]
 810c41e:	681b      	ldr	r3, [r3, #0]
 810c420:	689b      	ldr	r3, [r3, #8]
 810c422:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810c426:	687b      	ldr	r3, [r7, #4]
 810c428:	681b      	ldr	r3, [r3, #0]
 810c42a:	683a      	ldr	r2, [r7, #0]
 810c42c:	430a      	orrs	r2, r1
 810c42e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c430:	6878      	ldr	r0, [r7, #4]
 810c432:	f000 f811 	bl	810c458 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c436:	687b      	ldr	r3, [r7, #4]
 810c438:	681b      	ldr	r3, [r3, #0]
 810c43a:	68fa      	ldr	r2, [r7, #12]
 810c43c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c43e:	687b      	ldr	r3, [r7, #4]
 810c440:	2220      	movs	r2, #32
 810c442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c446:	687b      	ldr	r3, [r7, #4]
 810c448:	2200      	movs	r2, #0
 810c44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c44e:	2300      	movs	r3, #0
}
 810c450:	4618      	mov	r0, r3
 810c452:	3710      	adds	r7, #16
 810c454:	46bd      	mov	sp, r7
 810c456:	bd80      	pop	{r7, pc}

0810c458 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c458:	b480      	push	{r7}
 810c45a:	b085      	sub	sp, #20
 810c45c:	af00      	add	r7, sp, #0
 810c45e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c460:	687b      	ldr	r3, [r7, #4]
 810c462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c464:	2b00      	cmp	r3, #0
 810c466:	d108      	bne.n	810c47a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c468:	687b      	ldr	r3, [r7, #4]
 810c46a:	2201      	movs	r2, #1
 810c46c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	2201      	movs	r2, #1
 810c474:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c478:	e031      	b.n	810c4de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c47a:	2310      	movs	r3, #16
 810c47c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c47e:	2310      	movs	r3, #16
 810c480:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c482:	687b      	ldr	r3, [r7, #4]
 810c484:	681b      	ldr	r3, [r3, #0]
 810c486:	689b      	ldr	r3, [r3, #8]
 810c488:	0e5b      	lsrs	r3, r3, #25
 810c48a:	b2db      	uxtb	r3, r3
 810c48c:	f003 0307 	and.w	r3, r3, #7
 810c490:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c492:	687b      	ldr	r3, [r7, #4]
 810c494:	681b      	ldr	r3, [r3, #0]
 810c496:	689b      	ldr	r3, [r3, #8]
 810c498:	0f5b      	lsrs	r3, r3, #29
 810c49a:	b2db      	uxtb	r3, r3
 810c49c:	f003 0307 	and.w	r3, r3, #7
 810c4a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c4a2:	7bbb      	ldrb	r3, [r7, #14]
 810c4a4:	7b3a      	ldrb	r2, [r7, #12]
 810c4a6:	4911      	ldr	r1, [pc, #68]	; (810c4ec <UARTEx_SetNbDataToProcess+0x94>)
 810c4a8:	5c8a      	ldrb	r2, [r1, r2]
 810c4aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c4ae:	7b3a      	ldrb	r2, [r7, #12]
 810c4b0:	490f      	ldr	r1, [pc, #60]	; (810c4f0 <UARTEx_SetNbDataToProcess+0x98>)
 810c4b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c4b4:	fb93 f3f2 	sdiv	r3, r3, r2
 810c4b8:	b29a      	uxth	r2, r3
 810c4ba:	687b      	ldr	r3, [r7, #4]
 810c4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c4c0:	7bfb      	ldrb	r3, [r7, #15]
 810c4c2:	7b7a      	ldrb	r2, [r7, #13]
 810c4c4:	4909      	ldr	r1, [pc, #36]	; (810c4ec <UARTEx_SetNbDataToProcess+0x94>)
 810c4c6:	5c8a      	ldrb	r2, [r1, r2]
 810c4c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c4cc:	7b7a      	ldrb	r2, [r7, #13]
 810c4ce:	4908      	ldr	r1, [pc, #32]	; (810c4f0 <UARTEx_SetNbDataToProcess+0x98>)
 810c4d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c4d2:	fb93 f3f2 	sdiv	r3, r3, r2
 810c4d6:	b29a      	uxth	r2, r3
 810c4d8:	687b      	ldr	r3, [r7, #4]
 810c4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810c4de:	bf00      	nop
 810c4e0:	3714      	adds	r7, #20
 810c4e2:	46bd      	mov	sp, r7
 810c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4e8:	4770      	bx	lr
 810c4ea:	bf00      	nop
 810c4ec:	0810d59c 	.word	0x0810d59c
 810c4f0:	0810d5a4 	.word	0x0810d5a4

0810c4f4 <__errno>:
 810c4f4:	4b01      	ldr	r3, [pc, #4]	; (810c4fc <__errno+0x8>)
 810c4f6:	6818      	ldr	r0, [r3, #0]
 810c4f8:	4770      	bx	lr
 810c4fa:	bf00      	nop
 810c4fc:	10000010 	.word	0x10000010

0810c500 <__libc_init_array>:
 810c500:	b570      	push	{r4, r5, r6, lr}
 810c502:	4d0d      	ldr	r5, [pc, #52]	; (810c538 <__libc_init_array+0x38>)
 810c504:	4c0d      	ldr	r4, [pc, #52]	; (810c53c <__libc_init_array+0x3c>)
 810c506:	1b64      	subs	r4, r4, r5
 810c508:	10a4      	asrs	r4, r4, #2
 810c50a:	2600      	movs	r6, #0
 810c50c:	42a6      	cmp	r6, r4
 810c50e:	d109      	bne.n	810c524 <__libc_init_array+0x24>
 810c510:	4d0b      	ldr	r5, [pc, #44]	; (810c540 <__libc_init_array+0x40>)
 810c512:	4c0c      	ldr	r4, [pc, #48]	; (810c544 <__libc_init_array+0x44>)
 810c514:	f000 ffd6 	bl	810d4c4 <_init>
 810c518:	1b64      	subs	r4, r4, r5
 810c51a:	10a4      	asrs	r4, r4, #2
 810c51c:	2600      	movs	r6, #0
 810c51e:	42a6      	cmp	r6, r4
 810c520:	d105      	bne.n	810c52e <__libc_init_array+0x2e>
 810c522:	bd70      	pop	{r4, r5, r6, pc}
 810c524:	f855 3b04 	ldr.w	r3, [r5], #4
 810c528:	4798      	blx	r3
 810c52a:	3601      	adds	r6, #1
 810c52c:	e7ee      	b.n	810c50c <__libc_init_array+0xc>
 810c52e:	f855 3b04 	ldr.w	r3, [r5], #4
 810c532:	4798      	blx	r3
 810c534:	3601      	adds	r6, #1
 810c536:	e7f2      	b.n	810c51e <__libc_init_array+0x1e>
 810c538:	0810d5f8 	.word	0x0810d5f8
 810c53c:	0810d5f8 	.word	0x0810d5f8
 810c540:	0810d5f8 	.word	0x0810d5f8
 810c544:	0810d5fc 	.word	0x0810d5fc

0810c548 <memset>:
 810c548:	4402      	add	r2, r0
 810c54a:	4603      	mov	r3, r0
 810c54c:	4293      	cmp	r3, r2
 810c54e:	d100      	bne.n	810c552 <memset+0xa>
 810c550:	4770      	bx	lr
 810c552:	f803 1b01 	strb.w	r1, [r3], #1
 810c556:	e7f9      	b.n	810c54c <memset+0x4>

0810c558 <pow>:
 810c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c55c:	ec59 8b10 	vmov	r8, r9, d0
 810c560:	ec57 6b11 	vmov	r6, r7, d1
 810c564:	f000 f8a8 	bl	810c6b8 <__ieee754_pow>
 810c568:	4b4e      	ldr	r3, [pc, #312]	; (810c6a4 <pow+0x14c>)
 810c56a:	f993 3000 	ldrsb.w	r3, [r3]
 810c56e:	3301      	adds	r3, #1
 810c570:	ec55 4b10 	vmov	r4, r5, d0
 810c574:	d015      	beq.n	810c5a2 <pow+0x4a>
 810c576:	4632      	mov	r2, r6
 810c578:	463b      	mov	r3, r7
 810c57a:	4630      	mov	r0, r6
 810c57c:	4639      	mov	r1, r7
 810c57e:	f7f4 fb01 	bl	8100b84 <__aeabi_dcmpun>
 810c582:	b970      	cbnz	r0, 810c5a2 <pow+0x4a>
 810c584:	4642      	mov	r2, r8
 810c586:	464b      	mov	r3, r9
 810c588:	4640      	mov	r0, r8
 810c58a:	4649      	mov	r1, r9
 810c58c:	f7f4 fafa 	bl	8100b84 <__aeabi_dcmpun>
 810c590:	2200      	movs	r2, #0
 810c592:	2300      	movs	r3, #0
 810c594:	b148      	cbz	r0, 810c5aa <pow+0x52>
 810c596:	4630      	mov	r0, r6
 810c598:	4639      	mov	r1, r7
 810c59a:	f7f4 fac1 	bl	8100b20 <__aeabi_dcmpeq>
 810c59e:	2800      	cmp	r0, #0
 810c5a0:	d17d      	bne.n	810c69e <pow+0x146>
 810c5a2:	ec45 4b10 	vmov	d0, r4, r5
 810c5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c5aa:	4640      	mov	r0, r8
 810c5ac:	4649      	mov	r1, r9
 810c5ae:	f7f4 fab7 	bl	8100b20 <__aeabi_dcmpeq>
 810c5b2:	b1e0      	cbz	r0, 810c5ee <pow+0x96>
 810c5b4:	2200      	movs	r2, #0
 810c5b6:	2300      	movs	r3, #0
 810c5b8:	4630      	mov	r0, r6
 810c5ba:	4639      	mov	r1, r7
 810c5bc:	f7f4 fab0 	bl	8100b20 <__aeabi_dcmpeq>
 810c5c0:	2800      	cmp	r0, #0
 810c5c2:	d16c      	bne.n	810c69e <pow+0x146>
 810c5c4:	ec47 6b10 	vmov	d0, r6, r7
 810c5c8:	f000 fe55 	bl	810d276 <finite>
 810c5cc:	2800      	cmp	r0, #0
 810c5ce:	d0e8      	beq.n	810c5a2 <pow+0x4a>
 810c5d0:	2200      	movs	r2, #0
 810c5d2:	2300      	movs	r3, #0
 810c5d4:	4630      	mov	r0, r6
 810c5d6:	4639      	mov	r1, r7
 810c5d8:	f7f4 faac 	bl	8100b34 <__aeabi_dcmplt>
 810c5dc:	2800      	cmp	r0, #0
 810c5de:	d0e0      	beq.n	810c5a2 <pow+0x4a>
 810c5e0:	f7ff ff88 	bl	810c4f4 <__errno>
 810c5e4:	2321      	movs	r3, #33	; 0x21
 810c5e6:	6003      	str	r3, [r0, #0]
 810c5e8:	2400      	movs	r4, #0
 810c5ea:	4d2f      	ldr	r5, [pc, #188]	; (810c6a8 <pow+0x150>)
 810c5ec:	e7d9      	b.n	810c5a2 <pow+0x4a>
 810c5ee:	ec45 4b10 	vmov	d0, r4, r5
 810c5f2:	f000 fe40 	bl	810d276 <finite>
 810c5f6:	bbb8      	cbnz	r0, 810c668 <pow+0x110>
 810c5f8:	ec49 8b10 	vmov	d0, r8, r9
 810c5fc:	f000 fe3b 	bl	810d276 <finite>
 810c600:	b390      	cbz	r0, 810c668 <pow+0x110>
 810c602:	ec47 6b10 	vmov	d0, r6, r7
 810c606:	f000 fe36 	bl	810d276 <finite>
 810c60a:	b368      	cbz	r0, 810c668 <pow+0x110>
 810c60c:	4622      	mov	r2, r4
 810c60e:	462b      	mov	r3, r5
 810c610:	4620      	mov	r0, r4
 810c612:	4629      	mov	r1, r5
 810c614:	f7f4 fab6 	bl	8100b84 <__aeabi_dcmpun>
 810c618:	b160      	cbz	r0, 810c634 <pow+0xdc>
 810c61a:	f7ff ff6b 	bl	810c4f4 <__errno>
 810c61e:	2321      	movs	r3, #33	; 0x21
 810c620:	6003      	str	r3, [r0, #0]
 810c622:	2200      	movs	r2, #0
 810c624:	2300      	movs	r3, #0
 810c626:	4610      	mov	r0, r2
 810c628:	4619      	mov	r1, r3
 810c62a:	f7f4 f93b 	bl	81008a4 <__aeabi_ddiv>
 810c62e:	4604      	mov	r4, r0
 810c630:	460d      	mov	r5, r1
 810c632:	e7b6      	b.n	810c5a2 <pow+0x4a>
 810c634:	f7ff ff5e 	bl	810c4f4 <__errno>
 810c638:	2322      	movs	r3, #34	; 0x22
 810c63a:	6003      	str	r3, [r0, #0]
 810c63c:	2200      	movs	r2, #0
 810c63e:	2300      	movs	r3, #0
 810c640:	4640      	mov	r0, r8
 810c642:	4649      	mov	r1, r9
 810c644:	f7f4 fa76 	bl	8100b34 <__aeabi_dcmplt>
 810c648:	2400      	movs	r4, #0
 810c64a:	b158      	cbz	r0, 810c664 <pow+0x10c>
 810c64c:	ec47 6b10 	vmov	d0, r6, r7
 810c650:	f000 fe26 	bl	810d2a0 <rint>
 810c654:	4632      	mov	r2, r6
 810c656:	ec51 0b10 	vmov	r0, r1, d0
 810c65a:	463b      	mov	r3, r7
 810c65c:	f7f4 fa60 	bl	8100b20 <__aeabi_dcmpeq>
 810c660:	2800      	cmp	r0, #0
 810c662:	d0c2      	beq.n	810c5ea <pow+0x92>
 810c664:	4d11      	ldr	r5, [pc, #68]	; (810c6ac <pow+0x154>)
 810c666:	e79c      	b.n	810c5a2 <pow+0x4a>
 810c668:	2200      	movs	r2, #0
 810c66a:	2300      	movs	r3, #0
 810c66c:	4620      	mov	r0, r4
 810c66e:	4629      	mov	r1, r5
 810c670:	f7f4 fa56 	bl	8100b20 <__aeabi_dcmpeq>
 810c674:	2800      	cmp	r0, #0
 810c676:	d094      	beq.n	810c5a2 <pow+0x4a>
 810c678:	ec49 8b10 	vmov	d0, r8, r9
 810c67c:	f000 fdfb 	bl	810d276 <finite>
 810c680:	2800      	cmp	r0, #0
 810c682:	d08e      	beq.n	810c5a2 <pow+0x4a>
 810c684:	ec47 6b10 	vmov	d0, r6, r7
 810c688:	f000 fdf5 	bl	810d276 <finite>
 810c68c:	2800      	cmp	r0, #0
 810c68e:	d088      	beq.n	810c5a2 <pow+0x4a>
 810c690:	f7ff ff30 	bl	810c4f4 <__errno>
 810c694:	2322      	movs	r3, #34	; 0x22
 810c696:	6003      	str	r3, [r0, #0]
 810c698:	2400      	movs	r4, #0
 810c69a:	2500      	movs	r5, #0
 810c69c:	e781      	b.n	810c5a2 <pow+0x4a>
 810c69e:	4d04      	ldr	r5, [pc, #16]	; (810c6b0 <pow+0x158>)
 810c6a0:	2400      	movs	r4, #0
 810c6a2:	e77e      	b.n	810c5a2 <pow+0x4a>
 810c6a4:	10000074 	.word	0x10000074
 810c6a8:	fff00000 	.word	0xfff00000
 810c6ac:	7ff00000 	.word	0x7ff00000
 810c6b0:	3ff00000 	.word	0x3ff00000
 810c6b4:	00000000 	.word	0x00000000

0810c6b8 <__ieee754_pow>:
 810c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c6bc:	ed2d 8b06 	vpush	{d8-d10}
 810c6c0:	b08d      	sub	sp, #52	; 0x34
 810c6c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 810c6c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810c6ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810c6ce:	ea56 0100 	orrs.w	r1, r6, r0
 810c6d2:	ec53 2b10 	vmov	r2, r3, d0
 810c6d6:	f000 84d1 	beq.w	810d07c <__ieee754_pow+0x9c4>
 810c6da:	497f      	ldr	r1, [pc, #508]	; (810c8d8 <__ieee754_pow+0x220>)
 810c6dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810c6e0:	428c      	cmp	r4, r1
 810c6e2:	ee10 8a10 	vmov	r8, s0
 810c6e6:	4699      	mov	r9, r3
 810c6e8:	dc09      	bgt.n	810c6fe <__ieee754_pow+0x46>
 810c6ea:	d103      	bne.n	810c6f4 <__ieee754_pow+0x3c>
 810c6ec:	b97a      	cbnz	r2, 810c70e <__ieee754_pow+0x56>
 810c6ee:	42a6      	cmp	r6, r4
 810c6f0:	dd02      	ble.n	810c6f8 <__ieee754_pow+0x40>
 810c6f2:	e00c      	b.n	810c70e <__ieee754_pow+0x56>
 810c6f4:	428e      	cmp	r6, r1
 810c6f6:	dc02      	bgt.n	810c6fe <__ieee754_pow+0x46>
 810c6f8:	428e      	cmp	r6, r1
 810c6fa:	d110      	bne.n	810c71e <__ieee754_pow+0x66>
 810c6fc:	b178      	cbz	r0, 810c71e <__ieee754_pow+0x66>
 810c6fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c702:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c706:	ea54 0308 	orrs.w	r3, r4, r8
 810c70a:	f000 84b7 	beq.w	810d07c <__ieee754_pow+0x9c4>
 810c70e:	4873      	ldr	r0, [pc, #460]	; (810c8dc <__ieee754_pow+0x224>)
 810c710:	b00d      	add	sp, #52	; 0x34
 810c712:	ecbd 8b06 	vpop	{d8-d10}
 810c716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c71a:	f000 bdb9 	b.w	810d290 <nan>
 810c71e:	f1b9 0f00 	cmp.w	r9, #0
 810c722:	da36      	bge.n	810c792 <__ieee754_pow+0xda>
 810c724:	496e      	ldr	r1, [pc, #440]	; (810c8e0 <__ieee754_pow+0x228>)
 810c726:	428e      	cmp	r6, r1
 810c728:	dc51      	bgt.n	810c7ce <__ieee754_pow+0x116>
 810c72a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810c72e:	428e      	cmp	r6, r1
 810c730:	f340 84af 	ble.w	810d092 <__ieee754_pow+0x9da>
 810c734:	1531      	asrs	r1, r6, #20
 810c736:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810c73a:	2914      	cmp	r1, #20
 810c73c:	dd0f      	ble.n	810c75e <__ieee754_pow+0xa6>
 810c73e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810c742:	fa20 fc01 	lsr.w	ip, r0, r1
 810c746:	fa0c f101 	lsl.w	r1, ip, r1
 810c74a:	4281      	cmp	r1, r0
 810c74c:	f040 84a1 	bne.w	810d092 <__ieee754_pow+0x9da>
 810c750:	f00c 0c01 	and.w	ip, ip, #1
 810c754:	f1cc 0102 	rsb	r1, ip, #2
 810c758:	9100      	str	r1, [sp, #0]
 810c75a:	b180      	cbz	r0, 810c77e <__ieee754_pow+0xc6>
 810c75c:	e059      	b.n	810c812 <__ieee754_pow+0x15a>
 810c75e:	2800      	cmp	r0, #0
 810c760:	d155      	bne.n	810c80e <__ieee754_pow+0x156>
 810c762:	f1c1 0114 	rsb	r1, r1, #20
 810c766:	fa46 fc01 	asr.w	ip, r6, r1
 810c76a:	fa0c f101 	lsl.w	r1, ip, r1
 810c76e:	42b1      	cmp	r1, r6
 810c770:	f040 848c 	bne.w	810d08c <__ieee754_pow+0x9d4>
 810c774:	f00c 0c01 	and.w	ip, ip, #1
 810c778:	f1cc 0102 	rsb	r1, ip, #2
 810c77c:	9100      	str	r1, [sp, #0]
 810c77e:	4959      	ldr	r1, [pc, #356]	; (810c8e4 <__ieee754_pow+0x22c>)
 810c780:	428e      	cmp	r6, r1
 810c782:	d12d      	bne.n	810c7e0 <__ieee754_pow+0x128>
 810c784:	2f00      	cmp	r7, #0
 810c786:	da79      	bge.n	810c87c <__ieee754_pow+0x1c4>
 810c788:	4956      	ldr	r1, [pc, #344]	; (810c8e4 <__ieee754_pow+0x22c>)
 810c78a:	2000      	movs	r0, #0
 810c78c:	f7f4 f88a 	bl	81008a4 <__aeabi_ddiv>
 810c790:	e016      	b.n	810c7c0 <__ieee754_pow+0x108>
 810c792:	2100      	movs	r1, #0
 810c794:	9100      	str	r1, [sp, #0]
 810c796:	2800      	cmp	r0, #0
 810c798:	d13b      	bne.n	810c812 <__ieee754_pow+0x15a>
 810c79a:	494f      	ldr	r1, [pc, #316]	; (810c8d8 <__ieee754_pow+0x220>)
 810c79c:	428e      	cmp	r6, r1
 810c79e:	d1ee      	bne.n	810c77e <__ieee754_pow+0xc6>
 810c7a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810c7a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810c7a8:	ea53 0308 	orrs.w	r3, r3, r8
 810c7ac:	f000 8466 	beq.w	810d07c <__ieee754_pow+0x9c4>
 810c7b0:	4b4d      	ldr	r3, [pc, #308]	; (810c8e8 <__ieee754_pow+0x230>)
 810c7b2:	429c      	cmp	r4, r3
 810c7b4:	dd0d      	ble.n	810c7d2 <__ieee754_pow+0x11a>
 810c7b6:	2f00      	cmp	r7, #0
 810c7b8:	f280 8464 	bge.w	810d084 <__ieee754_pow+0x9cc>
 810c7bc:	2000      	movs	r0, #0
 810c7be:	2100      	movs	r1, #0
 810c7c0:	ec41 0b10 	vmov	d0, r0, r1
 810c7c4:	b00d      	add	sp, #52	; 0x34
 810c7c6:	ecbd 8b06 	vpop	{d8-d10}
 810c7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c7ce:	2102      	movs	r1, #2
 810c7d0:	e7e0      	b.n	810c794 <__ieee754_pow+0xdc>
 810c7d2:	2f00      	cmp	r7, #0
 810c7d4:	daf2      	bge.n	810c7bc <__ieee754_pow+0x104>
 810c7d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810c7da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810c7de:	e7ef      	b.n	810c7c0 <__ieee754_pow+0x108>
 810c7e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810c7e4:	d104      	bne.n	810c7f0 <__ieee754_pow+0x138>
 810c7e6:	4610      	mov	r0, r2
 810c7e8:	4619      	mov	r1, r3
 810c7ea:	f7f3 ff31 	bl	8100650 <__aeabi_dmul>
 810c7ee:	e7e7      	b.n	810c7c0 <__ieee754_pow+0x108>
 810c7f0:	493e      	ldr	r1, [pc, #248]	; (810c8ec <__ieee754_pow+0x234>)
 810c7f2:	428f      	cmp	r7, r1
 810c7f4:	d10d      	bne.n	810c812 <__ieee754_pow+0x15a>
 810c7f6:	f1b9 0f00 	cmp.w	r9, #0
 810c7fa:	db0a      	blt.n	810c812 <__ieee754_pow+0x15a>
 810c7fc:	ec43 2b10 	vmov	d0, r2, r3
 810c800:	b00d      	add	sp, #52	; 0x34
 810c802:	ecbd 8b06 	vpop	{d8-d10}
 810c806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c80a:	f000 bc77 	b.w	810d0fc <__ieee754_sqrt>
 810c80e:	2100      	movs	r1, #0
 810c810:	9100      	str	r1, [sp, #0]
 810c812:	ec43 2b10 	vmov	d0, r2, r3
 810c816:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c81a:	f000 fd23 	bl	810d264 <fabs>
 810c81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c822:	ec51 0b10 	vmov	r0, r1, d0
 810c826:	f1b8 0f00 	cmp.w	r8, #0
 810c82a:	d12a      	bne.n	810c882 <__ieee754_pow+0x1ca>
 810c82c:	b12c      	cbz	r4, 810c83a <__ieee754_pow+0x182>
 810c82e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810c8e4 <__ieee754_pow+0x22c>
 810c832:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810c836:	45e6      	cmp	lr, ip
 810c838:	d123      	bne.n	810c882 <__ieee754_pow+0x1ca>
 810c83a:	2f00      	cmp	r7, #0
 810c83c:	da05      	bge.n	810c84a <__ieee754_pow+0x192>
 810c83e:	4602      	mov	r2, r0
 810c840:	460b      	mov	r3, r1
 810c842:	2000      	movs	r0, #0
 810c844:	4927      	ldr	r1, [pc, #156]	; (810c8e4 <__ieee754_pow+0x22c>)
 810c846:	f7f4 f82d 	bl	81008a4 <__aeabi_ddiv>
 810c84a:	f1b9 0f00 	cmp.w	r9, #0
 810c84e:	dab7      	bge.n	810c7c0 <__ieee754_pow+0x108>
 810c850:	9b00      	ldr	r3, [sp, #0]
 810c852:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c856:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c85a:	4323      	orrs	r3, r4
 810c85c:	d108      	bne.n	810c870 <__ieee754_pow+0x1b8>
 810c85e:	4602      	mov	r2, r0
 810c860:	460b      	mov	r3, r1
 810c862:	4610      	mov	r0, r2
 810c864:	4619      	mov	r1, r3
 810c866:	f7f3 fd3b 	bl	81002e0 <__aeabi_dsub>
 810c86a:	4602      	mov	r2, r0
 810c86c:	460b      	mov	r3, r1
 810c86e:	e78d      	b.n	810c78c <__ieee754_pow+0xd4>
 810c870:	9b00      	ldr	r3, [sp, #0]
 810c872:	2b01      	cmp	r3, #1
 810c874:	d1a4      	bne.n	810c7c0 <__ieee754_pow+0x108>
 810c876:	4602      	mov	r2, r0
 810c878:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c87c:	4610      	mov	r0, r2
 810c87e:	4619      	mov	r1, r3
 810c880:	e79e      	b.n	810c7c0 <__ieee754_pow+0x108>
 810c882:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810c886:	f10c 35ff 	add.w	r5, ip, #4294967295
 810c88a:	950a      	str	r5, [sp, #40]	; 0x28
 810c88c:	9d00      	ldr	r5, [sp, #0]
 810c88e:	46ac      	mov	ip, r5
 810c890:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810c892:	ea5c 0505 	orrs.w	r5, ip, r5
 810c896:	d0e4      	beq.n	810c862 <__ieee754_pow+0x1aa>
 810c898:	4b15      	ldr	r3, [pc, #84]	; (810c8f0 <__ieee754_pow+0x238>)
 810c89a:	429e      	cmp	r6, r3
 810c89c:	f340 80fc 	ble.w	810ca98 <__ieee754_pow+0x3e0>
 810c8a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810c8a4:	429e      	cmp	r6, r3
 810c8a6:	4b10      	ldr	r3, [pc, #64]	; (810c8e8 <__ieee754_pow+0x230>)
 810c8a8:	dd07      	ble.n	810c8ba <__ieee754_pow+0x202>
 810c8aa:	429c      	cmp	r4, r3
 810c8ac:	dc0a      	bgt.n	810c8c4 <__ieee754_pow+0x20c>
 810c8ae:	2f00      	cmp	r7, #0
 810c8b0:	da84      	bge.n	810c7bc <__ieee754_pow+0x104>
 810c8b2:	a307      	add	r3, pc, #28	; (adr r3, 810c8d0 <__ieee754_pow+0x218>)
 810c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8b8:	e795      	b.n	810c7e6 <__ieee754_pow+0x12e>
 810c8ba:	429c      	cmp	r4, r3
 810c8bc:	dbf7      	blt.n	810c8ae <__ieee754_pow+0x1f6>
 810c8be:	4b09      	ldr	r3, [pc, #36]	; (810c8e4 <__ieee754_pow+0x22c>)
 810c8c0:	429c      	cmp	r4, r3
 810c8c2:	dd17      	ble.n	810c8f4 <__ieee754_pow+0x23c>
 810c8c4:	2f00      	cmp	r7, #0
 810c8c6:	dcf4      	bgt.n	810c8b2 <__ieee754_pow+0x1fa>
 810c8c8:	e778      	b.n	810c7bc <__ieee754_pow+0x104>
 810c8ca:	bf00      	nop
 810c8cc:	f3af 8000 	nop.w
 810c8d0:	8800759c 	.word	0x8800759c
 810c8d4:	7e37e43c 	.word	0x7e37e43c
 810c8d8:	7ff00000 	.word	0x7ff00000
 810c8dc:	0810d5ac 	.word	0x0810d5ac
 810c8e0:	433fffff 	.word	0x433fffff
 810c8e4:	3ff00000 	.word	0x3ff00000
 810c8e8:	3fefffff 	.word	0x3fefffff
 810c8ec:	3fe00000 	.word	0x3fe00000
 810c8f0:	41e00000 	.word	0x41e00000
 810c8f4:	4b64      	ldr	r3, [pc, #400]	; (810ca88 <__ieee754_pow+0x3d0>)
 810c8f6:	2200      	movs	r2, #0
 810c8f8:	f7f3 fcf2 	bl	81002e0 <__aeabi_dsub>
 810c8fc:	a356      	add	r3, pc, #344	; (adr r3, 810ca58 <__ieee754_pow+0x3a0>)
 810c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c902:	4604      	mov	r4, r0
 810c904:	460d      	mov	r5, r1
 810c906:	f7f3 fea3 	bl	8100650 <__aeabi_dmul>
 810c90a:	a355      	add	r3, pc, #340	; (adr r3, 810ca60 <__ieee754_pow+0x3a8>)
 810c90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c910:	4606      	mov	r6, r0
 810c912:	460f      	mov	r7, r1
 810c914:	4620      	mov	r0, r4
 810c916:	4629      	mov	r1, r5
 810c918:	f7f3 fe9a 	bl	8100650 <__aeabi_dmul>
 810c91c:	4b5b      	ldr	r3, [pc, #364]	; (810ca8c <__ieee754_pow+0x3d4>)
 810c91e:	4682      	mov	sl, r0
 810c920:	468b      	mov	fp, r1
 810c922:	2200      	movs	r2, #0
 810c924:	4620      	mov	r0, r4
 810c926:	4629      	mov	r1, r5
 810c928:	f7f3 fe92 	bl	8100650 <__aeabi_dmul>
 810c92c:	4602      	mov	r2, r0
 810c92e:	460b      	mov	r3, r1
 810c930:	a14d      	add	r1, pc, #308	; (adr r1, 810ca68 <__ieee754_pow+0x3b0>)
 810c932:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c936:	f7f3 fcd3 	bl	81002e0 <__aeabi_dsub>
 810c93a:	4622      	mov	r2, r4
 810c93c:	462b      	mov	r3, r5
 810c93e:	f7f3 fe87 	bl	8100650 <__aeabi_dmul>
 810c942:	4602      	mov	r2, r0
 810c944:	460b      	mov	r3, r1
 810c946:	2000      	movs	r0, #0
 810c948:	4951      	ldr	r1, [pc, #324]	; (810ca90 <__ieee754_pow+0x3d8>)
 810c94a:	f7f3 fcc9 	bl	81002e0 <__aeabi_dsub>
 810c94e:	4622      	mov	r2, r4
 810c950:	4680      	mov	r8, r0
 810c952:	4689      	mov	r9, r1
 810c954:	462b      	mov	r3, r5
 810c956:	4620      	mov	r0, r4
 810c958:	4629      	mov	r1, r5
 810c95a:	f7f3 fe79 	bl	8100650 <__aeabi_dmul>
 810c95e:	4602      	mov	r2, r0
 810c960:	460b      	mov	r3, r1
 810c962:	4640      	mov	r0, r8
 810c964:	4649      	mov	r1, r9
 810c966:	f7f3 fe73 	bl	8100650 <__aeabi_dmul>
 810c96a:	a341      	add	r3, pc, #260	; (adr r3, 810ca70 <__ieee754_pow+0x3b8>)
 810c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c970:	f7f3 fe6e 	bl	8100650 <__aeabi_dmul>
 810c974:	4602      	mov	r2, r0
 810c976:	460b      	mov	r3, r1
 810c978:	4650      	mov	r0, sl
 810c97a:	4659      	mov	r1, fp
 810c97c:	f7f3 fcb0 	bl	81002e0 <__aeabi_dsub>
 810c980:	4602      	mov	r2, r0
 810c982:	460b      	mov	r3, r1
 810c984:	4680      	mov	r8, r0
 810c986:	4689      	mov	r9, r1
 810c988:	4630      	mov	r0, r6
 810c98a:	4639      	mov	r1, r7
 810c98c:	f7f3 fcaa 	bl	81002e4 <__adddf3>
 810c990:	2400      	movs	r4, #0
 810c992:	4632      	mov	r2, r6
 810c994:	463b      	mov	r3, r7
 810c996:	4620      	mov	r0, r4
 810c998:	460d      	mov	r5, r1
 810c99a:	f7f3 fca1 	bl	81002e0 <__aeabi_dsub>
 810c99e:	4602      	mov	r2, r0
 810c9a0:	460b      	mov	r3, r1
 810c9a2:	4640      	mov	r0, r8
 810c9a4:	4649      	mov	r1, r9
 810c9a6:	f7f3 fc9b 	bl	81002e0 <__aeabi_dsub>
 810c9aa:	9b00      	ldr	r3, [sp, #0]
 810c9ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c9ae:	3b01      	subs	r3, #1
 810c9b0:	4313      	orrs	r3, r2
 810c9b2:	4682      	mov	sl, r0
 810c9b4:	468b      	mov	fp, r1
 810c9b6:	f040 81f1 	bne.w	810cd9c <__ieee754_pow+0x6e4>
 810c9ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810ca78 <__ieee754_pow+0x3c0>
 810c9be:	eeb0 8a47 	vmov.f32	s16, s14
 810c9c2:	eef0 8a67 	vmov.f32	s17, s15
 810c9c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c9ca:	2600      	movs	r6, #0
 810c9cc:	4632      	mov	r2, r6
 810c9ce:	463b      	mov	r3, r7
 810c9d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c9d4:	f7f3 fc84 	bl	81002e0 <__aeabi_dsub>
 810c9d8:	4622      	mov	r2, r4
 810c9da:	462b      	mov	r3, r5
 810c9dc:	f7f3 fe38 	bl	8100650 <__aeabi_dmul>
 810c9e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c9e4:	4680      	mov	r8, r0
 810c9e6:	4689      	mov	r9, r1
 810c9e8:	4650      	mov	r0, sl
 810c9ea:	4659      	mov	r1, fp
 810c9ec:	f7f3 fe30 	bl	8100650 <__aeabi_dmul>
 810c9f0:	4602      	mov	r2, r0
 810c9f2:	460b      	mov	r3, r1
 810c9f4:	4640      	mov	r0, r8
 810c9f6:	4649      	mov	r1, r9
 810c9f8:	f7f3 fc74 	bl	81002e4 <__adddf3>
 810c9fc:	4632      	mov	r2, r6
 810c9fe:	463b      	mov	r3, r7
 810ca00:	4680      	mov	r8, r0
 810ca02:	4689      	mov	r9, r1
 810ca04:	4620      	mov	r0, r4
 810ca06:	4629      	mov	r1, r5
 810ca08:	f7f3 fe22 	bl	8100650 <__aeabi_dmul>
 810ca0c:	460b      	mov	r3, r1
 810ca0e:	4604      	mov	r4, r0
 810ca10:	460d      	mov	r5, r1
 810ca12:	4602      	mov	r2, r0
 810ca14:	4649      	mov	r1, r9
 810ca16:	4640      	mov	r0, r8
 810ca18:	f7f3 fc64 	bl	81002e4 <__adddf3>
 810ca1c:	4b1d      	ldr	r3, [pc, #116]	; (810ca94 <__ieee754_pow+0x3dc>)
 810ca1e:	4299      	cmp	r1, r3
 810ca20:	ec45 4b19 	vmov	d9, r4, r5
 810ca24:	4606      	mov	r6, r0
 810ca26:	460f      	mov	r7, r1
 810ca28:	468b      	mov	fp, r1
 810ca2a:	f340 82fe 	ble.w	810d02a <__ieee754_pow+0x972>
 810ca2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810ca32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810ca36:	4303      	orrs	r3, r0
 810ca38:	f000 81f0 	beq.w	810ce1c <__ieee754_pow+0x764>
 810ca3c:	a310      	add	r3, pc, #64	; (adr r3, 810ca80 <__ieee754_pow+0x3c8>)
 810ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca42:	ec51 0b18 	vmov	r0, r1, d8
 810ca46:	f7f3 fe03 	bl	8100650 <__aeabi_dmul>
 810ca4a:	a30d      	add	r3, pc, #52	; (adr r3, 810ca80 <__ieee754_pow+0x3c8>)
 810ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca50:	e6cb      	b.n	810c7ea <__ieee754_pow+0x132>
 810ca52:	bf00      	nop
 810ca54:	f3af 8000 	nop.w
 810ca58:	60000000 	.word	0x60000000
 810ca5c:	3ff71547 	.word	0x3ff71547
 810ca60:	f85ddf44 	.word	0xf85ddf44
 810ca64:	3e54ae0b 	.word	0x3e54ae0b
 810ca68:	55555555 	.word	0x55555555
 810ca6c:	3fd55555 	.word	0x3fd55555
 810ca70:	652b82fe 	.word	0x652b82fe
 810ca74:	3ff71547 	.word	0x3ff71547
 810ca78:	00000000 	.word	0x00000000
 810ca7c:	bff00000 	.word	0xbff00000
 810ca80:	8800759c 	.word	0x8800759c
 810ca84:	7e37e43c 	.word	0x7e37e43c
 810ca88:	3ff00000 	.word	0x3ff00000
 810ca8c:	3fd00000 	.word	0x3fd00000
 810ca90:	3fe00000 	.word	0x3fe00000
 810ca94:	408fffff 	.word	0x408fffff
 810ca98:	4bd7      	ldr	r3, [pc, #860]	; (810cdf8 <__ieee754_pow+0x740>)
 810ca9a:	ea03 0309 	and.w	r3, r3, r9
 810ca9e:	2200      	movs	r2, #0
 810caa0:	b92b      	cbnz	r3, 810caae <__ieee754_pow+0x3f6>
 810caa2:	4bd6      	ldr	r3, [pc, #856]	; (810cdfc <__ieee754_pow+0x744>)
 810caa4:	f7f3 fdd4 	bl	8100650 <__aeabi_dmul>
 810caa8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810caac:	460c      	mov	r4, r1
 810caae:	1523      	asrs	r3, r4, #20
 810cab0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810cab4:	4413      	add	r3, r2
 810cab6:	9309      	str	r3, [sp, #36]	; 0x24
 810cab8:	4bd1      	ldr	r3, [pc, #836]	; (810ce00 <__ieee754_pow+0x748>)
 810caba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810cabe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810cac2:	429c      	cmp	r4, r3
 810cac4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810cac8:	dd08      	ble.n	810cadc <__ieee754_pow+0x424>
 810caca:	4bce      	ldr	r3, [pc, #824]	; (810ce04 <__ieee754_pow+0x74c>)
 810cacc:	429c      	cmp	r4, r3
 810cace:	f340 8163 	ble.w	810cd98 <__ieee754_pow+0x6e0>
 810cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cad4:	3301      	adds	r3, #1
 810cad6:	9309      	str	r3, [sp, #36]	; 0x24
 810cad8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810cadc:	2400      	movs	r4, #0
 810cade:	00e3      	lsls	r3, r4, #3
 810cae0:	930b      	str	r3, [sp, #44]	; 0x2c
 810cae2:	4bc9      	ldr	r3, [pc, #804]	; (810ce08 <__ieee754_pow+0x750>)
 810cae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810cae8:	ed93 7b00 	vldr	d7, [r3]
 810caec:	4629      	mov	r1, r5
 810caee:	ec53 2b17 	vmov	r2, r3, d7
 810caf2:	eeb0 8a47 	vmov.f32	s16, s14
 810caf6:	eef0 8a67 	vmov.f32	s17, s15
 810cafa:	4682      	mov	sl, r0
 810cafc:	f7f3 fbf0 	bl	81002e0 <__aeabi_dsub>
 810cb00:	4652      	mov	r2, sl
 810cb02:	4606      	mov	r6, r0
 810cb04:	460f      	mov	r7, r1
 810cb06:	462b      	mov	r3, r5
 810cb08:	ec51 0b18 	vmov	r0, r1, d8
 810cb0c:	f7f3 fbea 	bl	81002e4 <__adddf3>
 810cb10:	4602      	mov	r2, r0
 810cb12:	460b      	mov	r3, r1
 810cb14:	2000      	movs	r0, #0
 810cb16:	49bd      	ldr	r1, [pc, #756]	; (810ce0c <__ieee754_pow+0x754>)
 810cb18:	f7f3 fec4 	bl	81008a4 <__aeabi_ddiv>
 810cb1c:	ec41 0b19 	vmov	d9, r0, r1
 810cb20:	4602      	mov	r2, r0
 810cb22:	460b      	mov	r3, r1
 810cb24:	4630      	mov	r0, r6
 810cb26:	4639      	mov	r1, r7
 810cb28:	f7f3 fd92 	bl	8100650 <__aeabi_dmul>
 810cb2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810cb30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cb34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810cb38:	2300      	movs	r3, #0
 810cb3a:	9304      	str	r3, [sp, #16]
 810cb3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810cb40:	46ab      	mov	fp, r5
 810cb42:	106d      	asrs	r5, r5, #1
 810cb44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810cb48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810cb4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810cb50:	2200      	movs	r2, #0
 810cb52:	4640      	mov	r0, r8
 810cb54:	4649      	mov	r1, r9
 810cb56:	4614      	mov	r4, r2
 810cb58:	461d      	mov	r5, r3
 810cb5a:	f7f3 fd79 	bl	8100650 <__aeabi_dmul>
 810cb5e:	4602      	mov	r2, r0
 810cb60:	460b      	mov	r3, r1
 810cb62:	4630      	mov	r0, r6
 810cb64:	4639      	mov	r1, r7
 810cb66:	f7f3 fbbb 	bl	81002e0 <__aeabi_dsub>
 810cb6a:	ec53 2b18 	vmov	r2, r3, d8
 810cb6e:	4606      	mov	r6, r0
 810cb70:	460f      	mov	r7, r1
 810cb72:	4620      	mov	r0, r4
 810cb74:	4629      	mov	r1, r5
 810cb76:	f7f3 fbb3 	bl	81002e0 <__aeabi_dsub>
 810cb7a:	4602      	mov	r2, r0
 810cb7c:	460b      	mov	r3, r1
 810cb7e:	4650      	mov	r0, sl
 810cb80:	4659      	mov	r1, fp
 810cb82:	f7f3 fbad 	bl	81002e0 <__aeabi_dsub>
 810cb86:	4642      	mov	r2, r8
 810cb88:	464b      	mov	r3, r9
 810cb8a:	f7f3 fd61 	bl	8100650 <__aeabi_dmul>
 810cb8e:	4602      	mov	r2, r0
 810cb90:	460b      	mov	r3, r1
 810cb92:	4630      	mov	r0, r6
 810cb94:	4639      	mov	r1, r7
 810cb96:	f7f3 fba3 	bl	81002e0 <__aeabi_dsub>
 810cb9a:	ec53 2b19 	vmov	r2, r3, d9
 810cb9e:	f7f3 fd57 	bl	8100650 <__aeabi_dmul>
 810cba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cba6:	ec41 0b18 	vmov	d8, r0, r1
 810cbaa:	4610      	mov	r0, r2
 810cbac:	4619      	mov	r1, r3
 810cbae:	f7f3 fd4f 	bl	8100650 <__aeabi_dmul>
 810cbb2:	a37d      	add	r3, pc, #500	; (adr r3, 810cda8 <__ieee754_pow+0x6f0>)
 810cbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbb8:	4604      	mov	r4, r0
 810cbba:	460d      	mov	r5, r1
 810cbbc:	f7f3 fd48 	bl	8100650 <__aeabi_dmul>
 810cbc0:	a37b      	add	r3, pc, #492	; (adr r3, 810cdb0 <__ieee754_pow+0x6f8>)
 810cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbc6:	f7f3 fb8d 	bl	81002e4 <__adddf3>
 810cbca:	4622      	mov	r2, r4
 810cbcc:	462b      	mov	r3, r5
 810cbce:	f7f3 fd3f 	bl	8100650 <__aeabi_dmul>
 810cbd2:	a379      	add	r3, pc, #484	; (adr r3, 810cdb8 <__ieee754_pow+0x700>)
 810cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbd8:	f7f3 fb84 	bl	81002e4 <__adddf3>
 810cbdc:	4622      	mov	r2, r4
 810cbde:	462b      	mov	r3, r5
 810cbe0:	f7f3 fd36 	bl	8100650 <__aeabi_dmul>
 810cbe4:	a376      	add	r3, pc, #472	; (adr r3, 810cdc0 <__ieee754_pow+0x708>)
 810cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbea:	f7f3 fb7b 	bl	81002e4 <__adddf3>
 810cbee:	4622      	mov	r2, r4
 810cbf0:	462b      	mov	r3, r5
 810cbf2:	f7f3 fd2d 	bl	8100650 <__aeabi_dmul>
 810cbf6:	a374      	add	r3, pc, #464	; (adr r3, 810cdc8 <__ieee754_pow+0x710>)
 810cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbfc:	f7f3 fb72 	bl	81002e4 <__adddf3>
 810cc00:	4622      	mov	r2, r4
 810cc02:	462b      	mov	r3, r5
 810cc04:	f7f3 fd24 	bl	8100650 <__aeabi_dmul>
 810cc08:	a371      	add	r3, pc, #452	; (adr r3, 810cdd0 <__ieee754_pow+0x718>)
 810cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc0e:	f7f3 fb69 	bl	81002e4 <__adddf3>
 810cc12:	4622      	mov	r2, r4
 810cc14:	4606      	mov	r6, r0
 810cc16:	460f      	mov	r7, r1
 810cc18:	462b      	mov	r3, r5
 810cc1a:	4620      	mov	r0, r4
 810cc1c:	4629      	mov	r1, r5
 810cc1e:	f7f3 fd17 	bl	8100650 <__aeabi_dmul>
 810cc22:	4602      	mov	r2, r0
 810cc24:	460b      	mov	r3, r1
 810cc26:	4630      	mov	r0, r6
 810cc28:	4639      	mov	r1, r7
 810cc2a:	f7f3 fd11 	bl	8100650 <__aeabi_dmul>
 810cc2e:	4642      	mov	r2, r8
 810cc30:	4604      	mov	r4, r0
 810cc32:	460d      	mov	r5, r1
 810cc34:	464b      	mov	r3, r9
 810cc36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810cc3a:	f7f3 fb53 	bl	81002e4 <__adddf3>
 810cc3e:	ec53 2b18 	vmov	r2, r3, d8
 810cc42:	f7f3 fd05 	bl	8100650 <__aeabi_dmul>
 810cc46:	4622      	mov	r2, r4
 810cc48:	462b      	mov	r3, r5
 810cc4a:	f7f3 fb4b 	bl	81002e4 <__adddf3>
 810cc4e:	4642      	mov	r2, r8
 810cc50:	4682      	mov	sl, r0
 810cc52:	468b      	mov	fp, r1
 810cc54:	464b      	mov	r3, r9
 810cc56:	4640      	mov	r0, r8
 810cc58:	4649      	mov	r1, r9
 810cc5a:	f7f3 fcf9 	bl	8100650 <__aeabi_dmul>
 810cc5e:	4b6c      	ldr	r3, [pc, #432]	; (810ce10 <__ieee754_pow+0x758>)
 810cc60:	2200      	movs	r2, #0
 810cc62:	4606      	mov	r6, r0
 810cc64:	460f      	mov	r7, r1
 810cc66:	f7f3 fb3d 	bl	81002e4 <__adddf3>
 810cc6a:	4652      	mov	r2, sl
 810cc6c:	465b      	mov	r3, fp
 810cc6e:	f7f3 fb39 	bl	81002e4 <__adddf3>
 810cc72:	9c04      	ldr	r4, [sp, #16]
 810cc74:	460d      	mov	r5, r1
 810cc76:	4622      	mov	r2, r4
 810cc78:	460b      	mov	r3, r1
 810cc7a:	4640      	mov	r0, r8
 810cc7c:	4649      	mov	r1, r9
 810cc7e:	f7f3 fce7 	bl	8100650 <__aeabi_dmul>
 810cc82:	4b63      	ldr	r3, [pc, #396]	; (810ce10 <__ieee754_pow+0x758>)
 810cc84:	4680      	mov	r8, r0
 810cc86:	4689      	mov	r9, r1
 810cc88:	2200      	movs	r2, #0
 810cc8a:	4620      	mov	r0, r4
 810cc8c:	4629      	mov	r1, r5
 810cc8e:	f7f3 fb27 	bl	81002e0 <__aeabi_dsub>
 810cc92:	4632      	mov	r2, r6
 810cc94:	463b      	mov	r3, r7
 810cc96:	f7f3 fb23 	bl	81002e0 <__aeabi_dsub>
 810cc9a:	4602      	mov	r2, r0
 810cc9c:	460b      	mov	r3, r1
 810cc9e:	4650      	mov	r0, sl
 810cca0:	4659      	mov	r1, fp
 810cca2:	f7f3 fb1d 	bl	81002e0 <__aeabi_dsub>
 810cca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ccaa:	f7f3 fcd1 	bl	8100650 <__aeabi_dmul>
 810ccae:	4622      	mov	r2, r4
 810ccb0:	4606      	mov	r6, r0
 810ccb2:	460f      	mov	r7, r1
 810ccb4:	462b      	mov	r3, r5
 810ccb6:	ec51 0b18 	vmov	r0, r1, d8
 810ccba:	f7f3 fcc9 	bl	8100650 <__aeabi_dmul>
 810ccbe:	4602      	mov	r2, r0
 810ccc0:	460b      	mov	r3, r1
 810ccc2:	4630      	mov	r0, r6
 810ccc4:	4639      	mov	r1, r7
 810ccc6:	f7f3 fb0d 	bl	81002e4 <__adddf3>
 810ccca:	4606      	mov	r6, r0
 810cccc:	460f      	mov	r7, r1
 810ccce:	4602      	mov	r2, r0
 810ccd0:	460b      	mov	r3, r1
 810ccd2:	4640      	mov	r0, r8
 810ccd4:	4649      	mov	r1, r9
 810ccd6:	f7f3 fb05 	bl	81002e4 <__adddf3>
 810ccda:	9c04      	ldr	r4, [sp, #16]
 810ccdc:	a33e      	add	r3, pc, #248	; (adr r3, 810cdd8 <__ieee754_pow+0x720>)
 810ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cce2:	4620      	mov	r0, r4
 810cce4:	460d      	mov	r5, r1
 810cce6:	f7f3 fcb3 	bl	8100650 <__aeabi_dmul>
 810ccea:	4642      	mov	r2, r8
 810ccec:	ec41 0b18 	vmov	d8, r0, r1
 810ccf0:	464b      	mov	r3, r9
 810ccf2:	4620      	mov	r0, r4
 810ccf4:	4629      	mov	r1, r5
 810ccf6:	f7f3 faf3 	bl	81002e0 <__aeabi_dsub>
 810ccfa:	4602      	mov	r2, r0
 810ccfc:	460b      	mov	r3, r1
 810ccfe:	4630      	mov	r0, r6
 810cd00:	4639      	mov	r1, r7
 810cd02:	f7f3 faed 	bl	81002e0 <__aeabi_dsub>
 810cd06:	a336      	add	r3, pc, #216	; (adr r3, 810cde0 <__ieee754_pow+0x728>)
 810cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd0c:	f7f3 fca0 	bl	8100650 <__aeabi_dmul>
 810cd10:	a335      	add	r3, pc, #212	; (adr r3, 810cde8 <__ieee754_pow+0x730>)
 810cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd16:	4606      	mov	r6, r0
 810cd18:	460f      	mov	r7, r1
 810cd1a:	4620      	mov	r0, r4
 810cd1c:	4629      	mov	r1, r5
 810cd1e:	f7f3 fc97 	bl	8100650 <__aeabi_dmul>
 810cd22:	4602      	mov	r2, r0
 810cd24:	460b      	mov	r3, r1
 810cd26:	4630      	mov	r0, r6
 810cd28:	4639      	mov	r1, r7
 810cd2a:	f7f3 fadb 	bl	81002e4 <__adddf3>
 810cd2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cd30:	4b38      	ldr	r3, [pc, #224]	; (810ce14 <__ieee754_pow+0x75c>)
 810cd32:	4413      	add	r3, r2
 810cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd38:	f7f3 fad4 	bl	81002e4 <__adddf3>
 810cd3c:	4682      	mov	sl, r0
 810cd3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cd40:	468b      	mov	fp, r1
 810cd42:	f7f3 fc1b 	bl	810057c <__aeabi_i2d>
 810cd46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cd48:	4b33      	ldr	r3, [pc, #204]	; (810ce18 <__ieee754_pow+0x760>)
 810cd4a:	4413      	add	r3, r2
 810cd4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810cd50:	4606      	mov	r6, r0
 810cd52:	460f      	mov	r7, r1
 810cd54:	4652      	mov	r2, sl
 810cd56:	465b      	mov	r3, fp
 810cd58:	ec51 0b18 	vmov	r0, r1, d8
 810cd5c:	f7f3 fac2 	bl	81002e4 <__adddf3>
 810cd60:	4642      	mov	r2, r8
 810cd62:	464b      	mov	r3, r9
 810cd64:	f7f3 fabe 	bl	81002e4 <__adddf3>
 810cd68:	4632      	mov	r2, r6
 810cd6a:	463b      	mov	r3, r7
 810cd6c:	f7f3 faba 	bl	81002e4 <__adddf3>
 810cd70:	9c04      	ldr	r4, [sp, #16]
 810cd72:	4632      	mov	r2, r6
 810cd74:	463b      	mov	r3, r7
 810cd76:	4620      	mov	r0, r4
 810cd78:	460d      	mov	r5, r1
 810cd7a:	f7f3 fab1 	bl	81002e0 <__aeabi_dsub>
 810cd7e:	4642      	mov	r2, r8
 810cd80:	464b      	mov	r3, r9
 810cd82:	f7f3 faad 	bl	81002e0 <__aeabi_dsub>
 810cd86:	ec53 2b18 	vmov	r2, r3, d8
 810cd8a:	f7f3 faa9 	bl	81002e0 <__aeabi_dsub>
 810cd8e:	4602      	mov	r2, r0
 810cd90:	460b      	mov	r3, r1
 810cd92:	4650      	mov	r0, sl
 810cd94:	4659      	mov	r1, fp
 810cd96:	e606      	b.n	810c9a6 <__ieee754_pow+0x2ee>
 810cd98:	2401      	movs	r4, #1
 810cd9a:	e6a0      	b.n	810cade <__ieee754_pow+0x426>
 810cd9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810cdf0 <__ieee754_pow+0x738>
 810cda0:	e60d      	b.n	810c9be <__ieee754_pow+0x306>
 810cda2:	bf00      	nop
 810cda4:	f3af 8000 	nop.w
 810cda8:	4a454eef 	.word	0x4a454eef
 810cdac:	3fca7e28 	.word	0x3fca7e28
 810cdb0:	93c9db65 	.word	0x93c9db65
 810cdb4:	3fcd864a 	.word	0x3fcd864a
 810cdb8:	a91d4101 	.word	0xa91d4101
 810cdbc:	3fd17460 	.word	0x3fd17460
 810cdc0:	518f264d 	.word	0x518f264d
 810cdc4:	3fd55555 	.word	0x3fd55555
 810cdc8:	db6fabff 	.word	0xdb6fabff
 810cdcc:	3fdb6db6 	.word	0x3fdb6db6
 810cdd0:	33333303 	.word	0x33333303
 810cdd4:	3fe33333 	.word	0x3fe33333
 810cdd8:	e0000000 	.word	0xe0000000
 810cddc:	3feec709 	.word	0x3feec709
 810cde0:	dc3a03fd 	.word	0xdc3a03fd
 810cde4:	3feec709 	.word	0x3feec709
 810cde8:	145b01f5 	.word	0x145b01f5
 810cdec:	be3e2fe0 	.word	0xbe3e2fe0
 810cdf0:	00000000 	.word	0x00000000
 810cdf4:	3ff00000 	.word	0x3ff00000
 810cdf8:	7ff00000 	.word	0x7ff00000
 810cdfc:	43400000 	.word	0x43400000
 810ce00:	0003988e 	.word	0x0003988e
 810ce04:	000bb679 	.word	0x000bb679
 810ce08:	0810d5b0 	.word	0x0810d5b0
 810ce0c:	3ff00000 	.word	0x3ff00000
 810ce10:	40080000 	.word	0x40080000
 810ce14:	0810d5d0 	.word	0x0810d5d0
 810ce18:	0810d5c0 	.word	0x0810d5c0
 810ce1c:	a3b5      	add	r3, pc, #724	; (adr r3, 810d0f4 <__ieee754_pow+0xa3c>)
 810ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce22:	4640      	mov	r0, r8
 810ce24:	4649      	mov	r1, r9
 810ce26:	f7f3 fa5d 	bl	81002e4 <__adddf3>
 810ce2a:	4622      	mov	r2, r4
 810ce2c:	ec41 0b1a 	vmov	d10, r0, r1
 810ce30:	462b      	mov	r3, r5
 810ce32:	4630      	mov	r0, r6
 810ce34:	4639      	mov	r1, r7
 810ce36:	f7f3 fa53 	bl	81002e0 <__aeabi_dsub>
 810ce3a:	4602      	mov	r2, r0
 810ce3c:	460b      	mov	r3, r1
 810ce3e:	ec51 0b1a 	vmov	r0, r1, d10
 810ce42:	f7f3 fe95 	bl	8100b70 <__aeabi_dcmpgt>
 810ce46:	2800      	cmp	r0, #0
 810ce48:	f47f adf8 	bne.w	810ca3c <__ieee754_pow+0x384>
 810ce4c:	4aa4      	ldr	r2, [pc, #656]	; (810d0e0 <__ieee754_pow+0xa28>)
 810ce4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810ce52:	4293      	cmp	r3, r2
 810ce54:	f340 810b 	ble.w	810d06e <__ieee754_pow+0x9b6>
 810ce58:	151b      	asrs	r3, r3, #20
 810ce5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810ce5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810ce62:	fa4a f303 	asr.w	r3, sl, r3
 810ce66:	445b      	add	r3, fp
 810ce68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810ce6c:	4e9d      	ldr	r6, [pc, #628]	; (810d0e4 <__ieee754_pow+0xa2c>)
 810ce6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810ce72:	4116      	asrs	r6, r2
 810ce74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810ce78:	2000      	movs	r0, #0
 810ce7a:	ea23 0106 	bic.w	r1, r3, r6
 810ce7e:	f1c2 0214 	rsb	r2, r2, #20
 810ce82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810ce86:	fa4a fa02 	asr.w	sl, sl, r2
 810ce8a:	f1bb 0f00 	cmp.w	fp, #0
 810ce8e:	4602      	mov	r2, r0
 810ce90:	460b      	mov	r3, r1
 810ce92:	4620      	mov	r0, r4
 810ce94:	4629      	mov	r1, r5
 810ce96:	bfb8      	it	lt
 810ce98:	f1ca 0a00 	rsblt	sl, sl, #0
 810ce9c:	f7f3 fa20 	bl	81002e0 <__aeabi_dsub>
 810cea0:	ec41 0b19 	vmov	d9, r0, r1
 810cea4:	4642      	mov	r2, r8
 810cea6:	464b      	mov	r3, r9
 810cea8:	ec51 0b19 	vmov	r0, r1, d9
 810ceac:	f7f3 fa1a 	bl	81002e4 <__adddf3>
 810ceb0:	2400      	movs	r4, #0
 810ceb2:	a379      	add	r3, pc, #484	; (adr r3, 810d098 <__ieee754_pow+0x9e0>)
 810ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ceb8:	4620      	mov	r0, r4
 810ceba:	460d      	mov	r5, r1
 810cebc:	f7f3 fbc8 	bl	8100650 <__aeabi_dmul>
 810cec0:	ec53 2b19 	vmov	r2, r3, d9
 810cec4:	4606      	mov	r6, r0
 810cec6:	460f      	mov	r7, r1
 810cec8:	4620      	mov	r0, r4
 810ceca:	4629      	mov	r1, r5
 810cecc:	f7f3 fa08 	bl	81002e0 <__aeabi_dsub>
 810ced0:	4602      	mov	r2, r0
 810ced2:	460b      	mov	r3, r1
 810ced4:	4640      	mov	r0, r8
 810ced6:	4649      	mov	r1, r9
 810ced8:	f7f3 fa02 	bl	81002e0 <__aeabi_dsub>
 810cedc:	a370      	add	r3, pc, #448	; (adr r3, 810d0a0 <__ieee754_pow+0x9e8>)
 810cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cee2:	f7f3 fbb5 	bl	8100650 <__aeabi_dmul>
 810cee6:	a370      	add	r3, pc, #448	; (adr r3, 810d0a8 <__ieee754_pow+0x9f0>)
 810cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ceec:	4680      	mov	r8, r0
 810ceee:	4689      	mov	r9, r1
 810cef0:	4620      	mov	r0, r4
 810cef2:	4629      	mov	r1, r5
 810cef4:	f7f3 fbac 	bl	8100650 <__aeabi_dmul>
 810cef8:	4602      	mov	r2, r0
 810cefa:	460b      	mov	r3, r1
 810cefc:	4640      	mov	r0, r8
 810cefe:	4649      	mov	r1, r9
 810cf00:	f7f3 f9f0 	bl	81002e4 <__adddf3>
 810cf04:	4604      	mov	r4, r0
 810cf06:	460d      	mov	r5, r1
 810cf08:	4602      	mov	r2, r0
 810cf0a:	460b      	mov	r3, r1
 810cf0c:	4630      	mov	r0, r6
 810cf0e:	4639      	mov	r1, r7
 810cf10:	f7f3 f9e8 	bl	81002e4 <__adddf3>
 810cf14:	4632      	mov	r2, r6
 810cf16:	463b      	mov	r3, r7
 810cf18:	4680      	mov	r8, r0
 810cf1a:	4689      	mov	r9, r1
 810cf1c:	f7f3 f9e0 	bl	81002e0 <__aeabi_dsub>
 810cf20:	4602      	mov	r2, r0
 810cf22:	460b      	mov	r3, r1
 810cf24:	4620      	mov	r0, r4
 810cf26:	4629      	mov	r1, r5
 810cf28:	f7f3 f9da 	bl	81002e0 <__aeabi_dsub>
 810cf2c:	4642      	mov	r2, r8
 810cf2e:	4606      	mov	r6, r0
 810cf30:	460f      	mov	r7, r1
 810cf32:	464b      	mov	r3, r9
 810cf34:	4640      	mov	r0, r8
 810cf36:	4649      	mov	r1, r9
 810cf38:	f7f3 fb8a 	bl	8100650 <__aeabi_dmul>
 810cf3c:	a35c      	add	r3, pc, #368	; (adr r3, 810d0b0 <__ieee754_pow+0x9f8>)
 810cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf42:	4604      	mov	r4, r0
 810cf44:	460d      	mov	r5, r1
 810cf46:	f7f3 fb83 	bl	8100650 <__aeabi_dmul>
 810cf4a:	a35b      	add	r3, pc, #364	; (adr r3, 810d0b8 <__ieee754_pow+0xa00>)
 810cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf50:	f7f3 f9c6 	bl	81002e0 <__aeabi_dsub>
 810cf54:	4622      	mov	r2, r4
 810cf56:	462b      	mov	r3, r5
 810cf58:	f7f3 fb7a 	bl	8100650 <__aeabi_dmul>
 810cf5c:	a358      	add	r3, pc, #352	; (adr r3, 810d0c0 <__ieee754_pow+0xa08>)
 810cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf62:	f7f3 f9bf 	bl	81002e4 <__adddf3>
 810cf66:	4622      	mov	r2, r4
 810cf68:	462b      	mov	r3, r5
 810cf6a:	f7f3 fb71 	bl	8100650 <__aeabi_dmul>
 810cf6e:	a356      	add	r3, pc, #344	; (adr r3, 810d0c8 <__ieee754_pow+0xa10>)
 810cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf74:	f7f3 f9b4 	bl	81002e0 <__aeabi_dsub>
 810cf78:	4622      	mov	r2, r4
 810cf7a:	462b      	mov	r3, r5
 810cf7c:	f7f3 fb68 	bl	8100650 <__aeabi_dmul>
 810cf80:	a353      	add	r3, pc, #332	; (adr r3, 810d0d0 <__ieee754_pow+0xa18>)
 810cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf86:	f7f3 f9ad 	bl	81002e4 <__adddf3>
 810cf8a:	4622      	mov	r2, r4
 810cf8c:	462b      	mov	r3, r5
 810cf8e:	f7f3 fb5f 	bl	8100650 <__aeabi_dmul>
 810cf92:	4602      	mov	r2, r0
 810cf94:	460b      	mov	r3, r1
 810cf96:	4640      	mov	r0, r8
 810cf98:	4649      	mov	r1, r9
 810cf9a:	f7f3 f9a1 	bl	81002e0 <__aeabi_dsub>
 810cf9e:	4604      	mov	r4, r0
 810cfa0:	460d      	mov	r5, r1
 810cfa2:	4602      	mov	r2, r0
 810cfa4:	460b      	mov	r3, r1
 810cfa6:	4640      	mov	r0, r8
 810cfa8:	4649      	mov	r1, r9
 810cfaa:	f7f3 fb51 	bl	8100650 <__aeabi_dmul>
 810cfae:	2200      	movs	r2, #0
 810cfb0:	ec41 0b19 	vmov	d9, r0, r1
 810cfb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810cfb8:	4620      	mov	r0, r4
 810cfba:	4629      	mov	r1, r5
 810cfbc:	f7f3 f990 	bl	81002e0 <__aeabi_dsub>
 810cfc0:	4602      	mov	r2, r0
 810cfc2:	460b      	mov	r3, r1
 810cfc4:	ec51 0b19 	vmov	r0, r1, d9
 810cfc8:	f7f3 fc6c 	bl	81008a4 <__aeabi_ddiv>
 810cfcc:	4632      	mov	r2, r6
 810cfce:	4604      	mov	r4, r0
 810cfd0:	460d      	mov	r5, r1
 810cfd2:	463b      	mov	r3, r7
 810cfd4:	4640      	mov	r0, r8
 810cfd6:	4649      	mov	r1, r9
 810cfd8:	f7f3 fb3a 	bl	8100650 <__aeabi_dmul>
 810cfdc:	4632      	mov	r2, r6
 810cfde:	463b      	mov	r3, r7
 810cfe0:	f7f3 f980 	bl	81002e4 <__adddf3>
 810cfe4:	4602      	mov	r2, r0
 810cfe6:	460b      	mov	r3, r1
 810cfe8:	4620      	mov	r0, r4
 810cfea:	4629      	mov	r1, r5
 810cfec:	f7f3 f978 	bl	81002e0 <__aeabi_dsub>
 810cff0:	4642      	mov	r2, r8
 810cff2:	464b      	mov	r3, r9
 810cff4:	f7f3 f974 	bl	81002e0 <__aeabi_dsub>
 810cff8:	460b      	mov	r3, r1
 810cffa:	4602      	mov	r2, r0
 810cffc:	493a      	ldr	r1, [pc, #232]	; (810d0e8 <__ieee754_pow+0xa30>)
 810cffe:	2000      	movs	r0, #0
 810d000:	f7f3 f96e 	bl	81002e0 <__aeabi_dsub>
 810d004:	e9cd 0100 	strd	r0, r1, [sp]
 810d008:	9b01      	ldr	r3, [sp, #4]
 810d00a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810d00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d012:	da2f      	bge.n	810d074 <__ieee754_pow+0x9bc>
 810d014:	4650      	mov	r0, sl
 810d016:	ed9d 0b00 	vldr	d0, [sp]
 810d01a:	f000 f9cd 	bl	810d3b8 <scalbn>
 810d01e:	ec51 0b10 	vmov	r0, r1, d0
 810d022:	ec53 2b18 	vmov	r2, r3, d8
 810d026:	f7ff bbe0 	b.w	810c7ea <__ieee754_pow+0x132>
 810d02a:	4b30      	ldr	r3, [pc, #192]	; (810d0ec <__ieee754_pow+0xa34>)
 810d02c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810d030:	429e      	cmp	r6, r3
 810d032:	f77f af0b 	ble.w	810ce4c <__ieee754_pow+0x794>
 810d036:	4b2e      	ldr	r3, [pc, #184]	; (810d0f0 <__ieee754_pow+0xa38>)
 810d038:	440b      	add	r3, r1
 810d03a:	4303      	orrs	r3, r0
 810d03c:	d00b      	beq.n	810d056 <__ieee754_pow+0x99e>
 810d03e:	a326      	add	r3, pc, #152	; (adr r3, 810d0d8 <__ieee754_pow+0xa20>)
 810d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d044:	ec51 0b18 	vmov	r0, r1, d8
 810d048:	f7f3 fb02 	bl	8100650 <__aeabi_dmul>
 810d04c:	a322      	add	r3, pc, #136	; (adr r3, 810d0d8 <__ieee754_pow+0xa20>)
 810d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d052:	f7ff bbca 	b.w	810c7ea <__ieee754_pow+0x132>
 810d056:	4622      	mov	r2, r4
 810d058:	462b      	mov	r3, r5
 810d05a:	f7f3 f941 	bl	81002e0 <__aeabi_dsub>
 810d05e:	4642      	mov	r2, r8
 810d060:	464b      	mov	r3, r9
 810d062:	f7f3 fd7b 	bl	8100b5c <__aeabi_dcmpge>
 810d066:	2800      	cmp	r0, #0
 810d068:	f43f aef0 	beq.w	810ce4c <__ieee754_pow+0x794>
 810d06c:	e7e7      	b.n	810d03e <__ieee754_pow+0x986>
 810d06e:	f04f 0a00 	mov.w	sl, #0
 810d072:	e717      	b.n	810cea4 <__ieee754_pow+0x7ec>
 810d074:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d078:	4619      	mov	r1, r3
 810d07a:	e7d2      	b.n	810d022 <__ieee754_pow+0x96a>
 810d07c:	491a      	ldr	r1, [pc, #104]	; (810d0e8 <__ieee754_pow+0xa30>)
 810d07e:	2000      	movs	r0, #0
 810d080:	f7ff bb9e 	b.w	810c7c0 <__ieee754_pow+0x108>
 810d084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d088:	f7ff bb9a 	b.w	810c7c0 <__ieee754_pow+0x108>
 810d08c:	9000      	str	r0, [sp, #0]
 810d08e:	f7ff bb76 	b.w	810c77e <__ieee754_pow+0xc6>
 810d092:	2100      	movs	r1, #0
 810d094:	f7ff bb60 	b.w	810c758 <__ieee754_pow+0xa0>
 810d098:	00000000 	.word	0x00000000
 810d09c:	3fe62e43 	.word	0x3fe62e43
 810d0a0:	fefa39ef 	.word	0xfefa39ef
 810d0a4:	3fe62e42 	.word	0x3fe62e42
 810d0a8:	0ca86c39 	.word	0x0ca86c39
 810d0ac:	be205c61 	.word	0xbe205c61
 810d0b0:	72bea4d0 	.word	0x72bea4d0
 810d0b4:	3e663769 	.word	0x3e663769
 810d0b8:	c5d26bf1 	.word	0xc5d26bf1
 810d0bc:	3ebbbd41 	.word	0x3ebbbd41
 810d0c0:	af25de2c 	.word	0xaf25de2c
 810d0c4:	3f11566a 	.word	0x3f11566a
 810d0c8:	16bebd93 	.word	0x16bebd93
 810d0cc:	3f66c16c 	.word	0x3f66c16c
 810d0d0:	5555553e 	.word	0x5555553e
 810d0d4:	3fc55555 	.word	0x3fc55555
 810d0d8:	c2f8f359 	.word	0xc2f8f359
 810d0dc:	01a56e1f 	.word	0x01a56e1f
 810d0e0:	3fe00000 	.word	0x3fe00000
 810d0e4:	000fffff 	.word	0x000fffff
 810d0e8:	3ff00000 	.word	0x3ff00000
 810d0ec:	4090cbff 	.word	0x4090cbff
 810d0f0:	3f6f3400 	.word	0x3f6f3400
 810d0f4:	652b82fe 	.word	0x652b82fe
 810d0f8:	3c971547 	.word	0x3c971547

0810d0fc <__ieee754_sqrt>:
 810d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d100:	ec55 4b10 	vmov	r4, r5, d0
 810d104:	4e56      	ldr	r6, [pc, #344]	; (810d260 <__ieee754_sqrt+0x164>)
 810d106:	43ae      	bics	r6, r5
 810d108:	ee10 0a10 	vmov	r0, s0
 810d10c:	ee10 3a10 	vmov	r3, s0
 810d110:	4629      	mov	r1, r5
 810d112:	462a      	mov	r2, r5
 810d114:	d110      	bne.n	810d138 <__ieee754_sqrt+0x3c>
 810d116:	ee10 2a10 	vmov	r2, s0
 810d11a:	462b      	mov	r3, r5
 810d11c:	f7f3 fa98 	bl	8100650 <__aeabi_dmul>
 810d120:	4602      	mov	r2, r0
 810d122:	460b      	mov	r3, r1
 810d124:	4620      	mov	r0, r4
 810d126:	4629      	mov	r1, r5
 810d128:	f7f3 f8dc 	bl	81002e4 <__adddf3>
 810d12c:	4604      	mov	r4, r0
 810d12e:	460d      	mov	r5, r1
 810d130:	ec45 4b10 	vmov	d0, r4, r5
 810d134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d138:	2d00      	cmp	r5, #0
 810d13a:	dc10      	bgt.n	810d15e <__ieee754_sqrt+0x62>
 810d13c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d140:	4330      	orrs	r0, r6
 810d142:	d0f5      	beq.n	810d130 <__ieee754_sqrt+0x34>
 810d144:	b15d      	cbz	r5, 810d15e <__ieee754_sqrt+0x62>
 810d146:	ee10 2a10 	vmov	r2, s0
 810d14a:	462b      	mov	r3, r5
 810d14c:	ee10 0a10 	vmov	r0, s0
 810d150:	f7f3 f8c6 	bl	81002e0 <__aeabi_dsub>
 810d154:	4602      	mov	r2, r0
 810d156:	460b      	mov	r3, r1
 810d158:	f7f3 fba4 	bl	81008a4 <__aeabi_ddiv>
 810d15c:	e7e6      	b.n	810d12c <__ieee754_sqrt+0x30>
 810d15e:	1509      	asrs	r1, r1, #20
 810d160:	d076      	beq.n	810d250 <__ieee754_sqrt+0x154>
 810d162:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810d166:	07ce      	lsls	r6, r1, #31
 810d168:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810d16c:	bf5e      	ittt	pl
 810d16e:	0fda      	lsrpl	r2, r3, #31
 810d170:	005b      	lslpl	r3, r3, #1
 810d172:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810d176:	0fda      	lsrs	r2, r3, #31
 810d178:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810d17c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810d180:	2000      	movs	r0, #0
 810d182:	106d      	asrs	r5, r5, #1
 810d184:	005b      	lsls	r3, r3, #1
 810d186:	f04f 0e16 	mov.w	lr, #22
 810d18a:	4684      	mov	ip, r0
 810d18c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d190:	eb0c 0401 	add.w	r4, ip, r1
 810d194:	4294      	cmp	r4, r2
 810d196:	bfde      	ittt	le
 810d198:	1b12      	suble	r2, r2, r4
 810d19a:	eb04 0c01 	addle.w	ip, r4, r1
 810d19e:	1840      	addle	r0, r0, r1
 810d1a0:	0052      	lsls	r2, r2, #1
 810d1a2:	f1be 0e01 	subs.w	lr, lr, #1
 810d1a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d1aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810d1ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d1b2:	d1ed      	bne.n	810d190 <__ieee754_sqrt+0x94>
 810d1b4:	4671      	mov	r1, lr
 810d1b6:	2720      	movs	r7, #32
 810d1b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810d1bc:	4562      	cmp	r2, ip
 810d1be:	eb04 060e 	add.w	r6, r4, lr
 810d1c2:	dc02      	bgt.n	810d1ca <__ieee754_sqrt+0xce>
 810d1c4:	d113      	bne.n	810d1ee <__ieee754_sqrt+0xf2>
 810d1c6:	429e      	cmp	r6, r3
 810d1c8:	d811      	bhi.n	810d1ee <__ieee754_sqrt+0xf2>
 810d1ca:	2e00      	cmp	r6, #0
 810d1cc:	eb06 0e04 	add.w	lr, r6, r4
 810d1d0:	da43      	bge.n	810d25a <__ieee754_sqrt+0x15e>
 810d1d2:	f1be 0f00 	cmp.w	lr, #0
 810d1d6:	db40      	blt.n	810d25a <__ieee754_sqrt+0x15e>
 810d1d8:	f10c 0801 	add.w	r8, ip, #1
 810d1dc:	eba2 020c 	sub.w	r2, r2, ip
 810d1e0:	429e      	cmp	r6, r3
 810d1e2:	bf88      	it	hi
 810d1e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810d1e8:	1b9b      	subs	r3, r3, r6
 810d1ea:	4421      	add	r1, r4
 810d1ec:	46c4      	mov	ip, r8
 810d1ee:	0052      	lsls	r2, r2, #1
 810d1f0:	3f01      	subs	r7, #1
 810d1f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d1f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810d1fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d1fe:	d1dd      	bne.n	810d1bc <__ieee754_sqrt+0xc0>
 810d200:	4313      	orrs	r3, r2
 810d202:	d006      	beq.n	810d212 <__ieee754_sqrt+0x116>
 810d204:	1c4c      	adds	r4, r1, #1
 810d206:	bf13      	iteet	ne
 810d208:	3101      	addne	r1, #1
 810d20a:	3001      	addeq	r0, #1
 810d20c:	4639      	moveq	r1, r7
 810d20e:	f021 0101 	bicne.w	r1, r1, #1
 810d212:	1043      	asrs	r3, r0, #1
 810d214:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810d218:	0849      	lsrs	r1, r1, #1
 810d21a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810d21e:	07c2      	lsls	r2, r0, #31
 810d220:	bf48      	it	mi
 810d222:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810d226:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810d22a:	460c      	mov	r4, r1
 810d22c:	463d      	mov	r5, r7
 810d22e:	e77f      	b.n	810d130 <__ieee754_sqrt+0x34>
 810d230:	0ada      	lsrs	r2, r3, #11
 810d232:	3815      	subs	r0, #21
 810d234:	055b      	lsls	r3, r3, #21
 810d236:	2a00      	cmp	r2, #0
 810d238:	d0fa      	beq.n	810d230 <__ieee754_sqrt+0x134>
 810d23a:	02d7      	lsls	r7, r2, #11
 810d23c:	d50a      	bpl.n	810d254 <__ieee754_sqrt+0x158>
 810d23e:	f1c1 0420 	rsb	r4, r1, #32
 810d242:	fa23 f404 	lsr.w	r4, r3, r4
 810d246:	1e4d      	subs	r5, r1, #1
 810d248:	408b      	lsls	r3, r1
 810d24a:	4322      	orrs	r2, r4
 810d24c:	1b41      	subs	r1, r0, r5
 810d24e:	e788      	b.n	810d162 <__ieee754_sqrt+0x66>
 810d250:	4608      	mov	r0, r1
 810d252:	e7f0      	b.n	810d236 <__ieee754_sqrt+0x13a>
 810d254:	0052      	lsls	r2, r2, #1
 810d256:	3101      	adds	r1, #1
 810d258:	e7ef      	b.n	810d23a <__ieee754_sqrt+0x13e>
 810d25a:	46e0      	mov	r8, ip
 810d25c:	e7be      	b.n	810d1dc <__ieee754_sqrt+0xe0>
 810d25e:	bf00      	nop
 810d260:	7ff00000 	.word	0x7ff00000

0810d264 <fabs>:
 810d264:	ec51 0b10 	vmov	r0, r1, d0
 810d268:	ee10 2a10 	vmov	r2, s0
 810d26c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d270:	ec43 2b10 	vmov	d0, r2, r3
 810d274:	4770      	bx	lr

0810d276 <finite>:
 810d276:	b082      	sub	sp, #8
 810d278:	ed8d 0b00 	vstr	d0, [sp]
 810d27c:	9801      	ldr	r0, [sp, #4]
 810d27e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810d282:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810d286:	0fc0      	lsrs	r0, r0, #31
 810d288:	b002      	add	sp, #8
 810d28a:	4770      	bx	lr
 810d28c:	0000      	movs	r0, r0
	...

0810d290 <nan>:
 810d290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810d298 <nan+0x8>
 810d294:	4770      	bx	lr
 810d296:	bf00      	nop
 810d298:	00000000 	.word	0x00000000
 810d29c:	7ff80000 	.word	0x7ff80000

0810d2a0 <rint>:
 810d2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d2a2:	ec51 0b10 	vmov	r0, r1, d0
 810d2a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d2aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810d2ae:	2e13      	cmp	r6, #19
 810d2b0:	ee10 4a10 	vmov	r4, s0
 810d2b4:	460b      	mov	r3, r1
 810d2b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810d2ba:	dc58      	bgt.n	810d36e <rint+0xce>
 810d2bc:	2e00      	cmp	r6, #0
 810d2be:	da2b      	bge.n	810d318 <rint+0x78>
 810d2c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810d2c4:	4302      	orrs	r2, r0
 810d2c6:	d023      	beq.n	810d310 <rint+0x70>
 810d2c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810d2cc:	4302      	orrs	r2, r0
 810d2ce:	4254      	negs	r4, r2
 810d2d0:	4314      	orrs	r4, r2
 810d2d2:	0c4b      	lsrs	r3, r1, #17
 810d2d4:	0b24      	lsrs	r4, r4, #12
 810d2d6:	045b      	lsls	r3, r3, #17
 810d2d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810d2dc:	ea44 0103 	orr.w	r1, r4, r3
 810d2e0:	4b32      	ldr	r3, [pc, #200]	; (810d3ac <rint+0x10c>)
 810d2e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d2e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 810d2ea:	4602      	mov	r2, r0
 810d2ec:	460b      	mov	r3, r1
 810d2ee:	4630      	mov	r0, r6
 810d2f0:	4639      	mov	r1, r7
 810d2f2:	f7f2 fff7 	bl	81002e4 <__adddf3>
 810d2f6:	e9cd 0100 	strd	r0, r1, [sp]
 810d2fa:	463b      	mov	r3, r7
 810d2fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d300:	4632      	mov	r2, r6
 810d302:	f7f2 ffed 	bl	81002e0 <__aeabi_dsub>
 810d306:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d30a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810d30e:	4639      	mov	r1, r7
 810d310:	ec41 0b10 	vmov	d0, r0, r1
 810d314:	b003      	add	sp, #12
 810d316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d318:	4a25      	ldr	r2, [pc, #148]	; (810d3b0 <rint+0x110>)
 810d31a:	4132      	asrs	r2, r6
 810d31c:	ea01 0702 	and.w	r7, r1, r2
 810d320:	4307      	orrs	r7, r0
 810d322:	d0f5      	beq.n	810d310 <rint+0x70>
 810d324:	0851      	lsrs	r1, r2, #1
 810d326:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810d32a:	4314      	orrs	r4, r2
 810d32c:	d00c      	beq.n	810d348 <rint+0xa8>
 810d32e:	ea23 0201 	bic.w	r2, r3, r1
 810d332:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810d336:	2e13      	cmp	r6, #19
 810d338:	fa43 f606 	asr.w	r6, r3, r6
 810d33c:	bf0c      	ite	eq
 810d33e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810d342:	2400      	movne	r4, #0
 810d344:	ea42 0306 	orr.w	r3, r2, r6
 810d348:	4918      	ldr	r1, [pc, #96]	; (810d3ac <rint+0x10c>)
 810d34a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810d34e:	4622      	mov	r2, r4
 810d350:	e9d5 4500 	ldrd	r4, r5, [r5]
 810d354:	4620      	mov	r0, r4
 810d356:	4629      	mov	r1, r5
 810d358:	f7f2 ffc4 	bl	81002e4 <__adddf3>
 810d35c:	e9cd 0100 	strd	r0, r1, [sp]
 810d360:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d364:	4622      	mov	r2, r4
 810d366:	462b      	mov	r3, r5
 810d368:	f7f2 ffba 	bl	81002e0 <__aeabi_dsub>
 810d36c:	e7d0      	b.n	810d310 <rint+0x70>
 810d36e:	2e33      	cmp	r6, #51	; 0x33
 810d370:	dd07      	ble.n	810d382 <rint+0xe2>
 810d372:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810d376:	d1cb      	bne.n	810d310 <rint+0x70>
 810d378:	ee10 2a10 	vmov	r2, s0
 810d37c:	f7f2 ffb2 	bl	81002e4 <__adddf3>
 810d380:	e7c6      	b.n	810d310 <rint+0x70>
 810d382:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810d386:	f04f 36ff 	mov.w	r6, #4294967295
 810d38a:	40d6      	lsrs	r6, r2
 810d38c:	4230      	tst	r0, r6
 810d38e:	d0bf      	beq.n	810d310 <rint+0x70>
 810d390:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810d394:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810d398:	bf1f      	itttt	ne
 810d39a:	ea24 0101 	bicne.w	r1, r4, r1
 810d39e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810d3a2:	fa44 f202 	asrne.w	r2, r4, r2
 810d3a6:	ea41 0402 	orrne.w	r4, r1, r2
 810d3aa:	e7cd      	b.n	810d348 <rint+0xa8>
 810d3ac:	0810d5e0 	.word	0x0810d5e0
 810d3b0:	000fffff 	.word	0x000fffff
 810d3b4:	00000000 	.word	0x00000000

0810d3b8 <scalbn>:
 810d3b8:	b570      	push	{r4, r5, r6, lr}
 810d3ba:	ec55 4b10 	vmov	r4, r5, d0
 810d3be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810d3c2:	4606      	mov	r6, r0
 810d3c4:	462b      	mov	r3, r5
 810d3c6:	b99a      	cbnz	r2, 810d3f0 <scalbn+0x38>
 810d3c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810d3cc:	4323      	orrs	r3, r4
 810d3ce:	d036      	beq.n	810d43e <scalbn+0x86>
 810d3d0:	4b39      	ldr	r3, [pc, #228]	; (810d4b8 <scalbn+0x100>)
 810d3d2:	4629      	mov	r1, r5
 810d3d4:	ee10 0a10 	vmov	r0, s0
 810d3d8:	2200      	movs	r2, #0
 810d3da:	f7f3 f939 	bl	8100650 <__aeabi_dmul>
 810d3de:	4b37      	ldr	r3, [pc, #220]	; (810d4bc <scalbn+0x104>)
 810d3e0:	429e      	cmp	r6, r3
 810d3e2:	4604      	mov	r4, r0
 810d3e4:	460d      	mov	r5, r1
 810d3e6:	da10      	bge.n	810d40a <scalbn+0x52>
 810d3e8:	a32b      	add	r3, pc, #172	; (adr r3, 810d498 <scalbn+0xe0>)
 810d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3ee:	e03a      	b.n	810d466 <scalbn+0xae>
 810d3f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810d3f4:	428a      	cmp	r2, r1
 810d3f6:	d10c      	bne.n	810d412 <scalbn+0x5a>
 810d3f8:	ee10 2a10 	vmov	r2, s0
 810d3fc:	4620      	mov	r0, r4
 810d3fe:	4629      	mov	r1, r5
 810d400:	f7f2 ff70 	bl	81002e4 <__adddf3>
 810d404:	4604      	mov	r4, r0
 810d406:	460d      	mov	r5, r1
 810d408:	e019      	b.n	810d43e <scalbn+0x86>
 810d40a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d40e:	460b      	mov	r3, r1
 810d410:	3a36      	subs	r2, #54	; 0x36
 810d412:	4432      	add	r2, r6
 810d414:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810d418:	428a      	cmp	r2, r1
 810d41a:	dd08      	ble.n	810d42e <scalbn+0x76>
 810d41c:	2d00      	cmp	r5, #0
 810d41e:	a120      	add	r1, pc, #128	; (adr r1, 810d4a0 <scalbn+0xe8>)
 810d420:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d424:	da1c      	bge.n	810d460 <scalbn+0xa8>
 810d426:	a120      	add	r1, pc, #128	; (adr r1, 810d4a8 <scalbn+0xf0>)
 810d428:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d42c:	e018      	b.n	810d460 <scalbn+0xa8>
 810d42e:	2a00      	cmp	r2, #0
 810d430:	dd08      	ble.n	810d444 <scalbn+0x8c>
 810d432:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d43a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810d43e:	ec45 4b10 	vmov	d0, r4, r5
 810d442:	bd70      	pop	{r4, r5, r6, pc}
 810d444:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810d448:	da19      	bge.n	810d47e <scalbn+0xc6>
 810d44a:	f24c 3350 	movw	r3, #50000	; 0xc350
 810d44e:	429e      	cmp	r6, r3
 810d450:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810d454:	dd0a      	ble.n	810d46c <scalbn+0xb4>
 810d456:	a112      	add	r1, pc, #72	; (adr r1, 810d4a0 <scalbn+0xe8>)
 810d458:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d45c:	2b00      	cmp	r3, #0
 810d45e:	d1e2      	bne.n	810d426 <scalbn+0x6e>
 810d460:	a30f      	add	r3, pc, #60	; (adr r3, 810d4a0 <scalbn+0xe8>)
 810d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d466:	f7f3 f8f3 	bl	8100650 <__aeabi_dmul>
 810d46a:	e7cb      	b.n	810d404 <scalbn+0x4c>
 810d46c:	a10a      	add	r1, pc, #40	; (adr r1, 810d498 <scalbn+0xe0>)
 810d46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d472:	2b00      	cmp	r3, #0
 810d474:	d0b8      	beq.n	810d3e8 <scalbn+0x30>
 810d476:	a10e      	add	r1, pc, #56	; (adr r1, 810d4b0 <scalbn+0xf8>)
 810d478:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d47c:	e7b4      	b.n	810d3e8 <scalbn+0x30>
 810d47e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d482:	3236      	adds	r2, #54	; 0x36
 810d484:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d488:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810d48c:	4620      	mov	r0, r4
 810d48e:	4b0c      	ldr	r3, [pc, #48]	; (810d4c0 <scalbn+0x108>)
 810d490:	2200      	movs	r2, #0
 810d492:	e7e8      	b.n	810d466 <scalbn+0xae>
 810d494:	f3af 8000 	nop.w
 810d498:	c2f8f359 	.word	0xc2f8f359
 810d49c:	01a56e1f 	.word	0x01a56e1f
 810d4a0:	8800759c 	.word	0x8800759c
 810d4a4:	7e37e43c 	.word	0x7e37e43c
 810d4a8:	8800759c 	.word	0x8800759c
 810d4ac:	fe37e43c 	.word	0xfe37e43c
 810d4b0:	c2f8f359 	.word	0xc2f8f359
 810d4b4:	81a56e1f 	.word	0x81a56e1f
 810d4b8:	43500000 	.word	0x43500000
 810d4bc:	ffff3cb0 	.word	0xffff3cb0
 810d4c0:	3c900000 	.word	0x3c900000

0810d4c4 <_init>:
 810d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d4c6:	bf00      	nop
 810d4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d4ca:	bc08      	pop	{r3}
 810d4cc:	469e      	mov	lr, r3
 810d4ce:	4770      	bx	lr

0810d4d0 <_fini>:
 810d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d4d2:	bf00      	nop
 810d4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d4d6:	bc08      	pop	{r3}
 810d4d8:	469e      	mov	lr, r3
 810d4da:	4770      	bx	lr
