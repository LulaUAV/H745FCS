
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dcc  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0810a064  0810a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a128  0810a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a130  0810a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810a134  0810a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  0810a138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000578  10000010  0810a148  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000588  0810a148  00020588  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028a78  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004240  00000000  00000000  00048ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011c0  00000000  00000000  0004ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001068  00000000  00000000  0004deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6f1  00000000  00000000  0004ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019bfd  00000000  00000000  00089611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017aa87  00000000  00000000  000a320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021dc95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000049b0  00000000  00000000  0021dce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810a04c 	.word	0x0810a04c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	0810a04c 	.word	0x0810a04c

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__aeabi_d2f>:
 8100a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100a7c:	bf24      	itt	cs
 8100a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100a86:	d90d      	bls.n	8100aa4 <__aeabi_d2f+0x30>
 8100a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100a9c:	bf08      	it	eq
 8100a9e:	f020 0001 	biceq.w	r0, r0, #1
 8100aa2:	4770      	bx	lr
 8100aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100aa8:	d121      	bne.n	8100aee <__aeabi_d2f+0x7a>
 8100aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100aae:	bfbc      	itt	lt
 8100ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100ab4:	4770      	bxlt	lr
 8100ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100abe:	f1c2 0218 	rsb	r2, r2, #24
 8100ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8100ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8100aca:	fa20 f002 	lsr.w	r0, r0, r2
 8100ace:	bf18      	it	ne
 8100ad0:	f040 0001 	orrne.w	r0, r0, #1
 8100ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100ae0:	ea40 000c 	orr.w	r0, r0, ip
 8100ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8100ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100aec:	e7cc      	b.n	8100a88 <__aeabi_d2f+0x14>
 8100aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100af2:	d107      	bne.n	8100b04 <__aeabi_d2f+0x90>
 8100af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100af8:	bf1e      	ittt	ne
 8100afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100b02:	4770      	bxne	lr
 8100b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100b10:	4770      	bx	lr
 8100b12:	bf00      	nop

08100b14 <__aeabi_uldivmod>:
 8100b14:	b953      	cbnz	r3, 8100b2c <__aeabi_uldivmod+0x18>
 8100b16:	b94a      	cbnz	r2, 8100b2c <__aeabi_uldivmod+0x18>
 8100b18:	2900      	cmp	r1, #0
 8100b1a:	bf08      	it	eq
 8100b1c:	2800      	cmpeq	r0, #0
 8100b1e:	bf1c      	itt	ne
 8100b20:	f04f 31ff 	movne.w	r1, #4294967295
 8100b24:	f04f 30ff 	movne.w	r0, #4294967295
 8100b28:	f000 b96e 	b.w	8100e08 <__aeabi_idiv0>
 8100b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8100b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100b34:	f000 f806 	bl	8100b44 <__udivmoddi4>
 8100b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100b40:	b004      	add	sp, #16
 8100b42:	4770      	bx	lr

08100b44 <__udivmoddi4>:
 8100b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100b48:	9d08      	ldr	r5, [sp, #32]
 8100b4a:	4604      	mov	r4, r0
 8100b4c:	468c      	mov	ip, r1
 8100b4e:	2b00      	cmp	r3, #0
 8100b50:	f040 8083 	bne.w	8100c5a <__udivmoddi4+0x116>
 8100b54:	428a      	cmp	r2, r1
 8100b56:	4617      	mov	r7, r2
 8100b58:	d947      	bls.n	8100bea <__udivmoddi4+0xa6>
 8100b5a:	fab2 f282 	clz	r2, r2
 8100b5e:	b142      	cbz	r2, 8100b72 <__udivmoddi4+0x2e>
 8100b60:	f1c2 0020 	rsb	r0, r2, #32
 8100b64:	fa24 f000 	lsr.w	r0, r4, r0
 8100b68:	4091      	lsls	r1, r2
 8100b6a:	4097      	lsls	r7, r2
 8100b6c:	ea40 0c01 	orr.w	ip, r0, r1
 8100b70:	4094      	lsls	r4, r2
 8100b72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100b76:	0c23      	lsrs	r3, r4, #16
 8100b78:	fbbc f6f8 	udiv	r6, ip, r8
 8100b7c:	fa1f fe87 	uxth.w	lr, r7
 8100b80:	fb08 c116 	mls	r1, r8, r6, ip
 8100b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100b88:	fb06 f10e 	mul.w	r1, r6, lr
 8100b8c:	4299      	cmp	r1, r3
 8100b8e:	d909      	bls.n	8100ba4 <__udivmoddi4+0x60>
 8100b90:	18fb      	adds	r3, r7, r3
 8100b92:	f106 30ff 	add.w	r0, r6, #4294967295
 8100b96:	f080 8119 	bcs.w	8100dcc <__udivmoddi4+0x288>
 8100b9a:	4299      	cmp	r1, r3
 8100b9c:	f240 8116 	bls.w	8100dcc <__udivmoddi4+0x288>
 8100ba0:	3e02      	subs	r6, #2
 8100ba2:	443b      	add	r3, r7
 8100ba4:	1a5b      	subs	r3, r3, r1
 8100ba6:	b2a4      	uxth	r4, r4
 8100ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8100bac:	fb08 3310 	mls	r3, r8, r0, r3
 8100bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100bb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8100bb8:	45a6      	cmp	lr, r4
 8100bba:	d909      	bls.n	8100bd0 <__udivmoddi4+0x8c>
 8100bbc:	193c      	adds	r4, r7, r4
 8100bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8100bc2:	f080 8105 	bcs.w	8100dd0 <__udivmoddi4+0x28c>
 8100bc6:	45a6      	cmp	lr, r4
 8100bc8:	f240 8102 	bls.w	8100dd0 <__udivmoddi4+0x28c>
 8100bcc:	3802      	subs	r0, #2
 8100bce:	443c      	add	r4, r7
 8100bd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100bd4:	eba4 040e 	sub.w	r4, r4, lr
 8100bd8:	2600      	movs	r6, #0
 8100bda:	b11d      	cbz	r5, 8100be4 <__udivmoddi4+0xa0>
 8100bdc:	40d4      	lsrs	r4, r2
 8100bde:	2300      	movs	r3, #0
 8100be0:	e9c5 4300 	strd	r4, r3, [r5]
 8100be4:	4631      	mov	r1, r6
 8100be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100bea:	b902      	cbnz	r2, 8100bee <__udivmoddi4+0xaa>
 8100bec:	deff      	udf	#255	; 0xff
 8100bee:	fab2 f282 	clz	r2, r2
 8100bf2:	2a00      	cmp	r2, #0
 8100bf4:	d150      	bne.n	8100c98 <__udivmoddi4+0x154>
 8100bf6:	1bcb      	subs	r3, r1, r7
 8100bf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100bfc:	fa1f f887 	uxth.w	r8, r7
 8100c00:	2601      	movs	r6, #1
 8100c02:	fbb3 fcfe 	udiv	ip, r3, lr
 8100c06:	0c21      	lsrs	r1, r4, #16
 8100c08:	fb0e 331c 	mls	r3, lr, ip, r3
 8100c0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100c10:	fb08 f30c 	mul.w	r3, r8, ip
 8100c14:	428b      	cmp	r3, r1
 8100c16:	d907      	bls.n	8100c28 <__udivmoddi4+0xe4>
 8100c18:	1879      	adds	r1, r7, r1
 8100c1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100c1e:	d202      	bcs.n	8100c26 <__udivmoddi4+0xe2>
 8100c20:	428b      	cmp	r3, r1
 8100c22:	f200 80e9 	bhi.w	8100df8 <__udivmoddi4+0x2b4>
 8100c26:	4684      	mov	ip, r0
 8100c28:	1ac9      	subs	r1, r1, r3
 8100c2a:	b2a3      	uxth	r3, r4
 8100c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8100c30:	fb0e 1110 	mls	r1, lr, r0, r1
 8100c34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100c38:	fb08 f800 	mul.w	r8, r8, r0
 8100c3c:	45a0      	cmp	r8, r4
 8100c3e:	d907      	bls.n	8100c50 <__udivmoddi4+0x10c>
 8100c40:	193c      	adds	r4, r7, r4
 8100c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8100c46:	d202      	bcs.n	8100c4e <__udivmoddi4+0x10a>
 8100c48:	45a0      	cmp	r8, r4
 8100c4a:	f200 80d9 	bhi.w	8100e00 <__udivmoddi4+0x2bc>
 8100c4e:	4618      	mov	r0, r3
 8100c50:	eba4 0408 	sub.w	r4, r4, r8
 8100c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100c58:	e7bf      	b.n	8100bda <__udivmoddi4+0x96>
 8100c5a:	428b      	cmp	r3, r1
 8100c5c:	d909      	bls.n	8100c72 <__udivmoddi4+0x12e>
 8100c5e:	2d00      	cmp	r5, #0
 8100c60:	f000 80b1 	beq.w	8100dc6 <__udivmoddi4+0x282>
 8100c64:	2600      	movs	r6, #0
 8100c66:	e9c5 0100 	strd	r0, r1, [r5]
 8100c6a:	4630      	mov	r0, r6
 8100c6c:	4631      	mov	r1, r6
 8100c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100c72:	fab3 f683 	clz	r6, r3
 8100c76:	2e00      	cmp	r6, #0
 8100c78:	d14a      	bne.n	8100d10 <__udivmoddi4+0x1cc>
 8100c7a:	428b      	cmp	r3, r1
 8100c7c:	d302      	bcc.n	8100c84 <__udivmoddi4+0x140>
 8100c7e:	4282      	cmp	r2, r0
 8100c80:	f200 80b8 	bhi.w	8100df4 <__udivmoddi4+0x2b0>
 8100c84:	1a84      	subs	r4, r0, r2
 8100c86:	eb61 0103 	sbc.w	r1, r1, r3
 8100c8a:	2001      	movs	r0, #1
 8100c8c:	468c      	mov	ip, r1
 8100c8e:	2d00      	cmp	r5, #0
 8100c90:	d0a8      	beq.n	8100be4 <__udivmoddi4+0xa0>
 8100c92:	e9c5 4c00 	strd	r4, ip, [r5]
 8100c96:	e7a5      	b.n	8100be4 <__udivmoddi4+0xa0>
 8100c98:	f1c2 0320 	rsb	r3, r2, #32
 8100c9c:	fa20 f603 	lsr.w	r6, r0, r3
 8100ca0:	4097      	lsls	r7, r2
 8100ca2:	fa01 f002 	lsl.w	r0, r1, r2
 8100ca6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100caa:	40d9      	lsrs	r1, r3
 8100cac:	4330      	orrs	r0, r6
 8100cae:	0c03      	lsrs	r3, r0, #16
 8100cb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8100cb4:	fa1f f887 	uxth.w	r8, r7
 8100cb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8100cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100cc0:	fb06 f108 	mul.w	r1, r6, r8
 8100cc4:	4299      	cmp	r1, r3
 8100cc6:	fa04 f402 	lsl.w	r4, r4, r2
 8100cca:	d909      	bls.n	8100ce0 <__udivmoddi4+0x19c>
 8100ccc:	18fb      	adds	r3, r7, r3
 8100cce:	f106 3cff 	add.w	ip, r6, #4294967295
 8100cd2:	f080 808d 	bcs.w	8100df0 <__udivmoddi4+0x2ac>
 8100cd6:	4299      	cmp	r1, r3
 8100cd8:	f240 808a 	bls.w	8100df0 <__udivmoddi4+0x2ac>
 8100cdc:	3e02      	subs	r6, #2
 8100cde:	443b      	add	r3, r7
 8100ce0:	1a5b      	subs	r3, r3, r1
 8100ce2:	b281      	uxth	r1, r0
 8100ce4:	fbb3 f0fe 	udiv	r0, r3, lr
 8100ce8:	fb0e 3310 	mls	r3, lr, r0, r3
 8100cec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100cf0:	fb00 f308 	mul.w	r3, r0, r8
 8100cf4:	428b      	cmp	r3, r1
 8100cf6:	d907      	bls.n	8100d08 <__udivmoddi4+0x1c4>
 8100cf8:	1879      	adds	r1, r7, r1
 8100cfa:	f100 3cff 	add.w	ip, r0, #4294967295
 8100cfe:	d273      	bcs.n	8100de8 <__udivmoddi4+0x2a4>
 8100d00:	428b      	cmp	r3, r1
 8100d02:	d971      	bls.n	8100de8 <__udivmoddi4+0x2a4>
 8100d04:	3802      	subs	r0, #2
 8100d06:	4439      	add	r1, r7
 8100d08:	1acb      	subs	r3, r1, r3
 8100d0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100d0e:	e778      	b.n	8100c02 <__udivmoddi4+0xbe>
 8100d10:	f1c6 0c20 	rsb	ip, r6, #32
 8100d14:	fa03 f406 	lsl.w	r4, r3, r6
 8100d18:	fa22 f30c 	lsr.w	r3, r2, ip
 8100d1c:	431c      	orrs	r4, r3
 8100d1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8100d22:	fa01 f306 	lsl.w	r3, r1, r6
 8100d26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100d2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8100d2e:	431f      	orrs	r7, r3
 8100d30:	0c3b      	lsrs	r3, r7, #16
 8100d32:	fbb1 f9fe 	udiv	r9, r1, lr
 8100d36:	fa1f f884 	uxth.w	r8, r4
 8100d3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8100d3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100d42:	fb09 fa08 	mul.w	sl, r9, r8
 8100d46:	458a      	cmp	sl, r1
 8100d48:	fa02 f206 	lsl.w	r2, r2, r6
 8100d4c:	fa00 f306 	lsl.w	r3, r0, r6
 8100d50:	d908      	bls.n	8100d64 <__udivmoddi4+0x220>
 8100d52:	1861      	adds	r1, r4, r1
 8100d54:	f109 30ff 	add.w	r0, r9, #4294967295
 8100d58:	d248      	bcs.n	8100dec <__udivmoddi4+0x2a8>
 8100d5a:	458a      	cmp	sl, r1
 8100d5c:	d946      	bls.n	8100dec <__udivmoddi4+0x2a8>
 8100d5e:	f1a9 0902 	sub.w	r9, r9, #2
 8100d62:	4421      	add	r1, r4
 8100d64:	eba1 010a 	sub.w	r1, r1, sl
 8100d68:	b2bf      	uxth	r7, r7
 8100d6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8100d6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8100d72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100d76:	fb00 f808 	mul.w	r8, r0, r8
 8100d7a:	45b8      	cmp	r8, r7
 8100d7c:	d907      	bls.n	8100d8e <__udivmoddi4+0x24a>
 8100d7e:	19e7      	adds	r7, r4, r7
 8100d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8100d84:	d22e      	bcs.n	8100de4 <__udivmoddi4+0x2a0>
 8100d86:	45b8      	cmp	r8, r7
 8100d88:	d92c      	bls.n	8100de4 <__udivmoddi4+0x2a0>
 8100d8a:	3802      	subs	r0, #2
 8100d8c:	4427      	add	r7, r4
 8100d8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100d92:	eba7 0708 	sub.w	r7, r7, r8
 8100d96:	fba0 8902 	umull	r8, r9, r0, r2
 8100d9a:	454f      	cmp	r7, r9
 8100d9c:	46c6      	mov	lr, r8
 8100d9e:	4649      	mov	r1, r9
 8100da0:	d31a      	bcc.n	8100dd8 <__udivmoddi4+0x294>
 8100da2:	d017      	beq.n	8100dd4 <__udivmoddi4+0x290>
 8100da4:	b15d      	cbz	r5, 8100dbe <__udivmoddi4+0x27a>
 8100da6:	ebb3 020e 	subs.w	r2, r3, lr
 8100daa:	eb67 0701 	sbc.w	r7, r7, r1
 8100dae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100db2:	40f2      	lsrs	r2, r6
 8100db4:	ea4c 0202 	orr.w	r2, ip, r2
 8100db8:	40f7      	lsrs	r7, r6
 8100dba:	e9c5 2700 	strd	r2, r7, [r5]
 8100dbe:	2600      	movs	r6, #0
 8100dc0:	4631      	mov	r1, r6
 8100dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100dc6:	462e      	mov	r6, r5
 8100dc8:	4628      	mov	r0, r5
 8100dca:	e70b      	b.n	8100be4 <__udivmoddi4+0xa0>
 8100dcc:	4606      	mov	r6, r0
 8100dce:	e6e9      	b.n	8100ba4 <__udivmoddi4+0x60>
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	e6fd      	b.n	8100bd0 <__udivmoddi4+0x8c>
 8100dd4:	4543      	cmp	r3, r8
 8100dd6:	d2e5      	bcs.n	8100da4 <__udivmoddi4+0x260>
 8100dd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8100ddc:	eb69 0104 	sbc.w	r1, r9, r4
 8100de0:	3801      	subs	r0, #1
 8100de2:	e7df      	b.n	8100da4 <__udivmoddi4+0x260>
 8100de4:	4608      	mov	r0, r1
 8100de6:	e7d2      	b.n	8100d8e <__udivmoddi4+0x24a>
 8100de8:	4660      	mov	r0, ip
 8100dea:	e78d      	b.n	8100d08 <__udivmoddi4+0x1c4>
 8100dec:	4681      	mov	r9, r0
 8100dee:	e7b9      	b.n	8100d64 <__udivmoddi4+0x220>
 8100df0:	4666      	mov	r6, ip
 8100df2:	e775      	b.n	8100ce0 <__udivmoddi4+0x19c>
 8100df4:	4630      	mov	r0, r6
 8100df6:	e74a      	b.n	8100c8e <__udivmoddi4+0x14a>
 8100df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8100dfc:	4439      	add	r1, r7
 8100dfe:	e713      	b.n	8100c28 <__udivmoddi4+0xe4>
 8100e00:	3802      	subs	r0, #2
 8100e02:	443c      	add	r4, r7
 8100e04:	e724      	b.n	8100c50 <__udivmoddi4+0x10c>
 8100e06:	bf00      	nop

08100e08 <__aeabi_idiv0>:
 8100e08:	4770      	bx	lr
 8100e0a:	bf00      	nop

08100e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e0c:	b480      	push	{r7}
 8100e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e10:	4b0b      	ldr	r3, [pc, #44]	; (8100e40 <SystemInit+0x34>)
 8100e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e16:	4a0a      	ldr	r2, [pc, #40]	; (8100e40 <SystemInit+0x34>)
 8100e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e20:	4b07      	ldr	r3, [pc, #28]	; (8100e40 <SystemInit+0x34>)
 8100e22:	691b      	ldr	r3, [r3, #16]
 8100e24:	4a06      	ldr	r2, [pc, #24]	; (8100e40 <SystemInit+0x34>)
 8100e26:	f043 0310 	orr.w	r3, r3, #16
 8100e2a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100e2c:	4b04      	ldr	r3, [pc, #16]	; (8100e40 <SystemInit+0x34>)
 8100e2e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100e32:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100e34:	bf00      	nop
 8100e36:	46bd      	mov	sp, r7
 8100e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e3c:	4770      	bx	lr
 8100e3e:	bf00      	nop
 8100e40:	e000ed00 	.word	0xe000ed00

08100e44 <HAL_SPI_TxRxCpltCallback>:
   }

}

void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8100e44:	b580      	push	{r7, lr}
 8100e46:	b082      	sub	sp, #8
 8100e48:	af00      	add	r7, sp, #0
 8100e4a:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8100e4c:	687b      	ldr	r3, [r7, #4]
 8100e4e:	681b      	ldr	r3, [r3, #0]
 8100e50:	4a05      	ldr	r2, [pc, #20]	; (8100e68 <HAL_SPI_TxRxCpltCallback+0x24>)
 8100e52:	4293      	cmp	r3, r2
 8100e54:	d104      	bne.n	8100e60 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8100e56:	2201      	movs	r2, #1
 8100e58:	2110      	movs	r1, #16
 8100e5a:	4804      	ldr	r0, [pc, #16]	; (8100e6c <HAL_SPI_TxRxCpltCallback+0x28>)
 8100e5c:	f004 f9a6 	bl	81051ac <HAL_GPIO_WritePin>
    }
}
 8100e60:	bf00      	nop
 8100e62:	3708      	adds	r7, #8
 8100e64:	46bd      	mov	sp, r7
 8100e66:	bd80      	pop	{r7, pc}
 8100e68:	40013000 	.word	0x40013000
 8100e6c:	58020000 	.word	0x58020000

08100e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100e70:	b580      	push	{r7, lr}
 8100e72:	b082      	sub	sp, #8
 8100e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100e76:	4b29      	ldr	r3, [pc, #164]	; (8100f1c <MX_DMA_Init+0xac>)
 8100e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e7c:	4a27      	ldr	r2, [pc, #156]	; (8100f1c <MX_DMA_Init+0xac>)
 8100e7e:	f043 0301 	orr.w	r3, r3, #1
 8100e82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e86:	4b25      	ldr	r3, [pc, #148]	; (8100f1c <MX_DMA_Init+0xac>)
 8100e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e8c:	f003 0301 	and.w	r3, r3, #1
 8100e90:	607b      	str	r3, [r7, #4]
 8100e92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8100e94:	4b21      	ldr	r3, [pc, #132]	; (8100f1c <MX_DMA_Init+0xac>)
 8100e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e9a:	4a20      	ldr	r2, [pc, #128]	; (8100f1c <MX_DMA_Init+0xac>)
 8100e9c:	f043 0302 	orr.w	r3, r3, #2
 8100ea0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100ea4:	4b1d      	ldr	r3, [pc, #116]	; (8100f1c <MX_DMA_Init+0xac>)
 8100ea6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100eaa:	f003 0302 	and.w	r3, r3, #2
 8100eae:	603b      	str	r3, [r7, #0]
 8100eb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100eb2:	2200      	movs	r2, #0
 8100eb4:	2100      	movs	r1, #0
 8100eb6:	200b      	movs	r0, #11
 8100eb8:	f001 f8bd 	bl	8102036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100ebc:	200b      	movs	r0, #11
 8100ebe:	f001 f8d4 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100ec2:	2200      	movs	r2, #0
 8100ec4:	2100      	movs	r1, #0
 8100ec6:	200c      	movs	r0, #12
 8100ec8:	f001 f8b5 	bl	8102036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100ecc:	200c      	movs	r0, #12
 8100ece:	f001 f8cc 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8100ed2:	2200      	movs	r2, #0
 8100ed4:	2100      	movs	r1, #0
 8100ed6:	200d      	movs	r0, #13
 8100ed8:	f001 f8ad 	bl	8102036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8100edc:	200d      	movs	r0, #13
 8100ede:	f001 f8c4 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8100ee2:	2200      	movs	r2, #0
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	200e      	movs	r0, #14
 8100ee8:	f001 f8a5 	bl	8102036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8100eec:	200e      	movs	r0, #14
 8100eee:	f001 f8bc 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8100ef2:	2200      	movs	r2, #0
 8100ef4:	2100      	movs	r1, #0
 8100ef6:	202f      	movs	r0, #47	; 0x2f
 8100ef8:	f001 f89d 	bl	8102036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8100efc:	202f      	movs	r0, #47	; 0x2f
 8100efe:	f001 f8b4 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8100f02:	2200      	movs	r2, #0
 8100f04:	2100      	movs	r1, #0
 8100f06:	2038      	movs	r0, #56	; 0x38
 8100f08:	f001 f895 	bl	8102036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8100f0c:	2038      	movs	r0, #56	; 0x38
 8100f0e:	f001 f8ac 	bl	810206a <HAL_NVIC_EnableIRQ>

}
 8100f12:	bf00      	nop
 8100f14:	3708      	adds	r7, #8
 8100f16:	46bd      	mov	sp, r7
 8100f18:	bd80      	pop	{r7, pc}
 8100f1a:	bf00      	nop
 8100f1c:	58024400 	.word	0x58024400

08100f20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100f20:	b580      	push	{r7, lr}
 8100f22:	b088      	sub	sp, #32
 8100f24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f26:	f107 030c 	add.w	r3, r7, #12
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	601a      	str	r2, [r3, #0]
 8100f2e:	605a      	str	r2, [r3, #4]
 8100f30:	609a      	str	r2, [r3, #8]
 8100f32:	60da      	str	r2, [r3, #12]
 8100f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100f36:	4b22      	ldr	r3, [pc, #136]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f3c:	4a20      	ldr	r2, [pc, #128]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f3e:	f043 0301 	orr.w	r3, r3, #1
 8100f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f46:	4b1e      	ldr	r3, [pc, #120]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f4c:	f003 0301 	and.w	r3, r3, #1
 8100f50:	60bb      	str	r3, [r7, #8]
 8100f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100f54:	4b1a      	ldr	r3, [pc, #104]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f5a:	4a19      	ldr	r2, [pc, #100]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f5c:	f043 0308 	orr.w	r3, r3, #8
 8100f60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f64:	4b16      	ldr	r3, [pc, #88]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f6a:	f003 0308 	and.w	r3, r3, #8
 8100f6e:	607b      	str	r3, [r7, #4]
 8100f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f72:	4b13      	ldr	r3, [pc, #76]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f78:	4a11      	ldr	r2, [pc, #68]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f7a:	f043 0302 	orr.w	r3, r3, #2
 8100f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f82:	4b0f      	ldr	r3, [pc, #60]	; (8100fc0 <MX_GPIO_Init+0xa0>)
 8100f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f88:	f003 0302 	and.w	r3, r3, #2
 8100f8c:	603b      	str	r3, [r7, #0]
 8100f8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100f90:	2200      	movs	r2, #0
 8100f92:	2110      	movs	r1, #16
 8100f94:	480b      	ldr	r0, [pc, #44]	; (8100fc4 <MX_GPIO_Init+0xa4>)
 8100f96:	f004 f909 	bl	81051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100f9a:	2310      	movs	r3, #16
 8100f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100f9e:	2301      	movs	r3, #1
 8100fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fa2:	2300      	movs	r3, #0
 8100fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fa6:	2300      	movs	r3, #0
 8100fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100faa:	f107 030c 	add.w	r3, r7, #12
 8100fae:	4619      	mov	r1, r3
 8100fb0:	4804      	ldr	r0, [pc, #16]	; (8100fc4 <MX_GPIO_Init+0xa4>)
 8100fb2:	f003 ff4b 	bl	8104e4c <HAL_GPIO_Init>

}
 8100fb6:	bf00      	nop
 8100fb8:	3720      	adds	r7, #32
 8100fba:	46bd      	mov	sp, r7
 8100fbc:	bd80      	pop	{r7, pc}
 8100fbe:	bf00      	nop
 8100fc0:	58024400 	.word	0x58024400
 8100fc4:	58020000 	.word	0x58020000

08100fc8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8100fc8:	b580      	push	{r7, lr}
 8100fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100fcc:	4b1b      	ldr	r3, [pc, #108]	; (810103c <MX_I2C1_Init+0x74>)
 8100fce:	4a1c      	ldr	r2, [pc, #112]	; (8101040 <MX_I2C1_Init+0x78>)
 8100fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8100fd2:	4b1a      	ldr	r3, [pc, #104]	; (810103c <MX_I2C1_Init+0x74>)
 8100fd4:	4a1b      	ldr	r2, [pc, #108]	; (8101044 <MX_I2C1_Init+0x7c>)
 8100fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8100fd8:	4b18      	ldr	r3, [pc, #96]	; (810103c <MX_I2C1_Init+0x74>)
 8100fda:	2200      	movs	r2, #0
 8100fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100fde:	4b17      	ldr	r3, [pc, #92]	; (810103c <MX_I2C1_Init+0x74>)
 8100fe0:	2201      	movs	r2, #1
 8100fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100fe4:	4b15      	ldr	r3, [pc, #84]	; (810103c <MX_I2C1_Init+0x74>)
 8100fe6:	2200      	movs	r2, #0
 8100fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8100fea:	4b14      	ldr	r3, [pc, #80]	; (810103c <MX_I2C1_Init+0x74>)
 8100fec:	2200      	movs	r2, #0
 8100fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100ff0:	4b12      	ldr	r3, [pc, #72]	; (810103c <MX_I2C1_Init+0x74>)
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100ff6:	4b11      	ldr	r3, [pc, #68]	; (810103c <MX_I2C1_Init+0x74>)
 8100ff8:	2200      	movs	r2, #0
 8100ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100ffc:	4b0f      	ldr	r3, [pc, #60]	; (810103c <MX_I2C1_Init+0x74>)
 8100ffe:	2200      	movs	r2, #0
 8101000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101002:	480e      	ldr	r0, [pc, #56]	; (810103c <MX_I2C1_Init+0x74>)
 8101004:	f004 f8fe 	bl	8105204 <HAL_I2C_Init>
 8101008:	4603      	mov	r3, r0
 810100a:	2b00      	cmp	r3, #0
 810100c:	d001      	beq.n	8101012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810100e:	f000 f97c 	bl	810130a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101012:	2100      	movs	r1, #0
 8101014:	4809      	ldr	r0, [pc, #36]	; (810103c <MX_I2C1_Init+0x74>)
 8101016:	f005 f80a 	bl	810602e <HAL_I2CEx_ConfigAnalogFilter>
 810101a:	4603      	mov	r3, r0
 810101c:	2b00      	cmp	r3, #0
 810101e:	d001      	beq.n	8101024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101020:	f000 f973 	bl	810130a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101024:	2100      	movs	r1, #0
 8101026:	4805      	ldr	r0, [pc, #20]	; (810103c <MX_I2C1_Init+0x74>)
 8101028:	f005 f84c 	bl	81060c4 <HAL_I2CEx_ConfigDigitalFilter>
 810102c:	4603      	mov	r3, r0
 810102e:	2b00      	cmp	r3, #0
 8101030:	d001      	beq.n	8101036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101032:	f000 f96a 	bl	810130a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101036:	bf00      	nop
 8101038:	bd80      	pop	{r7, pc}
 810103a:	bf00      	nop
 810103c:	100000b0 	.word	0x100000b0
 8101040:	40005400 	.word	0x40005400
 8101044:	307075b1 	.word	0x307075b1

08101048 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101048:	b580      	push	{r7, lr}
 810104a:	b0b8      	sub	sp, #224	; 0xe0
 810104c:	af00      	add	r7, sp, #0
 810104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101050:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101054:	2200      	movs	r2, #0
 8101056:	601a      	str	r2, [r3, #0]
 8101058:	605a      	str	r2, [r3, #4]
 810105a:	609a      	str	r2, [r3, #8]
 810105c:	60da      	str	r2, [r3, #12]
 810105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101060:	f107 0310 	add.w	r3, r7, #16
 8101064:	22bc      	movs	r2, #188	; 0xbc
 8101066:	2100      	movs	r1, #0
 8101068:	4618      	mov	r0, r3
 810106a:	f008 ffe7 	bl	810a03c <memset>
  if(i2cHandle->Instance==I2C1)
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	681b      	ldr	r3, [r3, #0]
 8101072:	4a5b      	ldr	r2, [pc, #364]	; (81011e0 <HAL_I2C_MspInit+0x198>)
 8101074:	4293      	cmp	r3, r2
 8101076:	f040 80af 	bne.w	81011d8 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 810107a:	2308      	movs	r3, #8
 810107c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810107e:	2300      	movs	r3, #0
 8101080:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101084:	f107 0310 	add.w	r3, r7, #16
 8101088:	4618      	mov	r0, r3
 810108a:	f005 fac7 	bl	810661c <HAL_RCCEx_PeriphCLKConfig>
 810108e:	4603      	mov	r3, r0
 8101090:	2b00      	cmp	r3, #0
 8101092:	d001      	beq.n	8101098 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101094:	f000 f939 	bl	810130a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101098:	4b52      	ldr	r3, [pc, #328]	; (81011e4 <HAL_I2C_MspInit+0x19c>)
 810109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810109e:	4a51      	ldr	r2, [pc, #324]	; (81011e4 <HAL_I2C_MspInit+0x19c>)
 81010a0:	f043 0302 	orr.w	r3, r3, #2
 81010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010a8:	4b4e      	ldr	r3, [pc, #312]	; (81011e4 <HAL_I2C_MspInit+0x19c>)
 81010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ae:	f003 0302 	and.w	r3, r3, #2
 81010b2:	60fb      	str	r3, [r7, #12]
 81010b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 81010ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81010be:	2312      	movs	r3, #18
 81010c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010c4:	2300      	movs	r3, #0
 81010c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010ca:	2300      	movs	r3, #0
 81010cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 81010d0:	2304      	movs	r3, #4
 81010d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81010d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81010da:	4619      	mov	r1, r3
 81010dc:	4842      	ldr	r0, [pc, #264]	; (81011e8 <HAL_I2C_MspInit+0x1a0>)
 81010de:	f003 feb5 	bl	8104e4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 81010e2:	4b40      	ldr	r3, [pc, #256]	; (81011e4 <HAL_I2C_MspInit+0x19c>)
 81010e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81010e8:	4a3e      	ldr	r2, [pc, #248]	; (81011e4 <HAL_I2C_MspInit+0x19c>)
 81010ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81010ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81010f2:	4b3c      	ldr	r3, [pc, #240]	; (81011e4 <HAL_I2C_MspInit+0x19c>)
 81010f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81010fc:	60bb      	str	r3, [r7, #8]
 81010fe:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101100:	4b3a      	ldr	r3, [pc, #232]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101102:	4a3b      	ldr	r2, [pc, #236]	; (81011f0 <HAL_I2C_MspInit+0x1a8>)
 8101104:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101106:	4b39      	ldr	r3, [pc, #228]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101108:	2221      	movs	r2, #33	; 0x21
 810110a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810110c:	4b37      	ldr	r3, [pc, #220]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 810110e:	2200      	movs	r2, #0
 8101110:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101112:	4b36      	ldr	r3, [pc, #216]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101114:	2200      	movs	r2, #0
 8101116:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101118:	4b34      	ldr	r3, [pc, #208]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 810111a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810111e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101120:	4b32      	ldr	r3, [pc, #200]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101122:	2200      	movs	r2, #0
 8101124:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101126:	4b31      	ldr	r3, [pc, #196]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101128:	2200      	movs	r2, #0
 810112a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 810112c:	4b2f      	ldr	r3, [pc, #188]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 810112e:	2200      	movs	r2, #0
 8101130:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101132:	4b2e      	ldr	r3, [pc, #184]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101138:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810113a:	4b2c      	ldr	r3, [pc, #176]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 810113c:	2200      	movs	r2, #0
 810113e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101140:	482a      	ldr	r0, [pc, #168]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101142:	f001 f83d 	bl	81021c0 <HAL_DMA_Init>
 8101146:	4603      	mov	r3, r0
 8101148:	2b00      	cmp	r3, #0
 810114a:	d001      	beq.n	8101150 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 810114c:	f000 f8dd 	bl	810130a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	4a26      	ldr	r2, [pc, #152]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101154:	63da      	str	r2, [r3, #60]	; 0x3c
 8101156:	4a25      	ldr	r2, [pc, #148]	; (81011ec <HAL_I2C_MspInit+0x1a4>)
 8101158:	687b      	ldr	r3, [r7, #4]
 810115a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 810115c:	4b25      	ldr	r3, [pc, #148]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 810115e:	4a26      	ldr	r2, [pc, #152]	; (81011f8 <HAL_I2C_MspInit+0x1b0>)
 8101160:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101162:	4b24      	ldr	r3, [pc, #144]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 8101164:	2222      	movs	r2, #34	; 0x22
 8101166:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101168:	4b22      	ldr	r3, [pc, #136]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 810116a:	2240      	movs	r2, #64	; 0x40
 810116c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810116e:	4b21      	ldr	r3, [pc, #132]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 8101170:	2200      	movs	r2, #0
 8101172:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101174:	4b1f      	ldr	r3, [pc, #124]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 8101176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810117a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810117c:	4b1d      	ldr	r3, [pc, #116]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 810117e:	2200      	movs	r2, #0
 8101180:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101182:	4b1c      	ldr	r3, [pc, #112]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 8101184:	2200      	movs	r2, #0
 8101186:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101188:	4b1a      	ldr	r3, [pc, #104]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 810118a:	2200      	movs	r2, #0
 810118c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 810118e:	4b19      	ldr	r3, [pc, #100]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 8101190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101194:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101196:	4b17      	ldr	r3, [pc, #92]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 8101198:	2200      	movs	r2, #0
 810119a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 810119c:	4815      	ldr	r0, [pc, #84]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 810119e:	f001 f80f 	bl	81021c0 <HAL_DMA_Init>
 81011a2:	4603      	mov	r3, r0
 81011a4:	2b00      	cmp	r3, #0
 81011a6:	d001      	beq.n	81011ac <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 81011a8:	f000 f8af 	bl	810130a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	4a11      	ldr	r2, [pc, #68]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 81011b0:	639a      	str	r2, [r3, #56]	; 0x38
 81011b2:	4a10      	ldr	r2, [pc, #64]	; (81011f4 <HAL_I2C_MspInit+0x1ac>)
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 81011b8:	2200      	movs	r2, #0
 81011ba:	2100      	movs	r1, #0
 81011bc:	201f      	movs	r0, #31
 81011be:	f000 ff3a 	bl	8102036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 81011c2:	201f      	movs	r0, #31
 81011c4:	f000 ff51 	bl	810206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 81011c8:	2200      	movs	r2, #0
 81011ca:	2100      	movs	r1, #0
 81011cc:	2020      	movs	r0, #32
 81011ce:	f000 ff32 	bl	8102036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 81011d2:	2020      	movs	r0, #32
 81011d4:	f000 ff49 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 81011d8:	bf00      	nop
 81011da:	37e0      	adds	r7, #224	; 0xe0
 81011dc:	46bd      	mov	sp, r7
 81011de:	bd80      	pop	{r7, pc}
 81011e0:	40005400 	.word	0x40005400
 81011e4:	58024400 	.word	0x58024400
 81011e8:	58020400 	.word	0x58020400
 81011ec:	100000fc 	.word	0x100000fc
 81011f0:	40020040 	.word	0x40020040
 81011f4:	10000038 	.word	0x10000038
 81011f8:	40020058 	.word	0x40020058

081011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81011fc:	b580      	push	{r7, lr}
 81011fe:	b082      	sub	sp, #8
 8101200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8101202:	f000 f855 	bl	81012b0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101206:	4b25      	ldr	r3, [pc, #148]	; (810129c <main+0xa0>)
 8101208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810120c:	4a23      	ldr	r2, [pc, #140]	; (810129c <main+0xa0>)
 810120e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101216:	4b21      	ldr	r3, [pc, #132]	; (810129c <main+0xa0>)
 8101218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810121c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101220:	607b      	str	r3, [r7, #4]
 8101222:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101224:	2001      	movs	r0, #1
 8101226:	f003 ffdb 	bl	81051e0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810122a:	f005 f811 	bl	8106250 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810122e:	2201      	movs	r2, #1
 8101230:	2102      	movs	r1, #2
 8101232:	2000      	movs	r0, #0
 8101234:	f004 ff92 	bl	810615c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101238:	4b19      	ldr	r3, [pc, #100]	; (81012a0 <main+0xa4>)
 810123a:	681b      	ldr	r3, [r3, #0]
 810123c:	091b      	lsrs	r3, r3, #4
 810123e:	f003 030f 	and.w	r3, r3, #15
 8101242:	2b07      	cmp	r3, #7
 8101244:	d108      	bne.n	8101258 <main+0x5c>
 8101246:	4b17      	ldr	r3, [pc, #92]	; (81012a4 <main+0xa8>)
 8101248:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810124c:	4a15      	ldr	r2, [pc, #84]	; (81012a4 <main+0xa8>)
 810124e:	f043 0301 	orr.w	r3, r3, #1
 8101252:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101256:	e007      	b.n	8101268 <main+0x6c>
 8101258:	4b12      	ldr	r3, [pc, #72]	; (81012a4 <main+0xa8>)
 810125a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810125e:	4a11      	ldr	r2, [pc, #68]	; (81012a4 <main+0xa8>)
 8101260:	f043 0301 	orr.w	r3, r3, #1
 8101264:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101268:	f000 fd32 	bl	8101cd0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810126c:	f7ff fe58 	bl	8100f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8101270:	f7ff fdfe 	bl	8100e70 <MX_DMA_Init>
  MX_SPI1_Init();
 8101274:	f000 f84e 	bl	8101314 <MX_SPI1_Init>
  MX_I2C1_Init();
 8101278:	f7ff fea6 	bl	8100fc8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 810127c:	f000 fbe0 	bl	8101a40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101280:	2201      	movs	r2, #1
 8101282:	2110      	movs	r1, #16
 8101284:	4808      	ldr	r0, [pc, #32]	; (81012a8 <main+0xac>)
 8101286:	f003 ff91 	bl	81051ac <HAL_GPIO_WritePin>
   // setMagScale(16);
   // setAccelScale(16);
   // setGyroScale(2000);
 // uint16_t res = setup(&imu);
  //CheckSensorID();
  ConfigGPS();
 810128a:	f000 fabb 	bl	8101804 <ConfigGPS>

    /* USER CODE BEGIN 3 */
      //readGyro(&imu);
     // readMag(&imu);

    processGPS(&gps);
 810128e:	4807      	ldr	r0, [pc, #28]	; (81012ac <main+0xb0>)
 8101290:	f000 fa3e 	bl	8101710 <processGPS>
     // readAccel(&imu);

      HAL_Delay(100);
 8101294:	2064      	movs	r0, #100	; 0x64
 8101296:	f000 fdcf 	bl	8101e38 <HAL_Delay>
    processGPS(&gps);
 810129a:	e7f8      	b.n	810128e <main+0x92>
 810129c:	58024400 	.word	0x58024400
 81012a0:	e000ed00 	.word	0xe000ed00
 81012a4:	58026400 	.word	0x58026400
 81012a8:	58020000 	.word	0x58020000
 81012ac:	10000174 	.word	0x10000174

081012b0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 81012b0:	b580      	push	{r7, lr}
 81012b2:	b084      	sub	sp, #16
 81012b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 81012b6:	463b      	mov	r3, r7
 81012b8:	2200      	movs	r2, #0
 81012ba:	601a      	str	r2, [r3, #0]
 81012bc:	605a      	str	r2, [r3, #4]
 81012be:	609a      	str	r2, [r3, #8]
 81012c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 81012c2:	f000 feed 	bl	81020a0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81012c6:	2301      	movs	r3, #1
 81012c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 81012ca:	2300      	movs	r3, #0
 81012cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x10000000;
 81012ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81012d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 81012d4:	2311      	movs	r3, #17
 81012d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 81012d8:	2300      	movs	r3, #0
 81012da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 81012dc:	2300      	movs	r3, #0
 81012de:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 81012e0:	2303      	movs	r3, #3
 81012e2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81012e4:	2300      	movs	r3, #0
 81012e6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 81012e8:	2300      	movs	r3, #0
 81012ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 81012ec:	2300      	movs	r3, #0
 81012ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 81012f0:	2300      	movs	r3, #0
 81012f2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81012f4:	463b      	mov	r3, r7
 81012f6:	4618      	mov	r0, r3
 81012f8:	f000 ff0a 	bl	8102110 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 81012fc:	2004      	movs	r0, #4
 81012fe:	f000 fee7 	bl	81020d0 <HAL_MPU_Enable>

}
 8101302:	bf00      	nop
 8101304:	3710      	adds	r7, #16
 8101306:	46bd      	mov	sp, r7
 8101308:	bd80      	pop	{r7, pc}

0810130a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810130a:	b480      	push	{r7}
 810130c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810130e:	b672      	cpsid	i
}
 8101310:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101312:	e7fe      	b.n	8101312 <Error_Handler+0x8>

08101314 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101314:	b580      	push	{r7, lr}
 8101316:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101318:	4b27      	ldr	r3, [pc, #156]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810131a:	4a28      	ldr	r2, [pc, #160]	; (81013bc <MX_SPI1_Init+0xa8>)
 810131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810131e:	4b26      	ldr	r3, [pc, #152]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101320:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101326:	4b24      	ldr	r3, [pc, #144]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101328:	2200      	movs	r2, #0
 810132a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 810132c:	4b22      	ldr	r3, [pc, #136]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810132e:	2207      	movs	r2, #7
 8101330:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101332:	4b21      	ldr	r3, [pc, #132]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101334:	2200      	movs	r2, #0
 8101336:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101338:	4b1f      	ldr	r3, [pc, #124]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810133a:	2200      	movs	r2, #0
 810133c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810133e:	4b1e      	ldr	r3, [pc, #120]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101340:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101344:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101346:	4b1c      	ldr	r3, [pc, #112]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101348:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 810134c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810134e:	4b1a      	ldr	r3, [pc, #104]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101350:	2200      	movs	r2, #0
 8101352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101354:	4b18      	ldr	r3, [pc, #96]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101356:	2200      	movs	r2, #0
 8101358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810135a:	4b17      	ldr	r3, [pc, #92]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810135c:	2200      	movs	r2, #0
 810135e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101360:	4b15      	ldr	r3, [pc, #84]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101362:	2200      	movs	r2, #0
 8101364:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101366:	4b14      	ldr	r3, [pc, #80]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810136c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810136e:	4b12      	ldr	r3, [pc, #72]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101370:	2200      	movs	r2, #0
 8101372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101374:	4b10      	ldr	r3, [pc, #64]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101376:	2200      	movs	r2, #0
 8101378:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810137a:	4b0f      	ldr	r3, [pc, #60]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810137c:	2200      	movs	r2, #0
 810137e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101380:	4b0d      	ldr	r3, [pc, #52]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101382:	2200      	movs	r2, #0
 8101384:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101386:	4b0c      	ldr	r3, [pc, #48]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101388:	2200      	movs	r2, #0
 810138a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810138c:	4b0a      	ldr	r3, [pc, #40]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810138e:	2200      	movs	r2, #0
 8101390:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101392:	4b09      	ldr	r3, [pc, #36]	; (81013b8 <MX_SPI1_Init+0xa4>)
 8101394:	2200      	movs	r2, #0
 8101396:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101398:	4b07      	ldr	r3, [pc, #28]	; (81013b8 <MX_SPI1_Init+0xa4>)
 810139a:	2200      	movs	r2, #0
 810139c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810139e:	4b06      	ldr	r3, [pc, #24]	; (81013b8 <MX_SPI1_Init+0xa4>)
 81013a0:	2200      	movs	r2, #0
 81013a2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81013a4:	4804      	ldr	r0, [pc, #16]	; (81013b8 <MX_SPI1_Init+0xa4>)
 81013a6:	f006 fc9b 	bl	8107ce0 <HAL_SPI_Init>
 81013aa:	4603      	mov	r3, r0
 81013ac:	2b00      	cmp	r3, #0
 81013ae:	d001      	beq.n	81013b4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81013b0:	f7ff ffab 	bl	810130a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81013b4:	bf00      	nop
 81013b6:	bd80      	pop	{r7, pc}
 81013b8:	1000028c 	.word	0x1000028c
 81013bc:	40013000 	.word	0x40013000

081013c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81013c0:	b580      	push	{r7, lr}
 81013c2:	b0b8      	sub	sp, #224	; 0xe0
 81013c4:	af00      	add	r7, sp, #0
 81013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81013cc:	2200      	movs	r2, #0
 81013ce:	601a      	str	r2, [r3, #0]
 81013d0:	605a      	str	r2, [r3, #4]
 81013d2:	609a      	str	r2, [r3, #8]
 81013d4:	60da      	str	r2, [r3, #12]
 81013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013d8:	f107 0310 	add.w	r3, r7, #16
 81013dc:	22bc      	movs	r2, #188	; 0xbc
 81013de:	2100      	movs	r1, #0
 81013e0:	4618      	mov	r0, r3
 81013e2:	f008 fe2b 	bl	810a03c <memset>
  if(spiHandle->Instance==SPI1)
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	681b      	ldr	r3, [r3, #0]
 81013ea:	4a57      	ldr	r2, [pc, #348]	; (8101548 <HAL_SPI_MspInit+0x188>)
 81013ec:	4293      	cmp	r3, r2
 81013ee:	f040 80a6 	bne.w	810153e <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81013f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81013f8:	2300      	movs	r3, #0
 81013fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81013fc:	f107 0310 	add.w	r3, r7, #16
 8101400:	4618      	mov	r0, r3
 8101402:	f005 f90b 	bl	810661c <HAL_RCCEx_PeriphCLKConfig>
 8101406:	4603      	mov	r3, r0
 8101408:	2b00      	cmp	r3, #0
 810140a:	d001      	beq.n	8101410 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 810140c:	f7ff ff7d 	bl	810130a <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101410:	4b4e      	ldr	r3, [pc, #312]	; (810154c <HAL_SPI_MspInit+0x18c>)
 8101412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101416:	4a4d      	ldr	r2, [pc, #308]	; (810154c <HAL_SPI_MspInit+0x18c>)
 8101418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 810141c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101420:	4b4a      	ldr	r3, [pc, #296]	; (810154c <HAL_SPI_MspInit+0x18c>)
 8101422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810142a:	60fb      	str	r3, [r7, #12]
 810142c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810142e:	4b47      	ldr	r3, [pc, #284]	; (810154c <HAL_SPI_MspInit+0x18c>)
 8101430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101434:	4a45      	ldr	r2, [pc, #276]	; (810154c <HAL_SPI_MspInit+0x18c>)
 8101436:	f043 0301 	orr.w	r3, r3, #1
 810143a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810143e:	4b43      	ldr	r3, [pc, #268]	; (810154c <HAL_SPI_MspInit+0x18c>)
 8101440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101444:	f003 0301 	and.w	r3, r3, #1
 8101448:	60bb      	str	r3, [r7, #8]
 810144a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 810144c:	23e0      	movs	r3, #224	; 0xe0
 810144e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101452:	2302      	movs	r3, #2
 8101454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101458:	2300      	movs	r3, #0
 810145a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810145e:	2300      	movs	r3, #0
 8101460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101464:	2305      	movs	r3, #5
 8101466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810146a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810146e:	4619      	mov	r1, r3
 8101470:	4837      	ldr	r0, [pc, #220]	; (8101550 <HAL_SPI_MspInit+0x190>)
 8101472:	f003 fceb 	bl	8104e4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101476:	4b37      	ldr	r3, [pc, #220]	; (8101554 <HAL_SPI_MspInit+0x194>)
 8101478:	4a37      	ldr	r2, [pc, #220]	; (8101558 <HAL_SPI_MspInit+0x198>)
 810147a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 810147c:	4b35      	ldr	r3, [pc, #212]	; (8101554 <HAL_SPI_MspInit+0x194>)
 810147e:	2225      	movs	r2, #37	; 0x25
 8101480:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101482:	4b34      	ldr	r3, [pc, #208]	; (8101554 <HAL_SPI_MspInit+0x194>)
 8101484:	2200      	movs	r2, #0
 8101486:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101488:	4b32      	ldr	r3, [pc, #200]	; (8101554 <HAL_SPI_MspInit+0x194>)
 810148a:	2200      	movs	r2, #0
 810148c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810148e:	4b31      	ldr	r3, [pc, #196]	; (8101554 <HAL_SPI_MspInit+0x194>)
 8101490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101494:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101496:	4b2f      	ldr	r3, [pc, #188]	; (8101554 <HAL_SPI_MspInit+0x194>)
 8101498:	2200      	movs	r2, #0
 810149a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810149c:	4b2d      	ldr	r3, [pc, #180]	; (8101554 <HAL_SPI_MspInit+0x194>)
 810149e:	2200      	movs	r2, #0
 81014a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 81014a2:	4b2c      	ldr	r3, [pc, #176]	; (8101554 <HAL_SPI_MspInit+0x194>)
 81014a4:	2200      	movs	r2, #0
 81014a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 81014a8:	4b2a      	ldr	r3, [pc, #168]	; (8101554 <HAL_SPI_MspInit+0x194>)
 81014aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81014ae:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81014b0:	4b28      	ldr	r3, [pc, #160]	; (8101554 <HAL_SPI_MspInit+0x194>)
 81014b2:	2200      	movs	r2, #0
 81014b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 81014b6:	4827      	ldr	r0, [pc, #156]	; (8101554 <HAL_SPI_MspInit+0x194>)
 81014b8:	f000 fe82 	bl	81021c0 <HAL_DMA_Init>
 81014bc:	4603      	mov	r3, r0
 81014be:	2b00      	cmp	r3, #0
 81014c0:	d001      	beq.n	81014c6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 81014c2:	f7ff ff22 	bl	810130a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	4a22      	ldr	r2, [pc, #136]	; (8101554 <HAL_SPI_MspInit+0x194>)
 81014ca:	67da      	str	r2, [r3, #124]	; 0x7c
 81014cc:	4a21      	ldr	r2, [pc, #132]	; (8101554 <HAL_SPI_MspInit+0x194>)
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 81014d2:	4b22      	ldr	r3, [pc, #136]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014d4:	4a22      	ldr	r2, [pc, #136]	; (8101560 <HAL_SPI_MspInit+0x1a0>)
 81014d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 81014d8:	4b20      	ldr	r3, [pc, #128]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014da:	2226      	movs	r2, #38	; 0x26
 81014dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81014de:	4b1f      	ldr	r3, [pc, #124]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014e0:	2240      	movs	r2, #64	; 0x40
 81014e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81014e4:	4b1d      	ldr	r3, [pc, #116]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014e6:	2200      	movs	r2, #0
 81014e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81014ea:	4b1c      	ldr	r3, [pc, #112]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81014f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81014f2:	4b1a      	ldr	r3, [pc, #104]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014f4:	2200      	movs	r2, #0
 81014f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81014f8:	4b18      	ldr	r3, [pc, #96]	; (810155c <HAL_SPI_MspInit+0x19c>)
 81014fa:	2200      	movs	r2, #0
 81014fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81014fe:	4b17      	ldr	r3, [pc, #92]	; (810155c <HAL_SPI_MspInit+0x19c>)
 8101500:	2200      	movs	r2, #0
 8101502:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101504:	4b15      	ldr	r3, [pc, #84]	; (810155c <HAL_SPI_MspInit+0x19c>)
 8101506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810150a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810150c:	4b13      	ldr	r3, [pc, #76]	; (810155c <HAL_SPI_MspInit+0x19c>)
 810150e:	2200      	movs	r2, #0
 8101510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101512:	4812      	ldr	r0, [pc, #72]	; (810155c <HAL_SPI_MspInit+0x19c>)
 8101514:	f000 fe54 	bl	81021c0 <HAL_DMA_Init>
 8101518:	4603      	mov	r3, r0
 810151a:	2b00      	cmp	r3, #0
 810151c:	d001      	beq.n	8101522 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 810151e:	f7ff fef4 	bl	810130a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	4a0d      	ldr	r2, [pc, #52]	; (810155c <HAL_SPI_MspInit+0x19c>)
 8101526:	679a      	str	r2, [r3, #120]	; 0x78
 8101528:	4a0c      	ldr	r2, [pc, #48]	; (810155c <HAL_SPI_MspInit+0x19c>)
 810152a:	687b      	ldr	r3, [r7, #4]
 810152c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 810152e:	2200      	movs	r2, #0
 8101530:	2100      	movs	r1, #0
 8101532:	2023      	movs	r0, #35	; 0x23
 8101534:	f000 fd7f 	bl	8102036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101538:	2023      	movs	r0, #35	; 0x23
 810153a:	f000 fd96 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 810153e:	bf00      	nop
 8101540:	37e0      	adds	r7, #224	; 0xe0
 8101542:	46bd      	mov	sp, r7
 8101544:	bd80      	pop	{r7, pc}
 8101546:	bf00      	nop
 8101548:	40013000 	.word	0x40013000
 810154c:	58024400 	.word	0x58024400
 8101550:	58020000 	.word	0x58020000
 8101554:	10000314 	.word	0x10000314
 8101558:	40020010 	.word	0x40020010
 810155c:	1000038c 	.word	0x1000038c
 8101560:	40020028 	.word	0x40020028

08101564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101564:	b480      	push	{r7}
 8101566:	b083      	sub	sp, #12
 8101568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810156a:	4b0a      	ldr	r3, [pc, #40]	; (8101594 <HAL_MspInit+0x30>)
 810156c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101570:	4a08      	ldr	r2, [pc, #32]	; (8101594 <HAL_MspInit+0x30>)
 8101572:	f043 0302 	orr.w	r3, r3, #2
 8101576:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810157a:	4b06      	ldr	r3, [pc, #24]	; (8101594 <HAL_MspInit+0x30>)
 810157c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101580:	f003 0302 	and.w	r3, r3, #2
 8101584:	607b      	str	r3, [r7, #4]
 8101586:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101588:	bf00      	nop
 810158a:	370c      	adds	r7, #12
 810158c:	46bd      	mov	sp, r7
 810158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101592:	4770      	bx	lr
 8101594:	58024400 	.word	0x58024400

08101598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101598:	b480      	push	{r7}
 810159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810159c:	e7fe      	b.n	810159c <NMI_Handler+0x4>

0810159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810159e:	b480      	push	{r7}
 81015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81015a2:	e7fe      	b.n	81015a2 <HardFault_Handler+0x4>

081015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81015a4:	b480      	push	{r7}
 81015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81015a8:	e7fe      	b.n	81015a8 <MemManage_Handler+0x4>

081015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81015aa:	b480      	push	{r7}
 81015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81015ae:	e7fe      	b.n	81015ae <BusFault_Handler+0x4>

081015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81015b0:	b480      	push	{r7}
 81015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81015b4:	e7fe      	b.n	81015b4 <UsageFault_Handler+0x4>

081015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81015b6:	b480      	push	{r7}
 81015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81015ba:	bf00      	nop
 81015bc:	46bd      	mov	sp, r7
 81015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c2:	4770      	bx	lr

081015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81015c4:	b480      	push	{r7}
 81015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81015c8:	bf00      	nop
 81015ca:	46bd      	mov	sp, r7
 81015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d0:	4770      	bx	lr

081015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81015d2:	b480      	push	{r7}
 81015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81015d6:	bf00      	nop
 81015d8:	46bd      	mov	sp, r7
 81015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015de:	4770      	bx	lr

081015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81015e0:	b580      	push	{r7, lr}
 81015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81015e4:	f000 fc08 	bl	8101df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81015e8:	bf00      	nop
 81015ea:	bd80      	pop	{r7, pc}

081015ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81015ec:	b580      	push	{r7, lr}
 81015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81015f0:	4802      	ldr	r0, [pc, #8]	; (81015fc <DMA1_Stream0_IRQHandler+0x10>)
 81015f2:	f002 f90b 	bl	810380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81015f6:	bf00      	nop
 81015f8:	bd80      	pop	{r7, pc}
 81015fa:	bf00      	nop
 81015fc:	10000314 	.word	0x10000314

08101600 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101600:	b580      	push	{r7, lr}
 8101602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101604:	4802      	ldr	r0, [pc, #8]	; (8101610 <DMA1_Stream1_IRQHandler+0x10>)
 8101606:	f002 f901 	bl	810380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810160a:	bf00      	nop
 810160c:	bd80      	pop	{r7, pc}
 810160e:	bf00      	nop
 8101610:	1000038c 	.word	0x1000038c

08101614 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8101614:	b580      	push	{r7, lr}
 8101616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8101618:	4802      	ldr	r0, [pc, #8]	; (8101624 <DMA1_Stream2_IRQHandler+0x10>)
 810161a:	f002 f8f7 	bl	810380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 810161e:	bf00      	nop
 8101620:	bd80      	pop	{r7, pc}
 8101622:	bf00      	nop
 8101624:	100000fc 	.word	0x100000fc

08101628 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8101628:	b580      	push	{r7, lr}
 810162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 810162c:	4802      	ldr	r0, [pc, #8]	; (8101638 <DMA1_Stream3_IRQHandler+0x10>)
 810162e:	f002 f8ed 	bl	810380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8101632:	bf00      	nop
 8101634:	bd80      	pop	{r7, pc}
 8101636:	bf00      	nop
 8101638:	10000038 	.word	0x10000038

0810163c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 810163c:	b580      	push	{r7, lr}
 810163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8101640:	4802      	ldr	r0, [pc, #8]	; (810164c <I2C1_EV_IRQHandler+0x10>)
 8101642:	f003 fe6e 	bl	8105322 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8101646:	bf00      	nop
 8101648:	bd80      	pop	{r7, pc}
 810164a:	bf00      	nop
 810164c:	100000b0 	.word	0x100000b0

08101650 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8101650:	b580      	push	{r7, lr}
 8101652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8101654:	4802      	ldr	r0, [pc, #8]	; (8101660 <I2C1_ER_IRQHandler+0x10>)
 8101656:	f003 fe7e 	bl	8105356 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 810165a:	bf00      	nop
 810165c:	bd80      	pop	{r7, pc}
 810165e:	bf00      	nop
 8101660:	100000b0 	.word	0x100000b0

08101664 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101664:	b580      	push	{r7, lr}
 8101666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101668:	4802      	ldr	r0, [pc, #8]	; (8101674 <SPI1_IRQHandler+0x10>)
 810166a:	f006 fc3b 	bl	8107ee4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 810166e:	bf00      	nop
 8101670:	bd80      	pop	{r7, pc}
 8101672:	bf00      	nop
 8101674:	1000028c 	.word	0x1000028c

08101678 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8101678:	b580      	push	{r7, lr}
 810167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 810167c:	4802      	ldr	r0, [pc, #8]	; (8101688 <USART3_IRQHandler+0x10>)
 810167e:	f007 f81b 	bl	81086b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8101682:	bf00      	nop
 8101684:	bd80      	pop	{r7, pc}
 8101686:	bf00      	nop
 8101688:	1000047c 	.word	0x1000047c

0810168c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 810168c:	b580      	push	{r7, lr}
 810168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101690:	4802      	ldr	r0, [pc, #8]	; (810169c <DMA1_Stream7_IRQHandler+0x10>)
 8101692:	f002 f8bb 	bl	810380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8101696:	bf00      	nop
 8101698:	bd80      	pop	{r7, pc}
 810169a:	bf00      	nop
 810169c:	10000404 	.word	0x10000404

081016a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 81016a4:	4802      	ldr	r0, [pc, #8]	; (81016b0 <DMA2_Stream0_IRQHandler+0x10>)
 81016a6:	f002 f8b1 	bl	810380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81016aa:	bf00      	nop
 81016ac:	bd80      	pop	{r7, pc}
 81016ae:	bf00      	nop
 81016b0:	1000050c 	.word	0x1000050c

081016b4 <calcChecksum>:
//      }
//
// }

 void calcChecksum(unsigned char* ck)
 {
 81016b4:	b580      	push	{r7, lr}
 81016b6:	b084      	sub	sp, #16
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 81016bc:	2202      	movs	r2, #2
 81016be:	2100      	movs	r1, #0
 81016c0:	6878      	ldr	r0, [r7, #4]
 81016c2:	f008 fcbb 	bl	810a03c <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 81016c6:	2300      	movs	r3, #0
 81016c8:	60fb      	str	r3, [r7, #12]
 81016ca:	e016      	b.n	81016fa <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	781a      	ldrb	r2, [r3, #0]
 81016d0:	68fb      	ldr	r3, [r7, #12]
 81016d2:	490e      	ldr	r1, [pc, #56]	; (810170c <calcChecksum+0x58>)
 81016d4:	440b      	add	r3, r1
 81016d6:	781b      	ldrb	r3, [r3, #0]
 81016d8:	4413      	add	r3, r2
 81016da:	b2da      	uxtb	r2, r3
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 81016e0:	687b      	ldr	r3, [r7, #4]
 81016e2:	3301      	adds	r3, #1
 81016e4:	7819      	ldrb	r1, [r3, #0]
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	781a      	ldrb	r2, [r3, #0]
 81016ea:	687b      	ldr	r3, [r7, #4]
 81016ec:	3301      	adds	r3, #1
 81016ee:	440a      	add	r2, r1
 81016f0:	b2d2      	uxtb	r2, r2
 81016f2:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 81016f4:	68fb      	ldr	r3, [r7, #12]
 81016f6:	3301      	adds	r3, #1
 81016f8:	60fb      	str	r3, [r7, #12]
 81016fa:	68fb      	ldr	r3, [r7, #12]
 81016fc:	2b5f      	cmp	r3, #95	; 0x5f
 81016fe:	dde5      	ble.n	81016cc <calcChecksum+0x18>
      }

 }
 8101700:	bf00      	nop
 8101702:	bf00      	nop
 8101704:	3710      	adds	r7, #16
 8101706:	46bd      	mov	sp, r7
 8101708:	bd80      	pop	{r7, pc}
 810170a:	bf00      	nop
 810170c:	10000190 	.word	0x10000190

08101710 <processGPS>:


 void processGPS(GPSHandle* gps)
 {
 8101710:	b580      	push	{r7, lr}
 8101712:	b082      	sub	sp, #8
 8101714:	af00      	add	r7, sp, #0
 8101716:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 8101718:	4b37      	ldr	r3, [pc, #220]	; (81017f8 <processGPS+0xe8>)
 810171a:	6a1b      	ldr	r3, [r3, #32]
 810171c:	4618      	mov	r0, r3
 810171e:	f7fe ff2d 	bl	810057c <__aeabi_i2d>
 8101722:	a333      	add	r3, pc, #204	; (adr r3, 81017f0 <processGPS+0xe0>)
 8101724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101728:	f7fe ff92 	bl	8100650 <__aeabi_dmul>
 810172c:	4602      	mov	r2, r0
 810172e:	460b      	mov	r3, r1
 8101730:	4610      	mov	r0, r2
 8101732:	4619      	mov	r1, r3
 8101734:	f7ff f99e 	bl	8100a74 <__aeabi_d2f>
 8101738:	4602      	mov	r2, r0
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 810173e:	4b2e      	ldr	r3, [pc, #184]	; (81017f8 <processGPS+0xe8>)
 8101740:	69db      	ldr	r3, [r3, #28]
 8101742:	4618      	mov	r0, r3
 8101744:	f7fe ff1a 	bl	810057c <__aeabi_i2d>
 8101748:	a329      	add	r3, pc, #164	; (adr r3, 81017f0 <processGPS+0xe0>)
 810174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810174e:	f7fe ff7f 	bl	8100650 <__aeabi_dmul>
 8101752:	4602      	mov	r2, r0
 8101754:	460b      	mov	r3, r1
 8101756:	4610      	mov	r0, r2
 8101758:	4619      	mov	r1, r3
 810175a:	f7ff f98b 	bl	8100a74 <__aeabi_d2f>
 810175e:	4602      	mov	r2, r0
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.height / 1000.0f;
 8101764:	4b24      	ldr	r3, [pc, #144]	; (81017f8 <processGPS+0xe8>)
 8101766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101768:	ee07 3a90 	vmov	s15, r3
 810176c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101770:	eddf 6a22 	vldr	s13, [pc, #136]	; 81017fc <processGPS+0xec>
 8101774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101778:	687b      	ldr	r3, [r7, #4]
 810177a:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 810177e:	4b1e      	ldr	r3, [pc, #120]	; (81017f8 <processGPS+0xe8>)
 8101780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101782:	ee07 3a90 	vmov	s15, r3
 8101786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810178a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 81017fc <processGPS+0xec>
 810178e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101792:	687b      	ldr	r3, [r7, #4]
 8101794:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 8101798:	4b17      	ldr	r3, [pc, #92]	; (81017f8 <processGPS+0xe8>)
 810179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810179c:	ee07 3a90 	vmov	s15, r3
 81017a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81017a4:	eddf 6a15 	vldr	s13, [pc, #84]	; 81017fc <processGPS+0xec>
 81017a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 81017b2:	4b11      	ldr	r3, [pc, #68]	; (81017f8 <processGPS+0xe8>)
 81017b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81017b6:	ee07 3a90 	vmov	s15, r3
 81017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81017be:	eddf 6a10 	vldr	s13, [pc, #64]	; 8101800 <processGPS+0xf0>
 81017c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 81017cc:	4b0a      	ldr	r3, [pc, #40]	; (81017f8 <processGPS+0xe8>)
 81017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81017d0:	ee07 3a90 	vmov	s15, r3
 81017d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81017d8:	eddf 6a08 	vldr	s13, [pc, #32]	; 81017fc <processGPS+0xec>
 81017dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	edc3 7a06 	vstr	s15, [r3, #24]


 }
 81017e6:	bf00      	nop
 81017e8:	3708      	adds	r7, #8
 81017ea:	46bd      	mov	sp, r7
 81017ec:	bd80      	pop	{r7, pc}
 81017ee:	bf00      	nop
 81017f0:	9abcaf48 	.word	0x9abcaf48
 81017f4:	3e7ad7f2 	.word	0x3e7ad7f2
 81017f8:	10000190 	.word	0x10000190
 81017fc:	447a0000 	.word	0x447a0000
 8101800:	c47a0000 	.word	0xc47a0000

08101804 <ConfigGPS>:
//     return *gps;
// }


 void ConfigGPS(void)
 {
 8101804:	b590      	push	{r4, r7, lr}
 8101806:	b0c1      	sub	sp, #260	; 0x104
 8101808:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 810180a:	4b43      	ldr	r3, [pc, #268]	; (8101918 <ConfigGPS+0x114>)
 810180c:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8101810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101812:	c407      	stmia	r4!, {r0, r1, r2}
 8101814:	8023      	strh	r3, [r4, #0]
 8101816:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 810181a:	220e      	movs	r2, #14
 810181c:	4619      	mov	r1, r3
 810181e:	483f      	ldr	r0, [pc, #252]	; (810191c <ConfigGPS+0x118>)
 8101820:	f006 fe84 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8101824:	2032      	movs	r0, #50	; 0x32
 8101826:	f000 fb07 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 810182a:	4b3d      	ldr	r3, [pc, #244]	; (8101920 <ConfigGPS+0x11c>)
 810182c:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8101830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101836:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 810183a:	2210      	movs	r2, #16
 810183c:	4619      	mov	r1, r3
 810183e:	4837      	ldr	r0, [pc, #220]	; (810191c <ConfigGPS+0x118>)
 8101840:	f006 fe74 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8101844:	2032      	movs	r0, #50	; 0x32
 8101846:	f000 faf7 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 810184a:	4b36      	ldr	r3, [pc, #216]	; (8101924 <ConfigGPS+0x120>)
 810184c:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8101850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101856:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 810185a:	2210      	movs	r2, #16
 810185c:	4619      	mov	r1, r3
 810185e:	482f      	ldr	r0, [pc, #188]	; (810191c <ConfigGPS+0x118>)
 8101860:	f006 fe64 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8101864:	2032      	movs	r0, #50	; 0x32
 8101866:	f000 fae7 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 810186a:	4b2f      	ldr	r3, [pc, #188]	; (8101928 <ConfigGPS+0x124>)
 810186c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8101870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101876:	f107 0390 	add.w	r3, r7, #144	; 0x90
 810187a:	2210      	movs	r2, #16
 810187c:	4619      	mov	r1, r3
 810187e:	4827      	ldr	r0, [pc, #156]	; (810191c <ConfigGPS+0x118>)
 8101880:	f006 fe54 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8101884:	2032      	movs	r0, #50	; 0x32
 8101886:	f000 fad7 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 810188a:	4b28      	ldr	r3, [pc, #160]	; (810192c <ConfigGPS+0x128>)
 810188c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8101890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101896:	f107 0370 	add.w	r3, r7, #112	; 0x70
 810189a:	2210      	movs	r2, #16
 810189c:	4619      	mov	r1, r3
 810189e:	481f      	ldr	r0, [pc, #124]	; (810191c <ConfigGPS+0x118>)
 81018a0:	f006 fe44 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81018a4:	2032      	movs	r0, #50	; 0x32
 81018a6:	f000 fac7 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81018aa:	4b21      	ldr	r3, [pc, #132]	; (8101930 <ConfigGPS+0x12c>)
 81018ac:	f107 0450 	add.w	r4, r7, #80	; 0x50
 81018b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 81018ba:	2210      	movs	r2, #16
 81018bc:	4619      	mov	r1, r3
 81018be:	4817      	ldr	r0, [pc, #92]	; (810191c <ConfigGPS+0x118>)
 81018c0:	f006 fe34 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81018c4:	2032      	movs	r0, #50	; 0x32
 81018c6:	f000 fab7 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 81018ca:	4b1a      	ldr	r3, [pc, #104]	; (8101934 <ConfigGPS+0x130>)
 81018cc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 81018d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81018da:	2210      	movs	r2, #16
 81018dc:	4619      	mov	r1, r3
 81018de:	480f      	ldr	r0, [pc, #60]	; (810191c <ConfigGPS+0x118>)
 81018e0:	f006 fe24 	bl	810852c <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81018e4:	2032      	movs	r0, #50	; 0x32
 81018e6:	f000 faa7 	bl	8101e38 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 81018ea:	4b13      	ldr	r3, [pc, #76]	; (8101938 <ConfigGPS+0x134>)
 81018ec:	f107 0410 	add.w	r4, r7, #16
 81018f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81018f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81018f6:	f107 0310 	add.w	r3, r7, #16
 81018fa:	2210      	movs	r2, #16
 81018fc:	4619      	mov	r1, r3
 81018fe:	4807      	ldr	r0, [pc, #28]	; (810191c <ConfigGPS+0x118>)
 8101900:	f006 fe14 	bl	810852c <HAL_UART_Transmit_DMA>

   HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 8101904:	2201      	movs	r2, #1
 8101906:	490d      	ldr	r1, [pc, #52]	; (810193c <ConfigGPS+0x138>)
 8101908:	4804      	ldr	r0, [pc, #16]	; (810191c <ConfigGPS+0x118>)
 810190a:	f006 fe8f 	bl	810862c <HAL_UART_Receive_DMA>
 }
 810190e:	bf00      	nop
 8101910:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8101914:	46bd      	mov	sp, r7
 8101916:	bd90      	pop	{r4, r7, pc}
 8101918:	0810a064 	.word	0x0810a064
 810191c:	1000047c 	.word	0x1000047c
 8101920:	0810a074 	.word	0x0810a074
 8101924:	0810a084 	.word	0x0810a084
 8101928:	0810a094 	.word	0x0810a094
 810192c:	0810a0a4 	.word	0x0810a0a4
 8101930:	0810a0b4 	.word	0x0810a0b4
 8101934:	0810a0c4 	.word	0x0810a0c4
 8101938:	0810a0d4 	.word	0x0810a0d4
 810193c:	1000002c 	.word	0x1000002c

08101940 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8101940:	b480      	push	{r7}
 8101942:	b083      	sub	sp, #12
 8101944:	af00      	add	r7, sp, #0
 8101946:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8101948:	bf00      	nop
 810194a:	370c      	adds	r7, #12
 810194c:	46bd      	mov	sp, r7
 810194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101952:	4770      	bx	lr

08101954 <HAL_UART_RxCpltCallback>:


 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8101954:	b580      	push	{r7, lr}
 8101956:	b084      	sub	sp, #16
 8101958:	af00      	add	r7, sp, #0
 810195a:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	4a31      	ldr	r2, [pc, #196]	; (8101a28 <HAL_UART_RxCpltCallback+0xd4>)
 8101962:	4293      	cmp	r3, r2
 8101964:	d15b      	bne.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
    {
      if(byte_pos < 2)
 8101966:	4b31      	ldr	r3, [pc, #196]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 8101968:	681b      	ldr	r3, [r3, #0]
 810196a:	2b01      	cmp	r3, #1
 810196c:	dc17      	bgt.n	810199e <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 810196e:	4b30      	ldr	r3, [pc, #192]	; (8101a30 <HAL_UART_RxCpltCallback+0xdc>)
 8101970:	781a      	ldrb	r2, [r3, #0]
 8101972:	4b30      	ldr	r3, [pc, #192]	; (8101a34 <HAL_UART_RxCpltCallback+0xe0>)
 8101974:	881b      	ldrh	r3, [r3, #0]
 8101976:	81bb      	strh	r3, [r7, #12]
 8101978:	4b2c      	ldr	r3, [pc, #176]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 810197a:	681b      	ldr	r3, [r3, #0]
 810197c:	f107 0110 	add.w	r1, r7, #16
 8101980:	440b      	add	r3, r1
 8101982:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8101986:	429a      	cmp	r2, r3
 8101988:	d105      	bne.n	8101996 <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 810198a:	4b28      	ldr	r3, [pc, #160]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	3301      	adds	r3, #1
 8101990:	4a26      	ldr	r2, [pc, #152]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 8101992:	6013      	str	r3, [r2, #0]
        }
      }
    }

    //processGPS(&gps);
 }
 8101994:	e043      	b.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8101996:	4b25      	ldr	r3, [pc, #148]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 8101998:	2200      	movs	r2, #0
 810199a:	601a      	str	r2, [r3, #0]
 }
 810199c:	e03f      	b.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 810199e:	4b23      	ldr	r3, [pc, #140]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019a0:	681b      	ldr	r3, [r3, #0]
 81019a2:	3b01      	subs	r3, #1
 81019a4:	2260      	movs	r2, #96	; 0x60
 81019a6:	4293      	cmp	r3, r2
 81019a8:	dc07      	bgt.n	81019ba <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 81019aa:	4b20      	ldr	r3, [pc, #128]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019ac:	681b      	ldr	r3, [r3, #0]
 81019ae:	3b02      	subs	r3, #2
 81019b0:	4a21      	ldr	r2, [pc, #132]	; (8101a38 <HAL_UART_RxCpltCallback+0xe4>)
 81019b2:	4413      	add	r3, r2
 81019b4:	4a1e      	ldr	r2, [pc, #120]	; (8101a30 <HAL_UART_RxCpltCallback+0xdc>)
 81019b6:	7812      	ldrb	r2, [r2, #0]
 81019b8:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 81019ba:	4b1c      	ldr	r3, [pc, #112]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	3301      	adds	r3, #1
 81019c0:	4a1a      	ldr	r2, [pc, #104]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019c2:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 81019c4:	2360      	movs	r3, #96	; 0x60
 81019c6:	1c9a      	adds	r2, r3, #2
 81019c8:	4b18      	ldr	r3, [pc, #96]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	429a      	cmp	r2, r3
 81019ce:	d103      	bne.n	81019d8 <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 81019d0:	481a      	ldr	r0, [pc, #104]	; (8101a3c <HAL_UART_RxCpltCallback+0xe8>)
 81019d2:	f7ff fe6f 	bl	81016b4 <calcChecksum>
 }
 81019d6:	e022      	b.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 81019d8:	2360      	movs	r3, #96	; 0x60
 81019da:	1cda      	adds	r2, r3, #3
 81019dc:	4b13      	ldr	r3, [pc, #76]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	429a      	cmp	r2, r3
 81019e2:	d109      	bne.n	81019f8 <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 81019e4:	4b12      	ldr	r3, [pc, #72]	; (8101a30 <HAL_UART_RxCpltCallback+0xdc>)
 81019e6:	781a      	ldrb	r2, [r3, #0]
 81019e8:	4b14      	ldr	r3, [pc, #80]	; (8101a3c <HAL_UART_RxCpltCallback+0xe8>)
 81019ea:	781b      	ldrb	r3, [r3, #0]
 81019ec:	429a      	cmp	r2, r3
 81019ee:	d016      	beq.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 81019f0:	4b0e      	ldr	r3, [pc, #56]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019f2:	2200      	movs	r2, #0
 81019f4:	601a      	str	r2, [r3, #0]
 }
 81019f6:	e012      	b.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 81019f8:	2360      	movs	r3, #96	; 0x60
 81019fa:	1d1a      	adds	r2, r3, #4
 81019fc:	4b0b      	ldr	r3, [pc, #44]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	429a      	cmp	r2, r3
 8101a02:	d103      	bne.n	8101a0c <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 8101a04:	4b09      	ldr	r3, [pc, #36]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 8101a06:	2200      	movs	r2, #0
 8101a08:	601a      	str	r2, [r3, #0]
 }
 8101a0a:	e008      	b.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 8101a0c:	2360      	movs	r3, #96	; 0x60
 8101a0e:	1d1a      	adds	r2, r3, #4
 8101a10:	4b06      	ldr	r3, [pc, #24]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	429a      	cmp	r2, r3
 8101a16:	da02      	bge.n	8101a1e <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8101a18:	4b04      	ldr	r3, [pc, #16]	; (8101a2c <HAL_UART_RxCpltCallback+0xd8>)
 8101a1a:	2200      	movs	r2, #0
 8101a1c:	601a      	str	r2, [r3, #0]
 }
 8101a1e:	bf00      	nop
 8101a20:	3710      	adds	r7, #16
 8101a22:	46bd      	mov	sp, r7
 8101a24:	bd80      	pop	{r7, pc}
 8101a26:	bf00      	nop
 8101a28:	40004800 	.word	0x40004800
 8101a2c:	10000030 	.word	0x10000030
 8101a30:	1000002c 	.word	0x1000002c
 8101a34:	0810a0e4 	.word	0x0810a0e4
 8101a38:	10000190 	.word	0x10000190
 8101a3c:	10000034 	.word	0x10000034

08101a40 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101a40:	b580      	push	{r7, lr}
 8101a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101a44:	4b22      	ldr	r3, [pc, #136]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a46:	4a23      	ldr	r2, [pc, #140]	; (8101ad4 <MX_USART3_UART_Init+0x94>)
 8101a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8101a4a:	4b21      	ldr	r3, [pc, #132]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8101a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101a52:	4b1f      	ldr	r3, [pc, #124]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a54:	2200      	movs	r2, #0
 8101a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101a58:	4b1d      	ldr	r3, [pc, #116]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a5a:	2200      	movs	r2, #0
 8101a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101a5e:	4b1c      	ldr	r3, [pc, #112]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a60:	2200      	movs	r2, #0
 8101a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101a64:	4b1a      	ldr	r3, [pc, #104]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a66:	220c      	movs	r2, #12
 8101a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101a6a:	4b19      	ldr	r3, [pc, #100]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a6c:	2200      	movs	r2, #0
 8101a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101a70:	4b17      	ldr	r3, [pc, #92]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a72:	2200      	movs	r2, #0
 8101a74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101a76:	4b16      	ldr	r3, [pc, #88]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a78:	2200      	movs	r2, #0
 8101a7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101a7c:	4b14      	ldr	r3, [pc, #80]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a7e:	2200      	movs	r2, #0
 8101a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101a82:	4b13      	ldr	r3, [pc, #76]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a84:	2200      	movs	r2, #0
 8101a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101a88:	4811      	ldr	r0, [pc, #68]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a8a:	f006 fcfe 	bl	810848a <HAL_UART_Init>
 8101a8e:	4603      	mov	r3, r0
 8101a90:	2b00      	cmp	r3, #0
 8101a92:	d001      	beq.n	8101a98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101a94:	f7ff fc39 	bl	810130a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101a98:	2100      	movs	r1, #0
 8101a9a:	480d      	ldr	r0, [pc, #52]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101a9c:	f008 f9e0 	bl	8109e60 <HAL_UARTEx_SetTxFifoThreshold>
 8101aa0:	4603      	mov	r3, r0
 8101aa2:	2b00      	cmp	r3, #0
 8101aa4:	d001      	beq.n	8101aaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101aa6:	f7ff fc30 	bl	810130a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101aaa:	2100      	movs	r1, #0
 8101aac:	4808      	ldr	r0, [pc, #32]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101aae:	f008 fa15 	bl	8109edc <HAL_UARTEx_SetRxFifoThreshold>
 8101ab2:	4603      	mov	r3, r0
 8101ab4:	2b00      	cmp	r3, #0
 8101ab6:	d001      	beq.n	8101abc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101ab8:	f7ff fc27 	bl	810130a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101abc:	4804      	ldr	r0, [pc, #16]	; (8101ad0 <MX_USART3_UART_Init+0x90>)
 8101abe:	f008 f996 	bl	8109dee <HAL_UARTEx_DisableFifoMode>
 8101ac2:	4603      	mov	r3, r0
 8101ac4:	2b00      	cmp	r3, #0
 8101ac6:	d001      	beq.n	8101acc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101ac8:	f7ff fc1f 	bl	810130a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101acc:	bf00      	nop
 8101ace:	bd80      	pop	{r7, pc}
 8101ad0:	1000047c 	.word	0x1000047c
 8101ad4:	40004800 	.word	0x40004800

08101ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101ad8:	b580      	push	{r7, lr}
 8101ada:	b0b8      	sub	sp, #224	; 0xe0
 8101adc:	af00      	add	r7, sp, #0
 8101ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ae0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101ae4:	2200      	movs	r2, #0
 8101ae6:	601a      	str	r2, [r3, #0]
 8101ae8:	605a      	str	r2, [r3, #4]
 8101aea:	609a      	str	r2, [r3, #8]
 8101aec:	60da      	str	r2, [r3, #12]
 8101aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101af0:	f107 0310 	add.w	r3, r7, #16
 8101af4:	22bc      	movs	r2, #188	; 0xbc
 8101af6:	2100      	movs	r1, #0
 8101af8:	4618      	mov	r0, r3
 8101afa:	f008 fa9f 	bl	810a03c <memset>
  if(uartHandle->Instance==USART3)
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	4a57      	ldr	r2, [pc, #348]	; (8101c60 <HAL_UART_MspInit+0x188>)
 8101b04:	4293      	cmp	r3, r2
 8101b06:	f040 80a7 	bne.w	8101c58 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101b0a:	2302      	movs	r3, #2
 8101b0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101b0e:	2300      	movs	r3, #0
 8101b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b14:	f107 0310 	add.w	r3, r7, #16
 8101b18:	4618      	mov	r0, r3
 8101b1a:	f004 fd7f 	bl	810661c <HAL_RCCEx_PeriphCLKConfig>
 8101b1e:	4603      	mov	r3, r0
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d001      	beq.n	8101b28 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8101b24:	f7ff fbf1 	bl	810130a <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101b28:	4b4e      	ldr	r3, [pc, #312]	; (8101c64 <HAL_UART_MspInit+0x18c>)
 8101b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b2e:	4a4d      	ldr	r2, [pc, #308]	; (8101c64 <HAL_UART_MspInit+0x18c>)
 8101b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101b34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b38:	4b4a      	ldr	r3, [pc, #296]	; (8101c64 <HAL_UART_MspInit+0x18c>)
 8101b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101b42:	60fb      	str	r3, [r7, #12]
 8101b44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b46:	4b47      	ldr	r3, [pc, #284]	; (8101c64 <HAL_UART_MspInit+0x18c>)
 8101b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b4c:	4a45      	ldr	r2, [pc, #276]	; (8101c64 <HAL_UART_MspInit+0x18c>)
 8101b4e:	f043 0308 	orr.w	r3, r3, #8
 8101b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b56:	4b43      	ldr	r3, [pc, #268]	; (8101c64 <HAL_UART_MspInit+0x18c>)
 8101b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b5c:	f003 0308 	and.w	r3, r3, #8
 8101b60:	60bb      	str	r3, [r7, #8]
 8101b62:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101b64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6c:	2302      	movs	r3, #2
 8101b6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b72:	2300      	movs	r3, #0
 8101b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b78:	2300      	movs	r3, #0
 8101b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101b7e:	2307      	movs	r3, #7
 8101b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101b84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101b88:	4619      	mov	r1, r3
 8101b8a:	4837      	ldr	r0, [pc, #220]	; (8101c68 <HAL_UART_MspInit+0x190>)
 8101b8c:	f003 f95e 	bl	8104e4c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8101b90:	4b36      	ldr	r3, [pc, #216]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101b92:	4a37      	ldr	r2, [pc, #220]	; (8101c70 <HAL_UART_MspInit+0x198>)
 8101b94:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101b96:	4b35      	ldr	r3, [pc, #212]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101b98:	222d      	movs	r2, #45	; 0x2d
 8101b9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101b9c:	4b33      	ldr	r3, [pc, #204]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101b9e:	2200      	movs	r2, #0
 8101ba0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ba2:	4b32      	ldr	r3, [pc, #200]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101ba4:	2200      	movs	r2, #0
 8101ba6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101ba8:	4b30      	ldr	r3, [pc, #192]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101bae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101bb0:	4b2e      	ldr	r3, [pc, #184]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bb2:	2200      	movs	r2, #0
 8101bb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101bb6:	4b2d      	ldr	r3, [pc, #180]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bb8:	2200      	movs	r2, #0
 8101bba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8101bbc:	4b2b      	ldr	r3, [pc, #172]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101bc2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101bc4:	4b29      	ldr	r3, [pc, #164]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101bca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101bcc:	4b27      	ldr	r3, [pc, #156]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bce:	2200      	movs	r2, #0
 8101bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101bd2:	4826      	ldr	r0, [pc, #152]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bd4:	f000 faf4 	bl	81021c0 <HAL_DMA_Init>
 8101bd8:	4603      	mov	r3, r0
 8101bda:	2b00      	cmp	r3, #0
 8101bdc:	d001      	beq.n	8101be2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8101bde:	f7ff fb94 	bl	810130a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	4a21      	ldr	r2, [pc, #132]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101be6:	67da      	str	r2, [r3, #124]	; 0x7c
 8101be8:	4a20      	ldr	r2, [pc, #128]	; (8101c6c <HAL_UART_MspInit+0x194>)
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8101bee:	4b21      	ldr	r3, [pc, #132]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101bf0:	4a21      	ldr	r2, [pc, #132]	; (8101c78 <HAL_UART_MspInit+0x1a0>)
 8101bf2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101bf4:	4b1f      	ldr	r3, [pc, #124]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101bf6:	222e      	movs	r2, #46	; 0x2e
 8101bf8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101bfa:	4b1e      	ldr	r3, [pc, #120]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101bfc:	2240      	movs	r2, #64	; 0x40
 8101bfe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101c00:	4b1c      	ldr	r3, [pc, #112]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c02:	2200      	movs	r2, #0
 8101c04:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101c06:	4b1b      	ldr	r3, [pc, #108]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101c0c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101c0e:	4b19      	ldr	r3, [pc, #100]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c10:	2200      	movs	r2, #0
 8101c12:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101c14:	4b17      	ldr	r3, [pc, #92]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c16:	2200      	movs	r2, #0
 8101c18:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101c1a:	4b16      	ldr	r3, [pc, #88]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c1c:	2200      	movs	r2, #0
 8101c1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8101c20:	4b14      	ldr	r3, [pc, #80]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c22:	2200      	movs	r2, #0
 8101c24:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101c26:	4b13      	ldr	r3, [pc, #76]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c28:	2200      	movs	r2, #0
 8101c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101c2c:	4811      	ldr	r0, [pc, #68]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c2e:	f000 fac7 	bl	81021c0 <HAL_DMA_Init>
 8101c32:	4603      	mov	r3, r0
 8101c34:	2b00      	cmp	r3, #0
 8101c36:	d001      	beq.n	8101c3c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8101c38:	f7ff fb67 	bl	810130a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	4a0d      	ldr	r2, [pc, #52]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c40:	679a      	str	r2, [r3, #120]	; 0x78
 8101c42:	4a0c      	ldr	r2, [pc, #48]	; (8101c74 <HAL_UART_MspInit+0x19c>)
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8101c48:	2200      	movs	r2, #0
 8101c4a:	2105      	movs	r1, #5
 8101c4c:	2027      	movs	r0, #39	; 0x27
 8101c4e:	f000 f9f2 	bl	8102036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8101c52:	2027      	movs	r0, #39	; 0x27
 8101c54:	f000 fa09 	bl	810206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101c58:	bf00      	nop
 8101c5a:	37e0      	adds	r7, #224	; 0xe0
 8101c5c:	46bd      	mov	sp, r7
 8101c5e:	bd80      	pop	{r7, pc}
 8101c60:	40004800 	.word	0x40004800
 8101c64:	58024400 	.word	0x58024400
 8101c68:	58020c00 	.word	0x58020c00
 8101c6c:	10000404 	.word	0x10000404
 8101c70:	400200b8 	.word	0x400200b8
 8101c74:	1000050c 	.word	0x1000050c
 8101c78:	40020410 	.word	0x40020410

08101c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101c80:	f7ff f8c4 	bl	8100e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101c84:	480c      	ldr	r0, [pc, #48]	; (8101cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101c86:	490d      	ldr	r1, [pc, #52]	; (8101cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101c88:	4a0d      	ldr	r2, [pc, #52]	; (8101cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101c8c:	e002      	b.n	8101c94 <LoopCopyDataInit>

08101c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101c92:	3304      	adds	r3, #4

08101c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101c98:	d3f9      	bcc.n	8101c8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101c9a:	4a0a      	ldr	r2, [pc, #40]	; (8101cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101c9c:	4c0a      	ldr	r4, [pc, #40]	; (8101cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101ca0:	e001      	b.n	8101ca6 <LoopFillZerobss>

08101ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101ca4:	3204      	adds	r2, #4

08101ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ca8:	d3fb      	bcc.n	8101ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101caa:	f008 f9a3 	bl	8109ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101cae:	f7ff faa5 	bl	81011fc <main>
  bx  lr
 8101cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101cb4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101cb8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101cbc:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101cc0:	0810a138 	.word	0x0810a138
  ldr r2, =_sbss
 8101cc4:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101cc8:	10000588 	.word	0x10000588

08101ccc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101ccc:	e7fe      	b.n	8101ccc <ADC3_IRQHandler>
	...

08101cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101cd0:	b580      	push	{r7, lr}
 8101cd2:	b082      	sub	sp, #8
 8101cd4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101cd6:	4b28      	ldr	r3, [pc, #160]	; (8101d78 <HAL_Init+0xa8>)
 8101cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101cdc:	4a26      	ldr	r2, [pc, #152]	; (8101d78 <HAL_Init+0xa8>)
 8101cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101ce2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ce6:	4b24      	ldr	r3, [pc, #144]	; (8101d78 <HAL_Init+0xa8>)
 8101ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101cf0:	603b      	str	r3, [r7, #0]
 8101cf2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101cf4:	4b21      	ldr	r3, [pc, #132]	; (8101d7c <HAL_Init+0xac>)
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101cfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101d00:	4a1e      	ldr	r2, [pc, #120]	; (8101d7c <HAL_Init+0xac>)
 8101d02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d06:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d08:	4b1c      	ldr	r3, [pc, #112]	; (8101d7c <HAL_Init+0xac>)
 8101d0a:	681b      	ldr	r3, [r3, #0]
 8101d0c:	4a1b      	ldr	r2, [pc, #108]	; (8101d7c <HAL_Init+0xac>)
 8101d0e:	f043 0301 	orr.w	r3, r3, #1
 8101d12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d14:	2003      	movs	r0, #3
 8101d16:	f000 f983 	bl	8102020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d1a:	f004 faa7 	bl	810626c <HAL_RCC_GetSysClockFreq>
 8101d1e:	4602      	mov	r2, r0
 8101d20:	4b15      	ldr	r3, [pc, #84]	; (8101d78 <HAL_Init+0xa8>)
 8101d22:	699b      	ldr	r3, [r3, #24]
 8101d24:	0a1b      	lsrs	r3, r3, #8
 8101d26:	f003 030f 	and.w	r3, r3, #15
 8101d2a:	4915      	ldr	r1, [pc, #84]	; (8101d80 <HAL_Init+0xb0>)
 8101d2c:	5ccb      	ldrb	r3, [r1, r3]
 8101d2e:	f003 031f 	and.w	r3, r3, #31
 8101d32:	fa22 f303 	lsr.w	r3, r2, r3
 8101d36:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d38:	4b0f      	ldr	r3, [pc, #60]	; (8101d78 <HAL_Init+0xa8>)
 8101d3a:	699b      	ldr	r3, [r3, #24]
 8101d3c:	f003 030f 	and.w	r3, r3, #15
 8101d40:	4a0f      	ldr	r2, [pc, #60]	; (8101d80 <HAL_Init+0xb0>)
 8101d42:	5cd3      	ldrb	r3, [r2, r3]
 8101d44:	f003 031f 	and.w	r3, r3, #31
 8101d48:	687a      	ldr	r2, [r7, #4]
 8101d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8101d4e:	4a0d      	ldr	r2, [pc, #52]	; (8101d84 <HAL_Init+0xb4>)
 8101d50:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d52:	4b0c      	ldr	r3, [pc, #48]	; (8101d84 <HAL_Init+0xb4>)
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	4a0c      	ldr	r2, [pc, #48]	; (8101d88 <HAL_Init+0xb8>)
 8101d58:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d5a:	2000      	movs	r0, #0
 8101d5c:	f000 f816 	bl	8101d8c <HAL_InitTick>
 8101d60:	4603      	mov	r3, r0
 8101d62:	2b00      	cmp	r3, #0
 8101d64:	d001      	beq.n	8101d6a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101d66:	2301      	movs	r3, #1
 8101d68:	e002      	b.n	8101d70 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101d6a:	f7ff fbfb 	bl	8101564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101d6e:	2300      	movs	r3, #0
}
 8101d70:	4618      	mov	r0, r3
 8101d72:	3708      	adds	r7, #8
 8101d74:	46bd      	mov	sp, r7
 8101d76:	bd80      	pop	{r7, pc}
 8101d78:	58024400 	.word	0x58024400
 8101d7c:	40024400 	.word	0x40024400
 8101d80:	0810a0e8 	.word	0x0810a0e8
 8101d84:	10000004 	.word	0x10000004
 8101d88:	10000000 	.word	0x10000000

08101d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101d8c:	b580      	push	{r7, lr}
 8101d8e:	b082      	sub	sp, #8
 8101d90:	af00      	add	r7, sp, #0
 8101d92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101d94:	4b15      	ldr	r3, [pc, #84]	; (8101dec <HAL_InitTick+0x60>)
 8101d96:	781b      	ldrb	r3, [r3, #0]
 8101d98:	2b00      	cmp	r3, #0
 8101d9a:	d101      	bne.n	8101da0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101d9c:	2301      	movs	r3, #1
 8101d9e:	e021      	b.n	8101de4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101da0:	4b13      	ldr	r3, [pc, #76]	; (8101df0 <HAL_InitTick+0x64>)
 8101da2:	681a      	ldr	r2, [r3, #0]
 8101da4:	4b11      	ldr	r3, [pc, #68]	; (8101dec <HAL_InitTick+0x60>)
 8101da6:	781b      	ldrb	r3, [r3, #0]
 8101da8:	4619      	mov	r1, r3
 8101daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8101db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8101db6:	4618      	mov	r0, r3
 8101db8:	f000 f965 	bl	8102086 <HAL_SYSTICK_Config>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b00      	cmp	r3, #0
 8101dc0:	d001      	beq.n	8101dc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101dc2:	2301      	movs	r3, #1
 8101dc4:	e00e      	b.n	8101de4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	2b0f      	cmp	r3, #15
 8101dca:	d80a      	bhi.n	8101de2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101dcc:	2200      	movs	r2, #0
 8101dce:	6879      	ldr	r1, [r7, #4]
 8101dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8101dd4:	f000 f92f 	bl	8102036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101dd8:	4a06      	ldr	r2, [pc, #24]	; (8101df4 <HAL_InitTick+0x68>)
 8101dda:	687b      	ldr	r3, [r7, #4]
 8101ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101dde:	2300      	movs	r3, #0
 8101de0:	e000      	b.n	8101de4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101de2:	2301      	movs	r3, #1
}
 8101de4:	4618      	mov	r0, r3
 8101de6:	3708      	adds	r7, #8
 8101de8:	46bd      	mov	sp, r7
 8101dea:	bd80      	pop	{r7, pc}
 8101dec:	1000000c 	.word	0x1000000c
 8101df0:	10000000 	.word	0x10000000
 8101df4:	10000008 	.word	0x10000008

08101df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101df8:	b480      	push	{r7}
 8101dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101dfc:	4b06      	ldr	r3, [pc, #24]	; (8101e18 <HAL_IncTick+0x20>)
 8101dfe:	781b      	ldrb	r3, [r3, #0]
 8101e00:	461a      	mov	r2, r3
 8101e02:	4b06      	ldr	r3, [pc, #24]	; (8101e1c <HAL_IncTick+0x24>)
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	4413      	add	r3, r2
 8101e08:	4a04      	ldr	r2, [pc, #16]	; (8101e1c <HAL_IncTick+0x24>)
 8101e0a:	6013      	str	r3, [r2, #0]
}
 8101e0c:	bf00      	nop
 8101e0e:	46bd      	mov	sp, r7
 8101e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e14:	4770      	bx	lr
 8101e16:	bf00      	nop
 8101e18:	1000000c 	.word	0x1000000c
 8101e1c:	10000584 	.word	0x10000584

08101e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101e20:	b480      	push	{r7}
 8101e22:	af00      	add	r7, sp, #0
  return uwTick;
 8101e24:	4b03      	ldr	r3, [pc, #12]	; (8101e34 <HAL_GetTick+0x14>)
 8101e26:	681b      	ldr	r3, [r3, #0]
}
 8101e28:	4618      	mov	r0, r3
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e30:	4770      	bx	lr
 8101e32:	bf00      	nop
 8101e34:	10000584 	.word	0x10000584

08101e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101e38:	b580      	push	{r7, lr}
 8101e3a:	b084      	sub	sp, #16
 8101e3c:	af00      	add	r7, sp, #0
 8101e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101e40:	f7ff ffee 	bl	8101e20 <HAL_GetTick>
 8101e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101e4a:	68fb      	ldr	r3, [r7, #12]
 8101e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e50:	d005      	beq.n	8101e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101e52:	4b0a      	ldr	r3, [pc, #40]	; (8101e7c <HAL_Delay+0x44>)
 8101e54:	781b      	ldrb	r3, [r3, #0]
 8101e56:	461a      	mov	r2, r3
 8101e58:	68fb      	ldr	r3, [r7, #12]
 8101e5a:	4413      	add	r3, r2
 8101e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101e5e:	bf00      	nop
 8101e60:	f7ff ffde 	bl	8101e20 <HAL_GetTick>
 8101e64:	4602      	mov	r2, r0
 8101e66:	68bb      	ldr	r3, [r7, #8]
 8101e68:	1ad3      	subs	r3, r2, r3
 8101e6a:	68fa      	ldr	r2, [r7, #12]
 8101e6c:	429a      	cmp	r2, r3
 8101e6e:	d8f7      	bhi.n	8101e60 <HAL_Delay+0x28>
  {
  }
}
 8101e70:	bf00      	nop
 8101e72:	bf00      	nop
 8101e74:	3710      	adds	r7, #16
 8101e76:	46bd      	mov	sp, r7
 8101e78:	bd80      	pop	{r7, pc}
 8101e7a:	bf00      	nop
 8101e7c:	1000000c 	.word	0x1000000c

08101e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e80:	b480      	push	{r7}
 8101e82:	b085      	sub	sp, #20
 8101e84:	af00      	add	r7, sp, #0
 8101e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	f003 0307 	and.w	r3, r3, #7
 8101e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101e90:	4b0c      	ldr	r3, [pc, #48]	; (8101ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8101e92:	68db      	ldr	r3, [r3, #12]
 8101e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101e96:	68ba      	ldr	r2, [r7, #8]
 8101e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101e9c:	4013      	ands	r3, r2
 8101e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101ea0:	68fb      	ldr	r3, [r7, #12]
 8101ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101ea4:	68bb      	ldr	r3, [r7, #8]
 8101ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101eb2:	4a04      	ldr	r2, [pc, #16]	; (8101ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8101eb4:	68bb      	ldr	r3, [r7, #8]
 8101eb6:	60d3      	str	r3, [r2, #12]
}
 8101eb8:	bf00      	nop
 8101eba:	3714      	adds	r7, #20
 8101ebc:	46bd      	mov	sp, r7
 8101ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec2:	4770      	bx	lr
 8101ec4:	e000ed00 	.word	0xe000ed00

08101ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101ec8:	b480      	push	{r7}
 8101eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101ecc:	4b04      	ldr	r3, [pc, #16]	; (8101ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8101ece:	68db      	ldr	r3, [r3, #12]
 8101ed0:	0a1b      	lsrs	r3, r3, #8
 8101ed2:	f003 0307 	and.w	r3, r3, #7
}
 8101ed6:	4618      	mov	r0, r3
 8101ed8:	46bd      	mov	sp, r7
 8101eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ede:	4770      	bx	lr
 8101ee0:	e000ed00 	.word	0xe000ed00

08101ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101ee4:	b480      	push	{r7}
 8101ee6:	b083      	sub	sp, #12
 8101ee8:	af00      	add	r7, sp, #0
 8101eea:	4603      	mov	r3, r0
 8101eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ef2:	2b00      	cmp	r3, #0
 8101ef4:	db0b      	blt.n	8101f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101ef6:	88fb      	ldrh	r3, [r7, #6]
 8101ef8:	f003 021f 	and.w	r2, r3, #31
 8101efc:	4907      	ldr	r1, [pc, #28]	; (8101f1c <__NVIC_EnableIRQ+0x38>)
 8101efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f02:	095b      	lsrs	r3, r3, #5
 8101f04:	2001      	movs	r0, #1
 8101f06:	fa00 f202 	lsl.w	r2, r0, r2
 8101f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101f0e:	bf00      	nop
 8101f10:	370c      	adds	r7, #12
 8101f12:	46bd      	mov	sp, r7
 8101f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f18:	4770      	bx	lr
 8101f1a:	bf00      	nop
 8101f1c:	e000e100 	.word	0xe000e100

08101f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101f20:	b480      	push	{r7}
 8101f22:	b083      	sub	sp, #12
 8101f24:	af00      	add	r7, sp, #0
 8101f26:	4603      	mov	r3, r0
 8101f28:	6039      	str	r1, [r7, #0]
 8101f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f30:	2b00      	cmp	r3, #0
 8101f32:	db0a      	blt.n	8101f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f34:	683b      	ldr	r3, [r7, #0]
 8101f36:	b2da      	uxtb	r2, r3
 8101f38:	490c      	ldr	r1, [pc, #48]	; (8101f6c <__NVIC_SetPriority+0x4c>)
 8101f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f3e:	0112      	lsls	r2, r2, #4
 8101f40:	b2d2      	uxtb	r2, r2
 8101f42:	440b      	add	r3, r1
 8101f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101f48:	e00a      	b.n	8101f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f4a:	683b      	ldr	r3, [r7, #0]
 8101f4c:	b2da      	uxtb	r2, r3
 8101f4e:	4908      	ldr	r1, [pc, #32]	; (8101f70 <__NVIC_SetPriority+0x50>)
 8101f50:	88fb      	ldrh	r3, [r7, #6]
 8101f52:	f003 030f 	and.w	r3, r3, #15
 8101f56:	3b04      	subs	r3, #4
 8101f58:	0112      	lsls	r2, r2, #4
 8101f5a:	b2d2      	uxtb	r2, r2
 8101f5c:	440b      	add	r3, r1
 8101f5e:	761a      	strb	r2, [r3, #24]
}
 8101f60:	bf00      	nop
 8101f62:	370c      	adds	r7, #12
 8101f64:	46bd      	mov	sp, r7
 8101f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f6a:	4770      	bx	lr
 8101f6c:	e000e100 	.word	0xe000e100
 8101f70:	e000ed00 	.word	0xe000ed00

08101f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f74:	b480      	push	{r7}
 8101f76:	b089      	sub	sp, #36	; 0x24
 8101f78:	af00      	add	r7, sp, #0
 8101f7a:	60f8      	str	r0, [r7, #12]
 8101f7c:	60b9      	str	r1, [r7, #8]
 8101f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f80:	68fb      	ldr	r3, [r7, #12]
 8101f82:	f003 0307 	and.w	r3, r3, #7
 8101f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f88:	69fb      	ldr	r3, [r7, #28]
 8101f8a:	f1c3 0307 	rsb	r3, r3, #7
 8101f8e:	2b04      	cmp	r3, #4
 8101f90:	bf28      	it	cs
 8101f92:	2304      	movcs	r3, #4
 8101f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f96:	69fb      	ldr	r3, [r7, #28]
 8101f98:	3304      	adds	r3, #4
 8101f9a:	2b06      	cmp	r3, #6
 8101f9c:	d902      	bls.n	8101fa4 <NVIC_EncodePriority+0x30>
 8101f9e:	69fb      	ldr	r3, [r7, #28]
 8101fa0:	3b03      	subs	r3, #3
 8101fa2:	e000      	b.n	8101fa6 <NVIC_EncodePriority+0x32>
 8101fa4:	2300      	movs	r3, #0
 8101fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8101fac:	69bb      	ldr	r3, [r7, #24]
 8101fae:	fa02 f303 	lsl.w	r3, r2, r3
 8101fb2:	43da      	mvns	r2, r3
 8101fb4:	68bb      	ldr	r3, [r7, #8]
 8101fb6:	401a      	ands	r2, r3
 8101fb8:	697b      	ldr	r3, [r7, #20]
 8101fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8101fc0:	697b      	ldr	r3, [r7, #20]
 8101fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8101fc6:	43d9      	mvns	r1, r3
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101fcc:	4313      	orrs	r3, r2
         );
}
 8101fce:	4618      	mov	r0, r3
 8101fd0:	3724      	adds	r7, #36	; 0x24
 8101fd2:	46bd      	mov	sp, r7
 8101fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fd8:	4770      	bx	lr
	...

08101fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101fdc:	b580      	push	{r7, lr}
 8101fde:	b082      	sub	sp, #8
 8101fe0:	af00      	add	r7, sp, #0
 8101fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	3b01      	subs	r3, #1
 8101fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101fec:	d301      	bcc.n	8101ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101fee:	2301      	movs	r3, #1
 8101ff0:	e00f      	b.n	8102012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101ff2:	4a0a      	ldr	r2, [pc, #40]	; (810201c <SysTick_Config+0x40>)
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	3b01      	subs	r3, #1
 8101ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101ffa:	210f      	movs	r1, #15
 8101ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8102000:	f7ff ff8e 	bl	8101f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102004:	4b05      	ldr	r3, [pc, #20]	; (810201c <SysTick_Config+0x40>)
 8102006:	2200      	movs	r2, #0
 8102008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810200a:	4b04      	ldr	r3, [pc, #16]	; (810201c <SysTick_Config+0x40>)
 810200c:	2207      	movs	r2, #7
 810200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102010:	2300      	movs	r3, #0
}
 8102012:	4618      	mov	r0, r3
 8102014:	3708      	adds	r7, #8
 8102016:	46bd      	mov	sp, r7
 8102018:	bd80      	pop	{r7, pc}
 810201a:	bf00      	nop
 810201c:	e000e010 	.word	0xe000e010

08102020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102020:	b580      	push	{r7, lr}
 8102022:	b082      	sub	sp, #8
 8102024:	af00      	add	r7, sp, #0
 8102026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102028:	6878      	ldr	r0, [r7, #4]
 810202a:	f7ff ff29 	bl	8101e80 <__NVIC_SetPriorityGrouping>
}
 810202e:	bf00      	nop
 8102030:	3708      	adds	r7, #8
 8102032:	46bd      	mov	sp, r7
 8102034:	bd80      	pop	{r7, pc}

08102036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102036:	b580      	push	{r7, lr}
 8102038:	b086      	sub	sp, #24
 810203a:	af00      	add	r7, sp, #0
 810203c:	4603      	mov	r3, r0
 810203e:	60b9      	str	r1, [r7, #8]
 8102040:	607a      	str	r2, [r7, #4]
 8102042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102044:	f7ff ff40 	bl	8101ec8 <__NVIC_GetPriorityGrouping>
 8102048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810204a:	687a      	ldr	r2, [r7, #4]
 810204c:	68b9      	ldr	r1, [r7, #8]
 810204e:	6978      	ldr	r0, [r7, #20]
 8102050:	f7ff ff90 	bl	8101f74 <NVIC_EncodePriority>
 8102054:	4602      	mov	r2, r0
 8102056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810205a:	4611      	mov	r1, r2
 810205c:	4618      	mov	r0, r3
 810205e:	f7ff ff5f 	bl	8101f20 <__NVIC_SetPriority>
}
 8102062:	bf00      	nop
 8102064:	3718      	adds	r7, #24
 8102066:	46bd      	mov	sp, r7
 8102068:	bd80      	pop	{r7, pc}

0810206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810206a:	b580      	push	{r7, lr}
 810206c:	b082      	sub	sp, #8
 810206e:	af00      	add	r7, sp, #0
 8102070:	4603      	mov	r3, r0
 8102072:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102078:	4618      	mov	r0, r3
 810207a:	f7ff ff33 	bl	8101ee4 <__NVIC_EnableIRQ>
}
 810207e:	bf00      	nop
 8102080:	3708      	adds	r7, #8
 8102082:	46bd      	mov	sp, r7
 8102084:	bd80      	pop	{r7, pc}

08102086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102086:	b580      	push	{r7, lr}
 8102088:	b082      	sub	sp, #8
 810208a:	af00      	add	r7, sp, #0
 810208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810208e:	6878      	ldr	r0, [r7, #4]
 8102090:	f7ff ffa4 	bl	8101fdc <SysTick_Config>
 8102094:	4603      	mov	r3, r0
}
 8102096:	4618      	mov	r0, r3
 8102098:	3708      	adds	r7, #8
 810209a:	46bd      	mov	sp, r7
 810209c:	bd80      	pop	{r7, pc}
	...

081020a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 81020a0:	b480      	push	{r7}
 81020a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81020a4:	f3bf 8f5f 	dmb	sy
}
 81020a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81020aa:	4b07      	ldr	r3, [pc, #28]	; (81020c8 <HAL_MPU_Disable+0x28>)
 81020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81020ae:	4a06      	ldr	r2, [pc, #24]	; (81020c8 <HAL_MPU_Disable+0x28>)
 81020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81020b4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81020b6:	4b05      	ldr	r3, [pc, #20]	; (81020cc <HAL_MPU_Disable+0x2c>)
 81020b8:	2200      	movs	r2, #0
 81020ba:	605a      	str	r2, [r3, #4]
}
 81020bc:	bf00      	nop
 81020be:	46bd      	mov	sp, r7
 81020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020c4:	4770      	bx	lr
 81020c6:	bf00      	nop
 81020c8:	e000ed00 	.word	0xe000ed00
 81020cc:	e000ed90 	.word	0xe000ed90

081020d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 81020d0:	b480      	push	{r7}
 81020d2:	b083      	sub	sp, #12
 81020d4:	af00      	add	r7, sp, #0
 81020d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 81020d8:	4a0b      	ldr	r2, [pc, #44]	; (8102108 <HAL_MPU_Enable+0x38>)
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	f043 0301 	orr.w	r3, r3, #1
 81020e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 81020e2:	4b0a      	ldr	r3, [pc, #40]	; (810210c <HAL_MPU_Enable+0x3c>)
 81020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81020e6:	4a09      	ldr	r2, [pc, #36]	; (810210c <HAL_MPU_Enable+0x3c>)
 81020e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81020ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 81020ee:	f3bf 8f4f 	dsb	sy
}
 81020f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81020f4:	f3bf 8f6f 	isb	sy
}
 81020f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 81020fa:	bf00      	nop
 81020fc:	370c      	adds	r7, #12
 81020fe:	46bd      	mov	sp, r7
 8102100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102104:	4770      	bx	lr
 8102106:	bf00      	nop
 8102108:	e000ed90 	.word	0xe000ed90
 810210c:	e000ed00 	.word	0xe000ed00

08102110 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8102110:	b480      	push	{r7}
 8102112:	b083      	sub	sp, #12
 8102114:	af00      	add	r7, sp, #0
 8102116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8102118:	687b      	ldr	r3, [r7, #4]
 810211a:	785a      	ldrb	r2, [r3, #1]
 810211c:	4b1d      	ldr	r3, [pc, #116]	; (8102194 <HAL_MPU_ConfigRegion+0x84>)
 810211e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	781b      	ldrb	r3, [r3, #0]
 8102124:	2b00      	cmp	r3, #0
 8102126:	d029      	beq.n	810217c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8102128:	4a1a      	ldr	r2, [pc, #104]	; (8102194 <HAL_MPU_ConfigRegion+0x84>)
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	685b      	ldr	r3, [r3, #4]
 810212e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	7b1b      	ldrb	r3, [r3, #12]
 8102134:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	7adb      	ldrb	r3, [r3, #11]
 810213a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 810213c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	7a9b      	ldrb	r3, [r3, #10]
 8102142:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8102144:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	7b5b      	ldrb	r3, [r3, #13]
 810214a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810214c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	7b9b      	ldrb	r3, [r3, #14]
 8102152:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8102154:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	7bdb      	ldrb	r3, [r3, #15]
 810215a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810215c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	7a5b      	ldrb	r3, [r3, #9]
 8102162:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8102164:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	7a1b      	ldrb	r3, [r3, #8]
 810216a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810216c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 810216e:	687a      	ldr	r2, [r7, #4]
 8102170:	7812      	ldrb	r2, [r2, #0]
 8102172:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102174:	4a07      	ldr	r2, [pc, #28]	; (8102194 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8102176:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102178:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 810217a:	e005      	b.n	8102188 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 810217c:	4b05      	ldr	r3, [pc, #20]	; (8102194 <HAL_MPU_ConfigRegion+0x84>)
 810217e:	2200      	movs	r2, #0
 8102180:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8102182:	4b04      	ldr	r3, [pc, #16]	; (8102194 <HAL_MPU_ConfigRegion+0x84>)
 8102184:	2200      	movs	r2, #0
 8102186:	611a      	str	r2, [r3, #16]
}
 8102188:	bf00      	nop
 810218a:	370c      	adds	r7, #12
 810218c:	46bd      	mov	sp, r7
 810218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102192:	4770      	bx	lr
 8102194:	e000ed90 	.word	0xe000ed90

08102198 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102198:	b480      	push	{r7}
 810219a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810219c:	4b07      	ldr	r3, [pc, #28]	; (81021bc <HAL_GetCurrentCPUID+0x24>)
 810219e:	681b      	ldr	r3, [r3, #0]
 81021a0:	091b      	lsrs	r3, r3, #4
 81021a2:	f003 030f 	and.w	r3, r3, #15
 81021a6:	2b07      	cmp	r3, #7
 81021a8:	d101      	bne.n	81021ae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81021aa:	2303      	movs	r3, #3
 81021ac:	e000      	b.n	81021b0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81021ae:	2301      	movs	r3, #1
  }
}
 81021b0:	4618      	mov	r0, r3
 81021b2:	46bd      	mov	sp, r7
 81021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b8:	4770      	bx	lr
 81021ba:	bf00      	nop
 81021bc:	e000ed00 	.word	0xe000ed00

081021c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81021c0:	b580      	push	{r7, lr}
 81021c2:	b086      	sub	sp, #24
 81021c4:	af00      	add	r7, sp, #0
 81021c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81021c8:	f7ff fe2a 	bl	8101e20 <HAL_GetTick>
 81021cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	2b00      	cmp	r3, #0
 81021d2:	d101      	bne.n	81021d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81021d4:	2301      	movs	r3, #1
 81021d6:	e314      	b.n	8102802 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81021d8:	687b      	ldr	r3, [r7, #4]
 81021da:	681b      	ldr	r3, [r3, #0]
 81021dc:	4a66      	ldr	r2, [pc, #408]	; (8102378 <HAL_DMA_Init+0x1b8>)
 81021de:	4293      	cmp	r3, r2
 81021e0:	d04a      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	4a65      	ldr	r2, [pc, #404]	; (810237c <HAL_DMA_Init+0x1bc>)
 81021e8:	4293      	cmp	r3, r2
 81021ea:	d045      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	4a63      	ldr	r2, [pc, #396]	; (8102380 <HAL_DMA_Init+0x1c0>)
 81021f2:	4293      	cmp	r3, r2
 81021f4:	d040      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	4a62      	ldr	r2, [pc, #392]	; (8102384 <HAL_DMA_Init+0x1c4>)
 81021fc:	4293      	cmp	r3, r2
 81021fe:	d03b      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	4a60      	ldr	r2, [pc, #384]	; (8102388 <HAL_DMA_Init+0x1c8>)
 8102206:	4293      	cmp	r3, r2
 8102208:	d036      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	4a5f      	ldr	r2, [pc, #380]	; (810238c <HAL_DMA_Init+0x1cc>)
 8102210:	4293      	cmp	r3, r2
 8102212:	d031      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	4a5d      	ldr	r2, [pc, #372]	; (8102390 <HAL_DMA_Init+0x1d0>)
 810221a:	4293      	cmp	r3, r2
 810221c:	d02c      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	681b      	ldr	r3, [r3, #0]
 8102222:	4a5c      	ldr	r2, [pc, #368]	; (8102394 <HAL_DMA_Init+0x1d4>)
 8102224:	4293      	cmp	r3, r2
 8102226:	d027      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	4a5a      	ldr	r2, [pc, #360]	; (8102398 <HAL_DMA_Init+0x1d8>)
 810222e:	4293      	cmp	r3, r2
 8102230:	d022      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	4a59      	ldr	r2, [pc, #356]	; (810239c <HAL_DMA_Init+0x1dc>)
 8102238:	4293      	cmp	r3, r2
 810223a:	d01d      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	4a57      	ldr	r2, [pc, #348]	; (81023a0 <HAL_DMA_Init+0x1e0>)
 8102242:	4293      	cmp	r3, r2
 8102244:	d018      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	681b      	ldr	r3, [r3, #0]
 810224a:	4a56      	ldr	r2, [pc, #344]	; (81023a4 <HAL_DMA_Init+0x1e4>)
 810224c:	4293      	cmp	r3, r2
 810224e:	d013      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	4a54      	ldr	r2, [pc, #336]	; (81023a8 <HAL_DMA_Init+0x1e8>)
 8102256:	4293      	cmp	r3, r2
 8102258:	d00e      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	4a53      	ldr	r2, [pc, #332]	; (81023ac <HAL_DMA_Init+0x1ec>)
 8102260:	4293      	cmp	r3, r2
 8102262:	d009      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	4a51      	ldr	r2, [pc, #324]	; (81023b0 <HAL_DMA_Init+0x1f0>)
 810226a:	4293      	cmp	r3, r2
 810226c:	d004      	beq.n	8102278 <HAL_DMA_Init+0xb8>
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	4a50      	ldr	r2, [pc, #320]	; (81023b4 <HAL_DMA_Init+0x1f4>)
 8102274:	4293      	cmp	r3, r2
 8102276:	d101      	bne.n	810227c <HAL_DMA_Init+0xbc>
 8102278:	2301      	movs	r3, #1
 810227a:	e000      	b.n	810227e <HAL_DMA_Init+0xbe>
 810227c:	2300      	movs	r3, #0
 810227e:	2b00      	cmp	r3, #0
 8102280:	f000 813b 	beq.w	81024fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	2200      	movs	r2, #0
 8102288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	2202      	movs	r2, #2
 8102290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	4a37      	ldr	r2, [pc, #220]	; (8102378 <HAL_DMA_Init+0x1b8>)
 810229a:	4293      	cmp	r3, r2
 810229c:	d04a      	beq.n	8102334 <HAL_DMA_Init+0x174>
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	681b      	ldr	r3, [r3, #0]
 81022a2:	4a36      	ldr	r2, [pc, #216]	; (810237c <HAL_DMA_Init+0x1bc>)
 81022a4:	4293      	cmp	r3, r2
 81022a6:	d045      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	681b      	ldr	r3, [r3, #0]
 81022ac:	4a34      	ldr	r2, [pc, #208]	; (8102380 <HAL_DMA_Init+0x1c0>)
 81022ae:	4293      	cmp	r3, r2
 81022b0:	d040      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	681b      	ldr	r3, [r3, #0]
 81022b6:	4a33      	ldr	r2, [pc, #204]	; (8102384 <HAL_DMA_Init+0x1c4>)
 81022b8:	4293      	cmp	r3, r2
 81022ba:	d03b      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	4a31      	ldr	r2, [pc, #196]	; (8102388 <HAL_DMA_Init+0x1c8>)
 81022c2:	4293      	cmp	r3, r2
 81022c4:	d036      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a30      	ldr	r2, [pc, #192]	; (810238c <HAL_DMA_Init+0x1cc>)
 81022cc:	4293      	cmp	r3, r2
 81022ce:	d031      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	4a2e      	ldr	r2, [pc, #184]	; (8102390 <HAL_DMA_Init+0x1d0>)
 81022d6:	4293      	cmp	r3, r2
 81022d8:	d02c      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	4a2d      	ldr	r2, [pc, #180]	; (8102394 <HAL_DMA_Init+0x1d4>)
 81022e0:	4293      	cmp	r3, r2
 81022e2:	d027      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	4a2b      	ldr	r2, [pc, #172]	; (8102398 <HAL_DMA_Init+0x1d8>)
 81022ea:	4293      	cmp	r3, r2
 81022ec:	d022      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	4a2a      	ldr	r2, [pc, #168]	; (810239c <HAL_DMA_Init+0x1dc>)
 81022f4:	4293      	cmp	r3, r2
 81022f6:	d01d      	beq.n	8102334 <HAL_DMA_Init+0x174>
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	681b      	ldr	r3, [r3, #0]
 81022fc:	4a28      	ldr	r2, [pc, #160]	; (81023a0 <HAL_DMA_Init+0x1e0>)
 81022fe:	4293      	cmp	r3, r2
 8102300:	d018      	beq.n	8102334 <HAL_DMA_Init+0x174>
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	681b      	ldr	r3, [r3, #0]
 8102306:	4a27      	ldr	r2, [pc, #156]	; (81023a4 <HAL_DMA_Init+0x1e4>)
 8102308:	4293      	cmp	r3, r2
 810230a:	d013      	beq.n	8102334 <HAL_DMA_Init+0x174>
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	4a25      	ldr	r2, [pc, #148]	; (81023a8 <HAL_DMA_Init+0x1e8>)
 8102312:	4293      	cmp	r3, r2
 8102314:	d00e      	beq.n	8102334 <HAL_DMA_Init+0x174>
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	4a24      	ldr	r2, [pc, #144]	; (81023ac <HAL_DMA_Init+0x1ec>)
 810231c:	4293      	cmp	r3, r2
 810231e:	d009      	beq.n	8102334 <HAL_DMA_Init+0x174>
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	4a22      	ldr	r2, [pc, #136]	; (81023b0 <HAL_DMA_Init+0x1f0>)
 8102326:	4293      	cmp	r3, r2
 8102328:	d004      	beq.n	8102334 <HAL_DMA_Init+0x174>
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	4a21      	ldr	r2, [pc, #132]	; (81023b4 <HAL_DMA_Init+0x1f4>)
 8102330:	4293      	cmp	r3, r2
 8102332:	d108      	bne.n	8102346 <HAL_DMA_Init+0x186>
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	681b      	ldr	r3, [r3, #0]
 8102338:	681a      	ldr	r2, [r3, #0]
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	f022 0201 	bic.w	r2, r2, #1
 8102342:	601a      	str	r2, [r3, #0]
 8102344:	e007      	b.n	8102356 <HAL_DMA_Init+0x196>
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	681a      	ldr	r2, [r3, #0]
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	681b      	ldr	r3, [r3, #0]
 8102350:	f022 0201 	bic.w	r2, r2, #1
 8102354:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102356:	e02f      	b.n	81023b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102358:	f7ff fd62 	bl	8101e20 <HAL_GetTick>
 810235c:	4602      	mov	r2, r0
 810235e:	693b      	ldr	r3, [r7, #16]
 8102360:	1ad3      	subs	r3, r2, r3
 8102362:	2b05      	cmp	r3, #5
 8102364:	d928      	bls.n	81023b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	2220      	movs	r2, #32
 810236a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	2203      	movs	r2, #3
 8102370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102374:	2301      	movs	r3, #1
 8102376:	e244      	b.n	8102802 <HAL_DMA_Init+0x642>
 8102378:	40020010 	.word	0x40020010
 810237c:	40020028 	.word	0x40020028
 8102380:	40020040 	.word	0x40020040
 8102384:	40020058 	.word	0x40020058
 8102388:	40020070 	.word	0x40020070
 810238c:	40020088 	.word	0x40020088
 8102390:	400200a0 	.word	0x400200a0
 8102394:	400200b8 	.word	0x400200b8
 8102398:	40020410 	.word	0x40020410
 810239c:	40020428 	.word	0x40020428
 81023a0:	40020440 	.word	0x40020440
 81023a4:	40020458 	.word	0x40020458
 81023a8:	40020470 	.word	0x40020470
 81023ac:	40020488 	.word	0x40020488
 81023b0:	400204a0 	.word	0x400204a0
 81023b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	681b      	ldr	r3, [r3, #0]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	f003 0301 	and.w	r3, r3, #1
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d1c8      	bne.n	8102358 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	681b      	ldr	r3, [r3, #0]
 81023cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81023ce:	697a      	ldr	r2, [r7, #20]
 81023d0:	4b84      	ldr	r3, [pc, #528]	; (81025e4 <HAL_DMA_Init+0x424>)
 81023d2:	4013      	ands	r3, r2
 81023d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81023de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	691b      	ldr	r3, [r3, #16]
 81023e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	699b      	ldr	r3, [r3, #24]
 81023f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	6a1b      	ldr	r3, [r3, #32]
 81023fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81023fe:	697a      	ldr	r2, [r7, #20]
 8102400:	4313      	orrs	r3, r2
 8102402:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102408:	2b04      	cmp	r3, #4
 810240a:	d107      	bne.n	810241c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102414:	4313      	orrs	r3, r2
 8102416:	697a      	ldr	r2, [r7, #20]
 8102418:	4313      	orrs	r3, r2
 810241a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810241c:	4b72      	ldr	r3, [pc, #456]	; (81025e8 <HAL_DMA_Init+0x428>)
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	0c1b      	lsrs	r3, r3, #16
 8102422:	041b      	lsls	r3, r3, #16
 8102424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102428:	d328      	bcc.n	810247c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	685b      	ldr	r3, [r3, #4]
 810242e:	2b28      	cmp	r3, #40	; 0x28
 8102430:	d903      	bls.n	810243a <HAL_DMA_Init+0x27a>
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	685b      	ldr	r3, [r3, #4]
 8102436:	2b2e      	cmp	r3, #46	; 0x2e
 8102438:	d917      	bls.n	810246a <HAL_DMA_Init+0x2aa>
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	685b      	ldr	r3, [r3, #4]
 810243e:	2b3e      	cmp	r3, #62	; 0x3e
 8102440:	d903      	bls.n	810244a <HAL_DMA_Init+0x28a>
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	685b      	ldr	r3, [r3, #4]
 8102446:	2b42      	cmp	r3, #66	; 0x42
 8102448:	d90f      	bls.n	810246a <HAL_DMA_Init+0x2aa>
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	685b      	ldr	r3, [r3, #4]
 810244e:	2b46      	cmp	r3, #70	; 0x46
 8102450:	d903      	bls.n	810245a <HAL_DMA_Init+0x29a>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	685b      	ldr	r3, [r3, #4]
 8102456:	2b48      	cmp	r3, #72	; 0x48
 8102458:	d907      	bls.n	810246a <HAL_DMA_Init+0x2aa>
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	685b      	ldr	r3, [r3, #4]
 810245e:	2b4e      	cmp	r3, #78	; 0x4e
 8102460:	d905      	bls.n	810246e <HAL_DMA_Init+0x2ae>
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	685b      	ldr	r3, [r3, #4]
 8102466:	2b52      	cmp	r3, #82	; 0x52
 8102468:	d801      	bhi.n	810246e <HAL_DMA_Init+0x2ae>
 810246a:	2301      	movs	r3, #1
 810246c:	e000      	b.n	8102470 <HAL_DMA_Init+0x2b0>
 810246e:	2300      	movs	r3, #0
 8102470:	2b00      	cmp	r3, #0
 8102472:	d003      	beq.n	810247c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102474:	697b      	ldr	r3, [r7, #20]
 8102476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810247a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	697a      	ldr	r2, [r7, #20]
 8102482:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	695b      	ldr	r3, [r3, #20]
 810248a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810248c:	697b      	ldr	r3, [r7, #20]
 810248e:	f023 0307 	bic.w	r3, r3, #7
 8102492:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102498:	697a      	ldr	r2, [r7, #20]
 810249a:	4313      	orrs	r3, r2
 810249c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81024a2:	2b04      	cmp	r3, #4
 81024a4:	d117      	bne.n	81024d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024aa:	697a      	ldr	r2, [r7, #20]
 81024ac:	4313      	orrs	r3, r2
 81024ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024b4:	2b00      	cmp	r3, #0
 81024b6:	d00e      	beq.n	81024d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81024b8:	6878      	ldr	r0, [r7, #4]
 81024ba:	f002 fb3d 	bl	8104b38 <DMA_CheckFifoParam>
 81024be:	4603      	mov	r3, r0
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d008      	beq.n	81024d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	2240      	movs	r2, #64	; 0x40
 81024c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	2201      	movs	r2, #1
 81024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81024d2:	2301      	movs	r3, #1
 81024d4:	e195      	b.n	8102802 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	697a      	ldr	r2, [r7, #20]
 81024dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81024de:	6878      	ldr	r0, [r7, #4]
 81024e0:	f002 fa78 	bl	81049d4 <DMA_CalcBaseAndBitshift>
 81024e4:	4603      	mov	r3, r0
 81024e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81024ec:	f003 031f 	and.w	r3, r3, #31
 81024f0:	223f      	movs	r2, #63	; 0x3f
 81024f2:	409a      	lsls	r2, r3
 81024f4:	68bb      	ldr	r3, [r7, #8]
 81024f6:	609a      	str	r2, [r3, #8]
 81024f8:	e0cb      	b.n	8102692 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	4a3b      	ldr	r2, [pc, #236]	; (81025ec <HAL_DMA_Init+0x42c>)
 8102500:	4293      	cmp	r3, r2
 8102502:	d022      	beq.n	810254a <HAL_DMA_Init+0x38a>
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	4a39      	ldr	r2, [pc, #228]	; (81025f0 <HAL_DMA_Init+0x430>)
 810250a:	4293      	cmp	r3, r2
 810250c:	d01d      	beq.n	810254a <HAL_DMA_Init+0x38a>
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	4a38      	ldr	r2, [pc, #224]	; (81025f4 <HAL_DMA_Init+0x434>)
 8102514:	4293      	cmp	r3, r2
 8102516:	d018      	beq.n	810254a <HAL_DMA_Init+0x38a>
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	4a36      	ldr	r2, [pc, #216]	; (81025f8 <HAL_DMA_Init+0x438>)
 810251e:	4293      	cmp	r3, r2
 8102520:	d013      	beq.n	810254a <HAL_DMA_Init+0x38a>
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	4a35      	ldr	r2, [pc, #212]	; (81025fc <HAL_DMA_Init+0x43c>)
 8102528:	4293      	cmp	r3, r2
 810252a:	d00e      	beq.n	810254a <HAL_DMA_Init+0x38a>
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	4a33      	ldr	r2, [pc, #204]	; (8102600 <HAL_DMA_Init+0x440>)
 8102532:	4293      	cmp	r3, r2
 8102534:	d009      	beq.n	810254a <HAL_DMA_Init+0x38a>
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a32      	ldr	r2, [pc, #200]	; (8102604 <HAL_DMA_Init+0x444>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d004      	beq.n	810254a <HAL_DMA_Init+0x38a>
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	4a30      	ldr	r2, [pc, #192]	; (8102608 <HAL_DMA_Init+0x448>)
 8102546:	4293      	cmp	r3, r2
 8102548:	d101      	bne.n	810254e <HAL_DMA_Init+0x38e>
 810254a:	2301      	movs	r3, #1
 810254c:	e000      	b.n	8102550 <HAL_DMA_Init+0x390>
 810254e:	2300      	movs	r3, #0
 8102550:	2b00      	cmp	r3, #0
 8102552:	f000 8095 	beq.w	8102680 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	681b      	ldr	r3, [r3, #0]
 810255a:	4a24      	ldr	r2, [pc, #144]	; (81025ec <HAL_DMA_Init+0x42c>)
 810255c:	4293      	cmp	r3, r2
 810255e:	d021      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	4a22      	ldr	r2, [pc, #136]	; (81025f0 <HAL_DMA_Init+0x430>)
 8102566:	4293      	cmp	r3, r2
 8102568:	d01c      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	4a21      	ldr	r2, [pc, #132]	; (81025f4 <HAL_DMA_Init+0x434>)
 8102570:	4293      	cmp	r3, r2
 8102572:	d017      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	4a1f      	ldr	r2, [pc, #124]	; (81025f8 <HAL_DMA_Init+0x438>)
 810257a:	4293      	cmp	r3, r2
 810257c:	d012      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	4a1e      	ldr	r2, [pc, #120]	; (81025fc <HAL_DMA_Init+0x43c>)
 8102584:	4293      	cmp	r3, r2
 8102586:	d00d      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	4a1c      	ldr	r2, [pc, #112]	; (8102600 <HAL_DMA_Init+0x440>)
 810258e:	4293      	cmp	r3, r2
 8102590:	d008      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	4a1b      	ldr	r2, [pc, #108]	; (8102604 <HAL_DMA_Init+0x444>)
 8102598:	4293      	cmp	r3, r2
 810259a:	d003      	beq.n	81025a4 <HAL_DMA_Init+0x3e4>
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	4a19      	ldr	r2, [pc, #100]	; (8102608 <HAL_DMA_Init+0x448>)
 81025a2:	4293      	cmp	r3, r2
 81025a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	2200      	movs	r2, #0
 81025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	2202      	movs	r2, #2
 81025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	681b      	ldr	r3, [r3, #0]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81025be:	697b      	ldr	r3, [r7, #20]
 81025c0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81025c4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81025c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	689b      	ldr	r3, [r3, #8]
 81025ce:	2b40      	cmp	r3, #64	; 0x40
 81025d0:	d01c      	beq.n	810260c <HAL_DMA_Init+0x44c>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	689b      	ldr	r3, [r3, #8]
 81025d6:	2b80      	cmp	r3, #128	; 0x80
 81025d8:	d102      	bne.n	81025e0 <HAL_DMA_Init+0x420>
 81025da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81025de:	e016      	b.n	810260e <HAL_DMA_Init+0x44e>
 81025e0:	2300      	movs	r3, #0
 81025e2:	e014      	b.n	810260e <HAL_DMA_Init+0x44e>
 81025e4:	fe10803f 	.word	0xfe10803f
 81025e8:	5c001000 	.word	0x5c001000
 81025ec:	58025408 	.word	0x58025408
 81025f0:	5802541c 	.word	0x5802541c
 81025f4:	58025430 	.word	0x58025430
 81025f8:	58025444 	.word	0x58025444
 81025fc:	58025458 	.word	0x58025458
 8102600:	5802546c 	.word	0x5802546c
 8102604:	58025480 	.word	0x58025480
 8102608:	58025494 	.word	0x58025494
 810260c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810260e:	687a      	ldr	r2, [r7, #4]
 8102610:	68d2      	ldr	r2, [r2, #12]
 8102612:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	691b      	ldr	r3, [r3, #16]
 810261a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810261c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	695b      	ldr	r3, [r3, #20]
 8102622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	699b      	ldr	r3, [r3, #24]
 810262a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810262c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	69db      	ldr	r3, [r3, #28]
 8102632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	6a1b      	ldr	r3, [r3, #32]
 810263a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810263c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810263e:	697a      	ldr	r2, [r7, #20]
 8102640:	4313      	orrs	r3, r2
 8102642:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102644:	687b      	ldr	r3, [r7, #4]
 8102646:	681b      	ldr	r3, [r3, #0]
 8102648:	697a      	ldr	r2, [r7, #20]
 810264a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	461a      	mov	r2, r3
 8102652:	4b6e      	ldr	r3, [pc, #440]	; (810280c <HAL_DMA_Init+0x64c>)
 8102654:	4413      	add	r3, r2
 8102656:	4a6e      	ldr	r2, [pc, #440]	; (8102810 <HAL_DMA_Init+0x650>)
 8102658:	fba2 2303 	umull	r2, r3, r2, r3
 810265c:	091b      	lsrs	r3, r3, #4
 810265e:	009a      	lsls	r2, r3, #2
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102664:	6878      	ldr	r0, [r7, #4]
 8102666:	f002 f9b5 	bl	81049d4 <DMA_CalcBaseAndBitshift>
 810266a:	4603      	mov	r3, r0
 810266c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102672:	f003 031f 	and.w	r3, r3, #31
 8102676:	2201      	movs	r2, #1
 8102678:	409a      	lsls	r2, r3
 810267a:	68fb      	ldr	r3, [r7, #12]
 810267c:	605a      	str	r2, [r3, #4]
 810267e:	e008      	b.n	8102692 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	2240      	movs	r2, #64	; 0x40
 8102684:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	2203      	movs	r2, #3
 810268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810268e:	2301      	movs	r3, #1
 8102690:	e0b7      	b.n	8102802 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	4a5f      	ldr	r2, [pc, #380]	; (8102814 <HAL_DMA_Init+0x654>)
 8102698:	4293      	cmp	r3, r2
 810269a:	d072      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	4a5d      	ldr	r2, [pc, #372]	; (8102818 <HAL_DMA_Init+0x658>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d06d      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4a5c      	ldr	r2, [pc, #368]	; (810281c <HAL_DMA_Init+0x65c>)
 81026ac:	4293      	cmp	r3, r2
 81026ae:	d068      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4a5a      	ldr	r2, [pc, #360]	; (8102820 <HAL_DMA_Init+0x660>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d063      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	4a59      	ldr	r2, [pc, #356]	; (8102824 <HAL_DMA_Init+0x664>)
 81026c0:	4293      	cmp	r3, r2
 81026c2:	d05e      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	4a57      	ldr	r2, [pc, #348]	; (8102828 <HAL_DMA_Init+0x668>)
 81026ca:	4293      	cmp	r3, r2
 81026cc:	d059      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	681b      	ldr	r3, [r3, #0]
 81026d2:	4a56      	ldr	r2, [pc, #344]	; (810282c <HAL_DMA_Init+0x66c>)
 81026d4:	4293      	cmp	r3, r2
 81026d6:	d054      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	4a54      	ldr	r2, [pc, #336]	; (8102830 <HAL_DMA_Init+0x670>)
 81026de:	4293      	cmp	r3, r2
 81026e0:	d04f      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	681b      	ldr	r3, [r3, #0]
 81026e6:	4a53      	ldr	r2, [pc, #332]	; (8102834 <HAL_DMA_Init+0x674>)
 81026e8:	4293      	cmp	r3, r2
 81026ea:	d04a      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	681b      	ldr	r3, [r3, #0]
 81026f0:	4a51      	ldr	r2, [pc, #324]	; (8102838 <HAL_DMA_Init+0x678>)
 81026f2:	4293      	cmp	r3, r2
 81026f4:	d045      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	4a50      	ldr	r2, [pc, #320]	; (810283c <HAL_DMA_Init+0x67c>)
 81026fc:	4293      	cmp	r3, r2
 81026fe:	d040      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	681b      	ldr	r3, [r3, #0]
 8102704:	4a4e      	ldr	r2, [pc, #312]	; (8102840 <HAL_DMA_Init+0x680>)
 8102706:	4293      	cmp	r3, r2
 8102708:	d03b      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	4a4d      	ldr	r2, [pc, #308]	; (8102844 <HAL_DMA_Init+0x684>)
 8102710:	4293      	cmp	r3, r2
 8102712:	d036      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	4a4b      	ldr	r2, [pc, #300]	; (8102848 <HAL_DMA_Init+0x688>)
 810271a:	4293      	cmp	r3, r2
 810271c:	d031      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	681b      	ldr	r3, [r3, #0]
 8102722:	4a4a      	ldr	r2, [pc, #296]	; (810284c <HAL_DMA_Init+0x68c>)
 8102724:	4293      	cmp	r3, r2
 8102726:	d02c      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	4a48      	ldr	r2, [pc, #288]	; (8102850 <HAL_DMA_Init+0x690>)
 810272e:	4293      	cmp	r3, r2
 8102730:	d027      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	4a47      	ldr	r2, [pc, #284]	; (8102854 <HAL_DMA_Init+0x694>)
 8102738:	4293      	cmp	r3, r2
 810273a:	d022      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	4a45      	ldr	r2, [pc, #276]	; (8102858 <HAL_DMA_Init+0x698>)
 8102742:	4293      	cmp	r3, r2
 8102744:	d01d      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	4a44      	ldr	r2, [pc, #272]	; (810285c <HAL_DMA_Init+0x69c>)
 810274c:	4293      	cmp	r3, r2
 810274e:	d018      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	4a42      	ldr	r2, [pc, #264]	; (8102860 <HAL_DMA_Init+0x6a0>)
 8102756:	4293      	cmp	r3, r2
 8102758:	d013      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	4a41      	ldr	r2, [pc, #260]	; (8102864 <HAL_DMA_Init+0x6a4>)
 8102760:	4293      	cmp	r3, r2
 8102762:	d00e      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	4a3f      	ldr	r2, [pc, #252]	; (8102868 <HAL_DMA_Init+0x6a8>)
 810276a:	4293      	cmp	r3, r2
 810276c:	d009      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	4a3e      	ldr	r2, [pc, #248]	; (810286c <HAL_DMA_Init+0x6ac>)
 8102774:	4293      	cmp	r3, r2
 8102776:	d004      	beq.n	8102782 <HAL_DMA_Init+0x5c2>
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	4a3c      	ldr	r2, [pc, #240]	; (8102870 <HAL_DMA_Init+0x6b0>)
 810277e:	4293      	cmp	r3, r2
 8102780:	d101      	bne.n	8102786 <HAL_DMA_Init+0x5c6>
 8102782:	2301      	movs	r3, #1
 8102784:	e000      	b.n	8102788 <HAL_DMA_Init+0x5c8>
 8102786:	2300      	movs	r3, #0
 8102788:	2b00      	cmp	r3, #0
 810278a:	d032      	beq.n	81027f2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 810278c:	6878      	ldr	r0, [r7, #4]
 810278e:	f002 fa4f 	bl	8104c30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	689b      	ldr	r3, [r3, #8]
 8102796:	2b80      	cmp	r3, #128	; 0x80
 8102798:	d102      	bne.n	81027a0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	2200      	movs	r2, #0
 810279e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	685a      	ldr	r2, [r3, #4]
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81027a8:	b2d2      	uxtb	r2, r2
 81027aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81027b0:	687a      	ldr	r2, [r7, #4]
 81027b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81027b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	685b      	ldr	r3, [r3, #4]
 81027ba:	2b00      	cmp	r3, #0
 81027bc:	d010      	beq.n	81027e0 <HAL_DMA_Init+0x620>
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	685b      	ldr	r3, [r3, #4]
 81027c2:	2b08      	cmp	r3, #8
 81027c4:	d80c      	bhi.n	81027e0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81027c6:	6878      	ldr	r0, [r7, #4]
 81027c8:	f002 facc 	bl	8104d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81027d0:	2200      	movs	r2, #0
 81027d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81027d8:	687a      	ldr	r2, [r7, #4]
 81027da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81027dc:	605a      	str	r2, [r3, #4]
 81027de:	e008      	b.n	81027f2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	2200      	movs	r2, #0
 81027e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	2200      	movs	r2, #0
 81027ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	2200      	movs	r2, #0
 81027f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	2200      	movs	r2, #0
 81027f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	2201      	movs	r2, #1
 81027fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102800:	2300      	movs	r3, #0
}
 8102802:	4618      	mov	r0, r3
 8102804:	3718      	adds	r7, #24
 8102806:	46bd      	mov	sp, r7
 8102808:	bd80      	pop	{r7, pc}
 810280a:	bf00      	nop
 810280c:	a7fdabf8 	.word	0xa7fdabf8
 8102810:	cccccccd 	.word	0xcccccccd
 8102814:	40020010 	.word	0x40020010
 8102818:	40020028 	.word	0x40020028
 810281c:	40020040 	.word	0x40020040
 8102820:	40020058 	.word	0x40020058
 8102824:	40020070 	.word	0x40020070
 8102828:	40020088 	.word	0x40020088
 810282c:	400200a0 	.word	0x400200a0
 8102830:	400200b8 	.word	0x400200b8
 8102834:	40020410 	.word	0x40020410
 8102838:	40020428 	.word	0x40020428
 810283c:	40020440 	.word	0x40020440
 8102840:	40020458 	.word	0x40020458
 8102844:	40020470 	.word	0x40020470
 8102848:	40020488 	.word	0x40020488
 810284c:	400204a0 	.word	0x400204a0
 8102850:	400204b8 	.word	0x400204b8
 8102854:	58025408 	.word	0x58025408
 8102858:	5802541c 	.word	0x5802541c
 810285c:	58025430 	.word	0x58025430
 8102860:	58025444 	.word	0x58025444
 8102864:	58025458 	.word	0x58025458
 8102868:	5802546c 	.word	0x5802546c
 810286c:	58025480 	.word	0x58025480
 8102870:	58025494 	.word	0x58025494

08102874 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102874:	b580      	push	{r7, lr}
 8102876:	b086      	sub	sp, #24
 8102878:	af00      	add	r7, sp, #0
 810287a:	60f8      	str	r0, [r7, #12]
 810287c:	60b9      	str	r1, [r7, #8]
 810287e:	607a      	str	r2, [r7, #4]
 8102880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102882:	2300      	movs	r3, #0
 8102884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102886:	68fb      	ldr	r3, [r7, #12]
 8102888:	2b00      	cmp	r3, #0
 810288a:	d101      	bne.n	8102890 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 810288c:	2301      	movs	r3, #1
 810288e:	e226      	b.n	8102cde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102890:	68fb      	ldr	r3, [r7, #12]
 8102892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102896:	2b01      	cmp	r3, #1
 8102898:	d101      	bne.n	810289e <HAL_DMA_Start_IT+0x2a>
 810289a:	2302      	movs	r3, #2
 810289c:	e21f      	b.n	8102cde <HAL_DMA_Start_IT+0x46a>
 810289e:	68fb      	ldr	r3, [r7, #12]
 81028a0:	2201      	movs	r2, #1
 81028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81028a6:	68fb      	ldr	r3, [r7, #12]
 81028a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81028ac:	b2db      	uxtb	r3, r3
 81028ae:	2b01      	cmp	r3, #1
 81028b0:	f040 820a 	bne.w	8102cc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	2202      	movs	r2, #2
 81028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81028bc:	68fb      	ldr	r3, [r7, #12]
 81028be:	2200      	movs	r2, #0
 81028c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81028c2:	68fb      	ldr	r3, [r7, #12]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	4a68      	ldr	r2, [pc, #416]	; (8102a68 <HAL_DMA_Start_IT+0x1f4>)
 81028c8:	4293      	cmp	r3, r2
 81028ca:	d04a      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 81028cc:	68fb      	ldr	r3, [r7, #12]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	4a66      	ldr	r2, [pc, #408]	; (8102a6c <HAL_DMA_Start_IT+0x1f8>)
 81028d2:	4293      	cmp	r3, r2
 81028d4:	d045      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 81028d6:	68fb      	ldr	r3, [r7, #12]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	4a65      	ldr	r2, [pc, #404]	; (8102a70 <HAL_DMA_Start_IT+0x1fc>)
 81028dc:	4293      	cmp	r3, r2
 81028de:	d040      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 81028e0:	68fb      	ldr	r3, [r7, #12]
 81028e2:	681b      	ldr	r3, [r3, #0]
 81028e4:	4a63      	ldr	r2, [pc, #396]	; (8102a74 <HAL_DMA_Start_IT+0x200>)
 81028e6:	4293      	cmp	r3, r2
 81028e8:	d03b      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 81028ea:	68fb      	ldr	r3, [r7, #12]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	4a62      	ldr	r2, [pc, #392]	; (8102a78 <HAL_DMA_Start_IT+0x204>)
 81028f0:	4293      	cmp	r3, r2
 81028f2:	d036      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	4a60      	ldr	r2, [pc, #384]	; (8102a7c <HAL_DMA_Start_IT+0x208>)
 81028fa:	4293      	cmp	r3, r2
 81028fc:	d031      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 81028fe:	68fb      	ldr	r3, [r7, #12]
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	4a5f      	ldr	r2, [pc, #380]	; (8102a80 <HAL_DMA_Start_IT+0x20c>)
 8102904:	4293      	cmp	r3, r2
 8102906:	d02c      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 8102908:	68fb      	ldr	r3, [r7, #12]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	4a5d      	ldr	r2, [pc, #372]	; (8102a84 <HAL_DMA_Start_IT+0x210>)
 810290e:	4293      	cmp	r3, r2
 8102910:	d027      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	4a5c      	ldr	r2, [pc, #368]	; (8102a88 <HAL_DMA_Start_IT+0x214>)
 8102918:	4293      	cmp	r3, r2
 810291a:	d022      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 810291c:	68fb      	ldr	r3, [r7, #12]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	4a5a      	ldr	r2, [pc, #360]	; (8102a8c <HAL_DMA_Start_IT+0x218>)
 8102922:	4293      	cmp	r3, r2
 8102924:	d01d      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 8102926:	68fb      	ldr	r3, [r7, #12]
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	4a59      	ldr	r2, [pc, #356]	; (8102a90 <HAL_DMA_Start_IT+0x21c>)
 810292c:	4293      	cmp	r3, r2
 810292e:	d018      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 8102930:	68fb      	ldr	r3, [r7, #12]
 8102932:	681b      	ldr	r3, [r3, #0]
 8102934:	4a57      	ldr	r2, [pc, #348]	; (8102a94 <HAL_DMA_Start_IT+0x220>)
 8102936:	4293      	cmp	r3, r2
 8102938:	d013      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 810293a:	68fb      	ldr	r3, [r7, #12]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	4a56      	ldr	r2, [pc, #344]	; (8102a98 <HAL_DMA_Start_IT+0x224>)
 8102940:	4293      	cmp	r3, r2
 8102942:	d00e      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 8102944:	68fb      	ldr	r3, [r7, #12]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	4a54      	ldr	r2, [pc, #336]	; (8102a9c <HAL_DMA_Start_IT+0x228>)
 810294a:	4293      	cmp	r3, r2
 810294c:	d009      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 810294e:	68fb      	ldr	r3, [r7, #12]
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	4a53      	ldr	r2, [pc, #332]	; (8102aa0 <HAL_DMA_Start_IT+0x22c>)
 8102954:	4293      	cmp	r3, r2
 8102956:	d004      	beq.n	8102962 <HAL_DMA_Start_IT+0xee>
 8102958:	68fb      	ldr	r3, [r7, #12]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4a51      	ldr	r2, [pc, #324]	; (8102aa4 <HAL_DMA_Start_IT+0x230>)
 810295e:	4293      	cmp	r3, r2
 8102960:	d108      	bne.n	8102974 <HAL_DMA_Start_IT+0x100>
 8102962:	68fb      	ldr	r3, [r7, #12]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	681a      	ldr	r2, [r3, #0]
 8102968:	68fb      	ldr	r3, [r7, #12]
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	f022 0201 	bic.w	r2, r2, #1
 8102970:	601a      	str	r2, [r3, #0]
 8102972:	e007      	b.n	8102984 <HAL_DMA_Start_IT+0x110>
 8102974:	68fb      	ldr	r3, [r7, #12]
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	681a      	ldr	r2, [r3, #0]
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	f022 0201 	bic.w	r2, r2, #1
 8102982:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102984:	683b      	ldr	r3, [r7, #0]
 8102986:	687a      	ldr	r2, [r7, #4]
 8102988:	68b9      	ldr	r1, [r7, #8]
 810298a:	68f8      	ldr	r0, [r7, #12]
 810298c:	f001 fe76 	bl	810467c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102990:	68fb      	ldr	r3, [r7, #12]
 8102992:	681b      	ldr	r3, [r3, #0]
 8102994:	4a34      	ldr	r2, [pc, #208]	; (8102a68 <HAL_DMA_Start_IT+0x1f4>)
 8102996:	4293      	cmp	r3, r2
 8102998:	d04a      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 810299a:	68fb      	ldr	r3, [r7, #12]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	4a33      	ldr	r2, [pc, #204]	; (8102a6c <HAL_DMA_Start_IT+0x1f8>)
 81029a0:	4293      	cmp	r3, r2
 81029a2:	d045      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029a4:	68fb      	ldr	r3, [r7, #12]
 81029a6:	681b      	ldr	r3, [r3, #0]
 81029a8:	4a31      	ldr	r2, [pc, #196]	; (8102a70 <HAL_DMA_Start_IT+0x1fc>)
 81029aa:	4293      	cmp	r3, r2
 81029ac:	d040      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029ae:	68fb      	ldr	r3, [r7, #12]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	4a30      	ldr	r2, [pc, #192]	; (8102a74 <HAL_DMA_Start_IT+0x200>)
 81029b4:	4293      	cmp	r3, r2
 81029b6:	d03b      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029b8:	68fb      	ldr	r3, [r7, #12]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	4a2e      	ldr	r2, [pc, #184]	; (8102a78 <HAL_DMA_Start_IT+0x204>)
 81029be:	4293      	cmp	r3, r2
 81029c0:	d036      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029c2:	68fb      	ldr	r3, [r7, #12]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	4a2d      	ldr	r2, [pc, #180]	; (8102a7c <HAL_DMA_Start_IT+0x208>)
 81029c8:	4293      	cmp	r3, r2
 81029ca:	d031      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	681b      	ldr	r3, [r3, #0]
 81029d0:	4a2b      	ldr	r2, [pc, #172]	; (8102a80 <HAL_DMA_Start_IT+0x20c>)
 81029d2:	4293      	cmp	r3, r2
 81029d4:	d02c      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029d6:	68fb      	ldr	r3, [r7, #12]
 81029d8:	681b      	ldr	r3, [r3, #0]
 81029da:	4a2a      	ldr	r2, [pc, #168]	; (8102a84 <HAL_DMA_Start_IT+0x210>)
 81029dc:	4293      	cmp	r3, r2
 81029de:	d027      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029e0:	68fb      	ldr	r3, [r7, #12]
 81029e2:	681b      	ldr	r3, [r3, #0]
 81029e4:	4a28      	ldr	r2, [pc, #160]	; (8102a88 <HAL_DMA_Start_IT+0x214>)
 81029e6:	4293      	cmp	r3, r2
 81029e8:	d022      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	681b      	ldr	r3, [r3, #0]
 81029ee:	4a27      	ldr	r2, [pc, #156]	; (8102a8c <HAL_DMA_Start_IT+0x218>)
 81029f0:	4293      	cmp	r3, r2
 81029f2:	d01d      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	4a25      	ldr	r2, [pc, #148]	; (8102a90 <HAL_DMA_Start_IT+0x21c>)
 81029fa:	4293      	cmp	r3, r2
 81029fc:	d018      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	681b      	ldr	r3, [r3, #0]
 8102a02:	4a24      	ldr	r2, [pc, #144]	; (8102a94 <HAL_DMA_Start_IT+0x220>)
 8102a04:	4293      	cmp	r3, r2
 8102a06:	d013      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 8102a08:	68fb      	ldr	r3, [r7, #12]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	4a22      	ldr	r2, [pc, #136]	; (8102a98 <HAL_DMA_Start_IT+0x224>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d00e      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 8102a12:	68fb      	ldr	r3, [r7, #12]
 8102a14:	681b      	ldr	r3, [r3, #0]
 8102a16:	4a21      	ldr	r2, [pc, #132]	; (8102a9c <HAL_DMA_Start_IT+0x228>)
 8102a18:	4293      	cmp	r3, r2
 8102a1a:	d009      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 8102a1c:	68fb      	ldr	r3, [r7, #12]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	4a1f      	ldr	r2, [pc, #124]	; (8102aa0 <HAL_DMA_Start_IT+0x22c>)
 8102a22:	4293      	cmp	r3, r2
 8102a24:	d004      	beq.n	8102a30 <HAL_DMA_Start_IT+0x1bc>
 8102a26:	68fb      	ldr	r3, [r7, #12]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a1e      	ldr	r2, [pc, #120]	; (8102aa4 <HAL_DMA_Start_IT+0x230>)
 8102a2c:	4293      	cmp	r3, r2
 8102a2e:	d101      	bne.n	8102a34 <HAL_DMA_Start_IT+0x1c0>
 8102a30:	2301      	movs	r3, #1
 8102a32:	e000      	b.n	8102a36 <HAL_DMA_Start_IT+0x1c2>
 8102a34:	2300      	movs	r3, #0
 8102a36:	2b00      	cmp	r3, #0
 8102a38:	d036      	beq.n	8102aa8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102a3a:	68fb      	ldr	r3, [r7, #12]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	f023 021e 	bic.w	r2, r3, #30
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	f042 0216 	orr.w	r2, r2, #22
 8102a4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102a4e:	68fb      	ldr	r3, [r7, #12]
 8102a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a52:	2b00      	cmp	r3, #0
 8102a54:	d03e      	beq.n	8102ad4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102a56:	68fb      	ldr	r3, [r7, #12]
 8102a58:	681b      	ldr	r3, [r3, #0]
 8102a5a:	681a      	ldr	r2, [r3, #0]
 8102a5c:	68fb      	ldr	r3, [r7, #12]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	f042 0208 	orr.w	r2, r2, #8
 8102a64:	601a      	str	r2, [r3, #0]
 8102a66:	e035      	b.n	8102ad4 <HAL_DMA_Start_IT+0x260>
 8102a68:	40020010 	.word	0x40020010
 8102a6c:	40020028 	.word	0x40020028
 8102a70:	40020040 	.word	0x40020040
 8102a74:	40020058 	.word	0x40020058
 8102a78:	40020070 	.word	0x40020070
 8102a7c:	40020088 	.word	0x40020088
 8102a80:	400200a0 	.word	0x400200a0
 8102a84:	400200b8 	.word	0x400200b8
 8102a88:	40020410 	.word	0x40020410
 8102a8c:	40020428 	.word	0x40020428
 8102a90:	40020440 	.word	0x40020440
 8102a94:	40020458 	.word	0x40020458
 8102a98:	40020470 	.word	0x40020470
 8102a9c:	40020488 	.word	0x40020488
 8102aa0:	400204a0 	.word	0x400204a0
 8102aa4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102aa8:	68fb      	ldr	r3, [r7, #12]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	f023 020e 	bic.w	r2, r3, #14
 8102ab2:	68fb      	ldr	r3, [r7, #12]
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	f042 020a 	orr.w	r2, r2, #10
 8102aba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102abc:	68fb      	ldr	r3, [r7, #12]
 8102abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d007      	beq.n	8102ad4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102ac4:	68fb      	ldr	r3, [r7, #12]
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	681a      	ldr	r2, [r3, #0]
 8102aca:	68fb      	ldr	r3, [r7, #12]
 8102acc:	681b      	ldr	r3, [r3, #0]
 8102ace:	f042 0204 	orr.w	r2, r2, #4
 8102ad2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ad4:	68fb      	ldr	r3, [r7, #12]
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	4a83      	ldr	r2, [pc, #524]	; (8102ce8 <HAL_DMA_Start_IT+0x474>)
 8102ada:	4293      	cmp	r3, r2
 8102adc:	d072      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102ade:	68fb      	ldr	r3, [r7, #12]
 8102ae0:	681b      	ldr	r3, [r3, #0]
 8102ae2:	4a82      	ldr	r2, [pc, #520]	; (8102cec <HAL_DMA_Start_IT+0x478>)
 8102ae4:	4293      	cmp	r3, r2
 8102ae6:	d06d      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102ae8:	68fb      	ldr	r3, [r7, #12]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	4a80      	ldr	r2, [pc, #512]	; (8102cf0 <HAL_DMA_Start_IT+0x47c>)
 8102aee:	4293      	cmp	r3, r2
 8102af0:	d068      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102af2:	68fb      	ldr	r3, [r7, #12]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	4a7f      	ldr	r2, [pc, #508]	; (8102cf4 <HAL_DMA_Start_IT+0x480>)
 8102af8:	4293      	cmp	r3, r2
 8102afa:	d063      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102afc:	68fb      	ldr	r3, [r7, #12]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	4a7d      	ldr	r2, [pc, #500]	; (8102cf8 <HAL_DMA_Start_IT+0x484>)
 8102b02:	4293      	cmp	r3, r2
 8102b04:	d05e      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	4a7c      	ldr	r2, [pc, #496]	; (8102cfc <HAL_DMA_Start_IT+0x488>)
 8102b0c:	4293      	cmp	r3, r2
 8102b0e:	d059      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b10:	68fb      	ldr	r3, [r7, #12]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	4a7a      	ldr	r2, [pc, #488]	; (8102d00 <HAL_DMA_Start_IT+0x48c>)
 8102b16:	4293      	cmp	r3, r2
 8102b18:	d054      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b1a:	68fb      	ldr	r3, [r7, #12]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	4a79      	ldr	r2, [pc, #484]	; (8102d04 <HAL_DMA_Start_IT+0x490>)
 8102b20:	4293      	cmp	r3, r2
 8102b22:	d04f      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	4a77      	ldr	r2, [pc, #476]	; (8102d08 <HAL_DMA_Start_IT+0x494>)
 8102b2a:	4293      	cmp	r3, r2
 8102b2c:	d04a      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b2e:	68fb      	ldr	r3, [r7, #12]
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	4a76      	ldr	r2, [pc, #472]	; (8102d0c <HAL_DMA_Start_IT+0x498>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d045      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b38:	68fb      	ldr	r3, [r7, #12]
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	4a74      	ldr	r2, [pc, #464]	; (8102d10 <HAL_DMA_Start_IT+0x49c>)
 8102b3e:	4293      	cmp	r3, r2
 8102b40:	d040      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b42:	68fb      	ldr	r3, [r7, #12]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	4a73      	ldr	r2, [pc, #460]	; (8102d14 <HAL_DMA_Start_IT+0x4a0>)
 8102b48:	4293      	cmp	r3, r2
 8102b4a:	d03b      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	4a71      	ldr	r2, [pc, #452]	; (8102d18 <HAL_DMA_Start_IT+0x4a4>)
 8102b52:	4293      	cmp	r3, r2
 8102b54:	d036      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b56:	68fb      	ldr	r3, [r7, #12]
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	4a70      	ldr	r2, [pc, #448]	; (8102d1c <HAL_DMA_Start_IT+0x4a8>)
 8102b5c:	4293      	cmp	r3, r2
 8102b5e:	d031      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b60:	68fb      	ldr	r3, [r7, #12]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	4a6e      	ldr	r2, [pc, #440]	; (8102d20 <HAL_DMA_Start_IT+0x4ac>)
 8102b66:	4293      	cmp	r3, r2
 8102b68:	d02c      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a6d      	ldr	r2, [pc, #436]	; (8102d24 <HAL_DMA_Start_IT+0x4b0>)
 8102b70:	4293      	cmp	r3, r2
 8102b72:	d027      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b74:	68fb      	ldr	r3, [r7, #12]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a6b      	ldr	r2, [pc, #428]	; (8102d28 <HAL_DMA_Start_IT+0x4b4>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	d022      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b7e:	68fb      	ldr	r3, [r7, #12]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	4a6a      	ldr	r2, [pc, #424]	; (8102d2c <HAL_DMA_Start_IT+0x4b8>)
 8102b84:	4293      	cmp	r3, r2
 8102b86:	d01d      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	4a68      	ldr	r2, [pc, #416]	; (8102d30 <HAL_DMA_Start_IT+0x4bc>)
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d018      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	681b      	ldr	r3, [r3, #0]
 8102b96:	4a67      	ldr	r2, [pc, #412]	; (8102d34 <HAL_DMA_Start_IT+0x4c0>)
 8102b98:	4293      	cmp	r3, r2
 8102b9a:	d013      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	4a65      	ldr	r2, [pc, #404]	; (8102d38 <HAL_DMA_Start_IT+0x4c4>)
 8102ba2:	4293      	cmp	r3, r2
 8102ba4:	d00e      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102ba6:	68fb      	ldr	r3, [r7, #12]
 8102ba8:	681b      	ldr	r3, [r3, #0]
 8102baa:	4a64      	ldr	r2, [pc, #400]	; (8102d3c <HAL_DMA_Start_IT+0x4c8>)
 8102bac:	4293      	cmp	r3, r2
 8102bae:	d009      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102bb0:	68fb      	ldr	r3, [r7, #12]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	4a62      	ldr	r2, [pc, #392]	; (8102d40 <HAL_DMA_Start_IT+0x4cc>)
 8102bb6:	4293      	cmp	r3, r2
 8102bb8:	d004      	beq.n	8102bc4 <HAL_DMA_Start_IT+0x350>
 8102bba:	68fb      	ldr	r3, [r7, #12]
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	4a61      	ldr	r2, [pc, #388]	; (8102d44 <HAL_DMA_Start_IT+0x4d0>)
 8102bc0:	4293      	cmp	r3, r2
 8102bc2:	d101      	bne.n	8102bc8 <HAL_DMA_Start_IT+0x354>
 8102bc4:	2301      	movs	r3, #1
 8102bc6:	e000      	b.n	8102bca <HAL_DMA_Start_IT+0x356>
 8102bc8:	2300      	movs	r3, #0
 8102bca:	2b00      	cmp	r3, #0
 8102bcc:	d01a      	beq.n	8102c04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102bce:	68fb      	ldr	r3, [r7, #12]
 8102bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102bd8:	2b00      	cmp	r3, #0
 8102bda:	d007      	beq.n	8102bec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102bdc:	68fb      	ldr	r3, [r7, #12]
 8102bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102be0:	681a      	ldr	r2, [r3, #0]
 8102be2:	68fb      	ldr	r3, [r7, #12]
 8102be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102bea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bf0:	2b00      	cmp	r3, #0
 8102bf2:	d007      	beq.n	8102c04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102bf4:	68fb      	ldr	r3, [r7, #12]
 8102bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bf8:	681a      	ldr	r2, [r3, #0]
 8102bfa:	68fb      	ldr	r3, [r7, #12]
 8102bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102c02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102c04:	68fb      	ldr	r3, [r7, #12]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	4a37      	ldr	r2, [pc, #220]	; (8102ce8 <HAL_DMA_Start_IT+0x474>)
 8102c0a:	4293      	cmp	r3, r2
 8102c0c:	d04a      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c0e:	68fb      	ldr	r3, [r7, #12]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	4a36      	ldr	r2, [pc, #216]	; (8102cec <HAL_DMA_Start_IT+0x478>)
 8102c14:	4293      	cmp	r3, r2
 8102c16:	d045      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c18:	68fb      	ldr	r3, [r7, #12]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	4a34      	ldr	r2, [pc, #208]	; (8102cf0 <HAL_DMA_Start_IT+0x47c>)
 8102c1e:	4293      	cmp	r3, r2
 8102c20:	d040      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c22:	68fb      	ldr	r3, [r7, #12]
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	4a33      	ldr	r2, [pc, #204]	; (8102cf4 <HAL_DMA_Start_IT+0x480>)
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d03b      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c2c:	68fb      	ldr	r3, [r7, #12]
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	4a31      	ldr	r2, [pc, #196]	; (8102cf8 <HAL_DMA_Start_IT+0x484>)
 8102c32:	4293      	cmp	r3, r2
 8102c34:	d036      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c36:	68fb      	ldr	r3, [r7, #12]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	4a30      	ldr	r2, [pc, #192]	; (8102cfc <HAL_DMA_Start_IT+0x488>)
 8102c3c:	4293      	cmp	r3, r2
 8102c3e:	d031      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c40:	68fb      	ldr	r3, [r7, #12]
 8102c42:	681b      	ldr	r3, [r3, #0]
 8102c44:	4a2e      	ldr	r2, [pc, #184]	; (8102d00 <HAL_DMA_Start_IT+0x48c>)
 8102c46:	4293      	cmp	r3, r2
 8102c48:	d02c      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c4a:	68fb      	ldr	r3, [r7, #12]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4a2d      	ldr	r2, [pc, #180]	; (8102d04 <HAL_DMA_Start_IT+0x490>)
 8102c50:	4293      	cmp	r3, r2
 8102c52:	d027      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	4a2b      	ldr	r2, [pc, #172]	; (8102d08 <HAL_DMA_Start_IT+0x494>)
 8102c5a:	4293      	cmp	r3, r2
 8102c5c:	d022      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c5e:	68fb      	ldr	r3, [r7, #12]
 8102c60:	681b      	ldr	r3, [r3, #0]
 8102c62:	4a2a      	ldr	r2, [pc, #168]	; (8102d0c <HAL_DMA_Start_IT+0x498>)
 8102c64:	4293      	cmp	r3, r2
 8102c66:	d01d      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c68:	68fb      	ldr	r3, [r7, #12]
 8102c6a:	681b      	ldr	r3, [r3, #0]
 8102c6c:	4a28      	ldr	r2, [pc, #160]	; (8102d10 <HAL_DMA_Start_IT+0x49c>)
 8102c6e:	4293      	cmp	r3, r2
 8102c70:	d018      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c72:	68fb      	ldr	r3, [r7, #12]
 8102c74:	681b      	ldr	r3, [r3, #0]
 8102c76:	4a27      	ldr	r2, [pc, #156]	; (8102d14 <HAL_DMA_Start_IT+0x4a0>)
 8102c78:	4293      	cmp	r3, r2
 8102c7a:	d013      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c7c:	68fb      	ldr	r3, [r7, #12]
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	4a25      	ldr	r2, [pc, #148]	; (8102d18 <HAL_DMA_Start_IT+0x4a4>)
 8102c82:	4293      	cmp	r3, r2
 8102c84:	d00e      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	4a24      	ldr	r2, [pc, #144]	; (8102d1c <HAL_DMA_Start_IT+0x4a8>)
 8102c8c:	4293      	cmp	r3, r2
 8102c8e:	d009      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c90:	68fb      	ldr	r3, [r7, #12]
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	4a22      	ldr	r2, [pc, #136]	; (8102d20 <HAL_DMA_Start_IT+0x4ac>)
 8102c96:	4293      	cmp	r3, r2
 8102c98:	d004      	beq.n	8102ca4 <HAL_DMA_Start_IT+0x430>
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	4a21      	ldr	r2, [pc, #132]	; (8102d24 <HAL_DMA_Start_IT+0x4b0>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d108      	bne.n	8102cb6 <HAL_DMA_Start_IT+0x442>
 8102ca4:	68fb      	ldr	r3, [r7, #12]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	681a      	ldr	r2, [r3, #0]
 8102caa:	68fb      	ldr	r3, [r7, #12]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	f042 0201 	orr.w	r2, r2, #1
 8102cb2:	601a      	str	r2, [r3, #0]
 8102cb4:	e012      	b.n	8102cdc <HAL_DMA_Start_IT+0x468>
 8102cb6:	68fb      	ldr	r3, [r7, #12]
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	681a      	ldr	r2, [r3, #0]
 8102cbc:	68fb      	ldr	r3, [r7, #12]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	f042 0201 	orr.w	r2, r2, #1
 8102cc4:	601a      	str	r2, [r3, #0]
 8102cc6:	e009      	b.n	8102cdc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102cc8:	68fb      	ldr	r3, [r7, #12]
 8102cca:	2200      	movs	r2, #0
 8102ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102cd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102cd8:	2301      	movs	r3, #1
 8102cda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8102cde:	4618      	mov	r0, r3
 8102ce0:	3718      	adds	r7, #24
 8102ce2:	46bd      	mov	sp, r7
 8102ce4:	bd80      	pop	{r7, pc}
 8102ce6:	bf00      	nop
 8102ce8:	40020010 	.word	0x40020010
 8102cec:	40020028 	.word	0x40020028
 8102cf0:	40020040 	.word	0x40020040
 8102cf4:	40020058 	.word	0x40020058
 8102cf8:	40020070 	.word	0x40020070
 8102cfc:	40020088 	.word	0x40020088
 8102d00:	400200a0 	.word	0x400200a0
 8102d04:	400200b8 	.word	0x400200b8
 8102d08:	40020410 	.word	0x40020410
 8102d0c:	40020428 	.word	0x40020428
 8102d10:	40020440 	.word	0x40020440
 8102d14:	40020458 	.word	0x40020458
 8102d18:	40020470 	.word	0x40020470
 8102d1c:	40020488 	.word	0x40020488
 8102d20:	400204a0 	.word	0x400204a0
 8102d24:	400204b8 	.word	0x400204b8
 8102d28:	58025408 	.word	0x58025408
 8102d2c:	5802541c 	.word	0x5802541c
 8102d30:	58025430 	.word	0x58025430
 8102d34:	58025444 	.word	0x58025444
 8102d38:	58025458 	.word	0x58025458
 8102d3c:	5802546c 	.word	0x5802546c
 8102d40:	58025480 	.word	0x58025480
 8102d44:	58025494 	.word	0x58025494

08102d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8102d48:	b580      	push	{r7, lr}
 8102d4a:	b086      	sub	sp, #24
 8102d4c:	af00      	add	r7, sp, #0
 8102d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8102d50:	f7ff f866 	bl	8101e20 <HAL_GetTick>
 8102d54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	2b00      	cmp	r3, #0
 8102d5a:	d101      	bne.n	8102d60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8102d5c:	2301      	movs	r3, #1
 8102d5e:	e2dc      	b.n	810331a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102d66:	b2db      	uxtb	r3, r3
 8102d68:	2b02      	cmp	r3, #2
 8102d6a:	d008      	beq.n	8102d7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	2280      	movs	r2, #128	; 0x80
 8102d70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	2200      	movs	r2, #0
 8102d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8102d7a:	2301      	movs	r3, #1
 8102d7c:	e2cd      	b.n	810331a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4a76      	ldr	r2, [pc, #472]	; (8102f5c <HAL_DMA_Abort+0x214>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d04a      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	4a74      	ldr	r2, [pc, #464]	; (8102f60 <HAL_DMA_Abort+0x218>)
 8102d8e:	4293      	cmp	r3, r2
 8102d90:	d045      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	4a73      	ldr	r2, [pc, #460]	; (8102f64 <HAL_DMA_Abort+0x21c>)
 8102d98:	4293      	cmp	r3, r2
 8102d9a:	d040      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	4a71      	ldr	r2, [pc, #452]	; (8102f68 <HAL_DMA_Abort+0x220>)
 8102da2:	4293      	cmp	r3, r2
 8102da4:	d03b      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	4a70      	ldr	r2, [pc, #448]	; (8102f6c <HAL_DMA_Abort+0x224>)
 8102dac:	4293      	cmp	r3, r2
 8102dae:	d036      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	4a6e      	ldr	r2, [pc, #440]	; (8102f70 <HAL_DMA_Abort+0x228>)
 8102db6:	4293      	cmp	r3, r2
 8102db8:	d031      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	4a6d      	ldr	r2, [pc, #436]	; (8102f74 <HAL_DMA_Abort+0x22c>)
 8102dc0:	4293      	cmp	r3, r2
 8102dc2:	d02c      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	4a6b      	ldr	r2, [pc, #428]	; (8102f78 <HAL_DMA_Abort+0x230>)
 8102dca:	4293      	cmp	r3, r2
 8102dcc:	d027      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	4a6a      	ldr	r2, [pc, #424]	; (8102f7c <HAL_DMA_Abort+0x234>)
 8102dd4:	4293      	cmp	r3, r2
 8102dd6:	d022      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	4a68      	ldr	r2, [pc, #416]	; (8102f80 <HAL_DMA_Abort+0x238>)
 8102dde:	4293      	cmp	r3, r2
 8102de0:	d01d      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	681b      	ldr	r3, [r3, #0]
 8102de6:	4a67      	ldr	r2, [pc, #412]	; (8102f84 <HAL_DMA_Abort+0x23c>)
 8102de8:	4293      	cmp	r3, r2
 8102dea:	d018      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	4a65      	ldr	r2, [pc, #404]	; (8102f88 <HAL_DMA_Abort+0x240>)
 8102df2:	4293      	cmp	r3, r2
 8102df4:	d013      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	4a64      	ldr	r2, [pc, #400]	; (8102f8c <HAL_DMA_Abort+0x244>)
 8102dfc:	4293      	cmp	r3, r2
 8102dfe:	d00e      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	4a62      	ldr	r2, [pc, #392]	; (8102f90 <HAL_DMA_Abort+0x248>)
 8102e06:	4293      	cmp	r3, r2
 8102e08:	d009      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	4a61      	ldr	r2, [pc, #388]	; (8102f94 <HAL_DMA_Abort+0x24c>)
 8102e10:	4293      	cmp	r3, r2
 8102e12:	d004      	beq.n	8102e1e <HAL_DMA_Abort+0xd6>
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	4a5f      	ldr	r2, [pc, #380]	; (8102f98 <HAL_DMA_Abort+0x250>)
 8102e1a:	4293      	cmp	r3, r2
 8102e1c:	d101      	bne.n	8102e22 <HAL_DMA_Abort+0xda>
 8102e1e:	2301      	movs	r3, #1
 8102e20:	e000      	b.n	8102e24 <HAL_DMA_Abort+0xdc>
 8102e22:	2300      	movs	r3, #0
 8102e24:	2b00      	cmp	r3, #0
 8102e26:	d013      	beq.n	8102e50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	681a      	ldr	r2, [r3, #0]
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	f022 021e 	bic.w	r2, r2, #30
 8102e36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	681b      	ldr	r3, [r3, #0]
 8102e3c:	695a      	ldr	r2, [r3, #20]
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102e46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	617b      	str	r3, [r7, #20]
 8102e4e:	e00a      	b.n	8102e66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	681a      	ldr	r2, [r3, #0]
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f022 020e 	bic.w	r2, r2, #14
 8102e5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4a3c      	ldr	r2, [pc, #240]	; (8102f5c <HAL_DMA_Abort+0x214>)
 8102e6c:	4293      	cmp	r3, r2
 8102e6e:	d072      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a3a      	ldr	r2, [pc, #232]	; (8102f60 <HAL_DMA_Abort+0x218>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d06d      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a39      	ldr	r2, [pc, #228]	; (8102f64 <HAL_DMA_Abort+0x21c>)
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d068      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	4a37      	ldr	r2, [pc, #220]	; (8102f68 <HAL_DMA_Abort+0x220>)
 8102e8a:	4293      	cmp	r3, r2
 8102e8c:	d063      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	4a36      	ldr	r2, [pc, #216]	; (8102f6c <HAL_DMA_Abort+0x224>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d05e      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a34      	ldr	r2, [pc, #208]	; (8102f70 <HAL_DMA_Abort+0x228>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d059      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a33      	ldr	r2, [pc, #204]	; (8102f74 <HAL_DMA_Abort+0x22c>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d054      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a31      	ldr	r2, [pc, #196]	; (8102f78 <HAL_DMA_Abort+0x230>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d04f      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a30      	ldr	r2, [pc, #192]	; (8102f7c <HAL_DMA_Abort+0x234>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d04a      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a2e      	ldr	r2, [pc, #184]	; (8102f80 <HAL_DMA_Abort+0x238>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d045      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	681b      	ldr	r3, [r3, #0]
 8102ece:	4a2d      	ldr	r2, [pc, #180]	; (8102f84 <HAL_DMA_Abort+0x23c>)
 8102ed0:	4293      	cmp	r3, r2
 8102ed2:	d040      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	681b      	ldr	r3, [r3, #0]
 8102ed8:	4a2b      	ldr	r2, [pc, #172]	; (8102f88 <HAL_DMA_Abort+0x240>)
 8102eda:	4293      	cmp	r3, r2
 8102edc:	d03b      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	681b      	ldr	r3, [r3, #0]
 8102ee2:	4a2a      	ldr	r2, [pc, #168]	; (8102f8c <HAL_DMA_Abort+0x244>)
 8102ee4:	4293      	cmp	r3, r2
 8102ee6:	d036      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	4a28      	ldr	r2, [pc, #160]	; (8102f90 <HAL_DMA_Abort+0x248>)
 8102eee:	4293      	cmp	r3, r2
 8102ef0:	d031      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	4a27      	ldr	r2, [pc, #156]	; (8102f94 <HAL_DMA_Abort+0x24c>)
 8102ef8:	4293      	cmp	r3, r2
 8102efa:	d02c      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	681b      	ldr	r3, [r3, #0]
 8102f00:	4a25      	ldr	r2, [pc, #148]	; (8102f98 <HAL_DMA_Abort+0x250>)
 8102f02:	4293      	cmp	r3, r2
 8102f04:	d027      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a24      	ldr	r2, [pc, #144]	; (8102f9c <HAL_DMA_Abort+0x254>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d022      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4a22      	ldr	r2, [pc, #136]	; (8102fa0 <HAL_DMA_Abort+0x258>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d01d      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	681b      	ldr	r3, [r3, #0]
 8102f1e:	4a21      	ldr	r2, [pc, #132]	; (8102fa4 <HAL_DMA_Abort+0x25c>)
 8102f20:	4293      	cmp	r3, r2
 8102f22:	d018      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a1f      	ldr	r2, [pc, #124]	; (8102fa8 <HAL_DMA_Abort+0x260>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d013      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a1e      	ldr	r2, [pc, #120]	; (8102fac <HAL_DMA_Abort+0x264>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d00e      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	4a1c      	ldr	r2, [pc, #112]	; (8102fb0 <HAL_DMA_Abort+0x268>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d009      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a1b      	ldr	r2, [pc, #108]	; (8102fb4 <HAL_DMA_Abort+0x26c>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d004      	beq.n	8102f56 <HAL_DMA_Abort+0x20e>
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a19      	ldr	r2, [pc, #100]	; (8102fb8 <HAL_DMA_Abort+0x270>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d132      	bne.n	8102fbc <HAL_DMA_Abort+0x274>
 8102f56:	2301      	movs	r3, #1
 8102f58:	e031      	b.n	8102fbe <HAL_DMA_Abort+0x276>
 8102f5a:	bf00      	nop
 8102f5c:	40020010 	.word	0x40020010
 8102f60:	40020028 	.word	0x40020028
 8102f64:	40020040 	.word	0x40020040
 8102f68:	40020058 	.word	0x40020058
 8102f6c:	40020070 	.word	0x40020070
 8102f70:	40020088 	.word	0x40020088
 8102f74:	400200a0 	.word	0x400200a0
 8102f78:	400200b8 	.word	0x400200b8
 8102f7c:	40020410 	.word	0x40020410
 8102f80:	40020428 	.word	0x40020428
 8102f84:	40020440 	.word	0x40020440
 8102f88:	40020458 	.word	0x40020458
 8102f8c:	40020470 	.word	0x40020470
 8102f90:	40020488 	.word	0x40020488
 8102f94:	400204a0 	.word	0x400204a0
 8102f98:	400204b8 	.word	0x400204b8
 8102f9c:	58025408 	.word	0x58025408
 8102fa0:	5802541c 	.word	0x5802541c
 8102fa4:	58025430 	.word	0x58025430
 8102fa8:	58025444 	.word	0x58025444
 8102fac:	58025458 	.word	0x58025458
 8102fb0:	5802546c 	.word	0x5802546c
 8102fb4:	58025480 	.word	0x58025480
 8102fb8:	58025494 	.word	0x58025494
 8102fbc:	2300      	movs	r3, #0
 8102fbe:	2b00      	cmp	r3, #0
 8102fc0:	d007      	beq.n	8102fd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102fc6:	681a      	ldr	r2, [r3, #0]
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	681b      	ldr	r3, [r3, #0]
 8102fd6:	4a6d      	ldr	r2, [pc, #436]	; (810318c <HAL_DMA_Abort+0x444>)
 8102fd8:	4293      	cmp	r3, r2
 8102fda:	d04a      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	4a6b      	ldr	r2, [pc, #428]	; (8103190 <HAL_DMA_Abort+0x448>)
 8102fe2:	4293      	cmp	r3, r2
 8102fe4:	d045      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	681b      	ldr	r3, [r3, #0]
 8102fea:	4a6a      	ldr	r2, [pc, #424]	; (8103194 <HAL_DMA_Abort+0x44c>)
 8102fec:	4293      	cmp	r3, r2
 8102fee:	d040      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	681b      	ldr	r3, [r3, #0]
 8102ff4:	4a68      	ldr	r2, [pc, #416]	; (8103198 <HAL_DMA_Abort+0x450>)
 8102ff6:	4293      	cmp	r3, r2
 8102ff8:	d03b      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8102ffa:	687b      	ldr	r3, [r7, #4]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	4a67      	ldr	r2, [pc, #412]	; (810319c <HAL_DMA_Abort+0x454>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d036      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	4a65      	ldr	r2, [pc, #404]	; (81031a0 <HAL_DMA_Abort+0x458>)
 810300a:	4293      	cmp	r3, r2
 810300c:	d031      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	4a64      	ldr	r2, [pc, #400]	; (81031a4 <HAL_DMA_Abort+0x45c>)
 8103014:	4293      	cmp	r3, r2
 8103016:	d02c      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	681b      	ldr	r3, [r3, #0]
 810301c:	4a62      	ldr	r2, [pc, #392]	; (81031a8 <HAL_DMA_Abort+0x460>)
 810301e:	4293      	cmp	r3, r2
 8103020:	d027      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	4a61      	ldr	r2, [pc, #388]	; (81031ac <HAL_DMA_Abort+0x464>)
 8103028:	4293      	cmp	r3, r2
 810302a:	d022      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	4a5f      	ldr	r2, [pc, #380]	; (81031b0 <HAL_DMA_Abort+0x468>)
 8103032:	4293      	cmp	r3, r2
 8103034:	d01d      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103036:	687b      	ldr	r3, [r7, #4]
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a5e      	ldr	r2, [pc, #376]	; (81031b4 <HAL_DMA_Abort+0x46c>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d018      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	681b      	ldr	r3, [r3, #0]
 8103044:	4a5c      	ldr	r2, [pc, #368]	; (81031b8 <HAL_DMA_Abort+0x470>)
 8103046:	4293      	cmp	r3, r2
 8103048:	d013      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	4a5b      	ldr	r2, [pc, #364]	; (81031bc <HAL_DMA_Abort+0x474>)
 8103050:	4293      	cmp	r3, r2
 8103052:	d00e      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	4a59      	ldr	r2, [pc, #356]	; (81031c0 <HAL_DMA_Abort+0x478>)
 810305a:	4293      	cmp	r3, r2
 810305c:	d009      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	4a58      	ldr	r2, [pc, #352]	; (81031c4 <HAL_DMA_Abort+0x47c>)
 8103064:	4293      	cmp	r3, r2
 8103066:	d004      	beq.n	8103072 <HAL_DMA_Abort+0x32a>
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	4a56      	ldr	r2, [pc, #344]	; (81031c8 <HAL_DMA_Abort+0x480>)
 810306e:	4293      	cmp	r3, r2
 8103070:	d108      	bne.n	8103084 <HAL_DMA_Abort+0x33c>
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	681a      	ldr	r2, [r3, #0]
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	f022 0201 	bic.w	r2, r2, #1
 8103080:	601a      	str	r2, [r3, #0]
 8103082:	e007      	b.n	8103094 <HAL_DMA_Abort+0x34c>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	681a      	ldr	r2, [r3, #0]
 810308a:	687b      	ldr	r3, [r7, #4]
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	f022 0201 	bic.w	r2, r2, #1
 8103092:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103094:	e013      	b.n	81030be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103096:	f7fe fec3 	bl	8101e20 <HAL_GetTick>
 810309a:	4602      	mov	r2, r0
 810309c:	693b      	ldr	r3, [r7, #16]
 810309e:	1ad3      	subs	r3, r2, r3
 81030a0:	2b05      	cmp	r3, #5
 81030a2:	d90c      	bls.n	81030be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	2220      	movs	r2, #32
 81030a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	2200      	movs	r2, #0
 81030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	2203      	movs	r2, #3
 81030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81030ba:	2301      	movs	r3, #1
 81030bc:	e12d      	b.n	810331a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81030be:	697b      	ldr	r3, [r7, #20]
 81030c0:	681b      	ldr	r3, [r3, #0]
 81030c2:	f003 0301 	and.w	r3, r3, #1
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	d1e5      	bne.n	8103096 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	4a2f      	ldr	r2, [pc, #188]	; (810318c <HAL_DMA_Abort+0x444>)
 81030d0:	4293      	cmp	r3, r2
 81030d2:	d04a      	beq.n	810316a <HAL_DMA_Abort+0x422>
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	4a2d      	ldr	r2, [pc, #180]	; (8103190 <HAL_DMA_Abort+0x448>)
 81030da:	4293      	cmp	r3, r2
 81030dc:	d045      	beq.n	810316a <HAL_DMA_Abort+0x422>
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	681b      	ldr	r3, [r3, #0]
 81030e2:	4a2c      	ldr	r2, [pc, #176]	; (8103194 <HAL_DMA_Abort+0x44c>)
 81030e4:	4293      	cmp	r3, r2
 81030e6:	d040      	beq.n	810316a <HAL_DMA_Abort+0x422>
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	4a2a      	ldr	r2, [pc, #168]	; (8103198 <HAL_DMA_Abort+0x450>)
 81030ee:	4293      	cmp	r3, r2
 81030f0:	d03b      	beq.n	810316a <HAL_DMA_Abort+0x422>
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	4a29      	ldr	r2, [pc, #164]	; (810319c <HAL_DMA_Abort+0x454>)
 81030f8:	4293      	cmp	r3, r2
 81030fa:	d036      	beq.n	810316a <HAL_DMA_Abort+0x422>
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	4a27      	ldr	r2, [pc, #156]	; (81031a0 <HAL_DMA_Abort+0x458>)
 8103102:	4293      	cmp	r3, r2
 8103104:	d031      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	4a26      	ldr	r2, [pc, #152]	; (81031a4 <HAL_DMA_Abort+0x45c>)
 810310c:	4293      	cmp	r3, r2
 810310e:	d02c      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	4a24      	ldr	r2, [pc, #144]	; (81031a8 <HAL_DMA_Abort+0x460>)
 8103116:	4293      	cmp	r3, r2
 8103118:	d027      	beq.n	810316a <HAL_DMA_Abort+0x422>
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	4a23      	ldr	r2, [pc, #140]	; (81031ac <HAL_DMA_Abort+0x464>)
 8103120:	4293      	cmp	r3, r2
 8103122:	d022      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	4a21      	ldr	r2, [pc, #132]	; (81031b0 <HAL_DMA_Abort+0x468>)
 810312a:	4293      	cmp	r3, r2
 810312c:	d01d      	beq.n	810316a <HAL_DMA_Abort+0x422>
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	4a20      	ldr	r2, [pc, #128]	; (81031b4 <HAL_DMA_Abort+0x46c>)
 8103134:	4293      	cmp	r3, r2
 8103136:	d018      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4a1e      	ldr	r2, [pc, #120]	; (81031b8 <HAL_DMA_Abort+0x470>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d013      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	4a1d      	ldr	r2, [pc, #116]	; (81031bc <HAL_DMA_Abort+0x474>)
 8103148:	4293      	cmp	r3, r2
 810314a:	d00e      	beq.n	810316a <HAL_DMA_Abort+0x422>
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a1b      	ldr	r2, [pc, #108]	; (81031c0 <HAL_DMA_Abort+0x478>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d009      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a1a      	ldr	r2, [pc, #104]	; (81031c4 <HAL_DMA_Abort+0x47c>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d004      	beq.n	810316a <HAL_DMA_Abort+0x422>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a18      	ldr	r2, [pc, #96]	; (81031c8 <HAL_DMA_Abort+0x480>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d101      	bne.n	810316e <HAL_DMA_Abort+0x426>
 810316a:	2301      	movs	r3, #1
 810316c:	e000      	b.n	8103170 <HAL_DMA_Abort+0x428>
 810316e:	2300      	movs	r3, #0
 8103170:	2b00      	cmp	r3, #0
 8103172:	d02b      	beq.n	81031cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103178:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810317e:	f003 031f 	and.w	r3, r3, #31
 8103182:	223f      	movs	r2, #63	; 0x3f
 8103184:	409a      	lsls	r2, r3
 8103186:	68bb      	ldr	r3, [r7, #8]
 8103188:	609a      	str	r2, [r3, #8]
 810318a:	e02a      	b.n	81031e2 <HAL_DMA_Abort+0x49a>
 810318c:	40020010 	.word	0x40020010
 8103190:	40020028 	.word	0x40020028
 8103194:	40020040 	.word	0x40020040
 8103198:	40020058 	.word	0x40020058
 810319c:	40020070 	.word	0x40020070
 81031a0:	40020088 	.word	0x40020088
 81031a4:	400200a0 	.word	0x400200a0
 81031a8:	400200b8 	.word	0x400200b8
 81031ac:	40020410 	.word	0x40020410
 81031b0:	40020428 	.word	0x40020428
 81031b4:	40020440 	.word	0x40020440
 81031b8:	40020458 	.word	0x40020458
 81031bc:	40020470 	.word	0x40020470
 81031c0:	40020488 	.word	0x40020488
 81031c4:	400204a0 	.word	0x400204a0
 81031c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031d6:	f003 031f 	and.w	r3, r3, #31
 81031da:	2201      	movs	r2, #1
 81031dc:	409a      	lsls	r2, r3
 81031de:	68fb      	ldr	r3, [r7, #12]
 81031e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	4a4f      	ldr	r2, [pc, #316]	; (8103324 <HAL_DMA_Abort+0x5dc>)
 81031e8:	4293      	cmp	r3, r2
 81031ea:	d072      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	4a4d      	ldr	r2, [pc, #308]	; (8103328 <HAL_DMA_Abort+0x5e0>)
 81031f2:	4293      	cmp	r3, r2
 81031f4:	d06d      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	4a4c      	ldr	r2, [pc, #304]	; (810332c <HAL_DMA_Abort+0x5e4>)
 81031fc:	4293      	cmp	r3, r2
 81031fe:	d068      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	681b      	ldr	r3, [r3, #0]
 8103204:	4a4a      	ldr	r2, [pc, #296]	; (8103330 <HAL_DMA_Abort+0x5e8>)
 8103206:	4293      	cmp	r3, r2
 8103208:	d063      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	4a49      	ldr	r2, [pc, #292]	; (8103334 <HAL_DMA_Abort+0x5ec>)
 8103210:	4293      	cmp	r3, r2
 8103212:	d05e      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	4a47      	ldr	r2, [pc, #284]	; (8103338 <HAL_DMA_Abort+0x5f0>)
 810321a:	4293      	cmp	r3, r2
 810321c:	d059      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	4a46      	ldr	r2, [pc, #280]	; (810333c <HAL_DMA_Abort+0x5f4>)
 8103224:	4293      	cmp	r3, r2
 8103226:	d054      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	4a44      	ldr	r2, [pc, #272]	; (8103340 <HAL_DMA_Abort+0x5f8>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d04f      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	4a43      	ldr	r2, [pc, #268]	; (8103344 <HAL_DMA_Abort+0x5fc>)
 8103238:	4293      	cmp	r3, r2
 810323a:	d04a      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4a41      	ldr	r2, [pc, #260]	; (8103348 <HAL_DMA_Abort+0x600>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d045      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	4a40      	ldr	r2, [pc, #256]	; (810334c <HAL_DMA_Abort+0x604>)
 810324c:	4293      	cmp	r3, r2
 810324e:	d040      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	4a3e      	ldr	r2, [pc, #248]	; (8103350 <HAL_DMA_Abort+0x608>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d03b      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	4a3d      	ldr	r2, [pc, #244]	; (8103354 <HAL_DMA_Abort+0x60c>)
 8103260:	4293      	cmp	r3, r2
 8103262:	d036      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4a3b      	ldr	r2, [pc, #236]	; (8103358 <HAL_DMA_Abort+0x610>)
 810326a:	4293      	cmp	r3, r2
 810326c:	d031      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 810326e:	687b      	ldr	r3, [r7, #4]
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	4a3a      	ldr	r2, [pc, #232]	; (810335c <HAL_DMA_Abort+0x614>)
 8103274:	4293      	cmp	r3, r2
 8103276:	d02c      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	681b      	ldr	r3, [r3, #0]
 810327c:	4a38      	ldr	r2, [pc, #224]	; (8103360 <HAL_DMA_Abort+0x618>)
 810327e:	4293      	cmp	r3, r2
 8103280:	d027      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4a37      	ldr	r2, [pc, #220]	; (8103364 <HAL_DMA_Abort+0x61c>)
 8103288:	4293      	cmp	r3, r2
 810328a:	d022      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	4a35      	ldr	r2, [pc, #212]	; (8103368 <HAL_DMA_Abort+0x620>)
 8103292:	4293      	cmp	r3, r2
 8103294:	d01d      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	4a34      	ldr	r2, [pc, #208]	; (810336c <HAL_DMA_Abort+0x624>)
 810329c:	4293      	cmp	r3, r2
 810329e:	d018      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	4a32      	ldr	r2, [pc, #200]	; (8103370 <HAL_DMA_Abort+0x628>)
 81032a6:	4293      	cmp	r3, r2
 81032a8:	d013      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	4a31      	ldr	r2, [pc, #196]	; (8103374 <HAL_DMA_Abort+0x62c>)
 81032b0:	4293      	cmp	r3, r2
 81032b2:	d00e      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	4a2f      	ldr	r2, [pc, #188]	; (8103378 <HAL_DMA_Abort+0x630>)
 81032ba:	4293      	cmp	r3, r2
 81032bc:	d009      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	4a2e      	ldr	r2, [pc, #184]	; (810337c <HAL_DMA_Abort+0x634>)
 81032c4:	4293      	cmp	r3, r2
 81032c6:	d004      	beq.n	81032d2 <HAL_DMA_Abort+0x58a>
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	4a2c      	ldr	r2, [pc, #176]	; (8103380 <HAL_DMA_Abort+0x638>)
 81032ce:	4293      	cmp	r3, r2
 81032d0:	d101      	bne.n	81032d6 <HAL_DMA_Abort+0x58e>
 81032d2:	2301      	movs	r3, #1
 81032d4:	e000      	b.n	81032d8 <HAL_DMA_Abort+0x590>
 81032d6:	2300      	movs	r3, #0
 81032d8:	2b00      	cmp	r3, #0
 81032da:	d015      	beq.n	8103308 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81032e0:	687a      	ldr	r2, [r7, #4]
 81032e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81032e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81032ea:	2b00      	cmp	r3, #0
 81032ec:	d00c      	beq.n	8103308 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81032f2:	681a      	ldr	r2, [r3, #0]
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81032f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81032fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103302:	687a      	ldr	r2, [r7, #4]
 8103304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103306:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	2200      	movs	r2, #0
 810330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8103310:	687b      	ldr	r3, [r7, #4]
 8103312:	2201      	movs	r2, #1
 8103314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8103318:	2300      	movs	r3, #0
}
 810331a:	4618      	mov	r0, r3
 810331c:	3718      	adds	r7, #24
 810331e:	46bd      	mov	sp, r7
 8103320:	bd80      	pop	{r7, pc}
 8103322:	bf00      	nop
 8103324:	40020010 	.word	0x40020010
 8103328:	40020028 	.word	0x40020028
 810332c:	40020040 	.word	0x40020040
 8103330:	40020058 	.word	0x40020058
 8103334:	40020070 	.word	0x40020070
 8103338:	40020088 	.word	0x40020088
 810333c:	400200a0 	.word	0x400200a0
 8103340:	400200b8 	.word	0x400200b8
 8103344:	40020410 	.word	0x40020410
 8103348:	40020428 	.word	0x40020428
 810334c:	40020440 	.word	0x40020440
 8103350:	40020458 	.word	0x40020458
 8103354:	40020470 	.word	0x40020470
 8103358:	40020488 	.word	0x40020488
 810335c:	400204a0 	.word	0x400204a0
 8103360:	400204b8 	.word	0x400204b8
 8103364:	58025408 	.word	0x58025408
 8103368:	5802541c 	.word	0x5802541c
 810336c:	58025430 	.word	0x58025430
 8103370:	58025444 	.word	0x58025444
 8103374:	58025458 	.word	0x58025458
 8103378:	5802546c 	.word	0x5802546c
 810337c:	58025480 	.word	0x58025480
 8103380:	58025494 	.word	0x58025494

08103384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103384:	b580      	push	{r7, lr}
 8103386:	b084      	sub	sp, #16
 8103388:	af00      	add	r7, sp, #0
 810338a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	2b00      	cmp	r3, #0
 8103390:	d101      	bne.n	8103396 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103392:	2301      	movs	r3, #1
 8103394:	e205      	b.n	81037a2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810339c:	b2db      	uxtb	r3, r3
 810339e:	2b02      	cmp	r3, #2
 81033a0:	d004      	beq.n	81033ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	2280      	movs	r2, #128	; 0x80
 81033a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81033a8:	2301      	movs	r3, #1
 81033aa:	e1fa      	b.n	81037a2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	4a8c      	ldr	r2, [pc, #560]	; (81035e4 <HAL_DMA_Abort_IT+0x260>)
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d04a      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	4a8b      	ldr	r2, [pc, #556]	; (81035e8 <HAL_DMA_Abort_IT+0x264>)
 81033bc:	4293      	cmp	r3, r2
 81033be:	d045      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a89      	ldr	r2, [pc, #548]	; (81035ec <HAL_DMA_Abort_IT+0x268>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d040      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4a88      	ldr	r2, [pc, #544]	; (81035f0 <HAL_DMA_Abort_IT+0x26c>)
 81033d0:	4293      	cmp	r3, r2
 81033d2:	d03b      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	4a86      	ldr	r2, [pc, #536]	; (81035f4 <HAL_DMA_Abort_IT+0x270>)
 81033da:	4293      	cmp	r3, r2
 81033dc:	d036      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	4a85      	ldr	r2, [pc, #532]	; (81035f8 <HAL_DMA_Abort_IT+0x274>)
 81033e4:	4293      	cmp	r3, r2
 81033e6:	d031      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	4a83      	ldr	r2, [pc, #524]	; (81035fc <HAL_DMA_Abort_IT+0x278>)
 81033ee:	4293      	cmp	r3, r2
 81033f0:	d02c      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	4a82      	ldr	r2, [pc, #520]	; (8103600 <HAL_DMA_Abort_IT+0x27c>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d027      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	4a80      	ldr	r2, [pc, #512]	; (8103604 <HAL_DMA_Abort_IT+0x280>)
 8103402:	4293      	cmp	r3, r2
 8103404:	d022      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	4a7f      	ldr	r2, [pc, #508]	; (8103608 <HAL_DMA_Abort_IT+0x284>)
 810340c:	4293      	cmp	r3, r2
 810340e:	d01d      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	4a7d      	ldr	r2, [pc, #500]	; (810360c <HAL_DMA_Abort_IT+0x288>)
 8103416:	4293      	cmp	r3, r2
 8103418:	d018      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	681b      	ldr	r3, [r3, #0]
 810341e:	4a7c      	ldr	r2, [pc, #496]	; (8103610 <HAL_DMA_Abort_IT+0x28c>)
 8103420:	4293      	cmp	r3, r2
 8103422:	d013      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	4a7a      	ldr	r2, [pc, #488]	; (8103614 <HAL_DMA_Abort_IT+0x290>)
 810342a:	4293      	cmp	r3, r2
 810342c:	d00e      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	681b      	ldr	r3, [r3, #0]
 8103432:	4a79      	ldr	r2, [pc, #484]	; (8103618 <HAL_DMA_Abort_IT+0x294>)
 8103434:	4293      	cmp	r3, r2
 8103436:	d009      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	4a77      	ldr	r2, [pc, #476]	; (810361c <HAL_DMA_Abort_IT+0x298>)
 810343e:	4293      	cmp	r3, r2
 8103440:	d004      	beq.n	810344c <HAL_DMA_Abort_IT+0xc8>
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	4a76      	ldr	r2, [pc, #472]	; (8103620 <HAL_DMA_Abort_IT+0x29c>)
 8103448:	4293      	cmp	r3, r2
 810344a:	d101      	bne.n	8103450 <HAL_DMA_Abort_IT+0xcc>
 810344c:	2301      	movs	r3, #1
 810344e:	e000      	b.n	8103452 <HAL_DMA_Abort_IT+0xce>
 8103450:	2300      	movs	r3, #0
 8103452:	2b00      	cmp	r3, #0
 8103454:	d065      	beq.n	8103522 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	2204      	movs	r2, #4
 810345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	4a60      	ldr	r2, [pc, #384]	; (81035e4 <HAL_DMA_Abort_IT+0x260>)
 8103464:	4293      	cmp	r3, r2
 8103466:	d04a      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	4a5e      	ldr	r2, [pc, #376]	; (81035e8 <HAL_DMA_Abort_IT+0x264>)
 810346e:	4293      	cmp	r3, r2
 8103470:	d045      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	4a5d      	ldr	r2, [pc, #372]	; (81035ec <HAL_DMA_Abort_IT+0x268>)
 8103478:	4293      	cmp	r3, r2
 810347a:	d040      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	4a5b      	ldr	r2, [pc, #364]	; (81035f0 <HAL_DMA_Abort_IT+0x26c>)
 8103482:	4293      	cmp	r3, r2
 8103484:	d03b      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4a5a      	ldr	r2, [pc, #360]	; (81035f4 <HAL_DMA_Abort_IT+0x270>)
 810348c:	4293      	cmp	r3, r2
 810348e:	d036      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	4a58      	ldr	r2, [pc, #352]	; (81035f8 <HAL_DMA_Abort_IT+0x274>)
 8103496:	4293      	cmp	r3, r2
 8103498:	d031      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	4a57      	ldr	r2, [pc, #348]	; (81035fc <HAL_DMA_Abort_IT+0x278>)
 81034a0:	4293      	cmp	r3, r2
 81034a2:	d02c      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	681b      	ldr	r3, [r3, #0]
 81034a8:	4a55      	ldr	r2, [pc, #340]	; (8103600 <HAL_DMA_Abort_IT+0x27c>)
 81034aa:	4293      	cmp	r3, r2
 81034ac:	d027      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a54      	ldr	r2, [pc, #336]	; (8103604 <HAL_DMA_Abort_IT+0x280>)
 81034b4:	4293      	cmp	r3, r2
 81034b6:	d022      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	4a52      	ldr	r2, [pc, #328]	; (8103608 <HAL_DMA_Abort_IT+0x284>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d01d      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	4a51      	ldr	r2, [pc, #324]	; (810360c <HAL_DMA_Abort_IT+0x288>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d018      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	4a4f      	ldr	r2, [pc, #316]	; (8103610 <HAL_DMA_Abort_IT+0x28c>)
 81034d2:	4293      	cmp	r3, r2
 81034d4:	d013      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	4a4e      	ldr	r2, [pc, #312]	; (8103614 <HAL_DMA_Abort_IT+0x290>)
 81034dc:	4293      	cmp	r3, r2
 81034de:	d00e      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	4a4c      	ldr	r2, [pc, #304]	; (8103618 <HAL_DMA_Abort_IT+0x294>)
 81034e6:	4293      	cmp	r3, r2
 81034e8:	d009      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	4a4b      	ldr	r2, [pc, #300]	; (810361c <HAL_DMA_Abort_IT+0x298>)
 81034f0:	4293      	cmp	r3, r2
 81034f2:	d004      	beq.n	81034fe <HAL_DMA_Abort_IT+0x17a>
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a49      	ldr	r2, [pc, #292]	; (8103620 <HAL_DMA_Abort_IT+0x29c>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d108      	bne.n	8103510 <HAL_DMA_Abort_IT+0x18c>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	681a      	ldr	r2, [r3, #0]
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	681b      	ldr	r3, [r3, #0]
 8103508:	f022 0201 	bic.w	r2, r2, #1
 810350c:	601a      	str	r2, [r3, #0]
 810350e:	e147      	b.n	81037a0 <HAL_DMA_Abort_IT+0x41c>
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	681a      	ldr	r2, [r3, #0]
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	681b      	ldr	r3, [r3, #0]
 810351a:	f022 0201 	bic.w	r2, r2, #1
 810351e:	601a      	str	r2, [r3, #0]
 8103520:	e13e      	b.n	81037a0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	681a      	ldr	r2, [r3, #0]
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	f022 020e 	bic.w	r2, r2, #14
 8103530:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	4a2b      	ldr	r2, [pc, #172]	; (81035e4 <HAL_DMA_Abort_IT+0x260>)
 8103538:	4293      	cmp	r3, r2
 810353a:	d04a      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	4a29      	ldr	r2, [pc, #164]	; (81035e8 <HAL_DMA_Abort_IT+0x264>)
 8103542:	4293      	cmp	r3, r2
 8103544:	d045      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	681b      	ldr	r3, [r3, #0]
 810354a:	4a28      	ldr	r2, [pc, #160]	; (81035ec <HAL_DMA_Abort_IT+0x268>)
 810354c:	4293      	cmp	r3, r2
 810354e:	d040      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	4a26      	ldr	r2, [pc, #152]	; (81035f0 <HAL_DMA_Abort_IT+0x26c>)
 8103556:	4293      	cmp	r3, r2
 8103558:	d03b      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	4a25      	ldr	r2, [pc, #148]	; (81035f4 <HAL_DMA_Abort_IT+0x270>)
 8103560:	4293      	cmp	r3, r2
 8103562:	d036      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	4a23      	ldr	r2, [pc, #140]	; (81035f8 <HAL_DMA_Abort_IT+0x274>)
 810356a:	4293      	cmp	r3, r2
 810356c:	d031      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	4a22      	ldr	r2, [pc, #136]	; (81035fc <HAL_DMA_Abort_IT+0x278>)
 8103574:	4293      	cmp	r3, r2
 8103576:	d02c      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	4a20      	ldr	r2, [pc, #128]	; (8103600 <HAL_DMA_Abort_IT+0x27c>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d027      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a1f      	ldr	r2, [pc, #124]	; (8103604 <HAL_DMA_Abort_IT+0x280>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d022      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	4a1d      	ldr	r2, [pc, #116]	; (8103608 <HAL_DMA_Abort_IT+0x284>)
 8103592:	4293      	cmp	r3, r2
 8103594:	d01d      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	4a1c      	ldr	r2, [pc, #112]	; (810360c <HAL_DMA_Abort_IT+0x288>)
 810359c:	4293      	cmp	r3, r2
 810359e:	d018      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	4a1a      	ldr	r2, [pc, #104]	; (8103610 <HAL_DMA_Abort_IT+0x28c>)
 81035a6:	4293      	cmp	r3, r2
 81035a8:	d013      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	681b      	ldr	r3, [r3, #0]
 81035ae:	4a19      	ldr	r2, [pc, #100]	; (8103614 <HAL_DMA_Abort_IT+0x290>)
 81035b0:	4293      	cmp	r3, r2
 81035b2:	d00e      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	4a17      	ldr	r2, [pc, #92]	; (8103618 <HAL_DMA_Abort_IT+0x294>)
 81035ba:	4293      	cmp	r3, r2
 81035bc:	d009      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 81035be:	687b      	ldr	r3, [r7, #4]
 81035c0:	681b      	ldr	r3, [r3, #0]
 81035c2:	4a16      	ldr	r2, [pc, #88]	; (810361c <HAL_DMA_Abort_IT+0x298>)
 81035c4:	4293      	cmp	r3, r2
 81035c6:	d004      	beq.n	81035d2 <HAL_DMA_Abort_IT+0x24e>
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	4a14      	ldr	r2, [pc, #80]	; (8103620 <HAL_DMA_Abort_IT+0x29c>)
 81035ce:	4293      	cmp	r3, r2
 81035d0:	d128      	bne.n	8103624 <HAL_DMA_Abort_IT+0x2a0>
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	681b      	ldr	r3, [r3, #0]
 81035d6:	681a      	ldr	r2, [r3, #0]
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	f022 0201 	bic.w	r2, r2, #1
 81035e0:	601a      	str	r2, [r3, #0]
 81035e2:	e027      	b.n	8103634 <HAL_DMA_Abort_IT+0x2b0>
 81035e4:	40020010 	.word	0x40020010
 81035e8:	40020028 	.word	0x40020028
 81035ec:	40020040 	.word	0x40020040
 81035f0:	40020058 	.word	0x40020058
 81035f4:	40020070 	.word	0x40020070
 81035f8:	40020088 	.word	0x40020088
 81035fc:	400200a0 	.word	0x400200a0
 8103600:	400200b8 	.word	0x400200b8
 8103604:	40020410 	.word	0x40020410
 8103608:	40020428 	.word	0x40020428
 810360c:	40020440 	.word	0x40020440
 8103610:	40020458 	.word	0x40020458
 8103614:	40020470 	.word	0x40020470
 8103618:	40020488 	.word	0x40020488
 810361c:	400204a0 	.word	0x400204a0
 8103620:	400204b8 	.word	0x400204b8
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	681a      	ldr	r2, [r3, #0]
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	f022 0201 	bic.w	r2, r2, #1
 8103632:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a5c      	ldr	r2, [pc, #368]	; (81037ac <HAL_DMA_Abort_IT+0x428>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d072      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a5b      	ldr	r2, [pc, #364]	; (81037b0 <HAL_DMA_Abort_IT+0x42c>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d06d      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a59      	ldr	r2, [pc, #356]	; (81037b4 <HAL_DMA_Abort_IT+0x430>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d068      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a58      	ldr	r2, [pc, #352]	; (81037b8 <HAL_DMA_Abort_IT+0x434>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d063      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a56      	ldr	r2, [pc, #344]	; (81037bc <HAL_DMA_Abort_IT+0x438>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d05e      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a55      	ldr	r2, [pc, #340]	; (81037c0 <HAL_DMA_Abort_IT+0x43c>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d059      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	4a53      	ldr	r2, [pc, #332]	; (81037c4 <HAL_DMA_Abort_IT+0x440>)
 8103676:	4293      	cmp	r3, r2
 8103678:	d054      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	4a52      	ldr	r2, [pc, #328]	; (81037c8 <HAL_DMA_Abort_IT+0x444>)
 8103680:	4293      	cmp	r3, r2
 8103682:	d04f      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	4a50      	ldr	r2, [pc, #320]	; (81037cc <HAL_DMA_Abort_IT+0x448>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d04a      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a4f      	ldr	r2, [pc, #316]	; (81037d0 <HAL_DMA_Abort_IT+0x44c>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d045      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a4d      	ldr	r2, [pc, #308]	; (81037d4 <HAL_DMA_Abort_IT+0x450>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d040      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a4c      	ldr	r2, [pc, #304]	; (81037d8 <HAL_DMA_Abort_IT+0x454>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d03b      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a4a      	ldr	r2, [pc, #296]	; (81037dc <HAL_DMA_Abort_IT+0x458>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d036      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a49      	ldr	r2, [pc, #292]	; (81037e0 <HAL_DMA_Abort_IT+0x45c>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d031      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a47      	ldr	r2, [pc, #284]	; (81037e4 <HAL_DMA_Abort_IT+0x460>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d02c      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a46      	ldr	r2, [pc, #280]	; (81037e8 <HAL_DMA_Abort_IT+0x464>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d027      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4a44      	ldr	r2, [pc, #272]	; (81037ec <HAL_DMA_Abort_IT+0x468>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d022      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	4a43      	ldr	r2, [pc, #268]	; (81037f0 <HAL_DMA_Abort_IT+0x46c>)
 81036e4:	4293      	cmp	r3, r2
 81036e6:	d01d      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	4a41      	ldr	r2, [pc, #260]	; (81037f4 <HAL_DMA_Abort_IT+0x470>)
 81036ee:	4293      	cmp	r3, r2
 81036f0:	d018      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a40      	ldr	r2, [pc, #256]	; (81037f8 <HAL_DMA_Abort_IT+0x474>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d013      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a3e      	ldr	r2, [pc, #248]	; (81037fc <HAL_DMA_Abort_IT+0x478>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d00e      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4a3d      	ldr	r2, [pc, #244]	; (8103800 <HAL_DMA_Abort_IT+0x47c>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d009      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	4a3b      	ldr	r2, [pc, #236]	; (8103804 <HAL_DMA_Abort_IT+0x480>)
 8103716:	4293      	cmp	r3, r2
 8103718:	d004      	beq.n	8103724 <HAL_DMA_Abort_IT+0x3a0>
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	4a3a      	ldr	r2, [pc, #232]	; (8103808 <HAL_DMA_Abort_IT+0x484>)
 8103720:	4293      	cmp	r3, r2
 8103722:	d101      	bne.n	8103728 <HAL_DMA_Abort_IT+0x3a4>
 8103724:	2301      	movs	r3, #1
 8103726:	e000      	b.n	810372a <HAL_DMA_Abort_IT+0x3a6>
 8103728:	2300      	movs	r3, #0
 810372a:	2b00      	cmp	r3, #0
 810372c:	d028      	beq.n	8103780 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103732:	681a      	ldr	r2, [r3, #0]
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810373c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103742:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103748:	f003 031f 	and.w	r3, r3, #31
 810374c:	2201      	movs	r2, #1
 810374e:	409a      	lsls	r2, r3
 8103750:	68fb      	ldr	r3, [r7, #12]
 8103752:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103758:	687a      	ldr	r2, [r7, #4]
 810375a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810375c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103762:	2b00      	cmp	r3, #0
 8103764:	d00c      	beq.n	8103780 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810376a:	681a      	ldr	r2, [r3, #0]
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103774:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810377a:	687a      	ldr	r2, [r7, #4]
 810377c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810377e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	2200      	movs	r2, #0
 8103784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	2201      	movs	r2, #1
 810378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103794:	2b00      	cmp	r3, #0
 8103796:	d003      	beq.n	81037a0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810379c:	6878      	ldr	r0, [r7, #4]
 810379e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81037a0:	2300      	movs	r3, #0
}
 81037a2:	4618      	mov	r0, r3
 81037a4:	3710      	adds	r7, #16
 81037a6:	46bd      	mov	sp, r7
 81037a8:	bd80      	pop	{r7, pc}
 81037aa:	bf00      	nop
 81037ac:	40020010 	.word	0x40020010
 81037b0:	40020028 	.word	0x40020028
 81037b4:	40020040 	.word	0x40020040
 81037b8:	40020058 	.word	0x40020058
 81037bc:	40020070 	.word	0x40020070
 81037c0:	40020088 	.word	0x40020088
 81037c4:	400200a0 	.word	0x400200a0
 81037c8:	400200b8 	.word	0x400200b8
 81037cc:	40020410 	.word	0x40020410
 81037d0:	40020428 	.word	0x40020428
 81037d4:	40020440 	.word	0x40020440
 81037d8:	40020458 	.word	0x40020458
 81037dc:	40020470 	.word	0x40020470
 81037e0:	40020488 	.word	0x40020488
 81037e4:	400204a0 	.word	0x400204a0
 81037e8:	400204b8 	.word	0x400204b8
 81037ec:	58025408 	.word	0x58025408
 81037f0:	5802541c 	.word	0x5802541c
 81037f4:	58025430 	.word	0x58025430
 81037f8:	58025444 	.word	0x58025444
 81037fc:	58025458 	.word	0x58025458
 8103800:	5802546c 	.word	0x5802546c
 8103804:	58025480 	.word	0x58025480
 8103808:	58025494 	.word	0x58025494

0810380c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 810380c:	b580      	push	{r7, lr}
 810380e:	b08a      	sub	sp, #40	; 0x28
 8103810:	af00      	add	r7, sp, #0
 8103812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103814:	2300      	movs	r3, #0
 8103816:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103818:	4b67      	ldr	r3, [pc, #412]	; (81039b8 <HAL_DMA_IRQHandler+0x1ac>)
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	4a67      	ldr	r2, [pc, #412]	; (81039bc <HAL_DMA_IRQHandler+0x1b0>)
 810381e:	fba2 2303 	umull	r2, r3, r2, r3
 8103822:	0a9b      	lsrs	r3, r3, #10
 8103824:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810382a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103830:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103832:	6a3b      	ldr	r3, [r7, #32]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103838:	69fb      	ldr	r3, [r7, #28]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	4a5f      	ldr	r2, [pc, #380]	; (81039c0 <HAL_DMA_IRQHandler+0x1b4>)
 8103844:	4293      	cmp	r3, r2
 8103846:	d04a      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	4a5d      	ldr	r2, [pc, #372]	; (81039c4 <HAL_DMA_IRQHandler+0x1b8>)
 810384e:	4293      	cmp	r3, r2
 8103850:	d045      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	4a5c      	ldr	r2, [pc, #368]	; (81039c8 <HAL_DMA_IRQHandler+0x1bc>)
 8103858:	4293      	cmp	r3, r2
 810385a:	d040      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	4a5a      	ldr	r2, [pc, #360]	; (81039cc <HAL_DMA_IRQHandler+0x1c0>)
 8103862:	4293      	cmp	r3, r2
 8103864:	d03b      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	4a59      	ldr	r2, [pc, #356]	; (81039d0 <HAL_DMA_IRQHandler+0x1c4>)
 810386c:	4293      	cmp	r3, r2
 810386e:	d036      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	4a57      	ldr	r2, [pc, #348]	; (81039d4 <HAL_DMA_IRQHandler+0x1c8>)
 8103876:	4293      	cmp	r3, r2
 8103878:	d031      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	4a56      	ldr	r2, [pc, #344]	; (81039d8 <HAL_DMA_IRQHandler+0x1cc>)
 8103880:	4293      	cmp	r3, r2
 8103882:	d02c      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	4a54      	ldr	r2, [pc, #336]	; (81039dc <HAL_DMA_IRQHandler+0x1d0>)
 810388a:	4293      	cmp	r3, r2
 810388c:	d027      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	4a53      	ldr	r2, [pc, #332]	; (81039e0 <HAL_DMA_IRQHandler+0x1d4>)
 8103894:	4293      	cmp	r3, r2
 8103896:	d022      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	4a51      	ldr	r2, [pc, #324]	; (81039e4 <HAL_DMA_IRQHandler+0x1d8>)
 810389e:	4293      	cmp	r3, r2
 81038a0:	d01d      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	4a50      	ldr	r2, [pc, #320]	; (81039e8 <HAL_DMA_IRQHandler+0x1dc>)
 81038a8:	4293      	cmp	r3, r2
 81038aa:	d018      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	4a4e      	ldr	r2, [pc, #312]	; (81039ec <HAL_DMA_IRQHandler+0x1e0>)
 81038b2:	4293      	cmp	r3, r2
 81038b4:	d013      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	4a4d      	ldr	r2, [pc, #308]	; (81039f0 <HAL_DMA_IRQHandler+0x1e4>)
 81038bc:	4293      	cmp	r3, r2
 81038be:	d00e      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	4a4b      	ldr	r2, [pc, #300]	; (81039f4 <HAL_DMA_IRQHandler+0x1e8>)
 81038c6:	4293      	cmp	r3, r2
 81038c8:	d009      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	4a4a      	ldr	r2, [pc, #296]	; (81039f8 <HAL_DMA_IRQHandler+0x1ec>)
 81038d0:	4293      	cmp	r3, r2
 81038d2:	d004      	beq.n	81038de <HAL_DMA_IRQHandler+0xd2>
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	4a48      	ldr	r2, [pc, #288]	; (81039fc <HAL_DMA_IRQHandler+0x1f0>)
 81038da:	4293      	cmp	r3, r2
 81038dc:	d101      	bne.n	81038e2 <HAL_DMA_IRQHandler+0xd6>
 81038de:	2301      	movs	r3, #1
 81038e0:	e000      	b.n	81038e4 <HAL_DMA_IRQHandler+0xd8>
 81038e2:	2300      	movs	r3, #0
 81038e4:	2b00      	cmp	r3, #0
 81038e6:	f000 842b 	beq.w	8104140 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038ee:	f003 031f 	and.w	r3, r3, #31
 81038f2:	2208      	movs	r2, #8
 81038f4:	409a      	lsls	r2, r3
 81038f6:	69bb      	ldr	r3, [r7, #24]
 81038f8:	4013      	ands	r3, r2
 81038fa:	2b00      	cmp	r3, #0
 81038fc:	f000 80a2 	beq.w	8103a44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	4a2e      	ldr	r2, [pc, #184]	; (81039c0 <HAL_DMA_IRQHandler+0x1b4>)
 8103906:	4293      	cmp	r3, r2
 8103908:	d04a      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	681b      	ldr	r3, [r3, #0]
 810390e:	4a2d      	ldr	r2, [pc, #180]	; (81039c4 <HAL_DMA_IRQHandler+0x1b8>)
 8103910:	4293      	cmp	r3, r2
 8103912:	d045      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	4a2b      	ldr	r2, [pc, #172]	; (81039c8 <HAL_DMA_IRQHandler+0x1bc>)
 810391a:	4293      	cmp	r3, r2
 810391c:	d040      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	681b      	ldr	r3, [r3, #0]
 8103922:	4a2a      	ldr	r2, [pc, #168]	; (81039cc <HAL_DMA_IRQHandler+0x1c0>)
 8103924:	4293      	cmp	r3, r2
 8103926:	d03b      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	681b      	ldr	r3, [r3, #0]
 810392c:	4a28      	ldr	r2, [pc, #160]	; (81039d0 <HAL_DMA_IRQHandler+0x1c4>)
 810392e:	4293      	cmp	r3, r2
 8103930:	d036      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	4a27      	ldr	r2, [pc, #156]	; (81039d4 <HAL_DMA_IRQHandler+0x1c8>)
 8103938:	4293      	cmp	r3, r2
 810393a:	d031      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	681b      	ldr	r3, [r3, #0]
 8103940:	4a25      	ldr	r2, [pc, #148]	; (81039d8 <HAL_DMA_IRQHandler+0x1cc>)
 8103942:	4293      	cmp	r3, r2
 8103944:	d02c      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	681b      	ldr	r3, [r3, #0]
 810394a:	4a24      	ldr	r2, [pc, #144]	; (81039dc <HAL_DMA_IRQHandler+0x1d0>)
 810394c:	4293      	cmp	r3, r2
 810394e:	d027      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	4a22      	ldr	r2, [pc, #136]	; (81039e0 <HAL_DMA_IRQHandler+0x1d4>)
 8103956:	4293      	cmp	r3, r2
 8103958:	d022      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	4a21      	ldr	r2, [pc, #132]	; (81039e4 <HAL_DMA_IRQHandler+0x1d8>)
 8103960:	4293      	cmp	r3, r2
 8103962:	d01d      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	4a1f      	ldr	r2, [pc, #124]	; (81039e8 <HAL_DMA_IRQHandler+0x1dc>)
 810396a:	4293      	cmp	r3, r2
 810396c:	d018      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	4a1e      	ldr	r2, [pc, #120]	; (81039ec <HAL_DMA_IRQHandler+0x1e0>)
 8103974:	4293      	cmp	r3, r2
 8103976:	d013      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	4a1c      	ldr	r2, [pc, #112]	; (81039f0 <HAL_DMA_IRQHandler+0x1e4>)
 810397e:	4293      	cmp	r3, r2
 8103980:	d00e      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	4a1b      	ldr	r2, [pc, #108]	; (81039f4 <HAL_DMA_IRQHandler+0x1e8>)
 8103988:	4293      	cmp	r3, r2
 810398a:	d009      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	4a19      	ldr	r2, [pc, #100]	; (81039f8 <HAL_DMA_IRQHandler+0x1ec>)
 8103992:	4293      	cmp	r3, r2
 8103994:	d004      	beq.n	81039a0 <HAL_DMA_IRQHandler+0x194>
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	4a18      	ldr	r2, [pc, #96]	; (81039fc <HAL_DMA_IRQHandler+0x1f0>)
 810399c:	4293      	cmp	r3, r2
 810399e:	d12f      	bne.n	8103a00 <HAL_DMA_IRQHandler+0x1f4>
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	f003 0304 	and.w	r3, r3, #4
 81039aa:	2b00      	cmp	r3, #0
 81039ac:	bf14      	ite	ne
 81039ae:	2301      	movne	r3, #1
 81039b0:	2300      	moveq	r3, #0
 81039b2:	b2db      	uxtb	r3, r3
 81039b4:	e02e      	b.n	8103a14 <HAL_DMA_IRQHandler+0x208>
 81039b6:	bf00      	nop
 81039b8:	10000000 	.word	0x10000000
 81039bc:	1b4e81b5 	.word	0x1b4e81b5
 81039c0:	40020010 	.word	0x40020010
 81039c4:	40020028 	.word	0x40020028
 81039c8:	40020040 	.word	0x40020040
 81039cc:	40020058 	.word	0x40020058
 81039d0:	40020070 	.word	0x40020070
 81039d4:	40020088 	.word	0x40020088
 81039d8:	400200a0 	.word	0x400200a0
 81039dc:	400200b8 	.word	0x400200b8
 81039e0:	40020410 	.word	0x40020410
 81039e4:	40020428 	.word	0x40020428
 81039e8:	40020440 	.word	0x40020440
 81039ec:	40020458 	.word	0x40020458
 81039f0:	40020470 	.word	0x40020470
 81039f4:	40020488 	.word	0x40020488
 81039f8:	400204a0 	.word	0x400204a0
 81039fc:	400204b8 	.word	0x400204b8
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	f003 0308 	and.w	r3, r3, #8
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	bf14      	ite	ne
 8103a0e:	2301      	movne	r3, #1
 8103a10:	2300      	moveq	r3, #0
 8103a12:	b2db      	uxtb	r3, r3
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d015      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	681a      	ldr	r2, [r3, #0]
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	f022 0204 	bic.w	r2, r2, #4
 8103a26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a2c:	f003 031f 	and.w	r3, r3, #31
 8103a30:	2208      	movs	r2, #8
 8103a32:	409a      	lsls	r2, r3
 8103a34:	6a3b      	ldr	r3, [r7, #32]
 8103a36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a3c:	f043 0201 	orr.w	r2, r3, #1
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a48:	f003 031f 	and.w	r3, r3, #31
 8103a4c:	69ba      	ldr	r2, [r7, #24]
 8103a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8103a52:	f003 0301 	and.w	r3, r3, #1
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d06e      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	4a69      	ldr	r2, [pc, #420]	; (8103c04 <HAL_DMA_IRQHandler+0x3f8>)
 8103a60:	4293      	cmp	r3, r2
 8103a62:	d04a      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	4a67      	ldr	r2, [pc, #412]	; (8103c08 <HAL_DMA_IRQHandler+0x3fc>)
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d045      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a66      	ldr	r2, [pc, #408]	; (8103c0c <HAL_DMA_IRQHandler+0x400>)
 8103a74:	4293      	cmp	r3, r2
 8103a76:	d040      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a64      	ldr	r2, [pc, #400]	; (8103c10 <HAL_DMA_IRQHandler+0x404>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d03b      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	4a63      	ldr	r2, [pc, #396]	; (8103c14 <HAL_DMA_IRQHandler+0x408>)
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	d036      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	4a61      	ldr	r2, [pc, #388]	; (8103c18 <HAL_DMA_IRQHandler+0x40c>)
 8103a92:	4293      	cmp	r3, r2
 8103a94:	d031      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a60      	ldr	r2, [pc, #384]	; (8103c1c <HAL_DMA_IRQHandler+0x410>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d02c      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a5e      	ldr	r2, [pc, #376]	; (8103c20 <HAL_DMA_IRQHandler+0x414>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d027      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a5d      	ldr	r2, [pc, #372]	; (8103c24 <HAL_DMA_IRQHandler+0x418>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d022      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a5b      	ldr	r2, [pc, #364]	; (8103c28 <HAL_DMA_IRQHandler+0x41c>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d01d      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a5a      	ldr	r2, [pc, #360]	; (8103c2c <HAL_DMA_IRQHandler+0x420>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d018      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a58      	ldr	r2, [pc, #352]	; (8103c30 <HAL_DMA_IRQHandler+0x424>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d013      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a57      	ldr	r2, [pc, #348]	; (8103c34 <HAL_DMA_IRQHandler+0x428>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d00e      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a55      	ldr	r2, [pc, #340]	; (8103c38 <HAL_DMA_IRQHandler+0x42c>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d009      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	4a54      	ldr	r2, [pc, #336]	; (8103c3c <HAL_DMA_IRQHandler+0x430>)
 8103aec:	4293      	cmp	r3, r2
 8103aee:	d004      	beq.n	8103afa <HAL_DMA_IRQHandler+0x2ee>
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	681b      	ldr	r3, [r3, #0]
 8103af4:	4a52      	ldr	r2, [pc, #328]	; (8103c40 <HAL_DMA_IRQHandler+0x434>)
 8103af6:	4293      	cmp	r3, r2
 8103af8:	d10a      	bne.n	8103b10 <HAL_DMA_IRQHandler+0x304>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	681b      	ldr	r3, [r3, #0]
 8103afe:	695b      	ldr	r3, [r3, #20]
 8103b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103b04:	2b00      	cmp	r3, #0
 8103b06:	bf14      	ite	ne
 8103b08:	2301      	movne	r3, #1
 8103b0a:	2300      	moveq	r3, #0
 8103b0c:	b2db      	uxtb	r3, r3
 8103b0e:	e003      	b.n	8103b18 <HAL_DMA_IRQHandler+0x30c>
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	2300      	movs	r3, #0
 8103b18:	2b00      	cmp	r3, #0
 8103b1a:	d00d      	beq.n	8103b38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b20:	f003 031f 	and.w	r3, r3, #31
 8103b24:	2201      	movs	r2, #1
 8103b26:	409a      	lsls	r2, r3
 8103b28:	6a3b      	ldr	r3, [r7, #32]
 8103b2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b30:	f043 0202 	orr.w	r2, r3, #2
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b3c:	f003 031f 	and.w	r3, r3, #31
 8103b40:	2204      	movs	r2, #4
 8103b42:	409a      	lsls	r2, r3
 8103b44:	69bb      	ldr	r3, [r7, #24]
 8103b46:	4013      	ands	r3, r2
 8103b48:	2b00      	cmp	r3, #0
 8103b4a:	f000 808f 	beq.w	8103c6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	4a2c      	ldr	r2, [pc, #176]	; (8103c04 <HAL_DMA_IRQHandler+0x3f8>)
 8103b54:	4293      	cmp	r3, r2
 8103b56:	d04a      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	4a2a      	ldr	r2, [pc, #168]	; (8103c08 <HAL_DMA_IRQHandler+0x3fc>)
 8103b5e:	4293      	cmp	r3, r2
 8103b60:	d045      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	681b      	ldr	r3, [r3, #0]
 8103b66:	4a29      	ldr	r2, [pc, #164]	; (8103c0c <HAL_DMA_IRQHandler+0x400>)
 8103b68:	4293      	cmp	r3, r2
 8103b6a:	d040      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	4a27      	ldr	r2, [pc, #156]	; (8103c10 <HAL_DMA_IRQHandler+0x404>)
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d03b      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	4a26      	ldr	r2, [pc, #152]	; (8103c14 <HAL_DMA_IRQHandler+0x408>)
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	d036      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	4a24      	ldr	r2, [pc, #144]	; (8103c18 <HAL_DMA_IRQHandler+0x40c>)
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d031      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	4a23      	ldr	r2, [pc, #140]	; (8103c1c <HAL_DMA_IRQHandler+0x410>)
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d02c      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	4a21      	ldr	r2, [pc, #132]	; (8103c20 <HAL_DMA_IRQHandler+0x414>)
 8103b9a:	4293      	cmp	r3, r2
 8103b9c:	d027      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	4a20      	ldr	r2, [pc, #128]	; (8103c24 <HAL_DMA_IRQHandler+0x418>)
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d022      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a1e      	ldr	r2, [pc, #120]	; (8103c28 <HAL_DMA_IRQHandler+0x41c>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d01d      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	4a1d      	ldr	r2, [pc, #116]	; (8103c2c <HAL_DMA_IRQHandler+0x420>)
 8103bb8:	4293      	cmp	r3, r2
 8103bba:	d018      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4a1b      	ldr	r2, [pc, #108]	; (8103c30 <HAL_DMA_IRQHandler+0x424>)
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d013      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a1a      	ldr	r2, [pc, #104]	; (8103c34 <HAL_DMA_IRQHandler+0x428>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d00e      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	4a18      	ldr	r2, [pc, #96]	; (8103c38 <HAL_DMA_IRQHandler+0x42c>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d009      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	681b      	ldr	r3, [r3, #0]
 8103bde:	4a17      	ldr	r2, [pc, #92]	; (8103c3c <HAL_DMA_IRQHandler+0x430>)
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d004      	beq.n	8103bee <HAL_DMA_IRQHandler+0x3e2>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	4a15      	ldr	r2, [pc, #84]	; (8103c40 <HAL_DMA_IRQHandler+0x434>)
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d12a      	bne.n	8103c44 <HAL_DMA_IRQHandler+0x438>
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	f003 0302 	and.w	r3, r3, #2
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	bf14      	ite	ne
 8103bfc:	2301      	movne	r3, #1
 8103bfe:	2300      	moveq	r3, #0
 8103c00:	b2db      	uxtb	r3, r3
 8103c02:	e023      	b.n	8103c4c <HAL_DMA_IRQHandler+0x440>
 8103c04:	40020010 	.word	0x40020010
 8103c08:	40020028 	.word	0x40020028
 8103c0c:	40020040 	.word	0x40020040
 8103c10:	40020058 	.word	0x40020058
 8103c14:	40020070 	.word	0x40020070
 8103c18:	40020088 	.word	0x40020088
 8103c1c:	400200a0 	.word	0x400200a0
 8103c20:	400200b8 	.word	0x400200b8
 8103c24:	40020410 	.word	0x40020410
 8103c28:	40020428 	.word	0x40020428
 8103c2c:	40020440 	.word	0x40020440
 8103c30:	40020458 	.word	0x40020458
 8103c34:	40020470 	.word	0x40020470
 8103c38:	40020488 	.word	0x40020488
 8103c3c:	400204a0 	.word	0x400204a0
 8103c40:	400204b8 	.word	0x400204b8
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	681b      	ldr	r3, [r3, #0]
 8103c48:	681b      	ldr	r3, [r3, #0]
 8103c4a:	2300      	movs	r3, #0
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d00d      	beq.n	8103c6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c54:	f003 031f 	and.w	r3, r3, #31
 8103c58:	2204      	movs	r2, #4
 8103c5a:	409a      	lsls	r2, r3
 8103c5c:	6a3b      	ldr	r3, [r7, #32]
 8103c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c64:	f043 0204 	orr.w	r2, r3, #4
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c70:	f003 031f 	and.w	r3, r3, #31
 8103c74:	2210      	movs	r2, #16
 8103c76:	409a      	lsls	r2, r3
 8103c78:	69bb      	ldr	r3, [r7, #24]
 8103c7a:	4013      	ands	r3, r2
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	f000 80a6 	beq.w	8103dce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4a85      	ldr	r2, [pc, #532]	; (8103e9c <HAL_DMA_IRQHandler+0x690>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d04a      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	4a83      	ldr	r2, [pc, #524]	; (8103ea0 <HAL_DMA_IRQHandler+0x694>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d045      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	4a82      	ldr	r2, [pc, #520]	; (8103ea4 <HAL_DMA_IRQHandler+0x698>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d040      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	4a80      	ldr	r2, [pc, #512]	; (8103ea8 <HAL_DMA_IRQHandler+0x69c>)
 8103ca6:	4293      	cmp	r3, r2
 8103ca8:	d03b      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	4a7f      	ldr	r2, [pc, #508]	; (8103eac <HAL_DMA_IRQHandler+0x6a0>)
 8103cb0:	4293      	cmp	r3, r2
 8103cb2:	d036      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	4a7d      	ldr	r2, [pc, #500]	; (8103eb0 <HAL_DMA_IRQHandler+0x6a4>)
 8103cba:	4293      	cmp	r3, r2
 8103cbc:	d031      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a7c      	ldr	r2, [pc, #496]	; (8103eb4 <HAL_DMA_IRQHandler+0x6a8>)
 8103cc4:	4293      	cmp	r3, r2
 8103cc6:	d02c      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	4a7a      	ldr	r2, [pc, #488]	; (8103eb8 <HAL_DMA_IRQHandler+0x6ac>)
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d027      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a79      	ldr	r2, [pc, #484]	; (8103ebc <HAL_DMA_IRQHandler+0x6b0>)
 8103cd8:	4293      	cmp	r3, r2
 8103cda:	d022      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a77      	ldr	r2, [pc, #476]	; (8103ec0 <HAL_DMA_IRQHandler+0x6b4>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d01d      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a76      	ldr	r2, [pc, #472]	; (8103ec4 <HAL_DMA_IRQHandler+0x6b8>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d018      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	4a74      	ldr	r2, [pc, #464]	; (8103ec8 <HAL_DMA_IRQHandler+0x6bc>)
 8103cf6:	4293      	cmp	r3, r2
 8103cf8:	d013      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	4a73      	ldr	r2, [pc, #460]	; (8103ecc <HAL_DMA_IRQHandler+0x6c0>)
 8103d00:	4293      	cmp	r3, r2
 8103d02:	d00e      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a71      	ldr	r2, [pc, #452]	; (8103ed0 <HAL_DMA_IRQHandler+0x6c4>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d009      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	4a70      	ldr	r2, [pc, #448]	; (8103ed4 <HAL_DMA_IRQHandler+0x6c8>)
 8103d14:	4293      	cmp	r3, r2
 8103d16:	d004      	beq.n	8103d22 <HAL_DMA_IRQHandler+0x516>
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	4a6e      	ldr	r2, [pc, #440]	; (8103ed8 <HAL_DMA_IRQHandler+0x6cc>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d10a      	bne.n	8103d38 <HAL_DMA_IRQHandler+0x52c>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	f003 0308 	and.w	r3, r3, #8
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	bf14      	ite	ne
 8103d30:	2301      	movne	r3, #1
 8103d32:	2300      	moveq	r3, #0
 8103d34:	b2db      	uxtb	r3, r3
 8103d36:	e009      	b.n	8103d4c <HAL_DMA_IRQHandler+0x540>
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	f003 0304 	and.w	r3, r3, #4
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	bf14      	ite	ne
 8103d46:	2301      	movne	r3, #1
 8103d48:	2300      	moveq	r3, #0
 8103d4a:	b2db      	uxtb	r3, r3
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d03e      	beq.n	8103dce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d54:	f003 031f 	and.w	r3, r3, #31
 8103d58:	2210      	movs	r2, #16
 8103d5a:	409a      	lsls	r2, r3
 8103d5c:	6a3b      	ldr	r3, [r7, #32]
 8103d5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103d6a:	2b00      	cmp	r3, #0
 8103d6c:	d018      	beq.n	8103da0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103d78:	2b00      	cmp	r3, #0
 8103d7a:	d108      	bne.n	8103d8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d024      	beq.n	8103dce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103d88:	6878      	ldr	r0, [r7, #4]
 8103d8a:	4798      	blx	r3
 8103d8c:	e01f      	b.n	8103dce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d92:	2b00      	cmp	r3, #0
 8103d94:	d01b      	beq.n	8103dce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d9a:	6878      	ldr	r0, [r7, #4]
 8103d9c:	4798      	blx	r3
 8103d9e:	e016      	b.n	8103dce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103daa:	2b00      	cmp	r3, #0
 8103dac:	d107      	bne.n	8103dbe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	681a      	ldr	r2, [r3, #0]
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	f022 0208 	bic.w	r2, r2, #8
 8103dbc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	d003      	beq.n	8103dce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103dca:	6878      	ldr	r0, [r7, #4]
 8103dcc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dd2:	f003 031f 	and.w	r3, r3, #31
 8103dd6:	2220      	movs	r2, #32
 8103dd8:	409a      	lsls	r2, r3
 8103dda:	69bb      	ldr	r3, [r7, #24]
 8103ddc:	4013      	ands	r3, r2
 8103dde:	2b00      	cmp	r3, #0
 8103de0:	f000 8110 	beq.w	8104004 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	4a2c      	ldr	r2, [pc, #176]	; (8103e9c <HAL_DMA_IRQHandler+0x690>)
 8103dea:	4293      	cmp	r3, r2
 8103dec:	d04a      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	4a2b      	ldr	r2, [pc, #172]	; (8103ea0 <HAL_DMA_IRQHandler+0x694>)
 8103df4:	4293      	cmp	r3, r2
 8103df6:	d045      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	4a29      	ldr	r2, [pc, #164]	; (8103ea4 <HAL_DMA_IRQHandler+0x698>)
 8103dfe:	4293      	cmp	r3, r2
 8103e00:	d040      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	4a28      	ldr	r2, [pc, #160]	; (8103ea8 <HAL_DMA_IRQHandler+0x69c>)
 8103e08:	4293      	cmp	r3, r2
 8103e0a:	d03b      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	4a26      	ldr	r2, [pc, #152]	; (8103eac <HAL_DMA_IRQHandler+0x6a0>)
 8103e12:	4293      	cmp	r3, r2
 8103e14:	d036      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	681b      	ldr	r3, [r3, #0]
 8103e1a:	4a25      	ldr	r2, [pc, #148]	; (8103eb0 <HAL_DMA_IRQHandler+0x6a4>)
 8103e1c:	4293      	cmp	r3, r2
 8103e1e:	d031      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e20:	687b      	ldr	r3, [r7, #4]
 8103e22:	681b      	ldr	r3, [r3, #0]
 8103e24:	4a23      	ldr	r2, [pc, #140]	; (8103eb4 <HAL_DMA_IRQHandler+0x6a8>)
 8103e26:	4293      	cmp	r3, r2
 8103e28:	d02c      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	681b      	ldr	r3, [r3, #0]
 8103e2e:	4a22      	ldr	r2, [pc, #136]	; (8103eb8 <HAL_DMA_IRQHandler+0x6ac>)
 8103e30:	4293      	cmp	r3, r2
 8103e32:	d027      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	4a20      	ldr	r2, [pc, #128]	; (8103ebc <HAL_DMA_IRQHandler+0x6b0>)
 8103e3a:	4293      	cmp	r3, r2
 8103e3c:	d022      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	681b      	ldr	r3, [r3, #0]
 8103e42:	4a1f      	ldr	r2, [pc, #124]	; (8103ec0 <HAL_DMA_IRQHandler+0x6b4>)
 8103e44:	4293      	cmp	r3, r2
 8103e46:	d01d      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	4a1d      	ldr	r2, [pc, #116]	; (8103ec4 <HAL_DMA_IRQHandler+0x6b8>)
 8103e4e:	4293      	cmp	r3, r2
 8103e50:	d018      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	681b      	ldr	r3, [r3, #0]
 8103e56:	4a1c      	ldr	r2, [pc, #112]	; (8103ec8 <HAL_DMA_IRQHandler+0x6bc>)
 8103e58:	4293      	cmp	r3, r2
 8103e5a:	d013      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	681b      	ldr	r3, [r3, #0]
 8103e60:	4a1a      	ldr	r2, [pc, #104]	; (8103ecc <HAL_DMA_IRQHandler+0x6c0>)
 8103e62:	4293      	cmp	r3, r2
 8103e64:	d00e      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	4a19      	ldr	r2, [pc, #100]	; (8103ed0 <HAL_DMA_IRQHandler+0x6c4>)
 8103e6c:	4293      	cmp	r3, r2
 8103e6e:	d009      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	4a17      	ldr	r2, [pc, #92]	; (8103ed4 <HAL_DMA_IRQHandler+0x6c8>)
 8103e76:	4293      	cmp	r3, r2
 8103e78:	d004      	beq.n	8103e84 <HAL_DMA_IRQHandler+0x678>
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	4a16      	ldr	r2, [pc, #88]	; (8103ed8 <HAL_DMA_IRQHandler+0x6cc>)
 8103e80:	4293      	cmp	r3, r2
 8103e82:	d12b      	bne.n	8103edc <HAL_DMA_IRQHandler+0x6d0>
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	f003 0310 	and.w	r3, r3, #16
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	bf14      	ite	ne
 8103e92:	2301      	movne	r3, #1
 8103e94:	2300      	moveq	r3, #0
 8103e96:	b2db      	uxtb	r3, r3
 8103e98:	e02a      	b.n	8103ef0 <HAL_DMA_IRQHandler+0x6e4>
 8103e9a:	bf00      	nop
 8103e9c:	40020010 	.word	0x40020010
 8103ea0:	40020028 	.word	0x40020028
 8103ea4:	40020040 	.word	0x40020040
 8103ea8:	40020058 	.word	0x40020058
 8103eac:	40020070 	.word	0x40020070
 8103eb0:	40020088 	.word	0x40020088
 8103eb4:	400200a0 	.word	0x400200a0
 8103eb8:	400200b8 	.word	0x400200b8
 8103ebc:	40020410 	.word	0x40020410
 8103ec0:	40020428 	.word	0x40020428
 8103ec4:	40020440 	.word	0x40020440
 8103ec8:	40020458 	.word	0x40020458
 8103ecc:	40020470 	.word	0x40020470
 8103ed0:	40020488 	.word	0x40020488
 8103ed4:	400204a0 	.word	0x400204a0
 8103ed8:	400204b8 	.word	0x400204b8
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f003 0302 	and.w	r3, r3, #2
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	bf14      	ite	ne
 8103eea:	2301      	movne	r3, #1
 8103eec:	2300      	moveq	r3, #0
 8103eee:	b2db      	uxtb	r3, r3
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	f000 8087 	beq.w	8104004 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103efa:	f003 031f 	and.w	r3, r3, #31
 8103efe:	2220      	movs	r2, #32
 8103f00:	409a      	lsls	r2, r3
 8103f02:	6a3b      	ldr	r3, [r7, #32]
 8103f04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103f0c:	b2db      	uxtb	r3, r3
 8103f0e:	2b04      	cmp	r3, #4
 8103f10:	d139      	bne.n	8103f86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	681a      	ldr	r2, [r3, #0]
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	f022 0216 	bic.w	r2, r2, #22
 8103f20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	695a      	ldr	r2, [r3, #20]
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103f30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f36:	2b00      	cmp	r3, #0
 8103f38:	d103      	bne.n	8103f42 <HAL_DMA_IRQHandler+0x736>
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f3e:	2b00      	cmp	r3, #0
 8103f40:	d007      	beq.n	8103f52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	681b      	ldr	r3, [r3, #0]
 8103f46:	681a      	ldr	r2, [r3, #0]
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	f022 0208 	bic.w	r2, r2, #8
 8103f50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f56:	f003 031f 	and.w	r3, r3, #31
 8103f5a:	223f      	movs	r2, #63	; 0x3f
 8103f5c:	409a      	lsls	r2, r3
 8103f5e:	6a3b      	ldr	r3, [r7, #32]
 8103f60:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	2200      	movs	r2, #0
 8103f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	2201      	movs	r2, #1
 8103f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	f000 834a 	beq.w	8104610 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f80:	6878      	ldr	r0, [r7, #4]
 8103f82:	4798      	blx	r3
          }
          return;
 8103f84:	e344      	b.n	8104610 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103f90:	2b00      	cmp	r3, #0
 8103f92:	d018      	beq.n	8103fc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103f9e:	2b00      	cmp	r3, #0
 8103fa0:	d108      	bne.n	8103fb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fa6:	2b00      	cmp	r3, #0
 8103fa8:	d02c      	beq.n	8104004 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fae:	6878      	ldr	r0, [r7, #4]
 8103fb0:	4798      	blx	r3
 8103fb2:	e027      	b.n	8104004 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fb8:	2b00      	cmp	r3, #0
 8103fba:	d023      	beq.n	8104004 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fc0:	6878      	ldr	r0, [r7, #4]
 8103fc2:	4798      	blx	r3
 8103fc4:	e01e      	b.n	8104004 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103fd0:	2b00      	cmp	r3, #0
 8103fd2:	d10f      	bne.n	8103ff4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	681a      	ldr	r2, [r3, #0]
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	f022 0210 	bic.w	r2, r2, #16
 8103fe2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	2200      	movs	r2, #0
 8103fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	2201      	movs	r2, #1
 8103ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103ff8:	2b00      	cmp	r3, #0
 8103ffa:	d003      	beq.n	8104004 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104000:	6878      	ldr	r0, [r7, #4]
 8104002:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104008:	2b00      	cmp	r3, #0
 810400a:	f000 8306 	beq.w	810461a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810400e:	687b      	ldr	r3, [r7, #4]
 8104010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104012:	f003 0301 	and.w	r3, r3, #1
 8104016:	2b00      	cmp	r3, #0
 8104018:	f000 8088 	beq.w	810412c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	2204      	movs	r2, #4
 8104020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a7a      	ldr	r2, [pc, #488]	; (8104214 <HAL_DMA_IRQHandler+0xa08>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d04a      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	4a79      	ldr	r2, [pc, #484]	; (8104218 <HAL_DMA_IRQHandler+0xa0c>)
 8104034:	4293      	cmp	r3, r2
 8104036:	d045      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4a77      	ldr	r2, [pc, #476]	; (810421c <HAL_DMA_IRQHandler+0xa10>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d040      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a76      	ldr	r2, [pc, #472]	; (8104220 <HAL_DMA_IRQHandler+0xa14>)
 8104048:	4293      	cmp	r3, r2
 810404a:	d03b      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a74      	ldr	r2, [pc, #464]	; (8104224 <HAL_DMA_IRQHandler+0xa18>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d036      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a73      	ldr	r2, [pc, #460]	; (8104228 <HAL_DMA_IRQHandler+0xa1c>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d031      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a71      	ldr	r2, [pc, #452]	; (810422c <HAL_DMA_IRQHandler+0xa20>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d02c      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	4a70      	ldr	r2, [pc, #448]	; (8104230 <HAL_DMA_IRQHandler+0xa24>)
 8104070:	4293      	cmp	r3, r2
 8104072:	d027      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	4a6e      	ldr	r2, [pc, #440]	; (8104234 <HAL_DMA_IRQHandler+0xa28>)
 810407a:	4293      	cmp	r3, r2
 810407c:	d022      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	4a6d      	ldr	r2, [pc, #436]	; (8104238 <HAL_DMA_IRQHandler+0xa2c>)
 8104084:	4293      	cmp	r3, r2
 8104086:	d01d      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	4a6b      	ldr	r2, [pc, #428]	; (810423c <HAL_DMA_IRQHandler+0xa30>)
 810408e:	4293      	cmp	r3, r2
 8104090:	d018      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	4a6a      	ldr	r2, [pc, #424]	; (8104240 <HAL_DMA_IRQHandler+0xa34>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d013      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a68      	ldr	r2, [pc, #416]	; (8104244 <HAL_DMA_IRQHandler+0xa38>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d00e      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a67      	ldr	r2, [pc, #412]	; (8104248 <HAL_DMA_IRQHandler+0xa3c>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d009      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a65      	ldr	r2, [pc, #404]	; (810424c <HAL_DMA_IRQHandler+0xa40>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d004      	beq.n	81040c4 <HAL_DMA_IRQHandler+0x8b8>
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a64      	ldr	r2, [pc, #400]	; (8104250 <HAL_DMA_IRQHandler+0xa44>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d108      	bne.n	81040d6 <HAL_DMA_IRQHandler+0x8ca>
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	681a      	ldr	r2, [r3, #0]
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	f022 0201 	bic.w	r2, r2, #1
 81040d2:	601a      	str	r2, [r3, #0]
 81040d4:	e007      	b.n	81040e6 <HAL_DMA_IRQHandler+0x8da>
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	681b      	ldr	r3, [r3, #0]
 81040da:	681a      	ldr	r2, [r3, #0]
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	f022 0201 	bic.w	r2, r2, #1
 81040e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	3301      	adds	r3, #1
 81040ea:	60fb      	str	r3, [r7, #12]
 81040ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81040ee:	429a      	cmp	r2, r3
 81040f0:	d307      	bcc.n	8104102 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	f003 0301 	and.w	r3, r3, #1
 81040fc:	2b00      	cmp	r3, #0
 81040fe:	d1f2      	bne.n	81040e6 <HAL_DMA_IRQHandler+0x8da>
 8104100:	e000      	b.n	8104104 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8104102:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	2200      	movs	r2, #0
 8104108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	681b      	ldr	r3, [r3, #0]
 8104112:	f003 0301 	and.w	r3, r3, #1
 8104116:	2b00      	cmp	r3, #0
 8104118:	d004      	beq.n	8104124 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	2203      	movs	r2, #3
 810411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8104122:	e003      	b.n	810412c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	2201      	movs	r2, #1
 8104128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104130:	2b00      	cmp	r3, #0
 8104132:	f000 8272 	beq.w	810461a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810413a:	6878      	ldr	r0, [r7, #4]
 810413c:	4798      	blx	r3
 810413e:	e26c      	b.n	810461a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	4a43      	ldr	r2, [pc, #268]	; (8104254 <HAL_DMA_IRQHandler+0xa48>)
 8104146:	4293      	cmp	r3, r2
 8104148:	d022      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	4a42      	ldr	r2, [pc, #264]	; (8104258 <HAL_DMA_IRQHandler+0xa4c>)
 8104150:	4293      	cmp	r3, r2
 8104152:	d01d      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	4a40      	ldr	r2, [pc, #256]	; (810425c <HAL_DMA_IRQHandler+0xa50>)
 810415a:	4293      	cmp	r3, r2
 810415c:	d018      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	681b      	ldr	r3, [r3, #0]
 8104162:	4a3f      	ldr	r2, [pc, #252]	; (8104260 <HAL_DMA_IRQHandler+0xa54>)
 8104164:	4293      	cmp	r3, r2
 8104166:	d013      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a3d      	ldr	r2, [pc, #244]	; (8104264 <HAL_DMA_IRQHandler+0xa58>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d00e      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a3c      	ldr	r2, [pc, #240]	; (8104268 <HAL_DMA_IRQHandler+0xa5c>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d009      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4a3a      	ldr	r2, [pc, #232]	; (810426c <HAL_DMA_IRQHandler+0xa60>)
 8104182:	4293      	cmp	r3, r2
 8104184:	d004      	beq.n	8104190 <HAL_DMA_IRQHandler+0x984>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a39      	ldr	r2, [pc, #228]	; (8104270 <HAL_DMA_IRQHandler+0xa64>)
 810418c:	4293      	cmp	r3, r2
 810418e:	d101      	bne.n	8104194 <HAL_DMA_IRQHandler+0x988>
 8104190:	2301      	movs	r3, #1
 8104192:	e000      	b.n	8104196 <HAL_DMA_IRQHandler+0x98a>
 8104194:	2300      	movs	r3, #0
 8104196:	2b00      	cmp	r3, #0
 8104198:	f000 823f 	beq.w	810461a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81041a4:	687b      	ldr	r3, [r7, #4]
 81041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041a8:	f003 031f 	and.w	r3, r3, #31
 81041ac:	2204      	movs	r2, #4
 81041ae:	409a      	lsls	r2, r3
 81041b0:	697b      	ldr	r3, [r7, #20]
 81041b2:	4013      	ands	r3, r2
 81041b4:	2b00      	cmp	r3, #0
 81041b6:	f000 80cd 	beq.w	8104354 <HAL_DMA_IRQHandler+0xb48>
 81041ba:	693b      	ldr	r3, [r7, #16]
 81041bc:	f003 0304 	and.w	r3, r3, #4
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	f000 80c7 	beq.w	8104354 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041ca:	f003 031f 	and.w	r3, r3, #31
 81041ce:	2204      	movs	r2, #4
 81041d0:	409a      	lsls	r2, r3
 81041d2:	69fb      	ldr	r3, [r7, #28]
 81041d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81041d6:	693b      	ldr	r3, [r7, #16]
 81041d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81041dc:	2b00      	cmp	r3, #0
 81041de:	d049      	beq.n	8104274 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81041e0:	693b      	ldr	r3, [r7, #16]
 81041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81041e6:	2b00      	cmp	r3, #0
 81041e8:	d109      	bne.n	81041fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81041ee:	2b00      	cmp	r3, #0
 81041f0:	f000 8210 	beq.w	8104614 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81041f8:	6878      	ldr	r0, [r7, #4]
 81041fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81041fc:	e20a      	b.n	8104614 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104202:	2b00      	cmp	r3, #0
 8104204:	f000 8206 	beq.w	8104614 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810420c:	6878      	ldr	r0, [r7, #4]
 810420e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104210:	e200      	b.n	8104614 <HAL_DMA_IRQHandler+0xe08>
 8104212:	bf00      	nop
 8104214:	40020010 	.word	0x40020010
 8104218:	40020028 	.word	0x40020028
 810421c:	40020040 	.word	0x40020040
 8104220:	40020058 	.word	0x40020058
 8104224:	40020070 	.word	0x40020070
 8104228:	40020088 	.word	0x40020088
 810422c:	400200a0 	.word	0x400200a0
 8104230:	400200b8 	.word	0x400200b8
 8104234:	40020410 	.word	0x40020410
 8104238:	40020428 	.word	0x40020428
 810423c:	40020440 	.word	0x40020440
 8104240:	40020458 	.word	0x40020458
 8104244:	40020470 	.word	0x40020470
 8104248:	40020488 	.word	0x40020488
 810424c:	400204a0 	.word	0x400204a0
 8104250:	400204b8 	.word	0x400204b8
 8104254:	58025408 	.word	0x58025408
 8104258:	5802541c 	.word	0x5802541c
 810425c:	58025430 	.word	0x58025430
 8104260:	58025444 	.word	0x58025444
 8104264:	58025458 	.word	0x58025458
 8104268:	5802546c 	.word	0x5802546c
 810426c:	58025480 	.word	0x58025480
 8104270:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104274:	693b      	ldr	r3, [r7, #16]
 8104276:	f003 0320 	and.w	r3, r3, #32
 810427a:	2b00      	cmp	r3, #0
 810427c:	d160      	bne.n	8104340 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	4a8c      	ldr	r2, [pc, #560]	; (81044b4 <HAL_DMA_IRQHandler+0xca8>)
 8104284:	4293      	cmp	r3, r2
 8104286:	d04a      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	4a8a      	ldr	r2, [pc, #552]	; (81044b8 <HAL_DMA_IRQHandler+0xcac>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d045      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a89      	ldr	r2, [pc, #548]	; (81044bc <HAL_DMA_IRQHandler+0xcb0>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d040      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	4a87      	ldr	r2, [pc, #540]	; (81044c0 <HAL_DMA_IRQHandler+0xcb4>)
 81042a2:	4293      	cmp	r3, r2
 81042a4:	d03b      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	4a86      	ldr	r2, [pc, #536]	; (81044c4 <HAL_DMA_IRQHandler+0xcb8>)
 81042ac:	4293      	cmp	r3, r2
 81042ae:	d036      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	4a84      	ldr	r2, [pc, #528]	; (81044c8 <HAL_DMA_IRQHandler+0xcbc>)
 81042b6:	4293      	cmp	r3, r2
 81042b8:	d031      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a83      	ldr	r2, [pc, #524]	; (81044cc <HAL_DMA_IRQHandler+0xcc0>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d02c      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a81      	ldr	r2, [pc, #516]	; (81044d0 <HAL_DMA_IRQHandler+0xcc4>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d027      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	4a80      	ldr	r2, [pc, #512]	; (81044d4 <HAL_DMA_IRQHandler+0xcc8>)
 81042d4:	4293      	cmp	r3, r2
 81042d6:	d022      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	4a7e      	ldr	r2, [pc, #504]	; (81044d8 <HAL_DMA_IRQHandler+0xccc>)
 81042de:	4293      	cmp	r3, r2
 81042e0:	d01d      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	4a7d      	ldr	r2, [pc, #500]	; (81044dc <HAL_DMA_IRQHandler+0xcd0>)
 81042e8:	4293      	cmp	r3, r2
 81042ea:	d018      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	4a7b      	ldr	r2, [pc, #492]	; (81044e0 <HAL_DMA_IRQHandler+0xcd4>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d013      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	4a7a      	ldr	r2, [pc, #488]	; (81044e4 <HAL_DMA_IRQHandler+0xcd8>)
 81042fc:	4293      	cmp	r3, r2
 81042fe:	d00e      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	4a78      	ldr	r2, [pc, #480]	; (81044e8 <HAL_DMA_IRQHandler+0xcdc>)
 8104306:	4293      	cmp	r3, r2
 8104308:	d009      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	4a77      	ldr	r2, [pc, #476]	; (81044ec <HAL_DMA_IRQHandler+0xce0>)
 8104310:	4293      	cmp	r3, r2
 8104312:	d004      	beq.n	810431e <HAL_DMA_IRQHandler+0xb12>
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a75      	ldr	r2, [pc, #468]	; (81044f0 <HAL_DMA_IRQHandler+0xce4>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d108      	bne.n	8104330 <HAL_DMA_IRQHandler+0xb24>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	681a      	ldr	r2, [r3, #0]
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	f022 0208 	bic.w	r2, r2, #8
 810432c:	601a      	str	r2, [r3, #0]
 810432e:	e007      	b.n	8104340 <HAL_DMA_IRQHandler+0xb34>
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	681a      	ldr	r2, [r3, #0]
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	f022 0204 	bic.w	r2, r2, #4
 810433e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104344:	2b00      	cmp	r3, #0
 8104346:	f000 8165 	beq.w	8104614 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810434a:	687b      	ldr	r3, [r7, #4]
 810434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810434e:	6878      	ldr	r0, [r7, #4]
 8104350:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104352:	e15f      	b.n	8104614 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104358:	f003 031f 	and.w	r3, r3, #31
 810435c:	2202      	movs	r2, #2
 810435e:	409a      	lsls	r2, r3
 8104360:	697b      	ldr	r3, [r7, #20]
 8104362:	4013      	ands	r3, r2
 8104364:	2b00      	cmp	r3, #0
 8104366:	f000 80c5 	beq.w	81044f4 <HAL_DMA_IRQHandler+0xce8>
 810436a:	693b      	ldr	r3, [r7, #16]
 810436c:	f003 0302 	and.w	r3, r3, #2
 8104370:	2b00      	cmp	r3, #0
 8104372:	f000 80bf 	beq.w	81044f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810437a:	f003 031f 	and.w	r3, r3, #31
 810437e:	2202      	movs	r2, #2
 8104380:	409a      	lsls	r2, r3
 8104382:	69fb      	ldr	r3, [r7, #28]
 8104384:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104386:	693b      	ldr	r3, [r7, #16]
 8104388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810438c:	2b00      	cmp	r3, #0
 810438e:	d018      	beq.n	81043c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104390:	693b      	ldr	r3, [r7, #16]
 8104392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104396:	2b00      	cmp	r3, #0
 8104398:	d109      	bne.n	81043ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810439e:	2b00      	cmp	r3, #0
 81043a0:	f000 813a 	beq.w	8104618 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81043a8:	6878      	ldr	r0, [r7, #4]
 81043aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043ac:	e134      	b.n	8104618 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81043b2:	2b00      	cmp	r3, #0
 81043b4:	f000 8130 	beq.w	8104618 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81043bc:	6878      	ldr	r0, [r7, #4]
 81043be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043c0:	e12a      	b.n	8104618 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81043c2:	693b      	ldr	r3, [r7, #16]
 81043c4:	f003 0320 	and.w	r3, r3, #32
 81043c8:	2b00      	cmp	r3, #0
 81043ca:	d168      	bne.n	810449e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	4a38      	ldr	r2, [pc, #224]	; (81044b4 <HAL_DMA_IRQHandler+0xca8>)
 81043d2:	4293      	cmp	r3, r2
 81043d4:	d04a      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	4a37      	ldr	r2, [pc, #220]	; (81044b8 <HAL_DMA_IRQHandler+0xcac>)
 81043dc:	4293      	cmp	r3, r2
 81043de:	d045      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	4a35      	ldr	r2, [pc, #212]	; (81044bc <HAL_DMA_IRQHandler+0xcb0>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d040      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a34      	ldr	r2, [pc, #208]	; (81044c0 <HAL_DMA_IRQHandler+0xcb4>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d03b      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a32      	ldr	r2, [pc, #200]	; (81044c4 <HAL_DMA_IRQHandler+0xcb8>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d036      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a31      	ldr	r2, [pc, #196]	; (81044c8 <HAL_DMA_IRQHandler+0xcbc>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d031      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	4a2f      	ldr	r2, [pc, #188]	; (81044cc <HAL_DMA_IRQHandler+0xcc0>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d02c      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a2e      	ldr	r2, [pc, #184]	; (81044d0 <HAL_DMA_IRQHandler+0xcc4>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d027      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a2c      	ldr	r2, [pc, #176]	; (81044d4 <HAL_DMA_IRQHandler+0xcc8>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d022      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a2b      	ldr	r2, [pc, #172]	; (81044d8 <HAL_DMA_IRQHandler+0xccc>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d01d      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a29      	ldr	r2, [pc, #164]	; (81044dc <HAL_DMA_IRQHandler+0xcd0>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d018      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4a28      	ldr	r2, [pc, #160]	; (81044e0 <HAL_DMA_IRQHandler+0xcd4>)
 8104440:	4293      	cmp	r3, r2
 8104442:	d013      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	4a26      	ldr	r2, [pc, #152]	; (81044e4 <HAL_DMA_IRQHandler+0xcd8>)
 810444a:	4293      	cmp	r3, r2
 810444c:	d00e      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	4a25      	ldr	r2, [pc, #148]	; (81044e8 <HAL_DMA_IRQHandler+0xcdc>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d009      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	4a23      	ldr	r2, [pc, #140]	; (81044ec <HAL_DMA_IRQHandler+0xce0>)
 810445e:	4293      	cmp	r3, r2
 8104460:	d004      	beq.n	810446c <HAL_DMA_IRQHandler+0xc60>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	4a22      	ldr	r2, [pc, #136]	; (81044f0 <HAL_DMA_IRQHandler+0xce4>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d108      	bne.n	810447e <HAL_DMA_IRQHandler+0xc72>
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	681a      	ldr	r2, [r3, #0]
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	f022 0214 	bic.w	r2, r2, #20
 810447a:	601a      	str	r2, [r3, #0]
 810447c:	e007      	b.n	810448e <HAL_DMA_IRQHandler+0xc82>
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	681a      	ldr	r2, [r3, #0]
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	f022 020a 	bic.w	r2, r2, #10
 810448c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	2200      	movs	r2, #0
 8104492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	2201      	movs	r2, #1
 810449a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044a2:	2b00      	cmp	r3, #0
 81044a4:	f000 80b8 	beq.w	8104618 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044ac:	6878      	ldr	r0, [r7, #4]
 81044ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81044b0:	e0b2      	b.n	8104618 <HAL_DMA_IRQHandler+0xe0c>
 81044b2:	bf00      	nop
 81044b4:	40020010 	.word	0x40020010
 81044b8:	40020028 	.word	0x40020028
 81044bc:	40020040 	.word	0x40020040
 81044c0:	40020058 	.word	0x40020058
 81044c4:	40020070 	.word	0x40020070
 81044c8:	40020088 	.word	0x40020088
 81044cc:	400200a0 	.word	0x400200a0
 81044d0:	400200b8 	.word	0x400200b8
 81044d4:	40020410 	.word	0x40020410
 81044d8:	40020428 	.word	0x40020428
 81044dc:	40020440 	.word	0x40020440
 81044e0:	40020458 	.word	0x40020458
 81044e4:	40020470 	.word	0x40020470
 81044e8:	40020488 	.word	0x40020488
 81044ec:	400204a0 	.word	0x400204a0
 81044f0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044f8:	f003 031f 	and.w	r3, r3, #31
 81044fc:	2208      	movs	r2, #8
 81044fe:	409a      	lsls	r2, r3
 8104500:	697b      	ldr	r3, [r7, #20]
 8104502:	4013      	ands	r3, r2
 8104504:	2b00      	cmp	r3, #0
 8104506:	f000 8088 	beq.w	810461a <HAL_DMA_IRQHandler+0xe0e>
 810450a:	693b      	ldr	r3, [r7, #16]
 810450c:	f003 0308 	and.w	r3, r3, #8
 8104510:	2b00      	cmp	r3, #0
 8104512:	f000 8082 	beq.w	810461a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	4a41      	ldr	r2, [pc, #260]	; (8104620 <HAL_DMA_IRQHandler+0xe14>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d04a      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4a3f      	ldr	r2, [pc, #252]	; (8104624 <HAL_DMA_IRQHandler+0xe18>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d045      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4a3e      	ldr	r2, [pc, #248]	; (8104628 <HAL_DMA_IRQHandler+0xe1c>)
 8104530:	4293      	cmp	r3, r2
 8104532:	d040      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	4a3c      	ldr	r2, [pc, #240]	; (810462c <HAL_DMA_IRQHandler+0xe20>)
 810453a:	4293      	cmp	r3, r2
 810453c:	d03b      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	4a3b      	ldr	r2, [pc, #236]	; (8104630 <HAL_DMA_IRQHandler+0xe24>)
 8104544:	4293      	cmp	r3, r2
 8104546:	d036      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	4a39      	ldr	r2, [pc, #228]	; (8104634 <HAL_DMA_IRQHandler+0xe28>)
 810454e:	4293      	cmp	r3, r2
 8104550:	d031      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	4a38      	ldr	r2, [pc, #224]	; (8104638 <HAL_DMA_IRQHandler+0xe2c>)
 8104558:	4293      	cmp	r3, r2
 810455a:	d02c      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	4a36      	ldr	r2, [pc, #216]	; (810463c <HAL_DMA_IRQHandler+0xe30>)
 8104562:	4293      	cmp	r3, r2
 8104564:	d027      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	681b      	ldr	r3, [r3, #0]
 810456a:	4a35      	ldr	r2, [pc, #212]	; (8104640 <HAL_DMA_IRQHandler+0xe34>)
 810456c:	4293      	cmp	r3, r2
 810456e:	d022      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	681b      	ldr	r3, [r3, #0]
 8104574:	4a33      	ldr	r2, [pc, #204]	; (8104644 <HAL_DMA_IRQHandler+0xe38>)
 8104576:	4293      	cmp	r3, r2
 8104578:	d01d      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	4a32      	ldr	r2, [pc, #200]	; (8104648 <HAL_DMA_IRQHandler+0xe3c>)
 8104580:	4293      	cmp	r3, r2
 8104582:	d018      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	4a30      	ldr	r2, [pc, #192]	; (810464c <HAL_DMA_IRQHandler+0xe40>)
 810458a:	4293      	cmp	r3, r2
 810458c:	d013      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	681b      	ldr	r3, [r3, #0]
 8104592:	4a2f      	ldr	r2, [pc, #188]	; (8104650 <HAL_DMA_IRQHandler+0xe44>)
 8104594:	4293      	cmp	r3, r2
 8104596:	d00e      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	4a2d      	ldr	r2, [pc, #180]	; (8104654 <HAL_DMA_IRQHandler+0xe48>)
 810459e:	4293      	cmp	r3, r2
 81045a0:	d009      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	681b      	ldr	r3, [r3, #0]
 81045a6:	4a2c      	ldr	r2, [pc, #176]	; (8104658 <HAL_DMA_IRQHandler+0xe4c>)
 81045a8:	4293      	cmp	r3, r2
 81045aa:	d004      	beq.n	81045b6 <HAL_DMA_IRQHandler+0xdaa>
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	681b      	ldr	r3, [r3, #0]
 81045b0:	4a2a      	ldr	r2, [pc, #168]	; (810465c <HAL_DMA_IRQHandler+0xe50>)
 81045b2:	4293      	cmp	r3, r2
 81045b4:	d108      	bne.n	81045c8 <HAL_DMA_IRQHandler+0xdbc>
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	681b      	ldr	r3, [r3, #0]
 81045ba:	681a      	ldr	r2, [r3, #0]
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	f022 021c 	bic.w	r2, r2, #28
 81045c4:	601a      	str	r2, [r3, #0]
 81045c6:	e007      	b.n	81045d8 <HAL_DMA_IRQHandler+0xdcc>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	681a      	ldr	r2, [r3, #0]
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	f022 020e 	bic.w	r2, r2, #14
 81045d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045dc:	f003 031f 	and.w	r3, r3, #31
 81045e0:	2201      	movs	r2, #1
 81045e2:	409a      	lsls	r2, r3
 81045e4:	69fb      	ldr	r3, [r7, #28]
 81045e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	2201      	movs	r2, #1
 81045ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	2200      	movs	r2, #0
 81045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	2201      	movs	r2, #1
 81045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104602:	2b00      	cmp	r3, #0
 8104604:	d009      	beq.n	810461a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810460a:	6878      	ldr	r0, [r7, #4]
 810460c:	4798      	blx	r3
 810460e:	e004      	b.n	810461a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8104610:	bf00      	nop
 8104612:	e002      	b.n	810461a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104614:	bf00      	nop
 8104616:	e000      	b.n	810461a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104618:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810461a:	3728      	adds	r7, #40	; 0x28
 810461c:	46bd      	mov	sp, r7
 810461e:	bd80      	pop	{r7, pc}
 8104620:	40020010 	.word	0x40020010
 8104624:	40020028 	.word	0x40020028
 8104628:	40020040 	.word	0x40020040
 810462c:	40020058 	.word	0x40020058
 8104630:	40020070 	.word	0x40020070
 8104634:	40020088 	.word	0x40020088
 8104638:	400200a0 	.word	0x400200a0
 810463c:	400200b8 	.word	0x400200b8
 8104640:	40020410 	.word	0x40020410
 8104644:	40020428 	.word	0x40020428
 8104648:	40020440 	.word	0x40020440
 810464c:	40020458 	.word	0x40020458
 8104650:	40020470 	.word	0x40020470
 8104654:	40020488 	.word	0x40020488
 8104658:	400204a0 	.word	0x400204a0
 810465c:	400204b8 	.word	0x400204b8

08104660 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8104660:	b480      	push	{r7}
 8104662:	b083      	sub	sp, #12
 8104664:	af00      	add	r7, sp, #0
 8104666:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810466e:	b2db      	uxtb	r3, r3
}
 8104670:	4618      	mov	r0, r3
 8104672:	370c      	adds	r7, #12
 8104674:	46bd      	mov	sp, r7
 8104676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810467a:	4770      	bx	lr

0810467c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810467c:	b480      	push	{r7}
 810467e:	b087      	sub	sp, #28
 8104680:	af00      	add	r7, sp, #0
 8104682:	60f8      	str	r0, [r7, #12]
 8104684:	60b9      	str	r1, [r7, #8]
 8104686:	607a      	str	r2, [r7, #4]
 8104688:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810468a:	68fb      	ldr	r3, [r7, #12]
 810468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810468e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104690:	68fb      	ldr	r3, [r7, #12]
 8104692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104694:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104696:	68fb      	ldr	r3, [r7, #12]
 8104698:	681b      	ldr	r3, [r3, #0]
 810469a:	4a84      	ldr	r2, [pc, #528]	; (81048ac <DMA_SetConfig+0x230>)
 810469c:	4293      	cmp	r3, r2
 810469e:	d072      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046a0:	68fb      	ldr	r3, [r7, #12]
 81046a2:	681b      	ldr	r3, [r3, #0]
 81046a4:	4a82      	ldr	r2, [pc, #520]	; (81048b0 <DMA_SetConfig+0x234>)
 81046a6:	4293      	cmp	r3, r2
 81046a8:	d06d      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	4a81      	ldr	r2, [pc, #516]	; (81048b4 <DMA_SetConfig+0x238>)
 81046b0:	4293      	cmp	r3, r2
 81046b2:	d068      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	4a7f      	ldr	r2, [pc, #508]	; (81048b8 <DMA_SetConfig+0x23c>)
 81046ba:	4293      	cmp	r3, r2
 81046bc:	d063      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	681b      	ldr	r3, [r3, #0]
 81046c2:	4a7e      	ldr	r2, [pc, #504]	; (81048bc <DMA_SetConfig+0x240>)
 81046c4:	4293      	cmp	r3, r2
 81046c6:	d05e      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046c8:	68fb      	ldr	r3, [r7, #12]
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	4a7c      	ldr	r2, [pc, #496]	; (81048c0 <DMA_SetConfig+0x244>)
 81046ce:	4293      	cmp	r3, r2
 81046d0:	d059      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	681b      	ldr	r3, [r3, #0]
 81046d6:	4a7b      	ldr	r2, [pc, #492]	; (81048c4 <DMA_SetConfig+0x248>)
 81046d8:	4293      	cmp	r3, r2
 81046da:	d054      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	4a79      	ldr	r2, [pc, #484]	; (81048c8 <DMA_SetConfig+0x24c>)
 81046e2:	4293      	cmp	r3, r2
 81046e4:	d04f      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	4a78      	ldr	r2, [pc, #480]	; (81048cc <DMA_SetConfig+0x250>)
 81046ec:	4293      	cmp	r3, r2
 81046ee:	d04a      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046f0:	68fb      	ldr	r3, [r7, #12]
 81046f2:	681b      	ldr	r3, [r3, #0]
 81046f4:	4a76      	ldr	r2, [pc, #472]	; (81048d0 <DMA_SetConfig+0x254>)
 81046f6:	4293      	cmp	r3, r2
 81046f8:	d045      	beq.n	8104786 <DMA_SetConfig+0x10a>
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	4a75      	ldr	r2, [pc, #468]	; (81048d4 <DMA_SetConfig+0x258>)
 8104700:	4293      	cmp	r3, r2
 8104702:	d040      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	4a73      	ldr	r2, [pc, #460]	; (81048d8 <DMA_SetConfig+0x25c>)
 810470a:	4293      	cmp	r3, r2
 810470c:	d03b      	beq.n	8104786 <DMA_SetConfig+0x10a>
 810470e:	68fb      	ldr	r3, [r7, #12]
 8104710:	681b      	ldr	r3, [r3, #0]
 8104712:	4a72      	ldr	r2, [pc, #456]	; (81048dc <DMA_SetConfig+0x260>)
 8104714:	4293      	cmp	r3, r2
 8104716:	d036      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	4a70      	ldr	r2, [pc, #448]	; (81048e0 <DMA_SetConfig+0x264>)
 810471e:	4293      	cmp	r3, r2
 8104720:	d031      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	4a6f      	ldr	r2, [pc, #444]	; (81048e4 <DMA_SetConfig+0x268>)
 8104728:	4293      	cmp	r3, r2
 810472a:	d02c      	beq.n	8104786 <DMA_SetConfig+0x10a>
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	4a6d      	ldr	r2, [pc, #436]	; (81048e8 <DMA_SetConfig+0x26c>)
 8104732:	4293      	cmp	r3, r2
 8104734:	d027      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	4a6c      	ldr	r2, [pc, #432]	; (81048ec <DMA_SetConfig+0x270>)
 810473c:	4293      	cmp	r3, r2
 810473e:	d022      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	4a6a      	ldr	r2, [pc, #424]	; (81048f0 <DMA_SetConfig+0x274>)
 8104746:	4293      	cmp	r3, r2
 8104748:	d01d      	beq.n	8104786 <DMA_SetConfig+0x10a>
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	4a69      	ldr	r2, [pc, #420]	; (81048f4 <DMA_SetConfig+0x278>)
 8104750:	4293      	cmp	r3, r2
 8104752:	d018      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	681b      	ldr	r3, [r3, #0]
 8104758:	4a67      	ldr	r2, [pc, #412]	; (81048f8 <DMA_SetConfig+0x27c>)
 810475a:	4293      	cmp	r3, r2
 810475c:	d013      	beq.n	8104786 <DMA_SetConfig+0x10a>
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	4a66      	ldr	r2, [pc, #408]	; (81048fc <DMA_SetConfig+0x280>)
 8104764:	4293      	cmp	r3, r2
 8104766:	d00e      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104768:	68fb      	ldr	r3, [r7, #12]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	4a64      	ldr	r2, [pc, #400]	; (8104900 <DMA_SetConfig+0x284>)
 810476e:	4293      	cmp	r3, r2
 8104770:	d009      	beq.n	8104786 <DMA_SetConfig+0x10a>
 8104772:	68fb      	ldr	r3, [r7, #12]
 8104774:	681b      	ldr	r3, [r3, #0]
 8104776:	4a63      	ldr	r2, [pc, #396]	; (8104904 <DMA_SetConfig+0x288>)
 8104778:	4293      	cmp	r3, r2
 810477a:	d004      	beq.n	8104786 <DMA_SetConfig+0x10a>
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	681b      	ldr	r3, [r3, #0]
 8104780:	4a61      	ldr	r2, [pc, #388]	; (8104908 <DMA_SetConfig+0x28c>)
 8104782:	4293      	cmp	r3, r2
 8104784:	d101      	bne.n	810478a <DMA_SetConfig+0x10e>
 8104786:	2301      	movs	r3, #1
 8104788:	e000      	b.n	810478c <DMA_SetConfig+0x110>
 810478a:	2300      	movs	r3, #0
 810478c:	2b00      	cmp	r3, #0
 810478e:	d00d      	beq.n	81047ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104794:	68fa      	ldr	r2, [r7, #12]
 8104796:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104798:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810479e:	2b00      	cmp	r3, #0
 81047a0:	d004      	beq.n	81047ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81047a2:	68fb      	ldr	r3, [r7, #12]
 81047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81047a6:	68fa      	ldr	r2, [r7, #12]
 81047a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81047aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81047ac:	68fb      	ldr	r3, [r7, #12]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	4a3e      	ldr	r2, [pc, #248]	; (81048ac <DMA_SetConfig+0x230>)
 81047b2:	4293      	cmp	r3, r2
 81047b4:	d04a      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	681b      	ldr	r3, [r3, #0]
 81047ba:	4a3d      	ldr	r2, [pc, #244]	; (81048b0 <DMA_SetConfig+0x234>)
 81047bc:	4293      	cmp	r3, r2
 81047be:	d045      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	4a3b      	ldr	r2, [pc, #236]	; (81048b4 <DMA_SetConfig+0x238>)
 81047c6:	4293      	cmp	r3, r2
 81047c8:	d040      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047ca:	68fb      	ldr	r3, [r7, #12]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	4a3a      	ldr	r2, [pc, #232]	; (81048b8 <DMA_SetConfig+0x23c>)
 81047d0:	4293      	cmp	r3, r2
 81047d2:	d03b      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047d4:	68fb      	ldr	r3, [r7, #12]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	4a38      	ldr	r2, [pc, #224]	; (81048bc <DMA_SetConfig+0x240>)
 81047da:	4293      	cmp	r3, r2
 81047dc:	d036      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	4a37      	ldr	r2, [pc, #220]	; (81048c0 <DMA_SetConfig+0x244>)
 81047e4:	4293      	cmp	r3, r2
 81047e6:	d031      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047e8:	68fb      	ldr	r3, [r7, #12]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	4a35      	ldr	r2, [pc, #212]	; (81048c4 <DMA_SetConfig+0x248>)
 81047ee:	4293      	cmp	r3, r2
 81047f0:	d02c      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047f2:	68fb      	ldr	r3, [r7, #12]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	4a34      	ldr	r2, [pc, #208]	; (81048c8 <DMA_SetConfig+0x24c>)
 81047f8:	4293      	cmp	r3, r2
 81047fa:	d027      	beq.n	810484c <DMA_SetConfig+0x1d0>
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	4a32      	ldr	r2, [pc, #200]	; (81048cc <DMA_SetConfig+0x250>)
 8104802:	4293      	cmp	r3, r2
 8104804:	d022      	beq.n	810484c <DMA_SetConfig+0x1d0>
 8104806:	68fb      	ldr	r3, [r7, #12]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a31      	ldr	r2, [pc, #196]	; (81048d0 <DMA_SetConfig+0x254>)
 810480c:	4293      	cmp	r3, r2
 810480e:	d01d      	beq.n	810484c <DMA_SetConfig+0x1d0>
 8104810:	68fb      	ldr	r3, [r7, #12]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a2f      	ldr	r2, [pc, #188]	; (81048d4 <DMA_SetConfig+0x258>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d018      	beq.n	810484c <DMA_SetConfig+0x1d0>
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a2e      	ldr	r2, [pc, #184]	; (81048d8 <DMA_SetConfig+0x25c>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d013      	beq.n	810484c <DMA_SetConfig+0x1d0>
 8104824:	68fb      	ldr	r3, [r7, #12]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a2c      	ldr	r2, [pc, #176]	; (81048dc <DMA_SetConfig+0x260>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d00e      	beq.n	810484c <DMA_SetConfig+0x1d0>
 810482e:	68fb      	ldr	r3, [r7, #12]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	4a2b      	ldr	r2, [pc, #172]	; (81048e0 <DMA_SetConfig+0x264>)
 8104834:	4293      	cmp	r3, r2
 8104836:	d009      	beq.n	810484c <DMA_SetConfig+0x1d0>
 8104838:	68fb      	ldr	r3, [r7, #12]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	4a29      	ldr	r2, [pc, #164]	; (81048e4 <DMA_SetConfig+0x268>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d004      	beq.n	810484c <DMA_SetConfig+0x1d0>
 8104842:	68fb      	ldr	r3, [r7, #12]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	4a28      	ldr	r2, [pc, #160]	; (81048e8 <DMA_SetConfig+0x26c>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d101      	bne.n	8104850 <DMA_SetConfig+0x1d4>
 810484c:	2301      	movs	r3, #1
 810484e:	e000      	b.n	8104852 <DMA_SetConfig+0x1d6>
 8104850:	2300      	movs	r3, #0
 8104852:	2b00      	cmp	r3, #0
 8104854:	d05a      	beq.n	810490c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104856:	68fb      	ldr	r3, [r7, #12]
 8104858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810485a:	f003 031f 	and.w	r3, r3, #31
 810485e:	223f      	movs	r2, #63	; 0x3f
 8104860:	409a      	lsls	r2, r3
 8104862:	697b      	ldr	r3, [r7, #20]
 8104864:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104866:	68fb      	ldr	r3, [r7, #12]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	681a      	ldr	r2, [r3, #0]
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104874:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	681b      	ldr	r3, [r3, #0]
 810487a:	683a      	ldr	r2, [r7, #0]
 810487c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810487e:	68fb      	ldr	r3, [r7, #12]
 8104880:	689b      	ldr	r3, [r3, #8]
 8104882:	2b40      	cmp	r3, #64	; 0x40
 8104884:	d108      	bne.n	8104898 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	687a      	ldr	r2, [r7, #4]
 810488c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810488e:	68fb      	ldr	r3, [r7, #12]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	68ba      	ldr	r2, [r7, #8]
 8104894:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104896:	e087      	b.n	81049a8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	681b      	ldr	r3, [r3, #0]
 810489c:	68ba      	ldr	r2, [r7, #8]
 810489e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	681b      	ldr	r3, [r3, #0]
 81048a4:	687a      	ldr	r2, [r7, #4]
 81048a6:	60da      	str	r2, [r3, #12]
}
 81048a8:	e07e      	b.n	81049a8 <DMA_SetConfig+0x32c>
 81048aa:	bf00      	nop
 81048ac:	40020010 	.word	0x40020010
 81048b0:	40020028 	.word	0x40020028
 81048b4:	40020040 	.word	0x40020040
 81048b8:	40020058 	.word	0x40020058
 81048bc:	40020070 	.word	0x40020070
 81048c0:	40020088 	.word	0x40020088
 81048c4:	400200a0 	.word	0x400200a0
 81048c8:	400200b8 	.word	0x400200b8
 81048cc:	40020410 	.word	0x40020410
 81048d0:	40020428 	.word	0x40020428
 81048d4:	40020440 	.word	0x40020440
 81048d8:	40020458 	.word	0x40020458
 81048dc:	40020470 	.word	0x40020470
 81048e0:	40020488 	.word	0x40020488
 81048e4:	400204a0 	.word	0x400204a0
 81048e8:	400204b8 	.word	0x400204b8
 81048ec:	58025408 	.word	0x58025408
 81048f0:	5802541c 	.word	0x5802541c
 81048f4:	58025430 	.word	0x58025430
 81048f8:	58025444 	.word	0x58025444
 81048fc:	58025458 	.word	0x58025458
 8104900:	5802546c 	.word	0x5802546c
 8104904:	58025480 	.word	0x58025480
 8104908:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	4a28      	ldr	r2, [pc, #160]	; (81049b4 <DMA_SetConfig+0x338>)
 8104912:	4293      	cmp	r3, r2
 8104914:	d022      	beq.n	810495c <DMA_SetConfig+0x2e0>
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	4a27      	ldr	r2, [pc, #156]	; (81049b8 <DMA_SetConfig+0x33c>)
 810491c:	4293      	cmp	r3, r2
 810491e:	d01d      	beq.n	810495c <DMA_SetConfig+0x2e0>
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	4a25      	ldr	r2, [pc, #148]	; (81049bc <DMA_SetConfig+0x340>)
 8104926:	4293      	cmp	r3, r2
 8104928:	d018      	beq.n	810495c <DMA_SetConfig+0x2e0>
 810492a:	68fb      	ldr	r3, [r7, #12]
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	4a24      	ldr	r2, [pc, #144]	; (81049c0 <DMA_SetConfig+0x344>)
 8104930:	4293      	cmp	r3, r2
 8104932:	d013      	beq.n	810495c <DMA_SetConfig+0x2e0>
 8104934:	68fb      	ldr	r3, [r7, #12]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	4a22      	ldr	r2, [pc, #136]	; (81049c4 <DMA_SetConfig+0x348>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d00e      	beq.n	810495c <DMA_SetConfig+0x2e0>
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a21      	ldr	r2, [pc, #132]	; (81049c8 <DMA_SetConfig+0x34c>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d009      	beq.n	810495c <DMA_SetConfig+0x2e0>
 8104948:	68fb      	ldr	r3, [r7, #12]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	4a1f      	ldr	r2, [pc, #124]	; (81049cc <DMA_SetConfig+0x350>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d004      	beq.n	810495c <DMA_SetConfig+0x2e0>
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	4a1e      	ldr	r2, [pc, #120]	; (81049d0 <DMA_SetConfig+0x354>)
 8104958:	4293      	cmp	r3, r2
 810495a:	d101      	bne.n	8104960 <DMA_SetConfig+0x2e4>
 810495c:	2301      	movs	r3, #1
 810495e:	e000      	b.n	8104962 <DMA_SetConfig+0x2e6>
 8104960:	2300      	movs	r3, #0
 8104962:	2b00      	cmp	r3, #0
 8104964:	d020      	beq.n	81049a8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104966:	68fb      	ldr	r3, [r7, #12]
 8104968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810496a:	f003 031f 	and.w	r3, r3, #31
 810496e:	2201      	movs	r2, #1
 8104970:	409a      	lsls	r2, r3
 8104972:	693b      	ldr	r3, [r7, #16]
 8104974:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	683a      	ldr	r2, [r7, #0]
 810497c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810497e:	68fb      	ldr	r3, [r7, #12]
 8104980:	689b      	ldr	r3, [r3, #8]
 8104982:	2b40      	cmp	r3, #64	; 0x40
 8104984:	d108      	bne.n	8104998 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	687a      	ldr	r2, [r7, #4]
 810498c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810498e:	68fb      	ldr	r3, [r7, #12]
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	68ba      	ldr	r2, [r7, #8]
 8104994:	60da      	str	r2, [r3, #12]
}
 8104996:	e007      	b.n	81049a8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104998:	68fb      	ldr	r3, [r7, #12]
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	68ba      	ldr	r2, [r7, #8]
 810499e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 81049a0:	68fb      	ldr	r3, [r7, #12]
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	687a      	ldr	r2, [r7, #4]
 81049a6:	60da      	str	r2, [r3, #12]
}
 81049a8:	bf00      	nop
 81049aa:	371c      	adds	r7, #28
 81049ac:	46bd      	mov	sp, r7
 81049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049b2:	4770      	bx	lr
 81049b4:	58025408 	.word	0x58025408
 81049b8:	5802541c 	.word	0x5802541c
 81049bc:	58025430 	.word	0x58025430
 81049c0:	58025444 	.word	0x58025444
 81049c4:	58025458 	.word	0x58025458
 81049c8:	5802546c 	.word	0x5802546c
 81049cc:	58025480 	.word	0x58025480
 81049d0:	58025494 	.word	0x58025494

081049d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81049d4:	b480      	push	{r7}
 81049d6:	b085      	sub	sp, #20
 81049d8:	af00      	add	r7, sp, #0
 81049da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	681b      	ldr	r3, [r3, #0]
 81049e0:	4a43      	ldr	r2, [pc, #268]	; (8104af0 <DMA_CalcBaseAndBitshift+0x11c>)
 81049e2:	4293      	cmp	r3, r2
 81049e4:	d04a      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	4a42      	ldr	r2, [pc, #264]	; (8104af4 <DMA_CalcBaseAndBitshift+0x120>)
 81049ec:	4293      	cmp	r3, r2
 81049ee:	d045      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	4a40      	ldr	r2, [pc, #256]	; (8104af8 <DMA_CalcBaseAndBitshift+0x124>)
 81049f6:	4293      	cmp	r3, r2
 81049f8:	d040      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	681b      	ldr	r3, [r3, #0]
 81049fe:	4a3f      	ldr	r2, [pc, #252]	; (8104afc <DMA_CalcBaseAndBitshift+0x128>)
 8104a00:	4293      	cmp	r3, r2
 8104a02:	d03b      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	4a3d      	ldr	r2, [pc, #244]	; (8104b00 <DMA_CalcBaseAndBitshift+0x12c>)
 8104a0a:	4293      	cmp	r3, r2
 8104a0c:	d036      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	4a3c      	ldr	r2, [pc, #240]	; (8104b04 <DMA_CalcBaseAndBitshift+0x130>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d031      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	4a3a      	ldr	r2, [pc, #232]	; (8104b08 <DMA_CalcBaseAndBitshift+0x134>)
 8104a1e:	4293      	cmp	r3, r2
 8104a20:	d02c      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	4a39      	ldr	r2, [pc, #228]	; (8104b0c <DMA_CalcBaseAndBitshift+0x138>)
 8104a28:	4293      	cmp	r3, r2
 8104a2a:	d027      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	4a37      	ldr	r2, [pc, #220]	; (8104b10 <DMA_CalcBaseAndBitshift+0x13c>)
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d022      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	4a36      	ldr	r2, [pc, #216]	; (8104b14 <DMA_CalcBaseAndBitshift+0x140>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d01d      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	4a34      	ldr	r2, [pc, #208]	; (8104b18 <DMA_CalcBaseAndBitshift+0x144>)
 8104a46:	4293      	cmp	r3, r2
 8104a48:	d018      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a4a:	687b      	ldr	r3, [r7, #4]
 8104a4c:	681b      	ldr	r3, [r3, #0]
 8104a4e:	4a33      	ldr	r2, [pc, #204]	; (8104b1c <DMA_CalcBaseAndBitshift+0x148>)
 8104a50:	4293      	cmp	r3, r2
 8104a52:	d013      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	4a31      	ldr	r2, [pc, #196]	; (8104b20 <DMA_CalcBaseAndBitshift+0x14c>)
 8104a5a:	4293      	cmp	r3, r2
 8104a5c:	d00e      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	4a30      	ldr	r2, [pc, #192]	; (8104b24 <DMA_CalcBaseAndBitshift+0x150>)
 8104a64:	4293      	cmp	r3, r2
 8104a66:	d009      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a2e      	ldr	r2, [pc, #184]	; (8104b28 <DMA_CalcBaseAndBitshift+0x154>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d004      	beq.n	8104a7c <DMA_CalcBaseAndBitshift+0xa8>
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	681b      	ldr	r3, [r3, #0]
 8104a76:	4a2d      	ldr	r2, [pc, #180]	; (8104b2c <DMA_CalcBaseAndBitshift+0x158>)
 8104a78:	4293      	cmp	r3, r2
 8104a7a:	d101      	bne.n	8104a80 <DMA_CalcBaseAndBitshift+0xac>
 8104a7c:	2301      	movs	r3, #1
 8104a7e:	e000      	b.n	8104a82 <DMA_CalcBaseAndBitshift+0xae>
 8104a80:	2300      	movs	r3, #0
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d026      	beq.n	8104ad4 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104a86:	687b      	ldr	r3, [r7, #4]
 8104a88:	681b      	ldr	r3, [r3, #0]
 8104a8a:	b2db      	uxtb	r3, r3
 8104a8c:	3b10      	subs	r3, #16
 8104a8e:	4a28      	ldr	r2, [pc, #160]	; (8104b30 <DMA_CalcBaseAndBitshift+0x15c>)
 8104a90:	fba2 2303 	umull	r2, r3, r2, r3
 8104a94:	091b      	lsrs	r3, r3, #4
 8104a96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	f003 0307 	and.w	r3, r3, #7
 8104a9e:	4a25      	ldr	r2, [pc, #148]	; (8104b34 <DMA_CalcBaseAndBitshift+0x160>)
 8104aa0:	5cd3      	ldrb	r3, [r2, r3]
 8104aa2:	461a      	mov	r2, r3
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	2b03      	cmp	r3, #3
 8104aac:	d909      	bls.n	8104ac2 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104ab6:	f023 0303 	bic.w	r3, r3, #3
 8104aba:	1d1a      	adds	r2, r3, #4
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	659a      	str	r2, [r3, #88]	; 0x58
 8104ac0:	e00e      	b.n	8104ae0 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	681b      	ldr	r3, [r3, #0]
 8104ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104aca:	f023 0303 	bic.w	r3, r3, #3
 8104ace:	687a      	ldr	r2, [r7, #4]
 8104ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8104ad2:	e005      	b.n	8104ae0 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104ae4:	4618      	mov	r0, r3
 8104ae6:	3714      	adds	r7, #20
 8104ae8:	46bd      	mov	sp, r7
 8104aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aee:	4770      	bx	lr
 8104af0:	40020010 	.word	0x40020010
 8104af4:	40020028 	.word	0x40020028
 8104af8:	40020040 	.word	0x40020040
 8104afc:	40020058 	.word	0x40020058
 8104b00:	40020070 	.word	0x40020070
 8104b04:	40020088 	.word	0x40020088
 8104b08:	400200a0 	.word	0x400200a0
 8104b0c:	400200b8 	.word	0x400200b8
 8104b10:	40020410 	.word	0x40020410
 8104b14:	40020428 	.word	0x40020428
 8104b18:	40020440 	.word	0x40020440
 8104b1c:	40020458 	.word	0x40020458
 8104b20:	40020470 	.word	0x40020470
 8104b24:	40020488 	.word	0x40020488
 8104b28:	400204a0 	.word	0x400204a0
 8104b2c:	400204b8 	.word	0x400204b8
 8104b30:	aaaaaaab 	.word	0xaaaaaaab
 8104b34:	0810a0f8 	.word	0x0810a0f8

08104b38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104b38:	b480      	push	{r7}
 8104b3a:	b085      	sub	sp, #20
 8104b3c:	af00      	add	r7, sp, #0
 8104b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104b40:	2300      	movs	r3, #0
 8104b42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	699b      	ldr	r3, [r3, #24]
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d120      	bne.n	8104b8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b50:	2b03      	cmp	r3, #3
 8104b52:	d858      	bhi.n	8104c06 <DMA_CheckFifoParam+0xce>
 8104b54:	a201      	add	r2, pc, #4	; (adr r2, 8104b5c <DMA_CheckFifoParam+0x24>)
 8104b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b5a:	bf00      	nop
 8104b5c:	08104b6d 	.word	0x08104b6d
 8104b60:	08104b7f 	.word	0x08104b7f
 8104b64:	08104b6d 	.word	0x08104b6d
 8104b68:	08104c07 	.word	0x08104c07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104b6c:	687b      	ldr	r3, [r7, #4]
 8104b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104b74:	2b00      	cmp	r3, #0
 8104b76:	d048      	beq.n	8104c0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104b78:	2301      	movs	r3, #1
 8104b7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104b7c:	e045      	b.n	8104c0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104b86:	d142      	bne.n	8104c0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104b88:	2301      	movs	r3, #1
 8104b8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104b8c:	e03f      	b.n	8104c0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104b8e:	687b      	ldr	r3, [r7, #4]
 8104b90:	699b      	ldr	r3, [r3, #24]
 8104b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104b96:	d123      	bne.n	8104be0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b9c:	2b03      	cmp	r3, #3
 8104b9e:	d838      	bhi.n	8104c12 <DMA_CheckFifoParam+0xda>
 8104ba0:	a201      	add	r2, pc, #4	; (adr r2, 8104ba8 <DMA_CheckFifoParam+0x70>)
 8104ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ba6:	bf00      	nop
 8104ba8:	08104bb9 	.word	0x08104bb9
 8104bac:	08104bbf 	.word	0x08104bbf
 8104bb0:	08104bb9 	.word	0x08104bb9
 8104bb4:	08104bd1 	.word	0x08104bd1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104bb8:	2301      	movs	r3, #1
 8104bba:	73fb      	strb	r3, [r7, #15]
        break;
 8104bbc:	e030      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104bbe:	687b      	ldr	r3, [r7, #4]
 8104bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104bc6:	2b00      	cmp	r3, #0
 8104bc8:	d025      	beq.n	8104c16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8104bca:	2301      	movs	r3, #1
 8104bcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104bce:	e022      	b.n	8104c16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104bd8:	d11f      	bne.n	8104c1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8104bda:	2301      	movs	r3, #1
 8104bdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104bde:	e01c      	b.n	8104c1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104be4:	2b02      	cmp	r3, #2
 8104be6:	d902      	bls.n	8104bee <DMA_CheckFifoParam+0xb6>
 8104be8:	2b03      	cmp	r3, #3
 8104bea:	d003      	beq.n	8104bf4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104bec:	e018      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104bee:	2301      	movs	r3, #1
 8104bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8104bf2:	e015      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104bfc:	2b00      	cmp	r3, #0
 8104bfe:	d00e      	beq.n	8104c1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104c00:	2301      	movs	r3, #1
 8104c02:	73fb      	strb	r3, [r7, #15]
    break;
 8104c04:	e00b      	b.n	8104c1e <DMA_CheckFifoParam+0xe6>
        break;
 8104c06:	bf00      	nop
 8104c08:	e00a      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        break;
 8104c0a:	bf00      	nop
 8104c0c:	e008      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        break;
 8104c0e:	bf00      	nop
 8104c10:	e006      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        break;
 8104c12:	bf00      	nop
 8104c14:	e004      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        break;
 8104c16:	bf00      	nop
 8104c18:	e002      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
        break;
 8104c1a:	bf00      	nop
 8104c1c:	e000      	b.n	8104c20 <DMA_CheckFifoParam+0xe8>
    break;
 8104c1e:	bf00      	nop
    }
  }

  return status;
 8104c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8104c22:	4618      	mov	r0, r3
 8104c24:	3714      	adds	r7, #20
 8104c26:	46bd      	mov	sp, r7
 8104c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c2c:	4770      	bx	lr
 8104c2e:	bf00      	nop

08104c30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104c30:	b480      	push	{r7}
 8104c32:	b085      	sub	sp, #20
 8104c34:	af00      	add	r7, sp, #0
 8104c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	4a3a      	ldr	r2, [pc, #232]	; (8104d2c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104c44:	4293      	cmp	r3, r2
 8104c46:	d022      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	4a38      	ldr	r2, [pc, #224]	; (8104d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104c4e:	4293      	cmp	r3, r2
 8104c50:	d01d      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	4a37      	ldr	r2, [pc, #220]	; (8104d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104c58:	4293      	cmp	r3, r2
 8104c5a:	d018      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	4a35      	ldr	r2, [pc, #212]	; (8104d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104c62:	4293      	cmp	r3, r2
 8104c64:	d013      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c66:	687b      	ldr	r3, [r7, #4]
 8104c68:	681b      	ldr	r3, [r3, #0]
 8104c6a:	4a34      	ldr	r2, [pc, #208]	; (8104d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104c6c:	4293      	cmp	r3, r2
 8104c6e:	d00e      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	681b      	ldr	r3, [r3, #0]
 8104c74:	4a32      	ldr	r2, [pc, #200]	; (8104d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104c76:	4293      	cmp	r3, r2
 8104c78:	d009      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	4a31      	ldr	r2, [pc, #196]	; (8104d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104c80:	4293      	cmp	r3, r2
 8104c82:	d004      	beq.n	8104c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	4a2f      	ldr	r2, [pc, #188]	; (8104d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104c8a:	4293      	cmp	r3, r2
 8104c8c:	d101      	bne.n	8104c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104c8e:	2301      	movs	r3, #1
 8104c90:	e000      	b.n	8104c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104c92:	2300      	movs	r3, #0
 8104c94:	2b00      	cmp	r3, #0
 8104c96:	d01c      	beq.n	8104cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	b2db      	uxtb	r3, r3
 8104c9e:	3b08      	subs	r3, #8
 8104ca0:	4a2a      	ldr	r2, [pc, #168]	; (8104d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8104ca6:	091b      	lsrs	r3, r3, #4
 8104ca8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104caa:	68fb      	ldr	r3, [r7, #12]
 8104cac:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104cb0:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104cb4:	009b      	lsls	r3, r3, #2
 8104cb6:	461a      	mov	r2, r3
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	4a24      	ldr	r2, [pc, #144]	; (8104d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104cc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104cc2:	68fb      	ldr	r3, [r7, #12]
 8104cc4:	f003 031f 	and.w	r3, r3, #31
 8104cc8:	2201      	movs	r2, #1
 8104cca:	409a      	lsls	r2, r3
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104cd0:	e026      	b.n	8104d20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	b2db      	uxtb	r3, r3
 8104cd8:	3b10      	subs	r3, #16
 8104cda:	4a1e      	ldr	r2, [pc, #120]	; (8104d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8104ce0:	091b      	lsrs	r3, r3, #4
 8104ce2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104ce4:	68bb      	ldr	r3, [r7, #8]
 8104ce6:	4a1c      	ldr	r2, [pc, #112]	; (8104d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104ce8:	4293      	cmp	r3, r2
 8104cea:	d806      	bhi.n	8104cfa <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104cec:	68bb      	ldr	r3, [r7, #8]
 8104cee:	4a1b      	ldr	r2, [pc, #108]	; (8104d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104cf0:	4293      	cmp	r3, r2
 8104cf2:	d902      	bls.n	8104cfa <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104cf4:	68fb      	ldr	r3, [r7, #12]
 8104cf6:	3308      	adds	r3, #8
 8104cf8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104cfa:	68fb      	ldr	r3, [r7, #12]
 8104cfc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104d00:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104d04:	009b      	lsls	r3, r3, #2
 8104d06:	461a      	mov	r2, r3
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	4a14      	ldr	r2, [pc, #80]	; (8104d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104d10:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104d12:	68fb      	ldr	r3, [r7, #12]
 8104d14:	f003 031f 	and.w	r3, r3, #31
 8104d18:	2201      	movs	r2, #1
 8104d1a:	409a      	lsls	r2, r3
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104d20:	bf00      	nop
 8104d22:	3714      	adds	r7, #20
 8104d24:	46bd      	mov	sp, r7
 8104d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d2a:	4770      	bx	lr
 8104d2c:	58025408 	.word	0x58025408
 8104d30:	5802541c 	.word	0x5802541c
 8104d34:	58025430 	.word	0x58025430
 8104d38:	58025444 	.word	0x58025444
 8104d3c:	58025458 	.word	0x58025458
 8104d40:	5802546c 	.word	0x5802546c
 8104d44:	58025480 	.word	0x58025480
 8104d48:	58025494 	.word	0x58025494
 8104d4c:	cccccccd 	.word	0xcccccccd
 8104d50:	58025880 	.word	0x58025880
 8104d54:	aaaaaaab 	.word	0xaaaaaaab
 8104d58:	400204b8 	.word	0x400204b8
 8104d5c:	4002040f 	.word	0x4002040f
 8104d60:	40020880 	.word	0x40020880

08104d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104d64:	b480      	push	{r7}
 8104d66:	b085      	sub	sp, #20
 8104d68:	af00      	add	r7, sp, #0
 8104d6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	685b      	ldr	r3, [r3, #4]
 8104d70:	b2db      	uxtb	r3, r3
 8104d72:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104d74:	68fb      	ldr	r3, [r7, #12]
 8104d76:	2b00      	cmp	r3, #0
 8104d78:	d04a      	beq.n	8104e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104d7a:	68fb      	ldr	r3, [r7, #12]
 8104d7c:	2b08      	cmp	r3, #8
 8104d7e:	d847      	bhi.n	8104e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	681b      	ldr	r3, [r3, #0]
 8104d84:	4a25      	ldr	r2, [pc, #148]	; (8104e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104d86:	4293      	cmp	r3, r2
 8104d88:	d022      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	4a24      	ldr	r2, [pc, #144]	; (8104e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104d90:	4293      	cmp	r3, r2
 8104d92:	d01d      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	4a22      	ldr	r2, [pc, #136]	; (8104e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104d9a:	4293      	cmp	r3, r2
 8104d9c:	d018      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104d9e:	687b      	ldr	r3, [r7, #4]
 8104da0:	681b      	ldr	r3, [r3, #0]
 8104da2:	4a21      	ldr	r2, [pc, #132]	; (8104e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104da4:	4293      	cmp	r3, r2
 8104da6:	d013      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	4a1f      	ldr	r2, [pc, #124]	; (8104e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104dae:	4293      	cmp	r3, r2
 8104db0:	d00e      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	4a1e      	ldr	r2, [pc, #120]	; (8104e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104db8:	4293      	cmp	r3, r2
 8104dba:	d009      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	681b      	ldr	r3, [r3, #0]
 8104dc0:	4a1c      	ldr	r2, [pc, #112]	; (8104e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104dc2:	4293      	cmp	r3, r2
 8104dc4:	d004      	beq.n	8104dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	4a1b      	ldr	r2, [pc, #108]	; (8104e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104dcc:	4293      	cmp	r3, r2
 8104dce:	d101      	bne.n	8104dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104dd0:	2301      	movs	r3, #1
 8104dd2:	e000      	b.n	8104dd6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104dd4:	2300      	movs	r3, #0
 8104dd6:	2b00      	cmp	r3, #0
 8104dd8:	d00a      	beq.n	8104df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104dda:	68fa      	ldr	r2, [r7, #12]
 8104ddc:	4b17      	ldr	r3, [pc, #92]	; (8104e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104dde:	4413      	add	r3, r2
 8104de0:	009b      	lsls	r3, r3, #2
 8104de2:	461a      	mov	r2, r3
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	4a15      	ldr	r2, [pc, #84]	; (8104e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104dec:	671a      	str	r2, [r3, #112]	; 0x70
 8104dee:	e009      	b.n	8104e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104df0:	68fa      	ldr	r2, [r7, #12]
 8104df2:	4b14      	ldr	r3, [pc, #80]	; (8104e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104df4:	4413      	add	r3, r2
 8104df6:	009b      	lsls	r3, r3, #2
 8104df8:	461a      	mov	r2, r3
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	4a11      	ldr	r2, [pc, #68]	; (8104e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104e02:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104e04:	68fb      	ldr	r3, [r7, #12]
 8104e06:	3b01      	subs	r3, #1
 8104e08:	2201      	movs	r2, #1
 8104e0a:	409a      	lsls	r2, r3
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104e10:	bf00      	nop
 8104e12:	3714      	adds	r7, #20
 8104e14:	46bd      	mov	sp, r7
 8104e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e1a:	4770      	bx	lr
 8104e1c:	58025408 	.word	0x58025408
 8104e20:	5802541c 	.word	0x5802541c
 8104e24:	58025430 	.word	0x58025430
 8104e28:	58025444 	.word	0x58025444
 8104e2c:	58025458 	.word	0x58025458
 8104e30:	5802546c 	.word	0x5802546c
 8104e34:	58025480 	.word	0x58025480
 8104e38:	58025494 	.word	0x58025494
 8104e3c:	1600963f 	.word	0x1600963f
 8104e40:	58025940 	.word	0x58025940
 8104e44:	1000823f 	.word	0x1000823f
 8104e48:	40020940 	.word	0x40020940

08104e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104e4c:	b480      	push	{r7}
 8104e4e:	b089      	sub	sp, #36	; 0x24
 8104e50:	af00      	add	r7, sp, #0
 8104e52:	6078      	str	r0, [r7, #4]
 8104e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104e56:	2300      	movs	r3, #0
 8104e58:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104e5a:	4b89      	ldr	r3, [pc, #548]	; (8105080 <HAL_GPIO_Init+0x234>)
 8104e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104e5e:	e194      	b.n	810518a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104e60:	683b      	ldr	r3, [r7, #0]
 8104e62:	681a      	ldr	r2, [r3, #0]
 8104e64:	2101      	movs	r1, #1
 8104e66:	69fb      	ldr	r3, [r7, #28]
 8104e68:	fa01 f303 	lsl.w	r3, r1, r3
 8104e6c:	4013      	ands	r3, r2
 8104e6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104e70:	693b      	ldr	r3, [r7, #16]
 8104e72:	2b00      	cmp	r3, #0
 8104e74:	f000 8186 	beq.w	8105184 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104e78:	683b      	ldr	r3, [r7, #0]
 8104e7a:	685b      	ldr	r3, [r3, #4]
 8104e7c:	2b01      	cmp	r3, #1
 8104e7e:	d00b      	beq.n	8104e98 <HAL_GPIO_Init+0x4c>
 8104e80:	683b      	ldr	r3, [r7, #0]
 8104e82:	685b      	ldr	r3, [r3, #4]
 8104e84:	2b02      	cmp	r3, #2
 8104e86:	d007      	beq.n	8104e98 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104e88:	683b      	ldr	r3, [r7, #0]
 8104e8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104e8c:	2b11      	cmp	r3, #17
 8104e8e:	d003      	beq.n	8104e98 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104e90:	683b      	ldr	r3, [r7, #0]
 8104e92:	685b      	ldr	r3, [r3, #4]
 8104e94:	2b12      	cmp	r3, #18
 8104e96:	d130      	bne.n	8104efa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	689b      	ldr	r3, [r3, #8]
 8104e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104e9e:	69fb      	ldr	r3, [r7, #28]
 8104ea0:	005b      	lsls	r3, r3, #1
 8104ea2:	2203      	movs	r2, #3
 8104ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8104ea8:	43db      	mvns	r3, r3
 8104eaa:	69ba      	ldr	r2, [r7, #24]
 8104eac:	4013      	ands	r3, r2
 8104eae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104eb0:	683b      	ldr	r3, [r7, #0]
 8104eb2:	68da      	ldr	r2, [r3, #12]
 8104eb4:	69fb      	ldr	r3, [r7, #28]
 8104eb6:	005b      	lsls	r3, r3, #1
 8104eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8104ebc:	69ba      	ldr	r2, [r7, #24]
 8104ebe:	4313      	orrs	r3, r2
 8104ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	69ba      	ldr	r2, [r7, #24]
 8104ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	685b      	ldr	r3, [r3, #4]
 8104ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104ece:	2201      	movs	r2, #1
 8104ed0:	69fb      	ldr	r3, [r7, #28]
 8104ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8104ed6:	43db      	mvns	r3, r3
 8104ed8:	69ba      	ldr	r2, [r7, #24]
 8104eda:	4013      	ands	r3, r2
 8104edc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104ede:	683b      	ldr	r3, [r7, #0]
 8104ee0:	685b      	ldr	r3, [r3, #4]
 8104ee2:	091b      	lsrs	r3, r3, #4
 8104ee4:	f003 0201 	and.w	r2, r3, #1
 8104ee8:	69fb      	ldr	r3, [r7, #28]
 8104eea:	fa02 f303 	lsl.w	r3, r2, r3
 8104eee:	69ba      	ldr	r2, [r7, #24]
 8104ef0:	4313      	orrs	r3, r2
 8104ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	69ba      	ldr	r2, [r7, #24]
 8104ef8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	68db      	ldr	r3, [r3, #12]
 8104efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104f00:	69fb      	ldr	r3, [r7, #28]
 8104f02:	005b      	lsls	r3, r3, #1
 8104f04:	2203      	movs	r2, #3
 8104f06:	fa02 f303 	lsl.w	r3, r2, r3
 8104f0a:	43db      	mvns	r3, r3
 8104f0c:	69ba      	ldr	r2, [r7, #24]
 8104f0e:	4013      	ands	r3, r2
 8104f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104f12:	683b      	ldr	r3, [r7, #0]
 8104f14:	689a      	ldr	r2, [r3, #8]
 8104f16:	69fb      	ldr	r3, [r7, #28]
 8104f18:	005b      	lsls	r3, r3, #1
 8104f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8104f1e:	69ba      	ldr	r2, [r7, #24]
 8104f20:	4313      	orrs	r3, r2
 8104f22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	69ba      	ldr	r2, [r7, #24]
 8104f28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104f2a:	683b      	ldr	r3, [r7, #0]
 8104f2c:	685b      	ldr	r3, [r3, #4]
 8104f2e:	2b02      	cmp	r3, #2
 8104f30:	d003      	beq.n	8104f3a <HAL_GPIO_Init+0xee>
 8104f32:	683b      	ldr	r3, [r7, #0]
 8104f34:	685b      	ldr	r3, [r3, #4]
 8104f36:	2b12      	cmp	r3, #18
 8104f38:	d123      	bne.n	8104f82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104f3a:	69fb      	ldr	r3, [r7, #28]
 8104f3c:	08da      	lsrs	r2, r3, #3
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	3208      	adds	r2, #8
 8104f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104f48:	69fb      	ldr	r3, [r7, #28]
 8104f4a:	f003 0307 	and.w	r3, r3, #7
 8104f4e:	009b      	lsls	r3, r3, #2
 8104f50:	220f      	movs	r2, #15
 8104f52:	fa02 f303 	lsl.w	r3, r2, r3
 8104f56:	43db      	mvns	r3, r3
 8104f58:	69ba      	ldr	r2, [r7, #24]
 8104f5a:	4013      	ands	r3, r2
 8104f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104f5e:	683b      	ldr	r3, [r7, #0]
 8104f60:	691a      	ldr	r2, [r3, #16]
 8104f62:	69fb      	ldr	r3, [r7, #28]
 8104f64:	f003 0307 	and.w	r3, r3, #7
 8104f68:	009b      	lsls	r3, r3, #2
 8104f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8104f6e:	69ba      	ldr	r2, [r7, #24]
 8104f70:	4313      	orrs	r3, r2
 8104f72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104f74:	69fb      	ldr	r3, [r7, #28]
 8104f76:	08da      	lsrs	r2, r3, #3
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	3208      	adds	r2, #8
 8104f7c:	69b9      	ldr	r1, [r7, #24]
 8104f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104f88:	69fb      	ldr	r3, [r7, #28]
 8104f8a:	005b      	lsls	r3, r3, #1
 8104f8c:	2203      	movs	r2, #3
 8104f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8104f92:	43db      	mvns	r3, r3
 8104f94:	69ba      	ldr	r2, [r7, #24]
 8104f96:	4013      	ands	r3, r2
 8104f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104f9a:	683b      	ldr	r3, [r7, #0]
 8104f9c:	685b      	ldr	r3, [r3, #4]
 8104f9e:	f003 0203 	and.w	r2, r3, #3
 8104fa2:	69fb      	ldr	r3, [r7, #28]
 8104fa4:	005b      	lsls	r3, r3, #1
 8104fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8104faa:	69ba      	ldr	r2, [r7, #24]
 8104fac:	4313      	orrs	r3, r2
 8104fae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	69ba      	ldr	r2, [r7, #24]
 8104fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104fb6:	683b      	ldr	r3, [r7, #0]
 8104fb8:	685b      	ldr	r3, [r3, #4]
 8104fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104fbe:	2b00      	cmp	r3, #0
 8104fc0:	f000 80e0 	beq.w	8105184 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104fc4:	4b2f      	ldr	r3, [pc, #188]	; (8105084 <HAL_GPIO_Init+0x238>)
 8104fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104fca:	4a2e      	ldr	r2, [pc, #184]	; (8105084 <HAL_GPIO_Init+0x238>)
 8104fcc:	f043 0302 	orr.w	r3, r3, #2
 8104fd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104fd4:	4b2b      	ldr	r3, [pc, #172]	; (8105084 <HAL_GPIO_Init+0x238>)
 8104fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104fda:	f003 0302 	and.w	r3, r3, #2
 8104fde:	60fb      	str	r3, [r7, #12]
 8104fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104fe2:	4a29      	ldr	r2, [pc, #164]	; (8105088 <HAL_GPIO_Init+0x23c>)
 8104fe4:	69fb      	ldr	r3, [r7, #28]
 8104fe6:	089b      	lsrs	r3, r3, #2
 8104fe8:	3302      	adds	r3, #2
 8104fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104ff0:	69fb      	ldr	r3, [r7, #28]
 8104ff2:	f003 0303 	and.w	r3, r3, #3
 8104ff6:	009b      	lsls	r3, r3, #2
 8104ff8:	220f      	movs	r2, #15
 8104ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8104ffe:	43db      	mvns	r3, r3
 8105000:	69ba      	ldr	r2, [r7, #24]
 8105002:	4013      	ands	r3, r2
 8105004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	4a20      	ldr	r2, [pc, #128]	; (810508c <HAL_GPIO_Init+0x240>)
 810500a:	4293      	cmp	r3, r2
 810500c:	d052      	beq.n	81050b4 <HAL_GPIO_Init+0x268>
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	4a1f      	ldr	r2, [pc, #124]	; (8105090 <HAL_GPIO_Init+0x244>)
 8105012:	4293      	cmp	r3, r2
 8105014:	d031      	beq.n	810507a <HAL_GPIO_Init+0x22e>
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	4a1e      	ldr	r2, [pc, #120]	; (8105094 <HAL_GPIO_Init+0x248>)
 810501a:	4293      	cmp	r3, r2
 810501c:	d02b      	beq.n	8105076 <HAL_GPIO_Init+0x22a>
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	4a1d      	ldr	r2, [pc, #116]	; (8105098 <HAL_GPIO_Init+0x24c>)
 8105022:	4293      	cmp	r3, r2
 8105024:	d025      	beq.n	8105072 <HAL_GPIO_Init+0x226>
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	4a1c      	ldr	r2, [pc, #112]	; (810509c <HAL_GPIO_Init+0x250>)
 810502a:	4293      	cmp	r3, r2
 810502c:	d01f      	beq.n	810506e <HAL_GPIO_Init+0x222>
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	4a1b      	ldr	r2, [pc, #108]	; (81050a0 <HAL_GPIO_Init+0x254>)
 8105032:	4293      	cmp	r3, r2
 8105034:	d019      	beq.n	810506a <HAL_GPIO_Init+0x21e>
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	4a1a      	ldr	r2, [pc, #104]	; (81050a4 <HAL_GPIO_Init+0x258>)
 810503a:	4293      	cmp	r3, r2
 810503c:	d013      	beq.n	8105066 <HAL_GPIO_Init+0x21a>
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	4a19      	ldr	r2, [pc, #100]	; (81050a8 <HAL_GPIO_Init+0x25c>)
 8105042:	4293      	cmp	r3, r2
 8105044:	d00d      	beq.n	8105062 <HAL_GPIO_Init+0x216>
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	4a18      	ldr	r2, [pc, #96]	; (81050ac <HAL_GPIO_Init+0x260>)
 810504a:	4293      	cmp	r3, r2
 810504c:	d007      	beq.n	810505e <HAL_GPIO_Init+0x212>
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	4a17      	ldr	r2, [pc, #92]	; (81050b0 <HAL_GPIO_Init+0x264>)
 8105052:	4293      	cmp	r3, r2
 8105054:	d101      	bne.n	810505a <HAL_GPIO_Init+0x20e>
 8105056:	2309      	movs	r3, #9
 8105058:	e02d      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 810505a:	230a      	movs	r3, #10
 810505c:	e02b      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 810505e:	2308      	movs	r3, #8
 8105060:	e029      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 8105062:	2307      	movs	r3, #7
 8105064:	e027      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 8105066:	2306      	movs	r3, #6
 8105068:	e025      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 810506a:	2305      	movs	r3, #5
 810506c:	e023      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 810506e:	2304      	movs	r3, #4
 8105070:	e021      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 8105072:	2303      	movs	r3, #3
 8105074:	e01f      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 8105076:	2302      	movs	r3, #2
 8105078:	e01d      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 810507a:	2301      	movs	r3, #1
 810507c:	e01b      	b.n	81050b6 <HAL_GPIO_Init+0x26a>
 810507e:	bf00      	nop
 8105080:	580000c0 	.word	0x580000c0
 8105084:	58024400 	.word	0x58024400
 8105088:	58000400 	.word	0x58000400
 810508c:	58020000 	.word	0x58020000
 8105090:	58020400 	.word	0x58020400
 8105094:	58020800 	.word	0x58020800
 8105098:	58020c00 	.word	0x58020c00
 810509c:	58021000 	.word	0x58021000
 81050a0:	58021400 	.word	0x58021400
 81050a4:	58021800 	.word	0x58021800
 81050a8:	58021c00 	.word	0x58021c00
 81050ac:	58022000 	.word	0x58022000
 81050b0:	58022400 	.word	0x58022400
 81050b4:	2300      	movs	r3, #0
 81050b6:	69fa      	ldr	r2, [r7, #28]
 81050b8:	f002 0203 	and.w	r2, r2, #3
 81050bc:	0092      	lsls	r2, r2, #2
 81050be:	4093      	lsls	r3, r2
 81050c0:	69ba      	ldr	r2, [r7, #24]
 81050c2:	4313      	orrs	r3, r2
 81050c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81050c6:	4938      	ldr	r1, [pc, #224]	; (81051a8 <HAL_GPIO_Init+0x35c>)
 81050c8:	69fb      	ldr	r3, [r7, #28]
 81050ca:	089b      	lsrs	r3, r3, #2
 81050cc:	3302      	adds	r3, #2
 81050ce:	69ba      	ldr	r2, [r7, #24]
 81050d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81050d4:	697b      	ldr	r3, [r7, #20]
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81050da:	693b      	ldr	r3, [r7, #16]
 81050dc:	43db      	mvns	r3, r3
 81050de:	69ba      	ldr	r2, [r7, #24]
 81050e0:	4013      	ands	r3, r2
 81050e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81050e4:	683b      	ldr	r3, [r7, #0]
 81050e6:	685b      	ldr	r3, [r3, #4]
 81050e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	d003      	beq.n	81050f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81050f0:	69ba      	ldr	r2, [r7, #24]
 81050f2:	693b      	ldr	r3, [r7, #16]
 81050f4:	4313      	orrs	r3, r2
 81050f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81050f8:	697b      	ldr	r3, [r7, #20]
 81050fa:	69ba      	ldr	r2, [r7, #24]
 81050fc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81050fe:	697b      	ldr	r3, [r7, #20]
 8105100:	685b      	ldr	r3, [r3, #4]
 8105102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105104:	693b      	ldr	r3, [r7, #16]
 8105106:	43db      	mvns	r3, r3
 8105108:	69ba      	ldr	r2, [r7, #24]
 810510a:	4013      	ands	r3, r2
 810510c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810510e:	683b      	ldr	r3, [r7, #0]
 8105110:	685b      	ldr	r3, [r3, #4]
 8105112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105116:	2b00      	cmp	r3, #0
 8105118:	d003      	beq.n	8105122 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810511a:	69ba      	ldr	r2, [r7, #24]
 810511c:	693b      	ldr	r3, [r7, #16]
 810511e:	4313      	orrs	r3, r2
 8105120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105122:	697b      	ldr	r3, [r7, #20]
 8105124:	69ba      	ldr	r2, [r7, #24]
 8105126:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105130:	693b      	ldr	r3, [r7, #16]
 8105132:	43db      	mvns	r3, r3
 8105134:	69ba      	ldr	r2, [r7, #24]
 8105136:	4013      	ands	r3, r2
 8105138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810513a:	683b      	ldr	r3, [r7, #0]
 810513c:	685b      	ldr	r3, [r3, #4]
 810513e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105142:	2b00      	cmp	r3, #0
 8105144:	d003      	beq.n	810514e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8105146:	69ba      	ldr	r2, [r7, #24]
 8105148:	693b      	ldr	r3, [r7, #16]
 810514a:	4313      	orrs	r3, r2
 810514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810514e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105152:	69bb      	ldr	r3, [r7, #24]
 8105154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810515a:	685b      	ldr	r3, [r3, #4]
 810515c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810515e:	693b      	ldr	r3, [r7, #16]
 8105160:	43db      	mvns	r3, r3
 8105162:	69ba      	ldr	r2, [r7, #24]
 8105164:	4013      	ands	r3, r2
 8105166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8105168:	683b      	ldr	r3, [r7, #0]
 810516a:	685b      	ldr	r3, [r3, #4]
 810516c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105170:	2b00      	cmp	r3, #0
 8105172:	d003      	beq.n	810517c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8105174:	69ba      	ldr	r2, [r7, #24]
 8105176:	693b      	ldr	r3, [r7, #16]
 8105178:	4313      	orrs	r3, r2
 810517a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105180:	69bb      	ldr	r3, [r7, #24]
 8105182:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8105184:	69fb      	ldr	r3, [r7, #28]
 8105186:	3301      	adds	r3, #1
 8105188:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810518a:	683b      	ldr	r3, [r7, #0]
 810518c:	681a      	ldr	r2, [r3, #0]
 810518e:	69fb      	ldr	r3, [r7, #28]
 8105190:	fa22 f303 	lsr.w	r3, r2, r3
 8105194:	2b00      	cmp	r3, #0
 8105196:	f47f ae63 	bne.w	8104e60 <HAL_GPIO_Init+0x14>
  }
}
 810519a:	bf00      	nop
 810519c:	bf00      	nop
 810519e:	3724      	adds	r7, #36	; 0x24
 81051a0:	46bd      	mov	sp, r7
 81051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051a6:	4770      	bx	lr
 81051a8:	58000400 	.word	0x58000400

081051ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81051ac:	b480      	push	{r7}
 81051ae:	b083      	sub	sp, #12
 81051b0:	af00      	add	r7, sp, #0
 81051b2:	6078      	str	r0, [r7, #4]
 81051b4:	460b      	mov	r3, r1
 81051b6:	807b      	strh	r3, [r7, #2]
 81051b8:	4613      	mov	r3, r2
 81051ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81051bc:	787b      	ldrb	r3, [r7, #1]
 81051be:	2b00      	cmp	r3, #0
 81051c0:	d003      	beq.n	81051ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81051c2:	887a      	ldrh	r2, [r7, #2]
 81051c4:	687b      	ldr	r3, [r7, #4]
 81051c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81051c8:	e003      	b.n	81051d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81051ca:	887b      	ldrh	r3, [r7, #2]
 81051cc:	041a      	lsls	r2, r3, #16
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	619a      	str	r2, [r3, #24]
}
 81051d2:	bf00      	nop
 81051d4:	370c      	adds	r7, #12
 81051d6:	46bd      	mov	sp, r7
 81051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051dc:	4770      	bx	lr
	...

081051e0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81051e0:	b480      	push	{r7}
 81051e2:	b083      	sub	sp, #12
 81051e4:	af00      	add	r7, sp, #0
 81051e6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81051e8:	4b05      	ldr	r3, [pc, #20]	; (8105200 <HAL_HSEM_ActivateNotification+0x20>)
 81051ea:	681a      	ldr	r2, [r3, #0]
 81051ec:	4904      	ldr	r1, [pc, #16]	; (8105200 <HAL_HSEM_ActivateNotification+0x20>)
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	4313      	orrs	r3, r2
 81051f2:	600b      	str	r3, [r1, #0]
#endif
}
 81051f4:	bf00      	nop
 81051f6:	370c      	adds	r7, #12
 81051f8:	46bd      	mov	sp, r7
 81051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051fe:	4770      	bx	lr
 8105200:	58026510 	.word	0x58026510

08105204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8105204:	b580      	push	{r7, lr}
 8105206:	b082      	sub	sp, #8
 8105208:	af00      	add	r7, sp, #0
 810520a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	2b00      	cmp	r3, #0
 8105210:	d101      	bne.n	8105216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8105212:	2301      	movs	r3, #1
 8105214:	e081      	b.n	810531a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810521c:	b2db      	uxtb	r3, r3
 810521e:	2b00      	cmp	r3, #0
 8105220:	d106      	bne.n	8105230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	2200      	movs	r2, #0
 8105226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810522a:	6878      	ldr	r0, [r7, #4]
 810522c:	f7fb ff0c 	bl	8101048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	2224      	movs	r2, #36	; 0x24
 8105234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	681b      	ldr	r3, [r3, #0]
 810523c:	681a      	ldr	r2, [r3, #0]
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	f022 0201 	bic.w	r2, r2, #1
 8105246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	685a      	ldr	r2, [r3, #4]
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8105254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	689a      	ldr	r2, [r3, #8]
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	68db      	ldr	r3, [r3, #12]
 810526a:	2b01      	cmp	r3, #1
 810526c:	d107      	bne.n	810527e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	689a      	ldr	r2, [r3, #8]
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810527a:	609a      	str	r2, [r3, #8]
 810527c:	e006      	b.n	810528c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810527e:	687b      	ldr	r3, [r7, #4]
 8105280:	689a      	ldr	r2, [r3, #8]
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810528a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	68db      	ldr	r3, [r3, #12]
 8105290:	2b02      	cmp	r3, #2
 8105292:	d104      	bne.n	810529e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	681b      	ldr	r3, [r3, #0]
 8105298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810529c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	681b      	ldr	r3, [r3, #0]
 81052a2:	685b      	ldr	r3, [r3, #4]
 81052a4:	687a      	ldr	r2, [r7, #4]
 81052a6:	6812      	ldr	r2, [r2, #0]
 81052a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81052ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81052b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	68da      	ldr	r2, [r3, #12]
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81052c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	691a      	ldr	r2, [r3, #16]
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	695b      	ldr	r3, [r3, #20]
 81052ca:	ea42 0103 	orr.w	r1, r2, r3
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	699b      	ldr	r3, [r3, #24]
 81052d2:	021a      	lsls	r2, r3, #8
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	430a      	orrs	r2, r1
 81052da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	69d9      	ldr	r1, [r3, #28]
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	6a1a      	ldr	r2, [r3, #32]
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	681b      	ldr	r3, [r3, #0]
 81052e8:	430a      	orrs	r2, r1
 81052ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	681a      	ldr	r2, [r3, #0]
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	f042 0201 	orr.w	r2, r2, #1
 81052fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	2200      	movs	r2, #0
 8105300:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	2220      	movs	r2, #32
 8105306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	2200      	movs	r2, #0
 810530e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	2200      	movs	r2, #0
 8105314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105318:	2300      	movs	r3, #0
}
 810531a:	4618      	mov	r0, r3
 810531c:	3708      	adds	r7, #8
 810531e:	46bd      	mov	sp, r7
 8105320:	bd80      	pop	{r7, pc}

08105322 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8105322:	b580      	push	{r7, lr}
 8105324:	b084      	sub	sp, #16
 8105326:	af00      	add	r7, sp, #0
 8105328:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	699b      	ldr	r3, [r3, #24]
 8105330:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810533e:	2b00      	cmp	r3, #0
 8105340:	d005      	beq.n	810534e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105346:	68ba      	ldr	r2, [r7, #8]
 8105348:	68f9      	ldr	r1, [r7, #12]
 810534a:	6878      	ldr	r0, [r7, #4]
 810534c:	4798      	blx	r3
  }
}
 810534e:	bf00      	nop
 8105350:	3710      	adds	r7, #16
 8105352:	46bd      	mov	sp, r7
 8105354:	bd80      	pop	{r7, pc}

08105356 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8105356:	b580      	push	{r7, lr}
 8105358:	b086      	sub	sp, #24
 810535a:	af00      	add	r7, sp, #0
 810535c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	699b      	ldr	r3, [r3, #24]
 8105364:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	681b      	ldr	r3, [r3, #0]
 810536c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810536e:	697b      	ldr	r3, [r7, #20]
 8105370:	0a1b      	lsrs	r3, r3, #8
 8105372:	f003 0301 	and.w	r3, r3, #1
 8105376:	2b00      	cmp	r3, #0
 8105378:	d010      	beq.n	810539c <HAL_I2C_ER_IRQHandler+0x46>
 810537a:	693b      	ldr	r3, [r7, #16]
 810537c:	09db      	lsrs	r3, r3, #7
 810537e:	f003 0301 	and.w	r3, r3, #1
 8105382:	2b00      	cmp	r3, #0
 8105384:	d00a      	beq.n	810539c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810538a:	f043 0201 	orr.w	r2, r3, #1
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	f44f 7280 	mov.w	r2, #256	; 0x100
 810539a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810539c:	697b      	ldr	r3, [r7, #20]
 810539e:	0a9b      	lsrs	r3, r3, #10
 81053a0:	f003 0301 	and.w	r3, r3, #1
 81053a4:	2b00      	cmp	r3, #0
 81053a6:	d010      	beq.n	81053ca <HAL_I2C_ER_IRQHandler+0x74>
 81053a8:	693b      	ldr	r3, [r7, #16]
 81053aa:	09db      	lsrs	r3, r3, #7
 81053ac:	f003 0301 	and.w	r3, r3, #1
 81053b0:	2b00      	cmp	r3, #0
 81053b2:	d00a      	beq.n	81053ca <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053b8:	f043 0208 	orr.w	r2, r3, #8
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81053c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81053ca:	697b      	ldr	r3, [r7, #20]
 81053cc:	0a5b      	lsrs	r3, r3, #9
 81053ce:	f003 0301 	and.w	r3, r3, #1
 81053d2:	2b00      	cmp	r3, #0
 81053d4:	d010      	beq.n	81053f8 <HAL_I2C_ER_IRQHandler+0xa2>
 81053d6:	693b      	ldr	r3, [r7, #16]
 81053d8:	09db      	lsrs	r3, r3, #7
 81053da:	f003 0301 	and.w	r3, r3, #1
 81053de:	2b00      	cmp	r3, #0
 81053e0:	d00a      	beq.n	81053f8 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053e6:	f043 0202 	orr.w	r2, r3, #2
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81053f6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 81053f8:	687b      	ldr	r3, [r7, #4]
 81053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81053fc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 81053fe:	68fb      	ldr	r3, [r7, #12]
 8105400:	f003 030b 	and.w	r3, r3, #11
 8105404:	2b00      	cmp	r3, #0
 8105406:	d003      	beq.n	8105410 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8105408:	68f9      	ldr	r1, [r7, #12]
 810540a:	6878      	ldr	r0, [r7, #4]
 810540c:	f000 fc78 	bl	8105d00 <I2C_ITError>
  }
}
 8105410:	bf00      	nop
 8105412:	3718      	adds	r7, #24
 8105414:	46bd      	mov	sp, r7
 8105416:	bd80      	pop	{r7, pc}

08105418 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8105418:	b480      	push	{r7}
 810541a:	b083      	sub	sp, #12
 810541c:	af00      	add	r7, sp, #0
 810541e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8105420:	bf00      	nop
 8105422:	370c      	adds	r7, #12
 8105424:	46bd      	mov	sp, r7
 8105426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810542a:	4770      	bx	lr

0810542c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810542c:	b480      	push	{r7}
 810542e:	b083      	sub	sp, #12
 8105430:	af00      	add	r7, sp, #0
 8105432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8105434:	bf00      	nop
 8105436:	370c      	adds	r7, #12
 8105438:	46bd      	mov	sp, r7
 810543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810543e:	4770      	bx	lr

08105440 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8105440:	b480      	push	{r7}
 8105442:	b083      	sub	sp, #12
 8105444:	af00      	add	r7, sp, #0
 8105446:	6078      	str	r0, [r7, #4]
 8105448:	460b      	mov	r3, r1
 810544a:	70fb      	strb	r3, [r7, #3]
 810544c:	4613      	mov	r3, r2
 810544e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8105450:	bf00      	nop
 8105452:	370c      	adds	r7, #12
 8105454:	46bd      	mov	sp, r7
 8105456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810545a:	4770      	bx	lr

0810545c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810545c:	b480      	push	{r7}
 810545e:	b083      	sub	sp, #12
 8105460:	af00      	add	r7, sp, #0
 8105462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8105464:	bf00      	nop
 8105466:	370c      	adds	r7, #12
 8105468:	46bd      	mov	sp, r7
 810546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810546e:	4770      	bx	lr

08105470 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8105470:	b480      	push	{r7}
 8105472:	b083      	sub	sp, #12
 8105474:	af00      	add	r7, sp, #0
 8105476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8105478:	bf00      	nop
 810547a:	370c      	adds	r7, #12
 810547c:	46bd      	mov	sp, r7
 810547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105482:	4770      	bx	lr

08105484 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8105484:	b480      	push	{r7}
 8105486:	b083      	sub	sp, #12
 8105488:	af00      	add	r7, sp, #0
 810548a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 810548c:	bf00      	nop
 810548e:	370c      	adds	r7, #12
 8105490:	46bd      	mov	sp, r7
 8105492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105496:	4770      	bx	lr

08105498 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8105498:	b580      	push	{r7, lr}
 810549a:	b086      	sub	sp, #24
 810549c:	af00      	add	r7, sp, #0
 810549e:	60f8      	str	r0, [r7, #12]
 81054a0:	60b9      	str	r1, [r7, #8]
 81054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81054a4:	68fb      	ldr	r3, [r7, #12]
 81054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 81054aa:	68bb      	ldr	r3, [r7, #8]
 81054ac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 81054ae:	68fb      	ldr	r3, [r7, #12]
 81054b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81054b4:	2b01      	cmp	r3, #1
 81054b6:	d101      	bne.n	81054bc <I2C_Slave_ISR_IT+0x24>
 81054b8:	2302      	movs	r3, #2
 81054ba:	e0ec      	b.n	8105696 <I2C_Slave_ISR_IT+0x1fe>
 81054bc:	68fb      	ldr	r3, [r7, #12]
 81054be:	2201      	movs	r2, #1
 81054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81054c4:	693b      	ldr	r3, [r7, #16]
 81054c6:	095b      	lsrs	r3, r3, #5
 81054c8:	f003 0301 	and.w	r3, r3, #1
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d009      	beq.n	81054e4 <I2C_Slave_ISR_IT+0x4c>
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	095b      	lsrs	r3, r3, #5
 81054d4:	f003 0301 	and.w	r3, r3, #1
 81054d8:	2b00      	cmp	r3, #0
 81054da:	d003      	beq.n	81054e4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81054dc:	6939      	ldr	r1, [r7, #16]
 81054de:	68f8      	ldr	r0, [r7, #12]
 81054e0:	f000 f9c0 	bl	8105864 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81054e4:	693b      	ldr	r3, [r7, #16]
 81054e6:	091b      	lsrs	r3, r3, #4
 81054e8:	f003 0301 	and.w	r3, r3, #1
 81054ec:	2b00      	cmp	r3, #0
 81054ee:	d04d      	beq.n	810558c <I2C_Slave_ISR_IT+0xf4>
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	091b      	lsrs	r3, r3, #4
 81054f4:	f003 0301 	and.w	r3, r3, #1
 81054f8:	2b00      	cmp	r3, #0
 81054fa:	d047      	beq.n	810558c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81054fc:	68fb      	ldr	r3, [r7, #12]
 81054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105500:	b29b      	uxth	r3, r3
 8105502:	2b00      	cmp	r3, #0
 8105504:	d128      	bne.n	8105558 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8105506:	68fb      	ldr	r3, [r7, #12]
 8105508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810550c:	b2db      	uxtb	r3, r3
 810550e:	2b28      	cmp	r3, #40	; 0x28
 8105510:	d108      	bne.n	8105524 <I2C_Slave_ISR_IT+0x8c>
 8105512:	697b      	ldr	r3, [r7, #20]
 8105514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105518:	d104      	bne.n	8105524 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 810551a:	6939      	ldr	r1, [r7, #16]
 810551c:	68f8      	ldr	r0, [r7, #12]
 810551e:	f000 fb99 	bl	8105c54 <I2C_ITListenCplt>
 8105522:	e032      	b.n	810558a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8105524:	68fb      	ldr	r3, [r7, #12]
 8105526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810552a:	b2db      	uxtb	r3, r3
 810552c:	2b29      	cmp	r3, #41	; 0x29
 810552e:	d10e      	bne.n	810554e <I2C_Slave_ISR_IT+0xb6>
 8105530:	697b      	ldr	r3, [r7, #20]
 8105532:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8105536:	d00a      	beq.n	810554e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105538:	68fb      	ldr	r3, [r7, #12]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	2210      	movs	r2, #16
 810553e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8105540:	68f8      	ldr	r0, [r7, #12]
 8105542:	f000 fcd4 	bl	8105eee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8105546:	68f8      	ldr	r0, [r7, #12]
 8105548:	f000 f92d 	bl	81057a6 <I2C_ITSlaveSeqCplt>
 810554c:	e01d      	b.n	810558a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	2210      	movs	r2, #16
 8105554:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8105556:	e096      	b.n	8105686 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105558:	68fb      	ldr	r3, [r7, #12]
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	2210      	movs	r2, #16
 810555e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105564:	f043 0204 	orr.w	r2, r3, #4
 8105568:	68fb      	ldr	r3, [r7, #12]
 810556a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810556c:	697b      	ldr	r3, [r7, #20]
 810556e:	2b00      	cmp	r3, #0
 8105570:	d004      	beq.n	810557c <I2C_Slave_ISR_IT+0xe4>
 8105572:	697b      	ldr	r3, [r7, #20]
 8105574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105578:	f040 8085 	bne.w	8105686 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 810557c:	68fb      	ldr	r3, [r7, #12]
 810557e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105580:	4619      	mov	r1, r3
 8105582:	68f8      	ldr	r0, [r7, #12]
 8105584:	f000 fbbc 	bl	8105d00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8105588:	e07d      	b.n	8105686 <I2C_Slave_ISR_IT+0x1ee>
 810558a:	e07c      	b.n	8105686 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 810558c:	693b      	ldr	r3, [r7, #16]
 810558e:	089b      	lsrs	r3, r3, #2
 8105590:	f003 0301 	and.w	r3, r3, #1
 8105594:	2b00      	cmp	r3, #0
 8105596:	d030      	beq.n	81055fa <I2C_Slave_ISR_IT+0x162>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	089b      	lsrs	r3, r3, #2
 810559c:	f003 0301 	and.w	r3, r3, #1
 81055a0:	2b00      	cmp	r3, #0
 81055a2:	d02a      	beq.n	81055fa <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 81055a4:	68fb      	ldr	r3, [r7, #12]
 81055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055a8:	b29b      	uxth	r3, r3
 81055aa:	2b00      	cmp	r3, #0
 81055ac:	d018      	beq.n	81055e0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81055ae:	68fb      	ldr	r3, [r7, #12]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81055b8:	b2d2      	uxtb	r2, r2
 81055ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81055c0:	1c5a      	adds	r2, r3, #1
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055ca:	3b01      	subs	r3, #1
 81055cc:	b29a      	uxth	r2, r3
 81055ce:	68fb      	ldr	r3, [r7, #12]
 81055d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81055d2:	68fb      	ldr	r3, [r7, #12]
 81055d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055d6:	b29b      	uxth	r3, r3
 81055d8:	3b01      	subs	r3, #1
 81055da:	b29a      	uxth	r2, r3
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 81055e0:	68fb      	ldr	r3, [r7, #12]
 81055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055e4:	b29b      	uxth	r3, r3
 81055e6:	2b00      	cmp	r3, #0
 81055e8:	d14f      	bne.n	810568a <I2C_Slave_ISR_IT+0x1f2>
 81055ea:	697b      	ldr	r3, [r7, #20]
 81055ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81055f0:	d04b      	beq.n	810568a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 81055f2:	68f8      	ldr	r0, [r7, #12]
 81055f4:	f000 f8d7 	bl	81057a6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 81055f8:	e047      	b.n	810568a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81055fa:	693b      	ldr	r3, [r7, #16]
 81055fc:	08db      	lsrs	r3, r3, #3
 81055fe:	f003 0301 	and.w	r3, r3, #1
 8105602:	2b00      	cmp	r3, #0
 8105604:	d00a      	beq.n	810561c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	08db      	lsrs	r3, r3, #3
 810560a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810560e:	2b00      	cmp	r3, #0
 8105610:	d004      	beq.n	810561c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8105612:	6939      	ldr	r1, [r7, #16]
 8105614:	68f8      	ldr	r0, [r7, #12]
 8105616:	f000 f842 	bl	810569e <I2C_ITAddrCplt>
 810561a:	e037      	b.n	810568c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 810561c:	693b      	ldr	r3, [r7, #16]
 810561e:	085b      	lsrs	r3, r3, #1
 8105620:	f003 0301 	and.w	r3, r3, #1
 8105624:	2b00      	cmp	r3, #0
 8105626:	d031      	beq.n	810568c <I2C_Slave_ISR_IT+0x1f4>
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	085b      	lsrs	r3, r3, #1
 810562c:	f003 0301 	and.w	r3, r3, #1
 8105630:	2b00      	cmp	r3, #0
 8105632:	d02b      	beq.n	810568c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8105634:	68fb      	ldr	r3, [r7, #12]
 8105636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105638:	b29b      	uxth	r3, r3
 810563a:	2b00      	cmp	r3, #0
 810563c:	d018      	beq.n	8105670 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810563e:	68fb      	ldr	r3, [r7, #12]
 8105640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105642:	781a      	ldrb	r2, [r3, #0]
 8105644:	68fb      	ldr	r3, [r7, #12]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810564a:	68fb      	ldr	r3, [r7, #12]
 810564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810564e:	1c5a      	adds	r2, r3, #1
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105654:	68fb      	ldr	r3, [r7, #12]
 8105656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105658:	b29b      	uxth	r3, r3
 810565a:	3b01      	subs	r3, #1
 810565c:	b29a      	uxth	r2, r3
 810565e:	68fb      	ldr	r3, [r7, #12]
 8105660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8105662:	68fb      	ldr	r3, [r7, #12]
 8105664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105666:	3b01      	subs	r3, #1
 8105668:	b29a      	uxth	r2, r3
 810566a:	68fb      	ldr	r3, [r7, #12]
 810566c:	851a      	strh	r2, [r3, #40]	; 0x28
 810566e:	e00d      	b.n	810568c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8105670:	697b      	ldr	r3, [r7, #20]
 8105672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105676:	d002      	beq.n	810567e <I2C_Slave_ISR_IT+0x1e6>
 8105678:	697b      	ldr	r3, [r7, #20]
 810567a:	2b00      	cmp	r3, #0
 810567c:	d106      	bne.n	810568c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 810567e:	68f8      	ldr	r0, [r7, #12]
 8105680:	f000 f891 	bl	81057a6 <I2C_ITSlaveSeqCplt>
 8105684:	e002      	b.n	810568c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8105686:	bf00      	nop
 8105688:	e000      	b.n	810568c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 810568a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810568c:	68fb      	ldr	r3, [r7, #12]
 810568e:	2200      	movs	r2, #0
 8105690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8105694:	2300      	movs	r3, #0
}
 8105696:	4618      	mov	r0, r3
 8105698:	3718      	adds	r7, #24
 810569a:	46bd      	mov	sp, r7
 810569c:	bd80      	pop	{r7, pc}

0810569e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810569e:	b580      	push	{r7, lr}
 81056a0:	b084      	sub	sp, #16
 81056a2:	af00      	add	r7, sp, #0
 81056a4:	6078      	str	r0, [r7, #4]
 81056a6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81056ae:	b2db      	uxtb	r3, r3
 81056b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81056b4:	2b28      	cmp	r3, #40	; 0x28
 81056b6:	d16a      	bne.n	810578e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	681b      	ldr	r3, [r3, #0]
 81056bc:	699b      	ldr	r3, [r3, #24]
 81056be:	0c1b      	lsrs	r3, r3, #16
 81056c0:	b2db      	uxtb	r3, r3
 81056c2:	f003 0301 	and.w	r3, r3, #1
 81056c6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	699b      	ldr	r3, [r3, #24]
 81056ce:	0c1b      	lsrs	r3, r3, #16
 81056d0:	b29b      	uxth	r3, r3
 81056d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81056d6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	681b      	ldr	r3, [r3, #0]
 81056dc:	689b      	ldr	r3, [r3, #8]
 81056de:	b29b      	uxth	r3, r3
 81056e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81056e4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	68db      	ldr	r3, [r3, #12]
 81056ec:	b29b      	uxth	r3, r3
 81056ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81056f2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	68db      	ldr	r3, [r3, #12]
 81056f8:	2b02      	cmp	r3, #2
 81056fa:	d138      	bne.n	810576e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81056fc:	897b      	ldrh	r3, [r7, #10]
 81056fe:	09db      	lsrs	r3, r3, #7
 8105700:	b29a      	uxth	r2, r3
 8105702:	89bb      	ldrh	r3, [r7, #12]
 8105704:	4053      	eors	r3, r2
 8105706:	b29b      	uxth	r3, r3
 8105708:	f003 0306 	and.w	r3, r3, #6
 810570c:	2b00      	cmp	r3, #0
 810570e:	d11c      	bne.n	810574a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8105710:	897b      	ldrh	r3, [r7, #10]
 8105712:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105718:	1c5a      	adds	r2, r3, #1
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105722:	2b02      	cmp	r3, #2
 8105724:	d13b      	bne.n	810579e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	2200      	movs	r2, #0
 810572a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	2208      	movs	r2, #8
 8105732:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	2200      	movs	r2, #0
 8105738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810573c:	89ba      	ldrh	r2, [r7, #12]
 810573e:	7bfb      	ldrb	r3, [r7, #15]
 8105740:	4619      	mov	r1, r3
 8105742:	6878      	ldr	r0, [r7, #4]
 8105744:	f7ff fe7c 	bl	8105440 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8105748:	e029      	b.n	810579e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 810574a:	893b      	ldrh	r3, [r7, #8]
 810574c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810574e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105752:	6878      	ldr	r0, [r7, #4]
 8105754:	f000 fc0d 	bl	8105f72 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8105758:	687b      	ldr	r3, [r7, #4]
 810575a:	2200      	movs	r2, #0
 810575c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8105760:	89ba      	ldrh	r2, [r7, #12]
 8105762:	7bfb      	ldrb	r3, [r7, #15]
 8105764:	4619      	mov	r1, r3
 8105766:	6878      	ldr	r0, [r7, #4]
 8105768:	f7ff fe6a 	bl	8105440 <HAL_I2C_AddrCallback>
}
 810576c:	e017      	b.n	810579e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 810576e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105772:	6878      	ldr	r0, [r7, #4]
 8105774:	f000 fbfd 	bl	8105f72 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8105778:	687b      	ldr	r3, [r7, #4]
 810577a:	2200      	movs	r2, #0
 810577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8105780:	89ba      	ldrh	r2, [r7, #12]
 8105782:	7bfb      	ldrb	r3, [r7, #15]
 8105784:	4619      	mov	r1, r3
 8105786:	6878      	ldr	r0, [r7, #4]
 8105788:	f7ff fe5a 	bl	8105440 <HAL_I2C_AddrCallback>
}
 810578c:	e007      	b.n	810579e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	2208      	movs	r2, #8
 8105794:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	2200      	movs	r2, #0
 810579a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 810579e:	bf00      	nop
 81057a0:	3710      	adds	r7, #16
 81057a2:	46bd      	mov	sp, r7
 81057a4:	bd80      	pop	{r7, pc}

081057a6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 81057a6:	b580      	push	{r7, lr}
 81057a8:	b084      	sub	sp, #16
 81057aa:	af00      	add	r7, sp, #0
 81057ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	681b      	ldr	r3, [r3, #0]
 81057b4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	2200      	movs	r2, #0
 81057ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81057be:	68fb      	ldr	r3, [r7, #12]
 81057c0:	0b9b      	lsrs	r3, r3, #14
 81057c2:	f003 0301 	and.w	r3, r3, #1
 81057c6:	2b00      	cmp	r3, #0
 81057c8:	d008      	beq.n	81057dc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	681a      	ldr	r2, [r3, #0]
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	681b      	ldr	r3, [r3, #0]
 81057d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81057d8:	601a      	str	r2, [r3, #0]
 81057da:	e00d      	b.n	81057f8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81057dc:	68fb      	ldr	r3, [r7, #12]
 81057de:	0bdb      	lsrs	r3, r3, #15
 81057e0:	f003 0301 	and.w	r3, r3, #1
 81057e4:	2b00      	cmp	r3, #0
 81057e6:	d007      	beq.n	81057f8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	681a      	ldr	r2, [r3, #0]
 81057ee:	687b      	ldr	r3, [r7, #4]
 81057f0:	681b      	ldr	r3, [r3, #0]
 81057f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81057f6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 81057f8:	687b      	ldr	r3, [r7, #4]
 81057fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81057fe:	b2db      	uxtb	r3, r3
 8105800:	2b29      	cmp	r3, #41	; 0x29
 8105802:	d112      	bne.n	810582a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	2228      	movs	r2, #40	; 0x28
 8105808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810580c:	687b      	ldr	r3, [r7, #4]
 810580e:	2221      	movs	r2, #33	; 0x21
 8105810:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8105812:	2101      	movs	r1, #1
 8105814:	6878      	ldr	r0, [r7, #4]
 8105816:	f000 fbac 	bl	8105f72 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	2200      	movs	r2, #0
 810581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8105822:	6878      	ldr	r0, [r7, #4]
 8105824:	f7ff fdf8 	bl	8105418 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8105828:	e017      	b.n	810585a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105830:	b2db      	uxtb	r3, r3
 8105832:	2b2a      	cmp	r3, #42	; 0x2a
 8105834:	d111      	bne.n	810585a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	2228      	movs	r2, #40	; 0x28
 810583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	2222      	movs	r2, #34	; 0x22
 8105842:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8105844:	2102      	movs	r1, #2
 8105846:	6878      	ldr	r0, [r7, #4]
 8105848:	f000 fb93 	bl	8105f72 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	2200      	movs	r2, #0
 8105850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8105854:	6878      	ldr	r0, [r7, #4]
 8105856:	f7ff fde9 	bl	810542c <HAL_I2C_SlaveRxCpltCallback>
}
 810585a:	bf00      	nop
 810585c:	3710      	adds	r7, #16
 810585e:	46bd      	mov	sp, r7
 8105860:	bd80      	pop	{r7, pc}
	...

08105864 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8105864:	b580      	push	{r7, lr}
 8105866:	b086      	sub	sp, #24
 8105868:	af00      	add	r7, sp, #0
 810586a:	6078      	str	r0, [r7, #4]
 810586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8105876:	683b      	ldr	r3, [r7, #0]
 8105878:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105880:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	2220      	movs	r2, #32
 8105888:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810588a:	7bfb      	ldrb	r3, [r7, #15]
 810588c:	2b21      	cmp	r3, #33	; 0x21
 810588e:	d002      	beq.n	8105896 <I2C_ITSlaveCplt+0x32>
 8105890:	7bfb      	ldrb	r3, [r7, #15]
 8105892:	2b29      	cmp	r3, #41	; 0x29
 8105894:	d108      	bne.n	81058a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8105896:	f248 0101 	movw	r1, #32769	; 0x8001
 810589a:	6878      	ldr	r0, [r7, #4]
 810589c:	f000 fb69 	bl	8105f72 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	2221      	movs	r2, #33	; 0x21
 81058a4:	631a      	str	r2, [r3, #48]	; 0x30
 81058a6:	e00d      	b.n	81058c4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 81058a8:	7bfb      	ldrb	r3, [r7, #15]
 81058aa:	2b22      	cmp	r3, #34	; 0x22
 81058ac:	d002      	beq.n	81058b4 <I2C_ITSlaveCplt+0x50>
 81058ae:	7bfb      	ldrb	r3, [r7, #15]
 81058b0:	2b2a      	cmp	r3, #42	; 0x2a
 81058b2:	d107      	bne.n	81058c4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 81058b4:	f248 0102 	movw	r1, #32770	; 0x8002
 81058b8:	6878      	ldr	r0, [r7, #4]
 81058ba:	f000 fb5a 	bl	8105f72 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	2222      	movs	r2, #34	; 0x22
 81058c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	685a      	ldr	r2, [r3, #4]
 81058ca:	687b      	ldr	r3, [r7, #4]
 81058cc:	681b      	ldr	r3, [r3, #0]
 81058ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81058d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	681b      	ldr	r3, [r3, #0]
 81058d8:	6859      	ldr	r1, [r3, #4]
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	681a      	ldr	r2, [r3, #0]
 81058de:	4b80      	ldr	r3, [pc, #512]	; (8105ae0 <I2C_ITSlaveCplt+0x27c>)
 81058e0:	400b      	ands	r3, r1
 81058e2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 81058e4:	6878      	ldr	r0, [r7, #4]
 81058e6:	f000 fb02 	bl	8105eee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81058ea:	693b      	ldr	r3, [r7, #16]
 81058ec:	0b9b      	lsrs	r3, r3, #14
 81058ee:	f003 0301 	and.w	r3, r3, #1
 81058f2:	2b00      	cmp	r3, #0
 81058f4:	d07a      	beq.n	81059ec <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	681a      	ldr	r2, [r3, #0]
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105904:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810590a:	2b00      	cmp	r3, #0
 810590c:	f000 8111 	beq.w	8105b32 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	4a73      	ldr	r2, [pc, #460]	; (8105ae4 <I2C_ITSlaveCplt+0x280>)
 8105918:	4293      	cmp	r3, r2
 810591a:	d059      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105920:	681b      	ldr	r3, [r3, #0]
 8105922:	4a71      	ldr	r2, [pc, #452]	; (8105ae8 <I2C_ITSlaveCplt+0x284>)
 8105924:	4293      	cmp	r3, r2
 8105926:	d053      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	4a6f      	ldr	r2, [pc, #444]	; (8105aec <I2C_ITSlaveCplt+0x288>)
 8105930:	4293      	cmp	r3, r2
 8105932:	d04d      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105938:	681b      	ldr	r3, [r3, #0]
 810593a:	4a6d      	ldr	r2, [pc, #436]	; (8105af0 <I2C_ITSlaveCplt+0x28c>)
 810593c:	4293      	cmp	r3, r2
 810593e:	d047      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	4a6b      	ldr	r2, [pc, #428]	; (8105af4 <I2C_ITSlaveCplt+0x290>)
 8105948:	4293      	cmp	r3, r2
 810594a:	d041      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	4a69      	ldr	r2, [pc, #420]	; (8105af8 <I2C_ITSlaveCplt+0x294>)
 8105954:	4293      	cmp	r3, r2
 8105956:	d03b      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	4a67      	ldr	r2, [pc, #412]	; (8105afc <I2C_ITSlaveCplt+0x298>)
 8105960:	4293      	cmp	r3, r2
 8105962:	d035      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	4a65      	ldr	r2, [pc, #404]	; (8105b00 <I2C_ITSlaveCplt+0x29c>)
 810596c:	4293      	cmp	r3, r2
 810596e:	d02f      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105970:	687b      	ldr	r3, [r7, #4]
 8105972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105974:	681b      	ldr	r3, [r3, #0]
 8105976:	4a63      	ldr	r2, [pc, #396]	; (8105b04 <I2C_ITSlaveCplt+0x2a0>)
 8105978:	4293      	cmp	r3, r2
 810597a:	d029      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105980:	681b      	ldr	r3, [r3, #0]
 8105982:	4a61      	ldr	r2, [pc, #388]	; (8105b08 <I2C_ITSlaveCplt+0x2a4>)
 8105984:	4293      	cmp	r3, r2
 8105986:	d023      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105988:	687b      	ldr	r3, [r7, #4]
 810598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810598c:	681b      	ldr	r3, [r3, #0]
 810598e:	4a5f      	ldr	r2, [pc, #380]	; (8105b0c <I2C_ITSlaveCplt+0x2a8>)
 8105990:	4293      	cmp	r3, r2
 8105992:	d01d      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	4a5d      	ldr	r2, [pc, #372]	; (8105b10 <I2C_ITSlaveCplt+0x2ac>)
 810599c:	4293      	cmp	r3, r2
 810599e:	d017      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	4a5b      	ldr	r2, [pc, #364]	; (8105b14 <I2C_ITSlaveCplt+0x2b0>)
 81059a8:	4293      	cmp	r3, r2
 81059aa:	d011      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	4a59      	ldr	r2, [pc, #356]	; (8105b18 <I2C_ITSlaveCplt+0x2b4>)
 81059b4:	4293      	cmp	r3, r2
 81059b6:	d00b      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	4a57      	ldr	r2, [pc, #348]	; (8105b1c <I2C_ITSlaveCplt+0x2b8>)
 81059c0:	4293      	cmp	r3, r2
 81059c2:	d005      	beq.n	81059d0 <I2C_ITSlaveCplt+0x16c>
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059c8:	681b      	ldr	r3, [r3, #0]
 81059ca:	4a55      	ldr	r2, [pc, #340]	; (8105b20 <I2C_ITSlaveCplt+0x2bc>)
 81059cc:	4293      	cmp	r3, r2
 81059ce:	d105      	bne.n	81059dc <I2C_ITSlaveCplt+0x178>
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	685b      	ldr	r3, [r3, #4]
 81059d8:	b29b      	uxth	r3, r3
 81059da:	e004      	b.n	81059e6 <I2C_ITSlaveCplt+0x182>
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059e0:	681b      	ldr	r3, [r3, #0]
 81059e2:	685b      	ldr	r3, [r3, #4]
 81059e4:	b29b      	uxth	r3, r3
 81059e6:	687a      	ldr	r2, [r7, #4]
 81059e8:	8553      	strh	r3, [r2, #42]	; 0x2a
 81059ea:	e0a2      	b.n	8105b32 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81059ec:	693b      	ldr	r3, [r7, #16]
 81059ee:	0bdb      	lsrs	r3, r3, #15
 81059f0:	f003 0301 	and.w	r3, r3, #1
 81059f4:	2b00      	cmp	r3, #0
 81059f6:	f000 809c 	beq.w	8105b32 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	681a      	ldr	r2, [r3, #0]
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	681b      	ldr	r3, [r3, #0]
 8105a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105a08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	f000 808f 	beq.w	8105b32 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	4a32      	ldr	r2, [pc, #200]	; (8105ae4 <I2C_ITSlaveCplt+0x280>)
 8105a1c:	4293      	cmp	r3, r2
 8105a1e:	d059      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a20:	687b      	ldr	r3, [r7, #4]
 8105a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	4a30      	ldr	r2, [pc, #192]	; (8105ae8 <I2C_ITSlaveCplt+0x284>)
 8105a28:	4293      	cmp	r3, r2
 8105a2a:	d053      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	4a2e      	ldr	r2, [pc, #184]	; (8105aec <I2C_ITSlaveCplt+0x288>)
 8105a34:	4293      	cmp	r3, r2
 8105a36:	d04d      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	4a2c      	ldr	r2, [pc, #176]	; (8105af0 <I2C_ITSlaveCplt+0x28c>)
 8105a40:	4293      	cmp	r3, r2
 8105a42:	d047      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a48:	681b      	ldr	r3, [r3, #0]
 8105a4a:	4a2a      	ldr	r2, [pc, #168]	; (8105af4 <I2C_ITSlaveCplt+0x290>)
 8105a4c:	4293      	cmp	r3, r2
 8105a4e:	d041      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	4a28      	ldr	r2, [pc, #160]	; (8105af8 <I2C_ITSlaveCplt+0x294>)
 8105a58:	4293      	cmp	r3, r2
 8105a5a:	d03b      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	4a26      	ldr	r2, [pc, #152]	; (8105afc <I2C_ITSlaveCplt+0x298>)
 8105a64:	4293      	cmp	r3, r2
 8105a66:	d035      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	4a24      	ldr	r2, [pc, #144]	; (8105b00 <I2C_ITSlaveCplt+0x29c>)
 8105a70:	4293      	cmp	r3, r2
 8105a72:	d02f      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	4a22      	ldr	r2, [pc, #136]	; (8105b04 <I2C_ITSlaveCplt+0x2a0>)
 8105a7c:	4293      	cmp	r3, r2
 8105a7e:	d029      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a84:	681b      	ldr	r3, [r3, #0]
 8105a86:	4a20      	ldr	r2, [pc, #128]	; (8105b08 <I2C_ITSlaveCplt+0x2a4>)
 8105a88:	4293      	cmp	r3, r2
 8105a8a:	d023      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	4a1e      	ldr	r2, [pc, #120]	; (8105b0c <I2C_ITSlaveCplt+0x2a8>)
 8105a94:	4293      	cmp	r3, r2
 8105a96:	d01d      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	4a1c      	ldr	r2, [pc, #112]	; (8105b10 <I2C_ITSlaveCplt+0x2ac>)
 8105aa0:	4293      	cmp	r3, r2
 8105aa2:	d017      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4a1a      	ldr	r2, [pc, #104]	; (8105b14 <I2C_ITSlaveCplt+0x2b0>)
 8105aac:	4293      	cmp	r3, r2
 8105aae:	d011      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	4a18      	ldr	r2, [pc, #96]	; (8105b18 <I2C_ITSlaveCplt+0x2b4>)
 8105ab8:	4293      	cmp	r3, r2
 8105aba:	d00b      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	4a16      	ldr	r2, [pc, #88]	; (8105b1c <I2C_ITSlaveCplt+0x2b8>)
 8105ac4:	4293      	cmp	r3, r2
 8105ac6:	d005      	beq.n	8105ad4 <I2C_ITSlaveCplt+0x270>
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	4a14      	ldr	r2, [pc, #80]	; (8105b20 <I2C_ITSlaveCplt+0x2bc>)
 8105ad0:	4293      	cmp	r3, r2
 8105ad2:	d127      	bne.n	8105b24 <I2C_ITSlaveCplt+0x2c0>
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ad8:	681b      	ldr	r3, [r3, #0]
 8105ada:	685b      	ldr	r3, [r3, #4]
 8105adc:	b29b      	uxth	r3, r3
 8105ade:	e026      	b.n	8105b2e <I2C_ITSlaveCplt+0x2ca>
 8105ae0:	fe00e800 	.word	0xfe00e800
 8105ae4:	40020010 	.word	0x40020010
 8105ae8:	40020028 	.word	0x40020028
 8105aec:	40020040 	.word	0x40020040
 8105af0:	40020058 	.word	0x40020058
 8105af4:	40020070 	.word	0x40020070
 8105af8:	40020088 	.word	0x40020088
 8105afc:	400200a0 	.word	0x400200a0
 8105b00:	400200b8 	.word	0x400200b8
 8105b04:	40020410 	.word	0x40020410
 8105b08:	40020428 	.word	0x40020428
 8105b0c:	40020440 	.word	0x40020440
 8105b10:	40020458 	.word	0x40020458
 8105b14:	40020470 	.word	0x40020470
 8105b18:	40020488 	.word	0x40020488
 8105b1c:	400204a0 	.word	0x400204a0
 8105b20:	400204b8 	.word	0x400204b8
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105b28:	681b      	ldr	r3, [r3, #0]
 8105b2a:	685b      	ldr	r3, [r3, #4]
 8105b2c:	b29b      	uxth	r3, r3
 8105b2e:	687a      	ldr	r2, [r7, #4]
 8105b30:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8105b32:	697b      	ldr	r3, [r7, #20]
 8105b34:	089b      	lsrs	r3, r3, #2
 8105b36:	f003 0301 	and.w	r3, r3, #1
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d020      	beq.n	8105b80 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8105b3e:	697b      	ldr	r3, [r7, #20]
 8105b40:	f023 0304 	bic.w	r3, r3, #4
 8105b44:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105b50:	b2d2      	uxtb	r2, r2
 8105b52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105b58:	1c5a      	adds	r2, r3, #1
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b62:	2b00      	cmp	r3, #0
 8105b64:	d00c      	beq.n	8105b80 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b6a:	3b01      	subs	r3, #1
 8105b6c:	b29a      	uxth	r2, r3
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b76:	b29b      	uxth	r3, r3
 8105b78:	3b01      	subs	r3, #1
 8105b7a:	b29a      	uxth	r2, r3
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b84:	b29b      	uxth	r3, r3
 8105b86:	2b00      	cmp	r3, #0
 8105b88:	d005      	beq.n	8105b96 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b8e:	f043 0204 	orr.w	r2, r3, #4
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	2200      	movs	r2, #0
 8105b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	2200      	movs	r2, #0
 8105ba2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105ba8:	2b00      	cmp	r3, #0
 8105baa:	d010      	beq.n	8105bce <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105bb0:	4619      	mov	r1, r3
 8105bb2:	6878      	ldr	r0, [r7, #4]
 8105bb4:	f000 f8a4 	bl	8105d00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8105bb8:	687b      	ldr	r3, [r7, #4]
 8105bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105bbe:	b2db      	uxtb	r3, r3
 8105bc0:	2b28      	cmp	r3, #40	; 0x28
 8105bc2:	d141      	bne.n	8105c48 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8105bc4:	6979      	ldr	r1, [r7, #20]
 8105bc6:	6878      	ldr	r0, [r7, #4]
 8105bc8:	f000 f844 	bl	8105c54 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8105bcc:	e03c      	b.n	8105c48 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8105bd6:	d014      	beq.n	8105c02 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8105bd8:	6878      	ldr	r0, [r7, #4]
 8105bda:	f7ff fde4 	bl	81057a6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105bde:	687b      	ldr	r3, [r7, #4]
 8105be0:	4a1b      	ldr	r2, [pc, #108]	; (8105c50 <I2C_ITSlaveCplt+0x3ec>)
 8105be2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	2220      	movs	r2, #32
 8105be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	2200      	movs	r2, #0
 8105bf0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	2200      	movs	r2, #0
 8105bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8105bfa:	6878      	ldr	r0, [r7, #4]
 8105bfc:	f7ff fc2e 	bl	810545c <HAL_I2C_ListenCpltCallback>
}
 8105c00:	e022      	b.n	8105c48 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105c08:	b2db      	uxtb	r3, r3
 8105c0a:	2b22      	cmp	r3, #34	; 0x22
 8105c0c:	d10e      	bne.n	8105c2c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	2220      	movs	r2, #32
 8105c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	2200      	movs	r2, #0
 8105c1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	2200      	movs	r2, #0
 8105c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8105c24:	6878      	ldr	r0, [r7, #4]
 8105c26:	f7ff fc01 	bl	810542c <HAL_I2C_SlaveRxCpltCallback>
}
 8105c2a:	e00d      	b.n	8105c48 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	2220      	movs	r2, #32
 8105c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	2200      	movs	r2, #0
 8105c38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	2200      	movs	r2, #0
 8105c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8105c42:	6878      	ldr	r0, [r7, #4]
 8105c44:	f7ff fbe8 	bl	8105418 <HAL_I2C_SlaveTxCpltCallback>
}
 8105c48:	bf00      	nop
 8105c4a:	3718      	adds	r7, #24
 8105c4c:	46bd      	mov	sp, r7
 8105c4e:	bd80      	pop	{r7, pc}
 8105c50:	ffff0000 	.word	0xffff0000

08105c54 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8105c54:	b580      	push	{r7, lr}
 8105c56:	b082      	sub	sp, #8
 8105c58:	af00      	add	r7, sp, #0
 8105c5a:	6078      	str	r0, [r7, #4]
 8105c5c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	4a26      	ldr	r2, [pc, #152]	; (8105cfc <I2C_ITListenCplt+0xa8>)
 8105c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2200      	movs	r2, #0
 8105c68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	2220      	movs	r2, #32
 8105c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	2200      	movs	r2, #0
 8105c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	2200      	movs	r2, #0
 8105c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8105c80:	683b      	ldr	r3, [r7, #0]
 8105c82:	089b      	lsrs	r3, r3, #2
 8105c84:	f003 0301 	and.w	r3, r3, #1
 8105c88:	2b00      	cmp	r3, #0
 8105c8a:	d022      	beq.n	8105cd2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c96:	b2d2      	uxtb	r2, r2
 8105c98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c9e:	1c5a      	adds	r2, r3, #1
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105ca8:	2b00      	cmp	r3, #0
 8105caa:	d012      	beq.n	8105cd2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105cb0:	3b01      	subs	r3, #1
 8105cb2:	b29a      	uxth	r2, r3
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105cbc:	b29b      	uxth	r3, r3
 8105cbe:	3b01      	subs	r3, #1
 8105cc0:	b29a      	uxth	r2, r3
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105cca:	f043 0204 	orr.w	r2, r3, #4
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8105cd2:	f248 0103 	movw	r1, #32771	; 0x8003
 8105cd6:	6878      	ldr	r0, [r7, #4]
 8105cd8:	f000 f94b 	bl	8105f72 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105cdc:	687b      	ldr	r3, [r7, #4]
 8105cde:	681b      	ldr	r3, [r3, #0]
 8105ce0:	2210      	movs	r2, #16
 8105ce2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	2200      	movs	r2, #0
 8105ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8105cec:	6878      	ldr	r0, [r7, #4]
 8105cee:	f7ff fbb5 	bl	810545c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8105cf2:	bf00      	nop
 8105cf4:	3708      	adds	r7, #8
 8105cf6:	46bd      	mov	sp, r7
 8105cf8:	bd80      	pop	{r7, pc}
 8105cfa:	bf00      	nop
 8105cfc:	ffff0000 	.word	0xffff0000

08105d00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8105d00:	b580      	push	{r7, lr}
 8105d02:	b084      	sub	sp, #16
 8105d04:	af00      	add	r7, sp, #0
 8105d06:	6078      	str	r0, [r7, #4]
 8105d08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	2200      	movs	r2, #0
 8105d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	4a5d      	ldr	r2, [pc, #372]	; (8105e94 <I2C_ITError+0x194>)
 8105d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	2200      	movs	r2, #0
 8105d24:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8105d26:	687b      	ldr	r3, [r7, #4]
 8105d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105d2a:	683b      	ldr	r3, [r7, #0]
 8105d2c:	431a      	orrs	r2, r3
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8105d32:	7bfb      	ldrb	r3, [r7, #15]
 8105d34:	2b28      	cmp	r3, #40	; 0x28
 8105d36:	d005      	beq.n	8105d44 <I2C_ITError+0x44>
 8105d38:	7bfb      	ldrb	r3, [r7, #15]
 8105d3a:	2b29      	cmp	r3, #41	; 0x29
 8105d3c:	d002      	beq.n	8105d44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8105d3e:	7bfb      	ldrb	r3, [r7, #15]
 8105d40:	2b2a      	cmp	r3, #42	; 0x2a
 8105d42:	d10b      	bne.n	8105d5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8105d44:	2103      	movs	r1, #3
 8105d46:	6878      	ldr	r0, [r7, #4]
 8105d48:	f000 f913 	bl	8105f72 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	2228      	movs	r2, #40	; 0x28
 8105d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	4a50      	ldr	r2, [pc, #320]	; (8105e98 <I2C_ITError+0x198>)
 8105d58:	635a      	str	r2, [r3, #52]	; 0x34
 8105d5a:	e011      	b.n	8105d80 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8105d5c:	f248 0103 	movw	r1, #32771	; 0x8003
 8105d60:	6878      	ldr	r0, [r7, #4]
 8105d62:	f000 f906 	bl	8105f72 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105d6c:	b2db      	uxtb	r3, r3
 8105d6e:	2b60      	cmp	r3, #96	; 0x60
 8105d70:	d003      	beq.n	8105d7a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	2220      	movs	r2, #32
 8105d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	2200      	movs	r2, #0
 8105d7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d84:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d039      	beq.n	8105e02 <I2C_ITError+0x102>
 8105d8e:	68bb      	ldr	r3, [r7, #8]
 8105d90:	2b11      	cmp	r3, #17
 8105d92:	d002      	beq.n	8105d9a <I2C_ITError+0x9a>
 8105d94:	68bb      	ldr	r3, [r7, #8]
 8105d96:	2b21      	cmp	r3, #33	; 0x21
 8105d98:	d133      	bne.n	8105e02 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105da8:	d107      	bne.n	8105dba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	681a      	ldr	r2, [r3, #0]
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105db8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dbe:	4618      	mov	r0, r3
 8105dc0:	f7fe fc4e 	bl	8104660 <HAL_DMA_GetState>
 8105dc4:	4603      	mov	r3, r0
 8105dc6:	2b01      	cmp	r3, #1
 8105dc8:	d017      	beq.n	8105dfa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dce:	4a33      	ldr	r2, [pc, #204]	; (8105e9c <I2C_ITError+0x19c>)
 8105dd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	2200      	movs	r2, #0
 8105dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8105dda:	687b      	ldr	r3, [r7, #4]
 8105ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dde:	4618      	mov	r0, r3
 8105de0:	f7fd fad0 	bl	8103384 <HAL_DMA_Abort_IT>
 8105de4:	4603      	mov	r3, r0
 8105de6:	2b00      	cmp	r3, #0
 8105de8:	d04d      	beq.n	8105e86 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105df0:	687a      	ldr	r2, [r7, #4]
 8105df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8105df4:	4610      	mov	r0, r2
 8105df6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105df8:	e045      	b.n	8105e86 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8105dfa:	6878      	ldr	r0, [r7, #4]
 8105dfc:	f000 f850 	bl	8105ea0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105e00:	e041      	b.n	8105e86 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e06:	2b00      	cmp	r3, #0
 8105e08:	d039      	beq.n	8105e7e <I2C_ITError+0x17e>
 8105e0a:	68bb      	ldr	r3, [r7, #8]
 8105e0c:	2b12      	cmp	r3, #18
 8105e0e:	d002      	beq.n	8105e16 <I2C_ITError+0x116>
 8105e10:	68bb      	ldr	r3, [r7, #8]
 8105e12:	2b22      	cmp	r3, #34	; 0x22
 8105e14:	d133      	bne.n	8105e7e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	681b      	ldr	r3, [r3, #0]
 8105e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105e24:	d107      	bne.n	8105e36 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	681a      	ldr	r2, [r3, #0]
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105e34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e3a:	4618      	mov	r0, r3
 8105e3c:	f7fe fc10 	bl	8104660 <HAL_DMA_GetState>
 8105e40:	4603      	mov	r3, r0
 8105e42:	2b01      	cmp	r3, #1
 8105e44:	d017      	beq.n	8105e76 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e4a:	4a14      	ldr	r2, [pc, #80]	; (8105e9c <I2C_ITError+0x19c>)
 8105e4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	2200      	movs	r2, #0
 8105e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e5a:	4618      	mov	r0, r3
 8105e5c:	f7fd fa92 	bl	8103384 <HAL_DMA_Abort_IT>
 8105e60:	4603      	mov	r3, r0
 8105e62:	2b00      	cmp	r3, #0
 8105e64:	d011      	beq.n	8105e8a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e6c:	687a      	ldr	r2, [r7, #4]
 8105e6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8105e70:	4610      	mov	r0, r2
 8105e72:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e74:	e009      	b.n	8105e8a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8105e76:	6878      	ldr	r0, [r7, #4]
 8105e78:	f000 f812 	bl	8105ea0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e7c:	e005      	b.n	8105e8a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8105e7e:	6878      	ldr	r0, [r7, #4]
 8105e80:	f000 f80e 	bl	8105ea0 <I2C_TreatErrorCallback>
  }
}
 8105e84:	e002      	b.n	8105e8c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105e86:	bf00      	nop
 8105e88:	e000      	b.n	8105e8c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e8a:	bf00      	nop
}
 8105e8c:	bf00      	nop
 8105e8e:	3710      	adds	r7, #16
 8105e90:	46bd      	mov	sp, r7
 8105e92:	bd80      	pop	{r7, pc}
 8105e94:	ffff0000 	.word	0xffff0000
 8105e98:	08105499 	.word	0x08105499
 8105e9c:	08105f37 	.word	0x08105f37

08105ea0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8105ea0:	b580      	push	{r7, lr}
 8105ea2:	b082      	sub	sp, #8
 8105ea4:	af00      	add	r7, sp, #0
 8105ea6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105eae:	b2db      	uxtb	r3, r3
 8105eb0:	2b60      	cmp	r3, #96	; 0x60
 8105eb2:	d10e      	bne.n	8105ed2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	2220      	movs	r2, #32
 8105eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	2200      	movs	r2, #0
 8105ec0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	2200      	movs	r2, #0
 8105ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8105eca:	6878      	ldr	r0, [r7, #4]
 8105ecc:	f7ff fada 	bl	8105484 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8105ed0:	e009      	b.n	8105ee6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	2200      	movs	r2, #0
 8105ed6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105ed8:	687b      	ldr	r3, [r7, #4]
 8105eda:	2200      	movs	r2, #0
 8105edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8105ee0:	6878      	ldr	r0, [r7, #4]
 8105ee2:	f7ff fac5 	bl	8105470 <HAL_I2C_ErrorCallback>
}
 8105ee6:	bf00      	nop
 8105ee8:	3708      	adds	r7, #8
 8105eea:	46bd      	mov	sp, r7
 8105eec:	bd80      	pop	{r7, pc}

08105eee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105eee:	b480      	push	{r7}
 8105ef0:	b083      	sub	sp, #12
 8105ef2:	af00      	add	r7, sp, #0
 8105ef4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	699b      	ldr	r3, [r3, #24]
 8105efc:	f003 0302 	and.w	r3, r3, #2
 8105f00:	2b02      	cmp	r3, #2
 8105f02:	d103      	bne.n	8105f0c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	681b      	ldr	r3, [r3, #0]
 8105f08:	2200      	movs	r2, #0
 8105f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	681b      	ldr	r3, [r3, #0]
 8105f10:	699b      	ldr	r3, [r3, #24]
 8105f12:	f003 0301 	and.w	r3, r3, #1
 8105f16:	2b01      	cmp	r3, #1
 8105f18:	d007      	beq.n	8105f2a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	699a      	ldr	r2, [r3, #24]
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	681b      	ldr	r3, [r3, #0]
 8105f24:	f042 0201 	orr.w	r2, r2, #1
 8105f28:	619a      	str	r2, [r3, #24]
  }
}
 8105f2a:	bf00      	nop
 8105f2c:	370c      	adds	r7, #12
 8105f2e:	46bd      	mov	sp, r7
 8105f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f34:	4770      	bx	lr

08105f36 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8105f36:	b580      	push	{r7, lr}
 8105f38:	b084      	sub	sp, #16
 8105f3a:	af00      	add	r7, sp, #0
 8105f3c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105f42:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8105f44:	68fb      	ldr	r3, [r7, #12]
 8105f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105f48:	2b00      	cmp	r3, #0
 8105f4a:	d003      	beq.n	8105f54 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105f50:	2200      	movs	r2, #0
 8105f52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8105f54:	68fb      	ldr	r3, [r7, #12]
 8105f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f58:	2b00      	cmp	r3, #0
 8105f5a:	d003      	beq.n	8105f64 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8105f5c:	68fb      	ldr	r3, [r7, #12]
 8105f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f60:	2200      	movs	r2, #0
 8105f62:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8105f64:	68f8      	ldr	r0, [r7, #12]
 8105f66:	f7ff ff9b 	bl	8105ea0 <I2C_TreatErrorCallback>
}
 8105f6a:	bf00      	nop
 8105f6c:	3710      	adds	r7, #16
 8105f6e:	46bd      	mov	sp, r7
 8105f70:	bd80      	pop	{r7, pc}

08105f72 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8105f72:	b480      	push	{r7}
 8105f74:	b085      	sub	sp, #20
 8105f76:	af00      	add	r7, sp, #0
 8105f78:	6078      	str	r0, [r7, #4]
 8105f7a:	460b      	mov	r3, r1
 8105f7c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8105f7e:	2300      	movs	r3, #0
 8105f80:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8105f82:	887b      	ldrh	r3, [r7, #2]
 8105f84:	f003 0301 	and.w	r3, r3, #1
 8105f88:	2b00      	cmp	r3, #0
 8105f8a:	d00f      	beq.n	8105fac <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8105f8c:	68fb      	ldr	r3, [r7, #12]
 8105f8e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8105f92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105f9a:	b2db      	uxtb	r3, r3
 8105f9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8105fa0:	2b28      	cmp	r3, #40	; 0x28
 8105fa2:	d003      	beq.n	8105fac <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8105faa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8105fac:	887b      	ldrh	r3, [r7, #2]
 8105fae:	f003 0302 	and.w	r3, r3, #2
 8105fb2:	2b00      	cmp	r3, #0
 8105fb4:	d00f      	beq.n	8105fd6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8105fb6:	68fb      	ldr	r3, [r7, #12]
 8105fb8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8105fbc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105fc4:	b2db      	uxtb	r3, r3
 8105fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8105fca:	2b28      	cmp	r3, #40	; 0x28
 8105fcc:	d003      	beq.n	8105fd6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8105fce:	68fb      	ldr	r3, [r7, #12]
 8105fd0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8105fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8105fd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8105fda:	2b00      	cmp	r3, #0
 8105fdc:	da03      	bge.n	8105fe6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8105fde:	68fb      	ldr	r3, [r7, #12]
 8105fe0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8105fe4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8105fe6:	887b      	ldrh	r3, [r7, #2]
 8105fe8:	2b10      	cmp	r3, #16
 8105fea:	d103      	bne.n	8105ff4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8105fec:	68fb      	ldr	r3, [r7, #12]
 8105fee:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8105ff2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8105ff4:	887b      	ldrh	r3, [r7, #2]
 8105ff6:	2b20      	cmp	r3, #32
 8105ff8:	d103      	bne.n	8106002 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8105ffa:	68fb      	ldr	r3, [r7, #12]
 8105ffc:	f043 0320 	orr.w	r3, r3, #32
 8106000:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8106002:	887b      	ldrh	r3, [r7, #2]
 8106004:	2b40      	cmp	r3, #64	; 0x40
 8106006:	d103      	bne.n	8106010 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8106008:	68fb      	ldr	r3, [r7, #12]
 810600a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810600e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	681b      	ldr	r3, [r3, #0]
 8106014:	6819      	ldr	r1, [r3, #0]
 8106016:	68fb      	ldr	r3, [r7, #12]
 8106018:	43da      	mvns	r2, r3
 810601a:	687b      	ldr	r3, [r7, #4]
 810601c:	681b      	ldr	r3, [r3, #0]
 810601e:	400a      	ands	r2, r1
 8106020:	601a      	str	r2, [r3, #0]
}
 8106022:	bf00      	nop
 8106024:	3714      	adds	r7, #20
 8106026:	46bd      	mov	sp, r7
 8106028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810602c:	4770      	bx	lr

0810602e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810602e:	b480      	push	{r7}
 8106030:	b083      	sub	sp, #12
 8106032:	af00      	add	r7, sp, #0
 8106034:	6078      	str	r0, [r7, #4]
 8106036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810603e:	b2db      	uxtb	r3, r3
 8106040:	2b20      	cmp	r3, #32
 8106042:	d138      	bne.n	81060b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810604a:	2b01      	cmp	r3, #1
 810604c:	d101      	bne.n	8106052 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810604e:	2302      	movs	r3, #2
 8106050:	e032      	b.n	81060b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8106052:	687b      	ldr	r3, [r7, #4]
 8106054:	2201      	movs	r2, #1
 8106056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	2224      	movs	r2, #36	; 0x24
 810605e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	681a      	ldr	r2, [r3, #0]
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	f022 0201 	bic.w	r2, r2, #1
 8106070:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	681a      	ldr	r2, [r3, #0]
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8106080:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	681b      	ldr	r3, [r3, #0]
 8106086:	6819      	ldr	r1, [r3, #0]
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	683a      	ldr	r2, [r7, #0]
 810608e:	430a      	orrs	r2, r1
 8106090:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106092:	687b      	ldr	r3, [r7, #4]
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	681a      	ldr	r2, [r3, #0]
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	f042 0201 	orr.w	r2, r2, #1
 81060a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	2220      	movs	r2, #32
 81060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	2200      	movs	r2, #0
 81060ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81060b2:	2300      	movs	r3, #0
 81060b4:	e000      	b.n	81060b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81060b6:	2302      	movs	r3, #2
  }
}
 81060b8:	4618      	mov	r0, r3
 81060ba:	370c      	adds	r7, #12
 81060bc:	46bd      	mov	sp, r7
 81060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060c2:	4770      	bx	lr

081060c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81060c4:	b480      	push	{r7}
 81060c6:	b085      	sub	sp, #20
 81060c8:	af00      	add	r7, sp, #0
 81060ca:	6078      	str	r0, [r7, #4]
 81060cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81060d4:	b2db      	uxtb	r3, r3
 81060d6:	2b20      	cmp	r3, #32
 81060d8:	d139      	bne.n	810614e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81060e0:	2b01      	cmp	r3, #1
 81060e2:	d101      	bne.n	81060e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81060e4:	2302      	movs	r3, #2
 81060e6:	e033      	b.n	8106150 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	2201      	movs	r2, #1
 81060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	2224      	movs	r2, #36	; 0x24
 81060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	681b      	ldr	r3, [r3, #0]
 81060fc:	681a      	ldr	r2, [r3, #0]
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	f022 0201 	bic.w	r2, r2, #1
 8106106:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	681b      	ldr	r3, [r3, #0]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8106110:	68fb      	ldr	r3, [r7, #12]
 8106112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8106116:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8106118:	683b      	ldr	r3, [r7, #0]
 810611a:	021b      	lsls	r3, r3, #8
 810611c:	68fa      	ldr	r2, [r7, #12]
 810611e:	4313      	orrs	r3, r2
 8106120:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	681b      	ldr	r3, [r3, #0]
 8106126:	68fa      	ldr	r2, [r7, #12]
 8106128:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	681a      	ldr	r2, [r3, #0]
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	681b      	ldr	r3, [r3, #0]
 8106134:	f042 0201 	orr.w	r2, r2, #1
 8106138:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	2220      	movs	r2, #32
 810613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	2200      	movs	r2, #0
 8106146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810614a:	2300      	movs	r3, #0
 810614c:	e000      	b.n	8106150 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810614e:	2302      	movs	r3, #2
  }
}
 8106150:	4618      	mov	r0, r3
 8106152:	3714      	adds	r7, #20
 8106154:	46bd      	mov	sp, r7
 8106156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810615a:	4770      	bx	lr

0810615c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810615c:	b580      	push	{r7, lr}
 810615e:	b084      	sub	sp, #16
 8106160:	af00      	add	r7, sp, #0
 8106162:	60f8      	str	r0, [r7, #12]
 8106164:	460b      	mov	r3, r1
 8106166:	607a      	str	r2, [r7, #4]
 8106168:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810616a:	4b37      	ldr	r3, [pc, #220]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	f023 0201 	bic.w	r2, r3, #1
 8106172:	4935      	ldr	r1, [pc, #212]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106174:	68fb      	ldr	r3, [r7, #12]
 8106176:	4313      	orrs	r3, r2
 8106178:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	2b00      	cmp	r3, #0
 810617e:	d123      	bne.n	81061c8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106180:	f7fc f80a 	bl	8102198 <HAL_GetCurrentCPUID>
 8106184:	4603      	mov	r3, r0
 8106186:	2b03      	cmp	r3, #3
 8106188:	d158      	bne.n	810623c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810618a:	4b2f      	ldr	r3, [pc, #188]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 810618c:	691b      	ldr	r3, [r3, #16]
 810618e:	4a2e      	ldr	r2, [pc, #184]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106190:	f023 0301 	bic.w	r3, r3, #1
 8106194:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106196:	4b2d      	ldr	r3, [pc, #180]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106198:	691b      	ldr	r3, [r3, #16]
 810619a:	4a2c      	ldr	r2, [pc, #176]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810619c:	f043 0304 	orr.w	r3, r3, #4
 81061a0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81061a2:	f3bf 8f4f 	dsb	sy
}
 81061a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81061a8:	f3bf 8f6f 	isb	sy
}
 81061ac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81061ae:	7afb      	ldrb	r3, [r7, #11]
 81061b0:	2b01      	cmp	r3, #1
 81061b2:	d101      	bne.n	81061b8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81061b4:	bf30      	wfi
 81061b6:	e000      	b.n	81061ba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81061b8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061ba:	4b24      	ldr	r3, [pc, #144]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061bc:	691b      	ldr	r3, [r3, #16]
 81061be:	4a23      	ldr	r2, [pc, #140]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061c0:	f023 0304 	bic.w	r3, r3, #4
 81061c4:	6113      	str	r3, [r2, #16]
 81061c6:	e03c      	b.n	8106242 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	2b01      	cmp	r3, #1
 81061cc:	d123      	bne.n	8106216 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81061ce:	f7fb ffe3 	bl	8102198 <HAL_GetCurrentCPUID>
 81061d2:	4603      	mov	r3, r0
 81061d4:	2b01      	cmp	r3, #1
 81061d6:	d133      	bne.n	8106240 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81061d8:	4b1b      	ldr	r3, [pc, #108]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 81061da:	695b      	ldr	r3, [r3, #20]
 81061dc:	4a1a      	ldr	r2, [pc, #104]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 81061de:	f023 0302 	bic.w	r3, r3, #2
 81061e2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061e4:	4b19      	ldr	r3, [pc, #100]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061e6:	691b      	ldr	r3, [r3, #16]
 81061e8:	4a18      	ldr	r2, [pc, #96]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061ea:	f043 0304 	orr.w	r3, r3, #4
 81061ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81061f0:	f3bf 8f4f 	dsb	sy
}
 81061f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81061f6:	f3bf 8f6f 	isb	sy
}
 81061fa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81061fc:	7afb      	ldrb	r3, [r7, #11]
 81061fe:	2b01      	cmp	r3, #1
 8106200:	d101      	bne.n	8106206 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106202:	bf30      	wfi
 8106204:	e000      	b.n	8106208 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106206:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106208:	4b10      	ldr	r3, [pc, #64]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810620a:	691b      	ldr	r3, [r3, #16]
 810620c:	4a0f      	ldr	r2, [pc, #60]	; (810624c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810620e:	f023 0304 	bic.w	r3, r3, #4
 8106212:	6113      	str	r3, [r2, #16]
 8106214:	e015      	b.n	8106242 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106216:	f7fb ffbf 	bl	8102198 <HAL_GetCurrentCPUID>
 810621a:	4603      	mov	r3, r0
 810621c:	2b03      	cmp	r3, #3
 810621e:	d106      	bne.n	810622e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106220:	4b09      	ldr	r3, [pc, #36]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106222:	691b      	ldr	r3, [r3, #16]
 8106224:	4a08      	ldr	r2, [pc, #32]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106226:	f023 0304 	bic.w	r3, r3, #4
 810622a:	6113      	str	r3, [r2, #16]
 810622c:	e009      	b.n	8106242 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810622e:	4b06      	ldr	r3, [pc, #24]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106230:	695b      	ldr	r3, [r3, #20]
 8106232:	4a05      	ldr	r2, [pc, #20]	; (8106248 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106234:	f023 0304 	bic.w	r3, r3, #4
 8106238:	6153      	str	r3, [r2, #20]
 810623a:	e002      	b.n	8106242 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810623c:	bf00      	nop
 810623e:	e000      	b.n	8106242 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106240:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106242:	3710      	adds	r7, #16
 8106244:	46bd      	mov	sp, r7
 8106246:	bd80      	pop	{r7, pc}
 8106248:	58024800 	.word	0x58024800
 810624c:	e000ed00 	.word	0xe000ed00

08106250 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106250:	b580      	push	{r7, lr}
 8106252:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106254:	f7fb ffa0 	bl	8102198 <HAL_GetCurrentCPUID>
 8106258:	4603      	mov	r3, r0
 810625a:	2b03      	cmp	r3, #3
 810625c:	d101      	bne.n	8106262 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810625e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106260:	e001      	b.n	8106266 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106262:	bf40      	sev
    __WFE ();
 8106264:	bf20      	wfe
}
 8106266:	bf00      	nop
 8106268:	bd80      	pop	{r7, pc}
	...

0810626c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810626c:	b480      	push	{r7}
 810626e:	b089      	sub	sp, #36	; 0x24
 8106270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106272:	4bb3      	ldr	r3, [pc, #716]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106274:	691b      	ldr	r3, [r3, #16]
 8106276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810627a:	2b18      	cmp	r3, #24
 810627c:	f200 8155 	bhi.w	810652a <HAL_RCC_GetSysClockFreq+0x2be>
 8106280:	a201      	add	r2, pc, #4	; (adr r2, 8106288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8106282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106286:	bf00      	nop
 8106288:	081062ed 	.word	0x081062ed
 810628c:	0810652b 	.word	0x0810652b
 8106290:	0810652b 	.word	0x0810652b
 8106294:	0810652b 	.word	0x0810652b
 8106298:	0810652b 	.word	0x0810652b
 810629c:	0810652b 	.word	0x0810652b
 81062a0:	0810652b 	.word	0x0810652b
 81062a4:	0810652b 	.word	0x0810652b
 81062a8:	08106313 	.word	0x08106313
 81062ac:	0810652b 	.word	0x0810652b
 81062b0:	0810652b 	.word	0x0810652b
 81062b4:	0810652b 	.word	0x0810652b
 81062b8:	0810652b 	.word	0x0810652b
 81062bc:	0810652b 	.word	0x0810652b
 81062c0:	0810652b 	.word	0x0810652b
 81062c4:	0810652b 	.word	0x0810652b
 81062c8:	08106319 	.word	0x08106319
 81062cc:	0810652b 	.word	0x0810652b
 81062d0:	0810652b 	.word	0x0810652b
 81062d4:	0810652b 	.word	0x0810652b
 81062d8:	0810652b 	.word	0x0810652b
 81062dc:	0810652b 	.word	0x0810652b
 81062e0:	0810652b 	.word	0x0810652b
 81062e4:	0810652b 	.word	0x0810652b
 81062e8:	0810631f 	.word	0x0810631f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81062ec:	4b94      	ldr	r3, [pc, #592]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	f003 0320 	and.w	r3, r3, #32
 81062f4:	2b00      	cmp	r3, #0
 81062f6:	d009      	beq.n	810630c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81062f8:	4b91      	ldr	r3, [pc, #580]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	08db      	lsrs	r3, r3, #3
 81062fe:	f003 0303 	and.w	r3, r3, #3
 8106302:	4a90      	ldr	r2, [pc, #576]	; (8106544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106304:	fa22 f303 	lsr.w	r3, r2, r3
 8106308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810630a:	e111      	b.n	8106530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810630c:	4b8d      	ldr	r3, [pc, #564]	; (8106544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810630e:	61bb      	str	r3, [r7, #24]
    break;
 8106310:	e10e      	b.n	8106530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106312:	4b8d      	ldr	r3, [pc, #564]	; (8106548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106314:	61bb      	str	r3, [r7, #24]
    break;
 8106316:	e10b      	b.n	8106530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8106318:	4b8c      	ldr	r3, [pc, #560]	; (810654c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810631a:	61bb      	str	r3, [r7, #24]
    break;
 810631c:	e108      	b.n	8106530 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810631e:	4b88      	ldr	r3, [pc, #544]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106322:	f003 0303 	and.w	r3, r3, #3
 8106326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8106328:	4b85      	ldr	r3, [pc, #532]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810632c:	091b      	lsrs	r3, r3, #4
 810632e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106334:	4b82      	ldr	r3, [pc, #520]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106338:	f003 0301 	and.w	r3, r3, #1
 810633c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810633e:	4b80      	ldr	r3, [pc, #512]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106342:	08db      	lsrs	r3, r3, #3
 8106344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106348:	68fa      	ldr	r2, [r7, #12]
 810634a:	fb02 f303 	mul.w	r3, r2, r3
 810634e:	ee07 3a90 	vmov	s15, r3
 8106352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106356:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810635a:	693b      	ldr	r3, [r7, #16]
 810635c:	2b00      	cmp	r3, #0
 810635e:	f000 80e1 	beq.w	8106524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8106362:	697b      	ldr	r3, [r7, #20]
 8106364:	2b02      	cmp	r3, #2
 8106366:	f000 8083 	beq.w	8106470 <HAL_RCC_GetSysClockFreq+0x204>
 810636a:	697b      	ldr	r3, [r7, #20]
 810636c:	2b02      	cmp	r3, #2
 810636e:	f200 80a1 	bhi.w	81064b4 <HAL_RCC_GetSysClockFreq+0x248>
 8106372:	697b      	ldr	r3, [r7, #20]
 8106374:	2b00      	cmp	r3, #0
 8106376:	d003      	beq.n	8106380 <HAL_RCC_GetSysClockFreq+0x114>
 8106378:	697b      	ldr	r3, [r7, #20]
 810637a:	2b01      	cmp	r3, #1
 810637c:	d056      	beq.n	810642c <HAL_RCC_GetSysClockFreq+0x1c0>
 810637e:	e099      	b.n	81064b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106380:	4b6f      	ldr	r3, [pc, #444]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	f003 0320 	and.w	r3, r3, #32
 8106388:	2b00      	cmp	r3, #0
 810638a:	d02d      	beq.n	81063e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810638c:	4b6c      	ldr	r3, [pc, #432]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	08db      	lsrs	r3, r3, #3
 8106392:	f003 0303 	and.w	r3, r3, #3
 8106396:	4a6b      	ldr	r2, [pc, #428]	; (8106544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106398:	fa22 f303 	lsr.w	r3, r2, r3
 810639c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	ee07 3a90 	vmov	s15, r3
 81063a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063a8:	693b      	ldr	r3, [r7, #16]
 81063aa:	ee07 3a90 	vmov	s15, r3
 81063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063b6:	4b62      	ldr	r3, [pc, #392]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81063ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063be:	ee07 3a90 	vmov	s15, r3
 81063c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81063ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106550 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81063e6:	e087      	b.n	81064f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81063e8:	693b      	ldr	r3, [r7, #16]
 81063ea:	ee07 3a90 	vmov	s15, r3
 81063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106554 <HAL_RCC_GetSysClockFreq+0x2e8>
 81063f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063fa:	4b51      	ldr	r3, [pc, #324]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81063fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106402:	ee07 3a90 	vmov	s15, r3
 8106406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810640a:	ed97 6a02 	vldr	s12, [r7, #8]
 810640e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810641a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810641e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810642a:	e065      	b.n	81064f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810642c:	693b      	ldr	r3, [r7, #16]
 810642e:	ee07 3a90 	vmov	s15, r3
 8106432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8106558 <HAL_RCC_GetSysClockFreq+0x2ec>
 810643a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810643e:	4b40      	ldr	r3, [pc, #256]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106446:	ee07 3a90 	vmov	s15, r3
 810644a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810644e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810645a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810645e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106466:	ee67 7a27 	vmul.f32	s15, s14, s15
 810646a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810646e:	e043      	b.n	81064f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106470:	693b      	ldr	r3, [r7, #16]
 8106472:	ee07 3a90 	vmov	s15, r3
 8106476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810647a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810655c <HAL_RCC_GetSysClockFreq+0x2f0>
 810647e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106482:	4b2f      	ldr	r3, [pc, #188]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810648a:	ee07 3a90 	vmov	s15, r3
 810648e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106492:	ed97 6a02 	vldr	s12, [r7, #8]
 8106496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106550 <HAL_RCC_GetSysClockFreq+0x2e4>
 810649a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810649e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81064b2:	e021      	b.n	81064f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81064b4:	693b      	ldr	r3, [r7, #16]
 81064b6:	ee07 3a90 	vmov	s15, r3
 81064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8106558 <HAL_RCC_GetSysClockFreq+0x2ec>
 81064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064c6:	4b1e      	ldr	r3, [pc, #120]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064ce:	ee07 3a90 	vmov	s15, r3
 81064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81064da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106550 <HAL_RCC_GetSysClockFreq+0x2e4>
 81064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81064f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81064f8:	4b11      	ldr	r3, [pc, #68]	; (8106540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81064fc:	0a5b      	lsrs	r3, r3, #9
 81064fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106502:	3301      	adds	r3, #1
 8106504:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8106506:	683b      	ldr	r3, [r7, #0]
 8106508:	ee07 3a90 	vmov	s15, r3
 810650c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106510:	edd7 6a07 	vldr	s13, [r7, #28]
 8106514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810651c:	ee17 3a90 	vmov	r3, s15
 8106520:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106522:	e005      	b.n	8106530 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8106524:	2300      	movs	r3, #0
 8106526:	61bb      	str	r3, [r7, #24]
    break;
 8106528:	e002      	b.n	8106530 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810652a:	4b07      	ldr	r3, [pc, #28]	; (8106548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810652c:	61bb      	str	r3, [r7, #24]
    break;
 810652e:	bf00      	nop
  }

  return sysclockfreq;
 8106530:	69bb      	ldr	r3, [r7, #24]
}
 8106532:	4618      	mov	r0, r3
 8106534:	3724      	adds	r7, #36	; 0x24
 8106536:	46bd      	mov	sp, r7
 8106538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810653c:	4770      	bx	lr
 810653e:	bf00      	nop
 8106540:	58024400 	.word	0x58024400
 8106544:	03d09000 	.word	0x03d09000
 8106548:	003d0900 	.word	0x003d0900
 810654c:	00f42400 	.word	0x00f42400
 8106550:	46000000 	.word	0x46000000
 8106554:	4c742400 	.word	0x4c742400
 8106558:	4a742400 	.word	0x4a742400
 810655c:	4b742400 	.word	0x4b742400

08106560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106560:	b580      	push	{r7, lr}
 8106562:	b082      	sub	sp, #8
 8106564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106566:	f7ff fe81 	bl	810626c <HAL_RCC_GetSysClockFreq>
 810656a:	4602      	mov	r2, r0
 810656c:	4b11      	ldr	r3, [pc, #68]	; (81065b4 <HAL_RCC_GetHCLKFreq+0x54>)
 810656e:	699b      	ldr	r3, [r3, #24]
 8106570:	0a1b      	lsrs	r3, r3, #8
 8106572:	f003 030f 	and.w	r3, r3, #15
 8106576:	4910      	ldr	r1, [pc, #64]	; (81065b8 <HAL_RCC_GetHCLKFreq+0x58>)
 8106578:	5ccb      	ldrb	r3, [r1, r3]
 810657a:	f003 031f 	and.w	r3, r3, #31
 810657e:	fa22 f303 	lsr.w	r3, r2, r3
 8106582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106584:	4b0b      	ldr	r3, [pc, #44]	; (81065b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8106586:	699b      	ldr	r3, [r3, #24]
 8106588:	f003 030f 	and.w	r3, r3, #15
 810658c:	4a0a      	ldr	r2, [pc, #40]	; (81065b8 <HAL_RCC_GetHCLKFreq+0x58>)
 810658e:	5cd3      	ldrb	r3, [r2, r3]
 8106590:	f003 031f 	and.w	r3, r3, #31
 8106594:	687a      	ldr	r2, [r7, #4]
 8106596:	fa22 f303 	lsr.w	r3, r2, r3
 810659a:	4a08      	ldr	r2, [pc, #32]	; (81065bc <HAL_RCC_GetHCLKFreq+0x5c>)
 810659c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810659e:	4b07      	ldr	r3, [pc, #28]	; (81065bc <HAL_RCC_GetHCLKFreq+0x5c>)
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	4a07      	ldr	r2, [pc, #28]	; (81065c0 <HAL_RCC_GetHCLKFreq+0x60>)
 81065a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81065a6:	4b05      	ldr	r3, [pc, #20]	; (81065bc <HAL_RCC_GetHCLKFreq+0x5c>)
 81065a8:	681b      	ldr	r3, [r3, #0]
}
 81065aa:	4618      	mov	r0, r3
 81065ac:	3708      	adds	r7, #8
 81065ae:	46bd      	mov	sp, r7
 81065b0:	bd80      	pop	{r7, pc}
 81065b2:	bf00      	nop
 81065b4:	58024400 	.word	0x58024400
 81065b8:	0810a0e8 	.word	0x0810a0e8
 81065bc:	10000004 	.word	0x10000004
 81065c0:	10000000 	.word	0x10000000

081065c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81065c4:	b580      	push	{r7, lr}
 81065c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81065c8:	f7ff ffca 	bl	8106560 <HAL_RCC_GetHCLKFreq>
 81065cc:	4602      	mov	r2, r0
 81065ce:	4b06      	ldr	r3, [pc, #24]	; (81065e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81065d0:	69db      	ldr	r3, [r3, #28]
 81065d2:	091b      	lsrs	r3, r3, #4
 81065d4:	f003 0307 	and.w	r3, r3, #7
 81065d8:	4904      	ldr	r1, [pc, #16]	; (81065ec <HAL_RCC_GetPCLK1Freq+0x28>)
 81065da:	5ccb      	ldrb	r3, [r1, r3]
 81065dc:	f003 031f 	and.w	r3, r3, #31
 81065e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81065e4:	4618      	mov	r0, r3
 81065e6:	bd80      	pop	{r7, pc}
 81065e8:	58024400 	.word	0x58024400
 81065ec:	0810a0e8 	.word	0x0810a0e8

081065f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81065f0:	b580      	push	{r7, lr}
 81065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81065f4:	f7ff ffb4 	bl	8106560 <HAL_RCC_GetHCLKFreq>
 81065f8:	4602      	mov	r2, r0
 81065fa:	4b06      	ldr	r3, [pc, #24]	; (8106614 <HAL_RCC_GetPCLK2Freq+0x24>)
 81065fc:	69db      	ldr	r3, [r3, #28]
 81065fe:	0a1b      	lsrs	r3, r3, #8
 8106600:	f003 0307 	and.w	r3, r3, #7
 8106604:	4904      	ldr	r1, [pc, #16]	; (8106618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8106606:	5ccb      	ldrb	r3, [r1, r3]
 8106608:	f003 031f 	and.w	r3, r3, #31
 810660c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106610:	4618      	mov	r0, r3
 8106612:	bd80      	pop	{r7, pc}
 8106614:	58024400 	.word	0x58024400
 8106618:	0810a0e8 	.word	0x0810a0e8

0810661c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810661c:	b580      	push	{r7, lr}
 810661e:	b086      	sub	sp, #24
 8106620:	af00      	add	r7, sp, #0
 8106622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106624:	2300      	movs	r3, #0
 8106626:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106628:	2300      	movs	r3, #0
 810662a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810662c:	687b      	ldr	r3, [r7, #4]
 810662e:	681b      	ldr	r3, [r3, #0]
 8106630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106634:	2b00      	cmp	r3, #0
 8106636:	d03f      	beq.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810663c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106640:	d02a      	beq.n	8106698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8106642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106646:	d824      	bhi.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810664c:	d018      	beq.n	8106680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810664e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106652:	d81e      	bhi.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106654:	2b00      	cmp	r3, #0
 8106656:	d003      	beq.n	8106660 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8106658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810665c:	d007      	beq.n	810666e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810665e:	e018      	b.n	8106692 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106660:	4bab      	ldr	r3, [pc, #684]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106664:	4aaa      	ldr	r2, [pc, #680]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810666a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810666c:	e015      	b.n	810669a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	3304      	adds	r3, #4
 8106672:	2102      	movs	r1, #2
 8106674:	4618      	mov	r0, r3
 8106676:	f001 f9cf 	bl	8107a18 <RCCEx_PLL2_Config>
 810667a:	4603      	mov	r3, r0
 810667c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810667e:	e00c      	b.n	810669a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	3324      	adds	r3, #36	; 0x24
 8106684:	2102      	movs	r1, #2
 8106686:	4618      	mov	r0, r3
 8106688:	f001 fa78 	bl	8107b7c <RCCEx_PLL3_Config>
 810668c:	4603      	mov	r3, r0
 810668e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106690:	e003      	b.n	810669a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106692:	2301      	movs	r3, #1
 8106694:	75fb      	strb	r3, [r7, #23]
      break;
 8106696:	e000      	b.n	810669a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8106698:	bf00      	nop
    }

    if(ret == HAL_OK)
 810669a:	7dfb      	ldrb	r3, [r7, #23]
 810669c:	2b00      	cmp	r3, #0
 810669e:	d109      	bne.n	81066b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81066a0:	4b9b      	ldr	r3, [pc, #620]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81066ac:	4998      	ldr	r1, [pc, #608]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81066ae:	4313      	orrs	r3, r2
 81066b0:	650b      	str	r3, [r1, #80]	; 0x50
 81066b2:	e001      	b.n	81066b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066b4:	7dfb      	ldrb	r3, [r7, #23]
 81066b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	681b      	ldr	r3, [r3, #0]
 81066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	d03d      	beq.n	8106740 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066c8:	2b04      	cmp	r3, #4
 81066ca:	d826      	bhi.n	810671a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81066cc:	a201      	add	r2, pc, #4	; (adr r2, 81066d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066d2:	bf00      	nop
 81066d4:	081066e9 	.word	0x081066e9
 81066d8:	081066f7 	.word	0x081066f7
 81066dc:	08106709 	.word	0x08106709
 81066e0:	08106721 	.word	0x08106721
 81066e4:	08106721 	.word	0x08106721
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81066e8:	4b89      	ldr	r3, [pc, #548]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066ec:	4a88      	ldr	r2, [pc, #544]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81066ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81066f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81066f4:	e015      	b.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	3304      	adds	r3, #4
 81066fa:	2100      	movs	r1, #0
 81066fc:	4618      	mov	r0, r3
 81066fe:	f001 f98b 	bl	8107a18 <RCCEx_PLL2_Config>
 8106702:	4603      	mov	r3, r0
 8106704:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106706:	e00c      	b.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	3324      	adds	r3, #36	; 0x24
 810670c:	2100      	movs	r1, #0
 810670e:	4618      	mov	r0, r3
 8106710:	f001 fa34 	bl	8107b7c <RCCEx_PLL3_Config>
 8106714:	4603      	mov	r3, r0
 8106716:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106718:	e003      	b.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810671a:	2301      	movs	r3, #1
 810671c:	75fb      	strb	r3, [r7, #23]
      break;
 810671e:	e000      	b.n	8106722 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8106720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106722:	7dfb      	ldrb	r3, [r7, #23]
 8106724:	2b00      	cmp	r3, #0
 8106726:	d109      	bne.n	810673c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106728:	4b79      	ldr	r3, [pc, #484]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810672a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810672c:	f023 0207 	bic.w	r2, r3, #7
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106734:	4976      	ldr	r1, [pc, #472]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106736:	4313      	orrs	r3, r2
 8106738:	650b      	str	r3, [r1, #80]	; 0x50
 810673a:	e001      	b.n	8106740 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810673c:	7dfb      	ldrb	r3, [r7, #23]
 810673e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	681b      	ldr	r3, [r3, #0]
 8106744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106748:	2b00      	cmp	r3, #0
 810674a:	d042      	beq.n	81067d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106754:	d02b      	beq.n	81067ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8106756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810675a:	d825      	bhi.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810675c:	2bc0      	cmp	r3, #192	; 0xc0
 810675e:	d028      	beq.n	81067b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8106760:	2bc0      	cmp	r3, #192	; 0xc0
 8106762:	d821      	bhi.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8106764:	2b80      	cmp	r3, #128	; 0x80
 8106766:	d016      	beq.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8106768:	2b80      	cmp	r3, #128	; 0x80
 810676a:	d81d      	bhi.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810676c:	2b00      	cmp	r3, #0
 810676e:	d002      	beq.n	8106776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8106770:	2b40      	cmp	r3, #64	; 0x40
 8106772:	d007      	beq.n	8106784 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8106774:	e018      	b.n	81067a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106776:	4b66      	ldr	r3, [pc, #408]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810677a:	4a65      	ldr	r2, [pc, #404]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810677c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106780:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106782:	e017      	b.n	81067b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	3304      	adds	r3, #4
 8106788:	2100      	movs	r1, #0
 810678a:	4618      	mov	r0, r3
 810678c:	f001 f944 	bl	8107a18 <RCCEx_PLL2_Config>
 8106790:	4603      	mov	r3, r0
 8106792:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106794:	e00e      	b.n	81067b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106796:	687b      	ldr	r3, [r7, #4]
 8106798:	3324      	adds	r3, #36	; 0x24
 810679a:	2100      	movs	r1, #0
 810679c:	4618      	mov	r0, r3
 810679e:	f001 f9ed 	bl	8107b7c <RCCEx_PLL3_Config>
 81067a2:	4603      	mov	r3, r0
 81067a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81067a6:	e005      	b.n	81067b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81067a8:	2301      	movs	r3, #1
 81067aa:	75fb      	strb	r3, [r7, #23]
      break;
 81067ac:	e002      	b.n	81067b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81067ae:	bf00      	nop
 81067b0:	e000      	b.n	81067b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81067b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81067b4:	7dfb      	ldrb	r3, [r7, #23]
 81067b6:	2b00      	cmp	r3, #0
 81067b8:	d109      	bne.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81067ba:	4b55      	ldr	r3, [pc, #340]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81067c2:	687b      	ldr	r3, [r7, #4]
 81067c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067c6:	4952      	ldr	r1, [pc, #328]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81067c8:	4313      	orrs	r3, r2
 81067ca:	650b      	str	r3, [r1, #80]	; 0x50
 81067cc:	e001      	b.n	81067d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067ce:	7dfb      	ldrb	r3, [r7, #23]
 81067d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81067da:	2b00      	cmp	r3, #0
 81067dc:	d049      	beq.n	8106872 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81067e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81067e8:	d030      	beq.n	810684c <HAL_RCCEx_PeriphCLKConfig+0x230>
 81067ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81067ee:	d82a      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81067f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81067f4:	d02c      	beq.n	8106850 <HAL_RCCEx_PeriphCLKConfig+0x234>
 81067f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81067fa:	d824      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81067fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106800:	d018      	beq.n	8106834 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8106802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106806:	d81e      	bhi.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106808:	2b00      	cmp	r3, #0
 810680a:	d003      	beq.n	8106814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810680c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106810:	d007      	beq.n	8106822 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8106812:	e018      	b.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106814:	4b3e      	ldr	r3, [pc, #248]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106818:	4a3d      	ldr	r2, [pc, #244]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810681a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810681e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106820:	e017      	b.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	3304      	adds	r3, #4
 8106826:	2100      	movs	r1, #0
 8106828:	4618      	mov	r0, r3
 810682a:	f001 f8f5 	bl	8107a18 <RCCEx_PLL2_Config>
 810682e:	4603      	mov	r3, r0
 8106830:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8106832:	e00e      	b.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	3324      	adds	r3, #36	; 0x24
 8106838:	2100      	movs	r1, #0
 810683a:	4618      	mov	r0, r3
 810683c:	f001 f99e 	bl	8107b7c <RCCEx_PLL3_Config>
 8106840:	4603      	mov	r3, r0
 8106842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106844:	e005      	b.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8106846:	2301      	movs	r3, #1
 8106848:	75fb      	strb	r3, [r7, #23]
      break;
 810684a:	e002      	b.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810684c:	bf00      	nop
 810684e:	e000      	b.n	8106852 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8106850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106852:	7dfb      	ldrb	r3, [r7, #23]
 8106854:	2b00      	cmp	r3, #0
 8106856:	d10a      	bne.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106858:	4b2d      	ldr	r3, [pc, #180]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810685c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106866:	492a      	ldr	r1, [pc, #168]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106868:	4313      	orrs	r3, r2
 810686a:	658b      	str	r3, [r1, #88]	; 0x58
 810686c:	e001      	b.n	8106872 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810686e:	7dfb      	ldrb	r3, [r7, #23]
 8106870:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810687a:	2b00      	cmp	r3, #0
 810687c:	d04c      	beq.n	8106918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106888:	d030      	beq.n	81068ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810688a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810688e:	d82a      	bhi.n	81068e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106890:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106894:	d02c      	beq.n	81068f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8106896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810689a:	d824      	bhi.n	81068e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810689c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81068a0:	d018      	beq.n	81068d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81068a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81068a6:	d81e      	bhi.n	81068e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81068a8:	2b00      	cmp	r3, #0
 81068aa:	d003      	beq.n	81068b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81068ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81068b0:	d007      	beq.n	81068c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81068b2:	e018      	b.n	81068e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068b4:	4b16      	ldr	r3, [pc, #88]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068b8:	4a15      	ldr	r2, [pc, #84]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81068ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81068c0:	e017      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81068c2:	687b      	ldr	r3, [r7, #4]
 81068c4:	3304      	adds	r3, #4
 81068c6:	2100      	movs	r1, #0
 81068c8:	4618      	mov	r0, r3
 81068ca:	f001 f8a5 	bl	8107a18 <RCCEx_PLL2_Config>
 81068ce:	4603      	mov	r3, r0
 81068d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81068d2:	e00e      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	3324      	adds	r3, #36	; 0x24
 81068d8:	2100      	movs	r1, #0
 81068da:	4618      	mov	r0, r3
 81068dc:	f001 f94e 	bl	8107b7c <RCCEx_PLL3_Config>
 81068e0:	4603      	mov	r3, r0
 81068e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81068e4:	e005      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81068e6:	2301      	movs	r3, #1
 81068e8:	75fb      	strb	r3, [r7, #23]
      break;
 81068ea:	e002      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81068ec:	bf00      	nop
 81068ee:	e000      	b.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81068f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81068f2:	7dfb      	ldrb	r3, [r7, #23]
 81068f4:	2b00      	cmp	r3, #0
 81068f6:	d10d      	bne.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81068f8:	4b05      	ldr	r3, [pc, #20]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81068fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81068fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106906:	4902      	ldr	r1, [pc, #8]	; (8106910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106908:	4313      	orrs	r3, r2
 810690a:	658b      	str	r3, [r1, #88]	; 0x58
 810690c:	e004      	b.n	8106918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810690e:	bf00      	nop
 8106910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106914:	7dfb      	ldrb	r3, [r7, #23]
 8106916:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106920:	2b00      	cmp	r3, #0
 8106922:	d032      	beq.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106928:	2b30      	cmp	r3, #48	; 0x30
 810692a:	d01c      	beq.n	8106966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810692c:	2b30      	cmp	r3, #48	; 0x30
 810692e:	d817      	bhi.n	8106960 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8106930:	2b20      	cmp	r3, #32
 8106932:	d00c      	beq.n	810694e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8106934:	2b20      	cmp	r3, #32
 8106936:	d813      	bhi.n	8106960 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8106938:	2b00      	cmp	r3, #0
 810693a:	d016      	beq.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810693c:	2b10      	cmp	r3, #16
 810693e:	d10f      	bne.n	8106960 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106940:	4baf      	ldr	r3, [pc, #700]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106944:	4aae      	ldr	r2, [pc, #696]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810694a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810694c:	e00e      	b.n	810696c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	3304      	adds	r3, #4
 8106952:	2102      	movs	r1, #2
 8106954:	4618      	mov	r0, r3
 8106956:	f001 f85f 	bl	8107a18 <RCCEx_PLL2_Config>
 810695a:	4603      	mov	r3, r0
 810695c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810695e:	e005      	b.n	810696c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106960:	2301      	movs	r3, #1
 8106962:	75fb      	strb	r3, [r7, #23]
      break;
 8106964:	e002      	b.n	810696c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8106966:	bf00      	nop
 8106968:	e000      	b.n	810696c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810696a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810696c:	7dfb      	ldrb	r3, [r7, #23]
 810696e:	2b00      	cmp	r3, #0
 8106970:	d109      	bne.n	8106986 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106972:	4ba3      	ldr	r3, [pc, #652]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106976:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810697e:	49a0      	ldr	r1, [pc, #640]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106980:	4313      	orrs	r3, r2
 8106982:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106984:	e001      	b.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106986:	7dfb      	ldrb	r3, [r7, #23]
 8106988:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8106992:	2b00      	cmp	r3, #0
 8106994:	d047      	beq.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810699a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810699e:	d030      	beq.n	8106a02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81069a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81069a4:	d82a      	bhi.n	81069fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81069a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81069aa:	d02c      	beq.n	8106a06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81069ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81069b0:	d824      	bhi.n	81069fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81069b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81069b6:	d018      	beq.n	81069ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81069b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81069bc:	d81e      	bhi.n	81069fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81069be:	2b00      	cmp	r3, #0
 81069c0:	d003      	beq.n	81069ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81069c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81069c6:	d007      	beq.n	81069d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81069c8:	e018      	b.n	81069fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069ca:	4b8d      	ldr	r3, [pc, #564]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069ce:	4a8c      	ldr	r2, [pc, #560]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81069d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81069d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81069d6:	e017      	b.n	8106a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	3304      	adds	r3, #4
 81069dc:	2100      	movs	r1, #0
 81069de:	4618      	mov	r0, r3
 81069e0:	f001 f81a 	bl	8107a18 <RCCEx_PLL2_Config>
 81069e4:	4603      	mov	r3, r0
 81069e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81069e8:	e00e      	b.n	8106a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81069ea:	687b      	ldr	r3, [r7, #4]
 81069ec:	3324      	adds	r3, #36	; 0x24
 81069ee:	2100      	movs	r1, #0
 81069f0:	4618      	mov	r0, r3
 81069f2:	f001 f8c3 	bl	8107b7c <RCCEx_PLL3_Config>
 81069f6:	4603      	mov	r3, r0
 81069f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81069fa:	e005      	b.n	8106a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81069fc:	2301      	movs	r3, #1
 81069fe:	75fb      	strb	r3, [r7, #23]
      break;
 8106a00:	e002      	b.n	8106a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8106a02:	bf00      	nop
 8106a04:	e000      	b.n	8106a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8106a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106a08:	7dfb      	ldrb	r3, [r7, #23]
 8106a0a:	2b00      	cmp	r3, #0
 8106a0c:	d109      	bne.n	8106a22 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106a0e:	4b7c      	ldr	r3, [pc, #496]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106a12:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106a1a:	4979      	ldr	r1, [pc, #484]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106a1c:	4313      	orrs	r3, r2
 8106a1e:	650b      	str	r3, [r1, #80]	; 0x50
 8106a20:	e001      	b.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a22:	7dfb      	ldrb	r3, [r7, #23]
 8106a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d049      	beq.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8106a32:	687b      	ldr	r3, [r7, #4]
 8106a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106a3a:	d02e      	beq.n	8106a9a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8106a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106a40:	d828      	bhi.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106a42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106a46:	d02a      	beq.n	8106a9e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8106a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106a4c:	d822      	bhi.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106a52:	d026      	beq.n	8106aa2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8106a54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106a58:	d81c      	bhi.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a5e:	d010      	beq.n	8106a82 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8106a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a64:	d816      	bhi.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106a66:	2b00      	cmp	r3, #0
 8106a68:	d01d      	beq.n	8106aa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8106a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106a6e:	d111      	bne.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	3304      	adds	r3, #4
 8106a74:	2101      	movs	r1, #1
 8106a76:	4618      	mov	r0, r3
 8106a78:	f000 ffce 	bl	8107a18 <RCCEx_PLL2_Config>
 8106a7c:	4603      	mov	r3, r0
 8106a7e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8106a80:	e012      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106a82:	687b      	ldr	r3, [r7, #4]
 8106a84:	3324      	adds	r3, #36	; 0x24
 8106a86:	2101      	movs	r1, #1
 8106a88:	4618      	mov	r0, r3
 8106a8a:	f001 f877 	bl	8107b7c <RCCEx_PLL3_Config>
 8106a8e:	4603      	mov	r3, r0
 8106a90:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8106a92:	e009      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106a94:	2301      	movs	r3, #1
 8106a96:	75fb      	strb	r3, [r7, #23]
      break;
 8106a98:	e006      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106a9a:	bf00      	nop
 8106a9c:	e004      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106a9e:	bf00      	nop
 8106aa0:	e002      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106aa2:	bf00      	nop
 8106aa4:	e000      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106aa8:	7dfb      	ldrb	r3, [r7, #23]
 8106aaa:	2b00      	cmp	r3, #0
 8106aac:	d109      	bne.n	8106ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106aae:	4b54      	ldr	r3, [pc, #336]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ab2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106aba:	4951      	ldr	r1, [pc, #324]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106abc:	4313      	orrs	r3, r2
 8106abe:	650b      	str	r3, [r1, #80]	; 0x50
 8106ac0:	e001      	b.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ac2:	7dfb      	ldrb	r3, [r7, #23]
 8106ac4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	681b      	ldr	r3, [r3, #0]
 8106aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8106ace:	2b00      	cmp	r3, #0
 8106ad0:	d04b      	beq.n	8106b6a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106adc:	d02e      	beq.n	8106b3c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8106ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106ae2:	d828      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106ae8:	d02a      	beq.n	8106b40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8106aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106aee:	d822      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106af4:	d026      	beq.n	8106b44 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8106af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106afa:	d81c      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b00:	d010      	beq.n	8106b24 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8106b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b06:	d816      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106b08:	2b00      	cmp	r3, #0
 8106b0a:	d01d      	beq.n	8106b48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8106b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106b10:	d111      	bne.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	3304      	adds	r3, #4
 8106b16:	2101      	movs	r1, #1
 8106b18:	4618      	mov	r0, r3
 8106b1a:	f000 ff7d 	bl	8107a18 <RCCEx_PLL2_Config>
 8106b1e:	4603      	mov	r3, r0
 8106b20:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106b22:	e012      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	3324      	adds	r3, #36	; 0x24
 8106b28:	2101      	movs	r1, #1
 8106b2a:	4618      	mov	r0, r3
 8106b2c:	f001 f826 	bl	8107b7c <RCCEx_PLL3_Config>
 8106b30:	4603      	mov	r3, r0
 8106b32:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106b34:	e009      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8106b36:	2301      	movs	r3, #1
 8106b38:	75fb      	strb	r3, [r7, #23]
      break;
 8106b3a:	e006      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106b3c:	bf00      	nop
 8106b3e:	e004      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106b40:	bf00      	nop
 8106b42:	e002      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106b44:	bf00      	nop
 8106b46:	e000      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106b4a:	7dfb      	ldrb	r3, [r7, #23]
 8106b4c:	2b00      	cmp	r3, #0
 8106b4e:	d10a      	bne.n	8106b66 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106b50:	4b2b      	ldr	r3, [pc, #172]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106b54:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106b5e:	4928      	ldr	r1, [pc, #160]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b60:	4313      	orrs	r3, r2
 8106b62:	658b      	str	r3, [r1, #88]	; 0x58
 8106b64:	e001      	b.n	8106b6a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b66:	7dfb      	ldrb	r3, [r7, #23]
 8106b68:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	681b      	ldr	r3, [r3, #0]
 8106b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106b72:	2b00      	cmp	r3, #0
 8106b74:	d02f      	beq.n	8106bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b7e:	d00e      	beq.n	8106b9e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8106b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b84:	d814      	bhi.n	8106bb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8106b86:	2b00      	cmp	r3, #0
 8106b88:	d015      	beq.n	8106bb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106b8e:	d10f      	bne.n	8106bb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b90:	4b1b      	ldr	r3, [pc, #108]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b94:	4a1a      	ldr	r2, [pc, #104]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8106b9c:	e00c      	b.n	8106bb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	3304      	adds	r3, #4
 8106ba2:	2101      	movs	r1, #1
 8106ba4:	4618      	mov	r0, r3
 8106ba6:	f000 ff37 	bl	8107a18 <RCCEx_PLL2_Config>
 8106baa:	4603      	mov	r3, r0
 8106bac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8106bae:	e003      	b.n	8106bb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106bb0:	2301      	movs	r3, #1
 8106bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8106bb4:	e000      	b.n	8106bb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8106bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106bb8:	7dfb      	ldrb	r3, [r7, #23]
 8106bba:	2b00      	cmp	r3, #0
 8106bbc:	d109      	bne.n	8106bd2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106bbe:	4b10      	ldr	r3, [pc, #64]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106bca:	490d      	ldr	r1, [pc, #52]	; (8106c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106bcc:	4313      	orrs	r3, r2
 8106bce:	650b      	str	r3, [r1, #80]	; 0x50
 8106bd0:	e001      	b.n	8106bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bd2:	7dfb      	ldrb	r3, [r7, #23]
 8106bd4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106bde:	2b00      	cmp	r3, #0
 8106be0:	d033      	beq.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106be6:	2b03      	cmp	r3, #3
 8106be8:	d81c      	bhi.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8106bea:	a201      	add	r2, pc, #4	; (adr r2, 8106bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8106bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106bf0:	08106c2b 	.word	0x08106c2b
 8106bf4:	08106c05 	.word	0x08106c05
 8106bf8:	08106c13 	.word	0x08106c13
 8106bfc:	08106c2b 	.word	0x08106c2b
 8106c00:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c04:	4bb9      	ldr	r3, [pc, #740]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c08:	4ab8      	ldr	r2, [pc, #736]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106c10:	e00c      	b.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	3304      	adds	r3, #4
 8106c16:	2102      	movs	r1, #2
 8106c18:	4618      	mov	r0, r3
 8106c1a:	f000 fefd 	bl	8107a18 <RCCEx_PLL2_Config>
 8106c1e:	4603      	mov	r3, r0
 8106c20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106c22:	e003      	b.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106c24:	2301      	movs	r3, #1
 8106c26:	75fb      	strb	r3, [r7, #23]
      break;
 8106c28:	e000      	b.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8106c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106c2c:	7dfb      	ldrb	r3, [r7, #23]
 8106c2e:	2b00      	cmp	r3, #0
 8106c30:	d109      	bne.n	8106c46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106c32:	4bae      	ldr	r3, [pc, #696]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106c36:	f023 0203 	bic.w	r2, r3, #3
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106c3e:	49ab      	ldr	r1, [pc, #684]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c40:	4313      	orrs	r3, r2
 8106c42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106c44:	e001      	b.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c46:	7dfb      	ldrb	r3, [r7, #23]
 8106c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	681b      	ldr	r3, [r3, #0]
 8106c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106c52:	2b00      	cmp	r3, #0
 8106c54:	f000 8088 	beq.w	8106d68 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106c58:	4ba5      	ldr	r3, [pc, #660]	; (8106ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106c5a:	681b      	ldr	r3, [r3, #0]
 8106c5c:	4aa4      	ldr	r2, [pc, #656]	; (8106ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106c64:	f7fb f8dc 	bl	8101e20 <HAL_GetTick>
 8106c68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106c6a:	e009      	b.n	8106c80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106c6c:	f7fb f8d8 	bl	8101e20 <HAL_GetTick>
 8106c70:	4602      	mov	r2, r0
 8106c72:	693b      	ldr	r3, [r7, #16]
 8106c74:	1ad3      	subs	r3, r2, r3
 8106c76:	2b64      	cmp	r3, #100	; 0x64
 8106c78:	d902      	bls.n	8106c80 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8106c7a:	2303      	movs	r3, #3
 8106c7c:	75fb      	strb	r3, [r7, #23]
        break;
 8106c7e:	e005      	b.n	8106c8c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106c80:	4b9b      	ldr	r3, [pc, #620]	; (8106ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106c82:	681b      	ldr	r3, [r3, #0]
 8106c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c88:	2b00      	cmp	r3, #0
 8106c8a:	d0ef      	beq.n	8106c6c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8106c8c:	7dfb      	ldrb	r3, [r7, #23]
 8106c8e:	2b00      	cmp	r3, #0
 8106c90:	d168      	bne.n	8106d64 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106c92:	4b96      	ldr	r3, [pc, #600]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106c9c:	4053      	eors	r3, r2
 8106c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106ca2:	2b00      	cmp	r3, #0
 8106ca4:	d013      	beq.n	8106cce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106ca6:	4b91      	ldr	r3, [pc, #580]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106cae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106cb0:	4b8e      	ldr	r3, [pc, #568]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106cb4:	4a8d      	ldr	r2, [pc, #564]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8106cba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106cbc:	4b8b      	ldr	r3, [pc, #556]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106cc0:	4a8a      	ldr	r2, [pc, #552]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106cc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106cc8:	4a88      	ldr	r2, [pc, #544]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cca:	68fb      	ldr	r3, [r7, #12]
 8106ccc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106cd8:	d115      	bne.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106cda:	f7fb f8a1 	bl	8101e20 <HAL_GetTick>
 8106cde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106ce0:	e00b      	b.n	8106cfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106ce2:	f7fb f89d 	bl	8101e20 <HAL_GetTick>
 8106ce6:	4602      	mov	r2, r0
 8106ce8:	693b      	ldr	r3, [r7, #16]
 8106cea:	1ad3      	subs	r3, r2, r3
 8106cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8106cf0:	4293      	cmp	r3, r2
 8106cf2:	d902      	bls.n	8106cfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8106cf4:	2303      	movs	r3, #3
 8106cf6:	75fb      	strb	r3, [r7, #23]
            break;
 8106cf8:	e005      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106cfa:	4b7c      	ldr	r3, [pc, #496]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106cfe:	f003 0302 	and.w	r3, r3, #2
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	d0ed      	beq.n	8106ce2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8106d06:	7dfb      	ldrb	r3, [r7, #23]
 8106d08:	2b00      	cmp	r3, #0
 8106d0a:	d128      	bne.n	8106d5e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106d1a:	d10f      	bne.n	8106d3c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8106d1c:	4b73      	ldr	r3, [pc, #460]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106d1e:	691b      	ldr	r3, [r3, #16]
 8106d20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106d2a:	091b      	lsrs	r3, r3, #4
 8106d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106d30:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106d34:	496d      	ldr	r1, [pc, #436]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106d36:	4313      	orrs	r3, r2
 8106d38:	610b      	str	r3, [r1, #16]
 8106d3a:	e005      	b.n	8106d48 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8106d3c:	4b6b      	ldr	r3, [pc, #428]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106d3e:	691b      	ldr	r3, [r3, #16]
 8106d40:	4a6a      	ldr	r2, [pc, #424]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106d42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106d46:	6113      	str	r3, [r2, #16]
 8106d48:	4b68      	ldr	r3, [pc, #416]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106d56:	4965      	ldr	r1, [pc, #404]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106d58:	4313      	orrs	r3, r2
 8106d5a:	670b      	str	r3, [r1, #112]	; 0x70
 8106d5c:	e004      	b.n	8106d68 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106d5e:	7dfb      	ldrb	r3, [r7, #23]
 8106d60:	75bb      	strb	r3, [r7, #22]
 8106d62:	e001      	b.n	8106d68 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d64:	7dfb      	ldrb	r3, [r7, #23]
 8106d66:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	f003 0301 	and.w	r3, r3, #1
 8106d70:	2b00      	cmp	r3, #0
 8106d72:	d07e      	beq.n	8106e72 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106d78:	2b28      	cmp	r3, #40	; 0x28
 8106d7a:	d867      	bhi.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8106d7c:	a201      	add	r2, pc, #4	; (adr r2, 8106d84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8106d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d82:	bf00      	nop
 8106d84:	08106e53 	.word	0x08106e53
 8106d88:	08106e4d 	.word	0x08106e4d
 8106d8c:	08106e4d 	.word	0x08106e4d
 8106d90:	08106e4d 	.word	0x08106e4d
 8106d94:	08106e4d 	.word	0x08106e4d
 8106d98:	08106e4d 	.word	0x08106e4d
 8106d9c:	08106e4d 	.word	0x08106e4d
 8106da0:	08106e4d 	.word	0x08106e4d
 8106da4:	08106e29 	.word	0x08106e29
 8106da8:	08106e4d 	.word	0x08106e4d
 8106dac:	08106e4d 	.word	0x08106e4d
 8106db0:	08106e4d 	.word	0x08106e4d
 8106db4:	08106e4d 	.word	0x08106e4d
 8106db8:	08106e4d 	.word	0x08106e4d
 8106dbc:	08106e4d 	.word	0x08106e4d
 8106dc0:	08106e4d 	.word	0x08106e4d
 8106dc4:	08106e3b 	.word	0x08106e3b
 8106dc8:	08106e4d 	.word	0x08106e4d
 8106dcc:	08106e4d 	.word	0x08106e4d
 8106dd0:	08106e4d 	.word	0x08106e4d
 8106dd4:	08106e4d 	.word	0x08106e4d
 8106dd8:	08106e4d 	.word	0x08106e4d
 8106ddc:	08106e4d 	.word	0x08106e4d
 8106de0:	08106e4d 	.word	0x08106e4d
 8106de4:	08106e53 	.word	0x08106e53
 8106de8:	08106e4d 	.word	0x08106e4d
 8106dec:	08106e4d 	.word	0x08106e4d
 8106df0:	08106e4d 	.word	0x08106e4d
 8106df4:	08106e4d 	.word	0x08106e4d
 8106df8:	08106e4d 	.word	0x08106e4d
 8106dfc:	08106e4d 	.word	0x08106e4d
 8106e00:	08106e4d 	.word	0x08106e4d
 8106e04:	08106e53 	.word	0x08106e53
 8106e08:	08106e4d 	.word	0x08106e4d
 8106e0c:	08106e4d 	.word	0x08106e4d
 8106e10:	08106e4d 	.word	0x08106e4d
 8106e14:	08106e4d 	.word	0x08106e4d
 8106e18:	08106e4d 	.word	0x08106e4d
 8106e1c:	08106e4d 	.word	0x08106e4d
 8106e20:	08106e4d 	.word	0x08106e4d
 8106e24:	08106e53 	.word	0x08106e53
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	3304      	adds	r3, #4
 8106e2c:	2101      	movs	r1, #1
 8106e2e:	4618      	mov	r0, r3
 8106e30:	f000 fdf2 	bl	8107a18 <RCCEx_PLL2_Config>
 8106e34:	4603      	mov	r3, r0
 8106e36:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106e38:	e00c      	b.n	8106e54 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106e3a:	687b      	ldr	r3, [r7, #4]
 8106e3c:	3324      	adds	r3, #36	; 0x24
 8106e3e:	2101      	movs	r1, #1
 8106e40:	4618      	mov	r0, r3
 8106e42:	f000 fe9b 	bl	8107b7c <RCCEx_PLL3_Config>
 8106e46:	4603      	mov	r3, r0
 8106e48:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106e4a:	e003      	b.n	8106e54 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106e4c:	2301      	movs	r3, #1
 8106e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8106e50:	e000      	b.n	8106e54 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8106e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106e54:	7dfb      	ldrb	r3, [r7, #23]
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d109      	bne.n	8106e6e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106e5a:	4b24      	ldr	r3, [pc, #144]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106e66:	4921      	ldr	r1, [pc, #132]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106e68:	4313      	orrs	r3, r2
 8106e6a:	654b      	str	r3, [r1, #84]	; 0x54
 8106e6c:	e001      	b.n	8106e72 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e6e:	7dfb      	ldrb	r3, [r7, #23]
 8106e70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	f003 0302 	and.w	r3, r3, #2
 8106e7a:	2b00      	cmp	r3, #0
 8106e7c:	d03c      	beq.n	8106ef8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e82:	2b05      	cmp	r3, #5
 8106e84:	d820      	bhi.n	8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8106e86:	a201      	add	r2, pc, #4	; (adr r2, 8106e8c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8106e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e8c:	08106ecf 	.word	0x08106ecf
 8106e90:	08106ea5 	.word	0x08106ea5
 8106e94:	08106eb7 	.word	0x08106eb7
 8106e98:	08106ecf 	.word	0x08106ecf
 8106e9c:	08106ecf 	.word	0x08106ecf
 8106ea0:	08106ecf 	.word	0x08106ecf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106ea4:	687b      	ldr	r3, [r7, #4]
 8106ea6:	3304      	adds	r3, #4
 8106ea8:	2101      	movs	r1, #1
 8106eaa:	4618      	mov	r0, r3
 8106eac:	f000 fdb4 	bl	8107a18 <RCCEx_PLL2_Config>
 8106eb0:	4603      	mov	r3, r0
 8106eb2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106eb4:	e00c      	b.n	8106ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	3324      	adds	r3, #36	; 0x24
 8106eba:	2101      	movs	r1, #1
 8106ebc:	4618      	mov	r0, r3
 8106ebe:	f000 fe5d 	bl	8107b7c <RCCEx_PLL3_Config>
 8106ec2:	4603      	mov	r3, r0
 8106ec4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106ec6:	e003      	b.n	8106ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106ec8:	2301      	movs	r3, #1
 8106eca:	75fb      	strb	r3, [r7, #23]
      break;
 8106ecc:	e000      	b.n	8106ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8106ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ed0:	7dfb      	ldrb	r3, [r7, #23]
 8106ed2:	2b00      	cmp	r3, #0
 8106ed4:	d10e      	bne.n	8106ef4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106ed6:	4b05      	ldr	r3, [pc, #20]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106eda:	f023 0207 	bic.w	r2, r3, #7
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106ee2:	4902      	ldr	r1, [pc, #8]	; (8106eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106ee4:	4313      	orrs	r3, r2
 8106ee6:	654b      	str	r3, [r1, #84]	; 0x54
 8106ee8:	e006      	b.n	8106ef8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8106eea:	bf00      	nop
 8106eec:	58024400 	.word	0x58024400
 8106ef0:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ef4:	7dfb      	ldrb	r3, [r7, #23]
 8106ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	681b      	ldr	r3, [r3, #0]
 8106efc:	f003 0304 	and.w	r3, r3, #4
 8106f00:	2b00      	cmp	r3, #0
 8106f02:	d039      	beq.n	8106f78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106f0a:	2b05      	cmp	r3, #5
 8106f0c:	d820      	bhi.n	8106f50 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8106f0e:	a201      	add	r2, pc, #4	; (adr r2, 8106f14 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8106f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f14:	08106f57 	.word	0x08106f57
 8106f18:	08106f2d 	.word	0x08106f2d
 8106f1c:	08106f3f 	.word	0x08106f3f
 8106f20:	08106f57 	.word	0x08106f57
 8106f24:	08106f57 	.word	0x08106f57
 8106f28:	08106f57 	.word	0x08106f57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	3304      	adds	r3, #4
 8106f30:	2101      	movs	r1, #1
 8106f32:	4618      	mov	r0, r3
 8106f34:	f000 fd70 	bl	8107a18 <RCCEx_PLL2_Config>
 8106f38:	4603      	mov	r3, r0
 8106f3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106f3c:	e00c      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	3324      	adds	r3, #36	; 0x24
 8106f42:	2101      	movs	r1, #1
 8106f44:	4618      	mov	r0, r3
 8106f46:	f000 fe19 	bl	8107b7c <RCCEx_PLL3_Config>
 8106f4a:	4603      	mov	r3, r0
 8106f4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106f4e:	e003      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106f50:	2301      	movs	r3, #1
 8106f52:	75fb      	strb	r3, [r7, #23]
      break;
 8106f54:	e000      	b.n	8106f58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8106f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106f58:	7dfb      	ldrb	r3, [r7, #23]
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d10a      	bne.n	8106f74 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106f5e:	4bb7      	ldr	r3, [pc, #732]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106f62:	f023 0207 	bic.w	r2, r3, #7
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106f6c:	49b3      	ldr	r1, [pc, #716]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106f6e:	4313      	orrs	r3, r2
 8106f70:	658b      	str	r3, [r1, #88]	; 0x58
 8106f72:	e001      	b.n	8106f78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f74:	7dfb      	ldrb	r3, [r7, #23]
 8106f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	681b      	ldr	r3, [r3, #0]
 8106f7c:	f003 0320 	and.w	r3, r3, #32
 8106f80:	2b00      	cmp	r3, #0
 8106f82:	d04b      	beq.n	810701c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106f8e:	d02e      	beq.n	8106fee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8106f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106f94:	d828      	bhi.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106f9a:	d02a      	beq.n	8106ff2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8106f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fa0:	d822      	bhi.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106fa6:	d026      	beq.n	8106ff6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8106fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106fac:	d81c      	bhi.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fb2:	d010      	beq.n	8106fd6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8106fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fb8:	d816      	bhi.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d01d      	beq.n	8106ffa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106fc2:	d111      	bne.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	3304      	adds	r3, #4
 8106fc8:	2100      	movs	r1, #0
 8106fca:	4618      	mov	r0, r3
 8106fcc:	f000 fd24 	bl	8107a18 <RCCEx_PLL2_Config>
 8106fd0:	4603      	mov	r3, r0
 8106fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106fd4:	e012      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	3324      	adds	r3, #36	; 0x24
 8106fda:	2102      	movs	r1, #2
 8106fdc:	4618      	mov	r0, r3
 8106fde:	f000 fdcd 	bl	8107b7c <RCCEx_PLL3_Config>
 8106fe2:	4603      	mov	r3, r0
 8106fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106fe6:	e009      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106fe8:	2301      	movs	r3, #1
 8106fea:	75fb      	strb	r3, [r7, #23]
      break;
 8106fec:	e006      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106fee:	bf00      	nop
 8106ff0:	e004      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106ff2:	bf00      	nop
 8106ff4:	e002      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106ff6:	bf00      	nop
 8106ff8:	e000      	b.n	8106ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ffc:	7dfb      	ldrb	r3, [r7, #23]
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	d10a      	bne.n	8107018 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107002:	4b8e      	ldr	r3, [pc, #568]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107010:	498a      	ldr	r1, [pc, #552]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107012:	4313      	orrs	r3, r2
 8107014:	654b      	str	r3, [r1, #84]	; 0x54
 8107016:	e001      	b.n	810701c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107018:	7dfb      	ldrb	r3, [r7, #23]
 810701a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107024:	2b00      	cmp	r3, #0
 8107026:	d04b      	beq.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810702e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8107032:	d02e      	beq.n	8107092 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8107034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8107038:	d828      	bhi.n	810708c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810703a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810703e:	d02a      	beq.n	8107096 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8107040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107044:	d822      	bhi.n	810708c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8107046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810704a:	d026      	beq.n	810709a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810704c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8107050:	d81c      	bhi.n	810708c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8107052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107056:	d010      	beq.n	810707a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8107058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810705c:	d816      	bhi.n	810708c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810705e:	2b00      	cmp	r3, #0
 8107060:	d01d      	beq.n	810709e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8107062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107066:	d111      	bne.n	810708c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	3304      	adds	r3, #4
 810706c:	2100      	movs	r1, #0
 810706e:	4618      	mov	r0, r3
 8107070:	f000 fcd2 	bl	8107a18 <RCCEx_PLL2_Config>
 8107074:	4603      	mov	r3, r0
 8107076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107078:	e012      	b.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	3324      	adds	r3, #36	; 0x24
 810707e:	2102      	movs	r1, #2
 8107080:	4618      	mov	r0, r3
 8107082:	f000 fd7b 	bl	8107b7c <RCCEx_PLL3_Config>
 8107086:	4603      	mov	r3, r0
 8107088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810708a:	e009      	b.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810708c:	2301      	movs	r3, #1
 810708e:	75fb      	strb	r3, [r7, #23]
      break;
 8107090:	e006      	b.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107092:	bf00      	nop
 8107094:	e004      	b.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107096:	bf00      	nop
 8107098:	e002      	b.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810709a:	bf00      	nop
 810709c:	e000      	b.n	81070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810709e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81070a0:	7dfb      	ldrb	r3, [r7, #23]
 81070a2:	2b00      	cmp	r3, #0
 81070a4:	d10a      	bne.n	81070bc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81070a6:	4b65      	ldr	r3, [pc, #404]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81070a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81070aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81070ae:	687b      	ldr	r3, [r7, #4]
 81070b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81070b4:	4961      	ldr	r1, [pc, #388]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81070b6:	4313      	orrs	r3, r2
 81070b8:	658b      	str	r3, [r1, #88]	; 0x58
 81070ba:	e001      	b.n	81070c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070bc:	7dfb      	ldrb	r3, [r7, #23]
 81070be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81070c8:	2b00      	cmp	r3, #0
 81070ca:	d04b      	beq.n	8107164 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81070d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81070d6:	d02e      	beq.n	8107136 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81070d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81070dc:	d828      	bhi.n	8107130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81070e2:	d02a      	beq.n	810713a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81070e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81070e8:	d822      	bhi.n	8107130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81070ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81070ee:	d026      	beq.n	810713e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81070f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81070f4:	d81c      	bhi.n	8107130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81070f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81070fa:	d010      	beq.n	810711e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81070fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107100:	d816      	bhi.n	8107130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8107102:	2b00      	cmp	r3, #0
 8107104:	d01d      	beq.n	8107142 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8107106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810710a:	d111      	bne.n	8107130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	3304      	adds	r3, #4
 8107110:	2100      	movs	r1, #0
 8107112:	4618      	mov	r0, r3
 8107114:	f000 fc80 	bl	8107a18 <RCCEx_PLL2_Config>
 8107118:	4603      	mov	r3, r0
 810711a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810711c:	e012      	b.n	8107144 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	3324      	adds	r3, #36	; 0x24
 8107122:	2102      	movs	r1, #2
 8107124:	4618      	mov	r0, r3
 8107126:	f000 fd29 	bl	8107b7c <RCCEx_PLL3_Config>
 810712a:	4603      	mov	r3, r0
 810712c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810712e:	e009      	b.n	8107144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107130:	2301      	movs	r3, #1
 8107132:	75fb      	strb	r3, [r7, #23]
      break;
 8107134:	e006      	b.n	8107144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8107136:	bf00      	nop
 8107138:	e004      	b.n	8107144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810713a:	bf00      	nop
 810713c:	e002      	b.n	8107144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810713e:	bf00      	nop
 8107140:	e000      	b.n	8107144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8107142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107144:	7dfb      	ldrb	r3, [r7, #23]
 8107146:	2b00      	cmp	r3, #0
 8107148:	d10a      	bne.n	8107160 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810714a:	4b3c      	ldr	r3, [pc, #240]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810714e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8107158:	4938      	ldr	r1, [pc, #224]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810715a:	4313      	orrs	r3, r2
 810715c:	658b      	str	r3, [r1, #88]	; 0x58
 810715e:	e001      	b.n	8107164 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107160:	7dfb      	ldrb	r3, [r7, #23]
 8107162:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	681b      	ldr	r3, [r3, #0]
 8107168:	f003 0308 	and.w	r3, r3, #8
 810716c:	2b00      	cmp	r3, #0
 810716e:	d01a      	beq.n	81071a6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810717a:	d10a      	bne.n	8107192 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	3324      	adds	r3, #36	; 0x24
 8107180:	2102      	movs	r1, #2
 8107182:	4618      	mov	r0, r3
 8107184:	f000 fcfa 	bl	8107b7c <RCCEx_PLL3_Config>
 8107188:	4603      	mov	r3, r0
 810718a:	2b00      	cmp	r3, #0
 810718c:	d001      	beq.n	8107192 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810718e:	2301      	movs	r3, #1
 8107190:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8107192:	4b2a      	ldr	r3, [pc, #168]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107196:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81071a0:	4926      	ldr	r1, [pc, #152]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81071a2:	4313      	orrs	r3, r2
 81071a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81071a6:	687b      	ldr	r3, [r7, #4]
 81071a8:	681b      	ldr	r3, [r3, #0]
 81071aa:	f003 0310 	and.w	r3, r3, #16
 81071ae:	2b00      	cmp	r3, #0
 81071b0:	d01a      	beq.n	81071e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81071b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81071bc:	d10a      	bne.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81071be:	687b      	ldr	r3, [r7, #4]
 81071c0:	3324      	adds	r3, #36	; 0x24
 81071c2:	2102      	movs	r1, #2
 81071c4:	4618      	mov	r0, r3
 81071c6:	f000 fcd9 	bl	8107b7c <RCCEx_PLL3_Config>
 81071ca:	4603      	mov	r3, r0
 81071cc:	2b00      	cmp	r3, #0
 81071ce:	d001      	beq.n	81071d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81071d0:	2301      	movs	r3, #1
 81071d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81071d4:	4b19      	ldr	r3, [pc, #100]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81071d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81071e2:	4916      	ldr	r1, [pc, #88]	; (810723c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81071e4:	4313      	orrs	r3, r2
 81071e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d036      	beq.n	8107262 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81071fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81071fe:	d01f      	beq.n	8107240 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8107200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107204:	d817      	bhi.n	8107236 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8107206:	2b00      	cmp	r3, #0
 8107208:	d003      	beq.n	8107212 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810720a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810720e:	d009      	beq.n	8107224 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8107210:	e011      	b.n	8107236 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	3304      	adds	r3, #4
 8107216:	2100      	movs	r1, #0
 8107218:	4618      	mov	r0, r3
 810721a:	f000 fbfd 	bl	8107a18 <RCCEx_PLL2_Config>
 810721e:	4603      	mov	r3, r0
 8107220:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8107222:	e00e      	b.n	8107242 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	3324      	adds	r3, #36	; 0x24
 8107228:	2102      	movs	r1, #2
 810722a:	4618      	mov	r0, r3
 810722c:	f000 fca6 	bl	8107b7c <RCCEx_PLL3_Config>
 8107230:	4603      	mov	r3, r0
 8107232:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8107234:	e005      	b.n	8107242 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107236:	2301      	movs	r3, #1
 8107238:	75fb      	strb	r3, [r7, #23]
      break;
 810723a:	e002      	b.n	8107242 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810723c:	58024400 	.word	0x58024400
      break;
 8107240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107242:	7dfb      	ldrb	r3, [r7, #23]
 8107244:	2b00      	cmp	r3, #0
 8107246:	d10a      	bne.n	810725e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107248:	4b93      	ldr	r3, [pc, #588]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810724c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8107250:	687b      	ldr	r3, [r7, #4]
 8107252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8107256:	4990      	ldr	r1, [pc, #576]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107258:	4313      	orrs	r3, r2
 810725a:	658b      	str	r3, [r1, #88]	; 0x58
 810725c:	e001      	b.n	8107262 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810725e:	7dfb      	ldrb	r3, [r7, #23]
 8107260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8107262:	687b      	ldr	r3, [r7, #4]
 8107264:	681b      	ldr	r3, [r3, #0]
 8107266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810726a:	2b00      	cmp	r3, #0
 810726c:	d033      	beq.n	81072d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810726e:	687b      	ldr	r3, [r7, #4]
 8107270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107278:	d01c      	beq.n	81072b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810727a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810727e:	d816      	bhi.n	81072ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8107280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107284:	d003      	beq.n	810728e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8107286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810728a:	d007      	beq.n	810729c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810728c:	e00f      	b.n	81072ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810728e:	4b82      	ldr	r3, [pc, #520]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107292:	4a81      	ldr	r2, [pc, #516]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810729a:	e00c      	b.n	81072b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	3324      	adds	r3, #36	; 0x24
 81072a0:	2101      	movs	r1, #1
 81072a2:	4618      	mov	r0, r3
 81072a4:	f000 fc6a 	bl	8107b7c <RCCEx_PLL3_Config>
 81072a8:	4603      	mov	r3, r0
 81072aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81072ac:	e003      	b.n	81072b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81072ae:	2301      	movs	r3, #1
 81072b0:	75fb      	strb	r3, [r7, #23]
      break;
 81072b2:	e000      	b.n	81072b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81072b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81072b6:	7dfb      	ldrb	r3, [r7, #23]
 81072b8:	2b00      	cmp	r3, #0
 81072ba:	d10a      	bne.n	81072d2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81072bc:	4b76      	ldr	r3, [pc, #472]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81072be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81072c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81072c4:	687b      	ldr	r3, [r7, #4]
 81072c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81072ca:	4973      	ldr	r1, [pc, #460]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81072cc:	4313      	orrs	r3, r2
 81072ce:	654b      	str	r3, [r1, #84]	; 0x54
 81072d0:	e001      	b.n	81072d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072d2:	7dfb      	ldrb	r3, [r7, #23]
 81072d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81072de:	2b00      	cmp	r3, #0
 81072e0:	d029      	beq.n	8107336 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072e6:	2b00      	cmp	r3, #0
 81072e8:	d003      	beq.n	81072f2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81072ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81072ee:	d007      	beq.n	8107300 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81072f0:	e00f      	b.n	8107312 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81072f2:	4b69      	ldr	r3, [pc, #420]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81072f6:	4a68      	ldr	r2, [pc, #416]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81072f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81072fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81072fe:	e00b      	b.n	8107318 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	3304      	adds	r3, #4
 8107304:	2102      	movs	r1, #2
 8107306:	4618      	mov	r0, r3
 8107308:	f000 fb86 	bl	8107a18 <RCCEx_PLL2_Config>
 810730c:	4603      	mov	r3, r0
 810730e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8107310:	e002      	b.n	8107318 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8107312:	2301      	movs	r3, #1
 8107314:	75fb      	strb	r3, [r7, #23]
      break;
 8107316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107318:	7dfb      	ldrb	r3, [r7, #23]
 810731a:	2b00      	cmp	r3, #0
 810731c:	d109      	bne.n	8107332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810731e:	4b5e      	ldr	r3, [pc, #376]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107326:	687b      	ldr	r3, [r7, #4]
 8107328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810732a:	495b      	ldr	r1, [pc, #364]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810732c:	4313      	orrs	r3, r2
 810732e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8107330:	e001      	b.n	8107336 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107332:	7dfb      	ldrb	r3, [r7, #23]
 8107334:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107336:	687b      	ldr	r3, [r7, #4]
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810733e:	2b00      	cmp	r3, #0
 8107340:	d00a      	beq.n	8107358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8107342:	687b      	ldr	r3, [r7, #4]
 8107344:	3324      	adds	r3, #36	; 0x24
 8107346:	2102      	movs	r1, #2
 8107348:	4618      	mov	r0, r3
 810734a:	f000 fc17 	bl	8107b7c <RCCEx_PLL3_Config>
 810734e:	4603      	mov	r3, r0
 8107350:	2b00      	cmp	r3, #0
 8107352:	d001      	beq.n	8107358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8107354:	2301      	movs	r3, #1
 8107356:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107360:	2b00      	cmp	r3, #0
 8107362:	d030      	beq.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810736c:	d017      	beq.n	810739e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810736e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107372:	d811      	bhi.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8107374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107378:	d013      	beq.n	81073a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810737a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810737e:	d80b      	bhi.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8107380:	2b00      	cmp	r3, #0
 8107382:	d010      	beq.n	81073a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8107384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107388:	d106      	bne.n	8107398 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810738a:	4b43      	ldr	r3, [pc, #268]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810738e:	4a42      	ldr	r2, [pc, #264]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8107396:	e007      	b.n	81073a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107398:	2301      	movs	r3, #1
 810739a:	75fb      	strb	r3, [r7, #23]
      break;
 810739c:	e004      	b.n	81073a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810739e:	bf00      	nop
 81073a0:	e002      	b.n	81073a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81073a2:	bf00      	nop
 81073a4:	e000      	b.n	81073a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81073a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81073a8:	7dfb      	ldrb	r3, [r7, #23]
 81073aa:	2b00      	cmp	r3, #0
 81073ac:	d109      	bne.n	81073c2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81073ae:	4b3a      	ldr	r3, [pc, #232]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81073ba:	4937      	ldr	r1, [pc, #220]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073bc:	4313      	orrs	r3, r2
 81073be:	654b      	str	r3, [r1, #84]	; 0x54
 81073c0:	e001      	b.n	81073c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81073c2:	7dfb      	ldrb	r3, [r7, #23]
 81073c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81073c6:	687b      	ldr	r3, [r7, #4]
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81073ce:	2b00      	cmp	r3, #0
 81073d0:	d008      	beq.n	81073e4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81073d2:	4b31      	ldr	r3, [pc, #196]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81073d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81073da:	687b      	ldr	r3, [r7, #4]
 81073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81073de:	492e      	ldr	r1, [pc, #184]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073e0:	4313      	orrs	r3, r2
 81073e2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81073e4:	687b      	ldr	r3, [r7, #4]
 81073e6:	681b      	ldr	r3, [r3, #0]
 81073e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81073ec:	2b00      	cmp	r3, #0
 81073ee:	d009      	beq.n	8107404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81073f0:	4b29      	ldr	r3, [pc, #164]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073f2:	691b      	ldr	r3, [r3, #16]
 81073f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81073f8:	687b      	ldr	r3, [r7, #4]
 81073fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81073fe:	4926      	ldr	r1, [pc, #152]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107400:	4313      	orrs	r3, r2
 8107402:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8107404:	687b      	ldr	r3, [r7, #4]
 8107406:	681b      	ldr	r3, [r3, #0]
 8107408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810740c:	2b00      	cmp	r3, #0
 810740e:	d008      	beq.n	8107422 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107410:	4b21      	ldr	r3, [pc, #132]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107414:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810741c:	491e      	ldr	r1, [pc, #120]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810741e:	4313      	orrs	r3, r2
 8107420:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	681b      	ldr	r3, [r3, #0]
 8107426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810742a:	2b00      	cmp	r3, #0
 810742c:	d00d      	beq.n	810744a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810742e:	4b1a      	ldr	r3, [pc, #104]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107430:	691b      	ldr	r3, [r3, #16]
 8107432:	4a19      	ldr	r2, [pc, #100]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8107438:	6113      	str	r3, [r2, #16]
 810743a:	4b17      	ldr	r3, [pc, #92]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810743c:	691a      	ldr	r2, [r3, #16]
 810743e:	687b      	ldr	r3, [r7, #4]
 8107440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8107444:	4914      	ldr	r1, [pc, #80]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107446:	4313      	orrs	r3, r2
 8107448:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	681b      	ldr	r3, [r3, #0]
 810744e:	2b00      	cmp	r3, #0
 8107450:	da08      	bge.n	8107464 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107452:	4b11      	ldr	r3, [pc, #68]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810745e:	490e      	ldr	r1, [pc, #56]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107460:	4313      	orrs	r3, r2
 8107462:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107464:	687b      	ldr	r3, [r7, #4]
 8107466:	681b      	ldr	r3, [r3, #0]
 8107468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810746c:	2b00      	cmp	r3, #0
 810746e:	d009      	beq.n	8107484 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107470:	4b09      	ldr	r3, [pc, #36]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810747e:	4906      	ldr	r1, [pc, #24]	; (8107498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107480:	4313      	orrs	r3, r2
 8107482:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8107484:	7dbb      	ldrb	r3, [r7, #22]
 8107486:	2b00      	cmp	r3, #0
 8107488:	d101      	bne.n	810748e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810748a:	2300      	movs	r3, #0
 810748c:	e000      	b.n	8107490 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810748e:	2301      	movs	r3, #1
}
 8107490:	4618      	mov	r0, r3
 8107492:	3718      	adds	r7, #24
 8107494:	46bd      	mov	sp, r7
 8107496:	bd80      	pop	{r7, pc}
 8107498:	58024400 	.word	0x58024400

0810749c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810749c:	b580      	push	{r7, lr}
 810749e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81074a0:	f7ff f85e 	bl	8106560 <HAL_RCC_GetHCLKFreq>
 81074a4:	4602      	mov	r2, r0
 81074a6:	4b06      	ldr	r3, [pc, #24]	; (81074c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81074a8:	6a1b      	ldr	r3, [r3, #32]
 81074aa:	091b      	lsrs	r3, r3, #4
 81074ac:	f003 0307 	and.w	r3, r3, #7
 81074b0:	4904      	ldr	r1, [pc, #16]	; (81074c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81074b2:	5ccb      	ldrb	r3, [r1, r3]
 81074b4:	f003 031f 	and.w	r3, r3, #31
 81074b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81074bc:	4618      	mov	r0, r3
 81074be:	bd80      	pop	{r7, pc}
 81074c0:	58024400 	.word	0x58024400
 81074c4:	0810a0e8 	.word	0x0810a0e8

081074c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81074c8:	b480      	push	{r7}
 81074ca:	b089      	sub	sp, #36	; 0x24
 81074cc:	af00      	add	r7, sp, #0
 81074ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81074d0:	4ba1      	ldr	r3, [pc, #644]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81074d4:	f003 0303 	and.w	r3, r3, #3
 81074d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81074da:	4b9f      	ldr	r3, [pc, #636]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81074de:	0b1b      	lsrs	r3, r3, #12
 81074e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81074e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81074e6:	4b9c      	ldr	r3, [pc, #624]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81074ea:	091b      	lsrs	r3, r3, #4
 81074ec:	f003 0301 	and.w	r3, r3, #1
 81074f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81074f2:	4b99      	ldr	r3, [pc, #612]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81074f6:	08db      	lsrs	r3, r3, #3
 81074f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81074fc:	693a      	ldr	r2, [r7, #16]
 81074fe:	fb02 f303 	mul.w	r3, r2, r3
 8107502:	ee07 3a90 	vmov	s15, r3
 8107506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810750a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810750e:	697b      	ldr	r3, [r7, #20]
 8107510:	2b00      	cmp	r3, #0
 8107512:	f000 8111 	beq.w	8107738 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107516:	69bb      	ldr	r3, [r7, #24]
 8107518:	2b02      	cmp	r3, #2
 810751a:	f000 8083 	beq.w	8107624 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810751e:	69bb      	ldr	r3, [r7, #24]
 8107520:	2b02      	cmp	r3, #2
 8107522:	f200 80a1 	bhi.w	8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107526:	69bb      	ldr	r3, [r7, #24]
 8107528:	2b00      	cmp	r3, #0
 810752a:	d003      	beq.n	8107534 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810752c:	69bb      	ldr	r3, [r7, #24]
 810752e:	2b01      	cmp	r3, #1
 8107530:	d056      	beq.n	81075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107532:	e099      	b.n	8107668 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107534:	4b88      	ldr	r3, [pc, #544]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	f003 0320 	and.w	r3, r3, #32
 810753c:	2b00      	cmp	r3, #0
 810753e:	d02d      	beq.n	810759c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107540:	4b85      	ldr	r3, [pc, #532]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107542:	681b      	ldr	r3, [r3, #0]
 8107544:	08db      	lsrs	r3, r3, #3
 8107546:	f003 0303 	and.w	r3, r3, #3
 810754a:	4a84      	ldr	r2, [pc, #528]	; (810775c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810754c:	fa22 f303 	lsr.w	r3, r2, r3
 8107550:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107552:	68bb      	ldr	r3, [r7, #8]
 8107554:	ee07 3a90 	vmov	s15, r3
 8107558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810755c:	697b      	ldr	r3, [r7, #20]
 810755e:	ee07 3a90 	vmov	s15, r3
 8107562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810756a:	4b7b      	ldr	r3, [pc, #492]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107572:	ee07 3a90 	vmov	s15, r3
 8107576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810757a:	ed97 6a03 	vldr	s12, [r7, #12]
 810757e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810758a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810758e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107596:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810759a:	e087      	b.n	81076ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810759c:	697b      	ldr	r3, [r7, #20]
 810759e:	ee07 3a90 	vmov	s15, r3
 81075a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107764 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81075aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075ae:	4b6a      	ldr	r3, [pc, #424]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075b6:	ee07 3a90 	vmov	s15, r3
 81075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81075be:	ed97 6a03 	vldr	s12, [r7, #12]
 81075c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81075c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81075ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81075ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81075d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81075d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81075da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81075de:	e065      	b.n	81076ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81075e0:	697b      	ldr	r3, [r7, #20]
 81075e2:	ee07 3a90 	vmov	s15, r3
 81075e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107768 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81075ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81075f2:	4b59      	ldr	r3, [pc, #356]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81075f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81075fa:	ee07 3a90 	vmov	s15, r3
 81075fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107602:	ed97 6a03 	vldr	s12, [r7, #12]
 8107606:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810760a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810760e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810761e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107622:	e043      	b.n	81076ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107624:	697b      	ldr	r3, [r7, #20]
 8107626:	ee07 3a90 	vmov	s15, r3
 810762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810762e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810776c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107636:	4b48      	ldr	r3, [pc, #288]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810763a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810763e:	ee07 3a90 	vmov	s15, r3
 8107642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107646:	ed97 6a03 	vldr	s12, [r7, #12]
 810764a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810764e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810765a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810765e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107666:	e021      	b.n	81076ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107668:	697b      	ldr	r3, [r7, #20]
 810766a:	ee07 3a90 	vmov	s15, r3
 810766e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107672:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107768 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810767a:	4b37      	ldr	r3, [pc, #220]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810767e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107682:	ee07 3a90 	vmov	s15, r3
 8107686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810768a:	ed97 6a03 	vldr	s12, [r7, #12]
 810768e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107760 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810769a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810769e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81076a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81076aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81076ac:	4b2a      	ldr	r3, [pc, #168]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076b0:	0a5b      	lsrs	r3, r3, #9
 81076b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81076b6:	ee07 3a90 	vmov	s15, r3
 81076ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81076c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81076c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81076ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81076ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81076d2:	ee17 2a90 	vmov	r2, s15
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81076da:	4b1f      	ldr	r3, [pc, #124]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076de:	0c1b      	lsrs	r3, r3, #16
 81076e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81076e4:	ee07 3a90 	vmov	s15, r3
 81076e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81076f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81076f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81076f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81076fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107700:	ee17 2a90 	vmov	r2, s15
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8107708:	4b13      	ldr	r3, [pc, #76]	; (8107758 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810770c:	0e1b      	lsrs	r3, r3, #24
 810770e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107712:	ee07 3a90 	vmov	s15, r3
 8107716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810771a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810771e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107722:	edd7 6a07 	vldr	s13, [r7, #28]
 8107726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810772a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810772e:	ee17 2a90 	vmov	r2, s15
 8107732:	687b      	ldr	r3, [r7, #4]
 8107734:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107736:	e008      	b.n	810774a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107738:	687b      	ldr	r3, [r7, #4]
 810773a:	2200      	movs	r2, #0
 810773c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810773e:	687b      	ldr	r3, [r7, #4]
 8107740:	2200      	movs	r2, #0
 8107742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	2200      	movs	r2, #0
 8107748:	609a      	str	r2, [r3, #8]
}
 810774a:	bf00      	nop
 810774c:	3724      	adds	r7, #36	; 0x24
 810774e:	46bd      	mov	sp, r7
 8107750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107754:	4770      	bx	lr
 8107756:	bf00      	nop
 8107758:	58024400 	.word	0x58024400
 810775c:	03d09000 	.word	0x03d09000
 8107760:	46000000 	.word	0x46000000
 8107764:	4c742400 	.word	0x4c742400
 8107768:	4a742400 	.word	0x4a742400
 810776c:	4b742400 	.word	0x4b742400

08107770 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8107770:	b480      	push	{r7}
 8107772:	b089      	sub	sp, #36	; 0x24
 8107774:	af00      	add	r7, sp, #0
 8107776:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107778:	4ba1      	ldr	r3, [pc, #644]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810777c:	f003 0303 	and.w	r3, r3, #3
 8107780:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8107782:	4b9f      	ldr	r3, [pc, #636]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107786:	0d1b      	lsrs	r3, r3, #20
 8107788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810778c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810778e:	4b9c      	ldr	r3, [pc, #624]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107792:	0a1b      	lsrs	r3, r3, #8
 8107794:	f003 0301 	and.w	r3, r3, #1
 8107798:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810779a:	4b99      	ldr	r3, [pc, #612]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810779e:	08db      	lsrs	r3, r3, #3
 81077a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81077a4:	693a      	ldr	r2, [r7, #16]
 81077a6:	fb02 f303 	mul.w	r3, r2, r3
 81077aa:	ee07 3a90 	vmov	s15, r3
 81077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81077b6:	697b      	ldr	r3, [r7, #20]
 81077b8:	2b00      	cmp	r3, #0
 81077ba:	f000 8111 	beq.w	81079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81077be:	69bb      	ldr	r3, [r7, #24]
 81077c0:	2b02      	cmp	r3, #2
 81077c2:	f000 8083 	beq.w	81078cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81077c6:	69bb      	ldr	r3, [r7, #24]
 81077c8:	2b02      	cmp	r3, #2
 81077ca:	f200 80a1 	bhi.w	8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81077ce:	69bb      	ldr	r3, [r7, #24]
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d003      	beq.n	81077dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81077d4:	69bb      	ldr	r3, [r7, #24]
 81077d6:	2b01      	cmp	r3, #1
 81077d8:	d056      	beq.n	8107888 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81077da:	e099      	b.n	8107910 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81077dc:	4b88      	ldr	r3, [pc, #544]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	f003 0320 	and.w	r3, r3, #32
 81077e4:	2b00      	cmp	r3, #0
 81077e6:	d02d      	beq.n	8107844 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81077e8:	4b85      	ldr	r3, [pc, #532]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077ea:	681b      	ldr	r3, [r3, #0]
 81077ec:	08db      	lsrs	r3, r3, #3
 81077ee:	f003 0303 	and.w	r3, r3, #3
 81077f2:	4a84      	ldr	r2, [pc, #528]	; (8107a04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81077f4:	fa22 f303 	lsr.w	r3, r2, r3
 81077f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81077fa:	68bb      	ldr	r3, [r7, #8]
 81077fc:	ee07 3a90 	vmov	s15, r3
 8107800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107804:	697b      	ldr	r3, [r7, #20]
 8107806:	ee07 3a90 	vmov	s15, r3
 810780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810780e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107812:	4b7b      	ldr	r3, [pc, #492]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810781a:	ee07 3a90 	vmov	s15, r3
 810781e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107822:	ed97 6a03 	vldr	s12, [r7, #12]
 8107826:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107a08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810782a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810782e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810783a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810783e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107842:	e087      	b.n	8107954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107844:	697b      	ldr	r3, [r7, #20]
 8107846:	ee07 3a90 	vmov	s15, r3
 810784a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810784e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107a0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107856:	4b6a      	ldr	r3, [pc, #424]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810785a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810785e:	ee07 3a90 	vmov	s15, r3
 8107862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107866:	ed97 6a03 	vldr	s12, [r7, #12]
 810786a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107a08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810786e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810787a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810787e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107886:	e065      	b.n	8107954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107888:	697b      	ldr	r3, [r7, #20]
 810788a:	ee07 3a90 	vmov	s15, r3
 810788e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107892:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810789a:	4b59      	ldr	r3, [pc, #356]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810789e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078a2:	ee07 3a90 	vmov	s15, r3
 81078a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81078ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107a08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81078b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81078ca:	e043      	b.n	8107954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81078cc:	697b      	ldr	r3, [r7, #20]
 81078ce:	ee07 3a90 	vmov	s15, r3
 81078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81078da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078de:	4b48      	ldr	r3, [pc, #288]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81078e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078e6:	ee07 3a90 	vmov	s15, r3
 81078ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81078f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107a08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81078f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107906:	ee67 7a27 	vmul.f32	s15, s14, s15
 810790a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810790e:	e021      	b.n	8107954 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107910:	697b      	ldr	r3, [r7, #20]
 8107912:	ee07 3a90 	vmov	s15, r3
 8107916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810791a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810791e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107922:	4b37      	ldr	r3, [pc, #220]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810792a:	ee07 3a90 	vmov	s15, r3
 810792e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107932:	ed97 6a03 	vldr	s12, [r7, #12]
 8107936:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107a08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810793a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810793e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810794a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810794e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107952:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8107954:	4b2a      	ldr	r3, [pc, #168]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107958:	0a5b      	lsrs	r3, r3, #9
 810795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810795e:	ee07 3a90 	vmov	s15, r3
 8107962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810796a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810796e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810797a:	ee17 2a90 	vmov	r2, s15
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8107982:	4b1f      	ldr	r3, [pc, #124]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107986:	0c1b      	lsrs	r3, r3, #16
 8107988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810798c:	ee07 3a90 	vmov	s15, r3
 8107990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107998:	ee37 7a87 	vadd.f32	s14, s15, s14
 810799c:	edd7 6a07 	vldr	s13, [r7, #28]
 81079a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81079a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81079a8:	ee17 2a90 	vmov	r2, s15
 81079ac:	687b      	ldr	r3, [r7, #4]
 81079ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81079b0:	4b13      	ldr	r3, [pc, #76]	; (8107a00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81079b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81079b4:	0e1b      	lsrs	r3, r3, #24
 81079b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81079ba:	ee07 3a90 	vmov	s15, r3
 81079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81079c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81079ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81079ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81079d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81079d6:	ee17 2a90 	vmov	r2, s15
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81079de:	e008      	b.n	81079f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	2200      	movs	r2, #0
 81079e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	2200      	movs	r2, #0
 81079ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	2200      	movs	r2, #0
 81079f0:	609a      	str	r2, [r3, #8]
}
 81079f2:	bf00      	nop
 81079f4:	3724      	adds	r7, #36	; 0x24
 81079f6:	46bd      	mov	sp, r7
 81079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079fc:	4770      	bx	lr
 81079fe:	bf00      	nop
 8107a00:	58024400 	.word	0x58024400
 8107a04:	03d09000 	.word	0x03d09000
 8107a08:	46000000 	.word	0x46000000
 8107a0c:	4c742400 	.word	0x4c742400
 8107a10:	4a742400 	.word	0x4a742400
 8107a14:	4b742400 	.word	0x4b742400

08107a18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107a18:	b580      	push	{r7, lr}
 8107a1a:	b084      	sub	sp, #16
 8107a1c:	af00      	add	r7, sp, #0
 8107a1e:	6078      	str	r0, [r7, #4]
 8107a20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107a22:	2300      	movs	r3, #0
 8107a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107a26:	4b54      	ldr	r3, [pc, #336]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a2a:	f003 0303 	and.w	r3, r3, #3
 8107a2e:	2b03      	cmp	r3, #3
 8107a30:	d101      	bne.n	8107a36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107a32:	2301      	movs	r3, #1
 8107a34:	e09b      	b.n	8107b6e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107a36:	4b50      	ldr	r3, [pc, #320]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107a38:	681b      	ldr	r3, [r3, #0]
 8107a3a:	4a4f      	ldr	r2, [pc, #316]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a42:	f7fa f9ed 	bl	8101e20 <HAL_GetTick>
 8107a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a48:	e008      	b.n	8107a5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107a4a:	f7fa f9e9 	bl	8101e20 <HAL_GetTick>
 8107a4e:	4602      	mov	r2, r0
 8107a50:	68bb      	ldr	r3, [r7, #8]
 8107a52:	1ad3      	subs	r3, r2, r3
 8107a54:	2b02      	cmp	r3, #2
 8107a56:	d901      	bls.n	8107a5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107a58:	2303      	movs	r3, #3
 8107a5a:	e088      	b.n	8107b6e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a5c:	4b46      	ldr	r3, [pc, #280]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107a64:	2b00      	cmp	r3, #0
 8107a66:	d1f0      	bne.n	8107a4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107a68:	4b43      	ldr	r3, [pc, #268]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	031b      	lsls	r3, r3, #12
 8107a76:	4940      	ldr	r1, [pc, #256]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107a78:	4313      	orrs	r3, r2
 8107a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	685b      	ldr	r3, [r3, #4]
 8107a80:	3b01      	subs	r3, #1
 8107a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	689b      	ldr	r3, [r3, #8]
 8107a8a:	3b01      	subs	r3, #1
 8107a8c:	025b      	lsls	r3, r3, #9
 8107a8e:	b29b      	uxth	r3, r3
 8107a90:	431a      	orrs	r2, r3
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	68db      	ldr	r3, [r3, #12]
 8107a96:	3b01      	subs	r3, #1
 8107a98:	041b      	lsls	r3, r3, #16
 8107a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107a9e:	431a      	orrs	r2, r3
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	691b      	ldr	r3, [r3, #16]
 8107aa4:	3b01      	subs	r3, #1
 8107aa6:	061b      	lsls	r3, r3, #24
 8107aa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107aac:	4932      	ldr	r1, [pc, #200]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107aae:	4313      	orrs	r3, r2
 8107ab0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107ab2:	4b31      	ldr	r3, [pc, #196]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ab6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	695b      	ldr	r3, [r3, #20]
 8107abe:	492e      	ldr	r1, [pc, #184]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107ac0:	4313      	orrs	r3, r2
 8107ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107ac4:	4b2c      	ldr	r3, [pc, #176]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ac8:	f023 0220 	bic.w	r2, r3, #32
 8107acc:	687b      	ldr	r3, [r7, #4]
 8107ace:	699b      	ldr	r3, [r3, #24]
 8107ad0:	4929      	ldr	r1, [pc, #164]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107ad2:	4313      	orrs	r3, r2
 8107ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107ad6:	4b28      	ldr	r3, [pc, #160]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107ada:	4a27      	ldr	r2, [pc, #156]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107adc:	f023 0310 	bic.w	r3, r3, #16
 8107ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107ae2:	4b25      	ldr	r3, [pc, #148]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107aea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107aee:	687a      	ldr	r2, [r7, #4]
 8107af0:	69d2      	ldr	r2, [r2, #28]
 8107af2:	00d2      	lsls	r2, r2, #3
 8107af4:	4920      	ldr	r1, [pc, #128]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107af6:	4313      	orrs	r3, r2
 8107af8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107afa:	4b1f      	ldr	r3, [pc, #124]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107afe:	4a1e      	ldr	r2, [pc, #120]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b00:	f043 0310 	orr.w	r3, r3, #16
 8107b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107b06:	683b      	ldr	r3, [r7, #0]
 8107b08:	2b00      	cmp	r3, #0
 8107b0a:	d106      	bne.n	8107b1a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107b0c:	4b1a      	ldr	r3, [pc, #104]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b10:	4a19      	ldr	r2, [pc, #100]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b18:	e00f      	b.n	8107b3a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107b1a:	683b      	ldr	r3, [r7, #0]
 8107b1c:	2b01      	cmp	r3, #1
 8107b1e:	d106      	bne.n	8107b2e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107b20:	4b15      	ldr	r3, [pc, #84]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b24:	4a14      	ldr	r2, [pc, #80]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b2c:	e005      	b.n	8107b3a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107b2e:	4b12      	ldr	r3, [pc, #72]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b32:	4a11      	ldr	r2, [pc, #68]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107b3a:	4b0f      	ldr	r3, [pc, #60]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	4a0e      	ldr	r2, [pc, #56]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b46:	f7fa f96b 	bl	8101e20 <HAL_GetTick>
 8107b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b4c:	e008      	b.n	8107b60 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107b4e:	f7fa f967 	bl	8101e20 <HAL_GetTick>
 8107b52:	4602      	mov	r2, r0
 8107b54:	68bb      	ldr	r3, [r7, #8]
 8107b56:	1ad3      	subs	r3, r2, r3
 8107b58:	2b02      	cmp	r3, #2
 8107b5a:	d901      	bls.n	8107b60 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107b5c:	2303      	movs	r3, #3
 8107b5e:	e006      	b.n	8107b6e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b60:	4b05      	ldr	r3, [pc, #20]	; (8107b78 <RCCEx_PLL2_Config+0x160>)
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107b68:	2b00      	cmp	r3, #0
 8107b6a:	d0f0      	beq.n	8107b4e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107b6e:	4618      	mov	r0, r3
 8107b70:	3710      	adds	r7, #16
 8107b72:	46bd      	mov	sp, r7
 8107b74:	bd80      	pop	{r7, pc}
 8107b76:	bf00      	nop
 8107b78:	58024400 	.word	0x58024400

08107b7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107b7c:	b580      	push	{r7, lr}
 8107b7e:	b084      	sub	sp, #16
 8107b80:	af00      	add	r7, sp, #0
 8107b82:	6078      	str	r0, [r7, #4]
 8107b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107b86:	2300      	movs	r3, #0
 8107b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107b8a:	4b54      	ldr	r3, [pc, #336]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b8e:	f003 0303 	and.w	r3, r3, #3
 8107b92:	2b03      	cmp	r3, #3
 8107b94:	d101      	bne.n	8107b9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107b96:	2301      	movs	r3, #1
 8107b98:	e09b      	b.n	8107cd2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107b9a:	4b50      	ldr	r3, [pc, #320]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107b9c:	681b      	ldr	r3, [r3, #0]
 8107b9e:	4a4f      	ldr	r2, [pc, #316]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107ba6:	f7fa f93b 	bl	8101e20 <HAL_GetTick>
 8107baa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107bac:	e008      	b.n	8107bc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107bae:	f7fa f937 	bl	8101e20 <HAL_GetTick>
 8107bb2:	4602      	mov	r2, r0
 8107bb4:	68bb      	ldr	r3, [r7, #8]
 8107bb6:	1ad3      	subs	r3, r2, r3
 8107bb8:	2b02      	cmp	r3, #2
 8107bba:	d901      	bls.n	8107bc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107bbc:	2303      	movs	r3, #3
 8107bbe:	e088      	b.n	8107cd2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107bc0:	4b46      	ldr	r3, [pc, #280]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107bc2:	681b      	ldr	r3, [r3, #0]
 8107bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107bc8:	2b00      	cmp	r3, #0
 8107bca:	d1f0      	bne.n	8107bae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107bcc:	4b43      	ldr	r3, [pc, #268]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	681b      	ldr	r3, [r3, #0]
 8107bd8:	051b      	lsls	r3, r3, #20
 8107bda:	4940      	ldr	r1, [pc, #256]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107bdc:	4313      	orrs	r3, r2
 8107bde:	628b      	str	r3, [r1, #40]	; 0x28
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	685b      	ldr	r3, [r3, #4]
 8107be4:	3b01      	subs	r3, #1
 8107be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	689b      	ldr	r3, [r3, #8]
 8107bee:	3b01      	subs	r3, #1
 8107bf0:	025b      	lsls	r3, r3, #9
 8107bf2:	b29b      	uxth	r3, r3
 8107bf4:	431a      	orrs	r2, r3
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	68db      	ldr	r3, [r3, #12]
 8107bfa:	3b01      	subs	r3, #1
 8107bfc:	041b      	lsls	r3, r3, #16
 8107bfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107c02:	431a      	orrs	r2, r3
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	691b      	ldr	r3, [r3, #16]
 8107c08:	3b01      	subs	r3, #1
 8107c0a:	061b      	lsls	r3, r3, #24
 8107c0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107c10:	4932      	ldr	r1, [pc, #200]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c12:	4313      	orrs	r3, r2
 8107c14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107c16:	4b31      	ldr	r3, [pc, #196]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	695b      	ldr	r3, [r3, #20]
 8107c22:	492e      	ldr	r1, [pc, #184]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c24:	4313      	orrs	r3, r2
 8107c26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107c28:	4b2c      	ldr	r3, [pc, #176]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	699b      	ldr	r3, [r3, #24]
 8107c34:	4929      	ldr	r1, [pc, #164]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c36:	4313      	orrs	r3, r2
 8107c38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107c3a:	4b28      	ldr	r3, [pc, #160]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c3e:	4a27      	ldr	r2, [pc, #156]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107c44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107c46:	4b25      	ldr	r3, [pc, #148]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107c4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107c52:	687a      	ldr	r2, [r7, #4]
 8107c54:	69d2      	ldr	r2, [r2, #28]
 8107c56:	00d2      	lsls	r2, r2, #3
 8107c58:	4920      	ldr	r1, [pc, #128]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c5a:	4313      	orrs	r3, r2
 8107c5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107c5e:	4b1f      	ldr	r3, [pc, #124]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c62:	4a1e      	ldr	r2, [pc, #120]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107c6a:	683b      	ldr	r3, [r7, #0]
 8107c6c:	2b00      	cmp	r3, #0
 8107c6e:	d106      	bne.n	8107c7e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107c70:	4b1a      	ldr	r3, [pc, #104]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c74:	4a19      	ldr	r2, [pc, #100]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c7c:	e00f      	b.n	8107c9e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107c7e:	683b      	ldr	r3, [r7, #0]
 8107c80:	2b01      	cmp	r3, #1
 8107c82:	d106      	bne.n	8107c92 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107c84:	4b15      	ldr	r3, [pc, #84]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c88:	4a14      	ldr	r2, [pc, #80]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c90:	e005      	b.n	8107c9e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107c92:	4b12      	ldr	r3, [pc, #72]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c96:	4a11      	ldr	r2, [pc, #68]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107c9e:	4b0f      	ldr	r3, [pc, #60]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	4a0e      	ldr	r2, [pc, #56]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107caa:	f7fa f8b9 	bl	8101e20 <HAL_GetTick>
 8107cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107cb0:	e008      	b.n	8107cc4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107cb2:	f7fa f8b5 	bl	8101e20 <HAL_GetTick>
 8107cb6:	4602      	mov	r2, r0
 8107cb8:	68bb      	ldr	r3, [r7, #8]
 8107cba:	1ad3      	subs	r3, r2, r3
 8107cbc:	2b02      	cmp	r3, #2
 8107cbe:	d901      	bls.n	8107cc4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107cc0:	2303      	movs	r3, #3
 8107cc2:	e006      	b.n	8107cd2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107cc4:	4b05      	ldr	r3, [pc, #20]	; (8107cdc <RCCEx_PLL3_Config+0x160>)
 8107cc6:	681b      	ldr	r3, [r3, #0]
 8107cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107ccc:	2b00      	cmp	r3, #0
 8107cce:	d0f0      	beq.n	8107cb2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8107cd2:	4618      	mov	r0, r3
 8107cd4:	3710      	adds	r7, #16
 8107cd6:	46bd      	mov	sp, r7
 8107cd8:	bd80      	pop	{r7, pc}
 8107cda:	bf00      	nop
 8107cdc:	58024400 	.word	0x58024400

08107ce0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8107ce0:	b580      	push	{r7, lr}
 8107ce2:	b084      	sub	sp, #16
 8107ce4:	af00      	add	r7, sp, #0
 8107ce6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8107ce8:	2300      	movs	r3, #0
 8107cea:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	2b00      	cmp	r3, #0
 8107cf0:	d101      	bne.n	8107cf6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8107cf2:	2301      	movs	r3, #1
 8107cf4:	e0eb      	b.n	8107ece <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	2200      	movs	r2, #0
 8107cfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8107cfc:	687b      	ldr	r3, [r7, #4]
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	4a75      	ldr	r2, [pc, #468]	; (8107ed8 <HAL_SPI_Init+0x1f8>)
 8107d02:	4293      	cmp	r3, r2
 8107d04:	d00f      	beq.n	8107d26 <HAL_SPI_Init+0x46>
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	4a74      	ldr	r2, [pc, #464]	; (8107edc <HAL_SPI_Init+0x1fc>)
 8107d0c:	4293      	cmp	r3, r2
 8107d0e:	d00a      	beq.n	8107d26 <HAL_SPI_Init+0x46>
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	4a72      	ldr	r2, [pc, #456]	; (8107ee0 <HAL_SPI_Init+0x200>)
 8107d16:	4293      	cmp	r3, r2
 8107d18:	d005      	beq.n	8107d26 <HAL_SPI_Init+0x46>
 8107d1a:	687b      	ldr	r3, [r7, #4]
 8107d1c:	68db      	ldr	r3, [r3, #12]
 8107d1e:	2b0f      	cmp	r3, #15
 8107d20:	d901      	bls.n	8107d26 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8107d22:	2301      	movs	r3, #1
 8107d24:	e0d3      	b.n	8107ece <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8107d26:	6878      	ldr	r0, [r7, #4]
 8107d28:	f000 fb94 	bl	8108454 <SPI_GetPacketSize>
 8107d2c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	681b      	ldr	r3, [r3, #0]
 8107d32:	4a69      	ldr	r2, [pc, #420]	; (8107ed8 <HAL_SPI_Init+0x1f8>)
 8107d34:	4293      	cmp	r3, r2
 8107d36:	d00c      	beq.n	8107d52 <HAL_SPI_Init+0x72>
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	681b      	ldr	r3, [r3, #0]
 8107d3c:	4a67      	ldr	r2, [pc, #412]	; (8107edc <HAL_SPI_Init+0x1fc>)
 8107d3e:	4293      	cmp	r3, r2
 8107d40:	d007      	beq.n	8107d52 <HAL_SPI_Init+0x72>
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	4a66      	ldr	r2, [pc, #408]	; (8107ee0 <HAL_SPI_Init+0x200>)
 8107d48:	4293      	cmp	r3, r2
 8107d4a:	d002      	beq.n	8107d52 <HAL_SPI_Init+0x72>
 8107d4c:	68bb      	ldr	r3, [r7, #8]
 8107d4e:	2b08      	cmp	r3, #8
 8107d50:	d811      	bhi.n	8107d76 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107d56:	4a60      	ldr	r2, [pc, #384]	; (8107ed8 <HAL_SPI_Init+0x1f8>)
 8107d58:	4293      	cmp	r3, r2
 8107d5a:	d009      	beq.n	8107d70 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	681b      	ldr	r3, [r3, #0]
 8107d60:	4a5e      	ldr	r2, [pc, #376]	; (8107edc <HAL_SPI_Init+0x1fc>)
 8107d62:	4293      	cmp	r3, r2
 8107d64:	d004      	beq.n	8107d70 <HAL_SPI_Init+0x90>
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	681b      	ldr	r3, [r3, #0]
 8107d6a:	4a5d      	ldr	r2, [pc, #372]	; (8107ee0 <HAL_SPI_Init+0x200>)
 8107d6c:	4293      	cmp	r3, r2
 8107d6e:	d104      	bne.n	8107d7a <HAL_SPI_Init+0x9a>
 8107d70:	68bb      	ldr	r3, [r7, #8]
 8107d72:	2b10      	cmp	r3, #16
 8107d74:	d901      	bls.n	8107d7a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8107d76:	2301      	movs	r3, #1
 8107d78:	e0a9      	b.n	8107ece <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8107d7a:	687b      	ldr	r3, [r7, #4]
 8107d7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107d80:	b2db      	uxtb	r3, r3
 8107d82:	2b00      	cmp	r3, #0
 8107d84:	d106      	bne.n	8107d94 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	2200      	movs	r2, #0
 8107d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8107d8e:	6878      	ldr	r0, [r7, #4]
 8107d90:	f7f9 fb16 	bl	81013c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	2202      	movs	r2, #2
 8107d98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	681b      	ldr	r3, [r3, #0]
 8107da0:	681a      	ldr	r2, [r3, #0]
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	f022 0201 	bic.w	r2, r2, #1
 8107daa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	699b      	ldr	r3, [r3, #24]
 8107db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107db4:	d119      	bne.n	8107dea <HAL_SPI_Init+0x10a>
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	685b      	ldr	r3, [r3, #4]
 8107dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107dbe:	d103      	bne.n	8107dc8 <HAL_SPI_Init+0xe8>
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107dc4:	2b00      	cmp	r3, #0
 8107dc6:	d008      	beq.n	8107dda <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107dc8:	687b      	ldr	r3, [r7, #4]
 8107dca:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107dcc:	2b00      	cmp	r3, #0
 8107dce:	d10c      	bne.n	8107dea <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107dd8:	d107      	bne.n	8107dea <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	681b      	ldr	r3, [r3, #0]
 8107dde:	681a      	ldr	r2, [r3, #0]
 8107de0:	687b      	ldr	r3, [r7, #4]
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8107de8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	69da      	ldr	r2, [r3, #28]
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107df2:	431a      	orrs	r2, r3
 8107df4:	68fb      	ldr	r3, [r7, #12]
 8107df6:	431a      	orrs	r2, r3
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dfc:	ea42 0103 	orr.w	r1, r2, r3
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	68da      	ldr	r2, [r3, #12]
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	681b      	ldr	r3, [r3, #0]
 8107e08:	430a      	orrs	r2, r1
 8107e0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e14:	431a      	orrs	r2, r3
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e1a:	431a      	orrs	r2, r3
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	699b      	ldr	r3, [r3, #24]
 8107e20:	431a      	orrs	r2, r3
 8107e22:	687b      	ldr	r3, [r7, #4]
 8107e24:	691b      	ldr	r3, [r3, #16]
 8107e26:	431a      	orrs	r2, r3
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	695b      	ldr	r3, [r3, #20]
 8107e2c:	431a      	orrs	r2, r3
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	6a1b      	ldr	r3, [r3, #32]
 8107e32:	431a      	orrs	r2, r3
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	685b      	ldr	r3, [r3, #4]
 8107e38:	431a      	orrs	r2, r3
 8107e3a:	687b      	ldr	r3, [r7, #4]
 8107e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e3e:	431a      	orrs	r2, r3
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	689b      	ldr	r3, [r3, #8]
 8107e44:	431a      	orrs	r2, r3
 8107e46:	687b      	ldr	r3, [r7, #4]
 8107e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107e4a:	ea42 0103 	orr.w	r1, r2, r3
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8107e52:	687b      	ldr	r3, [r7, #4]
 8107e54:	681b      	ldr	r3, [r3, #0]
 8107e56:	430a      	orrs	r2, r1
 8107e58:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	685b      	ldr	r3, [r3, #4]
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d113      	bne.n	8107e8a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	681b      	ldr	r3, [r3, #0]
 8107e66:	689b      	ldr	r3, [r3, #8]
 8107e68:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	681b      	ldr	r3, [r3, #0]
 8107e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107e74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	689b      	ldr	r3, [r3, #8]
 8107e7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	681b      	ldr	r3, [r3, #0]
 8107e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8107e88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107e8a:	687b      	ldr	r3, [r7, #4]
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	681b      	ldr	r3, [r3, #0]
 8107e94:	f022 0201 	bic.w	r2, r2, #1
 8107e98:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	685b      	ldr	r3, [r3, #4]
 8107e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8107ea2:	2b00      	cmp	r3, #0
 8107ea4:	d00a      	beq.n	8107ebc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107ea6:	687b      	ldr	r3, [r7, #4]
 8107ea8:	681b      	ldr	r3, [r3, #0]
 8107eaa:	68db      	ldr	r3, [r3, #12]
 8107eac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	681b      	ldr	r3, [r3, #0]
 8107eb8:	430a      	orrs	r2, r1
 8107eba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	2200      	movs	r2, #0
 8107ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	2201      	movs	r2, #1
 8107ec8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8107ecc:	2300      	movs	r3, #0
}
 8107ece:	4618      	mov	r0, r3
 8107ed0:	3710      	adds	r7, #16
 8107ed2:	46bd      	mov	sp, r7
 8107ed4:	bd80      	pop	{r7, pc}
 8107ed6:	bf00      	nop
 8107ed8:	40013000 	.word	0x40013000
 8107edc:	40003800 	.word	0x40003800
 8107ee0:	40003c00 	.word	0x40003c00

08107ee4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8107ee4:	b580      	push	{r7, lr}
 8107ee6:	b08a      	sub	sp, #40	; 0x28
 8107ee8:	af00      	add	r7, sp, #0
 8107eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	681b      	ldr	r3, [r3, #0]
 8107ef0:	691b      	ldr	r3, [r3, #16]
 8107ef2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8107ef4:	687b      	ldr	r3, [r7, #4]
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	695b      	ldr	r3, [r3, #20]
 8107efa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8107efc:	6a3a      	ldr	r2, [r7, #32]
 8107efe:	69fb      	ldr	r3, [r7, #28]
 8107f00:	4013      	ands	r3, r2
 8107f02:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	681b      	ldr	r3, [r3, #0]
 8107f08:	689b      	ldr	r3, [r3, #8]
 8107f0a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8107f0c:	2300      	movs	r3, #0
 8107f0e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8107f10:	687b      	ldr	r3, [r7, #4]
 8107f12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107f16:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8107f18:	687b      	ldr	r3, [r7, #4]
 8107f1a:	681b      	ldr	r3, [r3, #0]
 8107f1c:	3330      	adds	r3, #48	; 0x30
 8107f1e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8107f20:	69bb      	ldr	r3, [r7, #24]
 8107f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107f26:	2b00      	cmp	r3, #0
 8107f28:	d113      	bne.n	8107f52 <HAL_SPI_IRQHandler+0x6e>
 8107f2a:	69bb      	ldr	r3, [r7, #24]
 8107f2c:	f003 0320 	and.w	r3, r3, #32
 8107f30:	2b00      	cmp	r3, #0
 8107f32:	d10e      	bne.n	8107f52 <HAL_SPI_IRQHandler+0x6e>
 8107f34:	69bb      	ldr	r3, [r7, #24]
 8107f36:	f003 0304 	and.w	r3, r3, #4
 8107f3a:	2b00      	cmp	r3, #0
 8107f3c:	d009      	beq.n	8107f52 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107f42:	6878      	ldr	r0, [r7, #4]
 8107f44:	4798      	blx	r3
    hspi->RxISR(hspi);
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107f4a:	6878      	ldr	r0, [r7, #4]
 8107f4c:	4798      	blx	r3
    handled = 1UL;
 8107f4e:	2301      	movs	r3, #1
 8107f50:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8107f52:	69bb      	ldr	r3, [r7, #24]
 8107f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107f58:	2b00      	cmp	r3, #0
 8107f5a:	d10f      	bne.n	8107f7c <HAL_SPI_IRQHandler+0x98>
 8107f5c:	69bb      	ldr	r3, [r7, #24]
 8107f5e:	f003 0301 	and.w	r3, r3, #1
 8107f62:	2b00      	cmp	r3, #0
 8107f64:	d00a      	beq.n	8107f7c <HAL_SPI_IRQHandler+0x98>
 8107f66:	69bb      	ldr	r3, [r7, #24]
 8107f68:	f003 0304 	and.w	r3, r3, #4
 8107f6c:	2b00      	cmp	r3, #0
 8107f6e:	d105      	bne.n	8107f7c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107f74:	6878      	ldr	r0, [r7, #4]
 8107f76:	4798      	blx	r3
    handled = 1UL;
 8107f78:	2301      	movs	r3, #1
 8107f7a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8107f7c:	69bb      	ldr	r3, [r7, #24]
 8107f7e:	f003 0320 	and.w	r3, r3, #32
 8107f82:	2b00      	cmp	r3, #0
 8107f84:	d10f      	bne.n	8107fa6 <HAL_SPI_IRQHandler+0xc2>
 8107f86:	69bb      	ldr	r3, [r7, #24]
 8107f88:	f003 0302 	and.w	r3, r3, #2
 8107f8c:	2b00      	cmp	r3, #0
 8107f8e:	d00a      	beq.n	8107fa6 <HAL_SPI_IRQHandler+0xc2>
 8107f90:	69bb      	ldr	r3, [r7, #24]
 8107f92:	f003 0304 	and.w	r3, r3, #4
 8107f96:	2b00      	cmp	r3, #0
 8107f98:	d105      	bne.n	8107fa6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107f9e:	6878      	ldr	r0, [r7, #4]
 8107fa0:	4798      	blx	r3
    handled = 1UL;
 8107fa2:	2301      	movs	r3, #1
 8107fa4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8107fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107fa8:	2b00      	cmp	r3, #0
 8107faa:	f040 8171 	bne.w	8108290 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8107fae:	69bb      	ldr	r3, [r7, #24]
 8107fb0:	f003 0308 	and.w	r3, r3, #8
 8107fb4:	2b00      	cmp	r3, #0
 8107fb6:	f000 80a0 	beq.w	81080fa <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8107fba:	687b      	ldr	r3, [r7, #4]
 8107fbc:	681b      	ldr	r3, [r3, #0]
 8107fbe:	699a      	ldr	r2, [r3, #24]
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	681b      	ldr	r3, [r3, #0]
 8107fc4:	f042 0208 	orr.w	r2, r2, #8
 8107fc8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	681b      	ldr	r3, [r3, #0]
 8107fce:	699a      	ldr	r2, [r3, #24]
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	f042 0210 	orr.w	r2, r2, #16
 8107fd8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8107fda:	687b      	ldr	r3, [r7, #4]
 8107fdc:	681b      	ldr	r3, [r3, #0]
 8107fde:	699a      	ldr	r2, [r3, #24]
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	681b      	ldr	r3, [r3, #0]
 8107fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107fe8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8107fea:	687b      	ldr	r3, [r7, #4]
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	691a      	ldr	r2, [r3, #16]
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	f022 0208 	bic.w	r2, r2, #8
 8107ff8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8107ffa:	697b      	ldr	r3, [r7, #20]
 8107ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8108000:	2b00      	cmp	r3, #0
 8108002:	d00f      	beq.n	8108024 <HAL_SPI_IRQHandler+0x140>
 8108004:	7cfb      	ldrb	r3, [r7, #19]
 8108006:	2b04      	cmp	r3, #4
 8108008:	d004      	beq.n	8108014 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810800e:	69db      	ldr	r3, [r3, #28]
 8108010:	2b00      	cmp	r3, #0
 8108012:	d007      	beq.n	8108024 <HAL_SPI_IRQHandler+0x140>
 8108014:	7cfb      	ldrb	r3, [r7, #19]
 8108016:	2b03      	cmp	r3, #3
 8108018:	d059      	beq.n	81080ce <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810801e:	69db      	ldr	r3, [r3, #28]
 8108020:	2b00      	cmp	r3, #0
 8108022:	d154      	bne.n	81080ce <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	689b      	ldr	r3, [r3, #8]
 810802a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810802e:	2b00      	cmp	r3, #0
 8108030:	d13d      	bne.n	81080ae <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8108032:	e036      	b.n	81080a2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	68db      	ldr	r3, [r3, #12]
 8108038:	2b0f      	cmp	r3, #15
 810803a:	d90b      	bls.n	8108054 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810803c:	687b      	ldr	r3, [r7, #4]
 810803e:	681a      	ldr	r2, [r3, #0]
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108044:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8108046:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810804c:	1d1a      	adds	r2, r3, #4
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	665a      	str	r2, [r3, #100]	; 0x64
 8108052:	e01d      	b.n	8108090 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	68db      	ldr	r3, [r3, #12]
 8108058:	2b07      	cmp	r3, #7
 810805a:	d90b      	bls.n	8108074 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108060:	68fa      	ldr	r2, [r7, #12]
 8108062:	8812      	ldrh	r2, [r2, #0]
 8108064:	b292      	uxth	r2, r2
 8108066:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8108068:	687b      	ldr	r3, [r7, #4]
 810806a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810806c:	1c9a      	adds	r2, r3, #2
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	665a      	str	r2, [r3, #100]	; 0x64
 8108072:	e00d      	b.n	8108090 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	681b      	ldr	r3, [r3, #0]
 8108078:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108080:	7812      	ldrb	r2, [r2, #0]
 8108082:	b2d2      	uxtb	r2, r2
 8108084:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810808a:	1c5a      	adds	r2, r3, #1
 810808c:	687b      	ldr	r3, [r7, #4]
 810808e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8108096:	b29b      	uxth	r3, r3
 8108098:	3b01      	subs	r3, #1
 810809a:	b29a      	uxth	r2, r3
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81080a8:	b29b      	uxth	r3, r3
 81080aa:	2b00      	cmp	r3, #0
 81080ac:	d1c2      	bne.n	8108034 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 81080ae:	6878      	ldr	r0, [r7, #4]
 81080b0:	f000 f930 	bl	8108314 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	2201      	movs	r2, #1
 81080b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81080c2:	2b00      	cmp	r3, #0
 81080c4:	d003      	beq.n	81080ce <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 81080c6:	6878      	ldr	r0, [r7, #4]
 81080c8:	f000 f900 	bl	81082cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 81080cc:	e0e5      	b.n	810829a <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 81080ce:	7cfb      	ldrb	r3, [r7, #19]
 81080d0:	2b05      	cmp	r3, #5
 81080d2:	d103      	bne.n	81080dc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 81080d4:	6878      	ldr	r0, [r7, #4]
 81080d6:	f7f8 feb5 	bl	8100e44 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 81080da:	e0db      	b.n	8108294 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 81080dc:	7cfb      	ldrb	r3, [r7, #19]
 81080de:	2b04      	cmp	r3, #4
 81080e0:	d103      	bne.n	81080ea <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 81080e2:	6878      	ldr	r0, [r7, #4]
 81080e4:	f000 f8e8 	bl	81082b8 <HAL_SPI_RxCpltCallback>
    return;
 81080e8:	e0d4      	b.n	8108294 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 81080ea:	7cfb      	ldrb	r3, [r7, #19]
 81080ec:	2b03      	cmp	r3, #3
 81080ee:	f040 80d1 	bne.w	8108294 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 81080f2:	6878      	ldr	r0, [r7, #4]
 81080f4:	f000 f8d6 	bl	81082a4 <HAL_SPI_TxCpltCallback>
    return;
 81080f8:	e0cc      	b.n	8108294 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 81080fa:	69fb      	ldr	r3, [r7, #28]
 81080fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108100:	2b00      	cmp	r3, #0
 8108102:	d00d      	beq.n	8108120 <HAL_SPI_IRQHandler+0x23c>
 8108104:	6a3b      	ldr	r3, [r7, #32]
 8108106:	f003 0308 	and.w	r3, r3, #8
 810810a:	2b00      	cmp	r3, #0
 810810c:	d008      	beq.n	8108120 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810810e:	687b      	ldr	r3, [r7, #4]
 8108110:	681b      	ldr	r3, [r3, #0]
 8108112:	699a      	ldr	r2, [r3, #24]
 8108114:	687b      	ldr	r3, [r7, #4]
 8108116:	681b      	ldr	r3, [r3, #0]
 8108118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810811c:	619a      	str	r2, [r3, #24]

    return;
 810811e:	e0bc      	b.n	810829a <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8108120:	69bb      	ldr	r3, [r7, #24]
 8108122:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8108126:	2b00      	cmp	r3, #0
 8108128:	f000 80b7 	beq.w	810829a <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810812c:	69bb      	ldr	r3, [r7, #24]
 810812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108132:	2b00      	cmp	r3, #0
 8108134:	d00f      	beq.n	8108156 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810813c:	f043 0204 	orr.w	r2, r3, #4
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8108146:	687b      	ldr	r3, [r7, #4]
 8108148:	681b      	ldr	r3, [r3, #0]
 810814a:	699a      	ldr	r2, [r3, #24]
 810814c:	687b      	ldr	r3, [r7, #4]
 810814e:	681b      	ldr	r3, [r3, #0]
 8108150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108154:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8108156:	69bb      	ldr	r3, [r7, #24]
 8108158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810815c:	2b00      	cmp	r3, #0
 810815e:	d00f      	beq.n	8108180 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108166:	f043 0201 	orr.w	r2, r3, #1
 810816a:	687b      	ldr	r3, [r7, #4]
 810816c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	699a      	ldr	r2, [r3, #24]
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	681b      	ldr	r3, [r3, #0]
 810817a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810817e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8108180:	69bb      	ldr	r3, [r7, #24]
 8108182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108186:	2b00      	cmp	r3, #0
 8108188:	d00f      	beq.n	81081aa <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108190:	f043 0208 	orr.w	r2, r3, #8
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810819a:	687b      	ldr	r3, [r7, #4]
 810819c:	681b      	ldr	r3, [r3, #0]
 810819e:	699a      	ldr	r2, [r3, #24]
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	681b      	ldr	r3, [r3, #0]
 81081a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81081a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 81081aa:	69bb      	ldr	r3, [r7, #24]
 81081ac:	f003 0320 	and.w	r3, r3, #32
 81081b0:	2b00      	cmp	r3, #0
 81081b2:	d00f      	beq.n	81081d4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81081c4:	687b      	ldr	r3, [r7, #4]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	699a      	ldr	r2, [r3, #24]
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	681b      	ldr	r3, [r3, #0]
 81081ce:	f042 0220 	orr.w	r2, r2, #32
 81081d2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81081d4:	687b      	ldr	r3, [r7, #4]
 81081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081da:	2b00      	cmp	r3, #0
 81081dc:	d05c      	beq.n	8108298 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 81081de:	687b      	ldr	r3, [r7, #4]
 81081e0:	681b      	ldr	r3, [r3, #0]
 81081e2:	681a      	ldr	r2, [r3, #0]
 81081e4:	687b      	ldr	r3, [r7, #4]
 81081e6:	681b      	ldr	r3, [r3, #0]
 81081e8:	f022 0201 	bic.w	r2, r2, #1
 81081ec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	681b      	ldr	r3, [r3, #0]
 81081f2:	691b      	ldr	r3, [r3, #16]
 81081f4:	687a      	ldr	r2, [r7, #4]
 81081f6:	6812      	ldr	r2, [r2, #0]
 81081f8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 81081fc:	f023 0303 	bic.w	r3, r3, #3
 8108200:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8108202:	697b      	ldr	r3, [r7, #20]
 8108204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8108208:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810820c:	d138      	bne.n	8108280 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	681b      	ldr	r3, [r3, #0]
 8108212:	689a      	ldr	r2, [r3, #8]
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	681b      	ldr	r3, [r3, #0]
 8108218:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810821c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108222:	2b00      	cmp	r3, #0
 8108224:	d013      	beq.n	810824e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8108226:	687b      	ldr	r3, [r7, #4]
 8108228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810822a:	4a1d      	ldr	r2, [pc, #116]	; (81082a0 <HAL_SPI_IRQHandler+0x3bc>)
 810822c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108232:	4618      	mov	r0, r3
 8108234:	f7fb f8a6 	bl	8103384 <HAL_DMA_Abort_IT>
 8108238:	4603      	mov	r3, r0
 810823a:	2b00      	cmp	r3, #0
 810823c:	d007      	beq.n	810824e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108252:	2b00      	cmp	r3, #0
 8108254:	d020      	beq.n	8108298 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8108256:	687b      	ldr	r3, [r7, #4]
 8108258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810825a:	4a11      	ldr	r2, [pc, #68]	; (81082a0 <HAL_SPI_IRQHandler+0x3bc>)
 810825c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810825e:	687b      	ldr	r3, [r7, #4]
 8108260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108262:	4618      	mov	r0, r3
 8108264:	f7fb f88e 	bl	8103384 <HAL_DMA_Abort_IT>
 8108268:	4603      	mov	r3, r0
 810826a:	2b00      	cmp	r3, #0
 810826c:	d014      	beq.n	8108298 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810827e:	e00b      	b.n	8108298 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	2201      	movs	r2, #1
 8108284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8108288:	6878      	ldr	r0, [r7, #4]
 810828a:	f000 f81f 	bl	81082cc <HAL_SPI_ErrorCallback>
    return;
 810828e:	e003      	b.n	8108298 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8108290:	bf00      	nop
 8108292:	e002      	b.n	810829a <HAL_SPI_IRQHandler+0x3b6>
    return;
 8108294:	bf00      	nop
 8108296:	e000      	b.n	810829a <HAL_SPI_IRQHandler+0x3b6>
    return;
 8108298:	bf00      	nop
  }
}
 810829a:	3728      	adds	r7, #40	; 0x28
 810829c:	46bd      	mov	sp, r7
 810829e:	bd80      	pop	{r7, pc}
 81082a0:	081082e1 	.word	0x081082e1

081082a4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81082a4:	b480      	push	{r7}
 81082a6:	b083      	sub	sp, #12
 81082a8:	af00      	add	r7, sp, #0
 81082aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 81082ac:	bf00      	nop
 81082ae:	370c      	adds	r7, #12
 81082b0:	46bd      	mov	sp, r7
 81082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082b6:	4770      	bx	lr

081082b8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81082b8:	b480      	push	{r7}
 81082ba:	b083      	sub	sp, #12
 81082bc:	af00      	add	r7, sp, #0
 81082be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 81082c0:	bf00      	nop
 81082c2:	370c      	adds	r7, #12
 81082c4:	46bd      	mov	sp, r7
 81082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082ca:	4770      	bx	lr

081082cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 81082cc:	b480      	push	{r7}
 81082ce:	b083      	sub	sp, #12
 81082d0:	af00      	add	r7, sp, #0
 81082d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 81082d4:	bf00      	nop
 81082d6:	370c      	adds	r7, #12
 81082d8:	46bd      	mov	sp, r7
 81082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082de:	4770      	bx	lr

081082e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81082e0:	b580      	push	{r7, lr}
 81082e2:	b084      	sub	sp, #16
 81082e4:	af00      	add	r7, sp, #0
 81082e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81082e8:	687b      	ldr	r3, [r7, #4]
 81082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 81082ee:	68fb      	ldr	r3, [r7, #12]
 81082f0:	2200      	movs	r2, #0
 81082f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 81082f6:	68fb      	ldr	r3, [r7, #12]
 81082f8:	2200      	movs	r2, #0
 81082fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 81082fe:	68fb      	ldr	r3, [r7, #12]
 8108300:	2201      	movs	r2, #1
 8108302:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8108306:	68f8      	ldr	r0, [r7, #12]
 8108308:	f7ff ffe0 	bl	81082cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810830c:	bf00      	nop
 810830e:	3710      	adds	r7, #16
 8108310:	46bd      	mov	sp, r7
 8108312:	bd80      	pop	{r7, pc}

08108314 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8108314:	b480      	push	{r7}
 8108316:	b085      	sub	sp, #20
 8108318:	af00      	add	r7, sp, #0
 810831a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	695b      	ldr	r3, [r3, #20]
 8108322:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8108324:	687b      	ldr	r3, [r7, #4]
 8108326:	681b      	ldr	r3, [r3, #0]
 8108328:	699a      	ldr	r2, [r3, #24]
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	f042 0208 	orr.w	r2, r2, #8
 8108332:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8108334:	687b      	ldr	r3, [r7, #4]
 8108336:	681b      	ldr	r3, [r3, #0]
 8108338:	699a      	ldr	r2, [r3, #24]
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	681b      	ldr	r3, [r3, #0]
 810833e:	f042 0210 	orr.w	r2, r2, #16
 8108342:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	681b      	ldr	r3, [r3, #0]
 8108348:	681a      	ldr	r2, [r3, #0]
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	681b      	ldr	r3, [r3, #0]
 810834e:	f022 0201 	bic.w	r2, r2, #1
 8108352:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	681b      	ldr	r3, [r3, #0]
 8108358:	691b      	ldr	r3, [r3, #16]
 810835a:	687a      	ldr	r2, [r7, #4]
 810835c:	6812      	ldr	r2, [r2, #0]
 810835e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8108362:	f023 0303 	bic.w	r3, r3, #3
 8108366:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	681b      	ldr	r3, [r3, #0]
 810836c:	689a      	ldr	r2, [r3, #8]
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8108376:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810837e:	b2db      	uxtb	r3, r3
 8108380:	2b04      	cmp	r3, #4
 8108382:	d014      	beq.n	81083ae <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8108384:	68fb      	ldr	r3, [r7, #12]
 8108386:	f003 0320 	and.w	r3, r3, #32
 810838a:	2b00      	cmp	r3, #0
 810838c:	d00f      	beq.n	81083ae <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810838e:	687b      	ldr	r3, [r7, #4]
 8108390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108394:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8108398:	687b      	ldr	r3, [r7, #4]
 810839a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810839e:	687b      	ldr	r3, [r7, #4]
 81083a0:	681b      	ldr	r3, [r3, #0]
 81083a2:	699a      	ldr	r2, [r3, #24]
 81083a4:	687b      	ldr	r3, [r7, #4]
 81083a6:	681b      	ldr	r3, [r3, #0]
 81083a8:	f042 0220 	orr.w	r2, r2, #32
 81083ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81083b4:	b2db      	uxtb	r3, r3
 81083b6:	2b03      	cmp	r3, #3
 81083b8:	d014      	beq.n	81083e4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81083ba:	68fb      	ldr	r3, [r7, #12]
 81083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81083c0:	2b00      	cmp	r3, #0
 81083c2:	d00f      	beq.n	81083e4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81083c4:	687b      	ldr	r3, [r7, #4]
 81083c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81083ca:	f043 0204 	orr.w	r2, r3, #4
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	681b      	ldr	r3, [r3, #0]
 81083d8:	699a      	ldr	r2, [r3, #24]
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	681b      	ldr	r3, [r3, #0]
 81083de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81083e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81083e4:	68fb      	ldr	r3, [r7, #12]
 81083e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81083ea:	2b00      	cmp	r3, #0
 81083ec:	d00f      	beq.n	810840e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81083f4:	f043 0201 	orr.w	r2, r3, #1
 81083f8:	687b      	ldr	r3, [r7, #4]
 81083fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81083fe:	687b      	ldr	r3, [r7, #4]
 8108400:	681b      	ldr	r3, [r3, #0]
 8108402:	699a      	ldr	r2, [r3, #24]
 8108404:	687b      	ldr	r3, [r7, #4]
 8108406:	681b      	ldr	r3, [r3, #0]
 8108408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810840c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810840e:	68fb      	ldr	r3, [r7, #12]
 8108410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108414:	2b00      	cmp	r3, #0
 8108416:	d00f      	beq.n	8108438 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810841e:	f043 0208 	orr.w	r2, r3, #8
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8108428:	687b      	ldr	r3, [r7, #4]
 810842a:	681b      	ldr	r3, [r3, #0]
 810842c:	699a      	ldr	r2, [r3, #24]
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	681b      	ldr	r3, [r3, #0]
 8108432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8108436:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	2200      	movs	r2, #0
 810843c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	2200      	movs	r2, #0
 8108444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8108448:	bf00      	nop
 810844a:	3714      	adds	r7, #20
 810844c:	46bd      	mov	sp, r7
 810844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108452:	4770      	bx	lr

08108454 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8108454:	b480      	push	{r7}
 8108456:	b085      	sub	sp, #20
 8108458:	af00      	add	r7, sp, #0
 810845a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108460:	095b      	lsrs	r3, r3, #5
 8108462:	3301      	adds	r3, #1
 8108464:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8108466:	687b      	ldr	r3, [r7, #4]
 8108468:	68db      	ldr	r3, [r3, #12]
 810846a:	3301      	adds	r3, #1
 810846c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810846e:	68bb      	ldr	r3, [r7, #8]
 8108470:	3307      	adds	r3, #7
 8108472:	08db      	lsrs	r3, r3, #3
 8108474:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8108476:	68bb      	ldr	r3, [r7, #8]
 8108478:	68fa      	ldr	r2, [r7, #12]
 810847a:	fb02 f303 	mul.w	r3, r2, r3
}
 810847e:	4618      	mov	r0, r3
 8108480:	3714      	adds	r7, #20
 8108482:	46bd      	mov	sp, r7
 8108484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108488:	4770      	bx	lr

0810848a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810848a:	b580      	push	{r7, lr}
 810848c:	b082      	sub	sp, #8
 810848e:	af00      	add	r7, sp, #0
 8108490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108492:	687b      	ldr	r3, [r7, #4]
 8108494:	2b00      	cmp	r3, #0
 8108496:	d101      	bne.n	810849c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108498:	2301      	movs	r3, #1
 810849a:	e042      	b.n	8108522 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810849c:	687b      	ldr	r3, [r7, #4]
 810849e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d106      	bne.n	81084b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	2200      	movs	r2, #0
 81084aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81084ae:	6878      	ldr	r0, [r7, #4]
 81084b0:	f7f9 fb12 	bl	8101ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	2224      	movs	r2, #36	; 0x24
 81084b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	681a      	ldr	r2, [r3, #0]
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	f022 0201 	bic.w	r2, r2, #1
 81084ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81084cc:	6878      	ldr	r0, [r7, #4]
 81084ce:	f000 fbd7 	bl	8108c80 <UART_SetConfig>
 81084d2:	4603      	mov	r3, r0
 81084d4:	2b01      	cmp	r3, #1
 81084d6:	d101      	bne.n	81084dc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81084d8:	2301      	movs	r3, #1
 81084da:	e022      	b.n	8108522 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81084dc:	687b      	ldr	r3, [r7, #4]
 81084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084e0:	2b00      	cmp	r3, #0
 81084e2:	d002      	beq.n	81084ea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81084e4:	6878      	ldr	r0, [r7, #4]
 81084e6:	f001 f92b 	bl	8109740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81084ea:	687b      	ldr	r3, [r7, #4]
 81084ec:	681b      	ldr	r3, [r3, #0]
 81084ee:	685a      	ldr	r2, [r3, #4]
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81084f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81084fa:	687b      	ldr	r3, [r7, #4]
 81084fc:	681b      	ldr	r3, [r3, #0]
 81084fe:	689a      	ldr	r2, [r3, #8]
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8108508:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	681b      	ldr	r3, [r3, #0]
 810850e:	681a      	ldr	r2, [r3, #0]
 8108510:	687b      	ldr	r3, [r7, #4]
 8108512:	681b      	ldr	r3, [r3, #0]
 8108514:	f042 0201 	orr.w	r2, r2, #1
 8108518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810851a:	6878      	ldr	r0, [r7, #4]
 810851c:	f001 f9b2 	bl	8109884 <UART_CheckIdleState>
 8108520:	4603      	mov	r3, r0
}
 8108522:	4618      	mov	r0, r3
 8108524:	3708      	adds	r7, #8
 8108526:	46bd      	mov	sp, r7
 8108528:	bd80      	pop	{r7, pc}
	...

0810852c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810852c:	b580      	push	{r7, lr}
 810852e:	b084      	sub	sp, #16
 8108530:	af00      	add	r7, sp, #0
 8108532:	60f8      	str	r0, [r7, #12]
 8108534:	60b9      	str	r1, [r7, #8]
 8108536:	4613      	mov	r3, r2
 8108538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810853a:	68fb      	ldr	r3, [r7, #12]
 810853c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108540:	2b20      	cmp	r3, #32
 8108542:	d168      	bne.n	8108616 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8108544:	68bb      	ldr	r3, [r7, #8]
 8108546:	2b00      	cmp	r3, #0
 8108548:	d002      	beq.n	8108550 <HAL_UART_Transmit_DMA+0x24>
 810854a:	88fb      	ldrh	r3, [r7, #6]
 810854c:	2b00      	cmp	r3, #0
 810854e:	d101      	bne.n	8108554 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8108550:	2301      	movs	r3, #1
 8108552:	e061      	b.n	8108618 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8108554:	68fb      	ldr	r3, [r7, #12]
 8108556:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810855a:	2b01      	cmp	r3, #1
 810855c:	d101      	bne.n	8108562 <HAL_UART_Transmit_DMA+0x36>
 810855e:	2302      	movs	r3, #2
 8108560:	e05a      	b.n	8108618 <HAL_UART_Transmit_DMA+0xec>
 8108562:	68fb      	ldr	r3, [r7, #12]
 8108564:	2201      	movs	r2, #1
 8108566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810856a:	68fb      	ldr	r3, [r7, #12]
 810856c:	68ba      	ldr	r2, [r7, #8]
 810856e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8108570:	68fb      	ldr	r3, [r7, #12]
 8108572:	88fa      	ldrh	r2, [r7, #6]
 8108574:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8108578:	68fb      	ldr	r3, [r7, #12]
 810857a:	88fa      	ldrh	r2, [r7, #6]
 810857c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108580:	68fb      	ldr	r3, [r7, #12]
 8108582:	2200      	movs	r2, #0
 8108584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108588:	68fb      	ldr	r3, [r7, #12]
 810858a:	2221      	movs	r2, #33	; 0x21
 810858c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8108590:	68fb      	ldr	r3, [r7, #12]
 8108592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108594:	2b00      	cmp	r3, #0
 8108596:	d02c      	beq.n	81085f2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8108598:	68fb      	ldr	r3, [r7, #12]
 810859a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810859c:	4a20      	ldr	r2, [pc, #128]	; (8108620 <HAL_UART_Transmit_DMA+0xf4>)
 810859e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 81085a0:	68fb      	ldr	r3, [r7, #12]
 81085a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81085a4:	4a1f      	ldr	r2, [pc, #124]	; (8108624 <HAL_UART_Transmit_DMA+0xf8>)
 81085a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 81085a8:	68fb      	ldr	r3, [r7, #12]
 81085aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81085ac:	4a1e      	ldr	r2, [pc, #120]	; (8108628 <HAL_UART_Transmit_DMA+0xfc>)
 81085ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 81085b0:	68fb      	ldr	r3, [r7, #12]
 81085b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81085b4:	2200      	movs	r2, #0
 81085b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81085b8:	68fb      	ldr	r3, [r7, #12]
 81085ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 81085bc:	68fb      	ldr	r3, [r7, #12]
 81085be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81085c0:	4619      	mov	r1, r3
 81085c2:	68fb      	ldr	r3, [r7, #12]
 81085c4:	681b      	ldr	r3, [r3, #0]
 81085c6:	3328      	adds	r3, #40	; 0x28
 81085c8:	461a      	mov	r2, r3
 81085ca:	88fb      	ldrh	r3, [r7, #6]
 81085cc:	f7fa f952 	bl	8102874 <HAL_DMA_Start_IT>
 81085d0:	4603      	mov	r3, r0
 81085d2:	2b00      	cmp	r3, #0
 81085d4:	d00d      	beq.n	81085f2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81085d6:	68fb      	ldr	r3, [r7, #12]
 81085d8:	2210      	movs	r2, #16
 81085da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 81085de:	68fb      	ldr	r3, [r7, #12]
 81085e0:	2200      	movs	r2, #0
 81085e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 81085e6:	68fb      	ldr	r3, [r7, #12]
 81085e8:	2220      	movs	r2, #32
 81085ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 81085ee:	2301      	movs	r3, #1
 81085f0:	e012      	b.n	8108618 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81085f2:	68fb      	ldr	r3, [r7, #12]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	2240      	movs	r2, #64	; 0x40
 81085f8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 81085fa:	68fb      	ldr	r3, [r7, #12]
 81085fc:	2200      	movs	r2, #0
 81085fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8108602:	68fb      	ldr	r3, [r7, #12]
 8108604:	681b      	ldr	r3, [r3, #0]
 8108606:	689a      	ldr	r2, [r3, #8]
 8108608:	68fb      	ldr	r3, [r7, #12]
 810860a:	681b      	ldr	r3, [r3, #0]
 810860c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8108610:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8108612:	2300      	movs	r3, #0
 8108614:	e000      	b.n	8108618 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8108616:	2302      	movs	r3, #2
  }
}
 8108618:	4618      	mov	r0, r3
 810861a:	3710      	adds	r7, #16
 810861c:	46bd      	mov	sp, r7
 810861e:	bd80      	pop	{r7, pc}
 8108620:	08109b99 	.word	0x08109b99
 8108624:	08109be9 	.word	0x08109be9
 8108628:	08109cd3 	.word	0x08109cd3

0810862c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810862c:	b580      	push	{r7, lr}
 810862e:	b084      	sub	sp, #16
 8108630:	af00      	add	r7, sp, #0
 8108632:	60f8      	str	r0, [r7, #12]
 8108634:	60b9      	str	r1, [r7, #8]
 8108636:	4613      	mov	r3, r2
 8108638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810863a:	68fb      	ldr	r3, [r7, #12]
 810863c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108640:	2b20      	cmp	r3, #32
 8108642:	d131      	bne.n	81086a8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8108644:	68bb      	ldr	r3, [r7, #8]
 8108646:	2b00      	cmp	r3, #0
 8108648:	d002      	beq.n	8108650 <HAL_UART_Receive_DMA+0x24>
 810864a:	88fb      	ldrh	r3, [r7, #6]
 810864c:	2b00      	cmp	r3, #0
 810864e:	d101      	bne.n	8108654 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8108650:	2301      	movs	r3, #1
 8108652:	e02a      	b.n	81086aa <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8108654:	68fb      	ldr	r3, [r7, #12]
 8108656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810865a:	2b01      	cmp	r3, #1
 810865c:	d101      	bne.n	8108662 <HAL_UART_Receive_DMA+0x36>
 810865e:	2302      	movs	r3, #2
 8108660:	e023      	b.n	81086aa <HAL_UART_Receive_DMA+0x7e>
 8108662:	68fb      	ldr	r3, [r7, #12]
 8108664:	2201      	movs	r2, #1
 8108666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810866a:	68fb      	ldr	r3, [r7, #12]
 810866c:	2200      	movs	r2, #0
 810866e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8108670:	68fb      	ldr	r3, [r7, #12]
 8108672:	681b      	ldr	r3, [r3, #0]
 8108674:	4a0f      	ldr	r2, [pc, #60]	; (81086b4 <HAL_UART_Receive_DMA+0x88>)
 8108676:	4293      	cmp	r3, r2
 8108678:	d00e      	beq.n	8108698 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810867a:	68fb      	ldr	r3, [r7, #12]
 810867c:	681b      	ldr	r3, [r3, #0]
 810867e:	685b      	ldr	r3, [r3, #4]
 8108680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108684:	2b00      	cmp	r3, #0
 8108686:	d007      	beq.n	8108698 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8108688:	68fb      	ldr	r3, [r7, #12]
 810868a:	681b      	ldr	r3, [r3, #0]
 810868c:	681a      	ldr	r2, [r3, #0]
 810868e:	68fb      	ldr	r3, [r7, #12]
 8108690:	681b      	ldr	r3, [r3, #0]
 8108692:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8108696:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8108698:	88fb      	ldrh	r3, [r7, #6]
 810869a:	461a      	mov	r2, r3
 810869c:	68b9      	ldr	r1, [r7, #8]
 810869e:	68f8      	ldr	r0, [r7, #12]
 81086a0:	f001 f9bc 	bl	8109a1c <UART_Start_Receive_DMA>
 81086a4:	4603      	mov	r3, r0
 81086a6:	e000      	b.n	81086aa <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 81086a8:	2302      	movs	r3, #2
  }
}
 81086aa:	4618      	mov	r0, r3
 81086ac:	3710      	adds	r7, #16
 81086ae:	46bd      	mov	sp, r7
 81086b0:	bd80      	pop	{r7, pc}
 81086b2:	bf00      	nop
 81086b4:	58000c00 	.word	0x58000c00

081086b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 81086b8:	b580      	push	{r7, lr}
 81086ba:	b088      	sub	sp, #32
 81086bc:	af00      	add	r7, sp, #0
 81086be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	69db      	ldr	r3, [r3, #28]
 81086c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81086c8:	687b      	ldr	r3, [r7, #4]
 81086ca:	681b      	ldr	r3, [r3, #0]
 81086cc:	681b      	ldr	r3, [r3, #0]
 81086ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81086d0:	687b      	ldr	r3, [r7, #4]
 81086d2:	681b      	ldr	r3, [r3, #0]
 81086d4:	689b      	ldr	r3, [r3, #8]
 81086d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81086d8:	69fa      	ldr	r2, [r7, #28]
 81086da:	f640 030f 	movw	r3, #2063	; 0x80f
 81086de:	4013      	ands	r3, r2
 81086e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 81086e2:	693b      	ldr	r3, [r7, #16]
 81086e4:	2b00      	cmp	r3, #0
 81086e6:	d118      	bne.n	810871a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81086e8:	69fb      	ldr	r3, [r7, #28]
 81086ea:	f003 0320 	and.w	r3, r3, #32
 81086ee:	2b00      	cmp	r3, #0
 81086f0:	d013      	beq.n	810871a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81086f2:	69bb      	ldr	r3, [r7, #24]
 81086f4:	f003 0320 	and.w	r3, r3, #32
 81086f8:	2b00      	cmp	r3, #0
 81086fa:	d104      	bne.n	8108706 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81086fc:	697b      	ldr	r3, [r7, #20]
 81086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108702:	2b00      	cmp	r3, #0
 8108704:	d009      	beq.n	810871a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810870a:	2b00      	cmp	r3, #0
 810870c:	f000 8282 	beq.w	8108c14 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8108710:	687b      	ldr	r3, [r7, #4]
 8108712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108714:	6878      	ldr	r0, [r7, #4]
 8108716:	4798      	blx	r3
      }
      return;
 8108718:	e27c      	b.n	8108c14 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810871a:	693b      	ldr	r3, [r7, #16]
 810871c:	2b00      	cmp	r3, #0
 810871e:	f000 80ef 	beq.w	8108900 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8108722:	697a      	ldr	r2, [r7, #20]
 8108724:	4b73      	ldr	r3, [pc, #460]	; (81088f4 <HAL_UART_IRQHandler+0x23c>)
 8108726:	4013      	ands	r3, r2
 8108728:	2b00      	cmp	r3, #0
 810872a:	d105      	bne.n	8108738 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810872c:	69ba      	ldr	r2, [r7, #24]
 810872e:	4b72      	ldr	r3, [pc, #456]	; (81088f8 <HAL_UART_IRQHandler+0x240>)
 8108730:	4013      	ands	r3, r2
 8108732:	2b00      	cmp	r3, #0
 8108734:	f000 80e4 	beq.w	8108900 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108738:	69fb      	ldr	r3, [r7, #28]
 810873a:	f003 0301 	and.w	r3, r3, #1
 810873e:	2b00      	cmp	r3, #0
 8108740:	d010      	beq.n	8108764 <HAL_UART_IRQHandler+0xac>
 8108742:	69bb      	ldr	r3, [r7, #24]
 8108744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108748:	2b00      	cmp	r3, #0
 810874a:	d00b      	beq.n	8108764 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810874c:	687b      	ldr	r3, [r7, #4]
 810874e:	681b      	ldr	r3, [r3, #0]
 8108750:	2201      	movs	r2, #1
 8108752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810875a:	f043 0201 	orr.w	r2, r3, #1
 810875e:	687b      	ldr	r3, [r7, #4]
 8108760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108764:	69fb      	ldr	r3, [r7, #28]
 8108766:	f003 0302 	and.w	r3, r3, #2
 810876a:	2b00      	cmp	r3, #0
 810876c:	d010      	beq.n	8108790 <HAL_UART_IRQHandler+0xd8>
 810876e:	697b      	ldr	r3, [r7, #20]
 8108770:	f003 0301 	and.w	r3, r3, #1
 8108774:	2b00      	cmp	r3, #0
 8108776:	d00b      	beq.n	8108790 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108778:	687b      	ldr	r3, [r7, #4]
 810877a:	681b      	ldr	r3, [r3, #0]
 810877c:	2202      	movs	r2, #2
 810877e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108780:	687b      	ldr	r3, [r7, #4]
 8108782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108786:	f043 0204 	orr.w	r2, r3, #4
 810878a:	687b      	ldr	r3, [r7, #4]
 810878c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108790:	69fb      	ldr	r3, [r7, #28]
 8108792:	f003 0304 	and.w	r3, r3, #4
 8108796:	2b00      	cmp	r3, #0
 8108798:	d010      	beq.n	81087bc <HAL_UART_IRQHandler+0x104>
 810879a:	697b      	ldr	r3, [r7, #20]
 810879c:	f003 0301 	and.w	r3, r3, #1
 81087a0:	2b00      	cmp	r3, #0
 81087a2:	d00b      	beq.n	81087bc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	2204      	movs	r2, #4
 81087aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81087b2:	f043 0202 	orr.w	r2, r3, #2
 81087b6:	687b      	ldr	r3, [r7, #4]
 81087b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81087bc:	69fb      	ldr	r3, [r7, #28]
 81087be:	f003 0308 	and.w	r3, r3, #8
 81087c2:	2b00      	cmp	r3, #0
 81087c4:	d015      	beq.n	81087f2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81087c6:	69bb      	ldr	r3, [r7, #24]
 81087c8:	f003 0320 	and.w	r3, r3, #32
 81087cc:	2b00      	cmp	r3, #0
 81087ce:	d104      	bne.n	81087da <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81087d0:	697a      	ldr	r2, [r7, #20]
 81087d2:	4b48      	ldr	r3, [pc, #288]	; (81088f4 <HAL_UART_IRQHandler+0x23c>)
 81087d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81087d6:	2b00      	cmp	r3, #0
 81087d8:	d00b      	beq.n	81087f2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81087da:	687b      	ldr	r3, [r7, #4]
 81087dc:	681b      	ldr	r3, [r3, #0]
 81087de:	2208      	movs	r2, #8
 81087e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81087e2:	687b      	ldr	r3, [r7, #4]
 81087e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81087e8:	f043 0208 	orr.w	r2, r3, #8
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81087f2:	69fb      	ldr	r3, [r7, #28]
 81087f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81087f8:	2b00      	cmp	r3, #0
 81087fa:	d011      	beq.n	8108820 <HAL_UART_IRQHandler+0x168>
 81087fc:	69bb      	ldr	r3, [r7, #24]
 81087fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8108802:	2b00      	cmp	r3, #0
 8108804:	d00c      	beq.n	8108820 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108806:	687b      	ldr	r3, [r7, #4]
 8108808:	681b      	ldr	r3, [r3, #0]
 810880a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810880e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8108810:	687b      	ldr	r3, [r7, #4]
 8108812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108816:	f043 0220 	orr.w	r2, r3, #32
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108820:	687b      	ldr	r3, [r7, #4]
 8108822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108826:	2b00      	cmp	r3, #0
 8108828:	f000 81f6 	beq.w	8108c18 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810882c:	69fb      	ldr	r3, [r7, #28]
 810882e:	f003 0320 	and.w	r3, r3, #32
 8108832:	2b00      	cmp	r3, #0
 8108834:	d011      	beq.n	810885a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8108836:	69bb      	ldr	r3, [r7, #24]
 8108838:	f003 0320 	and.w	r3, r3, #32
 810883c:	2b00      	cmp	r3, #0
 810883e:	d104      	bne.n	810884a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8108840:	697b      	ldr	r3, [r7, #20]
 8108842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108846:	2b00      	cmp	r3, #0
 8108848:	d007      	beq.n	810885a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810884e:	2b00      	cmp	r3, #0
 8108850:	d003      	beq.n	810885a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8108852:	687b      	ldr	r3, [r7, #4]
 8108854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108856:	6878      	ldr	r0, [r7, #4]
 8108858:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810885a:	687b      	ldr	r3, [r7, #4]
 810885c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108860:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108862:	687b      	ldr	r3, [r7, #4]
 8108864:	681b      	ldr	r3, [r3, #0]
 8108866:	689b      	ldr	r3, [r3, #8]
 8108868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810886c:	2b40      	cmp	r3, #64	; 0x40
 810886e:	d004      	beq.n	810887a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8108870:	68fb      	ldr	r3, [r7, #12]
 8108872:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108876:	2b00      	cmp	r3, #0
 8108878:	d031      	beq.n	81088de <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810887a:	6878      	ldr	r0, [r7, #4]
 810887c:	f001 f95a 	bl	8109b34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	689b      	ldr	r3, [r3, #8]
 8108886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810888a:	2b40      	cmp	r3, #64	; 0x40
 810888c:	d123      	bne.n	81088d6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	681b      	ldr	r3, [r3, #0]
 8108892:	689a      	ldr	r2, [r3, #8]
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	681b      	ldr	r3, [r3, #0]
 8108898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810889c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81088a2:	2b00      	cmp	r3, #0
 81088a4:	d013      	beq.n	81088ce <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81088a6:	687b      	ldr	r3, [r7, #4]
 81088a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81088aa:	4a14      	ldr	r2, [pc, #80]	; (81088fc <HAL_UART_IRQHandler+0x244>)
 81088ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81088b2:	4618      	mov	r0, r3
 81088b4:	f7fa fd66 	bl	8103384 <HAL_DMA_Abort_IT>
 81088b8:	4603      	mov	r3, r0
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d017      	beq.n	81088ee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81088c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81088c4:	687a      	ldr	r2, [r7, #4]
 81088c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 81088c8:	4610      	mov	r0, r2
 81088ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81088cc:	e00f      	b.n	81088ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 81088ce:	6878      	ldr	r0, [r7, #4]
 81088d0:	f000 f9c0 	bl	8108c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81088d4:	e00b      	b.n	81088ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81088d6:	6878      	ldr	r0, [r7, #4]
 81088d8:	f000 f9bc 	bl	8108c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81088dc:	e007      	b.n	81088ee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81088de:	6878      	ldr	r0, [r7, #4]
 81088e0:	f000 f9b8 	bl	8108c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81088e4:	687b      	ldr	r3, [r7, #4]
 81088e6:	2200      	movs	r2, #0
 81088e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 81088ec:	e194      	b.n	8108c18 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81088ee:	bf00      	nop
    return;
 81088f0:	e192      	b.n	8108c18 <HAL_UART_IRQHandler+0x560>
 81088f2:	bf00      	nop
 81088f4:	10000001 	.word	0x10000001
 81088f8:	04000120 	.word	0x04000120
 81088fc:	08109d53 	.word	0x08109d53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108904:	2b01      	cmp	r3, #1
 8108906:	f040 8111 	bne.w	8108b2c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810890a:	69fb      	ldr	r3, [r7, #28]
 810890c:	f003 0310 	and.w	r3, r3, #16
 8108910:	2b00      	cmp	r3, #0
 8108912:	f000 810b 	beq.w	8108b2c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8108916:	69bb      	ldr	r3, [r7, #24]
 8108918:	f003 0310 	and.w	r3, r3, #16
 810891c:	2b00      	cmp	r3, #0
 810891e:	f000 8105 	beq.w	8108b2c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	681b      	ldr	r3, [r3, #0]
 8108926:	2210      	movs	r2, #16
 8108928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	689b      	ldr	r3, [r3, #8]
 8108930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108934:	2b40      	cmp	r3, #64	; 0x40
 8108936:	f040 80bb 	bne.w	8108ab0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810893e:	681b      	ldr	r3, [r3, #0]
 8108940:	4a97      	ldr	r2, [pc, #604]	; (8108ba0 <HAL_UART_IRQHandler+0x4e8>)
 8108942:	4293      	cmp	r3, r2
 8108944:	d059      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 8108946:	687b      	ldr	r3, [r7, #4]
 8108948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810894a:	681b      	ldr	r3, [r3, #0]
 810894c:	4a95      	ldr	r2, [pc, #596]	; (8108ba4 <HAL_UART_IRQHandler+0x4ec>)
 810894e:	4293      	cmp	r3, r2
 8108950:	d053      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108956:	681b      	ldr	r3, [r3, #0]
 8108958:	4a93      	ldr	r2, [pc, #588]	; (8108ba8 <HAL_UART_IRQHandler+0x4f0>)
 810895a:	4293      	cmp	r3, r2
 810895c:	d04d      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108962:	681b      	ldr	r3, [r3, #0]
 8108964:	4a91      	ldr	r2, [pc, #580]	; (8108bac <HAL_UART_IRQHandler+0x4f4>)
 8108966:	4293      	cmp	r3, r2
 8108968:	d047      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810896e:	681b      	ldr	r3, [r3, #0]
 8108970:	4a8f      	ldr	r2, [pc, #572]	; (8108bb0 <HAL_UART_IRQHandler+0x4f8>)
 8108972:	4293      	cmp	r3, r2
 8108974:	d041      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810897a:	681b      	ldr	r3, [r3, #0]
 810897c:	4a8d      	ldr	r2, [pc, #564]	; (8108bb4 <HAL_UART_IRQHandler+0x4fc>)
 810897e:	4293      	cmp	r3, r2
 8108980:	d03b      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 8108982:	687b      	ldr	r3, [r7, #4]
 8108984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108986:	681b      	ldr	r3, [r3, #0]
 8108988:	4a8b      	ldr	r2, [pc, #556]	; (8108bb8 <HAL_UART_IRQHandler+0x500>)
 810898a:	4293      	cmp	r3, r2
 810898c:	d035      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108992:	681b      	ldr	r3, [r3, #0]
 8108994:	4a89      	ldr	r2, [pc, #548]	; (8108bbc <HAL_UART_IRQHandler+0x504>)
 8108996:	4293      	cmp	r3, r2
 8108998:	d02f      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 810899a:	687b      	ldr	r3, [r7, #4]
 810899c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810899e:	681b      	ldr	r3, [r3, #0]
 81089a0:	4a87      	ldr	r2, [pc, #540]	; (8108bc0 <HAL_UART_IRQHandler+0x508>)
 81089a2:	4293      	cmp	r3, r2
 81089a4:	d029      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089a6:	687b      	ldr	r3, [r7, #4]
 81089a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089aa:	681b      	ldr	r3, [r3, #0]
 81089ac:	4a85      	ldr	r2, [pc, #532]	; (8108bc4 <HAL_UART_IRQHandler+0x50c>)
 81089ae:	4293      	cmp	r3, r2
 81089b0:	d023      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089b6:	681b      	ldr	r3, [r3, #0]
 81089b8:	4a83      	ldr	r2, [pc, #524]	; (8108bc8 <HAL_UART_IRQHandler+0x510>)
 81089ba:	4293      	cmp	r3, r2
 81089bc:	d01d      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089c2:	681b      	ldr	r3, [r3, #0]
 81089c4:	4a81      	ldr	r2, [pc, #516]	; (8108bcc <HAL_UART_IRQHandler+0x514>)
 81089c6:	4293      	cmp	r3, r2
 81089c8:	d017      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089ce:	681b      	ldr	r3, [r3, #0]
 81089d0:	4a7f      	ldr	r2, [pc, #508]	; (8108bd0 <HAL_UART_IRQHandler+0x518>)
 81089d2:	4293      	cmp	r3, r2
 81089d4:	d011      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	4a7d      	ldr	r2, [pc, #500]	; (8108bd4 <HAL_UART_IRQHandler+0x51c>)
 81089de:	4293      	cmp	r3, r2
 81089e0:	d00b      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089e6:	681b      	ldr	r3, [r3, #0]
 81089e8:	4a7b      	ldr	r2, [pc, #492]	; (8108bd8 <HAL_UART_IRQHandler+0x520>)
 81089ea:	4293      	cmp	r3, r2
 81089ec:	d005      	beq.n	81089fa <HAL_UART_IRQHandler+0x342>
 81089ee:	687b      	ldr	r3, [r7, #4]
 81089f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	4a79      	ldr	r2, [pc, #484]	; (8108bdc <HAL_UART_IRQHandler+0x524>)
 81089f6:	4293      	cmp	r3, r2
 81089f8:	d105      	bne.n	8108a06 <HAL_UART_IRQHandler+0x34e>
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81089fe:	681b      	ldr	r3, [r3, #0]
 8108a00:	685b      	ldr	r3, [r3, #4]
 8108a02:	b29b      	uxth	r3, r3
 8108a04:	e004      	b.n	8108a10 <HAL_UART_IRQHandler+0x358>
 8108a06:	687b      	ldr	r3, [r7, #4]
 8108a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108a0a:	681b      	ldr	r3, [r3, #0]
 8108a0c:	685b      	ldr	r3, [r3, #4]
 8108a0e:	b29b      	uxth	r3, r3
 8108a10:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8108a12:	893b      	ldrh	r3, [r7, #8]
 8108a14:	2b00      	cmp	r3, #0
 8108a16:	f000 8101 	beq.w	8108c1c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8108a20:	893a      	ldrh	r2, [r7, #8]
 8108a22:	429a      	cmp	r2, r3
 8108a24:	f080 80fa 	bcs.w	8108c1c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	893a      	ldrh	r2, [r7, #8]
 8108a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108a34:	69db      	ldr	r3, [r3, #28]
 8108a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108a3a:	d02b      	beq.n	8108a94 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	681b      	ldr	r3, [r3, #0]
 8108a40:	681a      	ldr	r2, [r3, #0]
 8108a42:	687b      	ldr	r3, [r7, #4]
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108a4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	681b      	ldr	r3, [r3, #0]
 8108a50:	689a      	ldr	r2, [r3, #8]
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	f022 0201 	bic.w	r2, r2, #1
 8108a5a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	689a      	ldr	r2, [r3, #8]
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	681b      	ldr	r3, [r3, #0]
 8108a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108a6a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8108a6c:	687b      	ldr	r3, [r7, #4]
 8108a6e:	2220      	movs	r2, #32
 8108a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	2200      	movs	r2, #0
 8108a78:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108a7a:	687b      	ldr	r3, [r7, #4]
 8108a7c:	681b      	ldr	r3, [r3, #0]
 8108a7e:	681a      	ldr	r2, [r3, #0]
 8108a80:	687b      	ldr	r3, [r7, #4]
 8108a82:	681b      	ldr	r3, [r3, #0]
 8108a84:	f022 0210 	bic.w	r2, r2, #16
 8108a88:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8108a8a:	687b      	ldr	r3, [r7, #4]
 8108a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108a8e:	4618      	mov	r0, r3
 8108a90:	f7fa f95a 	bl	8102d48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8108a94:	687b      	ldr	r3, [r7, #4]
 8108a96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108aa0:	b29b      	uxth	r3, r3
 8108aa2:	1ad3      	subs	r3, r2, r3
 8108aa4:	b29b      	uxth	r3, r3
 8108aa6:	4619      	mov	r1, r3
 8108aa8:	6878      	ldr	r0, [r7, #4]
 8108aaa:	f000 f8dd 	bl	8108c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8108aae:	e0b5      	b.n	8108c1c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8108ab6:	687b      	ldr	r3, [r7, #4]
 8108ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108abc:	b29b      	uxth	r3, r3
 8108abe:	1ad3      	subs	r3, r2, r3
 8108ac0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8108ac2:	687b      	ldr	r3, [r7, #4]
 8108ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8108ac8:	b29b      	uxth	r3, r3
 8108aca:	2b00      	cmp	r3, #0
 8108acc:	f000 80a8 	beq.w	8108c20 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8108ad0:	897b      	ldrh	r3, [r7, #10]
 8108ad2:	2b00      	cmp	r3, #0
 8108ad4:	f000 80a4 	beq.w	8108c20 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108ad8:	687b      	ldr	r3, [r7, #4]
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	681a      	ldr	r2, [r3, #0]
 8108ade:	687b      	ldr	r3, [r7, #4]
 8108ae0:	681b      	ldr	r3, [r3, #0]
 8108ae2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108ae6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	681b      	ldr	r3, [r3, #0]
 8108aec:	689b      	ldr	r3, [r3, #8]
 8108aee:	687a      	ldr	r2, [r7, #4]
 8108af0:	6812      	ldr	r2, [r2, #0]
 8108af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108af6:	f023 0301 	bic.w	r3, r3, #1
 8108afa:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	2220      	movs	r2, #32
 8108b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108b04:	687b      	ldr	r3, [r7, #4]
 8108b06:	2200      	movs	r2, #0
 8108b08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	2200      	movs	r2, #0
 8108b0e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	681b      	ldr	r3, [r3, #0]
 8108b14:	681a      	ldr	r2, [r3, #0]
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	681b      	ldr	r3, [r3, #0]
 8108b1a:	f022 0210 	bic.w	r2, r2, #16
 8108b1e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8108b20:	897b      	ldrh	r3, [r7, #10]
 8108b22:	4619      	mov	r1, r3
 8108b24:	6878      	ldr	r0, [r7, #4]
 8108b26:	f000 f89f 	bl	8108c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8108b2a:	e079      	b.n	8108c20 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8108b2c:	69fb      	ldr	r3, [r7, #28]
 8108b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108b32:	2b00      	cmp	r3, #0
 8108b34:	d00d      	beq.n	8108b52 <HAL_UART_IRQHandler+0x49a>
 8108b36:	697b      	ldr	r3, [r7, #20]
 8108b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8108b3c:	2b00      	cmp	r3, #0
 8108b3e:	d008      	beq.n	8108b52 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8108b40:	687b      	ldr	r3, [r7, #4]
 8108b42:	681b      	ldr	r3, [r3, #0]
 8108b44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8108b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8108b4a:	6878      	ldr	r0, [r7, #4]
 8108b4c:	f001 f931 	bl	8109db2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108b50:	e069      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8108b52:	69fb      	ldr	r3, [r7, #28]
 8108b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108b58:	2b00      	cmp	r3, #0
 8108b5a:	d012      	beq.n	8108b82 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8108b5c:	69bb      	ldr	r3, [r7, #24]
 8108b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108b62:	2b00      	cmp	r3, #0
 8108b64:	d104      	bne.n	8108b70 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8108b66:	697b      	ldr	r3, [r7, #20]
 8108b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108b6c:	2b00      	cmp	r3, #0
 8108b6e:	d008      	beq.n	8108b82 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 8108b70:	687b      	ldr	r3, [r7, #4]
 8108b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108b74:	2b00      	cmp	r3, #0
 8108b76:	d055      	beq.n	8108c24 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8108b78:	687b      	ldr	r3, [r7, #4]
 8108b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108b7c:	6878      	ldr	r0, [r7, #4]
 8108b7e:	4798      	blx	r3
    }
    return;
 8108b80:	e050      	b.n	8108c24 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8108b82:	69fb      	ldr	r3, [r7, #28]
 8108b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108b88:	2b00      	cmp	r3, #0
 8108b8a:	d029      	beq.n	8108be0 <HAL_UART_IRQHandler+0x528>
 8108b8c:	69bb      	ldr	r3, [r7, #24]
 8108b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108b92:	2b00      	cmp	r3, #0
 8108b94:	d024      	beq.n	8108be0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8108b96:	6878      	ldr	r0, [r7, #4]
 8108b98:	f001 f8f1 	bl	8109d7e <UART_EndTransmit_IT>
    return;
 8108b9c:	e043      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
 8108b9e:	bf00      	nop
 8108ba0:	40020010 	.word	0x40020010
 8108ba4:	40020028 	.word	0x40020028
 8108ba8:	40020040 	.word	0x40020040
 8108bac:	40020058 	.word	0x40020058
 8108bb0:	40020070 	.word	0x40020070
 8108bb4:	40020088 	.word	0x40020088
 8108bb8:	400200a0 	.word	0x400200a0
 8108bbc:	400200b8 	.word	0x400200b8
 8108bc0:	40020410 	.word	0x40020410
 8108bc4:	40020428 	.word	0x40020428
 8108bc8:	40020440 	.word	0x40020440
 8108bcc:	40020458 	.word	0x40020458
 8108bd0:	40020470 	.word	0x40020470
 8108bd4:	40020488 	.word	0x40020488
 8108bd8:	400204a0 	.word	0x400204a0
 8108bdc:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8108be0:	69fb      	ldr	r3, [r7, #28]
 8108be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108be6:	2b00      	cmp	r3, #0
 8108be8:	d008      	beq.n	8108bfc <HAL_UART_IRQHandler+0x544>
 8108bea:	69bb      	ldr	r3, [r7, #24]
 8108bec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108bf0:	2b00      	cmp	r3, #0
 8108bf2:	d003      	beq.n	8108bfc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8108bf4:	6878      	ldr	r0, [r7, #4]
 8108bf6:	f001 f8f0 	bl	8109dda <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108bfa:	e014      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8108bfc:	69fb      	ldr	r3, [r7, #28]
 8108bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108c02:	2b00      	cmp	r3, #0
 8108c04:	d00f      	beq.n	8108c26 <HAL_UART_IRQHandler+0x56e>
 8108c06:	69bb      	ldr	r3, [r7, #24]
 8108c08:	2b00      	cmp	r3, #0
 8108c0a:	da0c      	bge.n	8108c26 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8108c0c:	6878      	ldr	r0, [r7, #4]
 8108c0e:	f001 f8da 	bl	8109dc6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108c12:	e008      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
      return;
 8108c14:	bf00      	nop
 8108c16:	e006      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
    return;
 8108c18:	bf00      	nop
 8108c1a:	e004      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
      return;
 8108c1c:	bf00      	nop
 8108c1e:	e002      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
      return;
 8108c20:	bf00      	nop
 8108c22:	e000      	b.n	8108c26 <HAL_UART_IRQHandler+0x56e>
    return;
 8108c24:	bf00      	nop
  }
}
 8108c26:	3720      	adds	r7, #32
 8108c28:	46bd      	mov	sp, r7
 8108c2a:	bd80      	pop	{r7, pc}

08108c2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8108c2c:	b480      	push	{r7}
 8108c2e:	b083      	sub	sp, #12
 8108c30:	af00      	add	r7, sp, #0
 8108c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8108c34:	bf00      	nop
 8108c36:	370c      	adds	r7, #12
 8108c38:	46bd      	mov	sp, r7
 8108c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c3e:	4770      	bx	lr

08108c40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8108c40:	b480      	push	{r7}
 8108c42:	b083      	sub	sp, #12
 8108c44:	af00      	add	r7, sp, #0
 8108c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8108c48:	bf00      	nop
 8108c4a:	370c      	adds	r7, #12
 8108c4c:	46bd      	mov	sp, r7
 8108c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c52:	4770      	bx	lr

08108c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8108c54:	b480      	push	{r7}
 8108c56:	b083      	sub	sp, #12
 8108c58:	af00      	add	r7, sp, #0
 8108c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8108c5c:	bf00      	nop
 8108c5e:	370c      	adds	r7, #12
 8108c60:	46bd      	mov	sp, r7
 8108c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c66:	4770      	bx	lr

08108c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8108c68:	b480      	push	{r7}
 8108c6a:	b083      	sub	sp, #12
 8108c6c:	af00      	add	r7, sp, #0
 8108c6e:	6078      	str	r0, [r7, #4]
 8108c70:	460b      	mov	r3, r1
 8108c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8108c74:	bf00      	nop
 8108c76:	370c      	adds	r7, #12
 8108c78:	46bd      	mov	sp, r7
 8108c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c7e:	4770      	bx	lr

08108c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108c80:	b5b0      	push	{r4, r5, r7, lr}
 8108c82:	b08e      	sub	sp, #56	; 0x38
 8108c84:	af00      	add	r7, sp, #0
 8108c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108c88:	2300      	movs	r3, #0
 8108c8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108c8e:	687b      	ldr	r3, [r7, #4]
 8108c90:	689a      	ldr	r2, [r3, #8]
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	691b      	ldr	r3, [r3, #16]
 8108c96:	431a      	orrs	r2, r3
 8108c98:	687b      	ldr	r3, [r7, #4]
 8108c9a:	695b      	ldr	r3, [r3, #20]
 8108c9c:	431a      	orrs	r2, r3
 8108c9e:	687b      	ldr	r3, [r7, #4]
 8108ca0:	69db      	ldr	r3, [r3, #28]
 8108ca2:	4313      	orrs	r3, r2
 8108ca4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	681b      	ldr	r3, [r3, #0]
 8108caa:	681a      	ldr	r2, [r3, #0]
 8108cac:	4bc0      	ldr	r3, [pc, #768]	; (8108fb0 <UART_SetConfig+0x330>)
 8108cae:	4013      	ands	r3, r2
 8108cb0:	687a      	ldr	r2, [r7, #4]
 8108cb2:	6812      	ldr	r2, [r2, #0]
 8108cb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108cb6:	430b      	orrs	r3, r1
 8108cb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	685b      	ldr	r3, [r3, #4]
 8108cc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	68da      	ldr	r2, [r3, #12]
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	681b      	ldr	r3, [r3, #0]
 8108ccc:	430a      	orrs	r2, r1
 8108cce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108cd0:	687b      	ldr	r3, [r7, #4]
 8108cd2:	699b      	ldr	r3, [r3, #24]
 8108cd4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108cd6:	687b      	ldr	r3, [r7, #4]
 8108cd8:	681b      	ldr	r3, [r3, #0]
 8108cda:	4ab6      	ldr	r2, [pc, #728]	; (8108fb4 <UART_SetConfig+0x334>)
 8108cdc:	4293      	cmp	r3, r2
 8108cde:	d004      	beq.n	8108cea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	6a1b      	ldr	r3, [r3, #32]
 8108ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108ce6:	4313      	orrs	r3, r2
 8108ce8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	681b      	ldr	r3, [r3, #0]
 8108cee:	689b      	ldr	r3, [r3, #8]
 8108cf0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108cf4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108cf8:	687a      	ldr	r2, [r7, #4]
 8108cfa:	6812      	ldr	r2, [r2, #0]
 8108cfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108cfe:	430b      	orrs	r3, r1
 8108d00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108d02:	687b      	ldr	r3, [r7, #4]
 8108d04:	681b      	ldr	r3, [r3, #0]
 8108d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108d08:	f023 010f 	bic.w	r1, r3, #15
 8108d0c:	687b      	ldr	r3, [r7, #4]
 8108d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108d10:	687b      	ldr	r3, [r7, #4]
 8108d12:	681b      	ldr	r3, [r3, #0]
 8108d14:	430a      	orrs	r2, r1
 8108d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	681b      	ldr	r3, [r3, #0]
 8108d1c:	4aa6      	ldr	r2, [pc, #664]	; (8108fb8 <UART_SetConfig+0x338>)
 8108d1e:	4293      	cmp	r3, r2
 8108d20:	d176      	bne.n	8108e10 <UART_SetConfig+0x190>
 8108d22:	4ba6      	ldr	r3, [pc, #664]	; (8108fbc <UART_SetConfig+0x33c>)
 8108d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108d2a:	2b28      	cmp	r3, #40	; 0x28
 8108d2c:	d86c      	bhi.n	8108e08 <UART_SetConfig+0x188>
 8108d2e:	a201      	add	r2, pc, #4	; (adr r2, 8108d34 <UART_SetConfig+0xb4>)
 8108d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d34:	08108dd9 	.word	0x08108dd9
 8108d38:	08108e09 	.word	0x08108e09
 8108d3c:	08108e09 	.word	0x08108e09
 8108d40:	08108e09 	.word	0x08108e09
 8108d44:	08108e09 	.word	0x08108e09
 8108d48:	08108e09 	.word	0x08108e09
 8108d4c:	08108e09 	.word	0x08108e09
 8108d50:	08108e09 	.word	0x08108e09
 8108d54:	08108de1 	.word	0x08108de1
 8108d58:	08108e09 	.word	0x08108e09
 8108d5c:	08108e09 	.word	0x08108e09
 8108d60:	08108e09 	.word	0x08108e09
 8108d64:	08108e09 	.word	0x08108e09
 8108d68:	08108e09 	.word	0x08108e09
 8108d6c:	08108e09 	.word	0x08108e09
 8108d70:	08108e09 	.word	0x08108e09
 8108d74:	08108de9 	.word	0x08108de9
 8108d78:	08108e09 	.word	0x08108e09
 8108d7c:	08108e09 	.word	0x08108e09
 8108d80:	08108e09 	.word	0x08108e09
 8108d84:	08108e09 	.word	0x08108e09
 8108d88:	08108e09 	.word	0x08108e09
 8108d8c:	08108e09 	.word	0x08108e09
 8108d90:	08108e09 	.word	0x08108e09
 8108d94:	08108df1 	.word	0x08108df1
 8108d98:	08108e09 	.word	0x08108e09
 8108d9c:	08108e09 	.word	0x08108e09
 8108da0:	08108e09 	.word	0x08108e09
 8108da4:	08108e09 	.word	0x08108e09
 8108da8:	08108e09 	.word	0x08108e09
 8108dac:	08108e09 	.word	0x08108e09
 8108db0:	08108e09 	.word	0x08108e09
 8108db4:	08108df9 	.word	0x08108df9
 8108db8:	08108e09 	.word	0x08108e09
 8108dbc:	08108e09 	.word	0x08108e09
 8108dc0:	08108e09 	.word	0x08108e09
 8108dc4:	08108e09 	.word	0x08108e09
 8108dc8:	08108e09 	.word	0x08108e09
 8108dcc:	08108e09 	.word	0x08108e09
 8108dd0:	08108e09 	.word	0x08108e09
 8108dd4:	08108e01 	.word	0x08108e01
 8108dd8:	2301      	movs	r3, #1
 8108dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108dde:	e220      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108de0:	2304      	movs	r3, #4
 8108de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108de6:	e21c      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108de8:	2308      	movs	r3, #8
 8108dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108dee:	e218      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108df0:	2310      	movs	r3, #16
 8108df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108df6:	e214      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108df8:	2320      	movs	r3, #32
 8108dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108dfe:	e210      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e00:	2340      	movs	r3, #64	; 0x40
 8108e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e06:	e20c      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e08:	2380      	movs	r3, #128	; 0x80
 8108e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e0e:	e208      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e10:	687b      	ldr	r3, [r7, #4]
 8108e12:	681b      	ldr	r3, [r3, #0]
 8108e14:	4a6a      	ldr	r2, [pc, #424]	; (8108fc0 <UART_SetConfig+0x340>)
 8108e16:	4293      	cmp	r3, r2
 8108e18:	d130      	bne.n	8108e7c <UART_SetConfig+0x1fc>
 8108e1a:	4b68      	ldr	r3, [pc, #416]	; (8108fbc <UART_SetConfig+0x33c>)
 8108e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e1e:	f003 0307 	and.w	r3, r3, #7
 8108e22:	2b05      	cmp	r3, #5
 8108e24:	d826      	bhi.n	8108e74 <UART_SetConfig+0x1f4>
 8108e26:	a201      	add	r2, pc, #4	; (adr r2, 8108e2c <UART_SetConfig+0x1ac>)
 8108e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e2c:	08108e45 	.word	0x08108e45
 8108e30:	08108e4d 	.word	0x08108e4d
 8108e34:	08108e55 	.word	0x08108e55
 8108e38:	08108e5d 	.word	0x08108e5d
 8108e3c:	08108e65 	.word	0x08108e65
 8108e40:	08108e6d 	.word	0x08108e6d
 8108e44:	2300      	movs	r3, #0
 8108e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e4a:	e1ea      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e4c:	2304      	movs	r3, #4
 8108e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e52:	e1e6      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e54:	2308      	movs	r3, #8
 8108e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e5a:	e1e2      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e5c:	2310      	movs	r3, #16
 8108e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e62:	e1de      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e64:	2320      	movs	r3, #32
 8108e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e6a:	e1da      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e6c:	2340      	movs	r3, #64	; 0x40
 8108e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e72:	e1d6      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e74:	2380      	movs	r3, #128	; 0x80
 8108e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108e7a:	e1d2      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108e7c:	687b      	ldr	r3, [r7, #4]
 8108e7e:	681b      	ldr	r3, [r3, #0]
 8108e80:	4a50      	ldr	r2, [pc, #320]	; (8108fc4 <UART_SetConfig+0x344>)
 8108e82:	4293      	cmp	r3, r2
 8108e84:	d130      	bne.n	8108ee8 <UART_SetConfig+0x268>
 8108e86:	4b4d      	ldr	r3, [pc, #308]	; (8108fbc <UART_SetConfig+0x33c>)
 8108e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e8a:	f003 0307 	and.w	r3, r3, #7
 8108e8e:	2b05      	cmp	r3, #5
 8108e90:	d826      	bhi.n	8108ee0 <UART_SetConfig+0x260>
 8108e92:	a201      	add	r2, pc, #4	; (adr r2, 8108e98 <UART_SetConfig+0x218>)
 8108e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e98:	08108eb1 	.word	0x08108eb1
 8108e9c:	08108eb9 	.word	0x08108eb9
 8108ea0:	08108ec1 	.word	0x08108ec1
 8108ea4:	08108ec9 	.word	0x08108ec9
 8108ea8:	08108ed1 	.word	0x08108ed1
 8108eac:	08108ed9 	.word	0x08108ed9
 8108eb0:	2300      	movs	r3, #0
 8108eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108eb6:	e1b4      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108eb8:	2304      	movs	r3, #4
 8108eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108ebe:	e1b0      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108ec0:	2308      	movs	r3, #8
 8108ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108ec6:	e1ac      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108ec8:	2310      	movs	r3, #16
 8108eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108ece:	e1a8      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108ed0:	2320      	movs	r3, #32
 8108ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108ed6:	e1a4      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108ed8:	2340      	movs	r3, #64	; 0x40
 8108eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108ede:	e1a0      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108ee0:	2380      	movs	r3, #128	; 0x80
 8108ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108ee6:	e19c      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	4a36      	ldr	r2, [pc, #216]	; (8108fc8 <UART_SetConfig+0x348>)
 8108eee:	4293      	cmp	r3, r2
 8108ef0:	d130      	bne.n	8108f54 <UART_SetConfig+0x2d4>
 8108ef2:	4b32      	ldr	r3, [pc, #200]	; (8108fbc <UART_SetConfig+0x33c>)
 8108ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ef6:	f003 0307 	and.w	r3, r3, #7
 8108efa:	2b05      	cmp	r3, #5
 8108efc:	d826      	bhi.n	8108f4c <UART_SetConfig+0x2cc>
 8108efe:	a201      	add	r2, pc, #4	; (adr r2, 8108f04 <UART_SetConfig+0x284>)
 8108f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f04:	08108f1d 	.word	0x08108f1d
 8108f08:	08108f25 	.word	0x08108f25
 8108f0c:	08108f2d 	.word	0x08108f2d
 8108f10:	08108f35 	.word	0x08108f35
 8108f14:	08108f3d 	.word	0x08108f3d
 8108f18:	08108f45 	.word	0x08108f45
 8108f1c:	2300      	movs	r3, #0
 8108f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f22:	e17e      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f24:	2304      	movs	r3, #4
 8108f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f2a:	e17a      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f2c:	2308      	movs	r3, #8
 8108f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f32:	e176      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f34:	2310      	movs	r3, #16
 8108f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f3a:	e172      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f3c:	2320      	movs	r3, #32
 8108f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f42:	e16e      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f44:	2340      	movs	r3, #64	; 0x40
 8108f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f4a:	e16a      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f4c:	2380      	movs	r3, #128	; 0x80
 8108f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f52:	e166      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	681b      	ldr	r3, [r3, #0]
 8108f58:	4a1c      	ldr	r2, [pc, #112]	; (8108fcc <UART_SetConfig+0x34c>)
 8108f5a:	4293      	cmp	r3, r2
 8108f5c:	d140      	bne.n	8108fe0 <UART_SetConfig+0x360>
 8108f5e:	4b17      	ldr	r3, [pc, #92]	; (8108fbc <UART_SetConfig+0x33c>)
 8108f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108f62:	f003 0307 	and.w	r3, r3, #7
 8108f66:	2b05      	cmp	r3, #5
 8108f68:	d836      	bhi.n	8108fd8 <UART_SetConfig+0x358>
 8108f6a:	a201      	add	r2, pc, #4	; (adr r2, 8108f70 <UART_SetConfig+0x2f0>)
 8108f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f70:	08108f89 	.word	0x08108f89
 8108f74:	08108f91 	.word	0x08108f91
 8108f78:	08108f99 	.word	0x08108f99
 8108f7c:	08108fa1 	.word	0x08108fa1
 8108f80:	08108fa9 	.word	0x08108fa9
 8108f84:	08108fd1 	.word	0x08108fd1
 8108f88:	2300      	movs	r3, #0
 8108f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f8e:	e148      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f90:	2304      	movs	r3, #4
 8108f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f96:	e144      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108f98:	2308      	movs	r3, #8
 8108f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108f9e:	e140      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108fa0:	2310      	movs	r3, #16
 8108fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108fa6:	e13c      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108fa8:	2320      	movs	r3, #32
 8108faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108fae:	e138      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108fb0:	cfff69f3 	.word	0xcfff69f3
 8108fb4:	58000c00 	.word	0x58000c00
 8108fb8:	40011000 	.word	0x40011000
 8108fbc:	58024400 	.word	0x58024400
 8108fc0:	40004400 	.word	0x40004400
 8108fc4:	40004800 	.word	0x40004800
 8108fc8:	40004c00 	.word	0x40004c00
 8108fcc:	40005000 	.word	0x40005000
 8108fd0:	2340      	movs	r3, #64	; 0x40
 8108fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108fd6:	e124      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108fd8:	2380      	movs	r3, #128	; 0x80
 8108fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108fde:	e120      	b.n	8109222 <UART_SetConfig+0x5a2>
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	681b      	ldr	r3, [r3, #0]
 8108fe4:	4acc      	ldr	r2, [pc, #816]	; (8109318 <UART_SetConfig+0x698>)
 8108fe6:	4293      	cmp	r3, r2
 8108fe8:	d176      	bne.n	81090d8 <UART_SetConfig+0x458>
 8108fea:	4bcc      	ldr	r3, [pc, #816]	; (810931c <UART_SetConfig+0x69c>)
 8108fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108ff2:	2b28      	cmp	r3, #40	; 0x28
 8108ff4:	d86c      	bhi.n	81090d0 <UART_SetConfig+0x450>
 8108ff6:	a201      	add	r2, pc, #4	; (adr r2, 8108ffc <UART_SetConfig+0x37c>)
 8108ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ffc:	081090a1 	.word	0x081090a1
 8109000:	081090d1 	.word	0x081090d1
 8109004:	081090d1 	.word	0x081090d1
 8109008:	081090d1 	.word	0x081090d1
 810900c:	081090d1 	.word	0x081090d1
 8109010:	081090d1 	.word	0x081090d1
 8109014:	081090d1 	.word	0x081090d1
 8109018:	081090d1 	.word	0x081090d1
 810901c:	081090a9 	.word	0x081090a9
 8109020:	081090d1 	.word	0x081090d1
 8109024:	081090d1 	.word	0x081090d1
 8109028:	081090d1 	.word	0x081090d1
 810902c:	081090d1 	.word	0x081090d1
 8109030:	081090d1 	.word	0x081090d1
 8109034:	081090d1 	.word	0x081090d1
 8109038:	081090d1 	.word	0x081090d1
 810903c:	081090b1 	.word	0x081090b1
 8109040:	081090d1 	.word	0x081090d1
 8109044:	081090d1 	.word	0x081090d1
 8109048:	081090d1 	.word	0x081090d1
 810904c:	081090d1 	.word	0x081090d1
 8109050:	081090d1 	.word	0x081090d1
 8109054:	081090d1 	.word	0x081090d1
 8109058:	081090d1 	.word	0x081090d1
 810905c:	081090b9 	.word	0x081090b9
 8109060:	081090d1 	.word	0x081090d1
 8109064:	081090d1 	.word	0x081090d1
 8109068:	081090d1 	.word	0x081090d1
 810906c:	081090d1 	.word	0x081090d1
 8109070:	081090d1 	.word	0x081090d1
 8109074:	081090d1 	.word	0x081090d1
 8109078:	081090d1 	.word	0x081090d1
 810907c:	081090c1 	.word	0x081090c1
 8109080:	081090d1 	.word	0x081090d1
 8109084:	081090d1 	.word	0x081090d1
 8109088:	081090d1 	.word	0x081090d1
 810908c:	081090d1 	.word	0x081090d1
 8109090:	081090d1 	.word	0x081090d1
 8109094:	081090d1 	.word	0x081090d1
 8109098:	081090d1 	.word	0x081090d1
 810909c:	081090c9 	.word	0x081090c9
 81090a0:	2301      	movs	r3, #1
 81090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090a6:	e0bc      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090a8:	2304      	movs	r3, #4
 81090aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090ae:	e0b8      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090b0:	2308      	movs	r3, #8
 81090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090b6:	e0b4      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090b8:	2310      	movs	r3, #16
 81090ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090be:	e0b0      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090c0:	2320      	movs	r3, #32
 81090c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090c6:	e0ac      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090c8:	2340      	movs	r3, #64	; 0x40
 81090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090ce:	e0a8      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090d0:	2380      	movs	r3, #128	; 0x80
 81090d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81090d6:	e0a4      	b.n	8109222 <UART_SetConfig+0x5a2>
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	681b      	ldr	r3, [r3, #0]
 81090dc:	4a90      	ldr	r2, [pc, #576]	; (8109320 <UART_SetConfig+0x6a0>)
 81090de:	4293      	cmp	r3, r2
 81090e0:	d130      	bne.n	8109144 <UART_SetConfig+0x4c4>
 81090e2:	4b8e      	ldr	r3, [pc, #568]	; (810931c <UART_SetConfig+0x69c>)
 81090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81090e6:	f003 0307 	and.w	r3, r3, #7
 81090ea:	2b05      	cmp	r3, #5
 81090ec:	d826      	bhi.n	810913c <UART_SetConfig+0x4bc>
 81090ee:	a201      	add	r2, pc, #4	; (adr r2, 81090f4 <UART_SetConfig+0x474>)
 81090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090f4:	0810910d 	.word	0x0810910d
 81090f8:	08109115 	.word	0x08109115
 81090fc:	0810911d 	.word	0x0810911d
 8109100:	08109125 	.word	0x08109125
 8109104:	0810912d 	.word	0x0810912d
 8109108:	08109135 	.word	0x08109135
 810910c:	2300      	movs	r3, #0
 810910e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109112:	e086      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109114:	2304      	movs	r3, #4
 8109116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810911a:	e082      	b.n	8109222 <UART_SetConfig+0x5a2>
 810911c:	2308      	movs	r3, #8
 810911e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109122:	e07e      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109124:	2310      	movs	r3, #16
 8109126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810912a:	e07a      	b.n	8109222 <UART_SetConfig+0x5a2>
 810912c:	2320      	movs	r3, #32
 810912e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109132:	e076      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109134:	2340      	movs	r3, #64	; 0x40
 8109136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810913a:	e072      	b.n	8109222 <UART_SetConfig+0x5a2>
 810913c:	2380      	movs	r3, #128	; 0x80
 810913e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109142:	e06e      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109144:	687b      	ldr	r3, [r7, #4]
 8109146:	681b      	ldr	r3, [r3, #0]
 8109148:	4a76      	ldr	r2, [pc, #472]	; (8109324 <UART_SetConfig+0x6a4>)
 810914a:	4293      	cmp	r3, r2
 810914c:	d130      	bne.n	81091b0 <UART_SetConfig+0x530>
 810914e:	4b73      	ldr	r3, [pc, #460]	; (810931c <UART_SetConfig+0x69c>)
 8109150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109152:	f003 0307 	and.w	r3, r3, #7
 8109156:	2b05      	cmp	r3, #5
 8109158:	d826      	bhi.n	81091a8 <UART_SetConfig+0x528>
 810915a:	a201      	add	r2, pc, #4	; (adr r2, 8109160 <UART_SetConfig+0x4e0>)
 810915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109160:	08109179 	.word	0x08109179
 8109164:	08109181 	.word	0x08109181
 8109168:	08109189 	.word	0x08109189
 810916c:	08109191 	.word	0x08109191
 8109170:	08109199 	.word	0x08109199
 8109174:	081091a1 	.word	0x081091a1
 8109178:	2300      	movs	r3, #0
 810917a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810917e:	e050      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109180:	2304      	movs	r3, #4
 8109182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109186:	e04c      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109188:	2308      	movs	r3, #8
 810918a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810918e:	e048      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109190:	2310      	movs	r3, #16
 8109192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109196:	e044      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109198:	2320      	movs	r3, #32
 810919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810919e:	e040      	b.n	8109222 <UART_SetConfig+0x5a2>
 81091a0:	2340      	movs	r3, #64	; 0x40
 81091a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81091a6:	e03c      	b.n	8109222 <UART_SetConfig+0x5a2>
 81091a8:	2380      	movs	r3, #128	; 0x80
 81091aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81091ae:	e038      	b.n	8109222 <UART_SetConfig+0x5a2>
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	681b      	ldr	r3, [r3, #0]
 81091b4:	4a5c      	ldr	r2, [pc, #368]	; (8109328 <UART_SetConfig+0x6a8>)
 81091b6:	4293      	cmp	r3, r2
 81091b8:	d130      	bne.n	810921c <UART_SetConfig+0x59c>
 81091ba:	4b58      	ldr	r3, [pc, #352]	; (810931c <UART_SetConfig+0x69c>)
 81091bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81091be:	f003 0307 	and.w	r3, r3, #7
 81091c2:	2b05      	cmp	r3, #5
 81091c4:	d826      	bhi.n	8109214 <UART_SetConfig+0x594>
 81091c6:	a201      	add	r2, pc, #4	; (adr r2, 81091cc <UART_SetConfig+0x54c>)
 81091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81091cc:	081091e5 	.word	0x081091e5
 81091d0:	081091ed 	.word	0x081091ed
 81091d4:	081091f5 	.word	0x081091f5
 81091d8:	081091fd 	.word	0x081091fd
 81091dc:	08109205 	.word	0x08109205
 81091e0:	0810920d 	.word	0x0810920d
 81091e4:	2302      	movs	r3, #2
 81091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81091ea:	e01a      	b.n	8109222 <UART_SetConfig+0x5a2>
 81091ec:	2304      	movs	r3, #4
 81091ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81091f2:	e016      	b.n	8109222 <UART_SetConfig+0x5a2>
 81091f4:	2308      	movs	r3, #8
 81091f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81091fa:	e012      	b.n	8109222 <UART_SetConfig+0x5a2>
 81091fc:	2310      	movs	r3, #16
 81091fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109202:	e00e      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109204:	2320      	movs	r3, #32
 8109206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810920a:	e00a      	b.n	8109222 <UART_SetConfig+0x5a2>
 810920c:	2340      	movs	r3, #64	; 0x40
 810920e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8109212:	e006      	b.n	8109222 <UART_SetConfig+0x5a2>
 8109214:	2380      	movs	r3, #128	; 0x80
 8109216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810921a:	e002      	b.n	8109222 <UART_SetConfig+0x5a2>
 810921c:	2380      	movs	r3, #128	; 0x80
 810921e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	681b      	ldr	r3, [r3, #0]
 8109226:	4a40      	ldr	r2, [pc, #256]	; (8109328 <UART_SetConfig+0x6a8>)
 8109228:	4293      	cmp	r3, r2
 810922a:	f040 80ef 	bne.w	810940c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810922e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8109232:	2b20      	cmp	r3, #32
 8109234:	dc46      	bgt.n	81092c4 <UART_SetConfig+0x644>
 8109236:	2b02      	cmp	r3, #2
 8109238:	f2c0 8081 	blt.w	810933e <UART_SetConfig+0x6be>
 810923c:	3b02      	subs	r3, #2
 810923e:	2b1e      	cmp	r3, #30
 8109240:	d87d      	bhi.n	810933e <UART_SetConfig+0x6be>
 8109242:	a201      	add	r2, pc, #4	; (adr r2, 8109248 <UART_SetConfig+0x5c8>)
 8109244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109248:	081092cb 	.word	0x081092cb
 810924c:	0810933f 	.word	0x0810933f
 8109250:	081092d3 	.word	0x081092d3
 8109254:	0810933f 	.word	0x0810933f
 8109258:	0810933f 	.word	0x0810933f
 810925c:	0810933f 	.word	0x0810933f
 8109260:	081092e3 	.word	0x081092e3
 8109264:	0810933f 	.word	0x0810933f
 8109268:	0810933f 	.word	0x0810933f
 810926c:	0810933f 	.word	0x0810933f
 8109270:	0810933f 	.word	0x0810933f
 8109274:	0810933f 	.word	0x0810933f
 8109278:	0810933f 	.word	0x0810933f
 810927c:	0810933f 	.word	0x0810933f
 8109280:	081092f3 	.word	0x081092f3
 8109284:	0810933f 	.word	0x0810933f
 8109288:	0810933f 	.word	0x0810933f
 810928c:	0810933f 	.word	0x0810933f
 8109290:	0810933f 	.word	0x0810933f
 8109294:	0810933f 	.word	0x0810933f
 8109298:	0810933f 	.word	0x0810933f
 810929c:	0810933f 	.word	0x0810933f
 81092a0:	0810933f 	.word	0x0810933f
 81092a4:	0810933f 	.word	0x0810933f
 81092a8:	0810933f 	.word	0x0810933f
 81092ac:	0810933f 	.word	0x0810933f
 81092b0:	0810933f 	.word	0x0810933f
 81092b4:	0810933f 	.word	0x0810933f
 81092b8:	0810933f 	.word	0x0810933f
 81092bc:	0810933f 	.word	0x0810933f
 81092c0:	08109331 	.word	0x08109331
 81092c4:	2b40      	cmp	r3, #64	; 0x40
 81092c6:	d036      	beq.n	8109336 <UART_SetConfig+0x6b6>
 81092c8:	e039      	b.n	810933e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81092ca:	f7fe f8e7 	bl	810749c <HAL_RCCEx_GetD3PCLK1Freq>
 81092ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81092d0:	e03b      	b.n	810934a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81092d2:	f107 0314 	add.w	r3, r7, #20
 81092d6:	4618      	mov	r0, r3
 81092d8:	f7fe f8f6 	bl	81074c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81092dc:	69bb      	ldr	r3, [r7, #24]
 81092de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81092e0:	e033      	b.n	810934a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81092e2:	f107 0308 	add.w	r3, r7, #8
 81092e6:	4618      	mov	r0, r3
 81092e8:	f7fe fa42 	bl	8107770 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81092ec:	68fb      	ldr	r3, [r7, #12]
 81092ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81092f0:	e02b      	b.n	810934a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81092f2:	4b0a      	ldr	r3, [pc, #40]	; (810931c <UART_SetConfig+0x69c>)
 81092f4:	681b      	ldr	r3, [r3, #0]
 81092f6:	f003 0320 	and.w	r3, r3, #32
 81092fa:	2b00      	cmp	r3, #0
 81092fc:	d009      	beq.n	8109312 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81092fe:	4b07      	ldr	r3, [pc, #28]	; (810931c <UART_SetConfig+0x69c>)
 8109300:	681b      	ldr	r3, [r3, #0]
 8109302:	08db      	lsrs	r3, r3, #3
 8109304:	f003 0303 	and.w	r3, r3, #3
 8109308:	4a08      	ldr	r2, [pc, #32]	; (810932c <UART_SetConfig+0x6ac>)
 810930a:	fa22 f303 	lsr.w	r3, r2, r3
 810930e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109310:	e01b      	b.n	810934a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8109312:	4b06      	ldr	r3, [pc, #24]	; (810932c <UART_SetConfig+0x6ac>)
 8109314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109316:	e018      	b.n	810934a <UART_SetConfig+0x6ca>
 8109318:	40011400 	.word	0x40011400
 810931c:	58024400 	.word	0x58024400
 8109320:	40007800 	.word	0x40007800
 8109324:	40007c00 	.word	0x40007c00
 8109328:	58000c00 	.word	0x58000c00
 810932c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109330:	4bc4      	ldr	r3, [pc, #784]	; (8109644 <UART_SetConfig+0x9c4>)
 8109332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109334:	e009      	b.n	810934a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810933a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810933c:	e005      	b.n	810934a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810933e:	2300      	movs	r3, #0
 8109340:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8109342:	2301      	movs	r3, #1
 8109344:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8109348:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810934c:	2b00      	cmp	r3, #0
 810934e:	f000 81da 	beq.w	8109706 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109356:	4abc      	ldr	r2, [pc, #752]	; (8109648 <UART_SetConfig+0x9c8>)
 8109358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810935c:	461a      	mov	r2, r3
 810935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109360:	fbb3 f3f2 	udiv	r3, r3, r2
 8109364:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109366:	687b      	ldr	r3, [r7, #4]
 8109368:	685a      	ldr	r2, [r3, #4]
 810936a:	4613      	mov	r3, r2
 810936c:	005b      	lsls	r3, r3, #1
 810936e:	4413      	add	r3, r2
 8109370:	6a3a      	ldr	r2, [r7, #32]
 8109372:	429a      	cmp	r2, r3
 8109374:	d305      	bcc.n	8109382 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	685b      	ldr	r3, [r3, #4]
 810937a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810937c:	6a3a      	ldr	r2, [r7, #32]
 810937e:	429a      	cmp	r2, r3
 8109380:	d903      	bls.n	810938a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8109382:	2301      	movs	r3, #1
 8109384:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8109388:	e1bd      	b.n	8109706 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810938a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810938c:	4618      	mov	r0, r3
 810938e:	f04f 0100 	mov.w	r1, #0
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109396:	4aac      	ldr	r2, [pc, #688]	; (8109648 <UART_SetConfig+0x9c8>)
 8109398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810939c:	b29a      	uxth	r2, r3
 810939e:	f04f 0300 	mov.w	r3, #0
 81093a2:	f7f7 fbb7 	bl	8100b14 <__aeabi_uldivmod>
 81093a6:	4602      	mov	r2, r0
 81093a8:	460b      	mov	r3, r1
 81093aa:	4610      	mov	r0, r2
 81093ac:	4619      	mov	r1, r3
 81093ae:	f04f 0200 	mov.w	r2, #0
 81093b2:	f04f 0300 	mov.w	r3, #0
 81093b6:	020b      	lsls	r3, r1, #8
 81093b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81093bc:	0202      	lsls	r2, r0, #8
 81093be:	6879      	ldr	r1, [r7, #4]
 81093c0:	6849      	ldr	r1, [r1, #4]
 81093c2:	0849      	lsrs	r1, r1, #1
 81093c4:	4608      	mov	r0, r1
 81093c6:	f04f 0100 	mov.w	r1, #0
 81093ca:	1814      	adds	r4, r2, r0
 81093cc:	eb43 0501 	adc.w	r5, r3, r1
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	685b      	ldr	r3, [r3, #4]
 81093d4:	461a      	mov	r2, r3
 81093d6:	f04f 0300 	mov.w	r3, #0
 81093da:	4620      	mov	r0, r4
 81093dc:	4629      	mov	r1, r5
 81093de:	f7f7 fb99 	bl	8100b14 <__aeabi_uldivmod>
 81093e2:	4602      	mov	r2, r0
 81093e4:	460b      	mov	r3, r1
 81093e6:	4613      	mov	r3, r2
 81093e8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81093ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81093f0:	d308      	bcc.n	8109404 <UART_SetConfig+0x784>
 81093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81093f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81093f8:	d204      	bcs.n	8109404 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	681b      	ldr	r3, [r3, #0]
 81093fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109400:	60da      	str	r2, [r3, #12]
 8109402:	e180      	b.n	8109706 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8109404:	2301      	movs	r3, #1
 8109406:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810940a:	e17c      	b.n	8109706 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	69db      	ldr	r3, [r3, #28]
 8109410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109414:	f040 80bf 	bne.w	8109596 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8109418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810941c:	2b20      	cmp	r3, #32
 810941e:	dc49      	bgt.n	81094b4 <UART_SetConfig+0x834>
 8109420:	2b00      	cmp	r3, #0
 8109422:	db7c      	blt.n	810951e <UART_SetConfig+0x89e>
 8109424:	2b20      	cmp	r3, #32
 8109426:	d87a      	bhi.n	810951e <UART_SetConfig+0x89e>
 8109428:	a201      	add	r2, pc, #4	; (adr r2, 8109430 <UART_SetConfig+0x7b0>)
 810942a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810942e:	bf00      	nop
 8109430:	081094bb 	.word	0x081094bb
 8109434:	081094c3 	.word	0x081094c3
 8109438:	0810951f 	.word	0x0810951f
 810943c:	0810951f 	.word	0x0810951f
 8109440:	081094cb 	.word	0x081094cb
 8109444:	0810951f 	.word	0x0810951f
 8109448:	0810951f 	.word	0x0810951f
 810944c:	0810951f 	.word	0x0810951f
 8109450:	081094db 	.word	0x081094db
 8109454:	0810951f 	.word	0x0810951f
 8109458:	0810951f 	.word	0x0810951f
 810945c:	0810951f 	.word	0x0810951f
 8109460:	0810951f 	.word	0x0810951f
 8109464:	0810951f 	.word	0x0810951f
 8109468:	0810951f 	.word	0x0810951f
 810946c:	0810951f 	.word	0x0810951f
 8109470:	081094eb 	.word	0x081094eb
 8109474:	0810951f 	.word	0x0810951f
 8109478:	0810951f 	.word	0x0810951f
 810947c:	0810951f 	.word	0x0810951f
 8109480:	0810951f 	.word	0x0810951f
 8109484:	0810951f 	.word	0x0810951f
 8109488:	0810951f 	.word	0x0810951f
 810948c:	0810951f 	.word	0x0810951f
 8109490:	0810951f 	.word	0x0810951f
 8109494:	0810951f 	.word	0x0810951f
 8109498:	0810951f 	.word	0x0810951f
 810949c:	0810951f 	.word	0x0810951f
 81094a0:	0810951f 	.word	0x0810951f
 81094a4:	0810951f 	.word	0x0810951f
 81094a8:	0810951f 	.word	0x0810951f
 81094ac:	0810951f 	.word	0x0810951f
 81094b0:	08109511 	.word	0x08109511
 81094b4:	2b40      	cmp	r3, #64	; 0x40
 81094b6:	d02e      	beq.n	8109516 <UART_SetConfig+0x896>
 81094b8:	e031      	b.n	810951e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81094ba:	f7fd f883 	bl	81065c4 <HAL_RCC_GetPCLK1Freq>
 81094be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81094c0:	e033      	b.n	810952a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81094c2:	f7fd f895 	bl	81065f0 <HAL_RCC_GetPCLK2Freq>
 81094c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81094c8:	e02f      	b.n	810952a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81094ca:	f107 0314 	add.w	r3, r7, #20
 81094ce:	4618      	mov	r0, r3
 81094d0:	f7fd fffa 	bl	81074c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81094d4:	69bb      	ldr	r3, [r7, #24]
 81094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81094d8:	e027      	b.n	810952a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81094da:	f107 0308 	add.w	r3, r7, #8
 81094de:	4618      	mov	r0, r3
 81094e0:	f7fe f946 	bl	8107770 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81094e4:	68fb      	ldr	r3, [r7, #12]
 81094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81094e8:	e01f      	b.n	810952a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81094ea:	4b58      	ldr	r3, [pc, #352]	; (810964c <UART_SetConfig+0x9cc>)
 81094ec:	681b      	ldr	r3, [r3, #0]
 81094ee:	f003 0320 	and.w	r3, r3, #32
 81094f2:	2b00      	cmp	r3, #0
 81094f4:	d009      	beq.n	810950a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81094f6:	4b55      	ldr	r3, [pc, #340]	; (810964c <UART_SetConfig+0x9cc>)
 81094f8:	681b      	ldr	r3, [r3, #0]
 81094fa:	08db      	lsrs	r3, r3, #3
 81094fc:	f003 0303 	and.w	r3, r3, #3
 8109500:	4a53      	ldr	r2, [pc, #332]	; (8109650 <UART_SetConfig+0x9d0>)
 8109502:	fa22 f303 	lsr.w	r3, r2, r3
 8109506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109508:	e00f      	b.n	810952a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810950a:	4b51      	ldr	r3, [pc, #324]	; (8109650 <UART_SetConfig+0x9d0>)
 810950c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810950e:	e00c      	b.n	810952a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109510:	4b4c      	ldr	r3, [pc, #304]	; (8109644 <UART_SetConfig+0x9c4>)
 8109512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8109514:	e009      	b.n	810952a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810951a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810951c:	e005      	b.n	810952a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810951e:	2300      	movs	r3, #0
 8109520:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8109522:	2301      	movs	r3, #1
 8109524:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8109528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810952c:	2b00      	cmp	r3, #0
 810952e:	f000 80ea 	beq.w	8109706 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109536:	4a44      	ldr	r2, [pc, #272]	; (8109648 <UART_SetConfig+0x9c8>)
 8109538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810953c:	461a      	mov	r2, r3
 810953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109540:	fbb3 f3f2 	udiv	r3, r3, r2
 8109544:	005a      	lsls	r2, r3, #1
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	685b      	ldr	r3, [r3, #4]
 810954a:	085b      	lsrs	r3, r3, #1
 810954c:	441a      	add	r2, r3
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	685b      	ldr	r3, [r3, #4]
 8109552:	fbb2 f3f3 	udiv	r3, r2, r3
 8109556:	b29b      	uxth	r3, r3
 8109558:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810955c:	2b0f      	cmp	r3, #15
 810955e:	d916      	bls.n	810958e <UART_SetConfig+0x90e>
 8109560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109566:	d212      	bcs.n	810958e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810956a:	b29b      	uxth	r3, r3
 810956c:	f023 030f 	bic.w	r3, r3, #15
 8109570:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109574:	085b      	lsrs	r3, r3, #1
 8109576:	b29b      	uxth	r3, r3
 8109578:	f003 0307 	and.w	r3, r3, #7
 810957c:	b29a      	uxth	r2, r3
 810957e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8109580:	4313      	orrs	r3, r2
 8109582:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	681b      	ldr	r3, [r3, #0]
 8109588:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810958a:	60da      	str	r2, [r3, #12]
 810958c:	e0bb      	b.n	8109706 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810958e:	2301      	movs	r3, #1
 8109590:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8109594:	e0b7      	b.n	8109706 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8109596:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810959a:	2b20      	cmp	r3, #32
 810959c:	dc4a      	bgt.n	8109634 <UART_SetConfig+0x9b4>
 810959e:	2b00      	cmp	r3, #0
 81095a0:	f2c0 8086 	blt.w	81096b0 <UART_SetConfig+0xa30>
 81095a4:	2b20      	cmp	r3, #32
 81095a6:	f200 8083 	bhi.w	81096b0 <UART_SetConfig+0xa30>
 81095aa:	a201      	add	r2, pc, #4	; (adr r2, 81095b0 <UART_SetConfig+0x930>)
 81095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81095b0:	0810963b 	.word	0x0810963b
 81095b4:	08109655 	.word	0x08109655
 81095b8:	081096b1 	.word	0x081096b1
 81095bc:	081096b1 	.word	0x081096b1
 81095c0:	0810965d 	.word	0x0810965d
 81095c4:	081096b1 	.word	0x081096b1
 81095c8:	081096b1 	.word	0x081096b1
 81095cc:	081096b1 	.word	0x081096b1
 81095d0:	0810966d 	.word	0x0810966d
 81095d4:	081096b1 	.word	0x081096b1
 81095d8:	081096b1 	.word	0x081096b1
 81095dc:	081096b1 	.word	0x081096b1
 81095e0:	081096b1 	.word	0x081096b1
 81095e4:	081096b1 	.word	0x081096b1
 81095e8:	081096b1 	.word	0x081096b1
 81095ec:	081096b1 	.word	0x081096b1
 81095f0:	0810967d 	.word	0x0810967d
 81095f4:	081096b1 	.word	0x081096b1
 81095f8:	081096b1 	.word	0x081096b1
 81095fc:	081096b1 	.word	0x081096b1
 8109600:	081096b1 	.word	0x081096b1
 8109604:	081096b1 	.word	0x081096b1
 8109608:	081096b1 	.word	0x081096b1
 810960c:	081096b1 	.word	0x081096b1
 8109610:	081096b1 	.word	0x081096b1
 8109614:	081096b1 	.word	0x081096b1
 8109618:	081096b1 	.word	0x081096b1
 810961c:	081096b1 	.word	0x081096b1
 8109620:	081096b1 	.word	0x081096b1
 8109624:	081096b1 	.word	0x081096b1
 8109628:	081096b1 	.word	0x081096b1
 810962c:	081096b1 	.word	0x081096b1
 8109630:	081096a3 	.word	0x081096a3
 8109634:	2b40      	cmp	r3, #64	; 0x40
 8109636:	d037      	beq.n	81096a8 <UART_SetConfig+0xa28>
 8109638:	e03a      	b.n	81096b0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810963a:	f7fc ffc3 	bl	81065c4 <HAL_RCC_GetPCLK1Freq>
 810963e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8109640:	e03c      	b.n	81096bc <UART_SetConfig+0xa3c>
 8109642:	bf00      	nop
 8109644:	003d0900 	.word	0x003d0900
 8109648:	0810a100 	.word	0x0810a100
 810964c:	58024400 	.word	0x58024400
 8109650:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109654:	f7fc ffcc 	bl	81065f0 <HAL_RCC_GetPCLK2Freq>
 8109658:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810965a:	e02f      	b.n	81096bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810965c:	f107 0314 	add.w	r3, r7, #20
 8109660:	4618      	mov	r0, r3
 8109662:	f7fd ff31 	bl	81074c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109666:	69bb      	ldr	r3, [r7, #24]
 8109668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810966a:	e027      	b.n	81096bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810966c:	f107 0308 	add.w	r3, r7, #8
 8109670:	4618      	mov	r0, r3
 8109672:	f7fe f87d 	bl	8107770 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109676:	68fb      	ldr	r3, [r7, #12]
 8109678:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810967a:	e01f      	b.n	81096bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810967c:	4b2c      	ldr	r3, [pc, #176]	; (8109730 <UART_SetConfig+0xab0>)
 810967e:	681b      	ldr	r3, [r3, #0]
 8109680:	f003 0320 	and.w	r3, r3, #32
 8109684:	2b00      	cmp	r3, #0
 8109686:	d009      	beq.n	810969c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109688:	4b29      	ldr	r3, [pc, #164]	; (8109730 <UART_SetConfig+0xab0>)
 810968a:	681b      	ldr	r3, [r3, #0]
 810968c:	08db      	lsrs	r3, r3, #3
 810968e:	f003 0303 	and.w	r3, r3, #3
 8109692:	4a28      	ldr	r2, [pc, #160]	; (8109734 <UART_SetConfig+0xab4>)
 8109694:	fa22 f303 	lsr.w	r3, r2, r3
 8109698:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810969a:	e00f      	b.n	81096bc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810969c:	4b25      	ldr	r3, [pc, #148]	; (8109734 <UART_SetConfig+0xab4>)
 810969e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81096a0:	e00c      	b.n	81096bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81096a2:	4b25      	ldr	r3, [pc, #148]	; (8109738 <UART_SetConfig+0xab8>)
 81096a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81096a6:	e009      	b.n	81096bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81096a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81096ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81096ae:	e005      	b.n	81096bc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 81096b0:	2300      	movs	r3, #0
 81096b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81096b4:	2301      	movs	r3, #1
 81096b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81096ba:	bf00      	nop
    }

    if (pclk != 0U)
 81096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096be:	2b00      	cmp	r3, #0
 81096c0:	d021      	beq.n	8109706 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81096c6:	4a1d      	ldr	r2, [pc, #116]	; (810973c <UART_SetConfig+0xabc>)
 81096c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81096cc:	461a      	mov	r2, r3
 81096ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81096d0:	fbb3 f2f2 	udiv	r2, r3, r2
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	685b      	ldr	r3, [r3, #4]
 81096d8:	085b      	lsrs	r3, r3, #1
 81096da:	441a      	add	r2, r3
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	685b      	ldr	r3, [r3, #4]
 81096e0:	fbb2 f3f3 	udiv	r3, r2, r3
 81096e4:	b29b      	uxth	r3, r3
 81096e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096ea:	2b0f      	cmp	r3, #15
 81096ec:	d908      	bls.n	8109700 <UART_SetConfig+0xa80>
 81096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81096f4:	d204      	bcs.n	8109700 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 81096f6:	687b      	ldr	r3, [r7, #4]
 81096f8:	681b      	ldr	r3, [r3, #0]
 81096fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81096fc:	60da      	str	r2, [r3, #12]
 81096fe:	e002      	b.n	8109706 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8109700:	2301      	movs	r3, #1
 8109702:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	2201      	movs	r2, #1
 810970a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	2201      	movs	r2, #1
 8109712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	2200      	movs	r2, #0
 810971a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810971c:	687b      	ldr	r3, [r7, #4]
 810971e:	2200      	movs	r2, #0
 8109720:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8109722:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8109726:	4618      	mov	r0, r3
 8109728:	3738      	adds	r7, #56	; 0x38
 810972a:	46bd      	mov	sp, r7
 810972c:	bdb0      	pop	{r4, r5, r7, pc}
 810972e:	bf00      	nop
 8109730:	58024400 	.word	0x58024400
 8109734:	03d09000 	.word	0x03d09000
 8109738:	003d0900 	.word	0x003d0900
 810973c:	0810a100 	.word	0x0810a100

08109740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109740:	b480      	push	{r7}
 8109742:	b083      	sub	sp, #12
 8109744:	af00      	add	r7, sp, #0
 8109746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810974c:	f003 0301 	and.w	r3, r3, #1
 8109750:	2b00      	cmp	r3, #0
 8109752:	d00a      	beq.n	810976a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	681b      	ldr	r3, [r3, #0]
 8109758:	685b      	ldr	r3, [r3, #4]
 810975a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810975e:	687b      	ldr	r3, [r7, #4]
 8109760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109762:	687b      	ldr	r3, [r7, #4]
 8109764:	681b      	ldr	r3, [r3, #0]
 8109766:	430a      	orrs	r2, r1
 8109768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810976a:	687b      	ldr	r3, [r7, #4]
 810976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810976e:	f003 0302 	and.w	r3, r3, #2
 8109772:	2b00      	cmp	r3, #0
 8109774:	d00a      	beq.n	810978c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	681b      	ldr	r3, [r3, #0]
 810977a:	685b      	ldr	r3, [r3, #4]
 810977c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	681b      	ldr	r3, [r3, #0]
 8109788:	430a      	orrs	r2, r1
 810978a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109790:	f003 0304 	and.w	r3, r3, #4
 8109794:	2b00      	cmp	r3, #0
 8109796:	d00a      	beq.n	81097ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	685b      	ldr	r3, [r3, #4]
 810979e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81097a6:	687b      	ldr	r3, [r7, #4]
 81097a8:	681b      	ldr	r3, [r3, #0]
 81097aa:	430a      	orrs	r2, r1
 81097ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81097ae:	687b      	ldr	r3, [r7, #4]
 81097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097b2:	f003 0308 	and.w	r3, r3, #8
 81097b6:	2b00      	cmp	r3, #0
 81097b8:	d00a      	beq.n	81097d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	681b      	ldr	r3, [r3, #0]
 81097be:	685b      	ldr	r3, [r3, #4]
 81097c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81097c4:	687b      	ldr	r3, [r7, #4]
 81097c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81097c8:	687b      	ldr	r3, [r7, #4]
 81097ca:	681b      	ldr	r3, [r3, #0]
 81097cc:	430a      	orrs	r2, r1
 81097ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81097d0:	687b      	ldr	r3, [r7, #4]
 81097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097d4:	f003 0310 	and.w	r3, r3, #16
 81097d8:	2b00      	cmp	r3, #0
 81097da:	d00a      	beq.n	81097f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81097dc:	687b      	ldr	r3, [r7, #4]
 81097de:	681b      	ldr	r3, [r3, #0]
 81097e0:	689b      	ldr	r3, [r3, #8]
 81097e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81097ea:	687b      	ldr	r3, [r7, #4]
 81097ec:	681b      	ldr	r3, [r3, #0]
 81097ee:	430a      	orrs	r2, r1
 81097f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81097f2:	687b      	ldr	r3, [r7, #4]
 81097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097f6:	f003 0320 	and.w	r3, r3, #32
 81097fa:	2b00      	cmp	r3, #0
 81097fc:	d00a      	beq.n	8109814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81097fe:	687b      	ldr	r3, [r7, #4]
 8109800:	681b      	ldr	r3, [r3, #0]
 8109802:	689b      	ldr	r3, [r3, #8]
 8109804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109808:	687b      	ldr	r3, [r7, #4]
 810980a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	681b      	ldr	r3, [r3, #0]
 8109810:	430a      	orrs	r2, r1
 8109812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810981c:	2b00      	cmp	r3, #0
 810981e:	d01a      	beq.n	8109856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109820:	687b      	ldr	r3, [r7, #4]
 8109822:	681b      	ldr	r3, [r3, #0]
 8109824:	685b      	ldr	r3, [r3, #4]
 8109826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810982a:	687b      	ldr	r3, [r7, #4]
 810982c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810982e:	687b      	ldr	r3, [r7, #4]
 8109830:	681b      	ldr	r3, [r3, #0]
 8109832:	430a      	orrs	r2, r1
 8109834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8109836:	687b      	ldr	r3, [r7, #4]
 8109838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810983a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810983e:	d10a      	bne.n	8109856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	681b      	ldr	r3, [r3, #0]
 8109844:	685b      	ldr	r3, [r3, #4]
 8109846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810984a:	687b      	ldr	r3, [r7, #4]
 810984c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	681b      	ldr	r3, [r3, #0]
 8109852:	430a      	orrs	r2, r1
 8109854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8109856:	687b      	ldr	r3, [r7, #4]
 8109858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810985e:	2b00      	cmp	r3, #0
 8109860:	d00a      	beq.n	8109878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8109862:	687b      	ldr	r3, [r7, #4]
 8109864:	681b      	ldr	r3, [r3, #0]
 8109866:	685b      	ldr	r3, [r3, #4]
 8109868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810986c:	687b      	ldr	r3, [r7, #4]
 810986e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	681b      	ldr	r3, [r3, #0]
 8109874:	430a      	orrs	r2, r1
 8109876:	605a      	str	r2, [r3, #4]
  }
}
 8109878:	bf00      	nop
 810987a:	370c      	adds	r7, #12
 810987c:	46bd      	mov	sp, r7
 810987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109882:	4770      	bx	lr

08109884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109884:	b580      	push	{r7, lr}
 8109886:	b086      	sub	sp, #24
 8109888:	af02      	add	r7, sp, #8
 810988a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	2200      	movs	r2, #0
 8109890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8109894:	f7f8 fac4 	bl	8101e20 <HAL_GetTick>
 8109898:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810989a:	687b      	ldr	r3, [r7, #4]
 810989c:	681b      	ldr	r3, [r3, #0]
 810989e:	681b      	ldr	r3, [r3, #0]
 81098a0:	f003 0308 	and.w	r3, r3, #8
 81098a4:	2b08      	cmp	r3, #8
 81098a6:	d10e      	bne.n	81098c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81098a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81098ac:	9300      	str	r3, [sp, #0]
 81098ae:	68fb      	ldr	r3, [r7, #12]
 81098b0:	2200      	movs	r2, #0
 81098b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81098b6:	6878      	ldr	r0, [r7, #4]
 81098b8:	f000 f82f 	bl	810991a <UART_WaitOnFlagUntilTimeout>
 81098bc:	4603      	mov	r3, r0
 81098be:	2b00      	cmp	r3, #0
 81098c0:	d001      	beq.n	81098c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81098c2:	2303      	movs	r3, #3
 81098c4:	e025      	b.n	8109912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81098c6:	687b      	ldr	r3, [r7, #4]
 81098c8:	681b      	ldr	r3, [r3, #0]
 81098ca:	681b      	ldr	r3, [r3, #0]
 81098cc:	f003 0304 	and.w	r3, r3, #4
 81098d0:	2b04      	cmp	r3, #4
 81098d2:	d10e      	bne.n	81098f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81098d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81098d8:	9300      	str	r3, [sp, #0]
 81098da:	68fb      	ldr	r3, [r7, #12]
 81098dc:	2200      	movs	r2, #0
 81098de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81098e2:	6878      	ldr	r0, [r7, #4]
 81098e4:	f000 f819 	bl	810991a <UART_WaitOnFlagUntilTimeout>
 81098e8:	4603      	mov	r3, r0
 81098ea:	2b00      	cmp	r3, #0
 81098ec:	d001      	beq.n	81098f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81098ee:	2303      	movs	r3, #3
 81098f0:	e00f      	b.n	8109912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81098f2:	687b      	ldr	r3, [r7, #4]
 81098f4:	2220      	movs	r2, #32
 81098f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	2220      	movs	r2, #32
 81098fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109902:	687b      	ldr	r3, [r7, #4]
 8109904:	2200      	movs	r2, #0
 8109906:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8109908:	687b      	ldr	r3, [r7, #4]
 810990a:	2200      	movs	r2, #0
 810990c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109910:	2300      	movs	r3, #0
}
 8109912:	4618      	mov	r0, r3
 8109914:	3710      	adds	r7, #16
 8109916:	46bd      	mov	sp, r7
 8109918:	bd80      	pop	{r7, pc}

0810991a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810991a:	b580      	push	{r7, lr}
 810991c:	b084      	sub	sp, #16
 810991e:	af00      	add	r7, sp, #0
 8109920:	60f8      	str	r0, [r7, #12]
 8109922:	60b9      	str	r1, [r7, #8]
 8109924:	603b      	str	r3, [r7, #0]
 8109926:	4613      	mov	r3, r2
 8109928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810992a:	e062      	b.n	81099f2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810992c:	69bb      	ldr	r3, [r7, #24]
 810992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109932:	d05e      	beq.n	81099f2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109934:	f7f8 fa74 	bl	8101e20 <HAL_GetTick>
 8109938:	4602      	mov	r2, r0
 810993a:	683b      	ldr	r3, [r7, #0]
 810993c:	1ad3      	subs	r3, r2, r3
 810993e:	69ba      	ldr	r2, [r7, #24]
 8109940:	429a      	cmp	r2, r3
 8109942:	d302      	bcc.n	810994a <UART_WaitOnFlagUntilTimeout+0x30>
 8109944:	69bb      	ldr	r3, [r7, #24]
 8109946:	2b00      	cmp	r3, #0
 8109948:	d11d      	bne.n	8109986 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810994a:	68fb      	ldr	r3, [r7, #12]
 810994c:	681b      	ldr	r3, [r3, #0]
 810994e:	681a      	ldr	r2, [r3, #0]
 8109950:	68fb      	ldr	r3, [r7, #12]
 8109952:	681b      	ldr	r3, [r3, #0]
 8109954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8109958:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810995a:	68fb      	ldr	r3, [r7, #12]
 810995c:	681b      	ldr	r3, [r3, #0]
 810995e:	689a      	ldr	r2, [r3, #8]
 8109960:	68fb      	ldr	r3, [r7, #12]
 8109962:	681b      	ldr	r3, [r3, #0]
 8109964:	f022 0201 	bic.w	r2, r2, #1
 8109968:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810996a:	68fb      	ldr	r3, [r7, #12]
 810996c:	2220      	movs	r2, #32
 810996e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8109972:	68fb      	ldr	r3, [r7, #12]
 8109974:	2220      	movs	r2, #32
 8109976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810997a:	68fb      	ldr	r3, [r7, #12]
 810997c:	2200      	movs	r2, #0
 810997e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8109982:	2303      	movs	r3, #3
 8109984:	e045      	b.n	8109a12 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8109986:	68fb      	ldr	r3, [r7, #12]
 8109988:	681b      	ldr	r3, [r3, #0]
 810998a:	681b      	ldr	r3, [r3, #0]
 810998c:	f003 0304 	and.w	r3, r3, #4
 8109990:	2b00      	cmp	r3, #0
 8109992:	d02e      	beq.n	81099f2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109994:	68fb      	ldr	r3, [r7, #12]
 8109996:	681b      	ldr	r3, [r3, #0]
 8109998:	69db      	ldr	r3, [r3, #28]
 810999a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810999e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81099a2:	d126      	bne.n	81099f2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81099a4:	68fb      	ldr	r3, [r7, #12]
 81099a6:	681b      	ldr	r3, [r3, #0]
 81099a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81099ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81099ae:	68fb      	ldr	r3, [r7, #12]
 81099b0:	681b      	ldr	r3, [r3, #0]
 81099b2:	681a      	ldr	r2, [r3, #0]
 81099b4:	68fb      	ldr	r3, [r7, #12]
 81099b6:	681b      	ldr	r3, [r3, #0]
 81099b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81099bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81099be:	68fb      	ldr	r3, [r7, #12]
 81099c0:	681b      	ldr	r3, [r3, #0]
 81099c2:	689a      	ldr	r2, [r3, #8]
 81099c4:	68fb      	ldr	r3, [r7, #12]
 81099c6:	681b      	ldr	r3, [r3, #0]
 81099c8:	f022 0201 	bic.w	r2, r2, #1
 81099cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 81099ce:	68fb      	ldr	r3, [r7, #12]
 81099d0:	2220      	movs	r2, #32
 81099d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 81099d6:	68fb      	ldr	r3, [r7, #12]
 81099d8:	2220      	movs	r2, #32
 81099da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81099de:	68fb      	ldr	r3, [r7, #12]
 81099e0:	2220      	movs	r2, #32
 81099e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81099e6:	68fb      	ldr	r3, [r7, #12]
 81099e8:	2200      	movs	r2, #0
 81099ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81099ee:	2303      	movs	r3, #3
 81099f0:	e00f      	b.n	8109a12 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81099f2:	68fb      	ldr	r3, [r7, #12]
 81099f4:	681b      	ldr	r3, [r3, #0]
 81099f6:	69da      	ldr	r2, [r3, #28]
 81099f8:	68bb      	ldr	r3, [r7, #8]
 81099fa:	4013      	ands	r3, r2
 81099fc:	68ba      	ldr	r2, [r7, #8]
 81099fe:	429a      	cmp	r2, r3
 8109a00:	bf0c      	ite	eq
 8109a02:	2301      	moveq	r3, #1
 8109a04:	2300      	movne	r3, #0
 8109a06:	b2db      	uxtb	r3, r3
 8109a08:	461a      	mov	r2, r3
 8109a0a:	79fb      	ldrb	r3, [r7, #7]
 8109a0c:	429a      	cmp	r2, r3
 8109a0e:	d08d      	beq.n	810992c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109a10:	2300      	movs	r3, #0
}
 8109a12:	4618      	mov	r0, r3
 8109a14:	3710      	adds	r7, #16
 8109a16:	46bd      	mov	sp, r7
 8109a18:	bd80      	pop	{r7, pc}
	...

08109a1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8109a1c:	b580      	push	{r7, lr}
 8109a1e:	b084      	sub	sp, #16
 8109a20:	af00      	add	r7, sp, #0
 8109a22:	60f8      	str	r0, [r7, #12]
 8109a24:	60b9      	str	r1, [r7, #8]
 8109a26:	4613      	mov	r3, r2
 8109a28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8109a2a:	68fb      	ldr	r3, [r7, #12]
 8109a2c:	68ba      	ldr	r2, [r7, #8]
 8109a2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8109a30:	68fb      	ldr	r3, [r7, #12]
 8109a32:	88fa      	ldrh	r2, [r7, #6]
 8109a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109a38:	68fb      	ldr	r3, [r7, #12]
 8109a3a:	2200      	movs	r2, #0
 8109a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8109a40:	68fb      	ldr	r3, [r7, #12]
 8109a42:	2222      	movs	r2, #34	; 0x22
 8109a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8109a48:	68fb      	ldr	r3, [r7, #12]
 8109a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109a4c:	2b00      	cmp	r3, #0
 8109a4e:	d02c      	beq.n	8109aaa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8109a50:	68fb      	ldr	r3, [r7, #12]
 8109a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109a54:	4a25      	ldr	r2, [pc, #148]	; (8109aec <UART_Start_Receive_DMA+0xd0>)
 8109a56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8109a58:	68fb      	ldr	r3, [r7, #12]
 8109a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109a5c:	4a24      	ldr	r2, [pc, #144]	; (8109af0 <UART_Start_Receive_DMA+0xd4>)
 8109a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8109a60:	68fb      	ldr	r3, [r7, #12]
 8109a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109a64:	4a23      	ldr	r2, [pc, #140]	; (8109af4 <UART_Start_Receive_DMA+0xd8>)
 8109a66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8109a68:	68fb      	ldr	r3, [r7, #12]
 8109a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109a6c:	2200      	movs	r2, #0
 8109a6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8109a70:	68fb      	ldr	r3, [r7, #12]
 8109a72:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8109a74:	68fb      	ldr	r3, [r7, #12]
 8109a76:	681b      	ldr	r3, [r3, #0]
 8109a78:	3324      	adds	r3, #36	; 0x24
 8109a7a:	4619      	mov	r1, r3
 8109a7c:	68fb      	ldr	r3, [r7, #12]
 8109a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109a80:	461a      	mov	r2, r3
 8109a82:	88fb      	ldrh	r3, [r7, #6]
 8109a84:	f7f8 fef6 	bl	8102874 <HAL_DMA_Start_IT>
 8109a88:	4603      	mov	r3, r0
 8109a8a:	2b00      	cmp	r3, #0
 8109a8c:	d00d      	beq.n	8109aaa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8109a8e:	68fb      	ldr	r3, [r7, #12]
 8109a90:	2210      	movs	r2, #16
 8109a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	2200      	movs	r2, #0
 8109a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8109a9e:	68fb      	ldr	r3, [r7, #12]
 8109aa0:	2220      	movs	r2, #32
 8109aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8109aa6:	2301      	movs	r3, #1
 8109aa8:	e01c      	b.n	8109ae4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8109aaa:	68fb      	ldr	r3, [r7, #12]
 8109aac:	2200      	movs	r2, #0
 8109aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	681b      	ldr	r3, [r3, #0]
 8109ab6:	681a      	ldr	r2, [r3, #0]
 8109ab8:	68fb      	ldr	r3, [r7, #12]
 8109aba:	681b      	ldr	r3, [r3, #0]
 8109abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8109ac0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109ac2:	68fb      	ldr	r3, [r7, #12]
 8109ac4:	681b      	ldr	r3, [r3, #0]
 8109ac6:	689a      	ldr	r2, [r3, #8]
 8109ac8:	68fb      	ldr	r3, [r7, #12]
 8109aca:	681b      	ldr	r3, [r3, #0]
 8109acc:	f042 0201 	orr.w	r2, r2, #1
 8109ad0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109ad2:	68fb      	ldr	r3, [r7, #12]
 8109ad4:	681b      	ldr	r3, [r3, #0]
 8109ad6:	689a      	ldr	r2, [r3, #8]
 8109ad8:	68fb      	ldr	r3, [r7, #12]
 8109ada:	681b      	ldr	r3, [r3, #0]
 8109adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8109ae0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8109ae2:	2300      	movs	r3, #0
}
 8109ae4:	4618      	mov	r0, r3
 8109ae6:	3710      	adds	r7, #16
 8109ae8:	46bd      	mov	sp, r7
 8109aea:	bd80      	pop	{r7, pc}
 8109aec:	08109c05 	.word	0x08109c05
 8109af0:	08109c9b 	.word	0x08109c9b
 8109af4:	08109cd3 	.word	0x08109cd3

08109af8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8109af8:	b480      	push	{r7}
 8109afa:	b083      	sub	sp, #12
 8109afc:	af00      	add	r7, sp, #0
 8109afe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8109b00:	687b      	ldr	r3, [r7, #4]
 8109b02:	681b      	ldr	r3, [r3, #0]
 8109b04:	681a      	ldr	r2, [r3, #0]
 8109b06:	687b      	ldr	r3, [r7, #4]
 8109b08:	681b      	ldr	r3, [r3, #0]
 8109b0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8109b0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8109b10:	687b      	ldr	r3, [r7, #4]
 8109b12:	681b      	ldr	r3, [r3, #0]
 8109b14:	689a      	ldr	r2, [r3, #8]
 8109b16:	687b      	ldr	r3, [r7, #4]
 8109b18:	681b      	ldr	r3, [r3, #0]
 8109b1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8109b1e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8109b20:	687b      	ldr	r3, [r7, #4]
 8109b22:	2220      	movs	r2, #32
 8109b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8109b28:	bf00      	nop
 8109b2a:	370c      	adds	r7, #12
 8109b2c:	46bd      	mov	sp, r7
 8109b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b32:	4770      	bx	lr

08109b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8109b34:	b480      	push	{r7}
 8109b36:	b083      	sub	sp, #12
 8109b38:	af00      	add	r7, sp, #0
 8109b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	681b      	ldr	r3, [r3, #0]
 8109b40:	681a      	ldr	r2, [r3, #0]
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	681b      	ldr	r3, [r3, #0]
 8109b46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8109b4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109b4c:	687b      	ldr	r3, [r7, #4]
 8109b4e:	681b      	ldr	r3, [r3, #0]
 8109b50:	689b      	ldr	r3, [r3, #8]
 8109b52:	687a      	ldr	r2, [r7, #4]
 8109b54:	6812      	ldr	r2, [r2, #0]
 8109b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109b5a:	f023 0301 	bic.w	r3, r3, #1
 8109b5e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109b64:	2b01      	cmp	r3, #1
 8109b66:	d107      	bne.n	8109b78 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109b68:	687b      	ldr	r3, [r7, #4]
 8109b6a:	681b      	ldr	r3, [r3, #0]
 8109b6c:	681a      	ldr	r2, [r3, #0]
 8109b6e:	687b      	ldr	r3, [r7, #4]
 8109b70:	681b      	ldr	r3, [r3, #0]
 8109b72:	f022 0210 	bic.w	r2, r2, #16
 8109b76:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109b78:	687b      	ldr	r3, [r7, #4]
 8109b7a:	2220      	movs	r2, #32
 8109b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109b80:	687b      	ldr	r3, [r7, #4]
 8109b82:	2200      	movs	r2, #0
 8109b84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109b86:	687b      	ldr	r3, [r7, #4]
 8109b88:	2200      	movs	r2, #0
 8109b8a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8109b8c:	bf00      	nop
 8109b8e:	370c      	adds	r7, #12
 8109b90:	46bd      	mov	sp, r7
 8109b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b96:	4770      	bx	lr

08109b98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8109b98:	b580      	push	{r7, lr}
 8109b9a:	b084      	sub	sp, #16
 8109b9c:	af00      	add	r7, sp, #0
 8109b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109ba0:	687b      	ldr	r3, [r7, #4]
 8109ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109ba4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8109ba6:	687b      	ldr	r3, [r7, #4]
 8109ba8:	69db      	ldr	r3, [r3, #28]
 8109baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109bae:	d014      	beq.n	8109bda <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8109bb0:	68fb      	ldr	r3, [r7, #12]
 8109bb2:	2200      	movs	r2, #0
 8109bb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8109bb8:	68fb      	ldr	r3, [r7, #12]
 8109bba:	681b      	ldr	r3, [r3, #0]
 8109bbc:	689a      	ldr	r2, [r3, #8]
 8109bbe:	68fb      	ldr	r3, [r7, #12]
 8109bc0:	681b      	ldr	r3, [r3, #0]
 8109bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109bc6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8109bc8:	68fb      	ldr	r3, [r7, #12]
 8109bca:	681b      	ldr	r3, [r3, #0]
 8109bcc:	681a      	ldr	r2, [r3, #0]
 8109bce:	68fb      	ldr	r3, [r7, #12]
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8109bd6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8109bd8:	e002      	b.n	8109be0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8109bda:	68f8      	ldr	r0, [r7, #12]
 8109bdc:	f7f7 feb0 	bl	8101940 <HAL_UART_TxCpltCallback>
}
 8109be0:	bf00      	nop
 8109be2:	3710      	adds	r7, #16
 8109be4:	46bd      	mov	sp, r7
 8109be6:	bd80      	pop	{r7, pc}

08109be8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8109be8:	b580      	push	{r7, lr}
 8109bea:	b084      	sub	sp, #16
 8109bec:	af00      	add	r7, sp, #0
 8109bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109bf4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8109bf6:	68f8      	ldr	r0, [r7, #12]
 8109bf8:	f7ff f818 	bl	8108c2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109bfc:	bf00      	nop
 8109bfe:	3710      	adds	r7, #16
 8109c00:	46bd      	mov	sp, r7
 8109c02:	bd80      	pop	{r7, pc}

08109c04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8109c04:	b580      	push	{r7, lr}
 8109c06:	b084      	sub	sp, #16
 8109c08:	af00      	add	r7, sp, #0
 8109c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109c10:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8109c12:	687b      	ldr	r3, [r7, #4]
 8109c14:	69db      	ldr	r3, [r3, #28]
 8109c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109c1a:	d02b      	beq.n	8109c74 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8109c1c:	68fb      	ldr	r3, [r7, #12]
 8109c1e:	2200      	movs	r2, #0
 8109c20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109c24:	68fb      	ldr	r3, [r7, #12]
 8109c26:	681b      	ldr	r3, [r3, #0]
 8109c28:	681a      	ldr	r2, [r3, #0]
 8109c2a:	68fb      	ldr	r3, [r7, #12]
 8109c2c:	681b      	ldr	r3, [r3, #0]
 8109c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8109c32:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109c34:	68fb      	ldr	r3, [r7, #12]
 8109c36:	681b      	ldr	r3, [r3, #0]
 8109c38:	689a      	ldr	r2, [r3, #8]
 8109c3a:	68fb      	ldr	r3, [r7, #12]
 8109c3c:	681b      	ldr	r3, [r3, #0]
 8109c3e:	f022 0201 	bic.w	r2, r2, #1
 8109c42:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109c44:	68fb      	ldr	r3, [r7, #12]
 8109c46:	681b      	ldr	r3, [r3, #0]
 8109c48:	689a      	ldr	r2, [r3, #8]
 8109c4a:	68fb      	ldr	r3, [r7, #12]
 8109c4c:	681b      	ldr	r3, [r3, #0]
 8109c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8109c52:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8109c54:	68fb      	ldr	r3, [r7, #12]
 8109c56:	2220      	movs	r2, #32
 8109c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109c5c:	68fb      	ldr	r3, [r7, #12]
 8109c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109c60:	2b01      	cmp	r3, #1
 8109c62:	d107      	bne.n	8109c74 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109c64:	68fb      	ldr	r3, [r7, #12]
 8109c66:	681b      	ldr	r3, [r3, #0]
 8109c68:	681a      	ldr	r2, [r3, #0]
 8109c6a:	68fb      	ldr	r3, [r7, #12]
 8109c6c:	681b      	ldr	r3, [r3, #0]
 8109c6e:	f022 0210 	bic.w	r2, r2, #16
 8109c72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109c74:	68fb      	ldr	r3, [r7, #12]
 8109c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109c78:	2b01      	cmp	r3, #1
 8109c7a:	d107      	bne.n	8109c8c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8109c7c:	68fb      	ldr	r3, [r7, #12]
 8109c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8109c82:	4619      	mov	r1, r3
 8109c84:	68f8      	ldr	r0, [r7, #12]
 8109c86:	f7fe ffef 	bl	8108c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8109c8a:	e002      	b.n	8109c92 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8109c8c:	68f8      	ldr	r0, [r7, #12]
 8109c8e:	f7f7 fe61 	bl	8101954 <HAL_UART_RxCpltCallback>
}
 8109c92:	bf00      	nop
 8109c94:	3710      	adds	r7, #16
 8109c96:	46bd      	mov	sp, r7
 8109c98:	bd80      	pop	{r7, pc}

08109c9a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8109c9a:	b580      	push	{r7, lr}
 8109c9c:	b084      	sub	sp, #16
 8109c9e:	af00      	add	r7, sp, #0
 8109ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109ca2:	687b      	ldr	r3, [r7, #4]
 8109ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109ca6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109ca8:	68fb      	ldr	r3, [r7, #12]
 8109caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109cac:	2b01      	cmp	r3, #1
 8109cae:	d109      	bne.n	8109cc4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8109cb0:	68fb      	ldr	r3, [r7, #12]
 8109cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8109cb6:	085b      	lsrs	r3, r3, #1
 8109cb8:	b29b      	uxth	r3, r3
 8109cba:	4619      	mov	r1, r3
 8109cbc:	68f8      	ldr	r0, [r7, #12]
 8109cbe:	f7fe ffd3 	bl	8108c68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8109cc2:	e002      	b.n	8109cca <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8109cc4:	68f8      	ldr	r0, [r7, #12]
 8109cc6:	f7fe ffbb 	bl	8108c40 <HAL_UART_RxHalfCpltCallback>
}
 8109cca:	bf00      	nop
 8109ccc:	3710      	adds	r7, #16
 8109cce:	46bd      	mov	sp, r7
 8109cd0:	bd80      	pop	{r7, pc}

08109cd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8109cd2:	b580      	push	{r7, lr}
 8109cd4:	b086      	sub	sp, #24
 8109cd6:	af00      	add	r7, sp, #0
 8109cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109cde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8109ce0:	697b      	ldr	r3, [r7, #20]
 8109ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109ce6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8109ce8:	697b      	ldr	r3, [r7, #20]
 8109cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109cee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8109cf0:	697b      	ldr	r3, [r7, #20]
 8109cf2:	681b      	ldr	r3, [r3, #0]
 8109cf4:	689b      	ldr	r3, [r3, #8]
 8109cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109cfa:	2b80      	cmp	r3, #128	; 0x80
 8109cfc:	d109      	bne.n	8109d12 <UART_DMAError+0x40>
 8109cfe:	693b      	ldr	r3, [r7, #16]
 8109d00:	2b21      	cmp	r3, #33	; 0x21
 8109d02:	d106      	bne.n	8109d12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8109d04:	697b      	ldr	r3, [r7, #20]
 8109d06:	2200      	movs	r2, #0
 8109d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8109d0c:	6978      	ldr	r0, [r7, #20]
 8109d0e:	f7ff fef3 	bl	8109af8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8109d12:	697b      	ldr	r3, [r7, #20]
 8109d14:	681b      	ldr	r3, [r3, #0]
 8109d16:	689b      	ldr	r3, [r3, #8]
 8109d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109d1c:	2b40      	cmp	r3, #64	; 0x40
 8109d1e:	d109      	bne.n	8109d34 <UART_DMAError+0x62>
 8109d20:	68fb      	ldr	r3, [r7, #12]
 8109d22:	2b22      	cmp	r3, #34	; 0x22
 8109d24:	d106      	bne.n	8109d34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8109d26:	697b      	ldr	r3, [r7, #20]
 8109d28:	2200      	movs	r2, #0
 8109d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8109d2e:	6978      	ldr	r0, [r7, #20]
 8109d30:	f7ff ff00 	bl	8109b34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8109d34:	697b      	ldr	r3, [r7, #20]
 8109d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109d3a:	f043 0210 	orr.w	r2, r3, #16
 8109d3e:	697b      	ldr	r3, [r7, #20]
 8109d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8109d44:	6978      	ldr	r0, [r7, #20]
 8109d46:	f7fe ff85 	bl	8108c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109d4a:	bf00      	nop
 8109d4c:	3718      	adds	r7, #24
 8109d4e:	46bd      	mov	sp, r7
 8109d50:	bd80      	pop	{r7, pc}

08109d52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8109d52:	b580      	push	{r7, lr}
 8109d54:	b084      	sub	sp, #16
 8109d56:	af00      	add	r7, sp, #0
 8109d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109d5a:	687b      	ldr	r3, [r7, #4]
 8109d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8109d60:	68fb      	ldr	r3, [r7, #12]
 8109d62:	2200      	movs	r2, #0
 8109d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8109d68:	68fb      	ldr	r3, [r7, #12]
 8109d6a:	2200      	movs	r2, #0
 8109d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8109d70:	68f8      	ldr	r0, [r7, #12]
 8109d72:	f7fe ff6f 	bl	8108c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109d76:	bf00      	nop
 8109d78:	3710      	adds	r7, #16
 8109d7a:	46bd      	mov	sp, r7
 8109d7c:	bd80      	pop	{r7, pc}

08109d7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8109d7e:	b580      	push	{r7, lr}
 8109d80:	b082      	sub	sp, #8
 8109d82:	af00      	add	r7, sp, #0
 8109d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8109d86:	687b      	ldr	r3, [r7, #4]
 8109d88:	681b      	ldr	r3, [r3, #0]
 8109d8a:	681a      	ldr	r2, [r3, #0]
 8109d8c:	687b      	ldr	r3, [r7, #4]
 8109d8e:	681b      	ldr	r3, [r3, #0]
 8109d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8109d94:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8109d96:	687b      	ldr	r3, [r7, #4]
 8109d98:	2220      	movs	r2, #32
 8109d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8109d9e:	687b      	ldr	r3, [r7, #4]
 8109da0:	2200      	movs	r2, #0
 8109da2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8109da4:	6878      	ldr	r0, [r7, #4]
 8109da6:	f7f7 fdcb 	bl	8101940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109daa:	bf00      	nop
 8109dac:	3708      	adds	r7, #8
 8109dae:	46bd      	mov	sp, r7
 8109db0:	bd80      	pop	{r7, pc}

08109db2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8109db2:	b480      	push	{r7}
 8109db4:	b083      	sub	sp, #12
 8109db6:	af00      	add	r7, sp, #0
 8109db8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8109dba:	bf00      	nop
 8109dbc:	370c      	adds	r7, #12
 8109dbe:	46bd      	mov	sp, r7
 8109dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dc4:	4770      	bx	lr

08109dc6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8109dc6:	b480      	push	{r7}
 8109dc8:	b083      	sub	sp, #12
 8109dca:	af00      	add	r7, sp, #0
 8109dcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8109dce:	bf00      	nop
 8109dd0:	370c      	adds	r7, #12
 8109dd2:	46bd      	mov	sp, r7
 8109dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dd8:	4770      	bx	lr

08109dda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8109dda:	b480      	push	{r7}
 8109ddc:	b083      	sub	sp, #12
 8109dde:	af00      	add	r7, sp, #0
 8109de0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8109de2:	bf00      	nop
 8109de4:	370c      	adds	r7, #12
 8109de6:	46bd      	mov	sp, r7
 8109de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dec:	4770      	bx	lr

08109dee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109dee:	b480      	push	{r7}
 8109df0:	b085      	sub	sp, #20
 8109df2:	af00      	add	r7, sp, #0
 8109df4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109dfc:	2b01      	cmp	r3, #1
 8109dfe:	d101      	bne.n	8109e04 <HAL_UARTEx_DisableFifoMode+0x16>
 8109e00:	2302      	movs	r3, #2
 8109e02:	e027      	b.n	8109e54 <HAL_UARTEx_DisableFifoMode+0x66>
 8109e04:	687b      	ldr	r3, [r7, #4]
 8109e06:	2201      	movs	r2, #1
 8109e08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109e0c:	687b      	ldr	r3, [r7, #4]
 8109e0e:	2224      	movs	r2, #36	; 0x24
 8109e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109e14:	687b      	ldr	r3, [r7, #4]
 8109e16:	681b      	ldr	r3, [r3, #0]
 8109e18:	681b      	ldr	r3, [r3, #0]
 8109e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109e1c:	687b      	ldr	r3, [r7, #4]
 8109e1e:	681b      	ldr	r3, [r3, #0]
 8109e20:	681a      	ldr	r2, [r3, #0]
 8109e22:	687b      	ldr	r3, [r7, #4]
 8109e24:	681b      	ldr	r3, [r3, #0]
 8109e26:	f022 0201 	bic.w	r2, r2, #1
 8109e2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109e2c:	68fb      	ldr	r3, [r7, #12]
 8109e2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8109e32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109e34:	687b      	ldr	r3, [r7, #4]
 8109e36:	2200      	movs	r2, #0
 8109e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109e3a:	687b      	ldr	r3, [r7, #4]
 8109e3c:	681b      	ldr	r3, [r3, #0]
 8109e3e:	68fa      	ldr	r2, [r7, #12]
 8109e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109e42:	687b      	ldr	r3, [r7, #4]
 8109e44:	2220      	movs	r2, #32
 8109e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109e4a:	687b      	ldr	r3, [r7, #4]
 8109e4c:	2200      	movs	r2, #0
 8109e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109e52:	2300      	movs	r3, #0
}
 8109e54:	4618      	mov	r0, r3
 8109e56:	3714      	adds	r7, #20
 8109e58:	46bd      	mov	sp, r7
 8109e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e5e:	4770      	bx	lr

08109e60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109e60:	b580      	push	{r7, lr}
 8109e62:	b084      	sub	sp, #16
 8109e64:	af00      	add	r7, sp, #0
 8109e66:	6078      	str	r0, [r7, #4]
 8109e68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109e6a:	687b      	ldr	r3, [r7, #4]
 8109e6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109e70:	2b01      	cmp	r3, #1
 8109e72:	d101      	bne.n	8109e78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109e74:	2302      	movs	r3, #2
 8109e76:	e02d      	b.n	8109ed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109e78:	687b      	ldr	r3, [r7, #4]
 8109e7a:	2201      	movs	r2, #1
 8109e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109e80:	687b      	ldr	r3, [r7, #4]
 8109e82:	2224      	movs	r2, #36	; 0x24
 8109e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109e88:	687b      	ldr	r3, [r7, #4]
 8109e8a:	681b      	ldr	r3, [r3, #0]
 8109e8c:	681b      	ldr	r3, [r3, #0]
 8109e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109e90:	687b      	ldr	r3, [r7, #4]
 8109e92:	681b      	ldr	r3, [r3, #0]
 8109e94:	681a      	ldr	r2, [r3, #0]
 8109e96:	687b      	ldr	r3, [r7, #4]
 8109e98:	681b      	ldr	r3, [r3, #0]
 8109e9a:	f022 0201 	bic.w	r2, r2, #1
 8109e9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109ea0:	687b      	ldr	r3, [r7, #4]
 8109ea2:	681b      	ldr	r3, [r3, #0]
 8109ea4:	689b      	ldr	r3, [r3, #8]
 8109ea6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8109eaa:	687b      	ldr	r3, [r7, #4]
 8109eac:	681b      	ldr	r3, [r3, #0]
 8109eae:	683a      	ldr	r2, [r7, #0]
 8109eb0:	430a      	orrs	r2, r1
 8109eb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109eb4:	6878      	ldr	r0, [r7, #4]
 8109eb6:	f000 f84f 	bl	8109f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	681b      	ldr	r3, [r3, #0]
 8109ebe:	68fa      	ldr	r2, [r7, #12]
 8109ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109ec2:	687b      	ldr	r3, [r7, #4]
 8109ec4:	2220      	movs	r2, #32
 8109ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109eca:	687b      	ldr	r3, [r7, #4]
 8109ecc:	2200      	movs	r2, #0
 8109ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109ed2:	2300      	movs	r3, #0
}
 8109ed4:	4618      	mov	r0, r3
 8109ed6:	3710      	adds	r7, #16
 8109ed8:	46bd      	mov	sp, r7
 8109eda:	bd80      	pop	{r7, pc}

08109edc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109edc:	b580      	push	{r7, lr}
 8109ede:	b084      	sub	sp, #16
 8109ee0:	af00      	add	r7, sp, #0
 8109ee2:	6078      	str	r0, [r7, #4]
 8109ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109ee6:	687b      	ldr	r3, [r7, #4]
 8109ee8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109eec:	2b01      	cmp	r3, #1
 8109eee:	d101      	bne.n	8109ef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109ef0:	2302      	movs	r3, #2
 8109ef2:	e02d      	b.n	8109f50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	2201      	movs	r2, #1
 8109ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8109efc:	687b      	ldr	r3, [r7, #4]
 8109efe:	2224      	movs	r2, #36	; 0x24
 8109f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109f04:	687b      	ldr	r3, [r7, #4]
 8109f06:	681b      	ldr	r3, [r3, #0]
 8109f08:	681b      	ldr	r3, [r3, #0]
 8109f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109f0c:	687b      	ldr	r3, [r7, #4]
 8109f0e:	681b      	ldr	r3, [r3, #0]
 8109f10:	681a      	ldr	r2, [r3, #0]
 8109f12:	687b      	ldr	r3, [r7, #4]
 8109f14:	681b      	ldr	r3, [r3, #0]
 8109f16:	f022 0201 	bic.w	r2, r2, #1
 8109f1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109f1c:	687b      	ldr	r3, [r7, #4]
 8109f1e:	681b      	ldr	r3, [r3, #0]
 8109f20:	689b      	ldr	r3, [r3, #8]
 8109f22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109f26:	687b      	ldr	r3, [r7, #4]
 8109f28:	681b      	ldr	r3, [r3, #0]
 8109f2a:	683a      	ldr	r2, [r7, #0]
 8109f2c:	430a      	orrs	r2, r1
 8109f2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109f30:	6878      	ldr	r0, [r7, #4]
 8109f32:	f000 f811 	bl	8109f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109f36:	687b      	ldr	r3, [r7, #4]
 8109f38:	681b      	ldr	r3, [r3, #0]
 8109f3a:	68fa      	ldr	r2, [r7, #12]
 8109f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109f3e:	687b      	ldr	r3, [r7, #4]
 8109f40:	2220      	movs	r2, #32
 8109f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109f46:	687b      	ldr	r3, [r7, #4]
 8109f48:	2200      	movs	r2, #0
 8109f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109f4e:	2300      	movs	r3, #0
}
 8109f50:	4618      	mov	r0, r3
 8109f52:	3710      	adds	r7, #16
 8109f54:	46bd      	mov	sp, r7
 8109f56:	bd80      	pop	{r7, pc}

08109f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109f58:	b480      	push	{r7}
 8109f5a:	b085      	sub	sp, #20
 8109f5c:	af00      	add	r7, sp, #0
 8109f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109f60:	687b      	ldr	r3, [r7, #4]
 8109f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109f64:	2b00      	cmp	r3, #0
 8109f66:	d108      	bne.n	8109f7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109f68:	687b      	ldr	r3, [r7, #4]
 8109f6a:	2201      	movs	r2, #1
 8109f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109f70:	687b      	ldr	r3, [r7, #4]
 8109f72:	2201      	movs	r2, #1
 8109f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109f78:	e031      	b.n	8109fde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109f7a:	2310      	movs	r3, #16
 8109f7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109f7e:	2310      	movs	r3, #16
 8109f80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109f82:	687b      	ldr	r3, [r7, #4]
 8109f84:	681b      	ldr	r3, [r3, #0]
 8109f86:	689b      	ldr	r3, [r3, #8]
 8109f88:	0e5b      	lsrs	r3, r3, #25
 8109f8a:	b2db      	uxtb	r3, r3
 8109f8c:	f003 0307 	and.w	r3, r3, #7
 8109f90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109f92:	687b      	ldr	r3, [r7, #4]
 8109f94:	681b      	ldr	r3, [r3, #0]
 8109f96:	689b      	ldr	r3, [r3, #8]
 8109f98:	0f5b      	lsrs	r3, r3, #29
 8109f9a:	b2db      	uxtb	r3, r3
 8109f9c:	f003 0307 	and.w	r3, r3, #7
 8109fa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109fa2:	7bbb      	ldrb	r3, [r7, #14]
 8109fa4:	7b3a      	ldrb	r2, [r7, #12]
 8109fa6:	4911      	ldr	r1, [pc, #68]	; (8109fec <UARTEx_SetNbDataToProcess+0x94>)
 8109fa8:	5c8a      	ldrb	r2, [r1, r2]
 8109faa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109fae:	7b3a      	ldrb	r2, [r7, #12]
 8109fb0:	490f      	ldr	r1, [pc, #60]	; (8109ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8109fb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8109fb8:	b29a      	uxth	r2, r3
 8109fba:	687b      	ldr	r3, [r7, #4]
 8109fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109fc0:	7bfb      	ldrb	r3, [r7, #15]
 8109fc2:	7b7a      	ldrb	r2, [r7, #13]
 8109fc4:	4909      	ldr	r1, [pc, #36]	; (8109fec <UARTEx_SetNbDataToProcess+0x94>)
 8109fc6:	5c8a      	ldrb	r2, [r1, r2]
 8109fc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109fcc:	7b7a      	ldrb	r2, [r7, #13]
 8109fce:	4908      	ldr	r1, [pc, #32]	; (8109ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8109fd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8109fd6:	b29a      	uxth	r2, r3
 8109fd8:	687b      	ldr	r3, [r7, #4]
 8109fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109fde:	bf00      	nop
 8109fe0:	3714      	adds	r7, #20
 8109fe2:	46bd      	mov	sp, r7
 8109fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fe8:	4770      	bx	lr
 8109fea:	bf00      	nop
 8109fec:	0810a118 	.word	0x0810a118
 8109ff0:	0810a120 	.word	0x0810a120

08109ff4 <__libc_init_array>:
 8109ff4:	b570      	push	{r4, r5, r6, lr}
 8109ff6:	4d0d      	ldr	r5, [pc, #52]	; (810a02c <__libc_init_array+0x38>)
 8109ff8:	4c0d      	ldr	r4, [pc, #52]	; (810a030 <__libc_init_array+0x3c>)
 8109ffa:	1b64      	subs	r4, r4, r5
 8109ffc:	10a4      	asrs	r4, r4, #2
 8109ffe:	2600      	movs	r6, #0
 810a000:	42a6      	cmp	r6, r4
 810a002:	d109      	bne.n	810a018 <__libc_init_array+0x24>
 810a004:	4d0b      	ldr	r5, [pc, #44]	; (810a034 <__libc_init_array+0x40>)
 810a006:	4c0c      	ldr	r4, [pc, #48]	; (810a038 <__libc_init_array+0x44>)
 810a008:	f000 f820 	bl	810a04c <_init>
 810a00c:	1b64      	subs	r4, r4, r5
 810a00e:	10a4      	asrs	r4, r4, #2
 810a010:	2600      	movs	r6, #0
 810a012:	42a6      	cmp	r6, r4
 810a014:	d105      	bne.n	810a022 <__libc_init_array+0x2e>
 810a016:	bd70      	pop	{r4, r5, r6, pc}
 810a018:	f855 3b04 	ldr.w	r3, [r5], #4
 810a01c:	4798      	blx	r3
 810a01e:	3601      	adds	r6, #1
 810a020:	e7ee      	b.n	810a000 <__libc_init_array+0xc>
 810a022:	f855 3b04 	ldr.w	r3, [r5], #4
 810a026:	4798      	blx	r3
 810a028:	3601      	adds	r6, #1
 810a02a:	e7f2      	b.n	810a012 <__libc_init_array+0x1e>
 810a02c:	0810a130 	.word	0x0810a130
 810a030:	0810a130 	.word	0x0810a130
 810a034:	0810a130 	.word	0x0810a130
 810a038:	0810a134 	.word	0x0810a134

0810a03c <memset>:
 810a03c:	4402      	add	r2, r0
 810a03e:	4603      	mov	r3, r0
 810a040:	4293      	cmp	r3, r2
 810a042:	d100      	bne.n	810a046 <memset+0xa>
 810a044:	4770      	bx	lr
 810a046:	f803 1b01 	strb.w	r1, [r3], #1
 810a04a:	e7f9      	b.n	810a040 <memset+0x4>

0810a04c <_init>:
 810a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a04e:	bf00      	nop
 810a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a052:	bc08      	pop	{r3}
 810a054:	469e      	mov	lr, r3
 810a056:	4770      	bx	lr

0810a058 <_fini>:
 810a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a05a:	bf00      	nop
 810a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a05e:	bc08      	pop	{r3}
 810a060:	469e      	mov	lr, r3
 810a062:	4770      	bx	lr
