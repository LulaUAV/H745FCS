
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf84  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0810d220  0810d220  0001d220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d330  0810d330  0001d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d338  0810d338  0001d338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d33c  0810d33c  0001d33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  10000000  0810d340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000574  10000078  0810d3b8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100005ec  0810d3b8  000205ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a8dc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004613  00000000  00000000  0004a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001300  00000000  00000000  0004ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001198  00000000  00000000  00050298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ac0e  00000000  00000000  00051430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001acc0  00000000  00000000  0008c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ae30  00000000  00000000  000a6cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00221b2e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005250  00000000  00000000  00221b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000078 	.word	0x10000078
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d204 	.word	0x0810d204

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000007c 	.word	0x1000007c
 81002d4:	0810d204 	.word	0x0810d204

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <CheckBMP280ChipID>:
#include "bmp280.h"

uint8_t CheckBMP280ChipID()
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b082      	sub	sp, #8
 8101240:	af00      	add	r7, sp, #0
  uint8_t SerialData[3] = {(BMP280_REG_ID | 0x80), 0, 0};
 8101242:	4a13      	ldr	r2, [pc, #76]	; (8101290 <CheckBMP280ChipID+0x54>)
 8101244:	1d3b      	adds	r3, r7, #4
 8101246:	6812      	ldr	r2, [r2, #0]
 8101248:	4611      	mov	r1, r2
 810124a:	8019      	strh	r1, [r3, #0]
 810124c:	3302      	adds	r3, #2
 810124e:	0c12      	lsrs	r2, r2, #16
 8101250:	701a      	strb	r2, [r3, #0]
  volatile uint8_t aRxBuffer[3]= {0};
 8101252:	4b10      	ldr	r3, [pc, #64]	; (8101294 <CheckBMP280ChipID+0x58>)
 8101254:	881b      	ldrh	r3, [r3, #0]
 8101256:	803b      	strh	r3, [r7, #0]
 8101258:	2300      	movs	r3, #0
 810125a:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 810125c:	2200      	movs	r2, #0
 810125e:	2110      	movs	r1, #16
 8101260:	480d      	ldr	r0, [pc, #52]	; (8101298 <CheckBMP280ChipID+0x5c>)
 8101262:	f005 fa39 	bl	81066d8 <HAL_GPIO_WritePin>
  if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101266:	463a      	mov	r2, r7
 8101268:	1d39      	adds	r1, r7, #4
 810126a:	2302      	movs	r3, #2
 810126c:	480b      	ldr	r0, [pc, #44]	; (810129c <CheckBMP280ChipID+0x60>)
 810126e:	f008 fcf7 	bl	8109c60 <HAL_SPI_TransmitReceive_DMA>
 8101272:	4603      	mov	r3, r0
 8101274:	2b00      	cmp	r3, #0
 8101276:	d105      	bne.n	8101284 <CheckBMP280ChipID+0x48>
  {
    if(aRxBuffer[1] != BMP280_CHIP_ID)
 8101278:	787b      	ldrb	r3, [r7, #1]
 810127a:	b2db      	uxtb	r3, r3
 810127c:	2b58      	cmp	r3, #88	; 0x58
 810127e:	d001      	beq.n	8101284 <CheckBMP280ChipID+0x48>
    {
      return HAL_ERROR;
 8101280:	2301      	movs	r3, #1
 8101282:	e000      	b.n	8101286 <CheckBMP280ChipID+0x4a>
    }
  }

  return HAL_OK;
 8101284:	2300      	movs	r3, #0

}
 8101286:	4618      	mov	r0, r3
 8101288:	3708      	adds	r7, #8
 810128a:	46bd      	mov	sp, r7
 810128c:	bd80      	pop	{r7, pc}
 810128e:	bf00      	nop
 8101290:	0810d220 	.word	0x0810d220
 8101294:	0810d224 	.word	0x0810d224
 8101298:	58020000 	.word	0x58020000
 810129c:	100002f0 	.word	0x100002f0

081012a0 <Read16Bit>:
{
  return HAL_OK;
}

uint16_t Read16Bit(uint8_t reg)
{
 81012a0:	b580      	push	{r7, lr}
 81012a2:	b086      	sub	sp, #24
 81012a4:	af00      	add	r7, sp, #0
 81012a6:	4603      	mov	r3, r0
 81012a8:	71fb      	strb	r3, [r7, #7]
   volatile uint16_t result;
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81012aa:	2200      	movs	r2, #0
 81012ac:	2110      	movs	r1, #16
 81012ae:	4815      	ldr	r0, [pc, #84]	; (8101304 <Read16Bit+0x64>)
 81012b0:	f005 fa12 	bl	81066d8 <HAL_GPIO_WritePin>
   uint8_t SerialData[3] = {(reg|0x80), 0, 0};
 81012b4:	79fb      	ldrb	r3, [r7, #7]
 81012b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81012ba:	b2db      	uxtb	r3, r3
 81012bc:	743b      	strb	r3, [r7, #16]
 81012be:	2300      	movs	r3, #0
 81012c0:	747b      	strb	r3, [r7, #17]
 81012c2:	2300      	movs	r3, #0
 81012c4:	74bb      	strb	r3, [r7, #18]
   volatile uint8_t aRxBuffer[3]= {0};
 81012c6:	4b10      	ldr	r3, [pc, #64]	; (8101308 <Read16Bit+0x68>)
 81012c8:	881b      	ldrh	r3, [r3, #0]
 81012ca:	81bb      	strh	r3, [r7, #12]
 81012cc:	2300      	movs	r3, #0
 81012ce:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 3);
 81012d0:	f107 020c 	add.w	r2, r7, #12
 81012d4:	f107 0110 	add.w	r1, r7, #16
 81012d8:	2303      	movs	r3, #3
 81012da:	480c      	ldr	r0, [pc, #48]	; (810130c <Read16Bit+0x6c>)
 81012dc:	f008 fcc0 	bl	8109c60 <HAL_SPI_TransmitReceive_DMA>

   result = aRxBuffer[2] << 8 | aRxBuffer [1];
 81012e0:	7bbb      	ldrb	r3, [r7, #14]
 81012e2:	b2db      	uxtb	r3, r3
 81012e4:	021b      	lsls	r3, r3, #8
 81012e6:	b21a      	sxth	r2, r3
 81012e8:	7b7b      	ldrb	r3, [r7, #13]
 81012ea:	b2db      	uxtb	r3, r3
 81012ec:	b21b      	sxth	r3, r3
 81012ee:	4313      	orrs	r3, r2
 81012f0:	b21b      	sxth	r3, r3
 81012f2:	b29b      	uxth	r3, r3
 81012f4:	82fb      	strh	r3, [r7, #22]
   return result;
 81012f6:	8afb      	ldrh	r3, [r7, #22]
 81012f8:	b29b      	uxth	r3, r3
}
 81012fa:	4618      	mov	r0, r3
 81012fc:	3718      	adds	r7, #24
 81012fe:	46bd      	mov	sp, r7
 8101300:	bd80      	pop	{r7, pc}
 8101302:	bf00      	nop
 8101304:	58020000 	.word	0x58020000
 8101308:	0810d224 	.word	0x0810d224
 810130c:	100002f0 	.word	0x100002f0

08101310 <Read24Bit>:


uint32_t Read24Bit(uint8_t reg)
{
 8101310:	b580      	push	{r7, lr}
 8101312:	b086      	sub	sp, #24
 8101314:	af00      	add	r7, sp, #0
 8101316:	4603      	mov	r3, r0
 8101318:	71fb      	strb	r3, [r7, #7]
  uint32_t result;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810131a:	2200      	movs	r2, #0
 810131c:	2110      	movs	r1, #16
 810131e:	4815      	ldr	r0, [pc, #84]	; (8101374 <Read24Bit+0x64>)
 8101320:	f005 f9da 	bl	81066d8 <HAL_GPIO_WritePin>
  uint8_t SerialData[4] = {(reg|0x80), 0, 0,0};
 8101324:	79fb      	ldrb	r3, [r7, #7]
 8101326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810132a:	b2db      	uxtb	r3, r3
 810132c:	743b      	strb	r3, [r7, #16]
 810132e:	2300      	movs	r3, #0
 8101330:	747b      	strb	r3, [r7, #17]
 8101332:	2300      	movs	r3, #0
 8101334:	74bb      	strb	r3, [r7, #18]
 8101336:	2300      	movs	r3, #0
 8101338:	74fb      	strb	r3, [r7, #19]
  volatile uint8_t aRxBuffer[4] = {0};
 810133a:	2300      	movs	r3, #0
 810133c:	60fb      	str	r3, [r7, #12]
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 4);
 810133e:	f107 020c 	add.w	r2, r7, #12
 8101342:	f107 0110 	add.w	r1, r7, #16
 8101346:	2304      	movs	r3, #4
 8101348:	480b      	ldr	r0, [pc, #44]	; (8101378 <Read24Bit+0x68>)
 810134a:	f008 fc89 	bl	8109c60 <HAL_SPI_TransmitReceive_DMA>
  result = aRxBuffer[1] << 16 | aRxBuffer[2] << 8 | aRxBuffer[3] >> 4;
 810134e:	7b7b      	ldrb	r3, [r7, #13]
 8101350:	b2db      	uxtb	r3, r3
 8101352:	041a      	lsls	r2, r3, #16
 8101354:	7bbb      	ldrb	r3, [r7, #14]
 8101356:	b2db      	uxtb	r3, r3
 8101358:	021b      	lsls	r3, r3, #8
 810135a:	4313      	orrs	r3, r2
 810135c:	7bfa      	ldrb	r2, [r7, #15]
 810135e:	b2d2      	uxtb	r2, r2
 8101360:	0912      	lsrs	r2, r2, #4
 8101362:	b2d2      	uxtb	r2, r2
 8101364:	4313      	orrs	r3, r2
 8101366:	617b      	str	r3, [r7, #20]
  return result;
 8101368:	697b      	ldr	r3, [r7, #20]
}
 810136a:	4618      	mov	r0, r3
 810136c:	3718      	adds	r7, #24
 810136e:	46bd      	mov	sp, r7
 8101370:	bd80      	pop	{r7, pc}
 8101372:	bf00      	nop
 8101374:	58020000 	.word	0x58020000
 8101378:	100002f0 	.word	0x100002f0

0810137c <ReadTemp>:

void ReadTemp(BMP280Handle* baro)
{
 810137c:	b580      	push	{r7, lr}
 810137e:	b086      	sub	sp, #24
 8101380:	af00      	add	r7, sp, #0
 8101382:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 8101384:	20fa      	movs	r0, #250	; 0xfa
 8101386:	f7ff ffc3 	bl	8101310 <Read24Bit>
 810138a:	4603      	mov	r3, r0
 810138c:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 810138e:	697b      	ldr	r3, [r7, #20]
 8101390:	111b      	asrs	r3, r3, #4
 8101392:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 8101394:	697b      	ldr	r3, [r7, #20]
 8101396:	10da      	asrs	r2, r3, #3
 8101398:	687b      	ldr	r3, [r7, #4]
 810139a:	8b1b      	ldrh	r3, [r3, #24]
 810139c:	005b      	lsls	r3, r3, #1
 810139e:	1ad3      	subs	r3, r2, r3
         ((int32_t)baro->comp_vals.dig_T2)) >> 11;
 81013a0:	687a      	ldr	r2, [r7, #4]
 81013a2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013a6:	fb02 f303 	mul.w	r3, r2, r3
 81013aa:	12db      	asrs	r3, r3, #11
 81013ac:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013ae:	697b      	ldr	r3, [r7, #20]
 81013b0:	111b      	asrs	r3, r3, #4
 81013b2:	687a      	ldr	r2, [r7, #4]
 81013b4:	8b12      	ldrh	r2, [r2, #24]
 81013b6:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013b8:	697a      	ldr	r2, [r7, #20]
 81013ba:	1112      	asrs	r2, r2, #4
 81013bc:	6879      	ldr	r1, [r7, #4]
 81013be:	8b09      	ldrh	r1, [r1, #24]
 81013c0:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013c2:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013c6:	131b      	asrs	r3, r3, #12
            12) *
           ((int32_t)baro->comp_vals.dig_T3)) >>
 81013c8:	687a      	ldr	r2, [r7, #4]
 81013ca:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
            12) *
 81013ce:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013d2:	139b      	asrs	r3, r3, #14
 81013d4:	60fb      	str	r3, [r7, #12]
          14;

  t_fine = var1 + var2;
 81013d6:	693a      	ldr	r2, [r7, #16]
 81013d8:	68fb      	ldr	r3, [r7, #12]
 81013da:	4413      	add	r3, r2
 81013dc:	4a0d      	ldr	r2, [pc, #52]	; (8101414 <ReadTemp+0x98>)
 81013de:	6013      	str	r3, [r2, #0]

  float T = (t_fine * 5 + 128) >> 8;
 81013e0:	4b0c      	ldr	r3, [pc, #48]	; (8101414 <ReadTemp+0x98>)
 81013e2:	681a      	ldr	r2, [r3, #0]
 81013e4:	4613      	mov	r3, r2
 81013e6:	009b      	lsls	r3, r3, #2
 81013e8:	4413      	add	r3, r2
 81013ea:	3380      	adds	r3, #128	; 0x80
 81013ec:	121b      	asrs	r3, r3, #8
 81013ee:	ee07 3a90 	vmov	s15, r3
 81013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81013f6:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T/100;
 81013fa:	ed97 7a02 	vldr	s14, [r7, #8]
 81013fe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8101418 <ReadTemp+0x9c>
 8101402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	edc3 7a00 	vstr	s15, [r3]

}
 810140c:	bf00      	nop
 810140e:	3718      	adds	r7, #24
 8101410:	46bd      	mov	sp, r7
 8101412:	bd80      	pop	{r7, pc}
 8101414:	100000b0 	.word	0x100000b0
 8101418:	42c80000 	.word	0x42c80000

0810141c <ReadPressure>:

void ReadPressure(BMP280Handle* baro)
{
 810141c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101420:	b09c      	sub	sp, #112	; 0x70
 8101422:	af00      	add	r7, sp, #0
 8101424:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 8101426:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8101428:	f7ff ffa8 	bl	810137c <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 810142c:	20f7      	movs	r0, #247	; 0xf7
 810142e:	f7ff ff6f 	bl	8101310 <Read24Bit>
 8101432:	4603      	mov	r3, r0
 8101434:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>=4;
 8101436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101438:	111b      	asrs	r3, r3, #4
 810143a:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t)t_fine) - 128000;
 810143c:	4b6b      	ldr	r3, [pc, #428]	; (81015ec <ReadPressure+0x1d0>)
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	461a      	mov	r2, r3
 8101442:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101446:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 810144a:	f143 35ff 	adc.w	r5, r3, #4294967295
 810144e:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t)baro->comp_vals.dig_P6;
 8101452:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101456:	fb03 f102 	mul.w	r1, r3, r2
 810145a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810145c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810145e:	fb03 f302 	mul.w	r3, r3, r2
 8101462:	18ca      	adds	r2, r1, r3
 8101464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101466:	fba3 4503 	umull	r4, r5, r3, r3
 810146a:	1953      	adds	r3, r2, r5
 810146c:	461d      	mov	r5, r3
 810146e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101470:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8101474:	b21a      	sxth	r2, r3
 8101476:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810147a:	fb02 f005 	mul.w	r0, r2, r5
 810147e:	fb04 f103 	mul.w	r1, r4, r3
 8101482:	4401      	add	r1, r0
 8101484:	fba4 2302 	umull	r2, r3, r4, r2
 8101488:	4419      	add	r1, r3
 810148a:	460b      	mov	r3, r1
 810148c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8101490:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t)baro->comp_vals.dig_P5) << 17);
 8101494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101496:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 810149a:	b21a      	sxth	r2, r3
 810149c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014a2:	fb03 f001 	mul.w	r0, r3, r1
 81014a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81014a8:	fb02 f101 	mul.w	r1, r2, r1
 81014ac:	4408      	add	r0, r1
 81014ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014b0:	fba1 2302 	umull	r2, r3, r1, r2
 81014b4:	18c1      	adds	r1, r0, r3
 81014b6:	460b      	mov	r3, r1
 81014b8:	f04f 0000 	mov.w	r0, #0
 81014bc:	f04f 0100 	mov.w	r1, #0
 81014c0:	0459      	lsls	r1, r3, #17
 81014c2:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 81014c6:	0450      	lsls	r0, r2, #17
 81014c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81014cc:	eb12 0800 	adds.w	r8, r2, r0
 81014d0:	eb43 0901 	adc.w	r9, r3, r1
 81014d4:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t)baro->comp_vals.dig_P4) << 35);
 81014d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014da:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 81014de:	b21a      	sxth	r2, r3
 81014e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014e4:	f04f 0000 	mov.w	r0, #0
 81014e8:	f04f 0100 	mov.w	r1, #0
 81014ec:	00d1      	lsls	r1, r2, #3
 81014ee:	2000      	movs	r0, #0
 81014f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81014f4:	1814      	adds	r4, r2, r0
 81014f6:	61bc      	str	r4, [r7, #24]
 81014f8:	414b      	adcs	r3, r1
 81014fa:	61fb      	str	r3, [r7, #28]
 81014fc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8101500:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101504:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101508:	fb03 f102 	mul.w	r1, r3, r2
 810150c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810150e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101510:	fb03 f302 	mul.w	r3, r3, r2
 8101514:	18ca      	adds	r2, r1, r3
 8101516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101518:	fba3 4503 	umull	r4, r5, r3, r3
 810151c:	1953      	adds	r3, r2, r5
 810151e:	461d      	mov	r5, r3
 8101520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101522:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8101526:	b21a      	sxth	r2, r3
 8101528:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810152c:	fb02 f005 	mul.w	r0, r2, r5
 8101530:	fb04 f103 	mul.w	r1, r4, r3
 8101534:	4401      	add	r1, r0
 8101536:	fba4 2302 	umull	r2, r3, r4, r2
 810153a:	4419      	add	r1, r3
 810153c:	460b      	mov	r3, r1
 810153e:	f04f 0800 	mov.w	r8, #0
 8101542:	f04f 0900 	mov.w	r9, #0
 8101546:	ea4f 2812 	mov.w	r8, r2, lsr #8
 810154a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 810154e:	ea4f 2923 	mov.w	r9, r3, asr #8
           ((var1 * (int64_t)baro->comp_vals.dig_P2) << 12);
 8101552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101554:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8101558:	b21a      	sxth	r2, r3
 810155a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810155e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101560:	fb03 f001 	mul.w	r0, r3, r1
 8101564:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101566:	fb02 f101 	mul.w	r1, r2, r1
 810156a:	1844      	adds	r4, r0, r1
 810156c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810156e:	fba1 0102 	umull	r0, r1, r1, r2
 8101572:	1863      	adds	r3, r4, r1
 8101574:	4619      	mov	r1, r3
 8101576:	f04f 0200 	mov.w	r2, #0
 810157a:	f04f 0300 	mov.w	r3, #0
 810157e:	030b      	lsls	r3, r1, #12
 8101580:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8101584:	0302      	lsls	r2, r0, #12
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101586:	eb18 0102 	adds.w	r1, r8, r2
 810158a:	6139      	str	r1, [r7, #16]
 810158c:	eb49 0303 	adc.w	r3, r9, r3
 8101590:	617b      	str	r3, [r7, #20]
 8101592:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8101596:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 =
        (((((int64_t)1) << 47) + var1)) * ((int64_t)baro->comp_vals.dig_P1) >> 33;
 810159a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810159e:	1c11      	adds	r1, r2, #0
 81015a0:	6439      	str	r1, [r7, #64]	; 0x40
 81015a2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 81015a6:	647b      	str	r3, [r7, #68]	; 0x44
 81015a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015aa:	8bdb      	ldrh	r3, [r3, #30]
 81015ac:	b29a      	uxth	r2, r3
 81015ae:	f04f 0300 	mov.w	r3, #0
 81015b2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 81015b6:	4629      	mov	r1, r5
 81015b8:	fb02 f001 	mul.w	r0, r2, r1
 81015bc:	4621      	mov	r1, r4
 81015be:	fb01 f103 	mul.w	r1, r1, r3
 81015c2:	4401      	add	r1, r0
 81015c4:	4620      	mov	r0, r4
 81015c6:	fba0 2302 	umull	r2, r3, r0, r2
 81015ca:	4419      	add	r1, r3
 81015cc:	460b      	mov	r3, r1
  var1 =
 81015ce:	f04f 0000 	mov.w	r0, #0
 81015d2:	f04f 0100 	mov.w	r1, #0
 81015d6:	1058      	asrs	r0, r3, #1
 81015d8:	17d9      	asrs	r1, r3, #31
 81015da:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    if (var1 == 0) {
 81015de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81015e2:	4313      	orrs	r3, r2
 81015e4:	f000 80f5 	beq.w	81017d2 <ReadPressure+0x3b6>
 81015e8:	e004      	b.n	81015f4 <ReadPressure+0x1d8>
 81015ea:	bf00      	nop
 81015ec:	100000b0 	.word	0x100000b0
 81015f0:	43800000 	.word	0x43800000
        return; // avoid exception caused by division by zero
      }
    p = 1048576 - adc_P;
 81015f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81015f6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 81015fa:	461a      	mov	r2, r3
 81015fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101600:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    p = (((p << 31) - var2) * 3125) / var1;
 8101604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101606:	105b      	asrs	r3, r3, #1
 8101608:	63fb      	str	r3, [r7, #60]	; 0x3c
 810160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810160c:	07db      	lsls	r3, r3, #31
 810160e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101610:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101614:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8101618:	4621      	mov	r1, r4
 810161a:	ebb1 0a02 	subs.w	sl, r1, r2
 810161e:	4629      	mov	r1, r5
 8101620:	eb61 0b03 	sbc.w	fp, r1, r3
 8101624:	4652      	mov	r2, sl
 8101626:	465b      	mov	r3, fp
 8101628:	1891      	adds	r1, r2, r2
 810162a:	60b9      	str	r1, [r7, #8]
 810162c:	415b      	adcs	r3, r3
 810162e:	60fb      	str	r3, [r7, #12]
 8101630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101634:	eb12 020a 	adds.w	r2, r2, sl
 8101638:	eb43 030b 	adc.w	r3, r3, fp
 810163c:	f04f 0000 	mov.w	r0, #0
 8101640:	f04f 0100 	mov.w	r1, #0
 8101644:	0199      	lsls	r1, r3, #6
 8101646:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 810164a:	0190      	lsls	r0, r2, #6
 810164c:	1812      	adds	r2, r2, r0
 810164e:	eb41 0303 	adc.w	r3, r1, r3
 8101652:	f04f 0000 	mov.w	r0, #0
 8101656:	f04f 0100 	mov.w	r1, #0
 810165a:	0099      	lsls	r1, r3, #2
 810165c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101660:	0090      	lsls	r0, r2, #2
 8101662:	4602      	mov	r2, r0
 8101664:	460b      	mov	r3, r1
 8101666:	eb12 020a 	adds.w	r2, r2, sl
 810166a:	eb43 030b 	adc.w	r3, r3, fp
 810166e:	f04f 0000 	mov.w	r0, #0
 8101672:	f04f 0100 	mov.w	r1, #0
 8101676:	0099      	lsls	r1, r3, #2
 8101678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 810167c:	0090      	lsls	r0, r2, #2
 810167e:	4602      	mov	r2, r0
 8101680:	460b      	mov	r3, r1
 8101682:	eb12 010a 	adds.w	r1, r2, sl
 8101686:	6339      	str	r1, [r7, #48]	; 0x30
 8101688:	eb43 030b 	adc.w	r3, r3, fp
 810168c:	637b      	str	r3, [r7, #52]	; 0x34
 810168e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101696:	f7ff fbe9 	bl	8100e6c <__aeabi_ldivmod>
 810169a:	4602      	mov	r2, r0
 810169c:	460b      	mov	r3, r1
 810169e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    var1 = (((int64_t)baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 81016a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016a4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 81016a8:	b218      	sxth	r0, r3
 81016aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 81016ae:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81016b2:	f04f 0200 	mov.w	r2, #0
 81016b6:	f04f 0300 	mov.w	r3, #0
 81016ba:	0b62      	lsrs	r2, r4, #13
 81016bc:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81016c0:	136b      	asrs	r3, r5, #13
 81016c2:	fb02 f501 	mul.w	r5, r2, r1
 81016c6:	fb00 f403 	mul.w	r4, r0, r3
 81016ca:	442c      	add	r4, r5
 81016cc:	fba0 0102 	umull	r0, r1, r0, r2
 81016d0:	1863      	adds	r3, r4, r1
 81016d2:	4619      	mov	r1, r3
 81016d4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81016d8:	f04f 0200 	mov.w	r2, #0
 81016dc:	f04f 0300 	mov.w	r3, #0
 81016e0:	0b62      	lsrs	r2, r4, #13
 81016e2:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81016e6:	136b      	asrs	r3, r5, #13
 81016e8:	fb02 f501 	mul.w	r5, r2, r1
 81016ec:	fb00 f403 	mul.w	r4, r0, r3
 81016f0:	442c      	add	r4, r5
 81016f2:	fba0 0102 	umull	r0, r1, r0, r2
 81016f6:	1863      	adds	r3, r4, r1
 81016f8:	4619      	mov	r1, r3
 81016fa:	f04f 0200 	mov.w	r2, #0
 81016fe:	f04f 0300 	mov.w	r3, #0
 8101702:	0e42      	lsrs	r2, r0, #25
 8101704:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8101708:	164b      	asrs	r3, r1, #25
 810170a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    var2 = (((int64_t)baro->comp_vals.dig_P8) * p) >> 19;
 810170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101710:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8101714:	b21a      	sxth	r2, r3
 8101716:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810171a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810171c:	fb03 f001 	mul.w	r0, r3, r1
 8101720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8101722:	fb02 f101 	mul.w	r1, r2, r1
 8101726:	1844      	adds	r4, r0, r1
 8101728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810172a:	fba1 0102 	umull	r0, r1, r1, r2
 810172e:	1863      	adds	r3, r4, r1
 8101730:	4619      	mov	r1, r3
 8101732:	f04f 0200 	mov.w	r2, #0
 8101736:	f04f 0300 	mov.w	r3, #0
 810173a:	0cc2      	lsrs	r2, r0, #19
 810173c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8101740:	14cb      	asrs	r3, r1, #19
 8101742:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    p = ((p + var1 + var2) >> 8) + (((int64_t)baro->comp_vals.dig_P7) << 4);
 8101746:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 810174a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810174e:	1884      	adds	r4, r0, r2
 8101750:	62bc      	str	r4, [r7, #40]	; 0x28
 8101752:	eb41 0303 	adc.w	r3, r1, r3
 8101756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 810175c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101760:	4621      	mov	r1, r4
 8101762:	1889      	adds	r1, r1, r2
 8101764:	6239      	str	r1, [r7, #32]
 8101766:	4629      	mov	r1, r5
 8101768:	eb43 0101 	adc.w	r1, r3, r1
 810176c:	6279      	str	r1, [r7, #36]	; 0x24
 810176e:	f04f 0000 	mov.w	r0, #0
 8101772:	f04f 0100 	mov.w	r1, #0
 8101776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 810177a:	4623      	mov	r3, r4
 810177c:	0a18      	lsrs	r0, r3, #8
 810177e:	462b      	mov	r3, r5
 8101780:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8101784:	462b      	mov	r3, r5
 8101786:	1219      	asrs	r1, r3, #8
 8101788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810178a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 810178e:	b21c      	sxth	r4, r3
 8101790:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8101794:	f04f 0200 	mov.w	r2, #0
 8101798:	f04f 0300 	mov.w	r3, #0
 810179c:	012b      	lsls	r3, r5, #4
 810179e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 81017a2:	0122      	lsls	r2, r4, #4
 81017a4:	1884      	adds	r4, r0, r2
 81017a6:	603c      	str	r4, [r7, #0]
 81017a8:	eb41 0303 	adc.w	r3, r1, r3
 81017ac:	607b      	str	r3, [r7, #4]
 81017ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 81017b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    baro->pressure = (float) p/256;
 81017b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81017ba:	f7ff fb19 	bl	8100df0 <__aeabi_l2f>
 81017be:	ee06 0a90 	vmov	s13, r0
 81017c2:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 81015f0 <ReadPressure+0x1d4>
 81017c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81017ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017cc:	edc3 7a01 	vstr	s15, [r3, #4]
 81017d0:	e000      	b.n	81017d4 <ReadPressure+0x3b8>
        return; // avoid exception caused by division by zero
 81017d2:	bf00      	nop

}
 81017d4:	3770      	adds	r7, #112	; 0x70
 81017d6:	46bd      	mov	sp, r7
 81017d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81017dc:	0000      	movs	r0, r0
	...

081017e0 <ReadAltitude>:

void ReadAltitude(BMP280Handle* baro)
{
 81017e0:	b580      	push	{r7, lr}
 81017e2:	b084      	sub	sp, #16
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 81017e8:	f04f 0300 	mov.w	r3, #0
 81017ec:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	685b      	ldr	r3, [r3, #4]
 81017f2:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure/ SEA_LEVEL_PRESSURE), (1/5.255)));
 81017f4:	edd7 7a02 	vldr	s15, [r7, #8]
 81017f8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8101890 <ReadAltitude+0xb0>
 81017fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101800:	ee16 0a90 	vmov	r0, s13
 8101804:	f7fe fecc 	bl	81005a0 <__aeabi_f2d>
 8101808:	4602      	mov	r2, r0
 810180a:	460b      	mov	r3, r1
 810180c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8101880 <ReadAltitude+0xa0>
 8101810:	ec43 2b10 	vmov	d0, r2, r3
 8101814:	f00a fd42 	bl	810c29c <pow>
 8101818:	ec53 2b10 	vmov	r2, r3, d0
 810181c:	f04f 0000 	mov.w	r0, #0
 8101820:	491c      	ldr	r1, [pc, #112]	; (8101894 <ReadAltitude+0xb4>)
 8101822:	f7fe fd5d 	bl	81002e0 <__aeabi_dsub>
 8101826:	4602      	mov	r2, r0
 8101828:	460b      	mov	r3, r1
 810182a:	4610      	mov	r0, r2
 810182c:	4619      	mov	r1, r3
 810182e:	a316      	add	r3, pc, #88	; (adr r3, 8101888 <ReadAltitude+0xa8>)
 8101830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101834:	f7fe ff0c 	bl	8100650 <__aeabi_dmul>
 8101838:	4602      	mov	r2, r0
 810183a:	460b      	mov	r3, r1
 810183c:	4610      	mov	r0, r2
 810183e:	4619      	mov	r1, r3
 8101840:	f7ff f9b6 	bl	8100bb0 <__aeabi_d2f>
 8101844:	4603      	mov	r3, r0
 8101846:	60fb      	str	r3, [r7, #12]

  if((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 8101848:	edd7 7a03 	vldr	s15, [r7, #12]
 810184c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8101898 <ReadAltitude+0xb8>
 8101850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101858:	d90c      	bls.n	8101874 <ReadAltitude+0x94>
 810185a:	edd7 7a03 	vldr	s15, [r7, #12]
 810185e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 810189c <ReadAltitude+0xbc>
 8101862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810186a:	da03      	bge.n	8101874 <ReadAltitude+0x94>
  {
    return;
  }

  baro->altitude = altitude;
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	68fa      	ldr	r2, [r7, #12]
 8101870:	609a      	str	r2, [r3, #8]
 8101872:	e000      	b.n	8101876 <ReadAltitude+0x96>
    return;
 8101874:	bf00      	nop

}
 8101876:	3710      	adds	r7, #16
 8101878:	46bd      	mov	sp, r7
 810187a:	bd80      	pop	{r7, pc}
 810187c:	f3af 8000 	nop.w
 8101880:	ccd9456c 	.word	0xccd9456c
 8101884:	3fc85b95 	.word	0x3fc85b95
 8101888:	00000000 	.word	0x00000000
 810188c:	40e5a540 	.word	0x40e5a540
 8101890:	47c5e680 	.word	0x47c5e680
 8101894:	3ff00000 	.word	0x3ff00000
 8101898:	c3fa0000 	.word	0xc3fa0000
 810189c:	460ca000 	.word	0x460ca000

081018a0 <ReadCalibCoefficients>:



void ReadCalibCoefficients(BMP280Handle* baro)
{
 81018a0:	b580      	push	{r7, lr}
 81018a2:	b082      	sub	sp, #8
 81018a4:	af00      	add	r7, sp, #0
 81018a6:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16Bit(dig_T1);
 81018a8:	2088      	movs	r0, #136	; 0x88
 81018aa:	f7ff fcf9 	bl	81012a0 <Read16Bit>
 81018ae:	4603      	mov	r3, r0
 81018b0:	461a      	mov	r2, r3
 81018b2:	687b      	ldr	r3, [r7, #4]
 81018b4:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_T2 = Read16Bit(dig_T2);
 81018b6:	208a      	movs	r0, #138	; 0x8a
 81018b8:	f7ff fcf2 	bl	81012a0 <Read16Bit>
 81018bc:	4603      	mov	r3, r0
 81018be:	b21a      	sxth	r2, r3
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_T3 = Read16Bit(dig_T3);
 81018c4:	208c      	movs	r0, #140	; 0x8c
 81018c6:	f7ff fceb 	bl	81012a0 <Read16Bit>
 81018ca:	4603      	mov	r3, r0
 81018cc:	b21a      	sxth	r2, r3
 81018ce:	687b      	ldr	r3, [r7, #4]
 81018d0:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P1 = Read16Bit(dig_P1);
 81018d2:	208e      	movs	r0, #142	; 0x8e
 81018d4:	f7ff fce4 	bl	81012a0 <Read16Bit>
 81018d8:	4603      	mov	r3, r0
 81018da:	461a      	mov	r2, r3
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P2 = Read16Bit(dig_P2);
 81018e0:	2090      	movs	r0, #144	; 0x90
 81018e2:	f7ff fcdd 	bl	81012a0 <Read16Bit>
 81018e6:	4603      	mov	r3, r0
 81018e8:	b21a      	sxth	r2, r3
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P3 = Read16Bit(dig_P3);
 81018ee:	2092      	movs	r0, #146	; 0x92
 81018f0:	f7ff fcd6 	bl	81012a0 <Read16Bit>
 81018f4:	4603      	mov	r3, r0
 81018f6:	b21a      	sxth	r2, r3
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P4 = Read16Bit(dig_P4);
 81018fc:	2094      	movs	r0, #148	; 0x94
 81018fe:	f7ff fccf 	bl	81012a0 <Read16Bit>
 8101902:	4603      	mov	r3, r0
 8101904:	b21a      	sxth	r2, r3
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P5 = Read16Bit(dig_P5);
 810190a:	2096      	movs	r0, #150	; 0x96
 810190c:	f7ff fcc8 	bl	81012a0 <Read16Bit>
 8101910:	4603      	mov	r3, r0
 8101912:	b21a      	sxth	r2, r3
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P6 = Read16Bit(dig_P6);
 8101918:	2098      	movs	r0, #152	; 0x98
 810191a:	f7ff fcc1 	bl	81012a0 <Read16Bit>
 810191e:	4603      	mov	r3, r0
 8101920:	b21a      	sxth	r2, r3
 8101922:	687b      	ldr	r3, [r7, #4]
 8101924:	851a      	strh	r2, [r3, #40]	; 0x28
  baro->comp_vals.dig_P7 = Read16Bit(dig_P7);
 8101926:	209a      	movs	r0, #154	; 0x9a
 8101928:	f7ff fcba 	bl	81012a0 <Read16Bit>
 810192c:	4603      	mov	r3, r0
 810192e:	b21a      	sxth	r2, r3
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	855a      	strh	r2, [r3, #42]	; 0x2a
  baro->comp_vals.dig_P8 = Read16Bit(dig_P8);
 8101934:	209c      	movs	r0, #156	; 0x9c
 8101936:	f7ff fcb3 	bl	81012a0 <Read16Bit>
 810193a:	4603      	mov	r3, r0
 810193c:	b21a      	sxth	r2, r3
 810193e:	687b      	ldr	r3, [r7, #4]
 8101940:	859a      	strh	r2, [r3, #44]	; 0x2c
  baro->comp_vals.dig_P9 = Read16Bit(dig_P9);
 8101942:	209e      	movs	r0, #158	; 0x9e
 8101944:	f7ff fcac 	bl	81012a0 <Read16Bit>
 8101948:	4603      	mov	r3, r0
 810194a:	b21a      	sxth	r2, r3
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 8101950:	bf00      	nop
 8101952:	3708      	adds	r7, #8
 8101954:	46bd      	mov	sp, r7
 8101956:	bd80      	pop	{r7, pc}

08101958 <setConfig>:
void WriteRegister(uint8_t reg, uint8_t data)
{

}
uint8_t setConfig(BMP280Handle* baro)
{
 8101958:	b580      	push	{r7, lr}
 810195a:	b084      	sub	sp, #16
 810195c:	af00      	add	r7, sp, #0
 810195e:	6078      	str	r0, [r7, #4]

    // Ultra High resolution 26.3 Hz
   baro->config.mode = NORMAL;
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	2203      	movs	r2, #3
 8101964:	749a      	strb	r2, [r3, #18]
   baro->config.pressure_oversampling = X16;
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	2205      	movs	r2, #5
 810196a:	755a      	strb	r2, [r3, #21]
   baro->config.temp_oversampling = X2;
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	2202      	movs	r2, #2
 8101970:	759a      	strb	r2, [r3, #22]

   uint8_t SerialData[2] = {0};
 8101972:	2300      	movs	r3, #0
 8101974:	81bb      	strh	r3, [r7, #12]
   volatile uint8_t aRxBuffer[3]= {0};
 8101976:	4b15      	ldr	r3, [pc, #84]	; (81019cc <setConfig+0x74>)
 8101978:	881b      	ldrh	r3, [r3, #0]
 810197a:	813b      	strh	r3, [r7, #8]
 810197c:	2300      	movs	r3, #0
 810197e:	72bb      	strb	r3, [r7, #10]
   SerialData[0] = BMP280_REG_CTRL_MEAS & ~0x80;
 8101980:	2374      	movs	r3, #116	; 0x74
 8101982:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode ;
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	7d9b      	ldrb	r3, [r3, #22]
 8101988:	015b      	lsls	r3, r3, #5
 810198a:	b25a      	sxtb	r2, r3
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	7d5b      	ldrb	r3, [r3, #21]
 8101990:	009b      	lsls	r3, r3, #2
 8101992:	b25b      	sxtb	r3, r3
 8101994:	4313      	orrs	r3, r2
 8101996:	b25a      	sxtb	r2, r3
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	7c9b      	ldrb	r3, [r3, #18]
 810199c:	b25b      	sxtb	r3, r3
 810199e:	4313      	orrs	r3, r2
 81019a0:	b25b      	sxtb	r3, r3
 81019a2:	b2db      	uxtb	r3, r3
 81019a4:	737b      	strb	r3, [r7, #13]
   //SerialData[1] = 0x27;

   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3) == HAL_OK)
 81019a6:	f107 0208 	add.w	r2, r7, #8
 81019aa:	f107 010c 	add.w	r1, r7, #12
 81019ae:	2303      	movs	r3, #3
 81019b0:	4807      	ldr	r0, [pc, #28]	; (81019d0 <setConfig+0x78>)
 81019b2:	f008 f955 	bl	8109c60 <HAL_SPI_TransmitReceive_DMA>
 81019b6:	4603      	mov	r3, r0
 81019b8:	2b00      	cmp	r3, #0
 81019ba:	d101      	bne.n	81019c0 <setConfig+0x68>
   {
     return HAL_OK;
 81019bc:	2300      	movs	r3, #0
 81019be:	e000      	b.n	81019c2 <setConfig+0x6a>
   }

   else
   {
     return HAL_ERROR;
 81019c0:	2301      	movs	r3, #1
   }

}
 81019c2:	4618      	mov	r0, r3
 81019c4:	3710      	adds	r7, #16
 81019c6:	46bd      	mov	sp, r7
 81019c8:	bd80      	pop	{r7, pc}
 81019ca:	bf00      	nop
 81019cc:	0810d224 	.word	0x0810d224
 81019d0:	100002f0 	.word	0x100002f0

081019d4 <HAL_SPI_TxRxCpltCallback>:

void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81019d4:	b580      	push	{r7, lr}
 81019d6:	b082      	sub	sp, #8
 81019d8:	af00      	add	r7, sp, #0
 81019da:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	4a05      	ldr	r2, [pc, #20]	; (81019f8 <HAL_SPI_TxRxCpltCallback+0x24>)
 81019e2:	4293      	cmp	r3, r2
 81019e4:	d104      	bne.n	81019f0 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 81019e6:	2201      	movs	r2, #1
 81019e8:	2110      	movs	r1, #16
 81019ea:	4804      	ldr	r0, [pc, #16]	; (81019fc <HAL_SPI_TxRxCpltCallback+0x28>)
 81019ec:	f004 fe74 	bl	81066d8 <HAL_GPIO_WritePin>
    }
}
 81019f0:	bf00      	nop
 81019f2:	3708      	adds	r7, #8
 81019f4:	46bd      	mov	sp, r7
 81019f6:	bd80      	pop	{r7, pc}
 81019f8:	40013000 	.word	0x40013000
 81019fc:	58020000 	.word	0x58020000

08101a00 <ResetBMP280>:
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);

}

uint8_t ResetBMP280(void)
{
 8101a00:	b580      	push	{r7, lr}
 8101a02:	b082      	sub	sp, #8
 8101a04:	af00      	add	r7, sp, #0
   uint8_t SerialData[2] = {(BMP280_REG_RESET & ~0x80), BMP280_RESET_VALUE}; // Register address, Data,
 8101a06:	f24b 6360 	movw	r3, #46688	; 0xb660
 8101a0a:	80bb      	strh	r3, [r7, #4]
   volatile uint8_t aRxBuffer[3]= {0};
 8101a0c:	4b0c      	ldr	r3, [pc, #48]	; (8101a40 <ResetBMP280+0x40>)
 8101a0e:	881b      	ldrh	r3, [r3, #0]
 8101a10:	803b      	strh	r3, [r7, #0]
 8101a12:	2300      	movs	r3, #0
 8101a14:	70bb      	strb	r3, [r7, #2]
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101a16:	2200      	movs	r2, #0
 8101a18:	2110      	movs	r1, #16
 8101a1a:	480a      	ldr	r0, [pc, #40]	; (8101a44 <ResetBMP280+0x44>)
 8101a1c:	f004 fe5c 	bl	81066d8 <HAL_GPIO_WritePin>

   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101a20:	463a      	mov	r2, r7
 8101a22:	1d39      	adds	r1, r7, #4
 8101a24:	2302      	movs	r3, #2
 8101a26:	4808      	ldr	r0, [pc, #32]	; (8101a48 <ResetBMP280+0x48>)
 8101a28:	f008 f91a 	bl	8109c60 <HAL_SPI_TransmitReceive_DMA>
 8101a2c:	4603      	mov	r3, r0
 8101a2e:	2b00      	cmp	r3, #0
 8101a30:	d101      	bne.n	8101a36 <ResetBMP280+0x36>
   {
     return HAL_OK;
 8101a32:	2300      	movs	r3, #0
 8101a34:	e000      	b.n	8101a38 <ResetBMP280+0x38>
   }

   else
   {
     return HAL_ERROR;
 8101a36:	2301      	movs	r3, #1
   }



}
 8101a38:	4618      	mov	r0, r3
 8101a3a:	3708      	adds	r7, #8
 8101a3c:	46bd      	mov	sp, r7
 8101a3e:	bd80      	pop	{r7, pc}
 8101a40:	0810d224 	.word	0x0810d224
 8101a44:	58020000 	.word	0x58020000
 8101a48:	100002f0 	.word	0x100002f0

08101a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101a4c:	b580      	push	{r7, lr}
 8101a4e:	b082      	sub	sp, #8
 8101a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101a52:	4b29      	ldr	r3, [pc, #164]	; (8101af8 <MX_DMA_Init+0xac>)
 8101a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a58:	4a27      	ldr	r2, [pc, #156]	; (8101af8 <MX_DMA_Init+0xac>)
 8101a5a:	f043 0301 	orr.w	r3, r3, #1
 8101a5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a62:	4b25      	ldr	r3, [pc, #148]	; (8101af8 <MX_DMA_Init+0xac>)
 8101a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a68:	f003 0301 	and.w	r3, r3, #1
 8101a6c:	607b      	str	r3, [r7, #4]
 8101a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101a70:	4b21      	ldr	r3, [pc, #132]	; (8101af8 <MX_DMA_Init+0xac>)
 8101a72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a76:	4a20      	ldr	r2, [pc, #128]	; (8101af8 <MX_DMA_Init+0xac>)
 8101a78:	f043 0302 	orr.w	r3, r3, #2
 8101a7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a80:	4b1d      	ldr	r3, [pc, #116]	; (8101af8 <MX_DMA_Init+0xac>)
 8101a82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a86:	f003 0302 	and.w	r3, r3, #2
 8101a8a:	603b      	str	r3, [r7, #0]
 8101a8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101a8e:	2200      	movs	r2, #0
 8101a90:	2100      	movs	r1, #0
 8101a92:	200b      	movs	r0, #11
 8101a94:	f001 fdd5 	bl	8103642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101a98:	200b      	movs	r0, #11
 8101a9a:	f001 fdec 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101a9e:	2200      	movs	r2, #0
 8101aa0:	2100      	movs	r1, #0
 8101aa2:	200c      	movs	r0, #12
 8101aa4:	f001 fdcd 	bl	8103642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101aa8:	200c      	movs	r0, #12
 8101aaa:	f001 fde4 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101aae:	2200      	movs	r2, #0
 8101ab0:	2100      	movs	r1, #0
 8101ab2:	200d      	movs	r0, #13
 8101ab4:	f001 fdc5 	bl	8103642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101ab8:	200d      	movs	r0, #13
 8101aba:	f001 fddc 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101abe:	2200      	movs	r2, #0
 8101ac0:	2100      	movs	r1, #0
 8101ac2:	200e      	movs	r0, #14
 8101ac4:	f001 fdbd 	bl	8103642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101ac8:	200e      	movs	r0, #14
 8101aca:	f001 fdd4 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101ace:	2200      	movs	r2, #0
 8101ad0:	2100      	movs	r1, #0
 8101ad2:	202f      	movs	r0, #47	; 0x2f
 8101ad4:	f001 fdb5 	bl	8103642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101ad8:	202f      	movs	r0, #47	; 0x2f
 8101ada:	f001 fdcc 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101ade:	2200      	movs	r2, #0
 8101ae0:	2100      	movs	r1, #0
 8101ae2:	2038      	movs	r0, #56	; 0x38
 8101ae4:	f001 fdad 	bl	8103642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101ae8:	2038      	movs	r0, #56	; 0x38
 8101aea:	f001 fdc4 	bl	8103676 <HAL_NVIC_EnableIRQ>

}
 8101aee:	bf00      	nop
 8101af0:	3708      	adds	r7, #8
 8101af2:	46bd      	mov	sp, r7
 8101af4:	bd80      	pop	{r7, pc}
 8101af6:	bf00      	nop
 8101af8:	58024400 	.word	0x58024400

08101afc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101afc:	b580      	push	{r7, lr}
 8101afe:	b088      	sub	sp, #32
 8101b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b02:	f107 030c 	add.w	r3, r7, #12
 8101b06:	2200      	movs	r2, #0
 8101b08:	601a      	str	r2, [r3, #0]
 8101b0a:	605a      	str	r2, [r3, #4]
 8101b0c:	609a      	str	r2, [r3, #8]
 8101b0e:	60da      	str	r2, [r3, #12]
 8101b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b12:	4b22      	ldr	r3, [pc, #136]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b18:	4a20      	ldr	r2, [pc, #128]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b1a:	f043 0301 	orr.w	r3, r3, #1
 8101b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b22:	4b1e      	ldr	r3, [pc, #120]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b28:	f003 0301 	and.w	r3, r3, #1
 8101b2c:	60bb      	str	r3, [r7, #8]
 8101b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b30:	4b1a      	ldr	r3, [pc, #104]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b36:	4a19      	ldr	r2, [pc, #100]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b38:	f043 0308 	orr.w	r3, r3, #8
 8101b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b40:	4b16      	ldr	r3, [pc, #88]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b46:	f003 0308 	and.w	r3, r3, #8
 8101b4a:	607b      	str	r3, [r7, #4]
 8101b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b4e:	4b13      	ldr	r3, [pc, #76]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b54:	4a11      	ldr	r2, [pc, #68]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b56:	f043 0302 	orr.w	r3, r3, #2
 8101b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b5e:	4b0f      	ldr	r3, [pc, #60]	; (8101b9c <MX_GPIO_Init+0xa0>)
 8101b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b64:	f003 0302 	and.w	r3, r3, #2
 8101b68:	603b      	str	r3, [r7, #0]
 8101b6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101b6c:	2200      	movs	r2, #0
 8101b6e:	2110      	movs	r1, #16
 8101b70:	480b      	ldr	r0, [pc, #44]	; (8101ba0 <MX_GPIO_Init+0xa4>)
 8101b72:	f004 fdb1 	bl	81066d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101b76:	2310      	movs	r3, #16
 8101b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101b7a:	2301      	movs	r3, #1
 8101b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b7e:	2300      	movs	r3, #0
 8101b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b82:	2300      	movs	r3, #0
 8101b84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101b86:	f107 030c 	add.w	r3, r7, #12
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4804      	ldr	r0, [pc, #16]	; (8101ba0 <MX_GPIO_Init+0xa4>)
 8101b8e:	f004 fbf3 	bl	8106378 <HAL_GPIO_Init>

}
 8101b92:	bf00      	nop
 8101b94:	3720      	adds	r7, #32
 8101b96:	46bd      	mov	sp, r7
 8101b98:	bd80      	pop	{r7, pc}
 8101b9a:	bf00      	nop
 8101b9c:	58024400 	.word	0x58024400
 8101ba0:	58020000 	.word	0x58020000

08101ba4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101ba4:	b580      	push	{r7, lr}
 8101ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101ba8:	4b1b      	ldr	r3, [pc, #108]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101baa:	4a1c      	ldr	r2, [pc, #112]	; (8101c1c <MX_I2C1_Init+0x78>)
 8101bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101bae:	4b1a      	ldr	r3, [pc, #104]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bb0:	4a1b      	ldr	r2, [pc, #108]	; (8101c20 <MX_I2C1_Init+0x7c>)
 8101bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101bb4:	4b18      	ldr	r3, [pc, #96]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bb6:	2200      	movs	r2, #0
 8101bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101bba:	4b17      	ldr	r3, [pc, #92]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bbc:	2201      	movs	r2, #1
 8101bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101bc0:	4b15      	ldr	r3, [pc, #84]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bc2:	2200      	movs	r2, #0
 8101bc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101bc6:	4b14      	ldr	r3, [pc, #80]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bc8:	2200      	movs	r2, #0
 8101bca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101bcc:	4b12      	ldr	r3, [pc, #72]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bce:	2200      	movs	r2, #0
 8101bd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101bd2:	4b11      	ldr	r3, [pc, #68]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bd4:	2200      	movs	r2, #0
 8101bd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101bd8:	4b0f      	ldr	r3, [pc, #60]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bda:	2200      	movs	r2, #0
 8101bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101bde:	480e      	ldr	r0, [pc, #56]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101be0:	f004 fda6 	bl	8106730 <HAL_I2C_Init>
 8101be4:	4603      	mov	r3, r0
 8101be6:	2b00      	cmp	r3, #0
 8101be8:	d001      	beq.n	8101bee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101bea:	f000 ff0d 	bl	8102a08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101bee:	2100      	movs	r1, #0
 8101bf0:	4809      	ldr	r0, [pc, #36]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101bf2:	f006 f8d9 	bl	8107da8 <HAL_I2CEx_ConfigAnalogFilter>
 8101bf6:	4603      	mov	r3, r0
 8101bf8:	2b00      	cmp	r3, #0
 8101bfa:	d001      	beq.n	8101c00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101bfc:	f000 ff04 	bl	8102a08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101c00:	2100      	movs	r1, #0
 8101c02:	4805      	ldr	r0, [pc, #20]	; (8101c18 <MX_I2C1_Init+0x74>)
 8101c04:	f006 f91b 	bl	8107e3e <HAL_I2CEx_ConfigDigitalFilter>
 8101c08:	4603      	mov	r3, r0
 8101c0a:	2b00      	cmp	r3, #0
 8101c0c:	d001      	beq.n	8101c12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101c0e:	f000 fefb 	bl	8102a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101c12:	bf00      	nop
 8101c14:	bd80      	pop	{r7, pc}
 8101c16:	bf00      	nop
 8101c18:	1000012c 	.word	0x1000012c
 8101c1c:	40005400 	.word	0x40005400
 8101c20:	307075b1 	.word	0x307075b1

08101c24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101c24:	b580      	push	{r7, lr}
 8101c26:	b0b8      	sub	sp, #224	; 0xe0
 8101c28:	af00      	add	r7, sp, #0
 8101c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101c30:	2200      	movs	r2, #0
 8101c32:	601a      	str	r2, [r3, #0]
 8101c34:	605a      	str	r2, [r3, #4]
 8101c36:	609a      	str	r2, [r3, #8]
 8101c38:	60da      	str	r2, [r3, #12]
 8101c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c3c:	f107 0310 	add.w	r3, r7, #16
 8101c40:	22bc      	movs	r2, #188	; 0xbc
 8101c42:	2100      	movs	r1, #0
 8101c44:	4618      	mov	r0, r3
 8101c46:	f00a fb21 	bl	810c28c <memset>
  if(i2cHandle->Instance==I2C1)
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	4a5b      	ldr	r2, [pc, #364]	; (8101dbc <HAL_I2C_MspInit+0x198>)
 8101c50:	4293      	cmp	r3, r2
 8101c52:	f040 80af 	bne.w	8101db4 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101c56:	2308      	movs	r3, #8
 8101c58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101c5a:	2300      	movs	r3, #0
 8101c5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c60:	f107 0310 	add.w	r3, r7, #16
 8101c64:	4618      	mov	r0, r3
 8101c66:	f006 fb97 	bl	8108398 <HAL_RCCEx_PeriphCLKConfig>
 8101c6a:	4603      	mov	r3, r0
 8101c6c:	2b00      	cmp	r3, #0
 8101c6e:	d001      	beq.n	8101c74 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101c70:	f000 feca 	bl	8102a08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c74:	4b52      	ldr	r3, [pc, #328]	; (8101dc0 <HAL_I2C_MspInit+0x19c>)
 8101c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c7a:	4a51      	ldr	r2, [pc, #324]	; (8101dc0 <HAL_I2C_MspInit+0x19c>)
 8101c7c:	f043 0302 	orr.w	r3, r3, #2
 8101c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c84:	4b4e      	ldr	r3, [pc, #312]	; (8101dc0 <HAL_I2C_MspInit+0x19c>)
 8101c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c8a:	f003 0302 	and.w	r3, r3, #2
 8101c8e:	60fb      	str	r3, [r7, #12]
 8101c90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101c9a:	2312      	movs	r3, #18
 8101c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ca0:	2300      	movs	r3, #0
 8101ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ca6:	2300      	movs	r3, #0
 8101ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101cac:	2304      	movs	r3, #4
 8101cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101cb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101cb6:	4619      	mov	r1, r3
 8101cb8:	4842      	ldr	r0, [pc, #264]	; (8101dc4 <HAL_I2C_MspInit+0x1a0>)
 8101cba:	f004 fb5d 	bl	8106378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101cbe:	4b40      	ldr	r3, [pc, #256]	; (8101dc0 <HAL_I2C_MspInit+0x19c>)
 8101cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101cc4:	4a3e      	ldr	r2, [pc, #248]	; (8101dc0 <HAL_I2C_MspInit+0x19c>)
 8101cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101cce:	4b3c      	ldr	r3, [pc, #240]	; (8101dc0 <HAL_I2C_MspInit+0x19c>)
 8101cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101cd8:	60bb      	str	r3, [r7, #8]
 8101cda:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101cdc:	4b3a      	ldr	r3, [pc, #232]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101cde:	4a3b      	ldr	r2, [pc, #236]	; (8101dcc <HAL_I2C_MspInit+0x1a8>)
 8101ce0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101ce2:	4b39      	ldr	r3, [pc, #228]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101ce4:	2221      	movs	r2, #33	; 0x21
 8101ce6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101ce8:	4b37      	ldr	r3, [pc, #220]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101cea:	2200      	movs	r2, #0
 8101cec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101cee:	4b36      	ldr	r3, [pc, #216]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101cf0:	2200      	movs	r2, #0
 8101cf2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101cf4:	4b34      	ldr	r3, [pc, #208]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101cfa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101cfc:	4b32      	ldr	r3, [pc, #200]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101cfe:	2200      	movs	r2, #0
 8101d00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101d02:	4b31      	ldr	r3, [pc, #196]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d04:	2200      	movs	r2, #0
 8101d06:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101d08:	4b2f      	ldr	r3, [pc, #188]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d0a:	2200      	movs	r2, #0
 8101d0c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d0e:	4b2e      	ldr	r3, [pc, #184]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101d14:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101d16:	4b2c      	ldr	r3, [pc, #176]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d18:	2200      	movs	r2, #0
 8101d1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101d1c:	482a      	ldr	r0, [pc, #168]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d1e:	f001 fcd9 	bl	81036d4 <HAL_DMA_Init>
 8101d22:	4603      	mov	r3, r0
 8101d24:	2b00      	cmp	r3, #0
 8101d26:	d001      	beq.n	8101d2c <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101d28:	f000 fe6e 	bl	8102a08 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	4a26      	ldr	r2, [pc, #152]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d30:	63da      	str	r2, [r3, #60]	; 0x3c
 8101d32:	4a25      	ldr	r2, [pc, #148]	; (8101dc8 <HAL_I2C_MspInit+0x1a4>)
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101d38:	4b25      	ldr	r3, [pc, #148]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d3a:	4a26      	ldr	r2, [pc, #152]	; (8101dd4 <HAL_I2C_MspInit+0x1b0>)
 8101d3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101d3e:	4b24      	ldr	r3, [pc, #144]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d40:	2222      	movs	r2, #34	; 0x22
 8101d42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101d44:	4b22      	ldr	r3, [pc, #136]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d46:	2240      	movs	r2, #64	; 0x40
 8101d48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101d4a:	4b21      	ldr	r3, [pc, #132]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d4c:	2200      	movs	r2, #0
 8101d4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101d50:	4b1f      	ldr	r3, [pc, #124]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101d56:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101d58:	4b1d      	ldr	r3, [pc, #116]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d5a:	2200      	movs	r2, #0
 8101d5c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101d5e:	4b1c      	ldr	r3, [pc, #112]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d60:	2200      	movs	r2, #0
 8101d62:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101d64:	4b1a      	ldr	r3, [pc, #104]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d66:	2200      	movs	r2, #0
 8101d68:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d6a:	4b19      	ldr	r3, [pc, #100]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101d70:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101d72:	4b17      	ldr	r3, [pc, #92]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d74:	2200      	movs	r2, #0
 8101d76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101d78:	4815      	ldr	r0, [pc, #84]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d7a:	f001 fcab 	bl	81036d4 <HAL_DMA_Init>
 8101d7e:	4603      	mov	r3, r0
 8101d80:	2b00      	cmp	r3, #0
 8101d82:	d001      	beq.n	8101d88 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101d84:	f000 fe40 	bl	8102a08 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	4a11      	ldr	r2, [pc, #68]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d8c:	639a      	str	r2, [r3, #56]	; 0x38
 8101d8e:	4a10      	ldr	r2, [pc, #64]	; (8101dd0 <HAL_I2C_MspInit+0x1ac>)
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101d94:	2200      	movs	r2, #0
 8101d96:	2100      	movs	r1, #0
 8101d98:	201f      	movs	r0, #31
 8101d9a:	f001 fc52 	bl	8103642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101d9e:	201f      	movs	r0, #31
 8101da0:	f001 fc69 	bl	8103676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101da4:	2200      	movs	r2, #0
 8101da6:	2100      	movs	r1, #0
 8101da8:	2020      	movs	r0, #32
 8101daa:	f001 fc4a 	bl	8103642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101dae:	2020      	movs	r0, #32
 8101db0:	f001 fc61 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101db4:	bf00      	nop
 8101db6:	37e0      	adds	r7, #224	; 0xe0
 8101db8:	46bd      	mov	sp, r7
 8101dba:	bd80      	pop	{r7, pc}
 8101dbc:	40005400 	.word	0x40005400
 8101dc0:	58024400 	.word	0x58024400
 8101dc4:	58020400 	.word	0x58020400
 8101dc8:	10000178 	.word	0x10000178
 8101dcc:	40020040 	.word	0x40020040
 8101dd0:	100000b4 	.word	0x100000b4
 8101dd4:	40020058 	.word	0x40020058

08101dd8 <CheckIMUSensorID>:
#include "lsm9ds1.h"
#include <stm32h7xx_hal.h>


uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8101dd8:	b580      	push	{r7, lr}
 8101dda:	b088      	sub	sp, #32
 8101ddc:	af04      	add	r7, sp, #16
 8101dde:	4603      	mov	r3, r0
 8101de0:	460a      	mov	r2, r1
 8101de2:	71fb      	strb	r3, [r7, #7]
 8101de4:	4613      	mov	r3, r2
 8101de6:	71bb      	strb	r3, [r7, #6]

//  HAL_Delay(100);
//   uint8_t result = I2CReadByte(address, reg);
//

    uint8_t value = 0x00;
 8101de8:	2300      	movs	r3, #0
 8101dea:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
//    status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,100);
 8101dec:	79fb      	ldrb	r3, [r7, #7]
 8101dee:	b29b      	uxth	r3, r3
 8101df0:	005b      	lsls	r3, r3, #1
 8101df2:	b299      	uxth	r1, r3
 8101df4:	79bb      	ldrb	r3, [r7, #6]
 8101df6:	b29a      	uxth	r2, r3
 8101df8:	2364      	movs	r3, #100	; 0x64
 8101dfa:	9302      	str	r3, [sp, #8]
 8101dfc:	2301      	movs	r3, #1
 8101dfe:	9301      	str	r3, [sp, #4]
 8101e00:	f107 030e 	add.w	r3, r7, #14
 8101e04:	9300      	str	r3, [sp, #0]
 8101e06:	2301      	movs	r3, #1
 8101e08:	4807      	ldr	r0, [pc, #28]	; (8101e28 <CheckIMUSensorID+0x50>)
 8101e0a:	f004 fe35 	bl	8106a78 <HAL_I2C_Mem_Read>
 8101e0e:	4603      	mov	r3, r0
 8101e10:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK)
 8101e12:	7bfb      	ldrb	r3, [r7, #15]
 8101e14:	2b00      	cmp	r3, #0
 8101e16:	d001      	beq.n	8101e1c <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8101e18:	2301      	movs	r3, #1
 8101e1a:	e000      	b.n	8101e1e <CheckIMUSensorID+0x46>
    }
    return value;
 8101e1c:	7bbb      	ldrb	r3, [r7, #14]
   //return result;


}
 8101e1e:	4618      	mov	r0, r3
 8101e20:	3710      	adds	r7, #16
 8101e22:	46bd      	mov	sp, r7
 8101e24:	bd80      	pop	{r7, pc}
 8101e26:	bf00      	nop
 8101e28:	1000012c 	.word	0x1000012c

08101e2c <init>:

void init(LSM9DS1Handle* imu)
{
 8101e2c:	b480      	push	{r7}
 8101e2e:	b083      	sub	sp, #12
 8101e30:	af00      	add	r7, sp, #0
 8101e32:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	2201      	movs	r2, #1
 8101e38:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	2201      	movs	r2, #1
 8101e3e:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	2201      	movs	r2, #1
 8101e44:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	2201      	movs	r2, #1
 8101e4a:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale  245, 500, 2000
  imu->gyro_settings.scale = 245;
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	22f5      	movs	r2, #245	; 0xf5
 8101e50:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	2206      	movs	r2, #6
 8101e56:	711a      	strb	r2, [r3, #4]
  // set cutoff frequency // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	2200      	movs	r2, #0
 8101e5c:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	2200      	movs	r2, #0
 8101e62:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	2200      	movs	r2, #0
 8101e68:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2200      	movs	r2, #0
 8101e6e:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	2200      	movs	r2, #0
 8101e74:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	2200      	movs	r2, #0
 8101e7a:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 8101e7c:	687b      	ldr	r3, [r7, #4]
 8101e7e:	2200      	movs	r2, #0
 8101e80:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	2200      	movs	r2, #0
 8101e86:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	2201      	movs	r2, #1
 8101e8c:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	2201      	movs	r2, #1
 8101e92:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	2201      	movs	r2, #1
 8101e98:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	2201      	movs	r2, #1
 8101e9e:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	2201      	movs	r2, #1
 8101ea4:	75da      	strb	r2, [r3, #23]

  // 2,4, 8,16
  imu->accel_settings.scale = 2;
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	2202      	movs	r2, #2
 8101eaa:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	2206      	movs	r2, #6
 8101eb0:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	22ff      	movs	r2, #255	; 0xff
 8101eb6:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	2200      	movs	r2, #0
 8101ebc:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	2200      	movs	r2, #0
 8101ec2:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	2201      	movs	r2, #1
 8101ec8:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	2204      	movs	r2, #4
 8101ece:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	2207      	movs	r2, #7
 8101ed4:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	2200      	movs	r2, #0
 8101eda:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	2203      	movs	r2, #3
 8101ee0:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	2203      	movs	r2, #3
 8101ee6:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	2200      	movs	r2, #0
 8101eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 8101ef2:	687b      	ldr	r3, [r7, #4]
 8101ef4:	2200      	movs	r2, #0
 8101ef6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  imu->temp_settings.enabled = 1;
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	2201      	movs	r2, #1
 8101efe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
 8101f02:	bf00      	nop
 8101f04:	370c      	adds	r7, #12
 8101f06:	46bd      	mov	sp, r7
 8101f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0c:	4770      	bx	lr

08101f0e <setup>:

uint16_t setup(LSM9DS1Handle* imu)
{
 8101f0e:	b580      	push	{r7, lr}
 8101f10:	b084      	sub	sp, #16
 8101f12:	af00      	add	r7, sp, #0
 8101f14:	6078      	str	r0, [r7, #4]

  // initialise the sensors
  init(imu);
 8101f16:	6878      	ldr	r0, [r7, #4]
 8101f18:	f7ff ff88 	bl	8101e2c <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8101f1c:	6878      	ldr	r0, [r7, #4]
 8101f1e:	f000 f9ea 	bl	81022f6 <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 8101f22:	6878      	ldr	r0, [r7, #4]
 8101f24:	f000 fb5e 	bl	81025e4 <calcGyroResolution>
  calcAccResoltuion(imu);
 8101f28:	6878      	ldr	r0, [r7, #4]
 8101f2a:	f000 fb89 	bl	8102640 <calcAccResoltuion>
  calcMagResolution(imu);
 8101f2e:	6878      	ldr	r0, [r7, #4]
 8101f30:	f000 fbd2 	bl	81026d8 <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check = CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 8101f34:	210f      	movs	r1, #15
 8101f36:	206b      	movs	r0, #107	; 0x6b
 8101f38:	f7ff ff4e 	bl	8101dd8 <CheckIMUSensorID>
 8101f3c:	4603      	mov	r3, r0
 8101f3e:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 8101f40:	210f      	movs	r1, #15
 8101f42:	201e      	movs	r0, #30
 8101f44:	f7ff ff48 	bl	8101dd8 <CheckIMUSensorID>
 8101f48:	4603      	mov	r3, r0
 8101f4a:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8101f4c:	7bfb      	ldrb	r3, [r7, #15]
 8101f4e:	021b      	lsls	r3, r3, #8
 8101f50:	b21a      	sxth	r2, r3
 8101f52:	7bbb      	ldrb	r3, [r7, #14]
 8101f54:	b21b      	sxth	r3, r3
 8101f56:	4313      	orrs	r3, r2
 8101f58:	b21b      	sxth	r3, r3
 8101f5a:	81bb      	strh	r3, [r7, #12]

  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 8101f5c:	89bb      	ldrh	r3, [r7, #12]
 8101f5e:	f646 023d 	movw	r2, #26685	; 0x683d
 8101f62:	4293      	cmp	r3, r2
 8101f64:	d001      	beq.n	8101f6a <setup+0x5c>
  {
          return 0;
 8101f66:	2300      	movs	r3, #0
 8101f68:	e009      	b.n	8101f7e <setup+0x70>
  }

  // initialise gyro
  initGyro(imu);
 8101f6a:	6878      	ldr	r0, [r7, #4]
 8101f6c:	f000 f80b 	bl	8101f86 <initGyro>
  // initialise accel
  initAccel(imu);
 8101f70:	6878      	ldr	r0, [r7, #4]
 8101f72:	f000 f8ad 	bl	81020d0 <initAccel>
  // init Mag
 initMag(imu);
 8101f76:	6878      	ldr	r0, [r7, #4]
 8101f78:	f000 f931 	bl	81021de <initMag>
  return imu_response;
 8101f7c:	89bb      	ldrh	r3, [r7, #12]
}
 8101f7e:	4618      	mov	r0, r3
 8101f80:	3710      	adds	r7, #16
 8101f82:	46bd      	mov	sp, r7
 8101f84:	bd80      	pop	{r7, pc}

08101f86 <initGyro>:


void initGyro(LSM9DS1Handle* imu)
{
 8101f86:	b580      	push	{r7, lr}
 8101f88:	b084      	sub	sp, #16
 8101f8a:	af00      	add	r7, sp, #0
 8101f8c:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 8101f8e:	2300      	movs	r3, #0
 8101f90:	73fb      	strb	r3, [r7, #15]
  // ONly set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	781b      	ldrb	r3, [r3, #0]
 8101f96:	2b01      	cmp	r3, #1
 8101f98:	d103      	bne.n	8101fa2 <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	791b      	ldrb	r3, [r3, #4]
 8101f9e:	015b      	lsls	r3, r3, #5
 8101fa0:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	885b      	ldrh	r3, [r3, #2]
 8101fa6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8101faa:	d003      	beq.n	8101fb4 <initGyro+0x2e>
 8101fac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8101fb0:	d005      	beq.n	8101fbe <initGyro+0x38>
 8101fb2:	e009      	b.n	8101fc8 <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 8101fb4:	7bfb      	ldrb	r3, [r7, #15]
 8101fb6:	f043 0308 	orr.w	r3, r3, #8
 8101fba:	73fb      	strb	r3, [r7, #15]
      break;
 8101fbc:	e004      	b.n	8101fc8 <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 8101fbe:	7bfb      	ldrb	r3, [r7, #15]
 8101fc0:	f043 0318 	orr.w	r3, r3, #24
 8101fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8101fc6:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	795b      	ldrb	r3, [r3, #5]
 8101fcc:	b25b      	sxtb	r3, r3
 8101fce:	f003 0303 	and.w	r3, r3, #3
 8101fd2:	b25a      	sxtb	r2, r3
 8101fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8101fd8:	4313      	orrs	r3, r2
 8101fda:	b25b      	sxtb	r3, r3
 8101fdc:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 8101fde:	7bfb      	ldrb	r3, [r7, #15]
 8101fe0:	461a      	mov	r2, r3
 8101fe2:	2110      	movs	r1, #16
 8101fe4:	206b      	movs	r0, #107	; 0x6b
 8101fe6:	f000 fbed 	bl	81027c4 <WriteByte>

   // reset tempValue
   tempRegValue = 0;
 8101fea:	2300      	movs	r3, #0
 8101fec:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 8101fee:	7bfb      	ldrb	r3, [r7, #15]
 8101ff0:	461a      	mov	r2, r3
 8101ff2:	2111      	movs	r1, #17
 8101ff4:	206b      	movs	r0, #107	; 0x6b
 8101ff6:	f000 fbe5 	bl	81027c4 <WriteByte>

   tempRegValue = 0;
 8101ffa:	2300      	movs	r3, #0
 8101ffc:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	799b      	ldrb	r3, [r3, #6]
 8102002:	2b00      	cmp	r3, #0
 8102004:	d001      	beq.n	810200a <initGyro+0x84>
 8102006:	2380      	movs	r3, #128	; 0x80
 8102008:	e000      	b.n	810200c <initGyro+0x86>
 810200a:	2300      	movs	r3, #0
 810200c:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	79db      	ldrb	r3, [r3, #7]
 8102012:	2b01      	cmp	r3, #1
 8102014:	d10a      	bne.n	810202c <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	7a1b      	ldrb	r3, [r3, #8]
 810201a:	f003 030f 	and.w	r3, r3, #15
 810201e:	b2da      	uxtb	r2, r3
 8102020:	7bfb      	ldrb	r3, [r7, #15]
 8102022:	4313      	orrs	r3, r2
 8102024:	b2db      	uxtb	r3, r3
 8102026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810202a:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 810202c:	7bfb      	ldrb	r3, [r7, #15]
 810202e:	461a      	mov	r2, r3
 8102030:	2112      	movs	r1, #18
 8102032:	206b      	movs	r0, #107	; 0x6b
 8102034:	f000 fbc6 	bl	81027c4 <WriteByte>


   tempRegValue = 0;
 8102038:	2300      	movs	r3, #0
 810203a:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	7bdb      	ldrb	r3, [r3, #15]
 8102040:	2b00      	cmp	r3, #0
 8102042:	d003      	beq.n	810204c <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 8102044:	7bfb      	ldrb	r3, [r7, #15]
 8102046:	f043 0320 	orr.w	r3, r3, #32
 810204a:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	7b9b      	ldrb	r3, [r3, #14]
 8102050:	2b00      	cmp	r3, #0
 8102052:	d003      	beq.n	810205c <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 8102054:	7bfb      	ldrb	r3, [r7, #15]
 8102056:	f043 0310 	orr.w	r3, r3, #16
 810205a:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	7b5b      	ldrb	r3, [r3, #13]
 8102060:	2b00      	cmp	r3, #0
 8102062:	d003      	beq.n	810206c <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 8102064:	7bfb      	ldrb	r3, [r7, #15]
 8102066:	f043 0308 	orr.w	r3, r3, #8
 810206a:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	7c1b      	ldrb	r3, [r3, #16]
 8102070:	2b00      	cmp	r3, #0
 8102072:	d003      	beq.n	810207c <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 8102074:	7bfb      	ldrb	r3, [r7, #15]
 8102076:	f043 0302 	orr.w	r3, r3, #2
 810207a:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 810207c:	7bfb      	ldrb	r3, [r7, #15]
 810207e:	461a      	mov	r2, r3
 8102080:	211e      	movs	r1, #30
 8102082:	206b      	movs	r0, #107	; 0x6b
 8102084:	f000 fb9e 	bl	81027c4 <WriteByte>

   tempRegValue = 0;
 8102088:	2300      	movs	r3, #0
 810208a:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	7a5b      	ldrb	r3, [r3, #9]
 8102090:	2b00      	cmp	r3, #0
 8102092:	d003      	beq.n	810209c <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 8102094:	7bfb      	ldrb	r3, [r7, #15]
 8102096:	f043 0320 	orr.w	r3, r3, #32
 810209a:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	7a9b      	ldrb	r3, [r3, #10]
 81020a0:	2b00      	cmp	r3, #0
 81020a2:	d003      	beq.n	81020ac <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 81020a4:	7bfb      	ldrb	r3, [r7, #15]
 81020a6:	f043 0310 	orr.w	r3, r3, #16
 81020aa:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	7adb      	ldrb	r3, [r3, #11]
 81020b0:	2b00      	cmp	r3, #0
 81020b2:	d003      	beq.n	81020bc <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 81020b4:	7bfb      	ldrb	r3, [r7, #15]
 81020b6:	f043 0308 	orr.w	r3, r3, #8
 81020ba:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 81020bc:	7bfb      	ldrb	r3, [r7, #15]
 81020be:	461a      	mov	r2, r3
 81020c0:	2113      	movs	r1, #19
 81020c2:	206b      	movs	r0, #107	; 0x6b
 81020c4:	f000 fb7e 	bl	81027c4 <WriteByte>
}
 81020c8:	bf00      	nop
 81020ca:	3710      	adds	r7, #16
 81020cc:	46bd      	mov	sp, r7
 81020ce:	bd80      	pop	{r7, pc}

081020d0 <initAccel>:

void initAccel(LSM9DS1Handle* imu)
{
 81020d0:	b580      	push	{r7, lr}
 81020d2:	b084      	sub	sp, #16
 81020d4:	af00      	add	r7, sp, #0
 81020d6:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 81020d8:	2300      	movs	r3, #0
 81020da:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	7ddb      	ldrb	r3, [r3, #23]
 81020e0:	2b00      	cmp	r3, #0
 81020e2:	d003      	beq.n	81020ec <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 81020e4:	7bfb      	ldrb	r3, [r7, #15]
 81020e6:	f043 0320 	orr.w	r3, r3, #32
 81020ea:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	7d9b      	ldrb	r3, [r3, #22]
 81020f0:	2b00      	cmp	r3, #0
 81020f2:	d003      	beq.n	81020fc <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 81020f4:	7bfb      	ldrb	r3, [r7, #15]
 81020f6:	f043 0310 	orr.w	r3, r3, #16
 81020fa:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	7d5b      	ldrb	r3, [r3, #21]
 8102100:	2b00      	cmp	r3, #0
 8102102:	d003      	beq.n	810210c <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 8102104:	7bfb      	ldrb	r3, [r7, #15]
 8102106:	f043 0308 	orr.w	r3, r3, #8
 810210a:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 810210c:	7bfb      	ldrb	r3, [r7, #15]
 810210e:	461a      	mov	r2, r3
 8102110:	211f      	movs	r1, #31
 8102112:	206b      	movs	r0, #107	; 0x6b
 8102114:	f000 fb56 	bl	81027c4 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 8102118:	2300      	movs	r3, #0
 810211a:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	7c9b      	ldrb	r3, [r3, #18]
 8102120:	2b00      	cmp	r3, #0
 8102122:	d008      	beq.n	8102136 <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	7d1b      	ldrb	r3, [r3, #20]
 8102128:	015b      	lsls	r3, r3, #5
 810212a:	b25a      	sxtb	r2, r3
 810212c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102130:	4313      	orrs	r3, r2
 8102132:	b25b      	sxtb	r3, r3
 8102134:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	7cdb      	ldrb	r3, [r3, #19]
 810213a:	2b10      	cmp	r3, #16
 810213c:	d010      	beq.n	8102160 <initAccel+0x90>
 810213e:	2b10      	cmp	r3, #16
 8102140:	dc13      	bgt.n	810216a <initAccel+0x9a>
 8102142:	2b04      	cmp	r3, #4
 8102144:	d002      	beq.n	810214c <initAccel+0x7c>
 8102146:	2b08      	cmp	r3, #8
 8102148:	d005      	beq.n	8102156 <initAccel+0x86>
 810214a:	e00e      	b.n	810216a <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 810214c:	7bfb      	ldrb	r3, [r7, #15]
 810214e:	f043 0310 	orr.w	r3, r3, #16
 8102152:	73fb      	strb	r3, [r7, #15]
      break;
 8102154:	e009      	b.n	810216a <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 8102156:	7bfb      	ldrb	r3, [r7, #15]
 8102158:	f043 0318 	orr.w	r3, r3, #24
 810215c:	73fb      	strb	r3, [r7, #15]
      break;
 810215e:	e004      	b.n	810216a <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 8102160:	7bfb      	ldrb	r3, [r7, #15]
 8102162:	f043 0308 	orr.w	r3, r3, #8
 8102166:	73fb      	strb	r3, [r7, #15]
      break;
 8102168:	bf00      	nop

  }

  if(imu->accel_settings.bandwidth >= 0)
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102170:	2b00      	cmp	r3, #0
 8102172:	db0e      	blt.n	8102192 <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 8102174:	7bfb      	ldrb	r3, [r7, #15]
 8102176:	f043 0304 	orr.w	r3, r3, #4
 810217a:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102182:	f003 0303 	and.w	r3, r3, #3
 8102186:	b25a      	sxtb	r2, r3
 8102188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810218c:	4313      	orrs	r3, r2
 810218e:	b25b      	sxtb	r3, r3
 8102190:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 8102192:	7bfb      	ldrb	r3, [r7, #15]
 8102194:	461a      	mov	r2, r3
 8102196:	2120      	movs	r1, #32
 8102198:	206b      	movs	r0, #107	; 0x6b
 810219a:	f000 fb13 	bl	81027c4 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 810219e:	2300      	movs	r3, #0
 81021a0:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	7e5b      	ldrb	r3, [r3, #25]
 81021a6:	2b01      	cmp	r3, #1
 81021a8:	d10f      	bne.n	81021ca <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 81021aa:	7bfb      	ldrb	r3, [r7, #15]
 81021ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81021b0:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	7e9b      	ldrb	r3, [r3, #26]
 81021b6:	015b      	lsls	r3, r3, #5
 81021b8:	b25b      	sxtb	r3, r3
 81021ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81021be:	b25a      	sxtb	r2, r3
 81021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81021c4:	4313      	orrs	r3, r2
 81021c6:	b25b      	sxtb	r3, r3
 81021c8:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 81021ca:	7bfb      	ldrb	r3, [r7, #15]
 81021cc:	461a      	mov	r2, r3
 81021ce:	2121      	movs	r1, #33	; 0x21
 81021d0:	206b      	movs	r0, #107	; 0x6b
 81021d2:	f000 faf7 	bl	81027c4 <WriteByte>
}
 81021d6:	bf00      	nop
 81021d8:	3710      	adds	r7, #16
 81021da:	46bd      	mov	sp, r7
 81021dc:	bd80      	pop	{r7, pc}

081021de <initMag>:



void initMag(LSM9DS1Handle* imu)
{
 81021de:	b580      	push	{r7, lr}
 81021e0:	b084      	sub	sp, #16
 81021e2:	af00      	add	r7, sp, #0
 81021e4:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 81021e6:	2300      	movs	r3, #0
 81021e8:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	7f9b      	ldrb	r3, [r3, #30]
 81021ee:	2b01      	cmp	r3, #1
 81021f0:	d103      	bne.n	81021fa <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 81021f2:	7bfb      	ldrb	r3, [r7, #15]
 81021f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81021f8:	73fb      	strb	r3, [r7, #15]
  }
  // Make Operative mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	7fdb      	ldrb	r3, [r3, #31]
 81021fe:	015b      	lsls	r3, r3, #5
 8102200:	b25b      	sxtb	r3, r3
 8102202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102206:	b25a      	sxtb	r2, r3
 8102208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810220c:	4313      	orrs	r3, r2
 810220e:	b25b      	sxtb	r3, r3
 8102210:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	7f5b      	ldrb	r3, [r3, #29]
 8102216:	009b      	lsls	r3, r3, #2
 8102218:	b25b      	sxtb	r3, r3
 810221a:	f003 031c 	and.w	r3, r3, #28
 810221e:	b25a      	sxtb	r2, r3
 8102220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102224:	4313      	orrs	r3, r2
 8102226:	b25b      	sxtb	r3, r3
 8102228:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 810222a:	7bfb      	ldrb	r3, [r7, #15]
 810222c:	461a      	mov	r2, r3
 810222e:	2120      	movs	r1, #32
 8102230:	201e      	movs	r0, #30
 8102232:	f000 fac7 	bl	81027c4 <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 8102236:	2300      	movs	r3, #0
 8102238:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	7f1b      	ldrb	r3, [r3, #28]
 810223e:	2b10      	cmp	r3, #16
 8102240:	d010      	beq.n	8102264 <initMag+0x86>
 8102242:	2b10      	cmp	r3, #16
 8102244:	dc13      	bgt.n	810226e <initMag+0x90>
 8102246:	2b08      	cmp	r3, #8
 8102248:	d002      	beq.n	8102250 <initMag+0x72>
 810224a:	2b0c      	cmp	r3, #12
 810224c:	d005      	beq.n	810225a <initMag+0x7c>
 810224e:	e00e      	b.n	810226e <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 8102250:	7bfb      	ldrb	r3, [r7, #15]
 8102252:	f043 0320 	orr.w	r3, r3, #32
 8102256:	73fb      	strb	r3, [r7, #15]
      break;
 8102258:	e009      	b.n	810226e <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 810225a:	7bfb      	ldrb	r3, [r7, #15]
 810225c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102260:	73fb      	strb	r3, [r7, #15]
      break;
 8102262:	e004      	b.n	810226e <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 8102264:	7bfb      	ldrb	r3, [r7, #15]
 8102266:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 810226a:	73fb      	strb	r3, [r7, #15]
      break;
 810226c:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 810226e:	7bfb      	ldrb	r3, [r7, #15]
 8102270:	461a      	mov	r2, r3
 8102272:	2121      	movs	r1, #33	; 0x21
 8102274:	201e      	movs	r0, #30
 8102276:	f000 faa5 	bl	81027c4 <WriteByte>

   tempRegValue = 0;
 810227a:	2300      	movs	r3, #0
 810227c:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8102284:	2b01      	cmp	r3, #1
 8102286:	d103      	bne.n	8102290 <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 8102288:	7bfb      	ldrb	r3, [r7, #15]
 810228a:	f043 0320 	orr.w	r3, r3, #32
 810228e:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8102296:	b25b      	sxtb	r3, r3
 8102298:	f003 0303 	and.w	r3, r3, #3
 810229c:	b25a      	sxtb	r2, r3
 810229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022a2:	4313      	orrs	r3, r2
 81022a4:	b25b      	sxtb	r3, r3
 81022a6:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 81022a8:	7bfb      	ldrb	r3, [r7, #15]
 81022aa:	461a      	mov	r2, r3
 81022ac:	2122      	movs	r1, #34	; 0x22
 81022ae:	201e      	movs	r0, #30
 81022b0:	f000 fa88 	bl	81027c4 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 81022b4:	2300      	movs	r3, #0
 81022b6:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 81022be:	009b      	lsls	r3, r3, #2
 81022c0:	b25b      	sxtb	r3, r3
 81022c2:	f003 030c 	and.w	r3, r3, #12
 81022c6:	b25a      	sxtb	r2, r3
 81022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022cc:	4313      	orrs	r3, r2
 81022ce:	b25b      	sxtb	r3, r3
 81022d0:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 81022d2:	7bfb      	ldrb	r3, [r7, #15]
 81022d4:	461a      	mov	r2, r3
 81022d6:	2123      	movs	r1, #35	; 0x23
 81022d8:	201e      	movs	r0, #30
 81022da:	f000 fa73 	bl	81027c4 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 81022de:	2300      	movs	r3, #0
 81022e0:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 81022e2:	7bfb      	ldrb	r3, [r7, #15]
 81022e4:	461a      	mov	r2, r3
 81022e6:	2124      	movs	r1, #36	; 0x24
 81022e8:	201e      	movs	r0, #30
 81022ea:	f000 fa6b 	bl	81027c4 <WriteByte>

}
 81022ee:	bf00      	nop
 81022f0:	3710      	adds	r7, #16
 81022f2:	46bd      	mov	sp, r7
 81022f4:	bd80      	pop	{r7, pc}

081022f6 <clampScales>:


void clampScales(LSM9DS1Handle* imu)
{
 81022f6:	b480      	push	{r7}
 81022f8:	b083      	sub	sp, #12
 81022fa:	af00      	add	r7, sp, #0
 81022fc:	6078      	str	r0, [r7, #4]

  // clamp gyro scales
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	885b      	ldrh	r3, [r3, #2]
 8102302:	2bf5      	cmp	r3, #245	; 0xf5
 8102304:	d00c      	beq.n	8102320 <clampScales+0x2a>
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	885b      	ldrh	r3, [r3, #2]
 810230a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 810230e:	d007      	beq.n	8102320 <clampScales+0x2a>
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	885b      	ldrh	r3, [r3, #2]
 8102314:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102318:	d002      	beq.n	8102320 <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	22f5      	movs	r2, #245	; 0xf5
 810231e:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	7cdb      	ldrb	r3, [r3, #19]
 8102324:	2b02      	cmp	r3, #2
 8102326:	d00e      	beq.n	8102346 <clampScales+0x50>
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	7cdb      	ldrb	r3, [r3, #19]
 810232c:	2b04      	cmp	r3, #4
 810232e:	d00a      	beq.n	8102346 <clampScales+0x50>
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	7cdb      	ldrb	r3, [r3, #19]
 8102334:	2b08      	cmp	r3, #8
 8102336:	d006      	beq.n	8102346 <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	7cdb      	ldrb	r3, [r3, #19]
 810233c:	2b10      	cmp	r3, #16
 810233e:	d002      	beq.n	8102346 <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	22f5      	movs	r2, #245	; 0xf5
 8102344:	74da      	strb	r2, [r3, #19]
  }


  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	7f1b      	ldrb	r3, [r3, #28]
 810234a:	2b04      	cmp	r3, #4
 810234c:	d00e      	beq.n	810236c <clampScales+0x76>
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	7f1b      	ldrb	r3, [r3, #28]
 8102352:	2b08      	cmp	r3, #8
 8102354:	d00a      	beq.n	810236c <clampScales+0x76>
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	7f1b      	ldrb	r3, [r3, #28]
 810235a:	2b0c      	cmp	r3, #12
 810235c:	d006      	beq.n	810236c <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8102362:	2b10      	cmp	r3, #16
 8102364:	d002      	beq.n	810236c <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	2204      	movs	r2, #4
 810236a:	771a      	strb	r2, [r3, #28]
  }

}
 810236c:	bf00      	nop
 810236e:	370c      	adds	r7, #12
 8102370:	46bd      	mov	sp, r7
 8102372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102376:	4770      	bx	lr

08102378 <calcGyro>:

float calcGyro(float gyro)
{
 8102378:	b480      	push	{r7}
 810237a:	b083      	sub	sp, #12
 810237c:	af00      	add	r7, sp, #0
 810237e:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 8102382:	4b07      	ldr	r3, [pc, #28]	; (81023a0 <calcGyro+0x28>)
 8102384:	ed93 7a00 	vldr	s14, [r3]
 8102388:	edd7 7a01 	vldr	s15, [r7, #4]
 810238c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102390:	eeb0 0a67 	vmov.f32	s0, s15
 8102394:	370c      	adds	r7, #12
 8102396:	46bd      	mov	sp, r7
 8102398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239c:	4770      	bx	lr
 810239e:	bf00      	nop
 81023a0:	100001f8 	.word	0x100001f8

081023a4 <calcMag>:
float calcMag(float mag)
{
 81023a4:	b480      	push	{r7}
 81023a6:	b083      	sub	sp, #12
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 81023ae:	4b07      	ldr	r3, [pc, #28]	; (81023cc <calcMag+0x28>)
 81023b0:	ed93 7a00 	vldr	s14, [r3]
 81023b4:	edd7 7a01 	vldr	s15, [r7, #4]
 81023b8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81023bc:	eeb0 0a67 	vmov.f32	s0, s15
 81023c0:	370c      	adds	r7, #12
 81023c2:	46bd      	mov	sp, r7
 81023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c8:	4770      	bx	lr
 81023ca:	bf00      	nop
 81023cc:	100001f4 	.word	0x100001f4

081023d0 <calcAccel>:
float calcAccel(float accel)
{
 81023d0:	b480      	push	{r7}
 81023d2:	b083      	sub	sp, #12
 81023d4:	af00      	add	r7, sp, #0
 81023d6:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 81023da:	4b07      	ldr	r3, [pc, #28]	; (81023f8 <calcAccel+0x28>)
 81023dc:	ed93 7a00 	vldr	s14, [r3]
 81023e0:	edd7 7a01 	vldr	s15, [r7, #4]
 81023e4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81023e8:	eeb0 0a67 	vmov.f32	s0, s15
 81023ec:	370c      	adds	r7, #12
 81023ee:	46bd      	mov	sp, r7
 81023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023f4:	4770      	bx	lr
 81023f6:	bf00      	nop
 81023f8:	100001f0 	.word	0x100001f0

081023fc <readGyro>:

void readGyro(LSM9DS1Handle* imu)
{
 81023fc:	b580      	push	{r7, lr}
 81023fe:	b086      	sub	sp, #24
 8102400:	af00      	add	r7, sp, #0
 8102402:	6078      	str	r0, [r7, #4]

  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 8102404:	f107 020c 	add.w	r2, r7, #12
 8102408:	2306      	movs	r3, #6
 810240a:	2118      	movs	r1, #24
 810240c:	206b      	movs	r0, #107	; 0x6b
 810240e:	f000 f9af 	bl	8102770 <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 8102412:	7b7b      	ldrb	r3, [r7, #13]
 8102414:	021b      	lsls	r3, r3, #8
 8102416:	b21a      	sxth	r2, r3
 8102418:	7b3b      	ldrb	r3, [r7, #12]
 810241a:	b21b      	sxth	r3, r3
 810241c:	4313      	orrs	r3, r2
 810241e:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8102420:	7bfb      	ldrb	r3, [r7, #15]
 8102422:	021b      	lsls	r3, r3, #8
 8102424:	b21a      	sxth	r2, r3
 8102426:	7bbb      	ldrb	r3, [r7, #14]
 8102428:	b21b      	sxth	r3, r3
 810242a:	4313      	orrs	r3, r2
 810242c:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 810242e:	7c7b      	ldrb	r3, [r7, #17]
 8102430:	021b      	lsls	r3, r3, #8
 8102432:	b21a      	sxth	r2, r3
 8102434:	7c3b      	ldrb	r3, [r7, #16]
 8102436:	b21b      	sxth	r3, r3
 8102438:	4313      	orrs	r3, r2
 810243a:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 810243c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102440:	ee07 3a90 	vmov	s15, r3
 8102444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102448:	eeb0 0a67 	vmov.f32	s0, s15
 810244c:	f7ff ff94 	bl	8102378 <calcGyro>
 8102450:	eef0 7a40 	vmov.f32	s15, s0
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 810245a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 810245e:	ee07 3a90 	vmov	s15, r3
 8102462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102466:	eeb0 0a67 	vmov.f32	s0, s15
 810246a:	f7ff ff85 	bl	8102378 <calcGyro>
 810246e:	eef0 7a40 	vmov.f32	s15, s0
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 8102478:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810247c:	ee07 3a90 	vmov	s15, r3
 8102480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102484:	eeb0 0a67 	vmov.f32	s0, s15
 8102488:	f7ff ff76 	bl	8102378 <calcGyro>
 810248c:	eef0 7a40 	vmov.f32	s15, s0
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8102496:	bf00      	nop
 8102498:	3718      	adds	r7, #24
 810249a:	46bd      	mov	sp, r7
 810249c:	bd80      	pop	{r7, pc}

0810249e <readMag>:
void readMag(LSM9DS1Handle* imu)
{
 810249e:	b580      	push	{r7, lr}
 81024a0:	b086      	sub	sp, #24
 81024a2:	af00      	add	r7, sp, #0
 81024a4:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 81024a6:	f107 020c 	add.w	r2, r7, #12
 81024aa:	2306      	movs	r3, #6
 81024ac:	2128      	movs	r1, #40	; 0x28
 81024ae:	201e      	movs	r0, #30
 81024b0:	f000 f95e 	bl	8102770 <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 81024b4:	7b7b      	ldrb	r3, [r7, #13]
 81024b6:	021b      	lsls	r3, r3, #8
 81024b8:	b21a      	sxth	r2, r3
 81024ba:	7b3b      	ldrb	r3, [r7, #12]
 81024bc:	b21b      	sxth	r3, r3
 81024be:	4313      	orrs	r3, r2
 81024c0:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 81024c2:	7bfb      	ldrb	r3, [r7, #15]
 81024c4:	021b      	lsls	r3, r3, #8
 81024c6:	b21a      	sxth	r2, r3
 81024c8:	7bbb      	ldrb	r3, [r7, #14]
 81024ca:	b21b      	sxth	r3, r3
 81024cc:	4313      	orrs	r3, r2
 81024ce:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 81024d0:	7c7b      	ldrb	r3, [r7, #17]
 81024d2:	021b      	lsls	r3, r3, #8
 81024d4:	b21a      	sxth	r2, r3
 81024d6:	7c3b      	ldrb	r3, [r7, #16]
 81024d8:	b21b      	sxth	r3, r3
 81024da:	4313      	orrs	r3, r2
 81024dc:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 81024de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81024e2:	ee07 3a90 	vmov	s15, r3
 81024e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81024ea:	eeb0 0a67 	vmov.f32	s0, s15
 81024ee:	f7ff ff59 	bl	81023a4 <calcMag>
 81024f2:	eef0 7a40 	vmov.f32	s15, s0
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 81024fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102500:	ee07 3a90 	vmov	s15, r3
 8102504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102508:	eeb0 0a67 	vmov.f32	s0, s15
 810250c:	f7ff ff4a 	bl	81023a4 <calcMag>
 8102510:	eef0 7a40 	vmov.f32	s15, s0
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 810251a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810251e:	ee07 3a90 	vmov	s15, r3
 8102522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102526:	eeb0 0a67 	vmov.f32	s0, s15
 810252a:	f7ff ff3b 	bl	81023a4 <calcMag>
 810252e:	eef0 7a40 	vmov.f32	s15, s0
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 8102538:	bf00      	nop
 810253a:	3718      	adds	r7, #24
 810253c:	46bd      	mov	sp, r7
 810253e:	bd80      	pop	{r7, pc}

08102540 <readAccel>:
void readAccel(LSM9DS1Handle* imu)
{
 8102540:	b580      	push	{r7, lr}
 8102542:	b086      	sub	sp, #24
 8102544:	af00      	add	r7, sp, #0
 8102546:	6078      	str	r0, [r7, #4]

  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 8102548:	f107 020c 	add.w	r2, r7, #12
 810254c:	2306      	movs	r3, #6
 810254e:	2128      	movs	r1, #40	; 0x28
 8102550:	206b      	movs	r0, #107	; 0x6b
 8102552:	f000 f90d 	bl	8102770 <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 8102556:	7b7b      	ldrb	r3, [r7, #13]
 8102558:	021b      	lsls	r3, r3, #8
 810255a:	b21a      	sxth	r2, r3
 810255c:	7b3b      	ldrb	r3, [r7, #12]
 810255e:	b21b      	sxth	r3, r3
 8102560:	4313      	orrs	r3, r2
 8102562:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8102564:	7bfb      	ldrb	r3, [r7, #15]
 8102566:	021b      	lsls	r3, r3, #8
 8102568:	b21a      	sxth	r2, r3
 810256a:	7bbb      	ldrb	r3, [r7, #14]
 810256c:	b21b      	sxth	r3, r3
 810256e:	4313      	orrs	r3, r2
 8102570:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8102572:	7c7b      	ldrb	r3, [r7, #17]
 8102574:	021b      	lsls	r3, r3, #8
 8102576:	b21a      	sxth	r2, r3
 8102578:	7c3b      	ldrb	r3, [r7, #16]
 810257a:	b21b      	sxth	r3, r3
 810257c:	4313      	orrs	r3, r2
 810257e:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 8102580:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102584:	ee07 3a90 	vmov	s15, r3
 8102588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810258c:	eeb0 0a67 	vmov.f32	s0, s15
 8102590:	f7ff ff1e 	bl	81023d0 <calcAccel>
 8102594:	eef0 7a40 	vmov.f32	s15, s0
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 810259e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81025a2:	ee07 3a90 	vmov	s15, r3
 81025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025aa:	eeb0 0a67 	vmov.f32	s0, s15
 81025ae:	f7ff ff0f 	bl	81023d0 <calcAccel>
 81025b2:	eef0 7a40 	vmov.f32	s15, s0
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 81025bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81025c0:	ee07 3a90 	vmov	s15, r3
 81025c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025c8:	eeb0 0a67 	vmov.f32	s0, s15
 81025cc:	f7ff ff00 	bl	81023d0 <calcAccel>
 81025d0:	eef0 7a40 	vmov.f32	s15, s0
 81025d4:	687b      	ldr	r3, [r7, #4]
 81025d6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

}
 81025da:	bf00      	nop
 81025dc:	3718      	adds	r7, #24
 81025de:	46bd      	mov	sp, r7
 81025e0:	bd80      	pop	{r7, pc}
	...

081025e4 <calcGyroResolution>:
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG9, temp);
}


void calcGyroResolution(LSM9DS1Handle* imu)
{
 81025e4:	b480      	push	{r7}
 81025e6:	b083      	sub	sp, #12
 81025e8:	af00      	add	r7, sp, #0
 81025ea:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	885b      	ldrh	r3, [r3, #2]
 81025f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81025f4:	d010      	beq.n	8102618 <calcGyroResolution+0x34>
 81025f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81025fa:	dc11      	bgt.n	8102620 <calcGyroResolution+0x3c>
 81025fc:	2bf5      	cmp	r3, #245	; 0xf5
 81025fe:	d003      	beq.n	8102608 <calcGyroResolution+0x24>
 8102600:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102604:	d004      	beq.n	8102610 <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 8102606:	e00b      	b.n	8102620 <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 8102608:	4b09      	ldr	r3, [pc, #36]	; (8102630 <calcGyroResolution+0x4c>)
 810260a:	4a0a      	ldr	r2, [pc, #40]	; (8102634 <calcGyroResolution+0x50>)
 810260c:	601a      	str	r2, [r3, #0]
      break;
 810260e:	e008      	b.n	8102622 <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 8102610:	4b07      	ldr	r3, [pc, #28]	; (8102630 <calcGyroResolution+0x4c>)
 8102612:	4a09      	ldr	r2, [pc, #36]	; (8102638 <calcGyroResolution+0x54>)
 8102614:	601a      	str	r2, [r3, #0]
      break;
 8102616:	e004      	b.n	8102622 <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 8102618:	4b05      	ldr	r3, [pc, #20]	; (8102630 <calcGyroResolution+0x4c>)
 810261a:	4a08      	ldr	r2, [pc, #32]	; (810263c <calcGyroResolution+0x58>)
 810261c:	601a      	str	r2, [r3, #0]
      break;
 810261e:	e000      	b.n	8102622 <calcGyroResolution+0x3e>
      break;
 8102620:	bf00      	nop
  }
}
 8102622:	bf00      	nop
 8102624:	370c      	adds	r7, #12
 8102626:	46bd      	mov	sp, r7
 8102628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810262c:	4770      	bx	lr
 810262e:	bf00      	nop
 8102630:	100001f8 	.word	0x100001f8
 8102634:	3c0f5c29 	.word	0x3c0f5c29
 8102638:	3c8f5c29 	.word	0x3c8f5c29
 810263c:	3d8f5c29 	.word	0x3d8f5c29

08102640 <calcAccResoltuion>:

void calcAccResoltuion(LSM9DS1Handle* imu)
{
 8102640:	b480      	push	{r7}
 8102642:	b083      	sub	sp, #12
 8102644:	af00      	add	r7, sp, #0
 8102646:	6078      	str	r0, [r7, #4]

  switch(imu->accel_settings.scale)
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	7cdb      	ldrb	r3, [r3, #19]
 810264c:	3b02      	subs	r3, #2
 810264e:	2b0e      	cmp	r3, #14
 8102650:	d830      	bhi.n	81026b4 <calcAccResoltuion+0x74>
 8102652:	a201      	add	r2, pc, #4	; (adr r2, 8102658 <calcAccResoltuion+0x18>)
 8102654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102658:	08102695 	.word	0x08102695
 810265c:	081026b5 	.word	0x081026b5
 8102660:	0810269d 	.word	0x0810269d
 8102664:	081026b5 	.word	0x081026b5
 8102668:	081026b5 	.word	0x081026b5
 810266c:	081026b5 	.word	0x081026b5
 8102670:	081026a5 	.word	0x081026a5
 8102674:	081026b5 	.word	0x081026b5
 8102678:	081026b5 	.word	0x081026b5
 810267c:	081026b5 	.word	0x081026b5
 8102680:	081026b5 	.word	0x081026b5
 8102684:	081026b5 	.word	0x081026b5
 8102688:	081026b5 	.word	0x081026b5
 810268c:	081026b5 	.word	0x081026b5
 8102690:	081026ad 	.word	0x081026ad
  {
    case 2:
      acc_res = ACC_FS_2G;
 8102694:	4b0b      	ldr	r3, [pc, #44]	; (81026c4 <calcAccResoltuion+0x84>)
 8102696:	4a0c      	ldr	r2, [pc, #48]	; (81026c8 <calcAccResoltuion+0x88>)
 8102698:	601a      	str	r2, [r3, #0]
    break;
 810269a:	e00c      	b.n	81026b6 <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 810269c:	4b09      	ldr	r3, [pc, #36]	; (81026c4 <calcAccResoltuion+0x84>)
 810269e:	4a0b      	ldr	r2, [pc, #44]	; (81026cc <calcAccResoltuion+0x8c>)
 81026a0:	601a      	str	r2, [r3, #0]
     break;
 81026a2:	e008      	b.n	81026b6 <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 81026a4:	4b07      	ldr	r3, [pc, #28]	; (81026c4 <calcAccResoltuion+0x84>)
 81026a6:	4a0a      	ldr	r2, [pc, #40]	; (81026d0 <calcAccResoltuion+0x90>)
 81026a8:	601a      	str	r2, [r3, #0]
      break;
 81026aa:	e004      	b.n	81026b6 <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 81026ac:	4b05      	ldr	r3, [pc, #20]	; (81026c4 <calcAccResoltuion+0x84>)
 81026ae:	4a09      	ldr	r2, [pc, #36]	; (81026d4 <calcAccResoltuion+0x94>)
 81026b0:	601a      	str	r2, [r3, #0]
      break;
 81026b2:	e000      	b.n	81026b6 <calcAccResoltuion+0x76>

    default:
      break;
 81026b4:	bf00      	nop

  }

}
 81026b6:	bf00      	nop
 81026b8:	370c      	adds	r7, #12
 81026ba:	46bd      	mov	sp, r7
 81026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026c0:	4770      	bx	lr
 81026c2:	bf00      	nop
 81026c4:	100001f0 	.word	0x100001f0
 81026c8:	387fda40 	.word	0x387fda40
 81026cc:	38ffda40 	.word	0x38ffda40
 81026d0:	397fda40 	.word	0x397fda40
 81026d4:	3a3fe3b0 	.word	0x3a3fe3b0

081026d8 <calcMagResolution>:
void calcMagResolution(LSM9DS1Handle* imu)
{
 81026d8:	b480      	push	{r7}
 81026da:	b083      	sub	sp, #12
 81026dc:	af00      	add	r7, sp, #0
 81026de:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	7f1b      	ldrb	r3, [r3, #28]
 81026e4:	3b02      	subs	r3, #2
 81026e6:	2b0e      	cmp	r3, #14
 81026e8:	d830      	bhi.n	810274c <calcMagResolution+0x74>
 81026ea:	a201      	add	r2, pc, #4	; (adr r2, 81026f0 <calcMagResolution+0x18>)
 81026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81026f0:	0810272d 	.word	0x0810272d
 81026f4:	0810274d 	.word	0x0810274d
 81026f8:	08102735 	.word	0x08102735
 81026fc:	0810274d 	.word	0x0810274d
 8102700:	0810274d 	.word	0x0810274d
 8102704:	0810274d 	.word	0x0810274d
 8102708:	0810273d 	.word	0x0810273d
 810270c:	0810274d 	.word	0x0810274d
 8102710:	0810274d 	.word	0x0810274d
 8102714:	0810274d 	.word	0x0810274d
 8102718:	0810274d 	.word	0x0810274d
 810271c:	0810274d 	.word	0x0810274d
 8102720:	0810274d 	.word	0x0810274d
 8102724:	0810274d 	.word	0x0810274d
 8102728:	08102745 	.word	0x08102745
  {
    case 2:
      mag_res = MAG_FS_4G;
 810272c:	4b0b      	ldr	r3, [pc, #44]	; (810275c <calcMagResolution+0x84>)
 810272e:	4a0c      	ldr	r2, [pc, #48]	; (8102760 <calcMagResolution+0x88>)
 8102730:	601a      	str	r2, [r3, #0]
    break;
 8102732:	e00c      	b.n	810274e <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 8102734:	4b09      	ldr	r3, [pc, #36]	; (810275c <calcMagResolution+0x84>)
 8102736:	4a0b      	ldr	r2, [pc, #44]	; (8102764 <calcMagResolution+0x8c>)
 8102738:	601a      	str	r2, [r3, #0]
     break;
 810273a:	e008      	b.n	810274e <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 810273c:	4b07      	ldr	r3, [pc, #28]	; (810275c <calcMagResolution+0x84>)
 810273e:	4a0a      	ldr	r2, [pc, #40]	; (8102768 <calcMagResolution+0x90>)
 8102740:	601a      	str	r2, [r3, #0]
      break;
 8102742:	e004      	b.n	810274e <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 8102744:	4b05      	ldr	r3, [pc, #20]	; (810275c <calcMagResolution+0x84>)
 8102746:	4a09      	ldr	r2, [pc, #36]	; (810276c <calcMagResolution+0x94>)
 8102748:	601a      	str	r2, [r3, #0]
      break;
 810274a:	e000      	b.n	810274e <calcMagResolution+0x76>

    default:
      break;
 810274c:	bf00      	nop

  }

}
 810274e:	bf00      	nop
 8102750:	370c      	adds	r7, #12
 8102752:	46bd      	mov	sp, r7
 8102754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102758:	4770      	bx	lr
 810275a:	bf00      	nop
 810275c:	100001f4 	.word	0x100001f4
 8102760:	3912ccf7 	.word	0x3912ccf7
 8102764:	39980b24 	.word	0x39980b24
 8102768:	39e1719f 	.word	0x39e1719f
 810276c:	3a180b24 	.word	0x3a180b24

08102770 <I2CReadBytes>:
   }
   return value;
}

uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8102770:	b580      	push	{r7, lr}
 8102772:	b088      	sub	sp, #32
 8102774:	af04      	add	r7, sp, #16
 8102776:	603a      	str	r2, [r7, #0]
 8102778:	461a      	mov	r2, r3
 810277a:	4603      	mov	r3, r0
 810277c:	71fb      	strb	r3, [r7, #7]
 810277e:	460b      	mov	r3, r1
 8102780:	71bb      	strb	r3, [r7, #6]
 8102782:	4613      	mov	r3, r2
 8102784:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;

  //status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 8102786:	79fb      	ldrb	r3, [r7, #7]
 8102788:	b29b      	uxth	r3, r3
 810278a:	005b      	lsls	r3, r3, #1
 810278c:	b299      	uxth	r1, r3
 810278e:	79bb      	ldrb	r3, [r7, #6]
 8102790:	b29a      	uxth	r2, r3
 8102792:	797b      	ldrb	r3, [r7, #5]
 8102794:	b29b      	uxth	r3, r3
 8102796:	2064      	movs	r0, #100	; 0x64
 8102798:	9002      	str	r0, [sp, #8]
 810279a:	9301      	str	r3, [sp, #4]
 810279c:	683b      	ldr	r3, [r7, #0]
 810279e:	9300      	str	r3, [sp, #0]
 81027a0:	2301      	movs	r3, #1
 81027a2:	4807      	ldr	r0, [pc, #28]	; (81027c0 <I2CReadBytes+0x50>)
 81027a4:	f004 f968 	bl	8106a78 <HAL_I2C_Mem_Read>
 81027a8:	4603      	mov	r3, r0
 81027aa:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81027ac:	7bfb      	ldrb	r3, [r7, #15]
 81027ae:	2b00      	cmp	r3, #0
 81027b0:	d001      	beq.n	81027b6 <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 81027b2:	2301      	movs	r3, #1
 81027b4:	e000      	b.n	81027b8 <I2CReadBytes+0x48>
  }

  return numBytes;
 81027b6:	797b      	ldrb	r3, [r7, #5]

}
 81027b8:	4618      	mov	r0, r3
 81027ba:	3710      	adds	r7, #16
 81027bc:	46bd      	mov	sp, r7
 81027be:	bd80      	pop	{r7, pc}
 81027c0:	1000012c 	.word	0x1000012c

081027c4 <WriteByte>:

HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 81027c4:	b580      	push	{r7, lr}
 81027c6:	b088      	sub	sp, #32
 81027c8:	af04      	add	r7, sp, #16
 81027ca:	4603      	mov	r3, r0
 81027cc:	71fb      	strb	r3, [r7, #7]
 81027ce:	460b      	mov	r3, r1
 81027d0:	71bb      	strb	r3, [r7, #6]
 81027d2:	4613      	mov	r3, r2
 81027d4:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status;

//  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 81027d6:	79fb      	ldrb	r3, [r7, #7]
 81027d8:	b29b      	uxth	r3, r3
 81027da:	005b      	lsls	r3, r3, #1
 81027dc:	b299      	uxth	r1, r3
 81027de:	79bb      	ldrb	r3, [r7, #6]
 81027e0:	b29a      	uxth	r2, r3
 81027e2:	2364      	movs	r3, #100	; 0x64
 81027e4:	9302      	str	r3, [sp, #8]
 81027e6:	2301      	movs	r3, #1
 81027e8:	9301      	str	r3, [sp, #4]
 81027ea:	1d7b      	adds	r3, r7, #5
 81027ec:	9300      	str	r3, [sp, #0]
 81027ee:	2301      	movs	r3, #1
 81027f0:	4807      	ldr	r0, [pc, #28]	; (8102810 <WriteByte+0x4c>)
 81027f2:	f004 f82d 	bl	8106850 <HAL_I2C_Mem_Write>
 81027f6:	4603      	mov	r3, r0
 81027f8:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81027fa:	7bfb      	ldrb	r3, [r7, #15]
 81027fc:	2b00      	cmp	r3, #0
 81027fe:	d001      	beq.n	8102804 <WriteByte+0x40>
  {
    return HAL_ERROR;
 8102800:	2301      	movs	r3, #1
 8102802:	e000      	b.n	8102806 <WriteByte+0x42>
  }

  return HAL_OK;
 8102804:	2300      	movs	r3, #0

}
 8102806:	4618      	mov	r0, r3
 8102808:	3710      	adds	r7, #16
 810280a:	46bd      	mov	sp, r7
 810280c:	bd80      	pop	{r7, pc}
 810280e:	bf00      	nop
 8102810:	1000012c 	.word	0x1000012c

08102814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102814:	b580      	push	{r7, lr}
 8102816:	b082      	sub	sp, #8
 8102818:	af00      	add	r7, sp, #0
  /* MPU Configuration--------------------------------------------------------*/
//  MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810281a:	4b21      	ldr	r3, [pc, #132]	; (81028a0 <main+0x8c>)
 810281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102820:	4a1f      	ldr	r2, [pc, #124]	; (81028a0 <main+0x8c>)
 8102822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810282a:	4b1d      	ldr	r3, [pc, #116]	; (81028a0 <main+0x8c>)
 810282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102834:	607b      	str	r3, [r7, #4]
 8102836:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102838:	2001      	movs	r0, #1
 810283a:	f003 ff67 	bl	810670c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810283e:	f005 fbc5 	bl	8107fcc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8102842:	2201      	movs	r2, #1
 8102844:	2102      	movs	r1, #2
 8102846:	2000      	movs	r0, #0
 8102848:	f005 fb46 	bl	8107ed8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810284c:	4b15      	ldr	r3, [pc, #84]	; (81028a4 <main+0x90>)
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	091b      	lsrs	r3, r3, #4
 8102852:	f003 030f 	and.w	r3, r3, #15
 8102856:	2b07      	cmp	r3, #7
 8102858:	d108      	bne.n	810286c <main+0x58>
 810285a:	4b13      	ldr	r3, [pc, #76]	; (81028a8 <main+0x94>)
 810285c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8102860:	4a11      	ldr	r2, [pc, #68]	; (81028a8 <main+0x94>)
 8102862:	f043 0301 	orr.w	r3, r3, #1
 8102866:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810286a:	e007      	b.n	810287c <main+0x68>
 810286c:	4b0e      	ldr	r3, [pc, #56]	; (81028a8 <main+0x94>)
 810286e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8102872:	4a0d      	ldr	r2, [pc, #52]	; (81028a8 <main+0x94>)
 8102874:	f043 0301 	orr.w	r3, r3, #1
 8102878:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810287c:	f000 fd2e 	bl	81032dc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102880:	f7ff f93c 	bl	8101afc <MX_GPIO_Init>
  MX_DMA_Init();
 8102884:	f7ff f8e2 	bl	8101a4c <MX_DMA_Init>
  MX_SPI1_Init();
 8102888:	f000 f8c4 	bl	8102a14 <MX_SPI1_Init>
  MX_I2C1_Init();
 810288c:	f7ff f98a 	bl	8101ba4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8102890:	f000 fbdc 	bl	810304c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
   ConfigSensors();
 8102894:	f000 f884 	bl	81029a0 <ConfigSensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ReadSensors();
 8102898:	f000 f876 	bl	8102988 <ReadSensors>
 810289c:	e7fc      	b.n	8102898 <main+0x84>
 810289e:	bf00      	nop
 81028a0:	58024400 	.word	0x58024400
 81028a4:	e000ed00 	.word	0xe000ed00
 81028a8:	58026400 	.word	0x58026400

081028ac <AccelTask>:
     gps_timer += GPS_SAMPLE_TIME;
  }

}
void AccelTask(void)
{
 81028ac:	b580      	push	{r7, lr}
 81028ae:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - accel_timer >= IMU_SAMPLE_TIME)
 81028b0:	f000 fdbc 	bl	810342c <HAL_GetTick>
 81028b4:	4602      	mov	r2, r0
 81028b6:	4b08      	ldr	r3, [pc, #32]	; (81028d8 <AccelTask+0x2c>)
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	1ad3      	subs	r3, r2, r3
 81028bc:	2201      	movs	r2, #1
 81028be:	4293      	cmp	r3, r2
 81028c0:	d308      	bcc.n	81028d4 <AccelTask+0x28>
  {
    readAccel(&imu);
 81028c2:	4806      	ldr	r0, [pc, #24]	; (81028dc <AccelTask+0x30>)
 81028c4:	f7ff fe3c 	bl	8102540 <readAccel>

    accel_timer+=IMU_SAMPLE_TIME;
 81028c8:	4b03      	ldr	r3, [pc, #12]	; (81028d8 <AccelTask+0x2c>)
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	2201      	movs	r2, #1
 81028ce:	4413      	add	r3, r2
 81028d0:	4a01      	ldr	r2, [pc, #4]	; (81028d8 <AccelTask+0x2c>)
 81028d2:	6013      	str	r3, [r2, #0]

  }

}
 81028d4:	bf00      	nop
 81028d6:	bd80      	pop	{r7, pc}
 81028d8:	10000094 	.word	0x10000094
 81028dc:	10000278 	.word	0x10000278

081028e0 <GyroTask>:
void GyroTask(void)
{
 81028e0:	b580      	push	{r7, lr}
 81028e2:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - gyro_timer >= IMU_SAMPLE_TIME)
 81028e4:	f000 fda2 	bl	810342c <HAL_GetTick>
 81028e8:	4602      	mov	r2, r0
 81028ea:	4b08      	ldr	r3, [pc, #32]	; (810290c <GyroTask+0x2c>)
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	1ad3      	subs	r3, r2, r3
 81028f0:	2201      	movs	r2, #1
 81028f2:	4293      	cmp	r3, r2
 81028f4:	d308      	bcc.n	8102908 <GyroTask+0x28>
  {
    readGyro(&imu);
 81028f6:	4806      	ldr	r0, [pc, #24]	; (8102910 <GyroTask+0x30>)
 81028f8:	f7ff fd80 	bl	81023fc <readGyro>

    gyro_timer+=IMU_SAMPLE_TIME;
 81028fc:	4b03      	ldr	r3, [pc, #12]	; (810290c <GyroTask+0x2c>)
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	2201      	movs	r2, #1
 8102902:	4413      	add	r3, r2
 8102904:	4a01      	ldr	r2, [pc, #4]	; (810290c <GyroTask+0x2c>)
 8102906:	6013      	str	r3, [r2, #0]

  }

}
 8102908:	bf00      	nop
 810290a:	bd80      	pop	{r7, pc}
 810290c:	10000098 	.word	0x10000098
 8102910:	10000278 	.word	0x10000278

08102914 <MagTask>:
void MagTask(void)
{
 8102914:	b580      	push	{r7, lr}
 8102916:	af00      	add	r7, sp, #0

  if(HAL_GetTick() - mag_timer >= MAG_SAMPLE_TIME)
 8102918:	f000 fd88 	bl	810342c <HAL_GetTick>
 810291c:	4602      	mov	r2, r0
 810291e:	4b08      	ldr	r3, [pc, #32]	; (8102940 <MagTask+0x2c>)
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	1ad3      	subs	r3, r2, r3
 8102924:	220d      	movs	r2, #13
 8102926:	4293      	cmp	r3, r2
 8102928:	d308      	bcc.n	810293c <MagTask+0x28>
  {
    readMag(&imu);
 810292a:	4806      	ldr	r0, [pc, #24]	; (8102944 <MagTask+0x30>)
 810292c:	f7ff fdb7 	bl	810249e <readMag>

    mag_timer+=MAG_SAMPLE_TIME;
 8102930:	4b03      	ldr	r3, [pc, #12]	; (8102940 <MagTask+0x2c>)
 8102932:	681b      	ldr	r3, [r3, #0]
 8102934:	220d      	movs	r2, #13
 8102936:	4413      	add	r3, r2
 8102938:	4a01      	ldr	r2, [pc, #4]	; (8102940 <MagTask+0x2c>)
 810293a:	6013      	str	r3, [r2, #0]

  }

}
 810293c:	bf00      	nop
 810293e:	bd80      	pop	{r7, pc}
 8102940:	1000009c 	.word	0x1000009c
 8102944:	10000278 	.word	0x10000278

08102948 <BaroTask>:

void BaroTask(void)
{
 8102948:	b580      	push	{r7, lr}
 810294a:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - baro_timer >= BARO_SAMPLE_TIME)
 810294c:	f000 fd6e 	bl	810342c <HAL_GetTick>
 8102950:	4602      	mov	r2, r0
 8102952:	4b0b      	ldr	r3, [pc, #44]	; (8102980 <BaroTask+0x38>)
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	1ad3      	subs	r3, r2, r3
 8102958:	2226      	movs	r2, #38	; 0x26
 810295a:	4293      	cmp	r3, r2
 810295c:	d30e      	bcc.n	810297c <BaroTask+0x34>
  {

    ReadTemp(&baro);
 810295e:	4809      	ldr	r0, [pc, #36]	; (8102984 <BaroTask+0x3c>)
 8102960:	f7fe fd0c 	bl	810137c <ReadTemp>
    ReadPressure(&baro);
 8102964:	4807      	ldr	r0, [pc, #28]	; (8102984 <BaroTask+0x3c>)
 8102966:	f7fe fd59 	bl	810141c <ReadPressure>
    ReadAltitude(&baro);
 810296a:	4806      	ldr	r0, [pc, #24]	; (8102984 <BaroTask+0x3c>)
 810296c:	f7fe ff38 	bl	81017e0 <ReadAltitude>
    baro_timer+=BARO_SAMPLE_TIME;
 8102970:	4b03      	ldr	r3, [pc, #12]	; (8102980 <BaroTask+0x38>)
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	2226      	movs	r2, #38	; 0x26
 8102976:	4413      	add	r3, r2
 8102978:	4a01      	ldr	r2, [pc, #4]	; (8102980 <BaroTask+0x38>)
 810297a:	6013      	str	r3, [r2, #0]

  }


}
 810297c:	bf00      	nop
 810297e:	bd80      	pop	{r7, pc}
 8102980:	100000a0 	.word	0x100000a0
 8102984:	100002c0 	.word	0x100002c0

08102988 <ReadSensors>:
void ReadSensors(void)
{
 8102988:	b580      	push	{r7, lr}
 810298a:	af00      	add	r7, sp, #0
  //GpsTask();

  AccelTask();
 810298c:	f7ff ff8e 	bl	81028ac <AccelTask>

  GyroTask();
 8102990:	f7ff ffa6 	bl	81028e0 <GyroTask>

  MagTask();
 8102994:	f7ff ffbe 	bl	8102914 <MagTask>

  BaroTask();
 8102998:	f7ff ffd6 	bl	8102948 <BaroTask>

}
 810299c:	bf00      	nop
 810299e:	bd80      	pop	{r7, pc}

081029a0 <ConfigSensors>:




void ConfigSensors(void)
{
 81029a0:	b580      	push	{r7, lr}
 81029a2:	b082      	sub	sp, #8
 81029a4:	af00      	add	r7, sp, #0

  // COnfigure GPS Sensor
  ConfigGPS();
 81029a6:	f000 fa33 	bl	8102e10 <ConfigGPS>

  // Configure BMP280
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81029aa:	2201      	movs	r2, #1
 81029ac:	2110      	movs	r1, #16
 81029ae:	4813      	ldr	r0, [pc, #76]	; (81029fc <ConfigSensors+0x5c>)
 81029b0:	f003 fe92 	bl	81066d8 <HAL_GPIO_WritePin>
  uint8_t baro_res = CheckBMP280ChipID();
 81029b4:	f7fe fc42 	bl	810123c <CheckBMP280ChipID>
 81029b8:	4603      	mov	r3, r0
 81029ba:	71fb      	strb	r3, [r7, #7]
  if(baro_res == HAL_OK)
 81029bc:	79fb      	ldrb	r3, [r7, #7]
 81029be:	2b00      	cmp	r3, #0
 81029c0:	d10f      	bne.n	81029e2 <ConfigSensors+0x42>
  {
    uint8_t reset_chip_ok = ResetBMP280();
 81029c2:	f7ff f81d 	bl	8101a00 <ResetBMP280>
 81029c6:	4603      	mov	r3, r0
 81029c8:	71bb      	strb	r3, [r7, #6]
    HAL_Delay(1000);
 81029ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81029ce:	f000 fd39 	bl	8103444 <HAL_Delay>
    uint8_t set_config_ok = setConfig(&baro);
 81029d2:	480b      	ldr	r0, [pc, #44]	; (8102a00 <ConfigSensors+0x60>)
 81029d4:	f7fe ffc0 	bl	8101958 <setConfig>
 81029d8:	4603      	mov	r3, r0
 81029da:	717b      	strb	r3, [r7, #5]
    ReadCalibCoefficients(&baro);
 81029dc:	4808      	ldr	r0, [pc, #32]	; (8102a00 <ConfigSensors+0x60>)
 81029de:	f7fe ff5f 	bl	81018a0 <ReadCalibCoefficients>
  }

  HAL_Delay(1000);
 81029e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81029e6:	f000 fd2d 	bl	8103444 <HAL_Delay>

  // Configure IMU;
  uint16_t imu_res = setup(&imu);
 81029ea:	4806      	ldr	r0, [pc, #24]	; (8102a04 <ConfigSensors+0x64>)
 81029ec:	f7ff fa8f 	bl	8101f0e <setup>
 81029f0:	4603      	mov	r3, r0
 81029f2:	807b      	strh	r3, [r7, #2]


}
 81029f4:	bf00      	nop
 81029f6:	3708      	adds	r7, #8
 81029f8:	46bd      	mov	sp, r7
 81029fa:	bd80      	pop	{r7, pc}
 81029fc:	58020000 	.word	0x58020000
 8102a00:	100002c0 	.word	0x100002c0
 8102a04:	10000278 	.word	0x10000278

08102a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102a08:	b480      	push	{r7}
 8102a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102a0c:	b672      	cpsid	i
}
 8102a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102a10:	e7fe      	b.n	8102a10 <Error_Handler+0x8>
	...

08102a14 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102a14:	b580      	push	{r7, lr}
 8102a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102a18:	4b27      	ldr	r3, [pc, #156]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a1a:	4a28      	ldr	r2, [pc, #160]	; (8102abc <MX_SPI1_Init+0xa8>)
 8102a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102a1e:	4b26      	ldr	r3, [pc, #152]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102a26:	4b24      	ldr	r3, [pc, #144]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a28:	2200      	movs	r2, #0
 8102a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102a2c:	4b22      	ldr	r3, [pc, #136]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a2e:	2207      	movs	r2, #7
 8102a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102a32:	4b21      	ldr	r3, [pc, #132]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a34:	2200      	movs	r2, #0
 8102a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102a38:	4b1f      	ldr	r3, [pc, #124]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a3a:	2200      	movs	r2, #0
 8102a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102a3e:	4b1e      	ldr	r3, [pc, #120]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102a46:	4b1c      	ldr	r3, [pc, #112]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a48:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102a4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102a4e:	4b1a      	ldr	r3, [pc, #104]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a50:	2200      	movs	r2, #0
 8102a52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102a54:	4b18      	ldr	r3, [pc, #96]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a56:	2200      	movs	r2, #0
 8102a58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102a5a:	4b17      	ldr	r3, [pc, #92]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a5c:	2200      	movs	r2, #0
 8102a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102a60:	4b15      	ldr	r3, [pc, #84]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a62:	2200      	movs	r2, #0
 8102a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102a66:	4b14      	ldr	r3, [pc, #80]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102a6c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102a6e:	4b12      	ldr	r3, [pc, #72]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a70:	2200      	movs	r2, #0
 8102a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102a74:	4b10      	ldr	r3, [pc, #64]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a76:	2200      	movs	r2, #0
 8102a78:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102a7a:	4b0f      	ldr	r3, [pc, #60]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a7c:	2200      	movs	r2, #0
 8102a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102a80:	4b0d      	ldr	r3, [pc, #52]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a82:	2200      	movs	r2, #0
 8102a84:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102a86:	4b0c      	ldr	r3, [pc, #48]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a88:	2200      	movs	r2, #0
 8102a8a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102a8c:	4b0a      	ldr	r3, [pc, #40]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a8e:	2200      	movs	r2, #0
 8102a90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102a92:	4b09      	ldr	r3, [pc, #36]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a94:	2200      	movs	r2, #0
 8102a96:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102a98:	4b07      	ldr	r3, [pc, #28]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102a9a:	2200      	movs	r2, #0
 8102a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102a9e:	4b06      	ldr	r3, [pc, #24]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102aa0:	2200      	movs	r2, #0
 8102aa2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102aa4:	4804      	ldr	r0, [pc, #16]	; (8102ab8 <MX_SPI1_Init+0xa4>)
 8102aa6:	f006 ffd9 	bl	8109a5c <HAL_SPI_Init>
 8102aaa:	4603      	mov	r3, r0
 8102aac:	2b00      	cmp	r3, #0
 8102aae:	d001      	beq.n	8102ab4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102ab0:	f7ff ffaa 	bl	8102a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102ab4:	bf00      	nop
 8102ab6:	bd80      	pop	{r7, pc}
 8102ab8:	100002f0 	.word	0x100002f0
 8102abc:	40013000 	.word	0x40013000

08102ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102ac0:	b580      	push	{r7, lr}
 8102ac2:	b0b8      	sub	sp, #224	; 0xe0
 8102ac4:	af00      	add	r7, sp, #0
 8102ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102acc:	2200      	movs	r2, #0
 8102ace:	601a      	str	r2, [r3, #0]
 8102ad0:	605a      	str	r2, [r3, #4]
 8102ad2:	609a      	str	r2, [r3, #8]
 8102ad4:	60da      	str	r2, [r3, #12]
 8102ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102ad8:	f107 0310 	add.w	r3, r7, #16
 8102adc:	22bc      	movs	r2, #188	; 0xbc
 8102ade:	2100      	movs	r1, #0
 8102ae0:	4618      	mov	r0, r3
 8102ae2:	f009 fbd3 	bl	810c28c <memset>
  if(spiHandle->Instance==SPI1)
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4a57      	ldr	r2, [pc, #348]	; (8102c48 <HAL_SPI_MspInit+0x188>)
 8102aec:	4293      	cmp	r3, r2
 8102aee:	f040 80a6 	bne.w	8102c3e <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102af6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102af8:	2300      	movs	r3, #0
 8102afa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102afc:	f107 0310 	add.w	r3, r7, #16
 8102b00:	4618      	mov	r0, r3
 8102b02:	f005 fc49 	bl	8108398 <HAL_RCCEx_PeriphCLKConfig>
 8102b06:	4603      	mov	r3, r0
 8102b08:	2b00      	cmp	r3, #0
 8102b0a:	d001      	beq.n	8102b10 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8102b0c:	f7ff ff7c 	bl	8102a08 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102b10:	4b4e      	ldr	r3, [pc, #312]	; (8102c4c <HAL_SPI_MspInit+0x18c>)
 8102b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102b16:	4a4d      	ldr	r2, [pc, #308]	; (8102c4c <HAL_SPI_MspInit+0x18c>)
 8102b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102b1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102b20:	4b4a      	ldr	r3, [pc, #296]	; (8102c4c <HAL_SPI_MspInit+0x18c>)
 8102b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102b2a:	60fb      	str	r3, [r7, #12]
 8102b2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102b2e:	4b47      	ldr	r3, [pc, #284]	; (8102c4c <HAL_SPI_MspInit+0x18c>)
 8102b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b34:	4a45      	ldr	r2, [pc, #276]	; (8102c4c <HAL_SPI_MspInit+0x18c>)
 8102b36:	f043 0301 	orr.w	r3, r3, #1
 8102b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102b3e:	4b43      	ldr	r3, [pc, #268]	; (8102c4c <HAL_SPI_MspInit+0x18c>)
 8102b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102b44:	f003 0301 	and.w	r3, r3, #1
 8102b48:	60bb      	str	r3, [r7, #8]
 8102b4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8102b4c:	23e0      	movs	r3, #224	; 0xe0
 8102b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102b52:	2302      	movs	r3, #2
 8102b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102b58:	2300      	movs	r3, #0
 8102b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102b5e:	2300      	movs	r3, #0
 8102b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102b64:	2305      	movs	r3, #5
 8102b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102b6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102b6e:	4619      	mov	r1, r3
 8102b70:	4837      	ldr	r0, [pc, #220]	; (8102c50 <HAL_SPI_MspInit+0x190>)
 8102b72:	f003 fc01 	bl	8106378 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102b76:	4b37      	ldr	r3, [pc, #220]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b78:	4a37      	ldr	r2, [pc, #220]	; (8102c58 <HAL_SPI_MspInit+0x198>)
 8102b7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102b7c:	4b35      	ldr	r3, [pc, #212]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b7e:	2225      	movs	r2, #37	; 0x25
 8102b80:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102b82:	4b34      	ldr	r3, [pc, #208]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b84:	2200      	movs	r2, #0
 8102b86:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102b88:	4b32      	ldr	r3, [pc, #200]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b8a:	2200      	movs	r2, #0
 8102b8c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102b8e:	4b31      	ldr	r3, [pc, #196]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102b94:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102b96:	4b2f      	ldr	r3, [pc, #188]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b98:	2200      	movs	r2, #0
 8102b9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102b9c:	4b2d      	ldr	r3, [pc, #180]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102b9e:	2200      	movs	r2, #0
 8102ba0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102ba2:	4b2c      	ldr	r3, [pc, #176]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102ba4:	2200      	movs	r2, #0
 8102ba6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102ba8:	4b2a      	ldr	r3, [pc, #168]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102bae:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102bb0:	4b28      	ldr	r3, [pc, #160]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102bb2:	2200      	movs	r2, #0
 8102bb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102bb6:	4827      	ldr	r0, [pc, #156]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102bb8:	f000 fd8c 	bl	81036d4 <HAL_DMA_Init>
 8102bbc:	4603      	mov	r3, r0
 8102bbe:	2b00      	cmp	r3, #0
 8102bc0:	d001      	beq.n	8102bc6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102bc2:	f7ff ff21 	bl	8102a08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	4a22      	ldr	r2, [pc, #136]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102bca:	67da      	str	r2, [r3, #124]	; 0x7c
 8102bcc:	4a21      	ldr	r2, [pc, #132]	; (8102c54 <HAL_SPI_MspInit+0x194>)
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102bd2:	4b22      	ldr	r3, [pc, #136]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102bd4:	4a22      	ldr	r2, [pc, #136]	; (8102c60 <HAL_SPI_MspInit+0x1a0>)
 8102bd6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102bd8:	4b20      	ldr	r3, [pc, #128]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102bda:	2226      	movs	r2, #38	; 0x26
 8102bdc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102bde:	4b1f      	ldr	r3, [pc, #124]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102be0:	2240      	movs	r2, #64	; 0x40
 8102be2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102be4:	4b1d      	ldr	r3, [pc, #116]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102be6:	2200      	movs	r2, #0
 8102be8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102bea:	4b1c      	ldr	r3, [pc, #112]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102bf0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102bf2:	4b1a      	ldr	r3, [pc, #104]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102bf4:	2200      	movs	r2, #0
 8102bf6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102bf8:	4b18      	ldr	r3, [pc, #96]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102bfa:	2200      	movs	r2, #0
 8102bfc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8102bfe:	4b17      	ldr	r3, [pc, #92]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102c00:	2200      	movs	r2, #0
 8102c02:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102c04:	4b15      	ldr	r3, [pc, #84]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102c0a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102c0c:	4b13      	ldr	r3, [pc, #76]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102c0e:	2200      	movs	r2, #0
 8102c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102c12:	4812      	ldr	r0, [pc, #72]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102c14:	f000 fd5e 	bl	81036d4 <HAL_DMA_Init>
 8102c18:	4603      	mov	r3, r0
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d001      	beq.n	8102c22 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8102c1e:	f7ff fef3 	bl	8102a08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	4a0d      	ldr	r2, [pc, #52]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102c26:	679a      	str	r2, [r3, #120]	; 0x78
 8102c28:	4a0c      	ldr	r2, [pc, #48]	; (8102c5c <HAL_SPI_MspInit+0x19c>)
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102c2e:	2200      	movs	r2, #0
 8102c30:	2100      	movs	r1, #0
 8102c32:	2023      	movs	r0, #35	; 0x23
 8102c34:	f000 fd05 	bl	8103642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102c38:	2023      	movs	r0, #35	; 0x23
 8102c3a:	f000 fd1c 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8102c3e:	bf00      	nop
 8102c40:	37e0      	adds	r7, #224	; 0xe0
 8102c42:	46bd      	mov	sp, r7
 8102c44:	bd80      	pop	{r7, pc}
 8102c46:	bf00      	nop
 8102c48:	40013000 	.word	0x40013000
 8102c4c:	58024400 	.word	0x58024400
 8102c50:	58020000 	.word	0x58020000
 8102c54:	10000378 	.word	0x10000378
 8102c58:	40020010 	.word	0x40020010
 8102c5c:	100003f0 	.word	0x100003f0
 8102c60:	40020028 	.word	0x40020028

08102c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102c64:	b480      	push	{r7}
 8102c66:	b083      	sub	sp, #12
 8102c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102c6a:	4b0a      	ldr	r3, [pc, #40]	; (8102c94 <HAL_MspInit+0x30>)
 8102c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102c70:	4a08      	ldr	r2, [pc, #32]	; (8102c94 <HAL_MspInit+0x30>)
 8102c72:	f043 0302 	orr.w	r3, r3, #2
 8102c76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102c7a:	4b06      	ldr	r3, [pc, #24]	; (8102c94 <HAL_MspInit+0x30>)
 8102c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102c80:	f003 0302 	and.w	r3, r3, #2
 8102c84:	607b      	str	r3, [r7, #4]
 8102c86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102c88:	bf00      	nop
 8102c8a:	370c      	adds	r7, #12
 8102c8c:	46bd      	mov	sp, r7
 8102c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c92:	4770      	bx	lr
 8102c94:	58024400 	.word	0x58024400

08102c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102c98:	b480      	push	{r7}
 8102c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102c9c:	e7fe      	b.n	8102c9c <NMI_Handler+0x4>

08102c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102c9e:	b480      	push	{r7}
 8102ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102ca2:	e7fe      	b.n	8102ca2 <HardFault_Handler+0x4>

08102ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102ca4:	b480      	push	{r7}
 8102ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102ca8:	e7fe      	b.n	8102ca8 <MemManage_Handler+0x4>

08102caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102caa:	b480      	push	{r7}
 8102cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102cae:	e7fe      	b.n	8102cae <BusFault_Handler+0x4>

08102cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102cb0:	b480      	push	{r7}
 8102cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102cb4:	e7fe      	b.n	8102cb4 <UsageFault_Handler+0x4>

08102cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102cb6:	b480      	push	{r7}
 8102cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102cba:	bf00      	nop
 8102cbc:	46bd      	mov	sp, r7
 8102cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cc2:	4770      	bx	lr

08102cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102cc4:	b480      	push	{r7}
 8102cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102cc8:	bf00      	nop
 8102cca:	46bd      	mov	sp, r7
 8102ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd0:	4770      	bx	lr

08102cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102cd2:	b480      	push	{r7}
 8102cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102cd6:	bf00      	nop
 8102cd8:	46bd      	mov	sp, r7
 8102cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cde:	4770      	bx	lr

08102ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102ce0:	b580      	push	{r7, lr}
 8102ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102ce4:	f000 fb8e 	bl	8103404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102ce8:	bf00      	nop
 8102cea:	bd80      	pop	{r7, pc}

08102cec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102cec:	b580      	push	{r7, lr}
 8102cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102cf0:	4802      	ldr	r0, [pc, #8]	; (8102cfc <DMA1_Stream0_IRQHandler+0x10>)
 8102cf2:	f002 f815 	bl	8104d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102cf6:	bf00      	nop
 8102cf8:	bd80      	pop	{r7, pc}
 8102cfa:	bf00      	nop
 8102cfc:	10000378 	.word	0x10000378

08102d00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102d00:	b580      	push	{r7, lr}
 8102d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102d04:	4802      	ldr	r0, [pc, #8]	; (8102d10 <DMA1_Stream1_IRQHandler+0x10>)
 8102d06:	f002 f80b 	bl	8104d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102d0a:	bf00      	nop
 8102d0c:	bd80      	pop	{r7, pc}
 8102d0e:	bf00      	nop
 8102d10:	100003f0 	.word	0x100003f0

08102d14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8102d14:	b580      	push	{r7, lr}
 8102d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8102d18:	4802      	ldr	r0, [pc, #8]	; (8102d24 <DMA1_Stream2_IRQHandler+0x10>)
 8102d1a:	f002 f801 	bl	8104d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8102d1e:	bf00      	nop
 8102d20:	bd80      	pop	{r7, pc}
 8102d22:	bf00      	nop
 8102d24:	10000178 	.word	0x10000178

08102d28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8102d28:	b580      	push	{r7, lr}
 8102d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102d2c:	4802      	ldr	r0, [pc, #8]	; (8102d38 <DMA1_Stream3_IRQHandler+0x10>)
 8102d2e:	f001 fff7 	bl	8104d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8102d32:	bf00      	nop
 8102d34:	bd80      	pop	{r7, pc}
 8102d36:	bf00      	nop
 8102d38:	100000b4 	.word	0x100000b4

08102d3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102d3c:	b580      	push	{r7, lr}
 8102d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102d40:	4802      	ldr	r0, [pc, #8]	; (8102d4c <I2C1_EV_IRQHandler+0x10>)
 8102d42:	f003 ffb3 	bl	8106cac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8102d46:	bf00      	nop
 8102d48:	bd80      	pop	{r7, pc}
 8102d4a:	bf00      	nop
 8102d4c:	1000012c 	.word	0x1000012c

08102d50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102d50:	b580      	push	{r7, lr}
 8102d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8102d54:	4802      	ldr	r0, [pc, #8]	; (8102d60 <I2C1_ER_IRQHandler+0x10>)
 8102d56:	f003 ffc3 	bl	8106ce0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102d5a:	bf00      	nop
 8102d5c:	bd80      	pop	{r7, pc}
 8102d5e:	bf00      	nop
 8102d60:	1000012c 	.word	0x1000012c

08102d64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8102d64:	b580      	push	{r7, lr}
 8102d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102d68:	4802      	ldr	r0, [pc, #8]	; (8102d74 <SPI1_IRQHandler+0x10>)
 8102d6a:	f007 f945 	bl	8109ff8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102d6e:	bf00      	nop
 8102d70:	bd80      	pop	{r7, pc}
 8102d72:	bf00      	nop
 8102d74:	100002f0 	.word	0x100002f0

08102d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102d78:	b580      	push	{r7, lr}
 8102d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102d7c:	4802      	ldr	r0, [pc, #8]	; (8102d88 <USART3_IRQHandler+0x10>)
 8102d7e:	f007 fdbd 	bl	810a8fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8102d82:	bf00      	nop
 8102d84:	bd80      	pop	{r7, pc}
 8102d86:	bf00      	nop
 8102d88:	100004e0 	.word	0x100004e0

08102d8c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102d8c:	b580      	push	{r7, lr}
 8102d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102d90:	4802      	ldr	r0, [pc, #8]	; (8102d9c <DMA1_Stream7_IRQHandler+0x10>)
 8102d92:	f001 ffc5 	bl	8104d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8102d96:	bf00      	nop
 8102d98:	bd80      	pop	{r7, pc}
 8102d9a:	bf00      	nop
 8102d9c:	10000468 	.word	0x10000468

08102da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8102da0:	b580      	push	{r7, lr}
 8102da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102da4:	4802      	ldr	r0, [pc, #8]	; (8102db0 <DMA2_Stream0_IRQHandler+0x10>)
 8102da6:	f001 ffbb 	bl	8104d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8102daa:	bf00      	nop
 8102dac:	bd80      	pop	{r7, pc}
 8102dae:	bf00      	nop
 8102db0:	10000570 	.word	0x10000570

08102db4 <calcChecksum>:
//      }
//
// }

 void calcChecksum(unsigned char* ck)
 {
 8102db4:	b580      	push	{r7, lr}
 8102db6:	b084      	sub	sp, #16
 8102db8:	af00      	add	r7, sp, #0
 8102dba:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 8102dbc:	2202      	movs	r2, #2
 8102dbe:	2100      	movs	r1, #0
 8102dc0:	6878      	ldr	r0, [r7, #4]
 8102dc2:	f009 fa63 	bl	810c28c <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8102dc6:	2300      	movs	r3, #0
 8102dc8:	60fb      	str	r3, [r7, #12]
 8102dca:	e016      	b.n	8102dfa <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	781a      	ldrb	r2, [r3, #0]
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	490e      	ldr	r1, [pc, #56]	; (8102e0c <calcChecksum+0x58>)
 8102dd4:	440b      	add	r3, r1
 8102dd6:	781b      	ldrb	r3, [r3, #0]
 8102dd8:	4413      	add	r3, r2
 8102dda:	b2da      	uxtb	r2, r3
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	3301      	adds	r3, #1
 8102de4:	7819      	ldrb	r1, [r3, #0]
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	781a      	ldrb	r2, [r3, #0]
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	3301      	adds	r3, #1
 8102dee:	440a      	add	r2, r1
 8102df0:	b2d2      	uxtb	r2, r2
 8102df2:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	3301      	adds	r3, #1
 8102df8:	60fb      	str	r3, [r7, #12]
 8102dfa:	68fb      	ldr	r3, [r7, #12]
 8102dfc:	2b5f      	cmp	r3, #95	; 0x5f
 8102dfe:	dde5      	ble.n	8102dcc <calcChecksum+0x18>
      }

 }
 8102e00:	bf00      	nop
 8102e02:	bf00      	nop
 8102e04:	3710      	adds	r7, #16
 8102e06:	46bd      	mov	sp, r7
 8102e08:	bd80      	pop	{r7, pc}
 8102e0a:	bf00      	nop
 8102e0c:	10000218 	.word	0x10000218

08102e10 <ConfigGPS>:
//     return *gps;
// }


 void ConfigGPS(void)
 {
 8102e10:	b590      	push	{r4, r7, lr}
 8102e12:	b0c1      	sub	sp, #260	; 0x104
 8102e14:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 8102e16:	4b43      	ldr	r3, [pc, #268]	; (8102f24 <ConfigGPS+0x114>)
 8102e18:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8102e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102e1e:	c407      	stmia	r4!, {r0, r1, r2}
 8102e20:	8023      	strh	r3, [r4, #0]
 8102e22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8102e26:	220e      	movs	r2, #14
 8102e28:	4619      	mov	r1, r3
 8102e2a:	483f      	ldr	r0, [pc, #252]	; (8102f28 <ConfigGPS+0x118>)
 8102e2c:	f007 fca0 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102e30:	2032      	movs	r0, #50	; 0x32
 8102e32:	f000 fb07 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 8102e36:	4b3d      	ldr	r3, [pc, #244]	; (8102f2c <ConfigGPS+0x11c>)
 8102e38:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8102e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102e42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8102e46:	2210      	movs	r2, #16
 8102e48:	4619      	mov	r1, r3
 8102e4a:	4837      	ldr	r0, [pc, #220]	; (8102f28 <ConfigGPS+0x118>)
 8102e4c:	f007 fc90 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102e50:	2032      	movs	r0, #50	; 0x32
 8102e52:	f000 faf7 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 8102e56:	4b36      	ldr	r3, [pc, #216]	; (8102f30 <ConfigGPS+0x120>)
 8102e58:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8102e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102e62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8102e66:	2210      	movs	r2, #16
 8102e68:	4619      	mov	r1, r3
 8102e6a:	482f      	ldr	r0, [pc, #188]	; (8102f28 <ConfigGPS+0x118>)
 8102e6c:	f007 fc80 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102e70:	2032      	movs	r0, #50	; 0x32
 8102e72:	f000 fae7 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 8102e76:	4b2f      	ldr	r3, [pc, #188]	; (8102f34 <ConfigGPS+0x124>)
 8102e78:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8102e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102e82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8102e86:	2210      	movs	r2, #16
 8102e88:	4619      	mov	r1, r3
 8102e8a:	4827      	ldr	r0, [pc, #156]	; (8102f28 <ConfigGPS+0x118>)
 8102e8c:	f007 fc70 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102e90:	2032      	movs	r0, #50	; 0x32
 8102e92:	f000 fad7 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 8102e96:	4b28      	ldr	r3, [pc, #160]	; (8102f38 <ConfigGPS+0x128>)
 8102e98:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8102e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102ea2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8102ea6:	2210      	movs	r2, #16
 8102ea8:	4619      	mov	r1, r3
 8102eaa:	481f      	ldr	r0, [pc, #124]	; (8102f28 <ConfigGPS+0x118>)
 8102eac:	f007 fc60 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102eb0:	2032      	movs	r0, #50	; 0x32
 8102eb2:	f000 fac7 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 8102eb6:	4b21      	ldr	r3, [pc, #132]	; (8102f3c <ConfigGPS+0x12c>)
 8102eb8:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8102ebc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102ec2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8102ec6:	2210      	movs	r2, #16
 8102ec8:	4619      	mov	r1, r3
 8102eca:	4817      	ldr	r0, [pc, #92]	; (8102f28 <ConfigGPS+0x118>)
 8102ecc:	f007 fc50 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102ed0:	2032      	movs	r0, #50	; 0x32
 8102ed2:	f000 fab7 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 8102ed6:	4b1a      	ldr	r3, [pc, #104]	; (8102f40 <ConfigGPS+0x130>)
 8102ed8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8102edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102ede:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102ee6:	2210      	movs	r2, #16
 8102ee8:	4619      	mov	r1, r3
 8102eea:	480f      	ldr	r0, [pc, #60]	; (8102f28 <ConfigGPS+0x118>)
 8102eec:	f007 fc40 	bl	810a770 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8102ef0:	2032      	movs	r0, #50	; 0x32
 8102ef2:	f000 faa7 	bl	8103444 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 8102ef6:	4b13      	ldr	r3, [pc, #76]	; (8102f44 <ConfigGPS+0x134>)
 8102ef8:	f107 0410 	add.w	r4, r7, #16
 8102efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8102efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102f02:	f107 0310 	add.w	r3, r7, #16
 8102f06:	2210      	movs	r2, #16
 8102f08:	4619      	mov	r1, r3
 8102f0a:	4807      	ldr	r0, [pc, #28]	; (8102f28 <ConfigGPS+0x118>)
 8102f0c:	f007 fc30 	bl	810a770 <HAL_UART_Transmit_DMA>

   HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 8102f10:	2201      	movs	r2, #1
 8102f12:	490d      	ldr	r1, [pc, #52]	; (8102f48 <ConfigGPS+0x138>)
 8102f14:	4804      	ldr	r0, [pc, #16]	; (8102f28 <ConfigGPS+0x118>)
 8102f16:	f007 fcab 	bl	810a870 <HAL_UART_Receive_DMA>
 }
 8102f1a:	bf00      	nop
 8102f1c:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8102f20:	46bd      	mov	sp, r7
 8102f22:	bd90      	pop	{r4, r7, pc}
 8102f24:	0810d228 	.word	0x0810d228
 8102f28:	100004e0 	.word	0x100004e0
 8102f2c:	0810d238 	.word	0x0810d238
 8102f30:	0810d248 	.word	0x0810d248
 8102f34:	0810d258 	.word	0x0810d258
 8102f38:	0810d268 	.word	0x0810d268
 8102f3c:	0810d278 	.word	0x0810d278
 8102f40:	0810d288 	.word	0x0810d288
 8102f44:	0810d298 	.word	0x0810d298
 8102f48:	100000a4 	.word	0x100000a4

08102f4c <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8102f4c:	b480      	push	{r7}
 8102f4e:	b083      	sub	sp, #12
 8102f50:	af00      	add	r7, sp, #0
 8102f52:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8102f54:	bf00      	nop
 8102f56:	370c      	adds	r7, #12
 8102f58:	46bd      	mov	sp, r7
 8102f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f5e:	4770      	bx	lr

08102f60 <HAL_UART_RxCpltCallback>:


 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8102f60:	b580      	push	{r7, lr}
 8102f62:	b084      	sub	sp, #16
 8102f64:	af00      	add	r7, sp, #0
 8102f66:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a31      	ldr	r2, [pc, #196]	; (8103034 <HAL_UART_RxCpltCallback+0xd4>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d15b      	bne.n	810302a <HAL_UART_RxCpltCallback+0xca>
    {
      if(byte_pos < 2)
 8102f72:	4b31      	ldr	r3, [pc, #196]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	2b01      	cmp	r3, #1
 8102f78:	dc17      	bgt.n	8102faa <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 8102f7a:	4b30      	ldr	r3, [pc, #192]	; (810303c <HAL_UART_RxCpltCallback+0xdc>)
 8102f7c:	781a      	ldrb	r2, [r3, #0]
 8102f7e:	4b30      	ldr	r3, [pc, #192]	; (8103040 <HAL_UART_RxCpltCallback+0xe0>)
 8102f80:	881b      	ldrh	r3, [r3, #0]
 8102f82:	81bb      	strh	r3, [r7, #12]
 8102f84:	4b2c      	ldr	r3, [pc, #176]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102f86:	681b      	ldr	r3, [r3, #0]
 8102f88:	f107 0110 	add.w	r1, r7, #16
 8102f8c:	440b      	add	r3, r1
 8102f8e:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8102f92:	429a      	cmp	r2, r3
 8102f94:	d105      	bne.n	8102fa2 <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 8102f96:	4b28      	ldr	r3, [pc, #160]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102f98:	681b      	ldr	r3, [r3, #0]
 8102f9a:	3301      	adds	r3, #1
 8102f9c:	4a26      	ldr	r2, [pc, #152]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102f9e:	6013      	str	r3, [r2, #0]
        }
      }
    }

    //processGPS(&gps);
 }
 8102fa0:	e043      	b.n	810302a <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8102fa2:	4b25      	ldr	r3, [pc, #148]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fa4:	2200      	movs	r2, #0
 8102fa6:	601a      	str	r2, [r3, #0]
 }
 8102fa8:	e03f      	b.n	810302a <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 8102faa:	4b23      	ldr	r3, [pc, #140]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	3b01      	subs	r3, #1
 8102fb0:	2260      	movs	r2, #96	; 0x60
 8102fb2:	4293      	cmp	r3, r2
 8102fb4:	dc07      	bgt.n	8102fc6 <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102fb6:	4b20      	ldr	r3, [pc, #128]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	3b02      	subs	r3, #2
 8102fbc:	4a21      	ldr	r2, [pc, #132]	; (8103044 <HAL_UART_RxCpltCallback+0xe4>)
 8102fbe:	4413      	add	r3, r2
 8102fc0:	4a1e      	ldr	r2, [pc, #120]	; (810303c <HAL_UART_RxCpltCallback+0xdc>)
 8102fc2:	7812      	ldrb	r2, [r2, #0]
 8102fc4:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 8102fc6:	4b1c      	ldr	r3, [pc, #112]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fc8:	681b      	ldr	r3, [r3, #0]
 8102fca:	3301      	adds	r3, #1
 8102fcc:	4a1a      	ldr	r2, [pc, #104]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fce:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 8102fd0:	2360      	movs	r3, #96	; 0x60
 8102fd2:	1c9a      	adds	r2, r3, #2
 8102fd4:	4b18      	ldr	r3, [pc, #96]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fd6:	681b      	ldr	r3, [r3, #0]
 8102fd8:	429a      	cmp	r2, r3
 8102fda:	d103      	bne.n	8102fe4 <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 8102fdc:	481a      	ldr	r0, [pc, #104]	; (8103048 <HAL_UART_RxCpltCallback+0xe8>)
 8102fde:	f7ff fee9 	bl	8102db4 <calcChecksum>
 }
 8102fe2:	e022      	b.n	810302a <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 8102fe4:	2360      	movs	r3, #96	; 0x60
 8102fe6:	1cda      	adds	r2, r3, #3
 8102fe8:	4b13      	ldr	r3, [pc, #76]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102fea:	681b      	ldr	r3, [r3, #0]
 8102fec:	429a      	cmp	r2, r3
 8102fee:	d109      	bne.n	8103004 <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 8102ff0:	4b12      	ldr	r3, [pc, #72]	; (810303c <HAL_UART_RxCpltCallback+0xdc>)
 8102ff2:	781a      	ldrb	r2, [r3, #0]
 8102ff4:	4b14      	ldr	r3, [pc, #80]	; (8103048 <HAL_UART_RxCpltCallback+0xe8>)
 8102ff6:	781b      	ldrb	r3, [r3, #0]
 8102ff8:	429a      	cmp	r2, r3
 8102ffa:	d016      	beq.n	810302a <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 8102ffc:	4b0e      	ldr	r3, [pc, #56]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8102ffe:	2200      	movs	r2, #0
 8103000:	601a      	str	r2, [r3, #0]
 }
 8103002:	e012      	b.n	810302a <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 8103004:	2360      	movs	r3, #96	; 0x60
 8103006:	1d1a      	adds	r2, r3, #4
 8103008:	4b0b      	ldr	r3, [pc, #44]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 810300a:	681b      	ldr	r3, [r3, #0]
 810300c:	429a      	cmp	r2, r3
 810300e:	d103      	bne.n	8103018 <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 8103010:	4b09      	ldr	r3, [pc, #36]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8103012:	2200      	movs	r2, #0
 8103014:	601a      	str	r2, [r3, #0]
 }
 8103016:	e008      	b.n	810302a <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 8103018:	2360      	movs	r3, #96	; 0x60
 810301a:	1d1a      	adds	r2, r3, #4
 810301c:	4b06      	ldr	r3, [pc, #24]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	429a      	cmp	r2, r3
 8103022:	da02      	bge.n	810302a <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8103024:	4b04      	ldr	r3, [pc, #16]	; (8103038 <HAL_UART_RxCpltCallback+0xd8>)
 8103026:	2200      	movs	r2, #0
 8103028:	601a      	str	r2, [r3, #0]
 }
 810302a:	bf00      	nop
 810302c:	3710      	adds	r7, #16
 810302e:	46bd      	mov	sp, r7
 8103030:	bd80      	pop	{r7, pc}
 8103032:	bf00      	nop
 8103034:	40004800 	.word	0x40004800
 8103038:	100000a8 	.word	0x100000a8
 810303c:	100000a4 	.word	0x100000a4
 8103040:	0810d2a8 	.word	0x0810d2a8
 8103044:	10000218 	.word	0x10000218
 8103048:	100000ac 	.word	0x100000ac

0810304c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 810304c:	b580      	push	{r7, lr}
 810304e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103050:	4b22      	ldr	r3, [pc, #136]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103052:	4a23      	ldr	r2, [pc, #140]	; (81030e0 <MX_USART3_UART_Init+0x94>)
 8103054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8103056:	4b21      	ldr	r3, [pc, #132]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103058:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 810305c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810305e:	4b1f      	ldr	r3, [pc, #124]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103060:	2200      	movs	r2, #0
 8103062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103064:	4b1d      	ldr	r3, [pc, #116]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103066:	2200      	movs	r2, #0
 8103068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810306a:	4b1c      	ldr	r3, [pc, #112]	; (81030dc <MX_USART3_UART_Init+0x90>)
 810306c:	2200      	movs	r2, #0
 810306e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103070:	4b1a      	ldr	r3, [pc, #104]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103072:	220c      	movs	r2, #12
 8103074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103076:	4b19      	ldr	r3, [pc, #100]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103078:	2200      	movs	r2, #0
 810307a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810307c:	4b17      	ldr	r3, [pc, #92]	; (81030dc <MX_USART3_UART_Init+0x90>)
 810307e:	2200      	movs	r2, #0
 8103080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103082:	4b16      	ldr	r3, [pc, #88]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103084:	2200      	movs	r2, #0
 8103086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103088:	4b14      	ldr	r3, [pc, #80]	; (81030dc <MX_USART3_UART_Init+0x90>)
 810308a:	2200      	movs	r2, #0
 810308c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810308e:	4b13      	ldr	r3, [pc, #76]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103090:	2200      	movs	r2, #0
 8103092:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103094:	4811      	ldr	r0, [pc, #68]	; (81030dc <MX_USART3_UART_Init+0x90>)
 8103096:	f007 fb1b 	bl	810a6d0 <HAL_UART_Init>
 810309a:	4603      	mov	r3, r0
 810309c:	2b00      	cmp	r3, #0
 810309e:	d001      	beq.n	81030a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81030a0:	f7ff fcb2 	bl	8102a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81030a4:	2100      	movs	r1, #0
 81030a6:	480d      	ldr	r0, [pc, #52]	; (81030dc <MX_USART3_UART_Init+0x90>)
 81030a8:	f008 fffc 	bl	810c0a4 <HAL_UARTEx_SetTxFifoThreshold>
 81030ac:	4603      	mov	r3, r0
 81030ae:	2b00      	cmp	r3, #0
 81030b0:	d001      	beq.n	81030b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81030b2:	f7ff fca9 	bl	8102a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81030b6:	2100      	movs	r1, #0
 81030b8:	4808      	ldr	r0, [pc, #32]	; (81030dc <MX_USART3_UART_Init+0x90>)
 81030ba:	f009 f831 	bl	810c120 <HAL_UARTEx_SetRxFifoThreshold>
 81030be:	4603      	mov	r3, r0
 81030c0:	2b00      	cmp	r3, #0
 81030c2:	d001      	beq.n	81030c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81030c4:	f7ff fca0 	bl	8102a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81030c8:	4804      	ldr	r0, [pc, #16]	; (81030dc <MX_USART3_UART_Init+0x90>)
 81030ca:	f008 ffb2 	bl	810c032 <HAL_UARTEx_DisableFifoMode>
 81030ce:	4603      	mov	r3, r0
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d001      	beq.n	81030d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81030d4:	f7ff fc98 	bl	8102a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81030d8:	bf00      	nop
 81030da:	bd80      	pop	{r7, pc}
 81030dc:	100004e0 	.word	0x100004e0
 81030e0:	40004800 	.word	0x40004800

081030e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81030e4:	b580      	push	{r7, lr}
 81030e6:	b0b8      	sub	sp, #224	; 0xe0
 81030e8:	af00      	add	r7, sp, #0
 81030ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81030ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81030f0:	2200      	movs	r2, #0
 81030f2:	601a      	str	r2, [r3, #0]
 81030f4:	605a      	str	r2, [r3, #4]
 81030f6:	609a      	str	r2, [r3, #8]
 81030f8:	60da      	str	r2, [r3, #12]
 81030fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81030fc:	f107 0310 	add.w	r3, r7, #16
 8103100:	22bc      	movs	r2, #188	; 0xbc
 8103102:	2100      	movs	r1, #0
 8103104:	4618      	mov	r0, r3
 8103106:	f009 f8c1 	bl	810c28c <memset>
  if(uartHandle->Instance==USART3)
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a57      	ldr	r2, [pc, #348]	; (810326c <HAL_UART_MspInit+0x188>)
 8103110:	4293      	cmp	r3, r2
 8103112:	f040 80a7 	bne.w	8103264 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103116:	2302      	movs	r3, #2
 8103118:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810311a:	2300      	movs	r3, #0
 810311c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103120:	f107 0310 	add.w	r3, r7, #16
 8103124:	4618      	mov	r0, r3
 8103126:	f005 f937 	bl	8108398 <HAL_RCCEx_PeriphCLKConfig>
 810312a:	4603      	mov	r3, r0
 810312c:	2b00      	cmp	r3, #0
 810312e:	d001      	beq.n	8103134 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8103130:	f7ff fc6a 	bl	8102a08 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8103134:	4b4e      	ldr	r3, [pc, #312]	; (8103270 <HAL_UART_MspInit+0x18c>)
 8103136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810313a:	4a4d      	ldr	r2, [pc, #308]	; (8103270 <HAL_UART_MspInit+0x18c>)
 810313c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103140:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103144:	4b4a      	ldr	r3, [pc, #296]	; (8103270 <HAL_UART_MspInit+0x18c>)
 8103146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810314a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810314e:	60fb      	str	r3, [r7, #12]
 8103150:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103152:	4b47      	ldr	r3, [pc, #284]	; (8103270 <HAL_UART_MspInit+0x18c>)
 8103154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103158:	4a45      	ldr	r2, [pc, #276]	; (8103270 <HAL_UART_MspInit+0x18c>)
 810315a:	f043 0308 	orr.w	r3, r3, #8
 810315e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103162:	4b43      	ldr	r3, [pc, #268]	; (8103270 <HAL_UART_MspInit+0x18c>)
 8103164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103168:	f003 0308 	and.w	r3, r3, #8
 810316c:	60bb      	str	r3, [r7, #8]
 810316e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8103170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103174:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103178:	2302      	movs	r3, #2
 810317a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810317e:	2300      	movs	r3, #0
 8103180:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103184:	2300      	movs	r3, #0
 8103186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810318a:	2307      	movs	r3, #7
 810318c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103190:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103194:	4619      	mov	r1, r3
 8103196:	4837      	ldr	r0, [pc, #220]	; (8103274 <HAL_UART_MspInit+0x190>)
 8103198:	f003 f8ee 	bl	8106378 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 810319c:	4b36      	ldr	r3, [pc, #216]	; (8103278 <HAL_UART_MspInit+0x194>)
 810319e:	4a37      	ldr	r2, [pc, #220]	; (810327c <HAL_UART_MspInit+0x198>)
 81031a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81031a2:	4b35      	ldr	r3, [pc, #212]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031a4:	222d      	movs	r2, #45	; 0x2d
 81031a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81031a8:	4b33      	ldr	r3, [pc, #204]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031aa:	2200      	movs	r2, #0
 81031ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81031ae:	4b32      	ldr	r3, [pc, #200]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031b0:	2200      	movs	r2, #0
 81031b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81031b4:	4b30      	ldr	r3, [pc, #192]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81031ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81031bc:	4b2e      	ldr	r3, [pc, #184]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031be:	2200      	movs	r2, #0
 81031c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81031c2:	4b2d      	ldr	r3, [pc, #180]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031c4:	2200      	movs	r2, #0
 81031c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 81031c8:	4b2b      	ldr	r3, [pc, #172]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 81031ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 81031d0:	4b29      	ldr	r3, [pc, #164]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81031d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81031d8:	4b27      	ldr	r3, [pc, #156]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031da:	2200      	movs	r2, #0
 81031dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81031de:	4826      	ldr	r0, [pc, #152]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031e0:	f000 fa78 	bl	81036d4 <HAL_DMA_Init>
 81031e4:	4603      	mov	r3, r0
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d001      	beq.n	81031ee <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 81031ea:	f7ff fc0d 	bl	8102a08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	4a21      	ldr	r2, [pc, #132]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031f2:	67da      	str	r2, [r3, #124]	; 0x7c
 81031f4:	4a20      	ldr	r2, [pc, #128]	; (8103278 <HAL_UART_MspInit+0x194>)
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81031fa:	4b21      	ldr	r3, [pc, #132]	; (8103280 <HAL_UART_MspInit+0x19c>)
 81031fc:	4a21      	ldr	r2, [pc, #132]	; (8103284 <HAL_UART_MspInit+0x1a0>)
 81031fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8103200:	4b1f      	ldr	r3, [pc, #124]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103202:	222e      	movs	r2, #46	; 0x2e
 8103204:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8103206:	4b1e      	ldr	r3, [pc, #120]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103208:	2240      	movs	r2, #64	; 0x40
 810320a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810320c:	4b1c      	ldr	r3, [pc, #112]	; (8103280 <HAL_UART_MspInit+0x19c>)
 810320e:	2200      	movs	r2, #0
 8103210:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8103212:	4b1b      	ldr	r3, [pc, #108]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103218:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810321a:	4b19      	ldr	r3, [pc, #100]	; (8103280 <HAL_UART_MspInit+0x19c>)
 810321c:	2200      	movs	r2, #0
 810321e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103220:	4b17      	ldr	r3, [pc, #92]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103222:	2200      	movs	r2, #0
 8103224:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8103226:	4b16      	ldr	r3, [pc, #88]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103228:	2200      	movs	r2, #0
 810322a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 810322c:	4b14      	ldr	r3, [pc, #80]	; (8103280 <HAL_UART_MspInit+0x19c>)
 810322e:	2200      	movs	r2, #0
 8103230:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8103232:	4b13      	ldr	r3, [pc, #76]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103234:	2200      	movs	r2, #0
 8103236:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8103238:	4811      	ldr	r0, [pc, #68]	; (8103280 <HAL_UART_MspInit+0x19c>)
 810323a:	f000 fa4b 	bl	81036d4 <HAL_DMA_Init>
 810323e:	4603      	mov	r3, r0
 8103240:	2b00      	cmp	r3, #0
 8103242:	d001      	beq.n	8103248 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8103244:	f7ff fbe0 	bl	8102a08 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	4a0d      	ldr	r2, [pc, #52]	; (8103280 <HAL_UART_MspInit+0x19c>)
 810324c:	679a      	str	r2, [r3, #120]	; 0x78
 810324e:	4a0c      	ldr	r2, [pc, #48]	; (8103280 <HAL_UART_MspInit+0x19c>)
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8103254:	2200      	movs	r2, #0
 8103256:	2105      	movs	r1, #5
 8103258:	2027      	movs	r0, #39	; 0x27
 810325a:	f000 f9f2 	bl	8103642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810325e:	2027      	movs	r0, #39	; 0x27
 8103260:	f000 fa09 	bl	8103676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8103264:	bf00      	nop
 8103266:	37e0      	adds	r7, #224	; 0xe0
 8103268:	46bd      	mov	sp, r7
 810326a:	bd80      	pop	{r7, pc}
 810326c:	40004800 	.word	0x40004800
 8103270:	58024400 	.word	0x58024400
 8103274:	58020c00 	.word	0x58020c00
 8103278:	10000468 	.word	0x10000468
 810327c:	400200b8 	.word	0x400200b8
 8103280:	10000570 	.word	0x10000570
 8103284:	40020410 	.word	0x40020410

08103288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103288:	f8df d034 	ldr.w	sp, [pc, #52]	; 81032c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810328c:	f7fd ffba 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103290:	480c      	ldr	r0, [pc, #48]	; (81032c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103292:	490d      	ldr	r1, [pc, #52]	; (81032c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103294:	4a0d      	ldr	r2, [pc, #52]	; (81032cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103298:	e002      	b.n	81032a0 <LoopCopyDataInit>

0810329a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810329a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810329c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810329e:	3304      	adds	r3, #4

081032a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81032a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81032a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81032a4:	d3f9      	bcc.n	810329a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81032a6:	4a0a      	ldr	r2, [pc, #40]	; (81032d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81032a8:	4c0a      	ldr	r4, [pc, #40]	; (81032d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81032aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 81032ac:	e001      	b.n	81032b2 <LoopFillZerobss>

081032ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81032ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81032b0:	3204      	adds	r2, #4

081032b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81032b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81032b4:	d3fb      	bcc.n	81032ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81032b6:	f008 ffc5 	bl	810c244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81032ba:	f7ff faab 	bl	8102814 <main>
  bx  lr
 81032be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81032c0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81032c4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81032c8:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 81032cc:	0810d340 	.word	0x0810d340
  ldr r2, =_sbss
 81032d0:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 81032d4:	100005ec 	.word	0x100005ec

081032d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81032d8:	e7fe      	b.n	81032d8 <ADC3_IRQHandler>
	...

081032dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81032dc:	b580      	push	{r7, lr}
 81032de:	b082      	sub	sp, #8
 81032e0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81032e2:	4b28      	ldr	r3, [pc, #160]	; (8103384 <HAL_Init+0xa8>)
 81032e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81032e8:	4a26      	ldr	r2, [pc, #152]	; (8103384 <HAL_Init+0xa8>)
 81032ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81032ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81032f2:	4b24      	ldr	r3, [pc, #144]	; (8103384 <HAL_Init+0xa8>)
 81032f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81032f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81032fc:	603b      	str	r3, [r7, #0]
 81032fe:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103300:	4b21      	ldr	r3, [pc, #132]	; (8103388 <HAL_Init+0xac>)
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103308:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810330c:	4a1e      	ldr	r2, [pc, #120]	; (8103388 <HAL_Init+0xac>)
 810330e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103312:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103314:	4b1c      	ldr	r3, [pc, #112]	; (8103388 <HAL_Init+0xac>)
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	4a1b      	ldr	r2, [pc, #108]	; (8103388 <HAL_Init+0xac>)
 810331a:	f043 0301 	orr.w	r3, r3, #1
 810331e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103320:	2003      	movs	r0, #3
 8103322:	f000 f983 	bl	810362c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103326:	f004 fe5f 	bl	8107fe8 <HAL_RCC_GetSysClockFreq>
 810332a:	4602      	mov	r2, r0
 810332c:	4b15      	ldr	r3, [pc, #84]	; (8103384 <HAL_Init+0xa8>)
 810332e:	699b      	ldr	r3, [r3, #24]
 8103330:	0a1b      	lsrs	r3, r3, #8
 8103332:	f003 030f 	and.w	r3, r3, #15
 8103336:	4915      	ldr	r1, [pc, #84]	; (810338c <HAL_Init+0xb0>)
 8103338:	5ccb      	ldrb	r3, [r1, r3]
 810333a:	f003 031f 	and.w	r3, r3, #31
 810333e:	fa22 f303 	lsr.w	r3, r2, r3
 8103342:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103344:	4b0f      	ldr	r3, [pc, #60]	; (8103384 <HAL_Init+0xa8>)
 8103346:	699b      	ldr	r3, [r3, #24]
 8103348:	f003 030f 	and.w	r3, r3, #15
 810334c:	4a0f      	ldr	r2, [pc, #60]	; (810338c <HAL_Init+0xb0>)
 810334e:	5cd3      	ldrb	r3, [r2, r3]
 8103350:	f003 031f 	and.w	r3, r3, #31
 8103354:	687a      	ldr	r2, [r7, #4]
 8103356:	fa22 f303 	lsr.w	r3, r2, r3
 810335a:	4a0d      	ldr	r2, [pc, #52]	; (8103390 <HAL_Init+0xb4>)
 810335c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810335e:	4b0c      	ldr	r3, [pc, #48]	; (8103390 <HAL_Init+0xb4>)
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	4a0c      	ldr	r2, [pc, #48]	; (8103394 <HAL_Init+0xb8>)
 8103364:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103366:	2000      	movs	r0, #0
 8103368:	f000 f816 	bl	8103398 <HAL_InitTick>
 810336c:	4603      	mov	r3, r0
 810336e:	2b00      	cmp	r3, #0
 8103370:	d001      	beq.n	8103376 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103372:	2301      	movs	r3, #1
 8103374:	e002      	b.n	810337c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103376:	f7ff fc75 	bl	8102c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810337a:	2300      	movs	r3, #0
}
 810337c:	4618      	mov	r0, r3
 810337e:	3708      	adds	r7, #8
 8103380:	46bd      	mov	sp, r7
 8103382:	bd80      	pop	{r7, pc}
 8103384:	58024400 	.word	0x58024400
 8103388:	40024400 	.word	0x40024400
 810338c:	0810d2ac 	.word	0x0810d2ac
 8103390:	10000004 	.word	0x10000004
 8103394:	10000000 	.word	0x10000000

08103398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103398:	b580      	push	{r7, lr}
 810339a:	b082      	sub	sp, #8
 810339c:	af00      	add	r7, sp, #0
 810339e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81033a0:	4b15      	ldr	r3, [pc, #84]	; (81033f8 <HAL_InitTick+0x60>)
 81033a2:	781b      	ldrb	r3, [r3, #0]
 81033a4:	2b00      	cmp	r3, #0
 81033a6:	d101      	bne.n	81033ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81033a8:	2301      	movs	r3, #1
 81033aa:	e021      	b.n	81033f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81033ac:	4b13      	ldr	r3, [pc, #76]	; (81033fc <HAL_InitTick+0x64>)
 81033ae:	681a      	ldr	r2, [r3, #0]
 81033b0:	4b11      	ldr	r3, [pc, #68]	; (81033f8 <HAL_InitTick+0x60>)
 81033b2:	781b      	ldrb	r3, [r3, #0]
 81033b4:	4619      	mov	r1, r3
 81033b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81033ba:	fbb3 f3f1 	udiv	r3, r3, r1
 81033be:	fbb2 f3f3 	udiv	r3, r2, r3
 81033c2:	4618      	mov	r0, r3
 81033c4:	f000 f965 	bl	8103692 <HAL_SYSTICK_Config>
 81033c8:	4603      	mov	r3, r0
 81033ca:	2b00      	cmp	r3, #0
 81033cc:	d001      	beq.n	81033d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81033ce:	2301      	movs	r3, #1
 81033d0:	e00e      	b.n	81033f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	2b0f      	cmp	r3, #15
 81033d6:	d80a      	bhi.n	81033ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81033d8:	2200      	movs	r2, #0
 81033da:	6879      	ldr	r1, [r7, #4]
 81033dc:	f04f 30ff 	mov.w	r0, #4294967295
 81033e0:	f000 f92f 	bl	8103642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81033e4:	4a06      	ldr	r2, [pc, #24]	; (8103400 <HAL_InitTick+0x68>)
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81033ea:	2300      	movs	r3, #0
 81033ec:	e000      	b.n	81033f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81033ee:	2301      	movs	r3, #1
}
 81033f0:	4618      	mov	r0, r3
 81033f2:	3708      	adds	r7, #8
 81033f4:	46bd      	mov	sp, r7
 81033f6:	bd80      	pop	{r7, pc}
 81033f8:	1000000c 	.word	0x1000000c
 81033fc:	10000000 	.word	0x10000000
 8103400:	10000008 	.word	0x10000008

08103404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103404:	b480      	push	{r7}
 8103406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103408:	4b06      	ldr	r3, [pc, #24]	; (8103424 <HAL_IncTick+0x20>)
 810340a:	781b      	ldrb	r3, [r3, #0]
 810340c:	461a      	mov	r2, r3
 810340e:	4b06      	ldr	r3, [pc, #24]	; (8103428 <HAL_IncTick+0x24>)
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	4413      	add	r3, r2
 8103414:	4a04      	ldr	r2, [pc, #16]	; (8103428 <HAL_IncTick+0x24>)
 8103416:	6013      	str	r3, [r2, #0]
}
 8103418:	bf00      	nop
 810341a:	46bd      	mov	sp, r7
 810341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103420:	4770      	bx	lr
 8103422:	bf00      	nop
 8103424:	1000000c 	.word	0x1000000c
 8103428:	100005e8 	.word	0x100005e8

0810342c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810342c:	b480      	push	{r7}
 810342e:	af00      	add	r7, sp, #0
  return uwTick;
 8103430:	4b03      	ldr	r3, [pc, #12]	; (8103440 <HAL_GetTick+0x14>)
 8103432:	681b      	ldr	r3, [r3, #0]
}
 8103434:	4618      	mov	r0, r3
 8103436:	46bd      	mov	sp, r7
 8103438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810343c:	4770      	bx	lr
 810343e:	bf00      	nop
 8103440:	100005e8 	.word	0x100005e8

08103444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103444:	b580      	push	{r7, lr}
 8103446:	b084      	sub	sp, #16
 8103448:	af00      	add	r7, sp, #0
 810344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810344c:	f7ff ffee 	bl	810342c <HAL_GetTick>
 8103450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103456:	68fb      	ldr	r3, [r7, #12]
 8103458:	f1b3 3fff 	cmp.w	r3, #4294967295
 810345c:	d005      	beq.n	810346a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810345e:	4b0a      	ldr	r3, [pc, #40]	; (8103488 <HAL_Delay+0x44>)
 8103460:	781b      	ldrb	r3, [r3, #0]
 8103462:	461a      	mov	r2, r3
 8103464:	68fb      	ldr	r3, [r7, #12]
 8103466:	4413      	add	r3, r2
 8103468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810346a:	bf00      	nop
 810346c:	f7ff ffde 	bl	810342c <HAL_GetTick>
 8103470:	4602      	mov	r2, r0
 8103472:	68bb      	ldr	r3, [r7, #8]
 8103474:	1ad3      	subs	r3, r2, r3
 8103476:	68fa      	ldr	r2, [r7, #12]
 8103478:	429a      	cmp	r2, r3
 810347a:	d8f7      	bhi.n	810346c <HAL_Delay+0x28>
  {
  }
}
 810347c:	bf00      	nop
 810347e:	bf00      	nop
 8103480:	3710      	adds	r7, #16
 8103482:	46bd      	mov	sp, r7
 8103484:	bd80      	pop	{r7, pc}
 8103486:	bf00      	nop
 8103488:	1000000c 	.word	0x1000000c

0810348c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810348c:	b480      	push	{r7}
 810348e:	b085      	sub	sp, #20
 8103490:	af00      	add	r7, sp, #0
 8103492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	f003 0307 	and.w	r3, r3, #7
 810349a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810349c:	4b0c      	ldr	r3, [pc, #48]	; (81034d0 <__NVIC_SetPriorityGrouping+0x44>)
 810349e:	68db      	ldr	r3, [r3, #12]
 81034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81034a2:	68ba      	ldr	r2, [r7, #8]
 81034a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81034a8:	4013      	ands	r3, r2
 81034aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81034ac:	68fb      	ldr	r3, [r7, #12]
 81034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81034b0:	68bb      	ldr	r3, [r7, #8]
 81034b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81034b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81034bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81034be:	4a04      	ldr	r2, [pc, #16]	; (81034d0 <__NVIC_SetPriorityGrouping+0x44>)
 81034c0:	68bb      	ldr	r3, [r7, #8]
 81034c2:	60d3      	str	r3, [r2, #12]
}
 81034c4:	bf00      	nop
 81034c6:	3714      	adds	r7, #20
 81034c8:	46bd      	mov	sp, r7
 81034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ce:	4770      	bx	lr
 81034d0:	e000ed00 	.word	0xe000ed00

081034d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81034d4:	b480      	push	{r7}
 81034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81034d8:	4b04      	ldr	r3, [pc, #16]	; (81034ec <__NVIC_GetPriorityGrouping+0x18>)
 81034da:	68db      	ldr	r3, [r3, #12]
 81034dc:	0a1b      	lsrs	r3, r3, #8
 81034de:	f003 0307 	and.w	r3, r3, #7
}
 81034e2:	4618      	mov	r0, r3
 81034e4:	46bd      	mov	sp, r7
 81034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ea:	4770      	bx	lr
 81034ec:	e000ed00 	.word	0xe000ed00

081034f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81034f0:	b480      	push	{r7}
 81034f2:	b083      	sub	sp, #12
 81034f4:	af00      	add	r7, sp, #0
 81034f6:	4603      	mov	r3, r0
 81034f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81034fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81034fe:	2b00      	cmp	r3, #0
 8103500:	db0b      	blt.n	810351a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103502:	88fb      	ldrh	r3, [r7, #6]
 8103504:	f003 021f 	and.w	r2, r3, #31
 8103508:	4907      	ldr	r1, [pc, #28]	; (8103528 <__NVIC_EnableIRQ+0x38>)
 810350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810350e:	095b      	lsrs	r3, r3, #5
 8103510:	2001      	movs	r0, #1
 8103512:	fa00 f202 	lsl.w	r2, r0, r2
 8103516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810351a:	bf00      	nop
 810351c:	370c      	adds	r7, #12
 810351e:	46bd      	mov	sp, r7
 8103520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103524:	4770      	bx	lr
 8103526:	bf00      	nop
 8103528:	e000e100 	.word	0xe000e100

0810352c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810352c:	b480      	push	{r7}
 810352e:	b083      	sub	sp, #12
 8103530:	af00      	add	r7, sp, #0
 8103532:	4603      	mov	r3, r0
 8103534:	6039      	str	r1, [r7, #0]
 8103536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810353c:	2b00      	cmp	r3, #0
 810353e:	db0a      	blt.n	8103556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103540:	683b      	ldr	r3, [r7, #0]
 8103542:	b2da      	uxtb	r2, r3
 8103544:	490c      	ldr	r1, [pc, #48]	; (8103578 <__NVIC_SetPriority+0x4c>)
 8103546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810354a:	0112      	lsls	r2, r2, #4
 810354c:	b2d2      	uxtb	r2, r2
 810354e:	440b      	add	r3, r1
 8103550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103554:	e00a      	b.n	810356c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103556:	683b      	ldr	r3, [r7, #0]
 8103558:	b2da      	uxtb	r2, r3
 810355a:	4908      	ldr	r1, [pc, #32]	; (810357c <__NVIC_SetPriority+0x50>)
 810355c:	88fb      	ldrh	r3, [r7, #6]
 810355e:	f003 030f 	and.w	r3, r3, #15
 8103562:	3b04      	subs	r3, #4
 8103564:	0112      	lsls	r2, r2, #4
 8103566:	b2d2      	uxtb	r2, r2
 8103568:	440b      	add	r3, r1
 810356a:	761a      	strb	r2, [r3, #24]
}
 810356c:	bf00      	nop
 810356e:	370c      	adds	r7, #12
 8103570:	46bd      	mov	sp, r7
 8103572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103576:	4770      	bx	lr
 8103578:	e000e100 	.word	0xe000e100
 810357c:	e000ed00 	.word	0xe000ed00

08103580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103580:	b480      	push	{r7}
 8103582:	b089      	sub	sp, #36	; 0x24
 8103584:	af00      	add	r7, sp, #0
 8103586:	60f8      	str	r0, [r7, #12]
 8103588:	60b9      	str	r1, [r7, #8]
 810358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810358c:	68fb      	ldr	r3, [r7, #12]
 810358e:	f003 0307 	and.w	r3, r3, #7
 8103592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103594:	69fb      	ldr	r3, [r7, #28]
 8103596:	f1c3 0307 	rsb	r3, r3, #7
 810359a:	2b04      	cmp	r3, #4
 810359c:	bf28      	it	cs
 810359e:	2304      	movcs	r3, #4
 81035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81035a2:	69fb      	ldr	r3, [r7, #28]
 81035a4:	3304      	adds	r3, #4
 81035a6:	2b06      	cmp	r3, #6
 81035a8:	d902      	bls.n	81035b0 <NVIC_EncodePriority+0x30>
 81035aa:	69fb      	ldr	r3, [r7, #28]
 81035ac:	3b03      	subs	r3, #3
 81035ae:	e000      	b.n	81035b2 <NVIC_EncodePriority+0x32>
 81035b0:	2300      	movs	r3, #0
 81035b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81035b4:	f04f 32ff 	mov.w	r2, #4294967295
 81035b8:	69bb      	ldr	r3, [r7, #24]
 81035ba:	fa02 f303 	lsl.w	r3, r2, r3
 81035be:	43da      	mvns	r2, r3
 81035c0:	68bb      	ldr	r3, [r7, #8]
 81035c2:	401a      	ands	r2, r3
 81035c4:	697b      	ldr	r3, [r7, #20]
 81035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81035c8:	f04f 31ff 	mov.w	r1, #4294967295
 81035cc:	697b      	ldr	r3, [r7, #20]
 81035ce:	fa01 f303 	lsl.w	r3, r1, r3
 81035d2:	43d9      	mvns	r1, r3
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81035d8:	4313      	orrs	r3, r2
         );
}
 81035da:	4618      	mov	r0, r3
 81035dc:	3724      	adds	r7, #36	; 0x24
 81035de:	46bd      	mov	sp, r7
 81035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e4:	4770      	bx	lr
	...

081035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81035e8:	b580      	push	{r7, lr}
 81035ea:	b082      	sub	sp, #8
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	3b01      	subs	r3, #1
 81035f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81035f8:	d301      	bcc.n	81035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81035fa:	2301      	movs	r3, #1
 81035fc:	e00f      	b.n	810361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81035fe:	4a0a      	ldr	r2, [pc, #40]	; (8103628 <SysTick_Config+0x40>)
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	3b01      	subs	r3, #1
 8103604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103606:	210f      	movs	r1, #15
 8103608:	f04f 30ff 	mov.w	r0, #4294967295
 810360c:	f7ff ff8e 	bl	810352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103610:	4b05      	ldr	r3, [pc, #20]	; (8103628 <SysTick_Config+0x40>)
 8103612:	2200      	movs	r2, #0
 8103614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103616:	4b04      	ldr	r3, [pc, #16]	; (8103628 <SysTick_Config+0x40>)
 8103618:	2207      	movs	r2, #7
 810361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810361c:	2300      	movs	r3, #0
}
 810361e:	4618      	mov	r0, r3
 8103620:	3708      	adds	r7, #8
 8103622:	46bd      	mov	sp, r7
 8103624:	bd80      	pop	{r7, pc}
 8103626:	bf00      	nop
 8103628:	e000e010 	.word	0xe000e010

0810362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810362c:	b580      	push	{r7, lr}
 810362e:	b082      	sub	sp, #8
 8103630:	af00      	add	r7, sp, #0
 8103632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103634:	6878      	ldr	r0, [r7, #4]
 8103636:	f7ff ff29 	bl	810348c <__NVIC_SetPriorityGrouping>
}
 810363a:	bf00      	nop
 810363c:	3708      	adds	r7, #8
 810363e:	46bd      	mov	sp, r7
 8103640:	bd80      	pop	{r7, pc}

08103642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103642:	b580      	push	{r7, lr}
 8103644:	b086      	sub	sp, #24
 8103646:	af00      	add	r7, sp, #0
 8103648:	4603      	mov	r3, r0
 810364a:	60b9      	str	r1, [r7, #8]
 810364c:	607a      	str	r2, [r7, #4]
 810364e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103650:	f7ff ff40 	bl	81034d4 <__NVIC_GetPriorityGrouping>
 8103654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103656:	687a      	ldr	r2, [r7, #4]
 8103658:	68b9      	ldr	r1, [r7, #8]
 810365a:	6978      	ldr	r0, [r7, #20]
 810365c:	f7ff ff90 	bl	8103580 <NVIC_EncodePriority>
 8103660:	4602      	mov	r2, r0
 8103662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103666:	4611      	mov	r1, r2
 8103668:	4618      	mov	r0, r3
 810366a:	f7ff ff5f 	bl	810352c <__NVIC_SetPriority>
}
 810366e:	bf00      	nop
 8103670:	3718      	adds	r7, #24
 8103672:	46bd      	mov	sp, r7
 8103674:	bd80      	pop	{r7, pc}

08103676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103676:	b580      	push	{r7, lr}
 8103678:	b082      	sub	sp, #8
 810367a:	af00      	add	r7, sp, #0
 810367c:	4603      	mov	r3, r0
 810367e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103684:	4618      	mov	r0, r3
 8103686:	f7ff ff33 	bl	81034f0 <__NVIC_EnableIRQ>
}
 810368a:	bf00      	nop
 810368c:	3708      	adds	r7, #8
 810368e:	46bd      	mov	sp, r7
 8103690:	bd80      	pop	{r7, pc}

08103692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103692:	b580      	push	{r7, lr}
 8103694:	b082      	sub	sp, #8
 8103696:	af00      	add	r7, sp, #0
 8103698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810369a:	6878      	ldr	r0, [r7, #4]
 810369c:	f7ff ffa4 	bl	81035e8 <SysTick_Config>
 81036a0:	4603      	mov	r3, r0
}
 81036a2:	4618      	mov	r0, r3
 81036a4:	3708      	adds	r7, #8
 81036a6:	46bd      	mov	sp, r7
 81036a8:	bd80      	pop	{r7, pc}
	...

081036ac <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81036ac:	b480      	push	{r7}
 81036ae:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81036b0:	4b07      	ldr	r3, [pc, #28]	; (81036d0 <HAL_GetCurrentCPUID+0x24>)
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	091b      	lsrs	r3, r3, #4
 81036b6:	f003 030f 	and.w	r3, r3, #15
 81036ba:	2b07      	cmp	r3, #7
 81036bc:	d101      	bne.n	81036c2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81036be:	2303      	movs	r3, #3
 81036c0:	e000      	b.n	81036c4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81036c2:	2301      	movs	r3, #1
  }
}
 81036c4:	4618      	mov	r0, r3
 81036c6:	46bd      	mov	sp, r7
 81036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036cc:	4770      	bx	lr
 81036ce:	bf00      	nop
 81036d0:	e000ed00 	.word	0xe000ed00

081036d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81036d4:	b580      	push	{r7, lr}
 81036d6:	b086      	sub	sp, #24
 81036d8:	af00      	add	r7, sp, #0
 81036da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81036dc:	f7ff fea6 	bl	810342c <HAL_GetTick>
 81036e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d101      	bne.n	81036ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81036e8:	2301      	movs	r3, #1
 81036ea:	e314      	b.n	8103d16 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	681b      	ldr	r3, [r3, #0]
 81036f0:	4a66      	ldr	r2, [pc, #408]	; (810388c <HAL_DMA_Init+0x1b8>)
 81036f2:	4293      	cmp	r3, r2
 81036f4:	d04a      	beq.n	810378c <HAL_DMA_Init+0xb8>
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	4a65      	ldr	r2, [pc, #404]	; (8103890 <HAL_DMA_Init+0x1bc>)
 81036fc:	4293      	cmp	r3, r2
 81036fe:	d045      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103700:	687b      	ldr	r3, [r7, #4]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	4a63      	ldr	r2, [pc, #396]	; (8103894 <HAL_DMA_Init+0x1c0>)
 8103706:	4293      	cmp	r3, r2
 8103708:	d040      	beq.n	810378c <HAL_DMA_Init+0xb8>
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	681b      	ldr	r3, [r3, #0]
 810370e:	4a62      	ldr	r2, [pc, #392]	; (8103898 <HAL_DMA_Init+0x1c4>)
 8103710:	4293      	cmp	r3, r2
 8103712:	d03b      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	681b      	ldr	r3, [r3, #0]
 8103718:	4a60      	ldr	r2, [pc, #384]	; (810389c <HAL_DMA_Init+0x1c8>)
 810371a:	4293      	cmp	r3, r2
 810371c:	d036      	beq.n	810378c <HAL_DMA_Init+0xb8>
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	4a5f      	ldr	r2, [pc, #380]	; (81038a0 <HAL_DMA_Init+0x1cc>)
 8103724:	4293      	cmp	r3, r2
 8103726:	d031      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	4a5d      	ldr	r2, [pc, #372]	; (81038a4 <HAL_DMA_Init+0x1d0>)
 810372e:	4293      	cmp	r3, r2
 8103730:	d02c      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103732:	687b      	ldr	r3, [r7, #4]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	4a5c      	ldr	r2, [pc, #368]	; (81038a8 <HAL_DMA_Init+0x1d4>)
 8103738:	4293      	cmp	r3, r2
 810373a:	d027      	beq.n	810378c <HAL_DMA_Init+0xb8>
 810373c:	687b      	ldr	r3, [r7, #4]
 810373e:	681b      	ldr	r3, [r3, #0]
 8103740:	4a5a      	ldr	r2, [pc, #360]	; (81038ac <HAL_DMA_Init+0x1d8>)
 8103742:	4293      	cmp	r3, r2
 8103744:	d022      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103746:	687b      	ldr	r3, [r7, #4]
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	4a59      	ldr	r2, [pc, #356]	; (81038b0 <HAL_DMA_Init+0x1dc>)
 810374c:	4293      	cmp	r3, r2
 810374e:	d01d      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	681b      	ldr	r3, [r3, #0]
 8103754:	4a57      	ldr	r2, [pc, #348]	; (81038b4 <HAL_DMA_Init+0x1e0>)
 8103756:	4293      	cmp	r3, r2
 8103758:	d018      	beq.n	810378c <HAL_DMA_Init+0xb8>
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	4a56      	ldr	r2, [pc, #344]	; (81038b8 <HAL_DMA_Init+0x1e4>)
 8103760:	4293      	cmp	r3, r2
 8103762:	d013      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	4a54      	ldr	r2, [pc, #336]	; (81038bc <HAL_DMA_Init+0x1e8>)
 810376a:	4293      	cmp	r3, r2
 810376c:	d00e      	beq.n	810378c <HAL_DMA_Init+0xb8>
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	681b      	ldr	r3, [r3, #0]
 8103772:	4a53      	ldr	r2, [pc, #332]	; (81038c0 <HAL_DMA_Init+0x1ec>)
 8103774:	4293      	cmp	r3, r2
 8103776:	d009      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	4a51      	ldr	r2, [pc, #324]	; (81038c4 <HAL_DMA_Init+0x1f0>)
 810377e:	4293      	cmp	r3, r2
 8103780:	d004      	beq.n	810378c <HAL_DMA_Init+0xb8>
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	4a50      	ldr	r2, [pc, #320]	; (81038c8 <HAL_DMA_Init+0x1f4>)
 8103788:	4293      	cmp	r3, r2
 810378a:	d101      	bne.n	8103790 <HAL_DMA_Init+0xbc>
 810378c:	2301      	movs	r3, #1
 810378e:	e000      	b.n	8103792 <HAL_DMA_Init+0xbe>
 8103790:	2300      	movs	r3, #0
 8103792:	2b00      	cmp	r3, #0
 8103794:	f000 813b 	beq.w	8103a0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	2200      	movs	r2, #0
 810379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	2202      	movs	r2, #2
 81037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	4a37      	ldr	r2, [pc, #220]	; (810388c <HAL_DMA_Init+0x1b8>)
 81037ae:	4293      	cmp	r3, r2
 81037b0:	d04a      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	4a36      	ldr	r2, [pc, #216]	; (8103890 <HAL_DMA_Init+0x1bc>)
 81037b8:	4293      	cmp	r3, r2
 81037ba:	d045      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	4a34      	ldr	r2, [pc, #208]	; (8103894 <HAL_DMA_Init+0x1c0>)
 81037c2:	4293      	cmp	r3, r2
 81037c4:	d040      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	4a33      	ldr	r2, [pc, #204]	; (8103898 <HAL_DMA_Init+0x1c4>)
 81037cc:	4293      	cmp	r3, r2
 81037ce:	d03b      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	681b      	ldr	r3, [r3, #0]
 81037d4:	4a31      	ldr	r2, [pc, #196]	; (810389c <HAL_DMA_Init+0x1c8>)
 81037d6:	4293      	cmp	r3, r2
 81037d8:	d036      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	4a30      	ldr	r2, [pc, #192]	; (81038a0 <HAL_DMA_Init+0x1cc>)
 81037e0:	4293      	cmp	r3, r2
 81037e2:	d031      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	4a2e      	ldr	r2, [pc, #184]	; (81038a4 <HAL_DMA_Init+0x1d0>)
 81037ea:	4293      	cmp	r3, r2
 81037ec:	d02c      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	681b      	ldr	r3, [r3, #0]
 81037f2:	4a2d      	ldr	r2, [pc, #180]	; (81038a8 <HAL_DMA_Init+0x1d4>)
 81037f4:	4293      	cmp	r3, r2
 81037f6:	d027      	beq.n	8103848 <HAL_DMA_Init+0x174>
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	4a2b      	ldr	r2, [pc, #172]	; (81038ac <HAL_DMA_Init+0x1d8>)
 81037fe:	4293      	cmp	r3, r2
 8103800:	d022      	beq.n	8103848 <HAL_DMA_Init+0x174>
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	4a2a      	ldr	r2, [pc, #168]	; (81038b0 <HAL_DMA_Init+0x1dc>)
 8103808:	4293      	cmp	r3, r2
 810380a:	d01d      	beq.n	8103848 <HAL_DMA_Init+0x174>
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	681b      	ldr	r3, [r3, #0]
 8103810:	4a28      	ldr	r2, [pc, #160]	; (81038b4 <HAL_DMA_Init+0x1e0>)
 8103812:	4293      	cmp	r3, r2
 8103814:	d018      	beq.n	8103848 <HAL_DMA_Init+0x174>
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	4a27      	ldr	r2, [pc, #156]	; (81038b8 <HAL_DMA_Init+0x1e4>)
 810381c:	4293      	cmp	r3, r2
 810381e:	d013      	beq.n	8103848 <HAL_DMA_Init+0x174>
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	4a25      	ldr	r2, [pc, #148]	; (81038bc <HAL_DMA_Init+0x1e8>)
 8103826:	4293      	cmp	r3, r2
 8103828:	d00e      	beq.n	8103848 <HAL_DMA_Init+0x174>
 810382a:	687b      	ldr	r3, [r7, #4]
 810382c:	681b      	ldr	r3, [r3, #0]
 810382e:	4a24      	ldr	r2, [pc, #144]	; (81038c0 <HAL_DMA_Init+0x1ec>)
 8103830:	4293      	cmp	r3, r2
 8103832:	d009      	beq.n	8103848 <HAL_DMA_Init+0x174>
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	4a22      	ldr	r2, [pc, #136]	; (81038c4 <HAL_DMA_Init+0x1f0>)
 810383a:	4293      	cmp	r3, r2
 810383c:	d004      	beq.n	8103848 <HAL_DMA_Init+0x174>
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	4a21      	ldr	r2, [pc, #132]	; (81038c8 <HAL_DMA_Init+0x1f4>)
 8103844:	4293      	cmp	r3, r2
 8103846:	d108      	bne.n	810385a <HAL_DMA_Init+0x186>
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	681a      	ldr	r2, [r3, #0]
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	f022 0201 	bic.w	r2, r2, #1
 8103856:	601a      	str	r2, [r3, #0]
 8103858:	e007      	b.n	810386a <HAL_DMA_Init+0x196>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	681a      	ldr	r2, [r3, #0]
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	f022 0201 	bic.w	r2, r2, #1
 8103868:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810386a:	e02f      	b.n	81038cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810386c:	f7ff fdde 	bl	810342c <HAL_GetTick>
 8103870:	4602      	mov	r2, r0
 8103872:	693b      	ldr	r3, [r7, #16]
 8103874:	1ad3      	subs	r3, r2, r3
 8103876:	2b05      	cmp	r3, #5
 8103878:	d928      	bls.n	81038cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	2220      	movs	r2, #32
 810387e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	2203      	movs	r2, #3
 8103884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103888:	2301      	movs	r3, #1
 810388a:	e244      	b.n	8103d16 <HAL_DMA_Init+0x642>
 810388c:	40020010 	.word	0x40020010
 8103890:	40020028 	.word	0x40020028
 8103894:	40020040 	.word	0x40020040
 8103898:	40020058 	.word	0x40020058
 810389c:	40020070 	.word	0x40020070
 81038a0:	40020088 	.word	0x40020088
 81038a4:	400200a0 	.word	0x400200a0
 81038a8:	400200b8 	.word	0x400200b8
 81038ac:	40020410 	.word	0x40020410
 81038b0:	40020428 	.word	0x40020428
 81038b4:	40020440 	.word	0x40020440
 81038b8:	40020458 	.word	0x40020458
 81038bc:	40020470 	.word	0x40020470
 81038c0:	40020488 	.word	0x40020488
 81038c4:	400204a0 	.word	0x400204a0
 81038c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	681b      	ldr	r3, [r3, #0]
 81038d2:	f003 0301 	and.w	r3, r3, #1
 81038d6:	2b00      	cmp	r3, #0
 81038d8:	d1c8      	bne.n	810386c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	681b      	ldr	r3, [r3, #0]
 81038e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81038e2:	697a      	ldr	r2, [r7, #20]
 81038e4:	4b84      	ldr	r3, [pc, #528]	; (8103af8 <HAL_DMA_Init+0x424>)
 81038e6:	4013      	ands	r3, r2
 81038e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81038f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	691b      	ldr	r3, [r3, #16]
 81038f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81038fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	699b      	ldr	r3, [r3, #24]
 8103904:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810390a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	6a1b      	ldr	r3, [r3, #32]
 8103910:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103912:	697a      	ldr	r2, [r7, #20]
 8103914:	4313      	orrs	r3, r2
 8103916:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810391c:	2b04      	cmp	r3, #4
 810391e:	d107      	bne.n	8103930 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103928:	4313      	orrs	r3, r2
 810392a:	697a      	ldr	r2, [r7, #20]
 810392c:	4313      	orrs	r3, r2
 810392e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103930:	4b72      	ldr	r3, [pc, #456]	; (8103afc <HAL_DMA_Init+0x428>)
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	0c1b      	lsrs	r3, r3, #16
 8103936:	041b      	lsls	r3, r3, #16
 8103938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810393c:	d328      	bcc.n	8103990 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	685b      	ldr	r3, [r3, #4]
 8103942:	2b28      	cmp	r3, #40	; 0x28
 8103944:	d903      	bls.n	810394e <HAL_DMA_Init+0x27a>
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	685b      	ldr	r3, [r3, #4]
 810394a:	2b2e      	cmp	r3, #46	; 0x2e
 810394c:	d917      	bls.n	810397e <HAL_DMA_Init+0x2aa>
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	685b      	ldr	r3, [r3, #4]
 8103952:	2b3e      	cmp	r3, #62	; 0x3e
 8103954:	d903      	bls.n	810395e <HAL_DMA_Init+0x28a>
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	685b      	ldr	r3, [r3, #4]
 810395a:	2b42      	cmp	r3, #66	; 0x42
 810395c:	d90f      	bls.n	810397e <HAL_DMA_Init+0x2aa>
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	685b      	ldr	r3, [r3, #4]
 8103962:	2b46      	cmp	r3, #70	; 0x46
 8103964:	d903      	bls.n	810396e <HAL_DMA_Init+0x29a>
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	685b      	ldr	r3, [r3, #4]
 810396a:	2b48      	cmp	r3, #72	; 0x48
 810396c:	d907      	bls.n	810397e <HAL_DMA_Init+0x2aa>
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	685b      	ldr	r3, [r3, #4]
 8103972:	2b4e      	cmp	r3, #78	; 0x4e
 8103974:	d905      	bls.n	8103982 <HAL_DMA_Init+0x2ae>
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	685b      	ldr	r3, [r3, #4]
 810397a:	2b52      	cmp	r3, #82	; 0x52
 810397c:	d801      	bhi.n	8103982 <HAL_DMA_Init+0x2ae>
 810397e:	2301      	movs	r3, #1
 8103980:	e000      	b.n	8103984 <HAL_DMA_Init+0x2b0>
 8103982:	2300      	movs	r3, #0
 8103984:	2b00      	cmp	r3, #0
 8103986:	d003      	beq.n	8103990 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103988:	697b      	ldr	r3, [r7, #20]
 810398a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810398e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	697a      	ldr	r2, [r7, #20]
 8103996:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	695b      	ldr	r3, [r3, #20]
 810399e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81039a0:	697b      	ldr	r3, [r7, #20]
 81039a2:	f023 0307 	bic.w	r3, r3, #7
 81039a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039ac:	697a      	ldr	r2, [r7, #20]
 81039ae:	4313      	orrs	r3, r2
 81039b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039b6:	2b04      	cmp	r3, #4
 81039b8:	d117      	bne.n	81039ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039be:	697a      	ldr	r2, [r7, #20]
 81039c0:	4313      	orrs	r3, r2
 81039c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039c8:	2b00      	cmp	r3, #0
 81039ca:	d00e      	beq.n	81039ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81039cc:	6878      	ldr	r0, [r7, #4]
 81039ce:	f002 fb49 	bl	8106064 <DMA_CheckFifoParam>
 81039d2:	4603      	mov	r3, r0
 81039d4:	2b00      	cmp	r3, #0
 81039d6:	d008      	beq.n	81039ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	2240      	movs	r2, #64	; 0x40
 81039dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	2201      	movs	r2, #1
 81039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81039e6:	2301      	movs	r3, #1
 81039e8:	e195      	b.n	8103d16 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	697a      	ldr	r2, [r7, #20]
 81039f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81039f2:	6878      	ldr	r0, [r7, #4]
 81039f4:	f002 fa84 	bl	8105f00 <DMA_CalcBaseAndBitshift>
 81039f8:	4603      	mov	r3, r0
 81039fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a00:	f003 031f 	and.w	r3, r3, #31
 8103a04:	223f      	movs	r2, #63	; 0x3f
 8103a06:	409a      	lsls	r2, r3
 8103a08:	68bb      	ldr	r3, [r7, #8]
 8103a0a:	609a      	str	r2, [r3, #8]
 8103a0c:	e0cb      	b.n	8103ba6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	4a3b      	ldr	r2, [pc, #236]	; (8103b00 <HAL_DMA_Init+0x42c>)
 8103a14:	4293      	cmp	r3, r2
 8103a16:	d022      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	4a39      	ldr	r2, [pc, #228]	; (8103b04 <HAL_DMA_Init+0x430>)
 8103a1e:	4293      	cmp	r3, r2
 8103a20:	d01d      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4a38      	ldr	r2, [pc, #224]	; (8103b08 <HAL_DMA_Init+0x434>)
 8103a28:	4293      	cmp	r3, r2
 8103a2a:	d018      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	4a36      	ldr	r2, [pc, #216]	; (8103b0c <HAL_DMA_Init+0x438>)
 8103a32:	4293      	cmp	r3, r2
 8103a34:	d013      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	4a35      	ldr	r2, [pc, #212]	; (8103b10 <HAL_DMA_Init+0x43c>)
 8103a3c:	4293      	cmp	r3, r2
 8103a3e:	d00e      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	4a33      	ldr	r2, [pc, #204]	; (8103b14 <HAL_DMA_Init+0x440>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d009      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	4a32      	ldr	r2, [pc, #200]	; (8103b18 <HAL_DMA_Init+0x444>)
 8103a50:	4293      	cmp	r3, r2
 8103a52:	d004      	beq.n	8103a5e <HAL_DMA_Init+0x38a>
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	681b      	ldr	r3, [r3, #0]
 8103a58:	4a30      	ldr	r2, [pc, #192]	; (8103b1c <HAL_DMA_Init+0x448>)
 8103a5a:	4293      	cmp	r3, r2
 8103a5c:	d101      	bne.n	8103a62 <HAL_DMA_Init+0x38e>
 8103a5e:	2301      	movs	r3, #1
 8103a60:	e000      	b.n	8103a64 <HAL_DMA_Init+0x390>
 8103a62:	2300      	movs	r3, #0
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	f000 8095 	beq.w	8103b94 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	4a24      	ldr	r2, [pc, #144]	; (8103b00 <HAL_DMA_Init+0x42c>)
 8103a70:	4293      	cmp	r3, r2
 8103a72:	d021      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	4a22      	ldr	r2, [pc, #136]	; (8103b04 <HAL_DMA_Init+0x430>)
 8103a7a:	4293      	cmp	r3, r2
 8103a7c:	d01c      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	4a21      	ldr	r2, [pc, #132]	; (8103b08 <HAL_DMA_Init+0x434>)
 8103a84:	4293      	cmp	r3, r2
 8103a86:	d017      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	4a1f      	ldr	r2, [pc, #124]	; (8103b0c <HAL_DMA_Init+0x438>)
 8103a8e:	4293      	cmp	r3, r2
 8103a90:	d012      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	681b      	ldr	r3, [r3, #0]
 8103a96:	4a1e      	ldr	r2, [pc, #120]	; (8103b10 <HAL_DMA_Init+0x43c>)
 8103a98:	4293      	cmp	r3, r2
 8103a9a:	d00d      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	4a1c      	ldr	r2, [pc, #112]	; (8103b14 <HAL_DMA_Init+0x440>)
 8103aa2:	4293      	cmp	r3, r2
 8103aa4:	d008      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	4a1b      	ldr	r2, [pc, #108]	; (8103b18 <HAL_DMA_Init+0x444>)
 8103aac:	4293      	cmp	r3, r2
 8103aae:	d003      	beq.n	8103ab8 <HAL_DMA_Init+0x3e4>
 8103ab0:	687b      	ldr	r3, [r7, #4]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	4a19      	ldr	r2, [pc, #100]	; (8103b1c <HAL_DMA_Init+0x448>)
 8103ab6:	4293      	cmp	r3, r2
 8103ab8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	2200      	movs	r2, #0
 8103abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	2202      	movs	r2, #2
 8103ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103ad2:	697b      	ldr	r3, [r7, #20]
 8103ad4:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103ad8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103adc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	689b      	ldr	r3, [r3, #8]
 8103ae2:	2b40      	cmp	r3, #64	; 0x40
 8103ae4:	d01c      	beq.n	8103b20 <HAL_DMA_Init+0x44c>
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	689b      	ldr	r3, [r3, #8]
 8103aea:	2b80      	cmp	r3, #128	; 0x80
 8103aec:	d102      	bne.n	8103af4 <HAL_DMA_Init+0x420>
 8103aee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103af2:	e016      	b.n	8103b22 <HAL_DMA_Init+0x44e>
 8103af4:	2300      	movs	r3, #0
 8103af6:	e014      	b.n	8103b22 <HAL_DMA_Init+0x44e>
 8103af8:	fe10803f 	.word	0xfe10803f
 8103afc:	5c001000 	.word	0x5c001000
 8103b00:	58025408 	.word	0x58025408
 8103b04:	5802541c 	.word	0x5802541c
 8103b08:	58025430 	.word	0x58025430
 8103b0c:	58025444 	.word	0x58025444
 8103b10:	58025458 	.word	0x58025458
 8103b14:	5802546c 	.word	0x5802546c
 8103b18:	58025480 	.word	0x58025480
 8103b1c:	58025494 	.word	0x58025494
 8103b20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103b22:	687a      	ldr	r2, [r7, #4]
 8103b24:	68d2      	ldr	r2, [r2, #12]
 8103b26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	691b      	ldr	r3, [r3, #16]
 8103b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	695b      	ldr	r3, [r3, #20]
 8103b36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103b38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	699b      	ldr	r3, [r3, #24]
 8103b3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103b40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	69db      	ldr	r3, [r3, #28]
 8103b46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103b48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	6a1b      	ldr	r3, [r3, #32]
 8103b4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103b50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103b52:	697a      	ldr	r2, [r7, #20]
 8103b54:	4313      	orrs	r3, r2
 8103b56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681b      	ldr	r3, [r3, #0]
 8103b5c:	697a      	ldr	r2, [r7, #20]
 8103b5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	461a      	mov	r2, r3
 8103b66:	4b6e      	ldr	r3, [pc, #440]	; (8103d20 <HAL_DMA_Init+0x64c>)
 8103b68:	4413      	add	r3, r2
 8103b6a:	4a6e      	ldr	r2, [pc, #440]	; (8103d24 <HAL_DMA_Init+0x650>)
 8103b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8103b70:	091b      	lsrs	r3, r3, #4
 8103b72:	009a      	lsls	r2, r3, #2
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103b78:	6878      	ldr	r0, [r7, #4]
 8103b7a:	f002 f9c1 	bl	8105f00 <DMA_CalcBaseAndBitshift>
 8103b7e:	4603      	mov	r3, r0
 8103b80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b86:	f003 031f 	and.w	r3, r3, #31
 8103b8a:	2201      	movs	r2, #1
 8103b8c:	409a      	lsls	r2, r3
 8103b8e:	68fb      	ldr	r3, [r7, #12]
 8103b90:	605a      	str	r2, [r3, #4]
 8103b92:	e008      	b.n	8103ba6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	2240      	movs	r2, #64	; 0x40
 8103b98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	2203      	movs	r2, #3
 8103b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103ba2:	2301      	movs	r3, #1
 8103ba4:	e0b7      	b.n	8103d16 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a5f      	ldr	r2, [pc, #380]	; (8103d28 <HAL_DMA_Init+0x654>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d072      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	4a5d      	ldr	r2, [pc, #372]	; (8103d2c <HAL_DMA_Init+0x658>)
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d06d      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	4a5c      	ldr	r2, [pc, #368]	; (8103d30 <HAL_DMA_Init+0x65c>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d068      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	4a5a      	ldr	r2, [pc, #360]	; (8103d34 <HAL_DMA_Init+0x660>)
 8103bca:	4293      	cmp	r3, r2
 8103bcc:	d063      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	681b      	ldr	r3, [r3, #0]
 8103bd2:	4a59      	ldr	r2, [pc, #356]	; (8103d38 <HAL_DMA_Init+0x664>)
 8103bd4:	4293      	cmp	r3, r2
 8103bd6:	d05e      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	681b      	ldr	r3, [r3, #0]
 8103bdc:	4a57      	ldr	r2, [pc, #348]	; (8103d3c <HAL_DMA_Init+0x668>)
 8103bde:	4293      	cmp	r3, r2
 8103be0:	d059      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	4a56      	ldr	r2, [pc, #344]	; (8103d40 <HAL_DMA_Init+0x66c>)
 8103be8:	4293      	cmp	r3, r2
 8103bea:	d054      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	4a54      	ldr	r2, [pc, #336]	; (8103d44 <HAL_DMA_Init+0x670>)
 8103bf2:	4293      	cmp	r3, r2
 8103bf4:	d04f      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	681b      	ldr	r3, [r3, #0]
 8103bfa:	4a53      	ldr	r2, [pc, #332]	; (8103d48 <HAL_DMA_Init+0x674>)
 8103bfc:	4293      	cmp	r3, r2
 8103bfe:	d04a      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	4a51      	ldr	r2, [pc, #324]	; (8103d4c <HAL_DMA_Init+0x678>)
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d045      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	4a50      	ldr	r2, [pc, #320]	; (8103d50 <HAL_DMA_Init+0x67c>)
 8103c10:	4293      	cmp	r3, r2
 8103c12:	d040      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	4a4e      	ldr	r2, [pc, #312]	; (8103d54 <HAL_DMA_Init+0x680>)
 8103c1a:	4293      	cmp	r3, r2
 8103c1c:	d03b      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	4a4d      	ldr	r2, [pc, #308]	; (8103d58 <HAL_DMA_Init+0x684>)
 8103c24:	4293      	cmp	r3, r2
 8103c26:	d036      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	4a4b      	ldr	r2, [pc, #300]	; (8103d5c <HAL_DMA_Init+0x688>)
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d031      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	4a4a      	ldr	r2, [pc, #296]	; (8103d60 <HAL_DMA_Init+0x68c>)
 8103c38:	4293      	cmp	r3, r2
 8103c3a:	d02c      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	681b      	ldr	r3, [r3, #0]
 8103c40:	4a48      	ldr	r2, [pc, #288]	; (8103d64 <HAL_DMA_Init+0x690>)
 8103c42:	4293      	cmp	r3, r2
 8103c44:	d027      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	681b      	ldr	r3, [r3, #0]
 8103c4a:	4a47      	ldr	r2, [pc, #284]	; (8103d68 <HAL_DMA_Init+0x694>)
 8103c4c:	4293      	cmp	r3, r2
 8103c4e:	d022      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	4a45      	ldr	r2, [pc, #276]	; (8103d6c <HAL_DMA_Init+0x698>)
 8103c56:	4293      	cmp	r3, r2
 8103c58:	d01d      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	4a44      	ldr	r2, [pc, #272]	; (8103d70 <HAL_DMA_Init+0x69c>)
 8103c60:	4293      	cmp	r3, r2
 8103c62:	d018      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	4a42      	ldr	r2, [pc, #264]	; (8103d74 <HAL_DMA_Init+0x6a0>)
 8103c6a:	4293      	cmp	r3, r2
 8103c6c:	d013      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	4a41      	ldr	r2, [pc, #260]	; (8103d78 <HAL_DMA_Init+0x6a4>)
 8103c74:	4293      	cmp	r3, r2
 8103c76:	d00e      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	4a3f      	ldr	r2, [pc, #252]	; (8103d7c <HAL_DMA_Init+0x6a8>)
 8103c7e:	4293      	cmp	r3, r2
 8103c80:	d009      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4a3e      	ldr	r2, [pc, #248]	; (8103d80 <HAL_DMA_Init+0x6ac>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d004      	beq.n	8103c96 <HAL_DMA_Init+0x5c2>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	4a3c      	ldr	r2, [pc, #240]	; (8103d84 <HAL_DMA_Init+0x6b0>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d101      	bne.n	8103c9a <HAL_DMA_Init+0x5c6>
 8103c96:	2301      	movs	r3, #1
 8103c98:	e000      	b.n	8103c9c <HAL_DMA_Init+0x5c8>
 8103c9a:	2300      	movs	r3, #0
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d032      	beq.n	8103d06 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103ca0:	6878      	ldr	r0, [r7, #4]
 8103ca2:	f002 fa5b 	bl	810615c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	689b      	ldr	r3, [r3, #8]
 8103caa:	2b80      	cmp	r3, #128	; 0x80
 8103cac:	d102      	bne.n	8103cb4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	2200      	movs	r2, #0
 8103cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	685a      	ldr	r2, [r3, #4]
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103cbc:	b2d2      	uxtb	r2, r2
 8103cbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103cc4:	687a      	ldr	r2, [r7, #4]
 8103cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103cc8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	685b      	ldr	r3, [r3, #4]
 8103cce:	2b00      	cmp	r3, #0
 8103cd0:	d010      	beq.n	8103cf4 <HAL_DMA_Init+0x620>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	685b      	ldr	r3, [r3, #4]
 8103cd6:	2b08      	cmp	r3, #8
 8103cd8:	d80c      	bhi.n	8103cf4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103cda:	6878      	ldr	r0, [r7, #4]
 8103cdc:	f002 fad8 	bl	8106290 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103ce4:	2200      	movs	r2, #0
 8103ce6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103cec:	687a      	ldr	r2, [r7, #4]
 8103cee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103cf0:	605a      	str	r2, [r3, #4]
 8103cf2:	e008      	b.n	8103d06 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8103cf4:	687b      	ldr	r3, [r7, #4]
 8103cf6:	2200      	movs	r2, #0
 8103cf8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	2200      	movs	r2, #0
 8103cfe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	2200      	movs	r2, #0
 8103d04:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	2200      	movs	r2, #0
 8103d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	2201      	movs	r2, #1
 8103d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103d14:	2300      	movs	r3, #0
}
 8103d16:	4618      	mov	r0, r3
 8103d18:	3718      	adds	r7, #24
 8103d1a:	46bd      	mov	sp, r7
 8103d1c:	bd80      	pop	{r7, pc}
 8103d1e:	bf00      	nop
 8103d20:	a7fdabf8 	.word	0xa7fdabf8
 8103d24:	cccccccd 	.word	0xcccccccd
 8103d28:	40020010 	.word	0x40020010
 8103d2c:	40020028 	.word	0x40020028
 8103d30:	40020040 	.word	0x40020040
 8103d34:	40020058 	.word	0x40020058
 8103d38:	40020070 	.word	0x40020070
 8103d3c:	40020088 	.word	0x40020088
 8103d40:	400200a0 	.word	0x400200a0
 8103d44:	400200b8 	.word	0x400200b8
 8103d48:	40020410 	.word	0x40020410
 8103d4c:	40020428 	.word	0x40020428
 8103d50:	40020440 	.word	0x40020440
 8103d54:	40020458 	.word	0x40020458
 8103d58:	40020470 	.word	0x40020470
 8103d5c:	40020488 	.word	0x40020488
 8103d60:	400204a0 	.word	0x400204a0
 8103d64:	400204b8 	.word	0x400204b8
 8103d68:	58025408 	.word	0x58025408
 8103d6c:	5802541c 	.word	0x5802541c
 8103d70:	58025430 	.word	0x58025430
 8103d74:	58025444 	.word	0x58025444
 8103d78:	58025458 	.word	0x58025458
 8103d7c:	5802546c 	.word	0x5802546c
 8103d80:	58025480 	.word	0x58025480
 8103d84:	58025494 	.word	0x58025494

08103d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103d88:	b580      	push	{r7, lr}
 8103d8a:	b086      	sub	sp, #24
 8103d8c:	af00      	add	r7, sp, #0
 8103d8e:	60f8      	str	r0, [r7, #12]
 8103d90:	60b9      	str	r1, [r7, #8]
 8103d92:	607a      	str	r2, [r7, #4]
 8103d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103d96:	2300      	movs	r3, #0
 8103d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103d9a:	68fb      	ldr	r3, [r7, #12]
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d101      	bne.n	8103da4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8103da0:	2301      	movs	r3, #1
 8103da2:	e226      	b.n	81041f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8103da4:	68fb      	ldr	r3, [r7, #12]
 8103da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8103daa:	2b01      	cmp	r3, #1
 8103dac:	d101      	bne.n	8103db2 <HAL_DMA_Start_IT+0x2a>
 8103dae:	2302      	movs	r3, #2
 8103db0:	e21f      	b.n	81041f2 <HAL_DMA_Start_IT+0x46a>
 8103db2:	68fb      	ldr	r3, [r7, #12]
 8103db4:	2201      	movs	r2, #1
 8103db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8103dba:	68fb      	ldr	r3, [r7, #12]
 8103dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103dc0:	b2db      	uxtb	r3, r3
 8103dc2:	2b01      	cmp	r3, #1
 8103dc4:	f040 820a 	bne.w	81041dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103dc8:	68fb      	ldr	r3, [r7, #12]
 8103dca:	2202      	movs	r2, #2
 8103dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103dd0:	68fb      	ldr	r3, [r7, #12]
 8103dd2:	2200      	movs	r2, #0
 8103dd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103dd6:	68fb      	ldr	r3, [r7, #12]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	4a68      	ldr	r2, [pc, #416]	; (8103f7c <HAL_DMA_Start_IT+0x1f4>)
 8103ddc:	4293      	cmp	r3, r2
 8103dde:	d04a      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a66      	ldr	r2, [pc, #408]	; (8103f80 <HAL_DMA_Start_IT+0x1f8>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d045      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103dea:	68fb      	ldr	r3, [r7, #12]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	4a65      	ldr	r2, [pc, #404]	; (8103f84 <HAL_DMA_Start_IT+0x1fc>)
 8103df0:	4293      	cmp	r3, r2
 8103df2:	d040      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	4a63      	ldr	r2, [pc, #396]	; (8103f88 <HAL_DMA_Start_IT+0x200>)
 8103dfa:	4293      	cmp	r3, r2
 8103dfc:	d03b      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103dfe:	68fb      	ldr	r3, [r7, #12]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	4a62      	ldr	r2, [pc, #392]	; (8103f8c <HAL_DMA_Start_IT+0x204>)
 8103e04:	4293      	cmp	r3, r2
 8103e06:	d036      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e08:	68fb      	ldr	r3, [r7, #12]
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	4a60      	ldr	r2, [pc, #384]	; (8103f90 <HAL_DMA_Start_IT+0x208>)
 8103e0e:	4293      	cmp	r3, r2
 8103e10:	d031      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	681b      	ldr	r3, [r3, #0]
 8103e16:	4a5f      	ldr	r2, [pc, #380]	; (8103f94 <HAL_DMA_Start_IT+0x20c>)
 8103e18:	4293      	cmp	r3, r2
 8103e1a:	d02c      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	4a5d      	ldr	r2, [pc, #372]	; (8103f98 <HAL_DMA_Start_IT+0x210>)
 8103e22:	4293      	cmp	r3, r2
 8103e24:	d027      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e26:	68fb      	ldr	r3, [r7, #12]
 8103e28:	681b      	ldr	r3, [r3, #0]
 8103e2a:	4a5c      	ldr	r2, [pc, #368]	; (8103f9c <HAL_DMA_Start_IT+0x214>)
 8103e2c:	4293      	cmp	r3, r2
 8103e2e:	d022      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e30:	68fb      	ldr	r3, [r7, #12]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	4a5a      	ldr	r2, [pc, #360]	; (8103fa0 <HAL_DMA_Start_IT+0x218>)
 8103e36:	4293      	cmp	r3, r2
 8103e38:	d01d      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	4a59      	ldr	r2, [pc, #356]	; (8103fa4 <HAL_DMA_Start_IT+0x21c>)
 8103e40:	4293      	cmp	r3, r2
 8103e42:	d018      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e44:	68fb      	ldr	r3, [r7, #12]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	4a57      	ldr	r2, [pc, #348]	; (8103fa8 <HAL_DMA_Start_IT+0x220>)
 8103e4a:	4293      	cmp	r3, r2
 8103e4c:	d013      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	4a56      	ldr	r2, [pc, #344]	; (8103fac <HAL_DMA_Start_IT+0x224>)
 8103e54:	4293      	cmp	r3, r2
 8103e56:	d00e      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e58:	68fb      	ldr	r3, [r7, #12]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	4a54      	ldr	r2, [pc, #336]	; (8103fb0 <HAL_DMA_Start_IT+0x228>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d009      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e62:	68fb      	ldr	r3, [r7, #12]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a53      	ldr	r2, [pc, #332]	; (8103fb4 <HAL_DMA_Start_IT+0x22c>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d004      	beq.n	8103e76 <HAL_DMA_Start_IT+0xee>
 8103e6c:	68fb      	ldr	r3, [r7, #12]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a51      	ldr	r2, [pc, #324]	; (8103fb8 <HAL_DMA_Start_IT+0x230>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d108      	bne.n	8103e88 <HAL_DMA_Start_IT+0x100>
 8103e76:	68fb      	ldr	r3, [r7, #12]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	681a      	ldr	r2, [r3, #0]
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	f022 0201 	bic.w	r2, r2, #1
 8103e84:	601a      	str	r2, [r3, #0]
 8103e86:	e007      	b.n	8103e98 <HAL_DMA_Start_IT+0x110>
 8103e88:	68fb      	ldr	r3, [r7, #12]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	681a      	ldr	r2, [r3, #0]
 8103e8e:	68fb      	ldr	r3, [r7, #12]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	f022 0201 	bic.w	r2, r2, #1
 8103e96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103e98:	683b      	ldr	r3, [r7, #0]
 8103e9a:	687a      	ldr	r2, [r7, #4]
 8103e9c:	68b9      	ldr	r1, [r7, #8]
 8103e9e:	68f8      	ldr	r0, [r7, #12]
 8103ea0:	f001 fe82 	bl	8105ba8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	4a34      	ldr	r2, [pc, #208]	; (8103f7c <HAL_DMA_Start_IT+0x1f4>)
 8103eaa:	4293      	cmp	r3, r2
 8103eac:	d04a      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103eae:	68fb      	ldr	r3, [r7, #12]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	4a33      	ldr	r2, [pc, #204]	; (8103f80 <HAL_DMA_Start_IT+0x1f8>)
 8103eb4:	4293      	cmp	r3, r2
 8103eb6:	d045      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	4a31      	ldr	r2, [pc, #196]	; (8103f84 <HAL_DMA_Start_IT+0x1fc>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d040      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103ec2:	68fb      	ldr	r3, [r7, #12]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a30      	ldr	r2, [pc, #192]	; (8103f88 <HAL_DMA_Start_IT+0x200>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d03b      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	4a2e      	ldr	r2, [pc, #184]	; (8103f8c <HAL_DMA_Start_IT+0x204>)
 8103ed2:	4293      	cmp	r3, r2
 8103ed4:	d036      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103ed6:	68fb      	ldr	r3, [r7, #12]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a2d      	ldr	r2, [pc, #180]	; (8103f90 <HAL_DMA_Start_IT+0x208>)
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d031      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	4a2b      	ldr	r2, [pc, #172]	; (8103f94 <HAL_DMA_Start_IT+0x20c>)
 8103ee6:	4293      	cmp	r3, r2
 8103ee8:	d02c      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103eea:	68fb      	ldr	r3, [r7, #12]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	4a2a      	ldr	r2, [pc, #168]	; (8103f98 <HAL_DMA_Start_IT+0x210>)
 8103ef0:	4293      	cmp	r3, r2
 8103ef2:	d027      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103ef4:	68fb      	ldr	r3, [r7, #12]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a28      	ldr	r2, [pc, #160]	; (8103f9c <HAL_DMA_Start_IT+0x214>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d022      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103efe:	68fb      	ldr	r3, [r7, #12]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	4a27      	ldr	r2, [pc, #156]	; (8103fa0 <HAL_DMA_Start_IT+0x218>)
 8103f04:	4293      	cmp	r3, r2
 8103f06:	d01d      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	4a25      	ldr	r2, [pc, #148]	; (8103fa4 <HAL_DMA_Start_IT+0x21c>)
 8103f0e:	4293      	cmp	r3, r2
 8103f10:	d018      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103f12:	68fb      	ldr	r3, [r7, #12]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	4a24      	ldr	r2, [pc, #144]	; (8103fa8 <HAL_DMA_Start_IT+0x220>)
 8103f18:	4293      	cmp	r3, r2
 8103f1a:	d013      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4a22      	ldr	r2, [pc, #136]	; (8103fac <HAL_DMA_Start_IT+0x224>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	d00e      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103f26:	68fb      	ldr	r3, [r7, #12]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	4a21      	ldr	r2, [pc, #132]	; (8103fb0 <HAL_DMA_Start_IT+0x228>)
 8103f2c:	4293      	cmp	r3, r2
 8103f2e:	d009      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4a1f      	ldr	r2, [pc, #124]	; (8103fb4 <HAL_DMA_Start_IT+0x22c>)
 8103f36:	4293      	cmp	r3, r2
 8103f38:	d004      	beq.n	8103f44 <HAL_DMA_Start_IT+0x1bc>
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4a1e      	ldr	r2, [pc, #120]	; (8103fb8 <HAL_DMA_Start_IT+0x230>)
 8103f40:	4293      	cmp	r3, r2
 8103f42:	d101      	bne.n	8103f48 <HAL_DMA_Start_IT+0x1c0>
 8103f44:	2301      	movs	r3, #1
 8103f46:	e000      	b.n	8103f4a <HAL_DMA_Start_IT+0x1c2>
 8103f48:	2300      	movs	r3, #0
 8103f4a:	2b00      	cmp	r3, #0
 8103f4c:	d036      	beq.n	8103fbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103f4e:	68fb      	ldr	r3, [r7, #12]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	f023 021e 	bic.w	r2, r3, #30
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	f042 0216 	orr.w	r2, r2, #22
 8103f60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f66:	2b00      	cmp	r3, #0
 8103f68:	d03e      	beq.n	8103fe8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103f6a:	68fb      	ldr	r3, [r7, #12]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	681a      	ldr	r2, [r3, #0]
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	f042 0208 	orr.w	r2, r2, #8
 8103f78:	601a      	str	r2, [r3, #0]
 8103f7a:	e035      	b.n	8103fe8 <HAL_DMA_Start_IT+0x260>
 8103f7c:	40020010 	.word	0x40020010
 8103f80:	40020028 	.word	0x40020028
 8103f84:	40020040 	.word	0x40020040
 8103f88:	40020058 	.word	0x40020058
 8103f8c:	40020070 	.word	0x40020070
 8103f90:	40020088 	.word	0x40020088
 8103f94:	400200a0 	.word	0x400200a0
 8103f98:	400200b8 	.word	0x400200b8
 8103f9c:	40020410 	.word	0x40020410
 8103fa0:	40020428 	.word	0x40020428
 8103fa4:	40020440 	.word	0x40020440
 8103fa8:	40020458 	.word	0x40020458
 8103fac:	40020470 	.word	0x40020470
 8103fb0:	40020488 	.word	0x40020488
 8103fb4:	400204a0 	.word	0x400204a0
 8103fb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8103fbc:	68fb      	ldr	r3, [r7, #12]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	f023 020e 	bic.w	r2, r3, #14
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	f042 020a 	orr.w	r2, r2, #10
 8103fce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103fd0:	68fb      	ldr	r3, [r7, #12]
 8103fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fd4:	2b00      	cmp	r3, #0
 8103fd6:	d007      	beq.n	8103fe8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8103fd8:	68fb      	ldr	r3, [r7, #12]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	681a      	ldr	r2, [r3, #0]
 8103fde:	68fb      	ldr	r3, [r7, #12]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	f042 0204 	orr.w	r2, r2, #4
 8103fe6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4a83      	ldr	r2, [pc, #524]	; (81041fc <HAL_DMA_Start_IT+0x474>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d072      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4a82      	ldr	r2, [pc, #520]	; (8104200 <HAL_DMA_Start_IT+0x478>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d06d      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8103ffc:	68fb      	ldr	r3, [r7, #12]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4a80      	ldr	r2, [pc, #512]	; (8104204 <HAL_DMA_Start_IT+0x47c>)
 8104002:	4293      	cmp	r3, r2
 8104004:	d068      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104006:	68fb      	ldr	r3, [r7, #12]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4a7f      	ldr	r2, [pc, #508]	; (8104208 <HAL_DMA_Start_IT+0x480>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d063      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a7d      	ldr	r2, [pc, #500]	; (810420c <HAL_DMA_Start_IT+0x484>)
 8104016:	4293      	cmp	r3, r2
 8104018:	d05e      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 810401a:	68fb      	ldr	r3, [r7, #12]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a7c      	ldr	r2, [pc, #496]	; (8104210 <HAL_DMA_Start_IT+0x488>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d059      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a7a      	ldr	r2, [pc, #488]	; (8104214 <HAL_DMA_Start_IT+0x48c>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d054      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	4a79      	ldr	r2, [pc, #484]	; (8104218 <HAL_DMA_Start_IT+0x490>)
 8104034:	4293      	cmp	r3, r2
 8104036:	d04f      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4a77      	ldr	r2, [pc, #476]	; (810421c <HAL_DMA_Start_IT+0x494>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d04a      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104042:	68fb      	ldr	r3, [r7, #12]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a76      	ldr	r2, [pc, #472]	; (8104220 <HAL_DMA_Start_IT+0x498>)
 8104048:	4293      	cmp	r3, r2
 810404a:	d045      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 810404c:	68fb      	ldr	r3, [r7, #12]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a74      	ldr	r2, [pc, #464]	; (8104224 <HAL_DMA_Start_IT+0x49c>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d040      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104056:	68fb      	ldr	r3, [r7, #12]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a73      	ldr	r2, [pc, #460]	; (8104228 <HAL_DMA_Start_IT+0x4a0>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d03b      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a71      	ldr	r2, [pc, #452]	; (810422c <HAL_DMA_Start_IT+0x4a4>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d036      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 810406a:	68fb      	ldr	r3, [r7, #12]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	4a70      	ldr	r2, [pc, #448]	; (8104230 <HAL_DMA_Start_IT+0x4a8>)
 8104070:	4293      	cmp	r3, r2
 8104072:	d031      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	4a6e      	ldr	r2, [pc, #440]	; (8104234 <HAL_DMA_Start_IT+0x4ac>)
 810407a:	4293      	cmp	r3, r2
 810407c:	d02c      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	4a6d      	ldr	r2, [pc, #436]	; (8104238 <HAL_DMA_Start_IT+0x4b0>)
 8104084:	4293      	cmp	r3, r2
 8104086:	d027      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	4a6b      	ldr	r2, [pc, #428]	; (810423c <HAL_DMA_Start_IT+0x4b4>)
 810408e:	4293      	cmp	r3, r2
 8104090:	d022      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	4a6a      	ldr	r2, [pc, #424]	; (8104240 <HAL_DMA_Start_IT+0x4b8>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d01d      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a68      	ldr	r2, [pc, #416]	; (8104244 <HAL_DMA_Start_IT+0x4bc>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d018      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a67      	ldr	r2, [pc, #412]	; (8104248 <HAL_DMA_Start_IT+0x4c0>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d013      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a65      	ldr	r2, [pc, #404]	; (810424c <HAL_DMA_Start_IT+0x4c4>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d00e      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a64      	ldr	r2, [pc, #400]	; (8104250 <HAL_DMA_Start_IT+0x4c8>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d009      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a62      	ldr	r2, [pc, #392]	; (8104254 <HAL_DMA_Start_IT+0x4cc>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d004      	beq.n	81040d8 <HAL_DMA_Start_IT+0x350>
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a61      	ldr	r2, [pc, #388]	; (8104258 <HAL_DMA_Start_IT+0x4d0>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d101      	bne.n	81040dc <HAL_DMA_Start_IT+0x354>
 81040d8:	2301      	movs	r3, #1
 81040da:	e000      	b.n	81040de <HAL_DMA_Start_IT+0x356>
 81040dc:	2300      	movs	r3, #0
 81040de:	2b00      	cmp	r3, #0
 81040e0:	d01a      	beq.n	8104118 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81040e2:	68fb      	ldr	r3, [r7, #12]
 81040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81040e6:	681b      	ldr	r3, [r3, #0]
 81040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81040ec:	2b00      	cmp	r3, #0
 81040ee:	d007      	beq.n	8104100 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81040f0:	68fb      	ldr	r3, [r7, #12]
 81040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81040f4:	681a      	ldr	r2, [r3, #0]
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81040fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81040fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104104:	2b00      	cmp	r3, #0
 8104106:	d007      	beq.n	8104118 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104108:	68fb      	ldr	r3, [r7, #12]
 810410a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810410c:	681a      	ldr	r2, [r3, #0]
 810410e:	68fb      	ldr	r3, [r7, #12]
 8104110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104116:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	4a37      	ldr	r2, [pc, #220]	; (81041fc <HAL_DMA_Start_IT+0x474>)
 810411e:	4293      	cmp	r3, r2
 8104120:	d04a      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104122:	68fb      	ldr	r3, [r7, #12]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	4a36      	ldr	r2, [pc, #216]	; (8104200 <HAL_DMA_Start_IT+0x478>)
 8104128:	4293      	cmp	r3, r2
 810412a:	d045      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	4a34      	ldr	r2, [pc, #208]	; (8104204 <HAL_DMA_Start_IT+0x47c>)
 8104132:	4293      	cmp	r3, r2
 8104134:	d040      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104136:	68fb      	ldr	r3, [r7, #12]
 8104138:	681b      	ldr	r3, [r3, #0]
 810413a:	4a33      	ldr	r2, [pc, #204]	; (8104208 <HAL_DMA_Start_IT+0x480>)
 810413c:	4293      	cmp	r3, r2
 810413e:	d03b      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	4a31      	ldr	r2, [pc, #196]	; (810420c <HAL_DMA_Start_IT+0x484>)
 8104146:	4293      	cmp	r3, r2
 8104148:	d036      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 810414a:	68fb      	ldr	r3, [r7, #12]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	4a30      	ldr	r2, [pc, #192]	; (8104210 <HAL_DMA_Start_IT+0x488>)
 8104150:	4293      	cmp	r3, r2
 8104152:	d031      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104154:	68fb      	ldr	r3, [r7, #12]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	4a2e      	ldr	r2, [pc, #184]	; (8104214 <HAL_DMA_Start_IT+0x48c>)
 810415a:	4293      	cmp	r3, r2
 810415c:	d02c      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	681b      	ldr	r3, [r3, #0]
 8104162:	4a2d      	ldr	r2, [pc, #180]	; (8104218 <HAL_DMA_Start_IT+0x490>)
 8104164:	4293      	cmp	r3, r2
 8104166:	d027      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104168:	68fb      	ldr	r3, [r7, #12]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a2b      	ldr	r2, [pc, #172]	; (810421c <HAL_DMA_Start_IT+0x494>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d022      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104172:	68fb      	ldr	r3, [r7, #12]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a2a      	ldr	r2, [pc, #168]	; (8104220 <HAL_DMA_Start_IT+0x498>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d01d      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 810417c:	68fb      	ldr	r3, [r7, #12]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4a28      	ldr	r2, [pc, #160]	; (8104224 <HAL_DMA_Start_IT+0x49c>)
 8104182:	4293      	cmp	r3, r2
 8104184:	d018      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104186:	68fb      	ldr	r3, [r7, #12]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a27      	ldr	r2, [pc, #156]	; (8104228 <HAL_DMA_Start_IT+0x4a0>)
 810418c:	4293      	cmp	r3, r2
 810418e:	d013      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4a25      	ldr	r2, [pc, #148]	; (810422c <HAL_DMA_Start_IT+0x4a4>)
 8104196:	4293      	cmp	r3, r2
 8104198:	d00e      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	4a24      	ldr	r2, [pc, #144]	; (8104230 <HAL_DMA_Start_IT+0x4a8>)
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d009      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	4a22      	ldr	r2, [pc, #136]	; (8104234 <HAL_DMA_Start_IT+0x4ac>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d004      	beq.n	81041b8 <HAL_DMA_Start_IT+0x430>
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	4a21      	ldr	r2, [pc, #132]	; (8104238 <HAL_DMA_Start_IT+0x4b0>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d108      	bne.n	81041ca <HAL_DMA_Start_IT+0x442>
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	681a      	ldr	r2, [r3, #0]
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	f042 0201 	orr.w	r2, r2, #1
 81041c6:	601a      	str	r2, [r3, #0]
 81041c8:	e012      	b.n	81041f0 <HAL_DMA_Start_IT+0x468>
 81041ca:	68fb      	ldr	r3, [r7, #12]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	681a      	ldr	r2, [r3, #0]
 81041d0:	68fb      	ldr	r3, [r7, #12]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	f042 0201 	orr.w	r2, r2, #1
 81041d8:	601a      	str	r2, [r3, #0]
 81041da:	e009      	b.n	81041f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 81041dc:	68fb      	ldr	r3, [r7, #12]
 81041de:	2200      	movs	r2, #0
 81041e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81041e4:	68fb      	ldr	r3, [r7, #12]
 81041e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81041ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 81041ec:	2301      	movs	r3, #1
 81041ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 81041f0:	7dfb      	ldrb	r3, [r7, #23]
}
 81041f2:	4618      	mov	r0, r3
 81041f4:	3718      	adds	r7, #24
 81041f6:	46bd      	mov	sp, r7
 81041f8:	bd80      	pop	{r7, pc}
 81041fa:	bf00      	nop
 81041fc:	40020010 	.word	0x40020010
 8104200:	40020028 	.word	0x40020028
 8104204:	40020040 	.word	0x40020040
 8104208:	40020058 	.word	0x40020058
 810420c:	40020070 	.word	0x40020070
 8104210:	40020088 	.word	0x40020088
 8104214:	400200a0 	.word	0x400200a0
 8104218:	400200b8 	.word	0x400200b8
 810421c:	40020410 	.word	0x40020410
 8104220:	40020428 	.word	0x40020428
 8104224:	40020440 	.word	0x40020440
 8104228:	40020458 	.word	0x40020458
 810422c:	40020470 	.word	0x40020470
 8104230:	40020488 	.word	0x40020488
 8104234:	400204a0 	.word	0x400204a0
 8104238:	400204b8 	.word	0x400204b8
 810423c:	58025408 	.word	0x58025408
 8104240:	5802541c 	.word	0x5802541c
 8104244:	58025430 	.word	0x58025430
 8104248:	58025444 	.word	0x58025444
 810424c:	58025458 	.word	0x58025458
 8104250:	5802546c 	.word	0x5802546c
 8104254:	58025480 	.word	0x58025480
 8104258:	58025494 	.word	0x58025494

0810425c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 810425c:	b580      	push	{r7, lr}
 810425e:	b086      	sub	sp, #24
 8104260:	af00      	add	r7, sp, #0
 8104262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104264:	f7ff f8e2 	bl	810342c <HAL_GetTick>
 8104268:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	2b00      	cmp	r3, #0
 810426e:	d101      	bne.n	8104274 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104270:	2301      	movs	r3, #1
 8104272:	e2dc      	b.n	810482e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810427a:	b2db      	uxtb	r3, r3
 810427c:	2b02      	cmp	r3, #2
 810427e:	d008      	beq.n	8104292 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	2280      	movs	r2, #128	; 0x80
 8104284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	2200      	movs	r2, #0
 810428a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 810428e:	2301      	movs	r3, #1
 8104290:	e2cd      	b.n	810482e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a76      	ldr	r2, [pc, #472]	; (8104470 <HAL_DMA_Abort+0x214>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d04a      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	4a74      	ldr	r2, [pc, #464]	; (8104474 <HAL_DMA_Abort+0x218>)
 81042a2:	4293      	cmp	r3, r2
 81042a4:	d045      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	4a73      	ldr	r2, [pc, #460]	; (8104478 <HAL_DMA_Abort+0x21c>)
 81042ac:	4293      	cmp	r3, r2
 81042ae:	d040      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	4a71      	ldr	r2, [pc, #452]	; (810447c <HAL_DMA_Abort+0x220>)
 81042b6:	4293      	cmp	r3, r2
 81042b8:	d03b      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a70      	ldr	r2, [pc, #448]	; (8104480 <HAL_DMA_Abort+0x224>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d036      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a6e      	ldr	r2, [pc, #440]	; (8104484 <HAL_DMA_Abort+0x228>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d031      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	4a6d      	ldr	r2, [pc, #436]	; (8104488 <HAL_DMA_Abort+0x22c>)
 81042d4:	4293      	cmp	r3, r2
 81042d6:	d02c      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	4a6b      	ldr	r2, [pc, #428]	; (810448c <HAL_DMA_Abort+0x230>)
 81042de:	4293      	cmp	r3, r2
 81042e0:	d027      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	4a6a      	ldr	r2, [pc, #424]	; (8104490 <HAL_DMA_Abort+0x234>)
 81042e8:	4293      	cmp	r3, r2
 81042ea:	d022      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	4a68      	ldr	r2, [pc, #416]	; (8104494 <HAL_DMA_Abort+0x238>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d01d      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	4a67      	ldr	r2, [pc, #412]	; (8104498 <HAL_DMA_Abort+0x23c>)
 81042fc:	4293      	cmp	r3, r2
 81042fe:	d018      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	4a65      	ldr	r2, [pc, #404]	; (810449c <HAL_DMA_Abort+0x240>)
 8104306:	4293      	cmp	r3, r2
 8104308:	d013      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	4a64      	ldr	r2, [pc, #400]	; (81044a0 <HAL_DMA_Abort+0x244>)
 8104310:	4293      	cmp	r3, r2
 8104312:	d00e      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a62      	ldr	r2, [pc, #392]	; (81044a4 <HAL_DMA_Abort+0x248>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d009      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	4a61      	ldr	r2, [pc, #388]	; (81044a8 <HAL_DMA_Abort+0x24c>)
 8104324:	4293      	cmp	r3, r2
 8104326:	d004      	beq.n	8104332 <HAL_DMA_Abort+0xd6>
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	4a5f      	ldr	r2, [pc, #380]	; (81044ac <HAL_DMA_Abort+0x250>)
 810432e:	4293      	cmp	r3, r2
 8104330:	d101      	bne.n	8104336 <HAL_DMA_Abort+0xda>
 8104332:	2301      	movs	r3, #1
 8104334:	e000      	b.n	8104338 <HAL_DMA_Abort+0xdc>
 8104336:	2300      	movs	r3, #0
 8104338:	2b00      	cmp	r3, #0
 810433a:	d013      	beq.n	8104364 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	681a      	ldr	r2, [r3, #0]
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	f022 021e 	bic.w	r2, r2, #30
 810434a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	695a      	ldr	r2, [r3, #20]
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810435a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	617b      	str	r3, [r7, #20]
 8104362:	e00a      	b.n	810437a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	681a      	ldr	r2, [r3, #0]
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	f022 020e 	bic.w	r2, r2, #14
 8104372:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	4a3c      	ldr	r2, [pc, #240]	; (8104470 <HAL_DMA_Abort+0x214>)
 8104380:	4293      	cmp	r3, r2
 8104382:	d072      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a3a      	ldr	r2, [pc, #232]	; (8104474 <HAL_DMA_Abort+0x218>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d06d      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a39      	ldr	r2, [pc, #228]	; (8104478 <HAL_DMA_Abort+0x21c>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d068      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4a37      	ldr	r2, [pc, #220]	; (810447c <HAL_DMA_Abort+0x220>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d063      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	4a36      	ldr	r2, [pc, #216]	; (8104480 <HAL_DMA_Abort+0x224>)
 81043a8:	4293      	cmp	r3, r2
 81043aa:	d05e      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	4a34      	ldr	r2, [pc, #208]	; (8104484 <HAL_DMA_Abort+0x228>)
 81043b2:	4293      	cmp	r3, r2
 81043b4:	d059      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a33      	ldr	r2, [pc, #204]	; (8104488 <HAL_DMA_Abort+0x22c>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d054      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a31      	ldr	r2, [pc, #196]	; (810448c <HAL_DMA_Abort+0x230>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d04f      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a30      	ldr	r2, [pc, #192]	; (8104490 <HAL_DMA_Abort+0x234>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d04a      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a2e      	ldr	r2, [pc, #184]	; (8104494 <HAL_DMA_Abort+0x238>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d045      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	4a2d      	ldr	r2, [pc, #180]	; (8104498 <HAL_DMA_Abort+0x23c>)
 81043e4:	4293      	cmp	r3, r2
 81043e6:	d040      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a2b      	ldr	r2, [pc, #172]	; (810449c <HAL_DMA_Abort+0x240>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d03b      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a2a      	ldr	r2, [pc, #168]	; (81044a0 <HAL_DMA_Abort+0x244>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d036      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a28      	ldr	r2, [pc, #160]	; (81044a4 <HAL_DMA_Abort+0x248>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d031      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a27      	ldr	r2, [pc, #156]	; (81044a8 <HAL_DMA_Abort+0x24c>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d02c      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a25      	ldr	r2, [pc, #148]	; (81044ac <HAL_DMA_Abort+0x250>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d027      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a24      	ldr	r2, [pc, #144]	; (81044b0 <HAL_DMA_Abort+0x254>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d022      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	4a22      	ldr	r2, [pc, #136]	; (81044b4 <HAL_DMA_Abort+0x258>)
 810442a:	4293      	cmp	r3, r2
 810442c:	d01d      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	4a21      	ldr	r2, [pc, #132]	; (81044b8 <HAL_DMA_Abort+0x25c>)
 8104434:	4293      	cmp	r3, r2
 8104436:	d018      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	4a1f      	ldr	r2, [pc, #124]	; (81044bc <HAL_DMA_Abort+0x260>)
 810443e:	4293      	cmp	r3, r2
 8104440:	d013      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	4a1e      	ldr	r2, [pc, #120]	; (81044c0 <HAL_DMA_Abort+0x264>)
 8104448:	4293      	cmp	r3, r2
 810444a:	d00e      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	4a1c      	ldr	r2, [pc, #112]	; (81044c4 <HAL_DMA_Abort+0x268>)
 8104452:	4293      	cmp	r3, r2
 8104454:	d009      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	4a1b      	ldr	r2, [pc, #108]	; (81044c8 <HAL_DMA_Abort+0x26c>)
 810445c:	4293      	cmp	r3, r2
 810445e:	d004      	beq.n	810446a <HAL_DMA_Abort+0x20e>
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a19      	ldr	r2, [pc, #100]	; (81044cc <HAL_DMA_Abort+0x270>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d132      	bne.n	81044d0 <HAL_DMA_Abort+0x274>
 810446a:	2301      	movs	r3, #1
 810446c:	e031      	b.n	81044d2 <HAL_DMA_Abort+0x276>
 810446e:	bf00      	nop
 8104470:	40020010 	.word	0x40020010
 8104474:	40020028 	.word	0x40020028
 8104478:	40020040 	.word	0x40020040
 810447c:	40020058 	.word	0x40020058
 8104480:	40020070 	.word	0x40020070
 8104484:	40020088 	.word	0x40020088
 8104488:	400200a0 	.word	0x400200a0
 810448c:	400200b8 	.word	0x400200b8
 8104490:	40020410 	.word	0x40020410
 8104494:	40020428 	.word	0x40020428
 8104498:	40020440 	.word	0x40020440
 810449c:	40020458 	.word	0x40020458
 81044a0:	40020470 	.word	0x40020470
 81044a4:	40020488 	.word	0x40020488
 81044a8:	400204a0 	.word	0x400204a0
 81044ac:	400204b8 	.word	0x400204b8
 81044b0:	58025408 	.word	0x58025408
 81044b4:	5802541c 	.word	0x5802541c
 81044b8:	58025430 	.word	0x58025430
 81044bc:	58025444 	.word	0x58025444
 81044c0:	58025458 	.word	0x58025458
 81044c4:	5802546c 	.word	0x5802546c
 81044c8:	58025480 	.word	0x58025480
 81044cc:	58025494 	.word	0x58025494
 81044d0:	2300      	movs	r3, #0
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d007      	beq.n	81044e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044da:	681a      	ldr	r2, [r3, #0]
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81044e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	4a6d      	ldr	r2, [pc, #436]	; (81046a0 <HAL_DMA_Abort+0x444>)
 81044ec:	4293      	cmp	r3, r2
 81044ee:	d04a      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	4a6b      	ldr	r2, [pc, #428]	; (81046a4 <HAL_DMA_Abort+0x448>)
 81044f6:	4293      	cmp	r3, r2
 81044f8:	d045      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	4a6a      	ldr	r2, [pc, #424]	; (81046a8 <HAL_DMA_Abort+0x44c>)
 8104500:	4293      	cmp	r3, r2
 8104502:	d040      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	4a68      	ldr	r2, [pc, #416]	; (81046ac <HAL_DMA_Abort+0x450>)
 810450a:	4293      	cmp	r3, r2
 810450c:	d03b      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	4a67      	ldr	r2, [pc, #412]	; (81046b0 <HAL_DMA_Abort+0x454>)
 8104514:	4293      	cmp	r3, r2
 8104516:	d036      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	4a65      	ldr	r2, [pc, #404]	; (81046b4 <HAL_DMA_Abort+0x458>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d031      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	4a64      	ldr	r2, [pc, #400]	; (81046b8 <HAL_DMA_Abort+0x45c>)
 8104528:	4293      	cmp	r3, r2
 810452a:	d02c      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	4a62      	ldr	r2, [pc, #392]	; (81046bc <HAL_DMA_Abort+0x460>)
 8104532:	4293      	cmp	r3, r2
 8104534:	d027      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	4a61      	ldr	r2, [pc, #388]	; (81046c0 <HAL_DMA_Abort+0x464>)
 810453c:	4293      	cmp	r3, r2
 810453e:	d022      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	4a5f      	ldr	r2, [pc, #380]	; (81046c4 <HAL_DMA_Abort+0x468>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d01d      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	4a5e      	ldr	r2, [pc, #376]	; (81046c8 <HAL_DMA_Abort+0x46c>)
 8104550:	4293      	cmp	r3, r2
 8104552:	d018      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	4a5c      	ldr	r2, [pc, #368]	; (81046cc <HAL_DMA_Abort+0x470>)
 810455a:	4293      	cmp	r3, r2
 810455c:	d013      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	4a5b      	ldr	r2, [pc, #364]	; (81046d0 <HAL_DMA_Abort+0x474>)
 8104564:	4293      	cmp	r3, r2
 8104566:	d00e      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	4a59      	ldr	r2, [pc, #356]	; (81046d4 <HAL_DMA_Abort+0x478>)
 810456e:	4293      	cmp	r3, r2
 8104570:	d009      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4a58      	ldr	r2, [pc, #352]	; (81046d8 <HAL_DMA_Abort+0x47c>)
 8104578:	4293      	cmp	r3, r2
 810457a:	d004      	beq.n	8104586 <HAL_DMA_Abort+0x32a>
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a56      	ldr	r2, [pc, #344]	; (81046dc <HAL_DMA_Abort+0x480>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d108      	bne.n	8104598 <HAL_DMA_Abort+0x33c>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	681a      	ldr	r2, [r3, #0]
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	f022 0201 	bic.w	r2, r2, #1
 8104594:	601a      	str	r2, [r3, #0]
 8104596:	e007      	b.n	81045a8 <HAL_DMA_Abort+0x34c>
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	681a      	ldr	r2, [r3, #0]
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	f022 0201 	bic.w	r2, r2, #1
 81045a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81045a8:	e013      	b.n	81045d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81045aa:	f7fe ff3f 	bl	810342c <HAL_GetTick>
 81045ae:	4602      	mov	r2, r0
 81045b0:	693b      	ldr	r3, [r7, #16]
 81045b2:	1ad3      	subs	r3, r2, r3
 81045b4:	2b05      	cmp	r3, #5
 81045b6:	d90c      	bls.n	81045d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	2220      	movs	r2, #32
 81045bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	2200      	movs	r2, #0
 81045c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	2203      	movs	r2, #3
 81045ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81045ce:	2301      	movs	r3, #1
 81045d0:	e12d      	b.n	810482e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81045d2:	697b      	ldr	r3, [r7, #20]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	f003 0301 	and.w	r3, r3, #1
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d1e5      	bne.n	81045aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	4a2f      	ldr	r2, [pc, #188]	; (81046a0 <HAL_DMA_Abort+0x444>)
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d04a      	beq.n	810467e <HAL_DMA_Abort+0x422>
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	4a2d      	ldr	r2, [pc, #180]	; (81046a4 <HAL_DMA_Abort+0x448>)
 81045ee:	4293      	cmp	r3, r2
 81045f0:	d045      	beq.n	810467e <HAL_DMA_Abort+0x422>
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	4a2c      	ldr	r2, [pc, #176]	; (81046a8 <HAL_DMA_Abort+0x44c>)
 81045f8:	4293      	cmp	r3, r2
 81045fa:	d040      	beq.n	810467e <HAL_DMA_Abort+0x422>
 81045fc:	687b      	ldr	r3, [r7, #4]
 81045fe:	681b      	ldr	r3, [r3, #0]
 8104600:	4a2a      	ldr	r2, [pc, #168]	; (81046ac <HAL_DMA_Abort+0x450>)
 8104602:	4293      	cmp	r3, r2
 8104604:	d03b      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	4a29      	ldr	r2, [pc, #164]	; (81046b0 <HAL_DMA_Abort+0x454>)
 810460c:	4293      	cmp	r3, r2
 810460e:	d036      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	4a27      	ldr	r2, [pc, #156]	; (81046b4 <HAL_DMA_Abort+0x458>)
 8104616:	4293      	cmp	r3, r2
 8104618:	d031      	beq.n	810467e <HAL_DMA_Abort+0x422>
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	681b      	ldr	r3, [r3, #0]
 810461e:	4a26      	ldr	r2, [pc, #152]	; (81046b8 <HAL_DMA_Abort+0x45c>)
 8104620:	4293      	cmp	r3, r2
 8104622:	d02c      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	4a24      	ldr	r2, [pc, #144]	; (81046bc <HAL_DMA_Abort+0x460>)
 810462a:	4293      	cmp	r3, r2
 810462c:	d027      	beq.n	810467e <HAL_DMA_Abort+0x422>
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	4a23      	ldr	r2, [pc, #140]	; (81046c0 <HAL_DMA_Abort+0x464>)
 8104634:	4293      	cmp	r3, r2
 8104636:	d022      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	4a21      	ldr	r2, [pc, #132]	; (81046c4 <HAL_DMA_Abort+0x468>)
 810463e:	4293      	cmp	r3, r2
 8104640:	d01d      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	4a20      	ldr	r2, [pc, #128]	; (81046c8 <HAL_DMA_Abort+0x46c>)
 8104648:	4293      	cmp	r3, r2
 810464a:	d018      	beq.n	810467e <HAL_DMA_Abort+0x422>
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	681b      	ldr	r3, [r3, #0]
 8104650:	4a1e      	ldr	r2, [pc, #120]	; (81046cc <HAL_DMA_Abort+0x470>)
 8104652:	4293      	cmp	r3, r2
 8104654:	d013      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	4a1d      	ldr	r2, [pc, #116]	; (81046d0 <HAL_DMA_Abort+0x474>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d00e      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	4a1b      	ldr	r2, [pc, #108]	; (81046d4 <HAL_DMA_Abort+0x478>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d009      	beq.n	810467e <HAL_DMA_Abort+0x422>
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a1a      	ldr	r2, [pc, #104]	; (81046d8 <HAL_DMA_Abort+0x47c>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d004      	beq.n	810467e <HAL_DMA_Abort+0x422>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a18      	ldr	r2, [pc, #96]	; (81046dc <HAL_DMA_Abort+0x480>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d101      	bne.n	8104682 <HAL_DMA_Abort+0x426>
 810467e:	2301      	movs	r3, #1
 8104680:	e000      	b.n	8104684 <HAL_DMA_Abort+0x428>
 8104682:	2300      	movs	r3, #0
 8104684:	2b00      	cmp	r3, #0
 8104686:	d02b      	beq.n	81046e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810468c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104692:	f003 031f 	and.w	r3, r3, #31
 8104696:	223f      	movs	r2, #63	; 0x3f
 8104698:	409a      	lsls	r2, r3
 810469a:	68bb      	ldr	r3, [r7, #8]
 810469c:	609a      	str	r2, [r3, #8]
 810469e:	e02a      	b.n	81046f6 <HAL_DMA_Abort+0x49a>
 81046a0:	40020010 	.word	0x40020010
 81046a4:	40020028 	.word	0x40020028
 81046a8:	40020040 	.word	0x40020040
 81046ac:	40020058 	.word	0x40020058
 81046b0:	40020070 	.word	0x40020070
 81046b4:	40020088 	.word	0x40020088
 81046b8:	400200a0 	.word	0x400200a0
 81046bc:	400200b8 	.word	0x400200b8
 81046c0:	40020410 	.word	0x40020410
 81046c4:	40020428 	.word	0x40020428
 81046c8:	40020440 	.word	0x40020440
 81046cc:	40020458 	.word	0x40020458
 81046d0:	40020470 	.word	0x40020470
 81046d4:	40020488 	.word	0x40020488
 81046d8:	400204a0 	.word	0x400204a0
 81046dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046ea:	f003 031f 	and.w	r3, r3, #31
 81046ee:	2201      	movs	r2, #1
 81046f0:	409a      	lsls	r2, r3
 81046f2:	68fb      	ldr	r3, [r7, #12]
 81046f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	4a4f      	ldr	r2, [pc, #316]	; (8104838 <HAL_DMA_Abort+0x5dc>)
 81046fc:	4293      	cmp	r3, r2
 81046fe:	d072      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	4a4d      	ldr	r2, [pc, #308]	; (810483c <HAL_DMA_Abort+0x5e0>)
 8104706:	4293      	cmp	r3, r2
 8104708:	d06d      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	4a4c      	ldr	r2, [pc, #304]	; (8104840 <HAL_DMA_Abort+0x5e4>)
 8104710:	4293      	cmp	r3, r2
 8104712:	d068      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	4a4a      	ldr	r2, [pc, #296]	; (8104844 <HAL_DMA_Abort+0x5e8>)
 810471a:	4293      	cmp	r3, r2
 810471c:	d063      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	4a49      	ldr	r2, [pc, #292]	; (8104848 <HAL_DMA_Abort+0x5ec>)
 8104724:	4293      	cmp	r3, r2
 8104726:	d05e      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	4a47      	ldr	r2, [pc, #284]	; (810484c <HAL_DMA_Abort+0x5f0>)
 810472e:	4293      	cmp	r3, r2
 8104730:	d059      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	4a46      	ldr	r2, [pc, #280]	; (8104850 <HAL_DMA_Abort+0x5f4>)
 8104738:	4293      	cmp	r3, r2
 810473a:	d054      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	4a44      	ldr	r2, [pc, #272]	; (8104854 <HAL_DMA_Abort+0x5f8>)
 8104742:	4293      	cmp	r3, r2
 8104744:	d04f      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a43      	ldr	r2, [pc, #268]	; (8104858 <HAL_DMA_Abort+0x5fc>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d04a      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4a41      	ldr	r2, [pc, #260]	; (810485c <HAL_DMA_Abort+0x600>)
 8104756:	4293      	cmp	r3, r2
 8104758:	d045      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a40      	ldr	r2, [pc, #256]	; (8104860 <HAL_DMA_Abort+0x604>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d040      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a3e      	ldr	r2, [pc, #248]	; (8104864 <HAL_DMA_Abort+0x608>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d03b      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a3d      	ldr	r2, [pc, #244]	; (8104868 <HAL_DMA_Abort+0x60c>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d036      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a3b      	ldr	r2, [pc, #236]	; (810486c <HAL_DMA_Abort+0x610>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d031      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a3a      	ldr	r2, [pc, #232]	; (8104870 <HAL_DMA_Abort+0x614>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d02c      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a38      	ldr	r2, [pc, #224]	; (8104874 <HAL_DMA_Abort+0x618>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d027      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a37      	ldr	r2, [pc, #220]	; (8104878 <HAL_DMA_Abort+0x61c>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d022      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4a35      	ldr	r2, [pc, #212]	; (810487c <HAL_DMA_Abort+0x620>)
 81047a6:	4293      	cmp	r3, r2
 81047a8:	d01d      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	4a34      	ldr	r2, [pc, #208]	; (8104880 <HAL_DMA_Abort+0x624>)
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d018      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a32      	ldr	r2, [pc, #200]	; (8104884 <HAL_DMA_Abort+0x628>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d013      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a31      	ldr	r2, [pc, #196]	; (8104888 <HAL_DMA_Abort+0x62c>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d00e      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a2f      	ldr	r2, [pc, #188]	; (810488c <HAL_DMA_Abort+0x630>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d009      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a2e      	ldr	r2, [pc, #184]	; (8104890 <HAL_DMA_Abort+0x634>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d004      	beq.n	81047e6 <HAL_DMA_Abort+0x58a>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a2c      	ldr	r2, [pc, #176]	; (8104894 <HAL_DMA_Abort+0x638>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d101      	bne.n	81047ea <HAL_DMA_Abort+0x58e>
 81047e6:	2301      	movs	r3, #1
 81047e8:	e000      	b.n	81047ec <HAL_DMA_Abort+0x590>
 81047ea:	2300      	movs	r3, #0
 81047ec:	2b00      	cmp	r3, #0
 81047ee:	d015      	beq.n	810481c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047f4:	687a      	ldr	r2, [r7, #4]
 81047f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81047f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81047fe:	2b00      	cmp	r3, #0
 8104800:	d00c      	beq.n	810481c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104806:	681a      	ldr	r2, [r3, #0]
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810480c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104810:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104816:	687a      	ldr	r2, [r7, #4]
 8104818:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810481a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	2200      	movs	r2, #0
 8104820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	2201      	movs	r2, #1
 8104828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 810482c:	2300      	movs	r3, #0
}
 810482e:	4618      	mov	r0, r3
 8104830:	3718      	adds	r7, #24
 8104832:	46bd      	mov	sp, r7
 8104834:	bd80      	pop	{r7, pc}
 8104836:	bf00      	nop
 8104838:	40020010 	.word	0x40020010
 810483c:	40020028 	.word	0x40020028
 8104840:	40020040 	.word	0x40020040
 8104844:	40020058 	.word	0x40020058
 8104848:	40020070 	.word	0x40020070
 810484c:	40020088 	.word	0x40020088
 8104850:	400200a0 	.word	0x400200a0
 8104854:	400200b8 	.word	0x400200b8
 8104858:	40020410 	.word	0x40020410
 810485c:	40020428 	.word	0x40020428
 8104860:	40020440 	.word	0x40020440
 8104864:	40020458 	.word	0x40020458
 8104868:	40020470 	.word	0x40020470
 810486c:	40020488 	.word	0x40020488
 8104870:	400204a0 	.word	0x400204a0
 8104874:	400204b8 	.word	0x400204b8
 8104878:	58025408 	.word	0x58025408
 810487c:	5802541c 	.word	0x5802541c
 8104880:	58025430 	.word	0x58025430
 8104884:	58025444 	.word	0x58025444
 8104888:	58025458 	.word	0x58025458
 810488c:	5802546c 	.word	0x5802546c
 8104890:	58025480 	.word	0x58025480
 8104894:	58025494 	.word	0x58025494

08104898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8104898:	b580      	push	{r7, lr}
 810489a:	b084      	sub	sp, #16
 810489c:	af00      	add	r7, sp, #0
 810489e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	2b00      	cmp	r3, #0
 81048a4:	d101      	bne.n	81048aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81048a6:	2301      	movs	r3, #1
 81048a8:	e205      	b.n	8104cb6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81048b0:	b2db      	uxtb	r3, r3
 81048b2:	2b02      	cmp	r3, #2
 81048b4:	d004      	beq.n	81048c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	2280      	movs	r2, #128	; 0x80
 81048ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81048bc:	2301      	movs	r3, #1
 81048be:	e1fa      	b.n	8104cb6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	681b      	ldr	r3, [r3, #0]
 81048c4:	4a8c      	ldr	r2, [pc, #560]	; (8104af8 <HAL_DMA_Abort_IT+0x260>)
 81048c6:	4293      	cmp	r3, r2
 81048c8:	d04a      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	4a8b      	ldr	r2, [pc, #556]	; (8104afc <HAL_DMA_Abort_IT+0x264>)
 81048d0:	4293      	cmp	r3, r2
 81048d2:	d045      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 81048d4:	687b      	ldr	r3, [r7, #4]
 81048d6:	681b      	ldr	r3, [r3, #0]
 81048d8:	4a89      	ldr	r2, [pc, #548]	; (8104b00 <HAL_DMA_Abort_IT+0x268>)
 81048da:	4293      	cmp	r3, r2
 81048dc:	d040      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	681b      	ldr	r3, [r3, #0]
 81048e2:	4a88      	ldr	r2, [pc, #544]	; (8104b04 <HAL_DMA_Abort_IT+0x26c>)
 81048e4:	4293      	cmp	r3, r2
 81048e6:	d03b      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	4a86      	ldr	r2, [pc, #536]	; (8104b08 <HAL_DMA_Abort_IT+0x270>)
 81048ee:	4293      	cmp	r3, r2
 81048f0:	d036      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	4a85      	ldr	r2, [pc, #532]	; (8104b0c <HAL_DMA_Abort_IT+0x274>)
 81048f8:	4293      	cmp	r3, r2
 81048fa:	d031      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	4a83      	ldr	r2, [pc, #524]	; (8104b10 <HAL_DMA_Abort_IT+0x278>)
 8104902:	4293      	cmp	r3, r2
 8104904:	d02c      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	4a82      	ldr	r2, [pc, #520]	; (8104b14 <HAL_DMA_Abort_IT+0x27c>)
 810490c:	4293      	cmp	r3, r2
 810490e:	d027      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	4a80      	ldr	r2, [pc, #512]	; (8104b18 <HAL_DMA_Abort_IT+0x280>)
 8104916:	4293      	cmp	r3, r2
 8104918:	d022      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	681b      	ldr	r3, [r3, #0]
 810491e:	4a7f      	ldr	r2, [pc, #508]	; (8104b1c <HAL_DMA_Abort_IT+0x284>)
 8104920:	4293      	cmp	r3, r2
 8104922:	d01d      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	681b      	ldr	r3, [r3, #0]
 8104928:	4a7d      	ldr	r2, [pc, #500]	; (8104b20 <HAL_DMA_Abort_IT+0x288>)
 810492a:	4293      	cmp	r3, r2
 810492c:	d018      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	4a7c      	ldr	r2, [pc, #496]	; (8104b24 <HAL_DMA_Abort_IT+0x28c>)
 8104934:	4293      	cmp	r3, r2
 8104936:	d013      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	4a7a      	ldr	r2, [pc, #488]	; (8104b28 <HAL_DMA_Abort_IT+0x290>)
 810493e:	4293      	cmp	r3, r2
 8104940:	d00e      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	4a79      	ldr	r2, [pc, #484]	; (8104b2c <HAL_DMA_Abort_IT+0x294>)
 8104948:	4293      	cmp	r3, r2
 810494a:	d009      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	4a77      	ldr	r2, [pc, #476]	; (8104b30 <HAL_DMA_Abort_IT+0x298>)
 8104952:	4293      	cmp	r3, r2
 8104954:	d004      	beq.n	8104960 <HAL_DMA_Abort_IT+0xc8>
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	681b      	ldr	r3, [r3, #0]
 810495a:	4a76      	ldr	r2, [pc, #472]	; (8104b34 <HAL_DMA_Abort_IT+0x29c>)
 810495c:	4293      	cmp	r3, r2
 810495e:	d101      	bne.n	8104964 <HAL_DMA_Abort_IT+0xcc>
 8104960:	2301      	movs	r3, #1
 8104962:	e000      	b.n	8104966 <HAL_DMA_Abort_IT+0xce>
 8104964:	2300      	movs	r3, #0
 8104966:	2b00      	cmp	r3, #0
 8104968:	d065      	beq.n	8104a36 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810496a:	687b      	ldr	r3, [r7, #4]
 810496c:	2204      	movs	r2, #4
 810496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	4a60      	ldr	r2, [pc, #384]	; (8104af8 <HAL_DMA_Abort_IT+0x260>)
 8104978:	4293      	cmp	r3, r2
 810497a:	d04a      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	4a5e      	ldr	r2, [pc, #376]	; (8104afc <HAL_DMA_Abort_IT+0x264>)
 8104982:	4293      	cmp	r3, r2
 8104984:	d045      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 8104986:	687b      	ldr	r3, [r7, #4]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	4a5d      	ldr	r2, [pc, #372]	; (8104b00 <HAL_DMA_Abort_IT+0x268>)
 810498c:	4293      	cmp	r3, r2
 810498e:	d040      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 8104990:	687b      	ldr	r3, [r7, #4]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	4a5b      	ldr	r2, [pc, #364]	; (8104b04 <HAL_DMA_Abort_IT+0x26c>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d03b      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	4a5a      	ldr	r2, [pc, #360]	; (8104b08 <HAL_DMA_Abort_IT+0x270>)
 81049a0:	4293      	cmp	r3, r2
 81049a2:	d036      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	4a58      	ldr	r2, [pc, #352]	; (8104b0c <HAL_DMA_Abort_IT+0x274>)
 81049aa:	4293      	cmp	r3, r2
 81049ac:	d031      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	4a57      	ldr	r2, [pc, #348]	; (8104b10 <HAL_DMA_Abort_IT+0x278>)
 81049b4:	4293      	cmp	r3, r2
 81049b6:	d02c      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049b8:	687b      	ldr	r3, [r7, #4]
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	4a55      	ldr	r2, [pc, #340]	; (8104b14 <HAL_DMA_Abort_IT+0x27c>)
 81049be:	4293      	cmp	r3, r2
 81049c0:	d027      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	681b      	ldr	r3, [r3, #0]
 81049c6:	4a54      	ldr	r2, [pc, #336]	; (8104b18 <HAL_DMA_Abort_IT+0x280>)
 81049c8:	4293      	cmp	r3, r2
 81049ca:	d022      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	4a52      	ldr	r2, [pc, #328]	; (8104b1c <HAL_DMA_Abort_IT+0x284>)
 81049d2:	4293      	cmp	r3, r2
 81049d4:	d01d      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	681b      	ldr	r3, [r3, #0]
 81049da:	4a51      	ldr	r2, [pc, #324]	; (8104b20 <HAL_DMA_Abort_IT+0x288>)
 81049dc:	4293      	cmp	r3, r2
 81049de:	d018      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	4a4f      	ldr	r2, [pc, #316]	; (8104b24 <HAL_DMA_Abort_IT+0x28c>)
 81049e6:	4293      	cmp	r3, r2
 81049e8:	d013      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	4a4e      	ldr	r2, [pc, #312]	; (8104b28 <HAL_DMA_Abort_IT+0x290>)
 81049f0:	4293      	cmp	r3, r2
 81049f2:	d00e      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	681b      	ldr	r3, [r3, #0]
 81049f8:	4a4c      	ldr	r2, [pc, #304]	; (8104b2c <HAL_DMA_Abort_IT+0x294>)
 81049fa:	4293      	cmp	r3, r2
 81049fc:	d009      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	681b      	ldr	r3, [r3, #0]
 8104a02:	4a4b      	ldr	r2, [pc, #300]	; (8104b30 <HAL_DMA_Abort_IT+0x298>)
 8104a04:	4293      	cmp	r3, r2
 8104a06:	d004      	beq.n	8104a12 <HAL_DMA_Abort_IT+0x17a>
 8104a08:	687b      	ldr	r3, [r7, #4]
 8104a0a:	681b      	ldr	r3, [r3, #0]
 8104a0c:	4a49      	ldr	r2, [pc, #292]	; (8104b34 <HAL_DMA_Abort_IT+0x29c>)
 8104a0e:	4293      	cmp	r3, r2
 8104a10:	d108      	bne.n	8104a24 <HAL_DMA_Abort_IT+0x18c>
 8104a12:	687b      	ldr	r3, [r7, #4]
 8104a14:	681b      	ldr	r3, [r3, #0]
 8104a16:	681a      	ldr	r2, [r3, #0]
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	f022 0201 	bic.w	r2, r2, #1
 8104a20:	601a      	str	r2, [r3, #0]
 8104a22:	e147      	b.n	8104cb4 <HAL_DMA_Abort_IT+0x41c>
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	681a      	ldr	r2, [r3, #0]
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	f022 0201 	bic.w	r2, r2, #1
 8104a32:	601a      	str	r2, [r3, #0]
 8104a34:	e13e      	b.n	8104cb4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	681a      	ldr	r2, [r3, #0]
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	f022 020e 	bic.w	r2, r2, #14
 8104a44:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	4a2b      	ldr	r2, [pc, #172]	; (8104af8 <HAL_DMA_Abort_IT+0x260>)
 8104a4c:	4293      	cmp	r3, r2
 8104a4e:	d04a      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	4a29      	ldr	r2, [pc, #164]	; (8104afc <HAL_DMA_Abort_IT+0x264>)
 8104a56:	4293      	cmp	r3, r2
 8104a58:	d045      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	681b      	ldr	r3, [r3, #0]
 8104a5e:	4a28      	ldr	r2, [pc, #160]	; (8104b00 <HAL_DMA_Abort_IT+0x268>)
 8104a60:	4293      	cmp	r3, r2
 8104a62:	d040      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	4a26      	ldr	r2, [pc, #152]	; (8104b04 <HAL_DMA_Abort_IT+0x26c>)
 8104a6a:	4293      	cmp	r3, r2
 8104a6c:	d03b      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	4a25      	ldr	r2, [pc, #148]	; (8104b08 <HAL_DMA_Abort_IT+0x270>)
 8104a74:	4293      	cmp	r3, r2
 8104a76:	d036      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	4a23      	ldr	r2, [pc, #140]	; (8104b0c <HAL_DMA_Abort_IT+0x274>)
 8104a7e:	4293      	cmp	r3, r2
 8104a80:	d031      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	4a22      	ldr	r2, [pc, #136]	; (8104b10 <HAL_DMA_Abort_IT+0x278>)
 8104a88:	4293      	cmp	r3, r2
 8104a8a:	d02c      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	4a20      	ldr	r2, [pc, #128]	; (8104b14 <HAL_DMA_Abort_IT+0x27c>)
 8104a92:	4293      	cmp	r3, r2
 8104a94:	d027      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	4a1f      	ldr	r2, [pc, #124]	; (8104b18 <HAL_DMA_Abort_IT+0x280>)
 8104a9c:	4293      	cmp	r3, r2
 8104a9e:	d022      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	4a1d      	ldr	r2, [pc, #116]	; (8104b1c <HAL_DMA_Abort_IT+0x284>)
 8104aa6:	4293      	cmp	r3, r2
 8104aa8:	d01d      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	4a1c      	ldr	r2, [pc, #112]	; (8104b20 <HAL_DMA_Abort_IT+0x288>)
 8104ab0:	4293      	cmp	r3, r2
 8104ab2:	d018      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104ab4:	687b      	ldr	r3, [r7, #4]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	4a1a      	ldr	r2, [pc, #104]	; (8104b24 <HAL_DMA_Abort_IT+0x28c>)
 8104aba:	4293      	cmp	r3, r2
 8104abc:	d013      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	4a19      	ldr	r2, [pc, #100]	; (8104b28 <HAL_DMA_Abort_IT+0x290>)
 8104ac4:	4293      	cmp	r3, r2
 8104ac6:	d00e      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	4a17      	ldr	r2, [pc, #92]	; (8104b2c <HAL_DMA_Abort_IT+0x294>)
 8104ace:	4293      	cmp	r3, r2
 8104ad0:	d009      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	4a16      	ldr	r2, [pc, #88]	; (8104b30 <HAL_DMA_Abort_IT+0x298>)
 8104ad8:	4293      	cmp	r3, r2
 8104ada:	d004      	beq.n	8104ae6 <HAL_DMA_Abort_IT+0x24e>
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	4a14      	ldr	r2, [pc, #80]	; (8104b34 <HAL_DMA_Abort_IT+0x29c>)
 8104ae2:	4293      	cmp	r3, r2
 8104ae4:	d128      	bne.n	8104b38 <HAL_DMA_Abort_IT+0x2a0>
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	681a      	ldr	r2, [r3, #0]
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	f022 0201 	bic.w	r2, r2, #1
 8104af4:	601a      	str	r2, [r3, #0]
 8104af6:	e027      	b.n	8104b48 <HAL_DMA_Abort_IT+0x2b0>
 8104af8:	40020010 	.word	0x40020010
 8104afc:	40020028 	.word	0x40020028
 8104b00:	40020040 	.word	0x40020040
 8104b04:	40020058 	.word	0x40020058
 8104b08:	40020070 	.word	0x40020070
 8104b0c:	40020088 	.word	0x40020088
 8104b10:	400200a0 	.word	0x400200a0
 8104b14:	400200b8 	.word	0x400200b8
 8104b18:	40020410 	.word	0x40020410
 8104b1c:	40020428 	.word	0x40020428
 8104b20:	40020440 	.word	0x40020440
 8104b24:	40020458 	.word	0x40020458
 8104b28:	40020470 	.word	0x40020470
 8104b2c:	40020488 	.word	0x40020488
 8104b30:	400204a0 	.word	0x400204a0
 8104b34:	400204b8 	.word	0x400204b8
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	681a      	ldr	r2, [r3, #0]
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	f022 0201 	bic.w	r2, r2, #1
 8104b46:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104b48:	687b      	ldr	r3, [r7, #4]
 8104b4a:	681b      	ldr	r3, [r3, #0]
 8104b4c:	4a5c      	ldr	r2, [pc, #368]	; (8104cc0 <HAL_DMA_Abort_IT+0x428>)
 8104b4e:	4293      	cmp	r3, r2
 8104b50:	d072      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b52:	687b      	ldr	r3, [r7, #4]
 8104b54:	681b      	ldr	r3, [r3, #0]
 8104b56:	4a5b      	ldr	r2, [pc, #364]	; (8104cc4 <HAL_DMA_Abort_IT+0x42c>)
 8104b58:	4293      	cmp	r3, r2
 8104b5a:	d06d      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	4a59      	ldr	r2, [pc, #356]	; (8104cc8 <HAL_DMA_Abort_IT+0x430>)
 8104b62:	4293      	cmp	r3, r2
 8104b64:	d068      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	681b      	ldr	r3, [r3, #0]
 8104b6a:	4a58      	ldr	r2, [pc, #352]	; (8104ccc <HAL_DMA_Abort_IT+0x434>)
 8104b6c:	4293      	cmp	r3, r2
 8104b6e:	d063      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	4a56      	ldr	r2, [pc, #344]	; (8104cd0 <HAL_DMA_Abort_IT+0x438>)
 8104b76:	4293      	cmp	r3, r2
 8104b78:	d05e      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	4a55      	ldr	r2, [pc, #340]	; (8104cd4 <HAL_DMA_Abort_IT+0x43c>)
 8104b80:	4293      	cmp	r3, r2
 8104b82:	d059      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	4a53      	ldr	r2, [pc, #332]	; (8104cd8 <HAL_DMA_Abort_IT+0x440>)
 8104b8a:	4293      	cmp	r3, r2
 8104b8c:	d054      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b8e:	687b      	ldr	r3, [r7, #4]
 8104b90:	681b      	ldr	r3, [r3, #0]
 8104b92:	4a52      	ldr	r2, [pc, #328]	; (8104cdc <HAL_DMA_Abort_IT+0x444>)
 8104b94:	4293      	cmp	r3, r2
 8104b96:	d04f      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	4a50      	ldr	r2, [pc, #320]	; (8104ce0 <HAL_DMA_Abort_IT+0x448>)
 8104b9e:	4293      	cmp	r3, r2
 8104ba0:	d04a      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	4a4f      	ldr	r2, [pc, #316]	; (8104ce4 <HAL_DMA_Abort_IT+0x44c>)
 8104ba8:	4293      	cmp	r3, r2
 8104baa:	d045      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	4a4d      	ldr	r2, [pc, #308]	; (8104ce8 <HAL_DMA_Abort_IT+0x450>)
 8104bb2:	4293      	cmp	r3, r2
 8104bb4:	d040      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	4a4c      	ldr	r2, [pc, #304]	; (8104cec <HAL_DMA_Abort_IT+0x454>)
 8104bbc:	4293      	cmp	r3, r2
 8104bbe:	d03b      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	4a4a      	ldr	r2, [pc, #296]	; (8104cf0 <HAL_DMA_Abort_IT+0x458>)
 8104bc6:	4293      	cmp	r3, r2
 8104bc8:	d036      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	4a49      	ldr	r2, [pc, #292]	; (8104cf4 <HAL_DMA_Abort_IT+0x45c>)
 8104bd0:	4293      	cmp	r3, r2
 8104bd2:	d031      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	4a47      	ldr	r2, [pc, #284]	; (8104cf8 <HAL_DMA_Abort_IT+0x460>)
 8104bda:	4293      	cmp	r3, r2
 8104bdc:	d02c      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	681b      	ldr	r3, [r3, #0]
 8104be2:	4a46      	ldr	r2, [pc, #280]	; (8104cfc <HAL_DMA_Abort_IT+0x464>)
 8104be4:	4293      	cmp	r3, r2
 8104be6:	d027      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	681b      	ldr	r3, [r3, #0]
 8104bec:	4a44      	ldr	r2, [pc, #272]	; (8104d00 <HAL_DMA_Abort_IT+0x468>)
 8104bee:	4293      	cmp	r3, r2
 8104bf0:	d022      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	681b      	ldr	r3, [r3, #0]
 8104bf6:	4a43      	ldr	r2, [pc, #268]	; (8104d04 <HAL_DMA_Abort_IT+0x46c>)
 8104bf8:	4293      	cmp	r3, r2
 8104bfa:	d01d      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	4a41      	ldr	r2, [pc, #260]	; (8104d08 <HAL_DMA_Abort_IT+0x470>)
 8104c02:	4293      	cmp	r3, r2
 8104c04:	d018      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	681b      	ldr	r3, [r3, #0]
 8104c0a:	4a40      	ldr	r2, [pc, #256]	; (8104d0c <HAL_DMA_Abort_IT+0x474>)
 8104c0c:	4293      	cmp	r3, r2
 8104c0e:	d013      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104c10:	687b      	ldr	r3, [r7, #4]
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	4a3e      	ldr	r2, [pc, #248]	; (8104d10 <HAL_DMA_Abort_IT+0x478>)
 8104c16:	4293      	cmp	r3, r2
 8104c18:	d00e      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	681b      	ldr	r3, [r3, #0]
 8104c1e:	4a3d      	ldr	r2, [pc, #244]	; (8104d14 <HAL_DMA_Abort_IT+0x47c>)
 8104c20:	4293      	cmp	r3, r2
 8104c22:	d009      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	4a3b      	ldr	r2, [pc, #236]	; (8104d18 <HAL_DMA_Abort_IT+0x480>)
 8104c2a:	4293      	cmp	r3, r2
 8104c2c:	d004      	beq.n	8104c38 <HAL_DMA_Abort_IT+0x3a0>
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	4a3a      	ldr	r2, [pc, #232]	; (8104d1c <HAL_DMA_Abort_IT+0x484>)
 8104c34:	4293      	cmp	r3, r2
 8104c36:	d101      	bne.n	8104c3c <HAL_DMA_Abort_IT+0x3a4>
 8104c38:	2301      	movs	r3, #1
 8104c3a:	e000      	b.n	8104c3e <HAL_DMA_Abort_IT+0x3a6>
 8104c3c:	2300      	movs	r3, #0
 8104c3e:	2b00      	cmp	r3, #0
 8104c40:	d028      	beq.n	8104c94 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104c46:	681a      	ldr	r2, [r3, #0]
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104c50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104c5c:	f003 031f 	and.w	r3, r3, #31
 8104c60:	2201      	movs	r2, #1
 8104c62:	409a      	lsls	r2, r3
 8104c64:	68fb      	ldr	r3, [r7, #12]
 8104c66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c6c:	687a      	ldr	r2, [r7, #4]
 8104c6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104c70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104c76:	2b00      	cmp	r3, #0
 8104c78:	d00c      	beq.n	8104c94 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104c7e:	681a      	ldr	r2, [r3, #0]
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104c88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104c8e:	687a      	ldr	r2, [r7, #4]
 8104c90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104c92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	2200      	movs	r2, #0
 8104c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	2201      	movs	r2, #1
 8104ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ca8:	2b00      	cmp	r3, #0
 8104caa:	d003      	beq.n	8104cb4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104cb0:	6878      	ldr	r0, [r7, #4]
 8104cb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8104cb4:	2300      	movs	r3, #0
}
 8104cb6:	4618      	mov	r0, r3
 8104cb8:	3710      	adds	r7, #16
 8104cba:	46bd      	mov	sp, r7
 8104cbc:	bd80      	pop	{r7, pc}
 8104cbe:	bf00      	nop
 8104cc0:	40020010 	.word	0x40020010
 8104cc4:	40020028 	.word	0x40020028
 8104cc8:	40020040 	.word	0x40020040
 8104ccc:	40020058 	.word	0x40020058
 8104cd0:	40020070 	.word	0x40020070
 8104cd4:	40020088 	.word	0x40020088
 8104cd8:	400200a0 	.word	0x400200a0
 8104cdc:	400200b8 	.word	0x400200b8
 8104ce0:	40020410 	.word	0x40020410
 8104ce4:	40020428 	.word	0x40020428
 8104ce8:	40020440 	.word	0x40020440
 8104cec:	40020458 	.word	0x40020458
 8104cf0:	40020470 	.word	0x40020470
 8104cf4:	40020488 	.word	0x40020488
 8104cf8:	400204a0 	.word	0x400204a0
 8104cfc:	400204b8 	.word	0x400204b8
 8104d00:	58025408 	.word	0x58025408
 8104d04:	5802541c 	.word	0x5802541c
 8104d08:	58025430 	.word	0x58025430
 8104d0c:	58025444 	.word	0x58025444
 8104d10:	58025458 	.word	0x58025458
 8104d14:	5802546c 	.word	0x5802546c
 8104d18:	58025480 	.word	0x58025480
 8104d1c:	58025494 	.word	0x58025494

08104d20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104d20:	b580      	push	{r7, lr}
 8104d22:	b08a      	sub	sp, #40	; 0x28
 8104d24:	af00      	add	r7, sp, #0
 8104d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8104d28:	2300      	movs	r3, #0
 8104d2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104d2c:	4b67      	ldr	r3, [pc, #412]	; (8104ecc <HAL_DMA_IRQHandler+0x1ac>)
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a67      	ldr	r2, [pc, #412]	; (8104ed0 <HAL_DMA_IRQHandler+0x1b0>)
 8104d32:	fba2 2303 	umull	r2, r3, r2, r3
 8104d36:	0a9b      	lsrs	r3, r3, #10
 8104d38:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8104d46:	6a3b      	ldr	r3, [r7, #32]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8104d4c:	69fb      	ldr	r3, [r7, #28]
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	4a5f      	ldr	r2, [pc, #380]	; (8104ed4 <HAL_DMA_IRQHandler+0x1b4>)
 8104d58:	4293      	cmp	r3, r2
 8104d5a:	d04a      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	4a5d      	ldr	r2, [pc, #372]	; (8104ed8 <HAL_DMA_IRQHandler+0x1b8>)
 8104d62:	4293      	cmp	r3, r2
 8104d64:	d045      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	681b      	ldr	r3, [r3, #0]
 8104d6a:	4a5c      	ldr	r2, [pc, #368]	; (8104edc <HAL_DMA_IRQHandler+0x1bc>)
 8104d6c:	4293      	cmp	r3, r2
 8104d6e:	d040      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	4a5a      	ldr	r2, [pc, #360]	; (8104ee0 <HAL_DMA_IRQHandler+0x1c0>)
 8104d76:	4293      	cmp	r3, r2
 8104d78:	d03b      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	4a59      	ldr	r2, [pc, #356]	; (8104ee4 <HAL_DMA_IRQHandler+0x1c4>)
 8104d80:	4293      	cmp	r3, r2
 8104d82:	d036      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	4a57      	ldr	r2, [pc, #348]	; (8104ee8 <HAL_DMA_IRQHandler+0x1c8>)
 8104d8a:	4293      	cmp	r3, r2
 8104d8c:	d031      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	4a56      	ldr	r2, [pc, #344]	; (8104eec <HAL_DMA_IRQHandler+0x1cc>)
 8104d94:	4293      	cmp	r3, r2
 8104d96:	d02c      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	4a54      	ldr	r2, [pc, #336]	; (8104ef0 <HAL_DMA_IRQHandler+0x1d0>)
 8104d9e:	4293      	cmp	r3, r2
 8104da0:	d027      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	4a53      	ldr	r2, [pc, #332]	; (8104ef4 <HAL_DMA_IRQHandler+0x1d4>)
 8104da8:	4293      	cmp	r3, r2
 8104daa:	d022      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	4a51      	ldr	r2, [pc, #324]	; (8104ef8 <HAL_DMA_IRQHandler+0x1d8>)
 8104db2:	4293      	cmp	r3, r2
 8104db4:	d01d      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	4a50      	ldr	r2, [pc, #320]	; (8104efc <HAL_DMA_IRQHandler+0x1dc>)
 8104dbc:	4293      	cmp	r3, r2
 8104dbe:	d018      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a4e      	ldr	r2, [pc, #312]	; (8104f00 <HAL_DMA_IRQHandler+0x1e0>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d013      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	4a4d      	ldr	r2, [pc, #308]	; (8104f04 <HAL_DMA_IRQHandler+0x1e4>)
 8104dd0:	4293      	cmp	r3, r2
 8104dd2:	d00e      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	4a4b      	ldr	r2, [pc, #300]	; (8104f08 <HAL_DMA_IRQHandler+0x1e8>)
 8104dda:	4293      	cmp	r3, r2
 8104ddc:	d009      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a4a      	ldr	r2, [pc, #296]	; (8104f0c <HAL_DMA_IRQHandler+0x1ec>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d004      	beq.n	8104df2 <HAL_DMA_IRQHandler+0xd2>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a48      	ldr	r2, [pc, #288]	; (8104f10 <HAL_DMA_IRQHandler+0x1f0>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d101      	bne.n	8104df6 <HAL_DMA_IRQHandler+0xd6>
 8104df2:	2301      	movs	r3, #1
 8104df4:	e000      	b.n	8104df8 <HAL_DMA_IRQHandler+0xd8>
 8104df6:	2300      	movs	r3, #0
 8104df8:	2b00      	cmp	r3, #0
 8104dfa:	f000 842b 	beq.w	8105654 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e02:	f003 031f 	and.w	r3, r3, #31
 8104e06:	2208      	movs	r2, #8
 8104e08:	409a      	lsls	r2, r3
 8104e0a:	69bb      	ldr	r3, [r7, #24]
 8104e0c:	4013      	ands	r3, r2
 8104e0e:	2b00      	cmp	r3, #0
 8104e10:	f000 80a2 	beq.w	8104f58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	4a2e      	ldr	r2, [pc, #184]	; (8104ed4 <HAL_DMA_IRQHandler+0x1b4>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d04a      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a2d      	ldr	r2, [pc, #180]	; (8104ed8 <HAL_DMA_IRQHandler+0x1b8>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d045      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a2b      	ldr	r2, [pc, #172]	; (8104edc <HAL_DMA_IRQHandler+0x1bc>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d040      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a2a      	ldr	r2, [pc, #168]	; (8104ee0 <HAL_DMA_IRQHandler+0x1c0>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d03b      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	4a28      	ldr	r2, [pc, #160]	; (8104ee4 <HAL_DMA_IRQHandler+0x1c4>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d036      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	4a27      	ldr	r2, [pc, #156]	; (8104ee8 <HAL_DMA_IRQHandler+0x1c8>)
 8104e4c:	4293      	cmp	r3, r2
 8104e4e:	d031      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	4a25      	ldr	r2, [pc, #148]	; (8104eec <HAL_DMA_IRQHandler+0x1cc>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d02c      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	4a24      	ldr	r2, [pc, #144]	; (8104ef0 <HAL_DMA_IRQHandler+0x1d0>)
 8104e60:	4293      	cmp	r3, r2
 8104e62:	d027      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	4a22      	ldr	r2, [pc, #136]	; (8104ef4 <HAL_DMA_IRQHandler+0x1d4>)
 8104e6a:	4293      	cmp	r3, r2
 8104e6c:	d022      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	4a21      	ldr	r2, [pc, #132]	; (8104ef8 <HAL_DMA_IRQHandler+0x1d8>)
 8104e74:	4293      	cmp	r3, r2
 8104e76:	d01d      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	4a1f      	ldr	r2, [pc, #124]	; (8104efc <HAL_DMA_IRQHandler+0x1dc>)
 8104e7e:	4293      	cmp	r3, r2
 8104e80:	d018      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	4a1e      	ldr	r2, [pc, #120]	; (8104f00 <HAL_DMA_IRQHandler+0x1e0>)
 8104e88:	4293      	cmp	r3, r2
 8104e8a:	d013      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	4a1c      	ldr	r2, [pc, #112]	; (8104f04 <HAL_DMA_IRQHandler+0x1e4>)
 8104e92:	4293      	cmp	r3, r2
 8104e94:	d00e      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	4a1b      	ldr	r2, [pc, #108]	; (8104f08 <HAL_DMA_IRQHandler+0x1e8>)
 8104e9c:	4293      	cmp	r3, r2
 8104e9e:	d009      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	4a19      	ldr	r2, [pc, #100]	; (8104f0c <HAL_DMA_IRQHandler+0x1ec>)
 8104ea6:	4293      	cmp	r3, r2
 8104ea8:	d004      	beq.n	8104eb4 <HAL_DMA_IRQHandler+0x194>
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	4a18      	ldr	r2, [pc, #96]	; (8104f10 <HAL_DMA_IRQHandler+0x1f0>)
 8104eb0:	4293      	cmp	r3, r2
 8104eb2:	d12f      	bne.n	8104f14 <HAL_DMA_IRQHandler+0x1f4>
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	681b      	ldr	r3, [r3, #0]
 8104eba:	f003 0304 	and.w	r3, r3, #4
 8104ebe:	2b00      	cmp	r3, #0
 8104ec0:	bf14      	ite	ne
 8104ec2:	2301      	movne	r3, #1
 8104ec4:	2300      	moveq	r3, #0
 8104ec6:	b2db      	uxtb	r3, r3
 8104ec8:	e02e      	b.n	8104f28 <HAL_DMA_IRQHandler+0x208>
 8104eca:	bf00      	nop
 8104ecc:	10000000 	.word	0x10000000
 8104ed0:	1b4e81b5 	.word	0x1b4e81b5
 8104ed4:	40020010 	.word	0x40020010
 8104ed8:	40020028 	.word	0x40020028
 8104edc:	40020040 	.word	0x40020040
 8104ee0:	40020058 	.word	0x40020058
 8104ee4:	40020070 	.word	0x40020070
 8104ee8:	40020088 	.word	0x40020088
 8104eec:	400200a0 	.word	0x400200a0
 8104ef0:	400200b8 	.word	0x400200b8
 8104ef4:	40020410 	.word	0x40020410
 8104ef8:	40020428 	.word	0x40020428
 8104efc:	40020440 	.word	0x40020440
 8104f00:	40020458 	.word	0x40020458
 8104f04:	40020470 	.word	0x40020470
 8104f08:	40020488 	.word	0x40020488
 8104f0c:	400204a0 	.word	0x400204a0
 8104f10:	400204b8 	.word	0x400204b8
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	f003 0308 	and.w	r3, r3, #8
 8104f1e:	2b00      	cmp	r3, #0
 8104f20:	bf14      	ite	ne
 8104f22:	2301      	movne	r3, #1
 8104f24:	2300      	moveq	r3, #0
 8104f26:	b2db      	uxtb	r3, r3
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d015      	beq.n	8104f58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	681a      	ldr	r2, [r3, #0]
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	f022 0204 	bic.w	r2, r2, #4
 8104f3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f40:	f003 031f 	and.w	r3, r3, #31
 8104f44:	2208      	movs	r2, #8
 8104f46:	409a      	lsls	r2, r3
 8104f48:	6a3b      	ldr	r3, [r7, #32]
 8104f4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f50:	f043 0201 	orr.w	r2, r3, #1
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f5c:	f003 031f 	and.w	r3, r3, #31
 8104f60:	69ba      	ldr	r2, [r7, #24]
 8104f62:	fa22 f303 	lsr.w	r3, r2, r3
 8104f66:	f003 0301 	and.w	r3, r3, #1
 8104f6a:	2b00      	cmp	r3, #0
 8104f6c:	d06e      	beq.n	810504c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	4a69      	ldr	r2, [pc, #420]	; (8105118 <HAL_DMA_IRQHandler+0x3f8>)
 8104f74:	4293      	cmp	r3, r2
 8104f76:	d04a      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	4a67      	ldr	r2, [pc, #412]	; (810511c <HAL_DMA_IRQHandler+0x3fc>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	d045      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	4a66      	ldr	r2, [pc, #408]	; (8105120 <HAL_DMA_IRQHandler+0x400>)
 8104f88:	4293      	cmp	r3, r2
 8104f8a:	d040      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	4a64      	ldr	r2, [pc, #400]	; (8105124 <HAL_DMA_IRQHandler+0x404>)
 8104f92:	4293      	cmp	r3, r2
 8104f94:	d03b      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	4a63      	ldr	r2, [pc, #396]	; (8105128 <HAL_DMA_IRQHandler+0x408>)
 8104f9c:	4293      	cmp	r3, r2
 8104f9e:	d036      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	4a61      	ldr	r2, [pc, #388]	; (810512c <HAL_DMA_IRQHandler+0x40c>)
 8104fa6:	4293      	cmp	r3, r2
 8104fa8:	d031      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	4a60      	ldr	r2, [pc, #384]	; (8105130 <HAL_DMA_IRQHandler+0x410>)
 8104fb0:	4293      	cmp	r3, r2
 8104fb2:	d02c      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	4a5e      	ldr	r2, [pc, #376]	; (8105134 <HAL_DMA_IRQHandler+0x414>)
 8104fba:	4293      	cmp	r3, r2
 8104fbc:	d027      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	4a5d      	ldr	r2, [pc, #372]	; (8105138 <HAL_DMA_IRQHandler+0x418>)
 8104fc4:	4293      	cmp	r3, r2
 8104fc6:	d022      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	4a5b      	ldr	r2, [pc, #364]	; (810513c <HAL_DMA_IRQHandler+0x41c>)
 8104fce:	4293      	cmp	r3, r2
 8104fd0:	d01d      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	4a5a      	ldr	r2, [pc, #360]	; (8105140 <HAL_DMA_IRQHandler+0x420>)
 8104fd8:	4293      	cmp	r3, r2
 8104fda:	d018      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	4a58      	ldr	r2, [pc, #352]	; (8105144 <HAL_DMA_IRQHandler+0x424>)
 8104fe2:	4293      	cmp	r3, r2
 8104fe4:	d013      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a57      	ldr	r2, [pc, #348]	; (8105148 <HAL_DMA_IRQHandler+0x428>)
 8104fec:	4293      	cmp	r3, r2
 8104fee:	d00e      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	4a55      	ldr	r2, [pc, #340]	; (810514c <HAL_DMA_IRQHandler+0x42c>)
 8104ff6:	4293      	cmp	r3, r2
 8104ff8:	d009      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	4a54      	ldr	r2, [pc, #336]	; (8105150 <HAL_DMA_IRQHandler+0x430>)
 8105000:	4293      	cmp	r3, r2
 8105002:	d004      	beq.n	810500e <HAL_DMA_IRQHandler+0x2ee>
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	4a52      	ldr	r2, [pc, #328]	; (8105154 <HAL_DMA_IRQHandler+0x434>)
 810500a:	4293      	cmp	r3, r2
 810500c:	d10a      	bne.n	8105024 <HAL_DMA_IRQHandler+0x304>
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	681b      	ldr	r3, [r3, #0]
 8105012:	695b      	ldr	r3, [r3, #20]
 8105014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105018:	2b00      	cmp	r3, #0
 810501a:	bf14      	ite	ne
 810501c:	2301      	movne	r3, #1
 810501e:	2300      	moveq	r3, #0
 8105020:	b2db      	uxtb	r3, r3
 8105022:	e003      	b.n	810502c <HAL_DMA_IRQHandler+0x30c>
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	681b      	ldr	r3, [r3, #0]
 810502a:	2300      	movs	r3, #0
 810502c:	2b00      	cmp	r3, #0
 810502e:	d00d      	beq.n	810504c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105034:	f003 031f 	and.w	r3, r3, #31
 8105038:	2201      	movs	r2, #1
 810503a:	409a      	lsls	r2, r3
 810503c:	6a3b      	ldr	r3, [r7, #32]
 810503e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105044:	f043 0202 	orr.w	r2, r3, #2
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105050:	f003 031f 	and.w	r3, r3, #31
 8105054:	2204      	movs	r2, #4
 8105056:	409a      	lsls	r2, r3
 8105058:	69bb      	ldr	r3, [r7, #24]
 810505a:	4013      	ands	r3, r2
 810505c:	2b00      	cmp	r3, #0
 810505e:	f000 808f 	beq.w	8105180 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	4a2c      	ldr	r2, [pc, #176]	; (8105118 <HAL_DMA_IRQHandler+0x3f8>)
 8105068:	4293      	cmp	r3, r2
 810506a:	d04a      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	4a2a      	ldr	r2, [pc, #168]	; (810511c <HAL_DMA_IRQHandler+0x3fc>)
 8105072:	4293      	cmp	r3, r2
 8105074:	d045      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	4a29      	ldr	r2, [pc, #164]	; (8105120 <HAL_DMA_IRQHandler+0x400>)
 810507c:	4293      	cmp	r3, r2
 810507e:	d040      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	4a27      	ldr	r2, [pc, #156]	; (8105124 <HAL_DMA_IRQHandler+0x404>)
 8105086:	4293      	cmp	r3, r2
 8105088:	d03b      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	681b      	ldr	r3, [r3, #0]
 810508e:	4a26      	ldr	r2, [pc, #152]	; (8105128 <HAL_DMA_IRQHandler+0x408>)
 8105090:	4293      	cmp	r3, r2
 8105092:	d036      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	681b      	ldr	r3, [r3, #0]
 8105098:	4a24      	ldr	r2, [pc, #144]	; (810512c <HAL_DMA_IRQHandler+0x40c>)
 810509a:	4293      	cmp	r3, r2
 810509c:	d031      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	681b      	ldr	r3, [r3, #0]
 81050a2:	4a23      	ldr	r2, [pc, #140]	; (8105130 <HAL_DMA_IRQHandler+0x410>)
 81050a4:	4293      	cmp	r3, r2
 81050a6:	d02c      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	681b      	ldr	r3, [r3, #0]
 81050ac:	4a21      	ldr	r2, [pc, #132]	; (8105134 <HAL_DMA_IRQHandler+0x414>)
 81050ae:	4293      	cmp	r3, r2
 81050b0:	d027      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	4a20      	ldr	r2, [pc, #128]	; (8105138 <HAL_DMA_IRQHandler+0x418>)
 81050b8:	4293      	cmp	r3, r2
 81050ba:	d022      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	4a1e      	ldr	r2, [pc, #120]	; (810513c <HAL_DMA_IRQHandler+0x41c>)
 81050c2:	4293      	cmp	r3, r2
 81050c4:	d01d      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	4a1d      	ldr	r2, [pc, #116]	; (8105140 <HAL_DMA_IRQHandler+0x420>)
 81050cc:	4293      	cmp	r3, r2
 81050ce:	d018      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	4a1b      	ldr	r2, [pc, #108]	; (8105144 <HAL_DMA_IRQHandler+0x424>)
 81050d6:	4293      	cmp	r3, r2
 81050d8:	d013      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	4a1a      	ldr	r2, [pc, #104]	; (8105148 <HAL_DMA_IRQHandler+0x428>)
 81050e0:	4293      	cmp	r3, r2
 81050e2:	d00e      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	4a18      	ldr	r2, [pc, #96]	; (810514c <HAL_DMA_IRQHandler+0x42c>)
 81050ea:	4293      	cmp	r3, r2
 81050ec:	d009      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	4a17      	ldr	r2, [pc, #92]	; (8105150 <HAL_DMA_IRQHandler+0x430>)
 81050f4:	4293      	cmp	r3, r2
 81050f6:	d004      	beq.n	8105102 <HAL_DMA_IRQHandler+0x3e2>
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	4a15      	ldr	r2, [pc, #84]	; (8105154 <HAL_DMA_IRQHandler+0x434>)
 81050fe:	4293      	cmp	r3, r2
 8105100:	d12a      	bne.n	8105158 <HAL_DMA_IRQHandler+0x438>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	f003 0302 	and.w	r3, r3, #2
 810510c:	2b00      	cmp	r3, #0
 810510e:	bf14      	ite	ne
 8105110:	2301      	movne	r3, #1
 8105112:	2300      	moveq	r3, #0
 8105114:	b2db      	uxtb	r3, r3
 8105116:	e023      	b.n	8105160 <HAL_DMA_IRQHandler+0x440>
 8105118:	40020010 	.word	0x40020010
 810511c:	40020028 	.word	0x40020028
 8105120:	40020040 	.word	0x40020040
 8105124:	40020058 	.word	0x40020058
 8105128:	40020070 	.word	0x40020070
 810512c:	40020088 	.word	0x40020088
 8105130:	400200a0 	.word	0x400200a0
 8105134:	400200b8 	.word	0x400200b8
 8105138:	40020410 	.word	0x40020410
 810513c:	40020428 	.word	0x40020428
 8105140:	40020440 	.word	0x40020440
 8105144:	40020458 	.word	0x40020458
 8105148:	40020470 	.word	0x40020470
 810514c:	40020488 	.word	0x40020488
 8105150:	400204a0 	.word	0x400204a0
 8105154:	400204b8 	.word	0x400204b8
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	681b      	ldr	r3, [r3, #0]
 810515e:	2300      	movs	r3, #0
 8105160:	2b00      	cmp	r3, #0
 8105162:	d00d      	beq.n	8105180 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105168:	f003 031f 	and.w	r3, r3, #31
 810516c:	2204      	movs	r2, #4
 810516e:	409a      	lsls	r2, r3
 8105170:	6a3b      	ldr	r3, [r7, #32]
 8105172:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105178:	f043 0204 	orr.w	r2, r3, #4
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105184:	f003 031f 	and.w	r3, r3, #31
 8105188:	2210      	movs	r2, #16
 810518a:	409a      	lsls	r2, r3
 810518c:	69bb      	ldr	r3, [r7, #24]
 810518e:	4013      	ands	r3, r2
 8105190:	2b00      	cmp	r3, #0
 8105192:	f000 80a6 	beq.w	81052e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	4a85      	ldr	r2, [pc, #532]	; (81053b0 <HAL_DMA_IRQHandler+0x690>)
 810519c:	4293      	cmp	r3, r2
 810519e:	d04a      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	4a83      	ldr	r2, [pc, #524]	; (81053b4 <HAL_DMA_IRQHandler+0x694>)
 81051a6:	4293      	cmp	r3, r2
 81051a8:	d045      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a82      	ldr	r2, [pc, #520]	; (81053b8 <HAL_DMA_IRQHandler+0x698>)
 81051b0:	4293      	cmp	r3, r2
 81051b2:	d040      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4a80      	ldr	r2, [pc, #512]	; (81053bc <HAL_DMA_IRQHandler+0x69c>)
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d03b      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	4a7f      	ldr	r2, [pc, #508]	; (81053c0 <HAL_DMA_IRQHandler+0x6a0>)
 81051c4:	4293      	cmp	r3, r2
 81051c6:	d036      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	4a7d      	ldr	r2, [pc, #500]	; (81053c4 <HAL_DMA_IRQHandler+0x6a4>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d031      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	4a7c      	ldr	r2, [pc, #496]	; (81053c8 <HAL_DMA_IRQHandler+0x6a8>)
 81051d8:	4293      	cmp	r3, r2
 81051da:	d02c      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	4a7a      	ldr	r2, [pc, #488]	; (81053cc <HAL_DMA_IRQHandler+0x6ac>)
 81051e2:	4293      	cmp	r3, r2
 81051e4:	d027      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	4a79      	ldr	r2, [pc, #484]	; (81053d0 <HAL_DMA_IRQHandler+0x6b0>)
 81051ec:	4293      	cmp	r3, r2
 81051ee:	d022      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	681b      	ldr	r3, [r3, #0]
 81051f4:	4a77      	ldr	r2, [pc, #476]	; (81053d4 <HAL_DMA_IRQHandler+0x6b4>)
 81051f6:	4293      	cmp	r3, r2
 81051f8:	d01d      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	4a76      	ldr	r2, [pc, #472]	; (81053d8 <HAL_DMA_IRQHandler+0x6b8>)
 8105200:	4293      	cmp	r3, r2
 8105202:	d018      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 8105204:	687b      	ldr	r3, [r7, #4]
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	4a74      	ldr	r2, [pc, #464]	; (81053dc <HAL_DMA_IRQHandler+0x6bc>)
 810520a:	4293      	cmp	r3, r2
 810520c:	d013      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	4a73      	ldr	r2, [pc, #460]	; (81053e0 <HAL_DMA_IRQHandler+0x6c0>)
 8105214:	4293      	cmp	r3, r2
 8105216:	d00e      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	4a71      	ldr	r2, [pc, #452]	; (81053e4 <HAL_DMA_IRQHandler+0x6c4>)
 810521e:	4293      	cmp	r3, r2
 8105220:	d009      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	4a70      	ldr	r2, [pc, #448]	; (81053e8 <HAL_DMA_IRQHandler+0x6c8>)
 8105228:	4293      	cmp	r3, r2
 810522a:	d004      	beq.n	8105236 <HAL_DMA_IRQHandler+0x516>
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4a6e      	ldr	r2, [pc, #440]	; (81053ec <HAL_DMA_IRQHandler+0x6cc>)
 8105232:	4293      	cmp	r3, r2
 8105234:	d10a      	bne.n	810524c <HAL_DMA_IRQHandler+0x52c>
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	681b      	ldr	r3, [r3, #0]
 810523c:	f003 0308 	and.w	r3, r3, #8
 8105240:	2b00      	cmp	r3, #0
 8105242:	bf14      	ite	ne
 8105244:	2301      	movne	r3, #1
 8105246:	2300      	moveq	r3, #0
 8105248:	b2db      	uxtb	r3, r3
 810524a:	e009      	b.n	8105260 <HAL_DMA_IRQHandler+0x540>
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	f003 0304 	and.w	r3, r3, #4
 8105256:	2b00      	cmp	r3, #0
 8105258:	bf14      	ite	ne
 810525a:	2301      	movne	r3, #1
 810525c:	2300      	moveq	r3, #0
 810525e:	b2db      	uxtb	r3, r3
 8105260:	2b00      	cmp	r3, #0
 8105262:	d03e      	beq.n	81052e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105268:	f003 031f 	and.w	r3, r3, #31
 810526c:	2210      	movs	r2, #16
 810526e:	409a      	lsls	r2, r3
 8105270:	6a3b      	ldr	r3, [r7, #32]
 8105272:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	681b      	ldr	r3, [r3, #0]
 8105278:	681b      	ldr	r3, [r3, #0]
 810527a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810527e:	2b00      	cmp	r3, #0
 8105280:	d018      	beq.n	81052b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810528c:	2b00      	cmp	r3, #0
 810528e:	d108      	bne.n	81052a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105294:	2b00      	cmp	r3, #0
 8105296:	d024      	beq.n	81052e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810529c:	6878      	ldr	r0, [r7, #4]
 810529e:	4798      	blx	r3
 81052a0:	e01f      	b.n	81052e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81052a6:	2b00      	cmp	r3, #0
 81052a8:	d01b      	beq.n	81052e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81052ae:	6878      	ldr	r0, [r7, #4]
 81052b0:	4798      	blx	r3
 81052b2:	e016      	b.n	81052e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81052be:	2b00      	cmp	r3, #0
 81052c0:	d107      	bne.n	81052d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	681a      	ldr	r2, [r3, #0]
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	f022 0208 	bic.w	r2, r2, #8
 81052d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81052d6:	2b00      	cmp	r3, #0
 81052d8:	d003      	beq.n	81052e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81052de:	6878      	ldr	r0, [r7, #4]
 81052e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81052e2:	687b      	ldr	r3, [r7, #4]
 81052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052e6:	f003 031f 	and.w	r3, r3, #31
 81052ea:	2220      	movs	r2, #32
 81052ec:	409a      	lsls	r2, r3
 81052ee:	69bb      	ldr	r3, [r7, #24]
 81052f0:	4013      	ands	r3, r2
 81052f2:	2b00      	cmp	r3, #0
 81052f4:	f000 8110 	beq.w	8105518 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	4a2c      	ldr	r2, [pc, #176]	; (81053b0 <HAL_DMA_IRQHandler+0x690>)
 81052fe:	4293      	cmp	r3, r2
 8105300:	d04a      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	4a2b      	ldr	r2, [pc, #172]	; (81053b4 <HAL_DMA_IRQHandler+0x694>)
 8105308:	4293      	cmp	r3, r2
 810530a:	d045      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	681b      	ldr	r3, [r3, #0]
 8105310:	4a29      	ldr	r2, [pc, #164]	; (81053b8 <HAL_DMA_IRQHandler+0x698>)
 8105312:	4293      	cmp	r3, r2
 8105314:	d040      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	681b      	ldr	r3, [r3, #0]
 810531a:	4a28      	ldr	r2, [pc, #160]	; (81053bc <HAL_DMA_IRQHandler+0x69c>)
 810531c:	4293      	cmp	r3, r2
 810531e:	d03b      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	681b      	ldr	r3, [r3, #0]
 8105324:	4a26      	ldr	r2, [pc, #152]	; (81053c0 <HAL_DMA_IRQHandler+0x6a0>)
 8105326:	4293      	cmp	r3, r2
 8105328:	d036      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	4a25      	ldr	r2, [pc, #148]	; (81053c4 <HAL_DMA_IRQHandler+0x6a4>)
 8105330:	4293      	cmp	r3, r2
 8105332:	d031      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105334:	687b      	ldr	r3, [r7, #4]
 8105336:	681b      	ldr	r3, [r3, #0]
 8105338:	4a23      	ldr	r2, [pc, #140]	; (81053c8 <HAL_DMA_IRQHandler+0x6a8>)
 810533a:	4293      	cmp	r3, r2
 810533c:	d02c      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	681b      	ldr	r3, [r3, #0]
 8105342:	4a22      	ldr	r2, [pc, #136]	; (81053cc <HAL_DMA_IRQHandler+0x6ac>)
 8105344:	4293      	cmp	r3, r2
 8105346:	d027      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	681b      	ldr	r3, [r3, #0]
 810534c:	4a20      	ldr	r2, [pc, #128]	; (81053d0 <HAL_DMA_IRQHandler+0x6b0>)
 810534e:	4293      	cmp	r3, r2
 8105350:	d022      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	681b      	ldr	r3, [r3, #0]
 8105356:	4a1f      	ldr	r2, [pc, #124]	; (81053d4 <HAL_DMA_IRQHandler+0x6b4>)
 8105358:	4293      	cmp	r3, r2
 810535a:	d01d      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	4a1d      	ldr	r2, [pc, #116]	; (81053d8 <HAL_DMA_IRQHandler+0x6b8>)
 8105362:	4293      	cmp	r3, r2
 8105364:	d018      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	4a1c      	ldr	r2, [pc, #112]	; (81053dc <HAL_DMA_IRQHandler+0x6bc>)
 810536c:	4293      	cmp	r3, r2
 810536e:	d013      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	4a1a      	ldr	r2, [pc, #104]	; (81053e0 <HAL_DMA_IRQHandler+0x6c0>)
 8105376:	4293      	cmp	r3, r2
 8105378:	d00e      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	4a19      	ldr	r2, [pc, #100]	; (81053e4 <HAL_DMA_IRQHandler+0x6c4>)
 8105380:	4293      	cmp	r3, r2
 8105382:	d009      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	681b      	ldr	r3, [r3, #0]
 8105388:	4a17      	ldr	r2, [pc, #92]	; (81053e8 <HAL_DMA_IRQHandler+0x6c8>)
 810538a:	4293      	cmp	r3, r2
 810538c:	d004      	beq.n	8105398 <HAL_DMA_IRQHandler+0x678>
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	4a16      	ldr	r2, [pc, #88]	; (81053ec <HAL_DMA_IRQHandler+0x6cc>)
 8105394:	4293      	cmp	r3, r2
 8105396:	d12b      	bne.n	81053f0 <HAL_DMA_IRQHandler+0x6d0>
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	f003 0310 	and.w	r3, r3, #16
 81053a2:	2b00      	cmp	r3, #0
 81053a4:	bf14      	ite	ne
 81053a6:	2301      	movne	r3, #1
 81053a8:	2300      	moveq	r3, #0
 81053aa:	b2db      	uxtb	r3, r3
 81053ac:	e02a      	b.n	8105404 <HAL_DMA_IRQHandler+0x6e4>
 81053ae:	bf00      	nop
 81053b0:	40020010 	.word	0x40020010
 81053b4:	40020028 	.word	0x40020028
 81053b8:	40020040 	.word	0x40020040
 81053bc:	40020058 	.word	0x40020058
 81053c0:	40020070 	.word	0x40020070
 81053c4:	40020088 	.word	0x40020088
 81053c8:	400200a0 	.word	0x400200a0
 81053cc:	400200b8 	.word	0x400200b8
 81053d0:	40020410 	.word	0x40020410
 81053d4:	40020428 	.word	0x40020428
 81053d8:	40020440 	.word	0x40020440
 81053dc:	40020458 	.word	0x40020458
 81053e0:	40020470 	.word	0x40020470
 81053e4:	40020488 	.word	0x40020488
 81053e8:	400204a0 	.word	0x400204a0
 81053ec:	400204b8 	.word	0x400204b8
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	681b      	ldr	r3, [r3, #0]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	f003 0302 	and.w	r3, r3, #2
 81053fa:	2b00      	cmp	r3, #0
 81053fc:	bf14      	ite	ne
 81053fe:	2301      	movne	r3, #1
 8105400:	2300      	moveq	r3, #0
 8105402:	b2db      	uxtb	r3, r3
 8105404:	2b00      	cmp	r3, #0
 8105406:	f000 8087 	beq.w	8105518 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810540e:	f003 031f 	and.w	r3, r3, #31
 8105412:	2220      	movs	r2, #32
 8105414:	409a      	lsls	r2, r3
 8105416:	6a3b      	ldr	r3, [r7, #32]
 8105418:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105420:	b2db      	uxtb	r3, r3
 8105422:	2b04      	cmp	r3, #4
 8105424:	d139      	bne.n	810549a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	681a      	ldr	r2, [r3, #0]
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	681b      	ldr	r3, [r3, #0]
 8105430:	f022 0216 	bic.w	r2, r2, #22
 8105434:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	695a      	ldr	r2, [r3, #20]
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105444:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810544a:	2b00      	cmp	r3, #0
 810544c:	d103      	bne.n	8105456 <HAL_DMA_IRQHandler+0x736>
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105452:	2b00      	cmp	r3, #0
 8105454:	d007      	beq.n	8105466 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	681b      	ldr	r3, [r3, #0]
 810545a:	681a      	ldr	r2, [r3, #0]
 810545c:	687b      	ldr	r3, [r7, #4]
 810545e:	681b      	ldr	r3, [r3, #0]
 8105460:	f022 0208 	bic.w	r2, r2, #8
 8105464:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105466:	687b      	ldr	r3, [r7, #4]
 8105468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810546a:	f003 031f 	and.w	r3, r3, #31
 810546e:	223f      	movs	r2, #63	; 0x3f
 8105470:	409a      	lsls	r2, r3
 8105472:	6a3b      	ldr	r3, [r7, #32]
 8105474:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	2200      	movs	r2, #0
 810547a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	2201      	movs	r2, #1
 8105482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810548a:	2b00      	cmp	r3, #0
 810548c:	f000 834a 	beq.w	8105b24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105494:	6878      	ldr	r0, [r7, #4]
 8105496:	4798      	blx	r3
          }
          return;
 8105498:	e344      	b.n	8105b24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	681b      	ldr	r3, [r3, #0]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81054a4:	2b00      	cmp	r3, #0
 81054a6:	d018      	beq.n	81054da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81054b2:	2b00      	cmp	r3, #0
 81054b4:	d108      	bne.n	81054c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81054ba:	2b00      	cmp	r3, #0
 81054bc:	d02c      	beq.n	8105518 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81054c2:	6878      	ldr	r0, [r7, #4]
 81054c4:	4798      	blx	r3
 81054c6:	e027      	b.n	8105518 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d023      	beq.n	8105518 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81054d4:	6878      	ldr	r0, [r7, #4]
 81054d6:	4798      	blx	r3
 81054d8:	e01e      	b.n	8105518 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81054e4:	2b00      	cmp	r3, #0
 81054e6:	d10f      	bne.n	8105508 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	681a      	ldr	r2, [r3, #0]
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	f022 0210 	bic.w	r2, r2, #16
 81054f6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	2200      	movs	r2, #0
 81054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	2201      	movs	r2, #1
 8105504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8105508:	687b      	ldr	r3, [r7, #4]
 810550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810550c:	2b00      	cmp	r3, #0
 810550e:	d003      	beq.n	8105518 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105514:	6878      	ldr	r0, [r7, #4]
 8105516:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8105518:	687b      	ldr	r3, [r7, #4]
 810551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810551c:	2b00      	cmp	r3, #0
 810551e:	f000 8306 	beq.w	8105b2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105526:	f003 0301 	and.w	r3, r3, #1
 810552a:	2b00      	cmp	r3, #0
 810552c:	f000 8088 	beq.w	8105640 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105530:	687b      	ldr	r3, [r7, #4]
 8105532:	2204      	movs	r2, #4
 8105534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	4a7a      	ldr	r2, [pc, #488]	; (8105728 <HAL_DMA_IRQHandler+0xa08>)
 810553e:	4293      	cmp	r3, r2
 8105540:	d04a      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	4a79      	ldr	r2, [pc, #484]	; (810572c <HAL_DMA_IRQHandler+0xa0c>)
 8105548:	4293      	cmp	r3, r2
 810554a:	d045      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	4a77      	ldr	r2, [pc, #476]	; (8105730 <HAL_DMA_IRQHandler+0xa10>)
 8105552:	4293      	cmp	r3, r2
 8105554:	d040      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	4a76      	ldr	r2, [pc, #472]	; (8105734 <HAL_DMA_IRQHandler+0xa14>)
 810555c:	4293      	cmp	r3, r2
 810555e:	d03b      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	681b      	ldr	r3, [r3, #0]
 8105564:	4a74      	ldr	r2, [pc, #464]	; (8105738 <HAL_DMA_IRQHandler+0xa18>)
 8105566:	4293      	cmp	r3, r2
 8105568:	d036      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	4a73      	ldr	r2, [pc, #460]	; (810573c <HAL_DMA_IRQHandler+0xa1c>)
 8105570:	4293      	cmp	r3, r2
 8105572:	d031      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	4a71      	ldr	r2, [pc, #452]	; (8105740 <HAL_DMA_IRQHandler+0xa20>)
 810557a:	4293      	cmp	r3, r2
 810557c:	d02c      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	4a70      	ldr	r2, [pc, #448]	; (8105744 <HAL_DMA_IRQHandler+0xa24>)
 8105584:	4293      	cmp	r3, r2
 8105586:	d027      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 8105588:	687b      	ldr	r3, [r7, #4]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	4a6e      	ldr	r2, [pc, #440]	; (8105748 <HAL_DMA_IRQHandler+0xa28>)
 810558e:	4293      	cmp	r3, r2
 8105590:	d022      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	4a6d      	ldr	r2, [pc, #436]	; (810574c <HAL_DMA_IRQHandler+0xa2c>)
 8105598:	4293      	cmp	r3, r2
 810559a:	d01d      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	681b      	ldr	r3, [r3, #0]
 81055a0:	4a6b      	ldr	r2, [pc, #428]	; (8105750 <HAL_DMA_IRQHandler+0xa30>)
 81055a2:	4293      	cmp	r3, r2
 81055a4:	d018      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	4a6a      	ldr	r2, [pc, #424]	; (8105754 <HAL_DMA_IRQHandler+0xa34>)
 81055ac:	4293      	cmp	r3, r2
 81055ae:	d013      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	4a68      	ldr	r2, [pc, #416]	; (8105758 <HAL_DMA_IRQHandler+0xa38>)
 81055b6:	4293      	cmp	r3, r2
 81055b8:	d00e      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 81055ba:	687b      	ldr	r3, [r7, #4]
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	4a67      	ldr	r2, [pc, #412]	; (810575c <HAL_DMA_IRQHandler+0xa3c>)
 81055c0:	4293      	cmp	r3, r2
 81055c2:	d009      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	681b      	ldr	r3, [r3, #0]
 81055c8:	4a65      	ldr	r2, [pc, #404]	; (8105760 <HAL_DMA_IRQHandler+0xa40>)
 81055ca:	4293      	cmp	r3, r2
 81055cc:	d004      	beq.n	81055d8 <HAL_DMA_IRQHandler+0x8b8>
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	4a64      	ldr	r2, [pc, #400]	; (8105764 <HAL_DMA_IRQHandler+0xa44>)
 81055d4:	4293      	cmp	r3, r2
 81055d6:	d108      	bne.n	81055ea <HAL_DMA_IRQHandler+0x8ca>
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	681a      	ldr	r2, [r3, #0]
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	f022 0201 	bic.w	r2, r2, #1
 81055e6:	601a      	str	r2, [r3, #0]
 81055e8:	e007      	b.n	81055fa <HAL_DMA_IRQHandler+0x8da>
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	681b      	ldr	r3, [r3, #0]
 81055ee:	681a      	ldr	r2, [r3, #0]
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	f022 0201 	bic.w	r2, r2, #1
 81055f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	3301      	adds	r3, #1
 81055fe:	60fb      	str	r3, [r7, #12]
 8105600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105602:	429a      	cmp	r2, r3
 8105604:	d307      	bcc.n	8105616 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	f003 0301 	and.w	r3, r3, #1
 8105610:	2b00      	cmp	r3, #0
 8105612:	d1f2      	bne.n	81055fa <HAL_DMA_IRQHandler+0x8da>
 8105614:	e000      	b.n	8105618 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8105616:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	2200      	movs	r2, #0
 810561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	f003 0301 	and.w	r3, r3, #1
 810562a:	2b00      	cmp	r3, #0
 810562c:	d004      	beq.n	8105638 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	2203      	movs	r2, #3
 8105632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8105636:	e003      	b.n	8105640 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	2201      	movs	r2, #1
 810563c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105644:	2b00      	cmp	r3, #0
 8105646:	f000 8272 	beq.w	8105b2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810564e:	6878      	ldr	r0, [r7, #4]
 8105650:	4798      	blx	r3
 8105652:	e26c      	b.n	8105b2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	4a43      	ldr	r2, [pc, #268]	; (8105768 <HAL_DMA_IRQHandler+0xa48>)
 810565a:	4293      	cmp	r3, r2
 810565c:	d022      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 810565e:	687b      	ldr	r3, [r7, #4]
 8105660:	681b      	ldr	r3, [r3, #0]
 8105662:	4a42      	ldr	r2, [pc, #264]	; (810576c <HAL_DMA_IRQHandler+0xa4c>)
 8105664:	4293      	cmp	r3, r2
 8105666:	d01d      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	681b      	ldr	r3, [r3, #0]
 810566c:	4a40      	ldr	r2, [pc, #256]	; (8105770 <HAL_DMA_IRQHandler+0xa50>)
 810566e:	4293      	cmp	r3, r2
 8105670:	d018      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	681b      	ldr	r3, [r3, #0]
 8105676:	4a3f      	ldr	r2, [pc, #252]	; (8105774 <HAL_DMA_IRQHandler+0xa54>)
 8105678:	4293      	cmp	r3, r2
 810567a:	d013      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 810567c:	687b      	ldr	r3, [r7, #4]
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	4a3d      	ldr	r2, [pc, #244]	; (8105778 <HAL_DMA_IRQHandler+0xa58>)
 8105682:	4293      	cmp	r3, r2
 8105684:	d00e      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	681b      	ldr	r3, [r3, #0]
 810568a:	4a3c      	ldr	r2, [pc, #240]	; (810577c <HAL_DMA_IRQHandler+0xa5c>)
 810568c:	4293      	cmp	r3, r2
 810568e:	d009      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	4a3a      	ldr	r2, [pc, #232]	; (8105780 <HAL_DMA_IRQHandler+0xa60>)
 8105696:	4293      	cmp	r3, r2
 8105698:	d004      	beq.n	81056a4 <HAL_DMA_IRQHandler+0x984>
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	681b      	ldr	r3, [r3, #0]
 810569e:	4a39      	ldr	r2, [pc, #228]	; (8105784 <HAL_DMA_IRQHandler+0xa64>)
 81056a0:	4293      	cmp	r3, r2
 81056a2:	d101      	bne.n	81056a8 <HAL_DMA_IRQHandler+0x988>
 81056a4:	2301      	movs	r3, #1
 81056a6:	e000      	b.n	81056aa <HAL_DMA_IRQHandler+0x98a>
 81056a8:	2300      	movs	r3, #0
 81056aa:	2b00      	cmp	r3, #0
 81056ac:	f000 823f 	beq.w	8105b2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81056b0:	687b      	ldr	r3, [r7, #4]
 81056b2:	681b      	ldr	r3, [r3, #0]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81056b8:	687b      	ldr	r3, [r7, #4]
 81056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056bc:	f003 031f 	and.w	r3, r3, #31
 81056c0:	2204      	movs	r2, #4
 81056c2:	409a      	lsls	r2, r3
 81056c4:	697b      	ldr	r3, [r7, #20]
 81056c6:	4013      	ands	r3, r2
 81056c8:	2b00      	cmp	r3, #0
 81056ca:	f000 80cd 	beq.w	8105868 <HAL_DMA_IRQHandler+0xb48>
 81056ce:	693b      	ldr	r3, [r7, #16]
 81056d0:	f003 0304 	and.w	r3, r3, #4
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	f000 80c7 	beq.w	8105868 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056de:	f003 031f 	and.w	r3, r3, #31
 81056e2:	2204      	movs	r2, #4
 81056e4:	409a      	lsls	r2, r3
 81056e6:	69fb      	ldr	r3, [r7, #28]
 81056e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81056ea:	693b      	ldr	r3, [r7, #16]
 81056ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81056f0:	2b00      	cmp	r3, #0
 81056f2:	d049      	beq.n	8105788 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81056f4:	693b      	ldr	r3, [r7, #16]
 81056f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81056fa:	2b00      	cmp	r3, #0
 81056fc:	d109      	bne.n	8105712 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105702:	2b00      	cmp	r3, #0
 8105704:	f000 8210 	beq.w	8105b28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810570c:	6878      	ldr	r0, [r7, #4]
 810570e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105710:	e20a      	b.n	8105b28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105716:	2b00      	cmp	r3, #0
 8105718:	f000 8206 	beq.w	8105b28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105720:	6878      	ldr	r0, [r7, #4]
 8105722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105724:	e200      	b.n	8105b28 <HAL_DMA_IRQHandler+0xe08>
 8105726:	bf00      	nop
 8105728:	40020010 	.word	0x40020010
 810572c:	40020028 	.word	0x40020028
 8105730:	40020040 	.word	0x40020040
 8105734:	40020058 	.word	0x40020058
 8105738:	40020070 	.word	0x40020070
 810573c:	40020088 	.word	0x40020088
 8105740:	400200a0 	.word	0x400200a0
 8105744:	400200b8 	.word	0x400200b8
 8105748:	40020410 	.word	0x40020410
 810574c:	40020428 	.word	0x40020428
 8105750:	40020440 	.word	0x40020440
 8105754:	40020458 	.word	0x40020458
 8105758:	40020470 	.word	0x40020470
 810575c:	40020488 	.word	0x40020488
 8105760:	400204a0 	.word	0x400204a0
 8105764:	400204b8 	.word	0x400204b8
 8105768:	58025408 	.word	0x58025408
 810576c:	5802541c 	.word	0x5802541c
 8105770:	58025430 	.word	0x58025430
 8105774:	58025444 	.word	0x58025444
 8105778:	58025458 	.word	0x58025458
 810577c:	5802546c 	.word	0x5802546c
 8105780:	58025480 	.word	0x58025480
 8105784:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105788:	693b      	ldr	r3, [r7, #16]
 810578a:	f003 0320 	and.w	r3, r3, #32
 810578e:	2b00      	cmp	r3, #0
 8105790:	d160      	bne.n	8105854 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	681b      	ldr	r3, [r3, #0]
 8105796:	4a8c      	ldr	r2, [pc, #560]	; (81059c8 <HAL_DMA_IRQHandler+0xca8>)
 8105798:	4293      	cmp	r3, r2
 810579a:	d04a      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	681b      	ldr	r3, [r3, #0]
 81057a0:	4a8a      	ldr	r2, [pc, #552]	; (81059cc <HAL_DMA_IRQHandler+0xcac>)
 81057a2:	4293      	cmp	r3, r2
 81057a4:	d045      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	4a89      	ldr	r2, [pc, #548]	; (81059d0 <HAL_DMA_IRQHandler+0xcb0>)
 81057ac:	4293      	cmp	r3, r2
 81057ae:	d040      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057b0:	687b      	ldr	r3, [r7, #4]
 81057b2:	681b      	ldr	r3, [r3, #0]
 81057b4:	4a87      	ldr	r2, [pc, #540]	; (81059d4 <HAL_DMA_IRQHandler+0xcb4>)
 81057b6:	4293      	cmp	r3, r2
 81057b8:	d03b      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	4a86      	ldr	r2, [pc, #536]	; (81059d8 <HAL_DMA_IRQHandler+0xcb8>)
 81057c0:	4293      	cmp	r3, r2
 81057c2:	d036      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057c4:	687b      	ldr	r3, [r7, #4]
 81057c6:	681b      	ldr	r3, [r3, #0]
 81057c8:	4a84      	ldr	r2, [pc, #528]	; (81059dc <HAL_DMA_IRQHandler+0xcbc>)
 81057ca:	4293      	cmp	r3, r2
 81057cc:	d031      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	4a83      	ldr	r2, [pc, #524]	; (81059e0 <HAL_DMA_IRQHandler+0xcc0>)
 81057d4:	4293      	cmp	r3, r2
 81057d6:	d02c      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	681b      	ldr	r3, [r3, #0]
 81057dc:	4a81      	ldr	r2, [pc, #516]	; (81059e4 <HAL_DMA_IRQHandler+0xcc4>)
 81057de:	4293      	cmp	r3, r2
 81057e0:	d027      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	681b      	ldr	r3, [r3, #0]
 81057e6:	4a80      	ldr	r2, [pc, #512]	; (81059e8 <HAL_DMA_IRQHandler+0xcc8>)
 81057e8:	4293      	cmp	r3, r2
 81057ea:	d022      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	681b      	ldr	r3, [r3, #0]
 81057f0:	4a7e      	ldr	r2, [pc, #504]	; (81059ec <HAL_DMA_IRQHandler+0xccc>)
 81057f2:	4293      	cmp	r3, r2
 81057f4:	d01d      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	681b      	ldr	r3, [r3, #0]
 81057fa:	4a7d      	ldr	r2, [pc, #500]	; (81059f0 <HAL_DMA_IRQHandler+0xcd0>)
 81057fc:	4293      	cmp	r3, r2
 81057fe:	d018      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	681b      	ldr	r3, [r3, #0]
 8105804:	4a7b      	ldr	r2, [pc, #492]	; (81059f4 <HAL_DMA_IRQHandler+0xcd4>)
 8105806:	4293      	cmp	r3, r2
 8105808:	d013      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	681b      	ldr	r3, [r3, #0]
 810580e:	4a7a      	ldr	r2, [pc, #488]	; (81059f8 <HAL_DMA_IRQHandler+0xcd8>)
 8105810:	4293      	cmp	r3, r2
 8105812:	d00e      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 8105814:	687b      	ldr	r3, [r7, #4]
 8105816:	681b      	ldr	r3, [r3, #0]
 8105818:	4a78      	ldr	r2, [pc, #480]	; (81059fc <HAL_DMA_IRQHandler+0xcdc>)
 810581a:	4293      	cmp	r3, r2
 810581c:	d009      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	4a77      	ldr	r2, [pc, #476]	; (8105a00 <HAL_DMA_IRQHandler+0xce0>)
 8105824:	4293      	cmp	r3, r2
 8105826:	d004      	beq.n	8105832 <HAL_DMA_IRQHandler+0xb12>
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	4a75      	ldr	r2, [pc, #468]	; (8105a04 <HAL_DMA_IRQHandler+0xce4>)
 810582e:	4293      	cmp	r3, r2
 8105830:	d108      	bne.n	8105844 <HAL_DMA_IRQHandler+0xb24>
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	681a      	ldr	r2, [r3, #0]
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	f022 0208 	bic.w	r2, r2, #8
 8105840:	601a      	str	r2, [r3, #0]
 8105842:	e007      	b.n	8105854 <HAL_DMA_IRQHandler+0xb34>
 8105844:	687b      	ldr	r3, [r7, #4]
 8105846:	681b      	ldr	r3, [r3, #0]
 8105848:	681a      	ldr	r2, [r3, #0]
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	f022 0204 	bic.w	r2, r2, #4
 8105852:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105858:	2b00      	cmp	r3, #0
 810585a:	f000 8165 	beq.w	8105b28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105862:	6878      	ldr	r0, [r7, #4]
 8105864:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105866:	e15f      	b.n	8105b28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810586c:	f003 031f 	and.w	r3, r3, #31
 8105870:	2202      	movs	r2, #2
 8105872:	409a      	lsls	r2, r3
 8105874:	697b      	ldr	r3, [r7, #20]
 8105876:	4013      	ands	r3, r2
 8105878:	2b00      	cmp	r3, #0
 810587a:	f000 80c5 	beq.w	8105a08 <HAL_DMA_IRQHandler+0xce8>
 810587e:	693b      	ldr	r3, [r7, #16]
 8105880:	f003 0302 	and.w	r3, r3, #2
 8105884:	2b00      	cmp	r3, #0
 8105886:	f000 80bf 	beq.w	8105a08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810588e:	f003 031f 	and.w	r3, r3, #31
 8105892:	2202      	movs	r2, #2
 8105894:	409a      	lsls	r2, r3
 8105896:	69fb      	ldr	r3, [r7, #28]
 8105898:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810589a:	693b      	ldr	r3, [r7, #16]
 810589c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81058a0:	2b00      	cmp	r3, #0
 81058a2:	d018      	beq.n	81058d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81058a4:	693b      	ldr	r3, [r7, #16]
 81058a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81058aa:	2b00      	cmp	r3, #0
 81058ac:	d109      	bne.n	81058c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81058b2:	2b00      	cmp	r3, #0
 81058b4:	f000 813a 	beq.w	8105b2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81058bc:	6878      	ldr	r0, [r7, #4]
 81058be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81058c0:	e134      	b.n	8105b2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81058c6:	2b00      	cmp	r3, #0
 81058c8:	f000 8130 	beq.w	8105b2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81058d0:	6878      	ldr	r0, [r7, #4]
 81058d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81058d4:	e12a      	b.n	8105b2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81058d6:	693b      	ldr	r3, [r7, #16]
 81058d8:	f003 0320 	and.w	r3, r3, #32
 81058dc:	2b00      	cmp	r3, #0
 81058de:	d168      	bne.n	81059b2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	4a38      	ldr	r2, [pc, #224]	; (81059c8 <HAL_DMA_IRQHandler+0xca8>)
 81058e6:	4293      	cmp	r3, r2
 81058e8:	d04a      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	4a37      	ldr	r2, [pc, #220]	; (81059cc <HAL_DMA_IRQHandler+0xcac>)
 81058f0:	4293      	cmp	r3, r2
 81058f2:	d045      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	681b      	ldr	r3, [r3, #0]
 81058f8:	4a35      	ldr	r2, [pc, #212]	; (81059d0 <HAL_DMA_IRQHandler+0xcb0>)
 81058fa:	4293      	cmp	r3, r2
 81058fc:	d040      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	681b      	ldr	r3, [r3, #0]
 8105902:	4a34      	ldr	r2, [pc, #208]	; (81059d4 <HAL_DMA_IRQHandler+0xcb4>)
 8105904:	4293      	cmp	r3, r2
 8105906:	d03b      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	681b      	ldr	r3, [r3, #0]
 810590c:	4a32      	ldr	r2, [pc, #200]	; (81059d8 <HAL_DMA_IRQHandler+0xcb8>)
 810590e:	4293      	cmp	r3, r2
 8105910:	d036      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105912:	687b      	ldr	r3, [r7, #4]
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	4a31      	ldr	r2, [pc, #196]	; (81059dc <HAL_DMA_IRQHandler+0xcbc>)
 8105918:	4293      	cmp	r3, r2
 810591a:	d031      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	681b      	ldr	r3, [r3, #0]
 8105920:	4a2f      	ldr	r2, [pc, #188]	; (81059e0 <HAL_DMA_IRQHandler+0xcc0>)
 8105922:	4293      	cmp	r3, r2
 8105924:	d02c      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	4a2e      	ldr	r2, [pc, #184]	; (81059e4 <HAL_DMA_IRQHandler+0xcc4>)
 810592c:	4293      	cmp	r3, r2
 810592e:	d027      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	681b      	ldr	r3, [r3, #0]
 8105934:	4a2c      	ldr	r2, [pc, #176]	; (81059e8 <HAL_DMA_IRQHandler+0xcc8>)
 8105936:	4293      	cmp	r3, r2
 8105938:	d022      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	681b      	ldr	r3, [r3, #0]
 810593e:	4a2b      	ldr	r2, [pc, #172]	; (81059ec <HAL_DMA_IRQHandler+0xccc>)
 8105940:	4293      	cmp	r3, r2
 8105942:	d01d      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	681b      	ldr	r3, [r3, #0]
 8105948:	4a29      	ldr	r2, [pc, #164]	; (81059f0 <HAL_DMA_IRQHandler+0xcd0>)
 810594a:	4293      	cmp	r3, r2
 810594c:	d018      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	4a28      	ldr	r2, [pc, #160]	; (81059f4 <HAL_DMA_IRQHandler+0xcd4>)
 8105954:	4293      	cmp	r3, r2
 8105956:	d013      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	681b      	ldr	r3, [r3, #0]
 810595c:	4a26      	ldr	r2, [pc, #152]	; (81059f8 <HAL_DMA_IRQHandler+0xcd8>)
 810595e:	4293      	cmp	r3, r2
 8105960:	d00e      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	4a25      	ldr	r2, [pc, #148]	; (81059fc <HAL_DMA_IRQHandler+0xcdc>)
 8105968:	4293      	cmp	r3, r2
 810596a:	d009      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	4a23      	ldr	r2, [pc, #140]	; (8105a00 <HAL_DMA_IRQHandler+0xce0>)
 8105972:	4293      	cmp	r3, r2
 8105974:	d004      	beq.n	8105980 <HAL_DMA_IRQHandler+0xc60>
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	681b      	ldr	r3, [r3, #0]
 810597a:	4a22      	ldr	r2, [pc, #136]	; (8105a04 <HAL_DMA_IRQHandler+0xce4>)
 810597c:	4293      	cmp	r3, r2
 810597e:	d108      	bne.n	8105992 <HAL_DMA_IRQHandler+0xc72>
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	681b      	ldr	r3, [r3, #0]
 8105984:	681a      	ldr	r2, [r3, #0]
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	f022 0214 	bic.w	r2, r2, #20
 810598e:	601a      	str	r2, [r3, #0]
 8105990:	e007      	b.n	81059a2 <HAL_DMA_IRQHandler+0xc82>
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	681a      	ldr	r2, [r3, #0]
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	f022 020a 	bic.w	r2, r2, #10
 81059a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	2200      	movs	r2, #0
 81059a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	2201      	movs	r2, #1
 81059ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81059b6:	2b00      	cmp	r3, #0
 81059b8:	f000 80b8 	beq.w	8105b2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81059c0:	6878      	ldr	r0, [r7, #4]
 81059c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81059c4:	e0b2      	b.n	8105b2c <HAL_DMA_IRQHandler+0xe0c>
 81059c6:	bf00      	nop
 81059c8:	40020010 	.word	0x40020010
 81059cc:	40020028 	.word	0x40020028
 81059d0:	40020040 	.word	0x40020040
 81059d4:	40020058 	.word	0x40020058
 81059d8:	40020070 	.word	0x40020070
 81059dc:	40020088 	.word	0x40020088
 81059e0:	400200a0 	.word	0x400200a0
 81059e4:	400200b8 	.word	0x400200b8
 81059e8:	40020410 	.word	0x40020410
 81059ec:	40020428 	.word	0x40020428
 81059f0:	40020440 	.word	0x40020440
 81059f4:	40020458 	.word	0x40020458
 81059f8:	40020470 	.word	0x40020470
 81059fc:	40020488 	.word	0x40020488
 8105a00:	400204a0 	.word	0x400204a0
 8105a04:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a0c:	f003 031f 	and.w	r3, r3, #31
 8105a10:	2208      	movs	r2, #8
 8105a12:	409a      	lsls	r2, r3
 8105a14:	697b      	ldr	r3, [r7, #20]
 8105a16:	4013      	ands	r3, r2
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	f000 8088 	beq.w	8105b2e <HAL_DMA_IRQHandler+0xe0e>
 8105a1e:	693b      	ldr	r3, [r7, #16]
 8105a20:	f003 0308 	and.w	r3, r3, #8
 8105a24:	2b00      	cmp	r3, #0
 8105a26:	f000 8082 	beq.w	8105b2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	4a41      	ldr	r2, [pc, #260]	; (8105b34 <HAL_DMA_IRQHandler+0xe14>)
 8105a30:	4293      	cmp	r3, r2
 8105a32:	d04a      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	4a3f      	ldr	r2, [pc, #252]	; (8105b38 <HAL_DMA_IRQHandler+0xe18>)
 8105a3a:	4293      	cmp	r3, r2
 8105a3c:	d045      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a3e:	687b      	ldr	r3, [r7, #4]
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	4a3e      	ldr	r2, [pc, #248]	; (8105b3c <HAL_DMA_IRQHandler+0xe1c>)
 8105a44:	4293      	cmp	r3, r2
 8105a46:	d040      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	681b      	ldr	r3, [r3, #0]
 8105a4c:	4a3c      	ldr	r2, [pc, #240]	; (8105b40 <HAL_DMA_IRQHandler+0xe20>)
 8105a4e:	4293      	cmp	r3, r2
 8105a50:	d03b      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	4a3b      	ldr	r2, [pc, #236]	; (8105b44 <HAL_DMA_IRQHandler+0xe24>)
 8105a58:	4293      	cmp	r3, r2
 8105a5a:	d036      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	681b      	ldr	r3, [r3, #0]
 8105a60:	4a39      	ldr	r2, [pc, #228]	; (8105b48 <HAL_DMA_IRQHandler+0xe28>)
 8105a62:	4293      	cmp	r3, r2
 8105a64:	d031      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	4a38      	ldr	r2, [pc, #224]	; (8105b4c <HAL_DMA_IRQHandler+0xe2c>)
 8105a6c:	4293      	cmp	r3, r2
 8105a6e:	d02c      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	4a36      	ldr	r2, [pc, #216]	; (8105b50 <HAL_DMA_IRQHandler+0xe30>)
 8105a76:	4293      	cmp	r3, r2
 8105a78:	d027      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	681b      	ldr	r3, [r3, #0]
 8105a7e:	4a35      	ldr	r2, [pc, #212]	; (8105b54 <HAL_DMA_IRQHandler+0xe34>)
 8105a80:	4293      	cmp	r3, r2
 8105a82:	d022      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	4a33      	ldr	r2, [pc, #204]	; (8105b58 <HAL_DMA_IRQHandler+0xe38>)
 8105a8a:	4293      	cmp	r3, r2
 8105a8c:	d01d      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	4a32      	ldr	r2, [pc, #200]	; (8105b5c <HAL_DMA_IRQHandler+0xe3c>)
 8105a94:	4293      	cmp	r3, r2
 8105a96:	d018      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	681b      	ldr	r3, [r3, #0]
 8105a9c:	4a30      	ldr	r2, [pc, #192]	; (8105b60 <HAL_DMA_IRQHandler+0xe40>)
 8105a9e:	4293      	cmp	r3, r2
 8105aa0:	d013      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	4a2f      	ldr	r2, [pc, #188]	; (8105b64 <HAL_DMA_IRQHandler+0xe44>)
 8105aa8:	4293      	cmp	r3, r2
 8105aaa:	d00e      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	4a2d      	ldr	r2, [pc, #180]	; (8105b68 <HAL_DMA_IRQHandler+0xe48>)
 8105ab2:	4293      	cmp	r3, r2
 8105ab4:	d009      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	4a2c      	ldr	r2, [pc, #176]	; (8105b6c <HAL_DMA_IRQHandler+0xe4c>)
 8105abc:	4293      	cmp	r3, r2
 8105abe:	d004      	beq.n	8105aca <HAL_DMA_IRQHandler+0xdaa>
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	4a2a      	ldr	r2, [pc, #168]	; (8105b70 <HAL_DMA_IRQHandler+0xe50>)
 8105ac6:	4293      	cmp	r3, r2
 8105ac8:	d108      	bne.n	8105adc <HAL_DMA_IRQHandler+0xdbc>
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	681a      	ldr	r2, [r3, #0]
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	681b      	ldr	r3, [r3, #0]
 8105ad4:	f022 021c 	bic.w	r2, r2, #28
 8105ad8:	601a      	str	r2, [r3, #0]
 8105ada:	e007      	b.n	8105aec <HAL_DMA_IRQHandler+0xdcc>
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	681a      	ldr	r2, [r3, #0]
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	f022 020e 	bic.w	r2, r2, #14
 8105aea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105af0:	f003 031f 	and.w	r3, r3, #31
 8105af4:	2201      	movs	r2, #1
 8105af6:	409a      	lsls	r2, r3
 8105af8:	69fb      	ldr	r3, [r7, #28]
 8105afa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	2201      	movs	r2, #1
 8105b00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	2200      	movs	r2, #0
 8105b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	2201      	movs	r2, #1
 8105b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b16:	2b00      	cmp	r3, #0
 8105b18:	d009      	beq.n	8105b2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b1e:	6878      	ldr	r0, [r7, #4]
 8105b20:	4798      	blx	r3
 8105b22:	e004      	b.n	8105b2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105b24:	bf00      	nop
 8105b26:	e002      	b.n	8105b2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b28:	bf00      	nop
 8105b2a:	e000      	b.n	8105b2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105b2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105b2e:	3728      	adds	r7, #40	; 0x28
 8105b30:	46bd      	mov	sp, r7
 8105b32:	bd80      	pop	{r7, pc}
 8105b34:	40020010 	.word	0x40020010
 8105b38:	40020028 	.word	0x40020028
 8105b3c:	40020040 	.word	0x40020040
 8105b40:	40020058 	.word	0x40020058
 8105b44:	40020070 	.word	0x40020070
 8105b48:	40020088 	.word	0x40020088
 8105b4c:	400200a0 	.word	0x400200a0
 8105b50:	400200b8 	.word	0x400200b8
 8105b54:	40020410 	.word	0x40020410
 8105b58:	40020428 	.word	0x40020428
 8105b5c:	40020440 	.word	0x40020440
 8105b60:	40020458 	.word	0x40020458
 8105b64:	40020470 	.word	0x40020470
 8105b68:	40020488 	.word	0x40020488
 8105b6c:	400204a0 	.word	0x400204a0
 8105b70:	400204b8 	.word	0x400204b8

08105b74 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8105b74:	b480      	push	{r7}
 8105b76:	b083      	sub	sp, #12
 8105b78:	af00      	add	r7, sp, #0
 8105b7a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105b82:	b2db      	uxtb	r3, r3
}
 8105b84:	4618      	mov	r0, r3
 8105b86:	370c      	adds	r7, #12
 8105b88:	46bd      	mov	sp, r7
 8105b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b8e:	4770      	bx	lr

08105b90 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8105b90:	b480      	push	{r7}
 8105b92:	b083      	sub	sp, #12
 8105b94:	af00      	add	r7, sp, #0
 8105b96:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8105b9c:	4618      	mov	r0, r3
 8105b9e:	370c      	adds	r7, #12
 8105ba0:	46bd      	mov	sp, r7
 8105ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ba6:	4770      	bx	lr

08105ba8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105ba8:	b480      	push	{r7}
 8105baa:	b087      	sub	sp, #28
 8105bac:	af00      	add	r7, sp, #0
 8105bae:	60f8      	str	r0, [r7, #12]
 8105bb0:	60b9      	str	r1, [r7, #8]
 8105bb2:	607a      	str	r2, [r7, #4]
 8105bb4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105bb6:	68fb      	ldr	r3, [r7, #12]
 8105bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105bbc:	68fb      	ldr	r3, [r7, #12]
 8105bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105bc0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105bc2:	68fb      	ldr	r3, [r7, #12]
 8105bc4:	681b      	ldr	r3, [r3, #0]
 8105bc6:	4a84      	ldr	r2, [pc, #528]	; (8105dd8 <DMA_SetConfig+0x230>)
 8105bc8:	4293      	cmp	r3, r2
 8105bca:	d072      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105bcc:	68fb      	ldr	r3, [r7, #12]
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	4a82      	ldr	r2, [pc, #520]	; (8105ddc <DMA_SetConfig+0x234>)
 8105bd2:	4293      	cmp	r3, r2
 8105bd4:	d06d      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105bd6:	68fb      	ldr	r3, [r7, #12]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	4a81      	ldr	r2, [pc, #516]	; (8105de0 <DMA_SetConfig+0x238>)
 8105bdc:	4293      	cmp	r3, r2
 8105bde:	d068      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105be0:	68fb      	ldr	r3, [r7, #12]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	4a7f      	ldr	r2, [pc, #508]	; (8105de4 <DMA_SetConfig+0x23c>)
 8105be6:	4293      	cmp	r3, r2
 8105be8:	d063      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105bea:	68fb      	ldr	r3, [r7, #12]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	4a7e      	ldr	r2, [pc, #504]	; (8105de8 <DMA_SetConfig+0x240>)
 8105bf0:	4293      	cmp	r3, r2
 8105bf2:	d05e      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105bf4:	68fb      	ldr	r3, [r7, #12]
 8105bf6:	681b      	ldr	r3, [r3, #0]
 8105bf8:	4a7c      	ldr	r2, [pc, #496]	; (8105dec <DMA_SetConfig+0x244>)
 8105bfa:	4293      	cmp	r3, r2
 8105bfc:	d059      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105bfe:	68fb      	ldr	r3, [r7, #12]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	4a7b      	ldr	r2, [pc, #492]	; (8105df0 <DMA_SetConfig+0x248>)
 8105c04:	4293      	cmp	r3, r2
 8105c06:	d054      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c08:	68fb      	ldr	r3, [r7, #12]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	4a79      	ldr	r2, [pc, #484]	; (8105df4 <DMA_SetConfig+0x24c>)
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d04f      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c12:	68fb      	ldr	r3, [r7, #12]
 8105c14:	681b      	ldr	r3, [r3, #0]
 8105c16:	4a78      	ldr	r2, [pc, #480]	; (8105df8 <DMA_SetConfig+0x250>)
 8105c18:	4293      	cmp	r3, r2
 8105c1a:	d04a      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c1c:	68fb      	ldr	r3, [r7, #12]
 8105c1e:	681b      	ldr	r3, [r3, #0]
 8105c20:	4a76      	ldr	r2, [pc, #472]	; (8105dfc <DMA_SetConfig+0x254>)
 8105c22:	4293      	cmp	r3, r2
 8105c24:	d045      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c26:	68fb      	ldr	r3, [r7, #12]
 8105c28:	681b      	ldr	r3, [r3, #0]
 8105c2a:	4a75      	ldr	r2, [pc, #468]	; (8105e00 <DMA_SetConfig+0x258>)
 8105c2c:	4293      	cmp	r3, r2
 8105c2e:	d040      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c30:	68fb      	ldr	r3, [r7, #12]
 8105c32:	681b      	ldr	r3, [r3, #0]
 8105c34:	4a73      	ldr	r2, [pc, #460]	; (8105e04 <DMA_SetConfig+0x25c>)
 8105c36:	4293      	cmp	r3, r2
 8105c38:	d03b      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c3a:	68fb      	ldr	r3, [r7, #12]
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	4a72      	ldr	r2, [pc, #456]	; (8105e08 <DMA_SetConfig+0x260>)
 8105c40:	4293      	cmp	r3, r2
 8105c42:	d036      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c44:	68fb      	ldr	r3, [r7, #12]
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	4a70      	ldr	r2, [pc, #448]	; (8105e0c <DMA_SetConfig+0x264>)
 8105c4a:	4293      	cmp	r3, r2
 8105c4c:	d031      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	4a6f      	ldr	r2, [pc, #444]	; (8105e10 <DMA_SetConfig+0x268>)
 8105c54:	4293      	cmp	r3, r2
 8105c56:	d02c      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c58:	68fb      	ldr	r3, [r7, #12]
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	4a6d      	ldr	r2, [pc, #436]	; (8105e14 <DMA_SetConfig+0x26c>)
 8105c5e:	4293      	cmp	r3, r2
 8105c60:	d027      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c62:	68fb      	ldr	r3, [r7, #12]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	4a6c      	ldr	r2, [pc, #432]	; (8105e18 <DMA_SetConfig+0x270>)
 8105c68:	4293      	cmp	r3, r2
 8105c6a:	d022      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c6c:	68fb      	ldr	r3, [r7, #12]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	4a6a      	ldr	r2, [pc, #424]	; (8105e1c <DMA_SetConfig+0x274>)
 8105c72:	4293      	cmp	r3, r2
 8105c74:	d01d      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c76:	68fb      	ldr	r3, [r7, #12]
 8105c78:	681b      	ldr	r3, [r3, #0]
 8105c7a:	4a69      	ldr	r2, [pc, #420]	; (8105e20 <DMA_SetConfig+0x278>)
 8105c7c:	4293      	cmp	r3, r2
 8105c7e:	d018      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c80:	68fb      	ldr	r3, [r7, #12]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	4a67      	ldr	r2, [pc, #412]	; (8105e24 <DMA_SetConfig+0x27c>)
 8105c86:	4293      	cmp	r3, r2
 8105c88:	d013      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	681b      	ldr	r3, [r3, #0]
 8105c8e:	4a66      	ldr	r2, [pc, #408]	; (8105e28 <DMA_SetConfig+0x280>)
 8105c90:	4293      	cmp	r3, r2
 8105c92:	d00e      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c94:	68fb      	ldr	r3, [r7, #12]
 8105c96:	681b      	ldr	r3, [r3, #0]
 8105c98:	4a64      	ldr	r2, [pc, #400]	; (8105e2c <DMA_SetConfig+0x284>)
 8105c9a:	4293      	cmp	r3, r2
 8105c9c:	d009      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105c9e:	68fb      	ldr	r3, [r7, #12]
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	4a63      	ldr	r2, [pc, #396]	; (8105e30 <DMA_SetConfig+0x288>)
 8105ca4:	4293      	cmp	r3, r2
 8105ca6:	d004      	beq.n	8105cb2 <DMA_SetConfig+0x10a>
 8105ca8:	68fb      	ldr	r3, [r7, #12]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	4a61      	ldr	r2, [pc, #388]	; (8105e34 <DMA_SetConfig+0x28c>)
 8105cae:	4293      	cmp	r3, r2
 8105cb0:	d101      	bne.n	8105cb6 <DMA_SetConfig+0x10e>
 8105cb2:	2301      	movs	r3, #1
 8105cb4:	e000      	b.n	8105cb8 <DMA_SetConfig+0x110>
 8105cb6:	2300      	movs	r3, #0
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d00d      	beq.n	8105cd8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105cbc:	68fb      	ldr	r3, [r7, #12]
 8105cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105cc0:	68fa      	ldr	r2, [r7, #12]
 8105cc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105cc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105cca:	2b00      	cmp	r3, #0
 8105ccc:	d004      	beq.n	8105cd8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105cce:	68fb      	ldr	r3, [r7, #12]
 8105cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105cd2:	68fa      	ldr	r2, [r7, #12]
 8105cd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105cd6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105cd8:	68fb      	ldr	r3, [r7, #12]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	4a3e      	ldr	r2, [pc, #248]	; (8105dd8 <DMA_SetConfig+0x230>)
 8105cde:	4293      	cmp	r3, r2
 8105ce0:	d04a      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105ce2:	68fb      	ldr	r3, [r7, #12]
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	4a3d      	ldr	r2, [pc, #244]	; (8105ddc <DMA_SetConfig+0x234>)
 8105ce8:	4293      	cmp	r3, r2
 8105cea:	d045      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105cec:	68fb      	ldr	r3, [r7, #12]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	4a3b      	ldr	r2, [pc, #236]	; (8105de0 <DMA_SetConfig+0x238>)
 8105cf2:	4293      	cmp	r3, r2
 8105cf4:	d040      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	4a3a      	ldr	r2, [pc, #232]	; (8105de4 <DMA_SetConfig+0x23c>)
 8105cfc:	4293      	cmp	r3, r2
 8105cfe:	d03b      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d00:	68fb      	ldr	r3, [r7, #12]
 8105d02:	681b      	ldr	r3, [r3, #0]
 8105d04:	4a38      	ldr	r2, [pc, #224]	; (8105de8 <DMA_SetConfig+0x240>)
 8105d06:	4293      	cmp	r3, r2
 8105d08:	d036      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d0a:	68fb      	ldr	r3, [r7, #12]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	4a37      	ldr	r2, [pc, #220]	; (8105dec <DMA_SetConfig+0x244>)
 8105d10:	4293      	cmp	r3, r2
 8105d12:	d031      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d14:	68fb      	ldr	r3, [r7, #12]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	4a35      	ldr	r2, [pc, #212]	; (8105df0 <DMA_SetConfig+0x248>)
 8105d1a:	4293      	cmp	r3, r2
 8105d1c:	d02c      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d1e:	68fb      	ldr	r3, [r7, #12]
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	4a34      	ldr	r2, [pc, #208]	; (8105df4 <DMA_SetConfig+0x24c>)
 8105d24:	4293      	cmp	r3, r2
 8105d26:	d027      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d28:	68fb      	ldr	r3, [r7, #12]
 8105d2a:	681b      	ldr	r3, [r3, #0]
 8105d2c:	4a32      	ldr	r2, [pc, #200]	; (8105df8 <DMA_SetConfig+0x250>)
 8105d2e:	4293      	cmp	r3, r2
 8105d30:	d022      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	4a31      	ldr	r2, [pc, #196]	; (8105dfc <DMA_SetConfig+0x254>)
 8105d38:	4293      	cmp	r3, r2
 8105d3a:	d01d      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d3c:	68fb      	ldr	r3, [r7, #12]
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	4a2f      	ldr	r2, [pc, #188]	; (8105e00 <DMA_SetConfig+0x258>)
 8105d42:	4293      	cmp	r3, r2
 8105d44:	d018      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	4a2e      	ldr	r2, [pc, #184]	; (8105e04 <DMA_SetConfig+0x25c>)
 8105d4c:	4293      	cmp	r3, r2
 8105d4e:	d013      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d50:	68fb      	ldr	r3, [r7, #12]
 8105d52:	681b      	ldr	r3, [r3, #0]
 8105d54:	4a2c      	ldr	r2, [pc, #176]	; (8105e08 <DMA_SetConfig+0x260>)
 8105d56:	4293      	cmp	r3, r2
 8105d58:	d00e      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	681b      	ldr	r3, [r3, #0]
 8105d5e:	4a2b      	ldr	r2, [pc, #172]	; (8105e0c <DMA_SetConfig+0x264>)
 8105d60:	4293      	cmp	r3, r2
 8105d62:	d009      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	4a29      	ldr	r2, [pc, #164]	; (8105e10 <DMA_SetConfig+0x268>)
 8105d6a:	4293      	cmp	r3, r2
 8105d6c:	d004      	beq.n	8105d78 <DMA_SetConfig+0x1d0>
 8105d6e:	68fb      	ldr	r3, [r7, #12]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	4a28      	ldr	r2, [pc, #160]	; (8105e14 <DMA_SetConfig+0x26c>)
 8105d74:	4293      	cmp	r3, r2
 8105d76:	d101      	bne.n	8105d7c <DMA_SetConfig+0x1d4>
 8105d78:	2301      	movs	r3, #1
 8105d7a:	e000      	b.n	8105d7e <DMA_SetConfig+0x1d6>
 8105d7c:	2300      	movs	r3, #0
 8105d7e:	2b00      	cmp	r3, #0
 8105d80:	d05a      	beq.n	8105e38 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105d82:	68fb      	ldr	r3, [r7, #12]
 8105d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d86:	f003 031f 	and.w	r3, r3, #31
 8105d8a:	223f      	movs	r2, #63	; 0x3f
 8105d8c:	409a      	lsls	r2, r3
 8105d8e:	697b      	ldr	r3, [r7, #20]
 8105d90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8105d92:	68fb      	ldr	r3, [r7, #12]
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	681a      	ldr	r2, [r3, #0]
 8105d98:	68fb      	ldr	r3, [r7, #12]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8105da0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8105da2:	68fb      	ldr	r3, [r7, #12]
 8105da4:	681b      	ldr	r3, [r3, #0]
 8105da6:	683a      	ldr	r2, [r7, #0]
 8105da8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	689b      	ldr	r3, [r3, #8]
 8105dae:	2b40      	cmp	r3, #64	; 0x40
 8105db0:	d108      	bne.n	8105dc4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8105db2:	68fb      	ldr	r3, [r7, #12]
 8105db4:	681b      	ldr	r3, [r3, #0]
 8105db6:	687a      	ldr	r2, [r7, #4]
 8105db8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8105dba:	68fb      	ldr	r3, [r7, #12]
 8105dbc:	681b      	ldr	r3, [r3, #0]
 8105dbe:	68ba      	ldr	r2, [r7, #8]
 8105dc0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105dc2:	e087      	b.n	8105ed4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8105dc4:	68fb      	ldr	r3, [r7, #12]
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	68ba      	ldr	r2, [r7, #8]
 8105dca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8105dcc:	68fb      	ldr	r3, [r7, #12]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	687a      	ldr	r2, [r7, #4]
 8105dd2:	60da      	str	r2, [r3, #12]
}
 8105dd4:	e07e      	b.n	8105ed4 <DMA_SetConfig+0x32c>
 8105dd6:	bf00      	nop
 8105dd8:	40020010 	.word	0x40020010
 8105ddc:	40020028 	.word	0x40020028
 8105de0:	40020040 	.word	0x40020040
 8105de4:	40020058 	.word	0x40020058
 8105de8:	40020070 	.word	0x40020070
 8105dec:	40020088 	.word	0x40020088
 8105df0:	400200a0 	.word	0x400200a0
 8105df4:	400200b8 	.word	0x400200b8
 8105df8:	40020410 	.word	0x40020410
 8105dfc:	40020428 	.word	0x40020428
 8105e00:	40020440 	.word	0x40020440
 8105e04:	40020458 	.word	0x40020458
 8105e08:	40020470 	.word	0x40020470
 8105e0c:	40020488 	.word	0x40020488
 8105e10:	400204a0 	.word	0x400204a0
 8105e14:	400204b8 	.word	0x400204b8
 8105e18:	58025408 	.word	0x58025408
 8105e1c:	5802541c 	.word	0x5802541c
 8105e20:	58025430 	.word	0x58025430
 8105e24:	58025444 	.word	0x58025444
 8105e28:	58025458 	.word	0x58025458
 8105e2c:	5802546c 	.word	0x5802546c
 8105e30:	58025480 	.word	0x58025480
 8105e34:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	4a28      	ldr	r2, [pc, #160]	; (8105ee0 <DMA_SetConfig+0x338>)
 8105e3e:	4293      	cmp	r3, r2
 8105e40:	d022      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e42:	68fb      	ldr	r3, [r7, #12]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	4a27      	ldr	r2, [pc, #156]	; (8105ee4 <DMA_SetConfig+0x33c>)
 8105e48:	4293      	cmp	r3, r2
 8105e4a:	d01d      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	4a25      	ldr	r2, [pc, #148]	; (8105ee8 <DMA_SetConfig+0x340>)
 8105e52:	4293      	cmp	r3, r2
 8105e54:	d018      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	681b      	ldr	r3, [r3, #0]
 8105e5a:	4a24      	ldr	r2, [pc, #144]	; (8105eec <DMA_SetConfig+0x344>)
 8105e5c:	4293      	cmp	r3, r2
 8105e5e:	d013      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e60:	68fb      	ldr	r3, [r7, #12]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	4a22      	ldr	r2, [pc, #136]	; (8105ef0 <DMA_SetConfig+0x348>)
 8105e66:	4293      	cmp	r3, r2
 8105e68:	d00e      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e6a:	68fb      	ldr	r3, [r7, #12]
 8105e6c:	681b      	ldr	r3, [r3, #0]
 8105e6e:	4a21      	ldr	r2, [pc, #132]	; (8105ef4 <DMA_SetConfig+0x34c>)
 8105e70:	4293      	cmp	r3, r2
 8105e72:	d009      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e74:	68fb      	ldr	r3, [r7, #12]
 8105e76:	681b      	ldr	r3, [r3, #0]
 8105e78:	4a1f      	ldr	r2, [pc, #124]	; (8105ef8 <DMA_SetConfig+0x350>)
 8105e7a:	4293      	cmp	r3, r2
 8105e7c:	d004      	beq.n	8105e88 <DMA_SetConfig+0x2e0>
 8105e7e:	68fb      	ldr	r3, [r7, #12]
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	4a1e      	ldr	r2, [pc, #120]	; (8105efc <DMA_SetConfig+0x354>)
 8105e84:	4293      	cmp	r3, r2
 8105e86:	d101      	bne.n	8105e8c <DMA_SetConfig+0x2e4>
 8105e88:	2301      	movs	r3, #1
 8105e8a:	e000      	b.n	8105e8e <DMA_SetConfig+0x2e6>
 8105e8c:	2300      	movs	r3, #0
 8105e8e:	2b00      	cmp	r3, #0
 8105e90:	d020      	beq.n	8105ed4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105e92:	68fb      	ldr	r3, [r7, #12]
 8105e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e96:	f003 031f 	and.w	r3, r3, #31
 8105e9a:	2201      	movs	r2, #1
 8105e9c:	409a      	lsls	r2, r3
 8105e9e:	693b      	ldr	r3, [r7, #16]
 8105ea0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8105ea2:	68fb      	ldr	r3, [r7, #12]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	683a      	ldr	r2, [r7, #0]
 8105ea8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105eaa:	68fb      	ldr	r3, [r7, #12]
 8105eac:	689b      	ldr	r3, [r3, #8]
 8105eae:	2b40      	cmp	r3, #64	; 0x40
 8105eb0:	d108      	bne.n	8105ec4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8105eb2:	68fb      	ldr	r3, [r7, #12]
 8105eb4:	681b      	ldr	r3, [r3, #0]
 8105eb6:	687a      	ldr	r2, [r7, #4]
 8105eb8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8105eba:	68fb      	ldr	r3, [r7, #12]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	68ba      	ldr	r2, [r7, #8]
 8105ec0:	60da      	str	r2, [r3, #12]
}
 8105ec2:	e007      	b.n	8105ed4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8105ec4:	68fb      	ldr	r3, [r7, #12]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	68ba      	ldr	r2, [r7, #8]
 8105eca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8105ecc:	68fb      	ldr	r3, [r7, #12]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	687a      	ldr	r2, [r7, #4]
 8105ed2:	60da      	str	r2, [r3, #12]
}
 8105ed4:	bf00      	nop
 8105ed6:	371c      	adds	r7, #28
 8105ed8:	46bd      	mov	sp, r7
 8105eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ede:	4770      	bx	lr
 8105ee0:	58025408 	.word	0x58025408
 8105ee4:	5802541c 	.word	0x5802541c
 8105ee8:	58025430 	.word	0x58025430
 8105eec:	58025444 	.word	0x58025444
 8105ef0:	58025458 	.word	0x58025458
 8105ef4:	5802546c 	.word	0x5802546c
 8105ef8:	58025480 	.word	0x58025480
 8105efc:	58025494 	.word	0x58025494

08105f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8105f00:	b480      	push	{r7}
 8105f02:	b085      	sub	sp, #20
 8105f04:	af00      	add	r7, sp, #0
 8105f06:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	4a43      	ldr	r2, [pc, #268]	; (810601c <DMA_CalcBaseAndBitshift+0x11c>)
 8105f0e:	4293      	cmp	r3, r2
 8105f10:	d04a      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	4a42      	ldr	r2, [pc, #264]	; (8106020 <DMA_CalcBaseAndBitshift+0x120>)
 8105f18:	4293      	cmp	r3, r2
 8105f1a:	d045      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f1c:	687b      	ldr	r3, [r7, #4]
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	4a40      	ldr	r2, [pc, #256]	; (8106024 <DMA_CalcBaseAndBitshift+0x124>)
 8105f22:	4293      	cmp	r3, r2
 8105f24:	d040      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	681b      	ldr	r3, [r3, #0]
 8105f2a:	4a3f      	ldr	r2, [pc, #252]	; (8106028 <DMA_CalcBaseAndBitshift+0x128>)
 8105f2c:	4293      	cmp	r3, r2
 8105f2e:	d03b      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	4a3d      	ldr	r2, [pc, #244]	; (810602c <DMA_CalcBaseAndBitshift+0x12c>)
 8105f36:	4293      	cmp	r3, r2
 8105f38:	d036      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	4a3c      	ldr	r2, [pc, #240]	; (8106030 <DMA_CalcBaseAndBitshift+0x130>)
 8105f40:	4293      	cmp	r3, r2
 8105f42:	d031      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	4a3a      	ldr	r2, [pc, #232]	; (8106034 <DMA_CalcBaseAndBitshift+0x134>)
 8105f4a:	4293      	cmp	r3, r2
 8105f4c:	d02c      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	4a39      	ldr	r2, [pc, #228]	; (8106038 <DMA_CalcBaseAndBitshift+0x138>)
 8105f54:	4293      	cmp	r3, r2
 8105f56:	d027      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f58:	687b      	ldr	r3, [r7, #4]
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	4a37      	ldr	r2, [pc, #220]	; (810603c <DMA_CalcBaseAndBitshift+0x13c>)
 8105f5e:	4293      	cmp	r3, r2
 8105f60:	d022      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	4a36      	ldr	r2, [pc, #216]	; (8106040 <DMA_CalcBaseAndBitshift+0x140>)
 8105f68:	4293      	cmp	r3, r2
 8105f6a:	d01d      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	4a34      	ldr	r2, [pc, #208]	; (8106044 <DMA_CalcBaseAndBitshift+0x144>)
 8105f72:	4293      	cmp	r3, r2
 8105f74:	d018      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	681b      	ldr	r3, [r3, #0]
 8105f7a:	4a33      	ldr	r2, [pc, #204]	; (8106048 <DMA_CalcBaseAndBitshift+0x148>)
 8105f7c:	4293      	cmp	r3, r2
 8105f7e:	d013      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	4a31      	ldr	r2, [pc, #196]	; (810604c <DMA_CalcBaseAndBitshift+0x14c>)
 8105f86:	4293      	cmp	r3, r2
 8105f88:	d00e      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f8a:	687b      	ldr	r3, [r7, #4]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	4a30      	ldr	r2, [pc, #192]	; (8106050 <DMA_CalcBaseAndBitshift+0x150>)
 8105f90:	4293      	cmp	r3, r2
 8105f92:	d009      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	4a2e      	ldr	r2, [pc, #184]	; (8106054 <DMA_CalcBaseAndBitshift+0x154>)
 8105f9a:	4293      	cmp	r3, r2
 8105f9c:	d004      	beq.n	8105fa8 <DMA_CalcBaseAndBitshift+0xa8>
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	681b      	ldr	r3, [r3, #0]
 8105fa2:	4a2d      	ldr	r2, [pc, #180]	; (8106058 <DMA_CalcBaseAndBitshift+0x158>)
 8105fa4:	4293      	cmp	r3, r2
 8105fa6:	d101      	bne.n	8105fac <DMA_CalcBaseAndBitshift+0xac>
 8105fa8:	2301      	movs	r3, #1
 8105faa:	e000      	b.n	8105fae <DMA_CalcBaseAndBitshift+0xae>
 8105fac:	2300      	movs	r3, #0
 8105fae:	2b00      	cmp	r3, #0
 8105fb0:	d026      	beq.n	8106000 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	b2db      	uxtb	r3, r3
 8105fb8:	3b10      	subs	r3, #16
 8105fba:	4a28      	ldr	r2, [pc, #160]	; (810605c <DMA_CalcBaseAndBitshift+0x15c>)
 8105fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8105fc0:	091b      	lsrs	r3, r3, #4
 8105fc2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8105fc4:	68fb      	ldr	r3, [r7, #12]
 8105fc6:	f003 0307 	and.w	r3, r3, #7
 8105fca:	4a25      	ldr	r2, [pc, #148]	; (8106060 <DMA_CalcBaseAndBitshift+0x160>)
 8105fcc:	5cd3      	ldrb	r3, [r2, r3]
 8105fce:	461a      	mov	r2, r3
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8105fd4:	68fb      	ldr	r3, [r7, #12]
 8105fd6:	2b03      	cmp	r3, #3
 8105fd8:	d909      	bls.n	8105fee <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8105fe2:	f023 0303 	bic.w	r3, r3, #3
 8105fe6:	1d1a      	adds	r2, r3, #4
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	659a      	str	r2, [r3, #88]	; 0x58
 8105fec:	e00e      	b.n	810600c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	681b      	ldr	r3, [r3, #0]
 8105ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8105ff6:	f023 0303 	bic.w	r3, r3, #3
 8105ffa:	687a      	ldr	r2, [r7, #4]
 8105ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8105ffe:	e005      	b.n	810600c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106010:	4618      	mov	r0, r3
 8106012:	3714      	adds	r7, #20
 8106014:	46bd      	mov	sp, r7
 8106016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810601a:	4770      	bx	lr
 810601c:	40020010 	.word	0x40020010
 8106020:	40020028 	.word	0x40020028
 8106024:	40020040 	.word	0x40020040
 8106028:	40020058 	.word	0x40020058
 810602c:	40020070 	.word	0x40020070
 8106030:	40020088 	.word	0x40020088
 8106034:	400200a0 	.word	0x400200a0
 8106038:	400200b8 	.word	0x400200b8
 810603c:	40020410 	.word	0x40020410
 8106040:	40020428 	.word	0x40020428
 8106044:	40020440 	.word	0x40020440
 8106048:	40020458 	.word	0x40020458
 810604c:	40020470 	.word	0x40020470
 8106050:	40020488 	.word	0x40020488
 8106054:	400204a0 	.word	0x400204a0
 8106058:	400204b8 	.word	0x400204b8
 810605c:	aaaaaaab 	.word	0xaaaaaaab
 8106060:	0810d2bc 	.word	0x0810d2bc

08106064 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106064:	b480      	push	{r7}
 8106066:	b085      	sub	sp, #20
 8106068:	af00      	add	r7, sp, #0
 810606a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810606c:	2300      	movs	r3, #0
 810606e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106070:	687b      	ldr	r3, [r7, #4]
 8106072:	699b      	ldr	r3, [r3, #24]
 8106074:	2b00      	cmp	r3, #0
 8106076:	d120      	bne.n	81060ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810607c:	2b03      	cmp	r3, #3
 810607e:	d858      	bhi.n	8106132 <DMA_CheckFifoParam+0xce>
 8106080:	a201      	add	r2, pc, #4	; (adr r2, 8106088 <DMA_CheckFifoParam+0x24>)
 8106082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106086:	bf00      	nop
 8106088:	08106099 	.word	0x08106099
 810608c:	081060ab 	.word	0x081060ab
 8106090:	08106099 	.word	0x08106099
 8106094:	08106133 	.word	0x08106133
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810609c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81060a0:	2b00      	cmp	r3, #0
 81060a2:	d048      	beq.n	8106136 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81060a4:	2301      	movs	r3, #1
 81060a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81060a8:	e045      	b.n	8106136 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81060b2:	d142      	bne.n	810613a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81060b4:	2301      	movs	r3, #1
 81060b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81060b8:	e03f      	b.n	810613a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	699b      	ldr	r3, [r3, #24]
 81060be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81060c2:	d123      	bne.n	810610c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060c8:	2b03      	cmp	r3, #3
 81060ca:	d838      	bhi.n	810613e <DMA_CheckFifoParam+0xda>
 81060cc:	a201      	add	r2, pc, #4	; (adr r2, 81060d4 <DMA_CheckFifoParam+0x70>)
 81060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81060d2:	bf00      	nop
 81060d4:	081060e5 	.word	0x081060e5
 81060d8:	081060eb 	.word	0x081060eb
 81060dc:	081060e5 	.word	0x081060e5
 81060e0:	081060fd 	.word	0x081060fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81060e4:	2301      	movs	r3, #1
 81060e6:	73fb      	strb	r3, [r7, #15]
        break;
 81060e8:	e030      	b.n	810614c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81060ea:	687b      	ldr	r3, [r7, #4]
 81060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d025      	beq.n	8106142 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81060f6:	2301      	movs	r3, #1
 81060f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81060fa:	e022      	b.n	8106142 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106104:	d11f      	bne.n	8106146 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106106:	2301      	movs	r3, #1
 8106108:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810610a:	e01c      	b.n	8106146 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106110:	2b02      	cmp	r3, #2
 8106112:	d902      	bls.n	810611a <DMA_CheckFifoParam+0xb6>
 8106114:	2b03      	cmp	r3, #3
 8106116:	d003      	beq.n	8106120 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106118:	e018      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 810611a:	2301      	movs	r3, #1
 810611c:	73fb      	strb	r3, [r7, #15]
        break;
 810611e:	e015      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106120:	687b      	ldr	r3, [r7, #4]
 8106122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106128:	2b00      	cmp	r3, #0
 810612a:	d00e      	beq.n	810614a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 810612c:	2301      	movs	r3, #1
 810612e:	73fb      	strb	r3, [r7, #15]
    break;
 8106130:	e00b      	b.n	810614a <DMA_CheckFifoParam+0xe6>
        break;
 8106132:	bf00      	nop
 8106134:	e00a      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        break;
 8106136:	bf00      	nop
 8106138:	e008      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        break;
 810613a:	bf00      	nop
 810613c:	e006      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        break;
 810613e:	bf00      	nop
 8106140:	e004      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        break;
 8106142:	bf00      	nop
 8106144:	e002      	b.n	810614c <DMA_CheckFifoParam+0xe8>
        break;
 8106146:	bf00      	nop
 8106148:	e000      	b.n	810614c <DMA_CheckFifoParam+0xe8>
    break;
 810614a:	bf00      	nop
    }
  }

  return status;
 810614c:	7bfb      	ldrb	r3, [r7, #15]
}
 810614e:	4618      	mov	r0, r3
 8106150:	3714      	adds	r7, #20
 8106152:	46bd      	mov	sp, r7
 8106154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106158:	4770      	bx	lr
 810615a:	bf00      	nop

0810615c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810615c:	b480      	push	{r7}
 810615e:	b085      	sub	sp, #20
 8106160:	af00      	add	r7, sp, #0
 8106162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	4a3a      	ldr	r2, [pc, #232]	; (8106258 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106170:	4293      	cmp	r3, r2
 8106172:	d022      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	4a38      	ldr	r2, [pc, #224]	; (810625c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d01d      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	4a37      	ldr	r2, [pc, #220]	; (8106260 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106184:	4293      	cmp	r3, r2
 8106186:	d018      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	4a35      	ldr	r2, [pc, #212]	; (8106264 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810618e:	4293      	cmp	r3, r2
 8106190:	d013      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	4a34      	ldr	r2, [pc, #208]	; (8106268 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106198:	4293      	cmp	r3, r2
 810619a:	d00e      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	4a32      	ldr	r2, [pc, #200]	; (810626c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81061a2:	4293      	cmp	r3, r2
 81061a4:	d009      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a31      	ldr	r2, [pc, #196]	; (8106270 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81061ac:	4293      	cmp	r3, r2
 81061ae:	d004      	beq.n	81061ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a2f      	ldr	r2, [pc, #188]	; (8106274 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81061b6:	4293      	cmp	r3, r2
 81061b8:	d101      	bne.n	81061be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81061ba:	2301      	movs	r3, #1
 81061bc:	e000      	b.n	81061c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81061be:	2300      	movs	r3, #0
 81061c0:	2b00      	cmp	r3, #0
 81061c2:	d01c      	beq.n	81061fe <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	b2db      	uxtb	r3, r3
 81061ca:	3b08      	subs	r3, #8
 81061cc:	4a2a      	ldr	r2, [pc, #168]	; (8106278 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81061ce:	fba2 2303 	umull	r2, r3, r2, r3
 81061d2:	091b      	lsrs	r3, r3, #4
 81061d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81061d6:	68fb      	ldr	r3, [r7, #12]
 81061d8:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81061dc:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81061e0:	009b      	lsls	r3, r3, #2
 81061e2:	461a      	mov	r2, r3
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	4a24      	ldr	r2, [pc, #144]	; (810627c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81061ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81061ee:	68fb      	ldr	r3, [r7, #12]
 81061f0:	f003 031f 	and.w	r3, r3, #31
 81061f4:	2201      	movs	r2, #1
 81061f6:	409a      	lsls	r2, r3
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81061fc:	e026      	b.n	810624c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	681b      	ldr	r3, [r3, #0]
 8106202:	b2db      	uxtb	r3, r3
 8106204:	3b10      	subs	r3, #16
 8106206:	4a1e      	ldr	r2, [pc, #120]	; (8106280 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106208:	fba2 2303 	umull	r2, r3, r2, r3
 810620c:	091b      	lsrs	r3, r3, #4
 810620e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106210:	68bb      	ldr	r3, [r7, #8]
 8106212:	4a1c      	ldr	r2, [pc, #112]	; (8106284 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106214:	4293      	cmp	r3, r2
 8106216:	d806      	bhi.n	8106226 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106218:	68bb      	ldr	r3, [r7, #8]
 810621a:	4a1b      	ldr	r2, [pc, #108]	; (8106288 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 810621c:	4293      	cmp	r3, r2
 810621e:	d902      	bls.n	8106226 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106220:	68fb      	ldr	r3, [r7, #12]
 8106222:	3308      	adds	r3, #8
 8106224:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106226:	68fb      	ldr	r3, [r7, #12]
 8106228:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 810622c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106230:	009b      	lsls	r3, r3, #2
 8106232:	461a      	mov	r2, r3
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	4a14      	ldr	r2, [pc, #80]	; (810628c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 810623c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810623e:	68fb      	ldr	r3, [r7, #12]
 8106240:	f003 031f 	and.w	r3, r3, #31
 8106244:	2201      	movs	r2, #1
 8106246:	409a      	lsls	r2, r3
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	669a      	str	r2, [r3, #104]	; 0x68
}
 810624c:	bf00      	nop
 810624e:	3714      	adds	r7, #20
 8106250:	46bd      	mov	sp, r7
 8106252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106256:	4770      	bx	lr
 8106258:	58025408 	.word	0x58025408
 810625c:	5802541c 	.word	0x5802541c
 8106260:	58025430 	.word	0x58025430
 8106264:	58025444 	.word	0x58025444
 8106268:	58025458 	.word	0x58025458
 810626c:	5802546c 	.word	0x5802546c
 8106270:	58025480 	.word	0x58025480
 8106274:	58025494 	.word	0x58025494
 8106278:	cccccccd 	.word	0xcccccccd
 810627c:	58025880 	.word	0x58025880
 8106280:	aaaaaaab 	.word	0xaaaaaaab
 8106284:	400204b8 	.word	0x400204b8
 8106288:	4002040f 	.word	0x4002040f
 810628c:	40020880 	.word	0x40020880

08106290 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106290:	b480      	push	{r7}
 8106292:	b085      	sub	sp, #20
 8106294:	af00      	add	r7, sp, #0
 8106296:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	685b      	ldr	r3, [r3, #4]
 810629c:	b2db      	uxtb	r3, r3
 810629e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81062a0:	68fb      	ldr	r3, [r7, #12]
 81062a2:	2b00      	cmp	r3, #0
 81062a4:	d04a      	beq.n	810633c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81062a6:	68fb      	ldr	r3, [r7, #12]
 81062a8:	2b08      	cmp	r3, #8
 81062aa:	d847      	bhi.n	810633c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a25      	ldr	r2, [pc, #148]	; (8106348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d022      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	681b      	ldr	r3, [r3, #0]
 81062ba:	4a24      	ldr	r2, [pc, #144]	; (810634c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81062bc:	4293      	cmp	r3, r2
 81062be:	d01d      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	681b      	ldr	r3, [r3, #0]
 81062c4:	4a22      	ldr	r2, [pc, #136]	; (8106350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81062c6:	4293      	cmp	r3, r2
 81062c8:	d018      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	4a21      	ldr	r2, [pc, #132]	; (8106354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81062d0:	4293      	cmp	r3, r2
 81062d2:	d013      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	681b      	ldr	r3, [r3, #0]
 81062d8:	4a1f      	ldr	r2, [pc, #124]	; (8106358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81062da:	4293      	cmp	r3, r2
 81062dc:	d00e      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	4a1e      	ldr	r2, [pc, #120]	; (810635c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81062e4:	4293      	cmp	r3, r2
 81062e6:	d009      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	4a1c      	ldr	r2, [pc, #112]	; (8106360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81062ee:	4293      	cmp	r3, r2
 81062f0:	d004      	beq.n	81062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	4a1b      	ldr	r2, [pc, #108]	; (8106364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81062f8:	4293      	cmp	r3, r2
 81062fa:	d101      	bne.n	8106300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81062fc:	2301      	movs	r3, #1
 81062fe:	e000      	b.n	8106302 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106300:	2300      	movs	r3, #0
 8106302:	2b00      	cmp	r3, #0
 8106304:	d00a      	beq.n	810631c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106306:	68fa      	ldr	r2, [r7, #12]
 8106308:	4b17      	ldr	r3, [pc, #92]	; (8106368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810630a:	4413      	add	r3, r2
 810630c:	009b      	lsls	r3, r3, #2
 810630e:	461a      	mov	r2, r3
 8106310:	687b      	ldr	r3, [r7, #4]
 8106312:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	4a15      	ldr	r2, [pc, #84]	; (810636c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106318:	671a      	str	r2, [r3, #112]	; 0x70
 810631a:	e009      	b.n	8106330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810631c:	68fa      	ldr	r2, [r7, #12]
 810631e:	4b14      	ldr	r3, [pc, #80]	; (8106370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106320:	4413      	add	r3, r2
 8106322:	009b      	lsls	r3, r3, #2
 8106324:	461a      	mov	r2, r3
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	4a11      	ldr	r2, [pc, #68]	; (8106374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810632e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106330:	68fb      	ldr	r3, [r7, #12]
 8106332:	3b01      	subs	r3, #1
 8106334:	2201      	movs	r2, #1
 8106336:	409a      	lsls	r2, r3
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 810633c:	bf00      	nop
 810633e:	3714      	adds	r7, #20
 8106340:	46bd      	mov	sp, r7
 8106342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106346:	4770      	bx	lr
 8106348:	58025408 	.word	0x58025408
 810634c:	5802541c 	.word	0x5802541c
 8106350:	58025430 	.word	0x58025430
 8106354:	58025444 	.word	0x58025444
 8106358:	58025458 	.word	0x58025458
 810635c:	5802546c 	.word	0x5802546c
 8106360:	58025480 	.word	0x58025480
 8106364:	58025494 	.word	0x58025494
 8106368:	1600963f 	.word	0x1600963f
 810636c:	58025940 	.word	0x58025940
 8106370:	1000823f 	.word	0x1000823f
 8106374:	40020940 	.word	0x40020940

08106378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106378:	b480      	push	{r7}
 810637a:	b089      	sub	sp, #36	; 0x24
 810637c:	af00      	add	r7, sp, #0
 810637e:	6078      	str	r0, [r7, #4]
 8106380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106382:	2300      	movs	r3, #0
 8106384:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106386:	4b89      	ldr	r3, [pc, #548]	; (81065ac <HAL_GPIO_Init+0x234>)
 8106388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810638a:	e194      	b.n	81066b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810638c:	683b      	ldr	r3, [r7, #0]
 810638e:	681a      	ldr	r2, [r3, #0]
 8106390:	2101      	movs	r1, #1
 8106392:	69fb      	ldr	r3, [r7, #28]
 8106394:	fa01 f303 	lsl.w	r3, r1, r3
 8106398:	4013      	ands	r3, r2
 810639a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810639c:	693b      	ldr	r3, [r7, #16]
 810639e:	2b00      	cmp	r3, #0
 81063a0:	f000 8186 	beq.w	81066b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81063a4:	683b      	ldr	r3, [r7, #0]
 81063a6:	685b      	ldr	r3, [r3, #4]
 81063a8:	2b01      	cmp	r3, #1
 81063aa:	d00b      	beq.n	81063c4 <HAL_GPIO_Init+0x4c>
 81063ac:	683b      	ldr	r3, [r7, #0]
 81063ae:	685b      	ldr	r3, [r3, #4]
 81063b0:	2b02      	cmp	r3, #2
 81063b2:	d007      	beq.n	81063c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81063b4:	683b      	ldr	r3, [r7, #0]
 81063b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81063b8:	2b11      	cmp	r3, #17
 81063ba:	d003      	beq.n	81063c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81063bc:	683b      	ldr	r3, [r7, #0]
 81063be:	685b      	ldr	r3, [r3, #4]
 81063c0:	2b12      	cmp	r3, #18
 81063c2:	d130      	bne.n	8106426 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	689b      	ldr	r3, [r3, #8]
 81063c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81063ca:	69fb      	ldr	r3, [r7, #28]
 81063cc:	005b      	lsls	r3, r3, #1
 81063ce:	2203      	movs	r2, #3
 81063d0:	fa02 f303 	lsl.w	r3, r2, r3
 81063d4:	43db      	mvns	r3, r3
 81063d6:	69ba      	ldr	r2, [r7, #24]
 81063d8:	4013      	ands	r3, r2
 81063da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81063dc:	683b      	ldr	r3, [r7, #0]
 81063de:	68da      	ldr	r2, [r3, #12]
 81063e0:	69fb      	ldr	r3, [r7, #28]
 81063e2:	005b      	lsls	r3, r3, #1
 81063e4:	fa02 f303 	lsl.w	r3, r2, r3
 81063e8:	69ba      	ldr	r2, [r7, #24]
 81063ea:	4313      	orrs	r3, r2
 81063ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	69ba      	ldr	r2, [r7, #24]
 81063f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	685b      	ldr	r3, [r3, #4]
 81063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81063fa:	2201      	movs	r2, #1
 81063fc:	69fb      	ldr	r3, [r7, #28]
 81063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8106402:	43db      	mvns	r3, r3
 8106404:	69ba      	ldr	r2, [r7, #24]
 8106406:	4013      	ands	r3, r2
 8106408:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810640a:	683b      	ldr	r3, [r7, #0]
 810640c:	685b      	ldr	r3, [r3, #4]
 810640e:	091b      	lsrs	r3, r3, #4
 8106410:	f003 0201 	and.w	r2, r3, #1
 8106414:	69fb      	ldr	r3, [r7, #28]
 8106416:	fa02 f303 	lsl.w	r3, r2, r3
 810641a:	69ba      	ldr	r2, [r7, #24]
 810641c:	4313      	orrs	r3, r2
 810641e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	69ba      	ldr	r2, [r7, #24]
 8106424:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	68db      	ldr	r3, [r3, #12]
 810642a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810642c:	69fb      	ldr	r3, [r7, #28]
 810642e:	005b      	lsls	r3, r3, #1
 8106430:	2203      	movs	r2, #3
 8106432:	fa02 f303 	lsl.w	r3, r2, r3
 8106436:	43db      	mvns	r3, r3
 8106438:	69ba      	ldr	r2, [r7, #24]
 810643a:	4013      	ands	r3, r2
 810643c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810643e:	683b      	ldr	r3, [r7, #0]
 8106440:	689a      	ldr	r2, [r3, #8]
 8106442:	69fb      	ldr	r3, [r7, #28]
 8106444:	005b      	lsls	r3, r3, #1
 8106446:	fa02 f303 	lsl.w	r3, r2, r3
 810644a:	69ba      	ldr	r2, [r7, #24]
 810644c:	4313      	orrs	r3, r2
 810644e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	69ba      	ldr	r2, [r7, #24]
 8106454:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106456:	683b      	ldr	r3, [r7, #0]
 8106458:	685b      	ldr	r3, [r3, #4]
 810645a:	2b02      	cmp	r3, #2
 810645c:	d003      	beq.n	8106466 <HAL_GPIO_Init+0xee>
 810645e:	683b      	ldr	r3, [r7, #0]
 8106460:	685b      	ldr	r3, [r3, #4]
 8106462:	2b12      	cmp	r3, #18
 8106464:	d123      	bne.n	81064ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106466:	69fb      	ldr	r3, [r7, #28]
 8106468:	08da      	lsrs	r2, r3, #3
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	3208      	adds	r2, #8
 810646e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106474:	69fb      	ldr	r3, [r7, #28]
 8106476:	f003 0307 	and.w	r3, r3, #7
 810647a:	009b      	lsls	r3, r3, #2
 810647c:	220f      	movs	r2, #15
 810647e:	fa02 f303 	lsl.w	r3, r2, r3
 8106482:	43db      	mvns	r3, r3
 8106484:	69ba      	ldr	r2, [r7, #24]
 8106486:	4013      	ands	r3, r2
 8106488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810648a:	683b      	ldr	r3, [r7, #0]
 810648c:	691a      	ldr	r2, [r3, #16]
 810648e:	69fb      	ldr	r3, [r7, #28]
 8106490:	f003 0307 	and.w	r3, r3, #7
 8106494:	009b      	lsls	r3, r3, #2
 8106496:	fa02 f303 	lsl.w	r3, r2, r3
 810649a:	69ba      	ldr	r2, [r7, #24]
 810649c:	4313      	orrs	r3, r2
 810649e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81064a0:	69fb      	ldr	r3, [r7, #28]
 81064a2:	08da      	lsrs	r2, r3, #3
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	3208      	adds	r2, #8
 81064a8:	69b9      	ldr	r1, [r7, #24]
 81064aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81064b4:	69fb      	ldr	r3, [r7, #28]
 81064b6:	005b      	lsls	r3, r3, #1
 81064b8:	2203      	movs	r2, #3
 81064ba:	fa02 f303 	lsl.w	r3, r2, r3
 81064be:	43db      	mvns	r3, r3
 81064c0:	69ba      	ldr	r2, [r7, #24]
 81064c2:	4013      	ands	r3, r2
 81064c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81064c6:	683b      	ldr	r3, [r7, #0]
 81064c8:	685b      	ldr	r3, [r3, #4]
 81064ca:	f003 0203 	and.w	r2, r3, #3
 81064ce:	69fb      	ldr	r3, [r7, #28]
 81064d0:	005b      	lsls	r3, r3, #1
 81064d2:	fa02 f303 	lsl.w	r3, r2, r3
 81064d6:	69ba      	ldr	r2, [r7, #24]
 81064d8:	4313      	orrs	r3, r2
 81064da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	69ba      	ldr	r2, [r7, #24]
 81064e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81064e2:	683b      	ldr	r3, [r7, #0]
 81064e4:	685b      	ldr	r3, [r3, #4]
 81064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	f000 80e0 	beq.w	81066b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81064f0:	4b2f      	ldr	r3, [pc, #188]	; (81065b0 <HAL_GPIO_Init+0x238>)
 81064f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81064f6:	4a2e      	ldr	r2, [pc, #184]	; (81065b0 <HAL_GPIO_Init+0x238>)
 81064f8:	f043 0302 	orr.w	r3, r3, #2
 81064fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106500:	4b2b      	ldr	r3, [pc, #172]	; (81065b0 <HAL_GPIO_Init+0x238>)
 8106502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106506:	f003 0302 	and.w	r3, r3, #2
 810650a:	60fb      	str	r3, [r7, #12]
 810650c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810650e:	4a29      	ldr	r2, [pc, #164]	; (81065b4 <HAL_GPIO_Init+0x23c>)
 8106510:	69fb      	ldr	r3, [r7, #28]
 8106512:	089b      	lsrs	r3, r3, #2
 8106514:	3302      	adds	r3, #2
 8106516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810651a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810651c:	69fb      	ldr	r3, [r7, #28]
 810651e:	f003 0303 	and.w	r3, r3, #3
 8106522:	009b      	lsls	r3, r3, #2
 8106524:	220f      	movs	r2, #15
 8106526:	fa02 f303 	lsl.w	r3, r2, r3
 810652a:	43db      	mvns	r3, r3
 810652c:	69ba      	ldr	r2, [r7, #24]
 810652e:	4013      	ands	r3, r2
 8106530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	4a20      	ldr	r2, [pc, #128]	; (81065b8 <HAL_GPIO_Init+0x240>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d052      	beq.n	81065e0 <HAL_GPIO_Init+0x268>
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	4a1f      	ldr	r2, [pc, #124]	; (81065bc <HAL_GPIO_Init+0x244>)
 810653e:	4293      	cmp	r3, r2
 8106540:	d031      	beq.n	81065a6 <HAL_GPIO_Init+0x22e>
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	4a1e      	ldr	r2, [pc, #120]	; (81065c0 <HAL_GPIO_Init+0x248>)
 8106546:	4293      	cmp	r3, r2
 8106548:	d02b      	beq.n	81065a2 <HAL_GPIO_Init+0x22a>
 810654a:	687b      	ldr	r3, [r7, #4]
 810654c:	4a1d      	ldr	r2, [pc, #116]	; (81065c4 <HAL_GPIO_Init+0x24c>)
 810654e:	4293      	cmp	r3, r2
 8106550:	d025      	beq.n	810659e <HAL_GPIO_Init+0x226>
 8106552:	687b      	ldr	r3, [r7, #4]
 8106554:	4a1c      	ldr	r2, [pc, #112]	; (81065c8 <HAL_GPIO_Init+0x250>)
 8106556:	4293      	cmp	r3, r2
 8106558:	d01f      	beq.n	810659a <HAL_GPIO_Init+0x222>
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	4a1b      	ldr	r2, [pc, #108]	; (81065cc <HAL_GPIO_Init+0x254>)
 810655e:	4293      	cmp	r3, r2
 8106560:	d019      	beq.n	8106596 <HAL_GPIO_Init+0x21e>
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	4a1a      	ldr	r2, [pc, #104]	; (81065d0 <HAL_GPIO_Init+0x258>)
 8106566:	4293      	cmp	r3, r2
 8106568:	d013      	beq.n	8106592 <HAL_GPIO_Init+0x21a>
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	4a19      	ldr	r2, [pc, #100]	; (81065d4 <HAL_GPIO_Init+0x25c>)
 810656e:	4293      	cmp	r3, r2
 8106570:	d00d      	beq.n	810658e <HAL_GPIO_Init+0x216>
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	4a18      	ldr	r2, [pc, #96]	; (81065d8 <HAL_GPIO_Init+0x260>)
 8106576:	4293      	cmp	r3, r2
 8106578:	d007      	beq.n	810658a <HAL_GPIO_Init+0x212>
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	4a17      	ldr	r2, [pc, #92]	; (81065dc <HAL_GPIO_Init+0x264>)
 810657e:	4293      	cmp	r3, r2
 8106580:	d101      	bne.n	8106586 <HAL_GPIO_Init+0x20e>
 8106582:	2309      	movs	r3, #9
 8106584:	e02d      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 8106586:	230a      	movs	r3, #10
 8106588:	e02b      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 810658a:	2308      	movs	r3, #8
 810658c:	e029      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 810658e:	2307      	movs	r3, #7
 8106590:	e027      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 8106592:	2306      	movs	r3, #6
 8106594:	e025      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 8106596:	2305      	movs	r3, #5
 8106598:	e023      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 810659a:	2304      	movs	r3, #4
 810659c:	e021      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 810659e:	2303      	movs	r3, #3
 81065a0:	e01f      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 81065a2:	2302      	movs	r3, #2
 81065a4:	e01d      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 81065a6:	2301      	movs	r3, #1
 81065a8:	e01b      	b.n	81065e2 <HAL_GPIO_Init+0x26a>
 81065aa:	bf00      	nop
 81065ac:	580000c0 	.word	0x580000c0
 81065b0:	58024400 	.word	0x58024400
 81065b4:	58000400 	.word	0x58000400
 81065b8:	58020000 	.word	0x58020000
 81065bc:	58020400 	.word	0x58020400
 81065c0:	58020800 	.word	0x58020800
 81065c4:	58020c00 	.word	0x58020c00
 81065c8:	58021000 	.word	0x58021000
 81065cc:	58021400 	.word	0x58021400
 81065d0:	58021800 	.word	0x58021800
 81065d4:	58021c00 	.word	0x58021c00
 81065d8:	58022000 	.word	0x58022000
 81065dc:	58022400 	.word	0x58022400
 81065e0:	2300      	movs	r3, #0
 81065e2:	69fa      	ldr	r2, [r7, #28]
 81065e4:	f002 0203 	and.w	r2, r2, #3
 81065e8:	0092      	lsls	r2, r2, #2
 81065ea:	4093      	lsls	r3, r2
 81065ec:	69ba      	ldr	r2, [r7, #24]
 81065ee:	4313      	orrs	r3, r2
 81065f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81065f2:	4938      	ldr	r1, [pc, #224]	; (81066d4 <HAL_GPIO_Init+0x35c>)
 81065f4:	69fb      	ldr	r3, [r7, #28]
 81065f6:	089b      	lsrs	r3, r3, #2
 81065f8:	3302      	adds	r3, #2
 81065fa:	69ba      	ldr	r2, [r7, #24]
 81065fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106600:	697b      	ldr	r3, [r7, #20]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106606:	693b      	ldr	r3, [r7, #16]
 8106608:	43db      	mvns	r3, r3
 810660a:	69ba      	ldr	r2, [r7, #24]
 810660c:	4013      	ands	r3, r2
 810660e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8106610:	683b      	ldr	r3, [r7, #0]
 8106612:	685b      	ldr	r3, [r3, #4]
 8106614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106618:	2b00      	cmp	r3, #0
 810661a:	d003      	beq.n	8106624 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810661c:	69ba      	ldr	r2, [r7, #24]
 810661e:	693b      	ldr	r3, [r7, #16]
 8106620:	4313      	orrs	r3, r2
 8106622:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106624:	697b      	ldr	r3, [r7, #20]
 8106626:	69ba      	ldr	r2, [r7, #24]
 8106628:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810662a:	697b      	ldr	r3, [r7, #20]
 810662c:	685b      	ldr	r3, [r3, #4]
 810662e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106630:	693b      	ldr	r3, [r7, #16]
 8106632:	43db      	mvns	r3, r3
 8106634:	69ba      	ldr	r2, [r7, #24]
 8106636:	4013      	ands	r3, r2
 8106638:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810663a:	683b      	ldr	r3, [r7, #0]
 810663c:	685b      	ldr	r3, [r3, #4]
 810663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106642:	2b00      	cmp	r3, #0
 8106644:	d003      	beq.n	810664e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106646:	69ba      	ldr	r2, [r7, #24]
 8106648:	693b      	ldr	r3, [r7, #16]
 810664a:	4313      	orrs	r3, r2
 810664c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810664e:	697b      	ldr	r3, [r7, #20]
 8106650:	69ba      	ldr	r2, [r7, #24]
 8106652:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106658:	681b      	ldr	r3, [r3, #0]
 810665a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810665c:	693b      	ldr	r3, [r7, #16]
 810665e:	43db      	mvns	r3, r3
 8106660:	69ba      	ldr	r2, [r7, #24]
 8106662:	4013      	ands	r3, r2
 8106664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106666:	683b      	ldr	r3, [r7, #0]
 8106668:	685b      	ldr	r3, [r3, #4]
 810666a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810666e:	2b00      	cmp	r3, #0
 8106670:	d003      	beq.n	810667a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8106672:	69ba      	ldr	r2, [r7, #24]
 8106674:	693b      	ldr	r3, [r7, #16]
 8106676:	4313      	orrs	r3, r2
 8106678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810667a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810667e:	69bb      	ldr	r3, [r7, #24]
 8106680:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106686:	685b      	ldr	r3, [r3, #4]
 8106688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810668a:	693b      	ldr	r3, [r7, #16]
 810668c:	43db      	mvns	r3, r3
 810668e:	69ba      	ldr	r2, [r7, #24]
 8106690:	4013      	ands	r3, r2
 8106692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106694:	683b      	ldr	r3, [r7, #0]
 8106696:	685b      	ldr	r3, [r3, #4]
 8106698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810669c:	2b00      	cmp	r3, #0
 810669e:	d003      	beq.n	81066a8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81066a0:	69ba      	ldr	r2, [r7, #24]
 81066a2:	693b      	ldr	r3, [r7, #16]
 81066a4:	4313      	orrs	r3, r2
 81066a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81066a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81066ac:	69bb      	ldr	r3, [r7, #24]
 81066ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81066b0:	69fb      	ldr	r3, [r7, #28]
 81066b2:	3301      	adds	r3, #1
 81066b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81066b6:	683b      	ldr	r3, [r7, #0]
 81066b8:	681a      	ldr	r2, [r3, #0]
 81066ba:	69fb      	ldr	r3, [r7, #28]
 81066bc:	fa22 f303 	lsr.w	r3, r2, r3
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	f47f ae63 	bne.w	810638c <HAL_GPIO_Init+0x14>
  }
}
 81066c6:	bf00      	nop
 81066c8:	bf00      	nop
 81066ca:	3724      	adds	r7, #36	; 0x24
 81066cc:	46bd      	mov	sp, r7
 81066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066d2:	4770      	bx	lr
 81066d4:	58000400 	.word	0x58000400

081066d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81066d8:	b480      	push	{r7}
 81066da:	b083      	sub	sp, #12
 81066dc:	af00      	add	r7, sp, #0
 81066de:	6078      	str	r0, [r7, #4]
 81066e0:	460b      	mov	r3, r1
 81066e2:	807b      	strh	r3, [r7, #2]
 81066e4:	4613      	mov	r3, r2
 81066e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81066e8:	787b      	ldrb	r3, [r7, #1]
 81066ea:	2b00      	cmp	r3, #0
 81066ec:	d003      	beq.n	81066f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81066ee:	887a      	ldrh	r2, [r7, #2]
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81066f4:	e003      	b.n	81066fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81066f6:	887b      	ldrh	r3, [r7, #2]
 81066f8:	041a      	lsls	r2, r3, #16
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	619a      	str	r2, [r3, #24]
}
 81066fe:	bf00      	nop
 8106700:	370c      	adds	r7, #12
 8106702:	46bd      	mov	sp, r7
 8106704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106708:	4770      	bx	lr
	...

0810670c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810670c:	b480      	push	{r7}
 810670e:	b083      	sub	sp, #12
 8106710:	af00      	add	r7, sp, #0
 8106712:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106714:	4b05      	ldr	r3, [pc, #20]	; (810672c <HAL_HSEM_ActivateNotification+0x20>)
 8106716:	681a      	ldr	r2, [r3, #0]
 8106718:	4904      	ldr	r1, [pc, #16]	; (810672c <HAL_HSEM_ActivateNotification+0x20>)
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	4313      	orrs	r3, r2
 810671e:	600b      	str	r3, [r1, #0]
#endif
}
 8106720:	bf00      	nop
 8106722:	370c      	adds	r7, #12
 8106724:	46bd      	mov	sp, r7
 8106726:	f85d 7b04 	ldr.w	r7, [sp], #4
 810672a:	4770      	bx	lr
 810672c:	58026510 	.word	0x58026510

08106730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106730:	b580      	push	{r7, lr}
 8106732:	b082      	sub	sp, #8
 8106734:	af00      	add	r7, sp, #0
 8106736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2b00      	cmp	r3, #0
 810673c:	d101      	bne.n	8106742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810673e:	2301      	movs	r3, #1
 8106740:	e081      	b.n	8106846 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8106742:	687b      	ldr	r3, [r7, #4]
 8106744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106748:	b2db      	uxtb	r3, r3
 810674a:	2b00      	cmp	r3, #0
 810674c:	d106      	bne.n	810675c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	2200      	movs	r2, #0
 8106752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106756:	6878      	ldr	r0, [r7, #4]
 8106758:	f7fb fa64 	bl	8101c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	2224      	movs	r2, #36	; 0x24
 8106760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8106764:	687b      	ldr	r3, [r7, #4]
 8106766:	681b      	ldr	r3, [r3, #0]
 8106768:	681a      	ldr	r2, [r3, #0]
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	f022 0201 	bic.w	r2, r2, #1
 8106772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8106774:	687b      	ldr	r3, [r7, #4]
 8106776:	685a      	ldr	r2, [r3, #4]
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8106780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	681b      	ldr	r3, [r3, #0]
 8106786:	689a      	ldr	r2, [r3, #8]
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	68db      	ldr	r3, [r3, #12]
 8106796:	2b01      	cmp	r3, #1
 8106798:	d107      	bne.n	81067aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	689a      	ldr	r2, [r3, #8]
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81067a6:	609a      	str	r2, [r3, #8]
 81067a8:	e006      	b.n	81067b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	689a      	ldr	r2, [r3, #8]
 81067ae:	687b      	ldr	r3, [r7, #4]
 81067b0:	681b      	ldr	r3, [r3, #0]
 81067b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81067b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	68db      	ldr	r3, [r3, #12]
 81067bc:	2b02      	cmp	r3, #2
 81067be:	d104      	bne.n	81067ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81067c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81067ca:	687b      	ldr	r3, [r7, #4]
 81067cc:	681b      	ldr	r3, [r3, #0]
 81067ce:	685b      	ldr	r3, [r3, #4]
 81067d0:	687a      	ldr	r2, [r7, #4]
 81067d2:	6812      	ldr	r2, [r2, #0]
 81067d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81067d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81067dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	68da      	ldr	r2, [r3, #12]
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	681b      	ldr	r3, [r3, #0]
 81067e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81067ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	691a      	ldr	r2, [r3, #16]
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	695b      	ldr	r3, [r3, #20]
 81067f6:	ea42 0103 	orr.w	r1, r2, r3
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	699b      	ldr	r3, [r3, #24]
 81067fe:	021a      	lsls	r2, r3, #8
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	681b      	ldr	r3, [r3, #0]
 8106804:	430a      	orrs	r2, r1
 8106806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8106808:	687b      	ldr	r3, [r7, #4]
 810680a:	69d9      	ldr	r1, [r3, #28]
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	6a1a      	ldr	r2, [r3, #32]
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	681b      	ldr	r3, [r3, #0]
 8106814:	430a      	orrs	r2, r1
 8106816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	681b      	ldr	r3, [r3, #0]
 810681c:	681a      	ldr	r2, [r3, #0]
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	681b      	ldr	r3, [r3, #0]
 8106822:	f042 0201 	orr.w	r2, r2, #1
 8106826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	2200      	movs	r2, #0
 810682c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	2220      	movs	r2, #32
 8106832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2200      	movs	r2, #0
 810683a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	2200      	movs	r2, #0
 8106840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8106844:	2300      	movs	r3, #0
}
 8106846:	4618      	mov	r0, r3
 8106848:	3708      	adds	r7, #8
 810684a:	46bd      	mov	sp, r7
 810684c:	bd80      	pop	{r7, pc}
	...

08106850 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106850:	b580      	push	{r7, lr}
 8106852:	b088      	sub	sp, #32
 8106854:	af02      	add	r7, sp, #8
 8106856:	60f8      	str	r0, [r7, #12]
 8106858:	4608      	mov	r0, r1
 810685a:	4611      	mov	r1, r2
 810685c:	461a      	mov	r2, r3
 810685e:	4603      	mov	r3, r0
 8106860:	817b      	strh	r3, [r7, #10]
 8106862:	460b      	mov	r3, r1
 8106864:	813b      	strh	r3, [r7, #8]
 8106866:	4613      	mov	r3, r2
 8106868:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810686a:	68fb      	ldr	r3, [r7, #12]
 810686c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106870:	b2db      	uxtb	r3, r3
 8106872:	2b20      	cmp	r3, #32
 8106874:	f040 80f9 	bne.w	8106a6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8106878:	6a3b      	ldr	r3, [r7, #32]
 810687a:	2b00      	cmp	r3, #0
 810687c:	d002      	beq.n	8106884 <HAL_I2C_Mem_Write+0x34>
 810687e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106880:	2b00      	cmp	r3, #0
 8106882:	d105      	bne.n	8106890 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106884:	68fb      	ldr	r3, [r7, #12]
 8106886:	f44f 7200 	mov.w	r2, #512	; 0x200
 810688a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 810688c:	2301      	movs	r3, #1
 810688e:	e0ed      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106890:	68fb      	ldr	r3, [r7, #12]
 8106892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106896:	2b01      	cmp	r3, #1
 8106898:	d101      	bne.n	810689e <HAL_I2C_Mem_Write+0x4e>
 810689a:	2302      	movs	r3, #2
 810689c:	e0e6      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
 810689e:	68fb      	ldr	r3, [r7, #12]
 81068a0:	2201      	movs	r2, #1
 81068a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81068a6:	f7fc fdc1 	bl	810342c <HAL_GetTick>
 81068aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81068ac:	697b      	ldr	r3, [r7, #20]
 81068ae:	9300      	str	r3, [sp, #0]
 81068b0:	2319      	movs	r3, #25
 81068b2:	2201      	movs	r2, #1
 81068b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81068b8:	68f8      	ldr	r0, [r7, #12]
 81068ba:	f001 f8c6 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 81068be:	4603      	mov	r3, r0
 81068c0:	2b00      	cmp	r3, #0
 81068c2:	d001      	beq.n	81068c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81068c4:	2301      	movs	r3, #1
 81068c6:	e0d1      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81068c8:	68fb      	ldr	r3, [r7, #12]
 81068ca:	2221      	movs	r2, #33	; 0x21
 81068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81068d0:	68fb      	ldr	r3, [r7, #12]
 81068d2:	2240      	movs	r2, #64	; 0x40
 81068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81068d8:	68fb      	ldr	r3, [r7, #12]
 81068da:	2200      	movs	r2, #0
 81068dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81068de:	68fb      	ldr	r3, [r7, #12]
 81068e0:	6a3a      	ldr	r2, [r7, #32]
 81068e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81068e4:	68fb      	ldr	r3, [r7, #12]
 81068e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81068e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81068ea:	68fb      	ldr	r3, [r7, #12]
 81068ec:	2200      	movs	r2, #0
 81068ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81068f0:	88f8      	ldrh	r0, [r7, #6]
 81068f2:	893a      	ldrh	r2, [r7, #8]
 81068f4:	8979      	ldrh	r1, [r7, #10]
 81068f6:	697b      	ldr	r3, [r7, #20]
 81068f8:	9301      	str	r3, [sp, #4]
 81068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81068fc:	9300      	str	r3, [sp, #0]
 81068fe:	4603      	mov	r3, r0
 8106900:	68f8      	ldr	r0, [r7, #12]
 8106902:	f000 fb91 	bl	8107028 <I2C_RequestMemoryWrite>
 8106906:	4603      	mov	r3, r0
 8106908:	2b00      	cmp	r3, #0
 810690a:	d005      	beq.n	8106918 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810690c:	68fb      	ldr	r3, [r7, #12]
 810690e:	2200      	movs	r2, #0
 8106910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106914:	2301      	movs	r3, #1
 8106916:	e0a9      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106918:	68fb      	ldr	r3, [r7, #12]
 810691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810691c:	b29b      	uxth	r3, r3
 810691e:	2bff      	cmp	r3, #255	; 0xff
 8106920:	d90e      	bls.n	8106940 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106922:	68fb      	ldr	r3, [r7, #12]
 8106924:	22ff      	movs	r2, #255	; 0xff
 8106926:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106928:	68fb      	ldr	r3, [r7, #12]
 810692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810692c:	b2da      	uxtb	r2, r3
 810692e:	8979      	ldrh	r1, [r7, #10]
 8106930:	2300      	movs	r3, #0
 8106932:	9300      	str	r3, [sp, #0]
 8106934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106938:	68f8      	ldr	r0, [r7, #12]
 810693a:	f001 f9a9 	bl	8107c90 <I2C_TransferConfig>
 810693e:	e00f      	b.n	8106960 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106940:	68fb      	ldr	r3, [r7, #12]
 8106942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106944:	b29a      	uxth	r2, r3
 8106946:	68fb      	ldr	r3, [r7, #12]
 8106948:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810694a:	68fb      	ldr	r3, [r7, #12]
 810694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810694e:	b2da      	uxtb	r2, r3
 8106950:	8979      	ldrh	r1, [r7, #10]
 8106952:	2300      	movs	r3, #0
 8106954:	9300      	str	r3, [sp, #0]
 8106956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810695a:	68f8      	ldr	r0, [r7, #12]
 810695c:	f001 f998 	bl	8107c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106960:	697a      	ldr	r2, [r7, #20]
 8106962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106964:	68f8      	ldr	r0, [r7, #12]
 8106966:	f001 f8b0 	bl	8107aca <I2C_WaitOnTXISFlagUntilTimeout>
 810696a:	4603      	mov	r3, r0
 810696c:	2b00      	cmp	r3, #0
 810696e:	d001      	beq.n	8106974 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8106970:	2301      	movs	r3, #1
 8106972:	e07b      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8106974:	68fb      	ldr	r3, [r7, #12]
 8106976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106978:	781a      	ldrb	r2, [r3, #0]
 810697a:	68fb      	ldr	r3, [r7, #12]
 810697c:	681b      	ldr	r3, [r3, #0]
 810697e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106980:	68fb      	ldr	r3, [r7, #12]
 8106982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106984:	1c5a      	adds	r2, r3, #1
 8106986:	68fb      	ldr	r3, [r7, #12]
 8106988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810698a:	68fb      	ldr	r3, [r7, #12]
 810698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810698e:	b29b      	uxth	r3, r3
 8106990:	3b01      	subs	r3, #1
 8106992:	b29a      	uxth	r2, r3
 8106994:	68fb      	ldr	r3, [r7, #12]
 8106996:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8106998:	68fb      	ldr	r3, [r7, #12]
 810699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810699c:	3b01      	subs	r3, #1
 810699e:	b29a      	uxth	r2, r3
 81069a0:	68fb      	ldr	r3, [r7, #12]
 81069a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81069a4:	68fb      	ldr	r3, [r7, #12]
 81069a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81069a8:	b29b      	uxth	r3, r3
 81069aa:	2b00      	cmp	r3, #0
 81069ac:	d034      	beq.n	8106a18 <HAL_I2C_Mem_Write+0x1c8>
 81069ae:	68fb      	ldr	r3, [r7, #12]
 81069b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81069b2:	2b00      	cmp	r3, #0
 81069b4:	d130      	bne.n	8106a18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81069b6:	697b      	ldr	r3, [r7, #20]
 81069b8:	9300      	str	r3, [sp, #0]
 81069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069bc:	2200      	movs	r2, #0
 81069be:	2180      	movs	r1, #128	; 0x80
 81069c0:	68f8      	ldr	r0, [r7, #12]
 81069c2:	f001 f842 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 81069c6:	4603      	mov	r3, r0
 81069c8:	2b00      	cmp	r3, #0
 81069ca:	d001      	beq.n	81069d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81069cc:	2301      	movs	r3, #1
 81069ce:	e04d      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81069d0:	68fb      	ldr	r3, [r7, #12]
 81069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81069d4:	b29b      	uxth	r3, r3
 81069d6:	2bff      	cmp	r3, #255	; 0xff
 81069d8:	d90e      	bls.n	81069f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81069da:	68fb      	ldr	r3, [r7, #12]
 81069dc:	22ff      	movs	r2, #255	; 0xff
 81069de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81069e0:	68fb      	ldr	r3, [r7, #12]
 81069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81069e4:	b2da      	uxtb	r2, r3
 81069e6:	8979      	ldrh	r1, [r7, #10]
 81069e8:	2300      	movs	r3, #0
 81069ea:	9300      	str	r3, [sp, #0]
 81069ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81069f0:	68f8      	ldr	r0, [r7, #12]
 81069f2:	f001 f94d 	bl	8107c90 <I2C_TransferConfig>
 81069f6:	e00f      	b.n	8106a18 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81069f8:	68fb      	ldr	r3, [r7, #12]
 81069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81069fc:	b29a      	uxth	r2, r3
 81069fe:	68fb      	ldr	r3, [r7, #12]
 8106a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106a02:	68fb      	ldr	r3, [r7, #12]
 8106a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a06:	b2da      	uxtb	r2, r3
 8106a08:	8979      	ldrh	r1, [r7, #10]
 8106a0a:	2300      	movs	r3, #0
 8106a0c:	9300      	str	r3, [sp, #0]
 8106a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106a12:	68f8      	ldr	r0, [r7, #12]
 8106a14:	f001 f93c 	bl	8107c90 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8106a18:	68fb      	ldr	r3, [r7, #12]
 8106a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a1c:	b29b      	uxth	r3, r3
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d19e      	bne.n	8106960 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106a22:	697a      	ldr	r2, [r7, #20]
 8106a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106a26:	68f8      	ldr	r0, [r7, #12]
 8106a28:	f001 f88f 	bl	8107b4a <I2C_WaitOnSTOPFlagUntilTimeout>
 8106a2c:	4603      	mov	r3, r0
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d001      	beq.n	8106a36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8106a32:	2301      	movs	r3, #1
 8106a34:	e01a      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106a36:	68fb      	ldr	r3, [r7, #12]
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	2220      	movs	r2, #32
 8106a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106a3e:	68fb      	ldr	r3, [r7, #12]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	6859      	ldr	r1, [r3, #4]
 8106a44:	68fb      	ldr	r3, [r7, #12]
 8106a46:	681a      	ldr	r2, [r3, #0]
 8106a48:	4b0a      	ldr	r3, [pc, #40]	; (8106a74 <HAL_I2C_Mem_Write+0x224>)
 8106a4a:	400b      	ands	r3, r1
 8106a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106a4e:	68fb      	ldr	r3, [r7, #12]
 8106a50:	2220      	movs	r2, #32
 8106a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106a56:	68fb      	ldr	r3, [r7, #12]
 8106a58:	2200      	movs	r2, #0
 8106a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106a5e:	68fb      	ldr	r3, [r7, #12]
 8106a60:	2200      	movs	r2, #0
 8106a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106a66:	2300      	movs	r3, #0
 8106a68:	e000      	b.n	8106a6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8106a6a:	2302      	movs	r3, #2
  }
}
 8106a6c:	4618      	mov	r0, r3
 8106a6e:	3718      	adds	r7, #24
 8106a70:	46bd      	mov	sp, r7
 8106a72:	bd80      	pop	{r7, pc}
 8106a74:	fe00e800 	.word	0xfe00e800

08106a78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106a78:	b580      	push	{r7, lr}
 8106a7a:	b088      	sub	sp, #32
 8106a7c:	af02      	add	r7, sp, #8
 8106a7e:	60f8      	str	r0, [r7, #12]
 8106a80:	4608      	mov	r0, r1
 8106a82:	4611      	mov	r1, r2
 8106a84:	461a      	mov	r2, r3
 8106a86:	4603      	mov	r3, r0
 8106a88:	817b      	strh	r3, [r7, #10]
 8106a8a:	460b      	mov	r3, r1
 8106a8c:	813b      	strh	r3, [r7, #8]
 8106a8e:	4613      	mov	r3, r2
 8106a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106a92:	68fb      	ldr	r3, [r7, #12]
 8106a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106a98:	b2db      	uxtb	r3, r3
 8106a9a:	2b20      	cmp	r3, #32
 8106a9c:	f040 80fd 	bne.w	8106c9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8106aa0:	6a3b      	ldr	r3, [r7, #32]
 8106aa2:	2b00      	cmp	r3, #0
 8106aa4:	d002      	beq.n	8106aac <HAL_I2C_Mem_Read+0x34>
 8106aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	d105      	bne.n	8106ab8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106ab2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106ab4:	2301      	movs	r3, #1
 8106ab6:	e0f1      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106ab8:	68fb      	ldr	r3, [r7, #12]
 8106aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106abe:	2b01      	cmp	r3, #1
 8106ac0:	d101      	bne.n	8106ac6 <HAL_I2C_Mem_Read+0x4e>
 8106ac2:	2302      	movs	r3, #2
 8106ac4:	e0ea      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
 8106ac6:	68fb      	ldr	r3, [r7, #12]
 8106ac8:	2201      	movs	r2, #1
 8106aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106ace:	f7fc fcad 	bl	810342c <HAL_GetTick>
 8106ad2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106ad4:	697b      	ldr	r3, [r7, #20]
 8106ad6:	9300      	str	r3, [sp, #0]
 8106ad8:	2319      	movs	r3, #25
 8106ada:	2201      	movs	r2, #1
 8106adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8106ae0:	68f8      	ldr	r0, [r7, #12]
 8106ae2:	f000 ffb2 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 8106ae6:	4603      	mov	r3, r0
 8106ae8:	2b00      	cmp	r3, #0
 8106aea:	d001      	beq.n	8106af0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8106aec:	2301      	movs	r3, #1
 8106aee:	e0d5      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	2222      	movs	r2, #34	; 0x22
 8106af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106af8:	68fb      	ldr	r3, [r7, #12]
 8106afa:	2240      	movs	r2, #64	; 0x40
 8106afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106b00:	68fb      	ldr	r3, [r7, #12]
 8106b02:	2200      	movs	r2, #0
 8106b04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106b06:	68fb      	ldr	r3, [r7, #12]
 8106b08:	6a3a      	ldr	r2, [r7, #32]
 8106b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8106b0c:	68fb      	ldr	r3, [r7, #12]
 8106b0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8106b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	2200      	movs	r2, #0
 8106b16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106b18:	88f8      	ldrh	r0, [r7, #6]
 8106b1a:	893a      	ldrh	r2, [r7, #8]
 8106b1c:	8979      	ldrh	r1, [r7, #10]
 8106b1e:	697b      	ldr	r3, [r7, #20]
 8106b20:	9301      	str	r3, [sp, #4]
 8106b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b24:	9300      	str	r3, [sp, #0]
 8106b26:	4603      	mov	r3, r0
 8106b28:	68f8      	ldr	r0, [r7, #12]
 8106b2a:	f000 fad1 	bl	81070d0 <I2C_RequestMemoryRead>
 8106b2e:	4603      	mov	r3, r0
 8106b30:	2b00      	cmp	r3, #0
 8106b32:	d005      	beq.n	8106b40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	2200      	movs	r2, #0
 8106b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106b3c:	2301      	movs	r3, #1
 8106b3e:	e0ad      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106b44:	b29b      	uxth	r3, r3
 8106b46:	2bff      	cmp	r3, #255	; 0xff
 8106b48:	d90e      	bls.n	8106b68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106b4a:	68fb      	ldr	r3, [r7, #12]
 8106b4c:	22ff      	movs	r2, #255	; 0xff
 8106b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8106b50:	68fb      	ldr	r3, [r7, #12]
 8106b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106b54:	b2da      	uxtb	r2, r3
 8106b56:	8979      	ldrh	r1, [r7, #10]
 8106b58:	4b52      	ldr	r3, [pc, #328]	; (8106ca4 <HAL_I2C_Mem_Read+0x22c>)
 8106b5a:	9300      	str	r3, [sp, #0]
 8106b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106b60:	68f8      	ldr	r0, [r7, #12]
 8106b62:	f001 f895 	bl	8107c90 <I2C_TransferConfig>
 8106b66:	e00f      	b.n	8106b88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106b68:	68fb      	ldr	r3, [r7, #12]
 8106b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106b6c:	b29a      	uxth	r2, r3
 8106b6e:	68fb      	ldr	r3, [r7, #12]
 8106b70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8106b72:	68fb      	ldr	r3, [r7, #12]
 8106b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106b76:	b2da      	uxtb	r2, r3
 8106b78:	8979      	ldrh	r1, [r7, #10]
 8106b7a:	4b4a      	ldr	r3, [pc, #296]	; (8106ca4 <HAL_I2C_Mem_Read+0x22c>)
 8106b7c:	9300      	str	r3, [sp, #0]
 8106b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106b82:	68f8      	ldr	r0, [r7, #12]
 8106b84:	f001 f884 	bl	8107c90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8106b88:	697b      	ldr	r3, [r7, #20]
 8106b8a:	9300      	str	r3, [sp, #0]
 8106b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b8e:	2200      	movs	r2, #0
 8106b90:	2104      	movs	r1, #4
 8106b92:	68f8      	ldr	r0, [r7, #12]
 8106b94:	f000 ff59 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 8106b98:	4603      	mov	r3, r0
 8106b9a:	2b00      	cmp	r3, #0
 8106b9c:	d001      	beq.n	8106ba2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8106b9e:	2301      	movs	r3, #1
 8106ba0:	e07c      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106ba2:	68fb      	ldr	r3, [r7, #12]
 8106ba4:	681b      	ldr	r3, [r3, #0]
 8106ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106ba8:	68fb      	ldr	r3, [r7, #12]
 8106baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bac:	b2d2      	uxtb	r2, r2
 8106bae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106bb0:	68fb      	ldr	r3, [r7, #12]
 8106bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bb4:	1c5a      	adds	r2, r3, #1
 8106bb6:	68fb      	ldr	r3, [r7, #12]
 8106bb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8106bba:	68fb      	ldr	r3, [r7, #12]
 8106bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106bbe:	3b01      	subs	r3, #1
 8106bc0:	b29a      	uxth	r2, r3
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8106bc6:	68fb      	ldr	r3, [r7, #12]
 8106bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106bca:	b29b      	uxth	r3, r3
 8106bcc:	3b01      	subs	r3, #1
 8106bce:	b29a      	uxth	r2, r3
 8106bd0:	68fb      	ldr	r3, [r7, #12]
 8106bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106bd4:	68fb      	ldr	r3, [r7, #12]
 8106bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106bd8:	b29b      	uxth	r3, r3
 8106bda:	2b00      	cmp	r3, #0
 8106bdc:	d034      	beq.n	8106c48 <HAL_I2C_Mem_Read+0x1d0>
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106be2:	2b00      	cmp	r3, #0
 8106be4:	d130      	bne.n	8106c48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106be6:	697b      	ldr	r3, [r7, #20]
 8106be8:	9300      	str	r3, [sp, #0]
 8106bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106bec:	2200      	movs	r2, #0
 8106bee:	2180      	movs	r1, #128	; 0x80
 8106bf0:	68f8      	ldr	r0, [r7, #12]
 8106bf2:	f000 ff2a 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 8106bf6:	4603      	mov	r3, r0
 8106bf8:	2b00      	cmp	r3, #0
 8106bfa:	d001      	beq.n	8106c00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8106bfc:	2301      	movs	r3, #1
 8106bfe:	e04d      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106c00:	68fb      	ldr	r3, [r7, #12]
 8106c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c04:	b29b      	uxth	r3, r3
 8106c06:	2bff      	cmp	r3, #255	; 0xff
 8106c08:	d90e      	bls.n	8106c28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106c0a:	68fb      	ldr	r3, [r7, #12]
 8106c0c:	22ff      	movs	r2, #255	; 0xff
 8106c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106c10:	68fb      	ldr	r3, [r7, #12]
 8106c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c14:	b2da      	uxtb	r2, r3
 8106c16:	8979      	ldrh	r1, [r7, #10]
 8106c18:	2300      	movs	r3, #0
 8106c1a:	9300      	str	r3, [sp, #0]
 8106c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106c20:	68f8      	ldr	r0, [r7, #12]
 8106c22:	f001 f835 	bl	8107c90 <I2C_TransferConfig>
 8106c26:	e00f      	b.n	8106c48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106c28:	68fb      	ldr	r3, [r7, #12]
 8106c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c2c:	b29a      	uxth	r2, r3
 8106c2e:	68fb      	ldr	r3, [r7, #12]
 8106c30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106c32:	68fb      	ldr	r3, [r7, #12]
 8106c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c36:	b2da      	uxtb	r2, r3
 8106c38:	8979      	ldrh	r1, [r7, #10]
 8106c3a:	2300      	movs	r3, #0
 8106c3c:	9300      	str	r3, [sp, #0]
 8106c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106c42:	68f8      	ldr	r0, [r7, #12]
 8106c44:	f001 f824 	bl	8107c90 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8106c48:	68fb      	ldr	r3, [r7, #12]
 8106c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c4c:	b29b      	uxth	r3, r3
 8106c4e:	2b00      	cmp	r3, #0
 8106c50:	d19a      	bne.n	8106b88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106c52:	697a      	ldr	r2, [r7, #20]
 8106c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106c56:	68f8      	ldr	r0, [r7, #12]
 8106c58:	f000 ff77 	bl	8107b4a <I2C_WaitOnSTOPFlagUntilTimeout>
 8106c5c:	4603      	mov	r3, r0
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d001      	beq.n	8106c66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8106c62:	2301      	movs	r3, #1
 8106c64:	e01a      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106c66:	68fb      	ldr	r3, [r7, #12]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	2220      	movs	r2, #32
 8106c6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106c6e:	68fb      	ldr	r3, [r7, #12]
 8106c70:	681b      	ldr	r3, [r3, #0]
 8106c72:	6859      	ldr	r1, [r3, #4]
 8106c74:	68fb      	ldr	r3, [r7, #12]
 8106c76:	681a      	ldr	r2, [r3, #0]
 8106c78:	4b0b      	ldr	r3, [pc, #44]	; (8106ca8 <HAL_I2C_Mem_Read+0x230>)
 8106c7a:	400b      	ands	r3, r1
 8106c7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106c7e:	68fb      	ldr	r3, [r7, #12]
 8106c80:	2220      	movs	r2, #32
 8106c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106c86:	68fb      	ldr	r3, [r7, #12]
 8106c88:	2200      	movs	r2, #0
 8106c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106c8e:	68fb      	ldr	r3, [r7, #12]
 8106c90:	2200      	movs	r2, #0
 8106c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106c96:	2300      	movs	r3, #0
 8106c98:	e000      	b.n	8106c9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8106c9a:	2302      	movs	r3, #2
  }
}
 8106c9c:	4618      	mov	r0, r3
 8106c9e:	3718      	adds	r7, #24
 8106ca0:	46bd      	mov	sp, r7
 8106ca2:	bd80      	pop	{r7, pc}
 8106ca4:	80002400 	.word	0x80002400
 8106ca8:	fe00e800 	.word	0xfe00e800

08106cac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106cac:	b580      	push	{r7, lr}
 8106cae:	b084      	sub	sp, #16
 8106cb0:	af00      	add	r7, sp, #0
 8106cb2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	681b      	ldr	r3, [r3, #0]
 8106cb8:	699b      	ldr	r3, [r3, #24]
 8106cba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	681b      	ldr	r3, [r3, #0]
 8106cc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106cc8:	2b00      	cmp	r3, #0
 8106cca:	d005      	beq.n	8106cd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106cd0:	68ba      	ldr	r2, [r7, #8]
 8106cd2:	68f9      	ldr	r1, [r7, #12]
 8106cd4:	6878      	ldr	r0, [r7, #4]
 8106cd6:	4798      	blx	r3
  }
}
 8106cd8:	bf00      	nop
 8106cda:	3710      	adds	r7, #16
 8106cdc:	46bd      	mov	sp, r7
 8106cde:	bd80      	pop	{r7, pc}

08106ce0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106ce0:	b580      	push	{r7, lr}
 8106ce2:	b086      	sub	sp, #24
 8106ce4:	af00      	add	r7, sp, #0
 8106ce6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	699b      	ldr	r3, [r3, #24]
 8106cee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	681b      	ldr	r3, [r3, #0]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106cf8:	697b      	ldr	r3, [r7, #20]
 8106cfa:	0a1b      	lsrs	r3, r3, #8
 8106cfc:	f003 0301 	and.w	r3, r3, #1
 8106d00:	2b00      	cmp	r3, #0
 8106d02:	d010      	beq.n	8106d26 <HAL_I2C_ER_IRQHandler+0x46>
 8106d04:	693b      	ldr	r3, [r7, #16]
 8106d06:	09db      	lsrs	r3, r3, #7
 8106d08:	f003 0301 	and.w	r3, r3, #1
 8106d0c:	2b00      	cmp	r3, #0
 8106d0e:	d00a      	beq.n	8106d26 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d14:	f043 0201 	orr.w	r2, r3, #1
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	681b      	ldr	r3, [r3, #0]
 8106d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8106d24:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106d26:	697b      	ldr	r3, [r7, #20]
 8106d28:	0a9b      	lsrs	r3, r3, #10
 8106d2a:	f003 0301 	and.w	r3, r3, #1
 8106d2e:	2b00      	cmp	r3, #0
 8106d30:	d010      	beq.n	8106d54 <HAL_I2C_ER_IRQHandler+0x74>
 8106d32:	693b      	ldr	r3, [r7, #16]
 8106d34:	09db      	lsrs	r3, r3, #7
 8106d36:	f003 0301 	and.w	r3, r3, #1
 8106d3a:	2b00      	cmp	r3, #0
 8106d3c:	d00a      	beq.n	8106d54 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d42:	f043 0208 	orr.w	r2, r3, #8
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8106d4a:	687b      	ldr	r3, [r7, #4]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8106d52:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106d54:	697b      	ldr	r3, [r7, #20]
 8106d56:	0a5b      	lsrs	r3, r3, #9
 8106d58:	f003 0301 	and.w	r3, r3, #1
 8106d5c:	2b00      	cmp	r3, #0
 8106d5e:	d010      	beq.n	8106d82 <HAL_I2C_ER_IRQHandler+0xa2>
 8106d60:	693b      	ldr	r3, [r7, #16]
 8106d62:	09db      	lsrs	r3, r3, #7
 8106d64:	f003 0301 	and.w	r3, r3, #1
 8106d68:	2b00      	cmp	r3, #0
 8106d6a:	d00a      	beq.n	8106d82 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8106d6c:	687b      	ldr	r3, [r7, #4]
 8106d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d70:	f043 0202 	orr.w	r2, r3, #2
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	681b      	ldr	r3, [r3, #0]
 8106d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106d80:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8106d82:	687b      	ldr	r3, [r7, #4]
 8106d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d86:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8106d88:	68fb      	ldr	r3, [r7, #12]
 8106d8a:	f003 030b 	and.w	r3, r3, #11
 8106d8e:	2b00      	cmp	r3, #0
 8106d90:	d003      	beq.n	8106d9a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8106d92:	68f9      	ldr	r1, [r7, #12]
 8106d94:	6878      	ldr	r0, [r7, #4]
 8106d96:	f000 fd1f 	bl	81077d8 <I2C_ITError>
  }
}
 8106d9a:	bf00      	nop
 8106d9c:	3718      	adds	r7, #24
 8106d9e:	46bd      	mov	sp, r7
 8106da0:	bd80      	pop	{r7, pc}

08106da2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106da2:	b480      	push	{r7}
 8106da4:	b083      	sub	sp, #12
 8106da6:	af00      	add	r7, sp, #0
 8106da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8106daa:	bf00      	nop
 8106dac:	370c      	adds	r7, #12
 8106dae:	46bd      	mov	sp, r7
 8106db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106db4:	4770      	bx	lr

08106db6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106db6:	b480      	push	{r7}
 8106db8:	b083      	sub	sp, #12
 8106dba:	af00      	add	r7, sp, #0
 8106dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8106dbe:	bf00      	nop
 8106dc0:	370c      	adds	r7, #12
 8106dc2:	46bd      	mov	sp, r7
 8106dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dc8:	4770      	bx	lr

08106dca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8106dca:	b480      	push	{r7}
 8106dcc:	b083      	sub	sp, #12
 8106dce:	af00      	add	r7, sp, #0
 8106dd0:	6078      	str	r0, [r7, #4]
 8106dd2:	460b      	mov	r3, r1
 8106dd4:	70fb      	strb	r3, [r7, #3]
 8106dd6:	4613      	mov	r3, r2
 8106dd8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8106dda:	bf00      	nop
 8106ddc:	370c      	adds	r7, #12
 8106dde:	46bd      	mov	sp, r7
 8106de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106de4:	4770      	bx	lr

08106de6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106de6:	b480      	push	{r7}
 8106de8:	b083      	sub	sp, #12
 8106dea:	af00      	add	r7, sp, #0
 8106dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8106dee:	bf00      	nop
 8106df0:	370c      	adds	r7, #12
 8106df2:	46bd      	mov	sp, r7
 8106df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106df8:	4770      	bx	lr

08106dfa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8106dfa:	b480      	push	{r7}
 8106dfc:	b083      	sub	sp, #12
 8106dfe:	af00      	add	r7, sp, #0
 8106e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8106e02:	bf00      	nop
 8106e04:	370c      	adds	r7, #12
 8106e06:	46bd      	mov	sp, r7
 8106e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e0c:	4770      	bx	lr

08106e0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8106e0e:	b480      	push	{r7}
 8106e10:	b083      	sub	sp, #12
 8106e12:	af00      	add	r7, sp, #0
 8106e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8106e16:	bf00      	nop
 8106e18:	370c      	adds	r7, #12
 8106e1a:	46bd      	mov	sp, r7
 8106e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e20:	4770      	bx	lr

08106e22 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8106e22:	b580      	push	{r7, lr}
 8106e24:	b086      	sub	sp, #24
 8106e26:	af00      	add	r7, sp, #0
 8106e28:	60f8      	str	r0, [r7, #12]
 8106e2a:	60b9      	str	r1, [r7, #8]
 8106e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8106e2e:	68fb      	ldr	r3, [r7, #12]
 8106e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e32:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8106e34:	68bb      	ldr	r3, [r7, #8]
 8106e36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8106e38:	68fb      	ldr	r3, [r7, #12]
 8106e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106e3e:	2b01      	cmp	r3, #1
 8106e40:	d101      	bne.n	8106e46 <I2C_Slave_ISR_IT+0x24>
 8106e42:	2302      	movs	r3, #2
 8106e44:	e0ec      	b.n	8107020 <I2C_Slave_ISR_IT+0x1fe>
 8106e46:	68fb      	ldr	r3, [r7, #12]
 8106e48:	2201      	movs	r2, #1
 8106e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8106e4e:	693b      	ldr	r3, [r7, #16]
 8106e50:	095b      	lsrs	r3, r3, #5
 8106e52:	f003 0301 	and.w	r3, r3, #1
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d009      	beq.n	8106e6e <I2C_Slave_ISR_IT+0x4c>
 8106e5a:	687b      	ldr	r3, [r7, #4]
 8106e5c:	095b      	lsrs	r3, r3, #5
 8106e5e:	f003 0301 	and.w	r3, r3, #1
 8106e62:	2b00      	cmp	r3, #0
 8106e64:	d003      	beq.n	8106e6e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8106e66:	6939      	ldr	r1, [r7, #16]
 8106e68:	68f8      	ldr	r0, [r7, #12]
 8106e6a:	f000 fa67 	bl	810733c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8106e6e:	693b      	ldr	r3, [r7, #16]
 8106e70:	091b      	lsrs	r3, r3, #4
 8106e72:	f003 0301 	and.w	r3, r3, #1
 8106e76:	2b00      	cmp	r3, #0
 8106e78:	d04d      	beq.n	8106f16 <I2C_Slave_ISR_IT+0xf4>
 8106e7a:	687b      	ldr	r3, [r7, #4]
 8106e7c:	091b      	lsrs	r3, r3, #4
 8106e7e:	f003 0301 	and.w	r3, r3, #1
 8106e82:	2b00      	cmp	r3, #0
 8106e84:	d047      	beq.n	8106f16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8106e86:	68fb      	ldr	r3, [r7, #12]
 8106e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e8a:	b29b      	uxth	r3, r3
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d128      	bne.n	8106ee2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8106e90:	68fb      	ldr	r3, [r7, #12]
 8106e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106e96:	b2db      	uxtb	r3, r3
 8106e98:	2b28      	cmp	r3, #40	; 0x28
 8106e9a:	d108      	bne.n	8106eae <I2C_Slave_ISR_IT+0x8c>
 8106e9c:	697b      	ldr	r3, [r7, #20]
 8106e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106ea2:	d104      	bne.n	8106eae <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8106ea4:	6939      	ldr	r1, [r7, #16]
 8106ea6:	68f8      	ldr	r0, [r7, #12]
 8106ea8:	f000 fc40 	bl	810772c <I2C_ITListenCplt>
 8106eac:	e032      	b.n	8106f14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8106eae:	68fb      	ldr	r3, [r7, #12]
 8106eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106eb4:	b2db      	uxtb	r3, r3
 8106eb6:	2b29      	cmp	r3, #41	; 0x29
 8106eb8:	d10e      	bne.n	8106ed8 <I2C_Slave_ISR_IT+0xb6>
 8106eba:	697b      	ldr	r3, [r7, #20]
 8106ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8106ec0:	d00a      	beq.n	8106ed8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106ec2:	68fb      	ldr	r3, [r7, #12]
 8106ec4:	681b      	ldr	r3, [r3, #0]
 8106ec6:	2210      	movs	r2, #16
 8106ec8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8106eca:	68f8      	ldr	r0, [r7, #12]
 8106ecc:	f000 fd7b 	bl	81079c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8106ed0:	68f8      	ldr	r0, [r7, #12]
 8106ed2:	f000 f9d5 	bl	8107280 <I2C_ITSlaveSeqCplt>
 8106ed6:	e01d      	b.n	8106f14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106ed8:	68fb      	ldr	r3, [r7, #12]
 8106eda:	681b      	ldr	r3, [r3, #0]
 8106edc:	2210      	movs	r2, #16
 8106ede:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8106ee0:	e096      	b.n	8107010 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106ee2:	68fb      	ldr	r3, [r7, #12]
 8106ee4:	681b      	ldr	r3, [r3, #0]
 8106ee6:	2210      	movs	r2, #16
 8106ee8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8106eea:	68fb      	ldr	r3, [r7, #12]
 8106eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106eee:	f043 0204 	orr.w	r2, r3, #4
 8106ef2:	68fb      	ldr	r3, [r7, #12]
 8106ef4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8106ef6:	697b      	ldr	r3, [r7, #20]
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	d004      	beq.n	8106f06 <I2C_Slave_ISR_IT+0xe4>
 8106efc:	697b      	ldr	r3, [r7, #20]
 8106efe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106f02:	f040 8085 	bne.w	8107010 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8106f06:	68fb      	ldr	r3, [r7, #12]
 8106f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f0a:	4619      	mov	r1, r3
 8106f0c:	68f8      	ldr	r0, [r7, #12]
 8106f0e:	f000 fc63 	bl	81077d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8106f12:	e07d      	b.n	8107010 <I2C_Slave_ISR_IT+0x1ee>
 8106f14:	e07c      	b.n	8107010 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8106f16:	693b      	ldr	r3, [r7, #16]
 8106f18:	089b      	lsrs	r3, r3, #2
 8106f1a:	f003 0301 	and.w	r3, r3, #1
 8106f1e:	2b00      	cmp	r3, #0
 8106f20:	d030      	beq.n	8106f84 <I2C_Slave_ISR_IT+0x162>
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	089b      	lsrs	r3, r3, #2
 8106f26:	f003 0301 	and.w	r3, r3, #1
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d02a      	beq.n	8106f84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8106f2e:	68fb      	ldr	r3, [r7, #12]
 8106f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106f32:	b29b      	uxth	r3, r3
 8106f34:	2b00      	cmp	r3, #0
 8106f36:	d018      	beq.n	8106f6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106f38:	68fb      	ldr	r3, [r7, #12]
 8106f3a:	681b      	ldr	r3, [r3, #0]
 8106f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106f3e:	68fb      	ldr	r3, [r7, #12]
 8106f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106f42:	b2d2      	uxtb	r2, r2
 8106f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106f46:	68fb      	ldr	r3, [r7, #12]
 8106f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106f4a:	1c5a      	adds	r2, r3, #1
 8106f4c:	68fb      	ldr	r3, [r7, #12]
 8106f4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8106f50:	68fb      	ldr	r3, [r7, #12]
 8106f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106f54:	3b01      	subs	r3, #1
 8106f56:	b29a      	uxth	r2, r3
 8106f58:	68fb      	ldr	r3, [r7, #12]
 8106f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8106f5c:	68fb      	ldr	r3, [r7, #12]
 8106f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106f60:	b29b      	uxth	r3, r3
 8106f62:	3b01      	subs	r3, #1
 8106f64:	b29a      	uxth	r2, r3
 8106f66:	68fb      	ldr	r3, [r7, #12]
 8106f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8106f6a:	68fb      	ldr	r3, [r7, #12]
 8106f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106f6e:	b29b      	uxth	r3, r3
 8106f70:	2b00      	cmp	r3, #0
 8106f72:	d14f      	bne.n	8107014 <I2C_Slave_ISR_IT+0x1f2>
 8106f74:	697b      	ldr	r3, [r7, #20]
 8106f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8106f7a:	d04b      	beq.n	8107014 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8106f7c:	68f8      	ldr	r0, [r7, #12]
 8106f7e:	f000 f97f 	bl	8107280 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8106f82:	e047      	b.n	8107014 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8106f84:	693b      	ldr	r3, [r7, #16]
 8106f86:	08db      	lsrs	r3, r3, #3
 8106f88:	f003 0301 	and.w	r3, r3, #1
 8106f8c:	2b00      	cmp	r3, #0
 8106f8e:	d00a      	beq.n	8106fa6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	08db      	lsrs	r3, r3, #3
 8106f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8106f98:	2b00      	cmp	r3, #0
 8106f9a:	d004      	beq.n	8106fa6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8106f9c:	6939      	ldr	r1, [r7, #16]
 8106f9e:	68f8      	ldr	r0, [r7, #12]
 8106fa0:	f000 f8ea 	bl	8107178 <I2C_ITAddrCplt>
 8106fa4:	e037      	b.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8106fa6:	693b      	ldr	r3, [r7, #16]
 8106fa8:	085b      	lsrs	r3, r3, #1
 8106faa:	f003 0301 	and.w	r3, r3, #1
 8106fae:	2b00      	cmp	r3, #0
 8106fb0:	d031      	beq.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	085b      	lsrs	r3, r3, #1
 8106fb6:	f003 0301 	and.w	r3, r3, #1
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d02b      	beq.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8106fbe:	68fb      	ldr	r3, [r7, #12]
 8106fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106fc2:	b29b      	uxth	r3, r3
 8106fc4:	2b00      	cmp	r3, #0
 8106fc6:	d018      	beq.n	8106ffa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8106fc8:	68fb      	ldr	r3, [r7, #12]
 8106fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106fcc:	781a      	ldrb	r2, [r3, #0]
 8106fce:	68fb      	ldr	r3, [r7, #12]
 8106fd0:	681b      	ldr	r3, [r3, #0]
 8106fd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106fd4:	68fb      	ldr	r3, [r7, #12]
 8106fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106fd8:	1c5a      	adds	r2, r3, #1
 8106fda:	68fb      	ldr	r3, [r7, #12]
 8106fdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8106fde:	68fb      	ldr	r3, [r7, #12]
 8106fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106fe2:	b29b      	uxth	r3, r3
 8106fe4:	3b01      	subs	r3, #1
 8106fe6:	b29a      	uxth	r2, r3
 8106fe8:	68fb      	ldr	r3, [r7, #12]
 8106fea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8106fec:	68fb      	ldr	r3, [r7, #12]
 8106fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ff0:	3b01      	subs	r3, #1
 8106ff2:	b29a      	uxth	r2, r3
 8106ff4:	68fb      	ldr	r3, [r7, #12]
 8106ff6:	851a      	strh	r2, [r3, #40]	; 0x28
 8106ff8:	e00d      	b.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8106ffa:	697b      	ldr	r3, [r7, #20]
 8106ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107000:	d002      	beq.n	8107008 <I2C_Slave_ISR_IT+0x1e6>
 8107002:	697b      	ldr	r3, [r7, #20]
 8107004:	2b00      	cmp	r3, #0
 8107006:	d106      	bne.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107008:	68f8      	ldr	r0, [r7, #12]
 810700a:	f000 f939 	bl	8107280 <I2C_ITSlaveSeqCplt>
 810700e:	e002      	b.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107010:	bf00      	nop
 8107012:	e000      	b.n	8107016 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8107014:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107016:	68fb      	ldr	r3, [r7, #12]
 8107018:	2200      	movs	r2, #0
 810701a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810701e:	2300      	movs	r3, #0
}
 8107020:	4618      	mov	r0, r3
 8107022:	3718      	adds	r7, #24
 8107024:	46bd      	mov	sp, r7
 8107026:	bd80      	pop	{r7, pc}

08107028 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107028:	b580      	push	{r7, lr}
 810702a:	b086      	sub	sp, #24
 810702c:	af02      	add	r7, sp, #8
 810702e:	60f8      	str	r0, [r7, #12]
 8107030:	4608      	mov	r0, r1
 8107032:	4611      	mov	r1, r2
 8107034:	461a      	mov	r2, r3
 8107036:	4603      	mov	r3, r0
 8107038:	817b      	strh	r3, [r7, #10]
 810703a:	460b      	mov	r3, r1
 810703c:	813b      	strh	r3, [r7, #8]
 810703e:	4613      	mov	r3, r2
 8107040:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8107042:	88fb      	ldrh	r3, [r7, #6]
 8107044:	b2da      	uxtb	r2, r3
 8107046:	8979      	ldrh	r1, [r7, #10]
 8107048:	4b20      	ldr	r3, [pc, #128]	; (81070cc <I2C_RequestMemoryWrite+0xa4>)
 810704a:	9300      	str	r3, [sp, #0]
 810704c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107050:	68f8      	ldr	r0, [r7, #12]
 8107052:	f000 fe1d 	bl	8107c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107056:	69fa      	ldr	r2, [r7, #28]
 8107058:	69b9      	ldr	r1, [r7, #24]
 810705a:	68f8      	ldr	r0, [r7, #12]
 810705c:	f000 fd35 	bl	8107aca <I2C_WaitOnTXISFlagUntilTimeout>
 8107060:	4603      	mov	r3, r0
 8107062:	2b00      	cmp	r3, #0
 8107064:	d001      	beq.n	810706a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8107066:	2301      	movs	r3, #1
 8107068:	e02c      	b.n	81070c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810706a:	88fb      	ldrh	r3, [r7, #6]
 810706c:	2b01      	cmp	r3, #1
 810706e:	d105      	bne.n	810707c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107070:	893b      	ldrh	r3, [r7, #8]
 8107072:	b2da      	uxtb	r2, r3
 8107074:	68fb      	ldr	r3, [r7, #12]
 8107076:	681b      	ldr	r3, [r3, #0]
 8107078:	629a      	str	r2, [r3, #40]	; 0x28
 810707a:	e015      	b.n	81070a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810707c:	893b      	ldrh	r3, [r7, #8]
 810707e:	0a1b      	lsrs	r3, r3, #8
 8107080:	b29b      	uxth	r3, r3
 8107082:	b2da      	uxtb	r2, r3
 8107084:	68fb      	ldr	r3, [r7, #12]
 8107086:	681b      	ldr	r3, [r3, #0]
 8107088:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810708a:	69fa      	ldr	r2, [r7, #28]
 810708c:	69b9      	ldr	r1, [r7, #24]
 810708e:	68f8      	ldr	r0, [r7, #12]
 8107090:	f000 fd1b 	bl	8107aca <I2C_WaitOnTXISFlagUntilTimeout>
 8107094:	4603      	mov	r3, r0
 8107096:	2b00      	cmp	r3, #0
 8107098:	d001      	beq.n	810709e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810709a:	2301      	movs	r3, #1
 810709c:	e012      	b.n	81070c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810709e:	893b      	ldrh	r3, [r7, #8]
 81070a0:	b2da      	uxtb	r2, r3
 81070a2:	68fb      	ldr	r3, [r7, #12]
 81070a4:	681b      	ldr	r3, [r3, #0]
 81070a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81070a8:	69fb      	ldr	r3, [r7, #28]
 81070aa:	9300      	str	r3, [sp, #0]
 81070ac:	69bb      	ldr	r3, [r7, #24]
 81070ae:	2200      	movs	r2, #0
 81070b0:	2180      	movs	r1, #128	; 0x80
 81070b2:	68f8      	ldr	r0, [r7, #12]
 81070b4:	f000 fcc9 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 81070b8:	4603      	mov	r3, r0
 81070ba:	2b00      	cmp	r3, #0
 81070bc:	d001      	beq.n	81070c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81070be:	2301      	movs	r3, #1
 81070c0:	e000      	b.n	81070c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81070c2:	2300      	movs	r3, #0
}
 81070c4:	4618      	mov	r0, r3
 81070c6:	3710      	adds	r7, #16
 81070c8:	46bd      	mov	sp, r7
 81070ca:	bd80      	pop	{r7, pc}
 81070cc:	80002000 	.word	0x80002000

081070d0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81070d0:	b580      	push	{r7, lr}
 81070d2:	b086      	sub	sp, #24
 81070d4:	af02      	add	r7, sp, #8
 81070d6:	60f8      	str	r0, [r7, #12]
 81070d8:	4608      	mov	r0, r1
 81070da:	4611      	mov	r1, r2
 81070dc:	461a      	mov	r2, r3
 81070de:	4603      	mov	r3, r0
 81070e0:	817b      	strh	r3, [r7, #10]
 81070e2:	460b      	mov	r3, r1
 81070e4:	813b      	strh	r3, [r7, #8]
 81070e6:	4613      	mov	r3, r2
 81070e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81070ea:	88fb      	ldrh	r3, [r7, #6]
 81070ec:	b2da      	uxtb	r2, r3
 81070ee:	8979      	ldrh	r1, [r7, #10]
 81070f0:	4b20      	ldr	r3, [pc, #128]	; (8107174 <I2C_RequestMemoryRead+0xa4>)
 81070f2:	9300      	str	r3, [sp, #0]
 81070f4:	2300      	movs	r3, #0
 81070f6:	68f8      	ldr	r0, [r7, #12]
 81070f8:	f000 fdca 	bl	8107c90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81070fc:	69fa      	ldr	r2, [r7, #28]
 81070fe:	69b9      	ldr	r1, [r7, #24]
 8107100:	68f8      	ldr	r0, [r7, #12]
 8107102:	f000 fce2 	bl	8107aca <I2C_WaitOnTXISFlagUntilTimeout>
 8107106:	4603      	mov	r3, r0
 8107108:	2b00      	cmp	r3, #0
 810710a:	d001      	beq.n	8107110 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810710c:	2301      	movs	r3, #1
 810710e:	e02c      	b.n	810716a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107110:	88fb      	ldrh	r3, [r7, #6]
 8107112:	2b01      	cmp	r3, #1
 8107114:	d105      	bne.n	8107122 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107116:	893b      	ldrh	r3, [r7, #8]
 8107118:	b2da      	uxtb	r2, r3
 810711a:	68fb      	ldr	r3, [r7, #12]
 810711c:	681b      	ldr	r3, [r3, #0]
 810711e:	629a      	str	r2, [r3, #40]	; 0x28
 8107120:	e015      	b.n	810714e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107122:	893b      	ldrh	r3, [r7, #8]
 8107124:	0a1b      	lsrs	r3, r3, #8
 8107126:	b29b      	uxth	r3, r3
 8107128:	b2da      	uxtb	r2, r3
 810712a:	68fb      	ldr	r3, [r7, #12]
 810712c:	681b      	ldr	r3, [r3, #0]
 810712e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107130:	69fa      	ldr	r2, [r7, #28]
 8107132:	69b9      	ldr	r1, [r7, #24]
 8107134:	68f8      	ldr	r0, [r7, #12]
 8107136:	f000 fcc8 	bl	8107aca <I2C_WaitOnTXISFlagUntilTimeout>
 810713a:	4603      	mov	r3, r0
 810713c:	2b00      	cmp	r3, #0
 810713e:	d001      	beq.n	8107144 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8107140:	2301      	movs	r3, #1
 8107142:	e012      	b.n	810716a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107144:	893b      	ldrh	r3, [r7, #8]
 8107146:	b2da      	uxtb	r2, r3
 8107148:	68fb      	ldr	r3, [r7, #12]
 810714a:	681b      	ldr	r3, [r3, #0]
 810714c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810714e:	69fb      	ldr	r3, [r7, #28]
 8107150:	9300      	str	r3, [sp, #0]
 8107152:	69bb      	ldr	r3, [r7, #24]
 8107154:	2200      	movs	r2, #0
 8107156:	2140      	movs	r1, #64	; 0x40
 8107158:	68f8      	ldr	r0, [r7, #12]
 810715a:	f000 fc76 	bl	8107a4a <I2C_WaitOnFlagUntilTimeout>
 810715e:	4603      	mov	r3, r0
 8107160:	2b00      	cmp	r3, #0
 8107162:	d001      	beq.n	8107168 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8107164:	2301      	movs	r3, #1
 8107166:	e000      	b.n	810716a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107168:	2300      	movs	r3, #0
}
 810716a:	4618      	mov	r0, r3
 810716c:	3710      	adds	r7, #16
 810716e:	46bd      	mov	sp, r7
 8107170:	bd80      	pop	{r7, pc}
 8107172:	bf00      	nop
 8107174:	80002000 	.word	0x80002000

08107178 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107178:	b580      	push	{r7, lr}
 810717a:	b084      	sub	sp, #16
 810717c:	af00      	add	r7, sp, #0
 810717e:	6078      	str	r0, [r7, #4]
 8107180:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107182:	687b      	ldr	r3, [r7, #4]
 8107184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107188:	b2db      	uxtb	r3, r3
 810718a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810718e:	2b28      	cmp	r3, #40	; 0x28
 8107190:	d16a      	bne.n	8107268 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107192:	687b      	ldr	r3, [r7, #4]
 8107194:	681b      	ldr	r3, [r3, #0]
 8107196:	699b      	ldr	r3, [r3, #24]
 8107198:	0c1b      	lsrs	r3, r3, #16
 810719a:	b2db      	uxtb	r3, r3
 810719c:	f003 0301 	and.w	r3, r3, #1
 81071a0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	681b      	ldr	r3, [r3, #0]
 81071a6:	699b      	ldr	r3, [r3, #24]
 81071a8:	0c1b      	lsrs	r3, r3, #16
 81071aa:	b29b      	uxth	r3, r3
 81071ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81071b0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	689b      	ldr	r3, [r3, #8]
 81071b8:	b29b      	uxth	r3, r3
 81071ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81071be:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	681b      	ldr	r3, [r3, #0]
 81071c4:	68db      	ldr	r3, [r3, #12]
 81071c6:	b29b      	uxth	r3, r3
 81071c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81071cc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81071ce:	687b      	ldr	r3, [r7, #4]
 81071d0:	68db      	ldr	r3, [r3, #12]
 81071d2:	2b02      	cmp	r3, #2
 81071d4:	d138      	bne.n	8107248 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81071d6:	897b      	ldrh	r3, [r7, #10]
 81071d8:	09db      	lsrs	r3, r3, #7
 81071da:	b29a      	uxth	r2, r3
 81071dc:	89bb      	ldrh	r3, [r7, #12]
 81071de:	4053      	eors	r3, r2
 81071e0:	b29b      	uxth	r3, r3
 81071e2:	f003 0306 	and.w	r3, r3, #6
 81071e6:	2b00      	cmp	r3, #0
 81071e8:	d11c      	bne.n	8107224 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81071ea:	897b      	ldrh	r3, [r7, #10]
 81071ec:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81071ee:	687b      	ldr	r3, [r7, #4]
 81071f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81071f2:	1c5a      	adds	r2, r3, #1
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81071fc:	2b02      	cmp	r3, #2
 81071fe:	d13b      	bne.n	8107278 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107200:	687b      	ldr	r3, [r7, #4]
 8107202:	2200      	movs	r2, #0
 8107204:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	681b      	ldr	r3, [r3, #0]
 810720a:	2208      	movs	r2, #8
 810720c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	2200      	movs	r2, #0
 8107212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107216:	89ba      	ldrh	r2, [r7, #12]
 8107218:	7bfb      	ldrb	r3, [r7, #15]
 810721a:	4619      	mov	r1, r3
 810721c:	6878      	ldr	r0, [r7, #4]
 810721e:	f7ff fdd4 	bl	8106dca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107222:	e029      	b.n	8107278 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107224:	893b      	ldrh	r3, [r7, #8]
 8107226:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810722c:	6878      	ldr	r0, [r7, #4]
 810722e:	f000 fd5d 	bl	8107cec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107232:	687b      	ldr	r3, [r7, #4]
 8107234:	2200      	movs	r2, #0
 8107236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810723a:	89ba      	ldrh	r2, [r7, #12]
 810723c:	7bfb      	ldrb	r3, [r7, #15]
 810723e:	4619      	mov	r1, r3
 8107240:	6878      	ldr	r0, [r7, #4]
 8107242:	f7ff fdc2 	bl	8106dca <HAL_I2C_AddrCallback>
}
 8107246:	e017      	b.n	8107278 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810724c:	6878      	ldr	r0, [r7, #4]
 810724e:	f000 fd4d 	bl	8107cec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	2200      	movs	r2, #0
 8107256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810725a:	89ba      	ldrh	r2, [r7, #12]
 810725c:	7bfb      	ldrb	r3, [r7, #15]
 810725e:	4619      	mov	r1, r3
 8107260:	6878      	ldr	r0, [r7, #4]
 8107262:	f7ff fdb2 	bl	8106dca <HAL_I2C_AddrCallback>
}
 8107266:	e007      	b.n	8107278 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107268:	687b      	ldr	r3, [r7, #4]
 810726a:	681b      	ldr	r3, [r3, #0]
 810726c:	2208      	movs	r2, #8
 810726e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	2200      	movs	r2, #0
 8107274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107278:	bf00      	nop
 810727a:	3710      	adds	r7, #16
 810727c:	46bd      	mov	sp, r7
 810727e:	bd80      	pop	{r7, pc}

08107280 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107280:	b580      	push	{r7, lr}
 8107282:	b084      	sub	sp, #16
 8107284:	af00      	add	r7, sp, #0
 8107286:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	681b      	ldr	r3, [r3, #0]
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107290:	687b      	ldr	r3, [r7, #4]
 8107292:	2200      	movs	r2, #0
 8107294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	0b9b      	lsrs	r3, r3, #14
 810729c:	f003 0301 	and.w	r3, r3, #1
 81072a0:	2b00      	cmp	r3, #0
 81072a2:	d008      	beq.n	81072b6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81072a4:	687b      	ldr	r3, [r7, #4]
 81072a6:	681b      	ldr	r3, [r3, #0]
 81072a8:	681a      	ldr	r2, [r3, #0]
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	681b      	ldr	r3, [r3, #0]
 81072ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81072b2:	601a      	str	r2, [r3, #0]
 81072b4:	e00d      	b.n	81072d2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81072b6:	68fb      	ldr	r3, [r7, #12]
 81072b8:	0bdb      	lsrs	r3, r3, #15
 81072ba:	f003 0301 	and.w	r3, r3, #1
 81072be:	2b00      	cmp	r3, #0
 81072c0:	d007      	beq.n	81072d2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81072c2:	687b      	ldr	r3, [r7, #4]
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	681a      	ldr	r2, [r3, #0]
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81072d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81072d8:	b2db      	uxtb	r3, r3
 81072da:	2b29      	cmp	r3, #41	; 0x29
 81072dc:	d112      	bne.n	8107304 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	2228      	movs	r2, #40	; 0x28
 81072e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	2221      	movs	r2, #33	; 0x21
 81072ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81072ec:	2101      	movs	r1, #1
 81072ee:	6878      	ldr	r0, [r7, #4]
 81072f0:	f000 fcfc 	bl	8107cec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81072f4:	687b      	ldr	r3, [r7, #4]
 81072f6:	2200      	movs	r2, #0
 81072f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81072fc:	6878      	ldr	r0, [r7, #4]
 81072fe:	f7ff fd50 	bl	8106da2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107302:	e017      	b.n	8107334 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810730a:	b2db      	uxtb	r3, r3
 810730c:	2b2a      	cmp	r3, #42	; 0x2a
 810730e:	d111      	bne.n	8107334 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107310:	687b      	ldr	r3, [r7, #4]
 8107312:	2228      	movs	r2, #40	; 0x28
 8107314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	2222      	movs	r2, #34	; 0x22
 810731c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 810731e:	2102      	movs	r1, #2
 8107320:	6878      	ldr	r0, [r7, #4]
 8107322:	f000 fce3 	bl	8107cec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107326:	687b      	ldr	r3, [r7, #4]
 8107328:	2200      	movs	r2, #0
 810732a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 810732e:	6878      	ldr	r0, [r7, #4]
 8107330:	f7ff fd41 	bl	8106db6 <HAL_I2C_SlaveRxCpltCallback>
}
 8107334:	bf00      	nop
 8107336:	3710      	adds	r7, #16
 8107338:	46bd      	mov	sp, r7
 810733a:	bd80      	pop	{r7, pc}

0810733c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810733c:	b580      	push	{r7, lr}
 810733e:	b086      	sub	sp, #24
 8107340:	af00      	add	r7, sp, #0
 8107342:	6078      	str	r0, [r7, #4]
 8107344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	681b      	ldr	r3, [r3, #0]
 810734a:	681b      	ldr	r3, [r3, #0]
 810734c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 810734e:	683b      	ldr	r3, [r7, #0]
 8107350:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107358:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810735a:	687b      	ldr	r3, [r7, #4]
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	2220      	movs	r2, #32
 8107360:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107362:	7bfb      	ldrb	r3, [r7, #15]
 8107364:	2b21      	cmp	r3, #33	; 0x21
 8107366:	d002      	beq.n	810736e <I2C_ITSlaveCplt+0x32>
 8107368:	7bfb      	ldrb	r3, [r7, #15]
 810736a:	2b29      	cmp	r3, #41	; 0x29
 810736c:	d108      	bne.n	8107380 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 810736e:	f248 0101 	movw	r1, #32769	; 0x8001
 8107372:	6878      	ldr	r0, [r7, #4]
 8107374:	f000 fcba 	bl	8107cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	2221      	movs	r2, #33	; 0x21
 810737c:	631a      	str	r2, [r3, #48]	; 0x30
 810737e:	e00d      	b.n	810739c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107380:	7bfb      	ldrb	r3, [r7, #15]
 8107382:	2b22      	cmp	r3, #34	; 0x22
 8107384:	d002      	beq.n	810738c <I2C_ITSlaveCplt+0x50>
 8107386:	7bfb      	ldrb	r3, [r7, #15]
 8107388:	2b2a      	cmp	r3, #42	; 0x2a
 810738a:	d107      	bne.n	810739c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 810738c:	f248 0102 	movw	r1, #32770	; 0x8002
 8107390:	6878      	ldr	r0, [r7, #4]
 8107392:	f000 fcab 	bl	8107cec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	2222      	movs	r2, #34	; 0x22
 810739a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	681b      	ldr	r3, [r3, #0]
 81073a0:	685a      	ldr	r2, [r3, #4]
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81073aa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	681b      	ldr	r3, [r3, #0]
 81073b0:	6859      	ldr	r1, [r3, #4]
 81073b2:	687b      	ldr	r3, [r7, #4]
 81073b4:	681a      	ldr	r2, [r3, #0]
 81073b6:	4b80      	ldr	r3, [pc, #512]	; (81075b8 <I2C_ITSlaveCplt+0x27c>)
 81073b8:	400b      	ands	r3, r1
 81073ba:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 81073bc:	6878      	ldr	r0, [r7, #4]
 81073be:	f000 fb02 	bl	81079c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81073c2:	693b      	ldr	r3, [r7, #16]
 81073c4:	0b9b      	lsrs	r3, r3, #14
 81073c6:	f003 0301 	and.w	r3, r3, #1
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d07a      	beq.n	81074c4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	681a      	ldr	r2, [r3, #0]
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	681b      	ldr	r3, [r3, #0]
 81073d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81073dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073e2:	2b00      	cmp	r3, #0
 81073e4:	f000 8111 	beq.w	810760a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073ec:	681b      	ldr	r3, [r3, #0]
 81073ee:	4a73      	ldr	r2, [pc, #460]	; (81075bc <I2C_ITSlaveCplt+0x280>)
 81073f0:	4293      	cmp	r3, r2
 81073f2:	d059      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 81073f4:	687b      	ldr	r3, [r7, #4]
 81073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073f8:	681b      	ldr	r3, [r3, #0]
 81073fa:	4a71      	ldr	r2, [pc, #452]	; (81075c0 <I2C_ITSlaveCplt+0x284>)
 81073fc:	4293      	cmp	r3, r2
 81073fe:	d053      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107404:	681b      	ldr	r3, [r3, #0]
 8107406:	4a6f      	ldr	r2, [pc, #444]	; (81075c4 <I2C_ITSlaveCplt+0x288>)
 8107408:	4293      	cmp	r3, r2
 810740a:	d04d      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107410:	681b      	ldr	r3, [r3, #0]
 8107412:	4a6d      	ldr	r2, [pc, #436]	; (81075c8 <I2C_ITSlaveCplt+0x28c>)
 8107414:	4293      	cmp	r3, r2
 8107416:	d047      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	4a6b      	ldr	r2, [pc, #428]	; (81075cc <I2C_ITSlaveCplt+0x290>)
 8107420:	4293      	cmp	r3, r2
 8107422:	d041      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	4a69      	ldr	r2, [pc, #420]	; (81075d0 <I2C_ITSlaveCplt+0x294>)
 810742c:	4293      	cmp	r3, r2
 810742e:	d03b      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107434:	681b      	ldr	r3, [r3, #0]
 8107436:	4a67      	ldr	r2, [pc, #412]	; (81075d4 <I2C_ITSlaveCplt+0x298>)
 8107438:	4293      	cmp	r3, r2
 810743a:	d035      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107440:	681b      	ldr	r3, [r3, #0]
 8107442:	4a65      	ldr	r2, [pc, #404]	; (81075d8 <I2C_ITSlaveCplt+0x29c>)
 8107444:	4293      	cmp	r3, r2
 8107446:	d02f      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107448:	687b      	ldr	r3, [r7, #4]
 810744a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810744c:	681b      	ldr	r3, [r3, #0]
 810744e:	4a63      	ldr	r2, [pc, #396]	; (81075dc <I2C_ITSlaveCplt+0x2a0>)
 8107450:	4293      	cmp	r3, r2
 8107452:	d029      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107454:	687b      	ldr	r3, [r7, #4]
 8107456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107458:	681b      	ldr	r3, [r3, #0]
 810745a:	4a61      	ldr	r2, [pc, #388]	; (81075e0 <I2C_ITSlaveCplt+0x2a4>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d023      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107464:	681b      	ldr	r3, [r3, #0]
 8107466:	4a5f      	ldr	r2, [pc, #380]	; (81075e4 <I2C_ITSlaveCplt+0x2a8>)
 8107468:	4293      	cmp	r3, r2
 810746a:	d01d      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107470:	681b      	ldr	r3, [r3, #0]
 8107472:	4a5d      	ldr	r2, [pc, #372]	; (81075e8 <I2C_ITSlaveCplt+0x2ac>)
 8107474:	4293      	cmp	r3, r2
 8107476:	d017      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810747c:	681b      	ldr	r3, [r3, #0]
 810747e:	4a5b      	ldr	r2, [pc, #364]	; (81075ec <I2C_ITSlaveCplt+0x2b0>)
 8107480:	4293      	cmp	r3, r2
 8107482:	d011      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107488:	681b      	ldr	r3, [r3, #0]
 810748a:	4a59      	ldr	r2, [pc, #356]	; (81075f0 <I2C_ITSlaveCplt+0x2b4>)
 810748c:	4293      	cmp	r3, r2
 810748e:	d00b      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107494:	681b      	ldr	r3, [r3, #0]
 8107496:	4a57      	ldr	r2, [pc, #348]	; (81075f4 <I2C_ITSlaveCplt+0x2b8>)
 8107498:	4293      	cmp	r3, r2
 810749a:	d005      	beq.n	81074a8 <I2C_ITSlaveCplt+0x16c>
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074a0:	681b      	ldr	r3, [r3, #0]
 81074a2:	4a55      	ldr	r2, [pc, #340]	; (81075f8 <I2C_ITSlaveCplt+0x2bc>)
 81074a4:	4293      	cmp	r3, r2
 81074a6:	d105      	bne.n	81074b4 <I2C_ITSlaveCplt+0x178>
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074ac:	681b      	ldr	r3, [r3, #0]
 81074ae:	685b      	ldr	r3, [r3, #4]
 81074b0:	b29b      	uxth	r3, r3
 81074b2:	e004      	b.n	81074be <I2C_ITSlaveCplt+0x182>
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074b8:	681b      	ldr	r3, [r3, #0]
 81074ba:	685b      	ldr	r3, [r3, #4]
 81074bc:	b29b      	uxth	r3, r3
 81074be:	687a      	ldr	r2, [r7, #4]
 81074c0:	8553      	strh	r3, [r2, #42]	; 0x2a
 81074c2:	e0a2      	b.n	810760a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81074c4:	693b      	ldr	r3, [r7, #16]
 81074c6:	0bdb      	lsrs	r3, r3, #15
 81074c8:	f003 0301 	and.w	r3, r3, #1
 81074cc:	2b00      	cmp	r3, #0
 81074ce:	f000 809c 	beq.w	810760a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	681a      	ldr	r2, [r3, #0]
 81074d8:	687b      	ldr	r3, [r7, #4]
 81074da:	681b      	ldr	r3, [r3, #0]
 81074dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81074e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81074e6:	2b00      	cmp	r3, #0
 81074e8:	f000 808f 	beq.w	810760a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81074f0:	681b      	ldr	r3, [r3, #0]
 81074f2:	4a32      	ldr	r2, [pc, #200]	; (81075bc <I2C_ITSlaveCplt+0x280>)
 81074f4:	4293      	cmp	r3, r2
 81074f6:	d059      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	4a30      	ldr	r2, [pc, #192]	; (81075c0 <I2C_ITSlaveCplt+0x284>)
 8107500:	4293      	cmp	r3, r2
 8107502:	d053      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107504:	687b      	ldr	r3, [r7, #4]
 8107506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	4a2e      	ldr	r2, [pc, #184]	; (81075c4 <I2C_ITSlaveCplt+0x288>)
 810750c:	4293      	cmp	r3, r2
 810750e:	d04d      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107514:	681b      	ldr	r3, [r3, #0]
 8107516:	4a2c      	ldr	r2, [pc, #176]	; (81075c8 <I2C_ITSlaveCplt+0x28c>)
 8107518:	4293      	cmp	r3, r2
 810751a:	d047      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 810751c:	687b      	ldr	r3, [r7, #4]
 810751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	4a2a      	ldr	r2, [pc, #168]	; (81075cc <I2C_ITSlaveCplt+0x290>)
 8107524:	4293      	cmp	r3, r2
 8107526:	d041      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107528:	687b      	ldr	r3, [r7, #4]
 810752a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810752c:	681b      	ldr	r3, [r3, #0]
 810752e:	4a28      	ldr	r2, [pc, #160]	; (81075d0 <I2C_ITSlaveCplt+0x294>)
 8107530:	4293      	cmp	r3, r2
 8107532:	d03b      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	4a26      	ldr	r2, [pc, #152]	; (81075d4 <I2C_ITSlaveCplt+0x298>)
 810753c:	4293      	cmp	r3, r2
 810753e:	d035      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107544:	681b      	ldr	r3, [r3, #0]
 8107546:	4a24      	ldr	r2, [pc, #144]	; (81075d8 <I2C_ITSlaveCplt+0x29c>)
 8107548:	4293      	cmp	r3, r2
 810754a:	d02f      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 810754c:	687b      	ldr	r3, [r7, #4]
 810754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107550:	681b      	ldr	r3, [r3, #0]
 8107552:	4a22      	ldr	r2, [pc, #136]	; (81075dc <I2C_ITSlaveCplt+0x2a0>)
 8107554:	4293      	cmp	r3, r2
 8107556:	d029      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810755c:	681b      	ldr	r3, [r3, #0]
 810755e:	4a20      	ldr	r2, [pc, #128]	; (81075e0 <I2C_ITSlaveCplt+0x2a4>)
 8107560:	4293      	cmp	r3, r2
 8107562:	d023      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107568:	681b      	ldr	r3, [r3, #0]
 810756a:	4a1e      	ldr	r2, [pc, #120]	; (81075e4 <I2C_ITSlaveCplt+0x2a8>)
 810756c:	4293      	cmp	r3, r2
 810756e:	d01d      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107574:	681b      	ldr	r3, [r3, #0]
 8107576:	4a1c      	ldr	r2, [pc, #112]	; (81075e8 <I2C_ITSlaveCplt+0x2ac>)
 8107578:	4293      	cmp	r3, r2
 810757a:	d017      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	4a1a      	ldr	r2, [pc, #104]	; (81075ec <I2C_ITSlaveCplt+0x2b0>)
 8107584:	4293      	cmp	r3, r2
 8107586:	d011      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107588:	687b      	ldr	r3, [r7, #4]
 810758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810758c:	681b      	ldr	r3, [r3, #0]
 810758e:	4a18      	ldr	r2, [pc, #96]	; (81075f0 <I2C_ITSlaveCplt+0x2b4>)
 8107590:	4293      	cmp	r3, r2
 8107592:	d00b      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	4a16      	ldr	r2, [pc, #88]	; (81075f4 <I2C_ITSlaveCplt+0x2b8>)
 810759c:	4293      	cmp	r3, r2
 810759e:	d005      	beq.n	81075ac <I2C_ITSlaveCplt+0x270>
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075a4:	681b      	ldr	r3, [r3, #0]
 81075a6:	4a14      	ldr	r2, [pc, #80]	; (81075f8 <I2C_ITSlaveCplt+0x2bc>)
 81075a8:	4293      	cmp	r3, r2
 81075aa:	d127      	bne.n	81075fc <I2C_ITSlaveCplt+0x2c0>
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	685b      	ldr	r3, [r3, #4]
 81075b4:	b29b      	uxth	r3, r3
 81075b6:	e026      	b.n	8107606 <I2C_ITSlaveCplt+0x2ca>
 81075b8:	fe00e800 	.word	0xfe00e800
 81075bc:	40020010 	.word	0x40020010
 81075c0:	40020028 	.word	0x40020028
 81075c4:	40020040 	.word	0x40020040
 81075c8:	40020058 	.word	0x40020058
 81075cc:	40020070 	.word	0x40020070
 81075d0:	40020088 	.word	0x40020088
 81075d4:	400200a0 	.word	0x400200a0
 81075d8:	400200b8 	.word	0x400200b8
 81075dc:	40020410 	.word	0x40020410
 81075e0:	40020428 	.word	0x40020428
 81075e4:	40020440 	.word	0x40020440
 81075e8:	40020458 	.word	0x40020458
 81075ec:	40020470 	.word	0x40020470
 81075f0:	40020488 	.word	0x40020488
 81075f4:	400204a0 	.word	0x400204a0
 81075f8:	400204b8 	.word	0x400204b8
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107600:	681b      	ldr	r3, [r3, #0]
 8107602:	685b      	ldr	r3, [r3, #4]
 8107604:	b29b      	uxth	r3, r3
 8107606:	687a      	ldr	r2, [r7, #4]
 8107608:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 810760a:	697b      	ldr	r3, [r7, #20]
 810760c:	089b      	lsrs	r3, r3, #2
 810760e:	f003 0301 	and.w	r3, r3, #1
 8107612:	2b00      	cmp	r3, #0
 8107614:	d020      	beq.n	8107658 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107616:	697b      	ldr	r3, [r7, #20]
 8107618:	f023 0304 	bic.w	r3, r3, #4
 810761c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810761e:	687b      	ldr	r3, [r7, #4]
 8107620:	681b      	ldr	r3, [r3, #0]
 8107622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107628:	b2d2      	uxtb	r2, r2
 810762a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 810762c:	687b      	ldr	r3, [r7, #4]
 810762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107630:	1c5a      	adds	r2, r3, #1
 8107632:	687b      	ldr	r3, [r7, #4]
 8107634:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810763a:	2b00      	cmp	r3, #0
 810763c:	d00c      	beq.n	8107658 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107642:	3b01      	subs	r3, #1
 8107644:	b29a      	uxth	r2, r3
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810764a:	687b      	ldr	r3, [r7, #4]
 810764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810764e:	b29b      	uxth	r3, r3
 8107650:	3b01      	subs	r3, #1
 8107652:	b29a      	uxth	r2, r3
 8107654:	687b      	ldr	r3, [r7, #4]
 8107656:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810765c:	b29b      	uxth	r3, r3
 810765e:	2b00      	cmp	r3, #0
 8107660:	d005      	beq.n	810766e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107666:	f043 0204 	orr.w	r2, r3, #4
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 810766e:	687b      	ldr	r3, [r7, #4]
 8107670:	2200      	movs	r2, #0
 8107672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	2200      	movs	r2, #0
 810767a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 810767c:	687b      	ldr	r3, [r7, #4]
 810767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107680:	2b00      	cmp	r3, #0
 8107682:	d010      	beq.n	81076a6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107688:	4619      	mov	r1, r3
 810768a:	6878      	ldr	r0, [r7, #4]
 810768c:	f000 f8a4 	bl	81077d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107696:	b2db      	uxtb	r3, r3
 8107698:	2b28      	cmp	r3, #40	; 0x28
 810769a:	d141      	bne.n	8107720 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 810769c:	6979      	ldr	r1, [r7, #20]
 810769e:	6878      	ldr	r0, [r7, #4]
 81076a0:	f000 f844 	bl	810772c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81076a4:	e03c      	b.n	8107720 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81076ae:	d014      	beq.n	81076da <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 81076b0:	6878      	ldr	r0, [r7, #4]
 81076b2:	f7ff fde5 	bl	8107280 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	4a1b      	ldr	r2, [pc, #108]	; (8107728 <I2C_ITSlaveCplt+0x3ec>)
 81076ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	2220      	movs	r2, #32
 81076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	2200      	movs	r2, #0
 81076c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	2200      	movs	r2, #0
 81076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 81076d2:	6878      	ldr	r0, [r7, #4]
 81076d4:	f7ff fb87 	bl	8106de6 <HAL_I2C_ListenCpltCallback>
}
 81076d8:	e022      	b.n	8107720 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81076da:	687b      	ldr	r3, [r7, #4]
 81076dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81076e0:	b2db      	uxtb	r3, r3
 81076e2:	2b22      	cmp	r3, #34	; 0x22
 81076e4:	d10e      	bne.n	8107704 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 81076e6:	687b      	ldr	r3, [r7, #4]
 81076e8:	2220      	movs	r2, #32
 81076ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81076ee:	687b      	ldr	r3, [r7, #4]
 81076f0:	2200      	movs	r2, #0
 81076f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81076f4:	687b      	ldr	r3, [r7, #4]
 81076f6:	2200      	movs	r2, #0
 81076f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81076fc:	6878      	ldr	r0, [r7, #4]
 81076fe:	f7ff fb5a 	bl	8106db6 <HAL_I2C_SlaveRxCpltCallback>
}
 8107702:	e00d      	b.n	8107720 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	2220      	movs	r2, #32
 8107708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	2200      	movs	r2, #0
 8107710:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	2200      	movs	r2, #0
 8107716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810771a:	6878      	ldr	r0, [r7, #4]
 810771c:	f7ff fb41 	bl	8106da2 <HAL_I2C_SlaveTxCpltCallback>
}
 8107720:	bf00      	nop
 8107722:	3718      	adds	r7, #24
 8107724:	46bd      	mov	sp, r7
 8107726:	bd80      	pop	{r7, pc}
 8107728:	ffff0000 	.word	0xffff0000

0810772c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810772c:	b580      	push	{r7, lr}
 810772e:	b082      	sub	sp, #8
 8107730:	af00      	add	r7, sp, #0
 8107732:	6078      	str	r0, [r7, #4]
 8107734:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107736:	687b      	ldr	r3, [r7, #4]
 8107738:	4a26      	ldr	r2, [pc, #152]	; (81077d4 <I2C_ITListenCplt+0xa8>)
 810773a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	2200      	movs	r2, #0
 8107740:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	2220      	movs	r2, #32
 8107746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810774a:	687b      	ldr	r3, [r7, #4]
 810774c:	2200      	movs	r2, #0
 810774e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	2200      	movs	r2, #0
 8107756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107758:	683b      	ldr	r3, [r7, #0]
 810775a:	089b      	lsrs	r3, r3, #2
 810775c:	f003 0301 	and.w	r3, r3, #1
 8107760:	2b00      	cmp	r3, #0
 8107762:	d022      	beq.n	81077aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107764:	687b      	ldr	r3, [r7, #4]
 8107766:	681b      	ldr	r3, [r3, #0]
 8107768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810776e:	b2d2      	uxtb	r2, r2
 8107770:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107776:	1c5a      	adds	r2, r3, #1
 8107778:	687b      	ldr	r3, [r7, #4]
 810777a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 810777c:	687b      	ldr	r3, [r7, #4]
 810777e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107780:	2b00      	cmp	r3, #0
 8107782:	d012      	beq.n	81077aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8107784:	687b      	ldr	r3, [r7, #4]
 8107786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107788:	3b01      	subs	r3, #1
 810778a:	b29a      	uxth	r2, r3
 810778c:	687b      	ldr	r3, [r7, #4]
 810778e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107794:	b29b      	uxth	r3, r3
 8107796:	3b01      	subs	r3, #1
 8107798:	b29a      	uxth	r2, r3
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81077a2:	f043 0204 	orr.w	r2, r3, #4
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81077aa:	f248 0103 	movw	r1, #32771	; 0x8003
 81077ae:	6878      	ldr	r0, [r7, #4]
 81077b0:	f000 fa9c 	bl	8107cec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077b4:	687b      	ldr	r3, [r7, #4]
 81077b6:	681b      	ldr	r3, [r3, #0]
 81077b8:	2210      	movs	r2, #16
 81077ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	2200      	movs	r2, #0
 81077c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 81077c4:	6878      	ldr	r0, [r7, #4]
 81077c6:	f7ff fb0e 	bl	8106de6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 81077ca:	bf00      	nop
 81077cc:	3708      	adds	r7, #8
 81077ce:	46bd      	mov	sp, r7
 81077d0:	bd80      	pop	{r7, pc}
 81077d2:	bf00      	nop
 81077d4:	ffff0000 	.word	0xffff0000

081077d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 81077d8:	b580      	push	{r7, lr}
 81077da:	b084      	sub	sp, #16
 81077dc:	af00      	add	r7, sp, #0
 81077de:	6078      	str	r0, [r7, #4]
 81077e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	2200      	movs	r2, #0
 81077ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	4a5d      	ldr	r2, [pc, #372]	; (810796c <I2C_ITError+0x194>)
 81077f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	2200      	movs	r2, #0
 81077fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 81077fe:	687b      	ldr	r3, [r7, #4]
 8107800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107802:	683b      	ldr	r3, [r7, #0]
 8107804:	431a      	orrs	r2, r3
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 810780a:	7bfb      	ldrb	r3, [r7, #15]
 810780c:	2b28      	cmp	r3, #40	; 0x28
 810780e:	d005      	beq.n	810781c <I2C_ITError+0x44>
 8107810:	7bfb      	ldrb	r3, [r7, #15]
 8107812:	2b29      	cmp	r3, #41	; 0x29
 8107814:	d002      	beq.n	810781c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8107816:	7bfb      	ldrb	r3, [r7, #15]
 8107818:	2b2a      	cmp	r3, #42	; 0x2a
 810781a:	d10b      	bne.n	8107834 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810781c:	2103      	movs	r1, #3
 810781e:	6878      	ldr	r0, [r7, #4]
 8107820:	f000 fa64 	bl	8107cec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107824:	687b      	ldr	r3, [r7, #4]
 8107826:	2228      	movs	r2, #40	; 0x28
 8107828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	4a50      	ldr	r2, [pc, #320]	; (8107970 <I2C_ITError+0x198>)
 8107830:	635a      	str	r2, [r3, #52]	; 0x34
 8107832:	e011      	b.n	8107858 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107834:	f248 0103 	movw	r1, #32771	; 0x8003
 8107838:	6878      	ldr	r0, [r7, #4]
 810783a:	f000 fa57 	bl	8107cec <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107844:	b2db      	uxtb	r3, r3
 8107846:	2b60      	cmp	r3, #96	; 0x60
 8107848:	d003      	beq.n	8107852 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	2220      	movs	r2, #32
 810784e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8107852:	687b      	ldr	r3, [r7, #4]
 8107854:	2200      	movs	r2, #0
 8107856:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8107858:	687b      	ldr	r3, [r7, #4]
 810785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810785c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 810785e:	687b      	ldr	r3, [r7, #4]
 8107860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107862:	2b00      	cmp	r3, #0
 8107864:	d039      	beq.n	81078da <I2C_ITError+0x102>
 8107866:	68bb      	ldr	r3, [r7, #8]
 8107868:	2b11      	cmp	r3, #17
 810786a:	d002      	beq.n	8107872 <I2C_ITError+0x9a>
 810786c:	68bb      	ldr	r3, [r7, #8]
 810786e:	2b21      	cmp	r3, #33	; 0x21
 8107870:	d133      	bne.n	81078da <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	681b      	ldr	r3, [r3, #0]
 8107876:	681b      	ldr	r3, [r3, #0]
 8107878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810787c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107880:	d107      	bne.n	8107892 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	681b      	ldr	r3, [r3, #0]
 8107886:	681a      	ldr	r2, [r3, #0]
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	681b      	ldr	r3, [r3, #0]
 810788c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107890:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107896:	4618      	mov	r0, r3
 8107898:	f7fe f96c 	bl	8105b74 <HAL_DMA_GetState>
 810789c:	4603      	mov	r3, r0
 810789e:	2b01      	cmp	r3, #1
 81078a0:	d017      	beq.n	81078d2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078a6:	4a33      	ldr	r2, [pc, #204]	; (8107974 <I2C_ITError+0x19c>)
 81078a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81078aa:	687b      	ldr	r3, [r7, #4]
 81078ac:	2200      	movs	r2, #0
 81078ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078b6:	4618      	mov	r0, r3
 81078b8:	f7fc ffee 	bl	8104898 <HAL_DMA_Abort_IT>
 81078bc:	4603      	mov	r3, r0
 81078be:	2b00      	cmp	r3, #0
 81078c0:	d04d      	beq.n	810795e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81078c8:	687a      	ldr	r2, [r7, #4]
 81078ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 81078cc:	4610      	mov	r0, r2
 81078ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81078d0:	e045      	b.n	810795e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81078d2:	6878      	ldr	r0, [r7, #4]
 81078d4:	f000 f850 	bl	8107978 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81078d8:	e041      	b.n	810795e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81078de:	2b00      	cmp	r3, #0
 81078e0:	d039      	beq.n	8107956 <I2C_ITError+0x17e>
 81078e2:	68bb      	ldr	r3, [r7, #8]
 81078e4:	2b12      	cmp	r3, #18
 81078e6:	d002      	beq.n	81078ee <I2C_ITError+0x116>
 81078e8:	68bb      	ldr	r3, [r7, #8]
 81078ea:	2b22      	cmp	r3, #34	; 0x22
 81078ec:	d133      	bne.n	8107956 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	681b      	ldr	r3, [r3, #0]
 81078f2:	681b      	ldr	r3, [r3, #0]
 81078f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81078f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81078fc:	d107      	bne.n	810790e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81078fe:	687b      	ldr	r3, [r7, #4]
 8107900:	681b      	ldr	r3, [r3, #0]
 8107902:	681a      	ldr	r2, [r3, #0]
 8107904:	687b      	ldr	r3, [r7, #4]
 8107906:	681b      	ldr	r3, [r3, #0]
 8107908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810790c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810790e:	687b      	ldr	r3, [r7, #4]
 8107910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107912:	4618      	mov	r0, r3
 8107914:	f7fe f92e 	bl	8105b74 <HAL_DMA_GetState>
 8107918:	4603      	mov	r3, r0
 810791a:	2b01      	cmp	r3, #1
 810791c:	d017      	beq.n	810794e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107922:	4a14      	ldr	r2, [pc, #80]	; (8107974 <I2C_ITError+0x19c>)
 8107924:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	2200      	movs	r2, #0
 810792a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107932:	4618      	mov	r0, r3
 8107934:	f7fc ffb0 	bl	8104898 <HAL_DMA_Abort_IT>
 8107938:	4603      	mov	r3, r0
 810793a:	2b00      	cmp	r3, #0
 810793c:	d011      	beq.n	8107962 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107944:	687a      	ldr	r2, [r7, #4]
 8107946:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8107948:	4610      	mov	r0, r2
 810794a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810794c:	e009      	b.n	8107962 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 810794e:	6878      	ldr	r0, [r7, #4]
 8107950:	f000 f812 	bl	8107978 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107954:	e005      	b.n	8107962 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8107956:	6878      	ldr	r0, [r7, #4]
 8107958:	f000 f80e 	bl	8107978 <I2C_TreatErrorCallback>
  }
}
 810795c:	e002      	b.n	8107964 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810795e:	bf00      	nop
 8107960:	e000      	b.n	8107964 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107962:	bf00      	nop
}
 8107964:	bf00      	nop
 8107966:	3710      	adds	r7, #16
 8107968:	46bd      	mov	sp, r7
 810796a:	bd80      	pop	{r7, pc}
 810796c:	ffff0000 	.word	0xffff0000
 8107970:	08106e23 	.word	0x08106e23
 8107974:	08107a0f 	.word	0x08107a0f

08107978 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107978:	b580      	push	{r7, lr}
 810797a:	b082      	sub	sp, #8
 810797c:	af00      	add	r7, sp, #0
 810797e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107986:	b2db      	uxtb	r3, r3
 8107988:	2b60      	cmp	r3, #96	; 0x60
 810798a:	d10e      	bne.n	81079aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	2220      	movs	r2, #32
 8107990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	2200      	movs	r2, #0
 8107998:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	2200      	movs	r2, #0
 810799e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 81079a2:	6878      	ldr	r0, [r7, #4]
 81079a4:	f7ff fa33 	bl	8106e0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81079a8:	e009      	b.n	81079be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	2200      	movs	r2, #0
 81079ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	2200      	movs	r2, #0
 81079b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 81079b8:	6878      	ldr	r0, [r7, #4]
 81079ba:	f7ff fa1e 	bl	8106dfa <HAL_I2C_ErrorCallback>
}
 81079be:	bf00      	nop
 81079c0:	3708      	adds	r7, #8
 81079c2:	46bd      	mov	sp, r7
 81079c4:	bd80      	pop	{r7, pc}

081079c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81079c6:	b480      	push	{r7}
 81079c8:	b083      	sub	sp, #12
 81079ca:	af00      	add	r7, sp, #0
 81079cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81079ce:	687b      	ldr	r3, [r7, #4]
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	699b      	ldr	r3, [r3, #24]
 81079d4:	f003 0302 	and.w	r3, r3, #2
 81079d8:	2b02      	cmp	r3, #2
 81079da:	d103      	bne.n	81079e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	681b      	ldr	r3, [r3, #0]
 81079e0:	2200      	movs	r2, #0
 81079e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81079e4:	687b      	ldr	r3, [r7, #4]
 81079e6:	681b      	ldr	r3, [r3, #0]
 81079e8:	699b      	ldr	r3, [r3, #24]
 81079ea:	f003 0301 	and.w	r3, r3, #1
 81079ee:	2b01      	cmp	r3, #1
 81079f0:	d007      	beq.n	8107a02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	681b      	ldr	r3, [r3, #0]
 81079f6:	699a      	ldr	r2, [r3, #24]
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	f042 0201 	orr.w	r2, r2, #1
 8107a00:	619a      	str	r2, [r3, #24]
  }
}
 8107a02:	bf00      	nop
 8107a04:	370c      	adds	r7, #12
 8107a06:	46bd      	mov	sp, r7
 8107a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a0c:	4770      	bx	lr

08107a0e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8107a0e:	b580      	push	{r7, lr}
 8107a10:	b084      	sub	sp, #16
 8107a12:	af00      	add	r7, sp, #0
 8107a14:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a1a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8107a1c:	68fb      	ldr	r3, [r7, #12]
 8107a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a20:	2b00      	cmp	r3, #0
 8107a22:	d003      	beq.n	8107a2c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8107a24:	68fb      	ldr	r3, [r7, #12]
 8107a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107a28:	2200      	movs	r2, #0
 8107a2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8107a2c:	68fb      	ldr	r3, [r7, #12]
 8107a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107a30:	2b00      	cmp	r3, #0
 8107a32:	d003      	beq.n	8107a3c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8107a34:	68fb      	ldr	r3, [r7, #12]
 8107a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107a38:	2200      	movs	r2, #0
 8107a3a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8107a3c:	68f8      	ldr	r0, [r7, #12]
 8107a3e:	f7ff ff9b 	bl	8107978 <I2C_TreatErrorCallback>
}
 8107a42:	bf00      	nop
 8107a44:	3710      	adds	r7, #16
 8107a46:	46bd      	mov	sp, r7
 8107a48:	bd80      	pop	{r7, pc}

08107a4a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8107a4a:	b580      	push	{r7, lr}
 8107a4c:	b084      	sub	sp, #16
 8107a4e:	af00      	add	r7, sp, #0
 8107a50:	60f8      	str	r0, [r7, #12]
 8107a52:	60b9      	str	r1, [r7, #8]
 8107a54:	603b      	str	r3, [r7, #0]
 8107a56:	4613      	mov	r3, r2
 8107a58:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107a5a:	e022      	b.n	8107aa2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107a5c:	683b      	ldr	r3, [r7, #0]
 8107a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107a62:	d01e      	beq.n	8107aa2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107a64:	f7fb fce2 	bl	810342c <HAL_GetTick>
 8107a68:	4602      	mov	r2, r0
 8107a6a:	69bb      	ldr	r3, [r7, #24]
 8107a6c:	1ad3      	subs	r3, r2, r3
 8107a6e:	683a      	ldr	r2, [r7, #0]
 8107a70:	429a      	cmp	r2, r3
 8107a72:	d302      	bcc.n	8107a7a <I2C_WaitOnFlagUntilTimeout+0x30>
 8107a74:	683b      	ldr	r3, [r7, #0]
 8107a76:	2b00      	cmp	r3, #0
 8107a78:	d113      	bne.n	8107aa2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107a7a:	68fb      	ldr	r3, [r7, #12]
 8107a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107a7e:	f043 0220 	orr.w	r2, r3, #32
 8107a82:	68fb      	ldr	r3, [r7, #12]
 8107a84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107a86:	68fb      	ldr	r3, [r7, #12]
 8107a88:	2220      	movs	r2, #32
 8107a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107a8e:	68fb      	ldr	r3, [r7, #12]
 8107a90:	2200      	movs	r2, #0
 8107a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107a96:	68fb      	ldr	r3, [r7, #12]
 8107a98:	2200      	movs	r2, #0
 8107a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8107a9e:	2301      	movs	r3, #1
 8107aa0:	e00f      	b.n	8107ac2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107aa2:	68fb      	ldr	r3, [r7, #12]
 8107aa4:	681b      	ldr	r3, [r3, #0]
 8107aa6:	699a      	ldr	r2, [r3, #24]
 8107aa8:	68bb      	ldr	r3, [r7, #8]
 8107aaa:	4013      	ands	r3, r2
 8107aac:	68ba      	ldr	r2, [r7, #8]
 8107aae:	429a      	cmp	r2, r3
 8107ab0:	bf0c      	ite	eq
 8107ab2:	2301      	moveq	r3, #1
 8107ab4:	2300      	movne	r3, #0
 8107ab6:	b2db      	uxtb	r3, r3
 8107ab8:	461a      	mov	r2, r3
 8107aba:	79fb      	ldrb	r3, [r7, #7]
 8107abc:	429a      	cmp	r2, r3
 8107abe:	d0cd      	beq.n	8107a5c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8107ac0:	2300      	movs	r3, #0
}
 8107ac2:	4618      	mov	r0, r3
 8107ac4:	3710      	adds	r7, #16
 8107ac6:	46bd      	mov	sp, r7
 8107ac8:	bd80      	pop	{r7, pc}

08107aca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107aca:	b580      	push	{r7, lr}
 8107acc:	b084      	sub	sp, #16
 8107ace:	af00      	add	r7, sp, #0
 8107ad0:	60f8      	str	r0, [r7, #12]
 8107ad2:	60b9      	str	r1, [r7, #8]
 8107ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107ad6:	e02c      	b.n	8107b32 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8107ad8:	687a      	ldr	r2, [r7, #4]
 8107ada:	68b9      	ldr	r1, [r7, #8]
 8107adc:	68f8      	ldr	r0, [r7, #12]
 8107ade:	f000 f871 	bl	8107bc4 <I2C_IsAcknowledgeFailed>
 8107ae2:	4603      	mov	r3, r0
 8107ae4:	2b00      	cmp	r3, #0
 8107ae6:	d001      	beq.n	8107aec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107ae8:	2301      	movs	r3, #1
 8107aea:	e02a      	b.n	8107b42 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107aec:	68bb      	ldr	r3, [r7, #8]
 8107aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107af2:	d01e      	beq.n	8107b32 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107af4:	f7fb fc9a 	bl	810342c <HAL_GetTick>
 8107af8:	4602      	mov	r2, r0
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	1ad3      	subs	r3, r2, r3
 8107afe:	68ba      	ldr	r2, [r7, #8]
 8107b00:	429a      	cmp	r2, r3
 8107b02:	d302      	bcc.n	8107b0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8107b04:	68bb      	ldr	r3, [r7, #8]
 8107b06:	2b00      	cmp	r3, #0
 8107b08:	d113      	bne.n	8107b32 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107b0a:	68fb      	ldr	r3, [r7, #12]
 8107b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107b0e:	f043 0220 	orr.w	r2, r3, #32
 8107b12:	68fb      	ldr	r3, [r7, #12]
 8107b14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107b16:	68fb      	ldr	r3, [r7, #12]
 8107b18:	2220      	movs	r2, #32
 8107b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b1e:	68fb      	ldr	r3, [r7, #12]
 8107b20:	2200      	movs	r2, #0
 8107b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107b26:	68fb      	ldr	r3, [r7, #12]
 8107b28:	2200      	movs	r2, #0
 8107b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8107b2e:	2301      	movs	r3, #1
 8107b30:	e007      	b.n	8107b42 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107b32:	68fb      	ldr	r3, [r7, #12]
 8107b34:	681b      	ldr	r3, [r3, #0]
 8107b36:	699b      	ldr	r3, [r3, #24]
 8107b38:	f003 0302 	and.w	r3, r3, #2
 8107b3c:	2b02      	cmp	r3, #2
 8107b3e:	d1cb      	bne.n	8107ad8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8107b40:	2300      	movs	r3, #0
}
 8107b42:	4618      	mov	r0, r3
 8107b44:	3710      	adds	r7, #16
 8107b46:	46bd      	mov	sp, r7
 8107b48:	bd80      	pop	{r7, pc}

08107b4a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107b4a:	b580      	push	{r7, lr}
 8107b4c:	b084      	sub	sp, #16
 8107b4e:	af00      	add	r7, sp, #0
 8107b50:	60f8      	str	r0, [r7, #12]
 8107b52:	60b9      	str	r1, [r7, #8]
 8107b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107b56:	e028      	b.n	8107baa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8107b58:	687a      	ldr	r2, [r7, #4]
 8107b5a:	68b9      	ldr	r1, [r7, #8]
 8107b5c:	68f8      	ldr	r0, [r7, #12]
 8107b5e:	f000 f831 	bl	8107bc4 <I2C_IsAcknowledgeFailed>
 8107b62:	4603      	mov	r3, r0
 8107b64:	2b00      	cmp	r3, #0
 8107b66:	d001      	beq.n	8107b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107b68:	2301      	movs	r3, #1
 8107b6a:	e026      	b.n	8107bba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107b6c:	f7fb fc5e 	bl	810342c <HAL_GetTick>
 8107b70:	4602      	mov	r2, r0
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	1ad3      	subs	r3, r2, r3
 8107b76:	68ba      	ldr	r2, [r7, #8]
 8107b78:	429a      	cmp	r2, r3
 8107b7a:	d302      	bcc.n	8107b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8107b7c:	68bb      	ldr	r3, [r7, #8]
 8107b7e:	2b00      	cmp	r3, #0
 8107b80:	d113      	bne.n	8107baa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107b82:	68fb      	ldr	r3, [r7, #12]
 8107b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107b86:	f043 0220 	orr.w	r2, r3, #32
 8107b8a:	68fb      	ldr	r3, [r7, #12]
 8107b8c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8107b8e:	68fb      	ldr	r3, [r7, #12]
 8107b90:	2220      	movs	r2, #32
 8107b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b96:	68fb      	ldr	r3, [r7, #12]
 8107b98:	2200      	movs	r2, #0
 8107b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107b9e:	68fb      	ldr	r3, [r7, #12]
 8107ba0:	2200      	movs	r2, #0
 8107ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8107ba6:	2301      	movs	r3, #1
 8107ba8:	e007      	b.n	8107bba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107baa:	68fb      	ldr	r3, [r7, #12]
 8107bac:	681b      	ldr	r3, [r3, #0]
 8107bae:	699b      	ldr	r3, [r3, #24]
 8107bb0:	f003 0320 	and.w	r3, r3, #32
 8107bb4:	2b20      	cmp	r3, #32
 8107bb6:	d1cf      	bne.n	8107b58 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8107bb8:	2300      	movs	r3, #0
}
 8107bba:	4618      	mov	r0, r3
 8107bbc:	3710      	adds	r7, #16
 8107bbe:	46bd      	mov	sp, r7
 8107bc0:	bd80      	pop	{r7, pc}
	...

08107bc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107bc4:	b580      	push	{r7, lr}
 8107bc6:	b084      	sub	sp, #16
 8107bc8:	af00      	add	r7, sp, #0
 8107bca:	60f8      	str	r0, [r7, #12]
 8107bcc:	60b9      	str	r1, [r7, #8]
 8107bce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8107bd0:	68fb      	ldr	r3, [r7, #12]
 8107bd2:	681b      	ldr	r3, [r3, #0]
 8107bd4:	699b      	ldr	r3, [r3, #24]
 8107bd6:	f003 0310 	and.w	r3, r3, #16
 8107bda:	2b10      	cmp	r3, #16
 8107bdc:	d151      	bne.n	8107c82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107bde:	e022      	b.n	8107c26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8107be0:	68bb      	ldr	r3, [r7, #8]
 8107be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107be6:	d01e      	beq.n	8107c26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107be8:	f7fb fc20 	bl	810342c <HAL_GetTick>
 8107bec:	4602      	mov	r2, r0
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	1ad3      	subs	r3, r2, r3
 8107bf2:	68ba      	ldr	r2, [r7, #8]
 8107bf4:	429a      	cmp	r2, r3
 8107bf6:	d302      	bcc.n	8107bfe <I2C_IsAcknowledgeFailed+0x3a>
 8107bf8:	68bb      	ldr	r3, [r7, #8]
 8107bfa:	2b00      	cmp	r3, #0
 8107bfc:	d113      	bne.n	8107c26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107bfe:	68fb      	ldr	r3, [r7, #12]
 8107c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c02:	f043 0220 	orr.w	r2, r3, #32
 8107c06:	68fb      	ldr	r3, [r7, #12]
 8107c08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8107c0a:	68fb      	ldr	r3, [r7, #12]
 8107c0c:	2220      	movs	r2, #32
 8107c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8107c12:	68fb      	ldr	r3, [r7, #12]
 8107c14:	2200      	movs	r2, #0
 8107c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107c1a:	68fb      	ldr	r3, [r7, #12]
 8107c1c:	2200      	movs	r2, #0
 8107c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8107c22:	2301      	movs	r3, #1
 8107c24:	e02e      	b.n	8107c84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107c26:	68fb      	ldr	r3, [r7, #12]
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	699b      	ldr	r3, [r3, #24]
 8107c2c:	f003 0320 	and.w	r3, r3, #32
 8107c30:	2b20      	cmp	r3, #32
 8107c32:	d1d5      	bne.n	8107be0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c34:	68fb      	ldr	r3, [r7, #12]
 8107c36:	681b      	ldr	r3, [r3, #0]
 8107c38:	2210      	movs	r2, #16
 8107c3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107c3c:	68fb      	ldr	r3, [r7, #12]
 8107c3e:	681b      	ldr	r3, [r3, #0]
 8107c40:	2220      	movs	r2, #32
 8107c42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107c44:	68f8      	ldr	r0, [r7, #12]
 8107c46:	f7ff febe 	bl	81079c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107c4a:	68fb      	ldr	r3, [r7, #12]
 8107c4c:	681b      	ldr	r3, [r3, #0]
 8107c4e:	6859      	ldr	r1, [r3, #4]
 8107c50:	68fb      	ldr	r3, [r7, #12]
 8107c52:	681a      	ldr	r2, [r3, #0]
 8107c54:	4b0d      	ldr	r3, [pc, #52]	; (8107c8c <I2C_IsAcknowledgeFailed+0xc8>)
 8107c56:	400b      	ands	r3, r1
 8107c58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107c5a:	68fb      	ldr	r3, [r7, #12]
 8107c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c5e:	f043 0204 	orr.w	r2, r3, #4
 8107c62:	68fb      	ldr	r3, [r7, #12]
 8107c64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8107c66:	68fb      	ldr	r3, [r7, #12]
 8107c68:	2220      	movs	r2, #32
 8107c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8107c6e:	68fb      	ldr	r3, [r7, #12]
 8107c70:	2200      	movs	r2, #0
 8107c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107c76:	68fb      	ldr	r3, [r7, #12]
 8107c78:	2200      	movs	r2, #0
 8107c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8107c7e:	2301      	movs	r3, #1
 8107c80:	e000      	b.n	8107c84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8107c82:	2300      	movs	r3, #0
}
 8107c84:	4618      	mov	r0, r3
 8107c86:	3710      	adds	r7, #16
 8107c88:	46bd      	mov	sp, r7
 8107c8a:	bd80      	pop	{r7, pc}
 8107c8c:	fe00e800 	.word	0xfe00e800

08107c90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8107c90:	b480      	push	{r7}
 8107c92:	b085      	sub	sp, #20
 8107c94:	af00      	add	r7, sp, #0
 8107c96:	60f8      	str	r0, [r7, #12]
 8107c98:	607b      	str	r3, [r7, #4]
 8107c9a:	460b      	mov	r3, r1
 8107c9c:	817b      	strh	r3, [r7, #10]
 8107c9e:	4613      	mov	r3, r2
 8107ca0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8107ca2:	68fb      	ldr	r3, [r7, #12]
 8107ca4:	681b      	ldr	r3, [r3, #0]
 8107ca6:	685a      	ldr	r2, [r3, #4]
 8107ca8:	69bb      	ldr	r3, [r7, #24]
 8107caa:	0d5b      	lsrs	r3, r3, #21
 8107cac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8107cb0:	4b0d      	ldr	r3, [pc, #52]	; (8107ce8 <I2C_TransferConfig+0x58>)
 8107cb2:	430b      	orrs	r3, r1
 8107cb4:	43db      	mvns	r3, r3
 8107cb6:	ea02 0103 	and.w	r1, r2, r3
 8107cba:	897b      	ldrh	r3, [r7, #10]
 8107cbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8107cc0:	7a7b      	ldrb	r3, [r7, #9]
 8107cc2:	041b      	lsls	r3, r3, #16
 8107cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8107cc8:	431a      	orrs	r2, r3
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	431a      	orrs	r2, r3
 8107cce:	69bb      	ldr	r3, [r7, #24]
 8107cd0:	431a      	orrs	r2, r3
 8107cd2:	68fb      	ldr	r3, [r7, #12]
 8107cd4:	681b      	ldr	r3, [r3, #0]
 8107cd6:	430a      	orrs	r2, r1
 8107cd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8107cda:	bf00      	nop
 8107cdc:	3714      	adds	r7, #20
 8107cde:	46bd      	mov	sp, r7
 8107ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ce4:	4770      	bx	lr
 8107ce6:	bf00      	nop
 8107ce8:	03ff63ff 	.word	0x03ff63ff

08107cec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8107cec:	b480      	push	{r7}
 8107cee:	b085      	sub	sp, #20
 8107cf0:	af00      	add	r7, sp, #0
 8107cf2:	6078      	str	r0, [r7, #4]
 8107cf4:	460b      	mov	r3, r1
 8107cf6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8107cf8:	2300      	movs	r3, #0
 8107cfa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8107cfc:	887b      	ldrh	r3, [r7, #2]
 8107cfe:	f003 0301 	and.w	r3, r3, #1
 8107d02:	2b00      	cmp	r3, #0
 8107d04:	d00f      	beq.n	8107d26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8107d06:	68fb      	ldr	r3, [r7, #12]
 8107d08:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8107d0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d14:	b2db      	uxtb	r3, r3
 8107d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107d1a:	2b28      	cmp	r3, #40	; 0x28
 8107d1c:	d003      	beq.n	8107d26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107d1e:	68fb      	ldr	r3, [r7, #12]
 8107d20:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8107d24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8107d26:	887b      	ldrh	r3, [r7, #2]
 8107d28:	f003 0302 	and.w	r3, r3, #2
 8107d2c:	2b00      	cmp	r3, #0
 8107d2e:	d00f      	beq.n	8107d50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8107d30:	68fb      	ldr	r3, [r7, #12]
 8107d32:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8107d36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d3e:	b2db      	uxtb	r3, r3
 8107d40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107d44:	2b28      	cmp	r3, #40	; 0x28
 8107d46:	d003      	beq.n	8107d50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107d48:	68fb      	ldr	r3, [r7, #12]
 8107d4a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8107d4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8107d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8107d54:	2b00      	cmp	r3, #0
 8107d56:	da03      	bge.n	8107d60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8107d58:	68fb      	ldr	r3, [r7, #12]
 8107d5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8107d5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8107d60:	887b      	ldrh	r3, [r7, #2]
 8107d62:	2b10      	cmp	r3, #16
 8107d64:	d103      	bne.n	8107d6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8107d66:	68fb      	ldr	r3, [r7, #12]
 8107d68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8107d6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8107d6e:	887b      	ldrh	r3, [r7, #2]
 8107d70:	2b20      	cmp	r3, #32
 8107d72:	d103      	bne.n	8107d7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8107d74:	68fb      	ldr	r3, [r7, #12]
 8107d76:	f043 0320 	orr.w	r3, r3, #32
 8107d7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8107d7c:	887b      	ldrh	r3, [r7, #2]
 8107d7e:	2b40      	cmp	r3, #64	; 0x40
 8107d80:	d103      	bne.n	8107d8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8107d82:	68fb      	ldr	r3, [r7, #12]
 8107d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8107d88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8107d8a:	687b      	ldr	r3, [r7, #4]
 8107d8c:	681b      	ldr	r3, [r3, #0]
 8107d8e:	6819      	ldr	r1, [r3, #0]
 8107d90:	68fb      	ldr	r3, [r7, #12]
 8107d92:	43da      	mvns	r2, r3
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	681b      	ldr	r3, [r3, #0]
 8107d98:	400a      	ands	r2, r1
 8107d9a:	601a      	str	r2, [r3, #0]
}
 8107d9c:	bf00      	nop
 8107d9e:	3714      	adds	r7, #20
 8107da0:	46bd      	mov	sp, r7
 8107da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107da6:	4770      	bx	lr

08107da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8107da8:	b480      	push	{r7}
 8107daa:	b083      	sub	sp, #12
 8107dac:	af00      	add	r7, sp, #0
 8107dae:	6078      	str	r0, [r7, #4]
 8107db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107db8:	b2db      	uxtb	r3, r3
 8107dba:	2b20      	cmp	r3, #32
 8107dbc:	d138      	bne.n	8107e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107dc4:	2b01      	cmp	r3, #1
 8107dc6:	d101      	bne.n	8107dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8107dc8:	2302      	movs	r3, #2
 8107dca:	e032      	b.n	8107e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	2201      	movs	r2, #1
 8107dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107dd4:	687b      	ldr	r3, [r7, #4]
 8107dd6:	2224      	movs	r2, #36	; 0x24
 8107dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107ddc:	687b      	ldr	r3, [r7, #4]
 8107dde:	681b      	ldr	r3, [r3, #0]
 8107de0:	681a      	ldr	r2, [r3, #0]
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	681b      	ldr	r3, [r3, #0]
 8107de6:	f022 0201 	bic.w	r2, r2, #1
 8107dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	681a      	ldr	r2, [r3, #0]
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	681b      	ldr	r3, [r3, #0]
 8107df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8107dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	681b      	ldr	r3, [r3, #0]
 8107e00:	6819      	ldr	r1, [r3, #0]
 8107e02:	687b      	ldr	r3, [r7, #4]
 8107e04:	681b      	ldr	r3, [r3, #0]
 8107e06:	683a      	ldr	r2, [r7, #0]
 8107e08:	430a      	orrs	r2, r1
 8107e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	681b      	ldr	r3, [r3, #0]
 8107e10:	681a      	ldr	r2, [r3, #0]
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	f042 0201 	orr.w	r2, r2, #1
 8107e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	2220      	movs	r2, #32
 8107e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	2200      	movs	r2, #0
 8107e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8107e2c:	2300      	movs	r3, #0
 8107e2e:	e000      	b.n	8107e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8107e30:	2302      	movs	r3, #2
  }
}
 8107e32:	4618      	mov	r0, r3
 8107e34:	370c      	adds	r7, #12
 8107e36:	46bd      	mov	sp, r7
 8107e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e3c:	4770      	bx	lr

08107e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8107e3e:	b480      	push	{r7}
 8107e40:	b085      	sub	sp, #20
 8107e42:	af00      	add	r7, sp, #0
 8107e44:	6078      	str	r0, [r7, #4]
 8107e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107e4e:	b2db      	uxtb	r3, r3
 8107e50:	2b20      	cmp	r3, #32
 8107e52:	d139      	bne.n	8107ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107e5a:	2b01      	cmp	r3, #1
 8107e5c:	d101      	bne.n	8107e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8107e5e:	2302      	movs	r3, #2
 8107e60:	e033      	b.n	8107eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	2201      	movs	r2, #1
 8107e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8107e6a:	687b      	ldr	r3, [r7, #4]
 8107e6c:	2224      	movs	r2, #36	; 0x24
 8107e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	681a      	ldr	r2, [r3, #0]
 8107e78:	687b      	ldr	r3, [r7, #4]
 8107e7a:	681b      	ldr	r3, [r3, #0]
 8107e7c:	f022 0201 	bic.w	r2, r2, #1
 8107e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	681b      	ldr	r3, [r3, #0]
 8107e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8107e8a:	68fb      	ldr	r3, [r7, #12]
 8107e8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8107e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8107e92:	683b      	ldr	r3, [r7, #0]
 8107e94:	021b      	lsls	r3, r3, #8
 8107e96:	68fa      	ldr	r2, [r7, #12]
 8107e98:	4313      	orrs	r3, r2
 8107e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8107e9c:	687b      	ldr	r3, [r7, #4]
 8107e9e:	681b      	ldr	r3, [r3, #0]
 8107ea0:	68fa      	ldr	r2, [r7, #12]
 8107ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	681b      	ldr	r3, [r3, #0]
 8107ea8:	681a      	ldr	r2, [r3, #0]
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	681b      	ldr	r3, [r3, #0]
 8107eae:	f042 0201 	orr.w	r2, r2, #1
 8107eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	2220      	movs	r2, #32
 8107eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	2200      	movs	r2, #0
 8107ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8107ec4:	2300      	movs	r3, #0
 8107ec6:	e000      	b.n	8107eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8107ec8:	2302      	movs	r3, #2
  }
}
 8107eca:	4618      	mov	r0, r3
 8107ecc:	3714      	adds	r7, #20
 8107ece:	46bd      	mov	sp, r7
 8107ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ed4:	4770      	bx	lr
	...

08107ed8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107ed8:	b580      	push	{r7, lr}
 8107eda:	b084      	sub	sp, #16
 8107edc:	af00      	add	r7, sp, #0
 8107ede:	60f8      	str	r0, [r7, #12]
 8107ee0:	460b      	mov	r3, r1
 8107ee2:	607a      	str	r2, [r7, #4]
 8107ee4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107ee6:	4b37      	ldr	r3, [pc, #220]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107ee8:	681b      	ldr	r3, [r3, #0]
 8107eea:	f023 0201 	bic.w	r2, r3, #1
 8107eee:	4935      	ldr	r1, [pc, #212]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107ef0:	68fb      	ldr	r3, [r7, #12]
 8107ef2:	4313      	orrs	r3, r2
 8107ef4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107ef6:	687b      	ldr	r3, [r7, #4]
 8107ef8:	2b00      	cmp	r3, #0
 8107efa:	d123      	bne.n	8107f44 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8107efc:	f7fb fbd6 	bl	81036ac <HAL_GetCurrentCPUID>
 8107f00:	4603      	mov	r3, r0
 8107f02:	2b03      	cmp	r3, #3
 8107f04:	d158      	bne.n	8107fb8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107f06:	4b2f      	ldr	r3, [pc, #188]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f08:	691b      	ldr	r3, [r3, #16]
 8107f0a:	4a2e      	ldr	r2, [pc, #184]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f0c:	f023 0301 	bic.w	r3, r3, #1
 8107f10:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107f12:	4b2d      	ldr	r3, [pc, #180]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f14:	691b      	ldr	r3, [r3, #16]
 8107f16:	4a2c      	ldr	r2, [pc, #176]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f18:	f043 0304 	orr.w	r3, r3, #4
 8107f1c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8107f1e:	f3bf 8f4f 	dsb	sy
}
 8107f22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107f24:	f3bf 8f6f 	isb	sy
}
 8107f28:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107f2a:	7afb      	ldrb	r3, [r7, #11]
 8107f2c:	2b01      	cmp	r3, #1
 8107f2e:	d101      	bne.n	8107f34 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107f30:	bf30      	wfi
 8107f32:	e000      	b.n	8107f36 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107f34:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107f36:	4b24      	ldr	r3, [pc, #144]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f38:	691b      	ldr	r3, [r3, #16]
 8107f3a:	4a23      	ldr	r2, [pc, #140]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f3c:	f023 0304 	bic.w	r3, r3, #4
 8107f40:	6113      	str	r3, [r2, #16]
 8107f42:	e03c      	b.n	8107fbe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	2b01      	cmp	r3, #1
 8107f48:	d123      	bne.n	8107f92 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8107f4a:	f7fb fbaf 	bl	81036ac <HAL_GetCurrentCPUID>
 8107f4e:	4603      	mov	r3, r0
 8107f50:	2b01      	cmp	r3, #1
 8107f52:	d133      	bne.n	8107fbc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8107f54:	4b1b      	ldr	r3, [pc, #108]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f56:	695b      	ldr	r3, [r3, #20]
 8107f58:	4a1a      	ldr	r2, [pc, #104]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f5a:	f023 0302 	bic.w	r3, r3, #2
 8107f5e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107f60:	4b19      	ldr	r3, [pc, #100]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f62:	691b      	ldr	r3, [r3, #16]
 8107f64:	4a18      	ldr	r2, [pc, #96]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f66:	f043 0304 	orr.w	r3, r3, #4
 8107f6a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8107f6c:	f3bf 8f4f 	dsb	sy
}
 8107f70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8107f72:	f3bf 8f6f 	isb	sy
}
 8107f76:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8107f78:	7afb      	ldrb	r3, [r7, #11]
 8107f7a:	2b01      	cmp	r3, #1
 8107f7c:	d101      	bne.n	8107f82 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8107f7e:	bf30      	wfi
 8107f80:	e000      	b.n	8107f84 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107f82:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107f84:	4b10      	ldr	r3, [pc, #64]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f86:	691b      	ldr	r3, [r3, #16]
 8107f88:	4a0f      	ldr	r2, [pc, #60]	; (8107fc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107f8a:	f023 0304 	bic.w	r3, r3, #4
 8107f8e:	6113      	str	r3, [r2, #16]
 8107f90:	e015      	b.n	8107fbe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107f92:	f7fb fb8b 	bl	81036ac <HAL_GetCurrentCPUID>
 8107f96:	4603      	mov	r3, r0
 8107f98:	2b03      	cmp	r3, #3
 8107f9a:	d106      	bne.n	8107faa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107f9c:	4b09      	ldr	r3, [pc, #36]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107f9e:	691b      	ldr	r3, [r3, #16]
 8107fa0:	4a08      	ldr	r2, [pc, #32]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107fa2:	f023 0304 	bic.w	r3, r3, #4
 8107fa6:	6113      	str	r3, [r2, #16]
 8107fa8:	e009      	b.n	8107fbe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8107faa:	4b06      	ldr	r3, [pc, #24]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107fac:	695b      	ldr	r3, [r3, #20]
 8107fae:	4a05      	ldr	r2, [pc, #20]	; (8107fc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107fb0:	f023 0304 	bic.w	r3, r3, #4
 8107fb4:	6153      	str	r3, [r2, #20]
 8107fb6:	e002      	b.n	8107fbe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107fb8:	bf00      	nop
 8107fba:	e000      	b.n	8107fbe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107fbc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107fbe:	3710      	adds	r7, #16
 8107fc0:	46bd      	mov	sp, r7
 8107fc2:	bd80      	pop	{r7, pc}
 8107fc4:	58024800 	.word	0x58024800
 8107fc8:	e000ed00 	.word	0xe000ed00

08107fcc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107fcc:	b580      	push	{r7, lr}
 8107fce:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107fd0:	f7fb fb6c 	bl	81036ac <HAL_GetCurrentCPUID>
 8107fd4:	4603      	mov	r3, r0
 8107fd6:	2b03      	cmp	r3, #3
 8107fd8:	d101      	bne.n	8107fde <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8107fda:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107fdc:	e001      	b.n	8107fe2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107fde:	bf40      	sev
    __WFE ();
 8107fe0:	bf20      	wfe
}
 8107fe2:	bf00      	nop
 8107fe4:	bd80      	pop	{r7, pc}
	...

08107fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107fe8:	b480      	push	{r7}
 8107fea:	b089      	sub	sp, #36	; 0x24
 8107fec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107fee:	4bb3      	ldr	r3, [pc, #716]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107ff0:	691b      	ldr	r3, [r3, #16]
 8107ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107ff6:	2b18      	cmp	r3, #24
 8107ff8:	f200 8155 	bhi.w	81082a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8107ffc:	a201      	add	r2, pc, #4	; (adr r2, 8108004 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108002:	bf00      	nop
 8108004:	08108069 	.word	0x08108069
 8108008:	081082a7 	.word	0x081082a7
 810800c:	081082a7 	.word	0x081082a7
 8108010:	081082a7 	.word	0x081082a7
 8108014:	081082a7 	.word	0x081082a7
 8108018:	081082a7 	.word	0x081082a7
 810801c:	081082a7 	.word	0x081082a7
 8108020:	081082a7 	.word	0x081082a7
 8108024:	0810808f 	.word	0x0810808f
 8108028:	081082a7 	.word	0x081082a7
 810802c:	081082a7 	.word	0x081082a7
 8108030:	081082a7 	.word	0x081082a7
 8108034:	081082a7 	.word	0x081082a7
 8108038:	081082a7 	.word	0x081082a7
 810803c:	081082a7 	.word	0x081082a7
 8108040:	081082a7 	.word	0x081082a7
 8108044:	08108095 	.word	0x08108095
 8108048:	081082a7 	.word	0x081082a7
 810804c:	081082a7 	.word	0x081082a7
 8108050:	081082a7 	.word	0x081082a7
 8108054:	081082a7 	.word	0x081082a7
 8108058:	081082a7 	.word	0x081082a7
 810805c:	081082a7 	.word	0x081082a7
 8108060:	081082a7 	.word	0x081082a7
 8108064:	0810809b 	.word	0x0810809b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108068:	4b94      	ldr	r3, [pc, #592]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810806a:	681b      	ldr	r3, [r3, #0]
 810806c:	f003 0320 	and.w	r3, r3, #32
 8108070:	2b00      	cmp	r3, #0
 8108072:	d009      	beq.n	8108088 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108074:	4b91      	ldr	r3, [pc, #580]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108076:	681b      	ldr	r3, [r3, #0]
 8108078:	08db      	lsrs	r3, r3, #3
 810807a:	f003 0303 	and.w	r3, r3, #3
 810807e:	4a90      	ldr	r2, [pc, #576]	; (81082c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108080:	fa22 f303 	lsr.w	r3, r2, r3
 8108084:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8108086:	e111      	b.n	81082ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8108088:	4b8d      	ldr	r3, [pc, #564]	; (81082c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810808a:	61bb      	str	r3, [r7, #24]
    break;
 810808c:	e10e      	b.n	81082ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810808e:	4b8d      	ldr	r3, [pc, #564]	; (81082c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108090:	61bb      	str	r3, [r7, #24]
    break;
 8108092:	e10b      	b.n	81082ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108094:	4b8c      	ldr	r3, [pc, #560]	; (81082c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8108096:	61bb      	str	r3, [r7, #24]
    break;
 8108098:	e108      	b.n	81082ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810809a:	4b88      	ldr	r3, [pc, #544]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810809e:	f003 0303 	and.w	r3, r3, #3
 81080a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81080a4:	4b85      	ldr	r3, [pc, #532]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080a8:	091b      	lsrs	r3, r3, #4
 81080aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81080ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81080b0:	4b82      	ldr	r3, [pc, #520]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81080b4:	f003 0301 	and.w	r3, r3, #1
 81080b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81080ba:	4b80      	ldr	r3, [pc, #512]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81080be:	08db      	lsrs	r3, r3, #3
 81080c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81080c4:	68fa      	ldr	r2, [r7, #12]
 81080c6:	fb02 f303 	mul.w	r3, r2, r3
 81080ca:	ee07 3a90 	vmov	s15, r3
 81080ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81080d6:	693b      	ldr	r3, [r7, #16]
 81080d8:	2b00      	cmp	r3, #0
 81080da:	f000 80e1 	beq.w	81082a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81080de:	697b      	ldr	r3, [r7, #20]
 81080e0:	2b02      	cmp	r3, #2
 81080e2:	f000 8083 	beq.w	81081ec <HAL_RCC_GetSysClockFreq+0x204>
 81080e6:	697b      	ldr	r3, [r7, #20]
 81080e8:	2b02      	cmp	r3, #2
 81080ea:	f200 80a1 	bhi.w	8108230 <HAL_RCC_GetSysClockFreq+0x248>
 81080ee:	697b      	ldr	r3, [r7, #20]
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d003      	beq.n	81080fc <HAL_RCC_GetSysClockFreq+0x114>
 81080f4:	697b      	ldr	r3, [r7, #20]
 81080f6:	2b01      	cmp	r3, #1
 81080f8:	d056      	beq.n	81081a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 81080fa:	e099      	b.n	8108230 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81080fc:	4b6f      	ldr	r3, [pc, #444]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81080fe:	681b      	ldr	r3, [r3, #0]
 8108100:	f003 0320 	and.w	r3, r3, #32
 8108104:	2b00      	cmp	r3, #0
 8108106:	d02d      	beq.n	8108164 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108108:	4b6c      	ldr	r3, [pc, #432]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	08db      	lsrs	r3, r3, #3
 810810e:	f003 0303 	and.w	r3, r3, #3
 8108112:	4a6b      	ldr	r2, [pc, #428]	; (81082c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108114:	fa22 f303 	lsr.w	r3, r2, r3
 8108118:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	ee07 3a90 	vmov	s15, r3
 8108120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108124:	693b      	ldr	r3, [r7, #16]
 8108126:	ee07 3a90 	vmov	s15, r3
 810812a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108132:	4b62      	ldr	r3, [pc, #392]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810813a:	ee07 3a90 	vmov	s15, r3
 810813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108142:	ed97 6a02 	vldr	s12, [r7, #8]
 8108146:	eddf 5a61 	vldr	s11, [pc, #388]	; 81082cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810815e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8108162:	e087      	b.n	8108274 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108164:	693b      	ldr	r3, [r7, #16]
 8108166:	ee07 3a90 	vmov	s15, r3
 810816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810816e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81082d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8108172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108176:	4b51      	ldr	r3, [pc, #324]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810817e:	ee07 3a90 	vmov	s15, r3
 8108182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108186:	ed97 6a02 	vldr	s12, [r7, #8]
 810818a:	eddf 5a50 	vldr	s11, [pc, #320]	; 81082cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810818e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810819a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810819e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81081a6:	e065      	b.n	8108274 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81081a8:	693b      	ldr	r3, [r7, #16]
 81081aa:	ee07 3a90 	vmov	s15, r3
 81081ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 81082d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81081b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81081ba:	4b40      	ldr	r3, [pc, #256]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81081be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81081c2:	ee07 3a90 	vmov	s15, r3
 81081c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81081ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81081ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81082cc <HAL_RCC_GetSysClockFreq+0x2e4>
 81081d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81081d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81081da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81081de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81081e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81081ea:	e043      	b.n	8108274 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81081ec:	693b      	ldr	r3, [r7, #16]
 81081ee:	ee07 3a90 	vmov	s15, r3
 81081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 81082d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81081fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81081fe:	4b2f      	ldr	r3, [pc, #188]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108206:	ee07 3a90 	vmov	s15, r3
 810820a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810820e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108212:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81082cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8108216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810821a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810821e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108226:	ee67 7a27 	vmul.f32	s15, s14, s15
 810822a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810822e:	e021      	b.n	8108274 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108230:	693b      	ldr	r3, [r7, #16]
 8108232:	ee07 3a90 	vmov	s15, r3
 8108236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810823a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81082d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810823e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108242:	4b1e      	ldr	r3, [pc, #120]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810824a:	ee07 3a90 	vmov	s15, r3
 810824e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108252:	ed97 6a02 	vldr	s12, [r7, #8]
 8108256:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81082cc <HAL_RCC_GetSysClockFreq+0x2e4>
 810825a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810825e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810826a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810826e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108272:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108274:	4b11      	ldr	r3, [pc, #68]	; (81082bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108278:	0a5b      	lsrs	r3, r3, #9
 810827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810827e:	3301      	adds	r3, #1
 8108280:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8108282:	683b      	ldr	r3, [r7, #0]
 8108284:	ee07 3a90 	vmov	s15, r3
 8108288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810828c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108298:	ee17 3a90 	vmov	r3, s15
 810829c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810829e:	e005      	b.n	81082ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81082a0:	2300      	movs	r3, #0
 81082a2:	61bb      	str	r3, [r7, #24]
    break;
 81082a4:	e002      	b.n	81082ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81082a6:	4b07      	ldr	r3, [pc, #28]	; (81082c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81082a8:	61bb      	str	r3, [r7, #24]
    break;
 81082aa:	bf00      	nop
  }

  return sysclockfreq;
 81082ac:	69bb      	ldr	r3, [r7, #24]
}
 81082ae:	4618      	mov	r0, r3
 81082b0:	3724      	adds	r7, #36	; 0x24
 81082b2:	46bd      	mov	sp, r7
 81082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082b8:	4770      	bx	lr
 81082ba:	bf00      	nop
 81082bc:	58024400 	.word	0x58024400
 81082c0:	03d09000 	.word	0x03d09000
 81082c4:	003d0900 	.word	0x003d0900
 81082c8:	00f42400 	.word	0x00f42400
 81082cc:	46000000 	.word	0x46000000
 81082d0:	4c742400 	.word	0x4c742400
 81082d4:	4a742400 	.word	0x4a742400
 81082d8:	4b742400 	.word	0x4b742400

081082dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81082dc:	b580      	push	{r7, lr}
 81082de:	b082      	sub	sp, #8
 81082e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81082e2:	f7ff fe81 	bl	8107fe8 <HAL_RCC_GetSysClockFreq>
 81082e6:	4602      	mov	r2, r0
 81082e8:	4b11      	ldr	r3, [pc, #68]	; (8108330 <HAL_RCC_GetHCLKFreq+0x54>)
 81082ea:	699b      	ldr	r3, [r3, #24]
 81082ec:	0a1b      	lsrs	r3, r3, #8
 81082ee:	f003 030f 	and.w	r3, r3, #15
 81082f2:	4910      	ldr	r1, [pc, #64]	; (8108334 <HAL_RCC_GetHCLKFreq+0x58>)
 81082f4:	5ccb      	ldrb	r3, [r1, r3]
 81082f6:	f003 031f 	and.w	r3, r3, #31
 81082fa:	fa22 f303 	lsr.w	r3, r2, r3
 81082fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108300:	4b0b      	ldr	r3, [pc, #44]	; (8108330 <HAL_RCC_GetHCLKFreq+0x54>)
 8108302:	699b      	ldr	r3, [r3, #24]
 8108304:	f003 030f 	and.w	r3, r3, #15
 8108308:	4a0a      	ldr	r2, [pc, #40]	; (8108334 <HAL_RCC_GetHCLKFreq+0x58>)
 810830a:	5cd3      	ldrb	r3, [r2, r3]
 810830c:	f003 031f 	and.w	r3, r3, #31
 8108310:	687a      	ldr	r2, [r7, #4]
 8108312:	fa22 f303 	lsr.w	r3, r2, r3
 8108316:	4a08      	ldr	r2, [pc, #32]	; (8108338 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108318:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810831a:	4b07      	ldr	r3, [pc, #28]	; (8108338 <HAL_RCC_GetHCLKFreq+0x5c>)
 810831c:	681b      	ldr	r3, [r3, #0]
 810831e:	4a07      	ldr	r2, [pc, #28]	; (810833c <HAL_RCC_GetHCLKFreq+0x60>)
 8108320:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8108322:	4b05      	ldr	r3, [pc, #20]	; (8108338 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108324:	681b      	ldr	r3, [r3, #0]
}
 8108326:	4618      	mov	r0, r3
 8108328:	3708      	adds	r7, #8
 810832a:	46bd      	mov	sp, r7
 810832c:	bd80      	pop	{r7, pc}
 810832e:	bf00      	nop
 8108330:	58024400 	.word	0x58024400
 8108334:	0810d2ac 	.word	0x0810d2ac
 8108338:	10000004 	.word	0x10000004
 810833c:	10000000 	.word	0x10000000

08108340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8108340:	b580      	push	{r7, lr}
 8108342:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108344:	f7ff ffca 	bl	81082dc <HAL_RCC_GetHCLKFreq>
 8108348:	4602      	mov	r2, r0
 810834a:	4b06      	ldr	r3, [pc, #24]	; (8108364 <HAL_RCC_GetPCLK1Freq+0x24>)
 810834c:	69db      	ldr	r3, [r3, #28]
 810834e:	091b      	lsrs	r3, r3, #4
 8108350:	f003 0307 	and.w	r3, r3, #7
 8108354:	4904      	ldr	r1, [pc, #16]	; (8108368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8108356:	5ccb      	ldrb	r3, [r1, r3]
 8108358:	f003 031f 	and.w	r3, r3, #31
 810835c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8108360:	4618      	mov	r0, r3
 8108362:	bd80      	pop	{r7, pc}
 8108364:	58024400 	.word	0x58024400
 8108368:	0810d2ac 	.word	0x0810d2ac

0810836c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810836c:	b580      	push	{r7, lr}
 810836e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8108370:	f7ff ffb4 	bl	81082dc <HAL_RCC_GetHCLKFreq>
 8108374:	4602      	mov	r2, r0
 8108376:	4b06      	ldr	r3, [pc, #24]	; (8108390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8108378:	69db      	ldr	r3, [r3, #28]
 810837a:	0a1b      	lsrs	r3, r3, #8
 810837c:	f003 0307 	and.w	r3, r3, #7
 8108380:	4904      	ldr	r1, [pc, #16]	; (8108394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8108382:	5ccb      	ldrb	r3, [r1, r3]
 8108384:	f003 031f 	and.w	r3, r3, #31
 8108388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810838c:	4618      	mov	r0, r3
 810838e:	bd80      	pop	{r7, pc}
 8108390:	58024400 	.word	0x58024400
 8108394:	0810d2ac 	.word	0x0810d2ac

08108398 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8108398:	b580      	push	{r7, lr}
 810839a:	b086      	sub	sp, #24
 810839c:	af00      	add	r7, sp, #0
 810839e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81083a0:	2300      	movs	r3, #0
 81083a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81083a4:	2300      	movs	r3, #0
 81083a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81083a8:	687b      	ldr	r3, [r7, #4]
 81083aa:	681b      	ldr	r3, [r3, #0]
 81083ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81083b0:	2b00      	cmp	r3, #0
 81083b2:	d03f      	beq.n	8108434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81083b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81083bc:	d02a      	beq.n	8108414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81083be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81083c2:	d824      	bhi.n	810840e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81083c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81083c8:	d018      	beq.n	81083fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 81083ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81083ce:	d81e      	bhi.n	810840e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81083d0:	2b00      	cmp	r3, #0
 81083d2:	d003      	beq.n	81083dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 81083d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81083d8:	d007      	beq.n	81083ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 81083da:	e018      	b.n	810840e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81083dc:	4bab      	ldr	r3, [pc, #684]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81083e0:	4aaa      	ldr	r2, [pc, #680]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81083e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81083e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81083e8:	e015      	b.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81083ea:	687b      	ldr	r3, [r7, #4]
 81083ec:	3304      	adds	r3, #4
 81083ee:	2102      	movs	r1, #2
 81083f0:	4618      	mov	r0, r3
 81083f2:	f001 f9cf 	bl	8109794 <RCCEx_PLL2_Config>
 81083f6:	4603      	mov	r3, r0
 81083f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81083fa:	e00c      	b.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81083fc:	687b      	ldr	r3, [r7, #4]
 81083fe:	3324      	adds	r3, #36	; 0x24
 8108400:	2102      	movs	r1, #2
 8108402:	4618      	mov	r0, r3
 8108404:	f001 fa78 	bl	81098f8 <RCCEx_PLL3_Config>
 8108408:	4603      	mov	r3, r0
 810840a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810840c:	e003      	b.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810840e:	2301      	movs	r3, #1
 8108410:	75fb      	strb	r3, [r7, #23]
      break;
 8108412:	e000      	b.n	8108416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8108414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108416:	7dfb      	ldrb	r3, [r7, #23]
 8108418:	2b00      	cmp	r3, #0
 810841a:	d109      	bne.n	8108430 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810841c:	4b9b      	ldr	r3, [pc, #620]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810841e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108428:	4998      	ldr	r1, [pc, #608]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810842a:	4313      	orrs	r3, r2
 810842c:	650b      	str	r3, [r1, #80]	; 0x50
 810842e:	e001      	b.n	8108434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108430:	7dfb      	ldrb	r3, [r7, #23]
 8108432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	681b      	ldr	r3, [r3, #0]
 8108438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810843c:	2b00      	cmp	r3, #0
 810843e:	d03d      	beq.n	81084bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108444:	2b04      	cmp	r3, #4
 8108446:	d826      	bhi.n	8108496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108448:	a201      	add	r2, pc, #4	; (adr r2, 8108450 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810844e:	bf00      	nop
 8108450:	08108465 	.word	0x08108465
 8108454:	08108473 	.word	0x08108473
 8108458:	08108485 	.word	0x08108485
 810845c:	0810849d 	.word	0x0810849d
 8108460:	0810849d 	.word	0x0810849d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108464:	4b89      	ldr	r3, [pc, #548]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108468:	4a88      	ldr	r2, [pc, #544]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810846a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810846e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108470:	e015      	b.n	810849e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	3304      	adds	r3, #4
 8108476:	2100      	movs	r1, #0
 8108478:	4618      	mov	r0, r3
 810847a:	f001 f98b 	bl	8109794 <RCCEx_PLL2_Config>
 810847e:	4603      	mov	r3, r0
 8108480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108482:	e00c      	b.n	810849e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	3324      	adds	r3, #36	; 0x24
 8108488:	2100      	movs	r1, #0
 810848a:	4618      	mov	r0, r3
 810848c:	f001 fa34 	bl	81098f8 <RCCEx_PLL3_Config>
 8108490:	4603      	mov	r3, r0
 8108492:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108494:	e003      	b.n	810849e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108496:	2301      	movs	r3, #1
 8108498:	75fb      	strb	r3, [r7, #23]
      break;
 810849a:	e000      	b.n	810849e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 810849c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810849e:	7dfb      	ldrb	r3, [r7, #23]
 81084a0:	2b00      	cmp	r3, #0
 81084a2:	d109      	bne.n	81084b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81084a4:	4b79      	ldr	r3, [pc, #484]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81084a8:	f023 0207 	bic.w	r2, r3, #7
 81084ac:	687b      	ldr	r3, [r7, #4]
 81084ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81084b0:	4976      	ldr	r1, [pc, #472]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81084b2:	4313      	orrs	r3, r2
 81084b4:	650b      	str	r3, [r1, #80]	; 0x50
 81084b6:	e001      	b.n	81084bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81084b8:	7dfb      	ldrb	r3, [r7, #23]
 81084ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	681b      	ldr	r3, [r3, #0]
 81084c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	d042      	beq.n	810854e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81084c8:	687b      	ldr	r3, [r7, #4]
 81084ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81084cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81084d0:	d02b      	beq.n	810852a <HAL_RCCEx_PeriphCLKConfig+0x192>
 81084d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81084d6:	d825      	bhi.n	8108524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81084d8:	2bc0      	cmp	r3, #192	; 0xc0
 81084da:	d028      	beq.n	810852e <HAL_RCCEx_PeriphCLKConfig+0x196>
 81084dc:	2bc0      	cmp	r3, #192	; 0xc0
 81084de:	d821      	bhi.n	8108524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81084e0:	2b80      	cmp	r3, #128	; 0x80
 81084e2:	d016      	beq.n	8108512 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81084e4:	2b80      	cmp	r3, #128	; 0x80
 81084e6:	d81d      	bhi.n	8108524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81084e8:	2b00      	cmp	r3, #0
 81084ea:	d002      	beq.n	81084f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81084ec:	2b40      	cmp	r3, #64	; 0x40
 81084ee:	d007      	beq.n	8108500 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81084f0:	e018      	b.n	8108524 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81084f2:	4b66      	ldr	r3, [pc, #408]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81084f6:	4a65      	ldr	r2, [pc, #404]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81084f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81084fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81084fe:	e017      	b.n	8108530 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	3304      	adds	r3, #4
 8108504:	2100      	movs	r1, #0
 8108506:	4618      	mov	r0, r3
 8108508:	f001 f944 	bl	8109794 <RCCEx_PLL2_Config>
 810850c:	4603      	mov	r3, r0
 810850e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108510:	e00e      	b.n	8108530 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108512:	687b      	ldr	r3, [r7, #4]
 8108514:	3324      	adds	r3, #36	; 0x24
 8108516:	2100      	movs	r1, #0
 8108518:	4618      	mov	r0, r3
 810851a:	f001 f9ed 	bl	81098f8 <RCCEx_PLL3_Config>
 810851e:	4603      	mov	r3, r0
 8108520:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108522:	e005      	b.n	8108530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108524:	2301      	movs	r3, #1
 8108526:	75fb      	strb	r3, [r7, #23]
      break;
 8108528:	e002      	b.n	8108530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810852a:	bf00      	nop
 810852c:	e000      	b.n	8108530 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810852e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108530:	7dfb      	ldrb	r3, [r7, #23]
 8108532:	2b00      	cmp	r3, #0
 8108534:	d109      	bne.n	810854a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108536:	4b55      	ldr	r3, [pc, #340]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810853a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108542:	4952      	ldr	r1, [pc, #328]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108544:	4313      	orrs	r3, r2
 8108546:	650b      	str	r3, [r1, #80]	; 0x50
 8108548:	e001      	b.n	810854e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810854a:	7dfb      	ldrb	r3, [r7, #23]
 810854c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	681b      	ldr	r3, [r3, #0]
 8108552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108556:	2b00      	cmp	r3, #0
 8108558:	d049      	beq.n	81085ee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810855a:	687b      	ldr	r3, [r7, #4]
 810855c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108564:	d030      	beq.n	81085c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810856a:	d82a      	bhi.n	81085c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810856c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108570:	d02c      	beq.n	81085cc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8108572:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108576:	d824      	bhi.n	81085c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810857c:	d018      	beq.n	81085b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810857e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108582:	d81e      	bhi.n	81085c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108584:	2b00      	cmp	r3, #0
 8108586:	d003      	beq.n	8108590 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8108588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810858c:	d007      	beq.n	810859e <HAL_RCCEx_PeriphCLKConfig+0x206>
 810858e:	e018      	b.n	81085c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108590:	4b3e      	ldr	r3, [pc, #248]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108594:	4a3d      	ldr	r2, [pc, #244]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810859a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810859c:	e017      	b.n	81085ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810859e:	687b      	ldr	r3, [r7, #4]
 81085a0:	3304      	adds	r3, #4
 81085a2:	2100      	movs	r1, #0
 81085a4:	4618      	mov	r0, r3
 81085a6:	f001 f8f5 	bl	8109794 <RCCEx_PLL2_Config>
 81085aa:	4603      	mov	r3, r0
 81085ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81085ae:	e00e      	b.n	81085ce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	3324      	adds	r3, #36	; 0x24
 81085b4:	2100      	movs	r1, #0
 81085b6:	4618      	mov	r0, r3
 81085b8:	f001 f99e 	bl	81098f8 <RCCEx_PLL3_Config>
 81085bc:	4603      	mov	r3, r0
 81085be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81085c0:	e005      	b.n	81085ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81085c2:	2301      	movs	r3, #1
 81085c4:	75fb      	strb	r3, [r7, #23]
      break;
 81085c6:	e002      	b.n	81085ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81085c8:	bf00      	nop
 81085ca:	e000      	b.n	81085ce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81085cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81085ce:	7dfb      	ldrb	r3, [r7, #23]
 81085d0:	2b00      	cmp	r3, #0
 81085d2:	d10a      	bne.n	81085ea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81085d4:	4b2d      	ldr	r3, [pc, #180]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81085d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81085e2:	492a      	ldr	r1, [pc, #168]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81085e4:	4313      	orrs	r3, r2
 81085e6:	658b      	str	r3, [r1, #88]	; 0x58
 81085e8:	e001      	b.n	81085ee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085ea:	7dfb      	ldrb	r3, [r7, #23]
 81085ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	681b      	ldr	r3, [r3, #0]
 81085f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81085f6:	2b00      	cmp	r3, #0
 81085f8:	d04c      	beq.n	8108694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81085fa:	687b      	ldr	r3, [r7, #4]
 81085fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108604:	d030      	beq.n	8108668 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8108606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810860a:	d82a      	bhi.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810860c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108610:	d02c      	beq.n	810866c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8108612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108616:	d824      	bhi.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810861c:	d018      	beq.n	8108650 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810861e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108622:	d81e      	bhi.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108624:	2b00      	cmp	r3, #0
 8108626:	d003      	beq.n	8108630 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8108628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810862c:	d007      	beq.n	810863e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810862e:	e018      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108630:	4b16      	ldr	r3, [pc, #88]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108634:	4a15      	ldr	r2, [pc, #84]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810863a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810863c:	e017      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810863e:	687b      	ldr	r3, [r7, #4]
 8108640:	3304      	adds	r3, #4
 8108642:	2100      	movs	r1, #0
 8108644:	4618      	mov	r0, r3
 8108646:	f001 f8a5 	bl	8109794 <RCCEx_PLL2_Config>
 810864a:	4603      	mov	r3, r0
 810864c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810864e:	e00e      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	3324      	adds	r3, #36	; 0x24
 8108654:	2100      	movs	r1, #0
 8108656:	4618      	mov	r0, r3
 8108658:	f001 f94e 	bl	81098f8 <RCCEx_PLL3_Config>
 810865c:	4603      	mov	r3, r0
 810865e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108660:	e005      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8108662:	2301      	movs	r3, #1
 8108664:	75fb      	strb	r3, [r7, #23]
      break;
 8108666:	e002      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108668:	bf00      	nop
 810866a:	e000      	b.n	810866e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810866c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810866e:	7dfb      	ldrb	r3, [r7, #23]
 8108670:	2b00      	cmp	r3, #0
 8108672:	d10d      	bne.n	8108690 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108674:	4b05      	ldr	r3, [pc, #20]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108678:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108682:	4902      	ldr	r1, [pc, #8]	; (810868c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108684:	4313      	orrs	r3, r2
 8108686:	658b      	str	r3, [r1, #88]	; 0x58
 8108688:	e004      	b.n	8108694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810868a:	bf00      	nop
 810868c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108690:	7dfb      	ldrb	r3, [r7, #23]
 8108692:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810869c:	2b00      	cmp	r3, #0
 810869e:	d032      	beq.n	8108706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81086a4:	2b30      	cmp	r3, #48	; 0x30
 81086a6:	d01c      	beq.n	81086e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81086a8:	2b30      	cmp	r3, #48	; 0x30
 81086aa:	d817      	bhi.n	81086dc <HAL_RCCEx_PeriphCLKConfig+0x344>
 81086ac:	2b20      	cmp	r3, #32
 81086ae:	d00c      	beq.n	81086ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 81086b0:	2b20      	cmp	r3, #32
 81086b2:	d813      	bhi.n	81086dc <HAL_RCCEx_PeriphCLKConfig+0x344>
 81086b4:	2b00      	cmp	r3, #0
 81086b6:	d016      	beq.n	81086e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81086b8:	2b10      	cmp	r3, #16
 81086ba:	d10f      	bne.n	81086dc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81086bc:	4baf      	ldr	r3, [pc, #700]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086c0:	4aae      	ldr	r2, [pc, #696]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81086c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81086c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81086c8:	e00e      	b.n	81086e8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	3304      	adds	r3, #4
 81086ce:	2102      	movs	r1, #2
 81086d0:	4618      	mov	r0, r3
 81086d2:	f001 f85f 	bl	8109794 <RCCEx_PLL2_Config>
 81086d6:	4603      	mov	r3, r0
 81086d8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81086da:	e005      	b.n	81086e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81086dc:	2301      	movs	r3, #1
 81086de:	75fb      	strb	r3, [r7, #23]
      break;
 81086e0:	e002      	b.n	81086e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81086e2:	bf00      	nop
 81086e4:	e000      	b.n	81086e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81086e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81086e8:	7dfb      	ldrb	r3, [r7, #23]
 81086ea:	2b00      	cmp	r3, #0
 81086ec:	d109      	bne.n	8108702 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81086ee:	4ba3      	ldr	r3, [pc, #652]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81086f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81086f6:	687b      	ldr	r3, [r7, #4]
 81086f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81086fa:	49a0      	ldr	r1, [pc, #640]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81086fc:	4313      	orrs	r3, r2
 81086fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108700:	e001      	b.n	8108706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108702:	7dfb      	ldrb	r3, [r7, #23]
 8108704:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810870e:	2b00      	cmp	r3, #0
 8108710:	d047      	beq.n	81087a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8108712:	687b      	ldr	r3, [r7, #4]
 8108714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810871a:	d030      	beq.n	810877e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810871c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108720:	d82a      	bhi.n	8108778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108726:	d02c      	beq.n	8108782 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8108728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810872c:	d824      	bhi.n	8108778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810872e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108732:	d018      	beq.n	8108766 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8108734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108738:	d81e      	bhi.n	8108778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810873a:	2b00      	cmp	r3, #0
 810873c:	d003      	beq.n	8108746 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810873e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108742:	d007      	beq.n	8108754 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8108744:	e018      	b.n	8108778 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108746:	4b8d      	ldr	r3, [pc, #564]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810874a:	4a8c      	ldr	r2, [pc, #560]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810874c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108750:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108752:	e017      	b.n	8108784 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108754:	687b      	ldr	r3, [r7, #4]
 8108756:	3304      	adds	r3, #4
 8108758:	2100      	movs	r1, #0
 810875a:	4618      	mov	r0, r3
 810875c:	f001 f81a 	bl	8109794 <RCCEx_PLL2_Config>
 8108760:	4603      	mov	r3, r0
 8108762:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108764:	e00e      	b.n	8108784 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108766:	687b      	ldr	r3, [r7, #4]
 8108768:	3324      	adds	r3, #36	; 0x24
 810876a:	2100      	movs	r1, #0
 810876c:	4618      	mov	r0, r3
 810876e:	f001 f8c3 	bl	81098f8 <RCCEx_PLL3_Config>
 8108772:	4603      	mov	r3, r0
 8108774:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108776:	e005      	b.n	8108784 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108778:	2301      	movs	r3, #1
 810877a:	75fb      	strb	r3, [r7, #23]
      break;
 810877c:	e002      	b.n	8108784 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810877e:	bf00      	nop
 8108780:	e000      	b.n	8108784 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8108782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108784:	7dfb      	ldrb	r3, [r7, #23]
 8108786:	2b00      	cmp	r3, #0
 8108788:	d109      	bne.n	810879e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810878a:	4b7c      	ldr	r3, [pc, #496]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810878c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810878e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8108792:	687b      	ldr	r3, [r7, #4]
 8108794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108796:	4979      	ldr	r1, [pc, #484]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108798:	4313      	orrs	r3, r2
 810879a:	650b      	str	r3, [r1, #80]	; 0x50
 810879c:	e001      	b.n	81087a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810879e:	7dfb      	ldrb	r3, [r7, #23]
 81087a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81087a2:	687b      	ldr	r3, [r7, #4]
 81087a4:	681b      	ldr	r3, [r3, #0]
 81087a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81087aa:	2b00      	cmp	r3, #0
 81087ac:	d049      	beq.n	8108842 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81087ae:	687b      	ldr	r3, [r7, #4]
 81087b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81087b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81087b6:	d02e      	beq.n	8108816 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81087b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81087bc:	d828      	bhi.n	8108810 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81087be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81087c2:	d02a      	beq.n	810881a <HAL_RCCEx_PeriphCLKConfig+0x482>
 81087c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81087c8:	d822      	bhi.n	8108810 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81087ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81087ce:	d026      	beq.n	810881e <HAL_RCCEx_PeriphCLKConfig+0x486>
 81087d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81087d4:	d81c      	bhi.n	8108810 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81087d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81087da:	d010      	beq.n	81087fe <HAL_RCCEx_PeriphCLKConfig+0x466>
 81087dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81087e0:	d816      	bhi.n	8108810 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81087e2:	2b00      	cmp	r3, #0
 81087e4:	d01d      	beq.n	8108822 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81087e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81087ea:	d111      	bne.n	8108810 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	3304      	adds	r3, #4
 81087f0:	2101      	movs	r1, #1
 81087f2:	4618      	mov	r0, r3
 81087f4:	f000 ffce 	bl	8109794 <RCCEx_PLL2_Config>
 81087f8:	4603      	mov	r3, r0
 81087fa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81087fc:	e012      	b.n	8108824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81087fe:	687b      	ldr	r3, [r7, #4]
 8108800:	3324      	adds	r3, #36	; 0x24
 8108802:	2101      	movs	r1, #1
 8108804:	4618      	mov	r0, r3
 8108806:	f001 f877 	bl	81098f8 <RCCEx_PLL3_Config>
 810880a:	4603      	mov	r3, r0
 810880c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810880e:	e009      	b.n	8108824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108810:	2301      	movs	r3, #1
 8108812:	75fb      	strb	r3, [r7, #23]
      break;
 8108814:	e006      	b.n	8108824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108816:	bf00      	nop
 8108818:	e004      	b.n	8108824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810881a:	bf00      	nop
 810881c:	e002      	b.n	8108824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810881e:	bf00      	nop
 8108820:	e000      	b.n	8108824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108824:	7dfb      	ldrb	r3, [r7, #23]
 8108826:	2b00      	cmp	r3, #0
 8108828:	d109      	bne.n	810883e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810882a:	4b54      	ldr	r3, [pc, #336]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810882c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810882e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8108832:	687b      	ldr	r3, [r7, #4]
 8108834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108836:	4951      	ldr	r1, [pc, #324]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108838:	4313      	orrs	r3, r2
 810883a:	650b      	str	r3, [r1, #80]	; 0x50
 810883c:	e001      	b.n	8108842 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810883e:	7dfb      	ldrb	r3, [r7, #23]
 8108840:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810884a:	2b00      	cmp	r3, #0
 810884c:	d04b      	beq.n	81088e6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8108854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108858:	d02e      	beq.n	81088b8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 810885a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810885e:	d828      	bhi.n	81088b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108864:	d02a      	beq.n	81088bc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8108866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810886a:	d822      	bhi.n	81088b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810886c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108870:	d026      	beq.n	81088c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8108872:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108876:	d81c      	bhi.n	81088b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810887c:	d010      	beq.n	81088a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 810887e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108882:	d816      	bhi.n	81088b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108884:	2b00      	cmp	r3, #0
 8108886:	d01d      	beq.n	81088c4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8108888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810888c:	d111      	bne.n	81088b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	3304      	adds	r3, #4
 8108892:	2101      	movs	r1, #1
 8108894:	4618      	mov	r0, r3
 8108896:	f000 ff7d 	bl	8109794 <RCCEx_PLL2_Config>
 810889a:	4603      	mov	r3, r0
 810889c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810889e:	e012      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81088a0:	687b      	ldr	r3, [r7, #4]
 81088a2:	3324      	adds	r3, #36	; 0x24
 81088a4:	2101      	movs	r1, #1
 81088a6:	4618      	mov	r0, r3
 81088a8:	f001 f826 	bl	81098f8 <RCCEx_PLL3_Config>
 81088ac:	4603      	mov	r3, r0
 81088ae:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81088b0:	e009      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81088b2:	2301      	movs	r3, #1
 81088b4:	75fb      	strb	r3, [r7, #23]
      break;
 81088b6:	e006      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81088b8:	bf00      	nop
 81088ba:	e004      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81088bc:	bf00      	nop
 81088be:	e002      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81088c0:	bf00      	nop
 81088c2:	e000      	b.n	81088c6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81088c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81088c6:	7dfb      	ldrb	r3, [r7, #23]
 81088c8:	2b00      	cmp	r3, #0
 81088ca:	d10a      	bne.n	81088e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81088cc:	4b2b      	ldr	r3, [pc, #172]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81088d0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81088da:	4928      	ldr	r1, [pc, #160]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81088dc:	4313      	orrs	r3, r2
 81088de:	658b      	str	r3, [r1, #88]	; 0x58
 81088e0:	e001      	b.n	81088e6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81088e2:	7dfb      	ldrb	r3, [r7, #23]
 81088e4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	681b      	ldr	r3, [r3, #0]
 81088ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81088ee:	2b00      	cmp	r3, #0
 81088f0:	d02f      	beq.n	8108952 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81088f2:	687b      	ldr	r3, [r7, #4]
 81088f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81088f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81088fa:	d00e      	beq.n	810891a <HAL_RCCEx_PeriphCLKConfig+0x582>
 81088fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108900:	d814      	bhi.n	810892c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8108902:	2b00      	cmp	r3, #0
 8108904:	d015      	beq.n	8108932 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8108906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810890a:	d10f      	bne.n	810892c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810890c:	4b1b      	ldr	r3, [pc, #108]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108910:	4a1a      	ldr	r2, [pc, #104]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8108918:	e00c      	b.n	8108934 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810891a:	687b      	ldr	r3, [r7, #4]
 810891c:	3304      	adds	r3, #4
 810891e:	2101      	movs	r1, #1
 8108920:	4618      	mov	r0, r3
 8108922:	f000 ff37 	bl	8109794 <RCCEx_PLL2_Config>
 8108926:	4603      	mov	r3, r0
 8108928:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810892a:	e003      	b.n	8108934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810892c:	2301      	movs	r3, #1
 810892e:	75fb      	strb	r3, [r7, #23]
      break;
 8108930:	e000      	b.n	8108934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8108932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108934:	7dfb      	ldrb	r3, [r7, #23]
 8108936:	2b00      	cmp	r3, #0
 8108938:	d109      	bne.n	810894e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810893a:	4b10      	ldr	r3, [pc, #64]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810893c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810893e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108946:	490d      	ldr	r1, [pc, #52]	; (810897c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108948:	4313      	orrs	r3, r2
 810894a:	650b      	str	r3, [r1, #80]	; 0x50
 810894c:	e001      	b.n	8108952 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810894e:	7dfb      	ldrb	r3, [r7, #23]
 8108950:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	681b      	ldr	r3, [r3, #0]
 8108956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810895a:	2b00      	cmp	r3, #0
 810895c:	d033      	beq.n	81089c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108962:	2b03      	cmp	r3, #3
 8108964:	d81c      	bhi.n	81089a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8108966:	a201      	add	r2, pc, #4	; (adr r2, 810896c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8108968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810896c:	081089a7 	.word	0x081089a7
 8108970:	08108981 	.word	0x08108981
 8108974:	0810898f 	.word	0x0810898f
 8108978:	081089a7 	.word	0x081089a7
 810897c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108980:	4bb9      	ldr	r3, [pc, #740]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108984:	4ab8      	ldr	r2, [pc, #736]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810898a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 810898c:	e00c      	b.n	81089a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	3304      	adds	r3, #4
 8108992:	2102      	movs	r1, #2
 8108994:	4618      	mov	r0, r3
 8108996:	f000 fefd 	bl	8109794 <RCCEx_PLL2_Config>
 810899a:	4603      	mov	r3, r0
 810899c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810899e:	e003      	b.n	81089a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81089a0:	2301      	movs	r3, #1
 81089a2:	75fb      	strb	r3, [r7, #23]
      break;
 81089a4:	e000      	b.n	81089a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81089a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81089a8:	7dfb      	ldrb	r3, [r7, #23]
 81089aa:	2b00      	cmp	r3, #0
 81089ac:	d109      	bne.n	81089c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81089ae:	4bae      	ldr	r3, [pc, #696]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81089b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81089b2:	f023 0203 	bic.w	r2, r3, #3
 81089b6:	687b      	ldr	r3, [r7, #4]
 81089b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81089ba:	49ab      	ldr	r1, [pc, #684]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81089bc:	4313      	orrs	r3, r2
 81089be:	64cb      	str	r3, [r1, #76]	; 0x4c
 81089c0:	e001      	b.n	81089c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81089c2:	7dfb      	ldrb	r3, [r7, #23]
 81089c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81089ce:	2b00      	cmp	r3, #0
 81089d0:	f000 8088 	beq.w	8108ae4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81089d4:	4ba5      	ldr	r3, [pc, #660]	; (8108c6c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81089d6:	681b      	ldr	r3, [r3, #0]
 81089d8:	4aa4      	ldr	r2, [pc, #656]	; (8108c6c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81089da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81089de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81089e0:	f7fa fd24 	bl	810342c <HAL_GetTick>
 81089e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81089e6:	e009      	b.n	81089fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81089e8:	f7fa fd20 	bl	810342c <HAL_GetTick>
 81089ec:	4602      	mov	r2, r0
 81089ee:	693b      	ldr	r3, [r7, #16]
 81089f0:	1ad3      	subs	r3, r2, r3
 81089f2:	2b64      	cmp	r3, #100	; 0x64
 81089f4:	d902      	bls.n	81089fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81089f6:	2303      	movs	r3, #3
 81089f8:	75fb      	strb	r3, [r7, #23]
        break;
 81089fa:	e005      	b.n	8108a08 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81089fc:	4b9b      	ldr	r3, [pc, #620]	; (8108c6c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81089fe:	681b      	ldr	r3, [r3, #0]
 8108a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108a04:	2b00      	cmp	r3, #0
 8108a06:	d0ef      	beq.n	81089e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8108a08:	7dfb      	ldrb	r3, [r7, #23]
 8108a0a:	2b00      	cmp	r3, #0
 8108a0c:	d168      	bne.n	8108ae0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8108a0e:	4b96      	ldr	r3, [pc, #600]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108a12:	687b      	ldr	r3, [r7, #4]
 8108a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108a18:	4053      	eors	r3, r2
 8108a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108a1e:	2b00      	cmp	r3, #0
 8108a20:	d013      	beq.n	8108a4a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108a22:	4b91      	ldr	r3, [pc, #580]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108a2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108a2c:	4b8e      	ldr	r3, [pc, #568]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108a30:	4a8d      	ldr	r2, [pc, #564]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8108a36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8108a38:	4b8b      	ldr	r3, [pc, #556]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108a3c:	4a8a      	ldr	r2, [pc, #552]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108a42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108a44:	4a88      	ldr	r2, [pc, #544]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a46:	68fb      	ldr	r3, [r7, #12]
 8108a48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108a54:	d115      	bne.n	8108a82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108a56:	f7fa fce9 	bl	810342c <HAL_GetTick>
 8108a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108a5c:	e00b      	b.n	8108a76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8108a5e:	f7fa fce5 	bl	810342c <HAL_GetTick>
 8108a62:	4602      	mov	r2, r0
 8108a64:	693b      	ldr	r3, [r7, #16]
 8108a66:	1ad3      	subs	r3, r2, r3
 8108a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8108a6c:	4293      	cmp	r3, r2
 8108a6e:	d902      	bls.n	8108a76 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8108a70:	2303      	movs	r3, #3
 8108a72:	75fb      	strb	r3, [r7, #23]
            break;
 8108a74:	e005      	b.n	8108a82 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108a76:	4b7c      	ldr	r3, [pc, #496]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108a7a:	f003 0302 	and.w	r3, r3, #2
 8108a7e:	2b00      	cmp	r3, #0
 8108a80:	d0ed      	beq.n	8108a5e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8108a82:	7dfb      	ldrb	r3, [r7, #23]
 8108a84:	2b00      	cmp	r3, #0
 8108a86:	d128      	bne.n	8108ada <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108a96:	d10f      	bne.n	8108ab8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8108a98:	4b73      	ldr	r3, [pc, #460]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108a9a:	691b      	ldr	r3, [r3, #16]
 8108a9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8108aa0:	687b      	ldr	r3, [r7, #4]
 8108aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108aa6:	091b      	lsrs	r3, r3, #4
 8108aa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8108aac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8108ab0:	496d      	ldr	r1, [pc, #436]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ab2:	4313      	orrs	r3, r2
 8108ab4:	610b      	str	r3, [r1, #16]
 8108ab6:	e005      	b.n	8108ac4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8108ab8:	4b6b      	ldr	r3, [pc, #428]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108aba:	691b      	ldr	r3, [r3, #16]
 8108abc:	4a6a      	ldr	r2, [pc, #424]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108abe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8108ac2:	6113      	str	r3, [r2, #16]
 8108ac4:	4b68      	ldr	r3, [pc, #416]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108ac8:	687b      	ldr	r3, [r7, #4]
 8108aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8108ad2:	4965      	ldr	r1, [pc, #404]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ad4:	4313      	orrs	r3, r2
 8108ad6:	670b      	str	r3, [r1, #112]	; 0x70
 8108ad8:	e004      	b.n	8108ae4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8108ada:	7dfb      	ldrb	r3, [r7, #23]
 8108adc:	75bb      	strb	r3, [r7, #22]
 8108ade:	e001      	b.n	8108ae4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ae0:	7dfb      	ldrb	r3, [r7, #23]
 8108ae2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8108ae4:	687b      	ldr	r3, [r7, #4]
 8108ae6:	681b      	ldr	r3, [r3, #0]
 8108ae8:	f003 0301 	and.w	r3, r3, #1
 8108aec:	2b00      	cmp	r3, #0
 8108aee:	d07e      	beq.n	8108bee <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8108af0:	687b      	ldr	r3, [r7, #4]
 8108af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108af4:	2b28      	cmp	r3, #40	; 0x28
 8108af6:	d867      	bhi.n	8108bc8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8108af8:	a201      	add	r2, pc, #4	; (adr r2, 8108b00 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8108afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108afe:	bf00      	nop
 8108b00:	08108bcf 	.word	0x08108bcf
 8108b04:	08108bc9 	.word	0x08108bc9
 8108b08:	08108bc9 	.word	0x08108bc9
 8108b0c:	08108bc9 	.word	0x08108bc9
 8108b10:	08108bc9 	.word	0x08108bc9
 8108b14:	08108bc9 	.word	0x08108bc9
 8108b18:	08108bc9 	.word	0x08108bc9
 8108b1c:	08108bc9 	.word	0x08108bc9
 8108b20:	08108ba5 	.word	0x08108ba5
 8108b24:	08108bc9 	.word	0x08108bc9
 8108b28:	08108bc9 	.word	0x08108bc9
 8108b2c:	08108bc9 	.word	0x08108bc9
 8108b30:	08108bc9 	.word	0x08108bc9
 8108b34:	08108bc9 	.word	0x08108bc9
 8108b38:	08108bc9 	.word	0x08108bc9
 8108b3c:	08108bc9 	.word	0x08108bc9
 8108b40:	08108bb7 	.word	0x08108bb7
 8108b44:	08108bc9 	.word	0x08108bc9
 8108b48:	08108bc9 	.word	0x08108bc9
 8108b4c:	08108bc9 	.word	0x08108bc9
 8108b50:	08108bc9 	.word	0x08108bc9
 8108b54:	08108bc9 	.word	0x08108bc9
 8108b58:	08108bc9 	.word	0x08108bc9
 8108b5c:	08108bc9 	.word	0x08108bc9
 8108b60:	08108bcf 	.word	0x08108bcf
 8108b64:	08108bc9 	.word	0x08108bc9
 8108b68:	08108bc9 	.word	0x08108bc9
 8108b6c:	08108bc9 	.word	0x08108bc9
 8108b70:	08108bc9 	.word	0x08108bc9
 8108b74:	08108bc9 	.word	0x08108bc9
 8108b78:	08108bc9 	.word	0x08108bc9
 8108b7c:	08108bc9 	.word	0x08108bc9
 8108b80:	08108bcf 	.word	0x08108bcf
 8108b84:	08108bc9 	.word	0x08108bc9
 8108b88:	08108bc9 	.word	0x08108bc9
 8108b8c:	08108bc9 	.word	0x08108bc9
 8108b90:	08108bc9 	.word	0x08108bc9
 8108b94:	08108bc9 	.word	0x08108bc9
 8108b98:	08108bc9 	.word	0x08108bc9
 8108b9c:	08108bc9 	.word	0x08108bc9
 8108ba0:	08108bcf 	.word	0x08108bcf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	3304      	adds	r3, #4
 8108ba8:	2101      	movs	r1, #1
 8108baa:	4618      	mov	r0, r3
 8108bac:	f000 fdf2 	bl	8109794 <RCCEx_PLL2_Config>
 8108bb0:	4603      	mov	r3, r0
 8108bb2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108bb4:	e00c      	b.n	8108bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	3324      	adds	r3, #36	; 0x24
 8108bba:	2101      	movs	r1, #1
 8108bbc:	4618      	mov	r0, r3
 8108bbe:	f000 fe9b 	bl	81098f8 <RCCEx_PLL3_Config>
 8108bc2:	4603      	mov	r3, r0
 8108bc4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108bc6:	e003      	b.n	8108bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108bc8:	2301      	movs	r3, #1
 8108bca:	75fb      	strb	r3, [r7, #23]
      break;
 8108bcc:	e000      	b.n	8108bd0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8108bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108bd0:	7dfb      	ldrb	r3, [r7, #23]
 8108bd2:	2b00      	cmp	r3, #0
 8108bd4:	d109      	bne.n	8108bea <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108bd6:	4b24      	ldr	r3, [pc, #144]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108bda:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108be2:	4921      	ldr	r1, [pc, #132]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108be4:	4313      	orrs	r3, r2
 8108be6:	654b      	str	r3, [r1, #84]	; 0x54
 8108be8:	e001      	b.n	8108bee <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108bea:	7dfb      	ldrb	r3, [r7, #23]
 8108bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	681b      	ldr	r3, [r3, #0]
 8108bf2:	f003 0302 	and.w	r3, r3, #2
 8108bf6:	2b00      	cmp	r3, #0
 8108bf8:	d03c      	beq.n	8108c74 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8108bfa:	687b      	ldr	r3, [r7, #4]
 8108bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108bfe:	2b05      	cmp	r3, #5
 8108c00:	d820      	bhi.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8108c02:	a201      	add	r2, pc, #4	; (adr r2, 8108c08 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8108c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c08:	08108c4b 	.word	0x08108c4b
 8108c0c:	08108c21 	.word	0x08108c21
 8108c10:	08108c33 	.word	0x08108c33
 8108c14:	08108c4b 	.word	0x08108c4b
 8108c18:	08108c4b 	.word	0x08108c4b
 8108c1c:	08108c4b 	.word	0x08108c4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	3304      	adds	r3, #4
 8108c24:	2101      	movs	r1, #1
 8108c26:	4618      	mov	r0, r3
 8108c28:	f000 fdb4 	bl	8109794 <RCCEx_PLL2_Config>
 8108c2c:	4603      	mov	r3, r0
 8108c2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108c30:	e00c      	b.n	8108c4c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	3324      	adds	r3, #36	; 0x24
 8108c36:	2101      	movs	r1, #1
 8108c38:	4618      	mov	r0, r3
 8108c3a:	f000 fe5d 	bl	81098f8 <RCCEx_PLL3_Config>
 8108c3e:	4603      	mov	r3, r0
 8108c40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8108c42:	e003      	b.n	8108c4c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108c44:	2301      	movs	r3, #1
 8108c46:	75fb      	strb	r3, [r7, #23]
      break;
 8108c48:	e000      	b.n	8108c4c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8108c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108c4c:	7dfb      	ldrb	r3, [r7, #23]
 8108c4e:	2b00      	cmp	r3, #0
 8108c50:	d10e      	bne.n	8108c70 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8108c52:	4b05      	ldr	r3, [pc, #20]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c56:	f023 0207 	bic.w	r2, r3, #7
 8108c5a:	687b      	ldr	r3, [r7, #4]
 8108c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108c5e:	4902      	ldr	r1, [pc, #8]	; (8108c68 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108c60:	4313      	orrs	r3, r2
 8108c62:	654b      	str	r3, [r1, #84]	; 0x54
 8108c64:	e006      	b.n	8108c74 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8108c66:	bf00      	nop
 8108c68:	58024400 	.word	0x58024400
 8108c6c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c70:	7dfb      	ldrb	r3, [r7, #23]
 8108c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	681b      	ldr	r3, [r3, #0]
 8108c78:	f003 0304 	and.w	r3, r3, #4
 8108c7c:	2b00      	cmp	r3, #0
 8108c7e:	d039      	beq.n	8108cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108c86:	2b05      	cmp	r3, #5
 8108c88:	d820      	bhi.n	8108ccc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8108c8a:	a201      	add	r2, pc, #4	; (adr r2, 8108c90 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8108c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c90:	08108cd3 	.word	0x08108cd3
 8108c94:	08108ca9 	.word	0x08108ca9
 8108c98:	08108cbb 	.word	0x08108cbb
 8108c9c:	08108cd3 	.word	0x08108cd3
 8108ca0:	08108cd3 	.word	0x08108cd3
 8108ca4:	08108cd3 	.word	0x08108cd3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	3304      	adds	r3, #4
 8108cac:	2101      	movs	r1, #1
 8108cae:	4618      	mov	r0, r3
 8108cb0:	f000 fd70 	bl	8109794 <RCCEx_PLL2_Config>
 8108cb4:	4603      	mov	r3, r0
 8108cb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108cb8:	e00c      	b.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	3324      	adds	r3, #36	; 0x24
 8108cbe:	2101      	movs	r1, #1
 8108cc0:	4618      	mov	r0, r3
 8108cc2:	f000 fe19 	bl	81098f8 <RCCEx_PLL3_Config>
 8108cc6:	4603      	mov	r3, r0
 8108cc8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8108cca:	e003      	b.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108ccc:	2301      	movs	r3, #1
 8108cce:	75fb      	strb	r3, [r7, #23]
      break;
 8108cd0:	e000      	b.n	8108cd4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8108cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108cd4:	7dfb      	ldrb	r3, [r7, #23]
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d10a      	bne.n	8108cf0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8108cda:	4bb7      	ldr	r3, [pc, #732]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108cde:	f023 0207 	bic.w	r2, r3, #7
 8108ce2:	687b      	ldr	r3, [r7, #4]
 8108ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108ce8:	49b3      	ldr	r1, [pc, #716]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108cea:	4313      	orrs	r3, r2
 8108cec:	658b      	str	r3, [r1, #88]	; 0x58
 8108cee:	e001      	b.n	8108cf4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108cf0:	7dfb      	ldrb	r3, [r7, #23]
 8108cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	f003 0320 	and.w	r3, r3, #32
 8108cfc:	2b00      	cmp	r3, #0
 8108cfe:	d04b      	beq.n	8108d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108d0a:	d02e      	beq.n	8108d6a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8108d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108d10:	d828      	bhi.n	8108d64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108d16:	d02a      	beq.n	8108d6e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8108d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108d1c:	d822      	bhi.n	8108d64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108d22:	d026      	beq.n	8108d72 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8108d24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108d28:	d81c      	bhi.n	8108d64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108d2e:	d010      	beq.n	8108d52 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8108d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108d34:	d816      	bhi.n	8108d64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8108d36:	2b00      	cmp	r3, #0
 8108d38:	d01d      	beq.n	8108d76 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8108d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108d3e:	d111      	bne.n	8108d64 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108d40:	687b      	ldr	r3, [r7, #4]
 8108d42:	3304      	adds	r3, #4
 8108d44:	2100      	movs	r1, #0
 8108d46:	4618      	mov	r0, r3
 8108d48:	f000 fd24 	bl	8109794 <RCCEx_PLL2_Config>
 8108d4c:	4603      	mov	r3, r0
 8108d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8108d50:	e012      	b.n	8108d78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	3324      	adds	r3, #36	; 0x24
 8108d56:	2102      	movs	r1, #2
 8108d58:	4618      	mov	r0, r3
 8108d5a:	f000 fdcd 	bl	81098f8 <RCCEx_PLL3_Config>
 8108d5e:	4603      	mov	r3, r0
 8108d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8108d62:	e009      	b.n	8108d78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108d64:	2301      	movs	r3, #1
 8108d66:	75fb      	strb	r3, [r7, #23]
      break;
 8108d68:	e006      	b.n	8108d78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8108d6a:	bf00      	nop
 8108d6c:	e004      	b.n	8108d78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8108d6e:	bf00      	nop
 8108d70:	e002      	b.n	8108d78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8108d72:	bf00      	nop
 8108d74:	e000      	b.n	8108d78 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8108d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108d78:	7dfb      	ldrb	r3, [r7, #23]
 8108d7a:	2b00      	cmp	r3, #0
 8108d7c:	d10a      	bne.n	8108d94 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8108d7e:	4b8e      	ldr	r3, [pc, #568]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d82:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8108d86:	687b      	ldr	r3, [r7, #4]
 8108d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108d8c:	498a      	ldr	r1, [pc, #552]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108d8e:	4313      	orrs	r3, r2
 8108d90:	654b      	str	r3, [r1, #84]	; 0x54
 8108d92:	e001      	b.n	8108d98 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d94:	7dfb      	ldrb	r3, [r7, #23]
 8108d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8108d98:	687b      	ldr	r3, [r7, #4]
 8108d9a:	681b      	ldr	r3, [r3, #0]
 8108d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108da0:	2b00      	cmp	r3, #0
 8108da2:	d04b      	beq.n	8108e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8108daa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8108dae:	d02e      	beq.n	8108e0e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8108db0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8108db4:	d828      	bhi.n	8108e08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8108db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108dba:	d02a      	beq.n	8108e12 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8108dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108dc0:	d822      	bhi.n	8108e08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8108dc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8108dc6:	d026      	beq.n	8108e16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8108dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8108dcc:	d81c      	bhi.n	8108e08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8108dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108dd2:	d010      	beq.n	8108df6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8108dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108dd8:	d816      	bhi.n	8108e08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d01d      	beq.n	8108e1a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8108dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108de2:	d111      	bne.n	8108e08 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	3304      	adds	r3, #4
 8108de8:	2100      	movs	r1, #0
 8108dea:	4618      	mov	r0, r3
 8108dec:	f000 fcd2 	bl	8109794 <RCCEx_PLL2_Config>
 8108df0:	4603      	mov	r3, r0
 8108df2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8108df4:	e012      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	3324      	adds	r3, #36	; 0x24
 8108dfa:	2102      	movs	r1, #2
 8108dfc:	4618      	mov	r0, r3
 8108dfe:	f000 fd7b 	bl	81098f8 <RCCEx_PLL3_Config>
 8108e02:	4603      	mov	r3, r0
 8108e04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8108e06:	e009      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108e08:	2301      	movs	r3, #1
 8108e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8108e0c:	e006      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8108e0e:	bf00      	nop
 8108e10:	e004      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8108e12:	bf00      	nop
 8108e14:	e002      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8108e16:	bf00      	nop
 8108e18:	e000      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8108e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108e1c:	7dfb      	ldrb	r3, [r7, #23]
 8108e1e:	2b00      	cmp	r3, #0
 8108e20:	d10a      	bne.n	8108e38 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8108e22:	4b65      	ldr	r3, [pc, #404]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108e26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8108e2a:	687b      	ldr	r3, [r7, #4]
 8108e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8108e30:	4961      	ldr	r1, [pc, #388]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108e32:	4313      	orrs	r3, r2
 8108e34:	658b      	str	r3, [r1, #88]	; 0x58
 8108e36:	e001      	b.n	8108e3c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e38:	7dfb      	ldrb	r3, [r7, #23]
 8108e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	681b      	ldr	r3, [r3, #0]
 8108e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108e44:	2b00      	cmp	r3, #0
 8108e46:	d04b      	beq.n	8108ee0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8108e48:	687b      	ldr	r3, [r7, #4]
 8108e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8108e4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8108e52:	d02e      	beq.n	8108eb2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8108e54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8108e58:	d828      	bhi.n	8108eac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8108e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108e5e:	d02a      	beq.n	8108eb6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8108e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108e64:	d822      	bhi.n	8108eac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8108e66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8108e6a:	d026      	beq.n	8108eba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8108e6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8108e70:	d81c      	bhi.n	8108eac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8108e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108e76:	d010      	beq.n	8108e9a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8108e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108e7c:	d816      	bhi.n	8108eac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8108e7e:	2b00      	cmp	r3, #0
 8108e80:	d01d      	beq.n	8108ebe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8108e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108e86:	d111      	bne.n	8108eac <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	3304      	adds	r3, #4
 8108e8c:	2100      	movs	r1, #0
 8108e8e:	4618      	mov	r0, r3
 8108e90:	f000 fc80 	bl	8109794 <RCCEx_PLL2_Config>
 8108e94:	4603      	mov	r3, r0
 8108e96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8108e98:	e012      	b.n	8108ec0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	3324      	adds	r3, #36	; 0x24
 8108e9e:	2102      	movs	r1, #2
 8108ea0:	4618      	mov	r0, r3
 8108ea2:	f000 fd29 	bl	81098f8 <RCCEx_PLL3_Config>
 8108ea6:	4603      	mov	r3, r0
 8108ea8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8108eaa:	e009      	b.n	8108ec0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108eac:	2301      	movs	r3, #1
 8108eae:	75fb      	strb	r3, [r7, #23]
      break;
 8108eb0:	e006      	b.n	8108ec0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8108eb2:	bf00      	nop
 8108eb4:	e004      	b.n	8108ec0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8108eb6:	bf00      	nop
 8108eb8:	e002      	b.n	8108ec0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8108eba:	bf00      	nop
 8108ebc:	e000      	b.n	8108ec0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8108ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ec0:	7dfb      	ldrb	r3, [r7, #23]
 8108ec2:	2b00      	cmp	r3, #0
 8108ec4:	d10a      	bne.n	8108edc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8108ec6:	4b3c      	ldr	r3, [pc, #240]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8108ed4:	4938      	ldr	r1, [pc, #224]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108ed6:	4313      	orrs	r3, r2
 8108ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8108eda:	e001      	b.n	8108ee0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108edc:	7dfb      	ldrb	r3, [r7, #23]
 8108ede:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	681b      	ldr	r3, [r3, #0]
 8108ee4:	f003 0308 	and.w	r3, r3, #8
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	d01a      	beq.n	8108f22 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108ef6:	d10a      	bne.n	8108f0e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	3324      	adds	r3, #36	; 0x24
 8108efc:	2102      	movs	r1, #2
 8108efe:	4618      	mov	r0, r3
 8108f00:	f000 fcfa 	bl	81098f8 <RCCEx_PLL3_Config>
 8108f04:	4603      	mov	r3, r0
 8108f06:	2b00      	cmp	r3, #0
 8108f08:	d001      	beq.n	8108f0e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8108f0a:	2301      	movs	r3, #1
 8108f0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8108f0e:	4b2a      	ldr	r3, [pc, #168]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108f12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8108f16:	687b      	ldr	r3, [r7, #4]
 8108f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108f1c:	4926      	ldr	r1, [pc, #152]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108f1e:	4313      	orrs	r3, r2
 8108f20:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8108f22:	687b      	ldr	r3, [r7, #4]
 8108f24:	681b      	ldr	r3, [r3, #0]
 8108f26:	f003 0310 	and.w	r3, r3, #16
 8108f2a:	2b00      	cmp	r3, #0
 8108f2c:	d01a      	beq.n	8108f64 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8108f2e:	687b      	ldr	r3, [r7, #4]
 8108f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8108f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108f38:	d10a      	bne.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8108f3a:	687b      	ldr	r3, [r7, #4]
 8108f3c:	3324      	adds	r3, #36	; 0x24
 8108f3e:	2102      	movs	r1, #2
 8108f40:	4618      	mov	r0, r3
 8108f42:	f000 fcd9 	bl	81098f8 <RCCEx_PLL3_Config>
 8108f46:	4603      	mov	r3, r0
 8108f48:	2b00      	cmp	r3, #0
 8108f4a:	d001      	beq.n	8108f50 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8108f4c:	2301      	movs	r3, #1
 8108f4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8108f50:	4b19      	ldr	r3, [pc, #100]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8108f58:	687b      	ldr	r3, [r7, #4]
 8108f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8108f5e:	4916      	ldr	r1, [pc, #88]	; (8108fb8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8108f60:	4313      	orrs	r3, r2
 8108f62:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	681b      	ldr	r3, [r3, #0]
 8108f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8108f6c:	2b00      	cmp	r3, #0
 8108f6e:	d036      	beq.n	8108fde <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8108f70:	687b      	ldr	r3, [r7, #4]
 8108f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8108f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108f7a:	d01f      	beq.n	8108fbc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8108f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108f80:	d817      	bhi.n	8108fb2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	d003      	beq.n	8108f8e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8108f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108f8a:	d009      	beq.n	8108fa0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8108f8c:	e011      	b.n	8108fb2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108f8e:	687b      	ldr	r3, [r7, #4]
 8108f90:	3304      	adds	r3, #4
 8108f92:	2100      	movs	r1, #0
 8108f94:	4618      	mov	r0, r3
 8108f96:	f000 fbfd 	bl	8109794 <RCCEx_PLL2_Config>
 8108f9a:	4603      	mov	r3, r0
 8108f9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8108f9e:	e00e      	b.n	8108fbe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	3324      	adds	r3, #36	; 0x24
 8108fa4:	2102      	movs	r1, #2
 8108fa6:	4618      	mov	r0, r3
 8108fa8:	f000 fca6 	bl	81098f8 <RCCEx_PLL3_Config>
 8108fac:	4603      	mov	r3, r0
 8108fae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8108fb0:	e005      	b.n	8108fbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108fb2:	2301      	movs	r3, #1
 8108fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8108fb6:	e002      	b.n	8108fbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8108fb8:	58024400 	.word	0x58024400
      break;
 8108fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108fbe:	7dfb      	ldrb	r3, [r7, #23]
 8108fc0:	2b00      	cmp	r3, #0
 8108fc2:	d10a      	bne.n	8108fda <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8108fc4:	4b93      	ldr	r3, [pc, #588]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8108fd2:	4990      	ldr	r1, [pc, #576]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8108fd4:	4313      	orrs	r3, r2
 8108fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8108fd8:	e001      	b.n	8108fde <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108fda:	7dfb      	ldrb	r3, [r7, #23]
 8108fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	681b      	ldr	r3, [r3, #0]
 8108fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8108fe6:	2b00      	cmp	r3, #0
 8108fe8:	d033      	beq.n	8109052 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108ff0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108ff4:	d01c      	beq.n	8109030 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8108ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108ffa:	d816      	bhi.n	810902a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8108ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109000:	d003      	beq.n	810900a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8109002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109006:	d007      	beq.n	8109018 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8109008:	e00f      	b.n	810902a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810900a:	4b82      	ldr	r3, [pc, #520]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810900e:	4a81      	ldr	r2, [pc, #516]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8109016:	e00c      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109018:	687b      	ldr	r3, [r7, #4]
 810901a:	3324      	adds	r3, #36	; 0x24
 810901c:	2101      	movs	r1, #1
 810901e:	4618      	mov	r0, r3
 8109020:	f000 fc6a 	bl	81098f8 <RCCEx_PLL3_Config>
 8109024:	4603      	mov	r3, r0
 8109026:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8109028:	e003      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810902a:	2301      	movs	r3, #1
 810902c:	75fb      	strb	r3, [r7, #23]
      break;
 810902e:	e000      	b.n	8109032 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8109030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109032:	7dfb      	ldrb	r3, [r7, #23]
 8109034:	2b00      	cmp	r3, #0
 8109036:	d10a      	bne.n	810904e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8109038:	4b76      	ldr	r3, [pc, #472]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810903a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810903c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109046:	4973      	ldr	r1, [pc, #460]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109048:	4313      	orrs	r3, r2
 810904a:	654b      	str	r3, [r1, #84]	; 0x54
 810904c:	e001      	b.n	8109052 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810904e:	7dfb      	ldrb	r3, [r7, #23]
 8109050:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	681b      	ldr	r3, [r3, #0]
 8109056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810905a:	2b00      	cmp	r3, #0
 810905c:	d029      	beq.n	81090b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109062:	2b00      	cmp	r3, #0
 8109064:	d003      	beq.n	810906e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8109066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810906a:	d007      	beq.n	810907c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810906c:	e00f      	b.n	810908e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810906e:	4b69      	ldr	r3, [pc, #420]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109072:	4a68      	ldr	r2, [pc, #416]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810907a:	e00b      	b.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	3304      	adds	r3, #4
 8109080:	2102      	movs	r1, #2
 8109082:	4618      	mov	r0, r3
 8109084:	f000 fb86 	bl	8109794 <RCCEx_PLL2_Config>
 8109088:	4603      	mov	r3, r0
 810908a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810908c:	e002      	b.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810908e:	2301      	movs	r3, #1
 8109090:	75fb      	strb	r3, [r7, #23]
      break;
 8109092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109094:	7dfb      	ldrb	r3, [r7, #23]
 8109096:	2b00      	cmp	r3, #0
 8109098:	d109      	bne.n	81090ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810909a:	4b5e      	ldr	r3, [pc, #376]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810909e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81090a2:	687b      	ldr	r3, [r7, #4]
 81090a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81090a6:	495b      	ldr	r1, [pc, #364]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81090a8:	4313      	orrs	r3, r2
 81090aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 81090ac:	e001      	b.n	81090b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81090ae:	7dfb      	ldrb	r3, [r7, #23]
 81090b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81090b2:	687b      	ldr	r3, [r7, #4]
 81090b4:	681b      	ldr	r3, [r3, #0]
 81090b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81090ba:	2b00      	cmp	r3, #0
 81090bc:	d00a      	beq.n	81090d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81090be:	687b      	ldr	r3, [r7, #4]
 81090c0:	3324      	adds	r3, #36	; 0x24
 81090c2:	2102      	movs	r1, #2
 81090c4:	4618      	mov	r0, r3
 81090c6:	f000 fc17 	bl	81098f8 <RCCEx_PLL3_Config>
 81090ca:	4603      	mov	r3, r0
 81090cc:	2b00      	cmp	r3, #0
 81090ce:	d001      	beq.n	81090d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81090d0:	2301      	movs	r3, #1
 81090d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	681b      	ldr	r3, [r3, #0]
 81090d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81090dc:	2b00      	cmp	r3, #0
 81090de:	d030      	beq.n	8109142 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81090e0:	687b      	ldr	r3, [r7, #4]
 81090e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81090e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81090e8:	d017      	beq.n	810911a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81090ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81090ee:	d811      	bhi.n	8109114 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81090f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81090f4:	d013      	beq.n	810911e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81090f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81090fa:	d80b      	bhi.n	8109114 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81090fc:	2b00      	cmp	r3, #0
 81090fe:	d010      	beq.n	8109122 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109104:	d106      	bne.n	8109114 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109106:	4b43      	ldr	r3, [pc, #268]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810910a:	4a42      	ldr	r2, [pc, #264]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810910c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109110:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109112:	e007      	b.n	8109124 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109114:	2301      	movs	r3, #1
 8109116:	75fb      	strb	r3, [r7, #23]
      break;
 8109118:	e004      	b.n	8109124 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810911a:	bf00      	nop
 810911c:	e002      	b.n	8109124 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810911e:	bf00      	nop
 8109120:	e000      	b.n	8109124 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109124:	7dfb      	ldrb	r3, [r7, #23]
 8109126:	2b00      	cmp	r3, #0
 8109128:	d109      	bne.n	810913e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810912a:	4b3a      	ldr	r3, [pc, #232]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810912e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109132:	687b      	ldr	r3, [r7, #4]
 8109134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109136:	4937      	ldr	r1, [pc, #220]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109138:	4313      	orrs	r3, r2
 810913a:	654b      	str	r3, [r1, #84]	; 0x54
 810913c:	e001      	b.n	8109142 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810913e:	7dfb      	ldrb	r3, [r7, #23]
 8109140:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	681b      	ldr	r3, [r3, #0]
 8109146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810914a:	2b00      	cmp	r3, #0
 810914c:	d008      	beq.n	8109160 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810914e:	4b31      	ldr	r3, [pc, #196]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109152:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810915a:	492e      	ldr	r1, [pc, #184]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810915c:	4313      	orrs	r3, r2
 810915e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	681b      	ldr	r3, [r3, #0]
 8109164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109168:	2b00      	cmp	r3, #0
 810916a:	d009      	beq.n	8109180 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810916c:	4b29      	ldr	r3, [pc, #164]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810916e:	691b      	ldr	r3, [r3, #16]
 8109170:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810917a:	4926      	ldr	r1, [pc, #152]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810917c:	4313      	orrs	r3, r2
 810917e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	681b      	ldr	r3, [r3, #0]
 8109184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109188:	2b00      	cmp	r3, #0
 810918a:	d008      	beq.n	810919e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810918c:	4b21      	ldr	r3, [pc, #132]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109190:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109198:	491e      	ldr	r1, [pc, #120]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810919a:	4313      	orrs	r3, r2
 810919c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810919e:	687b      	ldr	r3, [r7, #4]
 81091a0:	681b      	ldr	r3, [r3, #0]
 81091a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81091a6:	2b00      	cmp	r3, #0
 81091a8:	d00d      	beq.n	81091c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81091aa:	4b1a      	ldr	r3, [pc, #104]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091ac:	691b      	ldr	r3, [r3, #16]
 81091ae:	4a19      	ldr	r2, [pc, #100]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81091b4:	6113      	str	r3, [r2, #16]
 81091b6:	4b17      	ldr	r3, [pc, #92]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091b8:	691a      	ldr	r2, [r3, #16]
 81091ba:	687b      	ldr	r3, [r7, #4]
 81091bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81091c0:	4914      	ldr	r1, [pc, #80]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091c2:	4313      	orrs	r3, r2
 81091c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	681b      	ldr	r3, [r3, #0]
 81091ca:	2b00      	cmp	r3, #0
 81091cc:	da08      	bge.n	81091e0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81091ce:	4b11      	ldr	r3, [pc, #68]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81091d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81091d6:	687b      	ldr	r3, [r7, #4]
 81091d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81091da:	490e      	ldr	r1, [pc, #56]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091dc:	4313      	orrs	r3, r2
 81091de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81091e0:	687b      	ldr	r3, [r7, #4]
 81091e2:	681b      	ldr	r3, [r3, #0]
 81091e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81091e8:	2b00      	cmp	r3, #0
 81091ea:	d009      	beq.n	8109200 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81091ec:	4b09      	ldr	r3, [pc, #36]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81091f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81091f4:	687b      	ldr	r3, [r7, #4]
 81091f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81091fa:	4906      	ldr	r1, [pc, #24]	; (8109214 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81091fc:	4313      	orrs	r3, r2
 81091fe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8109200:	7dbb      	ldrb	r3, [r7, #22]
 8109202:	2b00      	cmp	r3, #0
 8109204:	d101      	bne.n	810920a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8109206:	2300      	movs	r3, #0
 8109208:	e000      	b.n	810920c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810920a:	2301      	movs	r3, #1
}
 810920c:	4618      	mov	r0, r3
 810920e:	3718      	adds	r7, #24
 8109210:	46bd      	mov	sp, r7
 8109212:	bd80      	pop	{r7, pc}
 8109214:	58024400 	.word	0x58024400

08109218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109218:	b580      	push	{r7, lr}
 810921a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810921c:	f7ff f85e 	bl	81082dc <HAL_RCC_GetHCLKFreq>
 8109220:	4602      	mov	r2, r0
 8109222:	4b06      	ldr	r3, [pc, #24]	; (810923c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109224:	6a1b      	ldr	r3, [r3, #32]
 8109226:	091b      	lsrs	r3, r3, #4
 8109228:	f003 0307 	and.w	r3, r3, #7
 810922c:	4904      	ldr	r1, [pc, #16]	; (8109240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810922e:	5ccb      	ldrb	r3, [r1, r3]
 8109230:	f003 031f 	and.w	r3, r3, #31
 8109234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109238:	4618      	mov	r0, r3
 810923a:	bd80      	pop	{r7, pc}
 810923c:	58024400 	.word	0x58024400
 8109240:	0810d2ac 	.word	0x0810d2ac

08109244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8109244:	b480      	push	{r7}
 8109246:	b089      	sub	sp, #36	; 0x24
 8109248:	af00      	add	r7, sp, #0
 810924a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810924c:	4ba1      	ldr	r3, [pc, #644]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109250:	f003 0303 	and.w	r3, r3, #3
 8109254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8109256:	4b9f      	ldr	r3, [pc, #636]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810925a:	0b1b      	lsrs	r3, r3, #12
 810925c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109262:	4b9c      	ldr	r3, [pc, #624]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109266:	091b      	lsrs	r3, r3, #4
 8109268:	f003 0301 	and.w	r3, r3, #1
 810926c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810926e:	4b99      	ldr	r3, [pc, #612]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109272:	08db      	lsrs	r3, r3, #3
 8109274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109278:	693a      	ldr	r2, [r7, #16]
 810927a:	fb02 f303 	mul.w	r3, r2, r3
 810927e:	ee07 3a90 	vmov	s15, r3
 8109282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810928a:	697b      	ldr	r3, [r7, #20]
 810928c:	2b00      	cmp	r3, #0
 810928e:	f000 8111 	beq.w	81094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8109292:	69bb      	ldr	r3, [r7, #24]
 8109294:	2b02      	cmp	r3, #2
 8109296:	f000 8083 	beq.w	81093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810929a:	69bb      	ldr	r3, [r7, #24]
 810929c:	2b02      	cmp	r3, #2
 810929e:	f200 80a1 	bhi.w	81093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81092a2:	69bb      	ldr	r3, [r7, #24]
 81092a4:	2b00      	cmp	r3, #0
 81092a6:	d003      	beq.n	81092b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81092a8:	69bb      	ldr	r3, [r7, #24]
 81092aa:	2b01      	cmp	r3, #1
 81092ac:	d056      	beq.n	810935c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81092ae:	e099      	b.n	81093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81092b0:	4b88      	ldr	r3, [pc, #544]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092b2:	681b      	ldr	r3, [r3, #0]
 81092b4:	f003 0320 	and.w	r3, r3, #32
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d02d      	beq.n	8109318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81092bc:	4b85      	ldr	r3, [pc, #532]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092be:	681b      	ldr	r3, [r3, #0]
 81092c0:	08db      	lsrs	r3, r3, #3
 81092c2:	f003 0303 	and.w	r3, r3, #3
 81092c6:	4a84      	ldr	r2, [pc, #528]	; (81094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81092c8:	fa22 f303 	lsr.w	r3, r2, r3
 81092cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81092ce:	68bb      	ldr	r3, [r7, #8]
 81092d0:	ee07 3a90 	vmov	s15, r3
 81092d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092d8:	697b      	ldr	r3, [r7, #20]
 81092da:	ee07 3a90 	vmov	s15, r3
 81092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81092e6:	4b7b      	ldr	r3, [pc, #492]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81092ee:	ee07 3a90 	vmov	s15, r3
 81092f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81092fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 81094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81092fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810930a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810930e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109312:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109316:	e087      	b.n	8109428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109318:	697b      	ldr	r3, [r7, #20]
 810931a:	ee07 3a90 	vmov	s15, r3
 810931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109322:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810932a:	4b6a      	ldr	r3, [pc, #424]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109332:	ee07 3a90 	vmov	s15, r3
 8109336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810933a:	ed97 6a03 	vldr	s12, [r7, #12]
 810933e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810934a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810935a:	e065      	b.n	8109428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810935c:	697b      	ldr	r3, [r7, #20]
 810935e:	ee07 3a90 	vmov	s15, r3
 8109362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109366:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810936e:	4b59      	ldr	r3, [pc, #356]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109376:	ee07 3a90 	vmov	s15, r3
 810937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810937e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109382:	eddf 5a56 	vldr	s11, [pc, #344]	; 81094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810938e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109396:	ee67 7a27 	vmul.f32	s15, s14, s15
 810939a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810939e:	e043      	b.n	8109428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81093a0:	697b      	ldr	r3, [r7, #20]
 81093a2:	ee07 3a90 	vmov	s15, r3
 81093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81093aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81094e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81093b2:	4b48      	ldr	r3, [pc, #288]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093ba:	ee07 3a90 	vmov	s15, r3
 81093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81093c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81093d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81093de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81093e2:	e021      	b.n	8109428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81093e4:	697b      	ldr	r3, [r7, #20]
 81093e6:	ee07 3a90 	vmov	s15, r3
 81093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81093ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81093f6:	4b37      	ldr	r3, [pc, #220]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81093fe:	ee07 3a90 	vmov	s15, r3
 8109402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109406:	ed97 6a03 	vldr	s12, [r7, #12]
 810940a:	eddf 5a34 	vldr	s11, [pc, #208]	; 81094dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8109428:	4b2a      	ldr	r3, [pc, #168]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810942c:	0a5b      	lsrs	r3, r3, #9
 810942e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109432:	ee07 3a90 	vmov	s15, r3
 8109436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810943a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810943e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109442:	edd7 6a07 	vldr	s13, [r7, #28]
 8109446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810944a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810944e:	ee17 2a90 	vmov	r2, s15
 8109452:	687b      	ldr	r3, [r7, #4]
 8109454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8109456:	4b1f      	ldr	r3, [pc, #124]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810945a:	0c1b      	lsrs	r3, r3, #16
 810945c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109460:	ee07 3a90 	vmov	s15, r3
 8109464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810946c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109470:	edd7 6a07 	vldr	s13, [r7, #28]
 8109474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810947c:	ee17 2a90 	vmov	r2, s15
 8109480:	687b      	ldr	r3, [r7, #4]
 8109482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8109484:	4b13      	ldr	r3, [pc, #76]	; (81094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109488:	0e1b      	lsrs	r3, r3, #24
 810948a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810948e:	ee07 3a90 	vmov	s15, r3
 8109492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810949a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810949e:	edd7 6a07 	vldr	s13, [r7, #28]
 81094a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81094a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81094aa:	ee17 2a90 	vmov	r2, s15
 81094ae:	687b      	ldr	r3, [r7, #4]
 81094b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81094b2:	e008      	b.n	81094c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	2200      	movs	r2, #0
 81094b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81094ba:	687b      	ldr	r3, [r7, #4]
 81094bc:	2200      	movs	r2, #0
 81094be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81094c0:	687b      	ldr	r3, [r7, #4]
 81094c2:	2200      	movs	r2, #0
 81094c4:	609a      	str	r2, [r3, #8]
}
 81094c6:	bf00      	nop
 81094c8:	3724      	adds	r7, #36	; 0x24
 81094ca:	46bd      	mov	sp, r7
 81094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094d0:	4770      	bx	lr
 81094d2:	bf00      	nop
 81094d4:	58024400 	.word	0x58024400
 81094d8:	03d09000 	.word	0x03d09000
 81094dc:	46000000 	.word	0x46000000
 81094e0:	4c742400 	.word	0x4c742400
 81094e4:	4a742400 	.word	0x4a742400
 81094e8:	4b742400 	.word	0x4b742400

081094ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81094ec:	b480      	push	{r7}
 81094ee:	b089      	sub	sp, #36	; 0x24
 81094f0:	af00      	add	r7, sp, #0
 81094f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81094f4:	4ba1      	ldr	r3, [pc, #644]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81094f8:	f003 0303 	and.w	r3, r3, #3
 81094fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81094fe:	4b9f      	ldr	r3, [pc, #636]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109502:	0d1b      	lsrs	r3, r3, #20
 8109504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810950a:	4b9c      	ldr	r3, [pc, #624]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810950e:	0a1b      	lsrs	r3, r3, #8
 8109510:	f003 0301 	and.w	r3, r3, #1
 8109514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8109516:	4b99      	ldr	r3, [pc, #612]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810951a:	08db      	lsrs	r3, r3, #3
 810951c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109520:	693a      	ldr	r2, [r7, #16]
 8109522:	fb02 f303 	mul.w	r3, r2, r3
 8109526:	ee07 3a90 	vmov	s15, r3
 810952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810952e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109532:	697b      	ldr	r3, [r7, #20]
 8109534:	2b00      	cmp	r3, #0
 8109536:	f000 8111 	beq.w	810975c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810953a:	69bb      	ldr	r3, [r7, #24]
 810953c:	2b02      	cmp	r3, #2
 810953e:	f000 8083 	beq.w	8109648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109542:	69bb      	ldr	r3, [r7, #24]
 8109544:	2b02      	cmp	r3, #2
 8109546:	f200 80a1 	bhi.w	810968c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810954a:	69bb      	ldr	r3, [r7, #24]
 810954c:	2b00      	cmp	r3, #0
 810954e:	d003      	beq.n	8109558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109550:	69bb      	ldr	r3, [r7, #24]
 8109552:	2b01      	cmp	r3, #1
 8109554:	d056      	beq.n	8109604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109556:	e099      	b.n	810968c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109558:	4b88      	ldr	r3, [pc, #544]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810955a:	681b      	ldr	r3, [r3, #0]
 810955c:	f003 0320 	and.w	r3, r3, #32
 8109560:	2b00      	cmp	r3, #0
 8109562:	d02d      	beq.n	81095c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109564:	4b85      	ldr	r3, [pc, #532]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109566:	681b      	ldr	r3, [r3, #0]
 8109568:	08db      	lsrs	r3, r3, #3
 810956a:	f003 0303 	and.w	r3, r3, #3
 810956e:	4a84      	ldr	r2, [pc, #528]	; (8109780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109570:	fa22 f303 	lsr.w	r3, r2, r3
 8109574:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109576:	68bb      	ldr	r3, [r7, #8]
 8109578:	ee07 3a90 	vmov	s15, r3
 810957c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109580:	697b      	ldr	r3, [r7, #20]
 8109582:	ee07 3a90 	vmov	s15, r3
 8109586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810958e:	4b7b      	ldr	r3, [pc, #492]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109596:	ee07 3a90 	vmov	s15, r3
 810959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810959e:	ed97 6a03 	vldr	s12, [r7, #12]
 81095a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81095ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81095ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81095be:	e087      	b.n	81096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81095c0:	697b      	ldr	r3, [r7, #20]
 81095c2:	ee07 3a90 	vmov	s15, r3
 81095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81095ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81095d2:	4b6a      	ldr	r3, [pc, #424]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81095da:	ee07 3a90 	vmov	s15, r3
 81095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81095e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81095f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81095fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109602:	e065      	b.n	81096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109604:	697b      	ldr	r3, [r7, #20]
 8109606:	ee07 3a90 	vmov	s15, r3
 810960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810960e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810978c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109616:	4b59      	ldr	r3, [pc, #356]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810961e:	ee07 3a90 	vmov	s15, r3
 8109622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109626:	ed97 6a03 	vldr	s12, [r7, #12]
 810962a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109646:	e043      	b.n	81096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109648:	697b      	ldr	r3, [r7, #20]
 810964a:	ee07 3a90 	vmov	s15, r3
 810964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8109656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810965a:	4b48      	ldr	r3, [pc, #288]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109662:	ee07 3a90 	vmov	s15, r3
 8109666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810966a:	ed97 6a03 	vldr	s12, [r7, #12]
 810966e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810967a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810968a:	e021      	b.n	81096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810968c:	697b      	ldr	r3, [r7, #20]
 810968e:	ee07 3a90 	vmov	s15, r3
 8109692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810978c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810969e:	4b37      	ldr	r3, [pc, #220]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81096a6:	ee07 3a90 	vmov	s15, r3
 81096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81096b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81096be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81096ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81096ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81096d0:	4b2a      	ldr	r3, [pc, #168]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81096d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81096d4:	0a5b      	lsrs	r3, r3, #9
 81096d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81096da:	ee07 3a90 	vmov	s15, r3
 81096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81096e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81096e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81096ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81096ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81096f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81096f6:	ee17 2a90 	vmov	r2, s15
 81096fa:	687b      	ldr	r3, [r7, #4]
 81096fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81096fe:	4b1f      	ldr	r3, [pc, #124]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109702:	0c1b      	lsrs	r3, r3, #16
 8109704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109708:	ee07 3a90 	vmov	s15, r3
 810970c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109718:	edd7 6a07 	vldr	s13, [r7, #28]
 810971c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109724:	ee17 2a90 	vmov	r2, s15
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810972c:	4b13      	ldr	r3, [pc, #76]	; (810977c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109730:	0e1b      	lsrs	r3, r3, #24
 8109732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109736:	ee07 3a90 	vmov	s15, r3
 810973a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810973e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109746:	edd7 6a07 	vldr	s13, [r7, #28]
 810974a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810974e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109752:	ee17 2a90 	vmov	r2, s15
 8109756:	687b      	ldr	r3, [r7, #4]
 8109758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810975a:	e008      	b.n	810976e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810975c:	687b      	ldr	r3, [r7, #4]
 810975e:	2200      	movs	r2, #0
 8109760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8109762:	687b      	ldr	r3, [r7, #4]
 8109764:	2200      	movs	r2, #0
 8109766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8109768:	687b      	ldr	r3, [r7, #4]
 810976a:	2200      	movs	r2, #0
 810976c:	609a      	str	r2, [r3, #8]
}
 810976e:	bf00      	nop
 8109770:	3724      	adds	r7, #36	; 0x24
 8109772:	46bd      	mov	sp, r7
 8109774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109778:	4770      	bx	lr
 810977a:	bf00      	nop
 810977c:	58024400 	.word	0x58024400
 8109780:	03d09000 	.word	0x03d09000
 8109784:	46000000 	.word	0x46000000
 8109788:	4c742400 	.word	0x4c742400
 810978c:	4a742400 	.word	0x4a742400
 8109790:	4b742400 	.word	0x4b742400

08109794 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8109794:	b580      	push	{r7, lr}
 8109796:	b084      	sub	sp, #16
 8109798:	af00      	add	r7, sp, #0
 810979a:	6078      	str	r0, [r7, #4]
 810979c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810979e:	2300      	movs	r3, #0
 81097a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81097a2:	4b54      	ldr	r3, [pc, #336]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097a6:	f003 0303 	and.w	r3, r3, #3
 81097aa:	2b03      	cmp	r3, #3
 81097ac:	d101      	bne.n	81097b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81097ae:	2301      	movs	r3, #1
 81097b0:	e09b      	b.n	81098ea <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81097b2:	4b50      	ldr	r3, [pc, #320]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81097b4:	681b      	ldr	r3, [r3, #0]
 81097b6:	4a4f      	ldr	r2, [pc, #316]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81097b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81097bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81097be:	f7f9 fe35 	bl	810342c <HAL_GetTick>
 81097c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81097c4:	e008      	b.n	81097d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81097c6:	f7f9 fe31 	bl	810342c <HAL_GetTick>
 81097ca:	4602      	mov	r2, r0
 81097cc:	68bb      	ldr	r3, [r7, #8]
 81097ce:	1ad3      	subs	r3, r2, r3
 81097d0:	2b02      	cmp	r3, #2
 81097d2:	d901      	bls.n	81097d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81097d4:	2303      	movs	r3, #3
 81097d6:	e088      	b.n	81098ea <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81097d8:	4b46      	ldr	r3, [pc, #280]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81097da:	681b      	ldr	r3, [r3, #0]
 81097dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81097e0:	2b00      	cmp	r3, #0
 81097e2:	d1f0      	bne.n	81097c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81097e4:	4b43      	ldr	r3, [pc, #268]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81097e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81097ec:	687b      	ldr	r3, [r7, #4]
 81097ee:	681b      	ldr	r3, [r3, #0]
 81097f0:	031b      	lsls	r3, r3, #12
 81097f2:	4940      	ldr	r1, [pc, #256]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81097f4:	4313      	orrs	r3, r2
 81097f6:	628b      	str	r3, [r1, #40]	; 0x28
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	685b      	ldr	r3, [r3, #4]
 81097fc:	3b01      	subs	r3, #1
 81097fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109802:	687b      	ldr	r3, [r7, #4]
 8109804:	689b      	ldr	r3, [r3, #8]
 8109806:	3b01      	subs	r3, #1
 8109808:	025b      	lsls	r3, r3, #9
 810980a:	b29b      	uxth	r3, r3
 810980c:	431a      	orrs	r2, r3
 810980e:	687b      	ldr	r3, [r7, #4]
 8109810:	68db      	ldr	r3, [r3, #12]
 8109812:	3b01      	subs	r3, #1
 8109814:	041b      	lsls	r3, r3, #16
 8109816:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810981a:	431a      	orrs	r2, r3
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	691b      	ldr	r3, [r3, #16]
 8109820:	3b01      	subs	r3, #1
 8109822:	061b      	lsls	r3, r3, #24
 8109824:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109828:	4932      	ldr	r1, [pc, #200]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810982a:	4313      	orrs	r3, r2
 810982c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810982e:	4b31      	ldr	r3, [pc, #196]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109832:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8109836:	687b      	ldr	r3, [r7, #4]
 8109838:	695b      	ldr	r3, [r3, #20]
 810983a:	492e      	ldr	r1, [pc, #184]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810983c:	4313      	orrs	r3, r2
 810983e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109840:	4b2c      	ldr	r3, [pc, #176]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109844:	f023 0220 	bic.w	r2, r3, #32
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	699b      	ldr	r3, [r3, #24]
 810984c:	4929      	ldr	r1, [pc, #164]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810984e:	4313      	orrs	r3, r2
 8109850:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8109852:	4b28      	ldr	r3, [pc, #160]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109856:	4a27      	ldr	r2, [pc, #156]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109858:	f023 0310 	bic.w	r3, r3, #16
 810985c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810985e:	4b25      	ldr	r3, [pc, #148]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109866:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810986a:	687a      	ldr	r2, [r7, #4]
 810986c:	69d2      	ldr	r2, [r2, #28]
 810986e:	00d2      	lsls	r2, r2, #3
 8109870:	4920      	ldr	r1, [pc, #128]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109872:	4313      	orrs	r3, r2
 8109874:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8109876:	4b1f      	ldr	r3, [pc, #124]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 8109878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810987a:	4a1e      	ldr	r2, [pc, #120]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810987c:	f043 0310 	orr.w	r3, r3, #16
 8109880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109882:	683b      	ldr	r3, [r7, #0]
 8109884:	2b00      	cmp	r3, #0
 8109886:	d106      	bne.n	8109896 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109888:	4b1a      	ldr	r3, [pc, #104]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810988c:	4a19      	ldr	r2, [pc, #100]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810988e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8109892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109894:	e00f      	b.n	81098b6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109896:	683b      	ldr	r3, [r7, #0]
 8109898:	2b01      	cmp	r3, #1
 810989a:	d106      	bne.n	81098aa <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810989c:	4b15      	ldr	r3, [pc, #84]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 810989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098a0:	4a14      	ldr	r2, [pc, #80]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81098a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81098a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81098a8:	e005      	b.n	81098b6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81098aa:	4b12      	ldr	r3, [pc, #72]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81098ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098ae:	4a11      	ldr	r2, [pc, #68]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81098b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81098b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81098b6:	4b0f      	ldr	r3, [pc, #60]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81098b8:	681b      	ldr	r3, [r3, #0]
 81098ba:	4a0e      	ldr	r2, [pc, #56]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81098bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81098c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81098c2:	f7f9 fdb3 	bl	810342c <HAL_GetTick>
 81098c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81098c8:	e008      	b.n	81098dc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81098ca:	f7f9 fdaf 	bl	810342c <HAL_GetTick>
 81098ce:	4602      	mov	r2, r0
 81098d0:	68bb      	ldr	r3, [r7, #8]
 81098d2:	1ad3      	subs	r3, r2, r3
 81098d4:	2b02      	cmp	r3, #2
 81098d6:	d901      	bls.n	81098dc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81098d8:	2303      	movs	r3, #3
 81098da:	e006      	b.n	81098ea <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81098dc:	4b05      	ldr	r3, [pc, #20]	; (81098f4 <RCCEx_PLL2_Config+0x160>)
 81098de:	681b      	ldr	r3, [r3, #0]
 81098e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81098e4:	2b00      	cmp	r3, #0
 81098e6:	d0f0      	beq.n	81098ca <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81098ea:	4618      	mov	r0, r3
 81098ec:	3710      	adds	r7, #16
 81098ee:	46bd      	mov	sp, r7
 81098f0:	bd80      	pop	{r7, pc}
 81098f2:	bf00      	nop
 81098f4:	58024400 	.word	0x58024400

081098f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81098f8:	b580      	push	{r7, lr}
 81098fa:	b084      	sub	sp, #16
 81098fc:	af00      	add	r7, sp, #0
 81098fe:	6078      	str	r0, [r7, #4]
 8109900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109902:	2300      	movs	r3, #0
 8109904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109906:	4b54      	ldr	r3, [pc, #336]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810990a:	f003 0303 	and.w	r3, r3, #3
 810990e:	2b03      	cmp	r3, #3
 8109910:	d101      	bne.n	8109916 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8109912:	2301      	movs	r3, #1
 8109914:	e09b      	b.n	8109a4e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8109916:	4b50      	ldr	r3, [pc, #320]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109918:	681b      	ldr	r3, [r3, #0]
 810991a:	4a4f      	ldr	r2, [pc, #316]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 810991c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109922:	f7f9 fd83 	bl	810342c <HAL_GetTick>
 8109926:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109928:	e008      	b.n	810993c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810992a:	f7f9 fd7f 	bl	810342c <HAL_GetTick>
 810992e:	4602      	mov	r2, r0
 8109930:	68bb      	ldr	r3, [r7, #8]
 8109932:	1ad3      	subs	r3, r2, r3
 8109934:	2b02      	cmp	r3, #2
 8109936:	d901      	bls.n	810993c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109938:	2303      	movs	r3, #3
 810993a:	e088      	b.n	8109a4e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810993c:	4b46      	ldr	r3, [pc, #280]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 810993e:	681b      	ldr	r3, [r3, #0]
 8109940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109944:	2b00      	cmp	r3, #0
 8109946:	d1f0      	bne.n	810992a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8109948:	4b43      	ldr	r3, [pc, #268]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 810994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810994c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8109950:	687b      	ldr	r3, [r7, #4]
 8109952:	681b      	ldr	r3, [r3, #0]
 8109954:	051b      	lsls	r3, r3, #20
 8109956:	4940      	ldr	r1, [pc, #256]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109958:	4313      	orrs	r3, r2
 810995a:	628b      	str	r3, [r1, #40]	; 0x28
 810995c:	687b      	ldr	r3, [r7, #4]
 810995e:	685b      	ldr	r3, [r3, #4]
 8109960:	3b01      	subs	r3, #1
 8109962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	689b      	ldr	r3, [r3, #8]
 810996a:	3b01      	subs	r3, #1
 810996c:	025b      	lsls	r3, r3, #9
 810996e:	b29b      	uxth	r3, r3
 8109970:	431a      	orrs	r2, r3
 8109972:	687b      	ldr	r3, [r7, #4]
 8109974:	68db      	ldr	r3, [r3, #12]
 8109976:	3b01      	subs	r3, #1
 8109978:	041b      	lsls	r3, r3, #16
 810997a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810997e:	431a      	orrs	r2, r3
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	691b      	ldr	r3, [r3, #16]
 8109984:	3b01      	subs	r3, #1
 8109986:	061b      	lsls	r3, r3, #24
 8109988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810998c:	4932      	ldr	r1, [pc, #200]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 810998e:	4313      	orrs	r3, r2
 8109990:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109992:	4b31      	ldr	r3, [pc, #196]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810999a:	687b      	ldr	r3, [r7, #4]
 810999c:	695b      	ldr	r3, [r3, #20]
 810999e:	492e      	ldr	r1, [pc, #184]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099a0:	4313      	orrs	r3, r2
 81099a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81099a4:	4b2c      	ldr	r3, [pc, #176]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81099ac:	687b      	ldr	r3, [r7, #4]
 81099ae:	699b      	ldr	r3, [r3, #24]
 81099b0:	4929      	ldr	r1, [pc, #164]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099b2:	4313      	orrs	r3, r2
 81099b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81099b6:	4b28      	ldr	r3, [pc, #160]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099ba:	4a27      	ldr	r2, [pc, #156]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81099c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81099c2:	4b25      	ldr	r3, [pc, #148]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81099c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81099ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81099ce:	687a      	ldr	r2, [r7, #4]
 81099d0:	69d2      	ldr	r2, [r2, #28]
 81099d2:	00d2      	lsls	r2, r2, #3
 81099d4:	4920      	ldr	r1, [pc, #128]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099d6:	4313      	orrs	r3, r2
 81099d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81099da:	4b1f      	ldr	r3, [pc, #124]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099de:	4a1e      	ldr	r2, [pc, #120]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81099e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81099e6:	683b      	ldr	r3, [r7, #0]
 81099e8:	2b00      	cmp	r3, #0
 81099ea:	d106      	bne.n	81099fa <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81099ec:	4b1a      	ldr	r3, [pc, #104]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81099f0:	4a19      	ldr	r2, [pc, #100]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 81099f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81099f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81099f8:	e00f      	b.n	8109a1a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81099fa:	683b      	ldr	r3, [r7, #0]
 81099fc:	2b01      	cmp	r3, #1
 81099fe:	d106      	bne.n	8109a0e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109a00:	4b15      	ldr	r3, [pc, #84]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109a04:	4a14      	ldr	r2, [pc, #80]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8109a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109a0c:	e005      	b.n	8109a1a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109a0e:	4b12      	ldr	r3, [pc, #72]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109a12:	4a11      	ldr	r2, [pc, #68]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8109a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8109a1a:	4b0f      	ldr	r3, [pc, #60]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a1c:	681b      	ldr	r3, [r3, #0]
 8109a1e:	4a0e      	ldr	r2, [pc, #56]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109a26:	f7f9 fd01 	bl	810342c <HAL_GetTick>
 8109a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109a2c:	e008      	b.n	8109a40 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109a2e:	f7f9 fcfd 	bl	810342c <HAL_GetTick>
 8109a32:	4602      	mov	r2, r0
 8109a34:	68bb      	ldr	r3, [r7, #8]
 8109a36:	1ad3      	subs	r3, r2, r3
 8109a38:	2b02      	cmp	r3, #2
 8109a3a:	d901      	bls.n	8109a40 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109a3c:	2303      	movs	r3, #3
 8109a3e:	e006      	b.n	8109a4e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109a40:	4b05      	ldr	r3, [pc, #20]	; (8109a58 <RCCEx_PLL3_Config+0x160>)
 8109a42:	681b      	ldr	r3, [r3, #0]
 8109a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109a48:	2b00      	cmp	r3, #0
 8109a4a:	d0f0      	beq.n	8109a2e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8109a4e:	4618      	mov	r0, r3
 8109a50:	3710      	adds	r7, #16
 8109a52:	46bd      	mov	sp, r7
 8109a54:	bd80      	pop	{r7, pc}
 8109a56:	bf00      	nop
 8109a58:	58024400 	.word	0x58024400

08109a5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109a5c:	b580      	push	{r7, lr}
 8109a5e:	b084      	sub	sp, #16
 8109a60:	af00      	add	r7, sp, #0
 8109a62:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8109a64:	2300      	movs	r3, #0
 8109a66:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	2b00      	cmp	r3, #0
 8109a6c:	d101      	bne.n	8109a72 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8109a6e:	2301      	movs	r3, #1
 8109a70:	e0eb      	b.n	8109c4a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109a72:	687b      	ldr	r3, [r7, #4]
 8109a74:	2200      	movs	r2, #0
 8109a76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	681b      	ldr	r3, [r3, #0]
 8109a7c:	4a75      	ldr	r2, [pc, #468]	; (8109c54 <HAL_SPI_Init+0x1f8>)
 8109a7e:	4293      	cmp	r3, r2
 8109a80:	d00f      	beq.n	8109aa2 <HAL_SPI_Init+0x46>
 8109a82:	687b      	ldr	r3, [r7, #4]
 8109a84:	681b      	ldr	r3, [r3, #0]
 8109a86:	4a74      	ldr	r2, [pc, #464]	; (8109c58 <HAL_SPI_Init+0x1fc>)
 8109a88:	4293      	cmp	r3, r2
 8109a8a:	d00a      	beq.n	8109aa2 <HAL_SPI_Init+0x46>
 8109a8c:	687b      	ldr	r3, [r7, #4]
 8109a8e:	681b      	ldr	r3, [r3, #0]
 8109a90:	4a72      	ldr	r2, [pc, #456]	; (8109c5c <HAL_SPI_Init+0x200>)
 8109a92:	4293      	cmp	r3, r2
 8109a94:	d005      	beq.n	8109aa2 <HAL_SPI_Init+0x46>
 8109a96:	687b      	ldr	r3, [r7, #4]
 8109a98:	68db      	ldr	r3, [r3, #12]
 8109a9a:	2b0f      	cmp	r3, #15
 8109a9c:	d901      	bls.n	8109aa2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8109a9e:	2301      	movs	r3, #1
 8109aa0:	e0d3      	b.n	8109c4a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109aa2:	6878      	ldr	r0, [r7, #4]
 8109aa4:	f000 fdf9 	bl	810a69a <SPI_GetPacketSize>
 8109aa8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	681b      	ldr	r3, [r3, #0]
 8109aae:	4a69      	ldr	r2, [pc, #420]	; (8109c54 <HAL_SPI_Init+0x1f8>)
 8109ab0:	4293      	cmp	r3, r2
 8109ab2:	d00c      	beq.n	8109ace <HAL_SPI_Init+0x72>
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	681b      	ldr	r3, [r3, #0]
 8109ab8:	4a67      	ldr	r2, [pc, #412]	; (8109c58 <HAL_SPI_Init+0x1fc>)
 8109aba:	4293      	cmp	r3, r2
 8109abc:	d007      	beq.n	8109ace <HAL_SPI_Init+0x72>
 8109abe:	687b      	ldr	r3, [r7, #4]
 8109ac0:	681b      	ldr	r3, [r3, #0]
 8109ac2:	4a66      	ldr	r2, [pc, #408]	; (8109c5c <HAL_SPI_Init+0x200>)
 8109ac4:	4293      	cmp	r3, r2
 8109ac6:	d002      	beq.n	8109ace <HAL_SPI_Init+0x72>
 8109ac8:	68bb      	ldr	r3, [r7, #8]
 8109aca:	2b08      	cmp	r3, #8
 8109acc:	d811      	bhi.n	8109af2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109ace:	687b      	ldr	r3, [r7, #4]
 8109ad0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109ad2:	4a60      	ldr	r2, [pc, #384]	; (8109c54 <HAL_SPI_Init+0x1f8>)
 8109ad4:	4293      	cmp	r3, r2
 8109ad6:	d009      	beq.n	8109aec <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	681b      	ldr	r3, [r3, #0]
 8109adc:	4a5e      	ldr	r2, [pc, #376]	; (8109c58 <HAL_SPI_Init+0x1fc>)
 8109ade:	4293      	cmp	r3, r2
 8109ae0:	d004      	beq.n	8109aec <HAL_SPI_Init+0x90>
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	681b      	ldr	r3, [r3, #0]
 8109ae6:	4a5d      	ldr	r2, [pc, #372]	; (8109c5c <HAL_SPI_Init+0x200>)
 8109ae8:	4293      	cmp	r3, r2
 8109aea:	d104      	bne.n	8109af6 <HAL_SPI_Init+0x9a>
 8109aec:	68bb      	ldr	r3, [r7, #8]
 8109aee:	2b10      	cmp	r3, #16
 8109af0:	d901      	bls.n	8109af6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8109af2:	2301      	movs	r3, #1
 8109af4:	e0a9      	b.n	8109c4a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8109af6:	687b      	ldr	r3, [r7, #4]
 8109af8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109afc:	b2db      	uxtb	r3, r3
 8109afe:	2b00      	cmp	r3, #0
 8109b00:	d106      	bne.n	8109b10 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8109b02:	687b      	ldr	r3, [r7, #4]
 8109b04:	2200      	movs	r2, #0
 8109b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8109b0a:	6878      	ldr	r0, [r7, #4]
 8109b0c:	f7f8 ffd8 	bl	8102ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109b10:	687b      	ldr	r3, [r7, #4]
 8109b12:	2202      	movs	r2, #2
 8109b14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109b18:	687b      	ldr	r3, [r7, #4]
 8109b1a:	681b      	ldr	r3, [r3, #0]
 8109b1c:	681a      	ldr	r2, [r3, #0]
 8109b1e:	687b      	ldr	r3, [r7, #4]
 8109b20:	681b      	ldr	r3, [r3, #0]
 8109b22:	f022 0201 	bic.w	r2, r2, #1
 8109b26:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109b28:	687b      	ldr	r3, [r7, #4]
 8109b2a:	699b      	ldr	r3, [r3, #24]
 8109b2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109b30:	d119      	bne.n	8109b66 <HAL_SPI_Init+0x10a>
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	685b      	ldr	r3, [r3, #4]
 8109b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109b3a:	d103      	bne.n	8109b44 <HAL_SPI_Init+0xe8>
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109b40:	2b00      	cmp	r3, #0
 8109b42:	d008      	beq.n	8109b56 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109b44:	687b      	ldr	r3, [r7, #4]
 8109b46:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109b48:	2b00      	cmp	r3, #0
 8109b4a:	d10c      	bne.n	8109b66 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109b4c:	687b      	ldr	r3, [r7, #4]
 8109b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109b54:	d107      	bne.n	8109b66 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109b56:	687b      	ldr	r3, [r7, #4]
 8109b58:	681b      	ldr	r3, [r3, #0]
 8109b5a:	681a      	ldr	r2, [r3, #0]
 8109b5c:	687b      	ldr	r3, [r7, #4]
 8109b5e:	681b      	ldr	r3, [r3, #0]
 8109b60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8109b64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109b66:	687b      	ldr	r3, [r7, #4]
 8109b68:	69da      	ldr	r2, [r3, #28]
 8109b6a:	687b      	ldr	r3, [r7, #4]
 8109b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109b6e:	431a      	orrs	r2, r3
 8109b70:	68fb      	ldr	r3, [r7, #12]
 8109b72:	431a      	orrs	r2, r3
 8109b74:	687b      	ldr	r3, [r7, #4]
 8109b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b78:	ea42 0103 	orr.w	r1, r2, r3
 8109b7c:	687b      	ldr	r3, [r7, #4]
 8109b7e:	68da      	ldr	r2, [r3, #12]
 8109b80:	687b      	ldr	r3, [r7, #4]
 8109b82:	681b      	ldr	r3, [r3, #0]
 8109b84:	430a      	orrs	r2, r1
 8109b86:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109b8c:	687b      	ldr	r3, [r7, #4]
 8109b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b90:	431a      	orrs	r2, r3
 8109b92:	687b      	ldr	r3, [r7, #4]
 8109b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109b96:	431a      	orrs	r2, r3
 8109b98:	687b      	ldr	r3, [r7, #4]
 8109b9a:	699b      	ldr	r3, [r3, #24]
 8109b9c:	431a      	orrs	r2, r3
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	691b      	ldr	r3, [r3, #16]
 8109ba2:	431a      	orrs	r2, r3
 8109ba4:	687b      	ldr	r3, [r7, #4]
 8109ba6:	695b      	ldr	r3, [r3, #20]
 8109ba8:	431a      	orrs	r2, r3
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	6a1b      	ldr	r3, [r3, #32]
 8109bae:	431a      	orrs	r2, r3
 8109bb0:	687b      	ldr	r3, [r7, #4]
 8109bb2:	685b      	ldr	r3, [r3, #4]
 8109bb4:	431a      	orrs	r2, r3
 8109bb6:	687b      	ldr	r3, [r7, #4]
 8109bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109bba:	431a      	orrs	r2, r3
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	689b      	ldr	r3, [r3, #8]
 8109bc0:	431a      	orrs	r2, r3
 8109bc2:	687b      	ldr	r3, [r7, #4]
 8109bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109bc6:	ea42 0103 	orr.w	r1, r2, r3
 8109bca:	687b      	ldr	r3, [r7, #4]
 8109bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	430a      	orrs	r2, r1
 8109bd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109bd6:	687b      	ldr	r3, [r7, #4]
 8109bd8:	685b      	ldr	r3, [r3, #4]
 8109bda:	2b00      	cmp	r3, #0
 8109bdc:	d113      	bne.n	8109c06 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	681b      	ldr	r3, [r3, #0]
 8109be2:	689b      	ldr	r3, [r3, #8]
 8109be4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8109be8:	687b      	ldr	r3, [r7, #4]
 8109bea:	681b      	ldr	r3, [r3, #0]
 8109bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8109bf0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8109bf2:	687b      	ldr	r3, [r7, #4]
 8109bf4:	681b      	ldr	r3, [r3, #0]
 8109bf6:	689b      	ldr	r3, [r3, #8]
 8109bf8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8109c04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	681b      	ldr	r3, [r3, #0]
 8109c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	681b      	ldr	r3, [r3, #0]
 8109c10:	f022 0201 	bic.w	r2, r2, #1
 8109c14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	685b      	ldr	r3, [r3, #4]
 8109c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8109c1e:	2b00      	cmp	r3, #0
 8109c20:	d00a      	beq.n	8109c38 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	68db      	ldr	r3, [r3, #12]
 8109c28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8109c2c:	687b      	ldr	r3, [r7, #4]
 8109c2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8109c30:	687b      	ldr	r3, [r7, #4]
 8109c32:	681b      	ldr	r3, [r3, #0]
 8109c34:	430a      	orrs	r2, r1
 8109c36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8109c38:	687b      	ldr	r3, [r7, #4]
 8109c3a:	2200      	movs	r2, #0
 8109c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8109c40:	687b      	ldr	r3, [r7, #4]
 8109c42:	2201      	movs	r2, #1
 8109c44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8109c48:	2300      	movs	r3, #0
}
 8109c4a:	4618      	mov	r0, r3
 8109c4c:	3710      	adds	r7, #16
 8109c4e:	46bd      	mov	sp, r7
 8109c50:	bd80      	pop	{r7, pc}
 8109c52:	bf00      	nop
 8109c54:	40013000 	.word	0x40013000
 8109c58:	40003800 	.word	0x40003800
 8109c5c:	40003c00 	.word	0x40003c00

08109c60 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8109c60:	b580      	push	{r7, lr}
 8109c62:	b086      	sub	sp, #24
 8109c64:	af00      	add	r7, sp, #0
 8109c66:	60f8      	str	r0, [r7, #12]
 8109c68:	60b9      	str	r1, [r7, #8]
 8109c6a:	607a      	str	r2, [r7, #4]
 8109c6c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8109c6e:	2300      	movs	r3, #0
 8109c70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8109c72:	68fb      	ldr	r3, [r7, #12]
 8109c74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8109c78:	2b01      	cmp	r3, #1
 8109c7a:	d101      	bne.n	8109c80 <HAL_SPI_TransmitReceive_DMA+0x20>
 8109c7c:	2302      	movs	r3, #2
 8109c7e:	e1ac      	b.n	8109fda <HAL_SPI_TransmitReceive_DMA+0x37a>
 8109c80:	68fb      	ldr	r3, [r7, #12]
 8109c82:	2201      	movs	r2, #1
 8109c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8109c88:	68fb      	ldr	r3, [r7, #12]
 8109c8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109c8e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8109c90:	68fb      	ldr	r3, [r7, #12]
 8109c92:	685b      	ldr	r3, [r3, #4]
 8109c94:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8109c96:	693b      	ldr	r3, [r7, #16]
 8109c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109c9c:	d106      	bne.n	8109cac <HAL_SPI_TransmitReceive_DMA+0x4c>
 8109c9e:	68fb      	ldr	r3, [r7, #12]
 8109ca0:	689b      	ldr	r3, [r3, #8]
 8109ca2:	2b00      	cmp	r3, #0
 8109ca4:	d102      	bne.n	8109cac <HAL_SPI_TransmitReceive_DMA+0x4c>
 8109ca6:	7dbb      	ldrb	r3, [r7, #22]
 8109ca8:	2b04      	cmp	r3, #4
 8109caa:	d00a      	beq.n	8109cc2 <HAL_SPI_TransmitReceive_DMA+0x62>
 8109cac:	7dbb      	ldrb	r3, [r7, #22]
 8109cae:	2b01      	cmp	r3, #1
 8109cb0:	d007      	beq.n	8109cc2 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8109cb2:	2302      	movs	r3, #2
 8109cb4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8109cb6:	68fb      	ldr	r3, [r7, #12]
 8109cb8:	2200      	movs	r2, #0
 8109cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8109cbe:	7dfb      	ldrb	r3, [r7, #23]
 8109cc0:	e18b      	b.n	8109fda <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8109cc2:	68bb      	ldr	r3, [r7, #8]
 8109cc4:	2b00      	cmp	r3, #0
 8109cc6:	d005      	beq.n	8109cd4 <HAL_SPI_TransmitReceive_DMA+0x74>
 8109cc8:	687b      	ldr	r3, [r7, #4]
 8109cca:	2b00      	cmp	r3, #0
 8109ccc:	d002      	beq.n	8109cd4 <HAL_SPI_TransmitReceive_DMA+0x74>
 8109cce:	887b      	ldrh	r3, [r7, #2]
 8109cd0:	2b00      	cmp	r3, #0
 8109cd2:	d107      	bne.n	8109ce4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8109cd4:	2301      	movs	r3, #1
 8109cd6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8109cd8:	68fb      	ldr	r3, [r7, #12]
 8109cda:	2200      	movs	r2, #0
 8109cdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8109ce0:	7dfb      	ldrb	r3, [r7, #23]
 8109ce2:	e17a      	b.n	8109fda <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8109ce4:	68fb      	ldr	r3, [r7, #12]
 8109ce6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109cea:	b2db      	uxtb	r3, r3
 8109cec:	2b04      	cmp	r3, #4
 8109cee:	d003      	beq.n	8109cf8 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8109cf0:	68fb      	ldr	r3, [r7, #12]
 8109cf2:	2205      	movs	r2, #5
 8109cf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	2200      	movs	r2, #0
 8109cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8109d00:	68fb      	ldr	r3, [r7, #12]
 8109d02:	68ba      	ldr	r2, [r7, #8]
 8109d04:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8109d06:	68fb      	ldr	r3, [r7, #12]
 8109d08:	887a      	ldrh	r2, [r7, #2]
 8109d0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8109d0e:	68fb      	ldr	r3, [r7, #12]
 8109d10:	887a      	ldrh	r2, [r7, #2]
 8109d12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8109d16:	68fb      	ldr	r3, [r7, #12]
 8109d18:	687a      	ldr	r2, [r7, #4]
 8109d1a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8109d1c:	68fb      	ldr	r3, [r7, #12]
 8109d1e:	887a      	ldrh	r2, [r7, #2]
 8109d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8109d24:	68fb      	ldr	r3, [r7, #12]
 8109d26:	887a      	ldrh	r2, [r7, #2]
 8109d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8109d2c:	68fb      	ldr	r3, [r7, #12]
 8109d2e:	2200      	movs	r2, #0
 8109d30:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8109d32:	68fb      	ldr	r3, [r7, #12]
 8109d34:	2200      	movs	r2, #0
 8109d36:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8109d38:	68fb      	ldr	r3, [r7, #12]
 8109d3a:	681b      	ldr	r3, [r3, #0]
 8109d3c:	689a      	ldr	r2, [r3, #8]
 8109d3e:	68fb      	ldr	r3, [r7, #12]
 8109d40:	681b      	ldr	r3, [r3, #0]
 8109d42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8109d46:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8109d48:	68fb      	ldr	r3, [r7, #12]
 8109d4a:	68db      	ldr	r3, [r3, #12]
 8109d4c:	2b0f      	cmp	r3, #15
 8109d4e:	d905      	bls.n	8109d5c <HAL_SPI_TransmitReceive_DMA+0xfc>
 8109d50:	68fb      	ldr	r3, [r7, #12]
 8109d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109d54:	699b      	ldr	r3, [r3, #24]
 8109d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109d5a:	d10f      	bne.n	8109d7c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8109d5c:	68fb      	ldr	r3, [r7, #12]
 8109d5e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8109d60:	2b07      	cmp	r3, #7
 8109d62:	d913      	bls.n	8109d8c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8109d64:	68fb      	ldr	r3, [r7, #12]
 8109d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109d68:	699b      	ldr	r3, [r3, #24]
 8109d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109d6e:	d00d      	beq.n	8109d8c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8109d70:	68fb      	ldr	r3, [r7, #12]
 8109d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109d74:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8109d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109d7a:	d007      	beq.n	8109d8c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8109d7c:	2301      	movs	r3, #1
 8109d7e:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8109d80:	68fb      	ldr	r3, [r7, #12]
 8109d82:	2200      	movs	r2, #0
 8109d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8109d88:	7dfb      	ldrb	r3, [r7, #23]
 8109d8a:	e126      	b.n	8109fda <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8109d8c:	68fb      	ldr	r3, [r7, #12]
 8109d8e:	68db      	ldr	r3, [r3, #12]
 8109d90:	2b07      	cmp	r3, #7
 8109d92:	d840      	bhi.n	8109e16 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8109d94:	68fb      	ldr	r3, [r7, #12]
 8109d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109d98:	699b      	ldr	r3, [r3, #24]
 8109d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109d9e:	d109      	bne.n	8109db4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8109da0:	68fb      	ldr	r3, [r7, #12]
 8109da2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8109da6:	b29b      	uxth	r3, r3
 8109da8:	3301      	adds	r3, #1
 8109daa:	105b      	asrs	r3, r3, #1
 8109dac:	b29a      	uxth	r2, r3
 8109dae:	68fb      	ldr	r3, [r7, #12]
 8109db0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8109db4:	68fb      	ldr	r3, [r7, #12]
 8109db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109db8:	699b      	ldr	r3, [r3, #24]
 8109dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109dbe:	d109      	bne.n	8109dd4 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8109dc0:	68fb      	ldr	r3, [r7, #12]
 8109dc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8109dc6:	b29b      	uxth	r3, r3
 8109dc8:	3303      	adds	r3, #3
 8109dca:	109b      	asrs	r3, r3, #2
 8109dcc:	b29a      	uxth	r2, r3
 8109dce:	68fb      	ldr	r3, [r7, #12]
 8109dd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8109dd4:	68fb      	ldr	r3, [r7, #12]
 8109dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109dd8:	699b      	ldr	r3, [r3, #24]
 8109dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109dde:	d109      	bne.n	8109df4 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8109de6:	b29b      	uxth	r3, r3
 8109de8:	3301      	adds	r3, #1
 8109dea:	105b      	asrs	r3, r3, #1
 8109dec:	b29a      	uxth	r2, r3
 8109dee:	68fb      	ldr	r3, [r7, #12]
 8109df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8109df4:	68fb      	ldr	r3, [r7, #12]
 8109df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109df8:	699b      	ldr	r3, [r3, #24]
 8109dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109dfe:	d12e      	bne.n	8109e5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8109e00:	68fb      	ldr	r3, [r7, #12]
 8109e02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8109e06:	b29b      	uxth	r3, r3
 8109e08:	3303      	adds	r3, #3
 8109e0a:	109b      	asrs	r3, r3, #2
 8109e0c:	b29a      	uxth	r2, r3
 8109e0e:	68fb      	ldr	r3, [r7, #12]
 8109e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8109e14:	e023      	b.n	8109e5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8109e16:	68fb      	ldr	r3, [r7, #12]
 8109e18:	68db      	ldr	r3, [r3, #12]
 8109e1a:	2b0f      	cmp	r3, #15
 8109e1c:	d81f      	bhi.n	8109e5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8109e1e:	68fb      	ldr	r3, [r7, #12]
 8109e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109e22:	699b      	ldr	r3, [r3, #24]
 8109e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109e28:	d109      	bne.n	8109e3e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8109e2a:	68fb      	ldr	r3, [r7, #12]
 8109e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8109e30:	b29b      	uxth	r3, r3
 8109e32:	3301      	adds	r3, #1
 8109e34:	105b      	asrs	r3, r3, #1
 8109e36:	b29a      	uxth	r2, r3
 8109e38:	68fb      	ldr	r3, [r7, #12]
 8109e3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8109e3e:	68fb      	ldr	r3, [r7, #12]
 8109e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e42:	699b      	ldr	r3, [r3, #24]
 8109e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109e48:	d109      	bne.n	8109e5e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8109e4a:	68fb      	ldr	r3, [r7, #12]
 8109e4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8109e50:	b29b      	uxth	r3, r3
 8109e52:	3301      	adds	r3, #1
 8109e54:	105b      	asrs	r3, r3, #1
 8109e56:	b29a      	uxth	r2, r3
 8109e58:	68fb      	ldr	r3, [r7, #12]
 8109e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8109e5e:	68fb      	ldr	r3, [r7, #12]
 8109e60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109e64:	b2db      	uxtb	r3, r3
 8109e66:	2b04      	cmp	r3, #4
 8109e68:	d108      	bne.n	8109e7c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8109e6a:	68fb      	ldr	r3, [r7, #12]
 8109e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e6e:	4a5d      	ldr	r2, [pc, #372]	; (8109fe4 <HAL_SPI_TransmitReceive_DMA+0x384>)
 8109e70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8109e72:	68fb      	ldr	r3, [r7, #12]
 8109e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e76:	4a5c      	ldr	r2, [pc, #368]	; (8109fe8 <HAL_SPI_TransmitReceive_DMA+0x388>)
 8109e78:	63da      	str	r2, [r3, #60]	; 0x3c
 8109e7a:	e007      	b.n	8109e8c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8109e7c:	68fb      	ldr	r3, [r7, #12]
 8109e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e80:	4a5a      	ldr	r2, [pc, #360]	; (8109fec <HAL_SPI_TransmitReceive_DMA+0x38c>)
 8109e82:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8109e84:	68fb      	ldr	r3, [r7, #12]
 8109e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e88:	4a59      	ldr	r2, [pc, #356]	; (8109ff0 <HAL_SPI_TransmitReceive_DMA+0x390>)
 8109e8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8109e8c:	68fb      	ldr	r3, [r7, #12]
 8109e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e90:	4a58      	ldr	r2, [pc, #352]	; (8109ff4 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8109e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8109e94:	68fb      	ldr	r3, [r7, #12]
 8109e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109e98:	2200      	movs	r2, #0
 8109e9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8109e9c:	68fb      	ldr	r3, [r7, #12]
 8109e9e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8109ea0:	68fb      	ldr	r3, [r7, #12]
 8109ea2:	681b      	ldr	r3, [r3, #0]
 8109ea4:	3330      	adds	r3, #48	; 0x30
 8109ea6:	4619      	mov	r1, r3
 8109ea8:	68fb      	ldr	r3, [r7, #12]
 8109eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109eac:	461a      	mov	r2, r3
 8109eae:	68fb      	ldr	r3, [r7, #12]
 8109eb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8109eb4:	b29b      	uxth	r3, r3
 8109eb6:	f7f9 ff67 	bl	8103d88 <HAL_DMA_Start_IT>
 8109eba:	4603      	mov	r3, r0
 8109ebc:	2b00      	cmp	r3, #0
 8109ebe:	d00f      	beq.n	8109ee0 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8109ec0:	68fb      	ldr	r3, [r7, #12]
 8109ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109ec6:	f043 0210 	orr.w	r2, r3, #16
 8109eca:	68fb      	ldr	r3, [r7, #12]
 8109ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8109ed0:	2301      	movs	r3, #1
 8109ed2:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8109ed4:	68fb      	ldr	r3, [r7, #12]
 8109ed6:	2201      	movs	r2, #1
 8109ed8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8109edc:	7dfb      	ldrb	r3, [r7, #23]
 8109ede:	e07c      	b.n	8109fda <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8109ee0:	68fb      	ldr	r3, [r7, #12]
 8109ee2:	681b      	ldr	r3, [r3, #0]
 8109ee4:	689a      	ldr	r2, [r3, #8]
 8109ee6:	68fb      	ldr	r3, [r7, #12]
 8109ee8:	681b      	ldr	r3, [r3, #0]
 8109eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8109eee:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8109ef0:	68fb      	ldr	r3, [r7, #12]
 8109ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109ef4:	2200      	movs	r2, #0
 8109ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8109ef8:	68fb      	ldr	r3, [r7, #12]
 8109efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109efc:	2200      	movs	r2, #0
 8109efe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8109f00:	68fb      	ldr	r3, [r7, #12]
 8109f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109f04:	2200      	movs	r2, #0
 8109f06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8109f08:	68fb      	ldr	r3, [r7, #12]
 8109f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109f0c:	2200      	movs	r2, #0
 8109f0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8109f10:	68fb      	ldr	r3, [r7, #12]
 8109f12:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8109f14:	68fb      	ldr	r3, [r7, #12]
 8109f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109f18:	4619      	mov	r1, r3
 8109f1a:	68fb      	ldr	r3, [r7, #12]
 8109f1c:	681b      	ldr	r3, [r3, #0]
 8109f1e:	3320      	adds	r3, #32
 8109f20:	461a      	mov	r2, r3
 8109f22:	68fb      	ldr	r3, [r7, #12]
 8109f24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8109f28:	b29b      	uxth	r3, r3
 8109f2a:	f7f9 ff2d 	bl	8103d88 <HAL_DMA_Start_IT>
 8109f2e:	4603      	mov	r3, r0
 8109f30:	2b00      	cmp	r3, #0
 8109f32:	d00f      	beq.n	8109f54 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8109f34:	68fb      	ldr	r3, [r7, #12]
 8109f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109f3a:	f043 0210 	orr.w	r2, r3, #16
 8109f3e:	68fb      	ldr	r3, [r7, #12]
 8109f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 8109f44:	2301      	movs	r3, #1
 8109f46:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 8109f48:	68fb      	ldr	r3, [r7, #12]
 8109f4a:	2201      	movs	r2, #1
 8109f4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 8109f50:	7dfb      	ldrb	r3, [r7, #23]
 8109f52:	e042      	b.n	8109fda <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8109f54:	68fb      	ldr	r3, [r7, #12]
 8109f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109f58:	69db      	ldr	r3, [r3, #28]
 8109f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109f5e:	d108      	bne.n	8109f72 <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8109f60:	68fb      	ldr	r3, [r7, #12]
 8109f62:	681b      	ldr	r3, [r3, #0]
 8109f64:	685b      	ldr	r3, [r3, #4]
 8109f66:	68fa      	ldr	r2, [r7, #12]
 8109f68:	6812      	ldr	r2, [r2, #0]
 8109f6a:	0c1b      	lsrs	r3, r3, #16
 8109f6c:	041b      	lsls	r3, r3, #16
 8109f6e:	6053      	str	r3, [r2, #4]
 8109f70:	e009      	b.n	8109f86 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8109f72:	68fb      	ldr	r3, [r7, #12]
 8109f74:	681b      	ldr	r3, [r3, #0]
 8109f76:	685b      	ldr	r3, [r3, #4]
 8109f78:	0c1b      	lsrs	r3, r3, #16
 8109f7a:	041b      	lsls	r3, r3, #16
 8109f7c:	8879      	ldrh	r1, [r7, #2]
 8109f7e:	68fa      	ldr	r2, [r7, #12]
 8109f80:	6812      	ldr	r2, [r2, #0]
 8109f82:	430b      	orrs	r3, r1
 8109f84:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8109f86:	68fb      	ldr	r3, [r7, #12]
 8109f88:	681b      	ldr	r3, [r3, #0]
 8109f8a:	689a      	ldr	r2, [r3, #8]
 8109f8c:	68fb      	ldr	r3, [r7, #12]
 8109f8e:	681b      	ldr	r3, [r3, #0]
 8109f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8109f94:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8109f96:	68fb      	ldr	r3, [r7, #12]
 8109f98:	681b      	ldr	r3, [r3, #0]
 8109f9a:	691a      	ldr	r2, [r3, #16]
 8109f9c:	68fb      	ldr	r3, [r7, #12]
 8109f9e:	681b      	ldr	r3, [r3, #0]
 8109fa0:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8109fa4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8109fa6:	68fb      	ldr	r3, [r7, #12]
 8109fa8:	681b      	ldr	r3, [r3, #0]
 8109faa:	681a      	ldr	r2, [r3, #0]
 8109fac:	68fb      	ldr	r3, [r7, #12]
 8109fae:	681b      	ldr	r3, [r3, #0]
 8109fb0:	f042 0201 	orr.w	r2, r2, #1
 8109fb4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8109fb6:	68fb      	ldr	r3, [r7, #12]
 8109fb8:	685b      	ldr	r3, [r3, #4]
 8109fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109fbe:	d107      	bne.n	8109fd0 <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8109fc0:	68fb      	ldr	r3, [r7, #12]
 8109fc2:	681b      	ldr	r3, [r3, #0]
 8109fc4:	681a      	ldr	r2, [r3, #0]
 8109fc6:	68fb      	ldr	r3, [r7, #12]
 8109fc8:	681b      	ldr	r3, [r3, #0]
 8109fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8109fce:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8109fd0:	68fb      	ldr	r3, [r7, #12]
 8109fd2:	2200      	movs	r2, #0
 8109fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8109fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8109fda:	4618      	mov	r0, r3
 8109fdc:	3718      	adds	r7, #24
 8109fde:	46bd      	mov	sp, r7
 8109fe0:	bd80      	pop	{r7, pc}
 8109fe2:	bf00      	nop
 8109fe4:	0810a4a9 	.word	0x0810a4a9
 8109fe8:	0810a41d 	.word	0x0810a41d
 8109fec:	0810a4c5 	.word	0x0810a4c5
 8109ff0:	0810a463 	.word	0x0810a463
 8109ff4:	0810a4e1 	.word	0x0810a4e1

08109ff8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8109ff8:	b580      	push	{r7, lr}
 8109ffa:	b08a      	sub	sp, #40	; 0x28
 8109ffc:	af00      	add	r7, sp, #0
 8109ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	681b      	ldr	r3, [r3, #0]
 810a004:	691b      	ldr	r3, [r3, #16]
 810a006:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	681b      	ldr	r3, [r3, #0]
 810a00c:	695b      	ldr	r3, [r3, #20]
 810a00e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810a010:	6a3a      	ldr	r2, [r7, #32]
 810a012:	69fb      	ldr	r3, [r7, #28]
 810a014:	4013      	ands	r3, r2
 810a016:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810a018:	687b      	ldr	r3, [r7, #4]
 810a01a:	681b      	ldr	r3, [r3, #0]
 810a01c:	689b      	ldr	r3, [r3, #8]
 810a01e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810a020:	2300      	movs	r3, #0
 810a022:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810a024:	687b      	ldr	r3, [r7, #4]
 810a026:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a02a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	681b      	ldr	r3, [r3, #0]
 810a030:	3330      	adds	r3, #48	; 0x30
 810a032:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810a034:	69bb      	ldr	r3, [r7, #24]
 810a036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a03a:	2b00      	cmp	r3, #0
 810a03c:	d113      	bne.n	810a066 <HAL_SPI_IRQHandler+0x6e>
 810a03e:	69bb      	ldr	r3, [r7, #24]
 810a040:	f003 0320 	and.w	r3, r3, #32
 810a044:	2b00      	cmp	r3, #0
 810a046:	d10e      	bne.n	810a066 <HAL_SPI_IRQHandler+0x6e>
 810a048:	69bb      	ldr	r3, [r7, #24]
 810a04a:	f003 0304 	and.w	r3, r3, #4
 810a04e:	2b00      	cmp	r3, #0
 810a050:	d009      	beq.n	810a066 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810a052:	687b      	ldr	r3, [r7, #4]
 810a054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a056:	6878      	ldr	r0, [r7, #4]
 810a058:	4798      	blx	r3
    hspi->RxISR(hspi);
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a05e:	6878      	ldr	r0, [r7, #4]
 810a060:	4798      	blx	r3
    handled = 1UL;
 810a062:	2301      	movs	r3, #1
 810a064:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a066:	69bb      	ldr	r3, [r7, #24]
 810a068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a06c:	2b00      	cmp	r3, #0
 810a06e:	d10f      	bne.n	810a090 <HAL_SPI_IRQHandler+0x98>
 810a070:	69bb      	ldr	r3, [r7, #24]
 810a072:	f003 0301 	and.w	r3, r3, #1
 810a076:	2b00      	cmp	r3, #0
 810a078:	d00a      	beq.n	810a090 <HAL_SPI_IRQHandler+0x98>
 810a07a:	69bb      	ldr	r3, [r7, #24]
 810a07c:	f003 0304 	and.w	r3, r3, #4
 810a080:	2b00      	cmp	r3, #0
 810a082:	d105      	bne.n	810a090 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810a084:	687b      	ldr	r3, [r7, #4]
 810a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a088:	6878      	ldr	r0, [r7, #4]
 810a08a:	4798      	blx	r3
    handled = 1UL;
 810a08c:	2301      	movs	r3, #1
 810a08e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a090:	69bb      	ldr	r3, [r7, #24]
 810a092:	f003 0320 	and.w	r3, r3, #32
 810a096:	2b00      	cmp	r3, #0
 810a098:	d10f      	bne.n	810a0ba <HAL_SPI_IRQHandler+0xc2>
 810a09a:	69bb      	ldr	r3, [r7, #24]
 810a09c:	f003 0302 	and.w	r3, r3, #2
 810a0a0:	2b00      	cmp	r3, #0
 810a0a2:	d00a      	beq.n	810a0ba <HAL_SPI_IRQHandler+0xc2>
 810a0a4:	69bb      	ldr	r3, [r7, #24]
 810a0a6:	f003 0304 	and.w	r3, r3, #4
 810a0aa:	2b00      	cmp	r3, #0
 810a0ac:	d105      	bne.n	810a0ba <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810a0ae:	687b      	ldr	r3, [r7, #4]
 810a0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a0b2:	6878      	ldr	r0, [r7, #4]
 810a0b4:	4798      	blx	r3
    handled = 1UL;
 810a0b6:	2301      	movs	r3, #1
 810a0b8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a0bc:	2b00      	cmp	r3, #0
 810a0be:	f040 8171 	bne.w	810a3a4 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810a0c2:	69bb      	ldr	r3, [r7, #24]
 810a0c4:	f003 0308 	and.w	r3, r3, #8
 810a0c8:	2b00      	cmp	r3, #0
 810a0ca:	f000 80a0 	beq.w	810a20e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	681b      	ldr	r3, [r3, #0]
 810a0d2:	699a      	ldr	r2, [r3, #24]
 810a0d4:	687b      	ldr	r3, [r7, #4]
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	f042 0208 	orr.w	r2, r2, #8
 810a0dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a0de:	687b      	ldr	r3, [r7, #4]
 810a0e0:	681b      	ldr	r3, [r3, #0]
 810a0e2:	699a      	ldr	r2, [r3, #24]
 810a0e4:	687b      	ldr	r3, [r7, #4]
 810a0e6:	681b      	ldr	r3, [r3, #0]
 810a0e8:	f042 0210 	orr.w	r2, r2, #16
 810a0ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a0ee:	687b      	ldr	r3, [r7, #4]
 810a0f0:	681b      	ldr	r3, [r3, #0]
 810a0f2:	699a      	ldr	r2, [r3, #24]
 810a0f4:	687b      	ldr	r3, [r7, #4]
 810a0f6:	681b      	ldr	r3, [r3, #0]
 810a0f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a0fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810a0fe:	687b      	ldr	r3, [r7, #4]
 810a100:	681b      	ldr	r3, [r3, #0]
 810a102:	691a      	ldr	r2, [r3, #16]
 810a104:	687b      	ldr	r3, [r7, #4]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	f022 0208 	bic.w	r2, r2, #8
 810a10c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810a10e:	697b      	ldr	r3, [r7, #20]
 810a110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a114:	2b00      	cmp	r3, #0
 810a116:	d00f      	beq.n	810a138 <HAL_SPI_IRQHandler+0x140>
 810a118:	7cfb      	ldrb	r3, [r7, #19]
 810a11a:	2b04      	cmp	r3, #4
 810a11c:	d004      	beq.n	810a128 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810a11e:	687b      	ldr	r3, [r7, #4]
 810a120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a122:	69db      	ldr	r3, [r3, #28]
 810a124:	2b00      	cmp	r3, #0
 810a126:	d007      	beq.n	810a138 <HAL_SPI_IRQHandler+0x140>
 810a128:	7cfb      	ldrb	r3, [r7, #19]
 810a12a:	2b03      	cmp	r3, #3
 810a12c:	d059      	beq.n	810a1e2 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810a12e:	687b      	ldr	r3, [r7, #4]
 810a130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a132:	69db      	ldr	r3, [r3, #28]
 810a134:	2b00      	cmp	r3, #0
 810a136:	d154      	bne.n	810a1e2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	681b      	ldr	r3, [r3, #0]
 810a13c:	689b      	ldr	r3, [r3, #8]
 810a13e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a142:	2b00      	cmp	r3, #0
 810a144:	d13d      	bne.n	810a1c2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810a146:	e036      	b.n	810a1b6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810a148:	687b      	ldr	r3, [r7, #4]
 810a14a:	68db      	ldr	r3, [r3, #12]
 810a14c:	2b0f      	cmp	r3, #15
 810a14e:	d90b      	bls.n	810a168 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	681a      	ldr	r2, [r3, #0]
 810a154:	687b      	ldr	r3, [r7, #4]
 810a156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810a15a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810a15c:	687b      	ldr	r3, [r7, #4]
 810a15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a160:	1d1a      	adds	r2, r3, #4
 810a162:	687b      	ldr	r3, [r7, #4]
 810a164:	665a      	str	r2, [r3, #100]	; 0x64
 810a166:	e01d      	b.n	810a1a4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810a168:	687b      	ldr	r3, [r7, #4]
 810a16a:	68db      	ldr	r3, [r3, #12]
 810a16c:	2b07      	cmp	r3, #7
 810a16e:	d90b      	bls.n	810a188 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810a170:	687b      	ldr	r3, [r7, #4]
 810a172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a174:	68fa      	ldr	r2, [r7, #12]
 810a176:	8812      	ldrh	r2, [r2, #0]
 810a178:	b292      	uxth	r2, r2
 810a17a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a180:	1c9a      	adds	r2, r3, #2
 810a182:	687b      	ldr	r3, [r7, #4]
 810a184:	665a      	str	r2, [r3, #100]	; 0x64
 810a186:	e00d      	b.n	810a1a4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810a188:	687b      	ldr	r3, [r7, #4]
 810a18a:	681b      	ldr	r3, [r3, #0]
 810a18c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810a190:	687b      	ldr	r3, [r7, #4]
 810a192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a194:	7812      	ldrb	r2, [r2, #0]
 810a196:	b2d2      	uxtb	r2, r2
 810a198:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810a19a:	687b      	ldr	r3, [r7, #4]
 810a19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a19e:	1c5a      	adds	r2, r3, #1
 810a1a0:	687b      	ldr	r3, [r7, #4]
 810a1a2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810a1a4:	687b      	ldr	r3, [r7, #4]
 810a1a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a1aa:	b29b      	uxth	r3, r3
 810a1ac:	3b01      	subs	r3, #1
 810a1ae:	b29a      	uxth	r2, r3
 810a1b0:	687b      	ldr	r3, [r7, #4]
 810a1b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810a1b6:	687b      	ldr	r3, [r7, #4]
 810a1b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a1bc:	b29b      	uxth	r3, r3
 810a1be:	2b00      	cmp	r3, #0
 810a1c0:	d1c2      	bne.n	810a148 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810a1c2:	6878      	ldr	r0, [r7, #4]
 810a1c4:	f000 f9c9 	bl	810a55a <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810a1c8:	687b      	ldr	r3, [r7, #4]
 810a1ca:	2201      	movs	r2, #1
 810a1cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a1d0:	687b      	ldr	r3, [r7, #4]
 810a1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a1d6:	2b00      	cmp	r3, #0
 810a1d8:	d003      	beq.n	810a1e2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810a1da:	6878      	ldr	r0, [r7, #4]
 810a1dc:	f000 f914 	bl	810a408 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810a1e0:	e0e5      	b.n	810a3ae <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810a1e2:	7cfb      	ldrb	r3, [r7, #19]
 810a1e4:	2b05      	cmp	r3, #5
 810a1e6:	d103      	bne.n	810a1f0 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810a1e8:	6878      	ldr	r0, [r7, #4]
 810a1ea:	f7f7 fbf3 	bl	81019d4 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810a1ee:	e0db      	b.n	810a3a8 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810a1f0:	7cfb      	ldrb	r3, [r7, #19]
 810a1f2:	2b04      	cmp	r3, #4
 810a1f4:	d103      	bne.n	810a1fe <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810a1f6:	6878      	ldr	r0, [r7, #4]
 810a1f8:	f000 f8e8 	bl	810a3cc <HAL_SPI_RxCpltCallback>
    return;
 810a1fc:	e0d4      	b.n	810a3a8 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810a1fe:	7cfb      	ldrb	r3, [r7, #19]
 810a200:	2b03      	cmp	r3, #3
 810a202:	f040 80d1 	bne.w	810a3a8 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810a206:	6878      	ldr	r0, [r7, #4]
 810a208:	f000 f8d6 	bl	810a3b8 <HAL_SPI_TxCpltCallback>
    return;
 810a20c:	e0cc      	b.n	810a3a8 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810a20e:	69fb      	ldr	r3, [r7, #28]
 810a210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a214:	2b00      	cmp	r3, #0
 810a216:	d00d      	beq.n	810a234 <HAL_SPI_IRQHandler+0x23c>
 810a218:	6a3b      	ldr	r3, [r7, #32]
 810a21a:	f003 0308 	and.w	r3, r3, #8
 810a21e:	2b00      	cmp	r3, #0
 810a220:	d008      	beq.n	810a234 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a222:	687b      	ldr	r3, [r7, #4]
 810a224:	681b      	ldr	r3, [r3, #0]
 810a226:	699a      	ldr	r2, [r3, #24]
 810a228:	687b      	ldr	r3, [r7, #4]
 810a22a:	681b      	ldr	r3, [r3, #0]
 810a22c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a230:	619a      	str	r2, [r3, #24]

    return;
 810a232:	e0bc      	b.n	810a3ae <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810a234:	69bb      	ldr	r3, [r7, #24]
 810a236:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810a23a:	2b00      	cmp	r3, #0
 810a23c:	f000 80b7 	beq.w	810a3ae <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810a240:	69bb      	ldr	r3, [r7, #24]
 810a242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a246:	2b00      	cmp	r3, #0
 810a248:	d00f      	beq.n	810a26a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a250:	f043 0204 	orr.w	r2, r3, #4
 810a254:	687b      	ldr	r3, [r7, #4]
 810a256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a25a:	687b      	ldr	r3, [r7, #4]
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	699a      	ldr	r2, [r3, #24]
 810a260:	687b      	ldr	r3, [r7, #4]
 810a262:	681b      	ldr	r3, [r3, #0]
 810a264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a268:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810a26a:	69bb      	ldr	r3, [r7, #24]
 810a26c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a270:	2b00      	cmp	r3, #0
 810a272:	d00f      	beq.n	810a294 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a274:	687b      	ldr	r3, [r7, #4]
 810a276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a27a:	f043 0201 	orr.w	r2, r3, #1
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a284:	687b      	ldr	r3, [r7, #4]
 810a286:	681b      	ldr	r3, [r3, #0]
 810a288:	699a      	ldr	r2, [r3, #24]
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	681b      	ldr	r3, [r3, #0]
 810a28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a292:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810a294:	69bb      	ldr	r3, [r7, #24]
 810a296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a29a:	2b00      	cmp	r3, #0
 810a29c:	d00f      	beq.n	810a2be <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a29e:	687b      	ldr	r3, [r7, #4]
 810a2a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a2a4:	f043 0208 	orr.w	r2, r3, #8
 810a2a8:	687b      	ldr	r3, [r7, #4]
 810a2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a2ae:	687b      	ldr	r3, [r7, #4]
 810a2b0:	681b      	ldr	r3, [r3, #0]
 810a2b2:	699a      	ldr	r2, [r3, #24]
 810a2b4:	687b      	ldr	r3, [r7, #4]
 810a2b6:	681b      	ldr	r3, [r3, #0]
 810a2b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a2bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810a2be:	69bb      	ldr	r3, [r7, #24]
 810a2c0:	f003 0320 	and.w	r3, r3, #32
 810a2c4:	2b00      	cmp	r3, #0
 810a2c6:	d00f      	beq.n	810a2e8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a2c8:	687b      	ldr	r3, [r7, #4]
 810a2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a2ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a2d2:	687b      	ldr	r3, [r7, #4]
 810a2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a2d8:	687b      	ldr	r3, [r7, #4]
 810a2da:	681b      	ldr	r3, [r3, #0]
 810a2dc:	699a      	ldr	r2, [r3, #24]
 810a2de:	687b      	ldr	r3, [r7, #4]
 810a2e0:	681b      	ldr	r3, [r3, #0]
 810a2e2:	f042 0220 	orr.w	r2, r2, #32
 810a2e6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a2e8:	687b      	ldr	r3, [r7, #4]
 810a2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a2ee:	2b00      	cmp	r3, #0
 810a2f0:	d05c      	beq.n	810a3ac <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810a2f2:	687b      	ldr	r3, [r7, #4]
 810a2f4:	681b      	ldr	r3, [r3, #0]
 810a2f6:	681a      	ldr	r2, [r3, #0]
 810a2f8:	687b      	ldr	r3, [r7, #4]
 810a2fa:	681b      	ldr	r3, [r3, #0]
 810a2fc:	f022 0201 	bic.w	r2, r2, #1
 810a300:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810a302:	687b      	ldr	r3, [r7, #4]
 810a304:	681b      	ldr	r3, [r3, #0]
 810a306:	691b      	ldr	r3, [r3, #16]
 810a308:	687a      	ldr	r2, [r7, #4]
 810a30a:	6812      	ldr	r2, [r2, #0]
 810a30c:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810a310:	f023 0303 	bic.w	r3, r3, #3
 810a314:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a316:	697b      	ldr	r3, [r7, #20]
 810a318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a31c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810a320:	d138      	bne.n	810a394 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a322:	687b      	ldr	r3, [r7, #4]
 810a324:	681b      	ldr	r3, [r3, #0]
 810a326:	689a      	ldr	r2, [r3, #8]
 810a328:	687b      	ldr	r3, [r7, #4]
 810a32a:	681b      	ldr	r3, [r3, #0]
 810a32c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a330:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810a332:	687b      	ldr	r3, [r7, #4]
 810a334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a336:	2b00      	cmp	r3, #0
 810a338:	d013      	beq.n	810a362 <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810a33a:	687b      	ldr	r3, [r7, #4]
 810a33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a33e:	4a1d      	ldr	r2, [pc, #116]	; (810a3b4 <HAL_SPI_IRQHandler+0x3bc>)
 810a340:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810a342:	687b      	ldr	r3, [r7, #4]
 810a344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a346:	4618      	mov	r0, r3
 810a348:	f7fa faa6 	bl	8104898 <HAL_DMA_Abort_IT>
 810a34c:	4603      	mov	r3, r0
 810a34e:	2b00      	cmp	r3, #0
 810a350:	d007      	beq.n	810a362 <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a352:	687b      	ldr	r3, [r7, #4]
 810a354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a358:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a35c:	687b      	ldr	r3, [r7, #4]
 810a35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810a362:	687b      	ldr	r3, [r7, #4]
 810a364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a366:	2b00      	cmp	r3, #0
 810a368:	d020      	beq.n	810a3ac <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810a36a:	687b      	ldr	r3, [r7, #4]
 810a36c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a36e:	4a11      	ldr	r2, [pc, #68]	; (810a3b4 <HAL_SPI_IRQHandler+0x3bc>)
 810a370:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810a372:	687b      	ldr	r3, [r7, #4]
 810a374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a376:	4618      	mov	r0, r3
 810a378:	f7fa fa8e 	bl	8104898 <HAL_DMA_Abort_IT>
 810a37c:	4603      	mov	r3, r0
 810a37e:	2b00      	cmp	r3, #0
 810a380:	d014      	beq.n	810a3ac <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a382:	687b      	ldr	r3, [r7, #4]
 810a384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a388:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a38c:	687b      	ldr	r3, [r7, #4]
 810a38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810a392:	e00b      	b.n	810a3ac <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	2201      	movs	r2, #1
 810a398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810a39c:	6878      	ldr	r0, [r7, #4]
 810a39e:	f000 f833 	bl	810a408 <HAL_SPI_ErrorCallback>
    return;
 810a3a2:	e003      	b.n	810a3ac <HAL_SPI_IRQHandler+0x3b4>
    return;
 810a3a4:	bf00      	nop
 810a3a6:	e002      	b.n	810a3ae <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a3a8:	bf00      	nop
 810a3aa:	e000      	b.n	810a3ae <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a3ac:	bf00      	nop
  }
}
 810a3ae:	3728      	adds	r7, #40	; 0x28
 810a3b0:	46bd      	mov	sp, r7
 810a3b2:	bd80      	pop	{r7, pc}
 810a3b4:	0810a527 	.word	0x0810a527

0810a3b8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a3b8:	b480      	push	{r7}
 810a3ba:	b083      	sub	sp, #12
 810a3bc:	af00      	add	r7, sp, #0
 810a3be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810a3c0:	bf00      	nop
 810a3c2:	370c      	adds	r7, #12
 810a3c4:	46bd      	mov	sp, r7
 810a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3ca:	4770      	bx	lr

0810a3cc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a3cc:	b480      	push	{r7}
 810a3ce:	b083      	sub	sp, #12
 810a3d0:	af00      	add	r7, sp, #0
 810a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810a3d4:	bf00      	nop
 810a3d6:	370c      	adds	r7, #12
 810a3d8:	46bd      	mov	sp, r7
 810a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3de:	4770      	bx	lr

0810a3e0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a3e0:	b480      	push	{r7}
 810a3e2:	b083      	sub	sp, #12
 810a3e4:	af00      	add	r7, sp, #0
 810a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810a3e8:	bf00      	nop
 810a3ea:	370c      	adds	r7, #12
 810a3ec:	46bd      	mov	sp, r7
 810a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3f2:	4770      	bx	lr

0810a3f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a3f4:	b480      	push	{r7}
 810a3f6:	b083      	sub	sp, #12
 810a3f8:	af00      	add	r7, sp, #0
 810a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810a3fc:	bf00      	nop
 810a3fe:	370c      	adds	r7, #12
 810a400:	46bd      	mov	sp, r7
 810a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a406:	4770      	bx	lr

0810a408 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810a408:	b480      	push	{r7}
 810a40a:	b083      	sub	sp, #12
 810a40c:	af00      	add	r7, sp, #0
 810a40e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810a410:	bf00      	nop
 810a412:	370c      	adds	r7, #12
 810a414:	46bd      	mov	sp, r7
 810a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a41a:	4770      	bx	lr

0810a41c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a41c:	b580      	push	{r7, lr}
 810a41e:	b084      	sub	sp, #16
 810a420:	af00      	add	r7, sp, #0
 810a422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a424:	687b      	ldr	r3, [r7, #4]
 810a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a428:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810a42a:	68fb      	ldr	r3, [r7, #12]
 810a42c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a430:	b2db      	uxtb	r3, r3
 810a432:	2b07      	cmp	r3, #7
 810a434:	d011      	beq.n	810a45a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810a436:	68fb      	ldr	r3, [r7, #12]
 810a438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a43a:	69db      	ldr	r3, [r3, #28]
 810a43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a440:	d103      	bne.n	810a44a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810a442:	68f8      	ldr	r0, [r7, #12]
 810a444:	f7ff ffc2 	bl	810a3cc <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810a448:	e007      	b.n	810a45a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810a44a:	68fb      	ldr	r3, [r7, #12]
 810a44c:	681b      	ldr	r3, [r3, #0]
 810a44e:	691a      	ldr	r2, [r3, #16]
 810a450:	68fb      	ldr	r3, [r7, #12]
 810a452:	681b      	ldr	r3, [r3, #0]
 810a454:	f042 0208 	orr.w	r2, r2, #8
 810a458:	611a      	str	r2, [r3, #16]
}
 810a45a:	bf00      	nop
 810a45c:	3710      	adds	r7, #16
 810a45e:	46bd      	mov	sp, r7
 810a460:	bd80      	pop	{r7, pc}

0810a462 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a462:	b580      	push	{r7, lr}
 810a464:	b084      	sub	sp, #16
 810a466:	af00      	add	r7, sp, #0
 810a468:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a46a:	687b      	ldr	r3, [r7, #4]
 810a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a46e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810a470:	68fb      	ldr	r3, [r7, #12]
 810a472:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a476:	b2db      	uxtb	r3, r3
 810a478:	2b07      	cmp	r3, #7
 810a47a:	d011      	beq.n	810a4a0 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a47c:	68fb      	ldr	r3, [r7, #12]
 810a47e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a480:	69db      	ldr	r3, [r3, #28]
 810a482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a486:	d103      	bne.n	810a490 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810a488:	68f8      	ldr	r0, [r7, #12]
 810a48a:	f7f7 faa3 	bl	81019d4 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810a48e:	e007      	b.n	810a4a0 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810a490:	68fb      	ldr	r3, [r7, #12]
 810a492:	681b      	ldr	r3, [r3, #0]
 810a494:	691a      	ldr	r2, [r3, #16]
 810a496:	68fb      	ldr	r3, [r7, #12]
 810a498:	681b      	ldr	r3, [r3, #0]
 810a49a:	f042 0208 	orr.w	r2, r2, #8
 810a49e:	611a      	str	r2, [r3, #16]
}
 810a4a0:	bf00      	nop
 810a4a2:	3710      	adds	r7, #16
 810a4a4:	46bd      	mov	sp, r7
 810a4a6:	bd80      	pop	{r7, pc}

0810a4a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a4a8:	b580      	push	{r7, lr}
 810a4aa:	b084      	sub	sp, #16
 810a4ac:	af00      	add	r7, sp, #0
 810a4ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a4b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810a4b6:	68f8      	ldr	r0, [r7, #12]
 810a4b8:	f7ff ff92 	bl	810a3e0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a4bc:	bf00      	nop
 810a4be:	3710      	adds	r7, #16
 810a4c0:	46bd      	mov	sp, r7
 810a4c2:	bd80      	pop	{r7, pc}

0810a4c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a4c4:	b580      	push	{r7, lr}
 810a4c6:	b084      	sub	sp, #16
 810a4c8:	af00      	add	r7, sp, #0
 810a4ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a4cc:	687b      	ldr	r3, [r7, #4]
 810a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a4d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810a4d2:	68f8      	ldr	r0, [r7, #12]
 810a4d4:	f7ff ff8e 	bl	810a3f4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a4d8:	bf00      	nop
 810a4da:	3710      	adds	r7, #16
 810a4dc:	46bd      	mov	sp, r7
 810a4de:	bd80      	pop	{r7, pc}

0810a4e0 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810a4e0:	b580      	push	{r7, lr}
 810a4e2:	b084      	sub	sp, #16
 810a4e4:	af00      	add	r7, sp, #0
 810a4e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a4e8:	687b      	ldr	r3, [r7, #4]
 810a4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a4ec:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810a4ee:	6878      	ldr	r0, [r7, #4]
 810a4f0:	f7fb fb4e 	bl	8105b90 <HAL_DMA_GetError>
 810a4f4:	4603      	mov	r3, r0
 810a4f6:	2b02      	cmp	r3, #2
 810a4f8:	d011      	beq.n	810a51e <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810a4fa:	68f8      	ldr	r0, [r7, #12]
 810a4fc:	f000 f82d 	bl	810a55a <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a500:	68fb      	ldr	r3, [r7, #12]
 810a502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a506:	f043 0210 	orr.w	r2, r3, #16
 810a50a:	68fb      	ldr	r3, [r7, #12]
 810a50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810a510:	68fb      	ldr	r3, [r7, #12]
 810a512:	2201      	movs	r2, #1
 810a514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810a518:	68f8      	ldr	r0, [r7, #12]
 810a51a:	f7ff ff75 	bl	810a408 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810a51e:	bf00      	nop
 810a520:	3710      	adds	r7, #16
 810a522:	46bd      	mov	sp, r7
 810a524:	bd80      	pop	{r7, pc}

0810a526 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a526:	b580      	push	{r7, lr}
 810a528:	b084      	sub	sp, #16
 810a52a:	af00      	add	r7, sp, #0
 810a52c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a52e:	687b      	ldr	r3, [r7, #4]
 810a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a532:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810a534:	68fb      	ldr	r3, [r7, #12]
 810a536:	2200      	movs	r2, #0
 810a538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810a53c:	68fb      	ldr	r3, [r7, #12]
 810a53e:	2200      	movs	r2, #0
 810a540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810a544:	68fb      	ldr	r3, [r7, #12]
 810a546:	2201      	movs	r2, #1
 810a548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810a54c:	68f8      	ldr	r0, [r7, #12]
 810a54e:	f7ff ff5b 	bl	810a408 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a552:	bf00      	nop
 810a554:	3710      	adds	r7, #16
 810a556:	46bd      	mov	sp, r7
 810a558:	bd80      	pop	{r7, pc}

0810a55a <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810a55a:	b480      	push	{r7}
 810a55c:	b085      	sub	sp, #20
 810a55e:	af00      	add	r7, sp, #0
 810a560:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	681b      	ldr	r3, [r3, #0]
 810a566:	695b      	ldr	r3, [r3, #20]
 810a568:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a56a:	687b      	ldr	r3, [r7, #4]
 810a56c:	681b      	ldr	r3, [r3, #0]
 810a56e:	699a      	ldr	r2, [r3, #24]
 810a570:	687b      	ldr	r3, [r7, #4]
 810a572:	681b      	ldr	r3, [r3, #0]
 810a574:	f042 0208 	orr.w	r2, r2, #8
 810a578:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a57a:	687b      	ldr	r3, [r7, #4]
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	699a      	ldr	r2, [r3, #24]
 810a580:	687b      	ldr	r3, [r7, #4]
 810a582:	681b      	ldr	r3, [r3, #0]
 810a584:	f042 0210 	orr.w	r2, r2, #16
 810a588:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a58a:	687b      	ldr	r3, [r7, #4]
 810a58c:	681b      	ldr	r3, [r3, #0]
 810a58e:	681a      	ldr	r2, [r3, #0]
 810a590:	687b      	ldr	r3, [r7, #4]
 810a592:	681b      	ldr	r3, [r3, #0]
 810a594:	f022 0201 	bic.w	r2, r2, #1
 810a598:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	681b      	ldr	r3, [r3, #0]
 810a59e:	691b      	ldr	r3, [r3, #16]
 810a5a0:	687a      	ldr	r2, [r7, #4]
 810a5a2:	6812      	ldr	r2, [r2, #0]
 810a5a4:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810a5a8:	f023 0303 	bic.w	r3, r3, #3
 810a5ac:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a5ae:	687b      	ldr	r3, [r7, #4]
 810a5b0:	681b      	ldr	r3, [r3, #0]
 810a5b2:	689a      	ldr	r2, [r3, #8]
 810a5b4:	687b      	ldr	r3, [r7, #4]
 810a5b6:	681b      	ldr	r3, [r3, #0]
 810a5b8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a5bc:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a5c4:	b2db      	uxtb	r3, r3
 810a5c6:	2b04      	cmp	r3, #4
 810a5c8:	d014      	beq.n	810a5f4 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810a5ca:	68fb      	ldr	r3, [r7, #12]
 810a5cc:	f003 0320 	and.w	r3, r3, #32
 810a5d0:	2b00      	cmp	r3, #0
 810a5d2:	d00f      	beq.n	810a5f4 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a5d4:	687b      	ldr	r3, [r7, #4]
 810a5d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a5da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	681b      	ldr	r3, [r3, #0]
 810a5e8:	699a      	ldr	r2, [r3, #24]
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	f042 0220 	orr.w	r2, r2, #32
 810a5f2:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a5fa:	b2db      	uxtb	r3, r3
 810a5fc:	2b03      	cmp	r3, #3
 810a5fe:	d014      	beq.n	810a62a <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810a600:	68fb      	ldr	r3, [r7, #12]
 810a602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a606:	2b00      	cmp	r3, #0
 810a608:	d00f      	beq.n	810a62a <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a610:	f043 0204 	orr.w	r2, r3, #4
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a61a:	687b      	ldr	r3, [r7, #4]
 810a61c:	681b      	ldr	r3, [r3, #0]
 810a61e:	699a      	ldr	r2, [r3, #24]
 810a620:	687b      	ldr	r3, [r7, #4]
 810a622:	681b      	ldr	r3, [r3, #0]
 810a624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a628:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810a62a:	68fb      	ldr	r3, [r7, #12]
 810a62c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a630:	2b00      	cmp	r3, #0
 810a632:	d00f      	beq.n	810a654 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a63a:	f043 0201 	orr.w	r2, r3, #1
 810a63e:	687b      	ldr	r3, [r7, #4]
 810a640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	681b      	ldr	r3, [r3, #0]
 810a648:	699a      	ldr	r2, [r3, #24]
 810a64a:	687b      	ldr	r3, [r7, #4]
 810a64c:	681b      	ldr	r3, [r3, #0]
 810a64e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a652:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810a654:	68fb      	ldr	r3, [r7, #12]
 810a656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a65a:	2b00      	cmp	r3, #0
 810a65c:	d00f      	beq.n	810a67e <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a65e:	687b      	ldr	r3, [r7, #4]
 810a660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a664:	f043 0208 	orr.w	r2, r3, #8
 810a668:	687b      	ldr	r3, [r7, #4]
 810a66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a66e:	687b      	ldr	r3, [r7, #4]
 810a670:	681b      	ldr	r3, [r3, #0]
 810a672:	699a      	ldr	r2, [r3, #24]
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	681b      	ldr	r3, [r3, #0]
 810a678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a67c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810a67e:	687b      	ldr	r3, [r7, #4]
 810a680:	2200      	movs	r2, #0
 810a682:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810a686:	687b      	ldr	r3, [r7, #4]
 810a688:	2200      	movs	r2, #0
 810a68a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810a68e:	bf00      	nop
 810a690:	3714      	adds	r7, #20
 810a692:	46bd      	mov	sp, r7
 810a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a698:	4770      	bx	lr

0810a69a <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810a69a:	b480      	push	{r7}
 810a69c:	b085      	sub	sp, #20
 810a69e:	af00      	add	r7, sp, #0
 810a6a0:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810a6a2:	687b      	ldr	r3, [r7, #4]
 810a6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a6a6:	095b      	lsrs	r3, r3, #5
 810a6a8:	3301      	adds	r3, #1
 810a6aa:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810a6ac:	687b      	ldr	r3, [r7, #4]
 810a6ae:	68db      	ldr	r3, [r3, #12]
 810a6b0:	3301      	adds	r3, #1
 810a6b2:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810a6b4:	68bb      	ldr	r3, [r7, #8]
 810a6b6:	3307      	adds	r3, #7
 810a6b8:	08db      	lsrs	r3, r3, #3
 810a6ba:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810a6bc:	68bb      	ldr	r3, [r7, #8]
 810a6be:	68fa      	ldr	r2, [r7, #12]
 810a6c0:	fb02 f303 	mul.w	r3, r2, r3
}
 810a6c4:	4618      	mov	r0, r3
 810a6c6:	3714      	adds	r7, #20
 810a6c8:	46bd      	mov	sp, r7
 810a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6ce:	4770      	bx	lr

0810a6d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a6d0:	b580      	push	{r7, lr}
 810a6d2:	b082      	sub	sp, #8
 810a6d4:	af00      	add	r7, sp, #0
 810a6d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a6d8:	687b      	ldr	r3, [r7, #4]
 810a6da:	2b00      	cmp	r3, #0
 810a6dc:	d101      	bne.n	810a6e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a6de:	2301      	movs	r3, #1
 810a6e0:	e042      	b.n	810a768 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a6e2:	687b      	ldr	r3, [r7, #4]
 810a6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a6e8:	2b00      	cmp	r3, #0
 810a6ea:	d106      	bne.n	810a6fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	2200      	movs	r2, #0
 810a6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810a6f4:	6878      	ldr	r0, [r7, #4]
 810a6f6:	f7f8 fcf5 	bl	81030e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810a6fa:	687b      	ldr	r3, [r7, #4]
 810a6fc:	2224      	movs	r2, #36	; 0x24
 810a6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810a702:	687b      	ldr	r3, [r7, #4]
 810a704:	681b      	ldr	r3, [r3, #0]
 810a706:	681a      	ldr	r2, [r3, #0]
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	681b      	ldr	r3, [r3, #0]
 810a70c:	f022 0201 	bic.w	r2, r2, #1
 810a710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810a712:	6878      	ldr	r0, [r7, #4]
 810a714:	f000 fbd6 	bl	810aec4 <UART_SetConfig>
 810a718:	4603      	mov	r3, r0
 810a71a:	2b01      	cmp	r3, #1
 810a71c:	d101      	bne.n	810a722 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810a71e:	2301      	movs	r3, #1
 810a720:	e022      	b.n	810a768 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810a722:	687b      	ldr	r3, [r7, #4]
 810a724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a726:	2b00      	cmp	r3, #0
 810a728:	d002      	beq.n	810a730 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810a72a:	6878      	ldr	r0, [r7, #4]
 810a72c:	f001 f92a 	bl	810b984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810a730:	687b      	ldr	r3, [r7, #4]
 810a732:	681b      	ldr	r3, [r3, #0]
 810a734:	685a      	ldr	r2, [r3, #4]
 810a736:	687b      	ldr	r3, [r7, #4]
 810a738:	681b      	ldr	r3, [r3, #0]
 810a73a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810a73e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810a740:	687b      	ldr	r3, [r7, #4]
 810a742:	681b      	ldr	r3, [r3, #0]
 810a744:	689a      	ldr	r2, [r3, #8]
 810a746:	687b      	ldr	r3, [r7, #4]
 810a748:	681b      	ldr	r3, [r3, #0]
 810a74a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810a74e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810a750:	687b      	ldr	r3, [r7, #4]
 810a752:	681b      	ldr	r3, [r3, #0]
 810a754:	681a      	ldr	r2, [r3, #0]
 810a756:	687b      	ldr	r3, [r7, #4]
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	f042 0201 	orr.w	r2, r2, #1
 810a75e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810a760:	6878      	ldr	r0, [r7, #4]
 810a762:	f001 f9b1 	bl	810bac8 <UART_CheckIdleState>
 810a766:	4603      	mov	r3, r0
}
 810a768:	4618      	mov	r0, r3
 810a76a:	3708      	adds	r7, #8
 810a76c:	46bd      	mov	sp, r7
 810a76e:	bd80      	pop	{r7, pc}

0810a770 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810a770:	b580      	push	{r7, lr}
 810a772:	b084      	sub	sp, #16
 810a774:	af00      	add	r7, sp, #0
 810a776:	60f8      	str	r0, [r7, #12]
 810a778:	60b9      	str	r1, [r7, #8]
 810a77a:	4613      	mov	r3, r2
 810a77c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810a77e:	68fb      	ldr	r3, [r7, #12]
 810a780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a784:	2b20      	cmp	r3, #32
 810a786:	d168      	bne.n	810a85a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810a788:	68bb      	ldr	r3, [r7, #8]
 810a78a:	2b00      	cmp	r3, #0
 810a78c:	d002      	beq.n	810a794 <HAL_UART_Transmit_DMA+0x24>
 810a78e:	88fb      	ldrh	r3, [r7, #6]
 810a790:	2b00      	cmp	r3, #0
 810a792:	d101      	bne.n	810a798 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810a794:	2301      	movs	r3, #1
 810a796:	e061      	b.n	810a85c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810a798:	68fb      	ldr	r3, [r7, #12]
 810a79a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a79e:	2b01      	cmp	r3, #1
 810a7a0:	d101      	bne.n	810a7a6 <HAL_UART_Transmit_DMA+0x36>
 810a7a2:	2302      	movs	r3, #2
 810a7a4:	e05a      	b.n	810a85c <HAL_UART_Transmit_DMA+0xec>
 810a7a6:	68fb      	ldr	r3, [r7, #12]
 810a7a8:	2201      	movs	r2, #1
 810a7aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810a7ae:	68fb      	ldr	r3, [r7, #12]
 810a7b0:	68ba      	ldr	r2, [r7, #8]
 810a7b2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810a7b4:	68fb      	ldr	r3, [r7, #12]
 810a7b6:	88fa      	ldrh	r2, [r7, #6]
 810a7b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810a7bc:	68fb      	ldr	r3, [r7, #12]
 810a7be:	88fa      	ldrh	r2, [r7, #6]
 810a7c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a7c4:	68fb      	ldr	r3, [r7, #12]
 810a7c6:	2200      	movs	r2, #0
 810a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810a7cc:	68fb      	ldr	r3, [r7, #12]
 810a7ce:	2221      	movs	r2, #33	; 0x21
 810a7d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810a7d4:	68fb      	ldr	r3, [r7, #12]
 810a7d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7d8:	2b00      	cmp	r3, #0
 810a7da:	d02c      	beq.n	810a836 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810a7dc:	68fb      	ldr	r3, [r7, #12]
 810a7de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7e0:	4a20      	ldr	r2, [pc, #128]	; (810a864 <HAL_UART_Transmit_DMA+0xf4>)
 810a7e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810a7e4:	68fb      	ldr	r3, [r7, #12]
 810a7e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7e8:	4a1f      	ldr	r2, [pc, #124]	; (810a868 <HAL_UART_Transmit_DMA+0xf8>)
 810a7ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810a7ec:	68fb      	ldr	r3, [r7, #12]
 810a7ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7f0:	4a1e      	ldr	r2, [pc, #120]	; (810a86c <HAL_UART_Transmit_DMA+0xfc>)
 810a7f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810a7f4:	68fb      	ldr	r3, [r7, #12]
 810a7f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7f8:	2200      	movs	r2, #0
 810a7fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810a7fc:	68fb      	ldr	r3, [r7, #12]
 810a7fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810a800:	68fb      	ldr	r3, [r7, #12]
 810a802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a804:	4619      	mov	r1, r3
 810a806:	68fb      	ldr	r3, [r7, #12]
 810a808:	681b      	ldr	r3, [r3, #0]
 810a80a:	3328      	adds	r3, #40	; 0x28
 810a80c:	461a      	mov	r2, r3
 810a80e:	88fb      	ldrh	r3, [r7, #6]
 810a810:	f7f9 faba 	bl	8103d88 <HAL_DMA_Start_IT>
 810a814:	4603      	mov	r3, r0
 810a816:	2b00      	cmp	r3, #0
 810a818:	d00d      	beq.n	810a836 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810a81a:	68fb      	ldr	r3, [r7, #12]
 810a81c:	2210      	movs	r2, #16
 810a81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810a822:	68fb      	ldr	r3, [r7, #12]
 810a824:	2200      	movs	r2, #0
 810a826:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810a82a:	68fb      	ldr	r3, [r7, #12]
 810a82c:	2220      	movs	r2, #32
 810a82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810a832:	2301      	movs	r3, #1
 810a834:	e012      	b.n	810a85c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810a836:	68fb      	ldr	r3, [r7, #12]
 810a838:	681b      	ldr	r3, [r3, #0]
 810a83a:	2240      	movs	r2, #64	; 0x40
 810a83c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810a83e:	68fb      	ldr	r3, [r7, #12]
 810a840:	2200      	movs	r2, #0
 810a842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810a846:	68fb      	ldr	r3, [r7, #12]
 810a848:	681b      	ldr	r3, [r3, #0]
 810a84a:	689a      	ldr	r2, [r3, #8]
 810a84c:	68fb      	ldr	r3, [r7, #12]
 810a84e:	681b      	ldr	r3, [r3, #0]
 810a850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810a854:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810a856:	2300      	movs	r3, #0
 810a858:	e000      	b.n	810a85c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810a85a:	2302      	movs	r3, #2
  }
}
 810a85c:	4618      	mov	r0, r3
 810a85e:	3710      	adds	r7, #16
 810a860:	46bd      	mov	sp, r7
 810a862:	bd80      	pop	{r7, pc}
 810a864:	0810bddd 	.word	0x0810bddd
 810a868:	0810be2d 	.word	0x0810be2d
 810a86c:	0810bf17 	.word	0x0810bf17

0810a870 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810a870:	b580      	push	{r7, lr}
 810a872:	b084      	sub	sp, #16
 810a874:	af00      	add	r7, sp, #0
 810a876:	60f8      	str	r0, [r7, #12]
 810a878:	60b9      	str	r1, [r7, #8]
 810a87a:	4613      	mov	r3, r2
 810a87c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810a87e:	68fb      	ldr	r3, [r7, #12]
 810a880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810a884:	2b20      	cmp	r3, #32
 810a886:	d131      	bne.n	810a8ec <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810a888:	68bb      	ldr	r3, [r7, #8]
 810a88a:	2b00      	cmp	r3, #0
 810a88c:	d002      	beq.n	810a894 <HAL_UART_Receive_DMA+0x24>
 810a88e:	88fb      	ldrh	r3, [r7, #6]
 810a890:	2b00      	cmp	r3, #0
 810a892:	d101      	bne.n	810a898 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810a894:	2301      	movs	r3, #1
 810a896:	e02a      	b.n	810a8ee <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810a898:	68fb      	ldr	r3, [r7, #12]
 810a89a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a89e:	2b01      	cmp	r3, #1
 810a8a0:	d101      	bne.n	810a8a6 <HAL_UART_Receive_DMA+0x36>
 810a8a2:	2302      	movs	r3, #2
 810a8a4:	e023      	b.n	810a8ee <HAL_UART_Receive_DMA+0x7e>
 810a8a6:	68fb      	ldr	r3, [r7, #12]
 810a8a8:	2201      	movs	r2, #1
 810a8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a8ae:	68fb      	ldr	r3, [r7, #12]
 810a8b0:	2200      	movs	r2, #0
 810a8b2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810a8b4:	68fb      	ldr	r3, [r7, #12]
 810a8b6:	681b      	ldr	r3, [r3, #0]
 810a8b8:	4a0f      	ldr	r2, [pc, #60]	; (810a8f8 <HAL_UART_Receive_DMA+0x88>)
 810a8ba:	4293      	cmp	r3, r2
 810a8bc:	d00e      	beq.n	810a8dc <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810a8be:	68fb      	ldr	r3, [r7, #12]
 810a8c0:	681b      	ldr	r3, [r3, #0]
 810a8c2:	685b      	ldr	r3, [r3, #4]
 810a8c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a8c8:	2b00      	cmp	r3, #0
 810a8ca:	d007      	beq.n	810a8dc <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810a8cc:	68fb      	ldr	r3, [r7, #12]
 810a8ce:	681b      	ldr	r3, [r3, #0]
 810a8d0:	681a      	ldr	r2, [r3, #0]
 810a8d2:	68fb      	ldr	r3, [r7, #12]
 810a8d4:	681b      	ldr	r3, [r3, #0]
 810a8d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810a8da:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810a8dc:	88fb      	ldrh	r3, [r7, #6]
 810a8de:	461a      	mov	r2, r3
 810a8e0:	68b9      	ldr	r1, [r7, #8]
 810a8e2:	68f8      	ldr	r0, [r7, #12]
 810a8e4:	f001 f9bc 	bl	810bc60 <UART_Start_Receive_DMA>
 810a8e8:	4603      	mov	r3, r0
 810a8ea:	e000      	b.n	810a8ee <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810a8ec:	2302      	movs	r3, #2
  }
}
 810a8ee:	4618      	mov	r0, r3
 810a8f0:	3710      	adds	r7, #16
 810a8f2:	46bd      	mov	sp, r7
 810a8f4:	bd80      	pop	{r7, pc}
 810a8f6:	bf00      	nop
 810a8f8:	58000c00 	.word	0x58000c00

0810a8fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810a8fc:	b580      	push	{r7, lr}
 810a8fe:	b088      	sub	sp, #32
 810a900:	af00      	add	r7, sp, #0
 810a902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810a904:	687b      	ldr	r3, [r7, #4]
 810a906:	681b      	ldr	r3, [r3, #0]
 810a908:	69db      	ldr	r3, [r3, #28]
 810a90a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810a90c:	687b      	ldr	r3, [r7, #4]
 810a90e:	681b      	ldr	r3, [r3, #0]
 810a910:	681b      	ldr	r3, [r3, #0]
 810a912:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810a914:	687b      	ldr	r3, [r7, #4]
 810a916:	681b      	ldr	r3, [r3, #0]
 810a918:	689b      	ldr	r3, [r3, #8]
 810a91a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810a91c:	69fa      	ldr	r2, [r7, #28]
 810a91e:	f640 030f 	movw	r3, #2063	; 0x80f
 810a922:	4013      	ands	r3, r2
 810a924:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810a926:	693b      	ldr	r3, [r7, #16]
 810a928:	2b00      	cmp	r3, #0
 810a92a:	d118      	bne.n	810a95e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810a92c:	69fb      	ldr	r3, [r7, #28]
 810a92e:	f003 0320 	and.w	r3, r3, #32
 810a932:	2b00      	cmp	r3, #0
 810a934:	d013      	beq.n	810a95e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810a936:	69bb      	ldr	r3, [r7, #24]
 810a938:	f003 0320 	and.w	r3, r3, #32
 810a93c:	2b00      	cmp	r3, #0
 810a93e:	d104      	bne.n	810a94a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810a940:	697b      	ldr	r3, [r7, #20]
 810a942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a946:	2b00      	cmp	r3, #0
 810a948:	d009      	beq.n	810a95e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a94e:	2b00      	cmp	r3, #0
 810a950:	f000 8282 	beq.w	810ae58 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810a954:	687b      	ldr	r3, [r7, #4]
 810a956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a958:	6878      	ldr	r0, [r7, #4]
 810a95a:	4798      	blx	r3
      }
      return;
 810a95c:	e27c      	b.n	810ae58 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810a95e:	693b      	ldr	r3, [r7, #16]
 810a960:	2b00      	cmp	r3, #0
 810a962:	f000 80ef 	beq.w	810ab44 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810a966:	697a      	ldr	r2, [r7, #20]
 810a968:	4b73      	ldr	r3, [pc, #460]	; (810ab38 <HAL_UART_IRQHandler+0x23c>)
 810a96a:	4013      	ands	r3, r2
 810a96c:	2b00      	cmp	r3, #0
 810a96e:	d105      	bne.n	810a97c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810a970:	69ba      	ldr	r2, [r7, #24]
 810a972:	4b72      	ldr	r3, [pc, #456]	; (810ab3c <HAL_UART_IRQHandler+0x240>)
 810a974:	4013      	ands	r3, r2
 810a976:	2b00      	cmp	r3, #0
 810a978:	f000 80e4 	beq.w	810ab44 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810a97c:	69fb      	ldr	r3, [r7, #28]
 810a97e:	f003 0301 	and.w	r3, r3, #1
 810a982:	2b00      	cmp	r3, #0
 810a984:	d010      	beq.n	810a9a8 <HAL_UART_IRQHandler+0xac>
 810a986:	69bb      	ldr	r3, [r7, #24]
 810a988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a98c:	2b00      	cmp	r3, #0
 810a98e:	d00b      	beq.n	810a9a8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	681b      	ldr	r3, [r3, #0]
 810a994:	2201      	movs	r2, #1
 810a996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810a998:	687b      	ldr	r3, [r7, #4]
 810a99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a99e:	f043 0201 	orr.w	r2, r3, #1
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810a9a8:	69fb      	ldr	r3, [r7, #28]
 810a9aa:	f003 0302 	and.w	r3, r3, #2
 810a9ae:	2b00      	cmp	r3, #0
 810a9b0:	d010      	beq.n	810a9d4 <HAL_UART_IRQHandler+0xd8>
 810a9b2:	697b      	ldr	r3, [r7, #20]
 810a9b4:	f003 0301 	and.w	r3, r3, #1
 810a9b8:	2b00      	cmp	r3, #0
 810a9ba:	d00b      	beq.n	810a9d4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810a9bc:	687b      	ldr	r3, [r7, #4]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	2202      	movs	r2, #2
 810a9c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810a9c4:	687b      	ldr	r3, [r7, #4]
 810a9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a9ca:	f043 0204 	orr.w	r2, r3, #4
 810a9ce:	687b      	ldr	r3, [r7, #4]
 810a9d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810a9d4:	69fb      	ldr	r3, [r7, #28]
 810a9d6:	f003 0304 	and.w	r3, r3, #4
 810a9da:	2b00      	cmp	r3, #0
 810a9dc:	d010      	beq.n	810aa00 <HAL_UART_IRQHandler+0x104>
 810a9de:	697b      	ldr	r3, [r7, #20]
 810a9e0:	f003 0301 	and.w	r3, r3, #1
 810a9e4:	2b00      	cmp	r3, #0
 810a9e6:	d00b      	beq.n	810aa00 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810a9e8:	687b      	ldr	r3, [r7, #4]
 810a9ea:	681b      	ldr	r3, [r3, #0]
 810a9ec:	2204      	movs	r2, #4
 810a9ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810a9f6:	f043 0202 	orr.w	r2, r3, #2
 810a9fa:	687b      	ldr	r3, [r7, #4]
 810a9fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810aa00:	69fb      	ldr	r3, [r7, #28]
 810aa02:	f003 0308 	and.w	r3, r3, #8
 810aa06:	2b00      	cmp	r3, #0
 810aa08:	d015      	beq.n	810aa36 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810aa0a:	69bb      	ldr	r3, [r7, #24]
 810aa0c:	f003 0320 	and.w	r3, r3, #32
 810aa10:	2b00      	cmp	r3, #0
 810aa12:	d104      	bne.n	810aa1e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810aa14:	697a      	ldr	r2, [r7, #20]
 810aa16:	4b48      	ldr	r3, [pc, #288]	; (810ab38 <HAL_UART_IRQHandler+0x23c>)
 810aa18:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810aa1a:	2b00      	cmp	r3, #0
 810aa1c:	d00b      	beq.n	810aa36 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810aa1e:	687b      	ldr	r3, [r7, #4]
 810aa20:	681b      	ldr	r3, [r3, #0]
 810aa22:	2208      	movs	r2, #8
 810aa24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810aa2c:	f043 0208 	orr.w	r2, r3, #8
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810aa36:	69fb      	ldr	r3, [r7, #28]
 810aa38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810aa3c:	2b00      	cmp	r3, #0
 810aa3e:	d011      	beq.n	810aa64 <HAL_UART_IRQHandler+0x168>
 810aa40:	69bb      	ldr	r3, [r7, #24]
 810aa42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810aa46:	2b00      	cmp	r3, #0
 810aa48:	d00c      	beq.n	810aa64 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	681b      	ldr	r3, [r3, #0]
 810aa4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810aa52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810aa5a:	f043 0220 	orr.w	r2, r3, #32
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810aa6a:	2b00      	cmp	r3, #0
 810aa6c:	f000 81f6 	beq.w	810ae5c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810aa70:	69fb      	ldr	r3, [r7, #28]
 810aa72:	f003 0320 	and.w	r3, r3, #32
 810aa76:	2b00      	cmp	r3, #0
 810aa78:	d011      	beq.n	810aa9e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810aa7a:	69bb      	ldr	r3, [r7, #24]
 810aa7c:	f003 0320 	and.w	r3, r3, #32
 810aa80:	2b00      	cmp	r3, #0
 810aa82:	d104      	bne.n	810aa8e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810aa84:	697b      	ldr	r3, [r7, #20]
 810aa86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	d007      	beq.n	810aa9e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810aa8e:	687b      	ldr	r3, [r7, #4]
 810aa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aa92:	2b00      	cmp	r3, #0
 810aa94:	d003      	beq.n	810aa9e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810aa96:	687b      	ldr	r3, [r7, #4]
 810aa98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aa9a:	6878      	ldr	r0, [r7, #4]
 810aa9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810aa9e:	687b      	ldr	r3, [r7, #4]
 810aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810aaa4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	681b      	ldr	r3, [r3, #0]
 810aaaa:	689b      	ldr	r3, [r3, #8]
 810aaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aab0:	2b40      	cmp	r3, #64	; 0x40
 810aab2:	d004      	beq.n	810aabe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810aab4:	68fb      	ldr	r3, [r7, #12]
 810aab6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810aaba:	2b00      	cmp	r3, #0
 810aabc:	d031      	beq.n	810ab22 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810aabe:	6878      	ldr	r0, [r7, #4]
 810aac0:	f001 f95a 	bl	810bd78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810aac4:	687b      	ldr	r3, [r7, #4]
 810aac6:	681b      	ldr	r3, [r3, #0]
 810aac8:	689b      	ldr	r3, [r3, #8]
 810aaca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aace:	2b40      	cmp	r3, #64	; 0x40
 810aad0:	d123      	bne.n	810ab1a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810aad2:	687b      	ldr	r3, [r7, #4]
 810aad4:	681b      	ldr	r3, [r3, #0]
 810aad6:	689a      	ldr	r2, [r3, #8]
 810aad8:	687b      	ldr	r3, [r7, #4]
 810aada:	681b      	ldr	r3, [r3, #0]
 810aadc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810aae0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810aae2:	687b      	ldr	r3, [r7, #4]
 810aae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aae6:	2b00      	cmp	r3, #0
 810aae8:	d013      	beq.n	810ab12 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aaee:	4a14      	ldr	r2, [pc, #80]	; (810ab40 <HAL_UART_IRQHandler+0x244>)
 810aaf0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810aaf2:	687b      	ldr	r3, [r7, #4]
 810aaf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aaf6:	4618      	mov	r0, r3
 810aaf8:	f7f9 fece 	bl	8104898 <HAL_DMA_Abort_IT>
 810aafc:	4603      	mov	r3, r0
 810aafe:	2b00      	cmp	r3, #0
 810ab00:	d017      	beq.n	810ab32 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ab06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ab08:	687a      	ldr	r2, [r7, #4]
 810ab0a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810ab0c:	4610      	mov	r0, r2
 810ab0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ab10:	e00f      	b.n	810ab32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810ab12:	6878      	ldr	r0, [r7, #4]
 810ab14:	f000 f9c0 	bl	810ae98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ab18:	e00b      	b.n	810ab32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810ab1a:	6878      	ldr	r0, [r7, #4]
 810ab1c:	f000 f9bc 	bl	810ae98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ab20:	e007      	b.n	810ab32 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810ab22:	6878      	ldr	r0, [r7, #4]
 810ab24:	f000 f9b8 	bl	810ae98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ab28:	687b      	ldr	r3, [r7, #4]
 810ab2a:	2200      	movs	r2, #0
 810ab2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810ab30:	e194      	b.n	810ae5c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ab32:	bf00      	nop
    return;
 810ab34:	e192      	b.n	810ae5c <HAL_UART_IRQHandler+0x560>
 810ab36:	bf00      	nop
 810ab38:	10000001 	.word	0x10000001
 810ab3c:	04000120 	.word	0x04000120
 810ab40:	0810bf97 	.word	0x0810bf97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ab44:	687b      	ldr	r3, [r7, #4]
 810ab46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810ab48:	2b01      	cmp	r3, #1
 810ab4a:	f040 8111 	bne.w	810ad70 <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810ab4e:	69fb      	ldr	r3, [r7, #28]
 810ab50:	f003 0310 	and.w	r3, r3, #16
 810ab54:	2b00      	cmp	r3, #0
 810ab56:	f000 810b 	beq.w	810ad70 <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810ab5a:	69bb      	ldr	r3, [r7, #24]
 810ab5c:	f003 0310 	and.w	r3, r3, #16
 810ab60:	2b00      	cmp	r3, #0
 810ab62:	f000 8105 	beq.w	810ad70 <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810ab66:	687b      	ldr	r3, [r7, #4]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	2210      	movs	r2, #16
 810ab6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810ab6e:	687b      	ldr	r3, [r7, #4]
 810ab70:	681b      	ldr	r3, [r3, #0]
 810ab72:	689b      	ldr	r3, [r3, #8]
 810ab74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ab78:	2b40      	cmp	r3, #64	; 0x40
 810ab7a:	f040 80bb 	bne.w	810acf4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810ab7e:	687b      	ldr	r3, [r7, #4]
 810ab80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ab82:	681b      	ldr	r3, [r3, #0]
 810ab84:	4a97      	ldr	r2, [pc, #604]	; (810ade4 <HAL_UART_IRQHandler+0x4e8>)
 810ab86:	4293      	cmp	r3, r2
 810ab88:	d059      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ab8a:	687b      	ldr	r3, [r7, #4]
 810ab8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ab8e:	681b      	ldr	r3, [r3, #0]
 810ab90:	4a95      	ldr	r2, [pc, #596]	; (810ade8 <HAL_UART_IRQHandler+0x4ec>)
 810ab92:	4293      	cmp	r3, r2
 810ab94:	d053      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ab9a:	681b      	ldr	r3, [r3, #0]
 810ab9c:	4a93      	ldr	r2, [pc, #588]	; (810adec <HAL_UART_IRQHandler+0x4f0>)
 810ab9e:	4293      	cmp	r3, r2
 810aba0:	d04d      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810aba2:	687b      	ldr	r3, [r7, #4]
 810aba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aba6:	681b      	ldr	r3, [r3, #0]
 810aba8:	4a91      	ldr	r2, [pc, #580]	; (810adf0 <HAL_UART_IRQHandler+0x4f4>)
 810abaa:	4293      	cmp	r3, r2
 810abac:	d047      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abae:	687b      	ldr	r3, [r7, #4]
 810abb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abb2:	681b      	ldr	r3, [r3, #0]
 810abb4:	4a8f      	ldr	r2, [pc, #572]	; (810adf4 <HAL_UART_IRQHandler+0x4f8>)
 810abb6:	4293      	cmp	r3, r2
 810abb8:	d041      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abba:	687b      	ldr	r3, [r7, #4]
 810abbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abbe:	681b      	ldr	r3, [r3, #0]
 810abc0:	4a8d      	ldr	r2, [pc, #564]	; (810adf8 <HAL_UART_IRQHandler+0x4fc>)
 810abc2:	4293      	cmp	r3, r2
 810abc4:	d03b      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abca:	681b      	ldr	r3, [r3, #0]
 810abcc:	4a8b      	ldr	r2, [pc, #556]	; (810adfc <HAL_UART_IRQHandler+0x500>)
 810abce:	4293      	cmp	r3, r2
 810abd0:	d035      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abd2:	687b      	ldr	r3, [r7, #4]
 810abd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abd6:	681b      	ldr	r3, [r3, #0]
 810abd8:	4a89      	ldr	r2, [pc, #548]	; (810ae00 <HAL_UART_IRQHandler+0x504>)
 810abda:	4293      	cmp	r3, r2
 810abdc:	d02f      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abde:	687b      	ldr	r3, [r7, #4]
 810abe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abe2:	681b      	ldr	r3, [r3, #0]
 810abe4:	4a87      	ldr	r2, [pc, #540]	; (810ae04 <HAL_UART_IRQHandler+0x508>)
 810abe6:	4293      	cmp	r3, r2
 810abe8:	d029      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abea:	687b      	ldr	r3, [r7, #4]
 810abec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abee:	681b      	ldr	r3, [r3, #0]
 810abf0:	4a85      	ldr	r2, [pc, #532]	; (810ae08 <HAL_UART_IRQHandler+0x50c>)
 810abf2:	4293      	cmp	r3, r2
 810abf4:	d023      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810abf6:	687b      	ldr	r3, [r7, #4]
 810abf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abfa:	681b      	ldr	r3, [r3, #0]
 810abfc:	4a83      	ldr	r2, [pc, #524]	; (810ae0c <HAL_UART_IRQHandler+0x510>)
 810abfe:	4293      	cmp	r3, r2
 810ac00:	d01d      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ac02:	687b      	ldr	r3, [r7, #4]
 810ac04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac06:	681b      	ldr	r3, [r3, #0]
 810ac08:	4a81      	ldr	r2, [pc, #516]	; (810ae10 <HAL_UART_IRQHandler+0x514>)
 810ac0a:	4293      	cmp	r3, r2
 810ac0c:	d017      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ac0e:	687b      	ldr	r3, [r7, #4]
 810ac10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac12:	681b      	ldr	r3, [r3, #0]
 810ac14:	4a7f      	ldr	r2, [pc, #508]	; (810ae14 <HAL_UART_IRQHandler+0x518>)
 810ac16:	4293      	cmp	r3, r2
 810ac18:	d011      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ac1a:	687b      	ldr	r3, [r7, #4]
 810ac1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac1e:	681b      	ldr	r3, [r3, #0]
 810ac20:	4a7d      	ldr	r2, [pc, #500]	; (810ae18 <HAL_UART_IRQHandler+0x51c>)
 810ac22:	4293      	cmp	r3, r2
 810ac24:	d00b      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ac26:	687b      	ldr	r3, [r7, #4]
 810ac28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac2a:	681b      	ldr	r3, [r3, #0]
 810ac2c:	4a7b      	ldr	r2, [pc, #492]	; (810ae1c <HAL_UART_IRQHandler+0x520>)
 810ac2e:	4293      	cmp	r3, r2
 810ac30:	d005      	beq.n	810ac3e <HAL_UART_IRQHandler+0x342>
 810ac32:	687b      	ldr	r3, [r7, #4]
 810ac34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac36:	681b      	ldr	r3, [r3, #0]
 810ac38:	4a79      	ldr	r2, [pc, #484]	; (810ae20 <HAL_UART_IRQHandler+0x524>)
 810ac3a:	4293      	cmp	r3, r2
 810ac3c:	d105      	bne.n	810ac4a <HAL_UART_IRQHandler+0x34e>
 810ac3e:	687b      	ldr	r3, [r7, #4]
 810ac40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac42:	681b      	ldr	r3, [r3, #0]
 810ac44:	685b      	ldr	r3, [r3, #4]
 810ac46:	b29b      	uxth	r3, r3
 810ac48:	e004      	b.n	810ac54 <HAL_UART_IRQHandler+0x358>
 810ac4a:	687b      	ldr	r3, [r7, #4]
 810ac4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac4e:	681b      	ldr	r3, [r3, #0]
 810ac50:	685b      	ldr	r3, [r3, #4]
 810ac52:	b29b      	uxth	r3, r3
 810ac54:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810ac56:	893b      	ldrh	r3, [r7, #8]
 810ac58:	2b00      	cmp	r3, #0
 810ac5a:	f000 8101 	beq.w	810ae60 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810ac5e:	687b      	ldr	r3, [r7, #4]
 810ac60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810ac64:	893a      	ldrh	r2, [r7, #8]
 810ac66:	429a      	cmp	r2, r3
 810ac68:	f080 80fa 	bcs.w	810ae60 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810ac6c:	687b      	ldr	r3, [r7, #4]
 810ac6e:	893a      	ldrh	r2, [r7, #8]
 810ac70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810ac74:	687b      	ldr	r3, [r7, #4]
 810ac76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ac78:	69db      	ldr	r3, [r3, #28]
 810ac7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ac7e:	d02b      	beq.n	810acd8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810ac80:	687b      	ldr	r3, [r7, #4]
 810ac82:	681b      	ldr	r3, [r3, #0]
 810ac84:	681a      	ldr	r2, [r3, #0]
 810ac86:	687b      	ldr	r3, [r7, #4]
 810ac88:	681b      	ldr	r3, [r3, #0]
 810ac8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810ac8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ac90:	687b      	ldr	r3, [r7, #4]
 810ac92:	681b      	ldr	r3, [r3, #0]
 810ac94:	689a      	ldr	r2, [r3, #8]
 810ac96:	687b      	ldr	r3, [r7, #4]
 810ac98:	681b      	ldr	r3, [r3, #0]
 810ac9a:	f022 0201 	bic.w	r2, r2, #1
 810ac9e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810aca0:	687b      	ldr	r3, [r7, #4]
 810aca2:	681b      	ldr	r3, [r3, #0]
 810aca4:	689a      	ldr	r2, [r3, #8]
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	681b      	ldr	r3, [r3, #0]
 810acaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810acae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810acb0:	687b      	ldr	r3, [r7, #4]
 810acb2:	2220      	movs	r2, #32
 810acb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	2200      	movs	r2, #0
 810acbc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	681b      	ldr	r3, [r3, #0]
 810acc2:	681a      	ldr	r2, [r3, #0]
 810acc4:	687b      	ldr	r3, [r7, #4]
 810acc6:	681b      	ldr	r3, [r3, #0]
 810acc8:	f022 0210 	bic.w	r2, r2, #16
 810accc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810acce:	687b      	ldr	r3, [r7, #4]
 810acd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810acd2:	4618      	mov	r0, r3
 810acd4:	f7f9 fac2 	bl	810425c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810acd8:	687b      	ldr	r3, [r7, #4]
 810acda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810acde:	687b      	ldr	r3, [r7, #4]
 810ace0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810ace4:	b29b      	uxth	r3, r3
 810ace6:	1ad3      	subs	r3, r2, r3
 810ace8:	b29b      	uxth	r3, r3
 810acea:	4619      	mov	r1, r3
 810acec:	6878      	ldr	r0, [r7, #4]
 810acee:	f000 f8dd 	bl	810aeac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810acf2:	e0b5      	b.n	810ae60 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810acf4:	687b      	ldr	r3, [r7, #4]
 810acf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810acfa:	687b      	ldr	r3, [r7, #4]
 810acfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810ad00:	b29b      	uxth	r3, r3
 810ad02:	1ad3      	subs	r3, r2, r3
 810ad04:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810ad06:	687b      	ldr	r3, [r7, #4]
 810ad08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810ad0c:	b29b      	uxth	r3, r3
 810ad0e:	2b00      	cmp	r3, #0
 810ad10:	f000 80a8 	beq.w	810ae64 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810ad14:	897b      	ldrh	r3, [r7, #10]
 810ad16:	2b00      	cmp	r3, #0
 810ad18:	f000 80a4 	beq.w	810ae64 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	681b      	ldr	r3, [r3, #0]
 810ad20:	681a      	ldr	r2, [r3, #0]
 810ad22:	687b      	ldr	r3, [r7, #4]
 810ad24:	681b      	ldr	r3, [r3, #0]
 810ad26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810ad2a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810ad2c:	687b      	ldr	r3, [r7, #4]
 810ad2e:	681b      	ldr	r3, [r3, #0]
 810ad30:	689b      	ldr	r3, [r3, #8]
 810ad32:	687a      	ldr	r2, [r7, #4]
 810ad34:	6812      	ldr	r2, [r2, #0]
 810ad36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810ad3a:	f023 0301 	bic.w	r3, r3, #1
 810ad3e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810ad40:	687b      	ldr	r3, [r7, #4]
 810ad42:	2220      	movs	r2, #32
 810ad44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ad48:	687b      	ldr	r3, [r7, #4]
 810ad4a:	2200      	movs	r2, #0
 810ad4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810ad4e:	687b      	ldr	r3, [r7, #4]
 810ad50:	2200      	movs	r2, #0
 810ad52:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	681b      	ldr	r3, [r3, #0]
 810ad58:	681a      	ldr	r2, [r3, #0]
 810ad5a:	687b      	ldr	r3, [r7, #4]
 810ad5c:	681b      	ldr	r3, [r3, #0]
 810ad5e:	f022 0210 	bic.w	r2, r2, #16
 810ad62:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810ad64:	897b      	ldrh	r3, [r7, #10]
 810ad66:	4619      	mov	r1, r3
 810ad68:	6878      	ldr	r0, [r7, #4]
 810ad6a:	f000 f89f 	bl	810aeac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810ad6e:	e079      	b.n	810ae64 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810ad70:	69fb      	ldr	r3, [r7, #28]
 810ad72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810ad76:	2b00      	cmp	r3, #0
 810ad78:	d00d      	beq.n	810ad96 <HAL_UART_IRQHandler+0x49a>
 810ad7a:	697b      	ldr	r3, [r7, #20]
 810ad7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810ad80:	2b00      	cmp	r3, #0
 810ad82:	d008      	beq.n	810ad96 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810ad84:	687b      	ldr	r3, [r7, #4]
 810ad86:	681b      	ldr	r3, [r3, #0]
 810ad88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810ad8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810ad8e:	6878      	ldr	r0, [r7, #4]
 810ad90:	f001 f931 	bl	810bff6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810ad94:	e069      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810ad96:	69fb      	ldr	r3, [r7, #28]
 810ad98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ad9c:	2b00      	cmp	r3, #0
 810ad9e:	d012      	beq.n	810adc6 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810ada0:	69bb      	ldr	r3, [r7, #24]
 810ada2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ada6:	2b00      	cmp	r3, #0
 810ada8:	d104      	bne.n	810adb4 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810adaa:	697b      	ldr	r3, [r7, #20]
 810adac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810adb0:	2b00      	cmp	r3, #0
 810adb2:	d008      	beq.n	810adc6 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810adb4:	687b      	ldr	r3, [r7, #4]
 810adb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810adb8:	2b00      	cmp	r3, #0
 810adba:	d055      	beq.n	810ae68 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810adbc:	687b      	ldr	r3, [r7, #4]
 810adbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810adc0:	6878      	ldr	r0, [r7, #4]
 810adc2:	4798      	blx	r3
    }
    return;
 810adc4:	e050      	b.n	810ae68 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810adc6:	69fb      	ldr	r3, [r7, #28]
 810adc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810adcc:	2b00      	cmp	r3, #0
 810adce:	d029      	beq.n	810ae24 <HAL_UART_IRQHandler+0x528>
 810add0:	69bb      	ldr	r3, [r7, #24]
 810add2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810add6:	2b00      	cmp	r3, #0
 810add8:	d024      	beq.n	810ae24 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810adda:	6878      	ldr	r0, [r7, #4]
 810addc:	f001 f8f1 	bl	810bfc2 <UART_EndTransmit_IT>
    return;
 810ade0:	e043      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
 810ade2:	bf00      	nop
 810ade4:	40020010 	.word	0x40020010
 810ade8:	40020028 	.word	0x40020028
 810adec:	40020040 	.word	0x40020040
 810adf0:	40020058 	.word	0x40020058
 810adf4:	40020070 	.word	0x40020070
 810adf8:	40020088 	.word	0x40020088
 810adfc:	400200a0 	.word	0x400200a0
 810ae00:	400200b8 	.word	0x400200b8
 810ae04:	40020410 	.word	0x40020410
 810ae08:	40020428 	.word	0x40020428
 810ae0c:	40020440 	.word	0x40020440
 810ae10:	40020458 	.word	0x40020458
 810ae14:	40020470 	.word	0x40020470
 810ae18:	40020488 	.word	0x40020488
 810ae1c:	400204a0 	.word	0x400204a0
 810ae20:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810ae24:	69fb      	ldr	r3, [r7, #28]
 810ae26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810ae2a:	2b00      	cmp	r3, #0
 810ae2c:	d008      	beq.n	810ae40 <HAL_UART_IRQHandler+0x544>
 810ae2e:	69bb      	ldr	r3, [r7, #24]
 810ae30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810ae34:	2b00      	cmp	r3, #0
 810ae36:	d003      	beq.n	810ae40 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810ae38:	6878      	ldr	r0, [r7, #4]
 810ae3a:	f001 f8f0 	bl	810c01e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810ae3e:	e014      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810ae40:	69fb      	ldr	r3, [r7, #28]
 810ae42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810ae46:	2b00      	cmp	r3, #0
 810ae48:	d00f      	beq.n	810ae6a <HAL_UART_IRQHandler+0x56e>
 810ae4a:	69bb      	ldr	r3, [r7, #24]
 810ae4c:	2b00      	cmp	r3, #0
 810ae4e:	da0c      	bge.n	810ae6a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810ae50:	6878      	ldr	r0, [r7, #4]
 810ae52:	f001 f8da 	bl	810c00a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810ae56:	e008      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
      return;
 810ae58:	bf00      	nop
 810ae5a:	e006      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
    return;
 810ae5c:	bf00      	nop
 810ae5e:	e004      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
      return;
 810ae60:	bf00      	nop
 810ae62:	e002      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
      return;
 810ae64:	bf00      	nop
 810ae66:	e000      	b.n	810ae6a <HAL_UART_IRQHandler+0x56e>
    return;
 810ae68:	bf00      	nop
  }
}
 810ae6a:	3720      	adds	r7, #32
 810ae6c:	46bd      	mov	sp, r7
 810ae6e:	bd80      	pop	{r7, pc}

0810ae70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810ae70:	b480      	push	{r7}
 810ae72:	b083      	sub	sp, #12
 810ae74:	af00      	add	r7, sp, #0
 810ae76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810ae78:	bf00      	nop
 810ae7a:	370c      	adds	r7, #12
 810ae7c:	46bd      	mov	sp, r7
 810ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae82:	4770      	bx	lr

0810ae84 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810ae84:	b480      	push	{r7}
 810ae86:	b083      	sub	sp, #12
 810ae88:	af00      	add	r7, sp, #0
 810ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810ae8c:	bf00      	nop
 810ae8e:	370c      	adds	r7, #12
 810ae90:	46bd      	mov	sp, r7
 810ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae96:	4770      	bx	lr

0810ae98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810ae98:	b480      	push	{r7}
 810ae9a:	b083      	sub	sp, #12
 810ae9c:	af00      	add	r7, sp, #0
 810ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810aea0:	bf00      	nop
 810aea2:	370c      	adds	r7, #12
 810aea4:	46bd      	mov	sp, r7
 810aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aeaa:	4770      	bx	lr

0810aeac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810aeac:	b480      	push	{r7}
 810aeae:	b083      	sub	sp, #12
 810aeb0:	af00      	add	r7, sp, #0
 810aeb2:	6078      	str	r0, [r7, #4]
 810aeb4:	460b      	mov	r3, r1
 810aeb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810aeb8:	bf00      	nop
 810aeba:	370c      	adds	r7, #12
 810aebc:	46bd      	mov	sp, r7
 810aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aec2:	4770      	bx	lr

0810aec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810aec4:	b5b0      	push	{r4, r5, r7, lr}
 810aec6:	b08e      	sub	sp, #56	; 0x38
 810aec8:	af00      	add	r7, sp, #0
 810aeca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810aecc:	2300      	movs	r3, #0
 810aece:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810aed2:	687b      	ldr	r3, [r7, #4]
 810aed4:	689a      	ldr	r2, [r3, #8]
 810aed6:	687b      	ldr	r3, [r7, #4]
 810aed8:	691b      	ldr	r3, [r3, #16]
 810aeda:	431a      	orrs	r2, r3
 810aedc:	687b      	ldr	r3, [r7, #4]
 810aede:	695b      	ldr	r3, [r3, #20]
 810aee0:	431a      	orrs	r2, r3
 810aee2:	687b      	ldr	r3, [r7, #4]
 810aee4:	69db      	ldr	r3, [r3, #28]
 810aee6:	4313      	orrs	r3, r2
 810aee8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810aeea:	687b      	ldr	r3, [r7, #4]
 810aeec:	681b      	ldr	r3, [r3, #0]
 810aeee:	681a      	ldr	r2, [r3, #0]
 810aef0:	4bc0      	ldr	r3, [pc, #768]	; (810b1f4 <UART_SetConfig+0x330>)
 810aef2:	4013      	ands	r3, r2
 810aef4:	687a      	ldr	r2, [r7, #4]
 810aef6:	6812      	ldr	r2, [r2, #0]
 810aef8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810aefa:	430b      	orrs	r3, r1
 810aefc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810aefe:	687b      	ldr	r3, [r7, #4]
 810af00:	681b      	ldr	r3, [r3, #0]
 810af02:	685b      	ldr	r3, [r3, #4]
 810af04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810af08:	687b      	ldr	r3, [r7, #4]
 810af0a:	68da      	ldr	r2, [r3, #12]
 810af0c:	687b      	ldr	r3, [r7, #4]
 810af0e:	681b      	ldr	r3, [r3, #0]
 810af10:	430a      	orrs	r2, r1
 810af12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810af14:	687b      	ldr	r3, [r7, #4]
 810af16:	699b      	ldr	r3, [r3, #24]
 810af18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810af1a:	687b      	ldr	r3, [r7, #4]
 810af1c:	681b      	ldr	r3, [r3, #0]
 810af1e:	4ab6      	ldr	r2, [pc, #728]	; (810b1f8 <UART_SetConfig+0x334>)
 810af20:	4293      	cmp	r3, r2
 810af22:	d004      	beq.n	810af2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810af24:	687b      	ldr	r3, [r7, #4]
 810af26:	6a1b      	ldr	r3, [r3, #32]
 810af28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810af2a:	4313      	orrs	r3, r2
 810af2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810af2e:	687b      	ldr	r3, [r7, #4]
 810af30:	681b      	ldr	r3, [r3, #0]
 810af32:	689b      	ldr	r3, [r3, #8]
 810af34:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810af38:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810af3c:	687a      	ldr	r2, [r7, #4]
 810af3e:	6812      	ldr	r2, [r2, #0]
 810af40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810af42:	430b      	orrs	r3, r1
 810af44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810af46:	687b      	ldr	r3, [r7, #4]
 810af48:	681b      	ldr	r3, [r3, #0]
 810af4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810af4c:	f023 010f 	bic.w	r1, r3, #15
 810af50:	687b      	ldr	r3, [r7, #4]
 810af52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810af54:	687b      	ldr	r3, [r7, #4]
 810af56:	681b      	ldr	r3, [r3, #0]
 810af58:	430a      	orrs	r2, r1
 810af5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	681b      	ldr	r3, [r3, #0]
 810af60:	4aa6      	ldr	r2, [pc, #664]	; (810b1fc <UART_SetConfig+0x338>)
 810af62:	4293      	cmp	r3, r2
 810af64:	d176      	bne.n	810b054 <UART_SetConfig+0x190>
 810af66:	4ba6      	ldr	r3, [pc, #664]	; (810b200 <UART_SetConfig+0x33c>)
 810af68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810af6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810af6e:	2b28      	cmp	r3, #40	; 0x28
 810af70:	d86c      	bhi.n	810b04c <UART_SetConfig+0x188>
 810af72:	a201      	add	r2, pc, #4	; (adr r2, 810af78 <UART_SetConfig+0xb4>)
 810af74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af78:	0810b01d 	.word	0x0810b01d
 810af7c:	0810b04d 	.word	0x0810b04d
 810af80:	0810b04d 	.word	0x0810b04d
 810af84:	0810b04d 	.word	0x0810b04d
 810af88:	0810b04d 	.word	0x0810b04d
 810af8c:	0810b04d 	.word	0x0810b04d
 810af90:	0810b04d 	.word	0x0810b04d
 810af94:	0810b04d 	.word	0x0810b04d
 810af98:	0810b025 	.word	0x0810b025
 810af9c:	0810b04d 	.word	0x0810b04d
 810afa0:	0810b04d 	.word	0x0810b04d
 810afa4:	0810b04d 	.word	0x0810b04d
 810afa8:	0810b04d 	.word	0x0810b04d
 810afac:	0810b04d 	.word	0x0810b04d
 810afb0:	0810b04d 	.word	0x0810b04d
 810afb4:	0810b04d 	.word	0x0810b04d
 810afb8:	0810b02d 	.word	0x0810b02d
 810afbc:	0810b04d 	.word	0x0810b04d
 810afc0:	0810b04d 	.word	0x0810b04d
 810afc4:	0810b04d 	.word	0x0810b04d
 810afc8:	0810b04d 	.word	0x0810b04d
 810afcc:	0810b04d 	.word	0x0810b04d
 810afd0:	0810b04d 	.word	0x0810b04d
 810afd4:	0810b04d 	.word	0x0810b04d
 810afd8:	0810b035 	.word	0x0810b035
 810afdc:	0810b04d 	.word	0x0810b04d
 810afe0:	0810b04d 	.word	0x0810b04d
 810afe4:	0810b04d 	.word	0x0810b04d
 810afe8:	0810b04d 	.word	0x0810b04d
 810afec:	0810b04d 	.word	0x0810b04d
 810aff0:	0810b04d 	.word	0x0810b04d
 810aff4:	0810b04d 	.word	0x0810b04d
 810aff8:	0810b03d 	.word	0x0810b03d
 810affc:	0810b04d 	.word	0x0810b04d
 810b000:	0810b04d 	.word	0x0810b04d
 810b004:	0810b04d 	.word	0x0810b04d
 810b008:	0810b04d 	.word	0x0810b04d
 810b00c:	0810b04d 	.word	0x0810b04d
 810b010:	0810b04d 	.word	0x0810b04d
 810b014:	0810b04d 	.word	0x0810b04d
 810b018:	0810b045 	.word	0x0810b045
 810b01c:	2301      	movs	r3, #1
 810b01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b022:	e220      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b024:	2304      	movs	r3, #4
 810b026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b02a:	e21c      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b02c:	2308      	movs	r3, #8
 810b02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b032:	e218      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b034:	2310      	movs	r3, #16
 810b036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b03a:	e214      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b03c:	2320      	movs	r3, #32
 810b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b042:	e210      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b044:	2340      	movs	r3, #64	; 0x40
 810b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b04a:	e20c      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b04c:	2380      	movs	r3, #128	; 0x80
 810b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b052:	e208      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b054:	687b      	ldr	r3, [r7, #4]
 810b056:	681b      	ldr	r3, [r3, #0]
 810b058:	4a6a      	ldr	r2, [pc, #424]	; (810b204 <UART_SetConfig+0x340>)
 810b05a:	4293      	cmp	r3, r2
 810b05c:	d130      	bne.n	810b0c0 <UART_SetConfig+0x1fc>
 810b05e:	4b68      	ldr	r3, [pc, #416]	; (810b200 <UART_SetConfig+0x33c>)
 810b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b062:	f003 0307 	and.w	r3, r3, #7
 810b066:	2b05      	cmp	r3, #5
 810b068:	d826      	bhi.n	810b0b8 <UART_SetConfig+0x1f4>
 810b06a:	a201      	add	r2, pc, #4	; (adr r2, 810b070 <UART_SetConfig+0x1ac>)
 810b06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b070:	0810b089 	.word	0x0810b089
 810b074:	0810b091 	.word	0x0810b091
 810b078:	0810b099 	.word	0x0810b099
 810b07c:	0810b0a1 	.word	0x0810b0a1
 810b080:	0810b0a9 	.word	0x0810b0a9
 810b084:	0810b0b1 	.word	0x0810b0b1
 810b088:	2300      	movs	r3, #0
 810b08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b08e:	e1ea      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b090:	2304      	movs	r3, #4
 810b092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b096:	e1e6      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b098:	2308      	movs	r3, #8
 810b09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b09e:	e1e2      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b0a0:	2310      	movs	r3, #16
 810b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b0a6:	e1de      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b0a8:	2320      	movs	r3, #32
 810b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b0ae:	e1da      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b0b0:	2340      	movs	r3, #64	; 0x40
 810b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b0b6:	e1d6      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b0b8:	2380      	movs	r3, #128	; 0x80
 810b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b0be:	e1d2      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b0c0:	687b      	ldr	r3, [r7, #4]
 810b0c2:	681b      	ldr	r3, [r3, #0]
 810b0c4:	4a50      	ldr	r2, [pc, #320]	; (810b208 <UART_SetConfig+0x344>)
 810b0c6:	4293      	cmp	r3, r2
 810b0c8:	d130      	bne.n	810b12c <UART_SetConfig+0x268>
 810b0ca:	4b4d      	ldr	r3, [pc, #308]	; (810b200 <UART_SetConfig+0x33c>)
 810b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b0ce:	f003 0307 	and.w	r3, r3, #7
 810b0d2:	2b05      	cmp	r3, #5
 810b0d4:	d826      	bhi.n	810b124 <UART_SetConfig+0x260>
 810b0d6:	a201      	add	r2, pc, #4	; (adr r2, 810b0dc <UART_SetConfig+0x218>)
 810b0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b0dc:	0810b0f5 	.word	0x0810b0f5
 810b0e0:	0810b0fd 	.word	0x0810b0fd
 810b0e4:	0810b105 	.word	0x0810b105
 810b0e8:	0810b10d 	.word	0x0810b10d
 810b0ec:	0810b115 	.word	0x0810b115
 810b0f0:	0810b11d 	.word	0x0810b11d
 810b0f4:	2300      	movs	r3, #0
 810b0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b0fa:	e1b4      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b0fc:	2304      	movs	r3, #4
 810b0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b102:	e1b0      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b104:	2308      	movs	r3, #8
 810b106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b10a:	e1ac      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b10c:	2310      	movs	r3, #16
 810b10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b112:	e1a8      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b114:	2320      	movs	r3, #32
 810b116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b11a:	e1a4      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b11c:	2340      	movs	r3, #64	; 0x40
 810b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b122:	e1a0      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b124:	2380      	movs	r3, #128	; 0x80
 810b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b12a:	e19c      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b12c:	687b      	ldr	r3, [r7, #4]
 810b12e:	681b      	ldr	r3, [r3, #0]
 810b130:	4a36      	ldr	r2, [pc, #216]	; (810b20c <UART_SetConfig+0x348>)
 810b132:	4293      	cmp	r3, r2
 810b134:	d130      	bne.n	810b198 <UART_SetConfig+0x2d4>
 810b136:	4b32      	ldr	r3, [pc, #200]	; (810b200 <UART_SetConfig+0x33c>)
 810b138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b13a:	f003 0307 	and.w	r3, r3, #7
 810b13e:	2b05      	cmp	r3, #5
 810b140:	d826      	bhi.n	810b190 <UART_SetConfig+0x2cc>
 810b142:	a201      	add	r2, pc, #4	; (adr r2, 810b148 <UART_SetConfig+0x284>)
 810b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b148:	0810b161 	.word	0x0810b161
 810b14c:	0810b169 	.word	0x0810b169
 810b150:	0810b171 	.word	0x0810b171
 810b154:	0810b179 	.word	0x0810b179
 810b158:	0810b181 	.word	0x0810b181
 810b15c:	0810b189 	.word	0x0810b189
 810b160:	2300      	movs	r3, #0
 810b162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b166:	e17e      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b168:	2304      	movs	r3, #4
 810b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b16e:	e17a      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b170:	2308      	movs	r3, #8
 810b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b176:	e176      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b178:	2310      	movs	r3, #16
 810b17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b17e:	e172      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b180:	2320      	movs	r3, #32
 810b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b186:	e16e      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b188:	2340      	movs	r3, #64	; 0x40
 810b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b18e:	e16a      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b190:	2380      	movs	r3, #128	; 0x80
 810b192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b196:	e166      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b198:	687b      	ldr	r3, [r7, #4]
 810b19a:	681b      	ldr	r3, [r3, #0]
 810b19c:	4a1c      	ldr	r2, [pc, #112]	; (810b210 <UART_SetConfig+0x34c>)
 810b19e:	4293      	cmp	r3, r2
 810b1a0:	d140      	bne.n	810b224 <UART_SetConfig+0x360>
 810b1a2:	4b17      	ldr	r3, [pc, #92]	; (810b200 <UART_SetConfig+0x33c>)
 810b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b1a6:	f003 0307 	and.w	r3, r3, #7
 810b1aa:	2b05      	cmp	r3, #5
 810b1ac:	d836      	bhi.n	810b21c <UART_SetConfig+0x358>
 810b1ae:	a201      	add	r2, pc, #4	; (adr r2, 810b1b4 <UART_SetConfig+0x2f0>)
 810b1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b1b4:	0810b1cd 	.word	0x0810b1cd
 810b1b8:	0810b1d5 	.word	0x0810b1d5
 810b1bc:	0810b1dd 	.word	0x0810b1dd
 810b1c0:	0810b1e5 	.word	0x0810b1e5
 810b1c4:	0810b1ed 	.word	0x0810b1ed
 810b1c8:	0810b215 	.word	0x0810b215
 810b1cc:	2300      	movs	r3, #0
 810b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b1d2:	e148      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b1d4:	2304      	movs	r3, #4
 810b1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b1da:	e144      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b1dc:	2308      	movs	r3, #8
 810b1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b1e2:	e140      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b1e4:	2310      	movs	r3, #16
 810b1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b1ea:	e13c      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b1ec:	2320      	movs	r3, #32
 810b1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b1f2:	e138      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b1f4:	cfff69f3 	.word	0xcfff69f3
 810b1f8:	58000c00 	.word	0x58000c00
 810b1fc:	40011000 	.word	0x40011000
 810b200:	58024400 	.word	0x58024400
 810b204:	40004400 	.word	0x40004400
 810b208:	40004800 	.word	0x40004800
 810b20c:	40004c00 	.word	0x40004c00
 810b210:	40005000 	.word	0x40005000
 810b214:	2340      	movs	r3, #64	; 0x40
 810b216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b21a:	e124      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b21c:	2380      	movs	r3, #128	; 0x80
 810b21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b222:	e120      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b224:	687b      	ldr	r3, [r7, #4]
 810b226:	681b      	ldr	r3, [r3, #0]
 810b228:	4acc      	ldr	r2, [pc, #816]	; (810b55c <UART_SetConfig+0x698>)
 810b22a:	4293      	cmp	r3, r2
 810b22c:	d176      	bne.n	810b31c <UART_SetConfig+0x458>
 810b22e:	4bcc      	ldr	r3, [pc, #816]	; (810b560 <UART_SetConfig+0x69c>)
 810b230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b236:	2b28      	cmp	r3, #40	; 0x28
 810b238:	d86c      	bhi.n	810b314 <UART_SetConfig+0x450>
 810b23a:	a201      	add	r2, pc, #4	; (adr r2, 810b240 <UART_SetConfig+0x37c>)
 810b23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b240:	0810b2e5 	.word	0x0810b2e5
 810b244:	0810b315 	.word	0x0810b315
 810b248:	0810b315 	.word	0x0810b315
 810b24c:	0810b315 	.word	0x0810b315
 810b250:	0810b315 	.word	0x0810b315
 810b254:	0810b315 	.word	0x0810b315
 810b258:	0810b315 	.word	0x0810b315
 810b25c:	0810b315 	.word	0x0810b315
 810b260:	0810b2ed 	.word	0x0810b2ed
 810b264:	0810b315 	.word	0x0810b315
 810b268:	0810b315 	.word	0x0810b315
 810b26c:	0810b315 	.word	0x0810b315
 810b270:	0810b315 	.word	0x0810b315
 810b274:	0810b315 	.word	0x0810b315
 810b278:	0810b315 	.word	0x0810b315
 810b27c:	0810b315 	.word	0x0810b315
 810b280:	0810b2f5 	.word	0x0810b2f5
 810b284:	0810b315 	.word	0x0810b315
 810b288:	0810b315 	.word	0x0810b315
 810b28c:	0810b315 	.word	0x0810b315
 810b290:	0810b315 	.word	0x0810b315
 810b294:	0810b315 	.word	0x0810b315
 810b298:	0810b315 	.word	0x0810b315
 810b29c:	0810b315 	.word	0x0810b315
 810b2a0:	0810b2fd 	.word	0x0810b2fd
 810b2a4:	0810b315 	.word	0x0810b315
 810b2a8:	0810b315 	.word	0x0810b315
 810b2ac:	0810b315 	.word	0x0810b315
 810b2b0:	0810b315 	.word	0x0810b315
 810b2b4:	0810b315 	.word	0x0810b315
 810b2b8:	0810b315 	.word	0x0810b315
 810b2bc:	0810b315 	.word	0x0810b315
 810b2c0:	0810b305 	.word	0x0810b305
 810b2c4:	0810b315 	.word	0x0810b315
 810b2c8:	0810b315 	.word	0x0810b315
 810b2cc:	0810b315 	.word	0x0810b315
 810b2d0:	0810b315 	.word	0x0810b315
 810b2d4:	0810b315 	.word	0x0810b315
 810b2d8:	0810b315 	.word	0x0810b315
 810b2dc:	0810b315 	.word	0x0810b315
 810b2e0:	0810b30d 	.word	0x0810b30d
 810b2e4:	2301      	movs	r3, #1
 810b2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2ea:	e0bc      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b2ec:	2304      	movs	r3, #4
 810b2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2f2:	e0b8      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b2f4:	2308      	movs	r3, #8
 810b2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b2fa:	e0b4      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b2fc:	2310      	movs	r3, #16
 810b2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b302:	e0b0      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b304:	2320      	movs	r3, #32
 810b306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b30a:	e0ac      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b30c:	2340      	movs	r3, #64	; 0x40
 810b30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b312:	e0a8      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b314:	2380      	movs	r3, #128	; 0x80
 810b316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b31a:	e0a4      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	4a90      	ldr	r2, [pc, #576]	; (810b564 <UART_SetConfig+0x6a0>)
 810b322:	4293      	cmp	r3, r2
 810b324:	d130      	bne.n	810b388 <UART_SetConfig+0x4c4>
 810b326:	4b8e      	ldr	r3, [pc, #568]	; (810b560 <UART_SetConfig+0x69c>)
 810b328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b32a:	f003 0307 	and.w	r3, r3, #7
 810b32e:	2b05      	cmp	r3, #5
 810b330:	d826      	bhi.n	810b380 <UART_SetConfig+0x4bc>
 810b332:	a201      	add	r2, pc, #4	; (adr r2, 810b338 <UART_SetConfig+0x474>)
 810b334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b338:	0810b351 	.word	0x0810b351
 810b33c:	0810b359 	.word	0x0810b359
 810b340:	0810b361 	.word	0x0810b361
 810b344:	0810b369 	.word	0x0810b369
 810b348:	0810b371 	.word	0x0810b371
 810b34c:	0810b379 	.word	0x0810b379
 810b350:	2300      	movs	r3, #0
 810b352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b356:	e086      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b358:	2304      	movs	r3, #4
 810b35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b35e:	e082      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b360:	2308      	movs	r3, #8
 810b362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b366:	e07e      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b368:	2310      	movs	r3, #16
 810b36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b36e:	e07a      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b370:	2320      	movs	r3, #32
 810b372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b376:	e076      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b378:	2340      	movs	r3, #64	; 0x40
 810b37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b37e:	e072      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b380:	2380      	movs	r3, #128	; 0x80
 810b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b386:	e06e      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b388:	687b      	ldr	r3, [r7, #4]
 810b38a:	681b      	ldr	r3, [r3, #0]
 810b38c:	4a76      	ldr	r2, [pc, #472]	; (810b568 <UART_SetConfig+0x6a4>)
 810b38e:	4293      	cmp	r3, r2
 810b390:	d130      	bne.n	810b3f4 <UART_SetConfig+0x530>
 810b392:	4b73      	ldr	r3, [pc, #460]	; (810b560 <UART_SetConfig+0x69c>)
 810b394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b396:	f003 0307 	and.w	r3, r3, #7
 810b39a:	2b05      	cmp	r3, #5
 810b39c:	d826      	bhi.n	810b3ec <UART_SetConfig+0x528>
 810b39e:	a201      	add	r2, pc, #4	; (adr r2, 810b3a4 <UART_SetConfig+0x4e0>)
 810b3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b3a4:	0810b3bd 	.word	0x0810b3bd
 810b3a8:	0810b3c5 	.word	0x0810b3c5
 810b3ac:	0810b3cd 	.word	0x0810b3cd
 810b3b0:	0810b3d5 	.word	0x0810b3d5
 810b3b4:	0810b3dd 	.word	0x0810b3dd
 810b3b8:	0810b3e5 	.word	0x0810b3e5
 810b3bc:	2300      	movs	r3, #0
 810b3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3c2:	e050      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3c4:	2304      	movs	r3, #4
 810b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3ca:	e04c      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3cc:	2308      	movs	r3, #8
 810b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3d2:	e048      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3d4:	2310      	movs	r3, #16
 810b3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3da:	e044      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3dc:	2320      	movs	r3, #32
 810b3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3e2:	e040      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3e4:	2340      	movs	r3, #64	; 0x40
 810b3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3ea:	e03c      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3ec:	2380      	movs	r3, #128	; 0x80
 810b3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b3f2:	e038      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	681b      	ldr	r3, [r3, #0]
 810b3f8:	4a5c      	ldr	r2, [pc, #368]	; (810b56c <UART_SetConfig+0x6a8>)
 810b3fa:	4293      	cmp	r3, r2
 810b3fc:	d130      	bne.n	810b460 <UART_SetConfig+0x59c>
 810b3fe:	4b58      	ldr	r3, [pc, #352]	; (810b560 <UART_SetConfig+0x69c>)
 810b400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b402:	f003 0307 	and.w	r3, r3, #7
 810b406:	2b05      	cmp	r3, #5
 810b408:	d826      	bhi.n	810b458 <UART_SetConfig+0x594>
 810b40a:	a201      	add	r2, pc, #4	; (adr r2, 810b410 <UART_SetConfig+0x54c>)
 810b40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b410:	0810b429 	.word	0x0810b429
 810b414:	0810b431 	.word	0x0810b431
 810b418:	0810b439 	.word	0x0810b439
 810b41c:	0810b441 	.word	0x0810b441
 810b420:	0810b449 	.word	0x0810b449
 810b424:	0810b451 	.word	0x0810b451
 810b428:	2302      	movs	r3, #2
 810b42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b42e:	e01a      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b430:	2304      	movs	r3, #4
 810b432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b436:	e016      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b438:	2308      	movs	r3, #8
 810b43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b43e:	e012      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b440:	2310      	movs	r3, #16
 810b442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b446:	e00e      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b448:	2320      	movs	r3, #32
 810b44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b44e:	e00a      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b450:	2340      	movs	r3, #64	; 0x40
 810b452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b456:	e006      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b458:	2380      	movs	r3, #128	; 0x80
 810b45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b45e:	e002      	b.n	810b466 <UART_SetConfig+0x5a2>
 810b460:	2380      	movs	r3, #128	; 0x80
 810b462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b466:	687b      	ldr	r3, [r7, #4]
 810b468:	681b      	ldr	r3, [r3, #0]
 810b46a:	4a40      	ldr	r2, [pc, #256]	; (810b56c <UART_SetConfig+0x6a8>)
 810b46c:	4293      	cmp	r3, r2
 810b46e:	f040 80ef 	bne.w	810b650 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b476:	2b20      	cmp	r3, #32
 810b478:	dc46      	bgt.n	810b508 <UART_SetConfig+0x644>
 810b47a:	2b02      	cmp	r3, #2
 810b47c:	f2c0 8081 	blt.w	810b582 <UART_SetConfig+0x6be>
 810b480:	3b02      	subs	r3, #2
 810b482:	2b1e      	cmp	r3, #30
 810b484:	d87d      	bhi.n	810b582 <UART_SetConfig+0x6be>
 810b486:	a201      	add	r2, pc, #4	; (adr r2, 810b48c <UART_SetConfig+0x5c8>)
 810b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b48c:	0810b50f 	.word	0x0810b50f
 810b490:	0810b583 	.word	0x0810b583
 810b494:	0810b517 	.word	0x0810b517
 810b498:	0810b583 	.word	0x0810b583
 810b49c:	0810b583 	.word	0x0810b583
 810b4a0:	0810b583 	.word	0x0810b583
 810b4a4:	0810b527 	.word	0x0810b527
 810b4a8:	0810b583 	.word	0x0810b583
 810b4ac:	0810b583 	.word	0x0810b583
 810b4b0:	0810b583 	.word	0x0810b583
 810b4b4:	0810b583 	.word	0x0810b583
 810b4b8:	0810b583 	.word	0x0810b583
 810b4bc:	0810b583 	.word	0x0810b583
 810b4c0:	0810b583 	.word	0x0810b583
 810b4c4:	0810b537 	.word	0x0810b537
 810b4c8:	0810b583 	.word	0x0810b583
 810b4cc:	0810b583 	.word	0x0810b583
 810b4d0:	0810b583 	.word	0x0810b583
 810b4d4:	0810b583 	.word	0x0810b583
 810b4d8:	0810b583 	.word	0x0810b583
 810b4dc:	0810b583 	.word	0x0810b583
 810b4e0:	0810b583 	.word	0x0810b583
 810b4e4:	0810b583 	.word	0x0810b583
 810b4e8:	0810b583 	.word	0x0810b583
 810b4ec:	0810b583 	.word	0x0810b583
 810b4f0:	0810b583 	.word	0x0810b583
 810b4f4:	0810b583 	.word	0x0810b583
 810b4f8:	0810b583 	.word	0x0810b583
 810b4fc:	0810b583 	.word	0x0810b583
 810b500:	0810b583 	.word	0x0810b583
 810b504:	0810b575 	.word	0x0810b575
 810b508:	2b40      	cmp	r3, #64	; 0x40
 810b50a:	d036      	beq.n	810b57a <UART_SetConfig+0x6b6>
 810b50c:	e039      	b.n	810b582 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b50e:	f7fd fe83 	bl	8109218 <HAL_RCCEx_GetD3PCLK1Freq>
 810b512:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b514:	e03b      	b.n	810b58e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b516:	f107 0314 	add.w	r3, r7, #20
 810b51a:	4618      	mov	r0, r3
 810b51c:	f7fd fe92 	bl	8109244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b520:	69bb      	ldr	r3, [r7, #24]
 810b522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b524:	e033      	b.n	810b58e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b526:	f107 0308 	add.w	r3, r7, #8
 810b52a:	4618      	mov	r0, r3
 810b52c:	f7fd ffde 	bl	81094ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b530:	68fb      	ldr	r3, [r7, #12]
 810b532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b534:	e02b      	b.n	810b58e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b536:	4b0a      	ldr	r3, [pc, #40]	; (810b560 <UART_SetConfig+0x69c>)
 810b538:	681b      	ldr	r3, [r3, #0]
 810b53a:	f003 0320 	and.w	r3, r3, #32
 810b53e:	2b00      	cmp	r3, #0
 810b540:	d009      	beq.n	810b556 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b542:	4b07      	ldr	r3, [pc, #28]	; (810b560 <UART_SetConfig+0x69c>)
 810b544:	681b      	ldr	r3, [r3, #0]
 810b546:	08db      	lsrs	r3, r3, #3
 810b548:	f003 0303 	and.w	r3, r3, #3
 810b54c:	4a08      	ldr	r2, [pc, #32]	; (810b570 <UART_SetConfig+0x6ac>)
 810b54e:	fa22 f303 	lsr.w	r3, r2, r3
 810b552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b554:	e01b      	b.n	810b58e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810b556:	4b06      	ldr	r3, [pc, #24]	; (810b570 <UART_SetConfig+0x6ac>)
 810b558:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b55a:	e018      	b.n	810b58e <UART_SetConfig+0x6ca>
 810b55c:	40011400 	.word	0x40011400
 810b560:	58024400 	.word	0x58024400
 810b564:	40007800 	.word	0x40007800
 810b568:	40007c00 	.word	0x40007c00
 810b56c:	58000c00 	.word	0x58000c00
 810b570:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b574:	4bc4      	ldr	r3, [pc, #784]	; (810b888 <UART_SetConfig+0x9c4>)
 810b576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b578:	e009      	b.n	810b58e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b57a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b57e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b580:	e005      	b.n	810b58e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810b582:	2300      	movs	r3, #0
 810b584:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b586:	2301      	movs	r3, #1
 810b588:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b58c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b590:	2b00      	cmp	r3, #0
 810b592:	f000 81da 	beq.w	810b94a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b596:	687b      	ldr	r3, [r7, #4]
 810b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b59a:	4abc      	ldr	r2, [pc, #752]	; (810b88c <UART_SetConfig+0x9c8>)
 810b59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b5a0:	461a      	mov	r2, r3
 810b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b5a4:	fbb3 f3f2 	udiv	r3, r3, r2
 810b5a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b5aa:	687b      	ldr	r3, [r7, #4]
 810b5ac:	685a      	ldr	r2, [r3, #4]
 810b5ae:	4613      	mov	r3, r2
 810b5b0:	005b      	lsls	r3, r3, #1
 810b5b2:	4413      	add	r3, r2
 810b5b4:	6a3a      	ldr	r2, [r7, #32]
 810b5b6:	429a      	cmp	r2, r3
 810b5b8:	d305      	bcc.n	810b5c6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	685b      	ldr	r3, [r3, #4]
 810b5be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b5c0:	6a3a      	ldr	r2, [r7, #32]
 810b5c2:	429a      	cmp	r2, r3
 810b5c4:	d903      	bls.n	810b5ce <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810b5c6:	2301      	movs	r3, #1
 810b5c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b5cc:	e1bd      	b.n	810b94a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b5d0:	4618      	mov	r0, r3
 810b5d2:	f04f 0100 	mov.w	r1, #0
 810b5d6:	687b      	ldr	r3, [r7, #4]
 810b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b5da:	4aac      	ldr	r2, [pc, #688]	; (810b88c <UART_SetConfig+0x9c8>)
 810b5dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b5e0:	b29a      	uxth	r2, r3
 810b5e2:	f04f 0300 	mov.w	r3, #0
 810b5e6:	f7f5 fc91 	bl	8100f0c <__aeabi_uldivmod>
 810b5ea:	4602      	mov	r2, r0
 810b5ec:	460b      	mov	r3, r1
 810b5ee:	4610      	mov	r0, r2
 810b5f0:	4619      	mov	r1, r3
 810b5f2:	f04f 0200 	mov.w	r2, #0
 810b5f6:	f04f 0300 	mov.w	r3, #0
 810b5fa:	020b      	lsls	r3, r1, #8
 810b5fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b600:	0202      	lsls	r2, r0, #8
 810b602:	6879      	ldr	r1, [r7, #4]
 810b604:	6849      	ldr	r1, [r1, #4]
 810b606:	0849      	lsrs	r1, r1, #1
 810b608:	4608      	mov	r0, r1
 810b60a:	f04f 0100 	mov.w	r1, #0
 810b60e:	1814      	adds	r4, r2, r0
 810b610:	eb43 0501 	adc.w	r5, r3, r1
 810b614:	687b      	ldr	r3, [r7, #4]
 810b616:	685b      	ldr	r3, [r3, #4]
 810b618:	461a      	mov	r2, r3
 810b61a:	f04f 0300 	mov.w	r3, #0
 810b61e:	4620      	mov	r0, r4
 810b620:	4629      	mov	r1, r5
 810b622:	f7f5 fc73 	bl	8100f0c <__aeabi_uldivmod>
 810b626:	4602      	mov	r2, r0
 810b628:	460b      	mov	r3, r1
 810b62a:	4613      	mov	r3, r2
 810b62c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810b634:	d308      	bcc.n	810b648 <UART_SetConfig+0x784>
 810b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b63c:	d204      	bcs.n	810b648 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810b63e:	687b      	ldr	r3, [r7, #4]
 810b640:	681b      	ldr	r3, [r3, #0]
 810b642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b644:	60da      	str	r2, [r3, #12]
 810b646:	e180      	b.n	810b94a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810b648:	2301      	movs	r3, #1
 810b64a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b64e:	e17c      	b.n	810b94a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b650:	687b      	ldr	r3, [r7, #4]
 810b652:	69db      	ldr	r3, [r3, #28]
 810b654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b658:	f040 80bf 	bne.w	810b7da <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810b65c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b660:	2b20      	cmp	r3, #32
 810b662:	dc49      	bgt.n	810b6f8 <UART_SetConfig+0x834>
 810b664:	2b00      	cmp	r3, #0
 810b666:	db7c      	blt.n	810b762 <UART_SetConfig+0x89e>
 810b668:	2b20      	cmp	r3, #32
 810b66a:	d87a      	bhi.n	810b762 <UART_SetConfig+0x89e>
 810b66c:	a201      	add	r2, pc, #4	; (adr r2, 810b674 <UART_SetConfig+0x7b0>)
 810b66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b672:	bf00      	nop
 810b674:	0810b6ff 	.word	0x0810b6ff
 810b678:	0810b707 	.word	0x0810b707
 810b67c:	0810b763 	.word	0x0810b763
 810b680:	0810b763 	.word	0x0810b763
 810b684:	0810b70f 	.word	0x0810b70f
 810b688:	0810b763 	.word	0x0810b763
 810b68c:	0810b763 	.word	0x0810b763
 810b690:	0810b763 	.word	0x0810b763
 810b694:	0810b71f 	.word	0x0810b71f
 810b698:	0810b763 	.word	0x0810b763
 810b69c:	0810b763 	.word	0x0810b763
 810b6a0:	0810b763 	.word	0x0810b763
 810b6a4:	0810b763 	.word	0x0810b763
 810b6a8:	0810b763 	.word	0x0810b763
 810b6ac:	0810b763 	.word	0x0810b763
 810b6b0:	0810b763 	.word	0x0810b763
 810b6b4:	0810b72f 	.word	0x0810b72f
 810b6b8:	0810b763 	.word	0x0810b763
 810b6bc:	0810b763 	.word	0x0810b763
 810b6c0:	0810b763 	.word	0x0810b763
 810b6c4:	0810b763 	.word	0x0810b763
 810b6c8:	0810b763 	.word	0x0810b763
 810b6cc:	0810b763 	.word	0x0810b763
 810b6d0:	0810b763 	.word	0x0810b763
 810b6d4:	0810b763 	.word	0x0810b763
 810b6d8:	0810b763 	.word	0x0810b763
 810b6dc:	0810b763 	.word	0x0810b763
 810b6e0:	0810b763 	.word	0x0810b763
 810b6e4:	0810b763 	.word	0x0810b763
 810b6e8:	0810b763 	.word	0x0810b763
 810b6ec:	0810b763 	.word	0x0810b763
 810b6f0:	0810b763 	.word	0x0810b763
 810b6f4:	0810b755 	.word	0x0810b755
 810b6f8:	2b40      	cmp	r3, #64	; 0x40
 810b6fa:	d02e      	beq.n	810b75a <UART_SetConfig+0x896>
 810b6fc:	e031      	b.n	810b762 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b6fe:	f7fc fe1f 	bl	8108340 <HAL_RCC_GetPCLK1Freq>
 810b702:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b704:	e033      	b.n	810b76e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b706:	f7fc fe31 	bl	810836c <HAL_RCC_GetPCLK2Freq>
 810b70a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b70c:	e02f      	b.n	810b76e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b70e:	f107 0314 	add.w	r3, r7, #20
 810b712:	4618      	mov	r0, r3
 810b714:	f7fd fd96 	bl	8109244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b718:	69bb      	ldr	r3, [r7, #24]
 810b71a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b71c:	e027      	b.n	810b76e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b71e:	f107 0308 	add.w	r3, r7, #8
 810b722:	4618      	mov	r0, r3
 810b724:	f7fd fee2 	bl	81094ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b728:	68fb      	ldr	r3, [r7, #12]
 810b72a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b72c:	e01f      	b.n	810b76e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b72e:	4b58      	ldr	r3, [pc, #352]	; (810b890 <UART_SetConfig+0x9cc>)
 810b730:	681b      	ldr	r3, [r3, #0]
 810b732:	f003 0320 	and.w	r3, r3, #32
 810b736:	2b00      	cmp	r3, #0
 810b738:	d009      	beq.n	810b74e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b73a:	4b55      	ldr	r3, [pc, #340]	; (810b890 <UART_SetConfig+0x9cc>)
 810b73c:	681b      	ldr	r3, [r3, #0]
 810b73e:	08db      	lsrs	r3, r3, #3
 810b740:	f003 0303 	and.w	r3, r3, #3
 810b744:	4a53      	ldr	r2, [pc, #332]	; (810b894 <UART_SetConfig+0x9d0>)
 810b746:	fa22 f303 	lsr.w	r3, r2, r3
 810b74a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b74c:	e00f      	b.n	810b76e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810b74e:	4b51      	ldr	r3, [pc, #324]	; (810b894 <UART_SetConfig+0x9d0>)
 810b750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b752:	e00c      	b.n	810b76e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b754:	4b4c      	ldr	r3, [pc, #304]	; (810b888 <UART_SetConfig+0x9c4>)
 810b756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b758:	e009      	b.n	810b76e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b75e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b760:	e005      	b.n	810b76e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810b762:	2300      	movs	r3, #0
 810b764:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b766:	2301      	movs	r3, #1
 810b768:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b76c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b770:	2b00      	cmp	r3, #0
 810b772:	f000 80ea 	beq.w	810b94a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b776:	687b      	ldr	r3, [r7, #4]
 810b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b77a:	4a44      	ldr	r2, [pc, #272]	; (810b88c <UART_SetConfig+0x9c8>)
 810b77c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b780:	461a      	mov	r2, r3
 810b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b784:	fbb3 f3f2 	udiv	r3, r3, r2
 810b788:	005a      	lsls	r2, r3, #1
 810b78a:	687b      	ldr	r3, [r7, #4]
 810b78c:	685b      	ldr	r3, [r3, #4]
 810b78e:	085b      	lsrs	r3, r3, #1
 810b790:	441a      	add	r2, r3
 810b792:	687b      	ldr	r3, [r7, #4]
 810b794:	685b      	ldr	r3, [r3, #4]
 810b796:	fbb2 f3f3 	udiv	r3, r2, r3
 810b79a:	b29b      	uxth	r3, r3
 810b79c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b7a0:	2b0f      	cmp	r3, #15
 810b7a2:	d916      	bls.n	810b7d2 <UART_SetConfig+0x90e>
 810b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b7aa:	d212      	bcs.n	810b7d2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b7ae:	b29b      	uxth	r3, r3
 810b7b0:	f023 030f 	bic.w	r3, r3, #15
 810b7b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b7b8:	085b      	lsrs	r3, r3, #1
 810b7ba:	b29b      	uxth	r3, r3
 810b7bc:	f003 0307 	and.w	r3, r3, #7
 810b7c0:	b29a      	uxth	r2, r3
 810b7c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810b7c4:	4313      	orrs	r3, r2
 810b7c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810b7c8:	687b      	ldr	r3, [r7, #4]
 810b7ca:	681b      	ldr	r3, [r3, #0]
 810b7cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810b7ce:	60da      	str	r2, [r3, #12]
 810b7d0:	e0bb      	b.n	810b94a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810b7d2:	2301      	movs	r3, #1
 810b7d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b7d8:	e0b7      	b.n	810b94a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810b7da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b7de:	2b20      	cmp	r3, #32
 810b7e0:	dc4a      	bgt.n	810b878 <UART_SetConfig+0x9b4>
 810b7e2:	2b00      	cmp	r3, #0
 810b7e4:	f2c0 8086 	blt.w	810b8f4 <UART_SetConfig+0xa30>
 810b7e8:	2b20      	cmp	r3, #32
 810b7ea:	f200 8083 	bhi.w	810b8f4 <UART_SetConfig+0xa30>
 810b7ee:	a201      	add	r2, pc, #4	; (adr r2, 810b7f4 <UART_SetConfig+0x930>)
 810b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b7f4:	0810b87f 	.word	0x0810b87f
 810b7f8:	0810b899 	.word	0x0810b899
 810b7fc:	0810b8f5 	.word	0x0810b8f5
 810b800:	0810b8f5 	.word	0x0810b8f5
 810b804:	0810b8a1 	.word	0x0810b8a1
 810b808:	0810b8f5 	.word	0x0810b8f5
 810b80c:	0810b8f5 	.word	0x0810b8f5
 810b810:	0810b8f5 	.word	0x0810b8f5
 810b814:	0810b8b1 	.word	0x0810b8b1
 810b818:	0810b8f5 	.word	0x0810b8f5
 810b81c:	0810b8f5 	.word	0x0810b8f5
 810b820:	0810b8f5 	.word	0x0810b8f5
 810b824:	0810b8f5 	.word	0x0810b8f5
 810b828:	0810b8f5 	.word	0x0810b8f5
 810b82c:	0810b8f5 	.word	0x0810b8f5
 810b830:	0810b8f5 	.word	0x0810b8f5
 810b834:	0810b8c1 	.word	0x0810b8c1
 810b838:	0810b8f5 	.word	0x0810b8f5
 810b83c:	0810b8f5 	.word	0x0810b8f5
 810b840:	0810b8f5 	.word	0x0810b8f5
 810b844:	0810b8f5 	.word	0x0810b8f5
 810b848:	0810b8f5 	.word	0x0810b8f5
 810b84c:	0810b8f5 	.word	0x0810b8f5
 810b850:	0810b8f5 	.word	0x0810b8f5
 810b854:	0810b8f5 	.word	0x0810b8f5
 810b858:	0810b8f5 	.word	0x0810b8f5
 810b85c:	0810b8f5 	.word	0x0810b8f5
 810b860:	0810b8f5 	.word	0x0810b8f5
 810b864:	0810b8f5 	.word	0x0810b8f5
 810b868:	0810b8f5 	.word	0x0810b8f5
 810b86c:	0810b8f5 	.word	0x0810b8f5
 810b870:	0810b8f5 	.word	0x0810b8f5
 810b874:	0810b8e7 	.word	0x0810b8e7
 810b878:	2b40      	cmp	r3, #64	; 0x40
 810b87a:	d037      	beq.n	810b8ec <UART_SetConfig+0xa28>
 810b87c:	e03a      	b.n	810b8f4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b87e:	f7fc fd5f 	bl	8108340 <HAL_RCC_GetPCLK1Freq>
 810b882:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b884:	e03c      	b.n	810b900 <UART_SetConfig+0xa3c>
 810b886:	bf00      	nop
 810b888:	003d0900 	.word	0x003d0900
 810b88c:	0810d2c4 	.word	0x0810d2c4
 810b890:	58024400 	.word	0x58024400
 810b894:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b898:	f7fc fd68 	bl	810836c <HAL_RCC_GetPCLK2Freq>
 810b89c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b89e:	e02f      	b.n	810b900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b8a0:	f107 0314 	add.w	r3, r7, #20
 810b8a4:	4618      	mov	r0, r3
 810b8a6:	f7fd fccd 	bl	8109244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b8aa:	69bb      	ldr	r3, [r7, #24]
 810b8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b8ae:	e027      	b.n	810b900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b8b0:	f107 0308 	add.w	r3, r7, #8
 810b8b4:	4618      	mov	r0, r3
 810b8b6:	f7fd fe19 	bl	81094ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b8ba:	68fb      	ldr	r3, [r7, #12]
 810b8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b8be:	e01f      	b.n	810b900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b8c0:	4b2c      	ldr	r3, [pc, #176]	; (810b974 <UART_SetConfig+0xab0>)
 810b8c2:	681b      	ldr	r3, [r3, #0]
 810b8c4:	f003 0320 	and.w	r3, r3, #32
 810b8c8:	2b00      	cmp	r3, #0
 810b8ca:	d009      	beq.n	810b8e0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b8cc:	4b29      	ldr	r3, [pc, #164]	; (810b974 <UART_SetConfig+0xab0>)
 810b8ce:	681b      	ldr	r3, [r3, #0]
 810b8d0:	08db      	lsrs	r3, r3, #3
 810b8d2:	f003 0303 	and.w	r3, r3, #3
 810b8d6:	4a28      	ldr	r2, [pc, #160]	; (810b978 <UART_SetConfig+0xab4>)
 810b8d8:	fa22 f303 	lsr.w	r3, r2, r3
 810b8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b8de:	e00f      	b.n	810b900 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810b8e0:	4b25      	ldr	r3, [pc, #148]	; (810b978 <UART_SetConfig+0xab4>)
 810b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b8e4:	e00c      	b.n	810b900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b8e6:	4b25      	ldr	r3, [pc, #148]	; (810b97c <UART_SetConfig+0xab8>)
 810b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b8ea:	e009      	b.n	810b900 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b8ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b8f2:	e005      	b.n	810b900 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810b8f4:	2300      	movs	r3, #0
 810b8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b8f8:	2301      	movs	r3, #1
 810b8fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b8fe:	bf00      	nop
    }

    if (pclk != 0U)
 810b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b902:	2b00      	cmp	r3, #0
 810b904:	d021      	beq.n	810b94a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b906:	687b      	ldr	r3, [r7, #4]
 810b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b90a:	4a1d      	ldr	r2, [pc, #116]	; (810b980 <UART_SetConfig+0xabc>)
 810b90c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b910:	461a      	mov	r2, r3
 810b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b914:	fbb3 f2f2 	udiv	r2, r3, r2
 810b918:	687b      	ldr	r3, [r7, #4]
 810b91a:	685b      	ldr	r3, [r3, #4]
 810b91c:	085b      	lsrs	r3, r3, #1
 810b91e:	441a      	add	r2, r3
 810b920:	687b      	ldr	r3, [r7, #4]
 810b922:	685b      	ldr	r3, [r3, #4]
 810b924:	fbb2 f3f3 	udiv	r3, r2, r3
 810b928:	b29b      	uxth	r3, r3
 810b92a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b92e:	2b0f      	cmp	r3, #15
 810b930:	d908      	bls.n	810b944 <UART_SetConfig+0xa80>
 810b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b938:	d204      	bcs.n	810b944 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	681b      	ldr	r3, [r3, #0]
 810b93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810b940:	60da      	str	r2, [r3, #12]
 810b942:	e002      	b.n	810b94a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810b944:	2301      	movs	r3, #1
 810b946:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b94a:	687b      	ldr	r3, [r7, #4]
 810b94c:	2201      	movs	r2, #1
 810b94e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810b952:	687b      	ldr	r3, [r7, #4]
 810b954:	2201      	movs	r2, #1
 810b956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b95a:	687b      	ldr	r3, [r7, #4]
 810b95c:	2200      	movs	r2, #0
 810b95e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810b960:	687b      	ldr	r3, [r7, #4]
 810b962:	2200      	movs	r2, #0
 810b964:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810b966:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810b96a:	4618      	mov	r0, r3
 810b96c:	3738      	adds	r7, #56	; 0x38
 810b96e:	46bd      	mov	sp, r7
 810b970:	bdb0      	pop	{r4, r5, r7, pc}
 810b972:	bf00      	nop
 810b974:	58024400 	.word	0x58024400
 810b978:	03d09000 	.word	0x03d09000
 810b97c:	003d0900 	.word	0x003d0900
 810b980:	0810d2c4 	.word	0x0810d2c4

0810b984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b984:	b480      	push	{r7}
 810b986:	b083      	sub	sp, #12
 810b988:	af00      	add	r7, sp, #0
 810b98a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b98c:	687b      	ldr	r3, [r7, #4]
 810b98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b990:	f003 0301 	and.w	r3, r3, #1
 810b994:	2b00      	cmp	r3, #0
 810b996:	d00a      	beq.n	810b9ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b998:	687b      	ldr	r3, [r7, #4]
 810b99a:	681b      	ldr	r3, [r3, #0]
 810b99c:	685b      	ldr	r3, [r3, #4]
 810b99e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810b9a2:	687b      	ldr	r3, [r7, #4]
 810b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b9a6:	687b      	ldr	r3, [r7, #4]
 810b9a8:	681b      	ldr	r3, [r3, #0]
 810b9aa:	430a      	orrs	r2, r1
 810b9ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b9ae:	687b      	ldr	r3, [r7, #4]
 810b9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b9b2:	f003 0302 	and.w	r3, r3, #2
 810b9b6:	2b00      	cmp	r3, #0
 810b9b8:	d00a      	beq.n	810b9d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	681b      	ldr	r3, [r3, #0]
 810b9be:	685b      	ldr	r3, [r3, #4]
 810b9c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810b9c4:	687b      	ldr	r3, [r7, #4]
 810b9c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810b9c8:	687b      	ldr	r3, [r7, #4]
 810b9ca:	681b      	ldr	r3, [r3, #0]
 810b9cc:	430a      	orrs	r2, r1
 810b9ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b9d0:	687b      	ldr	r3, [r7, #4]
 810b9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b9d4:	f003 0304 	and.w	r3, r3, #4
 810b9d8:	2b00      	cmp	r3, #0
 810b9da:	d00a      	beq.n	810b9f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b9dc:	687b      	ldr	r3, [r7, #4]
 810b9de:	681b      	ldr	r3, [r3, #0]
 810b9e0:	685b      	ldr	r3, [r3, #4]
 810b9e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810b9e6:	687b      	ldr	r3, [r7, #4]
 810b9e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810b9ea:	687b      	ldr	r3, [r7, #4]
 810b9ec:	681b      	ldr	r3, [r3, #0]
 810b9ee:	430a      	orrs	r2, r1
 810b9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b9f2:	687b      	ldr	r3, [r7, #4]
 810b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b9f6:	f003 0308 	and.w	r3, r3, #8
 810b9fa:	2b00      	cmp	r3, #0
 810b9fc:	d00a      	beq.n	810ba14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b9fe:	687b      	ldr	r3, [r7, #4]
 810ba00:	681b      	ldr	r3, [r3, #0]
 810ba02:	685b      	ldr	r3, [r3, #4]
 810ba04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ba0c:	687b      	ldr	r3, [r7, #4]
 810ba0e:	681b      	ldr	r3, [r3, #0]
 810ba10:	430a      	orrs	r2, r1
 810ba12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810ba14:	687b      	ldr	r3, [r7, #4]
 810ba16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ba18:	f003 0310 	and.w	r3, r3, #16
 810ba1c:	2b00      	cmp	r3, #0
 810ba1e:	d00a      	beq.n	810ba36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810ba20:	687b      	ldr	r3, [r7, #4]
 810ba22:	681b      	ldr	r3, [r3, #0]
 810ba24:	689b      	ldr	r3, [r3, #8]
 810ba26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810ba2a:	687b      	ldr	r3, [r7, #4]
 810ba2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810ba2e:	687b      	ldr	r3, [r7, #4]
 810ba30:	681b      	ldr	r3, [r3, #0]
 810ba32:	430a      	orrs	r2, r1
 810ba34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810ba36:	687b      	ldr	r3, [r7, #4]
 810ba38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ba3a:	f003 0320 	and.w	r3, r3, #32
 810ba3e:	2b00      	cmp	r3, #0
 810ba40:	d00a      	beq.n	810ba58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810ba42:	687b      	ldr	r3, [r7, #4]
 810ba44:	681b      	ldr	r3, [r3, #0]
 810ba46:	689b      	ldr	r3, [r3, #8]
 810ba48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810ba4c:	687b      	ldr	r3, [r7, #4]
 810ba4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810ba50:	687b      	ldr	r3, [r7, #4]
 810ba52:	681b      	ldr	r3, [r3, #0]
 810ba54:	430a      	orrs	r2, r1
 810ba56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810ba58:	687b      	ldr	r3, [r7, #4]
 810ba5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ba5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ba60:	2b00      	cmp	r3, #0
 810ba62:	d01a      	beq.n	810ba9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810ba64:	687b      	ldr	r3, [r7, #4]
 810ba66:	681b      	ldr	r3, [r3, #0]
 810ba68:	685b      	ldr	r3, [r3, #4]
 810ba6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810ba72:	687b      	ldr	r3, [r7, #4]
 810ba74:	681b      	ldr	r3, [r3, #0]
 810ba76:	430a      	orrs	r2, r1
 810ba78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810ba7a:	687b      	ldr	r3, [r7, #4]
 810ba7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810ba7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ba82:	d10a      	bne.n	810ba9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810ba84:	687b      	ldr	r3, [r7, #4]
 810ba86:	681b      	ldr	r3, [r3, #0]
 810ba88:	685b      	ldr	r3, [r3, #4]
 810ba8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810ba8e:	687b      	ldr	r3, [r7, #4]
 810ba90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810ba92:	687b      	ldr	r3, [r7, #4]
 810ba94:	681b      	ldr	r3, [r3, #0]
 810ba96:	430a      	orrs	r2, r1
 810ba98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810ba9a:	687b      	ldr	r3, [r7, #4]
 810ba9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ba9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810baa2:	2b00      	cmp	r3, #0
 810baa4:	d00a      	beq.n	810babc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810baa6:	687b      	ldr	r3, [r7, #4]
 810baa8:	681b      	ldr	r3, [r3, #0]
 810baaa:	685b      	ldr	r3, [r3, #4]
 810baac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810bab4:	687b      	ldr	r3, [r7, #4]
 810bab6:	681b      	ldr	r3, [r3, #0]
 810bab8:	430a      	orrs	r2, r1
 810baba:	605a      	str	r2, [r3, #4]
  }
}
 810babc:	bf00      	nop
 810babe:	370c      	adds	r7, #12
 810bac0:	46bd      	mov	sp, r7
 810bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bac6:	4770      	bx	lr

0810bac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810bac8:	b580      	push	{r7, lr}
 810baca:	b086      	sub	sp, #24
 810bacc:	af02      	add	r7, sp, #8
 810bace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bad0:	687b      	ldr	r3, [r7, #4]
 810bad2:	2200      	movs	r2, #0
 810bad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810bad8:	f7f7 fca8 	bl	810342c <HAL_GetTick>
 810badc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810bade:	687b      	ldr	r3, [r7, #4]
 810bae0:	681b      	ldr	r3, [r3, #0]
 810bae2:	681b      	ldr	r3, [r3, #0]
 810bae4:	f003 0308 	and.w	r3, r3, #8
 810bae8:	2b08      	cmp	r3, #8
 810baea:	d10e      	bne.n	810bb0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810baec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810baf0:	9300      	str	r3, [sp, #0]
 810baf2:	68fb      	ldr	r3, [r7, #12]
 810baf4:	2200      	movs	r2, #0
 810baf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810bafa:	6878      	ldr	r0, [r7, #4]
 810bafc:	f000 f82f 	bl	810bb5e <UART_WaitOnFlagUntilTimeout>
 810bb00:	4603      	mov	r3, r0
 810bb02:	2b00      	cmp	r3, #0
 810bb04:	d001      	beq.n	810bb0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bb06:	2303      	movs	r3, #3
 810bb08:	e025      	b.n	810bb56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810bb0a:	687b      	ldr	r3, [r7, #4]
 810bb0c:	681b      	ldr	r3, [r3, #0]
 810bb0e:	681b      	ldr	r3, [r3, #0]
 810bb10:	f003 0304 	and.w	r3, r3, #4
 810bb14:	2b04      	cmp	r3, #4
 810bb16:	d10e      	bne.n	810bb36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bb18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810bb1c:	9300      	str	r3, [sp, #0]
 810bb1e:	68fb      	ldr	r3, [r7, #12]
 810bb20:	2200      	movs	r2, #0
 810bb22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810bb26:	6878      	ldr	r0, [r7, #4]
 810bb28:	f000 f819 	bl	810bb5e <UART_WaitOnFlagUntilTimeout>
 810bb2c:	4603      	mov	r3, r0
 810bb2e:	2b00      	cmp	r3, #0
 810bb30:	d001      	beq.n	810bb36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bb32:	2303      	movs	r3, #3
 810bb34:	e00f      	b.n	810bb56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810bb36:	687b      	ldr	r3, [r7, #4]
 810bb38:	2220      	movs	r2, #32
 810bb3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810bb3e:	687b      	ldr	r3, [r7, #4]
 810bb40:	2220      	movs	r2, #32
 810bb42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bb46:	687b      	ldr	r3, [r7, #4]
 810bb48:	2200      	movs	r2, #0
 810bb4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810bb4c:	687b      	ldr	r3, [r7, #4]
 810bb4e:	2200      	movs	r2, #0
 810bb50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810bb54:	2300      	movs	r3, #0
}
 810bb56:	4618      	mov	r0, r3
 810bb58:	3710      	adds	r7, #16
 810bb5a:	46bd      	mov	sp, r7
 810bb5c:	bd80      	pop	{r7, pc}

0810bb5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810bb5e:	b580      	push	{r7, lr}
 810bb60:	b084      	sub	sp, #16
 810bb62:	af00      	add	r7, sp, #0
 810bb64:	60f8      	str	r0, [r7, #12]
 810bb66:	60b9      	str	r1, [r7, #8]
 810bb68:	603b      	str	r3, [r7, #0]
 810bb6a:	4613      	mov	r3, r2
 810bb6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810bb6e:	e062      	b.n	810bc36 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810bb70:	69bb      	ldr	r3, [r7, #24]
 810bb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bb76:	d05e      	beq.n	810bc36 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810bb78:	f7f7 fc58 	bl	810342c <HAL_GetTick>
 810bb7c:	4602      	mov	r2, r0
 810bb7e:	683b      	ldr	r3, [r7, #0]
 810bb80:	1ad3      	subs	r3, r2, r3
 810bb82:	69ba      	ldr	r2, [r7, #24]
 810bb84:	429a      	cmp	r2, r3
 810bb86:	d302      	bcc.n	810bb8e <UART_WaitOnFlagUntilTimeout+0x30>
 810bb88:	69bb      	ldr	r3, [r7, #24]
 810bb8a:	2b00      	cmp	r3, #0
 810bb8c:	d11d      	bne.n	810bbca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810bb8e:	68fb      	ldr	r3, [r7, #12]
 810bb90:	681b      	ldr	r3, [r3, #0]
 810bb92:	681a      	ldr	r2, [r3, #0]
 810bb94:	68fb      	ldr	r3, [r7, #12]
 810bb96:	681b      	ldr	r3, [r3, #0]
 810bb98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810bb9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bb9e:	68fb      	ldr	r3, [r7, #12]
 810bba0:	681b      	ldr	r3, [r3, #0]
 810bba2:	689a      	ldr	r2, [r3, #8]
 810bba4:	68fb      	ldr	r3, [r7, #12]
 810bba6:	681b      	ldr	r3, [r3, #0]
 810bba8:	f022 0201 	bic.w	r2, r2, #1
 810bbac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810bbae:	68fb      	ldr	r3, [r7, #12]
 810bbb0:	2220      	movs	r2, #32
 810bbb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810bbb6:	68fb      	ldr	r3, [r7, #12]
 810bbb8:	2220      	movs	r2, #32
 810bbba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810bbbe:	68fb      	ldr	r3, [r7, #12]
 810bbc0:	2200      	movs	r2, #0
 810bbc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810bbc6:	2303      	movs	r3, #3
 810bbc8:	e045      	b.n	810bc56 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810bbca:	68fb      	ldr	r3, [r7, #12]
 810bbcc:	681b      	ldr	r3, [r3, #0]
 810bbce:	681b      	ldr	r3, [r3, #0]
 810bbd0:	f003 0304 	and.w	r3, r3, #4
 810bbd4:	2b00      	cmp	r3, #0
 810bbd6:	d02e      	beq.n	810bc36 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810bbd8:	68fb      	ldr	r3, [r7, #12]
 810bbda:	681b      	ldr	r3, [r3, #0]
 810bbdc:	69db      	ldr	r3, [r3, #28]
 810bbde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810bbe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810bbe6:	d126      	bne.n	810bc36 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810bbe8:	68fb      	ldr	r3, [r7, #12]
 810bbea:	681b      	ldr	r3, [r3, #0]
 810bbec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810bbf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810bbf2:	68fb      	ldr	r3, [r7, #12]
 810bbf4:	681b      	ldr	r3, [r3, #0]
 810bbf6:	681a      	ldr	r2, [r3, #0]
 810bbf8:	68fb      	ldr	r3, [r7, #12]
 810bbfa:	681b      	ldr	r3, [r3, #0]
 810bbfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810bc00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bc02:	68fb      	ldr	r3, [r7, #12]
 810bc04:	681b      	ldr	r3, [r3, #0]
 810bc06:	689a      	ldr	r2, [r3, #8]
 810bc08:	68fb      	ldr	r3, [r7, #12]
 810bc0a:	681b      	ldr	r3, [r3, #0]
 810bc0c:	f022 0201 	bic.w	r2, r2, #1
 810bc10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810bc12:	68fb      	ldr	r3, [r7, #12]
 810bc14:	2220      	movs	r2, #32
 810bc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810bc1a:	68fb      	ldr	r3, [r7, #12]
 810bc1c:	2220      	movs	r2, #32
 810bc1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810bc22:	68fb      	ldr	r3, [r7, #12]
 810bc24:	2220      	movs	r2, #32
 810bc26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810bc2a:	68fb      	ldr	r3, [r7, #12]
 810bc2c:	2200      	movs	r2, #0
 810bc2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810bc32:	2303      	movs	r3, #3
 810bc34:	e00f      	b.n	810bc56 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810bc36:	68fb      	ldr	r3, [r7, #12]
 810bc38:	681b      	ldr	r3, [r3, #0]
 810bc3a:	69da      	ldr	r2, [r3, #28]
 810bc3c:	68bb      	ldr	r3, [r7, #8]
 810bc3e:	4013      	ands	r3, r2
 810bc40:	68ba      	ldr	r2, [r7, #8]
 810bc42:	429a      	cmp	r2, r3
 810bc44:	bf0c      	ite	eq
 810bc46:	2301      	moveq	r3, #1
 810bc48:	2300      	movne	r3, #0
 810bc4a:	b2db      	uxtb	r3, r3
 810bc4c:	461a      	mov	r2, r3
 810bc4e:	79fb      	ldrb	r3, [r7, #7]
 810bc50:	429a      	cmp	r2, r3
 810bc52:	d08d      	beq.n	810bb70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810bc54:	2300      	movs	r3, #0
}
 810bc56:	4618      	mov	r0, r3
 810bc58:	3710      	adds	r7, #16
 810bc5a:	46bd      	mov	sp, r7
 810bc5c:	bd80      	pop	{r7, pc}
	...

0810bc60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810bc60:	b580      	push	{r7, lr}
 810bc62:	b084      	sub	sp, #16
 810bc64:	af00      	add	r7, sp, #0
 810bc66:	60f8      	str	r0, [r7, #12]
 810bc68:	60b9      	str	r1, [r7, #8]
 810bc6a:	4613      	mov	r3, r2
 810bc6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810bc6e:	68fb      	ldr	r3, [r7, #12]
 810bc70:	68ba      	ldr	r2, [r7, #8]
 810bc72:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810bc74:	68fb      	ldr	r3, [r7, #12]
 810bc76:	88fa      	ldrh	r2, [r7, #6]
 810bc78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bc7c:	68fb      	ldr	r3, [r7, #12]
 810bc7e:	2200      	movs	r2, #0
 810bc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810bc84:	68fb      	ldr	r3, [r7, #12]
 810bc86:	2222      	movs	r2, #34	; 0x22
 810bc88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810bc8c:	68fb      	ldr	r3, [r7, #12]
 810bc8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc90:	2b00      	cmp	r3, #0
 810bc92:	d02c      	beq.n	810bcee <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810bc94:	68fb      	ldr	r3, [r7, #12]
 810bc96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc98:	4a25      	ldr	r2, [pc, #148]	; (810bd30 <UART_Start_Receive_DMA+0xd0>)
 810bc9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810bc9c:	68fb      	ldr	r3, [r7, #12]
 810bc9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bca0:	4a24      	ldr	r2, [pc, #144]	; (810bd34 <UART_Start_Receive_DMA+0xd4>)
 810bca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810bca4:	68fb      	ldr	r3, [r7, #12]
 810bca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bca8:	4a23      	ldr	r2, [pc, #140]	; (810bd38 <UART_Start_Receive_DMA+0xd8>)
 810bcaa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810bcac:	68fb      	ldr	r3, [r7, #12]
 810bcae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bcb0:	2200      	movs	r2, #0
 810bcb2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810bcb4:	68fb      	ldr	r3, [r7, #12]
 810bcb6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810bcb8:	68fb      	ldr	r3, [r7, #12]
 810bcba:	681b      	ldr	r3, [r3, #0]
 810bcbc:	3324      	adds	r3, #36	; 0x24
 810bcbe:	4619      	mov	r1, r3
 810bcc0:	68fb      	ldr	r3, [r7, #12]
 810bcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810bcc4:	461a      	mov	r2, r3
 810bcc6:	88fb      	ldrh	r3, [r7, #6]
 810bcc8:	f7f8 f85e 	bl	8103d88 <HAL_DMA_Start_IT>
 810bccc:	4603      	mov	r3, r0
 810bcce:	2b00      	cmp	r3, #0
 810bcd0:	d00d      	beq.n	810bcee <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810bcd2:	68fb      	ldr	r3, [r7, #12]
 810bcd4:	2210      	movs	r2, #16
 810bcd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810bcda:	68fb      	ldr	r3, [r7, #12]
 810bcdc:	2200      	movs	r2, #0
 810bcde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810bce2:	68fb      	ldr	r3, [r7, #12]
 810bce4:	2220      	movs	r2, #32
 810bce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810bcea:	2301      	movs	r3, #1
 810bcec:	e01c      	b.n	810bd28 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810bcee:	68fb      	ldr	r3, [r7, #12]
 810bcf0:	2200      	movs	r2, #0
 810bcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810bcf6:	68fb      	ldr	r3, [r7, #12]
 810bcf8:	681b      	ldr	r3, [r3, #0]
 810bcfa:	681a      	ldr	r2, [r3, #0]
 810bcfc:	68fb      	ldr	r3, [r7, #12]
 810bcfe:	681b      	ldr	r3, [r3, #0]
 810bd00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810bd04:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bd06:	68fb      	ldr	r3, [r7, #12]
 810bd08:	681b      	ldr	r3, [r3, #0]
 810bd0a:	689a      	ldr	r2, [r3, #8]
 810bd0c:	68fb      	ldr	r3, [r7, #12]
 810bd0e:	681b      	ldr	r3, [r3, #0]
 810bd10:	f042 0201 	orr.w	r2, r2, #1
 810bd14:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810bd16:	68fb      	ldr	r3, [r7, #12]
 810bd18:	681b      	ldr	r3, [r3, #0]
 810bd1a:	689a      	ldr	r2, [r3, #8]
 810bd1c:	68fb      	ldr	r3, [r7, #12]
 810bd1e:	681b      	ldr	r3, [r3, #0]
 810bd20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bd24:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810bd26:	2300      	movs	r3, #0
}
 810bd28:	4618      	mov	r0, r3
 810bd2a:	3710      	adds	r7, #16
 810bd2c:	46bd      	mov	sp, r7
 810bd2e:	bd80      	pop	{r7, pc}
 810bd30:	0810be49 	.word	0x0810be49
 810bd34:	0810bedf 	.word	0x0810bedf
 810bd38:	0810bf17 	.word	0x0810bf17

0810bd3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810bd3c:	b480      	push	{r7}
 810bd3e:	b083      	sub	sp, #12
 810bd40:	af00      	add	r7, sp, #0
 810bd42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810bd44:	687b      	ldr	r3, [r7, #4]
 810bd46:	681b      	ldr	r3, [r3, #0]
 810bd48:	681a      	ldr	r2, [r3, #0]
 810bd4a:	687b      	ldr	r3, [r7, #4]
 810bd4c:	681b      	ldr	r3, [r3, #0]
 810bd4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810bd52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810bd54:	687b      	ldr	r3, [r7, #4]
 810bd56:	681b      	ldr	r3, [r3, #0]
 810bd58:	689a      	ldr	r2, [r3, #8]
 810bd5a:	687b      	ldr	r3, [r7, #4]
 810bd5c:	681b      	ldr	r3, [r3, #0]
 810bd5e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810bd62:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810bd64:	687b      	ldr	r3, [r7, #4]
 810bd66:	2220      	movs	r2, #32
 810bd68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810bd6c:	bf00      	nop
 810bd6e:	370c      	adds	r7, #12
 810bd70:	46bd      	mov	sp, r7
 810bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd76:	4770      	bx	lr

0810bd78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810bd78:	b480      	push	{r7}
 810bd7a:	b083      	sub	sp, #12
 810bd7c:	af00      	add	r7, sp, #0
 810bd7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810bd80:	687b      	ldr	r3, [r7, #4]
 810bd82:	681b      	ldr	r3, [r3, #0]
 810bd84:	681a      	ldr	r2, [r3, #0]
 810bd86:	687b      	ldr	r3, [r7, #4]
 810bd88:	681b      	ldr	r3, [r3, #0]
 810bd8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810bd8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810bd90:	687b      	ldr	r3, [r7, #4]
 810bd92:	681b      	ldr	r3, [r3, #0]
 810bd94:	689b      	ldr	r3, [r3, #8]
 810bd96:	687a      	ldr	r2, [r7, #4]
 810bd98:	6812      	ldr	r2, [r2, #0]
 810bd9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810bd9e:	f023 0301 	bic.w	r3, r3, #1
 810bda2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810bda4:	687b      	ldr	r3, [r7, #4]
 810bda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810bda8:	2b01      	cmp	r3, #1
 810bdaa:	d107      	bne.n	810bdbc <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810bdac:	687b      	ldr	r3, [r7, #4]
 810bdae:	681b      	ldr	r3, [r3, #0]
 810bdb0:	681a      	ldr	r2, [r3, #0]
 810bdb2:	687b      	ldr	r3, [r7, #4]
 810bdb4:	681b      	ldr	r3, [r3, #0]
 810bdb6:	f022 0210 	bic.w	r2, r2, #16
 810bdba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810bdbc:	687b      	ldr	r3, [r7, #4]
 810bdbe:	2220      	movs	r2, #32
 810bdc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bdc4:	687b      	ldr	r3, [r7, #4]
 810bdc6:	2200      	movs	r2, #0
 810bdc8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810bdca:	687b      	ldr	r3, [r7, #4]
 810bdcc:	2200      	movs	r2, #0
 810bdce:	671a      	str	r2, [r3, #112]	; 0x70
}
 810bdd0:	bf00      	nop
 810bdd2:	370c      	adds	r7, #12
 810bdd4:	46bd      	mov	sp, r7
 810bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bdda:	4770      	bx	lr

0810bddc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810bddc:	b580      	push	{r7, lr}
 810bdde:	b084      	sub	sp, #16
 810bde0:	af00      	add	r7, sp, #0
 810bde2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810bde4:	687b      	ldr	r3, [r7, #4]
 810bde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bde8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810bdea:	687b      	ldr	r3, [r7, #4]
 810bdec:	69db      	ldr	r3, [r3, #28]
 810bdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810bdf2:	d014      	beq.n	810be1e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810bdf4:	68fb      	ldr	r3, [r7, #12]
 810bdf6:	2200      	movs	r2, #0
 810bdf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810bdfc:	68fb      	ldr	r3, [r7, #12]
 810bdfe:	681b      	ldr	r3, [r3, #0]
 810be00:	689a      	ldr	r2, [r3, #8]
 810be02:	68fb      	ldr	r3, [r7, #12]
 810be04:	681b      	ldr	r3, [r3, #0]
 810be06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810be0a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810be0c:	68fb      	ldr	r3, [r7, #12]
 810be0e:	681b      	ldr	r3, [r3, #0]
 810be10:	681a      	ldr	r2, [r3, #0]
 810be12:	68fb      	ldr	r3, [r7, #12]
 810be14:	681b      	ldr	r3, [r3, #0]
 810be16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810be1a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810be1c:	e002      	b.n	810be24 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810be1e:	68f8      	ldr	r0, [r7, #12]
 810be20:	f7f7 f894 	bl	8102f4c <HAL_UART_TxCpltCallback>
}
 810be24:	bf00      	nop
 810be26:	3710      	adds	r7, #16
 810be28:	46bd      	mov	sp, r7
 810be2a:	bd80      	pop	{r7, pc}

0810be2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810be2c:	b580      	push	{r7, lr}
 810be2e:	b084      	sub	sp, #16
 810be30:	af00      	add	r7, sp, #0
 810be32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810be34:	687b      	ldr	r3, [r7, #4]
 810be36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810be38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810be3a:	68f8      	ldr	r0, [r7, #12]
 810be3c:	f7ff f818 	bl	810ae70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810be40:	bf00      	nop
 810be42:	3710      	adds	r7, #16
 810be44:	46bd      	mov	sp, r7
 810be46:	bd80      	pop	{r7, pc}

0810be48 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810be48:	b580      	push	{r7, lr}
 810be4a:	b084      	sub	sp, #16
 810be4c:	af00      	add	r7, sp, #0
 810be4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810be50:	687b      	ldr	r3, [r7, #4]
 810be52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810be54:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810be56:	687b      	ldr	r3, [r7, #4]
 810be58:	69db      	ldr	r3, [r3, #28]
 810be5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810be5e:	d02b      	beq.n	810beb8 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810be60:	68fb      	ldr	r3, [r7, #12]
 810be62:	2200      	movs	r2, #0
 810be64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810be68:	68fb      	ldr	r3, [r7, #12]
 810be6a:	681b      	ldr	r3, [r3, #0]
 810be6c:	681a      	ldr	r2, [r3, #0]
 810be6e:	68fb      	ldr	r3, [r7, #12]
 810be70:	681b      	ldr	r3, [r3, #0]
 810be72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810be76:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810be78:	68fb      	ldr	r3, [r7, #12]
 810be7a:	681b      	ldr	r3, [r3, #0]
 810be7c:	689a      	ldr	r2, [r3, #8]
 810be7e:	68fb      	ldr	r3, [r7, #12]
 810be80:	681b      	ldr	r3, [r3, #0]
 810be82:	f022 0201 	bic.w	r2, r2, #1
 810be86:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810be88:	68fb      	ldr	r3, [r7, #12]
 810be8a:	681b      	ldr	r3, [r3, #0]
 810be8c:	689a      	ldr	r2, [r3, #8]
 810be8e:	68fb      	ldr	r3, [r7, #12]
 810be90:	681b      	ldr	r3, [r3, #0]
 810be92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810be96:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810be98:	68fb      	ldr	r3, [r7, #12]
 810be9a:	2220      	movs	r2, #32
 810be9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810bea0:	68fb      	ldr	r3, [r7, #12]
 810bea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810bea4:	2b01      	cmp	r3, #1
 810bea6:	d107      	bne.n	810beb8 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810bea8:	68fb      	ldr	r3, [r7, #12]
 810beaa:	681b      	ldr	r3, [r3, #0]
 810beac:	681a      	ldr	r2, [r3, #0]
 810beae:	68fb      	ldr	r3, [r7, #12]
 810beb0:	681b      	ldr	r3, [r3, #0]
 810beb2:	f022 0210 	bic.w	r2, r2, #16
 810beb6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810beb8:	68fb      	ldr	r3, [r7, #12]
 810beba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810bebc:	2b01      	cmp	r3, #1
 810bebe:	d107      	bne.n	810bed0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810bec0:	68fb      	ldr	r3, [r7, #12]
 810bec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810bec6:	4619      	mov	r1, r3
 810bec8:	68f8      	ldr	r0, [r7, #12]
 810beca:	f7fe ffef 	bl	810aeac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810bece:	e002      	b.n	810bed6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810bed0:	68f8      	ldr	r0, [r7, #12]
 810bed2:	f7f7 f845 	bl	8102f60 <HAL_UART_RxCpltCallback>
}
 810bed6:	bf00      	nop
 810bed8:	3710      	adds	r7, #16
 810beda:	46bd      	mov	sp, r7
 810bedc:	bd80      	pop	{r7, pc}

0810bede <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810bede:	b580      	push	{r7, lr}
 810bee0:	b084      	sub	sp, #16
 810bee2:	af00      	add	r7, sp, #0
 810bee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810bee6:	687b      	ldr	r3, [r7, #4]
 810bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810beea:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810beec:	68fb      	ldr	r3, [r7, #12]
 810beee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810bef0:	2b01      	cmp	r3, #1
 810bef2:	d109      	bne.n	810bf08 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810bef4:	68fb      	ldr	r3, [r7, #12]
 810bef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810befa:	085b      	lsrs	r3, r3, #1
 810befc:	b29b      	uxth	r3, r3
 810befe:	4619      	mov	r1, r3
 810bf00:	68f8      	ldr	r0, [r7, #12]
 810bf02:	f7fe ffd3 	bl	810aeac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810bf06:	e002      	b.n	810bf0e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810bf08:	68f8      	ldr	r0, [r7, #12]
 810bf0a:	f7fe ffbb 	bl	810ae84 <HAL_UART_RxHalfCpltCallback>
}
 810bf0e:	bf00      	nop
 810bf10:	3710      	adds	r7, #16
 810bf12:	46bd      	mov	sp, r7
 810bf14:	bd80      	pop	{r7, pc}

0810bf16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810bf16:	b580      	push	{r7, lr}
 810bf18:	b086      	sub	sp, #24
 810bf1a:	af00      	add	r7, sp, #0
 810bf1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810bf1e:	687b      	ldr	r3, [r7, #4]
 810bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bf22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810bf24:	697b      	ldr	r3, [r7, #20]
 810bf26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bf2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810bf2c:	697b      	ldr	r3, [r7, #20]
 810bf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810bf32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810bf34:	697b      	ldr	r3, [r7, #20]
 810bf36:	681b      	ldr	r3, [r3, #0]
 810bf38:	689b      	ldr	r3, [r3, #8]
 810bf3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810bf3e:	2b80      	cmp	r3, #128	; 0x80
 810bf40:	d109      	bne.n	810bf56 <UART_DMAError+0x40>
 810bf42:	693b      	ldr	r3, [r7, #16]
 810bf44:	2b21      	cmp	r3, #33	; 0x21
 810bf46:	d106      	bne.n	810bf56 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810bf48:	697b      	ldr	r3, [r7, #20]
 810bf4a:	2200      	movs	r2, #0
 810bf4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810bf50:	6978      	ldr	r0, [r7, #20]
 810bf52:	f7ff fef3 	bl	810bd3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810bf56:	697b      	ldr	r3, [r7, #20]
 810bf58:	681b      	ldr	r3, [r3, #0]
 810bf5a:	689b      	ldr	r3, [r3, #8]
 810bf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bf60:	2b40      	cmp	r3, #64	; 0x40
 810bf62:	d109      	bne.n	810bf78 <UART_DMAError+0x62>
 810bf64:	68fb      	ldr	r3, [r7, #12]
 810bf66:	2b22      	cmp	r3, #34	; 0x22
 810bf68:	d106      	bne.n	810bf78 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810bf6a:	697b      	ldr	r3, [r7, #20]
 810bf6c:	2200      	movs	r2, #0
 810bf6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810bf72:	6978      	ldr	r0, [r7, #20]
 810bf74:	f7ff ff00 	bl	810bd78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810bf78:	697b      	ldr	r3, [r7, #20]
 810bf7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bf7e:	f043 0210 	orr.w	r2, r3, #16
 810bf82:	697b      	ldr	r3, [r7, #20]
 810bf84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810bf88:	6978      	ldr	r0, [r7, #20]
 810bf8a:	f7fe ff85 	bl	810ae98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810bf8e:	bf00      	nop
 810bf90:	3718      	adds	r7, #24
 810bf92:	46bd      	mov	sp, r7
 810bf94:	bd80      	pop	{r7, pc}

0810bf96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810bf96:	b580      	push	{r7, lr}
 810bf98:	b084      	sub	sp, #16
 810bf9a:	af00      	add	r7, sp, #0
 810bf9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810bf9e:	687b      	ldr	r3, [r7, #4]
 810bfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bfa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810bfa4:	68fb      	ldr	r3, [r7, #12]
 810bfa6:	2200      	movs	r2, #0
 810bfa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810bfac:	68fb      	ldr	r3, [r7, #12]
 810bfae:	2200      	movs	r2, #0
 810bfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810bfb4:	68f8      	ldr	r0, [r7, #12]
 810bfb6:	f7fe ff6f 	bl	810ae98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810bfba:	bf00      	nop
 810bfbc:	3710      	adds	r7, #16
 810bfbe:	46bd      	mov	sp, r7
 810bfc0:	bd80      	pop	{r7, pc}

0810bfc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810bfc2:	b580      	push	{r7, lr}
 810bfc4:	b082      	sub	sp, #8
 810bfc6:	af00      	add	r7, sp, #0
 810bfc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810bfca:	687b      	ldr	r3, [r7, #4]
 810bfcc:	681b      	ldr	r3, [r3, #0]
 810bfce:	681a      	ldr	r2, [r3, #0]
 810bfd0:	687b      	ldr	r3, [r7, #4]
 810bfd2:	681b      	ldr	r3, [r3, #0]
 810bfd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810bfd8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810bfda:	687b      	ldr	r3, [r7, #4]
 810bfdc:	2220      	movs	r2, #32
 810bfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810bfe2:	687b      	ldr	r3, [r7, #4]
 810bfe4:	2200      	movs	r2, #0
 810bfe6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810bfe8:	6878      	ldr	r0, [r7, #4]
 810bfea:	f7f6 ffaf 	bl	8102f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810bfee:	bf00      	nop
 810bff0:	3708      	adds	r7, #8
 810bff2:	46bd      	mov	sp, r7
 810bff4:	bd80      	pop	{r7, pc}

0810bff6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810bff6:	b480      	push	{r7}
 810bff8:	b083      	sub	sp, #12
 810bffa:	af00      	add	r7, sp, #0
 810bffc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810bffe:	bf00      	nop
 810c000:	370c      	adds	r7, #12
 810c002:	46bd      	mov	sp, r7
 810c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c008:	4770      	bx	lr

0810c00a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810c00a:	b480      	push	{r7}
 810c00c:	b083      	sub	sp, #12
 810c00e:	af00      	add	r7, sp, #0
 810c010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810c012:	bf00      	nop
 810c014:	370c      	adds	r7, #12
 810c016:	46bd      	mov	sp, r7
 810c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c01c:	4770      	bx	lr

0810c01e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810c01e:	b480      	push	{r7}
 810c020:	b083      	sub	sp, #12
 810c022:	af00      	add	r7, sp, #0
 810c024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810c026:	bf00      	nop
 810c028:	370c      	adds	r7, #12
 810c02a:	46bd      	mov	sp, r7
 810c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c030:	4770      	bx	lr

0810c032 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c032:	b480      	push	{r7}
 810c034:	b085      	sub	sp, #20
 810c036:	af00      	add	r7, sp, #0
 810c038:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c03a:	687b      	ldr	r3, [r7, #4]
 810c03c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c040:	2b01      	cmp	r3, #1
 810c042:	d101      	bne.n	810c048 <HAL_UARTEx_DisableFifoMode+0x16>
 810c044:	2302      	movs	r3, #2
 810c046:	e027      	b.n	810c098 <HAL_UARTEx_DisableFifoMode+0x66>
 810c048:	687b      	ldr	r3, [r7, #4]
 810c04a:	2201      	movs	r2, #1
 810c04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c050:	687b      	ldr	r3, [r7, #4]
 810c052:	2224      	movs	r2, #36	; 0x24
 810c054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c058:	687b      	ldr	r3, [r7, #4]
 810c05a:	681b      	ldr	r3, [r3, #0]
 810c05c:	681b      	ldr	r3, [r3, #0]
 810c05e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c060:	687b      	ldr	r3, [r7, #4]
 810c062:	681b      	ldr	r3, [r3, #0]
 810c064:	681a      	ldr	r2, [r3, #0]
 810c066:	687b      	ldr	r3, [r7, #4]
 810c068:	681b      	ldr	r3, [r3, #0]
 810c06a:	f022 0201 	bic.w	r2, r2, #1
 810c06e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c070:	68fb      	ldr	r3, [r7, #12]
 810c072:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810c076:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c078:	687b      	ldr	r3, [r7, #4]
 810c07a:	2200      	movs	r2, #0
 810c07c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c07e:	687b      	ldr	r3, [r7, #4]
 810c080:	681b      	ldr	r3, [r3, #0]
 810c082:	68fa      	ldr	r2, [r7, #12]
 810c084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	2220      	movs	r2, #32
 810c08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c08e:	687b      	ldr	r3, [r7, #4]
 810c090:	2200      	movs	r2, #0
 810c092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c096:	2300      	movs	r3, #0
}
 810c098:	4618      	mov	r0, r3
 810c09a:	3714      	adds	r7, #20
 810c09c:	46bd      	mov	sp, r7
 810c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0a2:	4770      	bx	lr

0810c0a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c0a4:	b580      	push	{r7, lr}
 810c0a6:	b084      	sub	sp, #16
 810c0a8:	af00      	add	r7, sp, #0
 810c0aa:	6078      	str	r0, [r7, #4]
 810c0ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c0ae:	687b      	ldr	r3, [r7, #4]
 810c0b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c0b4:	2b01      	cmp	r3, #1
 810c0b6:	d101      	bne.n	810c0bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c0b8:	2302      	movs	r3, #2
 810c0ba:	e02d      	b.n	810c118 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c0bc:	687b      	ldr	r3, [r7, #4]
 810c0be:	2201      	movs	r2, #1
 810c0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c0c4:	687b      	ldr	r3, [r7, #4]
 810c0c6:	2224      	movs	r2, #36	; 0x24
 810c0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c0cc:	687b      	ldr	r3, [r7, #4]
 810c0ce:	681b      	ldr	r3, [r3, #0]
 810c0d0:	681b      	ldr	r3, [r3, #0]
 810c0d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c0d4:	687b      	ldr	r3, [r7, #4]
 810c0d6:	681b      	ldr	r3, [r3, #0]
 810c0d8:	681a      	ldr	r2, [r3, #0]
 810c0da:	687b      	ldr	r3, [r7, #4]
 810c0dc:	681b      	ldr	r3, [r3, #0]
 810c0de:	f022 0201 	bic.w	r2, r2, #1
 810c0e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c0e4:	687b      	ldr	r3, [r7, #4]
 810c0e6:	681b      	ldr	r3, [r3, #0]
 810c0e8:	689b      	ldr	r3, [r3, #8]
 810c0ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810c0ee:	687b      	ldr	r3, [r7, #4]
 810c0f0:	681b      	ldr	r3, [r3, #0]
 810c0f2:	683a      	ldr	r2, [r7, #0]
 810c0f4:	430a      	orrs	r2, r1
 810c0f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c0f8:	6878      	ldr	r0, [r7, #4]
 810c0fa:	f000 f84f 	bl	810c19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c0fe:	687b      	ldr	r3, [r7, #4]
 810c100:	681b      	ldr	r3, [r3, #0]
 810c102:	68fa      	ldr	r2, [r7, #12]
 810c104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c106:	687b      	ldr	r3, [r7, #4]
 810c108:	2220      	movs	r2, #32
 810c10a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c10e:	687b      	ldr	r3, [r7, #4]
 810c110:	2200      	movs	r2, #0
 810c112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c116:	2300      	movs	r3, #0
}
 810c118:	4618      	mov	r0, r3
 810c11a:	3710      	adds	r7, #16
 810c11c:	46bd      	mov	sp, r7
 810c11e:	bd80      	pop	{r7, pc}

0810c120 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c120:	b580      	push	{r7, lr}
 810c122:	b084      	sub	sp, #16
 810c124:	af00      	add	r7, sp, #0
 810c126:	6078      	str	r0, [r7, #4]
 810c128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c12a:	687b      	ldr	r3, [r7, #4]
 810c12c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c130:	2b01      	cmp	r3, #1
 810c132:	d101      	bne.n	810c138 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c134:	2302      	movs	r3, #2
 810c136:	e02d      	b.n	810c194 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c138:	687b      	ldr	r3, [r7, #4]
 810c13a:	2201      	movs	r2, #1
 810c13c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c140:	687b      	ldr	r3, [r7, #4]
 810c142:	2224      	movs	r2, #36	; 0x24
 810c144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c148:	687b      	ldr	r3, [r7, #4]
 810c14a:	681b      	ldr	r3, [r3, #0]
 810c14c:	681b      	ldr	r3, [r3, #0]
 810c14e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c150:	687b      	ldr	r3, [r7, #4]
 810c152:	681b      	ldr	r3, [r3, #0]
 810c154:	681a      	ldr	r2, [r3, #0]
 810c156:	687b      	ldr	r3, [r7, #4]
 810c158:	681b      	ldr	r3, [r3, #0]
 810c15a:	f022 0201 	bic.w	r2, r2, #1
 810c15e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	681b      	ldr	r3, [r3, #0]
 810c164:	689b      	ldr	r3, [r3, #8]
 810c166:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810c16a:	687b      	ldr	r3, [r7, #4]
 810c16c:	681b      	ldr	r3, [r3, #0]
 810c16e:	683a      	ldr	r2, [r7, #0]
 810c170:	430a      	orrs	r2, r1
 810c172:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c174:	6878      	ldr	r0, [r7, #4]
 810c176:	f000 f811 	bl	810c19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c17a:	687b      	ldr	r3, [r7, #4]
 810c17c:	681b      	ldr	r3, [r3, #0]
 810c17e:	68fa      	ldr	r2, [r7, #12]
 810c180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c182:	687b      	ldr	r3, [r7, #4]
 810c184:	2220      	movs	r2, #32
 810c186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c18a:	687b      	ldr	r3, [r7, #4]
 810c18c:	2200      	movs	r2, #0
 810c18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c192:	2300      	movs	r3, #0
}
 810c194:	4618      	mov	r0, r3
 810c196:	3710      	adds	r7, #16
 810c198:	46bd      	mov	sp, r7
 810c19a:	bd80      	pop	{r7, pc}

0810c19c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c19c:	b480      	push	{r7}
 810c19e:	b085      	sub	sp, #20
 810c1a0:	af00      	add	r7, sp, #0
 810c1a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c1a4:	687b      	ldr	r3, [r7, #4]
 810c1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c1a8:	2b00      	cmp	r3, #0
 810c1aa:	d108      	bne.n	810c1be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c1ac:	687b      	ldr	r3, [r7, #4]
 810c1ae:	2201      	movs	r2, #1
 810c1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810c1b4:	687b      	ldr	r3, [r7, #4]
 810c1b6:	2201      	movs	r2, #1
 810c1b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c1bc:	e031      	b.n	810c222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c1be:	2310      	movs	r3, #16
 810c1c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c1c2:	2310      	movs	r3, #16
 810c1c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c1c6:	687b      	ldr	r3, [r7, #4]
 810c1c8:	681b      	ldr	r3, [r3, #0]
 810c1ca:	689b      	ldr	r3, [r3, #8]
 810c1cc:	0e5b      	lsrs	r3, r3, #25
 810c1ce:	b2db      	uxtb	r3, r3
 810c1d0:	f003 0307 	and.w	r3, r3, #7
 810c1d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c1d6:	687b      	ldr	r3, [r7, #4]
 810c1d8:	681b      	ldr	r3, [r3, #0]
 810c1da:	689b      	ldr	r3, [r3, #8]
 810c1dc:	0f5b      	lsrs	r3, r3, #29
 810c1de:	b2db      	uxtb	r3, r3
 810c1e0:	f003 0307 	and.w	r3, r3, #7
 810c1e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c1e6:	7bbb      	ldrb	r3, [r7, #14]
 810c1e8:	7b3a      	ldrb	r2, [r7, #12]
 810c1ea:	4911      	ldr	r1, [pc, #68]	; (810c230 <UARTEx_SetNbDataToProcess+0x94>)
 810c1ec:	5c8a      	ldrb	r2, [r1, r2]
 810c1ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c1f2:	7b3a      	ldrb	r2, [r7, #12]
 810c1f4:	490f      	ldr	r1, [pc, #60]	; (810c234 <UARTEx_SetNbDataToProcess+0x98>)
 810c1f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 810c1fc:	b29a      	uxth	r2, r3
 810c1fe:	687b      	ldr	r3, [r7, #4]
 810c200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c204:	7bfb      	ldrb	r3, [r7, #15]
 810c206:	7b7a      	ldrb	r2, [r7, #13]
 810c208:	4909      	ldr	r1, [pc, #36]	; (810c230 <UARTEx_SetNbDataToProcess+0x94>)
 810c20a:	5c8a      	ldrb	r2, [r1, r2]
 810c20c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c210:	7b7a      	ldrb	r2, [r7, #13]
 810c212:	4908      	ldr	r1, [pc, #32]	; (810c234 <UARTEx_SetNbDataToProcess+0x98>)
 810c214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c216:	fb93 f3f2 	sdiv	r3, r3, r2
 810c21a:	b29a      	uxth	r2, r3
 810c21c:	687b      	ldr	r3, [r7, #4]
 810c21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810c222:	bf00      	nop
 810c224:	3714      	adds	r7, #20
 810c226:	46bd      	mov	sp, r7
 810c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c22c:	4770      	bx	lr
 810c22e:	bf00      	nop
 810c230:	0810d2dc 	.word	0x0810d2dc
 810c234:	0810d2e4 	.word	0x0810d2e4

0810c238 <__errno>:
 810c238:	4b01      	ldr	r3, [pc, #4]	; (810c240 <__errno+0x8>)
 810c23a:	6818      	ldr	r0, [r3, #0]
 810c23c:	4770      	bx	lr
 810c23e:	bf00      	nop
 810c240:	10000010 	.word	0x10000010

0810c244 <__libc_init_array>:
 810c244:	b570      	push	{r4, r5, r6, lr}
 810c246:	4d0d      	ldr	r5, [pc, #52]	; (810c27c <__libc_init_array+0x38>)
 810c248:	4c0d      	ldr	r4, [pc, #52]	; (810c280 <__libc_init_array+0x3c>)
 810c24a:	1b64      	subs	r4, r4, r5
 810c24c:	10a4      	asrs	r4, r4, #2
 810c24e:	2600      	movs	r6, #0
 810c250:	42a6      	cmp	r6, r4
 810c252:	d109      	bne.n	810c268 <__libc_init_array+0x24>
 810c254:	4d0b      	ldr	r5, [pc, #44]	; (810c284 <__libc_init_array+0x40>)
 810c256:	4c0c      	ldr	r4, [pc, #48]	; (810c288 <__libc_init_array+0x44>)
 810c258:	f000 ffd4 	bl	810d204 <_init>
 810c25c:	1b64      	subs	r4, r4, r5
 810c25e:	10a4      	asrs	r4, r4, #2
 810c260:	2600      	movs	r6, #0
 810c262:	42a6      	cmp	r6, r4
 810c264:	d105      	bne.n	810c272 <__libc_init_array+0x2e>
 810c266:	bd70      	pop	{r4, r5, r6, pc}
 810c268:	f855 3b04 	ldr.w	r3, [r5], #4
 810c26c:	4798      	blx	r3
 810c26e:	3601      	adds	r6, #1
 810c270:	e7ee      	b.n	810c250 <__libc_init_array+0xc>
 810c272:	f855 3b04 	ldr.w	r3, [r5], #4
 810c276:	4798      	blx	r3
 810c278:	3601      	adds	r6, #1
 810c27a:	e7f2      	b.n	810c262 <__libc_init_array+0x1e>
 810c27c:	0810d338 	.word	0x0810d338
 810c280:	0810d338 	.word	0x0810d338
 810c284:	0810d338 	.word	0x0810d338
 810c288:	0810d33c 	.word	0x0810d33c

0810c28c <memset>:
 810c28c:	4402      	add	r2, r0
 810c28e:	4603      	mov	r3, r0
 810c290:	4293      	cmp	r3, r2
 810c292:	d100      	bne.n	810c296 <memset+0xa>
 810c294:	4770      	bx	lr
 810c296:	f803 1b01 	strb.w	r1, [r3], #1
 810c29a:	e7f9      	b.n	810c290 <memset+0x4>

0810c29c <pow>:
 810c29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c2a0:	ec59 8b10 	vmov	r8, r9, d0
 810c2a4:	ec57 6b11 	vmov	r6, r7, d1
 810c2a8:	f000 f8a6 	bl	810c3f8 <__ieee754_pow>
 810c2ac:	4b4e      	ldr	r3, [pc, #312]	; (810c3e8 <pow+0x14c>)
 810c2ae:	f993 3000 	ldrsb.w	r3, [r3]
 810c2b2:	3301      	adds	r3, #1
 810c2b4:	ec55 4b10 	vmov	r4, r5, d0
 810c2b8:	d015      	beq.n	810c2e6 <pow+0x4a>
 810c2ba:	4632      	mov	r2, r6
 810c2bc:	463b      	mov	r3, r7
 810c2be:	4630      	mov	r0, r6
 810c2c0:	4639      	mov	r1, r7
 810c2c2:	f7f4 fc5f 	bl	8100b84 <__aeabi_dcmpun>
 810c2c6:	b970      	cbnz	r0, 810c2e6 <pow+0x4a>
 810c2c8:	4642      	mov	r2, r8
 810c2ca:	464b      	mov	r3, r9
 810c2cc:	4640      	mov	r0, r8
 810c2ce:	4649      	mov	r1, r9
 810c2d0:	f7f4 fc58 	bl	8100b84 <__aeabi_dcmpun>
 810c2d4:	2200      	movs	r2, #0
 810c2d6:	2300      	movs	r3, #0
 810c2d8:	b148      	cbz	r0, 810c2ee <pow+0x52>
 810c2da:	4630      	mov	r0, r6
 810c2dc:	4639      	mov	r1, r7
 810c2de:	f7f4 fc1f 	bl	8100b20 <__aeabi_dcmpeq>
 810c2e2:	2800      	cmp	r0, #0
 810c2e4:	d17d      	bne.n	810c3e2 <pow+0x146>
 810c2e6:	ec45 4b10 	vmov	d0, r4, r5
 810c2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c2ee:	4640      	mov	r0, r8
 810c2f0:	4649      	mov	r1, r9
 810c2f2:	f7f4 fc15 	bl	8100b20 <__aeabi_dcmpeq>
 810c2f6:	b1e0      	cbz	r0, 810c332 <pow+0x96>
 810c2f8:	2200      	movs	r2, #0
 810c2fa:	2300      	movs	r3, #0
 810c2fc:	4630      	mov	r0, r6
 810c2fe:	4639      	mov	r1, r7
 810c300:	f7f4 fc0e 	bl	8100b20 <__aeabi_dcmpeq>
 810c304:	2800      	cmp	r0, #0
 810c306:	d16c      	bne.n	810c3e2 <pow+0x146>
 810c308:	ec47 6b10 	vmov	d0, r6, r7
 810c30c:	f000 fe53 	bl	810cfb6 <finite>
 810c310:	2800      	cmp	r0, #0
 810c312:	d0e8      	beq.n	810c2e6 <pow+0x4a>
 810c314:	2200      	movs	r2, #0
 810c316:	2300      	movs	r3, #0
 810c318:	4630      	mov	r0, r6
 810c31a:	4639      	mov	r1, r7
 810c31c:	f7f4 fc0a 	bl	8100b34 <__aeabi_dcmplt>
 810c320:	2800      	cmp	r0, #0
 810c322:	d0e0      	beq.n	810c2e6 <pow+0x4a>
 810c324:	f7ff ff88 	bl	810c238 <__errno>
 810c328:	2321      	movs	r3, #33	; 0x21
 810c32a:	6003      	str	r3, [r0, #0]
 810c32c:	2400      	movs	r4, #0
 810c32e:	4d2f      	ldr	r5, [pc, #188]	; (810c3ec <pow+0x150>)
 810c330:	e7d9      	b.n	810c2e6 <pow+0x4a>
 810c332:	ec45 4b10 	vmov	d0, r4, r5
 810c336:	f000 fe3e 	bl	810cfb6 <finite>
 810c33a:	bbb8      	cbnz	r0, 810c3ac <pow+0x110>
 810c33c:	ec49 8b10 	vmov	d0, r8, r9
 810c340:	f000 fe39 	bl	810cfb6 <finite>
 810c344:	b390      	cbz	r0, 810c3ac <pow+0x110>
 810c346:	ec47 6b10 	vmov	d0, r6, r7
 810c34a:	f000 fe34 	bl	810cfb6 <finite>
 810c34e:	b368      	cbz	r0, 810c3ac <pow+0x110>
 810c350:	4622      	mov	r2, r4
 810c352:	462b      	mov	r3, r5
 810c354:	4620      	mov	r0, r4
 810c356:	4629      	mov	r1, r5
 810c358:	f7f4 fc14 	bl	8100b84 <__aeabi_dcmpun>
 810c35c:	b160      	cbz	r0, 810c378 <pow+0xdc>
 810c35e:	f7ff ff6b 	bl	810c238 <__errno>
 810c362:	2321      	movs	r3, #33	; 0x21
 810c364:	6003      	str	r3, [r0, #0]
 810c366:	2200      	movs	r2, #0
 810c368:	2300      	movs	r3, #0
 810c36a:	4610      	mov	r0, r2
 810c36c:	4619      	mov	r1, r3
 810c36e:	f7f4 fa99 	bl	81008a4 <__aeabi_ddiv>
 810c372:	4604      	mov	r4, r0
 810c374:	460d      	mov	r5, r1
 810c376:	e7b6      	b.n	810c2e6 <pow+0x4a>
 810c378:	f7ff ff5e 	bl	810c238 <__errno>
 810c37c:	2322      	movs	r3, #34	; 0x22
 810c37e:	6003      	str	r3, [r0, #0]
 810c380:	2200      	movs	r2, #0
 810c382:	2300      	movs	r3, #0
 810c384:	4640      	mov	r0, r8
 810c386:	4649      	mov	r1, r9
 810c388:	f7f4 fbd4 	bl	8100b34 <__aeabi_dcmplt>
 810c38c:	2400      	movs	r4, #0
 810c38e:	b158      	cbz	r0, 810c3a8 <pow+0x10c>
 810c390:	ec47 6b10 	vmov	d0, r6, r7
 810c394:	f000 fe24 	bl	810cfe0 <rint>
 810c398:	4632      	mov	r2, r6
 810c39a:	ec51 0b10 	vmov	r0, r1, d0
 810c39e:	463b      	mov	r3, r7
 810c3a0:	f7f4 fbbe 	bl	8100b20 <__aeabi_dcmpeq>
 810c3a4:	2800      	cmp	r0, #0
 810c3a6:	d0c2      	beq.n	810c32e <pow+0x92>
 810c3a8:	4d11      	ldr	r5, [pc, #68]	; (810c3f0 <pow+0x154>)
 810c3aa:	e79c      	b.n	810c2e6 <pow+0x4a>
 810c3ac:	2200      	movs	r2, #0
 810c3ae:	2300      	movs	r3, #0
 810c3b0:	4620      	mov	r0, r4
 810c3b2:	4629      	mov	r1, r5
 810c3b4:	f7f4 fbb4 	bl	8100b20 <__aeabi_dcmpeq>
 810c3b8:	2800      	cmp	r0, #0
 810c3ba:	d094      	beq.n	810c2e6 <pow+0x4a>
 810c3bc:	ec49 8b10 	vmov	d0, r8, r9
 810c3c0:	f000 fdf9 	bl	810cfb6 <finite>
 810c3c4:	2800      	cmp	r0, #0
 810c3c6:	d08e      	beq.n	810c2e6 <pow+0x4a>
 810c3c8:	ec47 6b10 	vmov	d0, r6, r7
 810c3cc:	f000 fdf3 	bl	810cfb6 <finite>
 810c3d0:	2800      	cmp	r0, #0
 810c3d2:	d088      	beq.n	810c2e6 <pow+0x4a>
 810c3d4:	f7ff ff30 	bl	810c238 <__errno>
 810c3d8:	2322      	movs	r3, #34	; 0x22
 810c3da:	6003      	str	r3, [r0, #0]
 810c3dc:	2400      	movs	r4, #0
 810c3de:	2500      	movs	r5, #0
 810c3e0:	e781      	b.n	810c2e6 <pow+0x4a>
 810c3e2:	4d04      	ldr	r5, [pc, #16]	; (810c3f4 <pow+0x158>)
 810c3e4:	2400      	movs	r4, #0
 810c3e6:	e77e      	b.n	810c2e6 <pow+0x4a>
 810c3e8:	10000074 	.word	0x10000074
 810c3ec:	fff00000 	.word	0xfff00000
 810c3f0:	7ff00000 	.word	0x7ff00000
 810c3f4:	3ff00000 	.word	0x3ff00000

0810c3f8 <__ieee754_pow>:
 810c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c3fc:	ed2d 8b06 	vpush	{d8-d10}
 810c400:	b08d      	sub	sp, #52	; 0x34
 810c402:	ed8d 1b02 	vstr	d1, [sp, #8]
 810c406:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810c40a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810c40e:	ea56 0100 	orrs.w	r1, r6, r0
 810c412:	ec53 2b10 	vmov	r2, r3, d0
 810c416:	f000 84d1 	beq.w	810cdbc <__ieee754_pow+0x9c4>
 810c41a:	497f      	ldr	r1, [pc, #508]	; (810c618 <__ieee754_pow+0x220>)
 810c41c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810c420:	428c      	cmp	r4, r1
 810c422:	ee10 8a10 	vmov	r8, s0
 810c426:	4699      	mov	r9, r3
 810c428:	dc09      	bgt.n	810c43e <__ieee754_pow+0x46>
 810c42a:	d103      	bne.n	810c434 <__ieee754_pow+0x3c>
 810c42c:	b97a      	cbnz	r2, 810c44e <__ieee754_pow+0x56>
 810c42e:	42a6      	cmp	r6, r4
 810c430:	dd02      	ble.n	810c438 <__ieee754_pow+0x40>
 810c432:	e00c      	b.n	810c44e <__ieee754_pow+0x56>
 810c434:	428e      	cmp	r6, r1
 810c436:	dc02      	bgt.n	810c43e <__ieee754_pow+0x46>
 810c438:	428e      	cmp	r6, r1
 810c43a:	d110      	bne.n	810c45e <__ieee754_pow+0x66>
 810c43c:	b178      	cbz	r0, 810c45e <__ieee754_pow+0x66>
 810c43e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c442:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c446:	ea54 0308 	orrs.w	r3, r4, r8
 810c44a:	f000 84b7 	beq.w	810cdbc <__ieee754_pow+0x9c4>
 810c44e:	4873      	ldr	r0, [pc, #460]	; (810c61c <__ieee754_pow+0x224>)
 810c450:	b00d      	add	sp, #52	; 0x34
 810c452:	ecbd 8b06 	vpop	{d8-d10}
 810c456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c45a:	f000 bdb9 	b.w	810cfd0 <nan>
 810c45e:	f1b9 0f00 	cmp.w	r9, #0
 810c462:	da36      	bge.n	810c4d2 <__ieee754_pow+0xda>
 810c464:	496e      	ldr	r1, [pc, #440]	; (810c620 <__ieee754_pow+0x228>)
 810c466:	428e      	cmp	r6, r1
 810c468:	dc51      	bgt.n	810c50e <__ieee754_pow+0x116>
 810c46a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810c46e:	428e      	cmp	r6, r1
 810c470:	f340 84af 	ble.w	810cdd2 <__ieee754_pow+0x9da>
 810c474:	1531      	asrs	r1, r6, #20
 810c476:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810c47a:	2914      	cmp	r1, #20
 810c47c:	dd0f      	ble.n	810c49e <__ieee754_pow+0xa6>
 810c47e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810c482:	fa20 fc01 	lsr.w	ip, r0, r1
 810c486:	fa0c f101 	lsl.w	r1, ip, r1
 810c48a:	4281      	cmp	r1, r0
 810c48c:	f040 84a1 	bne.w	810cdd2 <__ieee754_pow+0x9da>
 810c490:	f00c 0c01 	and.w	ip, ip, #1
 810c494:	f1cc 0102 	rsb	r1, ip, #2
 810c498:	9100      	str	r1, [sp, #0]
 810c49a:	b180      	cbz	r0, 810c4be <__ieee754_pow+0xc6>
 810c49c:	e059      	b.n	810c552 <__ieee754_pow+0x15a>
 810c49e:	2800      	cmp	r0, #0
 810c4a0:	d155      	bne.n	810c54e <__ieee754_pow+0x156>
 810c4a2:	f1c1 0114 	rsb	r1, r1, #20
 810c4a6:	fa46 fc01 	asr.w	ip, r6, r1
 810c4aa:	fa0c f101 	lsl.w	r1, ip, r1
 810c4ae:	42b1      	cmp	r1, r6
 810c4b0:	f040 848c 	bne.w	810cdcc <__ieee754_pow+0x9d4>
 810c4b4:	f00c 0c01 	and.w	ip, ip, #1
 810c4b8:	f1cc 0102 	rsb	r1, ip, #2
 810c4bc:	9100      	str	r1, [sp, #0]
 810c4be:	4959      	ldr	r1, [pc, #356]	; (810c624 <__ieee754_pow+0x22c>)
 810c4c0:	428e      	cmp	r6, r1
 810c4c2:	d12d      	bne.n	810c520 <__ieee754_pow+0x128>
 810c4c4:	2f00      	cmp	r7, #0
 810c4c6:	da79      	bge.n	810c5bc <__ieee754_pow+0x1c4>
 810c4c8:	4956      	ldr	r1, [pc, #344]	; (810c624 <__ieee754_pow+0x22c>)
 810c4ca:	2000      	movs	r0, #0
 810c4cc:	f7f4 f9ea 	bl	81008a4 <__aeabi_ddiv>
 810c4d0:	e016      	b.n	810c500 <__ieee754_pow+0x108>
 810c4d2:	2100      	movs	r1, #0
 810c4d4:	9100      	str	r1, [sp, #0]
 810c4d6:	2800      	cmp	r0, #0
 810c4d8:	d13b      	bne.n	810c552 <__ieee754_pow+0x15a>
 810c4da:	494f      	ldr	r1, [pc, #316]	; (810c618 <__ieee754_pow+0x220>)
 810c4dc:	428e      	cmp	r6, r1
 810c4de:	d1ee      	bne.n	810c4be <__ieee754_pow+0xc6>
 810c4e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810c4e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810c4e8:	ea53 0308 	orrs.w	r3, r3, r8
 810c4ec:	f000 8466 	beq.w	810cdbc <__ieee754_pow+0x9c4>
 810c4f0:	4b4d      	ldr	r3, [pc, #308]	; (810c628 <__ieee754_pow+0x230>)
 810c4f2:	429c      	cmp	r4, r3
 810c4f4:	dd0d      	ble.n	810c512 <__ieee754_pow+0x11a>
 810c4f6:	2f00      	cmp	r7, #0
 810c4f8:	f280 8464 	bge.w	810cdc4 <__ieee754_pow+0x9cc>
 810c4fc:	2000      	movs	r0, #0
 810c4fe:	2100      	movs	r1, #0
 810c500:	ec41 0b10 	vmov	d0, r0, r1
 810c504:	b00d      	add	sp, #52	; 0x34
 810c506:	ecbd 8b06 	vpop	{d8-d10}
 810c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c50e:	2102      	movs	r1, #2
 810c510:	e7e0      	b.n	810c4d4 <__ieee754_pow+0xdc>
 810c512:	2f00      	cmp	r7, #0
 810c514:	daf2      	bge.n	810c4fc <__ieee754_pow+0x104>
 810c516:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810c51a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810c51e:	e7ef      	b.n	810c500 <__ieee754_pow+0x108>
 810c520:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810c524:	d104      	bne.n	810c530 <__ieee754_pow+0x138>
 810c526:	4610      	mov	r0, r2
 810c528:	4619      	mov	r1, r3
 810c52a:	f7f4 f891 	bl	8100650 <__aeabi_dmul>
 810c52e:	e7e7      	b.n	810c500 <__ieee754_pow+0x108>
 810c530:	493e      	ldr	r1, [pc, #248]	; (810c62c <__ieee754_pow+0x234>)
 810c532:	428f      	cmp	r7, r1
 810c534:	d10d      	bne.n	810c552 <__ieee754_pow+0x15a>
 810c536:	f1b9 0f00 	cmp.w	r9, #0
 810c53a:	db0a      	blt.n	810c552 <__ieee754_pow+0x15a>
 810c53c:	ec43 2b10 	vmov	d0, r2, r3
 810c540:	b00d      	add	sp, #52	; 0x34
 810c542:	ecbd 8b06 	vpop	{d8-d10}
 810c546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c54a:	f000 bc77 	b.w	810ce3c <__ieee754_sqrt>
 810c54e:	2100      	movs	r1, #0
 810c550:	9100      	str	r1, [sp, #0]
 810c552:	ec43 2b10 	vmov	d0, r2, r3
 810c556:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c55a:	f000 fd23 	bl	810cfa4 <fabs>
 810c55e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c562:	ec51 0b10 	vmov	r0, r1, d0
 810c566:	f1b8 0f00 	cmp.w	r8, #0
 810c56a:	d12a      	bne.n	810c5c2 <__ieee754_pow+0x1ca>
 810c56c:	b12c      	cbz	r4, 810c57a <__ieee754_pow+0x182>
 810c56e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810c624 <__ieee754_pow+0x22c>
 810c572:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810c576:	45e6      	cmp	lr, ip
 810c578:	d123      	bne.n	810c5c2 <__ieee754_pow+0x1ca>
 810c57a:	2f00      	cmp	r7, #0
 810c57c:	da05      	bge.n	810c58a <__ieee754_pow+0x192>
 810c57e:	4602      	mov	r2, r0
 810c580:	460b      	mov	r3, r1
 810c582:	2000      	movs	r0, #0
 810c584:	4927      	ldr	r1, [pc, #156]	; (810c624 <__ieee754_pow+0x22c>)
 810c586:	f7f4 f98d 	bl	81008a4 <__aeabi_ddiv>
 810c58a:	f1b9 0f00 	cmp.w	r9, #0
 810c58e:	dab7      	bge.n	810c500 <__ieee754_pow+0x108>
 810c590:	9b00      	ldr	r3, [sp, #0]
 810c592:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c596:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c59a:	4323      	orrs	r3, r4
 810c59c:	d108      	bne.n	810c5b0 <__ieee754_pow+0x1b8>
 810c59e:	4602      	mov	r2, r0
 810c5a0:	460b      	mov	r3, r1
 810c5a2:	4610      	mov	r0, r2
 810c5a4:	4619      	mov	r1, r3
 810c5a6:	f7f3 fe9b 	bl	81002e0 <__aeabi_dsub>
 810c5aa:	4602      	mov	r2, r0
 810c5ac:	460b      	mov	r3, r1
 810c5ae:	e78d      	b.n	810c4cc <__ieee754_pow+0xd4>
 810c5b0:	9b00      	ldr	r3, [sp, #0]
 810c5b2:	2b01      	cmp	r3, #1
 810c5b4:	d1a4      	bne.n	810c500 <__ieee754_pow+0x108>
 810c5b6:	4602      	mov	r2, r0
 810c5b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c5bc:	4610      	mov	r0, r2
 810c5be:	4619      	mov	r1, r3
 810c5c0:	e79e      	b.n	810c500 <__ieee754_pow+0x108>
 810c5c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810c5c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 810c5ca:	950a      	str	r5, [sp, #40]	; 0x28
 810c5cc:	9d00      	ldr	r5, [sp, #0]
 810c5ce:	46ac      	mov	ip, r5
 810c5d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810c5d2:	ea5c 0505 	orrs.w	r5, ip, r5
 810c5d6:	d0e4      	beq.n	810c5a2 <__ieee754_pow+0x1aa>
 810c5d8:	4b15      	ldr	r3, [pc, #84]	; (810c630 <__ieee754_pow+0x238>)
 810c5da:	429e      	cmp	r6, r3
 810c5dc:	f340 80fc 	ble.w	810c7d8 <__ieee754_pow+0x3e0>
 810c5e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810c5e4:	429e      	cmp	r6, r3
 810c5e6:	4b10      	ldr	r3, [pc, #64]	; (810c628 <__ieee754_pow+0x230>)
 810c5e8:	dd07      	ble.n	810c5fa <__ieee754_pow+0x202>
 810c5ea:	429c      	cmp	r4, r3
 810c5ec:	dc0a      	bgt.n	810c604 <__ieee754_pow+0x20c>
 810c5ee:	2f00      	cmp	r7, #0
 810c5f0:	da84      	bge.n	810c4fc <__ieee754_pow+0x104>
 810c5f2:	a307      	add	r3, pc, #28	; (adr r3, 810c610 <__ieee754_pow+0x218>)
 810c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c5f8:	e795      	b.n	810c526 <__ieee754_pow+0x12e>
 810c5fa:	429c      	cmp	r4, r3
 810c5fc:	dbf7      	blt.n	810c5ee <__ieee754_pow+0x1f6>
 810c5fe:	4b09      	ldr	r3, [pc, #36]	; (810c624 <__ieee754_pow+0x22c>)
 810c600:	429c      	cmp	r4, r3
 810c602:	dd17      	ble.n	810c634 <__ieee754_pow+0x23c>
 810c604:	2f00      	cmp	r7, #0
 810c606:	dcf4      	bgt.n	810c5f2 <__ieee754_pow+0x1fa>
 810c608:	e778      	b.n	810c4fc <__ieee754_pow+0x104>
 810c60a:	bf00      	nop
 810c60c:	f3af 8000 	nop.w
 810c610:	8800759c 	.word	0x8800759c
 810c614:	7e37e43c 	.word	0x7e37e43c
 810c618:	7ff00000 	.word	0x7ff00000
 810c61c:	0810d2ec 	.word	0x0810d2ec
 810c620:	433fffff 	.word	0x433fffff
 810c624:	3ff00000 	.word	0x3ff00000
 810c628:	3fefffff 	.word	0x3fefffff
 810c62c:	3fe00000 	.word	0x3fe00000
 810c630:	41e00000 	.word	0x41e00000
 810c634:	4b64      	ldr	r3, [pc, #400]	; (810c7c8 <__ieee754_pow+0x3d0>)
 810c636:	2200      	movs	r2, #0
 810c638:	f7f3 fe52 	bl	81002e0 <__aeabi_dsub>
 810c63c:	a356      	add	r3, pc, #344	; (adr r3, 810c798 <__ieee754_pow+0x3a0>)
 810c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c642:	4604      	mov	r4, r0
 810c644:	460d      	mov	r5, r1
 810c646:	f7f4 f803 	bl	8100650 <__aeabi_dmul>
 810c64a:	a355      	add	r3, pc, #340	; (adr r3, 810c7a0 <__ieee754_pow+0x3a8>)
 810c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c650:	4606      	mov	r6, r0
 810c652:	460f      	mov	r7, r1
 810c654:	4620      	mov	r0, r4
 810c656:	4629      	mov	r1, r5
 810c658:	f7f3 fffa 	bl	8100650 <__aeabi_dmul>
 810c65c:	4b5b      	ldr	r3, [pc, #364]	; (810c7cc <__ieee754_pow+0x3d4>)
 810c65e:	4682      	mov	sl, r0
 810c660:	468b      	mov	fp, r1
 810c662:	2200      	movs	r2, #0
 810c664:	4620      	mov	r0, r4
 810c666:	4629      	mov	r1, r5
 810c668:	f7f3 fff2 	bl	8100650 <__aeabi_dmul>
 810c66c:	4602      	mov	r2, r0
 810c66e:	460b      	mov	r3, r1
 810c670:	a14d      	add	r1, pc, #308	; (adr r1, 810c7a8 <__ieee754_pow+0x3b0>)
 810c672:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c676:	f7f3 fe33 	bl	81002e0 <__aeabi_dsub>
 810c67a:	4622      	mov	r2, r4
 810c67c:	462b      	mov	r3, r5
 810c67e:	f7f3 ffe7 	bl	8100650 <__aeabi_dmul>
 810c682:	4602      	mov	r2, r0
 810c684:	460b      	mov	r3, r1
 810c686:	2000      	movs	r0, #0
 810c688:	4951      	ldr	r1, [pc, #324]	; (810c7d0 <__ieee754_pow+0x3d8>)
 810c68a:	f7f3 fe29 	bl	81002e0 <__aeabi_dsub>
 810c68e:	4622      	mov	r2, r4
 810c690:	4680      	mov	r8, r0
 810c692:	4689      	mov	r9, r1
 810c694:	462b      	mov	r3, r5
 810c696:	4620      	mov	r0, r4
 810c698:	4629      	mov	r1, r5
 810c69a:	f7f3 ffd9 	bl	8100650 <__aeabi_dmul>
 810c69e:	4602      	mov	r2, r0
 810c6a0:	460b      	mov	r3, r1
 810c6a2:	4640      	mov	r0, r8
 810c6a4:	4649      	mov	r1, r9
 810c6a6:	f7f3 ffd3 	bl	8100650 <__aeabi_dmul>
 810c6aa:	a341      	add	r3, pc, #260	; (adr r3, 810c7b0 <__ieee754_pow+0x3b8>)
 810c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c6b0:	f7f3 ffce 	bl	8100650 <__aeabi_dmul>
 810c6b4:	4602      	mov	r2, r0
 810c6b6:	460b      	mov	r3, r1
 810c6b8:	4650      	mov	r0, sl
 810c6ba:	4659      	mov	r1, fp
 810c6bc:	f7f3 fe10 	bl	81002e0 <__aeabi_dsub>
 810c6c0:	4602      	mov	r2, r0
 810c6c2:	460b      	mov	r3, r1
 810c6c4:	4680      	mov	r8, r0
 810c6c6:	4689      	mov	r9, r1
 810c6c8:	4630      	mov	r0, r6
 810c6ca:	4639      	mov	r1, r7
 810c6cc:	f7f3 fe0a 	bl	81002e4 <__adddf3>
 810c6d0:	2400      	movs	r4, #0
 810c6d2:	4632      	mov	r2, r6
 810c6d4:	463b      	mov	r3, r7
 810c6d6:	4620      	mov	r0, r4
 810c6d8:	460d      	mov	r5, r1
 810c6da:	f7f3 fe01 	bl	81002e0 <__aeabi_dsub>
 810c6de:	4602      	mov	r2, r0
 810c6e0:	460b      	mov	r3, r1
 810c6e2:	4640      	mov	r0, r8
 810c6e4:	4649      	mov	r1, r9
 810c6e6:	f7f3 fdfb 	bl	81002e0 <__aeabi_dsub>
 810c6ea:	9b00      	ldr	r3, [sp, #0]
 810c6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c6ee:	3b01      	subs	r3, #1
 810c6f0:	4313      	orrs	r3, r2
 810c6f2:	4682      	mov	sl, r0
 810c6f4:	468b      	mov	fp, r1
 810c6f6:	f040 81f1 	bne.w	810cadc <__ieee754_pow+0x6e4>
 810c6fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810c7b8 <__ieee754_pow+0x3c0>
 810c6fe:	eeb0 8a47 	vmov.f32	s16, s14
 810c702:	eef0 8a67 	vmov.f32	s17, s15
 810c706:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c70a:	2600      	movs	r6, #0
 810c70c:	4632      	mov	r2, r6
 810c70e:	463b      	mov	r3, r7
 810c710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c714:	f7f3 fde4 	bl	81002e0 <__aeabi_dsub>
 810c718:	4622      	mov	r2, r4
 810c71a:	462b      	mov	r3, r5
 810c71c:	f7f3 ff98 	bl	8100650 <__aeabi_dmul>
 810c720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c724:	4680      	mov	r8, r0
 810c726:	4689      	mov	r9, r1
 810c728:	4650      	mov	r0, sl
 810c72a:	4659      	mov	r1, fp
 810c72c:	f7f3 ff90 	bl	8100650 <__aeabi_dmul>
 810c730:	4602      	mov	r2, r0
 810c732:	460b      	mov	r3, r1
 810c734:	4640      	mov	r0, r8
 810c736:	4649      	mov	r1, r9
 810c738:	f7f3 fdd4 	bl	81002e4 <__adddf3>
 810c73c:	4632      	mov	r2, r6
 810c73e:	463b      	mov	r3, r7
 810c740:	4680      	mov	r8, r0
 810c742:	4689      	mov	r9, r1
 810c744:	4620      	mov	r0, r4
 810c746:	4629      	mov	r1, r5
 810c748:	f7f3 ff82 	bl	8100650 <__aeabi_dmul>
 810c74c:	460b      	mov	r3, r1
 810c74e:	4604      	mov	r4, r0
 810c750:	460d      	mov	r5, r1
 810c752:	4602      	mov	r2, r0
 810c754:	4649      	mov	r1, r9
 810c756:	4640      	mov	r0, r8
 810c758:	f7f3 fdc4 	bl	81002e4 <__adddf3>
 810c75c:	4b1d      	ldr	r3, [pc, #116]	; (810c7d4 <__ieee754_pow+0x3dc>)
 810c75e:	4299      	cmp	r1, r3
 810c760:	ec45 4b19 	vmov	d9, r4, r5
 810c764:	4606      	mov	r6, r0
 810c766:	460f      	mov	r7, r1
 810c768:	468b      	mov	fp, r1
 810c76a:	f340 82fe 	ble.w	810cd6a <__ieee754_pow+0x972>
 810c76e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810c772:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810c776:	4303      	orrs	r3, r0
 810c778:	f000 81f0 	beq.w	810cb5c <__ieee754_pow+0x764>
 810c77c:	a310      	add	r3, pc, #64	; (adr r3, 810c7c0 <__ieee754_pow+0x3c8>)
 810c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c782:	ec51 0b18 	vmov	r0, r1, d8
 810c786:	f7f3 ff63 	bl	8100650 <__aeabi_dmul>
 810c78a:	a30d      	add	r3, pc, #52	; (adr r3, 810c7c0 <__ieee754_pow+0x3c8>)
 810c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c790:	e6cb      	b.n	810c52a <__ieee754_pow+0x132>
 810c792:	bf00      	nop
 810c794:	f3af 8000 	nop.w
 810c798:	60000000 	.word	0x60000000
 810c79c:	3ff71547 	.word	0x3ff71547
 810c7a0:	f85ddf44 	.word	0xf85ddf44
 810c7a4:	3e54ae0b 	.word	0x3e54ae0b
 810c7a8:	55555555 	.word	0x55555555
 810c7ac:	3fd55555 	.word	0x3fd55555
 810c7b0:	652b82fe 	.word	0x652b82fe
 810c7b4:	3ff71547 	.word	0x3ff71547
 810c7b8:	00000000 	.word	0x00000000
 810c7bc:	bff00000 	.word	0xbff00000
 810c7c0:	8800759c 	.word	0x8800759c
 810c7c4:	7e37e43c 	.word	0x7e37e43c
 810c7c8:	3ff00000 	.word	0x3ff00000
 810c7cc:	3fd00000 	.word	0x3fd00000
 810c7d0:	3fe00000 	.word	0x3fe00000
 810c7d4:	408fffff 	.word	0x408fffff
 810c7d8:	4bd7      	ldr	r3, [pc, #860]	; (810cb38 <__ieee754_pow+0x740>)
 810c7da:	ea03 0309 	and.w	r3, r3, r9
 810c7de:	2200      	movs	r2, #0
 810c7e0:	b92b      	cbnz	r3, 810c7ee <__ieee754_pow+0x3f6>
 810c7e2:	4bd6      	ldr	r3, [pc, #856]	; (810cb3c <__ieee754_pow+0x744>)
 810c7e4:	f7f3 ff34 	bl	8100650 <__aeabi_dmul>
 810c7e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810c7ec:	460c      	mov	r4, r1
 810c7ee:	1523      	asrs	r3, r4, #20
 810c7f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810c7f4:	4413      	add	r3, r2
 810c7f6:	9309      	str	r3, [sp, #36]	; 0x24
 810c7f8:	4bd1      	ldr	r3, [pc, #836]	; (810cb40 <__ieee754_pow+0x748>)
 810c7fa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810c7fe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810c802:	429c      	cmp	r4, r3
 810c804:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810c808:	dd08      	ble.n	810c81c <__ieee754_pow+0x424>
 810c80a:	4bce      	ldr	r3, [pc, #824]	; (810cb44 <__ieee754_pow+0x74c>)
 810c80c:	429c      	cmp	r4, r3
 810c80e:	f340 8163 	ble.w	810cad8 <__ieee754_pow+0x6e0>
 810c812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c814:	3301      	adds	r3, #1
 810c816:	9309      	str	r3, [sp, #36]	; 0x24
 810c818:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810c81c:	2400      	movs	r4, #0
 810c81e:	00e3      	lsls	r3, r4, #3
 810c820:	930b      	str	r3, [sp, #44]	; 0x2c
 810c822:	4bc9      	ldr	r3, [pc, #804]	; (810cb48 <__ieee754_pow+0x750>)
 810c824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c828:	ed93 7b00 	vldr	d7, [r3]
 810c82c:	4629      	mov	r1, r5
 810c82e:	ec53 2b17 	vmov	r2, r3, d7
 810c832:	eeb0 8a47 	vmov.f32	s16, s14
 810c836:	eef0 8a67 	vmov.f32	s17, s15
 810c83a:	4682      	mov	sl, r0
 810c83c:	f7f3 fd50 	bl	81002e0 <__aeabi_dsub>
 810c840:	4652      	mov	r2, sl
 810c842:	4606      	mov	r6, r0
 810c844:	460f      	mov	r7, r1
 810c846:	462b      	mov	r3, r5
 810c848:	ec51 0b18 	vmov	r0, r1, d8
 810c84c:	f7f3 fd4a 	bl	81002e4 <__adddf3>
 810c850:	4602      	mov	r2, r0
 810c852:	460b      	mov	r3, r1
 810c854:	2000      	movs	r0, #0
 810c856:	49bd      	ldr	r1, [pc, #756]	; (810cb4c <__ieee754_pow+0x754>)
 810c858:	f7f4 f824 	bl	81008a4 <__aeabi_ddiv>
 810c85c:	ec41 0b19 	vmov	d9, r0, r1
 810c860:	4602      	mov	r2, r0
 810c862:	460b      	mov	r3, r1
 810c864:	4630      	mov	r0, r6
 810c866:	4639      	mov	r1, r7
 810c868:	f7f3 fef2 	bl	8100650 <__aeabi_dmul>
 810c86c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810c870:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c874:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c878:	2300      	movs	r3, #0
 810c87a:	9304      	str	r3, [sp, #16]
 810c87c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810c880:	46ab      	mov	fp, r5
 810c882:	106d      	asrs	r5, r5, #1
 810c884:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810c888:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810c88c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810c890:	2200      	movs	r2, #0
 810c892:	4640      	mov	r0, r8
 810c894:	4649      	mov	r1, r9
 810c896:	4614      	mov	r4, r2
 810c898:	461d      	mov	r5, r3
 810c89a:	f7f3 fed9 	bl	8100650 <__aeabi_dmul>
 810c89e:	4602      	mov	r2, r0
 810c8a0:	460b      	mov	r3, r1
 810c8a2:	4630      	mov	r0, r6
 810c8a4:	4639      	mov	r1, r7
 810c8a6:	f7f3 fd1b 	bl	81002e0 <__aeabi_dsub>
 810c8aa:	ec53 2b18 	vmov	r2, r3, d8
 810c8ae:	4606      	mov	r6, r0
 810c8b0:	460f      	mov	r7, r1
 810c8b2:	4620      	mov	r0, r4
 810c8b4:	4629      	mov	r1, r5
 810c8b6:	f7f3 fd13 	bl	81002e0 <__aeabi_dsub>
 810c8ba:	4602      	mov	r2, r0
 810c8bc:	460b      	mov	r3, r1
 810c8be:	4650      	mov	r0, sl
 810c8c0:	4659      	mov	r1, fp
 810c8c2:	f7f3 fd0d 	bl	81002e0 <__aeabi_dsub>
 810c8c6:	4642      	mov	r2, r8
 810c8c8:	464b      	mov	r3, r9
 810c8ca:	f7f3 fec1 	bl	8100650 <__aeabi_dmul>
 810c8ce:	4602      	mov	r2, r0
 810c8d0:	460b      	mov	r3, r1
 810c8d2:	4630      	mov	r0, r6
 810c8d4:	4639      	mov	r1, r7
 810c8d6:	f7f3 fd03 	bl	81002e0 <__aeabi_dsub>
 810c8da:	ec53 2b19 	vmov	r2, r3, d9
 810c8de:	f7f3 feb7 	bl	8100650 <__aeabi_dmul>
 810c8e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c8e6:	ec41 0b18 	vmov	d8, r0, r1
 810c8ea:	4610      	mov	r0, r2
 810c8ec:	4619      	mov	r1, r3
 810c8ee:	f7f3 feaf 	bl	8100650 <__aeabi_dmul>
 810c8f2:	a37d      	add	r3, pc, #500	; (adr r3, 810cae8 <__ieee754_pow+0x6f0>)
 810c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8f8:	4604      	mov	r4, r0
 810c8fa:	460d      	mov	r5, r1
 810c8fc:	f7f3 fea8 	bl	8100650 <__aeabi_dmul>
 810c900:	a37b      	add	r3, pc, #492	; (adr r3, 810caf0 <__ieee754_pow+0x6f8>)
 810c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c906:	f7f3 fced 	bl	81002e4 <__adddf3>
 810c90a:	4622      	mov	r2, r4
 810c90c:	462b      	mov	r3, r5
 810c90e:	f7f3 fe9f 	bl	8100650 <__aeabi_dmul>
 810c912:	a379      	add	r3, pc, #484	; (adr r3, 810caf8 <__ieee754_pow+0x700>)
 810c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c918:	f7f3 fce4 	bl	81002e4 <__adddf3>
 810c91c:	4622      	mov	r2, r4
 810c91e:	462b      	mov	r3, r5
 810c920:	f7f3 fe96 	bl	8100650 <__aeabi_dmul>
 810c924:	a376      	add	r3, pc, #472	; (adr r3, 810cb00 <__ieee754_pow+0x708>)
 810c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c92a:	f7f3 fcdb 	bl	81002e4 <__adddf3>
 810c92e:	4622      	mov	r2, r4
 810c930:	462b      	mov	r3, r5
 810c932:	f7f3 fe8d 	bl	8100650 <__aeabi_dmul>
 810c936:	a374      	add	r3, pc, #464	; (adr r3, 810cb08 <__ieee754_pow+0x710>)
 810c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c93c:	f7f3 fcd2 	bl	81002e4 <__adddf3>
 810c940:	4622      	mov	r2, r4
 810c942:	462b      	mov	r3, r5
 810c944:	f7f3 fe84 	bl	8100650 <__aeabi_dmul>
 810c948:	a371      	add	r3, pc, #452	; (adr r3, 810cb10 <__ieee754_pow+0x718>)
 810c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c94e:	f7f3 fcc9 	bl	81002e4 <__adddf3>
 810c952:	4622      	mov	r2, r4
 810c954:	4606      	mov	r6, r0
 810c956:	460f      	mov	r7, r1
 810c958:	462b      	mov	r3, r5
 810c95a:	4620      	mov	r0, r4
 810c95c:	4629      	mov	r1, r5
 810c95e:	f7f3 fe77 	bl	8100650 <__aeabi_dmul>
 810c962:	4602      	mov	r2, r0
 810c964:	460b      	mov	r3, r1
 810c966:	4630      	mov	r0, r6
 810c968:	4639      	mov	r1, r7
 810c96a:	f7f3 fe71 	bl	8100650 <__aeabi_dmul>
 810c96e:	4642      	mov	r2, r8
 810c970:	4604      	mov	r4, r0
 810c972:	460d      	mov	r5, r1
 810c974:	464b      	mov	r3, r9
 810c976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c97a:	f7f3 fcb3 	bl	81002e4 <__adddf3>
 810c97e:	ec53 2b18 	vmov	r2, r3, d8
 810c982:	f7f3 fe65 	bl	8100650 <__aeabi_dmul>
 810c986:	4622      	mov	r2, r4
 810c988:	462b      	mov	r3, r5
 810c98a:	f7f3 fcab 	bl	81002e4 <__adddf3>
 810c98e:	4642      	mov	r2, r8
 810c990:	4682      	mov	sl, r0
 810c992:	468b      	mov	fp, r1
 810c994:	464b      	mov	r3, r9
 810c996:	4640      	mov	r0, r8
 810c998:	4649      	mov	r1, r9
 810c99a:	f7f3 fe59 	bl	8100650 <__aeabi_dmul>
 810c99e:	4b6c      	ldr	r3, [pc, #432]	; (810cb50 <__ieee754_pow+0x758>)
 810c9a0:	2200      	movs	r2, #0
 810c9a2:	4606      	mov	r6, r0
 810c9a4:	460f      	mov	r7, r1
 810c9a6:	f7f3 fc9d 	bl	81002e4 <__adddf3>
 810c9aa:	4652      	mov	r2, sl
 810c9ac:	465b      	mov	r3, fp
 810c9ae:	f7f3 fc99 	bl	81002e4 <__adddf3>
 810c9b2:	9c04      	ldr	r4, [sp, #16]
 810c9b4:	460d      	mov	r5, r1
 810c9b6:	4622      	mov	r2, r4
 810c9b8:	460b      	mov	r3, r1
 810c9ba:	4640      	mov	r0, r8
 810c9bc:	4649      	mov	r1, r9
 810c9be:	f7f3 fe47 	bl	8100650 <__aeabi_dmul>
 810c9c2:	4b63      	ldr	r3, [pc, #396]	; (810cb50 <__ieee754_pow+0x758>)
 810c9c4:	4680      	mov	r8, r0
 810c9c6:	4689      	mov	r9, r1
 810c9c8:	2200      	movs	r2, #0
 810c9ca:	4620      	mov	r0, r4
 810c9cc:	4629      	mov	r1, r5
 810c9ce:	f7f3 fc87 	bl	81002e0 <__aeabi_dsub>
 810c9d2:	4632      	mov	r2, r6
 810c9d4:	463b      	mov	r3, r7
 810c9d6:	f7f3 fc83 	bl	81002e0 <__aeabi_dsub>
 810c9da:	4602      	mov	r2, r0
 810c9dc:	460b      	mov	r3, r1
 810c9de:	4650      	mov	r0, sl
 810c9e0:	4659      	mov	r1, fp
 810c9e2:	f7f3 fc7d 	bl	81002e0 <__aeabi_dsub>
 810c9e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c9ea:	f7f3 fe31 	bl	8100650 <__aeabi_dmul>
 810c9ee:	4622      	mov	r2, r4
 810c9f0:	4606      	mov	r6, r0
 810c9f2:	460f      	mov	r7, r1
 810c9f4:	462b      	mov	r3, r5
 810c9f6:	ec51 0b18 	vmov	r0, r1, d8
 810c9fa:	f7f3 fe29 	bl	8100650 <__aeabi_dmul>
 810c9fe:	4602      	mov	r2, r0
 810ca00:	460b      	mov	r3, r1
 810ca02:	4630      	mov	r0, r6
 810ca04:	4639      	mov	r1, r7
 810ca06:	f7f3 fc6d 	bl	81002e4 <__adddf3>
 810ca0a:	4606      	mov	r6, r0
 810ca0c:	460f      	mov	r7, r1
 810ca0e:	4602      	mov	r2, r0
 810ca10:	460b      	mov	r3, r1
 810ca12:	4640      	mov	r0, r8
 810ca14:	4649      	mov	r1, r9
 810ca16:	f7f3 fc65 	bl	81002e4 <__adddf3>
 810ca1a:	9c04      	ldr	r4, [sp, #16]
 810ca1c:	a33e      	add	r3, pc, #248	; (adr r3, 810cb18 <__ieee754_pow+0x720>)
 810ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca22:	4620      	mov	r0, r4
 810ca24:	460d      	mov	r5, r1
 810ca26:	f7f3 fe13 	bl	8100650 <__aeabi_dmul>
 810ca2a:	4642      	mov	r2, r8
 810ca2c:	ec41 0b18 	vmov	d8, r0, r1
 810ca30:	464b      	mov	r3, r9
 810ca32:	4620      	mov	r0, r4
 810ca34:	4629      	mov	r1, r5
 810ca36:	f7f3 fc53 	bl	81002e0 <__aeabi_dsub>
 810ca3a:	4602      	mov	r2, r0
 810ca3c:	460b      	mov	r3, r1
 810ca3e:	4630      	mov	r0, r6
 810ca40:	4639      	mov	r1, r7
 810ca42:	f7f3 fc4d 	bl	81002e0 <__aeabi_dsub>
 810ca46:	a336      	add	r3, pc, #216	; (adr r3, 810cb20 <__ieee754_pow+0x728>)
 810ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca4c:	f7f3 fe00 	bl	8100650 <__aeabi_dmul>
 810ca50:	a335      	add	r3, pc, #212	; (adr r3, 810cb28 <__ieee754_pow+0x730>)
 810ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca56:	4606      	mov	r6, r0
 810ca58:	460f      	mov	r7, r1
 810ca5a:	4620      	mov	r0, r4
 810ca5c:	4629      	mov	r1, r5
 810ca5e:	f7f3 fdf7 	bl	8100650 <__aeabi_dmul>
 810ca62:	4602      	mov	r2, r0
 810ca64:	460b      	mov	r3, r1
 810ca66:	4630      	mov	r0, r6
 810ca68:	4639      	mov	r1, r7
 810ca6a:	f7f3 fc3b 	bl	81002e4 <__adddf3>
 810ca6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ca70:	4b38      	ldr	r3, [pc, #224]	; (810cb54 <__ieee754_pow+0x75c>)
 810ca72:	4413      	add	r3, r2
 810ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca78:	f7f3 fc34 	bl	81002e4 <__adddf3>
 810ca7c:	4682      	mov	sl, r0
 810ca7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810ca80:	468b      	mov	fp, r1
 810ca82:	f7f3 fd7b 	bl	810057c <__aeabi_i2d>
 810ca86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ca88:	4b33      	ldr	r3, [pc, #204]	; (810cb58 <__ieee754_pow+0x760>)
 810ca8a:	4413      	add	r3, r2
 810ca8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810ca90:	4606      	mov	r6, r0
 810ca92:	460f      	mov	r7, r1
 810ca94:	4652      	mov	r2, sl
 810ca96:	465b      	mov	r3, fp
 810ca98:	ec51 0b18 	vmov	r0, r1, d8
 810ca9c:	f7f3 fc22 	bl	81002e4 <__adddf3>
 810caa0:	4642      	mov	r2, r8
 810caa2:	464b      	mov	r3, r9
 810caa4:	f7f3 fc1e 	bl	81002e4 <__adddf3>
 810caa8:	4632      	mov	r2, r6
 810caaa:	463b      	mov	r3, r7
 810caac:	f7f3 fc1a 	bl	81002e4 <__adddf3>
 810cab0:	9c04      	ldr	r4, [sp, #16]
 810cab2:	4632      	mov	r2, r6
 810cab4:	463b      	mov	r3, r7
 810cab6:	4620      	mov	r0, r4
 810cab8:	460d      	mov	r5, r1
 810caba:	f7f3 fc11 	bl	81002e0 <__aeabi_dsub>
 810cabe:	4642      	mov	r2, r8
 810cac0:	464b      	mov	r3, r9
 810cac2:	f7f3 fc0d 	bl	81002e0 <__aeabi_dsub>
 810cac6:	ec53 2b18 	vmov	r2, r3, d8
 810caca:	f7f3 fc09 	bl	81002e0 <__aeabi_dsub>
 810cace:	4602      	mov	r2, r0
 810cad0:	460b      	mov	r3, r1
 810cad2:	4650      	mov	r0, sl
 810cad4:	4659      	mov	r1, fp
 810cad6:	e606      	b.n	810c6e6 <__ieee754_pow+0x2ee>
 810cad8:	2401      	movs	r4, #1
 810cada:	e6a0      	b.n	810c81e <__ieee754_pow+0x426>
 810cadc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810cb30 <__ieee754_pow+0x738>
 810cae0:	e60d      	b.n	810c6fe <__ieee754_pow+0x306>
 810cae2:	bf00      	nop
 810cae4:	f3af 8000 	nop.w
 810cae8:	4a454eef 	.word	0x4a454eef
 810caec:	3fca7e28 	.word	0x3fca7e28
 810caf0:	93c9db65 	.word	0x93c9db65
 810caf4:	3fcd864a 	.word	0x3fcd864a
 810caf8:	a91d4101 	.word	0xa91d4101
 810cafc:	3fd17460 	.word	0x3fd17460
 810cb00:	518f264d 	.word	0x518f264d
 810cb04:	3fd55555 	.word	0x3fd55555
 810cb08:	db6fabff 	.word	0xdb6fabff
 810cb0c:	3fdb6db6 	.word	0x3fdb6db6
 810cb10:	33333303 	.word	0x33333303
 810cb14:	3fe33333 	.word	0x3fe33333
 810cb18:	e0000000 	.word	0xe0000000
 810cb1c:	3feec709 	.word	0x3feec709
 810cb20:	dc3a03fd 	.word	0xdc3a03fd
 810cb24:	3feec709 	.word	0x3feec709
 810cb28:	145b01f5 	.word	0x145b01f5
 810cb2c:	be3e2fe0 	.word	0xbe3e2fe0
 810cb30:	00000000 	.word	0x00000000
 810cb34:	3ff00000 	.word	0x3ff00000
 810cb38:	7ff00000 	.word	0x7ff00000
 810cb3c:	43400000 	.word	0x43400000
 810cb40:	0003988e 	.word	0x0003988e
 810cb44:	000bb679 	.word	0x000bb679
 810cb48:	0810d2f0 	.word	0x0810d2f0
 810cb4c:	3ff00000 	.word	0x3ff00000
 810cb50:	40080000 	.word	0x40080000
 810cb54:	0810d310 	.word	0x0810d310
 810cb58:	0810d300 	.word	0x0810d300
 810cb5c:	a3b5      	add	r3, pc, #724	; (adr r3, 810ce34 <__ieee754_pow+0xa3c>)
 810cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb62:	4640      	mov	r0, r8
 810cb64:	4649      	mov	r1, r9
 810cb66:	f7f3 fbbd 	bl	81002e4 <__adddf3>
 810cb6a:	4622      	mov	r2, r4
 810cb6c:	ec41 0b1a 	vmov	d10, r0, r1
 810cb70:	462b      	mov	r3, r5
 810cb72:	4630      	mov	r0, r6
 810cb74:	4639      	mov	r1, r7
 810cb76:	f7f3 fbb3 	bl	81002e0 <__aeabi_dsub>
 810cb7a:	4602      	mov	r2, r0
 810cb7c:	460b      	mov	r3, r1
 810cb7e:	ec51 0b1a 	vmov	r0, r1, d10
 810cb82:	f7f3 fff5 	bl	8100b70 <__aeabi_dcmpgt>
 810cb86:	2800      	cmp	r0, #0
 810cb88:	f47f adf8 	bne.w	810c77c <__ieee754_pow+0x384>
 810cb8c:	4aa4      	ldr	r2, [pc, #656]	; (810ce20 <__ieee754_pow+0xa28>)
 810cb8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810cb92:	4293      	cmp	r3, r2
 810cb94:	f340 810b 	ble.w	810cdae <__ieee754_pow+0x9b6>
 810cb98:	151b      	asrs	r3, r3, #20
 810cb9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810cb9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810cba2:	fa4a f303 	asr.w	r3, sl, r3
 810cba6:	445b      	add	r3, fp
 810cba8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810cbac:	4e9d      	ldr	r6, [pc, #628]	; (810ce24 <__ieee754_pow+0xa2c>)
 810cbae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810cbb2:	4116      	asrs	r6, r2
 810cbb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810cbb8:	2000      	movs	r0, #0
 810cbba:	ea23 0106 	bic.w	r1, r3, r6
 810cbbe:	f1c2 0214 	rsb	r2, r2, #20
 810cbc2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810cbc6:	fa4a fa02 	asr.w	sl, sl, r2
 810cbca:	f1bb 0f00 	cmp.w	fp, #0
 810cbce:	4602      	mov	r2, r0
 810cbd0:	460b      	mov	r3, r1
 810cbd2:	4620      	mov	r0, r4
 810cbd4:	4629      	mov	r1, r5
 810cbd6:	bfb8      	it	lt
 810cbd8:	f1ca 0a00 	rsblt	sl, sl, #0
 810cbdc:	f7f3 fb80 	bl	81002e0 <__aeabi_dsub>
 810cbe0:	ec41 0b19 	vmov	d9, r0, r1
 810cbe4:	4642      	mov	r2, r8
 810cbe6:	464b      	mov	r3, r9
 810cbe8:	ec51 0b19 	vmov	r0, r1, d9
 810cbec:	f7f3 fb7a 	bl	81002e4 <__adddf3>
 810cbf0:	2400      	movs	r4, #0
 810cbf2:	a379      	add	r3, pc, #484	; (adr r3, 810cdd8 <__ieee754_pow+0x9e0>)
 810cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbf8:	4620      	mov	r0, r4
 810cbfa:	460d      	mov	r5, r1
 810cbfc:	f7f3 fd28 	bl	8100650 <__aeabi_dmul>
 810cc00:	ec53 2b19 	vmov	r2, r3, d9
 810cc04:	4606      	mov	r6, r0
 810cc06:	460f      	mov	r7, r1
 810cc08:	4620      	mov	r0, r4
 810cc0a:	4629      	mov	r1, r5
 810cc0c:	f7f3 fb68 	bl	81002e0 <__aeabi_dsub>
 810cc10:	4602      	mov	r2, r0
 810cc12:	460b      	mov	r3, r1
 810cc14:	4640      	mov	r0, r8
 810cc16:	4649      	mov	r1, r9
 810cc18:	f7f3 fb62 	bl	81002e0 <__aeabi_dsub>
 810cc1c:	a370      	add	r3, pc, #448	; (adr r3, 810cde0 <__ieee754_pow+0x9e8>)
 810cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc22:	f7f3 fd15 	bl	8100650 <__aeabi_dmul>
 810cc26:	a370      	add	r3, pc, #448	; (adr r3, 810cde8 <__ieee754_pow+0x9f0>)
 810cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc2c:	4680      	mov	r8, r0
 810cc2e:	4689      	mov	r9, r1
 810cc30:	4620      	mov	r0, r4
 810cc32:	4629      	mov	r1, r5
 810cc34:	f7f3 fd0c 	bl	8100650 <__aeabi_dmul>
 810cc38:	4602      	mov	r2, r0
 810cc3a:	460b      	mov	r3, r1
 810cc3c:	4640      	mov	r0, r8
 810cc3e:	4649      	mov	r1, r9
 810cc40:	f7f3 fb50 	bl	81002e4 <__adddf3>
 810cc44:	4604      	mov	r4, r0
 810cc46:	460d      	mov	r5, r1
 810cc48:	4602      	mov	r2, r0
 810cc4a:	460b      	mov	r3, r1
 810cc4c:	4630      	mov	r0, r6
 810cc4e:	4639      	mov	r1, r7
 810cc50:	f7f3 fb48 	bl	81002e4 <__adddf3>
 810cc54:	4632      	mov	r2, r6
 810cc56:	463b      	mov	r3, r7
 810cc58:	4680      	mov	r8, r0
 810cc5a:	4689      	mov	r9, r1
 810cc5c:	f7f3 fb40 	bl	81002e0 <__aeabi_dsub>
 810cc60:	4602      	mov	r2, r0
 810cc62:	460b      	mov	r3, r1
 810cc64:	4620      	mov	r0, r4
 810cc66:	4629      	mov	r1, r5
 810cc68:	f7f3 fb3a 	bl	81002e0 <__aeabi_dsub>
 810cc6c:	4642      	mov	r2, r8
 810cc6e:	4606      	mov	r6, r0
 810cc70:	460f      	mov	r7, r1
 810cc72:	464b      	mov	r3, r9
 810cc74:	4640      	mov	r0, r8
 810cc76:	4649      	mov	r1, r9
 810cc78:	f7f3 fcea 	bl	8100650 <__aeabi_dmul>
 810cc7c:	a35c      	add	r3, pc, #368	; (adr r3, 810cdf0 <__ieee754_pow+0x9f8>)
 810cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc82:	4604      	mov	r4, r0
 810cc84:	460d      	mov	r5, r1
 810cc86:	f7f3 fce3 	bl	8100650 <__aeabi_dmul>
 810cc8a:	a35b      	add	r3, pc, #364	; (adr r3, 810cdf8 <__ieee754_pow+0xa00>)
 810cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc90:	f7f3 fb26 	bl	81002e0 <__aeabi_dsub>
 810cc94:	4622      	mov	r2, r4
 810cc96:	462b      	mov	r3, r5
 810cc98:	f7f3 fcda 	bl	8100650 <__aeabi_dmul>
 810cc9c:	a358      	add	r3, pc, #352	; (adr r3, 810ce00 <__ieee754_pow+0xa08>)
 810cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cca2:	f7f3 fb1f 	bl	81002e4 <__adddf3>
 810cca6:	4622      	mov	r2, r4
 810cca8:	462b      	mov	r3, r5
 810ccaa:	f7f3 fcd1 	bl	8100650 <__aeabi_dmul>
 810ccae:	a356      	add	r3, pc, #344	; (adr r3, 810ce08 <__ieee754_pow+0xa10>)
 810ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccb4:	f7f3 fb14 	bl	81002e0 <__aeabi_dsub>
 810ccb8:	4622      	mov	r2, r4
 810ccba:	462b      	mov	r3, r5
 810ccbc:	f7f3 fcc8 	bl	8100650 <__aeabi_dmul>
 810ccc0:	a353      	add	r3, pc, #332	; (adr r3, 810ce10 <__ieee754_pow+0xa18>)
 810ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccc6:	f7f3 fb0d 	bl	81002e4 <__adddf3>
 810ccca:	4622      	mov	r2, r4
 810cccc:	462b      	mov	r3, r5
 810ccce:	f7f3 fcbf 	bl	8100650 <__aeabi_dmul>
 810ccd2:	4602      	mov	r2, r0
 810ccd4:	460b      	mov	r3, r1
 810ccd6:	4640      	mov	r0, r8
 810ccd8:	4649      	mov	r1, r9
 810ccda:	f7f3 fb01 	bl	81002e0 <__aeabi_dsub>
 810ccde:	4604      	mov	r4, r0
 810cce0:	460d      	mov	r5, r1
 810cce2:	4602      	mov	r2, r0
 810cce4:	460b      	mov	r3, r1
 810cce6:	4640      	mov	r0, r8
 810cce8:	4649      	mov	r1, r9
 810ccea:	f7f3 fcb1 	bl	8100650 <__aeabi_dmul>
 810ccee:	2200      	movs	r2, #0
 810ccf0:	ec41 0b19 	vmov	d9, r0, r1
 810ccf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810ccf8:	4620      	mov	r0, r4
 810ccfa:	4629      	mov	r1, r5
 810ccfc:	f7f3 faf0 	bl	81002e0 <__aeabi_dsub>
 810cd00:	4602      	mov	r2, r0
 810cd02:	460b      	mov	r3, r1
 810cd04:	ec51 0b19 	vmov	r0, r1, d9
 810cd08:	f7f3 fdcc 	bl	81008a4 <__aeabi_ddiv>
 810cd0c:	4632      	mov	r2, r6
 810cd0e:	4604      	mov	r4, r0
 810cd10:	460d      	mov	r5, r1
 810cd12:	463b      	mov	r3, r7
 810cd14:	4640      	mov	r0, r8
 810cd16:	4649      	mov	r1, r9
 810cd18:	f7f3 fc9a 	bl	8100650 <__aeabi_dmul>
 810cd1c:	4632      	mov	r2, r6
 810cd1e:	463b      	mov	r3, r7
 810cd20:	f7f3 fae0 	bl	81002e4 <__adddf3>
 810cd24:	4602      	mov	r2, r0
 810cd26:	460b      	mov	r3, r1
 810cd28:	4620      	mov	r0, r4
 810cd2a:	4629      	mov	r1, r5
 810cd2c:	f7f3 fad8 	bl	81002e0 <__aeabi_dsub>
 810cd30:	4642      	mov	r2, r8
 810cd32:	464b      	mov	r3, r9
 810cd34:	f7f3 fad4 	bl	81002e0 <__aeabi_dsub>
 810cd38:	460b      	mov	r3, r1
 810cd3a:	4602      	mov	r2, r0
 810cd3c:	493a      	ldr	r1, [pc, #232]	; (810ce28 <__ieee754_pow+0xa30>)
 810cd3e:	2000      	movs	r0, #0
 810cd40:	f7f3 face 	bl	81002e0 <__aeabi_dsub>
 810cd44:	e9cd 0100 	strd	r0, r1, [sp]
 810cd48:	9b01      	ldr	r3, [sp, #4]
 810cd4a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810cd4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810cd52:	da2f      	bge.n	810cdb4 <__ieee754_pow+0x9bc>
 810cd54:	4650      	mov	r0, sl
 810cd56:	ed9d 0b00 	vldr	d0, [sp]
 810cd5a:	f000 f9cd 	bl	810d0f8 <scalbn>
 810cd5e:	ec51 0b10 	vmov	r0, r1, d0
 810cd62:	ec53 2b18 	vmov	r2, r3, d8
 810cd66:	f7ff bbe0 	b.w	810c52a <__ieee754_pow+0x132>
 810cd6a:	4b30      	ldr	r3, [pc, #192]	; (810ce2c <__ieee754_pow+0xa34>)
 810cd6c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810cd70:	429e      	cmp	r6, r3
 810cd72:	f77f af0b 	ble.w	810cb8c <__ieee754_pow+0x794>
 810cd76:	4b2e      	ldr	r3, [pc, #184]	; (810ce30 <__ieee754_pow+0xa38>)
 810cd78:	440b      	add	r3, r1
 810cd7a:	4303      	orrs	r3, r0
 810cd7c:	d00b      	beq.n	810cd96 <__ieee754_pow+0x99e>
 810cd7e:	a326      	add	r3, pc, #152	; (adr r3, 810ce18 <__ieee754_pow+0xa20>)
 810cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd84:	ec51 0b18 	vmov	r0, r1, d8
 810cd88:	f7f3 fc62 	bl	8100650 <__aeabi_dmul>
 810cd8c:	a322      	add	r3, pc, #136	; (adr r3, 810ce18 <__ieee754_pow+0xa20>)
 810cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd92:	f7ff bbca 	b.w	810c52a <__ieee754_pow+0x132>
 810cd96:	4622      	mov	r2, r4
 810cd98:	462b      	mov	r3, r5
 810cd9a:	f7f3 faa1 	bl	81002e0 <__aeabi_dsub>
 810cd9e:	4642      	mov	r2, r8
 810cda0:	464b      	mov	r3, r9
 810cda2:	f7f3 fedb 	bl	8100b5c <__aeabi_dcmpge>
 810cda6:	2800      	cmp	r0, #0
 810cda8:	f43f aef0 	beq.w	810cb8c <__ieee754_pow+0x794>
 810cdac:	e7e7      	b.n	810cd7e <__ieee754_pow+0x986>
 810cdae:	f04f 0a00 	mov.w	sl, #0
 810cdb2:	e717      	b.n	810cbe4 <__ieee754_pow+0x7ec>
 810cdb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cdb8:	4619      	mov	r1, r3
 810cdba:	e7d2      	b.n	810cd62 <__ieee754_pow+0x96a>
 810cdbc:	491a      	ldr	r1, [pc, #104]	; (810ce28 <__ieee754_pow+0xa30>)
 810cdbe:	2000      	movs	r0, #0
 810cdc0:	f7ff bb9e 	b.w	810c500 <__ieee754_pow+0x108>
 810cdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810cdc8:	f7ff bb9a 	b.w	810c500 <__ieee754_pow+0x108>
 810cdcc:	9000      	str	r0, [sp, #0]
 810cdce:	f7ff bb76 	b.w	810c4be <__ieee754_pow+0xc6>
 810cdd2:	2100      	movs	r1, #0
 810cdd4:	f7ff bb60 	b.w	810c498 <__ieee754_pow+0xa0>
 810cdd8:	00000000 	.word	0x00000000
 810cddc:	3fe62e43 	.word	0x3fe62e43
 810cde0:	fefa39ef 	.word	0xfefa39ef
 810cde4:	3fe62e42 	.word	0x3fe62e42
 810cde8:	0ca86c39 	.word	0x0ca86c39
 810cdec:	be205c61 	.word	0xbe205c61
 810cdf0:	72bea4d0 	.word	0x72bea4d0
 810cdf4:	3e663769 	.word	0x3e663769
 810cdf8:	c5d26bf1 	.word	0xc5d26bf1
 810cdfc:	3ebbbd41 	.word	0x3ebbbd41
 810ce00:	af25de2c 	.word	0xaf25de2c
 810ce04:	3f11566a 	.word	0x3f11566a
 810ce08:	16bebd93 	.word	0x16bebd93
 810ce0c:	3f66c16c 	.word	0x3f66c16c
 810ce10:	5555553e 	.word	0x5555553e
 810ce14:	3fc55555 	.word	0x3fc55555
 810ce18:	c2f8f359 	.word	0xc2f8f359
 810ce1c:	01a56e1f 	.word	0x01a56e1f
 810ce20:	3fe00000 	.word	0x3fe00000
 810ce24:	000fffff 	.word	0x000fffff
 810ce28:	3ff00000 	.word	0x3ff00000
 810ce2c:	4090cbff 	.word	0x4090cbff
 810ce30:	3f6f3400 	.word	0x3f6f3400
 810ce34:	652b82fe 	.word	0x652b82fe
 810ce38:	3c971547 	.word	0x3c971547

0810ce3c <__ieee754_sqrt>:
 810ce3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ce40:	ec55 4b10 	vmov	r4, r5, d0
 810ce44:	4e56      	ldr	r6, [pc, #344]	; (810cfa0 <__ieee754_sqrt+0x164>)
 810ce46:	43ae      	bics	r6, r5
 810ce48:	ee10 0a10 	vmov	r0, s0
 810ce4c:	ee10 3a10 	vmov	r3, s0
 810ce50:	4629      	mov	r1, r5
 810ce52:	462a      	mov	r2, r5
 810ce54:	d110      	bne.n	810ce78 <__ieee754_sqrt+0x3c>
 810ce56:	ee10 2a10 	vmov	r2, s0
 810ce5a:	462b      	mov	r3, r5
 810ce5c:	f7f3 fbf8 	bl	8100650 <__aeabi_dmul>
 810ce60:	4602      	mov	r2, r0
 810ce62:	460b      	mov	r3, r1
 810ce64:	4620      	mov	r0, r4
 810ce66:	4629      	mov	r1, r5
 810ce68:	f7f3 fa3c 	bl	81002e4 <__adddf3>
 810ce6c:	4604      	mov	r4, r0
 810ce6e:	460d      	mov	r5, r1
 810ce70:	ec45 4b10 	vmov	d0, r4, r5
 810ce74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ce78:	2d00      	cmp	r5, #0
 810ce7a:	dc10      	bgt.n	810ce9e <__ieee754_sqrt+0x62>
 810ce7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810ce80:	4330      	orrs	r0, r6
 810ce82:	d0f5      	beq.n	810ce70 <__ieee754_sqrt+0x34>
 810ce84:	b15d      	cbz	r5, 810ce9e <__ieee754_sqrt+0x62>
 810ce86:	ee10 2a10 	vmov	r2, s0
 810ce8a:	462b      	mov	r3, r5
 810ce8c:	ee10 0a10 	vmov	r0, s0
 810ce90:	f7f3 fa26 	bl	81002e0 <__aeabi_dsub>
 810ce94:	4602      	mov	r2, r0
 810ce96:	460b      	mov	r3, r1
 810ce98:	f7f3 fd04 	bl	81008a4 <__aeabi_ddiv>
 810ce9c:	e7e6      	b.n	810ce6c <__ieee754_sqrt+0x30>
 810ce9e:	1509      	asrs	r1, r1, #20
 810cea0:	d076      	beq.n	810cf90 <__ieee754_sqrt+0x154>
 810cea2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810cea6:	07ce      	lsls	r6, r1, #31
 810cea8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810ceac:	bf5e      	ittt	pl
 810ceae:	0fda      	lsrpl	r2, r3, #31
 810ceb0:	005b      	lslpl	r3, r3, #1
 810ceb2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810ceb6:	0fda      	lsrs	r2, r3, #31
 810ceb8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810cebc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810cec0:	2000      	movs	r0, #0
 810cec2:	106d      	asrs	r5, r5, #1
 810cec4:	005b      	lsls	r3, r3, #1
 810cec6:	f04f 0e16 	mov.w	lr, #22
 810ceca:	4684      	mov	ip, r0
 810cecc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810ced0:	eb0c 0401 	add.w	r4, ip, r1
 810ced4:	4294      	cmp	r4, r2
 810ced6:	bfde      	ittt	le
 810ced8:	1b12      	suble	r2, r2, r4
 810ceda:	eb04 0c01 	addle.w	ip, r4, r1
 810cede:	1840      	addle	r0, r0, r1
 810cee0:	0052      	lsls	r2, r2, #1
 810cee2:	f1be 0e01 	subs.w	lr, lr, #1
 810cee6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810ceea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810ceee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810cef2:	d1ed      	bne.n	810ced0 <__ieee754_sqrt+0x94>
 810cef4:	4671      	mov	r1, lr
 810cef6:	2720      	movs	r7, #32
 810cef8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810cefc:	4562      	cmp	r2, ip
 810cefe:	eb04 060e 	add.w	r6, r4, lr
 810cf02:	dc02      	bgt.n	810cf0a <__ieee754_sqrt+0xce>
 810cf04:	d113      	bne.n	810cf2e <__ieee754_sqrt+0xf2>
 810cf06:	429e      	cmp	r6, r3
 810cf08:	d811      	bhi.n	810cf2e <__ieee754_sqrt+0xf2>
 810cf0a:	2e00      	cmp	r6, #0
 810cf0c:	eb06 0e04 	add.w	lr, r6, r4
 810cf10:	da43      	bge.n	810cf9a <__ieee754_sqrt+0x15e>
 810cf12:	f1be 0f00 	cmp.w	lr, #0
 810cf16:	db40      	blt.n	810cf9a <__ieee754_sqrt+0x15e>
 810cf18:	f10c 0801 	add.w	r8, ip, #1
 810cf1c:	eba2 020c 	sub.w	r2, r2, ip
 810cf20:	429e      	cmp	r6, r3
 810cf22:	bf88      	it	hi
 810cf24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810cf28:	1b9b      	subs	r3, r3, r6
 810cf2a:	4421      	add	r1, r4
 810cf2c:	46c4      	mov	ip, r8
 810cf2e:	0052      	lsls	r2, r2, #1
 810cf30:	3f01      	subs	r7, #1
 810cf32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810cf36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810cf3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810cf3e:	d1dd      	bne.n	810cefc <__ieee754_sqrt+0xc0>
 810cf40:	4313      	orrs	r3, r2
 810cf42:	d006      	beq.n	810cf52 <__ieee754_sqrt+0x116>
 810cf44:	1c4c      	adds	r4, r1, #1
 810cf46:	bf13      	iteet	ne
 810cf48:	3101      	addne	r1, #1
 810cf4a:	3001      	addeq	r0, #1
 810cf4c:	4639      	moveq	r1, r7
 810cf4e:	f021 0101 	bicne.w	r1, r1, #1
 810cf52:	1043      	asrs	r3, r0, #1
 810cf54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810cf58:	0849      	lsrs	r1, r1, #1
 810cf5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810cf5e:	07c2      	lsls	r2, r0, #31
 810cf60:	bf48      	it	mi
 810cf62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810cf66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810cf6a:	460c      	mov	r4, r1
 810cf6c:	463d      	mov	r5, r7
 810cf6e:	e77f      	b.n	810ce70 <__ieee754_sqrt+0x34>
 810cf70:	0ada      	lsrs	r2, r3, #11
 810cf72:	3815      	subs	r0, #21
 810cf74:	055b      	lsls	r3, r3, #21
 810cf76:	2a00      	cmp	r2, #0
 810cf78:	d0fa      	beq.n	810cf70 <__ieee754_sqrt+0x134>
 810cf7a:	02d7      	lsls	r7, r2, #11
 810cf7c:	d50a      	bpl.n	810cf94 <__ieee754_sqrt+0x158>
 810cf7e:	f1c1 0420 	rsb	r4, r1, #32
 810cf82:	fa23 f404 	lsr.w	r4, r3, r4
 810cf86:	1e4d      	subs	r5, r1, #1
 810cf88:	408b      	lsls	r3, r1
 810cf8a:	4322      	orrs	r2, r4
 810cf8c:	1b41      	subs	r1, r0, r5
 810cf8e:	e788      	b.n	810cea2 <__ieee754_sqrt+0x66>
 810cf90:	4608      	mov	r0, r1
 810cf92:	e7f0      	b.n	810cf76 <__ieee754_sqrt+0x13a>
 810cf94:	0052      	lsls	r2, r2, #1
 810cf96:	3101      	adds	r1, #1
 810cf98:	e7ef      	b.n	810cf7a <__ieee754_sqrt+0x13e>
 810cf9a:	46e0      	mov	r8, ip
 810cf9c:	e7be      	b.n	810cf1c <__ieee754_sqrt+0xe0>
 810cf9e:	bf00      	nop
 810cfa0:	7ff00000 	.word	0x7ff00000

0810cfa4 <fabs>:
 810cfa4:	ec51 0b10 	vmov	r0, r1, d0
 810cfa8:	ee10 2a10 	vmov	r2, s0
 810cfac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810cfb0:	ec43 2b10 	vmov	d0, r2, r3
 810cfb4:	4770      	bx	lr

0810cfb6 <finite>:
 810cfb6:	b082      	sub	sp, #8
 810cfb8:	ed8d 0b00 	vstr	d0, [sp]
 810cfbc:	9801      	ldr	r0, [sp, #4]
 810cfbe:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810cfc2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810cfc6:	0fc0      	lsrs	r0, r0, #31
 810cfc8:	b002      	add	sp, #8
 810cfca:	4770      	bx	lr
 810cfcc:	0000      	movs	r0, r0
	...

0810cfd0 <nan>:
 810cfd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810cfd8 <nan+0x8>
 810cfd4:	4770      	bx	lr
 810cfd6:	bf00      	nop
 810cfd8:	00000000 	.word	0x00000000
 810cfdc:	7ff80000 	.word	0x7ff80000

0810cfe0 <rint>:
 810cfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810cfe2:	ec51 0b10 	vmov	r0, r1, d0
 810cfe6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810cfea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810cfee:	2e13      	cmp	r6, #19
 810cff0:	ee10 4a10 	vmov	r4, s0
 810cff4:	460b      	mov	r3, r1
 810cff6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810cffa:	dc58      	bgt.n	810d0ae <rint+0xce>
 810cffc:	2e00      	cmp	r6, #0
 810cffe:	da2b      	bge.n	810d058 <rint+0x78>
 810d000:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810d004:	4302      	orrs	r2, r0
 810d006:	d023      	beq.n	810d050 <rint+0x70>
 810d008:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810d00c:	4302      	orrs	r2, r0
 810d00e:	4254      	negs	r4, r2
 810d010:	4314      	orrs	r4, r2
 810d012:	0c4b      	lsrs	r3, r1, #17
 810d014:	0b24      	lsrs	r4, r4, #12
 810d016:	045b      	lsls	r3, r3, #17
 810d018:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810d01c:	ea44 0103 	orr.w	r1, r4, r3
 810d020:	4b32      	ldr	r3, [pc, #200]	; (810d0ec <rint+0x10c>)
 810d022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d026:	e9d3 6700 	ldrd	r6, r7, [r3]
 810d02a:	4602      	mov	r2, r0
 810d02c:	460b      	mov	r3, r1
 810d02e:	4630      	mov	r0, r6
 810d030:	4639      	mov	r1, r7
 810d032:	f7f3 f957 	bl	81002e4 <__adddf3>
 810d036:	e9cd 0100 	strd	r0, r1, [sp]
 810d03a:	463b      	mov	r3, r7
 810d03c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d040:	4632      	mov	r2, r6
 810d042:	f7f3 f94d 	bl	81002e0 <__aeabi_dsub>
 810d046:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d04a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810d04e:	4639      	mov	r1, r7
 810d050:	ec41 0b10 	vmov	d0, r0, r1
 810d054:	b003      	add	sp, #12
 810d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d058:	4a25      	ldr	r2, [pc, #148]	; (810d0f0 <rint+0x110>)
 810d05a:	4132      	asrs	r2, r6
 810d05c:	ea01 0702 	and.w	r7, r1, r2
 810d060:	4307      	orrs	r7, r0
 810d062:	d0f5      	beq.n	810d050 <rint+0x70>
 810d064:	0851      	lsrs	r1, r2, #1
 810d066:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810d06a:	4314      	orrs	r4, r2
 810d06c:	d00c      	beq.n	810d088 <rint+0xa8>
 810d06e:	ea23 0201 	bic.w	r2, r3, r1
 810d072:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810d076:	2e13      	cmp	r6, #19
 810d078:	fa43 f606 	asr.w	r6, r3, r6
 810d07c:	bf0c      	ite	eq
 810d07e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810d082:	2400      	movne	r4, #0
 810d084:	ea42 0306 	orr.w	r3, r2, r6
 810d088:	4918      	ldr	r1, [pc, #96]	; (810d0ec <rint+0x10c>)
 810d08a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810d08e:	4622      	mov	r2, r4
 810d090:	e9d5 4500 	ldrd	r4, r5, [r5]
 810d094:	4620      	mov	r0, r4
 810d096:	4629      	mov	r1, r5
 810d098:	f7f3 f924 	bl	81002e4 <__adddf3>
 810d09c:	e9cd 0100 	strd	r0, r1, [sp]
 810d0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d0a4:	4622      	mov	r2, r4
 810d0a6:	462b      	mov	r3, r5
 810d0a8:	f7f3 f91a 	bl	81002e0 <__aeabi_dsub>
 810d0ac:	e7d0      	b.n	810d050 <rint+0x70>
 810d0ae:	2e33      	cmp	r6, #51	; 0x33
 810d0b0:	dd07      	ble.n	810d0c2 <rint+0xe2>
 810d0b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810d0b6:	d1cb      	bne.n	810d050 <rint+0x70>
 810d0b8:	ee10 2a10 	vmov	r2, s0
 810d0bc:	f7f3 f912 	bl	81002e4 <__adddf3>
 810d0c0:	e7c6      	b.n	810d050 <rint+0x70>
 810d0c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810d0c6:	f04f 36ff 	mov.w	r6, #4294967295
 810d0ca:	40d6      	lsrs	r6, r2
 810d0cc:	4230      	tst	r0, r6
 810d0ce:	d0bf      	beq.n	810d050 <rint+0x70>
 810d0d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810d0d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810d0d8:	bf1f      	itttt	ne
 810d0da:	ea24 0101 	bicne.w	r1, r4, r1
 810d0de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810d0e2:	fa44 f202 	asrne.w	r2, r4, r2
 810d0e6:	ea41 0402 	orrne.w	r4, r1, r2
 810d0ea:	e7cd      	b.n	810d088 <rint+0xa8>
 810d0ec:	0810d320 	.word	0x0810d320
 810d0f0:	000fffff 	.word	0x000fffff
 810d0f4:	00000000 	.word	0x00000000

0810d0f8 <scalbn>:
 810d0f8:	b570      	push	{r4, r5, r6, lr}
 810d0fa:	ec55 4b10 	vmov	r4, r5, d0
 810d0fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810d102:	4606      	mov	r6, r0
 810d104:	462b      	mov	r3, r5
 810d106:	b99a      	cbnz	r2, 810d130 <scalbn+0x38>
 810d108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810d10c:	4323      	orrs	r3, r4
 810d10e:	d036      	beq.n	810d17e <scalbn+0x86>
 810d110:	4b39      	ldr	r3, [pc, #228]	; (810d1f8 <scalbn+0x100>)
 810d112:	4629      	mov	r1, r5
 810d114:	ee10 0a10 	vmov	r0, s0
 810d118:	2200      	movs	r2, #0
 810d11a:	f7f3 fa99 	bl	8100650 <__aeabi_dmul>
 810d11e:	4b37      	ldr	r3, [pc, #220]	; (810d1fc <scalbn+0x104>)
 810d120:	429e      	cmp	r6, r3
 810d122:	4604      	mov	r4, r0
 810d124:	460d      	mov	r5, r1
 810d126:	da10      	bge.n	810d14a <scalbn+0x52>
 810d128:	a32b      	add	r3, pc, #172	; (adr r3, 810d1d8 <scalbn+0xe0>)
 810d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d12e:	e03a      	b.n	810d1a6 <scalbn+0xae>
 810d130:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810d134:	428a      	cmp	r2, r1
 810d136:	d10c      	bne.n	810d152 <scalbn+0x5a>
 810d138:	ee10 2a10 	vmov	r2, s0
 810d13c:	4620      	mov	r0, r4
 810d13e:	4629      	mov	r1, r5
 810d140:	f7f3 f8d0 	bl	81002e4 <__adddf3>
 810d144:	4604      	mov	r4, r0
 810d146:	460d      	mov	r5, r1
 810d148:	e019      	b.n	810d17e <scalbn+0x86>
 810d14a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d14e:	460b      	mov	r3, r1
 810d150:	3a36      	subs	r2, #54	; 0x36
 810d152:	4432      	add	r2, r6
 810d154:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810d158:	428a      	cmp	r2, r1
 810d15a:	dd08      	ble.n	810d16e <scalbn+0x76>
 810d15c:	2d00      	cmp	r5, #0
 810d15e:	a120      	add	r1, pc, #128	; (adr r1, 810d1e0 <scalbn+0xe8>)
 810d160:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d164:	da1c      	bge.n	810d1a0 <scalbn+0xa8>
 810d166:	a120      	add	r1, pc, #128	; (adr r1, 810d1e8 <scalbn+0xf0>)
 810d168:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d16c:	e018      	b.n	810d1a0 <scalbn+0xa8>
 810d16e:	2a00      	cmp	r2, #0
 810d170:	dd08      	ble.n	810d184 <scalbn+0x8c>
 810d172:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d17a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810d17e:	ec45 4b10 	vmov	d0, r4, r5
 810d182:	bd70      	pop	{r4, r5, r6, pc}
 810d184:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810d188:	da19      	bge.n	810d1be <scalbn+0xc6>
 810d18a:	f24c 3350 	movw	r3, #50000	; 0xc350
 810d18e:	429e      	cmp	r6, r3
 810d190:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810d194:	dd0a      	ble.n	810d1ac <scalbn+0xb4>
 810d196:	a112      	add	r1, pc, #72	; (adr r1, 810d1e0 <scalbn+0xe8>)
 810d198:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d19c:	2b00      	cmp	r3, #0
 810d19e:	d1e2      	bne.n	810d166 <scalbn+0x6e>
 810d1a0:	a30f      	add	r3, pc, #60	; (adr r3, 810d1e0 <scalbn+0xe8>)
 810d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1a6:	f7f3 fa53 	bl	8100650 <__aeabi_dmul>
 810d1aa:	e7cb      	b.n	810d144 <scalbn+0x4c>
 810d1ac:	a10a      	add	r1, pc, #40	; (adr r1, 810d1d8 <scalbn+0xe0>)
 810d1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d1b2:	2b00      	cmp	r3, #0
 810d1b4:	d0b8      	beq.n	810d128 <scalbn+0x30>
 810d1b6:	a10e      	add	r1, pc, #56	; (adr r1, 810d1f0 <scalbn+0xf8>)
 810d1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d1bc:	e7b4      	b.n	810d128 <scalbn+0x30>
 810d1be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d1c2:	3236      	adds	r2, #54	; 0x36
 810d1c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d1c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810d1cc:	4620      	mov	r0, r4
 810d1ce:	4b0c      	ldr	r3, [pc, #48]	; (810d200 <scalbn+0x108>)
 810d1d0:	2200      	movs	r2, #0
 810d1d2:	e7e8      	b.n	810d1a6 <scalbn+0xae>
 810d1d4:	f3af 8000 	nop.w
 810d1d8:	c2f8f359 	.word	0xc2f8f359
 810d1dc:	01a56e1f 	.word	0x01a56e1f
 810d1e0:	8800759c 	.word	0x8800759c
 810d1e4:	7e37e43c 	.word	0x7e37e43c
 810d1e8:	8800759c 	.word	0x8800759c
 810d1ec:	fe37e43c 	.word	0xfe37e43c
 810d1f0:	c2f8f359 	.word	0xc2f8f359
 810d1f4:	81a56e1f 	.word	0x81a56e1f
 810d1f8:	43500000 	.word	0x43500000
 810d1fc:	ffff3cb0 	.word	0xffff3cb0
 810d200:	3c900000 	.word	0x3c900000

0810d204 <_init>:
 810d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d206:	bf00      	nop
 810d208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d20a:	bc08      	pop	{r3}
 810d20c:	469e      	mov	lr, r3
 810d20e:	4770      	bx	lr

0810d210 <_fini>:
 810d210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d212:	bf00      	nop
 810d214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d216:	bc08      	pop	{r3}
 810d218:	469e      	mov	lr, r3
 810d21a:	4770      	bx	lr
