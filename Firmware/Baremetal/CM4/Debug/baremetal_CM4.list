
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1d4  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0810e470  0810e470  0001e470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e578  0810e578  0001e578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e580  0810e580  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e584  0810e584  0001e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  10000000  0810e588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000654  1000008c  0810e614  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100006e0  0810e614  000206e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003225e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ee0  00000000  00000000  0005231a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001758  00000000  00000000  00057200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015c0  00000000  00000000  00058958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d3ba  00000000  00000000  00059f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002029d  00000000  00000000  000972d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018fe06  00000000  00000000  000b756f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00247375  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006608  00000000  00000000  002473c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000008c 	.word	0x1000008c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810e454 	.word	0x0810e454

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000090 	.word	0x10000090
 81002d4:	0810e454 	.word	0x0810e454

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <SetBMP280NSS>:
/*
 * @brief Pulls the NCS pin of the BMP280 High
 * @returns nothing
 */
void SetBMP280NSS(void)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101240:	2201      	movs	r2, #1
 8101242:	2110      	movs	r1, #16
 8101244:	4802      	ldr	r0, [pc, #8]	; (8101250 <SetBMP280NSS+0x14>)
 8101246:	f005 fea5 	bl	8106f94 <HAL_GPIO_WritePin>

}
 810124a:	bf00      	nop
 810124c:	bd80      	pop	{r7, pc}
 810124e:	bf00      	nop
 8101250:	58020000 	.word	0x58020000

08101254 <ResetBMP280NSS>:
/*
 * @brief Pulls the NCS pin of the BMP280 Low
 * @returns nothing
 */
void ResetBMP280NSS(void)
{
 8101254:	b580      	push	{r7, lr}
 8101256:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101258:	2200      	movs	r2, #0
 810125a:	2110      	movs	r1, #16
 810125c:	4802      	ldr	r0, [pc, #8]	; (8101268 <ResetBMP280NSS+0x14>)
 810125e:	f005 fe99 	bl	8106f94 <HAL_GPIO_WritePin>
}
 8101262:	bf00      	nop
 8101264:	bd80      	pop	{r7, pc}
 8101266:	bf00      	nop
 8101268:	58020000 	.word	0x58020000

0810126c <CheckBMP280ChipID>:
 * @brief Checks the WHOAMI register
 * to confirm the chip
 * @returns OK on success, Error on failure
 */
uint8_t CheckBMP280ChipID()
{
 810126c:	b580      	push	{r7, lr}
 810126e:	af00      	add	r7, sp, #0
  if (Read8Bit(BMP280_REG_ID) != BMP280_CHIP_ID)
 8101270:	20d0      	movs	r0, #208	; 0xd0
 8101272:	f000 f829 	bl	81012c8 <Read8Bit>
 8101276:	4603      	mov	r3, r0
 8101278:	2b58      	cmp	r3, #88	; 0x58
 810127a:	d001      	beq.n	8101280 <CheckBMP280ChipID+0x14>
  {
    return HAL_ERROR;
 810127c:	2301      	movs	r3, #1
 810127e:	e000      	b.n	8101282 <CheckBMP280ChipID+0x16>
  }
  return HAL_OK;
 8101280:	2300      	movs	r3, #0
}
 8101282:	4618      	mov	r0, r3
 8101284:	bd80      	pop	{r7, pc}

08101286 <ConfigBMP280>:
/*
 * @brief Initialises BMP280 Sensor
 * @retval HAL_OK if initialisation is successful
 */
uint8_t ConfigBMP280(BMP280Handle *baro)
{
 8101286:	b580      	push	{r7, lr}
 8101288:	b084      	sub	sp, #16
 810128a:	af00      	add	r7, sp, #0
 810128c:	6078      	str	r0, [r7, #4]
  ResetBMP280NSS();
 810128e:	f7ff ffe1 	bl	8101254 <ResetBMP280NSS>
  uint8_t baro_res = CheckBMP280ChipID();
 8101292:	f7ff ffeb 	bl	810126c <CheckBMP280ChipID>
 8101296:	4603      	mov	r3, r0
 8101298:	73fb      	strb	r3, [r7, #15]
  if (baro_res != HAL_OK)
 810129a:	7bfb      	ldrb	r3, [r7, #15]
 810129c:	2b00      	cmp	r3, #0
 810129e:	d001      	beq.n	81012a4 <ConfigBMP280+0x1e>
  {
    return HAL_ERROR;
 81012a0:	2301      	movs	r3, #1
 81012a2:	e00c      	b.n	81012be <ConfigBMP280+0x38>
  }

  ResetBMP280NSS();
 81012a4:	f7ff ffd6 	bl	8101254 <ResetBMP280NSS>
  HAL_Delay(1000);
 81012a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81012ac:	f002 fa42 	bl	8103734 <HAL_Delay>
  SetConfig(baro);
 81012b0:	6878      	ldr	r0, [r7, #4]
 81012b2:	f000 f932 	bl	810151a <SetConfig>
  BMP280readCoefficients(baro);
 81012b6:	6878      	ldr	r0, [r7, #4]
 81012b8:	f000 f8d3 	bl	8101462 <BMP280readCoefficients>

  return HAL_OK;
 81012bc:	2300      	movs	r3, #0

}
 81012be:	4618      	mov	r0, r3
 81012c0:	3710      	adds	r7, #16
 81012c2:	46bd      	mov	sp, r7
 81012c4:	bd80      	pop	{r7, pc}
	...

081012c8 <Read8Bit>:
 * @brief Reads 8 bit register.
 * @param The register adddress to be read.
 * @return 8 bit data from the register.
 */
uint8_t Read8Bit(uint8_t Register)
{
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b082      	sub	sp, #8
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	4603      	mov	r3, r0
 81012d0:	71fb      	strb	r3, [r7, #7]
  SerialData[0] = Register | BMP280_SPI_READ;
 81012d2:	79fb      	ldrb	r3, [r7, #7]
 81012d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81012d8:	b2da      	uxtb	r2, r3
 81012da:	4b0c      	ldr	r3, [pc, #48]	; (810130c <Read8Bit+0x44>)
 81012dc:	701a      	strb	r2, [r3, #0]

  ResetBMP280NSS();
 81012de:	f7ff ffb9 	bl	8101254 <ResetBMP280NSS>
  HAL_SPI_Transmit(&hspi1, SerialData, 1, 10);
 81012e2:	230a      	movs	r3, #10
 81012e4:	2201      	movs	r2, #1
 81012e6:	4909      	ldr	r1, [pc, #36]	; (810130c <Read8Bit+0x44>)
 81012e8:	4809      	ldr	r0, [pc, #36]	; (8101310 <Read8Bit+0x48>)
 81012ea:	f009 f945 	bl	810a578 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[1], 1, 10);
 81012ee:	230a      	movs	r3, #10
 81012f0:	2201      	movs	r2, #1
 81012f2:	4908      	ldr	r1, [pc, #32]	; (8101314 <Read8Bit+0x4c>)
 81012f4:	4806      	ldr	r0, [pc, #24]	; (8101310 <Read8Bit+0x48>)
 81012f6:	f009 fb2d 	bl	810a954 <HAL_SPI_Receive>
  SetBMP280NSS();
 81012fa:	f7ff ff9f 	bl	810123c <SetBMP280NSS>
  return SerialData[1];
 81012fe:	4b03      	ldr	r3, [pc, #12]	; (810130c <Read8Bit+0x44>)
 8101300:	785b      	ldrb	r3, [r3, #1]

}
 8101302:	4618      	mov	r0, r3
 8101304:	3708      	adds	r7, #8
 8101306:	46bd      	mov	sp, r7
 8101308:	bd80      	pop	{r7, pc}
 810130a:	bf00      	nop
 810130c:	10000190 	.word	0x10000190
 8101310:	100003e4 	.word	0x100003e4
 8101314:	10000191 	.word	0x10000191

08101318 <Read16Bit>:
 * @brief Reads 2 consecutive 8 bit register.
 * @param Register The starting address of register to be read.
 * @return the 16 bit obtained after reading 2 registers.
 */
uint16_t Read16Bit(uint8_t Register)
{
 8101318:	b580      	push	{r7, lr}
 810131a:	b086      	sub	sp, #24
 810131c:	af00      	add	r7, sp, #0
 810131e:	4603      	mov	r3, r0
 8101320:	71fb      	strb	r3, [r7, #7]
  uint32_t Out, msb, lsb;
  SerialData[0] = Register | BMP280_SPI_READ;
 8101322:	79fb      	ldrb	r3, [r7, #7]
 8101324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101328:	b2da      	uxtb	r2, r3
 810132a:	4b11      	ldr	r3, [pc, #68]	; (8101370 <Read16Bit+0x58>)
 810132c:	701a      	strb	r2, [r3, #0]


  ResetBMP280NSS();
 810132e:	f7ff ff91 	bl	8101254 <ResetBMP280NSS>
  HAL_SPI_Transmit(&hspi1, SerialData, 1, 10);
 8101332:	230a      	movs	r3, #10
 8101334:	2201      	movs	r2, #1
 8101336:	490e      	ldr	r1, [pc, #56]	; (8101370 <Read16Bit+0x58>)
 8101338:	480e      	ldr	r0, [pc, #56]	; (8101374 <Read16Bit+0x5c>)
 810133a:	f009 f91d 	bl	810a578 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810133e:	230a      	movs	r3, #10
 8101340:	2202      	movs	r2, #2
 8101342:	490b      	ldr	r1, [pc, #44]	; (8101370 <Read16Bit+0x58>)
 8101344:	480b      	ldr	r0, [pc, #44]	; (8101374 <Read16Bit+0x5c>)
 8101346:	f009 fb05 	bl	810a954 <HAL_SPI_Receive>
  SetBMP280NSS();
 810134a:	f7ff ff77 	bl	810123c <SetBMP280NSS>
  msb = (SerialData[0] << 8);
 810134e:	4b08      	ldr	r3, [pc, #32]	; (8101370 <Read16Bit+0x58>)
 8101350:	781b      	ldrb	r3, [r3, #0]
 8101352:	021b      	lsls	r3, r3, #8
 8101354:	617b      	str	r3, [r7, #20]
  lsb = (SerialData[1]);
 8101356:	4b06      	ldr	r3, [pc, #24]	; (8101370 <Read16Bit+0x58>)
 8101358:	785b      	ldrb	r3, [r3, #1]
 810135a:	613b      	str	r3, [r7, #16]
  Out = msb | lsb;
 810135c:	697a      	ldr	r2, [r7, #20]
 810135e:	693b      	ldr	r3, [r7, #16]
 8101360:	4313      	orrs	r3, r2
 8101362:	60fb      	str	r3, [r7, #12]
  return Out;
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	b29b      	uxth	r3, r3
}
 8101368:	4618      	mov	r0, r3
 810136a:	3718      	adds	r7, #24
 810136c:	46bd      	mov	sp, r7
 810136e:	bd80      	pop	{r7, pc}
 8101370:	10000190 	.word	0x10000190
 8101374:	100003e4 	.word	0x100003e4

08101378 <Read24Bit>:
 * @brief Reads 3 consecutive 8 bit registers.
 * @param Register The starting register address.
 * @return the 24 bit obtained after reading 3 registers.
 */
uint32_t Read24Bit(uint8_t Register)
{
 8101378:	b580      	push	{r7, lr}
 810137a:	b086      	sub	sp, #24
 810137c:	af00      	add	r7, sp, #0
 810137e:	4603      	mov	r3, r0
 8101380:	71fb      	strb	r3, [r7, #7]
  uint32_t Out, msb, lsb, xlsb;
  SerialData[0] = Register | BMP280_SPI_READ;
 8101382:	79fb      	ldrb	r3, [r7, #7]
 8101384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101388:	b2da      	uxtb	r2, r3
 810138a:	4b15      	ldr	r3, [pc, #84]	; (81013e0 <Read24Bit+0x68>)
 810138c:	701a      	strb	r2, [r3, #0]

  ResetBMP280NSS();
 810138e:	f7ff ff61 	bl	8101254 <ResetBMP280NSS>
  HAL_SPI_Transmit(&hspi1, SerialData, 1, 10);
 8101392:	230a      	movs	r3, #10
 8101394:	2201      	movs	r2, #1
 8101396:	4912      	ldr	r1, [pc, #72]	; (81013e0 <Read24Bit+0x68>)
 8101398:	4812      	ldr	r0, [pc, #72]	; (81013e4 <Read24Bit+0x6c>)
 810139a:	f009 f8ed 	bl	810a578 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 810139e:	230a      	movs	r3, #10
 81013a0:	2203      	movs	r2, #3
 81013a2:	490f      	ldr	r1, [pc, #60]	; (81013e0 <Read24Bit+0x68>)
 81013a4:	480f      	ldr	r0, [pc, #60]	; (81013e4 <Read24Bit+0x6c>)
 81013a6:	f009 fad5 	bl	810a954 <HAL_SPI_Receive>
  SetBMP280NSS();
 81013aa:	f7ff ff47 	bl	810123c <SetBMP280NSS>
  msb = (SerialData[0] << 16);
 81013ae:	4b0c      	ldr	r3, [pc, #48]	; (81013e0 <Read24Bit+0x68>)
 81013b0:	781b      	ldrb	r3, [r3, #0]
 81013b2:	041b      	lsls	r3, r3, #16
 81013b4:	617b      	str	r3, [r7, #20]
  lsb = (SerialData[1] << 8);
 81013b6:	4b0a      	ldr	r3, [pc, #40]	; (81013e0 <Read24Bit+0x68>)
 81013b8:	785b      	ldrb	r3, [r3, #1]
 81013ba:	021b      	lsls	r3, r3, #8
 81013bc:	613b      	str	r3, [r7, #16]
  xlsb = (SerialData[2] >> 4);
 81013be:	4b08      	ldr	r3, [pc, #32]	; (81013e0 <Read24Bit+0x68>)
 81013c0:	789b      	ldrb	r3, [r3, #2]
 81013c2:	091b      	lsrs	r3, r3, #4
 81013c4:	b2db      	uxtb	r3, r3
 81013c6:	60fb      	str	r3, [r7, #12]
  Out = msb | lsb | xlsb;
 81013c8:	697a      	ldr	r2, [r7, #20]
 81013ca:	693b      	ldr	r3, [r7, #16]
 81013cc:	4313      	orrs	r3, r2
 81013ce:	68fa      	ldr	r2, [r7, #12]
 81013d0:	4313      	orrs	r3, r2
 81013d2:	60bb      	str	r3, [r7, #8]
  return Out;
 81013d4:	68bb      	ldr	r3, [r7, #8]
}
 81013d6:	4618      	mov	r0, r3
 81013d8:	3718      	adds	r7, #24
 81013da:	46bd      	mov	sp, r7
 81013dc:	bd80      	pop	{r7, pc}
 81013de:	bf00      	nop
 81013e0:	10000190 	.word	0x10000190
 81013e4:	100003e4 	.word	0x100003e4

081013e8 <Write8Bit>:
 * @brief Reads 8 bit data from register.
 * @param Register The 8 bit register address.
 * @param Data The data to be written to the register.
 */
void Write8Bit(uint8_t Register, uint8_t Data)
{
 81013e8:	b580      	push	{r7, lr}
 81013ea:	b082      	sub	sp, #8
 81013ec:	af00      	add	r7, sp, #0
 81013ee:	4603      	mov	r3, r0
 81013f0:	460a      	mov	r2, r1
 81013f2:	71fb      	strb	r3, [r7, #7]
 81013f4:	4613      	mov	r3, r2
 81013f6:	71bb      	strb	r3, [r7, #6]
  SerialData[0] = Register & BMP280_SPI_WRITE;
 81013f8:	79fb      	ldrb	r3, [r7, #7]
 81013fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81013fe:	b2da      	uxtb	r2, r3
 8101400:	4b09      	ldr	r3, [pc, #36]	; (8101428 <Write8Bit+0x40>)
 8101402:	701a      	strb	r2, [r3, #0]
  SerialData[1] = Data;
 8101404:	4a08      	ldr	r2, [pc, #32]	; (8101428 <Write8Bit+0x40>)
 8101406:	79bb      	ldrb	r3, [r7, #6]
 8101408:	7053      	strb	r3, [r2, #1]
  ResetBMP280NSS();
 810140a:	f7ff ff23 	bl	8101254 <ResetBMP280NSS>
  HAL_SPI_Transmit(&hspi1, SerialData, 2, 30);
 810140e:	231e      	movs	r3, #30
 8101410:	2202      	movs	r2, #2
 8101412:	4905      	ldr	r1, [pc, #20]	; (8101428 <Write8Bit+0x40>)
 8101414:	4805      	ldr	r0, [pc, #20]	; (810142c <Write8Bit+0x44>)
 8101416:	f009 f8af 	bl	810a578 <HAL_SPI_Transmit>
  SetBMP280NSS();
 810141a:	f7ff ff0f 	bl	810123c <SetBMP280NSS>
}
 810141e:	bf00      	nop
 8101420:	3708      	adds	r7, #8
 8101422:	46bd      	mov	sp, r7
 8101424:	bd80      	pop	{r7, pc}
 8101426:	bf00      	nop
 8101428:	10000190 	.word	0x10000190
 810142c:	100003e4 	.word	0x100003e4

08101430 <Read16BitLE>:


uint16_t Read16BitLE(uint8_t reg)
{
 8101430:	b580      	push	{r7, lr}
 8101432:	b084      	sub	sp, #16
 8101434:	af00      	add	r7, sp, #0
 8101436:	4603      	mov	r3, r0
 8101438:	71fb      	strb	r3, [r7, #7]
  uint16_t temp = Read16Bit(reg);
 810143a:	79fb      	ldrb	r3, [r7, #7]
 810143c:	4618      	mov	r0, r3
 810143e:	f7ff ff6b 	bl	8101318 <Read16Bit>
 8101442:	4603      	mov	r3, r0
 8101444:	81fb      	strh	r3, [r7, #14]
  return (temp >> 8) | (temp << 8);
 8101446:	89fb      	ldrh	r3, [r7, #14]
 8101448:	0a1b      	lsrs	r3, r3, #8
 810144a:	b29b      	uxth	r3, r3
 810144c:	b21a      	sxth	r2, r3
 810144e:	89fb      	ldrh	r3, [r7, #14]
 8101450:	021b      	lsls	r3, r3, #8
 8101452:	b21b      	sxth	r3, r3
 8101454:	4313      	orrs	r3, r2
 8101456:	b21b      	sxth	r3, r3
 8101458:	b29b      	uxth	r3, r3
}
 810145a:	4618      	mov	r0, r3
 810145c:	3710      	adds	r7, #16
 810145e:	46bd      	mov	sp, r7
 8101460:	bd80      	pop	{r7, pc}

08101462 <BMP280readCoefficients>:

/*
 *  @brief  Reads the factory-set coefficients
 */
void BMP280readCoefficients(BMP280Handle *baro)
{
 8101462:	b580      	push	{r7, lr}
 8101464:	b082      	sub	sp, #8
 8101466:	af00      	add	r7, sp, #0
 8101468:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16BitLE(dig_T1);
 810146a:	2088      	movs	r0, #136	; 0x88
 810146c:	f7ff ffe0 	bl	8101430 <Read16BitLE>
 8101470:	4603      	mov	r3, r0
 8101472:	461a      	mov	r2, r3
 8101474:	687b      	ldr	r3, [r7, #4]
 8101476:	825a      	strh	r2, [r3, #18]
  baro->comp_vals.dig_T2 = Read16BitLE(dig_T2);
 8101478:	208a      	movs	r0, #138	; 0x8a
 810147a:	f7ff ffd9 	bl	8101430 <Read16BitLE>
 810147e:	4603      	mov	r3, r0
 8101480:	b21a      	sxth	r2, r3
 8101482:	687b      	ldr	r3, [r7, #4]
 8101484:	829a      	strh	r2, [r3, #20]
  baro->comp_vals.dig_T3 = Read16BitLE(dig_T3);
 8101486:	208c      	movs	r0, #140	; 0x8c
 8101488:	f7ff ffd2 	bl	8101430 <Read16BitLE>
 810148c:	4603      	mov	r3, r0
 810148e:	b21a      	sxth	r2, r3
 8101490:	687b      	ldr	r3, [r7, #4]
 8101492:	82da      	strh	r2, [r3, #22]
  baro->comp_vals.dig_P1 = Read16BitLE(dig_P1);
 8101494:	208e      	movs	r0, #142	; 0x8e
 8101496:	f7ff ffcb 	bl	8101430 <Read16BitLE>
 810149a:	4603      	mov	r3, r0
 810149c:	461a      	mov	r2, r3
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_P2 = Read16BitLE(dig_P2);
 81014a2:	2090      	movs	r0, #144	; 0x90
 81014a4:	f7ff ffc4 	bl	8101430 <Read16BitLE>
 81014a8:	4603      	mov	r3, r0
 81014aa:	b21a      	sxth	r2, r3
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_P3 = Read16BitLE(dig_P3);
 81014b0:	2092      	movs	r0, #146	; 0x92
 81014b2:	f7ff ffbd 	bl	8101430 <Read16BitLE>
 81014b6:	4603      	mov	r3, r0
 81014b8:	b21a      	sxth	r2, r3
 81014ba:	687b      	ldr	r3, [r7, #4]
 81014bc:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P4 = Read16BitLE(dig_P4);
 81014be:	2094      	movs	r0, #148	; 0x94
 81014c0:	f7ff ffb6 	bl	8101430 <Read16BitLE>
 81014c4:	4603      	mov	r3, r0
 81014c6:	b21a      	sxth	r2, r3
 81014c8:	687b      	ldr	r3, [r7, #4]
 81014ca:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P5 = Read16BitLE(dig_P5);
 81014cc:	2096      	movs	r0, #150	; 0x96
 81014ce:	f7ff ffaf 	bl	8101430 <Read16BitLE>
 81014d2:	4603      	mov	r3, r0
 81014d4:	b21a      	sxth	r2, r3
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P6 = Read16BitLE(dig_P6);
 81014da:	2098      	movs	r0, #152	; 0x98
 81014dc:	f7ff ffa8 	bl	8101430 <Read16BitLE>
 81014e0:	4603      	mov	r3, r0
 81014e2:	b21a      	sxth	r2, r3
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P7 = Read16BitLE(dig_P7);
 81014e8:	209a      	movs	r0, #154	; 0x9a
 81014ea:	f7ff ffa1 	bl	8101430 <Read16BitLE>
 81014ee:	4603      	mov	r3, r0
 81014f0:	b21a      	sxth	r2, r3
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P8 = Read16BitLE(dig_P8);
 81014f6:	209c      	movs	r0, #156	; 0x9c
 81014f8:	f7ff ff9a 	bl	8101430 <Read16BitLE>
 81014fc:	4603      	mov	r3, r0
 81014fe:	b21a      	sxth	r2, r3
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P9 = Read16BitLE(dig_P9);
 8101504:	209e      	movs	r0, #158	; 0x9e
 8101506:	f7ff ff93 	bl	8101430 <Read16BitLE>
 810150a:	4603      	mov	r3, r0
 810150c:	b21a      	sxth	r2, r3
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8101512:	bf00      	nop
 8101514:	3708      	adds	r7, #8
 8101516:	46bd      	mov	sp, r7
 8101518:	bd80      	pop	{r7, pc}

0810151a <SetConfig>:
 * in order to start measurement of both temp and pressure.
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void SetConfig(BMP280Handle *baro)
{
 810151a:	b580      	push	{r7, lr}
 810151c:	b084      	sub	sp, #16
 810151e:	af00      	add	r7, sp, #0
 8101520:	6078      	str	r0, [r7, #4]
  // Ultra High resolution 26.3 Hz
  baro->config.mode = NORMAL;
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	2203      	movs	r2, #3
 8101526:	731a      	strb	r2, [r3, #12]
  baro->config.pressure_oversampling = X16;
 8101528:	687b      	ldr	r3, [r7, #4]
 810152a:	2205      	movs	r2, #5
 810152c:	73da      	strb	r2, [r3, #15]
  baro->config.temp_oversampling = X2;
 810152e:	687b      	ldr	r3, [r7, #4]
 8101530:	2202      	movs	r2, #2
 8101532:	741a      	strb	r2, [r3, #16]
  uint8_t oversampling_data;
  oversampling_data = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode;
 8101534:	687b      	ldr	r3, [r7, #4]
 8101536:	7c1b      	ldrb	r3, [r3, #16]
 8101538:	015b      	lsls	r3, r3, #5
 810153a:	b25a      	sxtb	r2, r3
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	7bdb      	ldrb	r3, [r3, #15]
 8101540:	009b      	lsls	r3, r3, #2
 8101542:	b25b      	sxtb	r3, r3
 8101544:	4313      	orrs	r3, r2
 8101546:	b25a      	sxtb	r2, r3
 8101548:	687b      	ldr	r3, [r7, #4]
 810154a:	7b1b      	ldrb	r3, [r3, #12]
 810154c:	b25b      	sxtb	r3, r3
 810154e:	4313      	orrs	r3, r2
 8101550:	b25b      	sxtb	r3, r3
 8101552:	73fb      	strb	r3, [r7, #15]

  Write8Bit(BMP280_REG_CTRL_MEAS, oversampling_data);
 8101554:	7bfb      	ldrb	r3, [r7, #15]
 8101556:	4619      	mov	r1, r3
 8101558:	20f4      	movs	r0, #244	; 0xf4
 810155a:	f7ff ff45 	bl	81013e8 <Write8Bit>

  baro->config.IIR_Filter = FILTER_OFF;
 810155e:	687b      	ldr	r3, [r7, #4]
 8101560:	2200      	movs	r2, #0
 8101562:	735a      	strb	r2, [r3, #13]
  baro->config.standby = STANDBY_0_5;
 8101564:	687b      	ldr	r3, [r7, #4]
 8101566:	2200      	movs	r2, #0
 8101568:	739a      	strb	r2, [r3, #14]
  uint8_t filter_config;
  filter_config = baro->config.standby << 5 | baro->config.IIR_Filter;
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	7b9b      	ldrb	r3, [r3, #14]
 810156e:	015b      	lsls	r3, r3, #5
 8101570:	b25a      	sxtb	r2, r3
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	7b5b      	ldrb	r3, [r3, #13]
 8101576:	b25b      	sxtb	r3, r3
 8101578:	4313      	orrs	r3, r2
 810157a:	b25b      	sxtb	r3, r3
 810157c:	73bb      	strb	r3, [r7, #14]

  Write8Bit(BMP280_REG_CONFIG, filter_config);
 810157e:	7bbb      	ldrb	r3, [r7, #14]
 8101580:	4619      	mov	r1, r3
 8101582:	20f5      	movs	r0, #245	; 0xf5
 8101584:	f7ff ff30 	bl	81013e8 <Write8Bit>
}
 8101588:	bf00      	nop
 810158a:	3710      	adds	r7, #16
 810158c:	46bd      	mov	sp, r7
 810158e:	bd80      	pop	{r7, pc}

08101590 <ReadTemp>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void ReadTemp(BMP280Handle *baro)
{
 8101590:	b580      	push	{r7, lr}
 8101592:	b086      	sub	sp, #24
 8101594:	af00      	add	r7, sp, #0
 8101596:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;
  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 8101598:	20fa      	movs	r0, #250	; 0xfa
 810159a:	f7ff feed 	bl	8101378 <Read24Bit>
 810159e:	4603      	mov	r3, r0
 81015a0:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 81015a2:	697b      	ldr	r3, [r7, #20]
 81015a4:	111b      	asrs	r3, r3, #4
 81015a6:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T >> 3) - ((int32_t) baro->comp_vals.dig_T1 << 1))) * ((int32_t) baro->comp_vals.dig_T2)) >> 11;
 81015a8:	697b      	ldr	r3, [r7, #20]
 81015aa:	10da      	asrs	r2, r3, #3
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	8a5b      	ldrh	r3, [r3, #18]
 81015b0:	005b      	lsls	r3, r3, #1
 81015b2:	1ad3      	subs	r3, r2, r3
 81015b4:	687a      	ldr	r2, [r7, #4]
 81015b6:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 81015ba:	fb02 f303 	mul.w	r3, r2, r3
 81015be:	12db      	asrs	r3, r3, #11
 81015c0:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t) baro->comp_vals.dig_T1)) * ((adc_T >> 4) - ((int32_t) baro->comp_vals.dig_T1)))
 81015c2:	697b      	ldr	r3, [r7, #20]
 81015c4:	111b      	asrs	r3, r3, #4
 81015c6:	687a      	ldr	r2, [r7, #4]
 81015c8:	8a52      	ldrh	r2, [r2, #18]
 81015ca:	1a9b      	subs	r3, r3, r2
 81015cc:	697a      	ldr	r2, [r7, #20]
 81015ce:	1112      	asrs	r2, r2, #4
 81015d0:	6879      	ldr	r1, [r7, #4]
 81015d2:	8a49      	ldrh	r1, [r1, #18]
 81015d4:	1a52      	subs	r2, r2, r1
 81015d6:	fb02 f303 	mul.w	r3, r2, r3
      >> 12) * ((int32_t) baro->comp_vals.dig_T3)) >> 14;
 81015da:	131b      	asrs	r3, r3, #12
 81015dc:	687a      	ldr	r2, [r7, #4]
 81015de:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 81015e2:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t) baro->comp_vals.dig_T1)) * ((adc_T >> 4) - ((int32_t) baro->comp_vals.dig_T1)))
 81015e6:	139b      	asrs	r3, r3, #14
 81015e8:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 81015ea:	693a      	ldr	r2, [r7, #16]
 81015ec:	68fb      	ldr	r3, [r7, #12]
 81015ee:	4413      	add	r3, r2
 81015f0:	4a0d      	ldr	r2, [pc, #52]	; (8101628 <ReadTemp+0x98>)
 81015f2:	6013      	str	r3, [r2, #0]
  float T = (t_fine * 5 + 128) >> 8;
 81015f4:	4b0c      	ldr	r3, [pc, #48]	; (8101628 <ReadTemp+0x98>)
 81015f6:	681a      	ldr	r2, [r3, #0]
 81015f8:	4613      	mov	r3, r2
 81015fa:	009b      	lsls	r3, r3, #2
 81015fc:	4413      	add	r3, r2
 81015fe:	3380      	adds	r3, #128	; 0x80
 8101600:	121b      	asrs	r3, r3, #8
 8101602:	ee07 3a90 	vmov	s15, r3
 8101606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810160a:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T / 100;
 810160e:	ed97 7a02 	vldr	s14, [r7, #8]
 8101612:	eddf 6a06 	vldr	s13, [pc, #24]	; 810162c <ReadTemp+0x9c>
 8101616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810161a:	687b      	ldr	r3, [r7, #4]
 810161c:	edc3 7a00 	vstr	s15, [r3]

}
 8101620:	bf00      	nop
 8101622:	3718      	adds	r7, #24
 8101624:	46bd      	mov	sp, r7
 8101626:	bd80      	pop	{r7, pc}
 8101628:	10000194 	.word	0x10000194
 810162c:	42c80000 	.word	0x42c80000

08101630 <ReadPressure>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void ReadPressure(BMP280Handle *baro)
{
 8101630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101634:	b09c      	sub	sp, #112	; 0x70
 8101636:	af00      	add	r7, sp, #0
 8101638:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 810163a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 810163c:	f7ff ffa8 	bl	8101590 <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 8101640:	20f7      	movs	r0, #247	; 0xf7
 8101642:	f7ff fe99 	bl	8101378 <Read24Bit>
 8101646:	4603      	mov	r3, r0
 8101648:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>= 4;
 810164a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810164c:	111b      	asrs	r3, r3, #4
 810164e:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t) t_fine) - 128000;
 8101650:	4b6b      	ldr	r3, [pc, #428]	; (8101800 <ReadPressure+0x1d0>)
 8101652:	681b      	ldr	r3, [r3, #0]
 8101654:	461a      	mov	r2, r3
 8101656:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810165a:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 810165e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8101662:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t) baro->comp_vals.dig_P6;
 8101666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810166a:	fb03 f102 	mul.w	r1, r3, r2
 810166e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101672:	fb03 f302 	mul.w	r3, r3, r2
 8101676:	18ca      	adds	r2, r1, r3
 8101678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810167a:	fba3 4503 	umull	r4, r5, r3, r3
 810167e:	1953      	adds	r3, r2, r5
 8101680:	461d      	mov	r5, r3
 8101682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101684:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8101688:	b21a      	sxth	r2, r3
 810168a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810168e:	fb02 f005 	mul.w	r0, r2, r5
 8101692:	fb04 f103 	mul.w	r1, r4, r3
 8101696:	4401      	add	r1, r0
 8101698:	fba4 2302 	umull	r2, r3, r4, r2
 810169c:	4419      	add	r1, r3
 810169e:	460b      	mov	r3, r1
 81016a0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 81016a4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t) baro->comp_vals.dig_P5) << 17);
 81016a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016aa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 81016ae:	b21a      	sxth	r2, r3
 81016b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81016b4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81016b6:	fb03 f001 	mul.w	r0, r3, r1
 81016ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81016bc:	fb02 f101 	mul.w	r1, r2, r1
 81016c0:	4408      	add	r0, r1
 81016c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81016c4:	fba1 2302 	umull	r2, r3, r1, r2
 81016c8:	18c1      	adds	r1, r0, r3
 81016ca:	460b      	mov	r3, r1
 81016cc:	f04f 0000 	mov.w	r0, #0
 81016d0:	f04f 0100 	mov.w	r1, #0
 81016d4:	0459      	lsls	r1, r3, #17
 81016d6:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 81016da:	0450      	lsls	r0, r2, #17
 81016dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81016e0:	eb12 0800 	adds.w	r8, r2, r0
 81016e4:	eb43 0901 	adc.w	r9, r3, r1
 81016e8:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t) baro->comp_vals.dig_P4) << 35);
 81016ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016ee:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 81016f2:	b21a      	sxth	r2, r3
 81016f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81016f8:	f04f 0000 	mov.w	r0, #0
 81016fc:	f04f 0100 	mov.w	r1, #0
 8101700:	00d1      	lsls	r1, r2, #3
 8101702:	2000      	movs	r0, #0
 8101704:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101708:	1814      	adds	r4, r2, r0
 810170a:	61bc      	str	r4, [r7, #24]
 810170c:	414b      	adcs	r3, r1
 810170e:	61fb      	str	r3, [r7, #28]
 8101710:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8101714:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t) baro->comp_vals.dig_P3) >> 8) + ((var1 * (int64_t) baro->comp_vals.dig_P2) << 12);
 8101718:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810171a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810171c:	fb03 f102 	mul.w	r1, r3, r2
 8101720:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101724:	fb03 f302 	mul.w	r3, r3, r2
 8101728:	18ca      	adds	r2, r1, r3
 810172a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810172c:	fba3 4503 	umull	r4, r5, r3, r3
 8101730:	1953      	adds	r3, r2, r5
 8101732:	461d      	mov	r5, r3
 8101734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101736:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 810173a:	b21a      	sxth	r2, r3
 810173c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101740:	fb02 f005 	mul.w	r0, r2, r5
 8101744:	fb04 f103 	mul.w	r1, r4, r3
 8101748:	4401      	add	r1, r0
 810174a:	fba4 2302 	umull	r2, r3, r4, r2
 810174e:	4419      	add	r1, r3
 8101750:	460b      	mov	r3, r1
 8101752:	f04f 0800 	mov.w	r8, #0
 8101756:	f04f 0900 	mov.w	r9, #0
 810175a:	ea4f 2812 	mov.w	r8, r2, lsr #8
 810175e:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8101762:	ea4f 2923 	mov.w	r9, r3, asr #8
 8101766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101768:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 810176c:	b21a      	sxth	r2, r3
 810176e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101772:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101774:	fb03 f001 	mul.w	r0, r3, r1
 8101778:	6e79      	ldr	r1, [r7, #100]	; 0x64
 810177a:	fb02 f101 	mul.w	r1, r2, r1
 810177e:	1844      	adds	r4, r0, r1
 8101780:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101782:	fba1 0102 	umull	r0, r1, r1, r2
 8101786:	1863      	adds	r3, r4, r1
 8101788:	4619      	mov	r1, r3
 810178a:	f04f 0200 	mov.w	r2, #0
 810178e:	f04f 0300 	mov.w	r3, #0
 8101792:	030b      	lsls	r3, r1, #12
 8101794:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8101798:	0302      	lsls	r2, r0, #12
 810179a:	eb18 0102 	adds.w	r1, r8, r2
 810179e:	6139      	str	r1, [r7, #16]
 81017a0:	eb49 0303 	adc.w	r3, r9, r3
 81017a4:	617b      	str	r3, [r7, #20]
 81017a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 81017aa:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) baro->comp_vals.dig_P1) >> 33;
 81017ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81017b2:	1c11      	adds	r1, r2, #0
 81017b4:	6439      	str	r1, [r7, #64]	; 0x40
 81017b6:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 81017ba:	647b      	str	r3, [r7, #68]	; 0x44
 81017bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017be:	8b1b      	ldrh	r3, [r3, #24]
 81017c0:	b29a      	uxth	r2, r3
 81017c2:	f04f 0300 	mov.w	r3, #0
 81017c6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 81017ca:	4629      	mov	r1, r5
 81017cc:	fb02 f001 	mul.w	r0, r2, r1
 81017d0:	4621      	mov	r1, r4
 81017d2:	fb01 f103 	mul.w	r1, r1, r3
 81017d6:	4401      	add	r1, r0
 81017d8:	4620      	mov	r0, r4
 81017da:	fba0 2302 	umull	r2, r3, r0, r2
 81017de:	4419      	add	r1, r3
 81017e0:	460b      	mov	r3, r1
 81017e2:	f04f 0000 	mov.w	r0, #0
 81017e6:	f04f 0100 	mov.w	r1, #0
 81017ea:	1058      	asrs	r0, r3, #1
 81017ec:	17d9      	asrs	r1, r3, #31
 81017ee:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

  if (var1 == 0)
 81017f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81017f6:	4313      	orrs	r3, r2
 81017f8:	f000 80f5 	beq.w	81019e6 <ReadPressure+0x3b6>
 81017fc:	e004      	b.n	8101808 <ReadPressure+0x1d8>
 81017fe:	bf00      	nop
 8101800:	10000194 	.word	0x10000194
 8101804:	43800000 	.word	0x43800000
  {
    return; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 8101808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810180a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810180e:	461a      	mov	r2, r3
 8101810:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101814:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  p = (((p << 31) - var2) * 3125) / var1;
 8101818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810181a:	105b      	asrs	r3, r3, #1
 810181c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810181e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101820:	07db      	lsls	r3, r3, #31
 8101822:	63bb      	str	r3, [r7, #56]	; 0x38
 8101824:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101828:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 810182c:	4621      	mov	r1, r4
 810182e:	ebb1 0a02 	subs.w	sl, r1, r2
 8101832:	4629      	mov	r1, r5
 8101834:	eb61 0b03 	sbc.w	fp, r1, r3
 8101838:	4652      	mov	r2, sl
 810183a:	465b      	mov	r3, fp
 810183c:	1891      	adds	r1, r2, r2
 810183e:	60b9      	str	r1, [r7, #8]
 8101840:	415b      	adcs	r3, r3
 8101842:	60fb      	str	r3, [r7, #12]
 8101844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101848:	eb12 020a 	adds.w	r2, r2, sl
 810184c:	eb43 030b 	adc.w	r3, r3, fp
 8101850:	f04f 0000 	mov.w	r0, #0
 8101854:	f04f 0100 	mov.w	r1, #0
 8101858:	0199      	lsls	r1, r3, #6
 810185a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 810185e:	0190      	lsls	r0, r2, #6
 8101860:	1812      	adds	r2, r2, r0
 8101862:	eb41 0303 	adc.w	r3, r1, r3
 8101866:	f04f 0000 	mov.w	r0, #0
 810186a:	f04f 0100 	mov.w	r1, #0
 810186e:	0099      	lsls	r1, r3, #2
 8101870:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101874:	0090      	lsls	r0, r2, #2
 8101876:	4602      	mov	r2, r0
 8101878:	460b      	mov	r3, r1
 810187a:	eb12 020a 	adds.w	r2, r2, sl
 810187e:	eb43 030b 	adc.w	r3, r3, fp
 8101882:	f04f 0000 	mov.w	r0, #0
 8101886:	f04f 0100 	mov.w	r1, #0
 810188a:	0099      	lsls	r1, r3, #2
 810188c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101890:	0090      	lsls	r0, r2, #2
 8101892:	4602      	mov	r2, r0
 8101894:	460b      	mov	r3, r1
 8101896:	eb12 010a 	adds.w	r1, r2, sl
 810189a:	6339      	str	r1, [r7, #48]	; 0x30
 810189c:	eb43 030b 	adc.w	r3, r3, fp
 81018a0:	637b      	str	r3, [r7, #52]	; 0x34
 81018a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81018a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81018aa:	f7ff fadf 	bl	8100e6c <__aeabi_ldivmod>
 81018ae:	4602      	mov	r2, r0
 81018b0:	460b      	mov	r3, r1
 81018b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  var1 = (((int64_t) baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 81018b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81018b8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 81018bc:	b218      	sxth	r0, r3
 81018be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 81018c2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81018c6:	f04f 0200 	mov.w	r2, #0
 81018ca:	f04f 0300 	mov.w	r3, #0
 81018ce:	0b62      	lsrs	r2, r4, #13
 81018d0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81018d4:	136b      	asrs	r3, r5, #13
 81018d6:	fb02 f501 	mul.w	r5, r2, r1
 81018da:	fb00 f403 	mul.w	r4, r0, r3
 81018de:	442c      	add	r4, r5
 81018e0:	fba0 0102 	umull	r0, r1, r0, r2
 81018e4:	1863      	adds	r3, r4, r1
 81018e6:	4619      	mov	r1, r3
 81018e8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81018ec:	f04f 0200 	mov.w	r2, #0
 81018f0:	f04f 0300 	mov.w	r3, #0
 81018f4:	0b62      	lsrs	r2, r4, #13
 81018f6:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81018fa:	136b      	asrs	r3, r5, #13
 81018fc:	fb02 f501 	mul.w	r5, r2, r1
 8101900:	fb00 f403 	mul.w	r4, r0, r3
 8101904:	442c      	add	r4, r5
 8101906:	fba0 0102 	umull	r0, r1, r0, r2
 810190a:	1863      	adds	r3, r4, r1
 810190c:	4619      	mov	r1, r3
 810190e:	f04f 0200 	mov.w	r2, #0
 8101912:	f04f 0300 	mov.w	r3, #0
 8101916:	0e42      	lsrs	r2, r0, #25
 8101918:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 810191c:	164b      	asrs	r3, r1, #25
 810191e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  var2 = (((int64_t) baro->comp_vals.dig_P8) * p) >> 19;
 8101922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101924:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8101928:	b21a      	sxth	r2, r3
 810192a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810192e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8101930:	fb03 f001 	mul.w	r0, r3, r1
 8101934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8101936:	fb02 f101 	mul.w	r1, r2, r1
 810193a:	1844      	adds	r4, r0, r1
 810193c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810193e:	fba1 0102 	umull	r0, r1, r1, r2
 8101942:	1863      	adds	r3, r4, r1
 8101944:	4619      	mov	r1, r3
 8101946:	f04f 0200 	mov.w	r2, #0
 810194a:	f04f 0300 	mov.w	r3, #0
 810194e:	0cc2      	lsrs	r2, r0, #19
 8101950:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8101954:	14cb      	asrs	r3, r1, #19
 8101956:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

  p = ((p + var1 + var2) >> 8) + (((int64_t) baro->comp_vals.dig_P7) << 4);
 810195a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 810195e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101962:	1884      	adds	r4, r0, r2
 8101964:	62bc      	str	r4, [r7, #40]	; 0x28
 8101966:	eb41 0303 	adc.w	r3, r1, r3
 810196a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810196c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101970:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101974:	4621      	mov	r1, r4
 8101976:	1889      	adds	r1, r1, r2
 8101978:	6239      	str	r1, [r7, #32]
 810197a:	4629      	mov	r1, r5
 810197c:	eb43 0101 	adc.w	r1, r3, r1
 8101980:	6279      	str	r1, [r7, #36]	; 0x24
 8101982:	f04f 0000 	mov.w	r0, #0
 8101986:	f04f 0100 	mov.w	r1, #0
 810198a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 810198e:	4623      	mov	r3, r4
 8101990:	0a18      	lsrs	r0, r3, #8
 8101992:	462b      	mov	r3, r5
 8101994:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8101998:	462b      	mov	r3, r5
 810199a:	1219      	asrs	r1, r3, #8
 810199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810199e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 81019a2:	b21c      	sxth	r4, r3
 81019a4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 81019a8:	f04f 0200 	mov.w	r2, #0
 81019ac:	f04f 0300 	mov.w	r3, #0
 81019b0:	012b      	lsls	r3, r5, #4
 81019b2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 81019b6:	0122      	lsls	r2, r4, #4
 81019b8:	1884      	adds	r4, r0, r2
 81019ba:	603c      	str	r4, [r7, #0]
 81019bc:	eb41 0303 	adc.w	r3, r1, r3
 81019c0:	607b      	str	r3, [r7, #4]
 81019c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 81019c6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

  baro->pressure = (float) p / 256;
 81019ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81019ce:	f7ff fa0f 	bl	8100df0 <__aeabi_l2f>
 81019d2:	ee06 0a90 	vmov	s13, r0
 81019d6:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8101804 <ReadPressure+0x1d4>
 81019da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81019de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81019e0:	edc3 7a01 	vstr	s15, [r3, #4]
 81019e4:	e000      	b.n	81019e8 <ReadPressure+0x3b8>
    return; // avoid exception caused by division by zero
 81019e6:	bf00      	nop

}
 81019e8:	3770      	adds	r7, #112	; 0x70
 81019ea:	46bd      	mov	sp, r7
 81019ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

081019f0 <ReadAltitude>:
 * sea level.
 * @param baro a pointer to the BMP280 struct
 * @returns nothing.
 */
void ReadAltitude(BMP280Handle *baro)
{
 81019f0:	b580      	push	{r7, lr}
 81019f2:	b084      	sub	sp, #16
 81019f4:	af00      	add	r7, sp, #0
 81019f6:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 81019f8:	f04f 0300 	mov.w	r3, #0
 81019fc:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	685b      	ldr	r3, [r3, #4]
 8101a02:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure / SEA_LEVEL_PRESSURE), (1 / 5.255)));
 8101a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8101a08:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8101aa0 <ReadAltitude+0xb0>
 8101a0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101a10:	ee16 0a90 	vmov	r0, s13
 8101a14:	f7fe fdc4 	bl	81005a0 <__aeabi_f2d>
 8101a18:	4602      	mov	r2, r0
 8101a1a:	460b      	mov	r3, r1
 8101a1c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8101a90 <ReadAltitude+0xa0>
 8101a20:	ec43 2b10 	vmov	d0, r2, r3
 8101a24:	f00b fd62 	bl	810d4ec <pow>
 8101a28:	ec53 2b10 	vmov	r2, r3, d0
 8101a2c:	f04f 0000 	mov.w	r0, #0
 8101a30:	491c      	ldr	r1, [pc, #112]	; (8101aa4 <ReadAltitude+0xb4>)
 8101a32:	f7fe fc55 	bl	81002e0 <__aeabi_dsub>
 8101a36:	4602      	mov	r2, r0
 8101a38:	460b      	mov	r3, r1
 8101a3a:	4610      	mov	r0, r2
 8101a3c:	4619      	mov	r1, r3
 8101a3e:	a316      	add	r3, pc, #88	; (adr r3, 8101a98 <ReadAltitude+0xa8>)
 8101a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a44:	f7fe fe04 	bl	8100650 <__aeabi_dmul>
 8101a48:	4602      	mov	r2, r0
 8101a4a:	460b      	mov	r3, r1
 8101a4c:	4610      	mov	r0, r2
 8101a4e:	4619      	mov	r1, r3
 8101a50:	f7ff f8ae 	bl	8100bb0 <__aeabi_d2f>
 8101a54:	4603      	mov	r3, r0
 8101a56:	60fb      	str	r3, [r7, #12]
  if ((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 8101a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8101a5c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8101aa8 <ReadAltitude+0xb8>
 8101a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101a68:	d90c      	bls.n	8101a84 <ReadAltitude+0x94>
 8101a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8101a6e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8101aac <ReadAltitude+0xbc>
 8101a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101a7a:	da03      	bge.n	8101a84 <ReadAltitude+0x94>
  {
    return;
  }
  baro->altitude = altitude;
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	68fa      	ldr	r2, [r7, #12]
 8101a80:	609a      	str	r2, [r3, #8]
 8101a82:	e000      	b.n	8101a86 <ReadAltitude+0x96>
    return;
 8101a84:	bf00      	nop
}
 8101a86:	3710      	adds	r7, #16
 8101a88:	46bd      	mov	sp, r7
 8101a8a:	bd80      	pop	{r7, pc}
 8101a8c:	f3af 8000 	nop.w
 8101a90:	ccd9456c 	.word	0xccd9456c
 8101a94:	3fc85b95 	.word	0x3fc85b95
 8101a98:	00000000 	.word	0x00000000
 8101a9c:	40e5a540 	.word	0x40e5a540
 8101aa0:	47c5e680 	.word	0x47c5e680
 8101aa4:	3ff00000 	.word	0x3ff00000
 8101aa8:	c3fa0000 	.word	0xc3fa0000
 8101aac:	460ca000 	.word	0x460ca000

08101ab0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101ab0:	b580      	push	{r7, lr}
 8101ab2:	b082      	sub	sp, #8
 8101ab4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101ab6:	4b2d      	ldr	r3, [pc, #180]	; (8101b6c <MX_DMA_Init+0xbc>)
 8101ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101abc:	4a2b      	ldr	r2, [pc, #172]	; (8101b6c <MX_DMA_Init+0xbc>)
 8101abe:	f043 0301 	orr.w	r3, r3, #1
 8101ac2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ac6:	4b29      	ldr	r3, [pc, #164]	; (8101b6c <MX_DMA_Init+0xbc>)
 8101ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101acc:	f003 0301 	and.w	r3, r3, #1
 8101ad0:	607b      	str	r3, [r7, #4]
 8101ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101ad4:	4b25      	ldr	r3, [pc, #148]	; (8101b6c <MX_DMA_Init+0xbc>)
 8101ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ada:	4a24      	ldr	r2, [pc, #144]	; (8101b6c <MX_DMA_Init+0xbc>)
 8101adc:	f043 0302 	orr.w	r3, r3, #2
 8101ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ae4:	4b21      	ldr	r3, [pc, #132]	; (8101b6c <MX_DMA_Init+0xbc>)
 8101ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101aea:	f003 0302 	and.w	r3, r3, #2
 8101aee:	603b      	str	r3, [r7, #0]
 8101af0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101af2:	2200      	movs	r2, #0
 8101af4:	2100      	movs	r1, #0
 8101af6:	200b      	movs	r0, #11
 8101af8:	f002 fa0d 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101afc:	200b      	movs	r0, #11
 8101afe:	f002 fa24 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101b02:	2200      	movs	r2, #0
 8101b04:	2100      	movs	r1, #0
 8101b06:	200c      	movs	r0, #12
 8101b08:	f002 fa05 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101b0c:	200c      	movs	r0, #12
 8101b0e:	f002 fa1c 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101b12:	2200      	movs	r2, #0
 8101b14:	2100      	movs	r1, #0
 8101b16:	200d      	movs	r0, #13
 8101b18:	f002 f9fd 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101b1c:	200d      	movs	r0, #13
 8101b1e:	f002 fa14 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101b22:	2200      	movs	r2, #0
 8101b24:	2100      	movs	r1, #0
 8101b26:	200e      	movs	r0, #14
 8101b28:	f002 f9f5 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101b2c:	200e      	movs	r0, #14
 8101b2e:	f002 fa0c 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101b32:	2200      	movs	r2, #0
 8101b34:	2100      	movs	r1, #0
 8101b36:	200f      	movs	r0, #15
 8101b38:	f002 f9ed 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101b3c:	200f      	movs	r0, #15
 8101b3e:	f002 fa04 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101b42:	2200      	movs	r2, #0
 8101b44:	2100      	movs	r1, #0
 8101b46:	202f      	movs	r0, #47	; 0x2f
 8101b48:	f002 f9e5 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101b4c:	202f      	movs	r0, #47	; 0x2f
 8101b4e:	f002 f9fc 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101b52:	2200      	movs	r2, #0
 8101b54:	2100      	movs	r1, #0
 8101b56:	2038      	movs	r0, #56	; 0x38
 8101b58:	f002 f9dd 	bl	8103f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101b5c:	2038      	movs	r0, #56	; 0x38
 8101b5e:	f002 f9f4 	bl	8103f4a <HAL_NVIC_EnableIRQ>

}
 8101b62:	bf00      	nop
 8101b64:	3708      	adds	r7, #8
 8101b66:	46bd      	mov	sp, r7
 8101b68:	bd80      	pop	{r7, pc}
 8101b6a:	bf00      	nop
 8101b6c:	58024400 	.word	0x58024400

08101b70 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101b70:	b580      	push	{r7, lr}
 8101b72:	b08a      	sub	sp, #40	; 0x28
 8101b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b76:	f107 0314 	add.w	r3, r7, #20
 8101b7a:	2200      	movs	r2, #0
 8101b7c:	601a      	str	r2, [r3, #0]
 8101b7e:	605a      	str	r2, [r3, #4]
 8101b80:	609a      	str	r2, [r3, #8]
 8101b82:	60da      	str	r2, [r3, #12]
 8101b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b86:	4b29      	ldr	r3, [pc, #164]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b8c:	4a27      	ldr	r2, [pc, #156]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101b8e:	f043 0301 	orr.w	r3, r3, #1
 8101b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b96:	4b25      	ldr	r3, [pc, #148]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b9c:	f003 0301 	and.w	r3, r3, #1
 8101ba0:	613b      	str	r3, [r7, #16]
 8101ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101ba4:	4b21      	ldr	r3, [pc, #132]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101baa:	4a20      	ldr	r2, [pc, #128]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101bac:	f043 0320 	orr.w	r3, r3, #32
 8101bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bb4:	4b1d      	ldr	r3, [pc, #116]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bba:	f003 0320 	and.w	r3, r3, #32
 8101bbe:	60fb      	str	r3, [r7, #12]
 8101bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101bc2:	4b1a      	ldr	r3, [pc, #104]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bc8:	4a18      	ldr	r2, [pc, #96]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101bca:	f043 0308 	orr.w	r3, r3, #8
 8101bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bd2:	4b16      	ldr	r3, [pc, #88]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bd8:	f003 0308 	and.w	r3, r3, #8
 8101bdc:	60bb      	str	r3, [r7, #8]
 8101bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101be0:	4b12      	ldr	r3, [pc, #72]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101be6:	4a11      	ldr	r2, [pc, #68]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101be8:	f043 0302 	orr.w	r3, r3, #2
 8101bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bf0:	4b0e      	ldr	r3, [pc, #56]	; (8101c2c <MX_GPIO_Init+0xbc>)
 8101bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf6:	f003 0302 	and.w	r3, r3, #2
 8101bfa:	607b      	str	r3, [r7, #4]
 8101bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101bfe:	2201      	movs	r2, #1
 8101c00:	2110      	movs	r1, #16
 8101c02:	480b      	ldr	r0, [pc, #44]	; (8101c30 <MX_GPIO_Init+0xc0>)
 8101c04:	f005 f9c6 	bl	8106f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c08:	2310      	movs	r3, #16
 8101c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c0c:	2301      	movs	r3, #1
 8101c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c10:	2300      	movs	r3, #0
 8101c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c14:	2300      	movs	r3, #0
 8101c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c18:	f107 0314 	add.w	r3, r7, #20
 8101c1c:	4619      	mov	r1, r3
 8101c1e:	4804      	ldr	r0, [pc, #16]	; (8101c30 <MX_GPIO_Init+0xc0>)
 8101c20:	f005 f808 	bl	8106c34 <HAL_GPIO_Init>

}
 8101c24:	bf00      	nop
 8101c26:	3728      	adds	r7, #40	; 0x28
 8101c28:	46bd      	mov	sp, r7
 8101c2a:	bd80      	pop	{r7, pc}
 8101c2c:	58024400 	.word	0x58024400
 8101c30:	58020000 	.word	0x58020000

08101c34 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101c34:	b580      	push	{r7, lr}
 8101c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101c38:	4b1b      	ldr	r3, [pc, #108]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c3a:	4a1c      	ldr	r2, [pc, #112]	; (8101cac <MX_I2C1_Init+0x78>)
 8101c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101c3e:	4b1a      	ldr	r3, [pc, #104]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c40:	4a1b      	ldr	r2, [pc, #108]	; (8101cb0 <MX_I2C1_Init+0x7c>)
 8101c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101c44:	4b18      	ldr	r3, [pc, #96]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c46:	2200      	movs	r2, #0
 8101c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101c4a:	4b17      	ldr	r3, [pc, #92]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c4c:	2201      	movs	r2, #1
 8101c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101c50:	4b15      	ldr	r3, [pc, #84]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c52:	2200      	movs	r2, #0
 8101c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101c56:	4b14      	ldr	r3, [pc, #80]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c58:	2200      	movs	r2, #0
 8101c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101c5c:	4b12      	ldr	r3, [pc, #72]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c5e:	2200      	movs	r2, #0
 8101c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101c62:	4b11      	ldr	r3, [pc, #68]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c64:	2200      	movs	r2, #0
 8101c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101c68:	4b0f      	ldr	r3, [pc, #60]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c6a:	2200      	movs	r2, #0
 8101c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101c6e:	480e      	ldr	r0, [pc, #56]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c70:	f005 f9ea 	bl	8107048 <HAL_I2C_Init>
 8101c74:	4603      	mov	r3, r0
 8101c76:	2b00      	cmp	r3, #0
 8101c78:	d001      	beq.n	8101c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101c7a:	f000 ffa7 	bl	8102bcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101c7e:	2100      	movs	r1, #0
 8101c80:	4809      	ldr	r0, [pc, #36]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c82:	f006 fd1d 	bl	81086c0 <HAL_I2CEx_ConfigAnalogFilter>
 8101c86:	4603      	mov	r3, r0
 8101c88:	2b00      	cmp	r3, #0
 8101c8a:	d001      	beq.n	8101c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101c8c:	f000 ff9e 	bl	8102bcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101c90:	2100      	movs	r1, #0
 8101c92:	4805      	ldr	r0, [pc, #20]	; (8101ca8 <MX_I2C1_Init+0x74>)
 8101c94:	f006 fd5f 	bl	8108756 <HAL_I2CEx_ConfigDigitalFilter>
 8101c98:	4603      	mov	r3, r0
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d001      	beq.n	8101ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101c9e:	f000 ff95 	bl	8102bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101ca2:	bf00      	nop
 8101ca4:	bd80      	pop	{r7, pc}
 8101ca6:	bf00      	nop
 8101ca8:	10000210 	.word	0x10000210
 8101cac:	40005400 	.word	0x40005400
 8101cb0:	307075b1 	.word	0x307075b1

08101cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101cb4:	b580      	push	{r7, lr}
 8101cb6:	b0b8      	sub	sp, #224	; 0xe0
 8101cb8:	af00      	add	r7, sp, #0
 8101cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101cc0:	2200      	movs	r2, #0
 8101cc2:	601a      	str	r2, [r3, #0]
 8101cc4:	605a      	str	r2, [r3, #4]
 8101cc6:	609a      	str	r2, [r3, #8]
 8101cc8:	60da      	str	r2, [r3, #12]
 8101cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ccc:	f107 0310 	add.w	r3, r7, #16
 8101cd0:	22bc      	movs	r2, #188	; 0xbc
 8101cd2:	2100      	movs	r1, #0
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f00b fc01 	bl	810d4dc <memset>
  if(i2cHandle->Instance==I2C1)
 8101cda:	687b      	ldr	r3, [r7, #4]
 8101cdc:	681b      	ldr	r3, [r3, #0]
 8101cde:	4a5b      	ldr	r2, [pc, #364]	; (8101e4c <HAL_I2C_MspInit+0x198>)
 8101ce0:	4293      	cmp	r3, r2
 8101ce2:	f040 80af 	bne.w	8101e44 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101ce6:	2308      	movs	r3, #8
 8101ce8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101cea:	2300      	movs	r3, #0
 8101cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cf0:	f107 0310 	add.w	r3, r7, #16
 8101cf4:	4618      	mov	r0, r3
 8101cf6:	f006 ffdb 	bl	8108cb0 <HAL_RCCEx_PeriphCLKConfig>
 8101cfa:	4603      	mov	r3, r0
 8101cfc:	2b00      	cmp	r3, #0
 8101cfe:	d001      	beq.n	8101d04 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101d00:	f000 ff64 	bl	8102bcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d04:	4b52      	ldr	r3, [pc, #328]	; (8101e50 <HAL_I2C_MspInit+0x19c>)
 8101d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d0a:	4a51      	ldr	r2, [pc, #324]	; (8101e50 <HAL_I2C_MspInit+0x19c>)
 8101d0c:	f043 0302 	orr.w	r3, r3, #2
 8101d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d14:	4b4e      	ldr	r3, [pc, #312]	; (8101e50 <HAL_I2C_MspInit+0x19c>)
 8101d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d1a:	f003 0302 	and.w	r3, r3, #2
 8101d1e:	60fb      	str	r3, [r7, #12]
 8101d20:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101d2a:	2312      	movs	r3, #18
 8101d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d30:	2300      	movs	r3, #0
 8101d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d36:	2300      	movs	r3, #0
 8101d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101d3c:	2304      	movs	r3, #4
 8101d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d46:	4619      	mov	r1, r3
 8101d48:	4842      	ldr	r0, [pc, #264]	; (8101e54 <HAL_I2C_MspInit+0x1a0>)
 8101d4a:	f004 ff73 	bl	8106c34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d4e:	4b40      	ldr	r3, [pc, #256]	; (8101e50 <HAL_I2C_MspInit+0x19c>)
 8101d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d54:	4a3e      	ldr	r2, [pc, #248]	; (8101e50 <HAL_I2C_MspInit+0x19c>)
 8101d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d5e:	4b3c      	ldr	r3, [pc, #240]	; (8101e50 <HAL_I2C_MspInit+0x19c>)
 8101d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101d68:	60bb      	str	r3, [r7, #8]
 8101d6a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101d6c:	4b3a      	ldr	r3, [pc, #232]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d6e:	4a3b      	ldr	r2, [pc, #236]	; (8101e5c <HAL_I2C_MspInit+0x1a8>)
 8101d70:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101d72:	4b39      	ldr	r3, [pc, #228]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d74:	2221      	movs	r2, #33	; 0x21
 8101d76:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101d78:	4b37      	ldr	r3, [pc, #220]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d7a:	2200      	movs	r2, #0
 8101d7c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101d7e:	4b36      	ldr	r3, [pc, #216]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d80:	2200      	movs	r2, #0
 8101d82:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101d84:	4b34      	ldr	r3, [pc, #208]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101d8a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101d8c:	4b32      	ldr	r3, [pc, #200]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d8e:	2200      	movs	r2, #0
 8101d90:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101d92:	4b31      	ldr	r3, [pc, #196]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d94:	2200      	movs	r2, #0
 8101d96:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101d98:	4b2f      	ldr	r3, [pc, #188]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101d9a:	2200      	movs	r2, #0
 8101d9c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d9e:	4b2e      	ldr	r3, [pc, #184]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101da4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101da6:	4b2c      	ldr	r3, [pc, #176]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101da8:	2200      	movs	r2, #0
 8101daa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101dac:	482a      	ldr	r0, [pc, #168]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101dae:	f002 f8fb 	bl	8103fa8 <HAL_DMA_Init>
 8101db2:	4603      	mov	r3, r0
 8101db4:	2b00      	cmp	r3, #0
 8101db6:	d001      	beq.n	8101dbc <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101db8:	f000 ff08 	bl	8102bcc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	4a26      	ldr	r2, [pc, #152]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101dc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8101dc2:	4a25      	ldr	r2, [pc, #148]	; (8101e58 <HAL_I2C_MspInit+0x1a4>)
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101dc8:	4b25      	ldr	r3, [pc, #148]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101dca:	4a26      	ldr	r2, [pc, #152]	; (8101e64 <HAL_I2C_MspInit+0x1b0>)
 8101dcc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101dce:	4b24      	ldr	r3, [pc, #144]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101dd0:	2222      	movs	r2, #34	; 0x22
 8101dd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101dd4:	4b22      	ldr	r3, [pc, #136]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101dd6:	2240      	movs	r2, #64	; 0x40
 8101dd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101dda:	4b21      	ldr	r3, [pc, #132]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101ddc:	2200      	movs	r2, #0
 8101dde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101de0:	4b1f      	ldr	r3, [pc, #124]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101de6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101de8:	4b1d      	ldr	r3, [pc, #116]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101dea:	2200      	movs	r2, #0
 8101dec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101dee:	4b1c      	ldr	r3, [pc, #112]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101df0:	2200      	movs	r2, #0
 8101df2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101df4:	4b1a      	ldr	r3, [pc, #104]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101df6:	2200      	movs	r2, #0
 8101df8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101dfa:	4b19      	ldr	r3, [pc, #100]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e02:	4b17      	ldr	r3, [pc, #92]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101e04:	2200      	movs	r2, #0
 8101e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101e08:	4815      	ldr	r0, [pc, #84]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101e0a:	f002 f8cd 	bl	8103fa8 <HAL_DMA_Init>
 8101e0e:	4603      	mov	r3, r0
 8101e10:	2b00      	cmp	r3, #0
 8101e12:	d001      	beq.n	8101e18 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101e14:	f000 feda 	bl	8102bcc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	4a11      	ldr	r2, [pc, #68]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8101e1e:	4a10      	ldr	r2, [pc, #64]	; (8101e60 <HAL_I2C_MspInit+0x1ac>)
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101e24:	2200      	movs	r2, #0
 8101e26:	2100      	movs	r1, #0
 8101e28:	201f      	movs	r0, #31
 8101e2a:	f002 f874 	bl	8103f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101e2e:	201f      	movs	r0, #31
 8101e30:	f002 f88b 	bl	8103f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101e34:	2200      	movs	r2, #0
 8101e36:	2100      	movs	r1, #0
 8101e38:	2020      	movs	r0, #32
 8101e3a:	f002 f86c 	bl	8103f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101e3e:	2020      	movs	r0, #32
 8101e40:	f002 f883 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101e44:	bf00      	nop
 8101e46:	37e0      	adds	r7, #224	; 0xe0
 8101e48:	46bd      	mov	sp, r7
 8101e4a:	bd80      	pop	{r7, pc}
 8101e4c:	40005400 	.word	0x40005400
 8101e50:	58024400 	.word	0x58024400
 8101e54:	58020400 	.word	0x58020400
 8101e58:	1000025c 	.word	0x1000025c
 8101e5c:	40020040 	.word	0x40020040
 8101e60:	10000198 	.word	0x10000198
 8101e64:	40020058 	.word	0x40020058

08101e68 <CheckIMUSensorID>:
 * @param address of the sensor
 * @param reg register to read
 * @returns value from the register
 */
uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	b088      	sub	sp, #32
 8101e6c:	af04      	add	r7, sp, #16
 8101e6e:	4603      	mov	r3, r0
 8101e70:	460a      	mov	r2, r1
 8101e72:	71fb      	strb	r3, [r7, #7]
 8101e74:	4613      	mov	r3, r2
 8101e76:	71bb      	strb	r3, [r7, #6]
    uint8_t reg_value = 0x00;
 8101e78:	2300      	movs	r3, #0
 8101e7a:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8101e7c:	79fb      	ldrb	r3, [r7, #7]
 8101e7e:	b29b      	uxth	r3, r3
 8101e80:	005b      	lsls	r3, r3, #1
 8101e82:	b299      	uxth	r1, r3
 8101e84:	79bb      	ldrb	r3, [r7, #6]
 8101e86:	b29a      	uxth	r2, r3
 8101e88:	2364      	movs	r3, #100	; 0x64
 8101e8a:	9302      	str	r3, [sp, #8]
 8101e8c:	2301      	movs	r3, #1
 8101e8e:	9301      	str	r3, [sp, #4]
 8101e90:	f107 030e 	add.w	r3, r7, #14
 8101e94:	9300      	str	r3, [sp, #0]
 8101e96:	2301      	movs	r3, #1
 8101e98:	4807      	ldr	r0, [pc, #28]	; (8101eb8 <CheckIMUSensorID+0x50>)
 8101e9a:	f005 fa79 	bl	8107390 <HAL_I2C_Mem_Read>
 8101e9e:	4603      	mov	r3, r0
 8101ea0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8101ea2:	7bfb      	ldrb	r3, [r7, #15]
 8101ea4:	2b00      	cmp	r3, #0
 8101ea6:	d001      	beq.n	8101eac <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8101ea8:	2301      	movs	r3, #1
 8101eaa:	e000      	b.n	8101eae <CheckIMUSensorID+0x46>
    }
    return reg_value;
 8101eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8101eae:	4618      	mov	r0, r3
 8101eb0:	3710      	adds	r7, #16
 8101eb2:	46bd      	mov	sp, r7
 8101eb4:	bd80      	pop	{r7, pc}
 8101eb6:	bf00      	nop
 8101eb8:	10000210 	.word	0x10000210

08101ebc <init>:
/*
 * @brief Initialises IMU
 * @param imu pointer to imu struct
 */
void init(LSM9DS1Handle* imu)
{
 8101ebc:	b480      	push	{r7}
 8101ebe:	b083      	sub	sp, #12
 8101ec0:	af00      	add	r7, sp, #0
 8101ec2:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	2201      	movs	r2, #1
 8101ec8:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	2201      	movs	r2, #1
 8101ece:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	2201      	movs	r2, #1
 8101ed4:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	2201      	movs	r2, #1
 8101eda:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale 245, 500, 2000
  imu->gyro_settings.scale = 245;
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	22f5      	movs	r2, #245	; 0xf5
 8101ee0:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	2206      	movs	r2, #6
 8101ee6:	711a      	strb	r2, [r3, #4]

  // set cutoff frequency
  // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	2200      	movs	r2, #0
 8101eec:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	2200      	movs	r2, #0
 8101ef2:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	2200      	movs	r2, #0
 8101ef8:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	2200      	movs	r2, #0
 8101efe:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	2200      	movs	r2, #0
 8101f04:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	2200      	movs	r2, #0
 8101f0a:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	2200      	movs	r2, #0
 8101f10:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	2200      	movs	r2, #0
 8101f16:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	2201      	movs	r2, #1
 8101f1c:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	2201      	movs	r2, #1
 8101f22:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	2201      	movs	r2, #1
 8101f28:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	2201      	movs	r2, #1
 8101f2e:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	2201      	movs	r2, #1
 8101f34:	75da      	strb	r2, [r3, #23]
  imu->accel_settings.scale = 2;
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	2202      	movs	r2, #2
 8101f3a:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	2206      	movs	r2, #6
 8101f40:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	22ff      	movs	r2, #255	; 0xff
 8101f46:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	2200      	movs	r2, #0
 8101f4c:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	2200      	movs	r2, #0
 8101f52:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	2201      	movs	r2, #1
 8101f58:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	2204      	movs	r2, #4
 8101f5e:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	2207      	movs	r2, #7
 8101f64:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	2200      	movs	r2, #0
 8101f6a:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	2203      	movs	r2, #3
 8101f70:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	2203      	movs	r2, #3
 8101f76:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	2200      	movs	r2, #0
 8101f86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  // enable temperature sensor
  imu->temp_settings.enabled = 1;
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	2201      	movs	r2, #1
 8101f8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8101f92:	bf00      	nop
 8101f94:	370c      	adds	r7, #12
 8101f96:	46bd      	mov	sp, r7
 8101f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f9c:	4770      	bx	lr

08101f9e <setup>:
 * @param imu pointer to imu struct
 * @returns response from MAG and ACC/GYRO WHOAMI
 * register
 */
uint8_t setup(LSM9DS1Handle* imu)
{
 8101f9e:	b580      	push	{r7, lr}
 8101fa0:	b084      	sub	sp, #16
 8101fa2:	af00      	add	r7, sp, #0
 8101fa4:	6078      	str	r0, [r7, #4]
  // initialise the sensors
  init(imu);
 8101fa6:	6878      	ldr	r0, [r7, #4]
 8101fa8:	f7ff ff88 	bl	8101ebc <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8101fac:	6878      	ldr	r0, [r7, #4]
 8101fae:	f000 f9fb 	bl	81023a8 <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 8101fb2:	6878      	ldr	r0, [r7, #4]
 8101fb4:	f000 fb70 	bl	8102698 <calcGyroResolution>
  calcAccResoltuion(imu);
 8101fb8:	6878      	ldr	r0, [r7, #4]
 8101fba:	f000 fb9b 	bl	81026f4 <calcAccResoltuion>
  calcMagResolution(imu);
 8101fbe:	6878      	ldr	r0, [r7, #4]
 8101fc0:	f000 fbe4 	bl	810278c <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check =  CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 8101fc4:	210f      	movs	r1, #15
 8101fc6:	206b      	movs	r0, #107	; 0x6b
 8101fc8:	f7ff ff4e 	bl	8101e68 <CheckIMUSensorID>
 8101fcc:	4603      	mov	r3, r0
 8101fce:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 8101fd0:	210f      	movs	r1, #15
 8101fd2:	201e      	movs	r0, #30
 8101fd4:	f7ff ff48 	bl	8101e68 <CheckIMUSensorID>
 8101fd8:	4603      	mov	r3, r0
 8101fda:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8101fdc:	7bfb      	ldrb	r3, [r7, #15]
 8101fde:	021b      	lsls	r3, r3, #8
 8101fe0:	b21a      	sxth	r2, r3
 8101fe2:	7bbb      	ldrb	r3, [r7, #14]
 8101fe4:	b21b      	sxth	r3, r3
 8101fe6:	4313      	orrs	r3, r2
 8101fe8:	b21b      	sxth	r3, r3
 8101fea:	81bb      	strh	r3, [r7, #12]
  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 8101fec:	89bb      	ldrh	r3, [r7, #12]
 8101fee:	f646 023d 	movw	r2, #26685	; 0x683d
 8101ff2:	4293      	cmp	r3, r2
 8101ff4:	d001      	beq.n	8101ffa <setup+0x5c>
  {
     return -1;
 8101ff6:	23ff      	movs	r3, #255	; 0xff
 8101ff8:	e009      	b.n	810200e <setup+0x70>
  }
  // initialise gyro
  initGyro(imu);
 8101ffa:	6878      	ldr	r0, [r7, #4]
 8101ffc:	f000 f81c 	bl	8102038 <initGyro>
  // initialise accel
  initAccel(imu);
 8102000:	6878      	ldr	r0, [r7, #4]
 8102002:	f000 f8be 	bl	8102182 <initAccel>
  // init Mag
  initMag(imu);
 8102006:	6878      	ldr	r0, [r7, #4]
 8102008:	f000 f942 	bl	8102290 <initMag>
  return HAL_OK;;
 810200c:	2300      	movs	r3, #0
}
 810200e:	4618      	mov	r0, r3
 8102010:	3710      	adds	r7, #16
 8102012:	46bd      	mov	sp, r7
 8102014:	bd80      	pop	{r7, pc}

08102016 <ConfigIMU>:
 * @brief Calls the setup IMU function
 * @param imu Pointer IMU struct
 * @retval none
 */
uint8_t ConfigIMU(LSM9DS1Handle* imu)
{
 8102016:	b580      	push	{r7, lr}
 8102018:	b082      	sub	sp, #8
 810201a:	af00      	add	r7, sp, #0
 810201c:	6078      	str	r0, [r7, #4]
  if(setup(imu) != HAL_OK)
 810201e:	6878      	ldr	r0, [r7, #4]
 8102020:	f7ff ffbd 	bl	8101f9e <setup>
 8102024:	4603      	mov	r3, r0
 8102026:	2b00      	cmp	r3, #0
 8102028:	d001      	beq.n	810202e <ConfigIMU+0x18>
  {
    return HAL_ERROR;
 810202a:	2301      	movs	r3, #1
 810202c:	e000      	b.n	8102030 <ConfigIMU+0x1a>
  }

  return HAL_OK;
 810202e:	2300      	movs	r3, #0
}
 8102030:	4618      	mov	r0, r3
 8102032:	3708      	adds	r7, #8
 8102034:	46bd      	mov	sp, r7
 8102036:	bd80      	pop	{r7, pc}

08102038 <initGyro>:
 * @brief initialises gyroscope
 * @param imu ponter to imu struct
 * @returns nothing
 */
void initGyro(LSM9DS1Handle* imu)
{
 8102038:	b580      	push	{r7, lr}
 810203a:	b084      	sub	sp, #16
 810203c:	af00      	add	r7, sp, #0
 810203e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 8102040:	2300      	movs	r3, #0
 8102042:	73fb      	strb	r3, [r7, #15]
  // Only set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	781b      	ldrb	r3, [r3, #0]
 8102048:	2b01      	cmp	r3, #1
 810204a:	d103      	bne.n	8102054 <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	791b      	ldrb	r3, [r3, #4]
 8102050:	015b      	lsls	r3, r3, #5
 8102052:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	885b      	ldrh	r3, [r3, #2]
 8102058:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 810205c:	d003      	beq.n	8102066 <initGyro+0x2e>
 810205e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102062:	d005      	beq.n	8102070 <initGyro+0x38>
 8102064:	e009      	b.n	810207a <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 8102066:	7bfb      	ldrb	r3, [r7, #15]
 8102068:	f043 0308 	orr.w	r3, r3, #8
 810206c:	73fb      	strb	r3, [r7, #15]
      break;
 810206e:	e004      	b.n	810207a <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 8102070:	7bfb      	ldrb	r3, [r7, #15]
 8102072:	f043 0318 	orr.w	r3, r3, #24
 8102076:	73fb      	strb	r3, [r7, #15]
      break;
 8102078:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	795b      	ldrb	r3, [r3, #5]
 810207e:	b25b      	sxtb	r3, r3
 8102080:	f003 0303 	and.w	r3, r3, #3
 8102084:	b25a      	sxtb	r2, r3
 8102086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810208a:	4313      	orrs	r3, r2
 810208c:	b25b      	sxtb	r3, r3
 810208e:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 8102090:	7bfb      	ldrb	r3, [r7, #15]
 8102092:	461a      	mov	r2, r3
 8102094:	2110      	movs	r1, #16
 8102096:	206b      	movs	r0, #107	; 0x6b
 8102098:	f000 fbee 	bl	8102878 <WriteByte>
   // reset tempValue
   tempRegValue = 0;
 810209c:	2300      	movs	r3, #0
 810209e:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 81020a0:	7bfb      	ldrb	r3, [r7, #15]
 81020a2:	461a      	mov	r2, r3
 81020a4:	2111      	movs	r1, #17
 81020a6:	206b      	movs	r0, #107	; 0x6b
 81020a8:	f000 fbe6 	bl	8102878 <WriteByte>

   tempRegValue = 0;
 81020ac:	2300      	movs	r3, #0
 81020ae:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	799b      	ldrb	r3, [r3, #6]
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	d001      	beq.n	81020bc <initGyro+0x84>
 81020b8:	2380      	movs	r3, #128	; 0x80
 81020ba:	e000      	b.n	81020be <initGyro+0x86>
 81020bc:	2300      	movs	r3, #0
 81020be:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	79db      	ldrb	r3, [r3, #7]
 81020c4:	2b01      	cmp	r3, #1
 81020c6:	d10a      	bne.n	81020de <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	7a1b      	ldrb	r3, [r3, #8]
 81020cc:	f003 030f 	and.w	r3, r3, #15
 81020d0:	b2da      	uxtb	r2, r3
 81020d2:	7bfb      	ldrb	r3, [r7, #15]
 81020d4:	4313      	orrs	r3, r2
 81020d6:	b2db      	uxtb	r3, r3
 81020d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81020dc:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 81020de:	7bfb      	ldrb	r3, [r7, #15]
 81020e0:	461a      	mov	r2, r3
 81020e2:	2112      	movs	r1, #18
 81020e4:	206b      	movs	r0, #107	; 0x6b
 81020e6:	f000 fbc7 	bl	8102878 <WriteByte>

   tempRegValue = 0;
 81020ea:	2300      	movs	r3, #0
 81020ec:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	7bdb      	ldrb	r3, [r3, #15]
 81020f2:	2b00      	cmp	r3, #0
 81020f4:	d003      	beq.n	81020fe <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 81020f6:	7bfb      	ldrb	r3, [r7, #15]
 81020f8:	f043 0320 	orr.w	r3, r3, #32
 81020fc:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	7b9b      	ldrb	r3, [r3, #14]
 8102102:	2b00      	cmp	r3, #0
 8102104:	d003      	beq.n	810210e <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 8102106:	7bfb      	ldrb	r3, [r7, #15]
 8102108:	f043 0310 	orr.w	r3, r3, #16
 810210c:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	7b5b      	ldrb	r3, [r3, #13]
 8102112:	2b00      	cmp	r3, #0
 8102114:	d003      	beq.n	810211e <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 8102116:	7bfb      	ldrb	r3, [r7, #15]
 8102118:	f043 0308 	orr.w	r3, r3, #8
 810211c:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	7c1b      	ldrb	r3, [r3, #16]
 8102122:	2b00      	cmp	r3, #0
 8102124:	d003      	beq.n	810212e <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 8102126:	7bfb      	ldrb	r3, [r7, #15]
 8102128:	f043 0302 	orr.w	r3, r3, #2
 810212c:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 810212e:	7bfb      	ldrb	r3, [r7, #15]
 8102130:	461a      	mov	r2, r3
 8102132:	211e      	movs	r1, #30
 8102134:	206b      	movs	r0, #107	; 0x6b
 8102136:	f000 fb9f 	bl	8102878 <WriteByte>

   tempRegValue = 0;
 810213a:	2300      	movs	r3, #0
 810213c:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	7a5b      	ldrb	r3, [r3, #9]
 8102142:	2b00      	cmp	r3, #0
 8102144:	d003      	beq.n	810214e <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 8102146:	7bfb      	ldrb	r3, [r7, #15]
 8102148:	f043 0320 	orr.w	r3, r3, #32
 810214c:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	7a9b      	ldrb	r3, [r3, #10]
 8102152:	2b00      	cmp	r3, #0
 8102154:	d003      	beq.n	810215e <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 8102156:	7bfb      	ldrb	r3, [r7, #15]
 8102158:	f043 0310 	orr.w	r3, r3, #16
 810215c:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	7adb      	ldrb	r3, [r3, #11]
 8102162:	2b00      	cmp	r3, #0
 8102164:	d003      	beq.n	810216e <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 8102166:	7bfb      	ldrb	r3, [r7, #15]
 8102168:	f043 0308 	orr.w	r3, r3, #8
 810216c:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 810216e:	7bfb      	ldrb	r3, [r7, #15]
 8102170:	461a      	mov	r2, r3
 8102172:	2113      	movs	r1, #19
 8102174:	206b      	movs	r0, #107	; 0x6b
 8102176:	f000 fb7f 	bl	8102878 <WriteByte>
}
 810217a:	bf00      	nop
 810217c:	3710      	adds	r7, #16
 810217e:	46bd      	mov	sp, r7
 8102180:	bd80      	pop	{r7, pc}

08102182 <initAccel>:
 * @brief initialises accelerometer
 * @param imu ponter to imu struct
 * @returns nothing
 */
void initAccel(LSM9DS1Handle* imu)
{
 8102182:	b580      	push	{r7, lr}
 8102184:	b084      	sub	sp, #16
 8102186:	af00      	add	r7, sp, #0
 8102188:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 810218a:	2300      	movs	r3, #0
 810218c:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 810218e:	687b      	ldr	r3, [r7, #4]
 8102190:	7ddb      	ldrb	r3, [r3, #23]
 8102192:	2b00      	cmp	r3, #0
 8102194:	d003      	beq.n	810219e <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 8102196:	7bfb      	ldrb	r3, [r7, #15]
 8102198:	f043 0320 	orr.w	r3, r3, #32
 810219c:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	7d9b      	ldrb	r3, [r3, #22]
 81021a2:	2b00      	cmp	r3, #0
 81021a4:	d003      	beq.n	81021ae <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 81021a6:	7bfb      	ldrb	r3, [r7, #15]
 81021a8:	f043 0310 	orr.w	r3, r3, #16
 81021ac:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	7d5b      	ldrb	r3, [r3, #21]
 81021b2:	2b00      	cmp	r3, #0
 81021b4:	d003      	beq.n	81021be <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 81021b6:	7bfb      	ldrb	r3, [r7, #15]
 81021b8:	f043 0308 	orr.w	r3, r3, #8
 81021bc:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 81021be:	7bfb      	ldrb	r3, [r7, #15]
 81021c0:	461a      	mov	r2, r3
 81021c2:	211f      	movs	r1, #31
 81021c4:	206b      	movs	r0, #107	; 0x6b
 81021c6:	f000 fb57 	bl	8102878 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 81021ca:	2300      	movs	r3, #0
 81021cc:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	7c9b      	ldrb	r3, [r3, #18]
 81021d2:	2b00      	cmp	r3, #0
 81021d4:	d008      	beq.n	81021e8 <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	7d1b      	ldrb	r3, [r3, #20]
 81021da:	015b      	lsls	r3, r3, #5
 81021dc:	b25a      	sxtb	r2, r3
 81021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81021e2:	4313      	orrs	r3, r2
 81021e4:	b25b      	sxtb	r3, r3
 81021e6:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	7cdb      	ldrb	r3, [r3, #19]
 81021ec:	2b10      	cmp	r3, #16
 81021ee:	d010      	beq.n	8102212 <initAccel+0x90>
 81021f0:	2b10      	cmp	r3, #16
 81021f2:	dc13      	bgt.n	810221c <initAccel+0x9a>
 81021f4:	2b04      	cmp	r3, #4
 81021f6:	d002      	beq.n	81021fe <initAccel+0x7c>
 81021f8:	2b08      	cmp	r3, #8
 81021fa:	d005      	beq.n	8102208 <initAccel+0x86>
 81021fc:	e00e      	b.n	810221c <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 81021fe:	7bfb      	ldrb	r3, [r7, #15]
 8102200:	f043 0310 	orr.w	r3, r3, #16
 8102204:	73fb      	strb	r3, [r7, #15]
      break;
 8102206:	e009      	b.n	810221c <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 8102208:	7bfb      	ldrb	r3, [r7, #15]
 810220a:	f043 0318 	orr.w	r3, r3, #24
 810220e:	73fb      	strb	r3, [r7, #15]
      break;
 8102210:	e004      	b.n	810221c <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 8102212:	7bfb      	ldrb	r3, [r7, #15]
 8102214:	f043 0308 	orr.w	r3, r3, #8
 8102218:	73fb      	strb	r3, [r7, #15]
      break;
 810221a:	bf00      	nop
  }

  if(imu->accel_settings.bandwidth >= 0)
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102222:	2b00      	cmp	r3, #0
 8102224:	db0e      	blt.n	8102244 <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 8102226:	7bfb      	ldrb	r3, [r7, #15]
 8102228:	f043 0304 	orr.w	r3, r3, #4
 810222c:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102234:	f003 0303 	and.w	r3, r3, #3
 8102238:	b25a      	sxtb	r2, r3
 810223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810223e:	4313      	orrs	r3, r2
 8102240:	b25b      	sxtb	r3, r3
 8102242:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 8102244:	7bfb      	ldrb	r3, [r7, #15]
 8102246:	461a      	mov	r2, r3
 8102248:	2120      	movs	r1, #32
 810224a:	206b      	movs	r0, #107	; 0x6b
 810224c:	f000 fb14 	bl	8102878 <WriteByte>
  // reset tempValue
  tempRegValue = 0;
 8102250:	2300      	movs	r3, #0
 8102252:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	7e5b      	ldrb	r3, [r3, #25]
 8102258:	2b01      	cmp	r3, #1
 810225a:	d10f      	bne.n	810227c <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 810225c:	7bfb      	ldrb	r3, [r7, #15]
 810225e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8102262:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	7e9b      	ldrb	r3, [r3, #26]
 8102268:	015b      	lsls	r3, r3, #5
 810226a:	b25b      	sxtb	r3, r3
 810226c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102270:	b25a      	sxtb	r2, r3
 8102272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102276:	4313      	orrs	r3, r2
 8102278:	b25b      	sxtb	r3, r3
 810227a:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 810227c:	7bfb      	ldrb	r3, [r7, #15]
 810227e:	461a      	mov	r2, r3
 8102280:	2121      	movs	r1, #33	; 0x21
 8102282:	206b      	movs	r0, #107	; 0x6b
 8102284:	f000 faf8 	bl	8102878 <WriteByte>
}
 8102288:	bf00      	nop
 810228a:	3710      	adds	r7, #16
 810228c:	46bd      	mov	sp, r7
 810228e:	bd80      	pop	{r7, pc}

08102290 <initMag>:
 * @brief initialises magnetometer
 * @param imu ponter to imu struct
 * @returns nothing
 */
void initMag(LSM9DS1Handle* imu)
{
 8102290:	b580      	push	{r7, lr}
 8102292:	b084      	sub	sp, #16
 8102294:	af00      	add	r7, sp, #0
 8102296:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 8102298:	2300      	movs	r3, #0
 810229a:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	7f9b      	ldrb	r3, [r3, #30]
 81022a0:	2b01      	cmp	r3, #1
 81022a2:	d103      	bne.n	81022ac <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 81022a4:	7bfb      	ldrb	r3, [r7, #15]
 81022a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81022aa:	73fb      	strb	r3, [r7, #15]
  }
  // Make operating mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	7fdb      	ldrb	r3, [r3, #31]
 81022b0:	015b      	lsls	r3, r3, #5
 81022b2:	b25b      	sxtb	r3, r3
 81022b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81022b8:	b25a      	sxtb	r2, r3
 81022ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022be:	4313      	orrs	r3, r2
 81022c0:	b25b      	sxtb	r3, r3
 81022c2:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	7f5b      	ldrb	r3, [r3, #29]
 81022c8:	009b      	lsls	r3, r3, #2
 81022ca:	b25b      	sxtb	r3, r3
 81022cc:	f003 031c 	and.w	r3, r3, #28
 81022d0:	b25a      	sxtb	r2, r3
 81022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022d6:	4313      	orrs	r3, r2
 81022d8:	b25b      	sxtb	r3, r3
 81022da:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 81022dc:	7bfb      	ldrb	r3, [r7, #15]
 81022de:	461a      	mov	r2, r3
 81022e0:	2120      	movs	r1, #32
 81022e2:	201e      	movs	r0, #30
 81022e4:	f000 fac8 	bl	8102878 <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 81022e8:	2300      	movs	r3, #0
 81022ea:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	7f1b      	ldrb	r3, [r3, #28]
 81022f0:	2b10      	cmp	r3, #16
 81022f2:	d010      	beq.n	8102316 <initMag+0x86>
 81022f4:	2b10      	cmp	r3, #16
 81022f6:	dc13      	bgt.n	8102320 <initMag+0x90>
 81022f8:	2b08      	cmp	r3, #8
 81022fa:	d002      	beq.n	8102302 <initMag+0x72>
 81022fc:	2b0c      	cmp	r3, #12
 81022fe:	d005      	beq.n	810230c <initMag+0x7c>
 8102300:	e00e      	b.n	8102320 <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 8102302:	7bfb      	ldrb	r3, [r7, #15]
 8102304:	f043 0320 	orr.w	r3, r3, #32
 8102308:	73fb      	strb	r3, [r7, #15]
      break;
 810230a:	e009      	b.n	8102320 <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 810230c:	7bfb      	ldrb	r3, [r7, #15]
 810230e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102312:	73fb      	strb	r3, [r7, #15]
      break;
 8102314:	e004      	b.n	8102320 <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 8102316:	7bfb      	ldrb	r3, [r7, #15]
 8102318:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 810231c:	73fb      	strb	r3, [r7, #15]
      break;
 810231e:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 8102320:	7bfb      	ldrb	r3, [r7, #15]
 8102322:	461a      	mov	r2, r3
 8102324:	2121      	movs	r1, #33	; 0x21
 8102326:	201e      	movs	r0, #30
 8102328:	f000 faa6 	bl	8102878 <WriteByte>

   tempRegValue = 0;
 810232c:	2300      	movs	r3, #0
 810232e:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8102336:	2b01      	cmp	r3, #1
 8102338:	d103      	bne.n	8102342 <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 810233a:	7bfb      	ldrb	r3, [r7, #15]
 810233c:	f043 0320 	orr.w	r3, r3, #32
 8102340:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8102348:	b25b      	sxtb	r3, r3
 810234a:	f003 0303 	and.w	r3, r3, #3
 810234e:	b25a      	sxtb	r2, r3
 8102350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102354:	4313      	orrs	r3, r2
 8102356:	b25b      	sxtb	r3, r3
 8102358:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 810235a:	7bfb      	ldrb	r3, [r7, #15]
 810235c:	461a      	mov	r2, r3
 810235e:	2122      	movs	r1, #34	; 0x22
 8102360:	201e      	movs	r0, #30
 8102362:	f000 fa89 	bl	8102878 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 8102366:	2300      	movs	r3, #0
 8102368:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102370:	009b      	lsls	r3, r3, #2
 8102372:	b25b      	sxtb	r3, r3
 8102374:	f003 030c 	and.w	r3, r3, #12
 8102378:	b25a      	sxtb	r2, r3
 810237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810237e:	4313      	orrs	r3, r2
 8102380:	b25b      	sxtb	r3, r3
 8102382:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 8102384:	7bfb      	ldrb	r3, [r7, #15]
 8102386:	461a      	mov	r2, r3
 8102388:	2123      	movs	r1, #35	; 0x23
 810238a:	201e      	movs	r0, #30
 810238c:	f000 fa74 	bl	8102878 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 8102390:	2300      	movs	r3, #0
 8102392:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 8102394:	7bfb      	ldrb	r3, [r7, #15]
 8102396:	461a      	mov	r2, r3
 8102398:	2124      	movs	r1, #36	; 0x24
 810239a:	201e      	movs	r0, #30
 810239c:	f000 fa6c 	bl	8102878 <WriteByte>

}
 81023a0:	bf00      	nop
 81023a2:	3710      	adds	r7, #16
 81023a4:	46bd      	mov	sp, r7
 81023a6:	bd80      	pop	{r7, pc}

081023a8 <clampScales>:
 * sensor to max values
 * @param pointer to imu struct
 * @returns nothing
 */
void clampScales(LSM9DS1Handle* imu)
{
 81023a8:	b480      	push	{r7}
 81023aa:	b083      	sub	sp, #12
 81023ac:	af00      	add	r7, sp, #0
 81023ae:	6078      	str	r0, [r7, #4]
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	885b      	ldrh	r3, [r3, #2]
 81023b4:	2bf5      	cmp	r3, #245	; 0xf5
 81023b6:	d00c      	beq.n	81023d2 <clampScales+0x2a>
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	885b      	ldrh	r3, [r3, #2]
 81023bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81023c0:	d007      	beq.n	81023d2 <clampScales+0x2a>
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	885b      	ldrh	r3, [r3, #2]
 81023c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81023ca:	d002      	beq.n	81023d2 <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	22f5      	movs	r2, #245	; 0xf5
 81023d0:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	7cdb      	ldrb	r3, [r3, #19]
 81023d6:	2b02      	cmp	r3, #2
 81023d8:	d00e      	beq.n	81023f8 <clampScales+0x50>
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	7cdb      	ldrb	r3, [r3, #19]
 81023de:	2b04      	cmp	r3, #4
 81023e0:	d00a      	beq.n	81023f8 <clampScales+0x50>
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	7cdb      	ldrb	r3, [r3, #19]
 81023e6:	2b08      	cmp	r3, #8
 81023e8:	d006      	beq.n	81023f8 <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	7cdb      	ldrb	r3, [r3, #19]
 81023ee:	2b10      	cmp	r3, #16
 81023f0:	d002      	beq.n	81023f8 <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	22f5      	movs	r2, #245	; 0xf5
 81023f6:	74da      	strb	r2, [r3, #19]
  }

  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	7f1b      	ldrb	r3, [r3, #28]
 81023fc:	2b04      	cmp	r3, #4
 81023fe:	d00e      	beq.n	810241e <clampScales+0x76>
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	7f1b      	ldrb	r3, [r3, #28]
 8102404:	2b08      	cmp	r3, #8
 8102406:	d00a      	beq.n	810241e <clampScales+0x76>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	7f1b      	ldrb	r3, [r3, #28]
 810240c:	2b0c      	cmp	r3, #12
 810240e:	d006      	beq.n	810241e <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8102414:	2b10      	cmp	r3, #16
 8102416:	d002      	beq.n	810241e <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	2204      	movs	r2, #4
 810241c:	771a      	strb	r2, [r3, #28]
  }
}
 810241e:	bf00      	nop
 8102420:	370c      	adds	r7, #12
 8102422:	46bd      	mov	sp, r7
 8102424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102428:	4770      	bx	lr
	...

0810242c <calcGyro>:
 * @param gyro raw gyro value read from
 * register
 * @returns angular rate in dps
 */
float calcGyro(float gyro)
{
 810242c:	b480      	push	{r7}
 810242e:	b083      	sub	sp, #12
 8102430:	af00      	add	r7, sp, #0
 8102432:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 8102436:	4b07      	ldr	r3, [pc, #28]	; (8102454 <calcGyro+0x28>)
 8102438:	ed93 7a00 	vldr	s14, [r3]
 810243c:	edd7 7a01 	vldr	s15, [r7, #4]
 8102440:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102444:	eeb0 0a67 	vmov.f32	s0, s15
 8102448:	370c      	adds	r7, #12
 810244a:	46bd      	mov	sp, r7
 810244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102450:	4770      	bx	lr
 8102452:	bf00      	nop
 8102454:	100002dc 	.word	0x100002dc

08102458 <calcMag>:
 * @param mag raw mag value read from
 * register
 * @returns magnetic field strength in gauss
 */
float calcMag(float mag)
{
 8102458:	b480      	push	{r7}
 810245a:	b083      	sub	sp, #12
 810245c:	af00      	add	r7, sp, #0
 810245e:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 8102462:	4b07      	ldr	r3, [pc, #28]	; (8102480 <calcMag+0x28>)
 8102464:	ed93 7a00 	vldr	s14, [r3]
 8102468:	edd7 7a01 	vldr	s15, [r7, #4]
 810246c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102470:	eeb0 0a67 	vmov.f32	s0, s15
 8102474:	370c      	adds	r7, #12
 8102476:	46bd      	mov	sp, r7
 8102478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810247c:	4770      	bx	lr
 810247e:	bf00      	nop
 8102480:	100002d8 	.word	0x100002d8

08102484 <calcAccel>:
 * @param gyro raw acc value read from
 * register
 * @returns linear acceleration in gs
 */
float calcAccel(float accel)
{
 8102484:	b480      	push	{r7}
 8102486:	b083      	sub	sp, #12
 8102488:	af00      	add	r7, sp, #0
 810248a:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 810248e:	4b07      	ldr	r3, [pc, #28]	; (81024ac <calcAccel+0x28>)
 8102490:	ed93 7a00 	vldr	s14, [r3]
 8102494:	edd7 7a01 	vldr	s15, [r7, #4]
 8102498:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 810249c:	eeb0 0a67 	vmov.f32	s0, s15
 81024a0:	370c      	adds	r7, #12
 81024a2:	46bd      	mov	sp, r7
 81024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024a8:	4770      	bx	lr
 81024aa:	bf00      	nop
 81024ac:	100002d4 	.word	0x100002d4

081024b0 <readGyro>:
* data in dps
* @param imu struct handle
* @returns nothing
*/
void readGyro(LSM9DS1Handle* imu)
{
 81024b0:	b580      	push	{r7, lr}
 81024b2:	b086      	sub	sp, #24
 81024b4:	af00      	add	r7, sp, #0
 81024b6:	6078      	str	r0, [r7, #4]
  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 81024b8:	f107 020c 	add.w	r2, r7, #12
 81024bc:	2306      	movs	r3, #6
 81024be:	2118      	movs	r1, #24
 81024c0:	206b      	movs	r0, #107	; 0x6b
 81024c2:	f000 f9af 	bl	8102824 <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 81024c6:	7b7b      	ldrb	r3, [r7, #13]
 81024c8:	021b      	lsls	r3, r3, #8
 81024ca:	b21a      	sxth	r2, r3
 81024cc:	7b3b      	ldrb	r3, [r7, #12]
 81024ce:	b21b      	sxth	r3, r3
 81024d0:	4313      	orrs	r3, r2
 81024d2:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 81024d4:	7bfb      	ldrb	r3, [r7, #15]
 81024d6:	021b      	lsls	r3, r3, #8
 81024d8:	b21a      	sxth	r2, r3
 81024da:	7bbb      	ldrb	r3, [r7, #14]
 81024dc:	b21b      	sxth	r3, r3
 81024de:	4313      	orrs	r3, r2
 81024e0:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 81024e2:	7c7b      	ldrb	r3, [r7, #17]
 81024e4:	021b      	lsls	r3, r3, #8
 81024e6:	b21a      	sxth	r2, r3
 81024e8:	7c3b      	ldrb	r3, [r7, #16]
 81024ea:	b21b      	sxth	r3, r3
 81024ec:	4313      	orrs	r3, r2
 81024ee:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 81024f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81024f4:	ee07 3a90 	vmov	s15, r3
 81024f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8102500:	f7ff ff94 	bl	810242c <calcGyro>
 8102504:	eef0 7a40 	vmov.f32	s15, s0
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 810250e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102512:	ee07 3a90 	vmov	s15, r3
 8102516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810251a:	eeb0 0a67 	vmov.f32	s0, s15
 810251e:	f7ff ff85 	bl	810242c <calcGyro>
 8102522:	eef0 7a40 	vmov.f32	s15, s0
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 810252c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102530:	ee07 3a90 	vmov	s15, r3
 8102534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102538:	eeb0 0a67 	vmov.f32	s0, s15
 810253c:	f7ff ff76 	bl	810242c <calcGyro>
 8102540:	eef0 7a40 	vmov.f32	s15, s0
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 810254a:	bf00      	nop
 810254c:	3718      	adds	r7, #24
 810254e:	46bd      	mov	sp, r7
 8102550:	bd80      	pop	{r7, pc}

08102552 <readMag>:
///@brief returns the magnetometer
/// data in Gauss
///@param imu struct handle
///@returns nothing
void readMag(LSM9DS1Handle* imu)
{
 8102552:	b580      	push	{r7, lr}
 8102554:	b086      	sub	sp, #24
 8102556:	af00      	add	r7, sp, #0
 8102558:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 810255a:	f107 020c 	add.w	r2, r7, #12
 810255e:	2306      	movs	r3, #6
 8102560:	2128      	movs	r1, #40	; 0x28
 8102562:	201e      	movs	r0, #30
 8102564:	f000 f95e 	bl	8102824 <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 8102568:	7b7b      	ldrb	r3, [r7, #13]
 810256a:	021b      	lsls	r3, r3, #8
 810256c:	b21a      	sxth	r2, r3
 810256e:	7b3b      	ldrb	r3, [r7, #12]
 8102570:	b21b      	sxth	r3, r3
 8102572:	4313      	orrs	r3, r2
 8102574:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 8102576:	7bfb      	ldrb	r3, [r7, #15]
 8102578:	021b      	lsls	r3, r3, #8
 810257a:	b21a      	sxth	r2, r3
 810257c:	7bbb      	ldrb	r3, [r7, #14]
 810257e:	b21b      	sxth	r3, r3
 8102580:	4313      	orrs	r3, r2
 8102582:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 8102584:	7c7b      	ldrb	r3, [r7, #17]
 8102586:	021b      	lsls	r3, r3, #8
 8102588:	b21a      	sxth	r2, r3
 810258a:	7c3b      	ldrb	r3, [r7, #16]
 810258c:	b21b      	sxth	r3, r3
 810258e:	4313      	orrs	r3, r2
 8102590:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 8102592:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102596:	ee07 3a90 	vmov	s15, r3
 810259a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810259e:	eeb0 0a67 	vmov.f32	s0, s15
 81025a2:	f7ff ff59 	bl	8102458 <calcMag>
 81025a6:	eef0 7a40 	vmov.f32	s15, s0
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 81025b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81025b4:	ee07 3a90 	vmov	s15, r3
 81025b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025bc:	eeb0 0a67 	vmov.f32	s0, s15
 81025c0:	f7ff ff4a 	bl	8102458 <calcMag>
 81025c4:	eef0 7a40 	vmov.f32	s15, s0
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 81025ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81025d2:	ee07 3a90 	vmov	s15, r3
 81025d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025da:	eeb0 0a67 	vmov.f32	s0, s15
 81025de:	f7ff ff3b 	bl	8102458 <calcMag>
 81025e2:	eef0 7a40 	vmov.f32	s15, s0
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 81025ec:	bf00      	nop
 81025ee:	3718      	adds	r7, #24
 81025f0:	46bd      	mov	sp, r7
 81025f2:	bd80      	pop	{r7, pc}

081025f4 <readAccel>:
///@brief returns the
/// accelerometer data in g's
///@param imu struct handle
///@returns nothing
void readAccel(LSM9DS1Handle* imu)
{
 81025f4:	b580      	push	{r7, lr}
 81025f6:	b086      	sub	sp, #24
 81025f8:	af00      	add	r7, sp, #0
 81025fa:	6078      	str	r0, [r7, #4]
  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 81025fc:	f107 020c 	add.w	r2, r7, #12
 8102600:	2306      	movs	r3, #6
 8102602:	2128      	movs	r1, #40	; 0x28
 8102604:	206b      	movs	r0, #107	; 0x6b
 8102606:	f000 f90d 	bl	8102824 <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 810260a:	7b7b      	ldrb	r3, [r7, #13]
 810260c:	021b      	lsls	r3, r3, #8
 810260e:	b21a      	sxth	r2, r3
 8102610:	7b3b      	ldrb	r3, [r7, #12]
 8102612:	b21b      	sxth	r3, r3
 8102614:	4313      	orrs	r3, r2
 8102616:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8102618:	7bfb      	ldrb	r3, [r7, #15]
 810261a:	021b      	lsls	r3, r3, #8
 810261c:	b21a      	sxth	r2, r3
 810261e:	7bbb      	ldrb	r3, [r7, #14]
 8102620:	b21b      	sxth	r3, r3
 8102622:	4313      	orrs	r3, r2
 8102624:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8102626:	7c7b      	ldrb	r3, [r7, #17]
 8102628:	021b      	lsls	r3, r3, #8
 810262a:	b21a      	sxth	r2, r3
 810262c:	7c3b      	ldrb	r3, [r7, #16]
 810262e:	b21b      	sxth	r3, r3
 8102630:	4313      	orrs	r3, r2
 8102632:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 8102634:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102638:	ee07 3a90 	vmov	s15, r3
 810263c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102640:	eeb0 0a67 	vmov.f32	s0, s15
 8102644:	f7ff ff1e 	bl	8102484 <calcAccel>
 8102648:	eef0 7a40 	vmov.f32	s15, s0
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 8102652:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102656:	ee07 3a90 	vmov	s15, r3
 810265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810265e:	eeb0 0a67 	vmov.f32	s0, s15
 8102662:	f7ff ff0f 	bl	8102484 <calcAccel>
 8102666:	eef0 7a40 	vmov.f32	s15, s0
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 8102670:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102674:	ee07 3a90 	vmov	s15, r3
 8102678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810267c:	eeb0 0a67 	vmov.f32	s0, s15
 8102680:	f7ff ff00 	bl	8102484 <calcAccel>
 8102684:	eef0 7a40 	vmov.f32	s15, s0
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

}
 810268e:	bf00      	nop
 8102690:	3718      	adds	r7, #24
 8102692:	46bd      	mov	sp, r7
 8102694:	bd80      	pop	{r7, pc}
	...

08102698 <calcGyroResolution>:
 * @brief Sets Gyroscope resolution
 * @param imu struct handle
 * @return nothing
 */
void calcGyroResolution(LSM9DS1Handle* imu)
{
 8102698:	b480      	push	{r7}
 810269a:	b083      	sub	sp, #12
 810269c:	af00      	add	r7, sp, #0
 810269e:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	885b      	ldrh	r3, [r3, #2]
 81026a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026a8:	d010      	beq.n	81026cc <calcGyroResolution+0x34>
 81026aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026ae:	dc11      	bgt.n	81026d4 <calcGyroResolution+0x3c>
 81026b0:	2bf5      	cmp	r3, #245	; 0xf5
 81026b2:	d003      	beq.n	81026bc <calcGyroResolution+0x24>
 81026b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81026b8:	d004      	beq.n	81026c4 <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 81026ba:	e00b      	b.n	81026d4 <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 81026bc:	4b09      	ldr	r3, [pc, #36]	; (81026e4 <calcGyroResolution+0x4c>)
 81026be:	4a0a      	ldr	r2, [pc, #40]	; (81026e8 <calcGyroResolution+0x50>)
 81026c0:	601a      	str	r2, [r3, #0]
      break;
 81026c2:	e008      	b.n	81026d6 <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 81026c4:	4b07      	ldr	r3, [pc, #28]	; (81026e4 <calcGyroResolution+0x4c>)
 81026c6:	4a09      	ldr	r2, [pc, #36]	; (81026ec <calcGyroResolution+0x54>)
 81026c8:	601a      	str	r2, [r3, #0]
      break;
 81026ca:	e004      	b.n	81026d6 <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 81026cc:	4b05      	ldr	r3, [pc, #20]	; (81026e4 <calcGyroResolution+0x4c>)
 81026ce:	4a08      	ldr	r2, [pc, #32]	; (81026f0 <calcGyroResolution+0x58>)
 81026d0:	601a      	str	r2, [r3, #0]
      break;
 81026d2:	e000      	b.n	81026d6 <calcGyroResolution+0x3e>
      break;
 81026d4:	bf00      	nop
  }
}
 81026d6:	bf00      	nop
 81026d8:	370c      	adds	r7, #12
 81026da:	46bd      	mov	sp, r7
 81026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e0:	4770      	bx	lr
 81026e2:	bf00      	nop
 81026e4:	100002dc 	.word	0x100002dc
 81026e8:	3c0f5c29 	.word	0x3c0f5c29
 81026ec:	3c8f5c29 	.word	0x3c8f5c29
 81026f0:	3d8f5c29 	.word	0x3d8f5c29

081026f4 <calcAccResoltuion>:
 * @brief Sets Accelerometer resolution
 * @param imu struct handle
 * @return nothing
 */
void calcAccResoltuion(LSM9DS1Handle* imu)
{
 81026f4:	b480      	push	{r7}
 81026f6:	b083      	sub	sp, #12
 81026f8:	af00      	add	r7, sp, #0
 81026fa:	6078      	str	r0, [r7, #4]
  switch(imu->accel_settings.scale)
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	7cdb      	ldrb	r3, [r3, #19]
 8102700:	3b02      	subs	r3, #2
 8102702:	2b0e      	cmp	r3, #14
 8102704:	d830      	bhi.n	8102768 <calcAccResoltuion+0x74>
 8102706:	a201      	add	r2, pc, #4	; (adr r2, 810270c <calcAccResoltuion+0x18>)
 8102708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810270c:	08102749 	.word	0x08102749
 8102710:	08102769 	.word	0x08102769
 8102714:	08102751 	.word	0x08102751
 8102718:	08102769 	.word	0x08102769
 810271c:	08102769 	.word	0x08102769
 8102720:	08102769 	.word	0x08102769
 8102724:	08102759 	.word	0x08102759
 8102728:	08102769 	.word	0x08102769
 810272c:	08102769 	.word	0x08102769
 8102730:	08102769 	.word	0x08102769
 8102734:	08102769 	.word	0x08102769
 8102738:	08102769 	.word	0x08102769
 810273c:	08102769 	.word	0x08102769
 8102740:	08102769 	.word	0x08102769
 8102744:	08102761 	.word	0x08102761
  {
    case 2:
      acc_res = ACC_FS_2G;
 8102748:	4b0b      	ldr	r3, [pc, #44]	; (8102778 <calcAccResoltuion+0x84>)
 810274a:	4a0c      	ldr	r2, [pc, #48]	; (810277c <calcAccResoltuion+0x88>)
 810274c:	601a      	str	r2, [r3, #0]
    break;
 810274e:	e00c      	b.n	810276a <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 8102750:	4b09      	ldr	r3, [pc, #36]	; (8102778 <calcAccResoltuion+0x84>)
 8102752:	4a0b      	ldr	r2, [pc, #44]	; (8102780 <calcAccResoltuion+0x8c>)
 8102754:	601a      	str	r2, [r3, #0]
     break;
 8102756:	e008      	b.n	810276a <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 8102758:	4b07      	ldr	r3, [pc, #28]	; (8102778 <calcAccResoltuion+0x84>)
 810275a:	4a0a      	ldr	r2, [pc, #40]	; (8102784 <calcAccResoltuion+0x90>)
 810275c:	601a      	str	r2, [r3, #0]
      break;
 810275e:	e004      	b.n	810276a <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 8102760:	4b05      	ldr	r3, [pc, #20]	; (8102778 <calcAccResoltuion+0x84>)
 8102762:	4a09      	ldr	r2, [pc, #36]	; (8102788 <calcAccResoltuion+0x94>)
 8102764:	601a      	str	r2, [r3, #0]
      break;
 8102766:	e000      	b.n	810276a <calcAccResoltuion+0x76>

    default:
      break;
 8102768:	bf00      	nop
  }
}
 810276a:	bf00      	nop
 810276c:	370c      	adds	r7, #12
 810276e:	46bd      	mov	sp, r7
 8102770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102774:	4770      	bx	lr
 8102776:	bf00      	nop
 8102778:	100002d4 	.word	0x100002d4
 810277c:	387fda40 	.word	0x387fda40
 8102780:	38ffda40 	.word	0x38ffda40
 8102784:	397fda40 	.word	0x397fda40
 8102788:	3a3fe3b0 	.word	0x3a3fe3b0

0810278c <calcMagResolution>:
 * @brief Sets Magnetometer resolution
 * @param imu struct handle
 * @return nothing
 */
void calcMagResolution(LSM9DS1Handle* imu)
{
 810278c:	b480      	push	{r7}
 810278e:	b083      	sub	sp, #12
 8102790:	af00      	add	r7, sp, #0
 8102792:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	7f1b      	ldrb	r3, [r3, #28]
 8102798:	3b02      	subs	r3, #2
 810279a:	2b0e      	cmp	r3, #14
 810279c:	d830      	bhi.n	8102800 <calcMagResolution+0x74>
 810279e:	a201      	add	r2, pc, #4	; (adr r2, 81027a4 <calcMagResolution+0x18>)
 81027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027a4:	081027e1 	.word	0x081027e1
 81027a8:	08102801 	.word	0x08102801
 81027ac:	081027e9 	.word	0x081027e9
 81027b0:	08102801 	.word	0x08102801
 81027b4:	08102801 	.word	0x08102801
 81027b8:	08102801 	.word	0x08102801
 81027bc:	081027f1 	.word	0x081027f1
 81027c0:	08102801 	.word	0x08102801
 81027c4:	08102801 	.word	0x08102801
 81027c8:	08102801 	.word	0x08102801
 81027cc:	08102801 	.word	0x08102801
 81027d0:	08102801 	.word	0x08102801
 81027d4:	08102801 	.word	0x08102801
 81027d8:	08102801 	.word	0x08102801
 81027dc:	081027f9 	.word	0x081027f9
  {
    case 2:
      mag_res = MAG_FS_4G;
 81027e0:	4b0b      	ldr	r3, [pc, #44]	; (8102810 <calcMagResolution+0x84>)
 81027e2:	4a0c      	ldr	r2, [pc, #48]	; (8102814 <calcMagResolution+0x88>)
 81027e4:	601a      	str	r2, [r3, #0]
    break;
 81027e6:	e00c      	b.n	8102802 <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 81027e8:	4b09      	ldr	r3, [pc, #36]	; (8102810 <calcMagResolution+0x84>)
 81027ea:	4a0b      	ldr	r2, [pc, #44]	; (8102818 <calcMagResolution+0x8c>)
 81027ec:	601a      	str	r2, [r3, #0]
     break;
 81027ee:	e008      	b.n	8102802 <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 81027f0:	4b07      	ldr	r3, [pc, #28]	; (8102810 <calcMagResolution+0x84>)
 81027f2:	4a0a      	ldr	r2, [pc, #40]	; (810281c <calcMagResolution+0x90>)
 81027f4:	601a      	str	r2, [r3, #0]
      break;
 81027f6:	e004      	b.n	8102802 <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 81027f8:	4b05      	ldr	r3, [pc, #20]	; (8102810 <calcMagResolution+0x84>)
 81027fa:	4a09      	ldr	r2, [pc, #36]	; (8102820 <calcMagResolution+0x94>)
 81027fc:	601a      	str	r2, [r3, #0]
      break;
 81027fe:	e000      	b.n	8102802 <calcMagResolution+0x76>

    default:
      break;
 8102800:	bf00      	nop
  }
}
 8102802:	bf00      	nop
 8102804:	370c      	adds	r7, #12
 8102806:	46bd      	mov	sp, r7
 8102808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280c:	4770      	bx	lr
 810280e:	bf00      	nop
 8102810:	100002d8 	.word	0x100002d8
 8102814:	3912ccf7 	.word	0x3912ccf7
 8102818:	39980b24 	.word	0x39980b24
 810281c:	39e1719f 	.word	0x39e1719f
 8102820:	3a180b24 	.word	0x3a180b24

08102824 <I2CReadBytes>:
 * @param buffer stores data
 * @param number of bytes to read
 * @returns number of bytes read
 */
uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8102824:	b580      	push	{r7, lr}
 8102826:	b088      	sub	sp, #32
 8102828:	af04      	add	r7, sp, #16
 810282a:	603a      	str	r2, [r7, #0]
 810282c:	461a      	mov	r2, r3
 810282e:	4603      	mov	r3, r0
 8102830:	71fb      	strb	r3, [r7, #7]
 8102832:	460b      	mov	r3, r1
 8102834:	71bb      	strb	r3, [r7, #6]
 8102836:	4613      	mov	r3, r2
 8102838:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 810283a:	79fb      	ldrb	r3, [r7, #7]
 810283c:	b29b      	uxth	r3, r3
 810283e:	005b      	lsls	r3, r3, #1
 8102840:	b299      	uxth	r1, r3
 8102842:	79bb      	ldrb	r3, [r7, #6]
 8102844:	b29a      	uxth	r2, r3
 8102846:	797b      	ldrb	r3, [r7, #5]
 8102848:	b29b      	uxth	r3, r3
 810284a:	2064      	movs	r0, #100	; 0x64
 810284c:	9002      	str	r0, [sp, #8]
 810284e:	9301      	str	r3, [sp, #4]
 8102850:	683b      	ldr	r3, [r7, #0]
 8102852:	9300      	str	r3, [sp, #0]
 8102854:	2301      	movs	r3, #1
 8102856:	4807      	ldr	r0, [pc, #28]	; (8102874 <I2CReadBytes+0x50>)
 8102858:	f004 fd9a 	bl	8107390 <HAL_I2C_Mem_Read>
 810285c:	4603      	mov	r3, r0
 810285e:	73fb      	strb	r3, [r7, #15]
  if(status !=HAL_OK)
 8102860:	7bfb      	ldrb	r3, [r7, #15]
 8102862:	2b00      	cmp	r3, #0
 8102864:	d001      	beq.n	810286a <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 8102866:	2301      	movs	r3, #1
 8102868:	e000      	b.n	810286c <I2CReadBytes+0x48>
  }
  return numBytes;
 810286a:	797b      	ldrb	r3, [r7, #5]
}
 810286c:	4618      	mov	r0, r3
 810286e:	3710      	adds	r7, #16
 8102870:	46bd      	mov	sp, r7
 8102872:	bd80      	pop	{r7, pc}
 8102874:	10000210 	.word	0x10000210

08102878 <WriteByte>:
 * @param reg register to write data to
 * @param data data to write
 * @returns HAL_OK on success
 */
HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 8102878:	b580      	push	{r7, lr}
 810287a:	b088      	sub	sp, #32
 810287c:	af04      	add	r7, sp, #16
 810287e:	4603      	mov	r3, r0
 8102880:	71fb      	strb	r3, [r7, #7]
 8102882:	460b      	mov	r3, r1
 8102884:	71bb      	strb	r3, [r7, #6]
 8102886:	4613      	mov	r3, r2
 8102888:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 810288a:	79fb      	ldrb	r3, [r7, #7]
 810288c:	b29b      	uxth	r3, r3
 810288e:	005b      	lsls	r3, r3, #1
 8102890:	b299      	uxth	r1, r3
 8102892:	79bb      	ldrb	r3, [r7, #6]
 8102894:	b29a      	uxth	r2, r3
 8102896:	2364      	movs	r3, #100	; 0x64
 8102898:	9302      	str	r3, [sp, #8]
 810289a:	2301      	movs	r3, #1
 810289c:	9301      	str	r3, [sp, #4]
 810289e:	1d7b      	adds	r3, r7, #5
 81028a0:	9300      	str	r3, [sp, #0]
 81028a2:	2301      	movs	r3, #1
 81028a4:	4807      	ldr	r0, [pc, #28]	; (81028c4 <WriteByte+0x4c>)
 81028a6:	f004 fc5f 	bl	8107168 <HAL_I2C_Mem_Write>
 81028aa:	4603      	mov	r3, r0
 81028ac:	73fb      	strb	r3, [r7, #15]
  if(status !=HAL_OK)
 81028ae:	7bfb      	ldrb	r3, [r7, #15]
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d001      	beq.n	81028b8 <WriteByte+0x40>
  {
    return HAL_ERROR;
 81028b4:	2301      	movs	r3, #1
 81028b6:	e000      	b.n	81028ba <WriteByte+0x42>
  }
  return HAL_OK;
 81028b8:	2300      	movs	r3, #0
}
 81028ba:	4618      	mov	r0, r3
 81028bc:	3710      	adds	r7, #16
 81028be:	46bd      	mov	sp, r7
 81028c0:	bd80      	pop	{r7, pc}
 81028c2:	bf00      	nop
 81028c4:	10000210 	.word	0x10000210

081028c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81028c8:	b580      	push	{r7, lr}
 81028ca:	b082      	sub	sp, #8
 81028cc:	af00      	add	r7, sp, #0
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81028ce:	4b21      	ldr	r3, [pc, #132]	; (8102954 <main+0x8c>)
 81028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028d4:	4a1f      	ldr	r2, [pc, #124]	; (8102954 <main+0x8c>)
 81028d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81028da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81028de:	4b1d      	ldr	r3, [pc, #116]	; (8102954 <main+0x8c>)
 81028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81028e8:	607b      	str	r3, [r7, #4]
 81028ea:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81028ec:	2001      	movs	r0, #1
 81028ee:	f004 fb99 	bl	8107024 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81028f2:	f005 fff7 	bl	81088e4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81028f6:	2201      	movs	r2, #1
 81028f8:	2102      	movs	r1, #2
 81028fa:	2000      	movs	r0, #0
 81028fc:	f005 ff78 	bl	81087f0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102900:	4b15      	ldr	r3, [pc, #84]	; (8102958 <main+0x90>)
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	091b      	lsrs	r3, r3, #4
 8102906:	f003 030f 	and.w	r3, r3, #15
 810290a:	2b07      	cmp	r3, #7
 810290c:	d108      	bne.n	8102920 <main+0x58>
 810290e:	4b13      	ldr	r3, [pc, #76]	; (810295c <main+0x94>)
 8102910:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8102914:	4a11      	ldr	r2, [pc, #68]	; (810295c <main+0x94>)
 8102916:	f043 0301 	orr.w	r3, r3, #1
 810291a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810291e:	e007      	b.n	8102930 <main+0x68>
 8102920:	4b0e      	ldr	r3, [pc, #56]	; (810295c <main+0x94>)
 8102922:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8102926:	4a0d      	ldr	r2, [pc, #52]	; (810295c <main+0x94>)
 8102928:	f043 0301 	orr.w	r3, r3, #1
 810292c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102930:	f000 fe4c 	bl	81035cc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102934:	f7ff f91c 	bl	8101b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8102938:	f7ff f8ba 	bl	8101ab0 <MX_DMA_Init>
  MX_SPI1_Init();
 810293c:	f000 f94c 	bl	8102bd8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8102940:	f7ff f978 	bl	8101c34 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8102944:	f000 fcf8 	bl	8103338 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ConfigSensors();
 8102948:	f000 f91e 	bl	8102b88 <ConfigSensors>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    ReadSensors();
 810294c:	f000 f84a 	bl	81029e4 <ReadSensors>
 8102950:	e7fc      	b.n	810294c <main+0x84>
 8102952:	bf00      	nop
 8102954:	58024400 	.word	0x58024400
 8102958:	e000ed00 	.word	0xe000ed00
 810295c:	58026400 	.word	0x58026400

08102960 <GpsTask>:
/*
 * @brief Processes the GPS data
 * @retval none
 */
void GpsTask(void)
{
 8102960:	b580      	push	{r7, lr}
 8102962:	af00      	add	r7, sp, #0
     processGPS(&gps);
 8102964:	4803      	ldr	r0, [pc, #12]	; (8102974 <GpsTask+0x14>)
 8102966:	f000 fb4b 	bl	8103000 <processGPS>
  M4DataToM7(GPS_DATA_TYPE);
 810296a:	2001      	movs	r0, #1
 810296c:	f000 f848 	bl	8102a00 <M4DataToM7>
}
 8102970:	bf00      	nop
 8102972:	bd80      	pop	{r7, pc}
 8102974:	100002e0 	.word	0x100002e0

08102978 <AccelTask>:
 * @brief Processes the Accelerometer
 * data from the IMU
 * @retval none
 */
void AccelTask(void)
{
 8102978:	b580      	push	{r7, lr}
 810297a:	af00      	add	r7, sp, #0
    readAccel(&imu);
 810297c:	4803      	ldr	r0, [pc, #12]	; (810298c <AccelTask+0x14>)
 810297e:	f7ff fe39 	bl	81025f4 <readAccel>
  M4DataToM7(ACC_DATA_TYPE);
 8102982:	2003      	movs	r0, #3
 8102984:	f000 f83c 	bl	8102a00 <M4DataToM7>
}
 8102988:	bf00      	nop
 810298a:	bd80      	pop	{r7, pc}
 810298c:	10000360 	.word	0x10000360

08102990 <GyroTask>:
 * @brief Processes Gyro data
 * from the IMU
 * @retval none
 */
void GyroTask(void)
{
 8102990:	b580      	push	{r7, lr}
 8102992:	af00      	add	r7, sp, #0
    readGyro(&imu);
 8102994:	4803      	ldr	r0, [pc, #12]	; (81029a4 <GyroTask+0x14>)
 8102996:	f7ff fd8b 	bl	81024b0 <readGyro>
  M4DataToM7(GYRO_DATA_TYPE);
 810299a:	2004      	movs	r0, #4
 810299c:	f000 f830 	bl	8102a00 <M4DataToM7>
}
 81029a0:	bf00      	nop
 81029a2:	bd80      	pop	{r7, pc}
 81029a4:	10000360 	.word	0x10000360

081029a8 <MagTask>:
/*
 * @brief Processes Mag Data from IMU
 * @retval None
 */
void MagTask(void)
{
 81029a8:	b580      	push	{r7, lr}
 81029aa:	af00      	add	r7, sp, #0
  readMag(&imu);
 81029ac:	4803      	ldr	r0, [pc, #12]	; (81029bc <MagTask+0x14>)
 81029ae:	f7ff fdd0 	bl	8102552 <readMag>
  M4DataToM7(MAG_DATA_TYPE);
 81029b2:	2002      	movs	r0, #2
 81029b4:	f000 f824 	bl	8102a00 <M4DataToM7>
}
 81029b8:	bf00      	nop
 81029ba:	bd80      	pop	{r7, pc}
 81029bc:	10000360 	.word	0x10000360

081029c0 <BaroTask>:
 * @brief Processes barometer data from the
 * BMP280
 * @retval None
 */
void BaroTask(void)
{
 81029c0:	b580      	push	{r7, lr}
 81029c2:	af00      	add	r7, sp, #0
  ReadTemp(&baro);
 81029c4:	4806      	ldr	r0, [pc, #24]	; (81029e0 <BaroTask+0x20>)
 81029c6:	f7fe fde3 	bl	8101590 <ReadTemp>
  ReadPressure(&baro);
 81029ca:	4805      	ldr	r0, [pc, #20]	; (81029e0 <BaroTask+0x20>)
 81029cc:	f7fe fe30 	bl	8101630 <ReadPressure>
  ReadAltitude(&baro);
 81029d0:	4803      	ldr	r0, [pc, #12]	; (81029e0 <BaroTask+0x20>)
 81029d2:	f7ff f80d 	bl	81019f0 <ReadAltitude>

   M4DataToM7(BARO_DATA_TYPE);
 81029d6:	2005      	movs	r0, #5
 81029d8:	f000 f812 	bl	8102a00 <M4DataToM7>

}
 81029dc:	bf00      	nop
 81029de:	bd80      	pop	{r7, pc}
 81029e0:	100003b4 	.word	0x100003b4

081029e4 <ReadSensors>:
 * @note, You can comment out a task if you don't want
 * data from it.
 * @retval None.
 */
void ReadSensors(void)
{
 81029e4:	b580      	push	{r7, lr}
 81029e6:	af00      	add	r7, sp, #0
  GpsTask();
 81029e8:	f7ff ffba 	bl	8102960 <GpsTask>

  AccelTask();
 81029ec:	f7ff ffc4 	bl	8102978 <AccelTask>

  GyroTask();
 81029f0:	f7ff ffce 	bl	8102990 <GyroTask>

  MagTask();
 81029f4:	f7ff ffd8 	bl	81029a8 <MagTask>

  BaroTask();
 81029f8:	f7ff ffe2 	bl	81029c0 <BaroTask>

}
 81029fc:	bf00      	nop
 81029fe:	bd80      	pop	{r7, pc}

08102a00 <M4DataToM7>:
 * from the M4 core to the M7.
 * @param data_type Sensor data type to send
 * @retval None
 */
void M4DataToM7(uint8_t data_type)
{
 8102a00:	b580      	push	{r7, lr}
 8102a02:	b082      	sub	sp, #8
 8102a04:	af00      	add	r7, sp, #0
 8102a06:	4603      	mov	r3, r0
 8102a08:	71fb      	strb	r3, [r7, #7]

  switch (data_type)
 8102a0a:	79fb      	ldrb	r3, [r7, #7]
 8102a0c:	3b01      	subs	r3, #1
 8102a0e:	2b04      	cmp	r3, #4
 8102a10:	f200 80a4 	bhi.w	8102b5c <M4DataToM7+0x15c>
 8102a14:	a201      	add	r2, pc, #4	; (adr r2, 8102a1c <M4DataToM7+0x1c>)
 8102a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a1a:	bf00      	nop
 8102a1c:	08102a31 	.word	0x08102a31
 8102a20:	08102aff 	.word	0x08102aff
 8102a24:	08102a97 	.word	0x08102a97
 8102a28:	08102acb 	.word	0x08102acb
 8102a2c:	08102b33 	.word	0x08102b33
  {
  case GPS_DATA_TYPE:
  {
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102a30:	2000      	movs	r0, #0
 8102a32:	f004 fac9 	bl	8106fc8 <HAL_HSEM_FastTake>
 8102a36:	4603      	mov	r3, r0
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	d127      	bne.n	8102a8c <M4DataToM7+0x8c>
    {

      gps_values_m4->gps_latitude = gps.latitude;
 8102a3c:	4b4a      	ldr	r3, [pc, #296]	; (8102b68 <M4DataToM7+0x168>)
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	4a4a      	ldr	r2, [pc, #296]	; (8102b6c <M4DataToM7+0x16c>)
 8102a42:	6812      	ldr	r2, [r2, #0]
 8102a44:	601a      	str	r2, [r3, #0]
      gps_values_m4->gps_longitude = gps.longitude;
 8102a46:	4b48      	ldr	r3, [pc, #288]	; (8102b68 <M4DataToM7+0x168>)
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	4a48      	ldr	r2, [pc, #288]	; (8102b6c <M4DataToM7+0x16c>)
 8102a4c:	6852      	ldr	r2, [r2, #4]
 8102a4e:	605a      	str	r2, [r3, #4]
      gps_values_m4->gps_altitude = gps.altitude;
 8102a50:	4b45      	ldr	r3, [pc, #276]	; (8102b68 <M4DataToM7+0x168>)
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	4a45      	ldr	r2, [pc, #276]	; (8102b6c <M4DataToM7+0x16c>)
 8102a56:	6892      	ldr	r2, [r2, #8]
 8102a58:	609a      	str	r2, [r3, #8]
      gps_values_m4->gps_velocity_x = gps.vel_x;
 8102a5a:	4b43      	ldr	r3, [pc, #268]	; (8102b68 <M4DataToM7+0x168>)
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	4a43      	ldr	r2, [pc, #268]	; (8102b6c <M4DataToM7+0x16c>)
 8102a60:	68d2      	ldr	r2, [r2, #12]
 8102a62:	60da      	str	r2, [r3, #12]
      gps_values_m4->gps_velocity_y = gps.vel_y;
 8102a64:	4b40      	ldr	r3, [pc, #256]	; (8102b68 <M4DataToM7+0x168>)
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	4a40      	ldr	r2, [pc, #256]	; (8102b6c <M4DataToM7+0x16c>)
 8102a6a:	6912      	ldr	r2, [r2, #16]
 8102a6c:	611a      	str	r2, [r3, #16]
      gps_values_m4->gps_velocity_z = gps.vel_z;
 8102a6e:	4b3e      	ldr	r3, [pc, #248]	; (8102b68 <M4DataToM7+0x168>)
 8102a70:	681b      	ldr	r3, [r3, #0]
 8102a72:	4a3e      	ldr	r2, [pc, #248]	; (8102b6c <M4DataToM7+0x16c>)
 8102a74:	6952      	ldr	r2, [r2, #20]
 8102a76:	615a      	str	r2, [r3, #20]
      gps_values_m4->gnd_speed = gps.gndSpeed;
 8102a78:	4b3b      	ldr	r3, [pc, #236]	; (8102b68 <M4DataToM7+0x168>)
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	4a3b      	ldr	r2, [pc, #236]	; (8102b6c <M4DataToM7+0x16c>)
 8102a7e:	6992      	ldr	r2, [r2, #24]
 8102a80:	619a      	str	r2, [r3, #24]
      gps_values_m4->gps_satellites = gps.num_satellites;
 8102a82:	4b39      	ldr	r3, [pc, #228]	; (8102b68 <M4DataToM7+0x168>)
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	4a39      	ldr	r2, [pc, #228]	; (8102b6c <M4DataToM7+0x16c>)
 8102a88:	69d2      	ldr	r2, [r2, #28]
 8102a8a:	61da      	str	r2, [r3, #28]
    }
    // Release semaphore
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8102a8c:	2100      	movs	r1, #0
 8102a8e:	2000      	movs	r0, #0
 8102a90:	f004 fab4 	bl	8106ffc <HAL_HSEM_Release>
    break;
 8102a94:	e063      	b.n	8102b5e <M4DataToM7+0x15e>
  }

  case ACC_DATA_TYPE:
  {
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102a96:	2000      	movs	r0, #0
 8102a98:	f004 fa96 	bl	8106fc8 <HAL_HSEM_FastTake>
 8102a9c:	4603      	mov	r3, r0
 8102a9e:	2b00      	cmp	r3, #0
 8102aa0:	d10e      	bne.n	8102ac0 <M4DataToM7+0xc0>
    {
      acc_values_m4->imu_acc_x = imu.accel_values.x;
 8102aa2:	4b33      	ldr	r3, [pc, #204]	; (8102b70 <M4DataToM7+0x170>)
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	4a33      	ldr	r2, [pc, #204]	; (8102b74 <M4DataToM7+0x174>)
 8102aa8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102aaa:	601a      	str	r2, [r3, #0]
      acc_values_m4->imu_acc_y = imu.accel_values.y;
 8102aac:	4b30      	ldr	r3, [pc, #192]	; (8102b70 <M4DataToM7+0x170>)
 8102aae:	681b      	ldr	r3, [r3, #0]
 8102ab0:	4a30      	ldr	r2, [pc, #192]	; (8102b74 <M4DataToM7+0x174>)
 8102ab2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102ab4:	605a      	str	r2, [r3, #4]
      acc_values_m4->imu_acc_z = imu.accel_values.z;
 8102ab6:	4b2e      	ldr	r3, [pc, #184]	; (8102b70 <M4DataToM7+0x170>)
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	4a2e      	ldr	r2, [pc, #184]	; (8102b74 <M4DataToM7+0x174>)
 8102abc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102abe:	609a      	str	r2, [r3, #8]
    }
    // Release semaphore
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8102ac0:	2100      	movs	r1, #0
 8102ac2:	2000      	movs	r0, #0
 8102ac4:	f004 fa9a 	bl	8106ffc <HAL_HSEM_Release>

    break;
 8102ac8:	e049      	b.n	8102b5e <M4DataToM7+0x15e>
  }

  case GYRO_DATA_TYPE:
  {
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102aca:	2000      	movs	r0, #0
 8102acc:	f004 fa7c 	bl	8106fc8 <HAL_HSEM_FastTake>
 8102ad0:	4603      	mov	r3, r0
 8102ad2:	2b00      	cmp	r3, #0
 8102ad4:	d10e      	bne.n	8102af4 <M4DataToM7+0xf4>
    {
      gyro_values_m4->imu_gyro_x = imu.gyro_values.x;
 8102ad6:	4b28      	ldr	r3, [pc, #160]	; (8102b78 <M4DataToM7+0x178>)
 8102ad8:	681b      	ldr	r3, [r3, #0]
 8102ada:	4a26      	ldr	r2, [pc, #152]	; (8102b74 <M4DataToM7+0x174>)
 8102adc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102ade:	601a      	str	r2, [r3, #0]
      gyro_values_m4->imu_gyro_y = imu.gyro_values.y;
 8102ae0:	4b25      	ldr	r3, [pc, #148]	; (8102b78 <M4DataToM7+0x178>)
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	4a23      	ldr	r2, [pc, #140]	; (8102b74 <M4DataToM7+0x174>)
 8102ae6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102ae8:	605a      	str	r2, [r3, #4]
      gyro_values_m4->imu_gyro_z = imu.gyro_values.z;
 8102aea:	4b23      	ldr	r3, [pc, #140]	; (8102b78 <M4DataToM7+0x178>)
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	4a21      	ldr	r2, [pc, #132]	; (8102b74 <M4DataToM7+0x174>)
 8102af0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102af2:	609a      	str	r2, [r3, #8]
    }
    // Release semaphore
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8102af4:	2100      	movs	r1, #0
 8102af6:	2000      	movs	r0, #0
 8102af8:	f004 fa80 	bl	8106ffc <HAL_HSEM_Release>

    break;
 8102afc:	e02f      	b.n	8102b5e <M4DataToM7+0x15e>
  }

  case MAG_DATA_TYPE:
  {

    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102afe:	2000      	movs	r0, #0
 8102b00:	f004 fa62 	bl	8106fc8 <HAL_HSEM_FastTake>
 8102b04:	4603      	mov	r3, r0
 8102b06:	2b00      	cmp	r3, #0
 8102b08:	d10e      	bne.n	8102b28 <M4DataToM7+0x128>
    {
      mag_values_m4->imu_mag_x = imu.mag_values.x;
 8102b0a:	4b1c      	ldr	r3, [pc, #112]	; (8102b7c <M4DataToM7+0x17c>)
 8102b0c:	681b      	ldr	r3, [r3, #0]
 8102b0e:	4a19      	ldr	r2, [pc, #100]	; (8102b74 <M4DataToM7+0x174>)
 8102b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8102b12:	601a      	str	r2, [r3, #0]
      mag_values_m4->imu_mag_y = imu.mag_values.y;
 8102b14:	4b19      	ldr	r3, [pc, #100]	; (8102b7c <M4DataToM7+0x17c>)
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	4a16      	ldr	r2, [pc, #88]	; (8102b74 <M4DataToM7+0x174>)
 8102b1a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8102b1c:	605a      	str	r2, [r3, #4]
      mag_values_m4->imu_mag_z = imu.mag_values.z;
 8102b1e:	4b17      	ldr	r3, [pc, #92]	; (8102b7c <M4DataToM7+0x17c>)
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	4a14      	ldr	r2, [pc, #80]	; (8102b74 <M4DataToM7+0x174>)
 8102b24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8102b26:	609a      	str	r2, [r3, #8]
    }
    // Release semaphore
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8102b28:	2100      	movs	r1, #0
 8102b2a:	2000      	movs	r0, #0
 8102b2c:	f004 fa66 	bl	8106ffc <HAL_HSEM_Release>
    break;
 8102b30:	e015      	b.n	8102b5e <M4DataToM7+0x15e>
  }

  case BARO_DATA_TYPE:
  {
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102b32:	2000      	movs	r0, #0
 8102b34:	f004 fa48 	bl	8106fc8 <HAL_HSEM_FastTake>
 8102b38:	4603      	mov	r3, r0
 8102b3a:	2b00      	cmp	r3, #0
 8102b3c:	d109      	bne.n	8102b52 <M4DataToM7+0x152>
    {
      baro_values_m4->baro_altitude = baro.altitude;
 8102b3e:	4b10      	ldr	r3, [pc, #64]	; (8102b80 <M4DataToM7+0x180>)
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	4a10      	ldr	r2, [pc, #64]	; (8102b84 <M4DataToM7+0x184>)
 8102b44:	6892      	ldr	r2, [r2, #8]
 8102b46:	605a      	str	r2, [r3, #4]
      baro_values_m4->baro_pressure = baro.pressure;
 8102b48:	4b0d      	ldr	r3, [pc, #52]	; (8102b80 <M4DataToM7+0x180>)
 8102b4a:	681b      	ldr	r3, [r3, #0]
 8102b4c:	4a0d      	ldr	r2, [pc, #52]	; (8102b84 <M4DataToM7+0x184>)
 8102b4e:	6852      	ldr	r2, [r2, #4]
 8102b50:	601a      	str	r2, [r3, #0]
    }
    // Release semaphore
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8102b52:	2100      	movs	r1, #0
 8102b54:	2000      	movs	r0, #0
 8102b56:	f004 fa51 	bl	8106ffc <HAL_HSEM_Release>
    break;
 8102b5a:	e000      	b.n	8102b5e <M4DataToM7+0x15e>
  }

  default:
    break;
 8102b5c:	bf00      	nop

  }
}
 8102b5e:	bf00      	nop
 8102b60:	3708      	adds	r7, #8
 8102b62:	46bd      	mov	sp, r7
 8102b64:	bd80      	pop	{r7, pc}
 8102b66:	bf00      	nop
 8102b68:	10000018 	.word	0x10000018
 8102b6c:	100002e0 	.word	0x100002e0
 8102b70:	10000008 	.word	0x10000008
 8102b74:	10000360 	.word	0x10000360
 8102b78:	1000000c 	.word	0x1000000c
 8102b7c:	10000010 	.word	0x10000010
 8102b80:	10000014 	.word	0x10000014
 8102b84:	100003b4 	.word	0x100003b4

08102b88 <ConfigSensors>:
/*
 * @brief Initialises the sensors
 * @retval HAL_OK if successful
 */
uint8_t ConfigSensors(void)
{
 8102b88:	b580      	push	{r7, lr}
 8102b8a:	af00      	add	r7, sp, #0


  // COnfigure GPS Sensor
  ConfigGPS();
 8102b8c:	f000 fab6 	bl	81030fc <ConfigGPS>

  HAL_Delay(100);
 8102b90:	2064      	movs	r0, #100	; 0x64
 8102b92:	f000 fdcf 	bl	8103734 <HAL_Delay>
  // Configure IMU;
  if (ConfigIMU(&imu) != HAL_OK)
 8102b96:	480b      	ldr	r0, [pc, #44]	; (8102bc4 <ConfigSensors+0x3c>)
 8102b98:	f7ff fa3d 	bl	8102016 <ConfigIMU>
 8102b9c:	4603      	mov	r3, r0
 8102b9e:	2b00      	cmp	r3, #0
 8102ba0:	d001      	beq.n	8102ba6 <ConfigSensors+0x1e>
  {
    return HAL_ERROR;
 8102ba2:	2301      	movs	r3, #1
 8102ba4:	e00b      	b.n	8102bbe <ConfigSensors+0x36>
  }

  HAL_Delay(100);
 8102ba6:	2064      	movs	r0, #100	; 0x64
 8102ba8:	f000 fdc4 	bl	8103734 <HAL_Delay>

  // Configure BMP280
  if (ConfigBMP280(&baro) != HAL_OK)
 8102bac:	4806      	ldr	r0, [pc, #24]	; (8102bc8 <ConfigSensors+0x40>)
 8102bae:	f7fe fb6a 	bl	8101286 <ConfigBMP280>
 8102bb2:	4603      	mov	r3, r0
 8102bb4:	2b00      	cmp	r3, #0
 8102bb6:	d001      	beq.n	8102bbc <ConfigSensors+0x34>
  {
    return HAL_ERROR;
 8102bb8:	2301      	movs	r3, #1
 8102bba:	e000      	b.n	8102bbe <ConfigSensors+0x36>
  }

 return HAL_OK;
 8102bbc:	2300      	movs	r3, #0


}
 8102bbe:	4618      	mov	r0, r3
 8102bc0:	bd80      	pop	{r7, pc}
 8102bc2:	bf00      	nop
 8102bc4:	10000360 	.word	0x10000360
 8102bc8:	100003b4 	.word	0x100003b4

08102bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102bcc:	b480      	push	{r7}
 8102bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102bd0:	b672      	cpsid	i
}
 8102bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102bd4:	e7fe      	b.n	8102bd4 <Error_Handler+0x8>
	...

08102bd8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102bd8:	b580      	push	{r7, lr}
 8102bda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102bdc:	4b27      	ldr	r3, [pc, #156]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102bde:	4a28      	ldr	r2, [pc, #160]	; (8102c80 <MX_SPI1_Init+0xa8>)
 8102be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102be2:	4b26      	ldr	r3, [pc, #152]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102be4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102bea:	4b24      	ldr	r3, [pc, #144]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102bec:	2200      	movs	r2, #0
 8102bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102bf0:	4b22      	ldr	r3, [pc, #136]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102bf2:	2207      	movs	r2, #7
 8102bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102bf6:	4b21      	ldr	r3, [pc, #132]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102bf8:	2200      	movs	r2, #0
 8102bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102bfc:	4b1f      	ldr	r3, [pc, #124]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102bfe:	2200      	movs	r2, #0
 8102c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102c02:	4b1e      	ldr	r3, [pc, #120]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102c0a:	4b1c      	ldr	r3, [pc, #112]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102c10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102c12:	4b1a      	ldr	r3, [pc, #104]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c14:	2200      	movs	r2, #0
 8102c16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102c18:	4b18      	ldr	r3, [pc, #96]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c1a:	2200      	movs	r2, #0
 8102c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102c1e:	4b17      	ldr	r3, [pc, #92]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c20:	2200      	movs	r2, #0
 8102c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102c24:	4b15      	ldr	r3, [pc, #84]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c26:	2200      	movs	r2, #0
 8102c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102c2a:	4b14      	ldr	r3, [pc, #80]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102c30:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102c32:	4b12      	ldr	r3, [pc, #72]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c34:	2200      	movs	r2, #0
 8102c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102c38:	4b10      	ldr	r3, [pc, #64]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c3a:	2200      	movs	r2, #0
 8102c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102c3e:	4b0f      	ldr	r3, [pc, #60]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c40:	2200      	movs	r2, #0
 8102c42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102c44:	4b0d      	ldr	r3, [pc, #52]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c46:	2200      	movs	r2, #0
 8102c48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102c4a:	4b0c      	ldr	r3, [pc, #48]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c4c:	2200      	movs	r2, #0
 8102c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102c50:	4b0a      	ldr	r3, [pc, #40]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c52:	2200      	movs	r2, #0
 8102c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102c56:	4b09      	ldr	r3, [pc, #36]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c58:	2200      	movs	r2, #0
 8102c5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102c5c:	4b07      	ldr	r3, [pc, #28]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c5e:	2200      	movs	r2, #0
 8102c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102c62:	4b06      	ldr	r3, [pc, #24]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c64:	2200      	movs	r2, #0
 8102c66:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102c68:	4804      	ldr	r0, [pc, #16]	; (8102c7c <MX_SPI1_Init+0xa4>)
 8102c6a:	f007 fb83 	bl	810a374 <HAL_SPI_Init>
 8102c6e:	4603      	mov	r3, r0
 8102c70:	2b00      	cmp	r3, #0
 8102c72:	d001      	beq.n	8102c78 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102c74:	f7ff ffaa 	bl	8102bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102c78:	bf00      	nop
 8102c7a:	bd80      	pop	{r7, pc}
 8102c7c:	100003e4 	.word	0x100003e4
 8102c80:	40013000 	.word	0x40013000

08102c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102c84:	b580      	push	{r7, lr}
 8102c86:	b0b8      	sub	sp, #224	; 0xe0
 8102c88:	af00      	add	r7, sp, #0
 8102c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102c90:	2200      	movs	r2, #0
 8102c92:	601a      	str	r2, [r3, #0]
 8102c94:	605a      	str	r2, [r3, #4]
 8102c96:	609a      	str	r2, [r3, #8]
 8102c98:	60da      	str	r2, [r3, #12]
 8102c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c9c:	f107 0310 	add.w	r3, r7, #16
 8102ca0:	22bc      	movs	r2, #188	; 0xbc
 8102ca2:	2100      	movs	r1, #0
 8102ca4:	4618      	mov	r0, r3
 8102ca6:	f00a fc19 	bl	810d4dc <memset>
  if(spiHandle->Instance==SPI1)
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	4a57      	ldr	r2, [pc, #348]	; (8102e0c <HAL_SPI_MspInit+0x188>)
 8102cb0:	4293      	cmp	r3, r2
 8102cb2:	f040 80a6 	bne.w	8102e02 <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102cba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102cbc:	2300      	movs	r3, #0
 8102cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102cc0:	f107 0310 	add.w	r3, r7, #16
 8102cc4:	4618      	mov	r0, r3
 8102cc6:	f005 fff3 	bl	8108cb0 <HAL_RCCEx_PeriphCLKConfig>
 8102cca:	4603      	mov	r3, r0
 8102ccc:	2b00      	cmp	r3, #0
 8102cce:	d001      	beq.n	8102cd4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8102cd0:	f7ff ff7c 	bl	8102bcc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102cd4:	4b4e      	ldr	r3, [pc, #312]	; (8102e10 <HAL_SPI_MspInit+0x18c>)
 8102cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102cda:	4a4d      	ldr	r2, [pc, #308]	; (8102e10 <HAL_SPI_MspInit+0x18c>)
 8102cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102ce4:	4b4a      	ldr	r3, [pc, #296]	; (8102e10 <HAL_SPI_MspInit+0x18c>)
 8102ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102cee:	60fb      	str	r3, [r7, #12]
 8102cf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102cf2:	4b47      	ldr	r3, [pc, #284]	; (8102e10 <HAL_SPI_MspInit+0x18c>)
 8102cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102cf8:	4a45      	ldr	r2, [pc, #276]	; (8102e10 <HAL_SPI_MspInit+0x18c>)
 8102cfa:	f043 0301 	orr.w	r3, r3, #1
 8102cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102d02:	4b43      	ldr	r3, [pc, #268]	; (8102e10 <HAL_SPI_MspInit+0x18c>)
 8102d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102d08:	f003 0301 	and.w	r3, r3, #1
 8102d0c:	60bb      	str	r3, [r7, #8]
 8102d0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8102d10:	23e0      	movs	r3, #224	; 0xe0
 8102d12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d16:	2302      	movs	r3, #2
 8102d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d1c:	2300      	movs	r3, #0
 8102d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d22:	2300      	movs	r3, #0
 8102d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102d28:	2305      	movs	r3, #5
 8102d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102d2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102d32:	4619      	mov	r1, r3
 8102d34:	4837      	ldr	r0, [pc, #220]	; (8102e14 <HAL_SPI_MspInit+0x190>)
 8102d36:	f003 ff7d 	bl	8106c34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102d3a:	4b37      	ldr	r3, [pc, #220]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d3c:	4a37      	ldr	r2, [pc, #220]	; (8102e1c <HAL_SPI_MspInit+0x198>)
 8102d3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102d40:	4b35      	ldr	r3, [pc, #212]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d42:	2225      	movs	r2, #37	; 0x25
 8102d44:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102d46:	4b34      	ldr	r3, [pc, #208]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d48:	2200      	movs	r2, #0
 8102d4a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102d4c:	4b32      	ldr	r3, [pc, #200]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d4e:	2200      	movs	r2, #0
 8102d50:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102d52:	4b31      	ldr	r3, [pc, #196]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102d58:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102d5a:	4b2f      	ldr	r3, [pc, #188]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d5c:	2200      	movs	r2, #0
 8102d5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102d60:	4b2d      	ldr	r3, [pc, #180]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d62:	2200      	movs	r2, #0
 8102d64:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102d66:	4b2c      	ldr	r3, [pc, #176]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d68:	2200      	movs	r2, #0
 8102d6a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102d6c:	4b2a      	ldr	r3, [pc, #168]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102d72:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102d74:	4b28      	ldr	r3, [pc, #160]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d76:	2200      	movs	r2, #0
 8102d78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102d7a:	4827      	ldr	r0, [pc, #156]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d7c:	f001 f914 	bl	8103fa8 <HAL_DMA_Init>
 8102d80:	4603      	mov	r3, r0
 8102d82:	2b00      	cmp	r3, #0
 8102d84:	d001      	beq.n	8102d8a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102d86:	f7ff ff21 	bl	8102bcc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	4a22      	ldr	r2, [pc, #136]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d8e:	67da      	str	r2, [r3, #124]	; 0x7c
 8102d90:	4a21      	ldr	r2, [pc, #132]	; (8102e18 <HAL_SPI_MspInit+0x194>)
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102d96:	4b22      	ldr	r3, [pc, #136]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102d98:	4a22      	ldr	r2, [pc, #136]	; (8102e24 <HAL_SPI_MspInit+0x1a0>)
 8102d9a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102d9c:	4b20      	ldr	r3, [pc, #128]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102d9e:	2226      	movs	r2, #38	; 0x26
 8102da0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102da2:	4b1f      	ldr	r3, [pc, #124]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102da4:	2240      	movs	r2, #64	; 0x40
 8102da6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102da8:	4b1d      	ldr	r3, [pc, #116]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102daa:	2200      	movs	r2, #0
 8102dac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102dae:	4b1c      	ldr	r3, [pc, #112]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102db4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102db6:	4b1a      	ldr	r3, [pc, #104]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102db8:	2200      	movs	r2, #0
 8102dba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102dbc:	4b18      	ldr	r3, [pc, #96]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dbe:	2200      	movs	r2, #0
 8102dc0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8102dc2:	4b17      	ldr	r3, [pc, #92]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dc4:	2200      	movs	r2, #0
 8102dc6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102dc8:	4b15      	ldr	r3, [pc, #84]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102dce:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102dd0:	4b13      	ldr	r3, [pc, #76]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dd2:	2200      	movs	r2, #0
 8102dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102dd6:	4812      	ldr	r0, [pc, #72]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dd8:	f001 f8e6 	bl	8103fa8 <HAL_DMA_Init>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	2b00      	cmp	r3, #0
 8102de0:	d001      	beq.n	8102de6 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8102de2:	f7ff fef3 	bl	8102bcc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	4a0d      	ldr	r2, [pc, #52]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dea:	679a      	str	r2, [r3, #120]	; 0x78
 8102dec:	4a0c      	ldr	r2, [pc, #48]	; (8102e20 <HAL_SPI_MspInit+0x19c>)
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102df2:	2200      	movs	r2, #0
 8102df4:	2100      	movs	r1, #0
 8102df6:	2023      	movs	r0, #35	; 0x23
 8102df8:	f001 f88d 	bl	8103f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102dfc:	2023      	movs	r0, #35	; 0x23
 8102dfe:	f001 f8a4 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8102e02:	bf00      	nop
 8102e04:	37e0      	adds	r7, #224	; 0xe0
 8102e06:	46bd      	mov	sp, r7
 8102e08:	bd80      	pop	{r7, pc}
 8102e0a:	bf00      	nop
 8102e0c:	40013000 	.word	0x40013000
 8102e10:	58024400 	.word	0x58024400
 8102e14:	58020000 	.word	0x58020000
 8102e18:	1000046c 	.word	0x1000046c
 8102e1c:	40020010 	.word	0x40020010
 8102e20:	100004e4 	.word	0x100004e4
 8102e24:	40020028 	.word	0x40020028

08102e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102e28:	b480      	push	{r7}
 8102e2a:	b083      	sub	sp, #12
 8102e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102e2e:	4b0a      	ldr	r3, [pc, #40]	; (8102e58 <HAL_MspInit+0x30>)
 8102e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102e34:	4a08      	ldr	r2, [pc, #32]	; (8102e58 <HAL_MspInit+0x30>)
 8102e36:	f043 0302 	orr.w	r3, r3, #2
 8102e3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102e3e:	4b06      	ldr	r3, [pc, #24]	; (8102e58 <HAL_MspInit+0x30>)
 8102e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102e44:	f003 0302 	and.w	r3, r3, #2
 8102e48:	607b      	str	r3, [r7, #4]
 8102e4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102e4c:	bf00      	nop
 8102e4e:	370c      	adds	r7, #12
 8102e50:	46bd      	mov	sp, r7
 8102e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e56:	4770      	bx	lr
 8102e58:	58024400 	.word	0x58024400

08102e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102e5c:	b480      	push	{r7}
 8102e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102e60:	e7fe      	b.n	8102e60 <NMI_Handler+0x4>

08102e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102e62:	b480      	push	{r7}
 8102e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102e66:	e7fe      	b.n	8102e66 <HardFault_Handler+0x4>

08102e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102e68:	b480      	push	{r7}
 8102e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102e6c:	e7fe      	b.n	8102e6c <MemManage_Handler+0x4>

08102e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102e6e:	b480      	push	{r7}
 8102e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102e72:	e7fe      	b.n	8102e72 <BusFault_Handler+0x4>

08102e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102e74:	b480      	push	{r7}
 8102e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102e78:	e7fe      	b.n	8102e78 <UsageFault_Handler+0x4>

08102e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102e7a:	b480      	push	{r7}
 8102e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102e7e:	bf00      	nop
 8102e80:	46bd      	mov	sp, r7
 8102e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e86:	4770      	bx	lr

08102e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102e88:	b480      	push	{r7}
 8102e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102e8c:	bf00      	nop
 8102e8e:	46bd      	mov	sp, r7
 8102e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e94:	4770      	bx	lr

08102e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102e96:	b480      	push	{r7}
 8102e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102e9a:	bf00      	nop
 8102e9c:	46bd      	mov	sp, r7
 8102e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea2:	4770      	bx	lr

08102ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102ea4:	b580      	push	{r7, lr}
 8102ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102ea8:	f000 fc24 	bl	81036f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102eac:	bf00      	nop
 8102eae:	bd80      	pop	{r7, pc}

08102eb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102eb0:	b580      	push	{r7, lr}
 8102eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102eb4:	4802      	ldr	r0, [pc, #8]	; (8102ec0 <DMA1_Stream0_IRQHandler+0x10>)
 8102eb6:	f002 fb9d 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102eba:	bf00      	nop
 8102ebc:	bd80      	pop	{r7, pc}
 8102ebe:	bf00      	nop
 8102ec0:	1000046c 	.word	0x1000046c

08102ec4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102ec4:	b580      	push	{r7, lr}
 8102ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102ec8:	4802      	ldr	r0, [pc, #8]	; (8102ed4 <DMA1_Stream1_IRQHandler+0x10>)
 8102eca:	f002 fb93 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102ece:	bf00      	nop
 8102ed0:	bd80      	pop	{r7, pc}
 8102ed2:	bf00      	nop
 8102ed4:	100004e4 	.word	0x100004e4

08102ed8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8102ed8:	b580      	push	{r7, lr}
 8102eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8102edc:	4802      	ldr	r0, [pc, #8]	; (8102ee8 <DMA1_Stream2_IRQHandler+0x10>)
 8102ede:	f002 fb89 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8102ee2:	bf00      	nop
 8102ee4:	bd80      	pop	{r7, pc}
 8102ee6:	bf00      	nop
 8102ee8:	1000025c 	.word	0x1000025c

08102eec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8102eec:	b580      	push	{r7, lr}
 8102eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102ef0:	4802      	ldr	r0, [pc, #8]	; (8102efc <DMA1_Stream3_IRQHandler+0x10>)
 8102ef2:	f002 fb7f 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8102ef6:	bf00      	nop
 8102ef8:	bd80      	pop	{r7, pc}
 8102efa:	bf00      	nop
 8102efc:	10000198 	.word	0x10000198

08102f00 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8102f00:	b580      	push	{r7, lr}
 8102f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102f04:	4802      	ldr	r0, [pc, #8]	; (8102f10 <DMA1_Stream4_IRQHandler+0x10>)
 8102f06:	f002 fb75 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8102f0a:	bf00      	nop
 8102f0c:	bd80      	pop	{r7, pc}
 8102f0e:	bf00      	nop
 8102f10:	10000118 	.word	0x10000118

08102f14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8102f14:	b580      	push	{r7, lr}
 8102f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102f18:	4802      	ldr	r0, [pc, #8]	; (8102f24 <ADC_IRQHandler+0x10>)
 8102f1a:	f000 fc97 	bl	810384c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8102f1e:	bf00      	nop
 8102f20:	bd80      	pop	{r7, pc}
 8102f22:	bf00      	nop
 8102f24:	100000b4 	.word	0x100000b4

08102f28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102f28:	b580      	push	{r7, lr}
 8102f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102f2c:	4802      	ldr	r0, [pc, #8]	; (8102f38 <I2C1_EV_IRQHandler+0x10>)
 8102f2e:	f004 fb49 	bl	81075c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8102f32:	bf00      	nop
 8102f34:	bd80      	pop	{r7, pc}
 8102f36:	bf00      	nop
 8102f38:	10000210 	.word	0x10000210

08102f3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102f3c:	b580      	push	{r7, lr}
 8102f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8102f40:	4802      	ldr	r0, [pc, #8]	; (8102f4c <I2C1_ER_IRQHandler+0x10>)
 8102f42:	f004 fb59 	bl	81075f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102f46:	bf00      	nop
 8102f48:	bd80      	pop	{r7, pc}
 8102f4a:	bf00      	nop
 8102f4c:	10000210 	.word	0x10000210

08102f50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8102f50:	b580      	push	{r7, lr}
 8102f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102f54:	4802      	ldr	r0, [pc, #8]	; (8102f60 <SPI1_IRQHandler+0x10>)
 8102f56:	f008 f9d7 	bl	810b308 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102f5a:	bf00      	nop
 8102f5c:	bd80      	pop	{r7, pc}
 8102f5e:	bf00      	nop
 8102f60:	100003e4 	.word	0x100003e4

08102f64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102f64:	b580      	push	{r7, lr}
 8102f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102f68:	4802      	ldr	r0, [pc, #8]	; (8102f74 <USART3_IRQHandler+0x10>)
 8102f6a:	f008 fdef 	bl	810bb4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8102f6e:	bf00      	nop
 8102f70:	bd80      	pop	{r7, pc}
 8102f72:	bf00      	nop
 8102f74:	100005d4 	.word	0x100005d4

08102f78 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102f78:	b580      	push	{r7, lr}
 8102f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102f7c:	4802      	ldr	r0, [pc, #8]	; (8102f88 <DMA1_Stream7_IRQHandler+0x10>)
 8102f7e:	f002 fb39 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8102f82:	bf00      	nop
 8102f84:	bd80      	pop	{r7, pc}
 8102f86:	bf00      	nop
 8102f88:	1000055c 	.word	0x1000055c

08102f8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102f90:	4802      	ldr	r0, [pc, #8]	; (8102f9c <DMA2_Stream0_IRQHandler+0x10>)
 8102f92:	f002 fb2f 	bl	81055f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8102f96:	bf00      	nop
 8102f98:	bd80      	pop	{r7, pc}
 8102f9a:	bf00      	nop
 8102f9c:	10000664 	.word	0x10000664

08102fa0 <calcChecksum>:
 * @brief Calculates checksum of incoming data packet
 * @param ck pointer to unsigned char array containing checksum packets
 * @retval nothing
 */
 void calcChecksum(unsigned char* ck)
 {
 8102fa0:	b580      	push	{r7, lr}
 8102fa2:	b084      	sub	sp, #16
 8102fa4:	af00      	add	r7, sp, #0
 8102fa6:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 8102fa8:	2202      	movs	r2, #2
 8102faa:	2100      	movs	r1, #0
 8102fac:	6878      	ldr	r0, [r7, #4]
 8102fae:	f00a fa95 	bl	810d4dc <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8102fb2:	2300      	movs	r3, #0
 8102fb4:	60fb      	str	r3, [r7, #12]
 8102fb6:	e016      	b.n	8102fe6 <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	781a      	ldrb	r2, [r3, #0]
 8102fbc:	68fb      	ldr	r3, [r7, #12]
 8102fbe:	490e      	ldr	r1, [pc, #56]	; (8102ff8 <calcChecksum+0x58>)
 8102fc0:	440b      	add	r3, r1
 8102fc2:	781b      	ldrb	r3, [r3, #0]
 8102fc4:	4413      	add	r3, r2
 8102fc6:	b2da      	uxtb	r2, r3
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	3301      	adds	r3, #1
 8102fd0:	7819      	ldrb	r1, [r3, #0]
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	781a      	ldrb	r2, [r3, #0]
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	3301      	adds	r3, #1
 8102fda:	440a      	add	r2, r1
 8102fdc:	b2d2      	uxtb	r2, r2
 8102fde:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8102fe0:	68fb      	ldr	r3, [r7, #12]
 8102fe2:	3301      	adds	r3, #1
 8102fe4:	60fb      	str	r3, [r7, #12]
 8102fe6:	68fb      	ldr	r3, [r7, #12]
 8102fe8:	2b5f      	cmp	r3, #95	; 0x5f
 8102fea:	dde5      	ble.n	8102fb8 <calcChecksum+0x18>
      }
 }
 8102fec:	bf00      	nop
 8102fee:	bf00      	nop
 8102ff0:	3710      	adds	r7, #16
 8102ff2:	46bd      	mov	sp, r7
 8102ff4:	bd80      	pop	{r7, pc}
 8102ff6:	bf00      	nop
 8102ff8:	10000300 	.word	0x10000300
 8102ffc:	00000000 	.word	0x00000000

08103000 <processGPS>:
 * @brief passes GPS info to gps handle struct
 * @param gps pointer to gps struct
 * @retval nothing
 */
 void processGPS(GPSHandle* gps)
 {
 8103000:	b580      	push	{r7, lr}
 8103002:	b082      	sub	sp, #8
 8103004:	af00      	add	r7, sp, #0
 8103006:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 8103008:	4b39      	ldr	r3, [pc, #228]	; (81030f0 <processGPS+0xf0>)
 810300a:	6a1b      	ldr	r3, [r3, #32]
 810300c:	4618      	mov	r0, r3
 810300e:	f7fd fab5 	bl	810057c <__aeabi_i2d>
 8103012:	a335      	add	r3, pc, #212	; (adr r3, 81030e8 <processGPS+0xe8>)
 8103014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103018:	f7fd fb1a 	bl	8100650 <__aeabi_dmul>
 810301c:	4602      	mov	r2, r0
 810301e:	460b      	mov	r3, r1
 8103020:	4610      	mov	r0, r2
 8103022:	4619      	mov	r1, r3
 8103024:	f7fd fdc4 	bl	8100bb0 <__aeabi_d2f>
 8103028:	4602      	mov	r2, r0
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 810302e:	4b30      	ldr	r3, [pc, #192]	; (81030f0 <processGPS+0xf0>)
 8103030:	69db      	ldr	r3, [r3, #28]
 8103032:	4618      	mov	r0, r3
 8103034:	f7fd faa2 	bl	810057c <__aeabi_i2d>
 8103038:	a32b      	add	r3, pc, #172	; (adr r3, 81030e8 <processGPS+0xe8>)
 810303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810303e:	f7fd fb07 	bl	8100650 <__aeabi_dmul>
 8103042:	4602      	mov	r2, r0
 8103044:	460b      	mov	r3, r1
 8103046:	4610      	mov	r0, r2
 8103048:	4619      	mov	r1, r3
 810304a:	f7fd fdb1 	bl	8100bb0 <__aeabi_d2f>
 810304e:	4602      	mov	r2, r0
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8103054:	4b26      	ldr	r3, [pc, #152]	; (81030f0 <processGPS+0xf0>)
 8103056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103058:	ee07 3a90 	vmov	s15, r3
 810305c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103060:	eddf 6a24 	vldr	s13, [pc, #144]	; 81030f4 <processGPS+0xf4>
 8103064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 810306e:	4b20      	ldr	r3, [pc, #128]	; (81030f0 <processGPS+0xf0>)
 8103070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103072:	ee07 3a90 	vmov	s15, r3
 8103076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810307a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 81030f4 <processGPS+0xf4>
 810307e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 8103088:	4b19      	ldr	r3, [pc, #100]	; (81030f0 <processGPS+0xf0>)
 810308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810308c:	ee07 3a90 	vmov	s15, r3
 8103090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103094:	eddf 6a17 	vldr	s13, [pc, #92]	; 81030f4 <processGPS+0xf4>
 8103098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 81030a2:	4b13      	ldr	r3, [pc, #76]	; (81030f0 <processGPS+0xf0>)
 81030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030a6:	ee07 3a90 	vmov	s15, r3
 81030aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81030ae:	eddf 6a12 	vldr	s13, [pc, #72]	; 81030f8 <processGPS+0xf8>
 81030b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 81030bc:	4b0c      	ldr	r3, [pc, #48]	; (81030f0 <processGPS+0xf0>)
 81030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81030c0:	ee07 3a90 	vmov	s15, r3
 81030c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81030c8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 81030f4 <processGPS+0xf4>
 81030cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	edc3 7a06 	vstr	s15, [r3, #24]
     /* Retrieve number of satellites used */
     gps->num_satellites = pvt.numSV;
 81030d6:	4b06      	ldr	r3, [pc, #24]	; (81030f0 <processGPS+0xf0>)
 81030d8:	7edb      	ldrb	r3, [r3, #27]
 81030da:	461a      	mov	r2, r3
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	61da      	str	r2, [r3, #28]
 }
 81030e0:	bf00      	nop
 81030e2:	3708      	adds	r7, #8
 81030e4:	46bd      	mov	sp, r7
 81030e6:	bd80      	pop	{r7, pc}
 81030e8:	9abcaf48 	.word	0x9abcaf48
 81030ec:	3e7ad7f2 	.word	0x3e7ad7f2
 81030f0:	10000300 	.word	0x10000300
 81030f4:	447a0000 	.word	0x447a0000
 81030f8:	c47a0000 	.word	0xc47a0000

081030fc <ConfigGPS>:
 /*
  * @brief Configures GPS messages to be enabled on startup
  * @retval nothing.
  */
 void ConfigGPS(void)
 {
 81030fc:	b590      	push	{r4, r7, lr}
 81030fe:	b0c1      	sub	sp, #260	; 0x104
 8103100:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 8103102:	4b43      	ldr	r3, [pc, #268]	; (8103210 <ConfigGPS+0x114>)
 8103104:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8103108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810310a:	c407      	stmia	r4!, {r0, r1, r2}
 810310c:	8023      	strh	r3, [r4, #0]
 810310e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8103112:	220e      	movs	r2, #14
 8103114:	4619      	mov	r1, r3
 8103116:	483f      	ldr	r0, [pc, #252]	; (8103214 <ConfigGPS+0x118>)
 8103118:	f008 fc52 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810311c:	2032      	movs	r0, #50	; 0x32
 810311e:	f000 fb09 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 8103122:	4b3d      	ldr	r3, [pc, #244]	; (8103218 <ConfigGPS+0x11c>)
 8103124:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8103128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810312a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810312e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8103132:	2210      	movs	r2, #16
 8103134:	4619      	mov	r1, r3
 8103136:	4837      	ldr	r0, [pc, #220]	; (8103214 <ConfigGPS+0x118>)
 8103138:	f008 fc42 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810313c:	2032      	movs	r0, #50	; 0x32
 810313e:	f000 faf9 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 8103142:	4b36      	ldr	r3, [pc, #216]	; (810321c <ConfigGPS+0x120>)
 8103144:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8103148:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810314a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810314e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8103152:	2210      	movs	r2, #16
 8103154:	4619      	mov	r1, r3
 8103156:	482f      	ldr	r0, [pc, #188]	; (8103214 <ConfigGPS+0x118>)
 8103158:	f008 fc32 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810315c:	2032      	movs	r0, #50	; 0x32
 810315e:	f000 fae9 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 8103162:	4b2f      	ldr	r3, [pc, #188]	; (8103220 <ConfigGPS+0x124>)
 8103164:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8103168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810316a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810316e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8103172:	2210      	movs	r2, #16
 8103174:	4619      	mov	r1, r3
 8103176:	4827      	ldr	r0, [pc, #156]	; (8103214 <ConfigGPS+0x118>)
 8103178:	f008 fc22 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810317c:	2032      	movs	r0, #50	; 0x32
 810317e:	f000 fad9 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 8103182:	4b28      	ldr	r3, [pc, #160]	; (8103224 <ConfigGPS+0x128>)
 8103184:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8103188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810318a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810318e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8103192:	2210      	movs	r2, #16
 8103194:	4619      	mov	r1, r3
 8103196:	481f      	ldr	r0, [pc, #124]	; (8103214 <ConfigGPS+0x118>)
 8103198:	f008 fc12 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810319c:	2032      	movs	r0, #50	; 0x32
 810319e:	f000 fac9 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81031a2:	4b21      	ldr	r3, [pc, #132]	; (8103228 <ConfigGPS+0x12c>)
 81031a4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 81031a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81031ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 81031b2:	2210      	movs	r2, #16
 81031b4:	4619      	mov	r1, r3
 81031b6:	4817      	ldr	r0, [pc, #92]	; (8103214 <ConfigGPS+0x118>)
 81031b8:	f008 fc02 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81031bc:	2032      	movs	r0, #50	; 0x32
 81031be:	f000 fab9 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 81031c2:	4b1a      	ldr	r3, [pc, #104]	; (810322c <ConfigGPS+0x130>)
 81031c4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 81031c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81031ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81031d2:	2210      	movs	r2, #16
 81031d4:	4619      	mov	r1, r3
 81031d6:	480f      	ldr	r0, [pc, #60]	; (8103214 <ConfigGPS+0x118>)
 81031d8:	f008 fbf2 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81031dc:	2032      	movs	r0, #50	; 0x32
 81031de:	f000 faa9 	bl	8103734 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 81031e2:	4b13      	ldr	r3, [pc, #76]	; (8103230 <ConfigGPS+0x134>)
 81031e4:	f107 0410 	add.w	r4, r7, #16
 81031e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81031ee:	f107 0310 	add.w	r3, r7, #16
 81031f2:	2210      	movs	r2, #16
 81031f4:	4619      	mov	r1, r3
 81031f6:	4807      	ldr	r0, [pc, #28]	; (8103214 <ConfigGPS+0x118>)
 81031f8:	f008 fbe2 	bl	810b9c0 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*) data_byte, 1);
 81031fc:	2201      	movs	r2, #1
 81031fe:	490d      	ldr	r1, [pc, #52]	; (8103234 <ConfigGPS+0x138>)
 8103200:	4804      	ldr	r0, [pc, #16]	; (8103214 <ConfigGPS+0x118>)
 8103202:	f008 fc5d 	bl	810bac0 <HAL_UART_Receive_DMA>
 }
 8103206:	bf00      	nop
 8103208:	f507 7782 	add.w	r7, r7, #260	; 0x104
 810320c:	46bd      	mov	sp, r7
 810320e:	bd90      	pop	{r4, r7, pc}
 8103210:	0810e470 	.word	0x0810e470
 8103214:	100005d4 	.word	0x100005d4
 8103218:	0810e480 	.word	0x0810e480
 810321c:	0810e490 	.word	0x0810e490
 8103220:	0810e4a0 	.word	0x0810e4a0
 8103224:	0810e4b0 	.word	0x0810e4b0
 8103228:	0810e4c0 	.word	0x0810e4c0
 810322c:	0810e4d0 	.word	0x0810e4d0
 8103230:	0810e4e0 	.word	0x0810e4e0
 8103234:	100000a8 	.word	0x100000a8

08103238 <HAL_UART_RxCpltCallback>:
 * @brief Process GPS messages inside Callback
 * @note Not sure of a better way to handle this at the moment
 * @param huart Point to GPS UART Handle
 */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103238:	b580      	push	{r7, lr}
 810323a:	b084      	sub	sp, #16
 810323c:	af00      	add	r7, sp, #0
 810323e:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	4a31      	ldr	r2, [pc, #196]	; (810330c <HAL_UART_RxCpltCallback+0xd4>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d15b      	bne.n	8103302 <HAL_UART_RxCpltCallback+0xca>
    {
      /*Append Preamble*/
      if(byte_pos < 2)
 810324a:	4b31      	ldr	r3, [pc, #196]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	2b01      	cmp	r3, #1
 8103250:	dc17      	bgt.n	8103282 <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 8103252:	4b30      	ldr	r3, [pc, #192]	; (8103314 <HAL_UART_RxCpltCallback+0xdc>)
 8103254:	781a      	ldrb	r2, [r3, #0]
 8103256:	4b30      	ldr	r3, [pc, #192]	; (8103318 <HAL_UART_RxCpltCallback+0xe0>)
 8103258:	881b      	ldrh	r3, [r3, #0]
 810325a:	81bb      	strh	r3, [r7, #12]
 810325c:	4b2c      	ldr	r3, [pc, #176]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 810325e:	681b      	ldr	r3, [r3, #0]
 8103260:	f107 0110 	add.w	r1, r7, #16
 8103264:	440b      	add	r3, r1
 8103266:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 810326a:	429a      	cmp	r2, r3
 810326c:	d105      	bne.n	810327a <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 810326e:	4b28      	ldr	r3, [pc, #160]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	3301      	adds	r3, #1
 8103274:	4a26      	ldr	r2, [pc, #152]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 8103276:	6013      	str	r3, [r2, #0]
        {
          byte_pos = 0;
        }
      }
    }
 }
 8103278:	e043      	b.n	8103302 <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 810327a:	4b25      	ldr	r3, [pc, #148]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 810327c:	2200      	movs	r2, #0
 810327e:	601a      	str	r2, [r3, #0]
 }
 8103280:	e03f      	b.n	8103302 <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 8103282:	4b23      	ldr	r3, [pc, #140]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	3b01      	subs	r3, #1
 8103288:	2260      	movs	r2, #96	; 0x60
 810328a:	4293      	cmp	r3, r2
 810328c:	dc07      	bgt.n	810329e <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 810328e:	4b20      	ldr	r3, [pc, #128]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	3b02      	subs	r3, #2
 8103294:	4a21      	ldr	r2, [pc, #132]	; (810331c <HAL_UART_RxCpltCallback+0xe4>)
 8103296:	4413      	add	r3, r2
 8103298:	4a1e      	ldr	r2, [pc, #120]	; (8103314 <HAL_UART_RxCpltCallback+0xdc>)
 810329a:	7812      	ldrb	r2, [r2, #0]
 810329c:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 810329e:	4b1c      	ldr	r3, [pc, #112]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	3301      	adds	r3, #1
 81032a4:	4a1a      	ldr	r2, [pc, #104]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032a6:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 81032a8:	2360      	movs	r3, #96	; 0x60
 81032aa:	1c9a      	adds	r2, r3, #2
 81032ac:	4b18      	ldr	r3, [pc, #96]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	429a      	cmp	r2, r3
 81032b2:	d103      	bne.n	81032bc <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 81032b4:	481a      	ldr	r0, [pc, #104]	; (8103320 <HAL_UART_RxCpltCallback+0xe8>)
 81032b6:	f7ff fe73 	bl	8102fa0 <calcChecksum>
 }
 81032ba:	e022      	b.n	8103302 <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 81032bc:	2360      	movs	r3, #96	; 0x60
 81032be:	1cda      	adds	r2, r3, #3
 81032c0:	4b13      	ldr	r3, [pc, #76]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	429a      	cmp	r2, r3
 81032c6:	d109      	bne.n	81032dc <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 81032c8:	4b12      	ldr	r3, [pc, #72]	; (8103314 <HAL_UART_RxCpltCallback+0xdc>)
 81032ca:	781a      	ldrb	r2, [r3, #0]
 81032cc:	4b14      	ldr	r3, [pc, #80]	; (8103320 <HAL_UART_RxCpltCallback+0xe8>)
 81032ce:	781b      	ldrb	r3, [r3, #0]
 81032d0:	429a      	cmp	r2, r3
 81032d2:	d016      	beq.n	8103302 <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 81032d4:	4b0e      	ldr	r3, [pc, #56]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032d6:	2200      	movs	r2, #0
 81032d8:	601a      	str	r2, [r3, #0]
 }
 81032da:	e012      	b.n	8103302 <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 81032dc:	2360      	movs	r3, #96	; 0x60
 81032de:	1d1a      	adds	r2, r3, #4
 81032e0:	4b0b      	ldr	r3, [pc, #44]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	429a      	cmp	r2, r3
 81032e6:	d103      	bne.n	81032f0 <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 81032e8:	4b09      	ldr	r3, [pc, #36]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032ea:	2200      	movs	r2, #0
 81032ec:	601a      	str	r2, [r3, #0]
 }
 81032ee:	e008      	b.n	8103302 <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 81032f0:	2360      	movs	r3, #96	; 0x60
 81032f2:	1d1a      	adds	r2, r3, #4
 81032f4:	4b06      	ldr	r3, [pc, #24]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	429a      	cmp	r2, r3
 81032fa:	da02      	bge.n	8103302 <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 81032fc:	4b04      	ldr	r3, [pc, #16]	; (8103310 <HAL_UART_RxCpltCallback+0xd8>)
 81032fe:	2200      	movs	r2, #0
 8103300:	601a      	str	r2, [r3, #0]
 }
 8103302:	bf00      	nop
 8103304:	3710      	adds	r7, #16
 8103306:	46bd      	mov	sp, r7
 8103308:	bd80      	pop	{r7, pc}
 810330a:	bf00      	nop
 810330c:	40004800 	.word	0x40004800
 8103310:	100000ac 	.word	0x100000ac
 8103314:	100000a8 	.word	0x100000a8
 8103318:	0810e4f0 	.word	0x0810e4f0
 810331c:	10000300 	.word	0x10000300
 8103320:	100000b0 	.word	0x100000b0

08103324 <HAL_UART_TxCpltCallback>:


 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103324:	b480      	push	{r7}
 8103326:	b083      	sub	sp, #12
 8103328:	af00      	add	r7, sp, #0
 810332a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 810332c:	bf00      	nop
 810332e:	370c      	adds	r7, #12
 8103330:	46bd      	mov	sp, r7
 8103332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103336:	4770      	bx	lr

08103338 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8103338:	b580      	push	{r7, lr}
 810333a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810333c:	4b22      	ldr	r3, [pc, #136]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 810333e:	4a23      	ldr	r2, [pc, #140]	; (81033cc <MX_USART3_UART_Init+0x94>)
 8103340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8103342:	4b21      	ldr	r3, [pc, #132]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103344:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8103348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810334a:	4b1f      	ldr	r3, [pc, #124]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 810334c:	2200      	movs	r2, #0
 810334e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103350:	4b1d      	ldr	r3, [pc, #116]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103352:	2200      	movs	r2, #0
 8103354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8103356:	4b1c      	ldr	r3, [pc, #112]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103358:	2200      	movs	r2, #0
 810335a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810335c:	4b1a      	ldr	r3, [pc, #104]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 810335e:	220c      	movs	r2, #12
 8103360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103362:	4b19      	ldr	r3, [pc, #100]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103364:	2200      	movs	r2, #0
 8103366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103368:	4b17      	ldr	r3, [pc, #92]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 810336a:	2200      	movs	r2, #0
 810336c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810336e:	4b16      	ldr	r3, [pc, #88]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103370:	2200      	movs	r2, #0
 8103372:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103374:	4b14      	ldr	r3, [pc, #80]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103376:	2200      	movs	r2, #0
 8103378:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810337a:	4b13      	ldr	r3, [pc, #76]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 810337c:	2200      	movs	r2, #0
 810337e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103380:	4811      	ldr	r0, [pc, #68]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103382:	f008 facc 	bl	810b91e <HAL_UART_Init>
 8103386:	4603      	mov	r3, r0
 8103388:	2b00      	cmp	r3, #0
 810338a:	d001      	beq.n	8103390 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810338c:	f7ff fc1e 	bl	8102bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103390:	2100      	movs	r1, #0
 8103392:	480d      	ldr	r0, [pc, #52]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 8103394:	f009 ffae 	bl	810d2f4 <HAL_UARTEx_SetTxFifoThreshold>
 8103398:	4603      	mov	r3, r0
 810339a:	2b00      	cmp	r3, #0
 810339c:	d001      	beq.n	81033a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810339e:	f7ff fc15 	bl	8102bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81033a2:	2100      	movs	r1, #0
 81033a4:	4808      	ldr	r0, [pc, #32]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 81033a6:	f009 ffe3 	bl	810d370 <HAL_UARTEx_SetRxFifoThreshold>
 81033aa:	4603      	mov	r3, r0
 81033ac:	2b00      	cmp	r3, #0
 81033ae:	d001      	beq.n	81033b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81033b0:	f7ff fc0c 	bl	8102bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81033b4:	4804      	ldr	r0, [pc, #16]	; (81033c8 <MX_USART3_UART_Init+0x90>)
 81033b6:	f009 ff64 	bl	810d282 <HAL_UARTEx_DisableFifoMode>
 81033ba:	4603      	mov	r3, r0
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d001      	beq.n	81033c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81033c0:	f7ff fc04 	bl	8102bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81033c4:	bf00      	nop
 81033c6:	bd80      	pop	{r7, pc}
 81033c8:	100005d4 	.word	0x100005d4
 81033cc:	40004800 	.word	0x40004800

081033d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81033d0:	b580      	push	{r7, lr}
 81033d2:	b0b8      	sub	sp, #224	; 0xe0
 81033d4:	af00      	add	r7, sp, #0
 81033d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81033d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81033dc:	2200      	movs	r2, #0
 81033de:	601a      	str	r2, [r3, #0]
 81033e0:	605a      	str	r2, [r3, #4]
 81033e2:	609a      	str	r2, [r3, #8]
 81033e4:	60da      	str	r2, [r3, #12]
 81033e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81033e8:	f107 0310 	add.w	r3, r7, #16
 81033ec:	22bc      	movs	r2, #188	; 0xbc
 81033ee:	2100      	movs	r1, #0
 81033f0:	4618      	mov	r0, r3
 81033f2:	f00a f873 	bl	810d4dc <memset>
  if(uartHandle->Instance==USART3)
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	4a58      	ldr	r2, [pc, #352]	; (810355c <HAL_UART_MspInit+0x18c>)
 81033fc:	4293      	cmp	r3, r2
 81033fe:	f040 80a8 	bne.w	8103552 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103402:	2302      	movs	r3, #2
 8103404:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103406:	2300      	movs	r3, #0
 8103408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810340c:	f107 0310 	add.w	r3, r7, #16
 8103410:	4618      	mov	r0, r3
 8103412:	f005 fc4d 	bl	8108cb0 <HAL_RCCEx_PeriphCLKConfig>
 8103416:	4603      	mov	r3, r0
 8103418:	2b00      	cmp	r3, #0
 810341a:	d001      	beq.n	8103420 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 810341c:	f7ff fbd6 	bl	8102bcc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8103420:	4b4f      	ldr	r3, [pc, #316]	; (8103560 <HAL_UART_MspInit+0x190>)
 8103422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103426:	4a4e      	ldr	r2, [pc, #312]	; (8103560 <HAL_UART_MspInit+0x190>)
 8103428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810342c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103430:	4b4b      	ldr	r3, [pc, #300]	; (8103560 <HAL_UART_MspInit+0x190>)
 8103432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810343a:	60fb      	str	r3, [r7, #12]
 810343c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810343e:	4b48      	ldr	r3, [pc, #288]	; (8103560 <HAL_UART_MspInit+0x190>)
 8103440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103444:	4a46      	ldr	r2, [pc, #280]	; (8103560 <HAL_UART_MspInit+0x190>)
 8103446:	f043 0308 	orr.w	r3, r3, #8
 810344a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810344e:	4b44      	ldr	r3, [pc, #272]	; (8103560 <HAL_UART_MspInit+0x190>)
 8103450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103454:	f003 0308 	and.w	r3, r3, #8
 8103458:	60bb      	str	r3, [r7, #8]
 810345a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810345c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103464:	2302      	movs	r3, #2
 8103466:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810346a:	2300      	movs	r3, #0
 810346c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103470:	2300      	movs	r3, #0
 8103472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103476:	2307      	movs	r3, #7
 8103478:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810347c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103480:	4619      	mov	r1, r3
 8103482:	4838      	ldr	r0, [pc, #224]	; (8103564 <HAL_UART_MspInit+0x194>)
 8103484:	f003 fbd6 	bl	8106c34 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8103488:	4b37      	ldr	r3, [pc, #220]	; (8103568 <HAL_UART_MspInit+0x198>)
 810348a:	4a38      	ldr	r2, [pc, #224]	; (810356c <HAL_UART_MspInit+0x19c>)
 810348c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 810348e:	4b36      	ldr	r3, [pc, #216]	; (8103568 <HAL_UART_MspInit+0x198>)
 8103490:	222d      	movs	r2, #45	; 0x2d
 8103492:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8103494:	4b34      	ldr	r3, [pc, #208]	; (8103568 <HAL_UART_MspInit+0x198>)
 8103496:	2200      	movs	r2, #0
 8103498:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810349a:	4b33      	ldr	r3, [pc, #204]	; (8103568 <HAL_UART_MspInit+0x198>)
 810349c:	2200      	movs	r2, #0
 810349e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81034a0:	4b31      	ldr	r3, [pc, #196]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81034a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81034a8:	4b2f      	ldr	r3, [pc, #188]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034aa:	2200      	movs	r2, #0
 81034ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81034ae:	4b2e      	ldr	r3, [pc, #184]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034b0:	2200      	movs	r2, #0
 81034b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 81034b4:	4b2c      	ldr	r3, [pc, #176]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 81034ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 81034bc:	4b2a      	ldr	r3, [pc, #168]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81034c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81034c4:	4b28      	ldr	r3, [pc, #160]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034c6:	2200      	movs	r2, #0
 81034c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81034ca:	4827      	ldr	r0, [pc, #156]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034cc:	f000 fd6c 	bl	8103fa8 <HAL_DMA_Init>
 81034d0:	4603      	mov	r3, r0
 81034d2:	2b00      	cmp	r3, #0
 81034d4:	d001      	beq.n	81034da <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 81034d6:	f7ff fb79 	bl	8102bcc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	4a22      	ldr	r2, [pc, #136]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034de:	67da      	str	r2, [r3, #124]	; 0x7c
 81034e0:	4a21      	ldr	r2, [pc, #132]	; (8103568 <HAL_UART_MspInit+0x198>)
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81034e6:	4b22      	ldr	r3, [pc, #136]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 81034e8:	4a22      	ldr	r2, [pc, #136]	; (8103574 <HAL_UART_MspInit+0x1a4>)
 81034ea:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81034ec:	4b20      	ldr	r3, [pc, #128]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 81034ee:	222e      	movs	r2, #46	; 0x2e
 81034f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81034f2:	4b1f      	ldr	r3, [pc, #124]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 81034f4:	2240      	movs	r2, #64	; 0x40
 81034f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81034f8:	4b1d      	ldr	r3, [pc, #116]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 81034fa:	2200      	movs	r2, #0
 81034fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81034fe:	4b1c      	ldr	r3, [pc, #112]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 8103500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103504:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103506:	4b1a      	ldr	r3, [pc, #104]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 8103508:	2200      	movs	r2, #0
 810350a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810350c:	4b18      	ldr	r3, [pc, #96]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 810350e:	2200      	movs	r2, #0
 8103510:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8103512:	4b17      	ldr	r3, [pc, #92]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 8103514:	2200      	movs	r2, #0
 8103516:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8103518:	4b15      	ldr	r3, [pc, #84]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 810351a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810351e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8103520:	4b13      	ldr	r3, [pc, #76]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 8103522:	2200      	movs	r2, #0
 8103524:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8103526:	4812      	ldr	r0, [pc, #72]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 8103528:	f000 fd3e 	bl	8103fa8 <HAL_DMA_Init>
 810352c:	4603      	mov	r3, r0
 810352e:	2b00      	cmp	r3, #0
 8103530:	d001      	beq.n	8103536 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8103532:	f7ff fb4b 	bl	8102bcc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	4a0d      	ldr	r2, [pc, #52]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 810353a:	679a      	str	r2, [r3, #120]	; 0x78
 810353c:	4a0c      	ldr	r2, [pc, #48]	; (8103570 <HAL_UART_MspInit+0x1a0>)
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8103542:	2200      	movs	r2, #0
 8103544:	2105      	movs	r1, #5
 8103546:	2027      	movs	r0, #39	; 0x27
 8103548:	f000 fce5 	bl	8103f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810354c:	2027      	movs	r0, #39	; 0x27
 810354e:	f000 fcfc 	bl	8103f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8103552:	bf00      	nop
 8103554:	37e0      	adds	r7, #224	; 0xe0
 8103556:	46bd      	mov	sp, r7
 8103558:	bd80      	pop	{r7, pc}
 810355a:	bf00      	nop
 810355c:	40004800 	.word	0x40004800
 8103560:	58024400 	.word	0x58024400
 8103564:	58020c00 	.word	0x58020c00
 8103568:	1000055c 	.word	0x1000055c
 810356c:	400200b8 	.word	0x400200b8
 8103570:	10000664 	.word	0x10000664
 8103574:	40020410 	.word	0x40020410

08103578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103578:	f8df d034 	ldr.w	sp, [pc, #52]	; 81035b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810357c:	f7fd fe42 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103580:	480c      	ldr	r0, [pc, #48]	; (81035b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103582:	490d      	ldr	r1, [pc, #52]	; (81035b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103584:	4a0d      	ldr	r2, [pc, #52]	; (81035bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103588:	e002      	b.n	8103590 <LoopCopyDataInit>

0810358a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810358a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810358c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810358e:	3304      	adds	r3, #4

08103590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103594:	d3f9      	bcc.n	810358a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8103596:	4a0a      	ldr	r2, [pc, #40]	; (81035c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103598:	4c0a      	ldr	r4, [pc, #40]	; (81035c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810359a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810359c:	e001      	b.n	81035a2 <LoopFillZerobss>

0810359e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810359e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81035a0:	3204      	adds	r2, #4

081035a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81035a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81035a4:	d3fb      	bcc.n	810359e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81035a6:	f009 ff75 	bl	810d494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81035aa:	f7ff f98d 	bl	81028c8 <main>
  bx  lr
 81035ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81035b0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81035b4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81035b8:	1000008c 	.word	0x1000008c
  ldr r2, =_sidata
 81035bc:	0810e588 	.word	0x0810e588
  ldr r2, =_sbss
 81035c0:	1000008c 	.word	0x1000008c
  ldr r4, =_ebss
 81035c4:	100006e0 	.word	0x100006e0

081035c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81035c8:	e7fe      	b.n	81035c8 <ADC3_IRQHandler>
	...

081035cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81035cc:	b580      	push	{r7, lr}
 81035ce:	b082      	sub	sp, #8
 81035d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81035d2:	4b28      	ldr	r3, [pc, #160]	; (8103674 <HAL_Init+0xa8>)
 81035d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81035d8:	4a26      	ldr	r2, [pc, #152]	; (8103674 <HAL_Init+0xa8>)
 81035da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81035de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81035e2:	4b24      	ldr	r3, [pc, #144]	; (8103674 <HAL_Init+0xa8>)
 81035e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81035ec:	603b      	str	r3, [r7, #0]
 81035ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81035f0:	4b21      	ldr	r3, [pc, #132]	; (8103678 <HAL_Init+0xac>)
 81035f2:	681b      	ldr	r3, [r3, #0]
 81035f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81035f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81035fc:	4a1e      	ldr	r2, [pc, #120]	; (8103678 <HAL_Init+0xac>)
 81035fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103602:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103604:	4b1c      	ldr	r3, [pc, #112]	; (8103678 <HAL_Init+0xac>)
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	4a1b      	ldr	r2, [pc, #108]	; (8103678 <HAL_Init+0xac>)
 810360a:	f043 0301 	orr.w	r3, r3, #1
 810360e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103610:	2003      	movs	r0, #3
 8103612:	f000 fc75 	bl	8103f00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103616:	f005 f973 	bl	8108900 <HAL_RCC_GetSysClockFreq>
 810361a:	4602      	mov	r2, r0
 810361c:	4b15      	ldr	r3, [pc, #84]	; (8103674 <HAL_Init+0xa8>)
 810361e:	699b      	ldr	r3, [r3, #24]
 8103620:	0a1b      	lsrs	r3, r3, #8
 8103622:	f003 030f 	and.w	r3, r3, #15
 8103626:	4915      	ldr	r1, [pc, #84]	; (810367c <HAL_Init+0xb0>)
 8103628:	5ccb      	ldrb	r3, [r1, r3]
 810362a:	f003 031f 	and.w	r3, r3, #31
 810362e:	fa22 f303 	lsr.w	r3, r2, r3
 8103632:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103634:	4b0f      	ldr	r3, [pc, #60]	; (8103674 <HAL_Init+0xa8>)
 8103636:	699b      	ldr	r3, [r3, #24]
 8103638:	f003 030f 	and.w	r3, r3, #15
 810363c:	4a0f      	ldr	r2, [pc, #60]	; (810367c <HAL_Init+0xb0>)
 810363e:	5cd3      	ldrb	r3, [r2, r3]
 8103640:	f003 031f 	and.w	r3, r3, #31
 8103644:	687a      	ldr	r2, [r7, #4]
 8103646:	fa22 f303 	lsr.w	r3, r2, r3
 810364a:	4a0d      	ldr	r2, [pc, #52]	; (8103680 <HAL_Init+0xb4>)
 810364c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810364e:	4b0c      	ldr	r3, [pc, #48]	; (8103680 <HAL_Init+0xb4>)
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	4a0c      	ldr	r2, [pc, #48]	; (8103684 <HAL_Init+0xb8>)
 8103654:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103656:	2000      	movs	r0, #0
 8103658:	f000 f816 	bl	8103688 <HAL_InitTick>
 810365c:	4603      	mov	r3, r0
 810365e:	2b00      	cmp	r3, #0
 8103660:	d001      	beq.n	8103666 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103662:	2301      	movs	r3, #1
 8103664:	e002      	b.n	810366c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103666:	f7ff fbdf 	bl	8102e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810366a:	2300      	movs	r3, #0
}
 810366c:	4618      	mov	r0, r3
 810366e:	3708      	adds	r7, #8
 8103670:	46bd      	mov	sp, r7
 8103672:	bd80      	pop	{r7, pc}
 8103674:	58024400 	.word	0x58024400
 8103678:	40024400 	.word	0x40024400
 810367c:	0810e4f4 	.word	0x0810e4f4
 8103680:	10000004 	.word	0x10000004
 8103684:	10000000 	.word	0x10000000

08103688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103688:	b580      	push	{r7, lr}
 810368a:	b082      	sub	sp, #8
 810368c:	af00      	add	r7, sp, #0
 810368e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103690:	4b15      	ldr	r3, [pc, #84]	; (81036e8 <HAL_InitTick+0x60>)
 8103692:	781b      	ldrb	r3, [r3, #0]
 8103694:	2b00      	cmp	r3, #0
 8103696:	d101      	bne.n	810369c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103698:	2301      	movs	r3, #1
 810369a:	e021      	b.n	81036e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810369c:	4b13      	ldr	r3, [pc, #76]	; (81036ec <HAL_InitTick+0x64>)
 810369e:	681a      	ldr	r2, [r3, #0]
 81036a0:	4b11      	ldr	r3, [pc, #68]	; (81036e8 <HAL_InitTick+0x60>)
 81036a2:	781b      	ldrb	r3, [r3, #0]
 81036a4:	4619      	mov	r1, r3
 81036a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81036aa:	fbb3 f3f1 	udiv	r3, r3, r1
 81036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81036b2:	4618      	mov	r0, r3
 81036b4:	f000 fc57 	bl	8103f66 <HAL_SYSTICK_Config>
 81036b8:	4603      	mov	r3, r0
 81036ba:	2b00      	cmp	r3, #0
 81036bc:	d001      	beq.n	81036c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81036be:	2301      	movs	r3, #1
 81036c0:	e00e      	b.n	81036e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	2b0f      	cmp	r3, #15
 81036c6:	d80a      	bhi.n	81036de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81036c8:	2200      	movs	r2, #0
 81036ca:	6879      	ldr	r1, [r7, #4]
 81036cc:	f04f 30ff 	mov.w	r0, #4294967295
 81036d0:	f000 fc21 	bl	8103f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81036d4:	4a06      	ldr	r2, [pc, #24]	; (81036f0 <HAL_InitTick+0x68>)
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81036da:	2300      	movs	r3, #0
 81036dc:	e000      	b.n	81036e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81036de:	2301      	movs	r3, #1
}
 81036e0:	4618      	mov	r0, r3
 81036e2:	3708      	adds	r7, #8
 81036e4:	46bd      	mov	sp, r7
 81036e6:	bd80      	pop	{r7, pc}
 81036e8:	10000020 	.word	0x10000020
 81036ec:	10000000 	.word	0x10000000
 81036f0:	1000001c 	.word	0x1000001c

081036f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81036f4:	b480      	push	{r7}
 81036f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81036f8:	4b06      	ldr	r3, [pc, #24]	; (8103714 <HAL_IncTick+0x20>)
 81036fa:	781b      	ldrb	r3, [r3, #0]
 81036fc:	461a      	mov	r2, r3
 81036fe:	4b06      	ldr	r3, [pc, #24]	; (8103718 <HAL_IncTick+0x24>)
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	4413      	add	r3, r2
 8103704:	4a04      	ldr	r2, [pc, #16]	; (8103718 <HAL_IncTick+0x24>)
 8103706:	6013      	str	r3, [r2, #0]
}
 8103708:	bf00      	nop
 810370a:	46bd      	mov	sp, r7
 810370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103710:	4770      	bx	lr
 8103712:	bf00      	nop
 8103714:	10000020 	.word	0x10000020
 8103718:	100006dc 	.word	0x100006dc

0810371c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810371c:	b480      	push	{r7}
 810371e:	af00      	add	r7, sp, #0
  return uwTick;
 8103720:	4b03      	ldr	r3, [pc, #12]	; (8103730 <HAL_GetTick+0x14>)
 8103722:	681b      	ldr	r3, [r3, #0]
}
 8103724:	4618      	mov	r0, r3
 8103726:	46bd      	mov	sp, r7
 8103728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810372c:	4770      	bx	lr
 810372e:	bf00      	nop
 8103730:	100006dc 	.word	0x100006dc

08103734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103734:	b580      	push	{r7, lr}
 8103736:	b084      	sub	sp, #16
 8103738:	af00      	add	r7, sp, #0
 810373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810373c:	f7ff ffee 	bl	810371c <HAL_GetTick>
 8103740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103746:	68fb      	ldr	r3, [r7, #12]
 8103748:	f1b3 3fff 	cmp.w	r3, #4294967295
 810374c:	d005      	beq.n	810375a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810374e:	4b0a      	ldr	r3, [pc, #40]	; (8103778 <HAL_Delay+0x44>)
 8103750:	781b      	ldrb	r3, [r3, #0]
 8103752:	461a      	mov	r2, r3
 8103754:	68fb      	ldr	r3, [r7, #12]
 8103756:	4413      	add	r3, r2
 8103758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810375a:	bf00      	nop
 810375c:	f7ff ffde 	bl	810371c <HAL_GetTick>
 8103760:	4602      	mov	r2, r0
 8103762:	68bb      	ldr	r3, [r7, #8]
 8103764:	1ad3      	subs	r3, r2, r3
 8103766:	68fa      	ldr	r2, [r7, #12]
 8103768:	429a      	cmp	r2, r3
 810376a:	d8f7      	bhi.n	810375c <HAL_Delay+0x28>
  {
  }
}
 810376c:	bf00      	nop
 810376e:	bf00      	nop
 8103770:	3710      	adds	r7, #16
 8103772:	46bd      	mov	sp, r7
 8103774:	bd80      	pop	{r7, pc}
 8103776:	bf00      	nop
 8103778:	10000020 	.word	0x10000020

0810377c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 810377c:	b480      	push	{r7}
 810377e:	b083      	sub	sp, #12
 8103780:	af00      	add	r7, sp, #0
 8103782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	68db      	ldr	r3, [r3, #12]
 8103788:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 810378c:	2b00      	cmp	r3, #0
 810378e:	d101      	bne.n	8103794 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8103790:	2301      	movs	r3, #1
 8103792:	e000      	b.n	8103796 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8103794:	2300      	movs	r3, #0
}
 8103796:	4618      	mov	r0, r3
 8103798:	370c      	adds	r7, #12
 810379a:	46bd      	mov	sp, r7
 810379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037a0:	4770      	bx	lr

081037a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81037a2:	b480      	push	{r7}
 81037a4:	b083      	sub	sp, #12
 81037a6:	af00      	add	r7, sp, #0
 81037a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81037ae:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 81037b2:	2b00      	cmp	r3, #0
 81037b4:	d101      	bne.n	81037ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 81037b6:	2301      	movs	r3, #1
 81037b8:	e000      	b.n	81037bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 81037ba:	2300      	movs	r3, #0
}
 81037bc:	4618      	mov	r0, r3
 81037be:	370c      	adds	r7, #12
 81037c0:	46bd      	mov	sp, r7
 81037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c6:	4770      	bx	lr

081037c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81037c8:	b480      	push	{r7}
 81037ca:	b083      	sub	sp, #12
 81037cc:	af00      	add	r7, sp, #0
 81037ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	689b      	ldr	r3, [r3, #8]
 81037d4:	f003 031f 	and.w	r3, r3, #31
}
 81037d8:	4618      	mov	r0, r3
 81037da:	370c      	adds	r7, #12
 81037dc:	46bd      	mov	sp, r7
 81037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e2:	4770      	bx	lr

081037e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81037e4:	b480      	push	{r7}
 81037e6:	b083      	sub	sp, #12
 81037e8:	af00      	add	r7, sp, #0
 81037ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	689b      	ldr	r3, [r3, #8]
 81037f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 81037f4:	4618      	mov	r0, r3
 81037f6:	370c      	adds	r7, #12
 81037f8:	46bd      	mov	sp, r7
 81037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037fe:	4770      	bx	lr

08103800 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103800:	b480      	push	{r7}
 8103802:	b083      	sub	sp, #12
 8103804:	af00      	add	r7, sp, #0
 8103806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	689b      	ldr	r3, [r3, #8]
 810380c:	f003 0304 	and.w	r3, r3, #4
 8103810:	2b04      	cmp	r3, #4
 8103812:	d101      	bne.n	8103818 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103814:	2301      	movs	r3, #1
 8103816:	e000      	b.n	810381a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103818:	2300      	movs	r3, #0
}
 810381a:	4618      	mov	r0, r3
 810381c:	370c      	adds	r7, #12
 810381e:	46bd      	mov	sp, r7
 8103820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103824:	4770      	bx	lr

08103826 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103826:	b480      	push	{r7}
 8103828:	b083      	sub	sp, #12
 810382a:	af00      	add	r7, sp, #0
 810382c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	689b      	ldr	r3, [r3, #8]
 8103832:	f003 0308 	and.w	r3, r3, #8
 8103836:	2b08      	cmp	r3, #8
 8103838:	d101      	bne.n	810383e <LL_ADC_INJ_IsConversionOngoing+0x18>
 810383a:	2301      	movs	r3, #1
 810383c:	e000      	b.n	8103840 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810383e:	2300      	movs	r3, #0
}
 8103840:	4618      	mov	r0, r3
 8103842:	370c      	adds	r7, #12
 8103844:	46bd      	mov	sp, r7
 8103846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810384a:	4770      	bx	lr

0810384c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 810384c:	b580      	push	{r7, lr}
 810384e:	b08a      	sub	sp, #40	; 0x28
 8103850:	af00      	add	r7, sp, #0
 8103852:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8103854:	2300      	movs	r3, #0
 8103856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	685b      	ldr	r3, [r3, #4]
 8103866:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	4a87      	ldr	r2, [pc, #540]	; (8103a8c <HAL_ADC_IRQHandler+0x240>)
 810386e:	4293      	cmp	r3, r2
 8103870:	d004      	beq.n	810387c <HAL_ADC_IRQHandler+0x30>
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	4a86      	ldr	r2, [pc, #536]	; (8103a90 <HAL_ADC_IRQHandler+0x244>)
 8103878:	4293      	cmp	r3, r2
 810387a:	d101      	bne.n	8103880 <HAL_ADC_IRQHandler+0x34>
 810387c:	4b85      	ldr	r3, [pc, #532]	; (8103a94 <HAL_ADC_IRQHandler+0x248>)
 810387e:	e000      	b.n	8103882 <HAL_ADC_IRQHandler+0x36>
 8103880:	4b85      	ldr	r3, [pc, #532]	; (8103a98 <HAL_ADC_IRQHandler+0x24c>)
 8103882:	4618      	mov	r0, r3
 8103884:	f7ff ffa0 	bl	81037c8 <LL_ADC_GetMultimode>
 8103888:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810388a:	69fb      	ldr	r3, [r7, #28]
 810388c:	f003 0302 	and.w	r3, r3, #2
 8103890:	2b00      	cmp	r3, #0
 8103892:	d017      	beq.n	81038c4 <HAL_ADC_IRQHandler+0x78>
 8103894:	69bb      	ldr	r3, [r7, #24]
 8103896:	f003 0302 	and.w	r3, r3, #2
 810389a:	2b00      	cmp	r3, #0
 810389c:	d012      	beq.n	81038c4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038a2:	f003 0310 	and.w	r3, r3, #16
 81038a6:	2b00      	cmp	r3, #0
 81038a8:	d105      	bne.n	81038b6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038ae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81038b6:	6878      	ldr	r0, [r7, #4]
 81038b8:	f000 fa48 	bl	8103d4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	2202      	movs	r2, #2
 81038c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81038c4:	69fb      	ldr	r3, [r7, #28]
 81038c6:	f003 0304 	and.w	r3, r3, #4
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d004      	beq.n	81038d8 <HAL_ADC_IRQHandler+0x8c>
 81038ce:	69bb      	ldr	r3, [r7, #24]
 81038d0:	f003 0304 	and.w	r3, r3, #4
 81038d4:	2b00      	cmp	r3, #0
 81038d6:	d10a      	bne.n	81038ee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81038d8:	69fb      	ldr	r3, [r7, #28]
 81038da:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81038de:	2b00      	cmp	r3, #0
 81038e0:	f000 8083 	beq.w	81039ea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81038e4:	69bb      	ldr	r3, [r7, #24]
 81038e6:	f003 0308 	and.w	r3, r3, #8
 81038ea:	2b00      	cmp	r3, #0
 81038ec:	d07d      	beq.n	81039ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81038ee:	687b      	ldr	r3, [r7, #4]
 81038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038f2:	f003 0310 	and.w	r3, r3, #16
 81038f6:	2b00      	cmp	r3, #0
 81038f8:	d105      	bne.n	8103906 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	681b      	ldr	r3, [r3, #0]
 810390a:	4618      	mov	r0, r3
 810390c:	f7ff ff36 	bl	810377c <LL_ADC_REG_IsTriggerSourceSWStart>
 8103910:	4603      	mov	r3, r0
 8103912:	2b00      	cmp	r3, #0
 8103914:	d062      	beq.n	81039dc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	4a5d      	ldr	r2, [pc, #372]	; (8103a90 <HAL_ADC_IRQHandler+0x244>)
 810391c:	4293      	cmp	r3, r2
 810391e:	d002      	beq.n	8103926 <HAL_ADC_IRQHandler+0xda>
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	681b      	ldr	r3, [r3, #0]
 8103924:	e000      	b.n	8103928 <HAL_ADC_IRQHandler+0xdc>
 8103926:	4b59      	ldr	r3, [pc, #356]	; (8103a8c <HAL_ADC_IRQHandler+0x240>)
 8103928:	687a      	ldr	r2, [r7, #4]
 810392a:	6812      	ldr	r2, [r2, #0]
 810392c:	4293      	cmp	r3, r2
 810392e:	d008      	beq.n	8103942 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103930:	697b      	ldr	r3, [r7, #20]
 8103932:	2b00      	cmp	r3, #0
 8103934:	d005      	beq.n	8103942 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103936:	697b      	ldr	r3, [r7, #20]
 8103938:	2b05      	cmp	r3, #5
 810393a:	d002      	beq.n	8103942 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 810393c:	697b      	ldr	r3, [r7, #20]
 810393e:	2b09      	cmp	r3, #9
 8103940:	d104      	bne.n	810394c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	68db      	ldr	r3, [r3, #12]
 8103948:	623b      	str	r3, [r7, #32]
 810394a:	e00c      	b.n	8103966 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	681b      	ldr	r3, [r3, #0]
 8103950:	4a4f      	ldr	r2, [pc, #316]	; (8103a90 <HAL_ADC_IRQHandler+0x244>)
 8103952:	4293      	cmp	r3, r2
 8103954:	d002      	beq.n	810395c <HAL_ADC_IRQHandler+0x110>
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	e000      	b.n	810395e <HAL_ADC_IRQHandler+0x112>
 810395c:	4b4b      	ldr	r3, [pc, #300]	; (8103a8c <HAL_ADC_IRQHandler+0x240>)
 810395e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103960:	693b      	ldr	r3, [r7, #16]
 8103962:	68db      	ldr	r3, [r3, #12]
 8103964:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8103966:	6a3b      	ldr	r3, [r7, #32]
 8103968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810396c:	2b00      	cmp	r3, #0
 810396e:	d135      	bne.n	81039dc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	f003 0308 	and.w	r3, r3, #8
 810397a:	2b08      	cmp	r3, #8
 810397c:	d12e      	bne.n	81039dc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	4618      	mov	r0, r3
 8103984:	f7ff ff3c 	bl	8103800 <LL_ADC_REG_IsConversionOngoing>
 8103988:	4603      	mov	r3, r0
 810398a:	2b00      	cmp	r3, #0
 810398c:	d11a      	bne.n	81039c4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	685a      	ldr	r2, [r3, #4]
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	f022 020c 	bic.w	r2, r2, #12
 810399c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d112      	bne.n	81039dc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ba:	f043 0201 	orr.w	r2, r3, #1
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	655a      	str	r2, [r3, #84]	; 0x54
 81039c2:	e00b      	b.n	81039dc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039c8:	f043 0210 	orr.w	r2, r3, #16
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039d4:	f043 0201 	orr.w	r2, r3, #1
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 81039dc:	6878      	ldr	r0, [r7, #4]
 81039de:	f000 f96f 	bl	8103cc0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	220c      	movs	r2, #12
 81039e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81039ea:	69fb      	ldr	r3, [r7, #28]
 81039ec:	f003 0320 	and.w	r3, r3, #32
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d004      	beq.n	81039fe <HAL_ADC_IRQHandler+0x1b2>
 81039f4:	69bb      	ldr	r3, [r7, #24]
 81039f6:	f003 0320 	and.w	r3, r3, #32
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d10b      	bne.n	8103a16 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81039fe:	69fb      	ldr	r3, [r7, #28]
 8103a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103a04:	2b00      	cmp	r3, #0
 8103a06:	f000 80a0 	beq.w	8103b4a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8103a0a:	69bb      	ldr	r3, [r7, #24]
 8103a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	f000 809a 	beq.w	8103b4a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a1a:	f003 0310 	and.w	r3, r3, #16
 8103a1e:	2b00      	cmp	r3, #0
 8103a20:	d105      	bne.n	8103a2e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a26:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	4618      	mov	r0, r3
 8103a34:	f7ff feb5 	bl	81037a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8103a38:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	4618      	mov	r0, r3
 8103a40:	f7ff fe9c 	bl	810377c <LL_ADC_REG_IsTriggerSourceSWStart>
 8103a44:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	4a11      	ldr	r2, [pc, #68]	; (8103a90 <HAL_ADC_IRQHandler+0x244>)
 8103a4c:	4293      	cmp	r3, r2
 8103a4e:	d002      	beq.n	8103a56 <HAL_ADC_IRQHandler+0x20a>
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	e000      	b.n	8103a58 <HAL_ADC_IRQHandler+0x20c>
 8103a56:	4b0d      	ldr	r3, [pc, #52]	; (8103a8c <HAL_ADC_IRQHandler+0x240>)
 8103a58:	687a      	ldr	r2, [r7, #4]
 8103a5a:	6812      	ldr	r2, [r2, #0]
 8103a5c:	4293      	cmp	r3, r2
 8103a5e:	d008      	beq.n	8103a72 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103a60:	697b      	ldr	r3, [r7, #20]
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	d005      	beq.n	8103a72 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8103a66:	697b      	ldr	r3, [r7, #20]
 8103a68:	2b06      	cmp	r3, #6
 8103a6a:	d002      	beq.n	8103a72 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8103a6c:	697b      	ldr	r3, [r7, #20]
 8103a6e:	2b07      	cmp	r3, #7
 8103a70:	d104      	bne.n	8103a7c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	68db      	ldr	r3, [r3, #12]
 8103a78:	623b      	str	r3, [r7, #32]
 8103a7a:	e014      	b.n	8103aa6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	4a03      	ldr	r2, [pc, #12]	; (8103a90 <HAL_ADC_IRQHandler+0x244>)
 8103a82:	4293      	cmp	r3, r2
 8103a84:	d00a      	beq.n	8103a9c <HAL_ADC_IRQHandler+0x250>
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	e008      	b.n	8103a9e <HAL_ADC_IRQHandler+0x252>
 8103a8c:	40022000 	.word	0x40022000
 8103a90:	40022100 	.word	0x40022100
 8103a94:	40022300 	.word	0x40022300
 8103a98:	58026300 	.word	0x58026300
 8103a9c:	4b84      	ldr	r3, [pc, #528]	; (8103cb0 <HAL_ADC_IRQHandler+0x464>)
 8103a9e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103aa0:	693b      	ldr	r3, [r7, #16]
 8103aa2:	68db      	ldr	r3, [r3, #12]
 8103aa4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103aa6:	68fb      	ldr	r3, [r7, #12]
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d10c      	bne.n	8103ac6 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103aac:	6a3b      	ldr	r3, [r7, #32]
 8103aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d142      	bne.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103ab6:	68bb      	ldr	r3, [r7, #8]
 8103ab8:	2b00      	cmp	r3, #0
 8103aba:	d03f      	beq.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8103abc:	6a3b      	ldr	r3, [r7, #32]
 8103abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	d13a      	bne.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103ad0:	2b40      	cmp	r3, #64	; 0x40
 8103ad2:	d133      	bne.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103ad4:	6a3b      	ldr	r3, [r7, #32]
 8103ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	d12e      	bne.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	4618      	mov	r0, r3
 8103ae4:	f7ff fe9f 	bl	8103826 <LL_ADC_INJ_IsConversionOngoing>
 8103ae8:	4603      	mov	r3, r0
 8103aea:	2b00      	cmp	r3, #0
 8103aec:	d11a      	bne.n	8103b24 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	685a      	ldr	r2, [r3, #4]
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8103afc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d112      	bne.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b1a:	f043 0201 	orr.w	r2, r3, #1
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	655a      	str	r2, [r3, #84]	; 0x54
 8103b22:	e00b      	b.n	8103b3c <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b28:	f043 0210 	orr.w	r2, r3, #16
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b34:	f043 0201 	orr.w	r2, r3, #1
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8103b3c:	6878      	ldr	r0, [r7, #4]
 8103b3e:	f000 f8dd 	bl	8103cfc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	2260      	movs	r2, #96	; 0x60
 8103b48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8103b4a:	69fb      	ldr	r3, [r7, #28]
 8103b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d011      	beq.n	8103b78 <HAL_ADC_IRQHandler+0x32c>
 8103b54:	69bb      	ldr	r3, [r7, #24]
 8103b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d00c      	beq.n	8103b78 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8103b6a:	6878      	ldr	r0, [r7, #4]
 8103b6c:	f000 f8b2 	bl	8103cd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	2280      	movs	r2, #128	; 0x80
 8103b76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8103b78:	69fb      	ldr	r3, [r7, #28]
 8103b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	d012      	beq.n	8103ba8 <HAL_ADC_IRQHandler+0x35c>
 8103b82:	69bb      	ldr	r3, [r7, #24]
 8103b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103b88:	2b00      	cmp	r3, #0
 8103b8a:	d00d      	beq.n	8103ba8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8103b98:	6878      	ldr	r0, [r7, #4]
 8103b9a:	f000 f8c3 	bl	8103d24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103ba6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8103ba8:	69fb      	ldr	r3, [r7, #28]
 8103baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103bae:	2b00      	cmp	r3, #0
 8103bb0:	d012      	beq.n	8103bd8 <HAL_ADC_IRQHandler+0x38c>
 8103bb2:	69bb      	ldr	r3, [r7, #24]
 8103bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d00d      	beq.n	8103bd8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8103bc8:	6878      	ldr	r0, [r7, #4]
 8103bca:	f000 f8b5 	bl	8103d38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	681b      	ldr	r3, [r3, #0]
 8103bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103bd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8103bd8:	69fb      	ldr	r3, [r7, #28]
 8103bda:	f003 0310 	and.w	r3, r3, #16
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	d043      	beq.n	8103c6a <HAL_ADC_IRQHandler+0x41e>
 8103be2:	69bb      	ldr	r3, [r7, #24]
 8103be4:	f003 0310 	and.w	r3, r3, #16
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d03e      	beq.n	8103c6a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103bf0:	2b00      	cmp	r3, #0
 8103bf2:	d102      	bne.n	8103bfa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8103bf4:	2301      	movs	r3, #1
 8103bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8103bf8:	e021      	b.n	8103c3e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8103bfa:	697b      	ldr	r3, [r7, #20]
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d015      	beq.n	8103c2c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	4a2a      	ldr	r2, [pc, #168]	; (8103cb0 <HAL_ADC_IRQHandler+0x464>)
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d004      	beq.n	8103c14 <HAL_ADC_IRQHandler+0x3c8>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	4a29      	ldr	r2, [pc, #164]	; (8103cb4 <HAL_ADC_IRQHandler+0x468>)
 8103c10:	4293      	cmp	r3, r2
 8103c12:	d101      	bne.n	8103c18 <HAL_ADC_IRQHandler+0x3cc>
 8103c14:	4b28      	ldr	r3, [pc, #160]	; (8103cb8 <HAL_ADC_IRQHandler+0x46c>)
 8103c16:	e000      	b.n	8103c1a <HAL_ADC_IRQHandler+0x3ce>
 8103c18:	4b28      	ldr	r3, [pc, #160]	; (8103cbc <HAL_ADC_IRQHandler+0x470>)
 8103c1a:	4618      	mov	r0, r3
 8103c1c:	f7ff fde2 	bl	81037e4 <LL_ADC_GetMultiDMATransfer>
 8103c20:	4603      	mov	r3, r0
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d00b      	beq.n	8103c3e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103c26:	2301      	movs	r3, #1
 8103c28:	627b      	str	r3, [r7, #36]	; 0x24
 8103c2a:	e008      	b.n	8103c3e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	68db      	ldr	r3, [r3, #12]
 8103c32:	f003 0303 	and.w	r3, r3, #3
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	d001      	beq.n	8103c3e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103c3a:	2301      	movs	r3, #1
 8103c3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8103c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c40:	2b01      	cmp	r3, #1
 8103c42:	d10e      	bne.n	8103c62 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c54:	f043 0202 	orr.w	r2, r3, #2
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103c5c:	6878      	ldr	r0, [r7, #4]
 8103c5e:	f000 f843 	bl	8103ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	2210      	movs	r2, #16
 8103c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8103c6a:	69fb      	ldr	r3, [r7, #28]
 8103c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103c70:	2b00      	cmp	r3, #0
 8103c72:	d018      	beq.n	8103ca6 <HAL_ADC_IRQHandler+0x45a>
 8103c74:	69bb      	ldr	r3, [r7, #24]
 8103c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d013      	beq.n	8103ca6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c82:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c8e:	f043 0208 	orr.w	r2, r3, #8
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103c9e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103ca0:	6878      	ldr	r0, [r7, #4]
 8103ca2:	f000 f835 	bl	8103d10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8103ca6:	bf00      	nop
 8103ca8:	3728      	adds	r7, #40	; 0x28
 8103caa:	46bd      	mov	sp, r7
 8103cac:	bd80      	pop	{r7, pc}
 8103cae:	bf00      	nop
 8103cb0:	40022000 	.word	0x40022000
 8103cb4:	40022100 	.word	0x40022100
 8103cb8:	40022300 	.word	0x40022300
 8103cbc:	58026300 	.word	0x58026300

08103cc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103cc0:	b480      	push	{r7}
 8103cc2:	b083      	sub	sp, #12
 8103cc4:	af00      	add	r7, sp, #0
 8103cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8103cc8:	bf00      	nop
 8103cca:	370c      	adds	r7, #12
 8103ccc:	46bd      	mov	sp, r7
 8103cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cd2:	4770      	bx	lr

08103cd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103cd4:	b480      	push	{r7}
 8103cd6:	b083      	sub	sp, #12
 8103cd8:	af00      	add	r7, sp, #0
 8103cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8103cdc:	bf00      	nop
 8103cde:	370c      	adds	r7, #12
 8103ce0:	46bd      	mov	sp, r7
 8103ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce6:	4770      	bx	lr

08103ce8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8103ce8:	b480      	push	{r7}
 8103cea:	b083      	sub	sp, #12
 8103cec:	af00      	add	r7, sp, #0
 8103cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8103cf0:	bf00      	nop
 8103cf2:	370c      	adds	r7, #12
 8103cf4:	46bd      	mov	sp, r7
 8103cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cfa:	4770      	bx	lr

08103cfc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103cfc:	b480      	push	{r7}
 8103cfe:	b083      	sub	sp, #12
 8103d00:	af00      	add	r7, sp, #0
 8103d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103d04:	bf00      	nop
 8103d06:	370c      	adds	r7, #12
 8103d08:	46bd      	mov	sp, r7
 8103d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d0e:	4770      	bx	lr

08103d10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103d10:	b480      	push	{r7}
 8103d12:	b083      	sub	sp, #12
 8103d14:	af00      	add	r7, sp, #0
 8103d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103d18:	bf00      	nop
 8103d1a:	370c      	adds	r7, #12
 8103d1c:	46bd      	mov	sp, r7
 8103d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d22:	4770      	bx	lr

08103d24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103d24:	b480      	push	{r7}
 8103d26:	b083      	sub	sp, #12
 8103d28:	af00      	add	r7, sp, #0
 8103d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103d2c:	bf00      	nop
 8103d2e:	370c      	adds	r7, #12
 8103d30:	46bd      	mov	sp, r7
 8103d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d36:	4770      	bx	lr

08103d38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103d38:	b480      	push	{r7}
 8103d3a:	b083      	sub	sp, #12
 8103d3c:	af00      	add	r7, sp, #0
 8103d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103d40:	bf00      	nop
 8103d42:	370c      	adds	r7, #12
 8103d44:	46bd      	mov	sp, r7
 8103d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d4a:	4770      	bx	lr

08103d4c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103d4c:	b480      	push	{r7}
 8103d4e:	b083      	sub	sp, #12
 8103d50:	af00      	add	r7, sp, #0
 8103d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103d54:	bf00      	nop
 8103d56:	370c      	adds	r7, #12
 8103d58:	46bd      	mov	sp, r7
 8103d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d5e:	4770      	bx	lr

08103d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103d60:	b480      	push	{r7}
 8103d62:	b085      	sub	sp, #20
 8103d64:	af00      	add	r7, sp, #0
 8103d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	f003 0307 	and.w	r3, r3, #7
 8103d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103d70:	4b0c      	ldr	r3, [pc, #48]	; (8103da4 <__NVIC_SetPriorityGrouping+0x44>)
 8103d72:	68db      	ldr	r3, [r3, #12]
 8103d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103d76:	68ba      	ldr	r2, [r7, #8]
 8103d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103d7c:	4013      	ands	r3, r2
 8103d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103d84:	68bb      	ldr	r3, [r7, #8]
 8103d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103d92:	4a04      	ldr	r2, [pc, #16]	; (8103da4 <__NVIC_SetPriorityGrouping+0x44>)
 8103d94:	68bb      	ldr	r3, [r7, #8]
 8103d96:	60d3      	str	r3, [r2, #12]
}
 8103d98:	bf00      	nop
 8103d9a:	3714      	adds	r7, #20
 8103d9c:	46bd      	mov	sp, r7
 8103d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103da2:	4770      	bx	lr
 8103da4:	e000ed00 	.word	0xe000ed00

08103da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103da8:	b480      	push	{r7}
 8103daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103dac:	4b04      	ldr	r3, [pc, #16]	; (8103dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8103dae:	68db      	ldr	r3, [r3, #12]
 8103db0:	0a1b      	lsrs	r3, r3, #8
 8103db2:	f003 0307 	and.w	r3, r3, #7
}
 8103db6:	4618      	mov	r0, r3
 8103db8:	46bd      	mov	sp, r7
 8103dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dbe:	4770      	bx	lr
 8103dc0:	e000ed00 	.word	0xe000ed00

08103dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103dc4:	b480      	push	{r7}
 8103dc6:	b083      	sub	sp, #12
 8103dc8:	af00      	add	r7, sp, #0
 8103dca:	4603      	mov	r3, r0
 8103dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103dd2:	2b00      	cmp	r3, #0
 8103dd4:	db0b      	blt.n	8103dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103dd6:	88fb      	ldrh	r3, [r7, #6]
 8103dd8:	f003 021f 	and.w	r2, r3, #31
 8103ddc:	4907      	ldr	r1, [pc, #28]	; (8103dfc <__NVIC_EnableIRQ+0x38>)
 8103dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103de2:	095b      	lsrs	r3, r3, #5
 8103de4:	2001      	movs	r0, #1
 8103de6:	fa00 f202 	lsl.w	r2, r0, r2
 8103dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103dee:	bf00      	nop
 8103df0:	370c      	adds	r7, #12
 8103df2:	46bd      	mov	sp, r7
 8103df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103df8:	4770      	bx	lr
 8103dfa:	bf00      	nop
 8103dfc:	e000e100 	.word	0xe000e100

08103e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103e00:	b480      	push	{r7}
 8103e02:	b083      	sub	sp, #12
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	4603      	mov	r3, r0
 8103e08:	6039      	str	r1, [r7, #0]
 8103e0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e10:	2b00      	cmp	r3, #0
 8103e12:	db0a      	blt.n	8103e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103e14:	683b      	ldr	r3, [r7, #0]
 8103e16:	b2da      	uxtb	r2, r3
 8103e18:	490c      	ldr	r1, [pc, #48]	; (8103e4c <__NVIC_SetPriority+0x4c>)
 8103e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e1e:	0112      	lsls	r2, r2, #4
 8103e20:	b2d2      	uxtb	r2, r2
 8103e22:	440b      	add	r3, r1
 8103e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103e28:	e00a      	b.n	8103e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103e2a:	683b      	ldr	r3, [r7, #0]
 8103e2c:	b2da      	uxtb	r2, r3
 8103e2e:	4908      	ldr	r1, [pc, #32]	; (8103e50 <__NVIC_SetPriority+0x50>)
 8103e30:	88fb      	ldrh	r3, [r7, #6]
 8103e32:	f003 030f 	and.w	r3, r3, #15
 8103e36:	3b04      	subs	r3, #4
 8103e38:	0112      	lsls	r2, r2, #4
 8103e3a:	b2d2      	uxtb	r2, r2
 8103e3c:	440b      	add	r3, r1
 8103e3e:	761a      	strb	r2, [r3, #24]
}
 8103e40:	bf00      	nop
 8103e42:	370c      	adds	r7, #12
 8103e44:	46bd      	mov	sp, r7
 8103e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e4a:	4770      	bx	lr
 8103e4c:	e000e100 	.word	0xe000e100
 8103e50:	e000ed00 	.word	0xe000ed00

08103e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103e54:	b480      	push	{r7}
 8103e56:	b089      	sub	sp, #36	; 0x24
 8103e58:	af00      	add	r7, sp, #0
 8103e5a:	60f8      	str	r0, [r7, #12]
 8103e5c:	60b9      	str	r1, [r7, #8]
 8103e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103e60:	68fb      	ldr	r3, [r7, #12]
 8103e62:	f003 0307 	and.w	r3, r3, #7
 8103e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103e68:	69fb      	ldr	r3, [r7, #28]
 8103e6a:	f1c3 0307 	rsb	r3, r3, #7
 8103e6e:	2b04      	cmp	r3, #4
 8103e70:	bf28      	it	cs
 8103e72:	2304      	movcs	r3, #4
 8103e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103e76:	69fb      	ldr	r3, [r7, #28]
 8103e78:	3304      	adds	r3, #4
 8103e7a:	2b06      	cmp	r3, #6
 8103e7c:	d902      	bls.n	8103e84 <NVIC_EncodePriority+0x30>
 8103e7e:	69fb      	ldr	r3, [r7, #28]
 8103e80:	3b03      	subs	r3, #3
 8103e82:	e000      	b.n	8103e86 <NVIC_EncodePriority+0x32>
 8103e84:	2300      	movs	r3, #0
 8103e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103e88:	f04f 32ff 	mov.w	r2, #4294967295
 8103e8c:	69bb      	ldr	r3, [r7, #24]
 8103e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8103e92:	43da      	mvns	r2, r3
 8103e94:	68bb      	ldr	r3, [r7, #8]
 8103e96:	401a      	ands	r2, r3
 8103e98:	697b      	ldr	r3, [r7, #20]
 8103e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8103ea0:	697b      	ldr	r3, [r7, #20]
 8103ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8103ea6:	43d9      	mvns	r1, r3
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103eac:	4313      	orrs	r3, r2
         );
}
 8103eae:	4618      	mov	r0, r3
 8103eb0:	3724      	adds	r7, #36	; 0x24
 8103eb2:	46bd      	mov	sp, r7
 8103eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eb8:	4770      	bx	lr
	...

08103ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103ebc:	b580      	push	{r7, lr}
 8103ebe:	b082      	sub	sp, #8
 8103ec0:	af00      	add	r7, sp, #0
 8103ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	3b01      	subs	r3, #1
 8103ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103ecc:	d301      	bcc.n	8103ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103ece:	2301      	movs	r3, #1
 8103ed0:	e00f      	b.n	8103ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103ed2:	4a0a      	ldr	r2, [pc, #40]	; (8103efc <SysTick_Config+0x40>)
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	3b01      	subs	r3, #1
 8103ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103eda:	210f      	movs	r1, #15
 8103edc:	f04f 30ff 	mov.w	r0, #4294967295
 8103ee0:	f7ff ff8e 	bl	8103e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103ee4:	4b05      	ldr	r3, [pc, #20]	; (8103efc <SysTick_Config+0x40>)
 8103ee6:	2200      	movs	r2, #0
 8103ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103eea:	4b04      	ldr	r3, [pc, #16]	; (8103efc <SysTick_Config+0x40>)
 8103eec:	2207      	movs	r2, #7
 8103eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103ef0:	2300      	movs	r3, #0
}
 8103ef2:	4618      	mov	r0, r3
 8103ef4:	3708      	adds	r7, #8
 8103ef6:	46bd      	mov	sp, r7
 8103ef8:	bd80      	pop	{r7, pc}
 8103efa:	bf00      	nop
 8103efc:	e000e010 	.word	0xe000e010

08103f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103f00:	b580      	push	{r7, lr}
 8103f02:	b082      	sub	sp, #8
 8103f04:	af00      	add	r7, sp, #0
 8103f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103f08:	6878      	ldr	r0, [r7, #4]
 8103f0a:	f7ff ff29 	bl	8103d60 <__NVIC_SetPriorityGrouping>
}
 8103f0e:	bf00      	nop
 8103f10:	3708      	adds	r7, #8
 8103f12:	46bd      	mov	sp, r7
 8103f14:	bd80      	pop	{r7, pc}

08103f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103f16:	b580      	push	{r7, lr}
 8103f18:	b086      	sub	sp, #24
 8103f1a:	af00      	add	r7, sp, #0
 8103f1c:	4603      	mov	r3, r0
 8103f1e:	60b9      	str	r1, [r7, #8]
 8103f20:	607a      	str	r2, [r7, #4]
 8103f22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103f24:	f7ff ff40 	bl	8103da8 <__NVIC_GetPriorityGrouping>
 8103f28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103f2a:	687a      	ldr	r2, [r7, #4]
 8103f2c:	68b9      	ldr	r1, [r7, #8]
 8103f2e:	6978      	ldr	r0, [r7, #20]
 8103f30:	f7ff ff90 	bl	8103e54 <NVIC_EncodePriority>
 8103f34:	4602      	mov	r2, r0
 8103f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103f3a:	4611      	mov	r1, r2
 8103f3c:	4618      	mov	r0, r3
 8103f3e:	f7ff ff5f 	bl	8103e00 <__NVIC_SetPriority>
}
 8103f42:	bf00      	nop
 8103f44:	3718      	adds	r7, #24
 8103f46:	46bd      	mov	sp, r7
 8103f48:	bd80      	pop	{r7, pc}

08103f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103f4a:	b580      	push	{r7, lr}
 8103f4c:	b082      	sub	sp, #8
 8103f4e:	af00      	add	r7, sp, #0
 8103f50:	4603      	mov	r3, r0
 8103f52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103f54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f58:	4618      	mov	r0, r3
 8103f5a:	f7ff ff33 	bl	8103dc4 <__NVIC_EnableIRQ>
}
 8103f5e:	bf00      	nop
 8103f60:	3708      	adds	r7, #8
 8103f62:	46bd      	mov	sp, r7
 8103f64:	bd80      	pop	{r7, pc}

08103f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103f66:	b580      	push	{r7, lr}
 8103f68:	b082      	sub	sp, #8
 8103f6a:	af00      	add	r7, sp, #0
 8103f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103f6e:	6878      	ldr	r0, [r7, #4]
 8103f70:	f7ff ffa4 	bl	8103ebc <SysTick_Config>
 8103f74:	4603      	mov	r3, r0
}
 8103f76:	4618      	mov	r0, r3
 8103f78:	3708      	adds	r7, #8
 8103f7a:	46bd      	mov	sp, r7
 8103f7c:	bd80      	pop	{r7, pc}
	...

08103f80 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103f80:	b480      	push	{r7}
 8103f82:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103f84:	4b07      	ldr	r3, [pc, #28]	; (8103fa4 <HAL_GetCurrentCPUID+0x24>)
 8103f86:	681b      	ldr	r3, [r3, #0]
 8103f88:	091b      	lsrs	r3, r3, #4
 8103f8a:	f003 030f 	and.w	r3, r3, #15
 8103f8e:	2b07      	cmp	r3, #7
 8103f90:	d101      	bne.n	8103f96 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103f92:	2303      	movs	r3, #3
 8103f94:	e000      	b.n	8103f98 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103f96:	2301      	movs	r3, #1
  }
}
 8103f98:	4618      	mov	r0, r3
 8103f9a:	46bd      	mov	sp, r7
 8103f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa0:	4770      	bx	lr
 8103fa2:	bf00      	nop
 8103fa4:	e000ed00 	.word	0xe000ed00

08103fa8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103fa8:	b580      	push	{r7, lr}
 8103faa:	b086      	sub	sp, #24
 8103fac:	af00      	add	r7, sp, #0
 8103fae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103fb0:	f7ff fbb4 	bl	810371c <HAL_GetTick>
 8103fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	2b00      	cmp	r3, #0
 8103fba:	d101      	bne.n	8103fc0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103fbc:	2301      	movs	r3, #1
 8103fbe:	e314      	b.n	81045ea <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	4a66      	ldr	r2, [pc, #408]	; (8104160 <HAL_DMA_Init+0x1b8>)
 8103fc6:	4293      	cmp	r3, r2
 8103fc8:	d04a      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	681b      	ldr	r3, [r3, #0]
 8103fce:	4a65      	ldr	r2, [pc, #404]	; (8104164 <HAL_DMA_Init+0x1bc>)
 8103fd0:	4293      	cmp	r3, r2
 8103fd2:	d045      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	681b      	ldr	r3, [r3, #0]
 8103fd8:	4a63      	ldr	r2, [pc, #396]	; (8104168 <HAL_DMA_Init+0x1c0>)
 8103fda:	4293      	cmp	r3, r2
 8103fdc:	d040      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	4a62      	ldr	r2, [pc, #392]	; (810416c <HAL_DMA_Init+0x1c4>)
 8103fe4:	4293      	cmp	r3, r2
 8103fe6:	d03b      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	4a60      	ldr	r2, [pc, #384]	; (8104170 <HAL_DMA_Init+0x1c8>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d036      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	4a5f      	ldr	r2, [pc, #380]	; (8104174 <HAL_DMA_Init+0x1cc>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d031      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4a5d      	ldr	r2, [pc, #372]	; (8104178 <HAL_DMA_Init+0x1d0>)
 8104002:	4293      	cmp	r3, r2
 8104004:	d02c      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	681b      	ldr	r3, [r3, #0]
 810400a:	4a5c      	ldr	r2, [pc, #368]	; (810417c <HAL_DMA_Init+0x1d4>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d027      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	4a5a      	ldr	r2, [pc, #360]	; (8104180 <HAL_DMA_Init+0x1d8>)
 8104016:	4293      	cmp	r3, r2
 8104018:	d022      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 810401a:	687b      	ldr	r3, [r7, #4]
 810401c:	681b      	ldr	r3, [r3, #0]
 810401e:	4a59      	ldr	r2, [pc, #356]	; (8104184 <HAL_DMA_Init+0x1dc>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d01d      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	4a57      	ldr	r2, [pc, #348]	; (8104188 <HAL_DMA_Init+0x1e0>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d018      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	4a56      	ldr	r2, [pc, #344]	; (810418c <HAL_DMA_Init+0x1e4>)
 8104034:	4293      	cmp	r3, r2
 8104036:	d013      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	4a54      	ldr	r2, [pc, #336]	; (8104190 <HAL_DMA_Init+0x1e8>)
 810403e:	4293      	cmp	r3, r2
 8104040:	d00e      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	681b      	ldr	r3, [r3, #0]
 8104046:	4a53      	ldr	r2, [pc, #332]	; (8104194 <HAL_DMA_Init+0x1ec>)
 8104048:	4293      	cmp	r3, r2
 810404a:	d009      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	4a51      	ldr	r2, [pc, #324]	; (8104198 <HAL_DMA_Init+0x1f0>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d004      	beq.n	8104060 <HAL_DMA_Init+0xb8>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4a50      	ldr	r2, [pc, #320]	; (810419c <HAL_DMA_Init+0x1f4>)
 810405c:	4293      	cmp	r3, r2
 810405e:	d101      	bne.n	8104064 <HAL_DMA_Init+0xbc>
 8104060:	2301      	movs	r3, #1
 8104062:	e000      	b.n	8104066 <HAL_DMA_Init+0xbe>
 8104064:	2300      	movs	r3, #0
 8104066:	2b00      	cmp	r3, #0
 8104068:	f000 813b 	beq.w	81042e2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	2200      	movs	r2, #0
 8104070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	2202      	movs	r2, #2
 8104078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	681b      	ldr	r3, [r3, #0]
 8104080:	4a37      	ldr	r2, [pc, #220]	; (8104160 <HAL_DMA_Init+0x1b8>)
 8104082:	4293      	cmp	r3, r2
 8104084:	d04a      	beq.n	810411c <HAL_DMA_Init+0x174>
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	681b      	ldr	r3, [r3, #0]
 810408a:	4a36      	ldr	r2, [pc, #216]	; (8104164 <HAL_DMA_Init+0x1bc>)
 810408c:	4293      	cmp	r3, r2
 810408e:	d045      	beq.n	810411c <HAL_DMA_Init+0x174>
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	4a34      	ldr	r2, [pc, #208]	; (8104168 <HAL_DMA_Init+0x1c0>)
 8104096:	4293      	cmp	r3, r2
 8104098:	d040      	beq.n	810411c <HAL_DMA_Init+0x174>
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	4a33      	ldr	r2, [pc, #204]	; (810416c <HAL_DMA_Init+0x1c4>)
 81040a0:	4293      	cmp	r3, r2
 81040a2:	d03b      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	4a31      	ldr	r2, [pc, #196]	; (8104170 <HAL_DMA_Init+0x1c8>)
 81040aa:	4293      	cmp	r3, r2
 81040ac:	d036      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	4a30      	ldr	r2, [pc, #192]	; (8104174 <HAL_DMA_Init+0x1cc>)
 81040b4:	4293      	cmp	r3, r2
 81040b6:	d031      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	681b      	ldr	r3, [r3, #0]
 81040bc:	4a2e      	ldr	r2, [pc, #184]	; (8104178 <HAL_DMA_Init+0x1d0>)
 81040be:	4293      	cmp	r3, r2
 81040c0:	d02c      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	4a2d      	ldr	r2, [pc, #180]	; (810417c <HAL_DMA_Init+0x1d4>)
 81040c8:	4293      	cmp	r3, r2
 81040ca:	d027      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	681b      	ldr	r3, [r3, #0]
 81040d0:	4a2b      	ldr	r2, [pc, #172]	; (8104180 <HAL_DMA_Init+0x1d8>)
 81040d2:	4293      	cmp	r3, r2
 81040d4:	d022      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	681b      	ldr	r3, [r3, #0]
 81040da:	4a2a      	ldr	r2, [pc, #168]	; (8104184 <HAL_DMA_Init+0x1dc>)
 81040dc:	4293      	cmp	r3, r2
 81040de:	d01d      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	4a28      	ldr	r2, [pc, #160]	; (8104188 <HAL_DMA_Init+0x1e0>)
 81040e6:	4293      	cmp	r3, r2
 81040e8:	d018      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	4a27      	ldr	r2, [pc, #156]	; (810418c <HAL_DMA_Init+0x1e4>)
 81040f0:	4293      	cmp	r3, r2
 81040f2:	d013      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040f4:	687b      	ldr	r3, [r7, #4]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	4a25      	ldr	r2, [pc, #148]	; (8104190 <HAL_DMA_Init+0x1e8>)
 81040fa:	4293      	cmp	r3, r2
 81040fc:	d00e      	beq.n	810411c <HAL_DMA_Init+0x174>
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	681b      	ldr	r3, [r3, #0]
 8104102:	4a24      	ldr	r2, [pc, #144]	; (8104194 <HAL_DMA_Init+0x1ec>)
 8104104:	4293      	cmp	r3, r2
 8104106:	d009      	beq.n	810411c <HAL_DMA_Init+0x174>
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	681b      	ldr	r3, [r3, #0]
 810410c:	4a22      	ldr	r2, [pc, #136]	; (8104198 <HAL_DMA_Init+0x1f0>)
 810410e:	4293      	cmp	r3, r2
 8104110:	d004      	beq.n	810411c <HAL_DMA_Init+0x174>
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	4a21      	ldr	r2, [pc, #132]	; (810419c <HAL_DMA_Init+0x1f4>)
 8104118:	4293      	cmp	r3, r2
 810411a:	d108      	bne.n	810412e <HAL_DMA_Init+0x186>
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	681a      	ldr	r2, [r3, #0]
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	f022 0201 	bic.w	r2, r2, #1
 810412a:	601a      	str	r2, [r3, #0]
 810412c:	e007      	b.n	810413e <HAL_DMA_Init+0x196>
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	681a      	ldr	r2, [r3, #0]
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	f022 0201 	bic.w	r2, r2, #1
 810413c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810413e:	e02f      	b.n	81041a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104140:	f7ff faec 	bl	810371c <HAL_GetTick>
 8104144:	4602      	mov	r2, r0
 8104146:	693b      	ldr	r3, [r7, #16]
 8104148:	1ad3      	subs	r3, r2, r3
 810414a:	2b05      	cmp	r3, #5
 810414c:	d928      	bls.n	81041a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	2220      	movs	r2, #32
 8104152:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	2203      	movs	r2, #3
 8104158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 810415c:	2301      	movs	r3, #1
 810415e:	e244      	b.n	81045ea <HAL_DMA_Init+0x642>
 8104160:	40020010 	.word	0x40020010
 8104164:	40020028 	.word	0x40020028
 8104168:	40020040 	.word	0x40020040
 810416c:	40020058 	.word	0x40020058
 8104170:	40020070 	.word	0x40020070
 8104174:	40020088 	.word	0x40020088
 8104178:	400200a0 	.word	0x400200a0
 810417c:	400200b8 	.word	0x400200b8
 8104180:	40020410 	.word	0x40020410
 8104184:	40020428 	.word	0x40020428
 8104188:	40020440 	.word	0x40020440
 810418c:	40020458 	.word	0x40020458
 8104190:	40020470 	.word	0x40020470
 8104194:	40020488 	.word	0x40020488
 8104198:	400204a0 	.word	0x400204a0
 810419c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	f003 0301 	and.w	r3, r3, #1
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d1c8      	bne.n	8104140 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81041b6:	697a      	ldr	r2, [r7, #20]
 81041b8:	4b84      	ldr	r3, [pc, #528]	; (81043cc <HAL_DMA_Init+0x424>)
 81041ba:	4013      	ands	r3, r2
 81041bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81041c2:	687b      	ldr	r3, [r7, #4]
 81041c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81041c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	691b      	ldr	r3, [r3, #16]
 81041cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81041d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	699b      	ldr	r3, [r3, #24]
 81041d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81041de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	6a1b      	ldr	r3, [r3, #32]
 81041e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81041e6:	697a      	ldr	r2, [r7, #20]
 81041e8:	4313      	orrs	r3, r2
 81041ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041f0:	2b04      	cmp	r3, #4
 81041f2:	d107      	bne.n	8104204 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81041fc:	4313      	orrs	r3, r2
 81041fe:	697a      	ldr	r2, [r7, #20]
 8104200:	4313      	orrs	r3, r2
 8104202:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104204:	4b72      	ldr	r3, [pc, #456]	; (81043d0 <HAL_DMA_Init+0x428>)
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	0c1b      	lsrs	r3, r3, #16
 810420a:	041b      	lsls	r3, r3, #16
 810420c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104210:	d328      	bcc.n	8104264 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	685b      	ldr	r3, [r3, #4]
 8104216:	2b28      	cmp	r3, #40	; 0x28
 8104218:	d903      	bls.n	8104222 <HAL_DMA_Init+0x27a>
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	685b      	ldr	r3, [r3, #4]
 810421e:	2b2e      	cmp	r3, #46	; 0x2e
 8104220:	d917      	bls.n	8104252 <HAL_DMA_Init+0x2aa>
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	685b      	ldr	r3, [r3, #4]
 8104226:	2b3e      	cmp	r3, #62	; 0x3e
 8104228:	d903      	bls.n	8104232 <HAL_DMA_Init+0x28a>
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	685b      	ldr	r3, [r3, #4]
 810422e:	2b42      	cmp	r3, #66	; 0x42
 8104230:	d90f      	bls.n	8104252 <HAL_DMA_Init+0x2aa>
 8104232:	687b      	ldr	r3, [r7, #4]
 8104234:	685b      	ldr	r3, [r3, #4]
 8104236:	2b46      	cmp	r3, #70	; 0x46
 8104238:	d903      	bls.n	8104242 <HAL_DMA_Init+0x29a>
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	685b      	ldr	r3, [r3, #4]
 810423e:	2b48      	cmp	r3, #72	; 0x48
 8104240:	d907      	bls.n	8104252 <HAL_DMA_Init+0x2aa>
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	685b      	ldr	r3, [r3, #4]
 8104246:	2b4e      	cmp	r3, #78	; 0x4e
 8104248:	d905      	bls.n	8104256 <HAL_DMA_Init+0x2ae>
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	685b      	ldr	r3, [r3, #4]
 810424e:	2b52      	cmp	r3, #82	; 0x52
 8104250:	d801      	bhi.n	8104256 <HAL_DMA_Init+0x2ae>
 8104252:	2301      	movs	r3, #1
 8104254:	e000      	b.n	8104258 <HAL_DMA_Init+0x2b0>
 8104256:	2300      	movs	r3, #0
 8104258:	2b00      	cmp	r3, #0
 810425a:	d003      	beq.n	8104264 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 810425c:	697b      	ldr	r3, [r7, #20]
 810425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104262:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	681b      	ldr	r3, [r3, #0]
 8104268:	697a      	ldr	r2, [r7, #20]
 810426a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	681b      	ldr	r3, [r3, #0]
 8104270:	695b      	ldr	r3, [r3, #20]
 8104272:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8104274:	697b      	ldr	r3, [r7, #20]
 8104276:	f023 0307 	bic.w	r3, r3, #7
 810427a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104280:	697a      	ldr	r2, [r7, #20]
 8104282:	4313      	orrs	r3, r2
 8104284:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810428a:	2b04      	cmp	r3, #4
 810428c:	d117      	bne.n	81042be <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104292:	697a      	ldr	r2, [r7, #20]
 8104294:	4313      	orrs	r3, r2
 8104296:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810429c:	2b00      	cmp	r3, #0
 810429e:	d00e      	beq.n	81042be <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81042a0:	6878      	ldr	r0, [r7, #4]
 81042a2:	f002 fb3d 	bl	8106920 <DMA_CheckFifoParam>
 81042a6:	4603      	mov	r3, r0
 81042a8:	2b00      	cmp	r3, #0
 81042aa:	d008      	beq.n	81042be <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	2240      	movs	r2, #64	; 0x40
 81042b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81042b2:	687b      	ldr	r3, [r7, #4]
 81042b4:	2201      	movs	r2, #1
 81042b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81042ba:	2301      	movs	r3, #1
 81042bc:	e195      	b.n	81045ea <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	697a      	ldr	r2, [r7, #20]
 81042c4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81042c6:	6878      	ldr	r0, [r7, #4]
 81042c8:	f002 fa78 	bl	81067bc <DMA_CalcBaseAndBitshift>
 81042cc:	4603      	mov	r3, r0
 81042ce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042d4:	f003 031f 	and.w	r3, r3, #31
 81042d8:	223f      	movs	r2, #63	; 0x3f
 81042da:	409a      	lsls	r2, r3
 81042dc:	68bb      	ldr	r3, [r7, #8]
 81042de:	609a      	str	r2, [r3, #8]
 81042e0:	e0cb      	b.n	810447a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	681b      	ldr	r3, [r3, #0]
 81042e6:	4a3b      	ldr	r2, [pc, #236]	; (81043d4 <HAL_DMA_Init+0x42c>)
 81042e8:	4293      	cmp	r3, r2
 81042ea:	d022      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	4a39      	ldr	r2, [pc, #228]	; (81043d8 <HAL_DMA_Init+0x430>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d01d      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	4a38      	ldr	r2, [pc, #224]	; (81043dc <HAL_DMA_Init+0x434>)
 81042fc:	4293      	cmp	r3, r2
 81042fe:	d018      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	4a36      	ldr	r2, [pc, #216]	; (81043e0 <HAL_DMA_Init+0x438>)
 8104306:	4293      	cmp	r3, r2
 8104308:	d013      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	4a35      	ldr	r2, [pc, #212]	; (81043e4 <HAL_DMA_Init+0x43c>)
 8104310:	4293      	cmp	r3, r2
 8104312:	d00e      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a33      	ldr	r2, [pc, #204]	; (81043e8 <HAL_DMA_Init+0x440>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d009      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	4a32      	ldr	r2, [pc, #200]	; (81043ec <HAL_DMA_Init+0x444>)
 8104324:	4293      	cmp	r3, r2
 8104326:	d004      	beq.n	8104332 <HAL_DMA_Init+0x38a>
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	4a30      	ldr	r2, [pc, #192]	; (81043f0 <HAL_DMA_Init+0x448>)
 810432e:	4293      	cmp	r3, r2
 8104330:	d101      	bne.n	8104336 <HAL_DMA_Init+0x38e>
 8104332:	2301      	movs	r3, #1
 8104334:	e000      	b.n	8104338 <HAL_DMA_Init+0x390>
 8104336:	2300      	movs	r3, #0
 8104338:	2b00      	cmp	r3, #0
 810433a:	f000 8095 	beq.w	8104468 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a24      	ldr	r2, [pc, #144]	; (81043d4 <HAL_DMA_Init+0x42c>)
 8104344:	4293      	cmp	r3, r2
 8104346:	d021      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	4a22      	ldr	r2, [pc, #136]	; (81043d8 <HAL_DMA_Init+0x430>)
 810434e:	4293      	cmp	r3, r2
 8104350:	d01c      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	4a21      	ldr	r2, [pc, #132]	; (81043dc <HAL_DMA_Init+0x434>)
 8104358:	4293      	cmp	r3, r2
 810435a:	d017      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	4a1f      	ldr	r2, [pc, #124]	; (81043e0 <HAL_DMA_Init+0x438>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d012      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	4a1e      	ldr	r2, [pc, #120]	; (81043e4 <HAL_DMA_Init+0x43c>)
 810436c:	4293      	cmp	r3, r2
 810436e:	d00d      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	4a1c      	ldr	r2, [pc, #112]	; (81043e8 <HAL_DMA_Init+0x440>)
 8104376:	4293      	cmp	r3, r2
 8104378:	d008      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	4a1b      	ldr	r2, [pc, #108]	; (81043ec <HAL_DMA_Init+0x444>)
 8104380:	4293      	cmp	r3, r2
 8104382:	d003      	beq.n	810438c <HAL_DMA_Init+0x3e4>
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a19      	ldr	r2, [pc, #100]	; (81043f0 <HAL_DMA_Init+0x448>)
 810438a:	4293      	cmp	r3, r2
 810438c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	2200      	movs	r2, #0
 8104392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	2202      	movs	r2, #2
 810439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81043a6:	697b      	ldr	r3, [r7, #20]
 81043a8:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81043ac:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81043b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	689b      	ldr	r3, [r3, #8]
 81043b6:	2b40      	cmp	r3, #64	; 0x40
 81043b8:	d01c      	beq.n	81043f4 <HAL_DMA_Init+0x44c>
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	689b      	ldr	r3, [r3, #8]
 81043be:	2b80      	cmp	r3, #128	; 0x80
 81043c0:	d102      	bne.n	81043c8 <HAL_DMA_Init+0x420>
 81043c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81043c6:	e016      	b.n	81043f6 <HAL_DMA_Init+0x44e>
 81043c8:	2300      	movs	r3, #0
 81043ca:	e014      	b.n	81043f6 <HAL_DMA_Init+0x44e>
 81043cc:	fe10803f 	.word	0xfe10803f
 81043d0:	5c001000 	.word	0x5c001000
 81043d4:	58025408 	.word	0x58025408
 81043d8:	5802541c 	.word	0x5802541c
 81043dc:	58025430 	.word	0x58025430
 81043e0:	58025444 	.word	0x58025444
 81043e4:	58025458 	.word	0x58025458
 81043e8:	5802546c 	.word	0x5802546c
 81043ec:	58025480 	.word	0x58025480
 81043f0:	58025494 	.word	0x58025494
 81043f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81043f6:	687a      	ldr	r2, [r7, #4]
 81043f8:	68d2      	ldr	r2, [r2, #12]
 81043fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81043fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	691b      	ldr	r3, [r3, #16]
 8104402:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104404:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	695b      	ldr	r3, [r3, #20]
 810440a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810440c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	699b      	ldr	r3, [r3, #24]
 8104412:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	69db      	ldr	r3, [r3, #28]
 810441a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810441c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	6a1b      	ldr	r3, [r3, #32]
 8104422:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104424:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104426:	697a      	ldr	r2, [r7, #20]
 8104428:	4313      	orrs	r3, r2
 810442a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 810442c:	687b      	ldr	r3, [r7, #4]
 810442e:	681b      	ldr	r3, [r3, #0]
 8104430:	697a      	ldr	r2, [r7, #20]
 8104432:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	461a      	mov	r2, r3
 810443a:	4b6e      	ldr	r3, [pc, #440]	; (81045f4 <HAL_DMA_Init+0x64c>)
 810443c:	4413      	add	r3, r2
 810443e:	4a6e      	ldr	r2, [pc, #440]	; (81045f8 <HAL_DMA_Init+0x650>)
 8104440:	fba2 2303 	umull	r2, r3, r2, r3
 8104444:	091b      	lsrs	r3, r3, #4
 8104446:	009a      	lsls	r2, r3, #2
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810444c:	6878      	ldr	r0, [r7, #4]
 810444e:	f002 f9b5 	bl	81067bc <DMA_CalcBaseAndBitshift>
 8104452:	4603      	mov	r3, r0
 8104454:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810445a:	f003 031f 	and.w	r3, r3, #31
 810445e:	2201      	movs	r2, #1
 8104460:	409a      	lsls	r2, r3
 8104462:	68fb      	ldr	r3, [r7, #12]
 8104464:	605a      	str	r2, [r3, #4]
 8104466:	e008      	b.n	810447a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	2240      	movs	r2, #64	; 0x40
 810446c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	2203      	movs	r2, #3
 8104472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8104476:	2301      	movs	r3, #1
 8104478:	e0b7      	b.n	81045ea <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	4a5f      	ldr	r2, [pc, #380]	; (81045fc <HAL_DMA_Init+0x654>)
 8104480:	4293      	cmp	r3, r2
 8104482:	d072      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	4a5d      	ldr	r2, [pc, #372]	; (8104600 <HAL_DMA_Init+0x658>)
 810448a:	4293      	cmp	r3, r2
 810448c:	d06d      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4a5c      	ldr	r2, [pc, #368]	; (8104604 <HAL_DMA_Init+0x65c>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d068      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	4a5a      	ldr	r2, [pc, #360]	; (8104608 <HAL_DMA_Init+0x660>)
 810449e:	4293      	cmp	r3, r2
 81044a0:	d063      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4a59      	ldr	r2, [pc, #356]	; (810460c <HAL_DMA_Init+0x664>)
 81044a8:	4293      	cmp	r3, r2
 81044aa:	d05e      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	4a57      	ldr	r2, [pc, #348]	; (8104610 <HAL_DMA_Init+0x668>)
 81044b2:	4293      	cmp	r3, r2
 81044b4:	d059      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	4a56      	ldr	r2, [pc, #344]	; (8104614 <HAL_DMA_Init+0x66c>)
 81044bc:	4293      	cmp	r3, r2
 81044be:	d054      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	4a54      	ldr	r2, [pc, #336]	; (8104618 <HAL_DMA_Init+0x670>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d04f      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	4a53      	ldr	r2, [pc, #332]	; (810461c <HAL_DMA_Init+0x674>)
 81044d0:	4293      	cmp	r3, r2
 81044d2:	d04a      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	4a51      	ldr	r2, [pc, #324]	; (8104620 <HAL_DMA_Init+0x678>)
 81044da:	4293      	cmp	r3, r2
 81044dc:	d045      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	4a50      	ldr	r2, [pc, #320]	; (8104624 <HAL_DMA_Init+0x67c>)
 81044e4:	4293      	cmp	r3, r2
 81044e6:	d040      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	4a4e      	ldr	r2, [pc, #312]	; (8104628 <HAL_DMA_Init+0x680>)
 81044ee:	4293      	cmp	r3, r2
 81044f0:	d03b      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	4a4d      	ldr	r2, [pc, #308]	; (810462c <HAL_DMA_Init+0x684>)
 81044f8:	4293      	cmp	r3, r2
 81044fa:	d036      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	4a4b      	ldr	r2, [pc, #300]	; (8104630 <HAL_DMA_Init+0x688>)
 8104502:	4293      	cmp	r3, r2
 8104504:	d031      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104506:	687b      	ldr	r3, [r7, #4]
 8104508:	681b      	ldr	r3, [r3, #0]
 810450a:	4a4a      	ldr	r2, [pc, #296]	; (8104634 <HAL_DMA_Init+0x68c>)
 810450c:	4293      	cmp	r3, r2
 810450e:	d02c      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	681b      	ldr	r3, [r3, #0]
 8104514:	4a48      	ldr	r2, [pc, #288]	; (8104638 <HAL_DMA_Init+0x690>)
 8104516:	4293      	cmp	r3, r2
 8104518:	d027      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	4a47      	ldr	r2, [pc, #284]	; (810463c <HAL_DMA_Init+0x694>)
 8104520:	4293      	cmp	r3, r2
 8104522:	d022      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	4a45      	ldr	r2, [pc, #276]	; (8104640 <HAL_DMA_Init+0x698>)
 810452a:	4293      	cmp	r3, r2
 810452c:	d01d      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	4a44      	ldr	r2, [pc, #272]	; (8104644 <HAL_DMA_Init+0x69c>)
 8104534:	4293      	cmp	r3, r2
 8104536:	d018      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104538:	687b      	ldr	r3, [r7, #4]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	4a42      	ldr	r2, [pc, #264]	; (8104648 <HAL_DMA_Init+0x6a0>)
 810453e:	4293      	cmp	r3, r2
 8104540:	d013      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	4a41      	ldr	r2, [pc, #260]	; (810464c <HAL_DMA_Init+0x6a4>)
 8104548:	4293      	cmp	r3, r2
 810454a:	d00e      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	4a3f      	ldr	r2, [pc, #252]	; (8104650 <HAL_DMA_Init+0x6a8>)
 8104552:	4293      	cmp	r3, r2
 8104554:	d009      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	4a3e      	ldr	r2, [pc, #248]	; (8104654 <HAL_DMA_Init+0x6ac>)
 810455c:	4293      	cmp	r3, r2
 810455e:	d004      	beq.n	810456a <HAL_DMA_Init+0x5c2>
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	4a3c      	ldr	r2, [pc, #240]	; (8104658 <HAL_DMA_Init+0x6b0>)
 8104566:	4293      	cmp	r3, r2
 8104568:	d101      	bne.n	810456e <HAL_DMA_Init+0x5c6>
 810456a:	2301      	movs	r3, #1
 810456c:	e000      	b.n	8104570 <HAL_DMA_Init+0x5c8>
 810456e:	2300      	movs	r3, #0
 8104570:	2b00      	cmp	r3, #0
 8104572:	d032      	beq.n	81045da <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8104574:	6878      	ldr	r0, [r7, #4]
 8104576:	f002 fa4f 	bl	8106a18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	689b      	ldr	r3, [r3, #8]
 810457e:	2b80      	cmp	r3, #128	; 0x80
 8104580:	d102      	bne.n	8104588 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	2200      	movs	r2, #0
 8104586:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	685a      	ldr	r2, [r3, #4]
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104590:	b2d2      	uxtb	r2, r2
 8104592:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104598:	687a      	ldr	r2, [r7, #4]
 810459a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810459c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	685b      	ldr	r3, [r3, #4]
 81045a2:	2b00      	cmp	r3, #0
 81045a4:	d010      	beq.n	81045c8 <HAL_DMA_Init+0x620>
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	685b      	ldr	r3, [r3, #4]
 81045aa:	2b08      	cmp	r3, #8
 81045ac:	d80c      	bhi.n	81045c8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81045ae:	6878      	ldr	r0, [r7, #4]
 81045b0:	f002 facc 	bl	8106b4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81045b8:	2200      	movs	r2, #0
 81045ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81045c0:	687a      	ldr	r2, [r7, #4]
 81045c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81045c4:	605a      	str	r2, [r3, #4]
 81045c6:	e008      	b.n	81045da <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	2200      	movs	r2, #0
 81045cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	2200      	movs	r2, #0
 81045d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	2200      	movs	r2, #0
 81045d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	2200      	movs	r2, #0
 81045de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	2201      	movs	r2, #1
 81045e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81045e8:	2300      	movs	r3, #0
}
 81045ea:	4618      	mov	r0, r3
 81045ec:	3718      	adds	r7, #24
 81045ee:	46bd      	mov	sp, r7
 81045f0:	bd80      	pop	{r7, pc}
 81045f2:	bf00      	nop
 81045f4:	a7fdabf8 	.word	0xa7fdabf8
 81045f8:	cccccccd 	.word	0xcccccccd
 81045fc:	40020010 	.word	0x40020010
 8104600:	40020028 	.word	0x40020028
 8104604:	40020040 	.word	0x40020040
 8104608:	40020058 	.word	0x40020058
 810460c:	40020070 	.word	0x40020070
 8104610:	40020088 	.word	0x40020088
 8104614:	400200a0 	.word	0x400200a0
 8104618:	400200b8 	.word	0x400200b8
 810461c:	40020410 	.word	0x40020410
 8104620:	40020428 	.word	0x40020428
 8104624:	40020440 	.word	0x40020440
 8104628:	40020458 	.word	0x40020458
 810462c:	40020470 	.word	0x40020470
 8104630:	40020488 	.word	0x40020488
 8104634:	400204a0 	.word	0x400204a0
 8104638:	400204b8 	.word	0x400204b8
 810463c:	58025408 	.word	0x58025408
 8104640:	5802541c 	.word	0x5802541c
 8104644:	58025430 	.word	0x58025430
 8104648:	58025444 	.word	0x58025444
 810464c:	58025458 	.word	0x58025458
 8104650:	5802546c 	.word	0x5802546c
 8104654:	58025480 	.word	0x58025480
 8104658:	58025494 	.word	0x58025494

0810465c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810465c:	b580      	push	{r7, lr}
 810465e:	b086      	sub	sp, #24
 8104660:	af00      	add	r7, sp, #0
 8104662:	60f8      	str	r0, [r7, #12]
 8104664:	60b9      	str	r1, [r7, #8]
 8104666:	607a      	str	r2, [r7, #4]
 8104668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810466a:	2300      	movs	r3, #0
 810466c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	2b00      	cmp	r3, #0
 8104672:	d101      	bne.n	8104678 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8104674:	2301      	movs	r3, #1
 8104676:	e226      	b.n	8104ac6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104678:	68fb      	ldr	r3, [r7, #12]
 810467a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810467e:	2b01      	cmp	r3, #1
 8104680:	d101      	bne.n	8104686 <HAL_DMA_Start_IT+0x2a>
 8104682:	2302      	movs	r3, #2
 8104684:	e21f      	b.n	8104ac6 <HAL_DMA_Start_IT+0x46a>
 8104686:	68fb      	ldr	r3, [r7, #12]
 8104688:	2201      	movs	r2, #1
 810468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 810468e:	68fb      	ldr	r3, [r7, #12]
 8104690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104694:	b2db      	uxtb	r3, r3
 8104696:	2b01      	cmp	r3, #1
 8104698:	f040 820a 	bne.w	8104ab0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810469c:	68fb      	ldr	r3, [r7, #12]
 810469e:	2202      	movs	r2, #2
 81046a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81046a4:	68fb      	ldr	r3, [r7, #12]
 81046a6:	2200      	movs	r2, #0
 81046a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	4a68      	ldr	r2, [pc, #416]	; (8104850 <HAL_DMA_Start_IT+0x1f4>)
 81046b0:	4293      	cmp	r3, r2
 81046b2:	d04a      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	4a66      	ldr	r2, [pc, #408]	; (8104854 <HAL_DMA_Start_IT+0x1f8>)
 81046ba:	4293      	cmp	r3, r2
 81046bc:	d045      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	681b      	ldr	r3, [r3, #0]
 81046c2:	4a65      	ldr	r2, [pc, #404]	; (8104858 <HAL_DMA_Start_IT+0x1fc>)
 81046c4:	4293      	cmp	r3, r2
 81046c6:	d040      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046c8:	68fb      	ldr	r3, [r7, #12]
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	4a63      	ldr	r2, [pc, #396]	; (810485c <HAL_DMA_Start_IT+0x200>)
 81046ce:	4293      	cmp	r3, r2
 81046d0:	d03b      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	681b      	ldr	r3, [r3, #0]
 81046d6:	4a62      	ldr	r2, [pc, #392]	; (8104860 <HAL_DMA_Start_IT+0x204>)
 81046d8:	4293      	cmp	r3, r2
 81046da:	d036      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	4a60      	ldr	r2, [pc, #384]	; (8104864 <HAL_DMA_Start_IT+0x208>)
 81046e2:	4293      	cmp	r3, r2
 81046e4:	d031      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	681b      	ldr	r3, [r3, #0]
 81046ea:	4a5f      	ldr	r2, [pc, #380]	; (8104868 <HAL_DMA_Start_IT+0x20c>)
 81046ec:	4293      	cmp	r3, r2
 81046ee:	d02c      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046f0:	68fb      	ldr	r3, [r7, #12]
 81046f2:	681b      	ldr	r3, [r3, #0]
 81046f4:	4a5d      	ldr	r2, [pc, #372]	; (810486c <HAL_DMA_Start_IT+0x210>)
 81046f6:	4293      	cmp	r3, r2
 81046f8:	d027      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	4a5c      	ldr	r2, [pc, #368]	; (8104870 <HAL_DMA_Start_IT+0x214>)
 8104700:	4293      	cmp	r3, r2
 8104702:	d022      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	4a5a      	ldr	r2, [pc, #360]	; (8104874 <HAL_DMA_Start_IT+0x218>)
 810470a:	4293      	cmp	r3, r2
 810470c:	d01d      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 810470e:	68fb      	ldr	r3, [r7, #12]
 8104710:	681b      	ldr	r3, [r3, #0]
 8104712:	4a59      	ldr	r2, [pc, #356]	; (8104878 <HAL_DMA_Start_IT+0x21c>)
 8104714:	4293      	cmp	r3, r2
 8104716:	d018      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	4a57      	ldr	r2, [pc, #348]	; (810487c <HAL_DMA_Start_IT+0x220>)
 810471e:	4293      	cmp	r3, r2
 8104720:	d013      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	4a56      	ldr	r2, [pc, #344]	; (8104880 <HAL_DMA_Start_IT+0x224>)
 8104728:	4293      	cmp	r3, r2
 810472a:	d00e      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	4a54      	ldr	r2, [pc, #336]	; (8104884 <HAL_DMA_Start_IT+0x228>)
 8104732:	4293      	cmp	r3, r2
 8104734:	d009      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	4a53      	ldr	r2, [pc, #332]	; (8104888 <HAL_DMA_Start_IT+0x22c>)
 810473c:	4293      	cmp	r3, r2
 810473e:	d004      	beq.n	810474a <HAL_DMA_Start_IT+0xee>
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	4a51      	ldr	r2, [pc, #324]	; (810488c <HAL_DMA_Start_IT+0x230>)
 8104746:	4293      	cmp	r3, r2
 8104748:	d108      	bne.n	810475c <HAL_DMA_Start_IT+0x100>
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	681b      	ldr	r3, [r3, #0]
 810474e:	681a      	ldr	r2, [r3, #0]
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	f022 0201 	bic.w	r2, r2, #1
 8104758:	601a      	str	r2, [r3, #0]
 810475a:	e007      	b.n	810476c <HAL_DMA_Start_IT+0x110>
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	681a      	ldr	r2, [r3, #0]
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	f022 0201 	bic.w	r2, r2, #1
 810476a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810476c:	683b      	ldr	r3, [r7, #0]
 810476e:	687a      	ldr	r2, [r7, #4]
 8104770:	68b9      	ldr	r1, [r7, #8]
 8104772:	68f8      	ldr	r0, [r7, #12]
 8104774:	f001 fe76 	bl	8106464 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104778:	68fb      	ldr	r3, [r7, #12]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a34      	ldr	r2, [pc, #208]	; (8104850 <HAL_DMA_Start_IT+0x1f4>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d04a      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 8104782:	68fb      	ldr	r3, [r7, #12]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a33      	ldr	r2, [pc, #204]	; (8104854 <HAL_DMA_Start_IT+0x1f8>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d045      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 810478c:	68fb      	ldr	r3, [r7, #12]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a31      	ldr	r2, [pc, #196]	; (8104858 <HAL_DMA_Start_IT+0x1fc>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d040      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 8104796:	68fb      	ldr	r3, [r7, #12]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a30      	ldr	r2, [pc, #192]	; (810485c <HAL_DMA_Start_IT+0x200>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d03b      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047a0:	68fb      	ldr	r3, [r7, #12]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4a2e      	ldr	r2, [pc, #184]	; (8104860 <HAL_DMA_Start_IT+0x204>)
 81047a6:	4293      	cmp	r3, r2
 81047a8:	d036      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047aa:	68fb      	ldr	r3, [r7, #12]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	4a2d      	ldr	r2, [pc, #180]	; (8104864 <HAL_DMA_Start_IT+0x208>)
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d031      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047b4:	68fb      	ldr	r3, [r7, #12]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a2b      	ldr	r2, [pc, #172]	; (8104868 <HAL_DMA_Start_IT+0x20c>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d02c      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047be:	68fb      	ldr	r3, [r7, #12]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a2a      	ldr	r2, [pc, #168]	; (810486c <HAL_DMA_Start_IT+0x210>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d027      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047c8:	68fb      	ldr	r3, [r7, #12]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a28      	ldr	r2, [pc, #160]	; (8104870 <HAL_DMA_Start_IT+0x214>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d022      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047d2:	68fb      	ldr	r3, [r7, #12]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a27      	ldr	r2, [pc, #156]	; (8104874 <HAL_DMA_Start_IT+0x218>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d01d      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047dc:	68fb      	ldr	r3, [r7, #12]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a25      	ldr	r2, [pc, #148]	; (8104878 <HAL_DMA_Start_IT+0x21c>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d018      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	4a24      	ldr	r2, [pc, #144]	; (810487c <HAL_DMA_Start_IT+0x220>)
 81047ec:	4293      	cmp	r3, r2
 81047ee:	d013      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047f0:	68fb      	ldr	r3, [r7, #12]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	4a22      	ldr	r2, [pc, #136]	; (8104880 <HAL_DMA_Start_IT+0x224>)
 81047f6:	4293      	cmp	r3, r2
 81047f8:	d00e      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 81047fa:	68fb      	ldr	r3, [r7, #12]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	4a21      	ldr	r2, [pc, #132]	; (8104884 <HAL_DMA_Start_IT+0x228>)
 8104800:	4293      	cmp	r3, r2
 8104802:	d009      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	4a1f      	ldr	r2, [pc, #124]	; (8104888 <HAL_DMA_Start_IT+0x22c>)
 810480a:	4293      	cmp	r3, r2
 810480c:	d004      	beq.n	8104818 <HAL_DMA_Start_IT+0x1bc>
 810480e:	68fb      	ldr	r3, [r7, #12]
 8104810:	681b      	ldr	r3, [r3, #0]
 8104812:	4a1e      	ldr	r2, [pc, #120]	; (810488c <HAL_DMA_Start_IT+0x230>)
 8104814:	4293      	cmp	r3, r2
 8104816:	d101      	bne.n	810481c <HAL_DMA_Start_IT+0x1c0>
 8104818:	2301      	movs	r3, #1
 810481a:	e000      	b.n	810481e <HAL_DMA_Start_IT+0x1c2>
 810481c:	2300      	movs	r3, #0
 810481e:	2b00      	cmp	r3, #0
 8104820:	d036      	beq.n	8104890 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104822:	68fb      	ldr	r3, [r7, #12]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	f023 021e 	bic.w	r2, r3, #30
 810482c:	68fb      	ldr	r3, [r7, #12]
 810482e:	681b      	ldr	r3, [r3, #0]
 8104830:	f042 0216 	orr.w	r2, r2, #22
 8104834:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104836:	68fb      	ldr	r3, [r7, #12]
 8104838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810483a:	2b00      	cmp	r3, #0
 810483c:	d03e      	beq.n	81048bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810483e:	68fb      	ldr	r3, [r7, #12]
 8104840:	681b      	ldr	r3, [r3, #0]
 8104842:	681a      	ldr	r2, [r3, #0]
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	f042 0208 	orr.w	r2, r2, #8
 810484c:	601a      	str	r2, [r3, #0]
 810484e:	e035      	b.n	81048bc <HAL_DMA_Start_IT+0x260>
 8104850:	40020010 	.word	0x40020010
 8104854:	40020028 	.word	0x40020028
 8104858:	40020040 	.word	0x40020040
 810485c:	40020058 	.word	0x40020058
 8104860:	40020070 	.word	0x40020070
 8104864:	40020088 	.word	0x40020088
 8104868:	400200a0 	.word	0x400200a0
 810486c:	400200b8 	.word	0x400200b8
 8104870:	40020410 	.word	0x40020410
 8104874:	40020428 	.word	0x40020428
 8104878:	40020440 	.word	0x40020440
 810487c:	40020458 	.word	0x40020458
 8104880:	40020470 	.word	0x40020470
 8104884:	40020488 	.word	0x40020488
 8104888:	400204a0 	.word	0x400204a0
 810488c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	f023 020e 	bic.w	r2, r3, #14
 810489a:	68fb      	ldr	r3, [r7, #12]
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	f042 020a 	orr.w	r2, r2, #10
 81048a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81048a4:	68fb      	ldr	r3, [r7, #12]
 81048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81048a8:	2b00      	cmp	r3, #0
 81048aa:	d007      	beq.n	81048bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 81048ac:	68fb      	ldr	r3, [r7, #12]
 81048ae:	681b      	ldr	r3, [r3, #0]
 81048b0:	681a      	ldr	r2, [r3, #0]
 81048b2:	68fb      	ldr	r3, [r7, #12]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	f042 0204 	orr.w	r2, r2, #4
 81048ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81048bc:	68fb      	ldr	r3, [r7, #12]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	4a83      	ldr	r2, [pc, #524]	; (8104ad0 <HAL_DMA_Start_IT+0x474>)
 81048c2:	4293      	cmp	r3, r2
 81048c4:	d072      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	681b      	ldr	r3, [r3, #0]
 81048ca:	4a82      	ldr	r2, [pc, #520]	; (8104ad4 <HAL_DMA_Start_IT+0x478>)
 81048cc:	4293      	cmp	r3, r2
 81048ce:	d06d      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81048d0:	68fb      	ldr	r3, [r7, #12]
 81048d2:	681b      	ldr	r3, [r3, #0]
 81048d4:	4a80      	ldr	r2, [pc, #512]	; (8104ad8 <HAL_DMA_Start_IT+0x47c>)
 81048d6:	4293      	cmp	r3, r2
 81048d8:	d068      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81048da:	68fb      	ldr	r3, [r7, #12]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	4a7f      	ldr	r2, [pc, #508]	; (8104adc <HAL_DMA_Start_IT+0x480>)
 81048e0:	4293      	cmp	r3, r2
 81048e2:	d063      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81048e4:	68fb      	ldr	r3, [r7, #12]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	4a7d      	ldr	r2, [pc, #500]	; (8104ae0 <HAL_DMA_Start_IT+0x484>)
 81048ea:	4293      	cmp	r3, r2
 81048ec:	d05e      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81048ee:	68fb      	ldr	r3, [r7, #12]
 81048f0:	681b      	ldr	r3, [r3, #0]
 81048f2:	4a7c      	ldr	r2, [pc, #496]	; (8104ae4 <HAL_DMA_Start_IT+0x488>)
 81048f4:	4293      	cmp	r3, r2
 81048f6:	d059      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81048f8:	68fb      	ldr	r3, [r7, #12]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	4a7a      	ldr	r2, [pc, #488]	; (8104ae8 <HAL_DMA_Start_IT+0x48c>)
 81048fe:	4293      	cmp	r3, r2
 8104900:	d054      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104902:	68fb      	ldr	r3, [r7, #12]
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	4a79      	ldr	r2, [pc, #484]	; (8104aec <HAL_DMA_Start_IT+0x490>)
 8104908:	4293      	cmp	r3, r2
 810490a:	d04f      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	4a77      	ldr	r2, [pc, #476]	; (8104af0 <HAL_DMA_Start_IT+0x494>)
 8104912:	4293      	cmp	r3, r2
 8104914:	d04a      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	4a76      	ldr	r2, [pc, #472]	; (8104af4 <HAL_DMA_Start_IT+0x498>)
 810491c:	4293      	cmp	r3, r2
 810491e:	d045      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	4a74      	ldr	r2, [pc, #464]	; (8104af8 <HAL_DMA_Start_IT+0x49c>)
 8104926:	4293      	cmp	r3, r2
 8104928:	d040      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 810492a:	68fb      	ldr	r3, [r7, #12]
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	4a73      	ldr	r2, [pc, #460]	; (8104afc <HAL_DMA_Start_IT+0x4a0>)
 8104930:	4293      	cmp	r3, r2
 8104932:	d03b      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104934:	68fb      	ldr	r3, [r7, #12]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	4a71      	ldr	r2, [pc, #452]	; (8104b00 <HAL_DMA_Start_IT+0x4a4>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d036      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 810493e:	68fb      	ldr	r3, [r7, #12]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a70      	ldr	r2, [pc, #448]	; (8104b04 <HAL_DMA_Start_IT+0x4a8>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d031      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104948:	68fb      	ldr	r3, [r7, #12]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	4a6e      	ldr	r2, [pc, #440]	; (8104b08 <HAL_DMA_Start_IT+0x4ac>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d02c      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	4a6d      	ldr	r2, [pc, #436]	; (8104b0c <HAL_DMA_Start_IT+0x4b0>)
 8104958:	4293      	cmp	r3, r2
 810495a:	d027      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	4a6b      	ldr	r2, [pc, #428]	; (8104b10 <HAL_DMA_Start_IT+0x4b4>)
 8104962:	4293      	cmp	r3, r2
 8104964:	d022      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104966:	68fb      	ldr	r3, [r7, #12]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	4a6a      	ldr	r2, [pc, #424]	; (8104b14 <HAL_DMA_Start_IT+0x4b8>)
 810496c:	4293      	cmp	r3, r2
 810496e:	d01d      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104970:	68fb      	ldr	r3, [r7, #12]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	4a68      	ldr	r2, [pc, #416]	; (8104b18 <HAL_DMA_Start_IT+0x4bc>)
 8104976:	4293      	cmp	r3, r2
 8104978:	d018      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 810497a:	68fb      	ldr	r3, [r7, #12]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	4a67      	ldr	r2, [pc, #412]	; (8104b1c <HAL_DMA_Start_IT+0x4c0>)
 8104980:	4293      	cmp	r3, r2
 8104982:	d013      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	4a65      	ldr	r2, [pc, #404]	; (8104b20 <HAL_DMA_Start_IT+0x4c4>)
 810498a:	4293      	cmp	r3, r2
 810498c:	d00e      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 810498e:	68fb      	ldr	r3, [r7, #12]
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	4a64      	ldr	r2, [pc, #400]	; (8104b24 <HAL_DMA_Start_IT+0x4c8>)
 8104994:	4293      	cmp	r3, r2
 8104996:	d009      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 8104998:	68fb      	ldr	r3, [r7, #12]
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	4a62      	ldr	r2, [pc, #392]	; (8104b28 <HAL_DMA_Start_IT+0x4cc>)
 810499e:	4293      	cmp	r3, r2
 81049a0:	d004      	beq.n	81049ac <HAL_DMA_Start_IT+0x350>
 81049a2:	68fb      	ldr	r3, [r7, #12]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	4a61      	ldr	r2, [pc, #388]	; (8104b2c <HAL_DMA_Start_IT+0x4d0>)
 81049a8:	4293      	cmp	r3, r2
 81049aa:	d101      	bne.n	81049b0 <HAL_DMA_Start_IT+0x354>
 81049ac:	2301      	movs	r3, #1
 81049ae:	e000      	b.n	81049b2 <HAL_DMA_Start_IT+0x356>
 81049b0:	2300      	movs	r3, #0
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d01a      	beq.n	81049ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81049b6:	68fb      	ldr	r3, [r7, #12]
 81049b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81049c0:	2b00      	cmp	r3, #0
 81049c2:	d007      	beq.n	81049d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81049c4:	68fb      	ldr	r3, [r7, #12]
 81049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81049c8:	681a      	ldr	r2, [r3, #0]
 81049ca:	68fb      	ldr	r3, [r7, #12]
 81049cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81049ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81049d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049d8:	2b00      	cmp	r3, #0
 81049da:	d007      	beq.n	81049ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049e0:	681a      	ldr	r2, [r3, #0]
 81049e2:	68fb      	ldr	r3, [r7, #12]
 81049e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81049e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81049ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 81049ec:	68fb      	ldr	r3, [r7, #12]
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	4a37      	ldr	r2, [pc, #220]	; (8104ad0 <HAL_DMA_Start_IT+0x474>)
 81049f2:	4293      	cmp	r3, r2
 81049f4:	d04a      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	681b      	ldr	r3, [r3, #0]
 81049fa:	4a36      	ldr	r2, [pc, #216]	; (8104ad4 <HAL_DMA_Start_IT+0x478>)
 81049fc:	4293      	cmp	r3, r2
 81049fe:	d045      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	4a34      	ldr	r2, [pc, #208]	; (8104ad8 <HAL_DMA_Start_IT+0x47c>)
 8104a06:	4293      	cmp	r3, r2
 8104a08:	d040      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a0a:	68fb      	ldr	r3, [r7, #12]
 8104a0c:	681b      	ldr	r3, [r3, #0]
 8104a0e:	4a33      	ldr	r2, [pc, #204]	; (8104adc <HAL_DMA_Start_IT+0x480>)
 8104a10:	4293      	cmp	r3, r2
 8104a12:	d03b      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	681b      	ldr	r3, [r3, #0]
 8104a18:	4a31      	ldr	r2, [pc, #196]	; (8104ae0 <HAL_DMA_Start_IT+0x484>)
 8104a1a:	4293      	cmp	r3, r2
 8104a1c:	d036      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a1e:	68fb      	ldr	r3, [r7, #12]
 8104a20:	681b      	ldr	r3, [r3, #0]
 8104a22:	4a30      	ldr	r2, [pc, #192]	; (8104ae4 <HAL_DMA_Start_IT+0x488>)
 8104a24:	4293      	cmp	r3, r2
 8104a26:	d031      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	4a2e      	ldr	r2, [pc, #184]	; (8104ae8 <HAL_DMA_Start_IT+0x48c>)
 8104a2e:	4293      	cmp	r3, r2
 8104a30:	d02c      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a32:	68fb      	ldr	r3, [r7, #12]
 8104a34:	681b      	ldr	r3, [r3, #0]
 8104a36:	4a2d      	ldr	r2, [pc, #180]	; (8104aec <HAL_DMA_Start_IT+0x490>)
 8104a38:	4293      	cmp	r3, r2
 8104a3a:	d027      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a3c:	68fb      	ldr	r3, [r7, #12]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	4a2b      	ldr	r2, [pc, #172]	; (8104af0 <HAL_DMA_Start_IT+0x494>)
 8104a42:	4293      	cmp	r3, r2
 8104a44:	d022      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	4a2a      	ldr	r2, [pc, #168]	; (8104af4 <HAL_DMA_Start_IT+0x498>)
 8104a4c:	4293      	cmp	r3, r2
 8104a4e:	d01d      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a50:	68fb      	ldr	r3, [r7, #12]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	4a28      	ldr	r2, [pc, #160]	; (8104af8 <HAL_DMA_Start_IT+0x49c>)
 8104a56:	4293      	cmp	r3, r2
 8104a58:	d018      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	681b      	ldr	r3, [r3, #0]
 8104a5e:	4a27      	ldr	r2, [pc, #156]	; (8104afc <HAL_DMA_Start_IT+0x4a0>)
 8104a60:	4293      	cmp	r3, r2
 8104a62:	d013      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a64:	68fb      	ldr	r3, [r7, #12]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	4a25      	ldr	r2, [pc, #148]	; (8104b00 <HAL_DMA_Start_IT+0x4a4>)
 8104a6a:	4293      	cmp	r3, r2
 8104a6c:	d00e      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	4a24      	ldr	r2, [pc, #144]	; (8104b04 <HAL_DMA_Start_IT+0x4a8>)
 8104a74:	4293      	cmp	r3, r2
 8104a76:	d009      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	4a22      	ldr	r2, [pc, #136]	; (8104b08 <HAL_DMA_Start_IT+0x4ac>)
 8104a7e:	4293      	cmp	r3, r2
 8104a80:	d004      	beq.n	8104a8c <HAL_DMA_Start_IT+0x430>
 8104a82:	68fb      	ldr	r3, [r7, #12]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	4a21      	ldr	r2, [pc, #132]	; (8104b0c <HAL_DMA_Start_IT+0x4b0>)
 8104a88:	4293      	cmp	r3, r2
 8104a8a:	d108      	bne.n	8104a9e <HAL_DMA_Start_IT+0x442>
 8104a8c:	68fb      	ldr	r3, [r7, #12]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	681a      	ldr	r2, [r3, #0]
 8104a92:	68fb      	ldr	r3, [r7, #12]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	f042 0201 	orr.w	r2, r2, #1
 8104a9a:	601a      	str	r2, [r3, #0]
 8104a9c:	e012      	b.n	8104ac4 <HAL_DMA_Start_IT+0x468>
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	681a      	ldr	r2, [r3, #0]
 8104aa4:	68fb      	ldr	r3, [r7, #12]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	f042 0201 	orr.w	r2, r2, #1
 8104aac:	601a      	str	r2, [r3, #0]
 8104aae:	e009      	b.n	8104ac4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	2200      	movs	r2, #0
 8104ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104abe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104ac0:	2301      	movs	r3, #1
 8104ac2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8104ac6:	4618      	mov	r0, r3
 8104ac8:	3718      	adds	r7, #24
 8104aca:	46bd      	mov	sp, r7
 8104acc:	bd80      	pop	{r7, pc}
 8104ace:	bf00      	nop
 8104ad0:	40020010 	.word	0x40020010
 8104ad4:	40020028 	.word	0x40020028
 8104ad8:	40020040 	.word	0x40020040
 8104adc:	40020058 	.word	0x40020058
 8104ae0:	40020070 	.word	0x40020070
 8104ae4:	40020088 	.word	0x40020088
 8104ae8:	400200a0 	.word	0x400200a0
 8104aec:	400200b8 	.word	0x400200b8
 8104af0:	40020410 	.word	0x40020410
 8104af4:	40020428 	.word	0x40020428
 8104af8:	40020440 	.word	0x40020440
 8104afc:	40020458 	.word	0x40020458
 8104b00:	40020470 	.word	0x40020470
 8104b04:	40020488 	.word	0x40020488
 8104b08:	400204a0 	.word	0x400204a0
 8104b0c:	400204b8 	.word	0x400204b8
 8104b10:	58025408 	.word	0x58025408
 8104b14:	5802541c 	.word	0x5802541c
 8104b18:	58025430 	.word	0x58025430
 8104b1c:	58025444 	.word	0x58025444
 8104b20:	58025458 	.word	0x58025458
 8104b24:	5802546c 	.word	0x5802546c
 8104b28:	58025480 	.word	0x58025480
 8104b2c:	58025494 	.word	0x58025494

08104b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104b30:	b580      	push	{r7, lr}
 8104b32:	b086      	sub	sp, #24
 8104b34:	af00      	add	r7, sp, #0
 8104b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104b38:	f7fe fdf0 	bl	810371c <HAL_GetTick>
 8104b3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d101      	bne.n	8104b48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104b44:	2301      	movs	r3, #1
 8104b46:	e2dc      	b.n	8105102 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104b48:	687b      	ldr	r3, [r7, #4]
 8104b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104b4e:	b2db      	uxtb	r3, r3
 8104b50:	2b02      	cmp	r3, #2
 8104b52:	d008      	beq.n	8104b66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	2280      	movs	r2, #128	; 0x80
 8104b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	2200      	movs	r2, #0
 8104b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104b62:	2301      	movs	r3, #1
 8104b64:	e2cd      	b.n	8105102 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	681b      	ldr	r3, [r3, #0]
 8104b6a:	4a76      	ldr	r2, [pc, #472]	; (8104d44 <HAL_DMA_Abort+0x214>)
 8104b6c:	4293      	cmp	r3, r2
 8104b6e:	d04a      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	681b      	ldr	r3, [r3, #0]
 8104b74:	4a74      	ldr	r2, [pc, #464]	; (8104d48 <HAL_DMA_Abort+0x218>)
 8104b76:	4293      	cmp	r3, r2
 8104b78:	d045      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	4a73      	ldr	r2, [pc, #460]	; (8104d4c <HAL_DMA_Abort+0x21c>)
 8104b80:	4293      	cmp	r3, r2
 8104b82:	d040      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	4a71      	ldr	r2, [pc, #452]	; (8104d50 <HAL_DMA_Abort+0x220>)
 8104b8a:	4293      	cmp	r3, r2
 8104b8c:	d03b      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104b8e:	687b      	ldr	r3, [r7, #4]
 8104b90:	681b      	ldr	r3, [r3, #0]
 8104b92:	4a70      	ldr	r2, [pc, #448]	; (8104d54 <HAL_DMA_Abort+0x224>)
 8104b94:	4293      	cmp	r3, r2
 8104b96:	d036      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104b98:	687b      	ldr	r3, [r7, #4]
 8104b9a:	681b      	ldr	r3, [r3, #0]
 8104b9c:	4a6e      	ldr	r2, [pc, #440]	; (8104d58 <HAL_DMA_Abort+0x228>)
 8104b9e:	4293      	cmp	r3, r2
 8104ba0:	d031      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	4a6d      	ldr	r2, [pc, #436]	; (8104d5c <HAL_DMA_Abort+0x22c>)
 8104ba8:	4293      	cmp	r3, r2
 8104baa:	d02c      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	4a6b      	ldr	r2, [pc, #428]	; (8104d60 <HAL_DMA_Abort+0x230>)
 8104bb2:	4293      	cmp	r3, r2
 8104bb4:	d027      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	4a6a      	ldr	r2, [pc, #424]	; (8104d64 <HAL_DMA_Abort+0x234>)
 8104bbc:	4293      	cmp	r3, r2
 8104bbe:	d022      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	4a68      	ldr	r2, [pc, #416]	; (8104d68 <HAL_DMA_Abort+0x238>)
 8104bc6:	4293      	cmp	r3, r2
 8104bc8:	d01d      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	4a67      	ldr	r2, [pc, #412]	; (8104d6c <HAL_DMA_Abort+0x23c>)
 8104bd0:	4293      	cmp	r3, r2
 8104bd2:	d018      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	4a65      	ldr	r2, [pc, #404]	; (8104d70 <HAL_DMA_Abort+0x240>)
 8104bda:	4293      	cmp	r3, r2
 8104bdc:	d013      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	681b      	ldr	r3, [r3, #0]
 8104be2:	4a64      	ldr	r2, [pc, #400]	; (8104d74 <HAL_DMA_Abort+0x244>)
 8104be4:	4293      	cmp	r3, r2
 8104be6:	d00e      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	681b      	ldr	r3, [r3, #0]
 8104bec:	4a62      	ldr	r2, [pc, #392]	; (8104d78 <HAL_DMA_Abort+0x248>)
 8104bee:	4293      	cmp	r3, r2
 8104bf0:	d009      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	681b      	ldr	r3, [r3, #0]
 8104bf6:	4a61      	ldr	r2, [pc, #388]	; (8104d7c <HAL_DMA_Abort+0x24c>)
 8104bf8:	4293      	cmp	r3, r2
 8104bfa:	d004      	beq.n	8104c06 <HAL_DMA_Abort+0xd6>
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	4a5f      	ldr	r2, [pc, #380]	; (8104d80 <HAL_DMA_Abort+0x250>)
 8104c02:	4293      	cmp	r3, r2
 8104c04:	d101      	bne.n	8104c0a <HAL_DMA_Abort+0xda>
 8104c06:	2301      	movs	r3, #1
 8104c08:	e000      	b.n	8104c0c <HAL_DMA_Abort+0xdc>
 8104c0a:	2300      	movs	r3, #0
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d013      	beq.n	8104c38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104c10:	687b      	ldr	r3, [r7, #4]
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	681a      	ldr	r2, [r3, #0]
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	f022 021e 	bic.w	r2, r2, #30
 8104c1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	695a      	ldr	r2, [r3, #20]
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104c2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	617b      	str	r3, [r7, #20]
 8104c36:	e00a      	b.n	8104c4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	681a      	ldr	r2, [r3, #0]
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	f022 020e 	bic.w	r2, r2, #14
 8104c46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	4a3c      	ldr	r2, [pc, #240]	; (8104d44 <HAL_DMA_Abort+0x214>)
 8104c54:	4293      	cmp	r3, r2
 8104c56:	d072      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	4a3a      	ldr	r2, [pc, #232]	; (8104d48 <HAL_DMA_Abort+0x218>)
 8104c5e:	4293      	cmp	r3, r2
 8104c60:	d06d      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	4a39      	ldr	r2, [pc, #228]	; (8104d4c <HAL_DMA_Abort+0x21c>)
 8104c68:	4293      	cmp	r3, r2
 8104c6a:	d068      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	681b      	ldr	r3, [r3, #0]
 8104c70:	4a37      	ldr	r2, [pc, #220]	; (8104d50 <HAL_DMA_Abort+0x220>)
 8104c72:	4293      	cmp	r3, r2
 8104c74:	d063      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	4a36      	ldr	r2, [pc, #216]	; (8104d54 <HAL_DMA_Abort+0x224>)
 8104c7c:	4293      	cmp	r3, r2
 8104c7e:	d05e      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	4a34      	ldr	r2, [pc, #208]	; (8104d58 <HAL_DMA_Abort+0x228>)
 8104c86:	4293      	cmp	r3, r2
 8104c88:	d059      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	4a33      	ldr	r2, [pc, #204]	; (8104d5c <HAL_DMA_Abort+0x22c>)
 8104c90:	4293      	cmp	r3, r2
 8104c92:	d054      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	681b      	ldr	r3, [r3, #0]
 8104c98:	4a31      	ldr	r2, [pc, #196]	; (8104d60 <HAL_DMA_Abort+0x230>)
 8104c9a:	4293      	cmp	r3, r2
 8104c9c:	d04f      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	4a30      	ldr	r2, [pc, #192]	; (8104d64 <HAL_DMA_Abort+0x234>)
 8104ca4:	4293      	cmp	r3, r2
 8104ca6:	d04a      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	4a2e      	ldr	r2, [pc, #184]	; (8104d68 <HAL_DMA_Abort+0x238>)
 8104cae:	4293      	cmp	r3, r2
 8104cb0:	d045      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	681b      	ldr	r3, [r3, #0]
 8104cb6:	4a2d      	ldr	r2, [pc, #180]	; (8104d6c <HAL_DMA_Abort+0x23c>)
 8104cb8:	4293      	cmp	r3, r2
 8104cba:	d040      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	4a2b      	ldr	r2, [pc, #172]	; (8104d70 <HAL_DMA_Abort+0x240>)
 8104cc2:	4293      	cmp	r3, r2
 8104cc4:	d03b      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	681b      	ldr	r3, [r3, #0]
 8104cca:	4a2a      	ldr	r2, [pc, #168]	; (8104d74 <HAL_DMA_Abort+0x244>)
 8104ccc:	4293      	cmp	r3, r2
 8104cce:	d036      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	681b      	ldr	r3, [r3, #0]
 8104cd4:	4a28      	ldr	r2, [pc, #160]	; (8104d78 <HAL_DMA_Abort+0x248>)
 8104cd6:	4293      	cmp	r3, r2
 8104cd8:	d031      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	681b      	ldr	r3, [r3, #0]
 8104cde:	4a27      	ldr	r2, [pc, #156]	; (8104d7c <HAL_DMA_Abort+0x24c>)
 8104ce0:	4293      	cmp	r3, r2
 8104ce2:	d02c      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	681b      	ldr	r3, [r3, #0]
 8104ce8:	4a25      	ldr	r2, [pc, #148]	; (8104d80 <HAL_DMA_Abort+0x250>)
 8104cea:	4293      	cmp	r3, r2
 8104cec:	d027      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	681b      	ldr	r3, [r3, #0]
 8104cf2:	4a24      	ldr	r2, [pc, #144]	; (8104d84 <HAL_DMA_Abort+0x254>)
 8104cf4:	4293      	cmp	r3, r2
 8104cf6:	d022      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	4a22      	ldr	r2, [pc, #136]	; (8104d88 <HAL_DMA_Abort+0x258>)
 8104cfe:	4293      	cmp	r3, r2
 8104d00:	d01d      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	4a21      	ldr	r2, [pc, #132]	; (8104d8c <HAL_DMA_Abort+0x25c>)
 8104d08:	4293      	cmp	r3, r2
 8104d0a:	d018      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	681b      	ldr	r3, [r3, #0]
 8104d10:	4a1f      	ldr	r2, [pc, #124]	; (8104d90 <HAL_DMA_Abort+0x260>)
 8104d12:	4293      	cmp	r3, r2
 8104d14:	d013      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	4a1e      	ldr	r2, [pc, #120]	; (8104d94 <HAL_DMA_Abort+0x264>)
 8104d1c:	4293      	cmp	r3, r2
 8104d1e:	d00e      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	681b      	ldr	r3, [r3, #0]
 8104d24:	4a1c      	ldr	r2, [pc, #112]	; (8104d98 <HAL_DMA_Abort+0x268>)
 8104d26:	4293      	cmp	r3, r2
 8104d28:	d009      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	681b      	ldr	r3, [r3, #0]
 8104d2e:	4a1b      	ldr	r2, [pc, #108]	; (8104d9c <HAL_DMA_Abort+0x26c>)
 8104d30:	4293      	cmp	r3, r2
 8104d32:	d004      	beq.n	8104d3e <HAL_DMA_Abort+0x20e>
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	4a19      	ldr	r2, [pc, #100]	; (8104da0 <HAL_DMA_Abort+0x270>)
 8104d3a:	4293      	cmp	r3, r2
 8104d3c:	d132      	bne.n	8104da4 <HAL_DMA_Abort+0x274>
 8104d3e:	2301      	movs	r3, #1
 8104d40:	e031      	b.n	8104da6 <HAL_DMA_Abort+0x276>
 8104d42:	bf00      	nop
 8104d44:	40020010 	.word	0x40020010
 8104d48:	40020028 	.word	0x40020028
 8104d4c:	40020040 	.word	0x40020040
 8104d50:	40020058 	.word	0x40020058
 8104d54:	40020070 	.word	0x40020070
 8104d58:	40020088 	.word	0x40020088
 8104d5c:	400200a0 	.word	0x400200a0
 8104d60:	400200b8 	.word	0x400200b8
 8104d64:	40020410 	.word	0x40020410
 8104d68:	40020428 	.word	0x40020428
 8104d6c:	40020440 	.word	0x40020440
 8104d70:	40020458 	.word	0x40020458
 8104d74:	40020470 	.word	0x40020470
 8104d78:	40020488 	.word	0x40020488
 8104d7c:	400204a0 	.word	0x400204a0
 8104d80:	400204b8 	.word	0x400204b8
 8104d84:	58025408 	.word	0x58025408
 8104d88:	5802541c 	.word	0x5802541c
 8104d8c:	58025430 	.word	0x58025430
 8104d90:	58025444 	.word	0x58025444
 8104d94:	58025458 	.word	0x58025458
 8104d98:	5802546c 	.word	0x5802546c
 8104d9c:	58025480 	.word	0x58025480
 8104da0:	58025494 	.word	0x58025494
 8104da4:	2300      	movs	r3, #0
 8104da6:	2b00      	cmp	r3, #0
 8104da8:	d007      	beq.n	8104dba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104dae:	681a      	ldr	r2, [r3, #0]
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	4a6d      	ldr	r2, [pc, #436]	; (8104f74 <HAL_DMA_Abort+0x444>)
 8104dc0:	4293      	cmp	r3, r2
 8104dc2:	d04a      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	4a6b      	ldr	r2, [pc, #428]	; (8104f78 <HAL_DMA_Abort+0x448>)
 8104dca:	4293      	cmp	r3, r2
 8104dcc:	d045      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	681b      	ldr	r3, [r3, #0]
 8104dd2:	4a6a      	ldr	r2, [pc, #424]	; (8104f7c <HAL_DMA_Abort+0x44c>)
 8104dd4:	4293      	cmp	r3, r2
 8104dd6:	d040      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	4a68      	ldr	r2, [pc, #416]	; (8104f80 <HAL_DMA_Abort+0x450>)
 8104dde:	4293      	cmp	r3, r2
 8104de0:	d03b      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	681b      	ldr	r3, [r3, #0]
 8104de6:	4a67      	ldr	r2, [pc, #412]	; (8104f84 <HAL_DMA_Abort+0x454>)
 8104de8:	4293      	cmp	r3, r2
 8104dea:	d036      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	4a65      	ldr	r2, [pc, #404]	; (8104f88 <HAL_DMA_Abort+0x458>)
 8104df2:	4293      	cmp	r3, r2
 8104df4:	d031      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	4a64      	ldr	r2, [pc, #400]	; (8104f8c <HAL_DMA_Abort+0x45c>)
 8104dfc:	4293      	cmp	r3, r2
 8104dfe:	d02c      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	4a62      	ldr	r2, [pc, #392]	; (8104f90 <HAL_DMA_Abort+0x460>)
 8104e06:	4293      	cmp	r3, r2
 8104e08:	d027      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	4a61      	ldr	r2, [pc, #388]	; (8104f94 <HAL_DMA_Abort+0x464>)
 8104e10:	4293      	cmp	r3, r2
 8104e12:	d022      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	4a5f      	ldr	r2, [pc, #380]	; (8104f98 <HAL_DMA_Abort+0x468>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d01d      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a5e      	ldr	r2, [pc, #376]	; (8104f9c <HAL_DMA_Abort+0x46c>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d018      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a5c      	ldr	r2, [pc, #368]	; (8104fa0 <HAL_DMA_Abort+0x470>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d013      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a5b      	ldr	r2, [pc, #364]	; (8104fa4 <HAL_DMA_Abort+0x474>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d00e      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	4a59      	ldr	r2, [pc, #356]	; (8104fa8 <HAL_DMA_Abort+0x478>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d009      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	4a58      	ldr	r2, [pc, #352]	; (8104fac <HAL_DMA_Abort+0x47c>)
 8104e4c:	4293      	cmp	r3, r2
 8104e4e:	d004      	beq.n	8104e5a <HAL_DMA_Abort+0x32a>
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	4a56      	ldr	r2, [pc, #344]	; (8104fb0 <HAL_DMA_Abort+0x480>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d108      	bne.n	8104e6c <HAL_DMA_Abort+0x33c>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	681a      	ldr	r2, [r3, #0]
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	f022 0201 	bic.w	r2, r2, #1
 8104e68:	601a      	str	r2, [r3, #0]
 8104e6a:	e007      	b.n	8104e7c <HAL_DMA_Abort+0x34c>
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	681a      	ldr	r2, [r3, #0]
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	f022 0201 	bic.w	r2, r2, #1
 8104e7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104e7c:	e013      	b.n	8104ea6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104e7e:	f7fe fc4d 	bl	810371c <HAL_GetTick>
 8104e82:	4602      	mov	r2, r0
 8104e84:	693b      	ldr	r3, [r7, #16]
 8104e86:	1ad3      	subs	r3, r2, r3
 8104e88:	2b05      	cmp	r3, #5
 8104e8a:	d90c      	bls.n	8104ea6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	2220      	movs	r2, #32
 8104e90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	2200      	movs	r2, #0
 8104e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	2203      	movs	r2, #3
 8104e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104ea2:	2301      	movs	r3, #1
 8104ea4:	e12d      	b.n	8105102 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104ea6:	697b      	ldr	r3, [r7, #20]
 8104ea8:	681b      	ldr	r3, [r3, #0]
 8104eaa:	f003 0301 	and.w	r3, r3, #1
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d1e5      	bne.n	8104e7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	4a2f      	ldr	r2, [pc, #188]	; (8104f74 <HAL_DMA_Abort+0x444>)
 8104eb8:	4293      	cmp	r3, r2
 8104eba:	d04a      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	681b      	ldr	r3, [r3, #0]
 8104ec0:	4a2d      	ldr	r2, [pc, #180]	; (8104f78 <HAL_DMA_Abort+0x448>)
 8104ec2:	4293      	cmp	r3, r2
 8104ec4:	d045      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	681b      	ldr	r3, [r3, #0]
 8104eca:	4a2c      	ldr	r2, [pc, #176]	; (8104f7c <HAL_DMA_Abort+0x44c>)
 8104ecc:	4293      	cmp	r3, r2
 8104ece:	d040      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104ed0:	687b      	ldr	r3, [r7, #4]
 8104ed2:	681b      	ldr	r3, [r3, #0]
 8104ed4:	4a2a      	ldr	r2, [pc, #168]	; (8104f80 <HAL_DMA_Abort+0x450>)
 8104ed6:	4293      	cmp	r3, r2
 8104ed8:	d03b      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104eda:	687b      	ldr	r3, [r7, #4]
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	4a29      	ldr	r2, [pc, #164]	; (8104f84 <HAL_DMA_Abort+0x454>)
 8104ee0:	4293      	cmp	r3, r2
 8104ee2:	d036      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	4a27      	ldr	r2, [pc, #156]	; (8104f88 <HAL_DMA_Abort+0x458>)
 8104eea:	4293      	cmp	r3, r2
 8104eec:	d031      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	4a26      	ldr	r2, [pc, #152]	; (8104f8c <HAL_DMA_Abort+0x45c>)
 8104ef4:	4293      	cmp	r3, r2
 8104ef6:	d02c      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104ef8:	687b      	ldr	r3, [r7, #4]
 8104efa:	681b      	ldr	r3, [r3, #0]
 8104efc:	4a24      	ldr	r2, [pc, #144]	; (8104f90 <HAL_DMA_Abort+0x460>)
 8104efe:	4293      	cmp	r3, r2
 8104f00:	d027      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	4a23      	ldr	r2, [pc, #140]	; (8104f94 <HAL_DMA_Abort+0x464>)
 8104f08:	4293      	cmp	r3, r2
 8104f0a:	d022      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	681b      	ldr	r3, [r3, #0]
 8104f10:	4a21      	ldr	r2, [pc, #132]	; (8104f98 <HAL_DMA_Abort+0x468>)
 8104f12:	4293      	cmp	r3, r2
 8104f14:	d01d      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	4a20      	ldr	r2, [pc, #128]	; (8104f9c <HAL_DMA_Abort+0x46c>)
 8104f1c:	4293      	cmp	r3, r2
 8104f1e:	d018      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	4a1e      	ldr	r2, [pc, #120]	; (8104fa0 <HAL_DMA_Abort+0x470>)
 8104f26:	4293      	cmp	r3, r2
 8104f28:	d013      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	4a1d      	ldr	r2, [pc, #116]	; (8104fa4 <HAL_DMA_Abort+0x474>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d00e      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	4a1b      	ldr	r2, [pc, #108]	; (8104fa8 <HAL_DMA_Abort+0x478>)
 8104f3a:	4293      	cmp	r3, r2
 8104f3c:	d009      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	4a1a      	ldr	r2, [pc, #104]	; (8104fac <HAL_DMA_Abort+0x47c>)
 8104f44:	4293      	cmp	r3, r2
 8104f46:	d004      	beq.n	8104f52 <HAL_DMA_Abort+0x422>
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	4a18      	ldr	r2, [pc, #96]	; (8104fb0 <HAL_DMA_Abort+0x480>)
 8104f4e:	4293      	cmp	r3, r2
 8104f50:	d101      	bne.n	8104f56 <HAL_DMA_Abort+0x426>
 8104f52:	2301      	movs	r3, #1
 8104f54:	e000      	b.n	8104f58 <HAL_DMA_Abort+0x428>
 8104f56:	2300      	movs	r3, #0
 8104f58:	2b00      	cmp	r3, #0
 8104f5a:	d02b      	beq.n	8104fb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104f62:	687b      	ldr	r3, [r7, #4]
 8104f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f66:	f003 031f 	and.w	r3, r3, #31
 8104f6a:	223f      	movs	r2, #63	; 0x3f
 8104f6c:	409a      	lsls	r2, r3
 8104f6e:	68bb      	ldr	r3, [r7, #8]
 8104f70:	609a      	str	r2, [r3, #8]
 8104f72:	e02a      	b.n	8104fca <HAL_DMA_Abort+0x49a>
 8104f74:	40020010 	.word	0x40020010
 8104f78:	40020028 	.word	0x40020028
 8104f7c:	40020040 	.word	0x40020040
 8104f80:	40020058 	.word	0x40020058
 8104f84:	40020070 	.word	0x40020070
 8104f88:	40020088 	.word	0x40020088
 8104f8c:	400200a0 	.word	0x400200a0
 8104f90:	400200b8 	.word	0x400200b8
 8104f94:	40020410 	.word	0x40020410
 8104f98:	40020428 	.word	0x40020428
 8104f9c:	40020440 	.word	0x40020440
 8104fa0:	40020458 	.word	0x40020458
 8104fa4:	40020470 	.word	0x40020470
 8104fa8:	40020488 	.word	0x40020488
 8104fac:	400204a0 	.word	0x400204a0
 8104fb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104fba:	687b      	ldr	r3, [r7, #4]
 8104fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fbe:	f003 031f 	and.w	r3, r3, #31
 8104fc2:	2201      	movs	r2, #1
 8104fc4:	409a      	lsls	r2, r3
 8104fc6:	68fb      	ldr	r3, [r7, #12]
 8104fc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	681b      	ldr	r3, [r3, #0]
 8104fce:	4a4f      	ldr	r2, [pc, #316]	; (810510c <HAL_DMA_Abort+0x5dc>)
 8104fd0:	4293      	cmp	r3, r2
 8104fd2:	d072      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	4a4d      	ldr	r2, [pc, #308]	; (8105110 <HAL_DMA_Abort+0x5e0>)
 8104fda:	4293      	cmp	r3, r2
 8104fdc:	d06d      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4a4c      	ldr	r2, [pc, #304]	; (8105114 <HAL_DMA_Abort+0x5e4>)
 8104fe4:	4293      	cmp	r3, r2
 8104fe6:	d068      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	4a4a      	ldr	r2, [pc, #296]	; (8105118 <HAL_DMA_Abort+0x5e8>)
 8104fee:	4293      	cmp	r3, r2
 8104ff0:	d063      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	4a49      	ldr	r2, [pc, #292]	; (810511c <HAL_DMA_Abort+0x5ec>)
 8104ff8:	4293      	cmp	r3, r2
 8104ffa:	d05e      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	4a47      	ldr	r2, [pc, #284]	; (8105120 <HAL_DMA_Abort+0x5f0>)
 8105002:	4293      	cmp	r3, r2
 8105004:	d059      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	4a46      	ldr	r2, [pc, #280]	; (8105124 <HAL_DMA_Abort+0x5f4>)
 810500c:	4293      	cmp	r3, r2
 810500e:	d054      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	4a44      	ldr	r2, [pc, #272]	; (8105128 <HAL_DMA_Abort+0x5f8>)
 8105016:	4293      	cmp	r3, r2
 8105018:	d04f      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	4a43      	ldr	r2, [pc, #268]	; (810512c <HAL_DMA_Abort+0x5fc>)
 8105020:	4293      	cmp	r3, r2
 8105022:	d04a      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	4a41      	ldr	r2, [pc, #260]	; (8105130 <HAL_DMA_Abort+0x600>)
 810502a:	4293      	cmp	r3, r2
 810502c:	d045      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	4a40      	ldr	r2, [pc, #256]	; (8105134 <HAL_DMA_Abort+0x604>)
 8105034:	4293      	cmp	r3, r2
 8105036:	d040      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	4a3e      	ldr	r2, [pc, #248]	; (8105138 <HAL_DMA_Abort+0x608>)
 810503e:	4293      	cmp	r3, r2
 8105040:	d03b      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4a3d      	ldr	r2, [pc, #244]	; (810513c <HAL_DMA_Abort+0x60c>)
 8105048:	4293      	cmp	r3, r2
 810504a:	d036      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	4a3b      	ldr	r2, [pc, #236]	; (8105140 <HAL_DMA_Abort+0x610>)
 8105052:	4293      	cmp	r3, r2
 8105054:	d031      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	4a3a      	ldr	r2, [pc, #232]	; (8105144 <HAL_DMA_Abort+0x614>)
 810505c:	4293      	cmp	r3, r2
 810505e:	d02c      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	4a38      	ldr	r2, [pc, #224]	; (8105148 <HAL_DMA_Abort+0x618>)
 8105066:	4293      	cmp	r3, r2
 8105068:	d027      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	4a37      	ldr	r2, [pc, #220]	; (810514c <HAL_DMA_Abort+0x61c>)
 8105070:	4293      	cmp	r3, r2
 8105072:	d022      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	4a35      	ldr	r2, [pc, #212]	; (8105150 <HAL_DMA_Abort+0x620>)
 810507a:	4293      	cmp	r3, r2
 810507c:	d01d      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	4a34      	ldr	r2, [pc, #208]	; (8105154 <HAL_DMA_Abort+0x624>)
 8105084:	4293      	cmp	r3, r2
 8105086:	d018      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	4a32      	ldr	r2, [pc, #200]	; (8105158 <HAL_DMA_Abort+0x628>)
 810508e:	4293      	cmp	r3, r2
 8105090:	d013      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	4a31      	ldr	r2, [pc, #196]	; (810515c <HAL_DMA_Abort+0x62c>)
 8105098:	4293      	cmp	r3, r2
 810509a:	d00e      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	4a2f      	ldr	r2, [pc, #188]	; (8105160 <HAL_DMA_Abort+0x630>)
 81050a2:	4293      	cmp	r3, r2
 81050a4:	d009      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	681b      	ldr	r3, [r3, #0]
 81050aa:	4a2e      	ldr	r2, [pc, #184]	; (8105164 <HAL_DMA_Abort+0x634>)
 81050ac:	4293      	cmp	r3, r2
 81050ae:	d004      	beq.n	81050ba <HAL_DMA_Abort+0x58a>
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	4a2c      	ldr	r2, [pc, #176]	; (8105168 <HAL_DMA_Abort+0x638>)
 81050b6:	4293      	cmp	r3, r2
 81050b8:	d101      	bne.n	81050be <HAL_DMA_Abort+0x58e>
 81050ba:	2301      	movs	r3, #1
 81050bc:	e000      	b.n	81050c0 <HAL_DMA_Abort+0x590>
 81050be:	2300      	movs	r3, #0
 81050c0:	2b00      	cmp	r3, #0
 81050c2:	d015      	beq.n	81050f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81050c8:	687a      	ldr	r2, [r7, #4]
 81050ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81050cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81050d2:	2b00      	cmp	r3, #0
 81050d4:	d00c      	beq.n	81050f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81050da:	681a      	ldr	r2, [r3, #0]
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81050e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81050e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81050ea:	687a      	ldr	r2, [r7, #4]
 81050ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81050ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	2200      	movs	r2, #0
 81050f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	2201      	movs	r2, #1
 81050fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8105100:	2300      	movs	r3, #0
}
 8105102:	4618      	mov	r0, r3
 8105104:	3718      	adds	r7, #24
 8105106:	46bd      	mov	sp, r7
 8105108:	bd80      	pop	{r7, pc}
 810510a:	bf00      	nop
 810510c:	40020010 	.word	0x40020010
 8105110:	40020028 	.word	0x40020028
 8105114:	40020040 	.word	0x40020040
 8105118:	40020058 	.word	0x40020058
 810511c:	40020070 	.word	0x40020070
 8105120:	40020088 	.word	0x40020088
 8105124:	400200a0 	.word	0x400200a0
 8105128:	400200b8 	.word	0x400200b8
 810512c:	40020410 	.word	0x40020410
 8105130:	40020428 	.word	0x40020428
 8105134:	40020440 	.word	0x40020440
 8105138:	40020458 	.word	0x40020458
 810513c:	40020470 	.word	0x40020470
 8105140:	40020488 	.word	0x40020488
 8105144:	400204a0 	.word	0x400204a0
 8105148:	400204b8 	.word	0x400204b8
 810514c:	58025408 	.word	0x58025408
 8105150:	5802541c 	.word	0x5802541c
 8105154:	58025430 	.word	0x58025430
 8105158:	58025444 	.word	0x58025444
 810515c:	58025458 	.word	0x58025458
 8105160:	5802546c 	.word	0x5802546c
 8105164:	58025480 	.word	0x58025480
 8105168:	58025494 	.word	0x58025494

0810516c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 810516c:	b580      	push	{r7, lr}
 810516e:	b084      	sub	sp, #16
 8105170:	af00      	add	r7, sp, #0
 8105172:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	2b00      	cmp	r3, #0
 8105178:	d101      	bne.n	810517e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810517a:	2301      	movs	r3, #1
 810517c:	e205      	b.n	810558a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105184:	b2db      	uxtb	r3, r3
 8105186:	2b02      	cmp	r3, #2
 8105188:	d004      	beq.n	8105194 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	2280      	movs	r2, #128	; 0x80
 810518e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8105190:	2301      	movs	r3, #1
 8105192:	e1fa      	b.n	810558a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	4a8c      	ldr	r2, [pc, #560]	; (81053cc <HAL_DMA_Abort_IT+0x260>)
 810519a:	4293      	cmp	r3, r2
 810519c:	d04a      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	681b      	ldr	r3, [r3, #0]
 81051a2:	4a8b      	ldr	r2, [pc, #556]	; (81053d0 <HAL_DMA_Abort_IT+0x264>)
 81051a4:	4293      	cmp	r3, r2
 81051a6:	d045      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	681b      	ldr	r3, [r3, #0]
 81051ac:	4a89      	ldr	r2, [pc, #548]	; (81053d4 <HAL_DMA_Abort_IT+0x268>)
 81051ae:	4293      	cmp	r3, r2
 81051b0:	d040      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051b2:	687b      	ldr	r3, [r7, #4]
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	4a88      	ldr	r2, [pc, #544]	; (81053d8 <HAL_DMA_Abort_IT+0x26c>)
 81051b8:	4293      	cmp	r3, r2
 81051ba:	d03b      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051bc:	687b      	ldr	r3, [r7, #4]
 81051be:	681b      	ldr	r3, [r3, #0]
 81051c0:	4a86      	ldr	r2, [pc, #536]	; (81053dc <HAL_DMA_Abort_IT+0x270>)
 81051c2:	4293      	cmp	r3, r2
 81051c4:	d036      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	681b      	ldr	r3, [r3, #0]
 81051ca:	4a85      	ldr	r2, [pc, #532]	; (81053e0 <HAL_DMA_Abort_IT+0x274>)
 81051cc:	4293      	cmp	r3, r2
 81051ce:	d031      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	4a83      	ldr	r2, [pc, #524]	; (81053e4 <HAL_DMA_Abort_IT+0x278>)
 81051d6:	4293      	cmp	r3, r2
 81051d8:	d02c      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	4a82      	ldr	r2, [pc, #520]	; (81053e8 <HAL_DMA_Abort_IT+0x27c>)
 81051e0:	4293      	cmp	r3, r2
 81051e2:	d027      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	4a80      	ldr	r2, [pc, #512]	; (81053ec <HAL_DMA_Abort_IT+0x280>)
 81051ea:	4293      	cmp	r3, r2
 81051ec:	d022      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	4a7f      	ldr	r2, [pc, #508]	; (81053f0 <HAL_DMA_Abort_IT+0x284>)
 81051f4:	4293      	cmp	r3, r2
 81051f6:	d01d      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	4a7d      	ldr	r2, [pc, #500]	; (81053f4 <HAL_DMA_Abort_IT+0x288>)
 81051fe:	4293      	cmp	r3, r2
 8105200:	d018      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	681b      	ldr	r3, [r3, #0]
 8105206:	4a7c      	ldr	r2, [pc, #496]	; (81053f8 <HAL_DMA_Abort_IT+0x28c>)
 8105208:	4293      	cmp	r3, r2
 810520a:	d013      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	681b      	ldr	r3, [r3, #0]
 8105210:	4a7a      	ldr	r2, [pc, #488]	; (81053fc <HAL_DMA_Abort_IT+0x290>)
 8105212:	4293      	cmp	r3, r2
 8105214:	d00e      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	681b      	ldr	r3, [r3, #0]
 810521a:	4a79      	ldr	r2, [pc, #484]	; (8105400 <HAL_DMA_Abort_IT+0x294>)
 810521c:	4293      	cmp	r3, r2
 810521e:	d009      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	4a77      	ldr	r2, [pc, #476]	; (8105404 <HAL_DMA_Abort_IT+0x298>)
 8105226:	4293      	cmp	r3, r2
 8105228:	d004      	beq.n	8105234 <HAL_DMA_Abort_IT+0xc8>
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	4a76      	ldr	r2, [pc, #472]	; (8105408 <HAL_DMA_Abort_IT+0x29c>)
 8105230:	4293      	cmp	r3, r2
 8105232:	d101      	bne.n	8105238 <HAL_DMA_Abort_IT+0xcc>
 8105234:	2301      	movs	r3, #1
 8105236:	e000      	b.n	810523a <HAL_DMA_Abort_IT+0xce>
 8105238:	2300      	movs	r3, #0
 810523a:	2b00      	cmp	r3, #0
 810523c:	d065      	beq.n	810530a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	2204      	movs	r2, #4
 8105242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	681b      	ldr	r3, [r3, #0]
 810524a:	4a60      	ldr	r2, [pc, #384]	; (81053cc <HAL_DMA_Abort_IT+0x260>)
 810524c:	4293      	cmp	r3, r2
 810524e:	d04a      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	681b      	ldr	r3, [r3, #0]
 8105254:	4a5e      	ldr	r2, [pc, #376]	; (81053d0 <HAL_DMA_Abort_IT+0x264>)
 8105256:	4293      	cmp	r3, r2
 8105258:	d045      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	4a5d      	ldr	r2, [pc, #372]	; (81053d4 <HAL_DMA_Abort_IT+0x268>)
 8105260:	4293      	cmp	r3, r2
 8105262:	d040      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	4a5b      	ldr	r2, [pc, #364]	; (81053d8 <HAL_DMA_Abort_IT+0x26c>)
 810526a:	4293      	cmp	r3, r2
 810526c:	d03b      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	681b      	ldr	r3, [r3, #0]
 8105272:	4a5a      	ldr	r2, [pc, #360]	; (81053dc <HAL_DMA_Abort_IT+0x270>)
 8105274:	4293      	cmp	r3, r2
 8105276:	d036      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	4a58      	ldr	r2, [pc, #352]	; (81053e0 <HAL_DMA_Abort_IT+0x274>)
 810527e:	4293      	cmp	r3, r2
 8105280:	d031      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	4a57      	ldr	r2, [pc, #348]	; (81053e4 <HAL_DMA_Abort_IT+0x278>)
 8105288:	4293      	cmp	r3, r2
 810528a:	d02c      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	681b      	ldr	r3, [r3, #0]
 8105290:	4a55      	ldr	r2, [pc, #340]	; (81053e8 <HAL_DMA_Abort_IT+0x27c>)
 8105292:	4293      	cmp	r3, r2
 8105294:	d027      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	681b      	ldr	r3, [r3, #0]
 810529a:	4a54      	ldr	r2, [pc, #336]	; (81053ec <HAL_DMA_Abort_IT+0x280>)
 810529c:	4293      	cmp	r3, r2
 810529e:	d022      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	681b      	ldr	r3, [r3, #0]
 81052a4:	4a52      	ldr	r2, [pc, #328]	; (81053f0 <HAL_DMA_Abort_IT+0x284>)
 81052a6:	4293      	cmp	r3, r2
 81052a8:	d01d      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	4a51      	ldr	r2, [pc, #324]	; (81053f4 <HAL_DMA_Abort_IT+0x288>)
 81052b0:	4293      	cmp	r3, r2
 81052b2:	d018      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	4a4f      	ldr	r2, [pc, #316]	; (81053f8 <HAL_DMA_Abort_IT+0x28c>)
 81052ba:	4293      	cmp	r3, r2
 81052bc:	d013      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	681b      	ldr	r3, [r3, #0]
 81052c2:	4a4e      	ldr	r2, [pc, #312]	; (81053fc <HAL_DMA_Abort_IT+0x290>)
 81052c4:	4293      	cmp	r3, r2
 81052c6:	d00e      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	4a4c      	ldr	r2, [pc, #304]	; (8105400 <HAL_DMA_Abort_IT+0x294>)
 81052ce:	4293      	cmp	r3, r2
 81052d0:	d009      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	681b      	ldr	r3, [r3, #0]
 81052d6:	4a4b      	ldr	r2, [pc, #300]	; (8105404 <HAL_DMA_Abort_IT+0x298>)
 81052d8:	4293      	cmp	r3, r2
 81052da:	d004      	beq.n	81052e6 <HAL_DMA_Abort_IT+0x17a>
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	681b      	ldr	r3, [r3, #0]
 81052e0:	4a49      	ldr	r2, [pc, #292]	; (8105408 <HAL_DMA_Abort_IT+0x29c>)
 81052e2:	4293      	cmp	r3, r2
 81052e4:	d108      	bne.n	81052f8 <HAL_DMA_Abort_IT+0x18c>
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	681b      	ldr	r3, [r3, #0]
 81052ea:	681a      	ldr	r2, [r3, #0]
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	f022 0201 	bic.w	r2, r2, #1
 81052f4:	601a      	str	r2, [r3, #0]
 81052f6:	e147      	b.n	8105588 <HAL_DMA_Abort_IT+0x41c>
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	681a      	ldr	r2, [r3, #0]
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	f022 0201 	bic.w	r2, r2, #1
 8105306:	601a      	str	r2, [r3, #0]
 8105308:	e13e      	b.n	8105588 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	681b      	ldr	r3, [r3, #0]
 810530e:	681a      	ldr	r2, [r3, #0]
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	f022 020e 	bic.w	r2, r2, #14
 8105318:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	681b      	ldr	r3, [r3, #0]
 810531e:	4a2b      	ldr	r2, [pc, #172]	; (81053cc <HAL_DMA_Abort_IT+0x260>)
 8105320:	4293      	cmp	r3, r2
 8105322:	d04a      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	4a29      	ldr	r2, [pc, #164]	; (81053d0 <HAL_DMA_Abort_IT+0x264>)
 810532a:	4293      	cmp	r3, r2
 810532c:	d045      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a28      	ldr	r2, [pc, #160]	; (81053d4 <HAL_DMA_Abort_IT+0x268>)
 8105334:	4293      	cmp	r3, r2
 8105336:	d040      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	4a26      	ldr	r2, [pc, #152]	; (81053d8 <HAL_DMA_Abort_IT+0x26c>)
 810533e:	4293      	cmp	r3, r2
 8105340:	d03b      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	4a25      	ldr	r2, [pc, #148]	; (81053dc <HAL_DMA_Abort_IT+0x270>)
 8105348:	4293      	cmp	r3, r2
 810534a:	d036      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	4a23      	ldr	r2, [pc, #140]	; (81053e0 <HAL_DMA_Abort_IT+0x274>)
 8105352:	4293      	cmp	r3, r2
 8105354:	d031      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	681b      	ldr	r3, [r3, #0]
 810535a:	4a22      	ldr	r2, [pc, #136]	; (81053e4 <HAL_DMA_Abort_IT+0x278>)
 810535c:	4293      	cmp	r3, r2
 810535e:	d02c      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	4a20      	ldr	r2, [pc, #128]	; (81053e8 <HAL_DMA_Abort_IT+0x27c>)
 8105366:	4293      	cmp	r3, r2
 8105368:	d027      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	4a1f      	ldr	r2, [pc, #124]	; (81053ec <HAL_DMA_Abort_IT+0x280>)
 8105370:	4293      	cmp	r3, r2
 8105372:	d022      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	4a1d      	ldr	r2, [pc, #116]	; (81053f0 <HAL_DMA_Abort_IT+0x284>)
 810537a:	4293      	cmp	r3, r2
 810537c:	d01d      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	4a1c      	ldr	r2, [pc, #112]	; (81053f4 <HAL_DMA_Abort_IT+0x288>)
 8105384:	4293      	cmp	r3, r2
 8105386:	d018      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	681b      	ldr	r3, [r3, #0]
 810538c:	4a1a      	ldr	r2, [pc, #104]	; (81053f8 <HAL_DMA_Abort_IT+0x28c>)
 810538e:	4293      	cmp	r3, r2
 8105390:	d013      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	4a19      	ldr	r2, [pc, #100]	; (81053fc <HAL_DMA_Abort_IT+0x290>)
 8105398:	4293      	cmp	r3, r2
 810539a:	d00e      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	4a17      	ldr	r2, [pc, #92]	; (8105400 <HAL_DMA_Abort_IT+0x294>)
 81053a2:	4293      	cmp	r3, r2
 81053a4:	d009      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	4a16      	ldr	r2, [pc, #88]	; (8105404 <HAL_DMA_Abort_IT+0x298>)
 81053ac:	4293      	cmp	r3, r2
 81053ae:	d004      	beq.n	81053ba <HAL_DMA_Abort_IT+0x24e>
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	4a14      	ldr	r2, [pc, #80]	; (8105408 <HAL_DMA_Abort_IT+0x29c>)
 81053b6:	4293      	cmp	r3, r2
 81053b8:	d128      	bne.n	810540c <HAL_DMA_Abort_IT+0x2a0>
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	681a      	ldr	r2, [r3, #0]
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	f022 0201 	bic.w	r2, r2, #1
 81053c8:	601a      	str	r2, [r3, #0]
 81053ca:	e027      	b.n	810541c <HAL_DMA_Abort_IT+0x2b0>
 81053cc:	40020010 	.word	0x40020010
 81053d0:	40020028 	.word	0x40020028
 81053d4:	40020040 	.word	0x40020040
 81053d8:	40020058 	.word	0x40020058
 81053dc:	40020070 	.word	0x40020070
 81053e0:	40020088 	.word	0x40020088
 81053e4:	400200a0 	.word	0x400200a0
 81053e8:	400200b8 	.word	0x400200b8
 81053ec:	40020410 	.word	0x40020410
 81053f0:	40020428 	.word	0x40020428
 81053f4:	40020440 	.word	0x40020440
 81053f8:	40020458 	.word	0x40020458
 81053fc:	40020470 	.word	0x40020470
 8105400:	40020488 	.word	0x40020488
 8105404:	400204a0 	.word	0x400204a0
 8105408:	400204b8 	.word	0x400204b8
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	681b      	ldr	r3, [r3, #0]
 8105410:	681a      	ldr	r2, [r3, #0]
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	f022 0201 	bic.w	r2, r2, #1
 810541a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	4a5c      	ldr	r2, [pc, #368]	; (8105594 <HAL_DMA_Abort_IT+0x428>)
 8105422:	4293      	cmp	r3, r2
 8105424:	d072      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	4a5b      	ldr	r2, [pc, #364]	; (8105598 <HAL_DMA_Abort_IT+0x42c>)
 810542c:	4293      	cmp	r3, r2
 810542e:	d06d      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	4a59      	ldr	r2, [pc, #356]	; (810559c <HAL_DMA_Abort_IT+0x430>)
 8105436:	4293      	cmp	r3, r2
 8105438:	d068      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	4a58      	ldr	r2, [pc, #352]	; (81055a0 <HAL_DMA_Abort_IT+0x434>)
 8105440:	4293      	cmp	r3, r2
 8105442:	d063      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	4a56      	ldr	r2, [pc, #344]	; (81055a4 <HAL_DMA_Abort_IT+0x438>)
 810544a:	4293      	cmp	r3, r2
 810544c:	d05e      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	4a55      	ldr	r2, [pc, #340]	; (81055a8 <HAL_DMA_Abort_IT+0x43c>)
 8105454:	4293      	cmp	r3, r2
 8105456:	d059      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	4a53      	ldr	r2, [pc, #332]	; (81055ac <HAL_DMA_Abort_IT+0x440>)
 810545e:	4293      	cmp	r3, r2
 8105460:	d054      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	4a52      	ldr	r2, [pc, #328]	; (81055b0 <HAL_DMA_Abort_IT+0x444>)
 8105468:	4293      	cmp	r3, r2
 810546a:	d04f      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	4a50      	ldr	r2, [pc, #320]	; (81055b4 <HAL_DMA_Abort_IT+0x448>)
 8105472:	4293      	cmp	r3, r2
 8105474:	d04a      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	681b      	ldr	r3, [r3, #0]
 810547a:	4a4f      	ldr	r2, [pc, #316]	; (81055b8 <HAL_DMA_Abort_IT+0x44c>)
 810547c:	4293      	cmp	r3, r2
 810547e:	d045      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	4a4d      	ldr	r2, [pc, #308]	; (81055bc <HAL_DMA_Abort_IT+0x450>)
 8105486:	4293      	cmp	r3, r2
 8105488:	d040      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	681b      	ldr	r3, [r3, #0]
 810548e:	4a4c      	ldr	r2, [pc, #304]	; (81055c0 <HAL_DMA_Abort_IT+0x454>)
 8105490:	4293      	cmp	r3, r2
 8105492:	d03b      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	4a4a      	ldr	r2, [pc, #296]	; (81055c4 <HAL_DMA_Abort_IT+0x458>)
 810549a:	4293      	cmp	r3, r2
 810549c:	d036      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	681b      	ldr	r3, [r3, #0]
 81054a2:	4a49      	ldr	r2, [pc, #292]	; (81055c8 <HAL_DMA_Abort_IT+0x45c>)
 81054a4:	4293      	cmp	r3, r2
 81054a6:	d031      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	4a47      	ldr	r2, [pc, #284]	; (81055cc <HAL_DMA_Abort_IT+0x460>)
 81054ae:	4293      	cmp	r3, r2
 81054b0:	d02c      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	4a46      	ldr	r2, [pc, #280]	; (81055d0 <HAL_DMA_Abort_IT+0x464>)
 81054b8:	4293      	cmp	r3, r2
 81054ba:	d027      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	4a44      	ldr	r2, [pc, #272]	; (81055d4 <HAL_DMA_Abort_IT+0x468>)
 81054c2:	4293      	cmp	r3, r2
 81054c4:	d022      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	4a43      	ldr	r2, [pc, #268]	; (81055d8 <HAL_DMA_Abort_IT+0x46c>)
 81054cc:	4293      	cmp	r3, r2
 81054ce:	d01d      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	4a41      	ldr	r2, [pc, #260]	; (81055dc <HAL_DMA_Abort_IT+0x470>)
 81054d6:	4293      	cmp	r3, r2
 81054d8:	d018      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	4a40      	ldr	r2, [pc, #256]	; (81055e0 <HAL_DMA_Abort_IT+0x474>)
 81054e0:	4293      	cmp	r3, r2
 81054e2:	d013      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	4a3e      	ldr	r2, [pc, #248]	; (81055e4 <HAL_DMA_Abort_IT+0x478>)
 81054ea:	4293      	cmp	r3, r2
 81054ec:	d00e      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	4a3d      	ldr	r2, [pc, #244]	; (81055e8 <HAL_DMA_Abort_IT+0x47c>)
 81054f4:	4293      	cmp	r3, r2
 81054f6:	d009      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	681b      	ldr	r3, [r3, #0]
 81054fc:	4a3b      	ldr	r2, [pc, #236]	; (81055ec <HAL_DMA_Abort_IT+0x480>)
 81054fe:	4293      	cmp	r3, r2
 8105500:	d004      	beq.n	810550c <HAL_DMA_Abort_IT+0x3a0>
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	4a3a      	ldr	r2, [pc, #232]	; (81055f0 <HAL_DMA_Abort_IT+0x484>)
 8105508:	4293      	cmp	r3, r2
 810550a:	d101      	bne.n	8105510 <HAL_DMA_Abort_IT+0x3a4>
 810550c:	2301      	movs	r3, #1
 810550e:	e000      	b.n	8105512 <HAL_DMA_Abort_IT+0x3a6>
 8105510:	2300      	movs	r3, #0
 8105512:	2b00      	cmp	r3, #0
 8105514:	d028      	beq.n	8105568 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810551a:	681a      	ldr	r2, [r3, #0]
 810551c:	687b      	ldr	r3, [r7, #4]
 810551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105524:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810552a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105530:	f003 031f 	and.w	r3, r3, #31
 8105534:	2201      	movs	r2, #1
 8105536:	409a      	lsls	r2, r3
 8105538:	68fb      	ldr	r3, [r7, #12]
 810553a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105540:	687a      	ldr	r2, [r7, #4]
 8105542:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105544:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810554a:	2b00      	cmp	r3, #0
 810554c:	d00c      	beq.n	8105568 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105552:	681a      	ldr	r2, [r3, #0]
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810555c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105562:	687a      	ldr	r2, [r7, #4]
 8105564:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105566:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	2200      	movs	r2, #0
 810556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	2201      	movs	r2, #1
 8105574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810557c:	2b00      	cmp	r3, #0
 810557e:	d003      	beq.n	8105588 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8105580:	687b      	ldr	r3, [r7, #4]
 8105582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105584:	6878      	ldr	r0, [r7, #4]
 8105586:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8105588:	2300      	movs	r3, #0
}
 810558a:	4618      	mov	r0, r3
 810558c:	3710      	adds	r7, #16
 810558e:	46bd      	mov	sp, r7
 8105590:	bd80      	pop	{r7, pc}
 8105592:	bf00      	nop
 8105594:	40020010 	.word	0x40020010
 8105598:	40020028 	.word	0x40020028
 810559c:	40020040 	.word	0x40020040
 81055a0:	40020058 	.word	0x40020058
 81055a4:	40020070 	.word	0x40020070
 81055a8:	40020088 	.word	0x40020088
 81055ac:	400200a0 	.word	0x400200a0
 81055b0:	400200b8 	.word	0x400200b8
 81055b4:	40020410 	.word	0x40020410
 81055b8:	40020428 	.word	0x40020428
 81055bc:	40020440 	.word	0x40020440
 81055c0:	40020458 	.word	0x40020458
 81055c4:	40020470 	.word	0x40020470
 81055c8:	40020488 	.word	0x40020488
 81055cc:	400204a0 	.word	0x400204a0
 81055d0:	400204b8 	.word	0x400204b8
 81055d4:	58025408 	.word	0x58025408
 81055d8:	5802541c 	.word	0x5802541c
 81055dc:	58025430 	.word	0x58025430
 81055e0:	58025444 	.word	0x58025444
 81055e4:	58025458 	.word	0x58025458
 81055e8:	5802546c 	.word	0x5802546c
 81055ec:	58025480 	.word	0x58025480
 81055f0:	58025494 	.word	0x58025494

081055f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81055f4:	b580      	push	{r7, lr}
 81055f6:	b08a      	sub	sp, #40	; 0x28
 81055f8:	af00      	add	r7, sp, #0
 81055fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81055fc:	2300      	movs	r3, #0
 81055fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8105600:	4b67      	ldr	r3, [pc, #412]	; (81057a0 <HAL_DMA_IRQHandler+0x1ac>)
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	4a67      	ldr	r2, [pc, #412]	; (81057a4 <HAL_DMA_IRQHandler+0x1b0>)
 8105606:	fba2 2303 	umull	r2, r3, r2, r3
 810560a:	0a9b      	lsrs	r3, r3, #10
 810560c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810560e:	687b      	ldr	r3, [r7, #4]
 8105610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105612:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105618:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810561a:	6a3b      	ldr	r3, [r7, #32]
 810561c:	681b      	ldr	r3, [r3, #0]
 810561e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105620:	69fb      	ldr	r3, [r7, #28]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	4a5f      	ldr	r2, [pc, #380]	; (81057a8 <HAL_DMA_IRQHandler+0x1b4>)
 810562c:	4293      	cmp	r3, r2
 810562e:	d04a      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	681b      	ldr	r3, [r3, #0]
 8105634:	4a5d      	ldr	r2, [pc, #372]	; (81057ac <HAL_DMA_IRQHandler+0x1b8>)
 8105636:	4293      	cmp	r3, r2
 8105638:	d045      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	4a5c      	ldr	r2, [pc, #368]	; (81057b0 <HAL_DMA_IRQHandler+0x1bc>)
 8105640:	4293      	cmp	r3, r2
 8105642:	d040      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	681b      	ldr	r3, [r3, #0]
 8105648:	4a5a      	ldr	r2, [pc, #360]	; (81057b4 <HAL_DMA_IRQHandler+0x1c0>)
 810564a:	4293      	cmp	r3, r2
 810564c:	d03b      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	681b      	ldr	r3, [r3, #0]
 8105652:	4a59      	ldr	r2, [pc, #356]	; (81057b8 <HAL_DMA_IRQHandler+0x1c4>)
 8105654:	4293      	cmp	r3, r2
 8105656:	d036      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	4a57      	ldr	r2, [pc, #348]	; (81057bc <HAL_DMA_IRQHandler+0x1c8>)
 810565e:	4293      	cmp	r3, r2
 8105660:	d031      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	4a56      	ldr	r2, [pc, #344]	; (81057c0 <HAL_DMA_IRQHandler+0x1cc>)
 8105668:	4293      	cmp	r3, r2
 810566a:	d02c      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	4a54      	ldr	r2, [pc, #336]	; (81057c4 <HAL_DMA_IRQHandler+0x1d0>)
 8105672:	4293      	cmp	r3, r2
 8105674:	d027      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	4a53      	ldr	r2, [pc, #332]	; (81057c8 <HAL_DMA_IRQHandler+0x1d4>)
 810567c:	4293      	cmp	r3, r2
 810567e:	d022      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	4a51      	ldr	r2, [pc, #324]	; (81057cc <HAL_DMA_IRQHandler+0x1d8>)
 8105686:	4293      	cmp	r3, r2
 8105688:	d01d      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	681b      	ldr	r3, [r3, #0]
 810568e:	4a50      	ldr	r2, [pc, #320]	; (81057d0 <HAL_DMA_IRQHandler+0x1dc>)
 8105690:	4293      	cmp	r3, r2
 8105692:	d018      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	4a4e      	ldr	r2, [pc, #312]	; (81057d4 <HAL_DMA_IRQHandler+0x1e0>)
 810569a:	4293      	cmp	r3, r2
 810569c:	d013      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	4a4d      	ldr	r2, [pc, #308]	; (81057d8 <HAL_DMA_IRQHandler+0x1e4>)
 81056a4:	4293      	cmp	r3, r2
 81056a6:	d00e      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	4a4b      	ldr	r2, [pc, #300]	; (81057dc <HAL_DMA_IRQHandler+0x1e8>)
 81056ae:	4293      	cmp	r3, r2
 81056b0:	d009      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	4a4a      	ldr	r2, [pc, #296]	; (81057e0 <HAL_DMA_IRQHandler+0x1ec>)
 81056b8:	4293      	cmp	r3, r2
 81056ba:	d004      	beq.n	81056c6 <HAL_DMA_IRQHandler+0xd2>
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	4a48      	ldr	r2, [pc, #288]	; (81057e4 <HAL_DMA_IRQHandler+0x1f0>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d101      	bne.n	81056ca <HAL_DMA_IRQHandler+0xd6>
 81056c6:	2301      	movs	r3, #1
 81056c8:	e000      	b.n	81056cc <HAL_DMA_IRQHandler+0xd8>
 81056ca:	2300      	movs	r3, #0
 81056cc:	2b00      	cmp	r3, #0
 81056ce:	f000 842b 	beq.w	8105f28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056d6:	f003 031f 	and.w	r3, r3, #31
 81056da:	2208      	movs	r2, #8
 81056dc:	409a      	lsls	r2, r3
 81056de:	69bb      	ldr	r3, [r7, #24]
 81056e0:	4013      	ands	r3, r2
 81056e2:	2b00      	cmp	r3, #0
 81056e4:	f000 80a2 	beq.w	810582c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	681b      	ldr	r3, [r3, #0]
 81056ec:	4a2e      	ldr	r2, [pc, #184]	; (81057a8 <HAL_DMA_IRQHandler+0x1b4>)
 81056ee:	4293      	cmp	r3, r2
 81056f0:	d04a      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	681b      	ldr	r3, [r3, #0]
 81056f6:	4a2d      	ldr	r2, [pc, #180]	; (81057ac <HAL_DMA_IRQHandler+0x1b8>)
 81056f8:	4293      	cmp	r3, r2
 81056fa:	d045      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	681b      	ldr	r3, [r3, #0]
 8105700:	4a2b      	ldr	r2, [pc, #172]	; (81057b0 <HAL_DMA_IRQHandler+0x1bc>)
 8105702:	4293      	cmp	r3, r2
 8105704:	d040      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	681b      	ldr	r3, [r3, #0]
 810570a:	4a2a      	ldr	r2, [pc, #168]	; (81057b4 <HAL_DMA_IRQHandler+0x1c0>)
 810570c:	4293      	cmp	r3, r2
 810570e:	d03b      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	681b      	ldr	r3, [r3, #0]
 8105714:	4a28      	ldr	r2, [pc, #160]	; (81057b8 <HAL_DMA_IRQHandler+0x1c4>)
 8105716:	4293      	cmp	r3, r2
 8105718:	d036      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	681b      	ldr	r3, [r3, #0]
 810571e:	4a27      	ldr	r2, [pc, #156]	; (81057bc <HAL_DMA_IRQHandler+0x1c8>)
 8105720:	4293      	cmp	r3, r2
 8105722:	d031      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	4a25      	ldr	r2, [pc, #148]	; (81057c0 <HAL_DMA_IRQHandler+0x1cc>)
 810572a:	4293      	cmp	r3, r2
 810572c:	d02c      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	681b      	ldr	r3, [r3, #0]
 8105732:	4a24      	ldr	r2, [pc, #144]	; (81057c4 <HAL_DMA_IRQHandler+0x1d0>)
 8105734:	4293      	cmp	r3, r2
 8105736:	d027      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	681b      	ldr	r3, [r3, #0]
 810573c:	4a22      	ldr	r2, [pc, #136]	; (81057c8 <HAL_DMA_IRQHandler+0x1d4>)
 810573e:	4293      	cmp	r3, r2
 8105740:	d022      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	681b      	ldr	r3, [r3, #0]
 8105746:	4a21      	ldr	r2, [pc, #132]	; (81057cc <HAL_DMA_IRQHandler+0x1d8>)
 8105748:	4293      	cmp	r3, r2
 810574a:	d01d      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	681b      	ldr	r3, [r3, #0]
 8105750:	4a1f      	ldr	r2, [pc, #124]	; (81057d0 <HAL_DMA_IRQHandler+0x1dc>)
 8105752:	4293      	cmp	r3, r2
 8105754:	d018      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	4a1e      	ldr	r2, [pc, #120]	; (81057d4 <HAL_DMA_IRQHandler+0x1e0>)
 810575c:	4293      	cmp	r3, r2
 810575e:	d013      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105760:	687b      	ldr	r3, [r7, #4]
 8105762:	681b      	ldr	r3, [r3, #0]
 8105764:	4a1c      	ldr	r2, [pc, #112]	; (81057d8 <HAL_DMA_IRQHandler+0x1e4>)
 8105766:	4293      	cmp	r3, r2
 8105768:	d00e      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 810576a:	687b      	ldr	r3, [r7, #4]
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	4a1b      	ldr	r2, [pc, #108]	; (81057dc <HAL_DMA_IRQHandler+0x1e8>)
 8105770:	4293      	cmp	r3, r2
 8105772:	d009      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	681b      	ldr	r3, [r3, #0]
 8105778:	4a19      	ldr	r2, [pc, #100]	; (81057e0 <HAL_DMA_IRQHandler+0x1ec>)
 810577a:	4293      	cmp	r3, r2
 810577c:	d004      	beq.n	8105788 <HAL_DMA_IRQHandler+0x194>
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	681b      	ldr	r3, [r3, #0]
 8105782:	4a18      	ldr	r2, [pc, #96]	; (81057e4 <HAL_DMA_IRQHandler+0x1f0>)
 8105784:	4293      	cmp	r3, r2
 8105786:	d12f      	bne.n	81057e8 <HAL_DMA_IRQHandler+0x1f4>
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	681b      	ldr	r3, [r3, #0]
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	f003 0304 	and.w	r3, r3, #4
 8105792:	2b00      	cmp	r3, #0
 8105794:	bf14      	ite	ne
 8105796:	2301      	movne	r3, #1
 8105798:	2300      	moveq	r3, #0
 810579a:	b2db      	uxtb	r3, r3
 810579c:	e02e      	b.n	81057fc <HAL_DMA_IRQHandler+0x208>
 810579e:	bf00      	nop
 81057a0:	10000000 	.word	0x10000000
 81057a4:	1b4e81b5 	.word	0x1b4e81b5
 81057a8:	40020010 	.word	0x40020010
 81057ac:	40020028 	.word	0x40020028
 81057b0:	40020040 	.word	0x40020040
 81057b4:	40020058 	.word	0x40020058
 81057b8:	40020070 	.word	0x40020070
 81057bc:	40020088 	.word	0x40020088
 81057c0:	400200a0 	.word	0x400200a0
 81057c4:	400200b8 	.word	0x400200b8
 81057c8:	40020410 	.word	0x40020410
 81057cc:	40020428 	.word	0x40020428
 81057d0:	40020440 	.word	0x40020440
 81057d4:	40020458 	.word	0x40020458
 81057d8:	40020470 	.word	0x40020470
 81057dc:	40020488 	.word	0x40020488
 81057e0:	400204a0 	.word	0x400204a0
 81057e4:	400204b8 	.word	0x400204b8
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	f003 0308 	and.w	r3, r3, #8
 81057f2:	2b00      	cmp	r3, #0
 81057f4:	bf14      	ite	ne
 81057f6:	2301      	movne	r3, #1
 81057f8:	2300      	moveq	r3, #0
 81057fa:	b2db      	uxtb	r3, r3
 81057fc:	2b00      	cmp	r3, #0
 81057fe:	d015      	beq.n	810582c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	681b      	ldr	r3, [r3, #0]
 8105804:	681a      	ldr	r2, [r3, #0]
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	f022 0204 	bic.w	r2, r2, #4
 810580e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105814:	f003 031f 	and.w	r3, r3, #31
 8105818:	2208      	movs	r2, #8
 810581a:	409a      	lsls	r2, r3
 810581c:	6a3b      	ldr	r3, [r7, #32]
 810581e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105824:	f043 0201 	orr.w	r2, r3, #1
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105830:	f003 031f 	and.w	r3, r3, #31
 8105834:	69ba      	ldr	r2, [r7, #24]
 8105836:	fa22 f303 	lsr.w	r3, r2, r3
 810583a:	f003 0301 	and.w	r3, r3, #1
 810583e:	2b00      	cmp	r3, #0
 8105840:	d06e      	beq.n	8105920 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	681b      	ldr	r3, [r3, #0]
 8105846:	4a69      	ldr	r2, [pc, #420]	; (81059ec <HAL_DMA_IRQHandler+0x3f8>)
 8105848:	4293      	cmp	r3, r2
 810584a:	d04a      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	4a67      	ldr	r2, [pc, #412]	; (81059f0 <HAL_DMA_IRQHandler+0x3fc>)
 8105852:	4293      	cmp	r3, r2
 8105854:	d045      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 8105856:	687b      	ldr	r3, [r7, #4]
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	4a66      	ldr	r2, [pc, #408]	; (81059f4 <HAL_DMA_IRQHandler+0x400>)
 810585c:	4293      	cmp	r3, r2
 810585e:	d040      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	4a64      	ldr	r2, [pc, #400]	; (81059f8 <HAL_DMA_IRQHandler+0x404>)
 8105866:	4293      	cmp	r3, r2
 8105868:	d03b      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	4a63      	ldr	r2, [pc, #396]	; (81059fc <HAL_DMA_IRQHandler+0x408>)
 8105870:	4293      	cmp	r3, r2
 8105872:	d036      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	4a61      	ldr	r2, [pc, #388]	; (8105a00 <HAL_DMA_IRQHandler+0x40c>)
 810587a:	4293      	cmp	r3, r2
 810587c:	d031      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	4a60      	ldr	r2, [pc, #384]	; (8105a04 <HAL_DMA_IRQHandler+0x410>)
 8105884:	4293      	cmp	r3, r2
 8105886:	d02c      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	4a5e      	ldr	r2, [pc, #376]	; (8105a08 <HAL_DMA_IRQHandler+0x414>)
 810588e:	4293      	cmp	r3, r2
 8105890:	d027      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	4a5d      	ldr	r2, [pc, #372]	; (8105a0c <HAL_DMA_IRQHandler+0x418>)
 8105898:	4293      	cmp	r3, r2
 810589a:	d022      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	4a5b      	ldr	r2, [pc, #364]	; (8105a10 <HAL_DMA_IRQHandler+0x41c>)
 81058a2:	4293      	cmp	r3, r2
 81058a4:	d01d      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	4a5a      	ldr	r2, [pc, #360]	; (8105a14 <HAL_DMA_IRQHandler+0x420>)
 81058ac:	4293      	cmp	r3, r2
 81058ae:	d018      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	4a58      	ldr	r2, [pc, #352]	; (8105a18 <HAL_DMA_IRQHandler+0x424>)
 81058b6:	4293      	cmp	r3, r2
 81058b8:	d013      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	4a57      	ldr	r2, [pc, #348]	; (8105a1c <HAL_DMA_IRQHandler+0x428>)
 81058c0:	4293      	cmp	r3, r2
 81058c2:	d00e      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	4a55      	ldr	r2, [pc, #340]	; (8105a20 <HAL_DMA_IRQHandler+0x42c>)
 81058ca:	4293      	cmp	r3, r2
 81058cc:	d009      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	4a54      	ldr	r2, [pc, #336]	; (8105a24 <HAL_DMA_IRQHandler+0x430>)
 81058d4:	4293      	cmp	r3, r2
 81058d6:	d004      	beq.n	81058e2 <HAL_DMA_IRQHandler+0x2ee>
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	4a52      	ldr	r2, [pc, #328]	; (8105a28 <HAL_DMA_IRQHandler+0x434>)
 81058de:	4293      	cmp	r3, r2
 81058e0:	d10a      	bne.n	81058f8 <HAL_DMA_IRQHandler+0x304>
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	681b      	ldr	r3, [r3, #0]
 81058e6:	695b      	ldr	r3, [r3, #20]
 81058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81058ec:	2b00      	cmp	r3, #0
 81058ee:	bf14      	ite	ne
 81058f0:	2301      	movne	r3, #1
 81058f2:	2300      	moveq	r3, #0
 81058f4:	b2db      	uxtb	r3, r3
 81058f6:	e003      	b.n	8105900 <HAL_DMA_IRQHandler+0x30c>
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	681b      	ldr	r3, [r3, #0]
 81058fe:	2300      	movs	r3, #0
 8105900:	2b00      	cmp	r3, #0
 8105902:	d00d      	beq.n	8105920 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105904:	687b      	ldr	r3, [r7, #4]
 8105906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105908:	f003 031f 	and.w	r3, r3, #31
 810590c:	2201      	movs	r2, #1
 810590e:	409a      	lsls	r2, r3
 8105910:	6a3b      	ldr	r3, [r7, #32]
 8105912:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105918:	f043 0202 	orr.w	r2, r3, #2
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105924:	f003 031f 	and.w	r3, r3, #31
 8105928:	2204      	movs	r2, #4
 810592a:	409a      	lsls	r2, r3
 810592c:	69bb      	ldr	r3, [r7, #24]
 810592e:	4013      	ands	r3, r2
 8105930:	2b00      	cmp	r3, #0
 8105932:	f000 808f 	beq.w	8105a54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	681b      	ldr	r3, [r3, #0]
 810593a:	4a2c      	ldr	r2, [pc, #176]	; (81059ec <HAL_DMA_IRQHandler+0x3f8>)
 810593c:	4293      	cmp	r3, r2
 810593e:	d04a      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	681b      	ldr	r3, [r3, #0]
 8105944:	4a2a      	ldr	r2, [pc, #168]	; (81059f0 <HAL_DMA_IRQHandler+0x3fc>)
 8105946:	4293      	cmp	r3, r2
 8105948:	d045      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 810594a:	687b      	ldr	r3, [r7, #4]
 810594c:	681b      	ldr	r3, [r3, #0]
 810594e:	4a29      	ldr	r2, [pc, #164]	; (81059f4 <HAL_DMA_IRQHandler+0x400>)
 8105950:	4293      	cmp	r3, r2
 8105952:	d040      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	681b      	ldr	r3, [r3, #0]
 8105958:	4a27      	ldr	r2, [pc, #156]	; (81059f8 <HAL_DMA_IRQHandler+0x404>)
 810595a:	4293      	cmp	r3, r2
 810595c:	d03b      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	4a26      	ldr	r2, [pc, #152]	; (81059fc <HAL_DMA_IRQHandler+0x408>)
 8105964:	4293      	cmp	r3, r2
 8105966:	d036      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 8105968:	687b      	ldr	r3, [r7, #4]
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	4a24      	ldr	r2, [pc, #144]	; (8105a00 <HAL_DMA_IRQHandler+0x40c>)
 810596e:	4293      	cmp	r3, r2
 8105970:	d031      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 8105972:	687b      	ldr	r3, [r7, #4]
 8105974:	681b      	ldr	r3, [r3, #0]
 8105976:	4a23      	ldr	r2, [pc, #140]	; (8105a04 <HAL_DMA_IRQHandler+0x410>)
 8105978:	4293      	cmp	r3, r2
 810597a:	d02c      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	681b      	ldr	r3, [r3, #0]
 8105980:	4a21      	ldr	r2, [pc, #132]	; (8105a08 <HAL_DMA_IRQHandler+0x414>)
 8105982:	4293      	cmp	r3, r2
 8105984:	d027      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	4a20      	ldr	r2, [pc, #128]	; (8105a0c <HAL_DMA_IRQHandler+0x418>)
 810598c:	4293      	cmp	r3, r2
 810598e:	d022      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	4a1e      	ldr	r2, [pc, #120]	; (8105a10 <HAL_DMA_IRQHandler+0x41c>)
 8105996:	4293      	cmp	r3, r2
 8105998:	d01d      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	681b      	ldr	r3, [r3, #0]
 810599e:	4a1d      	ldr	r2, [pc, #116]	; (8105a14 <HAL_DMA_IRQHandler+0x420>)
 81059a0:	4293      	cmp	r3, r2
 81059a2:	d018      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	681b      	ldr	r3, [r3, #0]
 81059a8:	4a1b      	ldr	r2, [pc, #108]	; (8105a18 <HAL_DMA_IRQHandler+0x424>)
 81059aa:	4293      	cmp	r3, r2
 81059ac:	d013      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	4a1a      	ldr	r2, [pc, #104]	; (8105a1c <HAL_DMA_IRQHandler+0x428>)
 81059b4:	4293      	cmp	r3, r2
 81059b6:	d00e      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	681b      	ldr	r3, [r3, #0]
 81059bc:	4a18      	ldr	r2, [pc, #96]	; (8105a20 <HAL_DMA_IRQHandler+0x42c>)
 81059be:	4293      	cmp	r3, r2
 81059c0:	d009      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	4a17      	ldr	r2, [pc, #92]	; (8105a24 <HAL_DMA_IRQHandler+0x430>)
 81059c8:	4293      	cmp	r3, r2
 81059ca:	d004      	beq.n	81059d6 <HAL_DMA_IRQHandler+0x3e2>
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	681b      	ldr	r3, [r3, #0]
 81059d0:	4a15      	ldr	r2, [pc, #84]	; (8105a28 <HAL_DMA_IRQHandler+0x434>)
 81059d2:	4293      	cmp	r3, r2
 81059d4:	d12a      	bne.n	8105a2c <HAL_DMA_IRQHandler+0x438>
 81059d6:	687b      	ldr	r3, [r7, #4]
 81059d8:	681b      	ldr	r3, [r3, #0]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	f003 0302 	and.w	r3, r3, #2
 81059e0:	2b00      	cmp	r3, #0
 81059e2:	bf14      	ite	ne
 81059e4:	2301      	movne	r3, #1
 81059e6:	2300      	moveq	r3, #0
 81059e8:	b2db      	uxtb	r3, r3
 81059ea:	e023      	b.n	8105a34 <HAL_DMA_IRQHandler+0x440>
 81059ec:	40020010 	.word	0x40020010
 81059f0:	40020028 	.word	0x40020028
 81059f4:	40020040 	.word	0x40020040
 81059f8:	40020058 	.word	0x40020058
 81059fc:	40020070 	.word	0x40020070
 8105a00:	40020088 	.word	0x40020088
 8105a04:	400200a0 	.word	0x400200a0
 8105a08:	400200b8 	.word	0x400200b8
 8105a0c:	40020410 	.word	0x40020410
 8105a10:	40020428 	.word	0x40020428
 8105a14:	40020440 	.word	0x40020440
 8105a18:	40020458 	.word	0x40020458
 8105a1c:	40020470 	.word	0x40020470
 8105a20:	40020488 	.word	0x40020488
 8105a24:	400204a0 	.word	0x400204a0
 8105a28:	400204b8 	.word	0x400204b8
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	2300      	movs	r3, #0
 8105a34:	2b00      	cmp	r3, #0
 8105a36:	d00d      	beq.n	8105a54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a3c:	f003 031f 	and.w	r3, r3, #31
 8105a40:	2204      	movs	r2, #4
 8105a42:	409a      	lsls	r2, r3
 8105a44:	6a3b      	ldr	r3, [r7, #32]
 8105a46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a4c:	f043 0204 	orr.w	r2, r3, #4
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a58:	f003 031f 	and.w	r3, r3, #31
 8105a5c:	2210      	movs	r2, #16
 8105a5e:	409a      	lsls	r2, r3
 8105a60:	69bb      	ldr	r3, [r7, #24]
 8105a62:	4013      	ands	r3, r2
 8105a64:	2b00      	cmp	r3, #0
 8105a66:	f000 80a6 	beq.w	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	4a85      	ldr	r2, [pc, #532]	; (8105c84 <HAL_DMA_IRQHandler+0x690>)
 8105a70:	4293      	cmp	r3, r2
 8105a72:	d04a      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	4a83      	ldr	r2, [pc, #524]	; (8105c88 <HAL_DMA_IRQHandler+0x694>)
 8105a7a:	4293      	cmp	r3, r2
 8105a7c:	d045      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105a7e:	687b      	ldr	r3, [r7, #4]
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	4a82      	ldr	r2, [pc, #520]	; (8105c8c <HAL_DMA_IRQHandler+0x698>)
 8105a84:	4293      	cmp	r3, r2
 8105a86:	d040      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	4a80      	ldr	r2, [pc, #512]	; (8105c90 <HAL_DMA_IRQHandler+0x69c>)
 8105a8e:	4293      	cmp	r3, r2
 8105a90:	d03b      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	4a7f      	ldr	r2, [pc, #508]	; (8105c94 <HAL_DMA_IRQHandler+0x6a0>)
 8105a98:	4293      	cmp	r3, r2
 8105a9a:	d036      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	4a7d      	ldr	r2, [pc, #500]	; (8105c98 <HAL_DMA_IRQHandler+0x6a4>)
 8105aa2:	4293      	cmp	r3, r2
 8105aa4:	d031      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4a7c      	ldr	r2, [pc, #496]	; (8105c9c <HAL_DMA_IRQHandler+0x6a8>)
 8105aac:	4293      	cmp	r3, r2
 8105aae:	d02c      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	681b      	ldr	r3, [r3, #0]
 8105ab4:	4a7a      	ldr	r2, [pc, #488]	; (8105ca0 <HAL_DMA_IRQHandler+0x6ac>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d027      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	4a79      	ldr	r2, [pc, #484]	; (8105ca4 <HAL_DMA_IRQHandler+0x6b0>)
 8105ac0:	4293      	cmp	r3, r2
 8105ac2:	d022      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	4a77      	ldr	r2, [pc, #476]	; (8105ca8 <HAL_DMA_IRQHandler+0x6b4>)
 8105aca:	4293      	cmp	r3, r2
 8105acc:	d01d      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	681b      	ldr	r3, [r3, #0]
 8105ad2:	4a76      	ldr	r2, [pc, #472]	; (8105cac <HAL_DMA_IRQHandler+0x6b8>)
 8105ad4:	4293      	cmp	r3, r2
 8105ad6:	d018      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	4a74      	ldr	r2, [pc, #464]	; (8105cb0 <HAL_DMA_IRQHandler+0x6bc>)
 8105ade:	4293      	cmp	r3, r2
 8105ae0:	d013      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	4a73      	ldr	r2, [pc, #460]	; (8105cb4 <HAL_DMA_IRQHandler+0x6c0>)
 8105ae8:	4293      	cmp	r3, r2
 8105aea:	d00e      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	4a71      	ldr	r2, [pc, #452]	; (8105cb8 <HAL_DMA_IRQHandler+0x6c4>)
 8105af2:	4293      	cmp	r3, r2
 8105af4:	d009      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	4a70      	ldr	r2, [pc, #448]	; (8105cbc <HAL_DMA_IRQHandler+0x6c8>)
 8105afc:	4293      	cmp	r3, r2
 8105afe:	d004      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x516>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	4a6e      	ldr	r2, [pc, #440]	; (8105cc0 <HAL_DMA_IRQHandler+0x6cc>)
 8105b06:	4293      	cmp	r3, r2
 8105b08:	d10a      	bne.n	8105b20 <HAL_DMA_IRQHandler+0x52c>
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	f003 0308 	and.w	r3, r3, #8
 8105b14:	2b00      	cmp	r3, #0
 8105b16:	bf14      	ite	ne
 8105b18:	2301      	movne	r3, #1
 8105b1a:	2300      	moveq	r3, #0
 8105b1c:	b2db      	uxtb	r3, r3
 8105b1e:	e009      	b.n	8105b34 <HAL_DMA_IRQHandler+0x540>
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	f003 0304 	and.w	r3, r3, #4
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	bf14      	ite	ne
 8105b2e:	2301      	movne	r3, #1
 8105b30:	2300      	moveq	r3, #0
 8105b32:	b2db      	uxtb	r3, r3
 8105b34:	2b00      	cmp	r3, #0
 8105b36:	d03e      	beq.n	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b3c:	f003 031f 	and.w	r3, r3, #31
 8105b40:	2210      	movs	r2, #16
 8105b42:	409a      	lsls	r2, r3
 8105b44:	6a3b      	ldr	r3, [r7, #32]
 8105b46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	681b      	ldr	r3, [r3, #0]
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	d018      	beq.n	8105b88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105b60:	2b00      	cmp	r3, #0
 8105b62:	d108      	bne.n	8105b76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b68:	2b00      	cmp	r3, #0
 8105b6a:	d024      	beq.n	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105b6c:	687b      	ldr	r3, [r7, #4]
 8105b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b70:	6878      	ldr	r0, [r7, #4]
 8105b72:	4798      	blx	r3
 8105b74:	e01f      	b.n	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105b7a:	2b00      	cmp	r3, #0
 8105b7c:	d01b      	beq.n	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105b82:	6878      	ldr	r0, [r7, #4]
 8105b84:	4798      	blx	r3
 8105b86:	e016      	b.n	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	d107      	bne.n	8105ba6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	681a      	ldr	r2, [r3, #0]
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	681b      	ldr	r3, [r3, #0]
 8105ba0:	f022 0208 	bic.w	r2, r2, #8
 8105ba4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105baa:	2b00      	cmp	r3, #0
 8105bac:	d003      	beq.n	8105bb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105bb2:	6878      	ldr	r0, [r7, #4]
 8105bb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105bba:	f003 031f 	and.w	r3, r3, #31
 8105bbe:	2220      	movs	r2, #32
 8105bc0:	409a      	lsls	r2, r3
 8105bc2:	69bb      	ldr	r3, [r7, #24]
 8105bc4:	4013      	ands	r3, r2
 8105bc6:	2b00      	cmp	r3, #0
 8105bc8:	f000 8110 	beq.w	8105dec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	4a2c      	ldr	r2, [pc, #176]	; (8105c84 <HAL_DMA_IRQHandler+0x690>)
 8105bd2:	4293      	cmp	r3, r2
 8105bd4:	d04a      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105bd6:	687b      	ldr	r3, [r7, #4]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	4a2b      	ldr	r2, [pc, #172]	; (8105c88 <HAL_DMA_IRQHandler+0x694>)
 8105bdc:	4293      	cmp	r3, r2
 8105bde:	d045      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	4a29      	ldr	r2, [pc, #164]	; (8105c8c <HAL_DMA_IRQHandler+0x698>)
 8105be6:	4293      	cmp	r3, r2
 8105be8:	d040      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	4a28      	ldr	r2, [pc, #160]	; (8105c90 <HAL_DMA_IRQHandler+0x69c>)
 8105bf0:	4293      	cmp	r3, r2
 8105bf2:	d03b      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	681b      	ldr	r3, [r3, #0]
 8105bf8:	4a26      	ldr	r2, [pc, #152]	; (8105c94 <HAL_DMA_IRQHandler+0x6a0>)
 8105bfa:	4293      	cmp	r3, r2
 8105bfc:	d036      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	4a25      	ldr	r2, [pc, #148]	; (8105c98 <HAL_DMA_IRQHandler+0x6a4>)
 8105c04:	4293      	cmp	r3, r2
 8105c06:	d031      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	4a23      	ldr	r2, [pc, #140]	; (8105c9c <HAL_DMA_IRQHandler+0x6a8>)
 8105c0e:	4293      	cmp	r3, r2
 8105c10:	d02c      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	681b      	ldr	r3, [r3, #0]
 8105c16:	4a22      	ldr	r2, [pc, #136]	; (8105ca0 <HAL_DMA_IRQHandler+0x6ac>)
 8105c18:	4293      	cmp	r3, r2
 8105c1a:	d027      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	681b      	ldr	r3, [r3, #0]
 8105c20:	4a20      	ldr	r2, [pc, #128]	; (8105ca4 <HAL_DMA_IRQHandler+0x6b0>)
 8105c22:	4293      	cmp	r3, r2
 8105c24:	d022      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	681b      	ldr	r3, [r3, #0]
 8105c2a:	4a1f      	ldr	r2, [pc, #124]	; (8105ca8 <HAL_DMA_IRQHandler+0x6b4>)
 8105c2c:	4293      	cmp	r3, r2
 8105c2e:	d01d      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c30:	687b      	ldr	r3, [r7, #4]
 8105c32:	681b      	ldr	r3, [r3, #0]
 8105c34:	4a1d      	ldr	r2, [pc, #116]	; (8105cac <HAL_DMA_IRQHandler+0x6b8>)
 8105c36:	4293      	cmp	r3, r2
 8105c38:	d018      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	4a1c      	ldr	r2, [pc, #112]	; (8105cb0 <HAL_DMA_IRQHandler+0x6bc>)
 8105c40:	4293      	cmp	r3, r2
 8105c42:	d013      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c44:	687b      	ldr	r3, [r7, #4]
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	4a1a      	ldr	r2, [pc, #104]	; (8105cb4 <HAL_DMA_IRQHandler+0x6c0>)
 8105c4a:	4293      	cmp	r3, r2
 8105c4c:	d00e      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	4a19      	ldr	r2, [pc, #100]	; (8105cb8 <HAL_DMA_IRQHandler+0x6c4>)
 8105c54:	4293      	cmp	r3, r2
 8105c56:	d009      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c58:	687b      	ldr	r3, [r7, #4]
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	4a17      	ldr	r2, [pc, #92]	; (8105cbc <HAL_DMA_IRQHandler+0x6c8>)
 8105c5e:	4293      	cmp	r3, r2
 8105c60:	d004      	beq.n	8105c6c <HAL_DMA_IRQHandler+0x678>
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	4a16      	ldr	r2, [pc, #88]	; (8105cc0 <HAL_DMA_IRQHandler+0x6cc>)
 8105c68:	4293      	cmp	r3, r2
 8105c6a:	d12b      	bne.n	8105cc4 <HAL_DMA_IRQHandler+0x6d0>
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	681b      	ldr	r3, [r3, #0]
 8105c72:	f003 0310 	and.w	r3, r3, #16
 8105c76:	2b00      	cmp	r3, #0
 8105c78:	bf14      	ite	ne
 8105c7a:	2301      	movne	r3, #1
 8105c7c:	2300      	moveq	r3, #0
 8105c7e:	b2db      	uxtb	r3, r3
 8105c80:	e02a      	b.n	8105cd8 <HAL_DMA_IRQHandler+0x6e4>
 8105c82:	bf00      	nop
 8105c84:	40020010 	.word	0x40020010
 8105c88:	40020028 	.word	0x40020028
 8105c8c:	40020040 	.word	0x40020040
 8105c90:	40020058 	.word	0x40020058
 8105c94:	40020070 	.word	0x40020070
 8105c98:	40020088 	.word	0x40020088
 8105c9c:	400200a0 	.word	0x400200a0
 8105ca0:	400200b8 	.word	0x400200b8
 8105ca4:	40020410 	.word	0x40020410
 8105ca8:	40020428 	.word	0x40020428
 8105cac:	40020440 	.word	0x40020440
 8105cb0:	40020458 	.word	0x40020458
 8105cb4:	40020470 	.word	0x40020470
 8105cb8:	40020488 	.word	0x40020488
 8105cbc:	400204a0 	.word	0x400204a0
 8105cc0:	400204b8 	.word	0x400204b8
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	f003 0302 	and.w	r3, r3, #2
 8105cce:	2b00      	cmp	r3, #0
 8105cd0:	bf14      	ite	ne
 8105cd2:	2301      	movne	r3, #1
 8105cd4:	2300      	moveq	r3, #0
 8105cd6:	b2db      	uxtb	r3, r3
 8105cd8:	2b00      	cmp	r3, #0
 8105cda:	f000 8087 	beq.w	8105dec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ce2:	f003 031f 	and.w	r3, r3, #31
 8105ce6:	2220      	movs	r2, #32
 8105ce8:	409a      	lsls	r2, r3
 8105cea:	6a3b      	ldr	r3, [r7, #32]
 8105cec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105cf4:	b2db      	uxtb	r3, r3
 8105cf6:	2b04      	cmp	r3, #4
 8105cf8:	d139      	bne.n	8105d6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	681b      	ldr	r3, [r3, #0]
 8105cfe:	681a      	ldr	r2, [r3, #0]
 8105d00:	687b      	ldr	r3, [r7, #4]
 8105d02:	681b      	ldr	r3, [r3, #0]
 8105d04:	f022 0216 	bic.w	r2, r2, #22
 8105d08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	695a      	ldr	r2, [r3, #20]
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105d18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d1e:	2b00      	cmp	r3, #0
 8105d20:	d103      	bne.n	8105d2a <HAL_DMA_IRQHandler+0x736>
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105d26:	2b00      	cmp	r3, #0
 8105d28:	d007      	beq.n	8105d3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	681a      	ldr	r2, [r3, #0]
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	f022 0208 	bic.w	r2, r2, #8
 8105d38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d3e:	f003 031f 	and.w	r3, r3, #31
 8105d42:	223f      	movs	r2, #63	; 0x3f
 8105d44:	409a      	lsls	r2, r3
 8105d46:	6a3b      	ldr	r3, [r7, #32]
 8105d48:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	2200      	movs	r2, #0
 8105d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	2201      	movs	r2, #1
 8105d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105d5a:	687b      	ldr	r3, [r7, #4]
 8105d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d5e:	2b00      	cmp	r3, #0
 8105d60:	f000 834a 	beq.w	81063f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d68:	6878      	ldr	r0, [r7, #4]
 8105d6a:	4798      	blx	r3
          }
          return;
 8105d6c:	e344      	b.n	81063f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105d78:	2b00      	cmp	r3, #0
 8105d7a:	d018      	beq.n	8105dae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	d108      	bne.n	8105d9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d8e:	2b00      	cmp	r3, #0
 8105d90:	d02c      	beq.n	8105dec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105d92:	687b      	ldr	r3, [r7, #4]
 8105d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d96:	6878      	ldr	r0, [r7, #4]
 8105d98:	4798      	blx	r3
 8105d9a:	e027      	b.n	8105dec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105da0:	2b00      	cmp	r3, #0
 8105da2:	d023      	beq.n	8105dec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105da8:	6878      	ldr	r0, [r7, #4]
 8105daa:	4798      	blx	r3
 8105dac:	e01e      	b.n	8105dec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105db8:	2b00      	cmp	r3, #0
 8105dba:	d10f      	bne.n	8105ddc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	681a      	ldr	r2, [r3, #0]
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	f022 0210 	bic.w	r2, r2, #16
 8105dca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	2200      	movs	r2, #0
 8105dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8105dd4:	687b      	ldr	r3, [r7, #4]
 8105dd6:	2201      	movs	r2, #1
 8105dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105de0:	2b00      	cmp	r3, #0
 8105de2:	d003      	beq.n	8105dec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105de4:	687b      	ldr	r3, [r7, #4]
 8105de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105de8:	6878      	ldr	r0, [r7, #4]
 8105dea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105df0:	2b00      	cmp	r3, #0
 8105df2:	f000 8306 	beq.w	8106402 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105dfa:	f003 0301 	and.w	r3, r3, #1
 8105dfe:	2b00      	cmp	r3, #0
 8105e00:	f000 8088 	beq.w	8105f14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	2204      	movs	r2, #4
 8105e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	681b      	ldr	r3, [r3, #0]
 8105e10:	4a7a      	ldr	r2, [pc, #488]	; (8105ffc <HAL_DMA_IRQHandler+0xa08>)
 8105e12:	4293      	cmp	r3, r2
 8105e14:	d04a      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	4a79      	ldr	r2, [pc, #484]	; (8106000 <HAL_DMA_IRQHandler+0xa0c>)
 8105e1c:	4293      	cmp	r3, r2
 8105e1e:	d045      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	4a77      	ldr	r2, [pc, #476]	; (8106004 <HAL_DMA_IRQHandler+0xa10>)
 8105e26:	4293      	cmp	r3, r2
 8105e28:	d040      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	4a76      	ldr	r2, [pc, #472]	; (8106008 <HAL_DMA_IRQHandler+0xa14>)
 8105e30:	4293      	cmp	r3, r2
 8105e32:	d03b      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	681b      	ldr	r3, [r3, #0]
 8105e38:	4a74      	ldr	r2, [pc, #464]	; (810600c <HAL_DMA_IRQHandler+0xa18>)
 8105e3a:	4293      	cmp	r3, r2
 8105e3c:	d036      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	4a73      	ldr	r2, [pc, #460]	; (8106010 <HAL_DMA_IRQHandler+0xa1c>)
 8105e44:	4293      	cmp	r3, r2
 8105e46:	d031      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	4a71      	ldr	r2, [pc, #452]	; (8106014 <HAL_DMA_IRQHandler+0xa20>)
 8105e4e:	4293      	cmp	r3, r2
 8105e50:	d02c      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	4a70      	ldr	r2, [pc, #448]	; (8106018 <HAL_DMA_IRQHandler+0xa24>)
 8105e58:	4293      	cmp	r3, r2
 8105e5a:	d027      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	4a6e      	ldr	r2, [pc, #440]	; (810601c <HAL_DMA_IRQHandler+0xa28>)
 8105e62:	4293      	cmp	r3, r2
 8105e64:	d022      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	4a6d      	ldr	r2, [pc, #436]	; (8106020 <HAL_DMA_IRQHandler+0xa2c>)
 8105e6c:	4293      	cmp	r3, r2
 8105e6e:	d01d      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	4a6b      	ldr	r2, [pc, #428]	; (8106024 <HAL_DMA_IRQHandler+0xa30>)
 8105e76:	4293      	cmp	r3, r2
 8105e78:	d018      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	4a6a      	ldr	r2, [pc, #424]	; (8106028 <HAL_DMA_IRQHandler+0xa34>)
 8105e80:	4293      	cmp	r3, r2
 8105e82:	d013      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	4a68      	ldr	r2, [pc, #416]	; (810602c <HAL_DMA_IRQHandler+0xa38>)
 8105e8a:	4293      	cmp	r3, r2
 8105e8c:	d00e      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	4a67      	ldr	r2, [pc, #412]	; (8106030 <HAL_DMA_IRQHandler+0xa3c>)
 8105e94:	4293      	cmp	r3, r2
 8105e96:	d009      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	681b      	ldr	r3, [r3, #0]
 8105e9c:	4a65      	ldr	r2, [pc, #404]	; (8106034 <HAL_DMA_IRQHandler+0xa40>)
 8105e9e:	4293      	cmp	r3, r2
 8105ea0:	d004      	beq.n	8105eac <HAL_DMA_IRQHandler+0x8b8>
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	4a64      	ldr	r2, [pc, #400]	; (8106038 <HAL_DMA_IRQHandler+0xa44>)
 8105ea8:	4293      	cmp	r3, r2
 8105eaa:	d108      	bne.n	8105ebe <HAL_DMA_IRQHandler+0x8ca>
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	681a      	ldr	r2, [r3, #0]
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	681b      	ldr	r3, [r3, #0]
 8105eb6:	f022 0201 	bic.w	r2, r2, #1
 8105eba:	601a      	str	r2, [r3, #0]
 8105ebc:	e007      	b.n	8105ece <HAL_DMA_IRQHandler+0x8da>
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	681a      	ldr	r2, [r3, #0]
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	f022 0201 	bic.w	r2, r2, #1
 8105ecc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8105ece:	68fb      	ldr	r3, [r7, #12]
 8105ed0:	3301      	adds	r3, #1
 8105ed2:	60fb      	str	r3, [r7, #12]
 8105ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105ed6:	429a      	cmp	r2, r3
 8105ed8:	d307      	bcc.n	8105eea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	681b      	ldr	r3, [r3, #0]
 8105ee0:	f003 0301 	and.w	r3, r3, #1
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	d1f2      	bne.n	8105ece <HAL_DMA_IRQHandler+0x8da>
 8105ee8:	e000      	b.n	8105eec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8105eea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	2200      	movs	r2, #0
 8105ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	f003 0301 	and.w	r3, r3, #1
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d004      	beq.n	8105f0c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	2203      	movs	r2, #3
 8105f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8105f0a:	e003      	b.n	8105f14 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	2201      	movs	r2, #1
 8105f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f18:	2b00      	cmp	r3, #0
 8105f1a:	f000 8272 	beq.w	8106402 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105f1e:	687b      	ldr	r3, [r7, #4]
 8105f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f22:	6878      	ldr	r0, [r7, #4]
 8105f24:	4798      	blx	r3
 8105f26:	e26c      	b.n	8106402 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	4a43      	ldr	r2, [pc, #268]	; (810603c <HAL_DMA_IRQHandler+0xa48>)
 8105f2e:	4293      	cmp	r3, r2
 8105f30:	d022      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	4a42      	ldr	r2, [pc, #264]	; (8106040 <HAL_DMA_IRQHandler+0xa4c>)
 8105f38:	4293      	cmp	r3, r2
 8105f3a:	d01d      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	4a40      	ldr	r2, [pc, #256]	; (8106044 <HAL_DMA_IRQHandler+0xa50>)
 8105f42:	4293      	cmp	r3, r2
 8105f44:	d018      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	4a3f      	ldr	r2, [pc, #252]	; (8106048 <HAL_DMA_IRQHandler+0xa54>)
 8105f4c:	4293      	cmp	r3, r2
 8105f4e:	d013      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	4a3d      	ldr	r2, [pc, #244]	; (810604c <HAL_DMA_IRQHandler+0xa58>)
 8105f56:	4293      	cmp	r3, r2
 8105f58:	d00e      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	4a3c      	ldr	r2, [pc, #240]	; (8106050 <HAL_DMA_IRQHandler+0xa5c>)
 8105f60:	4293      	cmp	r3, r2
 8105f62:	d009      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	681b      	ldr	r3, [r3, #0]
 8105f68:	4a3a      	ldr	r2, [pc, #232]	; (8106054 <HAL_DMA_IRQHandler+0xa60>)
 8105f6a:	4293      	cmp	r3, r2
 8105f6c:	d004      	beq.n	8105f78 <HAL_DMA_IRQHandler+0x984>
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	681b      	ldr	r3, [r3, #0]
 8105f72:	4a39      	ldr	r2, [pc, #228]	; (8106058 <HAL_DMA_IRQHandler+0xa64>)
 8105f74:	4293      	cmp	r3, r2
 8105f76:	d101      	bne.n	8105f7c <HAL_DMA_IRQHandler+0x988>
 8105f78:	2301      	movs	r3, #1
 8105f7a:	e000      	b.n	8105f7e <HAL_DMA_IRQHandler+0x98a>
 8105f7c:	2300      	movs	r3, #0
 8105f7e:	2b00      	cmp	r3, #0
 8105f80:	f000 823f 	beq.w	8106402 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	681b      	ldr	r3, [r3, #0]
 8105f8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f90:	f003 031f 	and.w	r3, r3, #31
 8105f94:	2204      	movs	r2, #4
 8105f96:	409a      	lsls	r2, r3
 8105f98:	697b      	ldr	r3, [r7, #20]
 8105f9a:	4013      	ands	r3, r2
 8105f9c:	2b00      	cmp	r3, #0
 8105f9e:	f000 80cd 	beq.w	810613c <HAL_DMA_IRQHandler+0xb48>
 8105fa2:	693b      	ldr	r3, [r7, #16]
 8105fa4:	f003 0304 	and.w	r3, r3, #4
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	f000 80c7 	beq.w	810613c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105fb2:	f003 031f 	and.w	r3, r3, #31
 8105fb6:	2204      	movs	r2, #4
 8105fb8:	409a      	lsls	r2, r3
 8105fba:	69fb      	ldr	r3, [r7, #28]
 8105fbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105fbe:	693b      	ldr	r3, [r7, #16]
 8105fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105fc4:	2b00      	cmp	r3, #0
 8105fc6:	d049      	beq.n	810605c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105fc8:	693b      	ldr	r3, [r7, #16]
 8105fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105fce:	2b00      	cmp	r3, #0
 8105fd0:	d109      	bne.n	8105fe6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105fd6:	2b00      	cmp	r3, #0
 8105fd8:	f000 8210 	beq.w	81063fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105fe0:	6878      	ldr	r0, [r7, #4]
 8105fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105fe4:	e20a      	b.n	81063fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105fea:	2b00      	cmp	r3, #0
 8105fec:	f000 8206 	beq.w	81063fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ff4:	6878      	ldr	r0, [r7, #4]
 8105ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105ff8:	e200      	b.n	81063fc <HAL_DMA_IRQHandler+0xe08>
 8105ffa:	bf00      	nop
 8105ffc:	40020010 	.word	0x40020010
 8106000:	40020028 	.word	0x40020028
 8106004:	40020040 	.word	0x40020040
 8106008:	40020058 	.word	0x40020058
 810600c:	40020070 	.word	0x40020070
 8106010:	40020088 	.word	0x40020088
 8106014:	400200a0 	.word	0x400200a0
 8106018:	400200b8 	.word	0x400200b8
 810601c:	40020410 	.word	0x40020410
 8106020:	40020428 	.word	0x40020428
 8106024:	40020440 	.word	0x40020440
 8106028:	40020458 	.word	0x40020458
 810602c:	40020470 	.word	0x40020470
 8106030:	40020488 	.word	0x40020488
 8106034:	400204a0 	.word	0x400204a0
 8106038:	400204b8 	.word	0x400204b8
 810603c:	58025408 	.word	0x58025408
 8106040:	5802541c 	.word	0x5802541c
 8106044:	58025430 	.word	0x58025430
 8106048:	58025444 	.word	0x58025444
 810604c:	58025458 	.word	0x58025458
 8106050:	5802546c 	.word	0x5802546c
 8106054:	58025480 	.word	0x58025480
 8106058:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810605c:	693b      	ldr	r3, [r7, #16]
 810605e:	f003 0320 	and.w	r3, r3, #32
 8106062:	2b00      	cmp	r3, #0
 8106064:	d160      	bne.n	8106128 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	4a8c      	ldr	r2, [pc, #560]	; (810629c <HAL_DMA_IRQHandler+0xca8>)
 810606c:	4293      	cmp	r3, r2
 810606e:	d04a      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 8106070:	687b      	ldr	r3, [r7, #4]
 8106072:	681b      	ldr	r3, [r3, #0]
 8106074:	4a8a      	ldr	r2, [pc, #552]	; (81062a0 <HAL_DMA_IRQHandler+0xcac>)
 8106076:	4293      	cmp	r3, r2
 8106078:	d045      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	4a89      	ldr	r2, [pc, #548]	; (81062a4 <HAL_DMA_IRQHandler+0xcb0>)
 8106080:	4293      	cmp	r3, r2
 8106082:	d040      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	681b      	ldr	r3, [r3, #0]
 8106088:	4a87      	ldr	r2, [pc, #540]	; (81062a8 <HAL_DMA_IRQHandler+0xcb4>)
 810608a:	4293      	cmp	r3, r2
 810608c:	d03b      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 810608e:	687b      	ldr	r3, [r7, #4]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	4a86      	ldr	r2, [pc, #536]	; (81062ac <HAL_DMA_IRQHandler+0xcb8>)
 8106094:	4293      	cmp	r3, r2
 8106096:	d036      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	681b      	ldr	r3, [r3, #0]
 810609c:	4a84      	ldr	r2, [pc, #528]	; (81062b0 <HAL_DMA_IRQHandler+0xcbc>)
 810609e:	4293      	cmp	r3, r2
 81060a0:	d031      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	681b      	ldr	r3, [r3, #0]
 81060a6:	4a83      	ldr	r2, [pc, #524]	; (81062b4 <HAL_DMA_IRQHandler+0xcc0>)
 81060a8:	4293      	cmp	r3, r2
 81060aa:	d02c      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	4a81      	ldr	r2, [pc, #516]	; (81062b8 <HAL_DMA_IRQHandler+0xcc4>)
 81060b2:	4293      	cmp	r3, r2
 81060b4:	d027      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	681b      	ldr	r3, [r3, #0]
 81060ba:	4a80      	ldr	r2, [pc, #512]	; (81062bc <HAL_DMA_IRQHandler+0xcc8>)
 81060bc:	4293      	cmp	r3, r2
 81060be:	d022      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	681b      	ldr	r3, [r3, #0]
 81060c4:	4a7e      	ldr	r2, [pc, #504]	; (81062c0 <HAL_DMA_IRQHandler+0xccc>)
 81060c6:	4293      	cmp	r3, r2
 81060c8:	d01d      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	4a7d      	ldr	r2, [pc, #500]	; (81062c4 <HAL_DMA_IRQHandler+0xcd0>)
 81060d0:	4293      	cmp	r3, r2
 81060d2:	d018      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	681b      	ldr	r3, [r3, #0]
 81060d8:	4a7b      	ldr	r2, [pc, #492]	; (81062c8 <HAL_DMA_IRQHandler+0xcd4>)
 81060da:	4293      	cmp	r3, r2
 81060dc:	d013      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	4a7a      	ldr	r2, [pc, #488]	; (81062cc <HAL_DMA_IRQHandler+0xcd8>)
 81060e4:	4293      	cmp	r3, r2
 81060e6:	d00e      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	681b      	ldr	r3, [r3, #0]
 81060ec:	4a78      	ldr	r2, [pc, #480]	; (81062d0 <HAL_DMA_IRQHandler+0xcdc>)
 81060ee:	4293      	cmp	r3, r2
 81060f0:	d009      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	4a77      	ldr	r2, [pc, #476]	; (81062d4 <HAL_DMA_IRQHandler+0xce0>)
 81060f8:	4293      	cmp	r3, r2
 81060fa:	d004      	beq.n	8106106 <HAL_DMA_IRQHandler+0xb12>
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	4a75      	ldr	r2, [pc, #468]	; (81062d8 <HAL_DMA_IRQHandler+0xce4>)
 8106102:	4293      	cmp	r3, r2
 8106104:	d108      	bne.n	8106118 <HAL_DMA_IRQHandler+0xb24>
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	681a      	ldr	r2, [r3, #0]
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	681b      	ldr	r3, [r3, #0]
 8106110:	f022 0208 	bic.w	r2, r2, #8
 8106114:	601a      	str	r2, [r3, #0]
 8106116:	e007      	b.n	8106128 <HAL_DMA_IRQHandler+0xb34>
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	681a      	ldr	r2, [r3, #0]
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	681b      	ldr	r3, [r3, #0]
 8106122:	f022 0204 	bic.w	r2, r2, #4
 8106126:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8106128:	687b      	ldr	r3, [r7, #4]
 810612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810612c:	2b00      	cmp	r3, #0
 810612e:	f000 8165 	beq.w	81063fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106136:	6878      	ldr	r0, [r7, #4]
 8106138:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810613a:	e15f      	b.n	81063fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810613c:	687b      	ldr	r3, [r7, #4]
 810613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106140:	f003 031f 	and.w	r3, r3, #31
 8106144:	2202      	movs	r2, #2
 8106146:	409a      	lsls	r2, r3
 8106148:	697b      	ldr	r3, [r7, #20]
 810614a:	4013      	ands	r3, r2
 810614c:	2b00      	cmp	r3, #0
 810614e:	f000 80c5 	beq.w	81062dc <HAL_DMA_IRQHandler+0xce8>
 8106152:	693b      	ldr	r3, [r7, #16]
 8106154:	f003 0302 	and.w	r3, r3, #2
 8106158:	2b00      	cmp	r3, #0
 810615a:	f000 80bf 	beq.w	81062dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106162:	f003 031f 	and.w	r3, r3, #31
 8106166:	2202      	movs	r2, #2
 8106168:	409a      	lsls	r2, r3
 810616a:	69fb      	ldr	r3, [r7, #28]
 810616c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810616e:	693b      	ldr	r3, [r7, #16]
 8106170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106174:	2b00      	cmp	r3, #0
 8106176:	d018      	beq.n	81061aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106178:	693b      	ldr	r3, [r7, #16]
 810617a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810617e:	2b00      	cmp	r3, #0
 8106180:	d109      	bne.n	8106196 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106186:	2b00      	cmp	r3, #0
 8106188:	f000 813a 	beq.w	8106400 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106190:	6878      	ldr	r0, [r7, #4]
 8106192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106194:	e134      	b.n	8106400 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810619a:	2b00      	cmp	r3, #0
 810619c:	f000 8130 	beq.w	8106400 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81061a0:	687b      	ldr	r3, [r7, #4]
 81061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061a4:	6878      	ldr	r0, [r7, #4]
 81061a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81061a8:	e12a      	b.n	8106400 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81061aa:	693b      	ldr	r3, [r7, #16]
 81061ac:	f003 0320 	and.w	r3, r3, #32
 81061b0:	2b00      	cmp	r3, #0
 81061b2:	d168      	bne.n	8106286 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	681b      	ldr	r3, [r3, #0]
 81061b8:	4a38      	ldr	r2, [pc, #224]	; (810629c <HAL_DMA_IRQHandler+0xca8>)
 81061ba:	4293      	cmp	r3, r2
 81061bc:	d04a      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	681b      	ldr	r3, [r3, #0]
 81061c2:	4a37      	ldr	r2, [pc, #220]	; (81062a0 <HAL_DMA_IRQHandler+0xcac>)
 81061c4:	4293      	cmp	r3, r2
 81061c6:	d045      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	681b      	ldr	r3, [r3, #0]
 81061cc:	4a35      	ldr	r2, [pc, #212]	; (81062a4 <HAL_DMA_IRQHandler+0xcb0>)
 81061ce:	4293      	cmp	r3, r2
 81061d0:	d040      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	681b      	ldr	r3, [r3, #0]
 81061d6:	4a34      	ldr	r2, [pc, #208]	; (81062a8 <HAL_DMA_IRQHandler+0xcb4>)
 81061d8:	4293      	cmp	r3, r2
 81061da:	d03b      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	681b      	ldr	r3, [r3, #0]
 81061e0:	4a32      	ldr	r2, [pc, #200]	; (81062ac <HAL_DMA_IRQHandler+0xcb8>)
 81061e2:	4293      	cmp	r3, r2
 81061e4:	d036      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	4a31      	ldr	r2, [pc, #196]	; (81062b0 <HAL_DMA_IRQHandler+0xcbc>)
 81061ec:	4293      	cmp	r3, r2
 81061ee:	d031      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	4a2f      	ldr	r2, [pc, #188]	; (81062b4 <HAL_DMA_IRQHandler+0xcc0>)
 81061f6:	4293      	cmp	r3, r2
 81061f8:	d02c      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	681b      	ldr	r3, [r3, #0]
 81061fe:	4a2e      	ldr	r2, [pc, #184]	; (81062b8 <HAL_DMA_IRQHandler+0xcc4>)
 8106200:	4293      	cmp	r3, r2
 8106202:	d027      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	681b      	ldr	r3, [r3, #0]
 8106208:	4a2c      	ldr	r2, [pc, #176]	; (81062bc <HAL_DMA_IRQHandler+0xcc8>)
 810620a:	4293      	cmp	r3, r2
 810620c:	d022      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	4a2b      	ldr	r2, [pc, #172]	; (81062c0 <HAL_DMA_IRQHandler+0xccc>)
 8106214:	4293      	cmp	r3, r2
 8106216:	d01d      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	4a29      	ldr	r2, [pc, #164]	; (81062c4 <HAL_DMA_IRQHandler+0xcd0>)
 810621e:	4293      	cmp	r3, r2
 8106220:	d018      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	4a28      	ldr	r2, [pc, #160]	; (81062c8 <HAL_DMA_IRQHandler+0xcd4>)
 8106228:	4293      	cmp	r3, r2
 810622a:	d013      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	681b      	ldr	r3, [r3, #0]
 8106230:	4a26      	ldr	r2, [pc, #152]	; (81062cc <HAL_DMA_IRQHandler+0xcd8>)
 8106232:	4293      	cmp	r3, r2
 8106234:	d00e      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 8106236:	687b      	ldr	r3, [r7, #4]
 8106238:	681b      	ldr	r3, [r3, #0]
 810623a:	4a25      	ldr	r2, [pc, #148]	; (81062d0 <HAL_DMA_IRQHandler+0xcdc>)
 810623c:	4293      	cmp	r3, r2
 810623e:	d009      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	4a23      	ldr	r2, [pc, #140]	; (81062d4 <HAL_DMA_IRQHandler+0xce0>)
 8106246:	4293      	cmp	r3, r2
 8106248:	d004      	beq.n	8106254 <HAL_DMA_IRQHandler+0xc60>
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	4a22      	ldr	r2, [pc, #136]	; (81062d8 <HAL_DMA_IRQHandler+0xce4>)
 8106250:	4293      	cmp	r3, r2
 8106252:	d108      	bne.n	8106266 <HAL_DMA_IRQHandler+0xc72>
 8106254:	687b      	ldr	r3, [r7, #4]
 8106256:	681b      	ldr	r3, [r3, #0]
 8106258:	681a      	ldr	r2, [r3, #0]
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	f022 0214 	bic.w	r2, r2, #20
 8106262:	601a      	str	r2, [r3, #0]
 8106264:	e007      	b.n	8106276 <HAL_DMA_IRQHandler+0xc82>
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	681a      	ldr	r2, [r3, #0]
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	f022 020a 	bic.w	r2, r2, #10
 8106274:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	2200      	movs	r2, #0
 810627a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	2201      	movs	r2, #1
 8106282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8106286:	687b      	ldr	r3, [r7, #4]
 8106288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810628a:	2b00      	cmp	r3, #0
 810628c:	f000 80b8 	beq.w	8106400 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106294:	6878      	ldr	r0, [r7, #4]
 8106296:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106298:	e0b2      	b.n	8106400 <HAL_DMA_IRQHandler+0xe0c>
 810629a:	bf00      	nop
 810629c:	40020010 	.word	0x40020010
 81062a0:	40020028 	.word	0x40020028
 81062a4:	40020040 	.word	0x40020040
 81062a8:	40020058 	.word	0x40020058
 81062ac:	40020070 	.word	0x40020070
 81062b0:	40020088 	.word	0x40020088
 81062b4:	400200a0 	.word	0x400200a0
 81062b8:	400200b8 	.word	0x400200b8
 81062bc:	40020410 	.word	0x40020410
 81062c0:	40020428 	.word	0x40020428
 81062c4:	40020440 	.word	0x40020440
 81062c8:	40020458 	.word	0x40020458
 81062cc:	40020470 	.word	0x40020470
 81062d0:	40020488 	.word	0x40020488
 81062d4:	400204a0 	.word	0x400204a0
 81062d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81062e0:	f003 031f 	and.w	r3, r3, #31
 81062e4:	2208      	movs	r2, #8
 81062e6:	409a      	lsls	r2, r3
 81062e8:	697b      	ldr	r3, [r7, #20]
 81062ea:	4013      	ands	r3, r2
 81062ec:	2b00      	cmp	r3, #0
 81062ee:	f000 8088 	beq.w	8106402 <HAL_DMA_IRQHandler+0xe0e>
 81062f2:	693b      	ldr	r3, [r7, #16]
 81062f4:	f003 0308 	and.w	r3, r3, #8
 81062f8:	2b00      	cmp	r3, #0
 81062fa:	f000 8082 	beq.w	8106402 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	4a41      	ldr	r2, [pc, #260]	; (8106408 <HAL_DMA_IRQHandler+0xe14>)
 8106304:	4293      	cmp	r3, r2
 8106306:	d04a      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	4a3f      	ldr	r2, [pc, #252]	; (810640c <HAL_DMA_IRQHandler+0xe18>)
 810630e:	4293      	cmp	r3, r2
 8106310:	d045      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	681b      	ldr	r3, [r3, #0]
 8106316:	4a3e      	ldr	r2, [pc, #248]	; (8106410 <HAL_DMA_IRQHandler+0xe1c>)
 8106318:	4293      	cmp	r3, r2
 810631a:	d040      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4a3c      	ldr	r2, [pc, #240]	; (8106414 <HAL_DMA_IRQHandler+0xe20>)
 8106322:	4293      	cmp	r3, r2
 8106324:	d03b      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	4a3b      	ldr	r2, [pc, #236]	; (8106418 <HAL_DMA_IRQHandler+0xe24>)
 810632c:	4293      	cmp	r3, r2
 810632e:	d036      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	4a39      	ldr	r2, [pc, #228]	; (810641c <HAL_DMA_IRQHandler+0xe28>)
 8106336:	4293      	cmp	r3, r2
 8106338:	d031      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	4a38      	ldr	r2, [pc, #224]	; (8106420 <HAL_DMA_IRQHandler+0xe2c>)
 8106340:	4293      	cmp	r3, r2
 8106342:	d02c      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	4a36      	ldr	r2, [pc, #216]	; (8106424 <HAL_DMA_IRQHandler+0xe30>)
 810634a:	4293      	cmp	r3, r2
 810634c:	d027      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	4a35      	ldr	r2, [pc, #212]	; (8106428 <HAL_DMA_IRQHandler+0xe34>)
 8106354:	4293      	cmp	r3, r2
 8106356:	d022      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	4a33      	ldr	r2, [pc, #204]	; (810642c <HAL_DMA_IRQHandler+0xe38>)
 810635e:	4293      	cmp	r3, r2
 8106360:	d01d      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	4a32      	ldr	r2, [pc, #200]	; (8106430 <HAL_DMA_IRQHandler+0xe3c>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d018      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	4a30      	ldr	r2, [pc, #192]	; (8106434 <HAL_DMA_IRQHandler+0xe40>)
 8106372:	4293      	cmp	r3, r2
 8106374:	d013      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	4a2f      	ldr	r2, [pc, #188]	; (8106438 <HAL_DMA_IRQHandler+0xe44>)
 810637c:	4293      	cmp	r3, r2
 810637e:	d00e      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	4a2d      	ldr	r2, [pc, #180]	; (810643c <HAL_DMA_IRQHandler+0xe48>)
 8106386:	4293      	cmp	r3, r2
 8106388:	d009      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 810638a:	687b      	ldr	r3, [r7, #4]
 810638c:	681b      	ldr	r3, [r3, #0]
 810638e:	4a2c      	ldr	r2, [pc, #176]	; (8106440 <HAL_DMA_IRQHandler+0xe4c>)
 8106390:	4293      	cmp	r3, r2
 8106392:	d004      	beq.n	810639e <HAL_DMA_IRQHandler+0xdaa>
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	4a2a      	ldr	r2, [pc, #168]	; (8106444 <HAL_DMA_IRQHandler+0xe50>)
 810639a:	4293      	cmp	r3, r2
 810639c:	d108      	bne.n	81063b0 <HAL_DMA_IRQHandler+0xdbc>
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	681b      	ldr	r3, [r3, #0]
 81063a2:	681a      	ldr	r2, [r3, #0]
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	681b      	ldr	r3, [r3, #0]
 81063a8:	f022 021c 	bic.w	r2, r2, #28
 81063ac:	601a      	str	r2, [r3, #0]
 81063ae:	e007      	b.n	81063c0 <HAL_DMA_IRQHandler+0xdcc>
 81063b0:	687b      	ldr	r3, [r7, #4]
 81063b2:	681b      	ldr	r3, [r3, #0]
 81063b4:	681a      	ldr	r2, [r3, #0]
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	681b      	ldr	r3, [r3, #0]
 81063ba:	f022 020e 	bic.w	r2, r2, #14
 81063be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81063c4:	f003 031f 	and.w	r3, r3, #31
 81063c8:	2201      	movs	r2, #1
 81063ca:	409a      	lsls	r2, r3
 81063cc:	69fb      	ldr	r3, [r7, #28]
 81063ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	2201      	movs	r2, #1
 81063d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	2200      	movs	r2, #0
 81063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	2201      	movs	r2, #1
 81063e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81063ea:	2b00      	cmp	r3, #0
 81063ec:	d009      	beq.n	8106402 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81063f2:	6878      	ldr	r0, [r7, #4]
 81063f4:	4798      	blx	r3
 81063f6:	e004      	b.n	8106402 <HAL_DMA_IRQHandler+0xe0e>
          return;
 81063f8:	bf00      	nop
 81063fa:	e002      	b.n	8106402 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81063fc:	bf00      	nop
 81063fe:	e000      	b.n	8106402 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106400:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106402:	3728      	adds	r7, #40	; 0x28
 8106404:	46bd      	mov	sp, r7
 8106406:	bd80      	pop	{r7, pc}
 8106408:	40020010 	.word	0x40020010
 810640c:	40020028 	.word	0x40020028
 8106410:	40020040 	.word	0x40020040
 8106414:	40020058 	.word	0x40020058
 8106418:	40020070 	.word	0x40020070
 810641c:	40020088 	.word	0x40020088
 8106420:	400200a0 	.word	0x400200a0
 8106424:	400200b8 	.word	0x400200b8
 8106428:	40020410 	.word	0x40020410
 810642c:	40020428 	.word	0x40020428
 8106430:	40020440 	.word	0x40020440
 8106434:	40020458 	.word	0x40020458
 8106438:	40020470 	.word	0x40020470
 810643c:	40020488 	.word	0x40020488
 8106440:	400204a0 	.word	0x400204a0
 8106444:	400204b8 	.word	0x400204b8

08106448 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8106448:	b480      	push	{r7}
 810644a:	b083      	sub	sp, #12
 810644c:	af00      	add	r7, sp, #0
 810644e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8106456:	b2db      	uxtb	r3, r3
}
 8106458:	4618      	mov	r0, r3
 810645a:	370c      	adds	r7, #12
 810645c:	46bd      	mov	sp, r7
 810645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106462:	4770      	bx	lr

08106464 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8106464:	b480      	push	{r7}
 8106466:	b087      	sub	sp, #28
 8106468:	af00      	add	r7, sp, #0
 810646a:	60f8      	str	r0, [r7, #12]
 810646c:	60b9      	str	r1, [r7, #8]
 810646e:	607a      	str	r2, [r7, #4]
 8106470:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8106472:	68fb      	ldr	r3, [r7, #12]
 8106474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106476:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106478:	68fb      	ldr	r3, [r7, #12]
 810647a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810647c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810647e:	68fb      	ldr	r3, [r7, #12]
 8106480:	681b      	ldr	r3, [r3, #0]
 8106482:	4a84      	ldr	r2, [pc, #528]	; (8106694 <DMA_SetConfig+0x230>)
 8106484:	4293      	cmp	r3, r2
 8106486:	d072      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106488:	68fb      	ldr	r3, [r7, #12]
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	4a82      	ldr	r2, [pc, #520]	; (8106698 <DMA_SetConfig+0x234>)
 810648e:	4293      	cmp	r3, r2
 8106490:	d06d      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106492:	68fb      	ldr	r3, [r7, #12]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	4a81      	ldr	r2, [pc, #516]	; (810669c <DMA_SetConfig+0x238>)
 8106498:	4293      	cmp	r3, r2
 810649a:	d068      	beq.n	810656e <DMA_SetConfig+0x10a>
 810649c:	68fb      	ldr	r3, [r7, #12]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	4a7f      	ldr	r2, [pc, #508]	; (81066a0 <DMA_SetConfig+0x23c>)
 81064a2:	4293      	cmp	r3, r2
 81064a4:	d063      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064a6:	68fb      	ldr	r3, [r7, #12]
 81064a8:	681b      	ldr	r3, [r3, #0]
 81064aa:	4a7e      	ldr	r2, [pc, #504]	; (81066a4 <DMA_SetConfig+0x240>)
 81064ac:	4293      	cmp	r3, r2
 81064ae:	d05e      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064b0:	68fb      	ldr	r3, [r7, #12]
 81064b2:	681b      	ldr	r3, [r3, #0]
 81064b4:	4a7c      	ldr	r2, [pc, #496]	; (81066a8 <DMA_SetConfig+0x244>)
 81064b6:	4293      	cmp	r3, r2
 81064b8:	d059      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064ba:	68fb      	ldr	r3, [r7, #12]
 81064bc:	681b      	ldr	r3, [r3, #0]
 81064be:	4a7b      	ldr	r2, [pc, #492]	; (81066ac <DMA_SetConfig+0x248>)
 81064c0:	4293      	cmp	r3, r2
 81064c2:	d054      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064c4:	68fb      	ldr	r3, [r7, #12]
 81064c6:	681b      	ldr	r3, [r3, #0]
 81064c8:	4a79      	ldr	r2, [pc, #484]	; (81066b0 <DMA_SetConfig+0x24c>)
 81064ca:	4293      	cmp	r3, r2
 81064cc:	d04f      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064ce:	68fb      	ldr	r3, [r7, #12]
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	4a78      	ldr	r2, [pc, #480]	; (81066b4 <DMA_SetConfig+0x250>)
 81064d4:	4293      	cmp	r3, r2
 81064d6:	d04a      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064d8:	68fb      	ldr	r3, [r7, #12]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	4a76      	ldr	r2, [pc, #472]	; (81066b8 <DMA_SetConfig+0x254>)
 81064de:	4293      	cmp	r3, r2
 81064e0:	d045      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064e2:	68fb      	ldr	r3, [r7, #12]
 81064e4:	681b      	ldr	r3, [r3, #0]
 81064e6:	4a75      	ldr	r2, [pc, #468]	; (81066bc <DMA_SetConfig+0x258>)
 81064e8:	4293      	cmp	r3, r2
 81064ea:	d040      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064ec:	68fb      	ldr	r3, [r7, #12]
 81064ee:	681b      	ldr	r3, [r3, #0]
 81064f0:	4a73      	ldr	r2, [pc, #460]	; (81066c0 <DMA_SetConfig+0x25c>)
 81064f2:	4293      	cmp	r3, r2
 81064f4:	d03b      	beq.n	810656e <DMA_SetConfig+0x10a>
 81064f6:	68fb      	ldr	r3, [r7, #12]
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	4a72      	ldr	r2, [pc, #456]	; (81066c4 <DMA_SetConfig+0x260>)
 81064fc:	4293      	cmp	r3, r2
 81064fe:	d036      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106500:	68fb      	ldr	r3, [r7, #12]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	4a70      	ldr	r2, [pc, #448]	; (81066c8 <DMA_SetConfig+0x264>)
 8106506:	4293      	cmp	r3, r2
 8106508:	d031      	beq.n	810656e <DMA_SetConfig+0x10a>
 810650a:	68fb      	ldr	r3, [r7, #12]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a6f      	ldr	r2, [pc, #444]	; (81066cc <DMA_SetConfig+0x268>)
 8106510:	4293      	cmp	r3, r2
 8106512:	d02c      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106514:	68fb      	ldr	r3, [r7, #12]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	4a6d      	ldr	r2, [pc, #436]	; (81066d0 <DMA_SetConfig+0x26c>)
 810651a:	4293      	cmp	r3, r2
 810651c:	d027      	beq.n	810656e <DMA_SetConfig+0x10a>
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	4a6c      	ldr	r2, [pc, #432]	; (81066d4 <DMA_SetConfig+0x270>)
 8106524:	4293      	cmp	r3, r2
 8106526:	d022      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106528:	68fb      	ldr	r3, [r7, #12]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	4a6a      	ldr	r2, [pc, #424]	; (81066d8 <DMA_SetConfig+0x274>)
 810652e:	4293      	cmp	r3, r2
 8106530:	d01d      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106532:	68fb      	ldr	r3, [r7, #12]
 8106534:	681b      	ldr	r3, [r3, #0]
 8106536:	4a69      	ldr	r2, [pc, #420]	; (81066dc <DMA_SetConfig+0x278>)
 8106538:	4293      	cmp	r3, r2
 810653a:	d018      	beq.n	810656e <DMA_SetConfig+0x10a>
 810653c:	68fb      	ldr	r3, [r7, #12]
 810653e:	681b      	ldr	r3, [r3, #0]
 8106540:	4a67      	ldr	r2, [pc, #412]	; (81066e0 <DMA_SetConfig+0x27c>)
 8106542:	4293      	cmp	r3, r2
 8106544:	d013      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106546:	68fb      	ldr	r3, [r7, #12]
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	4a66      	ldr	r2, [pc, #408]	; (81066e4 <DMA_SetConfig+0x280>)
 810654c:	4293      	cmp	r3, r2
 810654e:	d00e      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	4a64      	ldr	r2, [pc, #400]	; (81066e8 <DMA_SetConfig+0x284>)
 8106556:	4293      	cmp	r3, r2
 8106558:	d009      	beq.n	810656e <DMA_SetConfig+0x10a>
 810655a:	68fb      	ldr	r3, [r7, #12]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	4a63      	ldr	r2, [pc, #396]	; (81066ec <DMA_SetConfig+0x288>)
 8106560:	4293      	cmp	r3, r2
 8106562:	d004      	beq.n	810656e <DMA_SetConfig+0x10a>
 8106564:	68fb      	ldr	r3, [r7, #12]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	4a61      	ldr	r2, [pc, #388]	; (81066f0 <DMA_SetConfig+0x28c>)
 810656a:	4293      	cmp	r3, r2
 810656c:	d101      	bne.n	8106572 <DMA_SetConfig+0x10e>
 810656e:	2301      	movs	r3, #1
 8106570:	e000      	b.n	8106574 <DMA_SetConfig+0x110>
 8106572:	2300      	movs	r3, #0
 8106574:	2b00      	cmp	r3, #0
 8106576:	d00d      	beq.n	8106594 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106578:	68fb      	ldr	r3, [r7, #12]
 810657a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810657c:	68fa      	ldr	r2, [r7, #12]
 810657e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8106580:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8106582:	68fb      	ldr	r3, [r7, #12]
 8106584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106586:	2b00      	cmp	r3, #0
 8106588:	d004      	beq.n	8106594 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810658a:	68fb      	ldr	r3, [r7, #12]
 810658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810658e:	68fa      	ldr	r2, [r7, #12]
 8106590:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8106592:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106594:	68fb      	ldr	r3, [r7, #12]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	4a3e      	ldr	r2, [pc, #248]	; (8106694 <DMA_SetConfig+0x230>)
 810659a:	4293      	cmp	r3, r2
 810659c:	d04a      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 810659e:	68fb      	ldr	r3, [r7, #12]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	4a3d      	ldr	r2, [pc, #244]	; (8106698 <DMA_SetConfig+0x234>)
 81065a4:	4293      	cmp	r3, r2
 81065a6:	d045      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065a8:	68fb      	ldr	r3, [r7, #12]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	4a3b      	ldr	r2, [pc, #236]	; (810669c <DMA_SetConfig+0x238>)
 81065ae:	4293      	cmp	r3, r2
 81065b0:	d040      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	4a3a      	ldr	r2, [pc, #232]	; (81066a0 <DMA_SetConfig+0x23c>)
 81065b8:	4293      	cmp	r3, r2
 81065ba:	d03b      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065bc:	68fb      	ldr	r3, [r7, #12]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	4a38      	ldr	r2, [pc, #224]	; (81066a4 <DMA_SetConfig+0x240>)
 81065c2:	4293      	cmp	r3, r2
 81065c4:	d036      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065c6:	68fb      	ldr	r3, [r7, #12]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	4a37      	ldr	r2, [pc, #220]	; (81066a8 <DMA_SetConfig+0x244>)
 81065cc:	4293      	cmp	r3, r2
 81065ce:	d031      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065d0:	68fb      	ldr	r3, [r7, #12]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	4a35      	ldr	r2, [pc, #212]	; (81066ac <DMA_SetConfig+0x248>)
 81065d6:	4293      	cmp	r3, r2
 81065d8:	d02c      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	4a34      	ldr	r2, [pc, #208]	; (81066b0 <DMA_SetConfig+0x24c>)
 81065e0:	4293      	cmp	r3, r2
 81065e2:	d027      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065e4:	68fb      	ldr	r3, [r7, #12]
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	4a32      	ldr	r2, [pc, #200]	; (81066b4 <DMA_SetConfig+0x250>)
 81065ea:	4293      	cmp	r3, r2
 81065ec:	d022      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065ee:	68fb      	ldr	r3, [r7, #12]
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	4a31      	ldr	r2, [pc, #196]	; (81066b8 <DMA_SetConfig+0x254>)
 81065f4:	4293      	cmp	r3, r2
 81065f6:	d01d      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 81065f8:	68fb      	ldr	r3, [r7, #12]
 81065fa:	681b      	ldr	r3, [r3, #0]
 81065fc:	4a2f      	ldr	r2, [pc, #188]	; (81066bc <DMA_SetConfig+0x258>)
 81065fe:	4293      	cmp	r3, r2
 8106600:	d018      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 8106602:	68fb      	ldr	r3, [r7, #12]
 8106604:	681b      	ldr	r3, [r3, #0]
 8106606:	4a2e      	ldr	r2, [pc, #184]	; (81066c0 <DMA_SetConfig+0x25c>)
 8106608:	4293      	cmp	r3, r2
 810660a:	d013      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 810660c:	68fb      	ldr	r3, [r7, #12]
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	4a2c      	ldr	r2, [pc, #176]	; (81066c4 <DMA_SetConfig+0x260>)
 8106612:	4293      	cmp	r3, r2
 8106614:	d00e      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 8106616:	68fb      	ldr	r3, [r7, #12]
 8106618:	681b      	ldr	r3, [r3, #0]
 810661a:	4a2b      	ldr	r2, [pc, #172]	; (81066c8 <DMA_SetConfig+0x264>)
 810661c:	4293      	cmp	r3, r2
 810661e:	d009      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 8106620:	68fb      	ldr	r3, [r7, #12]
 8106622:	681b      	ldr	r3, [r3, #0]
 8106624:	4a29      	ldr	r2, [pc, #164]	; (81066cc <DMA_SetConfig+0x268>)
 8106626:	4293      	cmp	r3, r2
 8106628:	d004      	beq.n	8106634 <DMA_SetConfig+0x1d0>
 810662a:	68fb      	ldr	r3, [r7, #12]
 810662c:	681b      	ldr	r3, [r3, #0]
 810662e:	4a28      	ldr	r2, [pc, #160]	; (81066d0 <DMA_SetConfig+0x26c>)
 8106630:	4293      	cmp	r3, r2
 8106632:	d101      	bne.n	8106638 <DMA_SetConfig+0x1d4>
 8106634:	2301      	movs	r3, #1
 8106636:	e000      	b.n	810663a <DMA_SetConfig+0x1d6>
 8106638:	2300      	movs	r3, #0
 810663a:	2b00      	cmp	r3, #0
 810663c:	d05a      	beq.n	81066f4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810663e:	68fb      	ldr	r3, [r7, #12]
 8106640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106642:	f003 031f 	and.w	r3, r3, #31
 8106646:	223f      	movs	r2, #63	; 0x3f
 8106648:	409a      	lsls	r2, r3
 810664a:	697b      	ldr	r3, [r7, #20]
 810664c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810664e:	68fb      	ldr	r3, [r7, #12]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	681a      	ldr	r2, [r3, #0]
 8106654:	68fb      	ldr	r3, [r7, #12]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810665c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	683a      	ldr	r2, [r7, #0]
 8106664:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106666:	68fb      	ldr	r3, [r7, #12]
 8106668:	689b      	ldr	r3, [r3, #8]
 810666a:	2b40      	cmp	r3, #64	; 0x40
 810666c:	d108      	bne.n	8106680 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810666e:	68fb      	ldr	r3, [r7, #12]
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	687a      	ldr	r2, [r7, #4]
 8106674:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	68ba      	ldr	r2, [r7, #8]
 810667c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810667e:	e087      	b.n	8106790 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8106680:	68fb      	ldr	r3, [r7, #12]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	68ba      	ldr	r2, [r7, #8]
 8106686:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8106688:	68fb      	ldr	r3, [r7, #12]
 810668a:	681b      	ldr	r3, [r3, #0]
 810668c:	687a      	ldr	r2, [r7, #4]
 810668e:	60da      	str	r2, [r3, #12]
}
 8106690:	e07e      	b.n	8106790 <DMA_SetConfig+0x32c>
 8106692:	bf00      	nop
 8106694:	40020010 	.word	0x40020010
 8106698:	40020028 	.word	0x40020028
 810669c:	40020040 	.word	0x40020040
 81066a0:	40020058 	.word	0x40020058
 81066a4:	40020070 	.word	0x40020070
 81066a8:	40020088 	.word	0x40020088
 81066ac:	400200a0 	.word	0x400200a0
 81066b0:	400200b8 	.word	0x400200b8
 81066b4:	40020410 	.word	0x40020410
 81066b8:	40020428 	.word	0x40020428
 81066bc:	40020440 	.word	0x40020440
 81066c0:	40020458 	.word	0x40020458
 81066c4:	40020470 	.word	0x40020470
 81066c8:	40020488 	.word	0x40020488
 81066cc:	400204a0 	.word	0x400204a0
 81066d0:	400204b8 	.word	0x400204b8
 81066d4:	58025408 	.word	0x58025408
 81066d8:	5802541c 	.word	0x5802541c
 81066dc:	58025430 	.word	0x58025430
 81066e0:	58025444 	.word	0x58025444
 81066e4:	58025458 	.word	0x58025458
 81066e8:	5802546c 	.word	0x5802546c
 81066ec:	58025480 	.word	0x58025480
 81066f0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81066f4:	68fb      	ldr	r3, [r7, #12]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	4a28      	ldr	r2, [pc, #160]	; (810679c <DMA_SetConfig+0x338>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	d022      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 81066fe:	68fb      	ldr	r3, [r7, #12]
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	4a27      	ldr	r2, [pc, #156]	; (81067a0 <DMA_SetConfig+0x33c>)
 8106704:	4293      	cmp	r3, r2
 8106706:	d01d      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 8106708:	68fb      	ldr	r3, [r7, #12]
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	4a25      	ldr	r2, [pc, #148]	; (81067a4 <DMA_SetConfig+0x340>)
 810670e:	4293      	cmp	r3, r2
 8106710:	d018      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 8106712:	68fb      	ldr	r3, [r7, #12]
 8106714:	681b      	ldr	r3, [r3, #0]
 8106716:	4a24      	ldr	r2, [pc, #144]	; (81067a8 <DMA_SetConfig+0x344>)
 8106718:	4293      	cmp	r3, r2
 810671a:	d013      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 810671c:	68fb      	ldr	r3, [r7, #12]
 810671e:	681b      	ldr	r3, [r3, #0]
 8106720:	4a22      	ldr	r2, [pc, #136]	; (81067ac <DMA_SetConfig+0x348>)
 8106722:	4293      	cmp	r3, r2
 8106724:	d00e      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 8106726:	68fb      	ldr	r3, [r7, #12]
 8106728:	681b      	ldr	r3, [r3, #0]
 810672a:	4a21      	ldr	r2, [pc, #132]	; (81067b0 <DMA_SetConfig+0x34c>)
 810672c:	4293      	cmp	r3, r2
 810672e:	d009      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 8106730:	68fb      	ldr	r3, [r7, #12]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	4a1f      	ldr	r2, [pc, #124]	; (81067b4 <DMA_SetConfig+0x350>)
 8106736:	4293      	cmp	r3, r2
 8106738:	d004      	beq.n	8106744 <DMA_SetConfig+0x2e0>
 810673a:	68fb      	ldr	r3, [r7, #12]
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	4a1e      	ldr	r2, [pc, #120]	; (81067b8 <DMA_SetConfig+0x354>)
 8106740:	4293      	cmp	r3, r2
 8106742:	d101      	bne.n	8106748 <DMA_SetConfig+0x2e4>
 8106744:	2301      	movs	r3, #1
 8106746:	e000      	b.n	810674a <DMA_SetConfig+0x2e6>
 8106748:	2300      	movs	r3, #0
 810674a:	2b00      	cmp	r3, #0
 810674c:	d020      	beq.n	8106790 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810674e:	68fb      	ldr	r3, [r7, #12]
 8106750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106752:	f003 031f 	and.w	r3, r3, #31
 8106756:	2201      	movs	r2, #1
 8106758:	409a      	lsls	r2, r3
 810675a:	693b      	ldr	r3, [r7, #16]
 810675c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810675e:	68fb      	ldr	r3, [r7, #12]
 8106760:	681b      	ldr	r3, [r3, #0]
 8106762:	683a      	ldr	r2, [r7, #0]
 8106764:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8106766:	68fb      	ldr	r3, [r7, #12]
 8106768:	689b      	ldr	r3, [r3, #8]
 810676a:	2b40      	cmp	r3, #64	; 0x40
 810676c:	d108      	bne.n	8106780 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810676e:	68fb      	ldr	r3, [r7, #12]
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	687a      	ldr	r2, [r7, #4]
 8106774:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8106776:	68fb      	ldr	r3, [r7, #12]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	68ba      	ldr	r2, [r7, #8]
 810677c:	60da      	str	r2, [r3, #12]
}
 810677e:	e007      	b.n	8106790 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106780:	68fb      	ldr	r3, [r7, #12]
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	68ba      	ldr	r2, [r7, #8]
 8106786:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8106788:	68fb      	ldr	r3, [r7, #12]
 810678a:	681b      	ldr	r3, [r3, #0]
 810678c:	687a      	ldr	r2, [r7, #4]
 810678e:	60da      	str	r2, [r3, #12]
}
 8106790:	bf00      	nop
 8106792:	371c      	adds	r7, #28
 8106794:	46bd      	mov	sp, r7
 8106796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679a:	4770      	bx	lr
 810679c:	58025408 	.word	0x58025408
 81067a0:	5802541c 	.word	0x5802541c
 81067a4:	58025430 	.word	0x58025430
 81067a8:	58025444 	.word	0x58025444
 81067ac:	58025458 	.word	0x58025458
 81067b0:	5802546c 	.word	0x5802546c
 81067b4:	58025480 	.word	0x58025480
 81067b8:	58025494 	.word	0x58025494

081067bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81067bc:	b480      	push	{r7}
 81067be:	b085      	sub	sp, #20
 81067c0:	af00      	add	r7, sp, #0
 81067c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	4a43      	ldr	r2, [pc, #268]	; (81068d8 <DMA_CalcBaseAndBitshift+0x11c>)
 81067ca:	4293      	cmp	r3, r2
 81067cc:	d04a      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	4a42      	ldr	r2, [pc, #264]	; (81068dc <DMA_CalcBaseAndBitshift+0x120>)
 81067d4:	4293      	cmp	r3, r2
 81067d6:	d045      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	681b      	ldr	r3, [r3, #0]
 81067dc:	4a40      	ldr	r2, [pc, #256]	; (81068e0 <DMA_CalcBaseAndBitshift+0x124>)
 81067de:	4293      	cmp	r3, r2
 81067e0:	d040      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	4a3f      	ldr	r2, [pc, #252]	; (81068e4 <DMA_CalcBaseAndBitshift+0x128>)
 81067e8:	4293      	cmp	r3, r2
 81067ea:	d03b      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	681b      	ldr	r3, [r3, #0]
 81067f0:	4a3d      	ldr	r2, [pc, #244]	; (81068e8 <DMA_CalcBaseAndBitshift+0x12c>)
 81067f2:	4293      	cmp	r3, r2
 81067f4:	d036      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	4a3c      	ldr	r2, [pc, #240]	; (81068ec <DMA_CalcBaseAndBitshift+0x130>)
 81067fc:	4293      	cmp	r3, r2
 81067fe:	d031      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 8106800:	687b      	ldr	r3, [r7, #4]
 8106802:	681b      	ldr	r3, [r3, #0]
 8106804:	4a3a      	ldr	r2, [pc, #232]	; (81068f0 <DMA_CalcBaseAndBitshift+0x134>)
 8106806:	4293      	cmp	r3, r2
 8106808:	d02c      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	681b      	ldr	r3, [r3, #0]
 810680e:	4a39      	ldr	r2, [pc, #228]	; (81068f4 <DMA_CalcBaseAndBitshift+0x138>)
 8106810:	4293      	cmp	r3, r2
 8106812:	d027      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	4a37      	ldr	r2, [pc, #220]	; (81068f8 <DMA_CalcBaseAndBitshift+0x13c>)
 810681a:	4293      	cmp	r3, r2
 810681c:	d022      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	681b      	ldr	r3, [r3, #0]
 8106822:	4a36      	ldr	r2, [pc, #216]	; (81068fc <DMA_CalcBaseAndBitshift+0x140>)
 8106824:	4293      	cmp	r3, r2
 8106826:	d01d      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	4a34      	ldr	r2, [pc, #208]	; (8106900 <DMA_CalcBaseAndBitshift+0x144>)
 810682e:	4293      	cmp	r3, r2
 8106830:	d018      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	681b      	ldr	r3, [r3, #0]
 8106836:	4a33      	ldr	r2, [pc, #204]	; (8106904 <DMA_CalcBaseAndBitshift+0x148>)
 8106838:	4293      	cmp	r3, r2
 810683a:	d013      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	4a31      	ldr	r2, [pc, #196]	; (8106908 <DMA_CalcBaseAndBitshift+0x14c>)
 8106842:	4293      	cmp	r3, r2
 8106844:	d00e      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	681b      	ldr	r3, [r3, #0]
 810684a:	4a30      	ldr	r2, [pc, #192]	; (810690c <DMA_CalcBaseAndBitshift+0x150>)
 810684c:	4293      	cmp	r3, r2
 810684e:	d009      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	681b      	ldr	r3, [r3, #0]
 8106854:	4a2e      	ldr	r2, [pc, #184]	; (8106910 <DMA_CalcBaseAndBitshift+0x154>)
 8106856:	4293      	cmp	r3, r2
 8106858:	d004      	beq.n	8106864 <DMA_CalcBaseAndBitshift+0xa8>
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	4a2d      	ldr	r2, [pc, #180]	; (8106914 <DMA_CalcBaseAndBitshift+0x158>)
 8106860:	4293      	cmp	r3, r2
 8106862:	d101      	bne.n	8106868 <DMA_CalcBaseAndBitshift+0xac>
 8106864:	2301      	movs	r3, #1
 8106866:	e000      	b.n	810686a <DMA_CalcBaseAndBitshift+0xae>
 8106868:	2300      	movs	r3, #0
 810686a:	2b00      	cmp	r3, #0
 810686c:	d026      	beq.n	81068bc <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	681b      	ldr	r3, [r3, #0]
 8106872:	b2db      	uxtb	r3, r3
 8106874:	3b10      	subs	r3, #16
 8106876:	4a28      	ldr	r2, [pc, #160]	; (8106918 <DMA_CalcBaseAndBitshift+0x15c>)
 8106878:	fba2 2303 	umull	r2, r3, r2, r3
 810687c:	091b      	lsrs	r3, r3, #4
 810687e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106880:	68fb      	ldr	r3, [r7, #12]
 8106882:	f003 0307 	and.w	r3, r3, #7
 8106886:	4a25      	ldr	r2, [pc, #148]	; (810691c <DMA_CalcBaseAndBitshift+0x160>)
 8106888:	5cd3      	ldrb	r3, [r2, r3]
 810688a:	461a      	mov	r2, r3
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106890:	68fb      	ldr	r3, [r7, #12]
 8106892:	2b03      	cmp	r3, #3
 8106894:	d909      	bls.n	81068aa <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810689e:	f023 0303 	bic.w	r3, r3, #3
 81068a2:	1d1a      	adds	r2, r3, #4
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	659a      	str	r2, [r3, #88]	; 0x58
 81068a8:	e00e      	b.n	81068c8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81068b2:	f023 0303 	bic.w	r3, r3, #3
 81068b6:	687a      	ldr	r2, [r7, #4]
 81068b8:	6593      	str	r3, [r2, #88]	; 0x58
 81068ba:	e005      	b.n	81068c8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81068c8:	687b      	ldr	r3, [r7, #4]
 81068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81068cc:	4618      	mov	r0, r3
 81068ce:	3714      	adds	r7, #20
 81068d0:	46bd      	mov	sp, r7
 81068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068d6:	4770      	bx	lr
 81068d8:	40020010 	.word	0x40020010
 81068dc:	40020028 	.word	0x40020028
 81068e0:	40020040 	.word	0x40020040
 81068e4:	40020058 	.word	0x40020058
 81068e8:	40020070 	.word	0x40020070
 81068ec:	40020088 	.word	0x40020088
 81068f0:	400200a0 	.word	0x400200a0
 81068f4:	400200b8 	.word	0x400200b8
 81068f8:	40020410 	.word	0x40020410
 81068fc:	40020428 	.word	0x40020428
 8106900:	40020440 	.word	0x40020440
 8106904:	40020458 	.word	0x40020458
 8106908:	40020470 	.word	0x40020470
 810690c:	40020488 	.word	0x40020488
 8106910:	400204a0 	.word	0x400204a0
 8106914:	400204b8 	.word	0x400204b8
 8106918:	aaaaaaab 	.word	0xaaaaaaab
 810691c:	0810e504 	.word	0x0810e504

08106920 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106920:	b480      	push	{r7}
 8106922:	b085      	sub	sp, #20
 8106924:	af00      	add	r7, sp, #0
 8106926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106928:	2300      	movs	r3, #0
 810692a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810692c:	687b      	ldr	r3, [r7, #4]
 810692e:	699b      	ldr	r3, [r3, #24]
 8106930:	2b00      	cmp	r3, #0
 8106932:	d120      	bne.n	8106976 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106938:	2b03      	cmp	r3, #3
 810693a:	d858      	bhi.n	81069ee <DMA_CheckFifoParam+0xce>
 810693c:	a201      	add	r2, pc, #4	; (adr r2, 8106944 <DMA_CheckFifoParam+0x24>)
 810693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106942:	bf00      	nop
 8106944:	08106955 	.word	0x08106955
 8106948:	08106967 	.word	0x08106967
 810694c:	08106955 	.word	0x08106955
 8106950:	081069ef 	.word	0x081069ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810695c:	2b00      	cmp	r3, #0
 810695e:	d048      	beq.n	81069f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106960:	2301      	movs	r3, #1
 8106962:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106964:	e045      	b.n	81069f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810696a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810696e:	d142      	bne.n	81069f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106970:	2301      	movs	r3, #1
 8106972:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106974:	e03f      	b.n	81069f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	699b      	ldr	r3, [r3, #24]
 810697a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810697e:	d123      	bne.n	81069c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106984:	2b03      	cmp	r3, #3
 8106986:	d838      	bhi.n	81069fa <DMA_CheckFifoParam+0xda>
 8106988:	a201      	add	r2, pc, #4	; (adr r2, 8106990 <DMA_CheckFifoParam+0x70>)
 810698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810698e:	bf00      	nop
 8106990:	081069a1 	.word	0x081069a1
 8106994:	081069a7 	.word	0x081069a7
 8106998:	081069a1 	.word	0x081069a1
 810699c:	081069b9 	.word	0x081069b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81069a0:	2301      	movs	r3, #1
 81069a2:	73fb      	strb	r3, [r7, #15]
        break;
 81069a4:	e030      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81069a6:	687b      	ldr	r3, [r7, #4]
 81069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81069ae:	2b00      	cmp	r3, #0
 81069b0:	d025      	beq.n	81069fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81069b2:	2301      	movs	r3, #1
 81069b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81069b6:	e022      	b.n	81069fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81069c0:	d11f      	bne.n	8106a02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81069c2:	2301      	movs	r3, #1
 81069c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81069c6:	e01c      	b.n	8106a02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069cc:	2b02      	cmp	r3, #2
 81069ce:	d902      	bls.n	81069d6 <DMA_CheckFifoParam+0xb6>
 81069d0:	2b03      	cmp	r3, #3
 81069d2:	d003      	beq.n	81069dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81069d4:	e018      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81069d6:	2301      	movs	r3, #1
 81069d8:	73fb      	strb	r3, [r7, #15]
        break;
 81069da:	e015      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81069e4:	2b00      	cmp	r3, #0
 81069e6:	d00e      	beq.n	8106a06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81069e8:	2301      	movs	r3, #1
 81069ea:	73fb      	strb	r3, [r7, #15]
    break;
 81069ec:	e00b      	b.n	8106a06 <DMA_CheckFifoParam+0xe6>
        break;
 81069ee:	bf00      	nop
 81069f0:	e00a      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        break;
 81069f2:	bf00      	nop
 81069f4:	e008      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        break;
 81069f6:	bf00      	nop
 81069f8:	e006      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        break;
 81069fa:	bf00      	nop
 81069fc:	e004      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        break;
 81069fe:	bf00      	nop
 8106a00:	e002      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
        break;
 8106a02:	bf00      	nop
 8106a04:	e000      	b.n	8106a08 <DMA_CheckFifoParam+0xe8>
    break;
 8106a06:	bf00      	nop
    }
  }

  return status;
 8106a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8106a0a:	4618      	mov	r0, r3
 8106a0c:	3714      	adds	r7, #20
 8106a0e:	46bd      	mov	sp, r7
 8106a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a14:	4770      	bx	lr
 8106a16:	bf00      	nop

08106a18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106a18:	b480      	push	{r7}
 8106a1a:	b085      	sub	sp, #20
 8106a1c:	af00      	add	r7, sp, #0
 8106a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	4a3a      	ldr	r2, [pc, #232]	; (8106b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106a2c:	4293      	cmp	r3, r2
 8106a2e:	d022      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	4a38      	ldr	r2, [pc, #224]	; (8106b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106a36:	4293      	cmp	r3, r2
 8106a38:	d01d      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	4a37      	ldr	r2, [pc, #220]	; (8106b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106a40:	4293      	cmp	r3, r2
 8106a42:	d018      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a44:	687b      	ldr	r3, [r7, #4]
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	4a35      	ldr	r2, [pc, #212]	; (8106b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106a4a:	4293      	cmp	r3, r2
 8106a4c:	d013      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	4a34      	ldr	r2, [pc, #208]	; (8106b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106a54:	4293      	cmp	r3, r2
 8106a56:	d00e      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	4a32      	ldr	r2, [pc, #200]	; (8106b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106a5e:	4293      	cmp	r3, r2
 8106a60:	d009      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	4a31      	ldr	r2, [pc, #196]	; (8106b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106a68:	4293      	cmp	r3, r2
 8106a6a:	d004      	beq.n	8106a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	681b      	ldr	r3, [r3, #0]
 8106a70:	4a2f      	ldr	r2, [pc, #188]	; (8106b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106a72:	4293      	cmp	r3, r2
 8106a74:	d101      	bne.n	8106a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106a76:	2301      	movs	r3, #1
 8106a78:	e000      	b.n	8106a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106a7a:	2300      	movs	r3, #0
 8106a7c:	2b00      	cmp	r3, #0
 8106a7e:	d01c      	beq.n	8106aba <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	b2db      	uxtb	r3, r3
 8106a86:	3b08      	subs	r3, #8
 8106a88:	4a2a      	ldr	r2, [pc, #168]	; (8106b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8106a8e:	091b      	lsrs	r3, r3, #4
 8106a90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106a92:	68fb      	ldr	r3, [r7, #12]
 8106a94:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106a98:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106a9c:	009b      	lsls	r3, r3, #2
 8106a9e:	461a      	mov	r2, r3
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	4a24      	ldr	r2, [pc, #144]	; (8106b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106aa8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106aaa:	68fb      	ldr	r3, [r7, #12]
 8106aac:	f003 031f 	and.w	r3, r3, #31
 8106ab0:	2201      	movs	r2, #1
 8106ab2:	409a      	lsls	r2, r3
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106ab8:	e026      	b.n	8106b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	b2db      	uxtb	r3, r3
 8106ac0:	3b10      	subs	r3, #16
 8106ac2:	4a1e      	ldr	r2, [pc, #120]	; (8106b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8106ac8:	091b      	lsrs	r3, r3, #4
 8106aca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106acc:	68bb      	ldr	r3, [r7, #8]
 8106ace:	4a1c      	ldr	r2, [pc, #112]	; (8106b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106ad0:	4293      	cmp	r3, r2
 8106ad2:	d806      	bhi.n	8106ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106ad4:	68bb      	ldr	r3, [r7, #8]
 8106ad6:	4a1b      	ldr	r2, [pc, #108]	; (8106b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106ad8:	4293      	cmp	r3, r2
 8106ada:	d902      	bls.n	8106ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106adc:	68fb      	ldr	r3, [r7, #12]
 8106ade:	3308      	adds	r3, #8
 8106ae0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106ae2:	68fb      	ldr	r3, [r7, #12]
 8106ae4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8106ae8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106aec:	009b      	lsls	r3, r3, #2
 8106aee:	461a      	mov	r2, r3
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	4a14      	ldr	r2, [pc, #80]	; (8106b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106af8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106afa:	68fb      	ldr	r3, [r7, #12]
 8106afc:	f003 031f 	and.w	r3, r3, #31
 8106b00:	2201      	movs	r2, #1
 8106b02:	409a      	lsls	r2, r3
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106b08:	bf00      	nop
 8106b0a:	3714      	adds	r7, #20
 8106b0c:	46bd      	mov	sp, r7
 8106b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b12:	4770      	bx	lr
 8106b14:	58025408 	.word	0x58025408
 8106b18:	5802541c 	.word	0x5802541c
 8106b1c:	58025430 	.word	0x58025430
 8106b20:	58025444 	.word	0x58025444
 8106b24:	58025458 	.word	0x58025458
 8106b28:	5802546c 	.word	0x5802546c
 8106b2c:	58025480 	.word	0x58025480
 8106b30:	58025494 	.word	0x58025494
 8106b34:	cccccccd 	.word	0xcccccccd
 8106b38:	58025880 	.word	0x58025880
 8106b3c:	aaaaaaab 	.word	0xaaaaaaab
 8106b40:	400204b8 	.word	0x400204b8
 8106b44:	4002040f 	.word	0x4002040f
 8106b48:	40020880 	.word	0x40020880

08106b4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106b4c:	b480      	push	{r7}
 8106b4e:	b085      	sub	sp, #20
 8106b50:	af00      	add	r7, sp, #0
 8106b52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	685b      	ldr	r3, [r3, #4]
 8106b58:	b2db      	uxtb	r3, r3
 8106b5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106b5c:	68fb      	ldr	r3, [r7, #12]
 8106b5e:	2b00      	cmp	r3, #0
 8106b60:	d04a      	beq.n	8106bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106b62:	68fb      	ldr	r3, [r7, #12]
 8106b64:	2b08      	cmp	r3, #8
 8106b66:	d847      	bhi.n	8106bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	681b      	ldr	r3, [r3, #0]
 8106b6c:	4a25      	ldr	r2, [pc, #148]	; (8106c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106b6e:	4293      	cmp	r3, r2
 8106b70:	d022      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	681b      	ldr	r3, [r3, #0]
 8106b76:	4a24      	ldr	r2, [pc, #144]	; (8106c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106b78:	4293      	cmp	r3, r2
 8106b7a:	d01d      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	681b      	ldr	r3, [r3, #0]
 8106b80:	4a22      	ldr	r2, [pc, #136]	; (8106c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106b82:	4293      	cmp	r3, r2
 8106b84:	d018      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	4a21      	ldr	r2, [pc, #132]	; (8106c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106b8c:	4293      	cmp	r3, r2
 8106b8e:	d013      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	4a1f      	ldr	r2, [pc, #124]	; (8106c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106b96:	4293      	cmp	r3, r2
 8106b98:	d00e      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	4a1e      	ldr	r2, [pc, #120]	; (8106c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106ba0:	4293      	cmp	r3, r2
 8106ba2:	d009      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	4a1c      	ldr	r2, [pc, #112]	; (8106c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106baa:	4293      	cmp	r3, r2
 8106bac:	d004      	beq.n	8106bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	681b      	ldr	r3, [r3, #0]
 8106bb2:	4a1b      	ldr	r2, [pc, #108]	; (8106c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106bb4:	4293      	cmp	r3, r2
 8106bb6:	d101      	bne.n	8106bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106bb8:	2301      	movs	r3, #1
 8106bba:	e000      	b.n	8106bbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106bbc:	2300      	movs	r3, #0
 8106bbe:	2b00      	cmp	r3, #0
 8106bc0:	d00a      	beq.n	8106bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106bc2:	68fa      	ldr	r2, [r7, #12]
 8106bc4:	4b17      	ldr	r3, [pc, #92]	; (8106c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106bc6:	4413      	add	r3, r2
 8106bc8:	009b      	lsls	r3, r3, #2
 8106bca:	461a      	mov	r2, r3
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	4a15      	ldr	r2, [pc, #84]	; (8106c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106bd4:	671a      	str	r2, [r3, #112]	; 0x70
 8106bd6:	e009      	b.n	8106bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106bd8:	68fa      	ldr	r2, [r7, #12]
 8106bda:	4b14      	ldr	r3, [pc, #80]	; (8106c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106bdc:	4413      	add	r3, r2
 8106bde:	009b      	lsls	r3, r3, #2
 8106be0:	461a      	mov	r2, r3
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106be6:	687b      	ldr	r3, [r7, #4]
 8106be8:	4a11      	ldr	r2, [pc, #68]	; (8106c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106bea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	3b01      	subs	r3, #1
 8106bf0:	2201      	movs	r2, #1
 8106bf2:	409a      	lsls	r2, r3
 8106bf4:	687b      	ldr	r3, [r7, #4]
 8106bf6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8106bf8:	bf00      	nop
 8106bfa:	3714      	adds	r7, #20
 8106bfc:	46bd      	mov	sp, r7
 8106bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c02:	4770      	bx	lr
 8106c04:	58025408 	.word	0x58025408
 8106c08:	5802541c 	.word	0x5802541c
 8106c0c:	58025430 	.word	0x58025430
 8106c10:	58025444 	.word	0x58025444
 8106c14:	58025458 	.word	0x58025458
 8106c18:	5802546c 	.word	0x5802546c
 8106c1c:	58025480 	.word	0x58025480
 8106c20:	58025494 	.word	0x58025494
 8106c24:	1600963f 	.word	0x1600963f
 8106c28:	58025940 	.word	0x58025940
 8106c2c:	1000823f 	.word	0x1000823f
 8106c30:	40020940 	.word	0x40020940

08106c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106c34:	b480      	push	{r7}
 8106c36:	b089      	sub	sp, #36	; 0x24
 8106c38:	af00      	add	r7, sp, #0
 8106c3a:	6078      	str	r0, [r7, #4]
 8106c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106c3e:	2300      	movs	r3, #0
 8106c40:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106c42:	4b89      	ldr	r3, [pc, #548]	; (8106e68 <HAL_GPIO_Init+0x234>)
 8106c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106c46:	e194      	b.n	8106f72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106c48:	683b      	ldr	r3, [r7, #0]
 8106c4a:	681a      	ldr	r2, [r3, #0]
 8106c4c:	2101      	movs	r1, #1
 8106c4e:	69fb      	ldr	r3, [r7, #28]
 8106c50:	fa01 f303 	lsl.w	r3, r1, r3
 8106c54:	4013      	ands	r3, r2
 8106c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106c58:	693b      	ldr	r3, [r7, #16]
 8106c5a:	2b00      	cmp	r3, #0
 8106c5c:	f000 8186 	beq.w	8106f6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106c60:	683b      	ldr	r3, [r7, #0]
 8106c62:	685b      	ldr	r3, [r3, #4]
 8106c64:	2b01      	cmp	r3, #1
 8106c66:	d00b      	beq.n	8106c80 <HAL_GPIO_Init+0x4c>
 8106c68:	683b      	ldr	r3, [r7, #0]
 8106c6a:	685b      	ldr	r3, [r3, #4]
 8106c6c:	2b02      	cmp	r3, #2
 8106c6e:	d007      	beq.n	8106c80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106c70:	683b      	ldr	r3, [r7, #0]
 8106c72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106c74:	2b11      	cmp	r3, #17
 8106c76:	d003      	beq.n	8106c80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106c78:	683b      	ldr	r3, [r7, #0]
 8106c7a:	685b      	ldr	r3, [r3, #4]
 8106c7c:	2b12      	cmp	r3, #18
 8106c7e:	d130      	bne.n	8106ce2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	689b      	ldr	r3, [r3, #8]
 8106c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106c86:	69fb      	ldr	r3, [r7, #28]
 8106c88:	005b      	lsls	r3, r3, #1
 8106c8a:	2203      	movs	r2, #3
 8106c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8106c90:	43db      	mvns	r3, r3
 8106c92:	69ba      	ldr	r2, [r7, #24]
 8106c94:	4013      	ands	r3, r2
 8106c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106c98:	683b      	ldr	r3, [r7, #0]
 8106c9a:	68da      	ldr	r2, [r3, #12]
 8106c9c:	69fb      	ldr	r3, [r7, #28]
 8106c9e:	005b      	lsls	r3, r3, #1
 8106ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8106ca4:	69ba      	ldr	r2, [r7, #24]
 8106ca6:	4313      	orrs	r3, r2
 8106ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	69ba      	ldr	r2, [r7, #24]
 8106cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	685b      	ldr	r3, [r3, #4]
 8106cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106cb6:	2201      	movs	r2, #1
 8106cb8:	69fb      	ldr	r3, [r7, #28]
 8106cba:	fa02 f303 	lsl.w	r3, r2, r3
 8106cbe:	43db      	mvns	r3, r3
 8106cc0:	69ba      	ldr	r2, [r7, #24]
 8106cc2:	4013      	ands	r3, r2
 8106cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8106cc6:	683b      	ldr	r3, [r7, #0]
 8106cc8:	685b      	ldr	r3, [r3, #4]
 8106cca:	091b      	lsrs	r3, r3, #4
 8106ccc:	f003 0201 	and.w	r2, r3, #1
 8106cd0:	69fb      	ldr	r3, [r7, #28]
 8106cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8106cd6:	69ba      	ldr	r2, [r7, #24]
 8106cd8:	4313      	orrs	r3, r2
 8106cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	69ba      	ldr	r2, [r7, #24]
 8106ce0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	68db      	ldr	r3, [r3, #12]
 8106ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106ce8:	69fb      	ldr	r3, [r7, #28]
 8106cea:	005b      	lsls	r3, r3, #1
 8106cec:	2203      	movs	r2, #3
 8106cee:	fa02 f303 	lsl.w	r3, r2, r3
 8106cf2:	43db      	mvns	r3, r3
 8106cf4:	69ba      	ldr	r2, [r7, #24]
 8106cf6:	4013      	ands	r3, r2
 8106cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106cfa:	683b      	ldr	r3, [r7, #0]
 8106cfc:	689a      	ldr	r2, [r3, #8]
 8106cfe:	69fb      	ldr	r3, [r7, #28]
 8106d00:	005b      	lsls	r3, r3, #1
 8106d02:	fa02 f303 	lsl.w	r3, r2, r3
 8106d06:	69ba      	ldr	r2, [r7, #24]
 8106d08:	4313      	orrs	r3, r2
 8106d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	69ba      	ldr	r2, [r7, #24]
 8106d10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106d12:	683b      	ldr	r3, [r7, #0]
 8106d14:	685b      	ldr	r3, [r3, #4]
 8106d16:	2b02      	cmp	r3, #2
 8106d18:	d003      	beq.n	8106d22 <HAL_GPIO_Init+0xee>
 8106d1a:	683b      	ldr	r3, [r7, #0]
 8106d1c:	685b      	ldr	r3, [r3, #4]
 8106d1e:	2b12      	cmp	r3, #18
 8106d20:	d123      	bne.n	8106d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106d22:	69fb      	ldr	r3, [r7, #28]
 8106d24:	08da      	lsrs	r2, r3, #3
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	3208      	adds	r2, #8
 8106d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106d30:	69fb      	ldr	r3, [r7, #28]
 8106d32:	f003 0307 	and.w	r3, r3, #7
 8106d36:	009b      	lsls	r3, r3, #2
 8106d38:	220f      	movs	r2, #15
 8106d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8106d3e:	43db      	mvns	r3, r3
 8106d40:	69ba      	ldr	r2, [r7, #24]
 8106d42:	4013      	ands	r3, r2
 8106d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106d46:	683b      	ldr	r3, [r7, #0]
 8106d48:	691a      	ldr	r2, [r3, #16]
 8106d4a:	69fb      	ldr	r3, [r7, #28]
 8106d4c:	f003 0307 	and.w	r3, r3, #7
 8106d50:	009b      	lsls	r3, r3, #2
 8106d52:	fa02 f303 	lsl.w	r3, r2, r3
 8106d56:	69ba      	ldr	r2, [r7, #24]
 8106d58:	4313      	orrs	r3, r2
 8106d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106d5c:	69fb      	ldr	r3, [r7, #28]
 8106d5e:	08da      	lsrs	r2, r3, #3
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	3208      	adds	r2, #8
 8106d64:	69b9      	ldr	r1, [r7, #24]
 8106d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	681b      	ldr	r3, [r3, #0]
 8106d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106d70:	69fb      	ldr	r3, [r7, #28]
 8106d72:	005b      	lsls	r3, r3, #1
 8106d74:	2203      	movs	r2, #3
 8106d76:	fa02 f303 	lsl.w	r3, r2, r3
 8106d7a:	43db      	mvns	r3, r3
 8106d7c:	69ba      	ldr	r2, [r7, #24]
 8106d7e:	4013      	ands	r3, r2
 8106d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106d82:	683b      	ldr	r3, [r7, #0]
 8106d84:	685b      	ldr	r3, [r3, #4]
 8106d86:	f003 0203 	and.w	r2, r3, #3
 8106d8a:	69fb      	ldr	r3, [r7, #28]
 8106d8c:	005b      	lsls	r3, r3, #1
 8106d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8106d92:	69ba      	ldr	r2, [r7, #24]
 8106d94:	4313      	orrs	r3, r2
 8106d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	69ba      	ldr	r2, [r7, #24]
 8106d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8106d9e:	683b      	ldr	r3, [r7, #0]
 8106da0:	685b      	ldr	r3, [r3, #4]
 8106da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106da6:	2b00      	cmp	r3, #0
 8106da8:	f000 80e0 	beq.w	8106f6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106dac:	4b2f      	ldr	r3, [pc, #188]	; (8106e6c <HAL_GPIO_Init+0x238>)
 8106dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106db2:	4a2e      	ldr	r2, [pc, #184]	; (8106e6c <HAL_GPIO_Init+0x238>)
 8106db4:	f043 0302 	orr.w	r3, r3, #2
 8106db8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106dbc:	4b2b      	ldr	r3, [pc, #172]	; (8106e6c <HAL_GPIO_Init+0x238>)
 8106dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106dc2:	f003 0302 	and.w	r3, r3, #2
 8106dc6:	60fb      	str	r3, [r7, #12]
 8106dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106dca:	4a29      	ldr	r2, [pc, #164]	; (8106e70 <HAL_GPIO_Init+0x23c>)
 8106dcc:	69fb      	ldr	r3, [r7, #28]
 8106dce:	089b      	lsrs	r3, r3, #2
 8106dd0:	3302      	adds	r3, #2
 8106dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106dd8:	69fb      	ldr	r3, [r7, #28]
 8106dda:	f003 0303 	and.w	r3, r3, #3
 8106dde:	009b      	lsls	r3, r3, #2
 8106de0:	220f      	movs	r2, #15
 8106de2:	fa02 f303 	lsl.w	r3, r2, r3
 8106de6:	43db      	mvns	r3, r3
 8106de8:	69ba      	ldr	r2, [r7, #24]
 8106dea:	4013      	ands	r3, r2
 8106dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	4a20      	ldr	r2, [pc, #128]	; (8106e74 <HAL_GPIO_Init+0x240>)
 8106df2:	4293      	cmp	r3, r2
 8106df4:	d052      	beq.n	8106e9c <HAL_GPIO_Init+0x268>
 8106df6:	687b      	ldr	r3, [r7, #4]
 8106df8:	4a1f      	ldr	r2, [pc, #124]	; (8106e78 <HAL_GPIO_Init+0x244>)
 8106dfa:	4293      	cmp	r3, r2
 8106dfc:	d031      	beq.n	8106e62 <HAL_GPIO_Init+0x22e>
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	4a1e      	ldr	r2, [pc, #120]	; (8106e7c <HAL_GPIO_Init+0x248>)
 8106e02:	4293      	cmp	r3, r2
 8106e04:	d02b      	beq.n	8106e5e <HAL_GPIO_Init+0x22a>
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	4a1d      	ldr	r2, [pc, #116]	; (8106e80 <HAL_GPIO_Init+0x24c>)
 8106e0a:	4293      	cmp	r3, r2
 8106e0c:	d025      	beq.n	8106e5a <HAL_GPIO_Init+0x226>
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	4a1c      	ldr	r2, [pc, #112]	; (8106e84 <HAL_GPIO_Init+0x250>)
 8106e12:	4293      	cmp	r3, r2
 8106e14:	d01f      	beq.n	8106e56 <HAL_GPIO_Init+0x222>
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	4a1b      	ldr	r2, [pc, #108]	; (8106e88 <HAL_GPIO_Init+0x254>)
 8106e1a:	4293      	cmp	r3, r2
 8106e1c:	d019      	beq.n	8106e52 <HAL_GPIO_Init+0x21e>
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	4a1a      	ldr	r2, [pc, #104]	; (8106e8c <HAL_GPIO_Init+0x258>)
 8106e22:	4293      	cmp	r3, r2
 8106e24:	d013      	beq.n	8106e4e <HAL_GPIO_Init+0x21a>
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	4a19      	ldr	r2, [pc, #100]	; (8106e90 <HAL_GPIO_Init+0x25c>)
 8106e2a:	4293      	cmp	r3, r2
 8106e2c:	d00d      	beq.n	8106e4a <HAL_GPIO_Init+0x216>
 8106e2e:	687b      	ldr	r3, [r7, #4]
 8106e30:	4a18      	ldr	r2, [pc, #96]	; (8106e94 <HAL_GPIO_Init+0x260>)
 8106e32:	4293      	cmp	r3, r2
 8106e34:	d007      	beq.n	8106e46 <HAL_GPIO_Init+0x212>
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	4a17      	ldr	r2, [pc, #92]	; (8106e98 <HAL_GPIO_Init+0x264>)
 8106e3a:	4293      	cmp	r3, r2
 8106e3c:	d101      	bne.n	8106e42 <HAL_GPIO_Init+0x20e>
 8106e3e:	2309      	movs	r3, #9
 8106e40:	e02d      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e42:	230a      	movs	r3, #10
 8106e44:	e02b      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e46:	2308      	movs	r3, #8
 8106e48:	e029      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e4a:	2307      	movs	r3, #7
 8106e4c:	e027      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e4e:	2306      	movs	r3, #6
 8106e50:	e025      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e52:	2305      	movs	r3, #5
 8106e54:	e023      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e56:	2304      	movs	r3, #4
 8106e58:	e021      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e5a:	2303      	movs	r3, #3
 8106e5c:	e01f      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e5e:	2302      	movs	r3, #2
 8106e60:	e01d      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e62:	2301      	movs	r3, #1
 8106e64:	e01b      	b.n	8106e9e <HAL_GPIO_Init+0x26a>
 8106e66:	bf00      	nop
 8106e68:	580000c0 	.word	0x580000c0
 8106e6c:	58024400 	.word	0x58024400
 8106e70:	58000400 	.word	0x58000400
 8106e74:	58020000 	.word	0x58020000
 8106e78:	58020400 	.word	0x58020400
 8106e7c:	58020800 	.word	0x58020800
 8106e80:	58020c00 	.word	0x58020c00
 8106e84:	58021000 	.word	0x58021000
 8106e88:	58021400 	.word	0x58021400
 8106e8c:	58021800 	.word	0x58021800
 8106e90:	58021c00 	.word	0x58021c00
 8106e94:	58022000 	.word	0x58022000
 8106e98:	58022400 	.word	0x58022400
 8106e9c:	2300      	movs	r3, #0
 8106e9e:	69fa      	ldr	r2, [r7, #28]
 8106ea0:	f002 0203 	and.w	r2, r2, #3
 8106ea4:	0092      	lsls	r2, r2, #2
 8106ea6:	4093      	lsls	r3, r2
 8106ea8:	69ba      	ldr	r2, [r7, #24]
 8106eaa:	4313      	orrs	r3, r2
 8106eac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106eae:	4938      	ldr	r1, [pc, #224]	; (8106f90 <HAL_GPIO_Init+0x35c>)
 8106eb0:	69fb      	ldr	r3, [r7, #28]
 8106eb2:	089b      	lsrs	r3, r3, #2
 8106eb4:	3302      	adds	r3, #2
 8106eb6:	69ba      	ldr	r2, [r7, #24]
 8106eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106ebc:	697b      	ldr	r3, [r7, #20]
 8106ebe:	681b      	ldr	r3, [r3, #0]
 8106ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106ec2:	693b      	ldr	r3, [r7, #16]
 8106ec4:	43db      	mvns	r3, r3
 8106ec6:	69ba      	ldr	r2, [r7, #24]
 8106ec8:	4013      	ands	r3, r2
 8106eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8106ecc:	683b      	ldr	r3, [r7, #0]
 8106ece:	685b      	ldr	r3, [r3, #4]
 8106ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106ed4:	2b00      	cmp	r3, #0
 8106ed6:	d003      	beq.n	8106ee0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8106ed8:	69ba      	ldr	r2, [r7, #24]
 8106eda:	693b      	ldr	r3, [r7, #16]
 8106edc:	4313      	orrs	r3, r2
 8106ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106ee0:	697b      	ldr	r3, [r7, #20]
 8106ee2:	69ba      	ldr	r2, [r7, #24]
 8106ee4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8106ee6:	697b      	ldr	r3, [r7, #20]
 8106ee8:	685b      	ldr	r3, [r3, #4]
 8106eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106eec:	693b      	ldr	r3, [r7, #16]
 8106eee:	43db      	mvns	r3, r3
 8106ef0:	69ba      	ldr	r2, [r7, #24]
 8106ef2:	4013      	ands	r3, r2
 8106ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8106ef6:	683b      	ldr	r3, [r7, #0]
 8106ef8:	685b      	ldr	r3, [r3, #4]
 8106efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106efe:	2b00      	cmp	r3, #0
 8106f00:	d003      	beq.n	8106f0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106f02:	69ba      	ldr	r2, [r7, #24]
 8106f04:	693b      	ldr	r3, [r7, #16]
 8106f06:	4313      	orrs	r3, r2
 8106f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106f0a:	697b      	ldr	r3, [r7, #20]
 8106f0c:	69ba      	ldr	r2, [r7, #24]
 8106f0e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106f18:	693b      	ldr	r3, [r7, #16]
 8106f1a:	43db      	mvns	r3, r3
 8106f1c:	69ba      	ldr	r2, [r7, #24]
 8106f1e:	4013      	ands	r3, r2
 8106f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106f22:	683b      	ldr	r3, [r7, #0]
 8106f24:	685b      	ldr	r3, [r3, #4]
 8106f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d003      	beq.n	8106f36 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8106f2e:	69ba      	ldr	r2, [r7, #24]
 8106f30:	693b      	ldr	r3, [r7, #16]
 8106f32:	4313      	orrs	r3, r2
 8106f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106f3a:	69bb      	ldr	r3, [r7, #24]
 8106f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106f42:	685b      	ldr	r3, [r3, #4]
 8106f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106f46:	693b      	ldr	r3, [r7, #16]
 8106f48:	43db      	mvns	r3, r3
 8106f4a:	69ba      	ldr	r2, [r7, #24]
 8106f4c:	4013      	ands	r3, r2
 8106f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106f50:	683b      	ldr	r3, [r7, #0]
 8106f52:	685b      	ldr	r3, [r3, #4]
 8106f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106f58:	2b00      	cmp	r3, #0
 8106f5a:	d003      	beq.n	8106f64 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8106f5c:	69ba      	ldr	r2, [r7, #24]
 8106f5e:	693b      	ldr	r3, [r7, #16]
 8106f60:	4313      	orrs	r3, r2
 8106f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106f68:	69bb      	ldr	r3, [r7, #24]
 8106f6a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8106f6c:	69fb      	ldr	r3, [r7, #28]
 8106f6e:	3301      	adds	r3, #1
 8106f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106f72:	683b      	ldr	r3, [r7, #0]
 8106f74:	681a      	ldr	r2, [r3, #0]
 8106f76:	69fb      	ldr	r3, [r7, #28]
 8106f78:	fa22 f303 	lsr.w	r3, r2, r3
 8106f7c:	2b00      	cmp	r3, #0
 8106f7e:	f47f ae63 	bne.w	8106c48 <HAL_GPIO_Init+0x14>
  }
}
 8106f82:	bf00      	nop
 8106f84:	bf00      	nop
 8106f86:	3724      	adds	r7, #36	; 0x24
 8106f88:	46bd      	mov	sp, r7
 8106f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f8e:	4770      	bx	lr
 8106f90:	58000400 	.word	0x58000400

08106f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106f94:	b480      	push	{r7}
 8106f96:	b083      	sub	sp, #12
 8106f98:	af00      	add	r7, sp, #0
 8106f9a:	6078      	str	r0, [r7, #4]
 8106f9c:	460b      	mov	r3, r1
 8106f9e:	807b      	strh	r3, [r7, #2]
 8106fa0:	4613      	mov	r3, r2
 8106fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106fa4:	787b      	ldrb	r3, [r7, #1]
 8106fa6:	2b00      	cmp	r3, #0
 8106fa8:	d003      	beq.n	8106fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106faa:	887a      	ldrh	r2, [r7, #2]
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106fb0:	e003      	b.n	8106fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106fb2:	887b      	ldrh	r3, [r7, #2]
 8106fb4:	041a      	lsls	r2, r3, #16
 8106fb6:	687b      	ldr	r3, [r7, #4]
 8106fb8:	619a      	str	r2, [r3, #24]
}
 8106fba:	bf00      	nop
 8106fbc:	370c      	adds	r7, #12
 8106fbe:	46bd      	mov	sp, r7
 8106fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fc4:	4770      	bx	lr
	...

08106fc8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106fc8:	b480      	push	{r7}
 8106fca:	b083      	sub	sp, #12
 8106fcc:	af00      	add	r7, sp, #0
 8106fce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8106fd0:	4a08      	ldr	r2, [pc, #32]	; (8106ff4 <HAL_HSEM_FastTake+0x2c>)
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	3320      	adds	r3, #32
 8106fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106fda:	4a07      	ldr	r2, [pc, #28]	; (8106ff8 <HAL_HSEM_FastTake+0x30>)
 8106fdc:	4293      	cmp	r3, r2
 8106fde:	d101      	bne.n	8106fe4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8106fe0:	2300      	movs	r3, #0
 8106fe2:	e000      	b.n	8106fe6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8106fe4:	2301      	movs	r3, #1
}
 8106fe6:	4618      	mov	r0, r3
 8106fe8:	370c      	adds	r7, #12
 8106fea:	46bd      	mov	sp, r7
 8106fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ff0:	4770      	bx	lr
 8106ff2:	bf00      	nop
 8106ff4:	58026400 	.word	0x58026400
 8106ff8:	80000100 	.word	0x80000100

08106ffc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8106ffc:	b480      	push	{r7}
 8106ffe:	b083      	sub	sp, #12
 8107000:	af00      	add	r7, sp, #0
 8107002:	6078      	str	r0, [r7, #4]
 8107004:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8107006:	4906      	ldr	r1, [pc, #24]	; (8107020 <HAL_HSEM_Release+0x24>)
 8107008:	683b      	ldr	r3, [r7, #0]
 810700a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8107014:	bf00      	nop
 8107016:	370c      	adds	r7, #12
 8107018:	46bd      	mov	sp, r7
 810701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810701e:	4770      	bx	lr
 8107020:	58026400 	.word	0x58026400

08107024 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107024:	b480      	push	{r7}
 8107026:	b083      	sub	sp, #12
 8107028:	af00      	add	r7, sp, #0
 810702a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810702c:	4b05      	ldr	r3, [pc, #20]	; (8107044 <HAL_HSEM_ActivateNotification+0x20>)
 810702e:	681a      	ldr	r2, [r3, #0]
 8107030:	4904      	ldr	r1, [pc, #16]	; (8107044 <HAL_HSEM_ActivateNotification+0x20>)
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	4313      	orrs	r3, r2
 8107036:	600b      	str	r3, [r1, #0]
#endif
}
 8107038:	bf00      	nop
 810703a:	370c      	adds	r7, #12
 810703c:	46bd      	mov	sp, r7
 810703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107042:	4770      	bx	lr
 8107044:	58026510 	.word	0x58026510

08107048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8107048:	b580      	push	{r7, lr}
 810704a:	b082      	sub	sp, #8
 810704c:	af00      	add	r7, sp, #0
 810704e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	2b00      	cmp	r3, #0
 8107054:	d101      	bne.n	810705a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8107056:	2301      	movs	r3, #1
 8107058:	e081      	b.n	810715e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107060:	b2db      	uxtb	r3, r3
 8107062:	2b00      	cmp	r3, #0
 8107064:	d106      	bne.n	8107074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	2200      	movs	r2, #0
 810706a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810706e:	6878      	ldr	r0, [r7, #4]
 8107070:	f7fa fe20 	bl	8101cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	2224      	movs	r2, #36	; 0x24
 8107078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	681b      	ldr	r3, [r3, #0]
 8107080:	681a      	ldr	r2, [r3, #0]
 8107082:	687b      	ldr	r3, [r7, #4]
 8107084:	681b      	ldr	r3, [r3, #0]
 8107086:	f022 0201 	bic.w	r2, r2, #1
 810708a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	685a      	ldr	r2, [r3, #4]
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	681b      	ldr	r3, [r3, #0]
 8107094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8107098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810709a:	687b      	ldr	r3, [r7, #4]
 810709c:	681b      	ldr	r3, [r3, #0]
 810709e:	689a      	ldr	r2, [r3, #8]
 81070a0:	687b      	ldr	r3, [r7, #4]
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81070a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	68db      	ldr	r3, [r3, #12]
 81070ae:	2b01      	cmp	r3, #1
 81070b0:	d107      	bne.n	81070c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	689a      	ldr	r2, [r3, #8]
 81070b6:	687b      	ldr	r3, [r7, #4]
 81070b8:	681b      	ldr	r3, [r3, #0]
 81070ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81070be:	609a      	str	r2, [r3, #8]
 81070c0:	e006      	b.n	81070d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	689a      	ldr	r2, [r3, #8]
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	681b      	ldr	r3, [r3, #0]
 81070ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81070ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	68db      	ldr	r3, [r3, #12]
 81070d4:	2b02      	cmp	r3, #2
 81070d6:	d104      	bne.n	81070e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81070d8:	687b      	ldr	r3, [r7, #4]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81070e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	685b      	ldr	r3, [r3, #4]
 81070e8:	687a      	ldr	r2, [r7, #4]
 81070ea:	6812      	ldr	r2, [r2, #0]
 81070ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81070f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81070f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	681b      	ldr	r3, [r3, #0]
 81070fa:	68da      	ldr	r2, [r3, #12]
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	691a      	ldr	r2, [r3, #16]
 810710a:	687b      	ldr	r3, [r7, #4]
 810710c:	695b      	ldr	r3, [r3, #20]
 810710e:	ea42 0103 	orr.w	r1, r2, r3
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	699b      	ldr	r3, [r3, #24]
 8107116:	021a      	lsls	r2, r3, #8
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	681b      	ldr	r3, [r3, #0]
 810711c:	430a      	orrs	r2, r1
 810711e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	69d9      	ldr	r1, [r3, #28]
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	6a1a      	ldr	r2, [r3, #32]
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	681b      	ldr	r3, [r3, #0]
 810712c:	430a      	orrs	r2, r1
 810712e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	681b      	ldr	r3, [r3, #0]
 8107134:	681a      	ldr	r2, [r3, #0]
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	681b      	ldr	r3, [r3, #0]
 810713a:	f042 0201 	orr.w	r2, r2, #1
 810713e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	2200      	movs	r2, #0
 8107144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	2220      	movs	r2, #32
 810714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	2200      	movs	r2, #0
 8107152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	2200      	movs	r2, #0
 8107158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810715c:	2300      	movs	r3, #0
}
 810715e:	4618      	mov	r0, r3
 8107160:	3708      	adds	r7, #8
 8107162:	46bd      	mov	sp, r7
 8107164:	bd80      	pop	{r7, pc}
	...

08107168 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107168:	b580      	push	{r7, lr}
 810716a:	b088      	sub	sp, #32
 810716c:	af02      	add	r7, sp, #8
 810716e:	60f8      	str	r0, [r7, #12]
 8107170:	4608      	mov	r0, r1
 8107172:	4611      	mov	r1, r2
 8107174:	461a      	mov	r2, r3
 8107176:	4603      	mov	r3, r0
 8107178:	817b      	strh	r3, [r7, #10]
 810717a:	460b      	mov	r3, r1
 810717c:	813b      	strh	r3, [r7, #8]
 810717e:	4613      	mov	r3, r2
 8107180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107182:	68fb      	ldr	r3, [r7, #12]
 8107184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107188:	b2db      	uxtb	r3, r3
 810718a:	2b20      	cmp	r3, #32
 810718c:	f040 80f9 	bne.w	8107382 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8107190:	6a3b      	ldr	r3, [r7, #32]
 8107192:	2b00      	cmp	r3, #0
 8107194:	d002      	beq.n	810719c <HAL_I2C_Mem_Write+0x34>
 8107196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8107198:	2b00      	cmp	r3, #0
 810719a:	d105      	bne.n	81071a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	f44f 7200 	mov.w	r2, #512	; 0x200
 81071a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81071a4:	2301      	movs	r3, #1
 81071a6:	e0ed      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81071a8:	68fb      	ldr	r3, [r7, #12]
 81071aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81071ae:	2b01      	cmp	r3, #1
 81071b0:	d101      	bne.n	81071b6 <HAL_I2C_Mem_Write+0x4e>
 81071b2:	2302      	movs	r3, #2
 81071b4:	e0e6      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
 81071b6:	68fb      	ldr	r3, [r7, #12]
 81071b8:	2201      	movs	r2, #1
 81071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81071be:	f7fc faad 	bl	810371c <HAL_GetTick>
 81071c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81071c4:	697b      	ldr	r3, [r7, #20]
 81071c6:	9300      	str	r3, [sp, #0]
 81071c8:	2319      	movs	r3, #25
 81071ca:	2201      	movs	r2, #1
 81071cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81071d0:	68f8      	ldr	r0, [r7, #12]
 81071d2:	f001 f8c6 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 81071d6:	4603      	mov	r3, r0
 81071d8:	2b00      	cmp	r3, #0
 81071da:	d001      	beq.n	81071e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81071dc:	2301      	movs	r3, #1
 81071de:	e0d1      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81071e0:	68fb      	ldr	r3, [r7, #12]
 81071e2:	2221      	movs	r2, #33	; 0x21
 81071e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81071e8:	68fb      	ldr	r3, [r7, #12]
 81071ea:	2240      	movs	r2, #64	; 0x40
 81071ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81071f0:	68fb      	ldr	r3, [r7, #12]
 81071f2:	2200      	movs	r2, #0
 81071f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81071f6:	68fb      	ldr	r3, [r7, #12]
 81071f8:	6a3a      	ldr	r2, [r7, #32]
 81071fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8107200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	2200      	movs	r2, #0
 8107206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8107208:	88f8      	ldrh	r0, [r7, #6]
 810720a:	893a      	ldrh	r2, [r7, #8]
 810720c:	8979      	ldrh	r1, [r7, #10]
 810720e:	697b      	ldr	r3, [r7, #20]
 8107210:	9301      	str	r3, [sp, #4]
 8107212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107214:	9300      	str	r3, [sp, #0]
 8107216:	4603      	mov	r3, r0
 8107218:	68f8      	ldr	r0, [r7, #12]
 810721a:	f000 fb91 	bl	8107940 <I2C_RequestMemoryWrite>
 810721e:	4603      	mov	r3, r0
 8107220:	2b00      	cmp	r3, #0
 8107222:	d005      	beq.n	8107230 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	2200      	movs	r2, #0
 8107228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810722c:	2301      	movs	r3, #1
 810722e:	e0a9      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107230:	68fb      	ldr	r3, [r7, #12]
 8107232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107234:	b29b      	uxth	r3, r3
 8107236:	2bff      	cmp	r3, #255	; 0xff
 8107238:	d90e      	bls.n	8107258 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810723a:	68fb      	ldr	r3, [r7, #12]
 810723c:	22ff      	movs	r2, #255	; 0xff
 810723e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107244:	b2da      	uxtb	r2, r3
 8107246:	8979      	ldrh	r1, [r7, #10]
 8107248:	2300      	movs	r3, #0
 810724a:	9300      	str	r3, [sp, #0]
 810724c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107250:	68f8      	ldr	r0, [r7, #12]
 8107252:	f001 f9a9 	bl	81085a8 <I2C_TransferConfig>
 8107256:	e00f      	b.n	8107278 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810725c:	b29a      	uxth	r2, r3
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8107262:	68fb      	ldr	r3, [r7, #12]
 8107264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107266:	b2da      	uxtb	r2, r3
 8107268:	8979      	ldrh	r1, [r7, #10]
 810726a:	2300      	movs	r3, #0
 810726c:	9300      	str	r3, [sp, #0]
 810726e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8107272:	68f8      	ldr	r0, [r7, #12]
 8107274:	f001 f998 	bl	81085a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107278:	697a      	ldr	r2, [r7, #20]
 810727a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810727c:	68f8      	ldr	r0, [r7, #12]
 810727e:	f001 f8b0 	bl	81083e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8107282:	4603      	mov	r3, r0
 8107284:	2b00      	cmp	r3, #0
 8107286:	d001      	beq.n	810728c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8107288:	2301      	movs	r3, #1
 810728a:	e07b      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107290:	781a      	ldrb	r2, [r3, #0]
 8107292:	68fb      	ldr	r3, [r7, #12]
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810729c:	1c5a      	adds	r2, r3, #1
 810729e:	68fb      	ldr	r3, [r7, #12]
 81072a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81072a2:	68fb      	ldr	r3, [r7, #12]
 81072a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81072a6:	b29b      	uxth	r3, r3
 81072a8:	3b01      	subs	r3, #1
 81072aa:	b29a      	uxth	r2, r3
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81072b0:	68fb      	ldr	r3, [r7, #12]
 81072b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81072b4:	3b01      	subs	r3, #1
 81072b6:	b29a      	uxth	r2, r3
 81072b8:	68fb      	ldr	r3, [r7, #12]
 81072ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81072bc:	68fb      	ldr	r3, [r7, #12]
 81072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81072c0:	b29b      	uxth	r3, r3
 81072c2:	2b00      	cmp	r3, #0
 81072c4:	d034      	beq.n	8107330 <HAL_I2C_Mem_Write+0x1c8>
 81072c6:	68fb      	ldr	r3, [r7, #12]
 81072c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d130      	bne.n	8107330 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81072ce:	697b      	ldr	r3, [r7, #20]
 81072d0:	9300      	str	r3, [sp, #0]
 81072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072d4:	2200      	movs	r2, #0
 81072d6:	2180      	movs	r1, #128	; 0x80
 81072d8:	68f8      	ldr	r0, [r7, #12]
 81072da:	f001 f842 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 81072de:	4603      	mov	r3, r0
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d001      	beq.n	81072e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81072e4:	2301      	movs	r3, #1
 81072e6:	e04d      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81072ec:	b29b      	uxth	r3, r3
 81072ee:	2bff      	cmp	r3, #255	; 0xff
 81072f0:	d90e      	bls.n	8107310 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81072f2:	68fb      	ldr	r3, [r7, #12]
 81072f4:	22ff      	movs	r2, #255	; 0xff
 81072f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81072f8:	68fb      	ldr	r3, [r7, #12]
 81072fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81072fc:	b2da      	uxtb	r2, r3
 81072fe:	8979      	ldrh	r1, [r7, #10]
 8107300:	2300      	movs	r3, #0
 8107302:	9300      	str	r3, [sp, #0]
 8107304:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107308:	68f8      	ldr	r0, [r7, #12]
 810730a:	f001 f94d 	bl	81085a8 <I2C_TransferConfig>
 810730e:	e00f      	b.n	8107330 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107310:	68fb      	ldr	r3, [r7, #12]
 8107312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107314:	b29a      	uxth	r2, r3
 8107316:	68fb      	ldr	r3, [r7, #12]
 8107318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810731a:	68fb      	ldr	r3, [r7, #12]
 810731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810731e:	b2da      	uxtb	r2, r3
 8107320:	8979      	ldrh	r1, [r7, #10]
 8107322:	2300      	movs	r3, #0
 8107324:	9300      	str	r3, [sp, #0]
 8107326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810732a:	68f8      	ldr	r0, [r7, #12]
 810732c:	f001 f93c 	bl	81085a8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107334:	b29b      	uxth	r3, r3
 8107336:	2b00      	cmp	r3, #0
 8107338:	d19e      	bne.n	8107278 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810733a:	697a      	ldr	r2, [r7, #20]
 810733c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810733e:	68f8      	ldr	r0, [r7, #12]
 8107340:	f001 f88f 	bl	8108462 <I2C_WaitOnSTOPFlagUntilTimeout>
 8107344:	4603      	mov	r3, r0
 8107346:	2b00      	cmp	r3, #0
 8107348:	d001      	beq.n	810734e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810734a:	2301      	movs	r3, #1
 810734c:	e01a      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810734e:	68fb      	ldr	r3, [r7, #12]
 8107350:	681b      	ldr	r3, [r3, #0]
 8107352:	2220      	movs	r2, #32
 8107354:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107356:	68fb      	ldr	r3, [r7, #12]
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	6859      	ldr	r1, [r3, #4]
 810735c:	68fb      	ldr	r3, [r7, #12]
 810735e:	681a      	ldr	r2, [r3, #0]
 8107360:	4b0a      	ldr	r3, [pc, #40]	; (810738c <HAL_I2C_Mem_Write+0x224>)
 8107362:	400b      	ands	r3, r1
 8107364:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	2220      	movs	r2, #32
 810736a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810736e:	68fb      	ldr	r3, [r7, #12]
 8107370:	2200      	movs	r2, #0
 8107372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107376:	68fb      	ldr	r3, [r7, #12]
 8107378:	2200      	movs	r2, #0
 810737a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810737e:	2300      	movs	r3, #0
 8107380:	e000      	b.n	8107384 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8107382:	2302      	movs	r3, #2
  }
}
 8107384:	4618      	mov	r0, r3
 8107386:	3718      	adds	r7, #24
 8107388:	46bd      	mov	sp, r7
 810738a:	bd80      	pop	{r7, pc}
 810738c:	fe00e800 	.word	0xfe00e800

08107390 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107390:	b580      	push	{r7, lr}
 8107392:	b088      	sub	sp, #32
 8107394:	af02      	add	r7, sp, #8
 8107396:	60f8      	str	r0, [r7, #12]
 8107398:	4608      	mov	r0, r1
 810739a:	4611      	mov	r1, r2
 810739c:	461a      	mov	r2, r3
 810739e:	4603      	mov	r3, r0
 81073a0:	817b      	strh	r3, [r7, #10]
 81073a2:	460b      	mov	r3, r1
 81073a4:	813b      	strh	r3, [r7, #8]
 81073a6:	4613      	mov	r3, r2
 81073a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81073aa:	68fb      	ldr	r3, [r7, #12]
 81073ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81073b0:	b2db      	uxtb	r3, r3
 81073b2:	2b20      	cmp	r3, #32
 81073b4:	f040 80fd 	bne.w	81075b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81073b8:	6a3b      	ldr	r3, [r7, #32]
 81073ba:	2b00      	cmp	r3, #0
 81073bc:	d002      	beq.n	81073c4 <HAL_I2C_Mem_Read+0x34>
 81073be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d105      	bne.n	81073d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81073c4:	68fb      	ldr	r3, [r7, #12]
 81073c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81073ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81073cc:	2301      	movs	r3, #1
 81073ce:	e0f1      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81073d6:	2b01      	cmp	r3, #1
 81073d8:	d101      	bne.n	81073de <HAL_I2C_Mem_Read+0x4e>
 81073da:	2302      	movs	r3, #2
 81073dc:	e0ea      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	2201      	movs	r2, #1
 81073e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81073e6:	f7fc f999 	bl	810371c <HAL_GetTick>
 81073ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81073ec:	697b      	ldr	r3, [r7, #20]
 81073ee:	9300      	str	r3, [sp, #0]
 81073f0:	2319      	movs	r3, #25
 81073f2:	2201      	movs	r2, #1
 81073f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81073f8:	68f8      	ldr	r0, [r7, #12]
 81073fa:	f000 ffb2 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 81073fe:	4603      	mov	r3, r0
 8107400:	2b00      	cmp	r3, #0
 8107402:	d001      	beq.n	8107408 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8107404:	2301      	movs	r3, #1
 8107406:	e0d5      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	2222      	movs	r2, #34	; 0x22
 810740c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8107410:	68fb      	ldr	r3, [r7, #12]
 8107412:	2240      	movs	r2, #64	; 0x40
 8107414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107418:	68fb      	ldr	r3, [r7, #12]
 810741a:	2200      	movs	r2, #0
 810741c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810741e:	68fb      	ldr	r3, [r7, #12]
 8107420:	6a3a      	ldr	r2, [r7, #32]
 8107422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8107428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810742a:	68fb      	ldr	r3, [r7, #12]
 810742c:	2200      	movs	r2, #0
 810742e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8107430:	88f8      	ldrh	r0, [r7, #6]
 8107432:	893a      	ldrh	r2, [r7, #8]
 8107434:	8979      	ldrh	r1, [r7, #10]
 8107436:	697b      	ldr	r3, [r7, #20]
 8107438:	9301      	str	r3, [sp, #4]
 810743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810743c:	9300      	str	r3, [sp, #0]
 810743e:	4603      	mov	r3, r0
 8107440:	68f8      	ldr	r0, [r7, #12]
 8107442:	f000 fad1 	bl	81079e8 <I2C_RequestMemoryRead>
 8107446:	4603      	mov	r3, r0
 8107448:	2b00      	cmp	r3, #0
 810744a:	d005      	beq.n	8107458 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810744c:	68fb      	ldr	r3, [r7, #12]
 810744e:	2200      	movs	r2, #0
 8107450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8107454:	2301      	movs	r3, #1
 8107456:	e0ad      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107458:	68fb      	ldr	r3, [r7, #12]
 810745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810745c:	b29b      	uxth	r3, r3
 810745e:	2bff      	cmp	r3, #255	; 0xff
 8107460:	d90e      	bls.n	8107480 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8107462:	68fb      	ldr	r3, [r7, #12]
 8107464:	22ff      	movs	r2, #255	; 0xff
 8107466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8107468:	68fb      	ldr	r3, [r7, #12]
 810746a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810746c:	b2da      	uxtb	r2, r3
 810746e:	8979      	ldrh	r1, [r7, #10]
 8107470:	4b52      	ldr	r3, [pc, #328]	; (81075bc <HAL_I2C_Mem_Read+0x22c>)
 8107472:	9300      	str	r3, [sp, #0]
 8107474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107478:	68f8      	ldr	r0, [r7, #12]
 810747a:	f001 f895 	bl	81085a8 <I2C_TransferConfig>
 810747e:	e00f      	b.n	81074a0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8107480:	68fb      	ldr	r3, [r7, #12]
 8107482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107484:	b29a      	uxth	r2, r3
 8107486:	68fb      	ldr	r3, [r7, #12]
 8107488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810748a:	68fb      	ldr	r3, [r7, #12]
 810748c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810748e:	b2da      	uxtb	r2, r3
 8107490:	8979      	ldrh	r1, [r7, #10]
 8107492:	4b4a      	ldr	r3, [pc, #296]	; (81075bc <HAL_I2C_Mem_Read+0x22c>)
 8107494:	9300      	str	r3, [sp, #0]
 8107496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810749a:	68f8      	ldr	r0, [r7, #12]
 810749c:	f001 f884 	bl	81085a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81074a0:	697b      	ldr	r3, [r7, #20]
 81074a2:	9300      	str	r3, [sp, #0]
 81074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81074a6:	2200      	movs	r2, #0
 81074a8:	2104      	movs	r1, #4
 81074aa:	68f8      	ldr	r0, [r7, #12]
 81074ac:	f000 ff59 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 81074b0:	4603      	mov	r3, r0
 81074b2:	2b00      	cmp	r3, #0
 81074b4:	d001      	beq.n	81074ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81074b6:	2301      	movs	r3, #1
 81074b8:	e07c      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81074ba:	68fb      	ldr	r3, [r7, #12]
 81074bc:	681b      	ldr	r3, [r3, #0]
 81074be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81074c0:	68fb      	ldr	r3, [r7, #12]
 81074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81074c4:	b2d2      	uxtb	r2, r2
 81074c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81074c8:	68fb      	ldr	r3, [r7, #12]
 81074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81074cc:	1c5a      	adds	r2, r3, #1
 81074ce:	68fb      	ldr	r3, [r7, #12]
 81074d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81074d2:	68fb      	ldr	r3, [r7, #12]
 81074d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81074d6:	3b01      	subs	r3, #1
 81074d8:	b29a      	uxth	r2, r3
 81074da:	68fb      	ldr	r3, [r7, #12]
 81074dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81074de:	68fb      	ldr	r3, [r7, #12]
 81074e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81074e2:	b29b      	uxth	r3, r3
 81074e4:	3b01      	subs	r3, #1
 81074e6:	b29a      	uxth	r2, r3
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81074ec:	68fb      	ldr	r3, [r7, #12]
 81074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81074f0:	b29b      	uxth	r3, r3
 81074f2:	2b00      	cmp	r3, #0
 81074f4:	d034      	beq.n	8107560 <HAL_I2C_Mem_Read+0x1d0>
 81074f6:	68fb      	ldr	r3, [r7, #12]
 81074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81074fa:	2b00      	cmp	r3, #0
 81074fc:	d130      	bne.n	8107560 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81074fe:	697b      	ldr	r3, [r7, #20]
 8107500:	9300      	str	r3, [sp, #0]
 8107502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107504:	2200      	movs	r2, #0
 8107506:	2180      	movs	r1, #128	; 0x80
 8107508:	68f8      	ldr	r0, [r7, #12]
 810750a:	f000 ff2a 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 810750e:	4603      	mov	r3, r0
 8107510:	2b00      	cmp	r3, #0
 8107512:	d001      	beq.n	8107518 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8107514:	2301      	movs	r3, #1
 8107516:	e04d      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107518:	68fb      	ldr	r3, [r7, #12]
 810751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810751c:	b29b      	uxth	r3, r3
 810751e:	2bff      	cmp	r3, #255	; 0xff
 8107520:	d90e      	bls.n	8107540 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107522:	68fb      	ldr	r3, [r7, #12]
 8107524:	22ff      	movs	r2, #255	; 0xff
 8107526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810752c:	b2da      	uxtb	r2, r3
 810752e:	8979      	ldrh	r1, [r7, #10]
 8107530:	2300      	movs	r3, #0
 8107532:	9300      	str	r3, [sp, #0]
 8107534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107538:	68f8      	ldr	r0, [r7, #12]
 810753a:	f001 f835 	bl	81085a8 <I2C_TransferConfig>
 810753e:	e00f      	b.n	8107560 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107540:	68fb      	ldr	r3, [r7, #12]
 8107542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107544:	b29a      	uxth	r2, r3
 8107546:	68fb      	ldr	r3, [r7, #12]
 8107548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810754a:	68fb      	ldr	r3, [r7, #12]
 810754c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810754e:	b2da      	uxtb	r2, r3
 8107550:	8979      	ldrh	r1, [r7, #10]
 8107552:	2300      	movs	r3, #0
 8107554:	9300      	str	r3, [sp, #0]
 8107556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810755a:	68f8      	ldr	r0, [r7, #12]
 810755c:	f001 f824 	bl	81085a8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8107560:	68fb      	ldr	r3, [r7, #12]
 8107562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107564:	b29b      	uxth	r3, r3
 8107566:	2b00      	cmp	r3, #0
 8107568:	d19a      	bne.n	81074a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810756a:	697a      	ldr	r2, [r7, #20]
 810756c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810756e:	68f8      	ldr	r0, [r7, #12]
 8107570:	f000 ff77 	bl	8108462 <I2C_WaitOnSTOPFlagUntilTimeout>
 8107574:	4603      	mov	r3, r0
 8107576:	2b00      	cmp	r3, #0
 8107578:	d001      	beq.n	810757e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810757a:	2301      	movs	r3, #1
 810757c:	e01a      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810757e:	68fb      	ldr	r3, [r7, #12]
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	2220      	movs	r2, #32
 8107584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	6859      	ldr	r1, [r3, #4]
 810758c:	68fb      	ldr	r3, [r7, #12]
 810758e:	681a      	ldr	r2, [r3, #0]
 8107590:	4b0b      	ldr	r3, [pc, #44]	; (81075c0 <HAL_I2C_Mem_Read+0x230>)
 8107592:	400b      	ands	r3, r1
 8107594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107596:	68fb      	ldr	r3, [r7, #12]
 8107598:	2220      	movs	r2, #32
 810759a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810759e:	68fb      	ldr	r3, [r7, #12]
 81075a0:	2200      	movs	r2, #0
 81075a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81075a6:	68fb      	ldr	r3, [r7, #12]
 81075a8:	2200      	movs	r2, #0
 81075aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81075ae:	2300      	movs	r3, #0
 81075b0:	e000      	b.n	81075b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81075b2:	2302      	movs	r3, #2
  }
}
 81075b4:	4618      	mov	r0, r3
 81075b6:	3718      	adds	r7, #24
 81075b8:	46bd      	mov	sp, r7
 81075ba:	bd80      	pop	{r7, pc}
 81075bc:	80002400 	.word	0x80002400
 81075c0:	fe00e800 	.word	0xfe00e800

081075c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81075c4:	b580      	push	{r7, lr}
 81075c6:	b084      	sub	sp, #16
 81075c8:	af00      	add	r7, sp, #0
 81075ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	699b      	ldr	r3, [r3, #24]
 81075d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	681b      	ldr	r3, [r3, #0]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81075e0:	2b00      	cmp	r3, #0
 81075e2:	d005      	beq.n	81075f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81075e4:	687b      	ldr	r3, [r7, #4]
 81075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81075e8:	68ba      	ldr	r2, [r7, #8]
 81075ea:	68f9      	ldr	r1, [r7, #12]
 81075ec:	6878      	ldr	r0, [r7, #4]
 81075ee:	4798      	blx	r3
  }
}
 81075f0:	bf00      	nop
 81075f2:	3710      	adds	r7, #16
 81075f4:	46bd      	mov	sp, r7
 81075f6:	bd80      	pop	{r7, pc}

081075f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81075f8:	b580      	push	{r7, lr}
 81075fa:	b086      	sub	sp, #24
 81075fc:	af00      	add	r7, sp, #0
 81075fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	681b      	ldr	r3, [r3, #0]
 8107604:	699b      	ldr	r3, [r3, #24]
 8107606:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	681b      	ldr	r3, [r3, #0]
 810760e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107610:	697b      	ldr	r3, [r7, #20]
 8107612:	0a1b      	lsrs	r3, r3, #8
 8107614:	f003 0301 	and.w	r3, r3, #1
 8107618:	2b00      	cmp	r3, #0
 810761a:	d010      	beq.n	810763e <HAL_I2C_ER_IRQHandler+0x46>
 810761c:	693b      	ldr	r3, [r7, #16]
 810761e:	09db      	lsrs	r3, r3, #7
 8107620:	f003 0301 	and.w	r3, r3, #1
 8107624:	2b00      	cmp	r3, #0
 8107626:	d00a      	beq.n	810763e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810762c:	f043 0201 	orr.w	r2, r3, #1
 8107630:	687b      	ldr	r3, [r7, #4]
 8107632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	f44f 7280 	mov.w	r2, #256	; 0x100
 810763c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810763e:	697b      	ldr	r3, [r7, #20]
 8107640:	0a9b      	lsrs	r3, r3, #10
 8107642:	f003 0301 	and.w	r3, r3, #1
 8107646:	2b00      	cmp	r3, #0
 8107648:	d010      	beq.n	810766c <HAL_I2C_ER_IRQHandler+0x74>
 810764a:	693b      	ldr	r3, [r7, #16]
 810764c:	09db      	lsrs	r3, r3, #7
 810764e:	f003 0301 	and.w	r3, r3, #1
 8107652:	2b00      	cmp	r3, #0
 8107654:	d00a      	beq.n	810766c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8107656:	687b      	ldr	r3, [r7, #4]
 8107658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810765a:	f043 0208 	orr.w	r2, r3, #8
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	681b      	ldr	r3, [r3, #0]
 8107666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810766a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810766c:	697b      	ldr	r3, [r7, #20]
 810766e:	0a5b      	lsrs	r3, r3, #9
 8107670:	f003 0301 	and.w	r3, r3, #1
 8107674:	2b00      	cmp	r3, #0
 8107676:	d010      	beq.n	810769a <HAL_I2C_ER_IRQHandler+0xa2>
 8107678:	693b      	ldr	r3, [r7, #16]
 810767a:	09db      	lsrs	r3, r3, #7
 810767c:	f003 0301 	and.w	r3, r3, #1
 8107680:	2b00      	cmp	r3, #0
 8107682:	d00a      	beq.n	810769a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107688:	f043 0202 	orr.w	r2, r3, #2
 810768c:	687b      	ldr	r3, [r7, #4]
 810768e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	681b      	ldr	r3, [r3, #0]
 8107694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8107698:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 810769a:	687b      	ldr	r3, [r7, #4]
 810769c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810769e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 81076a0:	68fb      	ldr	r3, [r7, #12]
 81076a2:	f003 030b 	and.w	r3, r3, #11
 81076a6:	2b00      	cmp	r3, #0
 81076a8:	d003      	beq.n	81076b2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 81076aa:	68f9      	ldr	r1, [r7, #12]
 81076ac:	6878      	ldr	r0, [r7, #4]
 81076ae:	f000 fd1f 	bl	81080f0 <I2C_ITError>
  }
}
 81076b2:	bf00      	nop
 81076b4:	3718      	adds	r7, #24
 81076b6:	46bd      	mov	sp, r7
 81076b8:	bd80      	pop	{r7, pc}

081076ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81076ba:	b480      	push	{r7}
 81076bc:	b083      	sub	sp, #12
 81076be:	af00      	add	r7, sp, #0
 81076c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 81076c2:	bf00      	nop
 81076c4:	370c      	adds	r7, #12
 81076c6:	46bd      	mov	sp, r7
 81076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076cc:	4770      	bx	lr

081076ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81076ce:	b480      	push	{r7}
 81076d0:	b083      	sub	sp, #12
 81076d2:	af00      	add	r7, sp, #0
 81076d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 81076d6:	bf00      	nop
 81076d8:	370c      	adds	r7, #12
 81076da:	46bd      	mov	sp, r7
 81076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076e0:	4770      	bx	lr

081076e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 81076e2:	b480      	push	{r7}
 81076e4:	b083      	sub	sp, #12
 81076e6:	af00      	add	r7, sp, #0
 81076e8:	6078      	str	r0, [r7, #4]
 81076ea:	460b      	mov	r3, r1
 81076ec:	70fb      	strb	r3, [r7, #3]
 81076ee:	4613      	mov	r3, r2
 81076f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 81076f2:	bf00      	nop
 81076f4:	370c      	adds	r7, #12
 81076f6:	46bd      	mov	sp, r7
 81076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076fc:	4770      	bx	lr

081076fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81076fe:	b480      	push	{r7}
 8107700:	b083      	sub	sp, #12
 8107702:	af00      	add	r7, sp, #0
 8107704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8107706:	bf00      	nop
 8107708:	370c      	adds	r7, #12
 810770a:	46bd      	mov	sp, r7
 810770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107710:	4770      	bx	lr

08107712 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107712:	b480      	push	{r7}
 8107714:	b083      	sub	sp, #12
 8107716:	af00      	add	r7, sp, #0
 8107718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 810771a:	bf00      	nop
 810771c:	370c      	adds	r7, #12
 810771e:	46bd      	mov	sp, r7
 8107720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107724:	4770      	bx	lr

08107726 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107726:	b480      	push	{r7}
 8107728:	b083      	sub	sp, #12
 810772a:	af00      	add	r7, sp, #0
 810772c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 810772e:	bf00      	nop
 8107730:	370c      	adds	r7, #12
 8107732:	46bd      	mov	sp, r7
 8107734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107738:	4770      	bx	lr

0810773a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 810773a:	b580      	push	{r7, lr}
 810773c:	b086      	sub	sp, #24
 810773e:	af00      	add	r7, sp, #0
 8107740:	60f8      	str	r0, [r7, #12]
 8107742:	60b9      	str	r1, [r7, #8]
 8107744:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8107746:	68fb      	ldr	r3, [r7, #12]
 8107748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810774a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 810774c:	68bb      	ldr	r3, [r7, #8]
 810774e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8107750:	68fb      	ldr	r3, [r7, #12]
 8107752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107756:	2b01      	cmp	r3, #1
 8107758:	d101      	bne.n	810775e <I2C_Slave_ISR_IT+0x24>
 810775a:	2302      	movs	r3, #2
 810775c:	e0ec      	b.n	8107938 <I2C_Slave_ISR_IT+0x1fe>
 810775e:	68fb      	ldr	r3, [r7, #12]
 8107760:	2201      	movs	r2, #1
 8107762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107766:	693b      	ldr	r3, [r7, #16]
 8107768:	095b      	lsrs	r3, r3, #5
 810776a:	f003 0301 	and.w	r3, r3, #1
 810776e:	2b00      	cmp	r3, #0
 8107770:	d009      	beq.n	8107786 <I2C_Slave_ISR_IT+0x4c>
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	095b      	lsrs	r3, r3, #5
 8107776:	f003 0301 	and.w	r3, r3, #1
 810777a:	2b00      	cmp	r3, #0
 810777c:	d003      	beq.n	8107786 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 810777e:	6939      	ldr	r1, [r7, #16]
 8107780:	68f8      	ldr	r0, [r7, #12]
 8107782:	f000 fa67 	bl	8107c54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107786:	693b      	ldr	r3, [r7, #16]
 8107788:	091b      	lsrs	r3, r3, #4
 810778a:	f003 0301 	and.w	r3, r3, #1
 810778e:	2b00      	cmp	r3, #0
 8107790:	d04d      	beq.n	810782e <I2C_Slave_ISR_IT+0xf4>
 8107792:	687b      	ldr	r3, [r7, #4]
 8107794:	091b      	lsrs	r3, r3, #4
 8107796:	f003 0301 	and.w	r3, r3, #1
 810779a:	2b00      	cmp	r3, #0
 810779c:	d047      	beq.n	810782e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 810779e:	68fb      	ldr	r3, [r7, #12]
 81077a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077a2:	b29b      	uxth	r3, r3
 81077a4:	2b00      	cmp	r3, #0
 81077a6:	d128      	bne.n	81077fa <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81077a8:	68fb      	ldr	r3, [r7, #12]
 81077aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077ae:	b2db      	uxtb	r3, r3
 81077b0:	2b28      	cmp	r3, #40	; 0x28
 81077b2:	d108      	bne.n	81077c6 <I2C_Slave_ISR_IT+0x8c>
 81077b4:	697b      	ldr	r3, [r7, #20]
 81077b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81077ba:	d104      	bne.n	81077c6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81077bc:	6939      	ldr	r1, [r7, #16]
 81077be:	68f8      	ldr	r0, [r7, #12]
 81077c0:	f000 fc40 	bl	8108044 <I2C_ITListenCplt>
 81077c4:	e032      	b.n	810782c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81077c6:	68fb      	ldr	r3, [r7, #12]
 81077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077cc:	b2db      	uxtb	r3, r3
 81077ce:	2b29      	cmp	r3, #41	; 0x29
 81077d0:	d10e      	bne.n	81077f0 <I2C_Slave_ISR_IT+0xb6>
 81077d2:	697b      	ldr	r3, [r7, #20]
 81077d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077d8:	d00a      	beq.n	81077f0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077da:	68fb      	ldr	r3, [r7, #12]
 81077dc:	681b      	ldr	r3, [r3, #0]
 81077de:	2210      	movs	r2, #16
 81077e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 81077e2:	68f8      	ldr	r0, [r7, #12]
 81077e4:	f000 fd7b 	bl	81082de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81077e8:	68f8      	ldr	r0, [r7, #12]
 81077ea:	f000 f9d5 	bl	8107b98 <I2C_ITSlaveSeqCplt>
 81077ee:	e01d      	b.n	810782c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077f0:	68fb      	ldr	r3, [r7, #12]
 81077f2:	681b      	ldr	r3, [r3, #0]
 81077f4:	2210      	movs	r2, #16
 81077f6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 81077f8:	e096      	b.n	8107928 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077fa:	68fb      	ldr	r3, [r7, #12]
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	2210      	movs	r2, #16
 8107800:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107802:	68fb      	ldr	r3, [r7, #12]
 8107804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107806:	f043 0204 	orr.w	r2, r3, #4
 810780a:	68fb      	ldr	r3, [r7, #12]
 810780c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810780e:	697b      	ldr	r3, [r7, #20]
 8107810:	2b00      	cmp	r3, #0
 8107812:	d004      	beq.n	810781e <I2C_Slave_ISR_IT+0xe4>
 8107814:	697b      	ldr	r3, [r7, #20]
 8107816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810781a:	f040 8085 	bne.w	8107928 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 810781e:	68fb      	ldr	r3, [r7, #12]
 8107820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107822:	4619      	mov	r1, r3
 8107824:	68f8      	ldr	r0, [r7, #12]
 8107826:	f000 fc63 	bl	81080f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 810782a:	e07d      	b.n	8107928 <I2C_Slave_ISR_IT+0x1ee>
 810782c:	e07c      	b.n	8107928 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 810782e:	693b      	ldr	r3, [r7, #16]
 8107830:	089b      	lsrs	r3, r3, #2
 8107832:	f003 0301 	and.w	r3, r3, #1
 8107836:	2b00      	cmp	r3, #0
 8107838:	d030      	beq.n	810789c <I2C_Slave_ISR_IT+0x162>
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	089b      	lsrs	r3, r3, #2
 810783e:	f003 0301 	and.w	r3, r3, #1
 8107842:	2b00      	cmp	r3, #0
 8107844:	d02a      	beq.n	810789c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810784a:	b29b      	uxth	r3, r3
 810784c:	2b00      	cmp	r3, #0
 810784e:	d018      	beq.n	8107882 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107850:	68fb      	ldr	r3, [r7, #12]
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107856:	68fb      	ldr	r3, [r7, #12]
 8107858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810785a:	b2d2      	uxtb	r2, r2
 810785c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810785e:	68fb      	ldr	r3, [r7, #12]
 8107860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107862:	1c5a      	adds	r2, r3, #1
 8107864:	68fb      	ldr	r3, [r7, #12]
 8107866:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8107868:	68fb      	ldr	r3, [r7, #12]
 810786a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810786c:	3b01      	subs	r3, #1
 810786e:	b29a      	uxth	r2, r3
 8107870:	68fb      	ldr	r3, [r7, #12]
 8107872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107874:	68fb      	ldr	r3, [r7, #12]
 8107876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107878:	b29b      	uxth	r3, r3
 810787a:	3b01      	subs	r3, #1
 810787c:	b29a      	uxth	r2, r3
 810787e:	68fb      	ldr	r3, [r7, #12]
 8107880:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8107882:	68fb      	ldr	r3, [r7, #12]
 8107884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107886:	b29b      	uxth	r3, r3
 8107888:	2b00      	cmp	r3, #0
 810788a:	d14f      	bne.n	810792c <I2C_Slave_ISR_IT+0x1f2>
 810788c:	697b      	ldr	r3, [r7, #20]
 810788e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107892:	d04b      	beq.n	810792c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107894:	68f8      	ldr	r0, [r7, #12]
 8107896:	f000 f97f 	bl	8107b98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 810789a:	e047      	b.n	810792c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810789c:	693b      	ldr	r3, [r7, #16]
 810789e:	08db      	lsrs	r3, r3, #3
 81078a0:	f003 0301 	and.w	r3, r3, #1
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d00a      	beq.n	81078be <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	08db      	lsrs	r3, r3, #3
 81078ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81078b0:	2b00      	cmp	r3, #0
 81078b2:	d004      	beq.n	81078be <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 81078b4:	6939      	ldr	r1, [r7, #16]
 81078b6:	68f8      	ldr	r0, [r7, #12]
 81078b8:	f000 f8ea 	bl	8107a90 <I2C_ITAddrCplt>
 81078bc:	e037      	b.n	810792e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81078be:	693b      	ldr	r3, [r7, #16]
 81078c0:	085b      	lsrs	r3, r3, #1
 81078c2:	f003 0301 	and.w	r3, r3, #1
 81078c6:	2b00      	cmp	r3, #0
 81078c8:	d031      	beq.n	810792e <I2C_Slave_ISR_IT+0x1f4>
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	085b      	lsrs	r3, r3, #1
 81078ce:	f003 0301 	and.w	r3, r3, #1
 81078d2:	2b00      	cmp	r3, #0
 81078d4:	d02b      	beq.n	810792e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 81078d6:	68fb      	ldr	r3, [r7, #12]
 81078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81078da:	b29b      	uxth	r3, r3
 81078dc:	2b00      	cmp	r3, #0
 81078de:	d018      	beq.n	8107912 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81078e0:	68fb      	ldr	r3, [r7, #12]
 81078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078e4:	781a      	ldrb	r2, [r3, #0]
 81078e6:	68fb      	ldr	r3, [r7, #12]
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81078ec:	68fb      	ldr	r3, [r7, #12]
 81078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81078f0:	1c5a      	adds	r2, r3, #1
 81078f2:	68fb      	ldr	r3, [r7, #12]
 81078f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81078f6:	68fb      	ldr	r3, [r7, #12]
 81078f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81078fa:	b29b      	uxth	r3, r3
 81078fc:	3b01      	subs	r3, #1
 81078fe:	b29a      	uxth	r2, r3
 8107900:	68fb      	ldr	r3, [r7, #12]
 8107902:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8107904:	68fb      	ldr	r3, [r7, #12]
 8107906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107908:	3b01      	subs	r3, #1
 810790a:	b29a      	uxth	r2, r3
 810790c:	68fb      	ldr	r3, [r7, #12]
 810790e:	851a      	strh	r2, [r3, #40]	; 0x28
 8107910:	e00d      	b.n	810792e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8107912:	697b      	ldr	r3, [r7, #20]
 8107914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107918:	d002      	beq.n	8107920 <I2C_Slave_ISR_IT+0x1e6>
 810791a:	697b      	ldr	r3, [r7, #20]
 810791c:	2b00      	cmp	r3, #0
 810791e:	d106      	bne.n	810792e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107920:	68f8      	ldr	r0, [r7, #12]
 8107922:	f000 f939 	bl	8107b98 <I2C_ITSlaveSeqCplt>
 8107926:	e002      	b.n	810792e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107928:	bf00      	nop
 810792a:	e000      	b.n	810792e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 810792c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810792e:	68fb      	ldr	r3, [r7, #12]
 8107930:	2200      	movs	r2, #0
 8107932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8107936:	2300      	movs	r3, #0
}
 8107938:	4618      	mov	r0, r3
 810793a:	3718      	adds	r7, #24
 810793c:	46bd      	mov	sp, r7
 810793e:	bd80      	pop	{r7, pc}

08107940 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107940:	b580      	push	{r7, lr}
 8107942:	b086      	sub	sp, #24
 8107944:	af02      	add	r7, sp, #8
 8107946:	60f8      	str	r0, [r7, #12]
 8107948:	4608      	mov	r0, r1
 810794a:	4611      	mov	r1, r2
 810794c:	461a      	mov	r2, r3
 810794e:	4603      	mov	r3, r0
 8107950:	817b      	strh	r3, [r7, #10]
 8107952:	460b      	mov	r3, r1
 8107954:	813b      	strh	r3, [r7, #8]
 8107956:	4613      	mov	r3, r2
 8107958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810795a:	88fb      	ldrh	r3, [r7, #6]
 810795c:	b2da      	uxtb	r2, r3
 810795e:	8979      	ldrh	r1, [r7, #10]
 8107960:	4b20      	ldr	r3, [pc, #128]	; (81079e4 <I2C_RequestMemoryWrite+0xa4>)
 8107962:	9300      	str	r3, [sp, #0]
 8107964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107968:	68f8      	ldr	r0, [r7, #12]
 810796a:	f000 fe1d 	bl	81085a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810796e:	69fa      	ldr	r2, [r7, #28]
 8107970:	69b9      	ldr	r1, [r7, #24]
 8107972:	68f8      	ldr	r0, [r7, #12]
 8107974:	f000 fd35 	bl	81083e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8107978:	4603      	mov	r3, r0
 810797a:	2b00      	cmp	r3, #0
 810797c:	d001      	beq.n	8107982 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 810797e:	2301      	movs	r3, #1
 8107980:	e02c      	b.n	81079dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107982:	88fb      	ldrh	r3, [r7, #6]
 8107984:	2b01      	cmp	r3, #1
 8107986:	d105      	bne.n	8107994 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107988:	893b      	ldrh	r3, [r7, #8]
 810798a:	b2da      	uxtb	r2, r3
 810798c:	68fb      	ldr	r3, [r7, #12]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	629a      	str	r2, [r3, #40]	; 0x28
 8107992:	e015      	b.n	81079c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107994:	893b      	ldrh	r3, [r7, #8]
 8107996:	0a1b      	lsrs	r3, r3, #8
 8107998:	b29b      	uxth	r3, r3
 810799a:	b2da      	uxtb	r2, r3
 810799c:	68fb      	ldr	r3, [r7, #12]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81079a2:	69fa      	ldr	r2, [r7, #28]
 81079a4:	69b9      	ldr	r1, [r7, #24]
 81079a6:	68f8      	ldr	r0, [r7, #12]
 81079a8:	f000 fd1b 	bl	81083e2 <I2C_WaitOnTXISFlagUntilTimeout>
 81079ac:	4603      	mov	r3, r0
 81079ae:	2b00      	cmp	r3, #0
 81079b0:	d001      	beq.n	81079b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81079b2:	2301      	movs	r3, #1
 81079b4:	e012      	b.n	81079dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81079b6:	893b      	ldrh	r3, [r7, #8]
 81079b8:	b2da      	uxtb	r2, r3
 81079ba:	68fb      	ldr	r3, [r7, #12]
 81079bc:	681b      	ldr	r3, [r3, #0]
 81079be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81079c0:	69fb      	ldr	r3, [r7, #28]
 81079c2:	9300      	str	r3, [sp, #0]
 81079c4:	69bb      	ldr	r3, [r7, #24]
 81079c6:	2200      	movs	r2, #0
 81079c8:	2180      	movs	r1, #128	; 0x80
 81079ca:	68f8      	ldr	r0, [r7, #12]
 81079cc:	f000 fcc9 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 81079d0:	4603      	mov	r3, r0
 81079d2:	2b00      	cmp	r3, #0
 81079d4:	d001      	beq.n	81079da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81079d6:	2301      	movs	r3, #1
 81079d8:	e000      	b.n	81079dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81079da:	2300      	movs	r3, #0
}
 81079dc:	4618      	mov	r0, r3
 81079de:	3710      	adds	r7, #16
 81079e0:	46bd      	mov	sp, r7
 81079e2:	bd80      	pop	{r7, pc}
 81079e4:	80002000 	.word	0x80002000

081079e8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81079e8:	b580      	push	{r7, lr}
 81079ea:	b086      	sub	sp, #24
 81079ec:	af02      	add	r7, sp, #8
 81079ee:	60f8      	str	r0, [r7, #12]
 81079f0:	4608      	mov	r0, r1
 81079f2:	4611      	mov	r1, r2
 81079f4:	461a      	mov	r2, r3
 81079f6:	4603      	mov	r3, r0
 81079f8:	817b      	strh	r3, [r7, #10]
 81079fa:	460b      	mov	r3, r1
 81079fc:	813b      	strh	r3, [r7, #8]
 81079fe:	4613      	mov	r3, r2
 8107a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8107a02:	88fb      	ldrh	r3, [r7, #6]
 8107a04:	b2da      	uxtb	r2, r3
 8107a06:	8979      	ldrh	r1, [r7, #10]
 8107a08:	4b20      	ldr	r3, [pc, #128]	; (8107a8c <I2C_RequestMemoryRead+0xa4>)
 8107a0a:	9300      	str	r3, [sp, #0]
 8107a0c:	2300      	movs	r3, #0
 8107a0e:	68f8      	ldr	r0, [r7, #12]
 8107a10:	f000 fdca 	bl	81085a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107a14:	69fa      	ldr	r2, [r7, #28]
 8107a16:	69b9      	ldr	r1, [r7, #24]
 8107a18:	68f8      	ldr	r0, [r7, #12]
 8107a1a:	f000 fce2 	bl	81083e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8107a1e:	4603      	mov	r3, r0
 8107a20:	2b00      	cmp	r3, #0
 8107a22:	d001      	beq.n	8107a28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8107a24:	2301      	movs	r3, #1
 8107a26:	e02c      	b.n	8107a82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107a28:	88fb      	ldrh	r3, [r7, #6]
 8107a2a:	2b01      	cmp	r3, #1
 8107a2c:	d105      	bne.n	8107a3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107a2e:	893b      	ldrh	r3, [r7, #8]
 8107a30:	b2da      	uxtb	r2, r3
 8107a32:	68fb      	ldr	r3, [r7, #12]
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	629a      	str	r2, [r3, #40]	; 0x28
 8107a38:	e015      	b.n	8107a66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107a3a:	893b      	ldrh	r3, [r7, #8]
 8107a3c:	0a1b      	lsrs	r3, r3, #8
 8107a3e:	b29b      	uxth	r3, r3
 8107a40:	b2da      	uxtb	r2, r3
 8107a42:	68fb      	ldr	r3, [r7, #12]
 8107a44:	681b      	ldr	r3, [r3, #0]
 8107a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107a48:	69fa      	ldr	r2, [r7, #28]
 8107a4a:	69b9      	ldr	r1, [r7, #24]
 8107a4c:	68f8      	ldr	r0, [r7, #12]
 8107a4e:	f000 fcc8 	bl	81083e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8107a52:	4603      	mov	r3, r0
 8107a54:	2b00      	cmp	r3, #0
 8107a56:	d001      	beq.n	8107a5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8107a58:	2301      	movs	r3, #1
 8107a5a:	e012      	b.n	8107a82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107a5c:	893b      	ldrh	r3, [r7, #8]
 8107a5e:	b2da      	uxtb	r2, r3
 8107a60:	68fb      	ldr	r3, [r7, #12]
 8107a62:	681b      	ldr	r3, [r3, #0]
 8107a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8107a66:	69fb      	ldr	r3, [r7, #28]
 8107a68:	9300      	str	r3, [sp, #0]
 8107a6a:	69bb      	ldr	r3, [r7, #24]
 8107a6c:	2200      	movs	r2, #0
 8107a6e:	2140      	movs	r1, #64	; 0x40
 8107a70:	68f8      	ldr	r0, [r7, #12]
 8107a72:	f000 fc76 	bl	8108362 <I2C_WaitOnFlagUntilTimeout>
 8107a76:	4603      	mov	r3, r0
 8107a78:	2b00      	cmp	r3, #0
 8107a7a:	d001      	beq.n	8107a80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8107a7c:	2301      	movs	r3, #1
 8107a7e:	e000      	b.n	8107a82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107a80:	2300      	movs	r3, #0
}
 8107a82:	4618      	mov	r0, r3
 8107a84:	3710      	adds	r7, #16
 8107a86:	46bd      	mov	sp, r7
 8107a88:	bd80      	pop	{r7, pc}
 8107a8a:	bf00      	nop
 8107a8c:	80002000 	.word	0x80002000

08107a90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107a90:	b580      	push	{r7, lr}
 8107a92:	b084      	sub	sp, #16
 8107a94:	af00      	add	r7, sp, #0
 8107a96:	6078      	str	r0, [r7, #4]
 8107a98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107aa0:	b2db      	uxtb	r3, r3
 8107aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107aa6:	2b28      	cmp	r3, #40	; 0x28
 8107aa8:	d16a      	bne.n	8107b80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	681b      	ldr	r3, [r3, #0]
 8107aae:	699b      	ldr	r3, [r3, #24]
 8107ab0:	0c1b      	lsrs	r3, r3, #16
 8107ab2:	b2db      	uxtb	r3, r3
 8107ab4:	f003 0301 	and.w	r3, r3, #1
 8107ab8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	681b      	ldr	r3, [r3, #0]
 8107abe:	699b      	ldr	r3, [r3, #24]
 8107ac0:	0c1b      	lsrs	r3, r3, #16
 8107ac2:	b29b      	uxth	r3, r3
 8107ac4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107ac8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	681b      	ldr	r3, [r3, #0]
 8107ace:	689b      	ldr	r3, [r3, #8]
 8107ad0:	b29b      	uxth	r3, r3
 8107ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107ad6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	68db      	ldr	r3, [r3, #12]
 8107ade:	b29b      	uxth	r3, r3
 8107ae0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107ae4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107ae6:	687b      	ldr	r3, [r7, #4]
 8107ae8:	68db      	ldr	r3, [r3, #12]
 8107aea:	2b02      	cmp	r3, #2
 8107aec:	d138      	bne.n	8107b60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107aee:	897b      	ldrh	r3, [r7, #10]
 8107af0:	09db      	lsrs	r3, r3, #7
 8107af2:	b29a      	uxth	r2, r3
 8107af4:	89bb      	ldrh	r3, [r7, #12]
 8107af6:	4053      	eors	r3, r2
 8107af8:	b29b      	uxth	r3, r3
 8107afa:	f003 0306 	and.w	r3, r3, #6
 8107afe:	2b00      	cmp	r3, #0
 8107b00:	d11c      	bne.n	8107b3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107b02:	897b      	ldrh	r3, [r7, #10]
 8107b04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107b0a:	1c5a      	adds	r2, r3, #1
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8107b10:	687b      	ldr	r3, [r7, #4]
 8107b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107b14:	2b02      	cmp	r3, #2
 8107b16:	d13b      	bne.n	8107b90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	2200      	movs	r2, #0
 8107b1c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107b1e:	687b      	ldr	r3, [r7, #4]
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	2208      	movs	r2, #8
 8107b24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107b26:	687b      	ldr	r3, [r7, #4]
 8107b28:	2200      	movs	r2, #0
 8107b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107b2e:	89ba      	ldrh	r2, [r7, #12]
 8107b30:	7bfb      	ldrb	r3, [r7, #15]
 8107b32:	4619      	mov	r1, r3
 8107b34:	6878      	ldr	r0, [r7, #4]
 8107b36:	f7ff fdd4 	bl	81076e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107b3a:	e029      	b.n	8107b90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107b3c:	893b      	ldrh	r3, [r7, #8]
 8107b3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107b44:	6878      	ldr	r0, [r7, #4]
 8107b46:	f000 fd5d 	bl	8108604 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	2200      	movs	r2, #0
 8107b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107b52:	89ba      	ldrh	r2, [r7, #12]
 8107b54:	7bfb      	ldrb	r3, [r7, #15]
 8107b56:	4619      	mov	r1, r3
 8107b58:	6878      	ldr	r0, [r7, #4]
 8107b5a:	f7ff fdc2 	bl	81076e2 <HAL_I2C_AddrCallback>
}
 8107b5e:	e017      	b.n	8107b90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107b64:	6878      	ldr	r0, [r7, #4]
 8107b66:	f000 fd4d 	bl	8108604 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	2200      	movs	r2, #0
 8107b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107b72:	89ba      	ldrh	r2, [r7, #12]
 8107b74:	7bfb      	ldrb	r3, [r7, #15]
 8107b76:	4619      	mov	r1, r3
 8107b78:	6878      	ldr	r0, [r7, #4]
 8107b7a:	f7ff fdb2 	bl	81076e2 <HAL_I2C_AddrCallback>
}
 8107b7e:	e007      	b.n	8107b90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	681b      	ldr	r3, [r3, #0]
 8107b84:	2208      	movs	r2, #8
 8107b86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	2200      	movs	r2, #0
 8107b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107b90:	bf00      	nop
 8107b92:	3710      	adds	r7, #16
 8107b94:	46bd      	mov	sp, r7
 8107b96:	bd80      	pop	{r7, pc}

08107b98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107b98:	b580      	push	{r7, lr}
 8107b9a:	b084      	sub	sp, #16
 8107b9c:	af00      	add	r7, sp, #0
 8107b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107ba8:	687b      	ldr	r3, [r7, #4]
 8107baa:	2200      	movs	r2, #0
 8107bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107bb0:	68fb      	ldr	r3, [r7, #12]
 8107bb2:	0b9b      	lsrs	r3, r3, #14
 8107bb4:	f003 0301 	and.w	r3, r3, #1
 8107bb8:	2b00      	cmp	r3, #0
 8107bba:	d008      	beq.n	8107bce <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	681a      	ldr	r2, [r3, #0]
 8107bc2:	687b      	ldr	r3, [r7, #4]
 8107bc4:	681b      	ldr	r3, [r3, #0]
 8107bc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107bca:	601a      	str	r2, [r3, #0]
 8107bcc:	e00d      	b.n	8107bea <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107bce:	68fb      	ldr	r3, [r7, #12]
 8107bd0:	0bdb      	lsrs	r3, r3, #15
 8107bd2:	f003 0301 	and.w	r3, r3, #1
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	d007      	beq.n	8107bea <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	681a      	ldr	r2, [r3, #0]
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	681b      	ldr	r3, [r3, #0]
 8107be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107be8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107bf0:	b2db      	uxtb	r3, r3
 8107bf2:	2b29      	cmp	r3, #41	; 0x29
 8107bf4:	d112      	bne.n	8107c1c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	2228      	movs	r2, #40	; 0x28
 8107bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107bfe:	687b      	ldr	r3, [r7, #4]
 8107c00:	2221      	movs	r2, #33	; 0x21
 8107c02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107c04:	2101      	movs	r1, #1
 8107c06:	6878      	ldr	r0, [r7, #4]
 8107c08:	f000 fcfc 	bl	8108604 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	2200      	movs	r2, #0
 8107c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107c14:	6878      	ldr	r0, [r7, #4]
 8107c16:	f7ff fd50 	bl	81076ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107c1a:	e017      	b.n	8107c4c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c22:	b2db      	uxtb	r3, r3
 8107c24:	2b2a      	cmp	r3, #42	; 0x2a
 8107c26:	d111      	bne.n	8107c4c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	2228      	movs	r2, #40	; 0x28
 8107c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	2222      	movs	r2, #34	; 0x22
 8107c34:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107c36:	2102      	movs	r1, #2
 8107c38:	6878      	ldr	r0, [r7, #4]
 8107c3a:	f000 fce3 	bl	8108604 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	2200      	movs	r2, #0
 8107c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107c46:	6878      	ldr	r0, [r7, #4]
 8107c48:	f7ff fd41 	bl	81076ce <HAL_I2C_SlaveRxCpltCallback>
}
 8107c4c:	bf00      	nop
 8107c4e:	3710      	adds	r7, #16
 8107c50:	46bd      	mov	sp, r7
 8107c52:	bd80      	pop	{r7, pc}

08107c54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107c54:	b580      	push	{r7, lr}
 8107c56:	b086      	sub	sp, #24
 8107c58:	af00      	add	r7, sp, #0
 8107c5a:	6078      	str	r0, [r7, #4]
 8107c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107c66:	683b      	ldr	r3, [r7, #0]
 8107c68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107c6a:	687b      	ldr	r3, [r7, #4]
 8107c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	681b      	ldr	r3, [r3, #0]
 8107c76:	2220      	movs	r2, #32
 8107c78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107c7a:	7bfb      	ldrb	r3, [r7, #15]
 8107c7c:	2b21      	cmp	r3, #33	; 0x21
 8107c7e:	d002      	beq.n	8107c86 <I2C_ITSlaveCplt+0x32>
 8107c80:	7bfb      	ldrb	r3, [r7, #15]
 8107c82:	2b29      	cmp	r3, #41	; 0x29
 8107c84:	d108      	bne.n	8107c98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107c86:	f248 0101 	movw	r1, #32769	; 0x8001
 8107c8a:	6878      	ldr	r0, [r7, #4]
 8107c8c:	f000 fcba 	bl	8108604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	2221      	movs	r2, #33	; 0x21
 8107c94:	631a      	str	r2, [r3, #48]	; 0x30
 8107c96:	e00d      	b.n	8107cb4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107c98:	7bfb      	ldrb	r3, [r7, #15]
 8107c9a:	2b22      	cmp	r3, #34	; 0x22
 8107c9c:	d002      	beq.n	8107ca4 <I2C_ITSlaveCplt+0x50>
 8107c9e:	7bfb      	ldrb	r3, [r7, #15]
 8107ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8107ca2:	d107      	bne.n	8107cb4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107ca4:	f248 0102 	movw	r1, #32770	; 0x8002
 8107ca8:	6878      	ldr	r0, [r7, #4]
 8107caa:	f000 fcab 	bl	8108604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	2222      	movs	r2, #34	; 0x22
 8107cb2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	681b      	ldr	r3, [r3, #0]
 8107cb8:	685a      	ldr	r2, [r3, #4]
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	681b      	ldr	r3, [r3, #0]
 8107cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107cc2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	681b      	ldr	r3, [r3, #0]
 8107cc8:	6859      	ldr	r1, [r3, #4]
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	681a      	ldr	r2, [r3, #0]
 8107cce:	4b80      	ldr	r3, [pc, #512]	; (8107ed0 <I2C_ITSlaveCplt+0x27c>)
 8107cd0:	400b      	ands	r3, r1
 8107cd2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107cd4:	6878      	ldr	r0, [r7, #4]
 8107cd6:	f000 fb02 	bl	81082de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107cda:	693b      	ldr	r3, [r7, #16]
 8107cdc:	0b9b      	lsrs	r3, r3, #14
 8107cde:	f003 0301 	and.w	r3, r3, #1
 8107ce2:	2b00      	cmp	r3, #0
 8107ce4:	d07a      	beq.n	8107ddc <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107ce6:	687b      	ldr	r3, [r7, #4]
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	681a      	ldr	r2, [r3, #0]
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	681b      	ldr	r3, [r3, #0]
 8107cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107cf4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cfa:	2b00      	cmp	r3, #0
 8107cfc:	f000 8111 	beq.w	8107f22 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d04:	681b      	ldr	r3, [r3, #0]
 8107d06:	4a73      	ldr	r2, [pc, #460]	; (8107ed4 <I2C_ITSlaveCplt+0x280>)
 8107d08:	4293      	cmp	r3, r2
 8107d0a:	d059      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d0c:	687b      	ldr	r3, [r7, #4]
 8107d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	4a71      	ldr	r2, [pc, #452]	; (8107ed8 <I2C_ITSlaveCplt+0x284>)
 8107d14:	4293      	cmp	r3, r2
 8107d16:	d053      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d18:	687b      	ldr	r3, [r7, #4]
 8107d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d1c:	681b      	ldr	r3, [r3, #0]
 8107d1e:	4a6f      	ldr	r2, [pc, #444]	; (8107edc <I2C_ITSlaveCplt+0x288>)
 8107d20:	4293      	cmp	r3, r2
 8107d22:	d04d      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d28:	681b      	ldr	r3, [r3, #0]
 8107d2a:	4a6d      	ldr	r2, [pc, #436]	; (8107ee0 <I2C_ITSlaveCplt+0x28c>)
 8107d2c:	4293      	cmp	r3, r2
 8107d2e:	d047      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d34:	681b      	ldr	r3, [r3, #0]
 8107d36:	4a6b      	ldr	r2, [pc, #428]	; (8107ee4 <I2C_ITSlaveCplt+0x290>)
 8107d38:	4293      	cmp	r3, r2
 8107d3a:	d041      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d3c:	687b      	ldr	r3, [r7, #4]
 8107d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d40:	681b      	ldr	r3, [r3, #0]
 8107d42:	4a69      	ldr	r2, [pc, #420]	; (8107ee8 <I2C_ITSlaveCplt+0x294>)
 8107d44:	4293      	cmp	r3, r2
 8107d46:	d03b      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d48:	687b      	ldr	r3, [r7, #4]
 8107d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	4a67      	ldr	r2, [pc, #412]	; (8107eec <I2C_ITSlaveCplt+0x298>)
 8107d50:	4293      	cmp	r3, r2
 8107d52:	d035      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d54:	687b      	ldr	r3, [r7, #4]
 8107d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d58:	681b      	ldr	r3, [r3, #0]
 8107d5a:	4a65      	ldr	r2, [pc, #404]	; (8107ef0 <I2C_ITSlaveCplt+0x29c>)
 8107d5c:	4293      	cmp	r3, r2
 8107d5e:	d02f      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d64:	681b      	ldr	r3, [r3, #0]
 8107d66:	4a63      	ldr	r2, [pc, #396]	; (8107ef4 <I2C_ITSlaveCplt+0x2a0>)
 8107d68:	4293      	cmp	r3, r2
 8107d6a:	d029      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d70:	681b      	ldr	r3, [r3, #0]
 8107d72:	4a61      	ldr	r2, [pc, #388]	; (8107ef8 <I2C_ITSlaveCplt+0x2a4>)
 8107d74:	4293      	cmp	r3, r2
 8107d76:	d023      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d78:	687b      	ldr	r3, [r7, #4]
 8107d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d7c:	681b      	ldr	r3, [r3, #0]
 8107d7e:	4a5f      	ldr	r2, [pc, #380]	; (8107efc <I2C_ITSlaveCplt+0x2a8>)
 8107d80:	4293      	cmp	r3, r2
 8107d82:	d01d      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d88:	681b      	ldr	r3, [r3, #0]
 8107d8a:	4a5d      	ldr	r2, [pc, #372]	; (8107f00 <I2C_ITSlaveCplt+0x2ac>)
 8107d8c:	4293      	cmp	r3, r2
 8107d8e:	d017      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d90:	687b      	ldr	r3, [r7, #4]
 8107d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d94:	681b      	ldr	r3, [r3, #0]
 8107d96:	4a5b      	ldr	r2, [pc, #364]	; (8107f04 <I2C_ITSlaveCplt+0x2b0>)
 8107d98:	4293      	cmp	r3, r2
 8107d9a:	d011      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107da0:	681b      	ldr	r3, [r3, #0]
 8107da2:	4a59      	ldr	r2, [pc, #356]	; (8107f08 <I2C_ITSlaveCplt+0x2b4>)
 8107da4:	4293      	cmp	r3, r2
 8107da6:	d00b      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107dac:	681b      	ldr	r3, [r3, #0]
 8107dae:	4a57      	ldr	r2, [pc, #348]	; (8107f0c <I2C_ITSlaveCplt+0x2b8>)
 8107db0:	4293      	cmp	r3, r2
 8107db2:	d005      	beq.n	8107dc0 <I2C_ITSlaveCplt+0x16c>
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107db8:	681b      	ldr	r3, [r3, #0]
 8107dba:	4a55      	ldr	r2, [pc, #340]	; (8107f10 <I2C_ITSlaveCplt+0x2bc>)
 8107dbc:	4293      	cmp	r3, r2
 8107dbe:	d105      	bne.n	8107dcc <I2C_ITSlaveCplt+0x178>
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	685b      	ldr	r3, [r3, #4]
 8107dc8:	b29b      	uxth	r3, r3
 8107dca:	e004      	b.n	8107dd6 <I2C_ITSlaveCplt+0x182>
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	685b      	ldr	r3, [r3, #4]
 8107dd4:	b29b      	uxth	r3, r3
 8107dd6:	687a      	ldr	r2, [r7, #4]
 8107dd8:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107dda:	e0a2      	b.n	8107f22 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107ddc:	693b      	ldr	r3, [r7, #16]
 8107dde:	0bdb      	lsrs	r3, r3, #15
 8107de0:	f003 0301 	and.w	r3, r3, #1
 8107de4:	2b00      	cmp	r3, #0
 8107de6:	f000 809c 	beq.w	8107f22 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	681b      	ldr	r3, [r3, #0]
 8107dee:	681a      	ldr	r2, [r3, #0]
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	681b      	ldr	r3, [r3, #0]
 8107df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107df8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dfe:	2b00      	cmp	r3, #0
 8107e00:	f000 808f 	beq.w	8107f22 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	4a32      	ldr	r2, [pc, #200]	; (8107ed4 <I2C_ITSlaveCplt+0x280>)
 8107e0c:	4293      	cmp	r3, r2
 8107e0e:	d059      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	4a30      	ldr	r2, [pc, #192]	; (8107ed8 <I2C_ITSlaveCplt+0x284>)
 8107e18:	4293      	cmp	r3, r2
 8107e1a:	d053      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e20:	681b      	ldr	r3, [r3, #0]
 8107e22:	4a2e      	ldr	r2, [pc, #184]	; (8107edc <I2C_ITSlaveCplt+0x288>)
 8107e24:	4293      	cmp	r3, r2
 8107e26:	d04d      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e28:	687b      	ldr	r3, [r7, #4]
 8107e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e2c:	681b      	ldr	r3, [r3, #0]
 8107e2e:	4a2c      	ldr	r2, [pc, #176]	; (8107ee0 <I2C_ITSlaveCplt+0x28c>)
 8107e30:	4293      	cmp	r3, r2
 8107e32:	d047      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e38:	681b      	ldr	r3, [r3, #0]
 8107e3a:	4a2a      	ldr	r2, [pc, #168]	; (8107ee4 <I2C_ITSlaveCplt+0x290>)
 8107e3c:	4293      	cmp	r3, r2
 8107e3e:	d041      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e44:	681b      	ldr	r3, [r3, #0]
 8107e46:	4a28      	ldr	r2, [pc, #160]	; (8107ee8 <I2C_ITSlaveCplt+0x294>)
 8107e48:	4293      	cmp	r3, r2
 8107e4a:	d03b      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e50:	681b      	ldr	r3, [r3, #0]
 8107e52:	4a26      	ldr	r2, [pc, #152]	; (8107eec <I2C_ITSlaveCplt+0x298>)
 8107e54:	4293      	cmp	r3, r2
 8107e56:	d035      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e58:	687b      	ldr	r3, [r7, #4]
 8107e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e5c:	681b      	ldr	r3, [r3, #0]
 8107e5e:	4a24      	ldr	r2, [pc, #144]	; (8107ef0 <I2C_ITSlaveCplt+0x29c>)
 8107e60:	4293      	cmp	r3, r2
 8107e62:	d02f      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e64:	687b      	ldr	r3, [r7, #4]
 8107e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	4a22      	ldr	r2, [pc, #136]	; (8107ef4 <I2C_ITSlaveCplt+0x2a0>)
 8107e6c:	4293      	cmp	r3, r2
 8107e6e:	d029      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	4a20      	ldr	r2, [pc, #128]	; (8107ef8 <I2C_ITSlaveCplt+0x2a4>)
 8107e78:	4293      	cmp	r3, r2
 8107e7a:	d023      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e80:	681b      	ldr	r3, [r3, #0]
 8107e82:	4a1e      	ldr	r2, [pc, #120]	; (8107efc <I2C_ITSlaveCplt+0x2a8>)
 8107e84:	4293      	cmp	r3, r2
 8107e86:	d01d      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	4a1c      	ldr	r2, [pc, #112]	; (8107f00 <I2C_ITSlaveCplt+0x2ac>)
 8107e90:	4293      	cmp	r3, r2
 8107e92:	d017      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e98:	681b      	ldr	r3, [r3, #0]
 8107e9a:	4a1a      	ldr	r2, [pc, #104]	; (8107f04 <I2C_ITSlaveCplt+0x2b0>)
 8107e9c:	4293      	cmp	r3, r2
 8107e9e:	d011      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	4a18      	ldr	r2, [pc, #96]	; (8107f08 <I2C_ITSlaveCplt+0x2b4>)
 8107ea8:	4293      	cmp	r3, r2
 8107eaa:	d00b      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	4a16      	ldr	r2, [pc, #88]	; (8107f0c <I2C_ITSlaveCplt+0x2b8>)
 8107eb4:	4293      	cmp	r3, r2
 8107eb6:	d005      	beq.n	8107ec4 <I2C_ITSlaveCplt+0x270>
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ebc:	681b      	ldr	r3, [r3, #0]
 8107ebe:	4a14      	ldr	r2, [pc, #80]	; (8107f10 <I2C_ITSlaveCplt+0x2bc>)
 8107ec0:	4293      	cmp	r3, r2
 8107ec2:	d127      	bne.n	8107f14 <I2C_ITSlaveCplt+0x2c0>
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ec8:	681b      	ldr	r3, [r3, #0]
 8107eca:	685b      	ldr	r3, [r3, #4]
 8107ecc:	b29b      	uxth	r3, r3
 8107ece:	e026      	b.n	8107f1e <I2C_ITSlaveCplt+0x2ca>
 8107ed0:	fe00e800 	.word	0xfe00e800
 8107ed4:	40020010 	.word	0x40020010
 8107ed8:	40020028 	.word	0x40020028
 8107edc:	40020040 	.word	0x40020040
 8107ee0:	40020058 	.word	0x40020058
 8107ee4:	40020070 	.word	0x40020070
 8107ee8:	40020088 	.word	0x40020088
 8107eec:	400200a0 	.word	0x400200a0
 8107ef0:	400200b8 	.word	0x400200b8
 8107ef4:	40020410 	.word	0x40020410
 8107ef8:	40020428 	.word	0x40020428
 8107efc:	40020440 	.word	0x40020440
 8107f00:	40020458 	.word	0x40020458
 8107f04:	40020470 	.word	0x40020470
 8107f08:	40020488 	.word	0x40020488
 8107f0c:	400204a0 	.word	0x400204a0
 8107f10:	400204b8 	.word	0x400204b8
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f18:	681b      	ldr	r3, [r3, #0]
 8107f1a:	685b      	ldr	r3, [r3, #4]
 8107f1c:	b29b      	uxth	r3, r3
 8107f1e:	687a      	ldr	r2, [r7, #4]
 8107f20:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8107f22:	697b      	ldr	r3, [r7, #20]
 8107f24:	089b      	lsrs	r3, r3, #2
 8107f26:	f003 0301 	and.w	r3, r3, #1
 8107f2a:	2b00      	cmp	r3, #0
 8107f2c:	d020      	beq.n	8107f70 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107f2e:	697b      	ldr	r3, [r7, #20]
 8107f30:	f023 0304 	bic.w	r3, r3, #4
 8107f34:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f40:	b2d2      	uxtb	r2, r2
 8107f42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f48:	1c5a      	adds	r2, r3, #1
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107f52:	2b00      	cmp	r3, #0
 8107f54:	d00c      	beq.n	8107f70 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107f5a:	3b01      	subs	r3, #1
 8107f5c:	b29a      	uxth	r2, r3
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107f66:	b29b      	uxth	r3, r3
 8107f68:	3b01      	subs	r3, #1
 8107f6a:	b29a      	uxth	r2, r3
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107f74:	b29b      	uxth	r3, r3
 8107f76:	2b00      	cmp	r3, #0
 8107f78:	d005      	beq.n	8107f86 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f7e:	f043 0204 	orr.w	r2, r3, #4
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107f86:	687b      	ldr	r3, [r7, #4]
 8107f88:	2200      	movs	r2, #0
 8107f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	2200      	movs	r2, #0
 8107f92:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f98:	2b00      	cmp	r3, #0
 8107f9a:	d010      	beq.n	8107fbe <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107fa0:	4619      	mov	r1, r3
 8107fa2:	6878      	ldr	r0, [r7, #4]
 8107fa4:	f000 f8a4 	bl	81080f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107fae:	b2db      	uxtb	r3, r3
 8107fb0:	2b28      	cmp	r3, #40	; 0x28
 8107fb2:	d141      	bne.n	8108038 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107fb4:	6979      	ldr	r1, [r7, #20]
 8107fb6:	6878      	ldr	r0, [r7, #4]
 8107fb8:	f000 f844 	bl	8108044 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107fbc:	e03c      	b.n	8108038 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107fbe:	687b      	ldr	r3, [r7, #4]
 8107fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107fc6:	d014      	beq.n	8107ff2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8107fc8:	6878      	ldr	r0, [r7, #4]
 8107fca:	f7ff fde5 	bl	8107b98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	4a1b      	ldr	r2, [pc, #108]	; (8108040 <I2C_ITSlaveCplt+0x3ec>)
 8107fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	2220      	movs	r2, #32
 8107fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	2200      	movs	r2, #0
 8107fe0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	2200      	movs	r2, #0
 8107fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8107fea:	6878      	ldr	r0, [r7, #4]
 8107fec:	f7ff fb87 	bl	81076fe <HAL_I2C_ListenCpltCallback>
}
 8107ff0:	e022      	b.n	8108038 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107ff2:	687b      	ldr	r3, [r7, #4]
 8107ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ff8:	b2db      	uxtb	r3, r3
 8107ffa:	2b22      	cmp	r3, #34	; 0x22
 8107ffc:	d10e      	bne.n	810801c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	2220      	movs	r2, #32
 8108002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	2200      	movs	r2, #0
 810800a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	2200      	movs	r2, #0
 8108010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8108014:	6878      	ldr	r0, [r7, #4]
 8108016:	f7ff fb5a 	bl	81076ce <HAL_I2C_SlaveRxCpltCallback>
}
 810801a:	e00d      	b.n	8108038 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	2220      	movs	r2, #32
 8108020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	2200      	movs	r2, #0
 8108028:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	2200      	movs	r2, #0
 810802e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8108032:	6878      	ldr	r0, [r7, #4]
 8108034:	f7ff fb41 	bl	81076ba <HAL_I2C_SlaveTxCpltCallback>
}
 8108038:	bf00      	nop
 810803a:	3718      	adds	r7, #24
 810803c:	46bd      	mov	sp, r7
 810803e:	bd80      	pop	{r7, pc}
 8108040:	ffff0000 	.word	0xffff0000

08108044 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8108044:	b580      	push	{r7, lr}
 8108046:	b082      	sub	sp, #8
 8108048:	af00      	add	r7, sp, #0
 810804a:	6078      	str	r0, [r7, #4]
 810804c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	4a26      	ldr	r2, [pc, #152]	; (81080ec <I2C_ITListenCplt+0xa8>)
 8108052:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	2200      	movs	r2, #0
 8108058:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 810805a:	687b      	ldr	r3, [r7, #4]
 810805c:	2220      	movs	r2, #32
 810805e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	2200      	movs	r2, #0
 8108066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 810806a:	687b      	ldr	r3, [r7, #4]
 810806c:	2200      	movs	r2, #0
 810806e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8108070:	683b      	ldr	r3, [r7, #0]
 8108072:	089b      	lsrs	r3, r3, #2
 8108074:	f003 0301 	and.w	r3, r3, #1
 8108078:	2b00      	cmp	r3, #0
 810807a:	d022      	beq.n	81080c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108086:	b2d2      	uxtb	r2, r2
 8108088:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810808e:	1c5a      	adds	r2, r3, #1
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108098:	2b00      	cmp	r3, #0
 810809a:	d012      	beq.n	81080c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81080a0:	3b01      	subs	r3, #1
 81080a2:	b29a      	uxth	r2, r3
 81080a4:	687b      	ldr	r3, [r7, #4]
 81080a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080ac:	b29b      	uxth	r3, r3
 81080ae:	3b01      	subs	r3, #1
 81080b0:	b29a      	uxth	r2, r3
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080ba:	f043 0204 	orr.w	r2, r3, #4
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81080c2:	f248 0103 	movw	r1, #32771	; 0x8003
 81080c6:	6878      	ldr	r0, [r7, #4]
 81080c8:	f000 fa9c 	bl	8108604 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	681b      	ldr	r3, [r3, #0]
 81080d0:	2210      	movs	r2, #16
 81080d2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	2200      	movs	r2, #0
 81080d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 81080dc:	6878      	ldr	r0, [r7, #4]
 81080de:	f7ff fb0e 	bl	81076fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 81080e2:	bf00      	nop
 81080e4:	3708      	adds	r7, #8
 81080e6:	46bd      	mov	sp, r7
 81080e8:	bd80      	pop	{r7, pc}
 81080ea:	bf00      	nop
 81080ec:	ffff0000 	.word	0xffff0000

081080f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 81080f0:	b580      	push	{r7, lr}
 81080f2:	b084      	sub	sp, #16
 81080f4:	af00      	add	r7, sp, #0
 81080f6:	6078      	str	r0, [r7, #4]
 81080f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 81080fa:	687b      	ldr	r3, [r7, #4]
 81080fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	2200      	movs	r2, #0
 8108106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 810810a:	687b      	ldr	r3, [r7, #4]
 810810c:	4a5d      	ldr	r2, [pc, #372]	; (8108284 <I2C_ITError+0x194>)
 810810e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	2200      	movs	r2, #0
 8108114:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810811a:	683b      	ldr	r3, [r7, #0]
 810811c:	431a      	orrs	r2, r3
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8108122:	7bfb      	ldrb	r3, [r7, #15]
 8108124:	2b28      	cmp	r3, #40	; 0x28
 8108126:	d005      	beq.n	8108134 <I2C_ITError+0x44>
 8108128:	7bfb      	ldrb	r3, [r7, #15]
 810812a:	2b29      	cmp	r3, #41	; 0x29
 810812c:	d002      	beq.n	8108134 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 810812e:	7bfb      	ldrb	r3, [r7, #15]
 8108130:	2b2a      	cmp	r3, #42	; 0x2a
 8108132:	d10b      	bne.n	810814c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108134:	2103      	movs	r1, #3
 8108136:	6878      	ldr	r0, [r7, #4]
 8108138:	f000 fa64 	bl	8108604 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 810813c:	687b      	ldr	r3, [r7, #4]
 810813e:	2228      	movs	r2, #40	; 0x28
 8108140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	4a50      	ldr	r2, [pc, #320]	; (8108288 <I2C_ITError+0x198>)
 8108148:	635a      	str	r2, [r3, #52]	; 0x34
 810814a:	e011      	b.n	8108170 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810814c:	f248 0103 	movw	r1, #32771	; 0x8003
 8108150:	6878      	ldr	r0, [r7, #4]
 8108152:	f000 fa57 	bl	8108604 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810815c:	b2db      	uxtb	r3, r3
 810815e:	2b60      	cmp	r3, #96	; 0x60
 8108160:	d003      	beq.n	810816a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	2220      	movs	r2, #32
 8108166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 810816a:	687b      	ldr	r3, [r7, #4]
 810816c:	2200      	movs	r2, #0
 810816e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108174:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8108176:	687b      	ldr	r3, [r7, #4]
 8108178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810817a:	2b00      	cmp	r3, #0
 810817c:	d039      	beq.n	81081f2 <I2C_ITError+0x102>
 810817e:	68bb      	ldr	r3, [r7, #8]
 8108180:	2b11      	cmp	r3, #17
 8108182:	d002      	beq.n	810818a <I2C_ITError+0x9a>
 8108184:	68bb      	ldr	r3, [r7, #8]
 8108186:	2b21      	cmp	r3, #33	; 0x21
 8108188:	d133      	bne.n	81081f2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	681b      	ldr	r3, [r3, #0]
 810818e:	681b      	ldr	r3, [r3, #0]
 8108190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108198:	d107      	bne.n	81081aa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810819a:	687b      	ldr	r3, [r7, #4]
 810819c:	681b      	ldr	r3, [r3, #0]
 810819e:	681a      	ldr	r2, [r3, #0]
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	681b      	ldr	r3, [r3, #0]
 81081a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81081a8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081ae:	4618      	mov	r0, r3
 81081b0:	f7fe f94a 	bl	8106448 <HAL_DMA_GetState>
 81081b4:	4603      	mov	r3, r0
 81081b6:	2b01      	cmp	r3, #1
 81081b8:	d017      	beq.n	81081ea <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 81081ba:	687b      	ldr	r3, [r7, #4]
 81081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081be:	4a33      	ldr	r2, [pc, #204]	; (810828c <I2C_ITError+0x19c>)
 81081c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	2200      	movs	r2, #0
 81081c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081ce:	4618      	mov	r0, r3
 81081d0:	f7fc ffcc 	bl	810516c <HAL_DMA_Abort_IT>
 81081d4:	4603      	mov	r3, r0
 81081d6:	2b00      	cmp	r3, #0
 81081d8:	d04d      	beq.n	8108276 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 81081da:	687b      	ldr	r3, [r7, #4]
 81081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081e0:	687a      	ldr	r2, [r7, #4]
 81081e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 81081e4:	4610      	mov	r0, r2
 81081e6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81081e8:	e045      	b.n	8108276 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81081ea:	6878      	ldr	r0, [r7, #4]
 81081ec:	f000 f850 	bl	8108290 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81081f0:	e041      	b.n	8108276 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81081f6:	2b00      	cmp	r3, #0
 81081f8:	d039      	beq.n	810826e <I2C_ITError+0x17e>
 81081fa:	68bb      	ldr	r3, [r7, #8]
 81081fc:	2b12      	cmp	r3, #18
 81081fe:	d002      	beq.n	8108206 <I2C_ITError+0x116>
 8108200:	68bb      	ldr	r3, [r7, #8]
 8108202:	2b22      	cmp	r3, #34	; 0x22
 8108204:	d133      	bne.n	810826e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	681b      	ldr	r3, [r3, #0]
 810820c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108214:	d107      	bne.n	8108226 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	681b      	ldr	r3, [r3, #0]
 810821a:	681a      	ldr	r2, [r3, #0]
 810821c:	687b      	ldr	r3, [r7, #4]
 810821e:	681b      	ldr	r3, [r3, #0]
 8108220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108224:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108226:	687b      	ldr	r3, [r7, #4]
 8108228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810822a:	4618      	mov	r0, r3
 810822c:	f7fe f90c 	bl	8106448 <HAL_DMA_GetState>
 8108230:	4603      	mov	r3, r0
 8108232:	2b01      	cmp	r3, #1
 8108234:	d017      	beq.n	8108266 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8108236:	687b      	ldr	r3, [r7, #4]
 8108238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810823a:	4a14      	ldr	r2, [pc, #80]	; (810828c <I2C_ITError+0x19c>)
 810823c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	2200      	movs	r2, #0
 8108242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810824a:	4618      	mov	r0, r3
 810824c:	f7fc ff8e 	bl	810516c <HAL_DMA_Abort_IT>
 8108250:	4603      	mov	r3, r0
 8108252:	2b00      	cmp	r3, #0
 8108254:	d011      	beq.n	810827a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8108256:	687b      	ldr	r3, [r7, #4]
 8108258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810825a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810825c:	687a      	ldr	r2, [r7, #4]
 810825e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8108260:	4610      	mov	r0, r2
 8108262:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108264:	e009      	b.n	810827a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108266:	6878      	ldr	r0, [r7, #4]
 8108268:	f000 f812 	bl	8108290 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810826c:	e005      	b.n	810827a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 810826e:	6878      	ldr	r0, [r7, #4]
 8108270:	f000 f80e 	bl	8108290 <I2C_TreatErrorCallback>
  }
}
 8108274:	e002      	b.n	810827c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108276:	bf00      	nop
 8108278:	e000      	b.n	810827c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810827a:	bf00      	nop
}
 810827c:	bf00      	nop
 810827e:	3710      	adds	r7, #16
 8108280:	46bd      	mov	sp, r7
 8108282:	bd80      	pop	{r7, pc}
 8108284:	ffff0000 	.word	0xffff0000
 8108288:	0810773b 	.word	0x0810773b
 810828c:	08108327 	.word	0x08108327

08108290 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8108290:	b580      	push	{r7, lr}
 8108292:	b082      	sub	sp, #8
 8108294:	af00      	add	r7, sp, #0
 8108296:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8108298:	687b      	ldr	r3, [r7, #4]
 810829a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810829e:	b2db      	uxtb	r3, r3
 81082a0:	2b60      	cmp	r3, #96	; 0x60
 81082a2:	d10e      	bne.n	81082c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	2220      	movs	r2, #32
 81082a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81082ac:	687b      	ldr	r3, [r7, #4]
 81082ae:	2200      	movs	r2, #0
 81082b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81082b2:	687b      	ldr	r3, [r7, #4]
 81082b4:	2200      	movs	r2, #0
 81082b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 81082ba:	6878      	ldr	r0, [r7, #4]
 81082bc:	f7ff fa33 	bl	8107726 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81082c0:	e009      	b.n	81082d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	2200      	movs	r2, #0
 81082c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	2200      	movs	r2, #0
 81082cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 81082d0:	6878      	ldr	r0, [r7, #4]
 81082d2:	f7ff fa1e 	bl	8107712 <HAL_I2C_ErrorCallback>
}
 81082d6:	bf00      	nop
 81082d8:	3708      	adds	r7, #8
 81082da:	46bd      	mov	sp, r7
 81082dc:	bd80      	pop	{r7, pc}

081082de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81082de:	b480      	push	{r7}
 81082e0:	b083      	sub	sp, #12
 81082e2:	af00      	add	r7, sp, #0
 81082e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81082e6:	687b      	ldr	r3, [r7, #4]
 81082e8:	681b      	ldr	r3, [r3, #0]
 81082ea:	699b      	ldr	r3, [r3, #24]
 81082ec:	f003 0302 	and.w	r3, r3, #2
 81082f0:	2b02      	cmp	r3, #2
 81082f2:	d103      	bne.n	81082fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	681b      	ldr	r3, [r3, #0]
 81082f8:	2200      	movs	r2, #0
 81082fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	681b      	ldr	r3, [r3, #0]
 8108300:	699b      	ldr	r3, [r3, #24]
 8108302:	f003 0301 	and.w	r3, r3, #1
 8108306:	2b01      	cmp	r3, #1
 8108308:	d007      	beq.n	810831a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	681b      	ldr	r3, [r3, #0]
 810830e:	699a      	ldr	r2, [r3, #24]
 8108310:	687b      	ldr	r3, [r7, #4]
 8108312:	681b      	ldr	r3, [r3, #0]
 8108314:	f042 0201 	orr.w	r2, r2, #1
 8108318:	619a      	str	r2, [r3, #24]
  }
}
 810831a:	bf00      	nop
 810831c:	370c      	adds	r7, #12
 810831e:	46bd      	mov	sp, r7
 8108320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108324:	4770      	bx	lr

08108326 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108326:	b580      	push	{r7, lr}
 8108328:	b084      	sub	sp, #16
 810832a:	af00      	add	r7, sp, #0
 810832c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 810832e:	687b      	ldr	r3, [r7, #4]
 8108330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108332:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8108334:	68fb      	ldr	r3, [r7, #12]
 8108336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108338:	2b00      	cmp	r3, #0
 810833a:	d003      	beq.n	8108344 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 810833c:	68fb      	ldr	r3, [r7, #12]
 810833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108340:	2200      	movs	r2, #0
 8108342:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8108344:	68fb      	ldr	r3, [r7, #12]
 8108346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108348:	2b00      	cmp	r3, #0
 810834a:	d003      	beq.n	8108354 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 810834c:	68fb      	ldr	r3, [r7, #12]
 810834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108350:	2200      	movs	r2, #0
 8108352:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8108354:	68f8      	ldr	r0, [r7, #12]
 8108356:	f7ff ff9b 	bl	8108290 <I2C_TreatErrorCallback>
}
 810835a:	bf00      	nop
 810835c:	3710      	adds	r7, #16
 810835e:	46bd      	mov	sp, r7
 8108360:	bd80      	pop	{r7, pc}

08108362 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8108362:	b580      	push	{r7, lr}
 8108364:	b084      	sub	sp, #16
 8108366:	af00      	add	r7, sp, #0
 8108368:	60f8      	str	r0, [r7, #12]
 810836a:	60b9      	str	r1, [r7, #8]
 810836c:	603b      	str	r3, [r7, #0]
 810836e:	4613      	mov	r3, r2
 8108370:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8108372:	e022      	b.n	81083ba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108374:	683b      	ldr	r3, [r7, #0]
 8108376:	f1b3 3fff 	cmp.w	r3, #4294967295
 810837a:	d01e      	beq.n	81083ba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810837c:	f7fb f9ce 	bl	810371c <HAL_GetTick>
 8108380:	4602      	mov	r2, r0
 8108382:	69bb      	ldr	r3, [r7, #24]
 8108384:	1ad3      	subs	r3, r2, r3
 8108386:	683a      	ldr	r2, [r7, #0]
 8108388:	429a      	cmp	r2, r3
 810838a:	d302      	bcc.n	8108392 <I2C_WaitOnFlagUntilTimeout+0x30>
 810838c:	683b      	ldr	r3, [r7, #0]
 810838e:	2b00      	cmp	r3, #0
 8108390:	d113      	bne.n	81083ba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108392:	68fb      	ldr	r3, [r7, #12]
 8108394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108396:	f043 0220 	orr.w	r2, r3, #32
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810839e:	68fb      	ldr	r3, [r7, #12]
 81083a0:	2220      	movs	r2, #32
 81083a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81083a6:	68fb      	ldr	r3, [r7, #12]
 81083a8:	2200      	movs	r2, #0
 81083aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81083ae:	68fb      	ldr	r3, [r7, #12]
 81083b0:	2200      	movs	r2, #0
 81083b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81083b6:	2301      	movs	r3, #1
 81083b8:	e00f      	b.n	81083da <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81083ba:	68fb      	ldr	r3, [r7, #12]
 81083bc:	681b      	ldr	r3, [r3, #0]
 81083be:	699a      	ldr	r2, [r3, #24]
 81083c0:	68bb      	ldr	r3, [r7, #8]
 81083c2:	4013      	ands	r3, r2
 81083c4:	68ba      	ldr	r2, [r7, #8]
 81083c6:	429a      	cmp	r2, r3
 81083c8:	bf0c      	ite	eq
 81083ca:	2301      	moveq	r3, #1
 81083cc:	2300      	movne	r3, #0
 81083ce:	b2db      	uxtb	r3, r3
 81083d0:	461a      	mov	r2, r3
 81083d2:	79fb      	ldrb	r3, [r7, #7]
 81083d4:	429a      	cmp	r2, r3
 81083d6:	d0cd      	beq.n	8108374 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81083d8:	2300      	movs	r3, #0
}
 81083da:	4618      	mov	r0, r3
 81083dc:	3710      	adds	r7, #16
 81083de:	46bd      	mov	sp, r7
 81083e0:	bd80      	pop	{r7, pc}

081083e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81083e2:	b580      	push	{r7, lr}
 81083e4:	b084      	sub	sp, #16
 81083e6:	af00      	add	r7, sp, #0
 81083e8:	60f8      	str	r0, [r7, #12]
 81083ea:	60b9      	str	r1, [r7, #8]
 81083ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81083ee:	e02c      	b.n	810844a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81083f0:	687a      	ldr	r2, [r7, #4]
 81083f2:	68b9      	ldr	r1, [r7, #8]
 81083f4:	68f8      	ldr	r0, [r7, #12]
 81083f6:	f000 f871 	bl	81084dc <I2C_IsAcknowledgeFailed>
 81083fa:	4603      	mov	r3, r0
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	d001      	beq.n	8108404 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8108400:	2301      	movs	r3, #1
 8108402:	e02a      	b.n	810845a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108404:	68bb      	ldr	r3, [r7, #8]
 8108406:	f1b3 3fff 	cmp.w	r3, #4294967295
 810840a:	d01e      	beq.n	810844a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810840c:	f7fb f986 	bl	810371c <HAL_GetTick>
 8108410:	4602      	mov	r2, r0
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	1ad3      	subs	r3, r2, r3
 8108416:	68ba      	ldr	r2, [r7, #8]
 8108418:	429a      	cmp	r2, r3
 810841a:	d302      	bcc.n	8108422 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810841c:	68bb      	ldr	r3, [r7, #8]
 810841e:	2b00      	cmp	r3, #0
 8108420:	d113      	bne.n	810844a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108422:	68fb      	ldr	r3, [r7, #12]
 8108424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108426:	f043 0220 	orr.w	r2, r3, #32
 810842a:	68fb      	ldr	r3, [r7, #12]
 810842c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810842e:	68fb      	ldr	r3, [r7, #12]
 8108430:	2220      	movs	r2, #32
 8108432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8108436:	68fb      	ldr	r3, [r7, #12]
 8108438:	2200      	movs	r2, #0
 810843a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810843e:	68fb      	ldr	r3, [r7, #12]
 8108440:	2200      	movs	r2, #0
 8108442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8108446:	2301      	movs	r3, #1
 8108448:	e007      	b.n	810845a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810844a:	68fb      	ldr	r3, [r7, #12]
 810844c:	681b      	ldr	r3, [r3, #0]
 810844e:	699b      	ldr	r3, [r3, #24]
 8108450:	f003 0302 	and.w	r3, r3, #2
 8108454:	2b02      	cmp	r3, #2
 8108456:	d1cb      	bne.n	81083f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8108458:	2300      	movs	r3, #0
}
 810845a:	4618      	mov	r0, r3
 810845c:	3710      	adds	r7, #16
 810845e:	46bd      	mov	sp, r7
 8108460:	bd80      	pop	{r7, pc}

08108462 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8108462:	b580      	push	{r7, lr}
 8108464:	b084      	sub	sp, #16
 8108466:	af00      	add	r7, sp, #0
 8108468:	60f8      	str	r0, [r7, #12]
 810846a:	60b9      	str	r1, [r7, #8]
 810846c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810846e:	e028      	b.n	81084c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8108470:	687a      	ldr	r2, [r7, #4]
 8108472:	68b9      	ldr	r1, [r7, #8]
 8108474:	68f8      	ldr	r0, [r7, #12]
 8108476:	f000 f831 	bl	81084dc <I2C_IsAcknowledgeFailed>
 810847a:	4603      	mov	r3, r0
 810847c:	2b00      	cmp	r3, #0
 810847e:	d001      	beq.n	8108484 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8108480:	2301      	movs	r3, #1
 8108482:	e026      	b.n	81084d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108484:	f7fb f94a 	bl	810371c <HAL_GetTick>
 8108488:	4602      	mov	r2, r0
 810848a:	687b      	ldr	r3, [r7, #4]
 810848c:	1ad3      	subs	r3, r2, r3
 810848e:	68ba      	ldr	r2, [r7, #8]
 8108490:	429a      	cmp	r2, r3
 8108492:	d302      	bcc.n	810849a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8108494:	68bb      	ldr	r3, [r7, #8]
 8108496:	2b00      	cmp	r3, #0
 8108498:	d113      	bne.n	81084c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810849a:	68fb      	ldr	r3, [r7, #12]
 810849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810849e:	f043 0220 	orr.w	r2, r3, #32
 81084a2:	68fb      	ldr	r3, [r7, #12]
 81084a4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81084a6:	68fb      	ldr	r3, [r7, #12]
 81084a8:	2220      	movs	r2, #32
 81084aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81084ae:	68fb      	ldr	r3, [r7, #12]
 81084b0:	2200      	movs	r2, #0
 81084b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81084b6:	68fb      	ldr	r3, [r7, #12]
 81084b8:	2200      	movs	r2, #0
 81084ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81084be:	2301      	movs	r3, #1
 81084c0:	e007      	b.n	81084d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81084c2:	68fb      	ldr	r3, [r7, #12]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	699b      	ldr	r3, [r3, #24]
 81084c8:	f003 0320 	and.w	r3, r3, #32
 81084cc:	2b20      	cmp	r3, #32
 81084ce:	d1cf      	bne.n	8108470 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81084d0:	2300      	movs	r3, #0
}
 81084d2:	4618      	mov	r0, r3
 81084d4:	3710      	adds	r7, #16
 81084d6:	46bd      	mov	sp, r7
 81084d8:	bd80      	pop	{r7, pc}
	...

081084dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81084dc:	b580      	push	{r7, lr}
 81084de:	b084      	sub	sp, #16
 81084e0:	af00      	add	r7, sp, #0
 81084e2:	60f8      	str	r0, [r7, #12]
 81084e4:	60b9      	str	r1, [r7, #8]
 81084e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81084e8:	68fb      	ldr	r3, [r7, #12]
 81084ea:	681b      	ldr	r3, [r3, #0]
 81084ec:	699b      	ldr	r3, [r3, #24]
 81084ee:	f003 0310 	and.w	r3, r3, #16
 81084f2:	2b10      	cmp	r3, #16
 81084f4:	d151      	bne.n	810859a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81084f6:	e022      	b.n	810853e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81084f8:	68bb      	ldr	r3, [r7, #8]
 81084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81084fe:	d01e      	beq.n	810853e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108500:	f7fb f90c 	bl	810371c <HAL_GetTick>
 8108504:	4602      	mov	r2, r0
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	1ad3      	subs	r3, r2, r3
 810850a:	68ba      	ldr	r2, [r7, #8]
 810850c:	429a      	cmp	r2, r3
 810850e:	d302      	bcc.n	8108516 <I2C_IsAcknowledgeFailed+0x3a>
 8108510:	68bb      	ldr	r3, [r7, #8]
 8108512:	2b00      	cmp	r3, #0
 8108514:	d113      	bne.n	810853e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108516:	68fb      	ldr	r3, [r7, #12]
 8108518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810851a:	f043 0220 	orr.w	r2, r3, #32
 810851e:	68fb      	ldr	r3, [r7, #12]
 8108520:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8108522:	68fb      	ldr	r3, [r7, #12]
 8108524:	2220      	movs	r2, #32
 8108526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810852a:	68fb      	ldr	r3, [r7, #12]
 810852c:	2200      	movs	r2, #0
 810852e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8108532:	68fb      	ldr	r3, [r7, #12]
 8108534:	2200      	movs	r2, #0
 8108536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810853a:	2301      	movs	r3, #1
 810853c:	e02e      	b.n	810859c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810853e:	68fb      	ldr	r3, [r7, #12]
 8108540:	681b      	ldr	r3, [r3, #0]
 8108542:	699b      	ldr	r3, [r3, #24]
 8108544:	f003 0320 	and.w	r3, r3, #32
 8108548:	2b20      	cmp	r3, #32
 810854a:	d1d5      	bne.n	81084f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810854c:	68fb      	ldr	r3, [r7, #12]
 810854e:	681b      	ldr	r3, [r3, #0]
 8108550:	2210      	movs	r2, #16
 8108552:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108554:	68fb      	ldr	r3, [r7, #12]
 8108556:	681b      	ldr	r3, [r3, #0]
 8108558:	2220      	movs	r2, #32
 810855a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810855c:	68f8      	ldr	r0, [r7, #12]
 810855e:	f7ff febe 	bl	81082de <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108562:	68fb      	ldr	r3, [r7, #12]
 8108564:	681b      	ldr	r3, [r3, #0]
 8108566:	6859      	ldr	r1, [r3, #4]
 8108568:	68fb      	ldr	r3, [r7, #12]
 810856a:	681a      	ldr	r2, [r3, #0]
 810856c:	4b0d      	ldr	r3, [pc, #52]	; (81085a4 <I2C_IsAcknowledgeFailed+0xc8>)
 810856e:	400b      	ands	r3, r1
 8108570:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108572:	68fb      	ldr	r3, [r7, #12]
 8108574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108576:	f043 0204 	orr.w	r2, r3, #4
 810857a:	68fb      	ldr	r3, [r7, #12]
 810857c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810857e:	68fb      	ldr	r3, [r7, #12]
 8108580:	2220      	movs	r2, #32
 8108582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8108586:	68fb      	ldr	r3, [r7, #12]
 8108588:	2200      	movs	r2, #0
 810858a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810858e:	68fb      	ldr	r3, [r7, #12]
 8108590:	2200      	movs	r2, #0
 8108592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8108596:	2301      	movs	r3, #1
 8108598:	e000      	b.n	810859c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 810859a:	2300      	movs	r3, #0
}
 810859c:	4618      	mov	r0, r3
 810859e:	3710      	adds	r7, #16
 81085a0:	46bd      	mov	sp, r7
 81085a2:	bd80      	pop	{r7, pc}
 81085a4:	fe00e800 	.word	0xfe00e800

081085a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81085a8:	b480      	push	{r7}
 81085aa:	b085      	sub	sp, #20
 81085ac:	af00      	add	r7, sp, #0
 81085ae:	60f8      	str	r0, [r7, #12]
 81085b0:	607b      	str	r3, [r7, #4]
 81085b2:	460b      	mov	r3, r1
 81085b4:	817b      	strh	r3, [r7, #10]
 81085b6:	4613      	mov	r3, r2
 81085b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81085ba:	68fb      	ldr	r3, [r7, #12]
 81085bc:	681b      	ldr	r3, [r3, #0]
 81085be:	685a      	ldr	r2, [r3, #4]
 81085c0:	69bb      	ldr	r3, [r7, #24]
 81085c2:	0d5b      	lsrs	r3, r3, #21
 81085c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81085c8:	4b0d      	ldr	r3, [pc, #52]	; (8108600 <I2C_TransferConfig+0x58>)
 81085ca:	430b      	orrs	r3, r1
 81085cc:	43db      	mvns	r3, r3
 81085ce:	ea02 0103 	and.w	r1, r2, r3
 81085d2:	897b      	ldrh	r3, [r7, #10]
 81085d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81085d8:	7a7b      	ldrb	r3, [r7, #9]
 81085da:	041b      	lsls	r3, r3, #16
 81085dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81085e0:	431a      	orrs	r2, r3
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	431a      	orrs	r2, r3
 81085e6:	69bb      	ldr	r3, [r7, #24]
 81085e8:	431a      	orrs	r2, r3
 81085ea:	68fb      	ldr	r3, [r7, #12]
 81085ec:	681b      	ldr	r3, [r3, #0]
 81085ee:	430a      	orrs	r2, r1
 81085f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81085f2:	bf00      	nop
 81085f4:	3714      	adds	r7, #20
 81085f6:	46bd      	mov	sp, r7
 81085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085fc:	4770      	bx	lr
 81085fe:	bf00      	nop
 8108600:	03ff63ff 	.word	0x03ff63ff

08108604 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108604:	b480      	push	{r7}
 8108606:	b085      	sub	sp, #20
 8108608:	af00      	add	r7, sp, #0
 810860a:	6078      	str	r0, [r7, #4]
 810860c:	460b      	mov	r3, r1
 810860e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108610:	2300      	movs	r3, #0
 8108612:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108614:	887b      	ldrh	r3, [r7, #2]
 8108616:	f003 0301 	and.w	r3, r3, #1
 810861a:	2b00      	cmp	r3, #0
 810861c:	d00f      	beq.n	810863e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 810861e:	68fb      	ldr	r3, [r7, #12]
 8108620:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108624:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108626:	687b      	ldr	r3, [r7, #4]
 8108628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810862c:	b2db      	uxtb	r3, r3
 810862e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108632:	2b28      	cmp	r3, #40	; 0x28
 8108634:	d003      	beq.n	810863e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108636:	68fb      	ldr	r3, [r7, #12]
 8108638:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 810863c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 810863e:	887b      	ldrh	r3, [r7, #2]
 8108640:	f003 0302 	and.w	r3, r3, #2
 8108644:	2b00      	cmp	r3, #0
 8108646:	d00f      	beq.n	8108668 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108648:	68fb      	ldr	r3, [r7, #12]
 810864a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 810864e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108656:	b2db      	uxtb	r3, r3
 8108658:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810865c:	2b28      	cmp	r3, #40	; 0x28
 810865e:	d003      	beq.n	8108668 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108660:	68fb      	ldr	r3, [r7, #12]
 8108662:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108666:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810866c:	2b00      	cmp	r3, #0
 810866e:	da03      	bge.n	8108678 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108670:	68fb      	ldr	r3, [r7, #12]
 8108672:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108676:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108678:	887b      	ldrh	r3, [r7, #2]
 810867a:	2b10      	cmp	r3, #16
 810867c:	d103      	bne.n	8108686 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 810867e:	68fb      	ldr	r3, [r7, #12]
 8108680:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108684:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108686:	887b      	ldrh	r3, [r7, #2]
 8108688:	2b20      	cmp	r3, #32
 810868a:	d103      	bne.n	8108694 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 810868c:	68fb      	ldr	r3, [r7, #12]
 810868e:	f043 0320 	orr.w	r3, r3, #32
 8108692:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108694:	887b      	ldrh	r3, [r7, #2]
 8108696:	2b40      	cmp	r3, #64	; 0x40
 8108698:	d103      	bne.n	81086a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 810869a:	68fb      	ldr	r3, [r7, #12]
 810869c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81086a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81086a2:	687b      	ldr	r3, [r7, #4]
 81086a4:	681b      	ldr	r3, [r3, #0]
 81086a6:	6819      	ldr	r1, [r3, #0]
 81086a8:	68fb      	ldr	r3, [r7, #12]
 81086aa:	43da      	mvns	r2, r3
 81086ac:	687b      	ldr	r3, [r7, #4]
 81086ae:	681b      	ldr	r3, [r3, #0]
 81086b0:	400a      	ands	r2, r1
 81086b2:	601a      	str	r2, [r3, #0]
}
 81086b4:	bf00      	nop
 81086b6:	3714      	adds	r7, #20
 81086b8:	46bd      	mov	sp, r7
 81086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086be:	4770      	bx	lr

081086c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81086c0:	b480      	push	{r7}
 81086c2:	b083      	sub	sp, #12
 81086c4:	af00      	add	r7, sp, #0
 81086c6:	6078      	str	r0, [r7, #4]
 81086c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81086ca:	687b      	ldr	r3, [r7, #4]
 81086cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81086d0:	b2db      	uxtb	r3, r3
 81086d2:	2b20      	cmp	r3, #32
 81086d4:	d138      	bne.n	8108748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81086dc:	2b01      	cmp	r3, #1
 81086de:	d101      	bne.n	81086e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81086e0:	2302      	movs	r3, #2
 81086e2:	e032      	b.n	810874a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	2201      	movs	r2, #1
 81086e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	2224      	movs	r2, #36	; 0x24
 81086f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81086f4:	687b      	ldr	r3, [r7, #4]
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	681a      	ldr	r2, [r3, #0]
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	f022 0201 	bic.w	r2, r2, #1
 8108702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108704:	687b      	ldr	r3, [r7, #4]
 8108706:	681b      	ldr	r3, [r3, #0]
 8108708:	681a      	ldr	r2, [r3, #0]
 810870a:	687b      	ldr	r3, [r7, #4]
 810870c:	681b      	ldr	r3, [r3, #0]
 810870e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108714:	687b      	ldr	r3, [r7, #4]
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	6819      	ldr	r1, [r3, #0]
 810871a:	687b      	ldr	r3, [r7, #4]
 810871c:	681b      	ldr	r3, [r3, #0]
 810871e:	683a      	ldr	r2, [r7, #0]
 8108720:	430a      	orrs	r2, r1
 8108722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	681a      	ldr	r2, [r3, #0]
 810872a:	687b      	ldr	r3, [r7, #4]
 810872c:	681b      	ldr	r3, [r3, #0]
 810872e:	f042 0201 	orr.w	r2, r2, #1
 8108732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	2220      	movs	r2, #32
 8108738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810873c:	687b      	ldr	r3, [r7, #4]
 810873e:	2200      	movs	r2, #0
 8108740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108744:	2300      	movs	r3, #0
 8108746:	e000      	b.n	810874a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108748:	2302      	movs	r3, #2
  }
}
 810874a:	4618      	mov	r0, r3
 810874c:	370c      	adds	r7, #12
 810874e:	46bd      	mov	sp, r7
 8108750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108754:	4770      	bx	lr

08108756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8108756:	b480      	push	{r7}
 8108758:	b085      	sub	sp, #20
 810875a:	af00      	add	r7, sp, #0
 810875c:	6078      	str	r0, [r7, #4]
 810875e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108766:	b2db      	uxtb	r3, r3
 8108768:	2b20      	cmp	r3, #32
 810876a:	d139      	bne.n	81087e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810876c:	687b      	ldr	r3, [r7, #4]
 810876e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108772:	2b01      	cmp	r3, #1
 8108774:	d101      	bne.n	810877a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8108776:	2302      	movs	r3, #2
 8108778:	e033      	b.n	81087e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	2201      	movs	r2, #1
 810877e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108782:	687b      	ldr	r3, [r7, #4]
 8108784:	2224      	movs	r2, #36	; 0x24
 8108786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810878a:	687b      	ldr	r3, [r7, #4]
 810878c:	681b      	ldr	r3, [r3, #0]
 810878e:	681a      	ldr	r2, [r3, #0]
 8108790:	687b      	ldr	r3, [r7, #4]
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	f022 0201 	bic.w	r2, r2, #1
 8108798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810879a:	687b      	ldr	r3, [r7, #4]
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	681b      	ldr	r3, [r3, #0]
 81087a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81087a2:	68fb      	ldr	r3, [r7, #12]
 81087a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81087a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81087aa:	683b      	ldr	r3, [r7, #0]
 81087ac:	021b      	lsls	r3, r3, #8
 81087ae:	68fa      	ldr	r2, [r7, #12]
 81087b0:	4313      	orrs	r3, r2
 81087b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	681b      	ldr	r3, [r3, #0]
 81087b8:	68fa      	ldr	r2, [r7, #12]
 81087ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	681b      	ldr	r3, [r3, #0]
 81087c0:	681a      	ldr	r2, [r3, #0]
 81087c2:	687b      	ldr	r3, [r7, #4]
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	f042 0201 	orr.w	r2, r2, #1
 81087ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81087cc:	687b      	ldr	r3, [r7, #4]
 81087ce:	2220      	movs	r2, #32
 81087d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	2200      	movs	r2, #0
 81087d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81087dc:	2300      	movs	r3, #0
 81087de:	e000      	b.n	81087e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81087e0:	2302      	movs	r3, #2
  }
}
 81087e2:	4618      	mov	r0, r3
 81087e4:	3714      	adds	r7, #20
 81087e6:	46bd      	mov	sp, r7
 81087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087ec:	4770      	bx	lr
	...

081087f0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81087f0:	b580      	push	{r7, lr}
 81087f2:	b084      	sub	sp, #16
 81087f4:	af00      	add	r7, sp, #0
 81087f6:	60f8      	str	r0, [r7, #12]
 81087f8:	460b      	mov	r3, r1
 81087fa:	607a      	str	r2, [r7, #4]
 81087fc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81087fe:	4b37      	ldr	r3, [pc, #220]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8108800:	681b      	ldr	r3, [r3, #0]
 8108802:	f023 0201 	bic.w	r2, r3, #1
 8108806:	4935      	ldr	r1, [pc, #212]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8108808:	68fb      	ldr	r3, [r7, #12]
 810880a:	4313      	orrs	r3, r2
 810880c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810880e:	687b      	ldr	r3, [r7, #4]
 8108810:	2b00      	cmp	r3, #0
 8108812:	d123      	bne.n	810885c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108814:	f7fb fbb4 	bl	8103f80 <HAL_GetCurrentCPUID>
 8108818:	4603      	mov	r3, r0
 810881a:	2b03      	cmp	r3, #3
 810881c:	d158      	bne.n	81088d0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810881e:	4b2f      	ldr	r3, [pc, #188]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8108820:	691b      	ldr	r3, [r3, #16]
 8108822:	4a2e      	ldr	r2, [pc, #184]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8108824:	f023 0301 	bic.w	r3, r3, #1
 8108828:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810882a:	4b2d      	ldr	r3, [pc, #180]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810882c:	691b      	ldr	r3, [r3, #16]
 810882e:	4a2c      	ldr	r2, [pc, #176]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108830:	f043 0304 	orr.w	r3, r3, #4
 8108834:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8108836:	f3bf 8f4f 	dsb	sy
}
 810883a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810883c:	f3bf 8f6f 	isb	sy
}
 8108840:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108842:	7afb      	ldrb	r3, [r7, #11]
 8108844:	2b01      	cmp	r3, #1
 8108846:	d101      	bne.n	810884c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108848:	bf30      	wfi
 810884a:	e000      	b.n	810884e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810884c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810884e:	4b24      	ldr	r3, [pc, #144]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108850:	691b      	ldr	r3, [r3, #16]
 8108852:	4a23      	ldr	r2, [pc, #140]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108854:	f023 0304 	bic.w	r3, r3, #4
 8108858:	6113      	str	r3, [r2, #16]
 810885a:	e03c      	b.n	81088d6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	2b01      	cmp	r3, #1
 8108860:	d123      	bne.n	81088aa <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108862:	f7fb fb8d 	bl	8103f80 <HAL_GetCurrentCPUID>
 8108866:	4603      	mov	r3, r0
 8108868:	2b01      	cmp	r3, #1
 810886a:	d133      	bne.n	81088d4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810886c:	4b1b      	ldr	r3, [pc, #108]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 810886e:	695b      	ldr	r3, [r3, #20]
 8108870:	4a1a      	ldr	r2, [pc, #104]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 8108872:	f023 0302 	bic.w	r3, r3, #2
 8108876:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108878:	4b19      	ldr	r3, [pc, #100]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810887a:	691b      	ldr	r3, [r3, #16]
 810887c:	4a18      	ldr	r2, [pc, #96]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810887e:	f043 0304 	orr.w	r3, r3, #4
 8108882:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108884:	f3bf 8f4f 	dsb	sy
}
 8108888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810888a:	f3bf 8f6f 	isb	sy
}
 810888e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108890:	7afb      	ldrb	r3, [r7, #11]
 8108892:	2b01      	cmp	r3, #1
 8108894:	d101      	bne.n	810889a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108896:	bf30      	wfi
 8108898:	e000      	b.n	810889c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810889a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810889c:	4b10      	ldr	r3, [pc, #64]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810889e:	691b      	ldr	r3, [r3, #16]
 81088a0:	4a0f      	ldr	r2, [pc, #60]	; (81088e0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81088a2:	f023 0304 	bic.w	r3, r3, #4
 81088a6:	6113      	str	r3, [r2, #16]
 81088a8:	e015      	b.n	81088d6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81088aa:	f7fb fb69 	bl	8103f80 <HAL_GetCurrentCPUID>
 81088ae:	4603      	mov	r3, r0
 81088b0:	2b03      	cmp	r3, #3
 81088b2:	d106      	bne.n	81088c2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81088b4:	4b09      	ldr	r3, [pc, #36]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81088b6:	691b      	ldr	r3, [r3, #16]
 81088b8:	4a08      	ldr	r2, [pc, #32]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81088ba:	f023 0304 	bic.w	r3, r3, #4
 81088be:	6113      	str	r3, [r2, #16]
 81088c0:	e009      	b.n	81088d6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81088c2:	4b06      	ldr	r3, [pc, #24]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81088c4:	695b      	ldr	r3, [r3, #20]
 81088c6:	4a05      	ldr	r2, [pc, #20]	; (81088dc <HAL_PWREx_EnterSTOPMode+0xec>)
 81088c8:	f023 0304 	bic.w	r3, r3, #4
 81088cc:	6153      	str	r3, [r2, #20]
 81088ce:	e002      	b.n	81088d6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81088d0:	bf00      	nop
 81088d2:	e000      	b.n	81088d6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81088d4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81088d6:	3710      	adds	r7, #16
 81088d8:	46bd      	mov	sp, r7
 81088da:	bd80      	pop	{r7, pc}
 81088dc:	58024800 	.word	0x58024800
 81088e0:	e000ed00 	.word	0xe000ed00

081088e4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81088e4:	b580      	push	{r7, lr}
 81088e6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81088e8:	f7fb fb4a 	bl	8103f80 <HAL_GetCurrentCPUID>
 81088ec:	4603      	mov	r3, r0
 81088ee:	2b03      	cmp	r3, #3
 81088f0:	d101      	bne.n	81088f6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81088f2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81088f4:	e001      	b.n	81088fa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81088f6:	bf40      	sev
    __WFE ();
 81088f8:	bf20      	wfe
}
 81088fa:	bf00      	nop
 81088fc:	bd80      	pop	{r7, pc}
	...

08108900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108900:	b480      	push	{r7}
 8108902:	b089      	sub	sp, #36	; 0x24
 8108904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108906:	4bb3      	ldr	r3, [pc, #716]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108908:	691b      	ldr	r3, [r3, #16]
 810890a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810890e:	2b18      	cmp	r3, #24
 8108910:	f200 8155 	bhi.w	8108bbe <HAL_RCC_GetSysClockFreq+0x2be>
 8108914:	a201      	add	r2, pc, #4	; (adr r2, 810891c <HAL_RCC_GetSysClockFreq+0x1c>)
 8108916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810891a:	bf00      	nop
 810891c:	08108981 	.word	0x08108981
 8108920:	08108bbf 	.word	0x08108bbf
 8108924:	08108bbf 	.word	0x08108bbf
 8108928:	08108bbf 	.word	0x08108bbf
 810892c:	08108bbf 	.word	0x08108bbf
 8108930:	08108bbf 	.word	0x08108bbf
 8108934:	08108bbf 	.word	0x08108bbf
 8108938:	08108bbf 	.word	0x08108bbf
 810893c:	081089a7 	.word	0x081089a7
 8108940:	08108bbf 	.word	0x08108bbf
 8108944:	08108bbf 	.word	0x08108bbf
 8108948:	08108bbf 	.word	0x08108bbf
 810894c:	08108bbf 	.word	0x08108bbf
 8108950:	08108bbf 	.word	0x08108bbf
 8108954:	08108bbf 	.word	0x08108bbf
 8108958:	08108bbf 	.word	0x08108bbf
 810895c:	081089ad 	.word	0x081089ad
 8108960:	08108bbf 	.word	0x08108bbf
 8108964:	08108bbf 	.word	0x08108bbf
 8108968:	08108bbf 	.word	0x08108bbf
 810896c:	08108bbf 	.word	0x08108bbf
 8108970:	08108bbf 	.word	0x08108bbf
 8108974:	08108bbf 	.word	0x08108bbf
 8108978:	08108bbf 	.word	0x08108bbf
 810897c:	081089b3 	.word	0x081089b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108980:	4b94      	ldr	r3, [pc, #592]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	f003 0320 	and.w	r3, r3, #32
 8108988:	2b00      	cmp	r3, #0
 810898a:	d009      	beq.n	81089a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810898c:	4b91      	ldr	r3, [pc, #580]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810898e:	681b      	ldr	r3, [r3, #0]
 8108990:	08db      	lsrs	r3, r3, #3
 8108992:	f003 0303 	and.w	r3, r3, #3
 8108996:	4a90      	ldr	r2, [pc, #576]	; (8108bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108998:	fa22 f303 	lsr.w	r3, r2, r3
 810899c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810899e:	e111      	b.n	8108bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81089a0:	4b8d      	ldr	r3, [pc, #564]	; (8108bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81089a2:	61bb      	str	r3, [r7, #24]
    break;
 81089a4:	e10e      	b.n	8108bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81089a6:	4b8d      	ldr	r3, [pc, #564]	; (8108bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 81089a8:	61bb      	str	r3, [r7, #24]
    break;
 81089aa:	e10b      	b.n	8108bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81089ac:	4b8c      	ldr	r3, [pc, #560]	; (8108be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81089ae:	61bb      	str	r3, [r7, #24]
    break;
 81089b0:	e108      	b.n	8108bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81089b2:	4b88      	ldr	r3, [pc, #544]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089b6:	f003 0303 	and.w	r3, r3, #3
 81089ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81089bc:	4b85      	ldr	r3, [pc, #532]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81089be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089c0:	091b      	lsrs	r3, r3, #4
 81089c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81089c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81089c8:	4b82      	ldr	r3, [pc, #520]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089cc:	f003 0301 	and.w	r3, r3, #1
 81089d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81089d2:	4b80      	ldr	r3, [pc, #512]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81089d6:	08db      	lsrs	r3, r3, #3
 81089d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81089dc:	68fa      	ldr	r2, [r7, #12]
 81089de:	fb02 f303 	mul.w	r3, r2, r3
 81089e2:	ee07 3a90 	vmov	s15, r3
 81089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81089ee:	693b      	ldr	r3, [r7, #16]
 81089f0:	2b00      	cmp	r3, #0
 81089f2:	f000 80e1 	beq.w	8108bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 81089f6:	697b      	ldr	r3, [r7, #20]
 81089f8:	2b02      	cmp	r3, #2
 81089fa:	f000 8083 	beq.w	8108b04 <HAL_RCC_GetSysClockFreq+0x204>
 81089fe:	697b      	ldr	r3, [r7, #20]
 8108a00:	2b02      	cmp	r3, #2
 8108a02:	f200 80a1 	bhi.w	8108b48 <HAL_RCC_GetSysClockFreq+0x248>
 8108a06:	697b      	ldr	r3, [r7, #20]
 8108a08:	2b00      	cmp	r3, #0
 8108a0a:	d003      	beq.n	8108a14 <HAL_RCC_GetSysClockFreq+0x114>
 8108a0c:	697b      	ldr	r3, [r7, #20]
 8108a0e:	2b01      	cmp	r3, #1
 8108a10:	d056      	beq.n	8108ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8108a12:	e099      	b.n	8108b48 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a14:	4b6f      	ldr	r3, [pc, #444]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a16:	681b      	ldr	r3, [r3, #0]
 8108a18:	f003 0320 	and.w	r3, r3, #32
 8108a1c:	2b00      	cmp	r3, #0
 8108a1e:	d02d      	beq.n	8108a7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108a20:	4b6c      	ldr	r3, [pc, #432]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a22:	681b      	ldr	r3, [r3, #0]
 8108a24:	08db      	lsrs	r3, r3, #3
 8108a26:	f003 0303 	and.w	r3, r3, #3
 8108a2a:	4a6b      	ldr	r2, [pc, #428]	; (8108bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8108a30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	ee07 3a90 	vmov	s15, r3
 8108a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a3c:	693b      	ldr	r3, [r7, #16]
 8108a3e:	ee07 3a90 	vmov	s15, r3
 8108a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a4a:	4b62      	ldr	r3, [pc, #392]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a52:	ee07 3a90 	vmov	s15, r3
 8108a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8108a5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8108be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8108a7a:	e087      	b.n	8108b8c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108a7c:	693b      	ldr	r3, [r7, #16]
 8108a7e:	ee07 3a90 	vmov	s15, r3
 8108a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a86:	eddf 6a58 	vldr	s13, [pc, #352]	; 8108be8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8108a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a8e:	4b51      	ldr	r3, [pc, #324]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a96:	ee07 3a90 	vmov	s15, r3
 8108a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108aa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8108be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108abe:	e065      	b.n	8108b8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108ac0:	693b      	ldr	r3, [r7, #16]
 8108ac2:	ee07 3a90 	vmov	s15, r3
 8108ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108aca:	eddf 6a48 	vldr	s13, [pc, #288]	; 8108bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8108ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ad2:	4b40      	ldr	r3, [pc, #256]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108ada:	ee07 3a90 	vmov	s15, r3
 8108ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8108ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8108be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b02:	e043      	b.n	8108b8c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108b04:	693b      	ldr	r3, [r7, #16]
 8108b06:	ee07 3a90 	vmov	s15, r3
 8108b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b0e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8108bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8108b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b16:	4b2f      	ldr	r3, [pc, #188]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b1e:	ee07 3a90 	vmov	s15, r3
 8108b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8108b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8108be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b46:	e021      	b.n	8108b8c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108b48:	693b      	ldr	r3, [r7, #16]
 8108b4a:	ee07 3a90 	vmov	s15, r3
 8108b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b52:	eddf 6a26 	vldr	s13, [pc, #152]	; 8108bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8108b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b5a:	4b1e      	ldr	r3, [pc, #120]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b62:	ee07 3a90 	vmov	s15, r3
 8108b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8108b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8108be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b8a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108b8c:	4b11      	ldr	r3, [pc, #68]	; (8108bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108b90:	0a5b      	lsrs	r3, r3, #9
 8108b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108b96:	3301      	adds	r3, #1
 8108b98:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8108b9a:	683b      	ldr	r3, [r7, #0]
 8108b9c:	ee07 3a90 	vmov	s15, r3
 8108ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108bb0:	ee17 3a90 	vmov	r3, s15
 8108bb4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8108bb6:	e005      	b.n	8108bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8108bb8:	2300      	movs	r3, #0
 8108bba:	61bb      	str	r3, [r7, #24]
    break;
 8108bbc:	e002      	b.n	8108bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8108bbe:	4b07      	ldr	r3, [pc, #28]	; (8108bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108bc0:	61bb      	str	r3, [r7, #24]
    break;
 8108bc2:	bf00      	nop
  }

  return sysclockfreq;
 8108bc4:	69bb      	ldr	r3, [r7, #24]
}
 8108bc6:	4618      	mov	r0, r3
 8108bc8:	3724      	adds	r7, #36	; 0x24
 8108bca:	46bd      	mov	sp, r7
 8108bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bd0:	4770      	bx	lr
 8108bd2:	bf00      	nop
 8108bd4:	58024400 	.word	0x58024400
 8108bd8:	03d09000 	.word	0x03d09000
 8108bdc:	003d0900 	.word	0x003d0900
 8108be0:	00f42400 	.word	0x00f42400
 8108be4:	46000000 	.word	0x46000000
 8108be8:	4c742400 	.word	0x4c742400
 8108bec:	4a742400 	.word	0x4a742400
 8108bf0:	4b742400 	.word	0x4b742400

08108bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8108bf4:	b580      	push	{r7, lr}
 8108bf6:	b082      	sub	sp, #8
 8108bf8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8108bfa:	f7ff fe81 	bl	8108900 <HAL_RCC_GetSysClockFreq>
 8108bfe:	4602      	mov	r2, r0
 8108c00:	4b11      	ldr	r3, [pc, #68]	; (8108c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8108c02:	699b      	ldr	r3, [r3, #24]
 8108c04:	0a1b      	lsrs	r3, r3, #8
 8108c06:	f003 030f 	and.w	r3, r3, #15
 8108c0a:	4910      	ldr	r1, [pc, #64]	; (8108c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8108c0c:	5ccb      	ldrb	r3, [r1, r3]
 8108c0e:	f003 031f 	and.w	r3, r3, #31
 8108c12:	fa22 f303 	lsr.w	r3, r2, r3
 8108c16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108c18:	4b0b      	ldr	r3, [pc, #44]	; (8108c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8108c1a:	699b      	ldr	r3, [r3, #24]
 8108c1c:	f003 030f 	and.w	r3, r3, #15
 8108c20:	4a0a      	ldr	r2, [pc, #40]	; (8108c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8108c22:	5cd3      	ldrb	r3, [r2, r3]
 8108c24:	f003 031f 	and.w	r3, r3, #31
 8108c28:	687a      	ldr	r2, [r7, #4]
 8108c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8108c2e:	4a08      	ldr	r2, [pc, #32]	; (8108c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108c30:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8108c32:	4b07      	ldr	r3, [pc, #28]	; (8108c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108c34:	681b      	ldr	r3, [r3, #0]
 8108c36:	4a07      	ldr	r2, [pc, #28]	; (8108c54 <HAL_RCC_GetHCLKFreq+0x60>)
 8108c38:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8108c3a:	4b05      	ldr	r3, [pc, #20]	; (8108c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108c3c:	681b      	ldr	r3, [r3, #0]
}
 8108c3e:	4618      	mov	r0, r3
 8108c40:	3708      	adds	r7, #8
 8108c42:	46bd      	mov	sp, r7
 8108c44:	bd80      	pop	{r7, pc}
 8108c46:	bf00      	nop
 8108c48:	58024400 	.word	0x58024400
 8108c4c:	0810e4f4 	.word	0x0810e4f4
 8108c50:	10000004 	.word	0x10000004
 8108c54:	10000000 	.word	0x10000000

08108c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8108c58:	b580      	push	{r7, lr}
 8108c5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108c5c:	f7ff ffca 	bl	8108bf4 <HAL_RCC_GetHCLKFreq>
 8108c60:	4602      	mov	r2, r0
 8108c62:	4b06      	ldr	r3, [pc, #24]	; (8108c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8108c64:	69db      	ldr	r3, [r3, #28]
 8108c66:	091b      	lsrs	r3, r3, #4
 8108c68:	f003 0307 	and.w	r3, r3, #7
 8108c6c:	4904      	ldr	r1, [pc, #16]	; (8108c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8108c6e:	5ccb      	ldrb	r3, [r1, r3]
 8108c70:	f003 031f 	and.w	r3, r3, #31
 8108c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8108c78:	4618      	mov	r0, r3
 8108c7a:	bd80      	pop	{r7, pc}
 8108c7c:	58024400 	.word	0x58024400
 8108c80:	0810e4f4 	.word	0x0810e4f4

08108c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8108c84:	b580      	push	{r7, lr}
 8108c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8108c88:	f7ff ffb4 	bl	8108bf4 <HAL_RCC_GetHCLKFreq>
 8108c8c:	4602      	mov	r2, r0
 8108c8e:	4b06      	ldr	r3, [pc, #24]	; (8108ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8108c90:	69db      	ldr	r3, [r3, #28]
 8108c92:	0a1b      	lsrs	r3, r3, #8
 8108c94:	f003 0307 	and.w	r3, r3, #7
 8108c98:	4904      	ldr	r1, [pc, #16]	; (8108cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8108c9a:	5ccb      	ldrb	r3, [r1, r3]
 8108c9c:	f003 031f 	and.w	r3, r3, #31
 8108ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108ca4:	4618      	mov	r0, r3
 8108ca6:	bd80      	pop	{r7, pc}
 8108ca8:	58024400 	.word	0x58024400
 8108cac:	0810e4f4 	.word	0x0810e4f4

08108cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8108cb0:	b580      	push	{r7, lr}
 8108cb2:	b086      	sub	sp, #24
 8108cb4:	af00      	add	r7, sp, #0
 8108cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8108cb8:	2300      	movs	r3, #0
 8108cba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8108cbc:	2300      	movs	r3, #0
 8108cbe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	681b      	ldr	r3, [r3, #0]
 8108cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108cc8:	2b00      	cmp	r3, #0
 8108cca:	d03f      	beq.n	8108d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108cd4:	d02a      	beq.n	8108d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8108cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108cda:	d824      	bhi.n	8108d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108ce0:	d018      	beq.n	8108d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108ce6:	d81e      	bhi.n	8108d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108ce8:	2b00      	cmp	r3, #0
 8108cea:	d003      	beq.n	8108cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8108cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108cf0:	d007      	beq.n	8108d02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8108cf2:	e018      	b.n	8108d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108cf4:	4bab      	ldr	r3, [pc, #684]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108cf8:	4aaa      	ldr	r2, [pc, #680]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108d00:	e015      	b.n	8108d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108d02:	687b      	ldr	r3, [r7, #4]
 8108d04:	3304      	adds	r3, #4
 8108d06:	2102      	movs	r1, #2
 8108d08:	4618      	mov	r0, r3
 8108d0a:	f001 f9cf 	bl	810a0ac <RCCEx_PLL2_Config>
 8108d0e:	4603      	mov	r3, r0
 8108d10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108d12:	e00c      	b.n	8108d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108d14:	687b      	ldr	r3, [r7, #4]
 8108d16:	3324      	adds	r3, #36	; 0x24
 8108d18:	2102      	movs	r1, #2
 8108d1a:	4618      	mov	r0, r3
 8108d1c:	f001 fa78 	bl	810a210 <RCCEx_PLL3_Config>
 8108d20:	4603      	mov	r3, r0
 8108d22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108d24:	e003      	b.n	8108d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108d26:	2301      	movs	r3, #1
 8108d28:	75fb      	strb	r3, [r7, #23]
      break;
 8108d2a:	e000      	b.n	8108d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8108d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108d2e:	7dfb      	ldrb	r3, [r7, #23]
 8108d30:	2b00      	cmp	r3, #0
 8108d32:	d109      	bne.n	8108d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8108d34:	4b9b      	ldr	r3, [pc, #620]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108d3c:	687b      	ldr	r3, [r7, #4]
 8108d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108d40:	4998      	ldr	r1, [pc, #608]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d42:	4313      	orrs	r3, r2
 8108d44:	650b      	str	r3, [r1, #80]	; 0x50
 8108d46:	e001      	b.n	8108d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d48:	7dfb      	ldrb	r3, [r7, #23]
 8108d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	681b      	ldr	r3, [r3, #0]
 8108d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108d54:	2b00      	cmp	r3, #0
 8108d56:	d03d      	beq.n	8108dd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d5c:	2b04      	cmp	r3, #4
 8108d5e:	d826      	bhi.n	8108dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108d60:	a201      	add	r2, pc, #4	; (adr r2, 8108d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8108d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d66:	bf00      	nop
 8108d68:	08108d7d 	.word	0x08108d7d
 8108d6c:	08108d8b 	.word	0x08108d8b
 8108d70:	08108d9d 	.word	0x08108d9d
 8108d74:	08108db5 	.word	0x08108db5
 8108d78:	08108db5 	.word	0x08108db5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108d7c:	4b89      	ldr	r3, [pc, #548]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108d80:	4a88      	ldr	r2, [pc, #544]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108d88:	e015      	b.n	8108db6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108d8a:	687b      	ldr	r3, [r7, #4]
 8108d8c:	3304      	adds	r3, #4
 8108d8e:	2100      	movs	r1, #0
 8108d90:	4618      	mov	r0, r3
 8108d92:	f001 f98b 	bl	810a0ac <RCCEx_PLL2_Config>
 8108d96:	4603      	mov	r3, r0
 8108d98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108d9a:	e00c      	b.n	8108db6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	3324      	adds	r3, #36	; 0x24
 8108da0:	2100      	movs	r1, #0
 8108da2:	4618      	mov	r0, r3
 8108da4:	f001 fa34 	bl	810a210 <RCCEx_PLL3_Config>
 8108da8:	4603      	mov	r3, r0
 8108daa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108dac:	e003      	b.n	8108db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108dae:	2301      	movs	r3, #1
 8108db0:	75fb      	strb	r3, [r7, #23]
      break;
 8108db2:	e000      	b.n	8108db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8108db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108db6:	7dfb      	ldrb	r3, [r7, #23]
 8108db8:	2b00      	cmp	r3, #0
 8108dba:	d109      	bne.n	8108dd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108dbc:	4b79      	ldr	r3, [pc, #484]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108dc0:	f023 0207 	bic.w	r2, r3, #7
 8108dc4:	687b      	ldr	r3, [r7, #4]
 8108dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108dc8:	4976      	ldr	r1, [pc, #472]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108dca:	4313      	orrs	r3, r2
 8108dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8108dce:	e001      	b.n	8108dd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108dd0:	7dfb      	ldrb	r3, [r7, #23]
 8108dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8108dd4:	687b      	ldr	r3, [r7, #4]
 8108dd6:	681b      	ldr	r3, [r3, #0]
 8108dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108ddc:	2b00      	cmp	r3, #0
 8108dde:	d042      	beq.n	8108e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8108de0:	687b      	ldr	r3, [r7, #4]
 8108de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108de8:	d02b      	beq.n	8108e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8108dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108dee:	d825      	bhi.n	8108e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108df0:	2bc0      	cmp	r3, #192	; 0xc0
 8108df2:	d028      	beq.n	8108e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8108df4:	2bc0      	cmp	r3, #192	; 0xc0
 8108df6:	d821      	bhi.n	8108e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108df8:	2b80      	cmp	r3, #128	; 0x80
 8108dfa:	d016      	beq.n	8108e2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8108dfc:	2b80      	cmp	r3, #128	; 0x80
 8108dfe:	d81d      	bhi.n	8108e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108e00:	2b00      	cmp	r3, #0
 8108e02:	d002      	beq.n	8108e0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8108e04:	2b40      	cmp	r3, #64	; 0x40
 8108e06:	d007      	beq.n	8108e18 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8108e08:	e018      	b.n	8108e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108e0a:	4b66      	ldr	r3, [pc, #408]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108e0e:	4a65      	ldr	r2, [pc, #404]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108e16:	e017      	b.n	8108e48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108e18:	687b      	ldr	r3, [r7, #4]
 8108e1a:	3304      	adds	r3, #4
 8108e1c:	2100      	movs	r1, #0
 8108e1e:	4618      	mov	r0, r3
 8108e20:	f001 f944 	bl	810a0ac <RCCEx_PLL2_Config>
 8108e24:	4603      	mov	r3, r0
 8108e26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108e28:	e00e      	b.n	8108e48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108e2a:	687b      	ldr	r3, [r7, #4]
 8108e2c:	3324      	adds	r3, #36	; 0x24
 8108e2e:	2100      	movs	r1, #0
 8108e30:	4618      	mov	r0, r3
 8108e32:	f001 f9ed 	bl	810a210 <RCCEx_PLL3_Config>
 8108e36:	4603      	mov	r3, r0
 8108e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108e3a:	e005      	b.n	8108e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108e3c:	2301      	movs	r3, #1
 8108e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8108e40:	e002      	b.n	8108e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8108e42:	bf00      	nop
 8108e44:	e000      	b.n	8108e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8108e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108e48:	7dfb      	ldrb	r3, [r7, #23]
 8108e4a:	2b00      	cmp	r3, #0
 8108e4c:	d109      	bne.n	8108e62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108e4e:	4b55      	ldr	r3, [pc, #340]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108e52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8108e56:	687b      	ldr	r3, [r7, #4]
 8108e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108e5a:	4952      	ldr	r1, [pc, #328]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e5c:	4313      	orrs	r3, r2
 8108e5e:	650b      	str	r3, [r1, #80]	; 0x50
 8108e60:	e001      	b.n	8108e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e62:	7dfb      	ldrb	r3, [r7, #23]
 8108e64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	681b      	ldr	r3, [r3, #0]
 8108e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108e6e:	2b00      	cmp	r3, #0
 8108e70:	d049      	beq.n	8108f06 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108e7c:	d030      	beq.n	8108ee0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108e7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108e82:	d82a      	bhi.n	8108eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108e88:	d02c      	beq.n	8108ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8108e8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108e8e:	d824      	bhi.n	8108eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108e94:	d018      	beq.n	8108ec8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8108e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108e9a:	d81e      	bhi.n	8108eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108e9c:	2b00      	cmp	r3, #0
 8108e9e:	d003      	beq.n	8108ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8108ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108ea4:	d007      	beq.n	8108eb6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8108ea6:	e018      	b.n	8108eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108ea8:	4b3e      	ldr	r3, [pc, #248]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108eac:	4a3d      	ldr	r2, [pc, #244]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108eb4:	e017      	b.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	3304      	adds	r3, #4
 8108eba:	2100      	movs	r1, #0
 8108ebc:	4618      	mov	r0, r3
 8108ebe:	f001 f8f5 	bl	810a0ac <RCCEx_PLL2_Config>
 8108ec2:	4603      	mov	r3, r0
 8108ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8108ec6:	e00e      	b.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108ec8:	687b      	ldr	r3, [r7, #4]
 8108eca:	3324      	adds	r3, #36	; 0x24
 8108ecc:	2100      	movs	r1, #0
 8108ece:	4618      	mov	r0, r3
 8108ed0:	f001 f99e 	bl	810a210 <RCCEx_PLL3_Config>
 8108ed4:	4603      	mov	r3, r0
 8108ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ed8:	e005      	b.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8108eda:	2301      	movs	r3, #1
 8108edc:	75fb      	strb	r3, [r7, #23]
      break;
 8108ede:	e002      	b.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108ee0:	bf00      	nop
 8108ee2:	e000      	b.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ee6:	7dfb      	ldrb	r3, [r7, #23]
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	d10a      	bne.n	8108f02 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8108eec:	4b2d      	ldr	r3, [pc, #180]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108ef0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8108ef4:	687b      	ldr	r3, [r7, #4]
 8108ef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108efa:	492a      	ldr	r1, [pc, #168]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108efc:	4313      	orrs	r3, r2
 8108efe:	658b      	str	r3, [r1, #88]	; 0x58
 8108f00:	e001      	b.n	8108f06 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f02:	7dfb      	ldrb	r3, [r7, #23]
 8108f04:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8108f06:	687b      	ldr	r3, [r7, #4]
 8108f08:	681b      	ldr	r3, [r3, #0]
 8108f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108f0e:	2b00      	cmp	r3, #0
 8108f10:	d04c      	beq.n	8108fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8108f12:	687b      	ldr	r3, [r7, #4]
 8108f14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108f1c:	d030      	beq.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8108f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108f22:	d82a      	bhi.n	8108f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108f28:	d02c      	beq.n	8108f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8108f2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108f2e:	d824      	bhi.n	8108f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108f34:	d018      	beq.n	8108f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8108f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108f3a:	d81e      	bhi.n	8108f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108f3c:	2b00      	cmp	r3, #0
 8108f3e:	d003      	beq.n	8108f48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8108f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108f44:	d007      	beq.n	8108f56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8108f46:	e018      	b.n	8108f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108f48:	4b16      	ldr	r3, [pc, #88]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108f4c:	4a15      	ldr	r2, [pc, #84]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108f54:	e017      	b.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108f56:	687b      	ldr	r3, [r7, #4]
 8108f58:	3304      	adds	r3, #4
 8108f5a:	2100      	movs	r1, #0
 8108f5c:	4618      	mov	r0, r3
 8108f5e:	f001 f8a5 	bl	810a0ac <RCCEx_PLL2_Config>
 8108f62:	4603      	mov	r3, r0
 8108f64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8108f66:	e00e      	b.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108f68:	687b      	ldr	r3, [r7, #4]
 8108f6a:	3324      	adds	r3, #36	; 0x24
 8108f6c:	2100      	movs	r1, #0
 8108f6e:	4618      	mov	r0, r3
 8108f70:	f001 f94e 	bl	810a210 <RCCEx_PLL3_Config>
 8108f74:	4603      	mov	r3, r0
 8108f76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108f78:	e005      	b.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8108f7a:	2301      	movs	r3, #1
 8108f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8108f7e:	e002      	b.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108f80:	bf00      	nop
 8108f82:	e000      	b.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f86:	7dfb      	ldrb	r3, [r7, #23]
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d10d      	bne.n	8108fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108f8c:	4b05      	ldr	r3, [pc, #20]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108f9a:	4902      	ldr	r1, [pc, #8]	; (8108fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f9c:	4313      	orrs	r3, r2
 8108f9e:	658b      	str	r3, [r1, #88]	; 0x58
 8108fa0:	e004      	b.n	8108fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8108fa2:	bf00      	nop
 8108fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108fa8:	7dfb      	ldrb	r3, [r7, #23]
 8108faa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108fb4:	2b00      	cmp	r3, #0
 8108fb6:	d032      	beq.n	810901e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8108fb8:	687b      	ldr	r3, [r7, #4]
 8108fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108fbc:	2b30      	cmp	r3, #48	; 0x30
 8108fbe:	d01c      	beq.n	8108ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8108fc0:	2b30      	cmp	r3, #48	; 0x30
 8108fc2:	d817      	bhi.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108fc4:	2b20      	cmp	r3, #32
 8108fc6:	d00c      	beq.n	8108fe2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8108fc8:	2b20      	cmp	r3, #32
 8108fca:	d813      	bhi.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108fcc:	2b00      	cmp	r3, #0
 8108fce:	d016      	beq.n	8108ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8108fd0:	2b10      	cmp	r3, #16
 8108fd2:	d10f      	bne.n	8108ff4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108fd4:	4baf      	ldr	r3, [pc, #700]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fd8:	4aae      	ldr	r2, [pc, #696]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108fe0:	e00e      	b.n	8109000 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108fe2:	687b      	ldr	r3, [r7, #4]
 8108fe4:	3304      	adds	r3, #4
 8108fe6:	2102      	movs	r1, #2
 8108fe8:	4618      	mov	r0, r3
 8108fea:	f001 f85f 	bl	810a0ac <RCCEx_PLL2_Config>
 8108fee:	4603      	mov	r3, r0
 8108ff0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108ff2:	e005      	b.n	8109000 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108ff4:	2301      	movs	r3, #1
 8108ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8108ff8:	e002      	b.n	8109000 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8108ffa:	bf00      	nop
 8108ffc:	e000      	b.n	8109000 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8108ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109000:	7dfb      	ldrb	r3, [r7, #23]
 8109002:	2b00      	cmp	r3, #0
 8109004:	d109      	bne.n	810901a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8109006:	4ba3      	ldr	r3, [pc, #652]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810900a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109012:	49a0      	ldr	r1, [pc, #640]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109014:	4313      	orrs	r3, r2
 8109016:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109018:	e001      	b.n	810901e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810901a:	7dfb      	ldrb	r3, [r7, #23]
 810901c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810901e:	687b      	ldr	r3, [r7, #4]
 8109020:	681b      	ldr	r3, [r3, #0]
 8109022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8109026:	2b00      	cmp	r3, #0
 8109028:	d047      	beq.n	81090ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810902a:	687b      	ldr	r3, [r7, #4]
 810902c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810902e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109032:	d030      	beq.n	8109096 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8109034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109038:	d82a      	bhi.n	8109090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810903a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810903e:	d02c      	beq.n	810909a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8109040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109044:	d824      	bhi.n	8109090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810904a:	d018      	beq.n	810907e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 810904c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109050:	d81e      	bhi.n	8109090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109052:	2b00      	cmp	r3, #0
 8109054:	d003      	beq.n	810905e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8109056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810905a:	d007      	beq.n	810906c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 810905c:	e018      	b.n	8109090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810905e:	4b8d      	ldr	r3, [pc, #564]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109062:	4a8c      	ldr	r2, [pc, #560]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109068:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810906a:	e017      	b.n	810909c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	3304      	adds	r3, #4
 8109070:	2100      	movs	r1, #0
 8109072:	4618      	mov	r0, r3
 8109074:	f001 f81a 	bl	810a0ac <RCCEx_PLL2_Config>
 8109078:	4603      	mov	r3, r0
 810907a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810907c:	e00e      	b.n	810909c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	3324      	adds	r3, #36	; 0x24
 8109082:	2100      	movs	r1, #0
 8109084:	4618      	mov	r0, r3
 8109086:	f001 f8c3 	bl	810a210 <RCCEx_PLL3_Config>
 810908a:	4603      	mov	r3, r0
 810908c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810908e:	e005      	b.n	810909c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109090:	2301      	movs	r3, #1
 8109092:	75fb      	strb	r3, [r7, #23]
      break;
 8109094:	e002      	b.n	810909c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8109096:	bf00      	nop
 8109098:	e000      	b.n	810909c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810909a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810909c:	7dfb      	ldrb	r3, [r7, #23]
 810909e:	2b00      	cmp	r3, #0
 81090a0:	d109      	bne.n	81090b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81090a2:	4b7c      	ldr	r3, [pc, #496]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81090a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81090a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81090aa:	687b      	ldr	r3, [r7, #4]
 81090ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81090ae:	4979      	ldr	r1, [pc, #484]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81090b0:	4313      	orrs	r3, r2
 81090b2:	650b      	str	r3, [r1, #80]	; 0x50
 81090b4:	e001      	b.n	81090ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81090b6:	7dfb      	ldrb	r3, [r7, #23]
 81090b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81090ba:	687b      	ldr	r3, [r7, #4]
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81090c2:	2b00      	cmp	r3, #0
 81090c4:	d049      	beq.n	810915a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81090c6:	687b      	ldr	r3, [r7, #4]
 81090c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81090ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81090ce:	d02e      	beq.n	810912e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81090d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81090d4:	d828      	bhi.n	8109128 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81090d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81090da:	d02a      	beq.n	8109132 <HAL_RCCEx_PeriphCLKConfig+0x482>
 81090dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81090e0:	d822      	bhi.n	8109128 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81090e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81090e6:	d026      	beq.n	8109136 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81090e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81090ec:	d81c      	bhi.n	8109128 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81090ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81090f2:	d010      	beq.n	8109116 <HAL_RCCEx_PeriphCLKConfig+0x466>
 81090f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81090f8:	d816      	bhi.n	8109128 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81090fa:	2b00      	cmp	r3, #0
 81090fc:	d01d      	beq.n	810913a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81090fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109102:	d111      	bne.n	8109128 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	3304      	adds	r3, #4
 8109108:	2101      	movs	r1, #1
 810910a:	4618      	mov	r0, r3
 810910c:	f000 ffce 	bl	810a0ac <RCCEx_PLL2_Config>
 8109110:	4603      	mov	r3, r0
 8109112:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109114:	e012      	b.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	3324      	adds	r3, #36	; 0x24
 810911a:	2101      	movs	r1, #1
 810911c:	4618      	mov	r0, r3
 810911e:	f001 f877 	bl	810a210 <RCCEx_PLL3_Config>
 8109122:	4603      	mov	r3, r0
 8109124:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109126:	e009      	b.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109128:	2301      	movs	r3, #1
 810912a:	75fb      	strb	r3, [r7, #23]
      break;
 810912c:	e006      	b.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810912e:	bf00      	nop
 8109130:	e004      	b.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109132:	bf00      	nop
 8109134:	e002      	b.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109136:	bf00      	nop
 8109138:	e000      	b.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810913a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810913c:	7dfb      	ldrb	r3, [r7, #23]
 810913e:	2b00      	cmp	r3, #0
 8109140:	d109      	bne.n	8109156 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8109142:	4b54      	ldr	r3, [pc, #336]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109146:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810914e:	4951      	ldr	r1, [pc, #324]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109150:	4313      	orrs	r3, r2
 8109152:	650b      	str	r3, [r1, #80]	; 0x50
 8109154:	e001      	b.n	810915a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109156:	7dfb      	ldrb	r3, [r7, #23]
 8109158:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810915a:	687b      	ldr	r3, [r7, #4]
 810915c:	681b      	ldr	r3, [r3, #0]
 810915e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109162:	2b00      	cmp	r3, #0
 8109164:	d04b      	beq.n	81091fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810916c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109170:	d02e      	beq.n	81091d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8109172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109176:	d828      	bhi.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810917c:	d02a      	beq.n	81091d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810917e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109182:	d822      	bhi.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109184:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109188:	d026      	beq.n	81091d8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 810918a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810918e:	d81c      	bhi.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109194:	d010      	beq.n	81091b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8109196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810919a:	d816      	bhi.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810919c:	2b00      	cmp	r3, #0
 810919e:	d01d      	beq.n	81091dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81091a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81091a4:	d111      	bne.n	81091ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81091a6:	687b      	ldr	r3, [r7, #4]
 81091a8:	3304      	adds	r3, #4
 81091aa:	2101      	movs	r1, #1
 81091ac:	4618      	mov	r0, r3
 81091ae:	f000 ff7d 	bl	810a0ac <RCCEx_PLL2_Config>
 81091b2:	4603      	mov	r3, r0
 81091b4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81091b6:	e012      	b.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	3324      	adds	r3, #36	; 0x24
 81091bc:	2101      	movs	r1, #1
 81091be:	4618      	mov	r0, r3
 81091c0:	f001 f826 	bl	810a210 <RCCEx_PLL3_Config>
 81091c4:	4603      	mov	r3, r0
 81091c6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81091c8:	e009      	b.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81091ca:	2301      	movs	r3, #1
 81091cc:	75fb      	strb	r3, [r7, #23]
      break;
 81091ce:	e006      	b.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81091d0:	bf00      	nop
 81091d2:	e004      	b.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81091d4:	bf00      	nop
 81091d6:	e002      	b.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81091d8:	bf00      	nop
 81091da:	e000      	b.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81091dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81091de:	7dfb      	ldrb	r3, [r7, #23]
 81091e0:	2b00      	cmp	r3, #0
 81091e2:	d10a      	bne.n	81091fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81091e4:	4b2b      	ldr	r3, [pc, #172]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81091e8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81091ec:	687b      	ldr	r3, [r7, #4]
 81091ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81091f2:	4928      	ldr	r1, [pc, #160]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091f4:	4313      	orrs	r3, r2
 81091f6:	658b      	str	r3, [r1, #88]	; 0x58
 81091f8:	e001      	b.n	81091fe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81091fa:	7dfb      	ldrb	r3, [r7, #23]
 81091fc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81091fe:	687b      	ldr	r3, [r7, #4]
 8109200:	681b      	ldr	r3, [r3, #0]
 8109202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8109206:	2b00      	cmp	r3, #0
 8109208:	d02f      	beq.n	810926a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810920e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109212:	d00e      	beq.n	8109232 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8109214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109218:	d814      	bhi.n	8109244 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810921a:	2b00      	cmp	r3, #0
 810921c:	d015      	beq.n	810924a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810921e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109222:	d10f      	bne.n	8109244 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109224:	4b1b      	ldr	r3, [pc, #108]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109228:	4a1a      	ldr	r2, [pc, #104]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810922a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810922e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109230:	e00c      	b.n	810924c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109232:	687b      	ldr	r3, [r7, #4]
 8109234:	3304      	adds	r3, #4
 8109236:	2101      	movs	r1, #1
 8109238:	4618      	mov	r0, r3
 810923a:	f000 ff37 	bl	810a0ac <RCCEx_PLL2_Config>
 810923e:	4603      	mov	r3, r0
 8109240:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109242:	e003      	b.n	810924c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109244:	2301      	movs	r3, #1
 8109246:	75fb      	strb	r3, [r7, #23]
      break;
 8109248:	e000      	b.n	810924c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810924a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810924c:	7dfb      	ldrb	r3, [r7, #23]
 810924e:	2b00      	cmp	r3, #0
 8109250:	d109      	bne.n	8109266 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109252:	4b10      	ldr	r3, [pc, #64]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109256:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810925e:	490d      	ldr	r1, [pc, #52]	; (8109294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109260:	4313      	orrs	r3, r2
 8109262:	650b      	str	r3, [r1, #80]	; 0x50
 8109264:	e001      	b.n	810926a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109266:	7dfb      	ldrb	r3, [r7, #23]
 8109268:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810926a:	687b      	ldr	r3, [r7, #4]
 810926c:	681b      	ldr	r3, [r3, #0]
 810926e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8109272:	2b00      	cmp	r3, #0
 8109274:	d033      	beq.n	81092de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810927a:	2b03      	cmp	r3, #3
 810927c:	d81c      	bhi.n	81092b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810927e:	a201      	add	r2, pc, #4	; (adr r2, 8109284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8109280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109284:	081092bf 	.word	0x081092bf
 8109288:	08109299 	.word	0x08109299
 810928c:	081092a7 	.word	0x081092a7
 8109290:	081092bf 	.word	0x081092bf
 8109294:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109298:	4bb9      	ldr	r3, [pc, #740]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810929c:	4ab8      	ldr	r2, [pc, #736]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810929e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81092a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81092a4:	e00c      	b.n	81092c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	3304      	adds	r3, #4
 81092aa:	2102      	movs	r1, #2
 81092ac:	4618      	mov	r0, r3
 81092ae:	f000 fefd 	bl	810a0ac <RCCEx_PLL2_Config>
 81092b2:	4603      	mov	r3, r0
 81092b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81092b6:	e003      	b.n	81092c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81092b8:	2301      	movs	r3, #1
 81092ba:	75fb      	strb	r3, [r7, #23]
      break;
 81092bc:	e000      	b.n	81092c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81092be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81092c0:	7dfb      	ldrb	r3, [r7, #23]
 81092c2:	2b00      	cmp	r3, #0
 81092c4:	d109      	bne.n	81092da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81092c6:	4bae      	ldr	r3, [pc, #696]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81092ca:	f023 0203 	bic.w	r2, r3, #3
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81092d2:	49ab      	ldr	r1, [pc, #684]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092d4:	4313      	orrs	r3, r2
 81092d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81092d8:	e001      	b.n	81092de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81092da:	7dfb      	ldrb	r3, [r7, #23]
 81092dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81092de:	687b      	ldr	r3, [r7, #4]
 81092e0:	681b      	ldr	r3, [r3, #0]
 81092e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81092e6:	2b00      	cmp	r3, #0
 81092e8:	f000 8088 	beq.w	81093fc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81092ec:	4ba5      	ldr	r3, [pc, #660]	; (8109584 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81092ee:	681b      	ldr	r3, [r3, #0]
 81092f0:	4aa4      	ldr	r2, [pc, #656]	; (8109584 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81092f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81092f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81092f8:	f7fa fa10 	bl	810371c <HAL_GetTick>
 81092fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81092fe:	e009      	b.n	8109314 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8109300:	f7fa fa0c 	bl	810371c <HAL_GetTick>
 8109304:	4602      	mov	r2, r0
 8109306:	693b      	ldr	r3, [r7, #16]
 8109308:	1ad3      	subs	r3, r2, r3
 810930a:	2b64      	cmp	r3, #100	; 0x64
 810930c:	d902      	bls.n	8109314 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810930e:	2303      	movs	r3, #3
 8109310:	75fb      	strb	r3, [r7, #23]
        break;
 8109312:	e005      	b.n	8109320 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109314:	4b9b      	ldr	r3, [pc, #620]	; (8109584 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109316:	681b      	ldr	r3, [r3, #0]
 8109318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810931c:	2b00      	cmp	r3, #0
 810931e:	d0ef      	beq.n	8109300 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8109320:	7dfb      	ldrb	r3, [r7, #23]
 8109322:	2b00      	cmp	r3, #0
 8109324:	d168      	bne.n	81093f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8109326:	4b96      	ldr	r3, [pc, #600]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109330:	4053      	eors	r3, r2
 8109332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109336:	2b00      	cmp	r3, #0
 8109338:	d013      	beq.n	8109362 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810933a:	4b91      	ldr	r3, [pc, #580]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810933e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109342:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109344:	4b8e      	ldr	r3, [pc, #568]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109348:	4a8d      	ldr	r2, [pc, #564]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810934a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810934e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109350:	4b8b      	ldr	r3, [pc, #556]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109354:	4a8a      	ldr	r2, [pc, #552]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810935a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810935c:	4a88      	ldr	r2, [pc, #544]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810935e:	68fb      	ldr	r3, [r7, #12]
 8109360:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8109362:	687b      	ldr	r3, [r7, #4]
 8109364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810936c:	d115      	bne.n	810939a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810936e:	f7fa f9d5 	bl	810371c <HAL_GetTick>
 8109372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109374:	e00b      	b.n	810938e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109376:	f7fa f9d1 	bl	810371c <HAL_GetTick>
 810937a:	4602      	mov	r2, r0
 810937c:	693b      	ldr	r3, [r7, #16]
 810937e:	1ad3      	subs	r3, r2, r3
 8109380:	f241 3288 	movw	r2, #5000	; 0x1388
 8109384:	4293      	cmp	r3, r2
 8109386:	d902      	bls.n	810938e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8109388:	2303      	movs	r3, #3
 810938a:	75fb      	strb	r3, [r7, #23]
            break;
 810938c:	e005      	b.n	810939a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810938e:	4b7c      	ldr	r3, [pc, #496]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109392:	f003 0302 	and.w	r3, r3, #2
 8109396:	2b00      	cmp	r3, #0
 8109398:	d0ed      	beq.n	8109376 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810939a:	7dfb      	ldrb	r3, [r7, #23]
 810939c:	2b00      	cmp	r3, #0
 810939e:	d128      	bne.n	81093f2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81093a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81093aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81093ae:	d10f      	bne.n	81093d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81093b0:	4b73      	ldr	r3, [pc, #460]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093b2:	691b      	ldr	r3, [r3, #16]
 81093b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81093be:	091b      	lsrs	r3, r3, #4
 81093c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81093c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81093c8:	496d      	ldr	r1, [pc, #436]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093ca:	4313      	orrs	r3, r2
 81093cc:	610b      	str	r3, [r1, #16]
 81093ce:	e005      	b.n	81093dc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81093d0:	4b6b      	ldr	r3, [pc, #428]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093d2:	691b      	ldr	r3, [r3, #16]
 81093d4:	4a6a      	ldr	r2, [pc, #424]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81093da:	6113      	str	r3, [r2, #16]
 81093dc:	4b68      	ldr	r3, [pc, #416]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81093e0:	687b      	ldr	r3, [r7, #4]
 81093e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81093e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81093ea:	4965      	ldr	r1, [pc, #404]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093ec:	4313      	orrs	r3, r2
 81093ee:	670b      	str	r3, [r1, #112]	; 0x70
 81093f0:	e004      	b.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81093f2:	7dfb      	ldrb	r3, [r7, #23]
 81093f4:	75bb      	strb	r3, [r7, #22]
 81093f6:	e001      	b.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81093f8:	7dfb      	ldrb	r3, [r7, #23]
 81093fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	681b      	ldr	r3, [r3, #0]
 8109400:	f003 0301 	and.w	r3, r3, #1
 8109404:	2b00      	cmp	r3, #0
 8109406:	d07e      	beq.n	8109506 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8109408:	687b      	ldr	r3, [r7, #4]
 810940a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810940c:	2b28      	cmp	r3, #40	; 0x28
 810940e:	d867      	bhi.n	81094e0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8109410:	a201      	add	r2, pc, #4	; (adr r2, 8109418 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8109412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109416:	bf00      	nop
 8109418:	081094e7 	.word	0x081094e7
 810941c:	081094e1 	.word	0x081094e1
 8109420:	081094e1 	.word	0x081094e1
 8109424:	081094e1 	.word	0x081094e1
 8109428:	081094e1 	.word	0x081094e1
 810942c:	081094e1 	.word	0x081094e1
 8109430:	081094e1 	.word	0x081094e1
 8109434:	081094e1 	.word	0x081094e1
 8109438:	081094bd 	.word	0x081094bd
 810943c:	081094e1 	.word	0x081094e1
 8109440:	081094e1 	.word	0x081094e1
 8109444:	081094e1 	.word	0x081094e1
 8109448:	081094e1 	.word	0x081094e1
 810944c:	081094e1 	.word	0x081094e1
 8109450:	081094e1 	.word	0x081094e1
 8109454:	081094e1 	.word	0x081094e1
 8109458:	081094cf 	.word	0x081094cf
 810945c:	081094e1 	.word	0x081094e1
 8109460:	081094e1 	.word	0x081094e1
 8109464:	081094e1 	.word	0x081094e1
 8109468:	081094e1 	.word	0x081094e1
 810946c:	081094e1 	.word	0x081094e1
 8109470:	081094e1 	.word	0x081094e1
 8109474:	081094e1 	.word	0x081094e1
 8109478:	081094e7 	.word	0x081094e7
 810947c:	081094e1 	.word	0x081094e1
 8109480:	081094e1 	.word	0x081094e1
 8109484:	081094e1 	.word	0x081094e1
 8109488:	081094e1 	.word	0x081094e1
 810948c:	081094e1 	.word	0x081094e1
 8109490:	081094e1 	.word	0x081094e1
 8109494:	081094e1 	.word	0x081094e1
 8109498:	081094e7 	.word	0x081094e7
 810949c:	081094e1 	.word	0x081094e1
 81094a0:	081094e1 	.word	0x081094e1
 81094a4:	081094e1 	.word	0x081094e1
 81094a8:	081094e1 	.word	0x081094e1
 81094ac:	081094e1 	.word	0x081094e1
 81094b0:	081094e1 	.word	0x081094e1
 81094b4:	081094e1 	.word	0x081094e1
 81094b8:	081094e7 	.word	0x081094e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81094bc:	687b      	ldr	r3, [r7, #4]
 81094be:	3304      	adds	r3, #4
 81094c0:	2101      	movs	r1, #1
 81094c2:	4618      	mov	r0, r3
 81094c4:	f000 fdf2 	bl	810a0ac <RCCEx_PLL2_Config>
 81094c8:	4603      	mov	r3, r0
 81094ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81094cc:	e00c      	b.n	81094e8 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	3324      	adds	r3, #36	; 0x24
 81094d2:	2101      	movs	r1, #1
 81094d4:	4618      	mov	r0, r3
 81094d6:	f000 fe9b 	bl	810a210 <RCCEx_PLL3_Config>
 81094da:	4603      	mov	r3, r0
 81094dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81094de:	e003      	b.n	81094e8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81094e0:	2301      	movs	r3, #1
 81094e2:	75fb      	strb	r3, [r7, #23]
      break;
 81094e4:	e000      	b.n	81094e8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81094e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81094e8:	7dfb      	ldrb	r3, [r7, #23]
 81094ea:	2b00      	cmp	r3, #0
 81094ec:	d109      	bne.n	8109502 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81094ee:	4b24      	ldr	r3, [pc, #144]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81094f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81094fa:	4921      	ldr	r1, [pc, #132]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094fc:	4313      	orrs	r3, r2
 81094fe:	654b      	str	r3, [r1, #84]	; 0x54
 8109500:	e001      	b.n	8109506 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109502:	7dfb      	ldrb	r3, [r7, #23]
 8109504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	681b      	ldr	r3, [r3, #0]
 810950a:	f003 0302 	and.w	r3, r3, #2
 810950e:	2b00      	cmp	r3, #0
 8109510:	d03c      	beq.n	810958c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109516:	2b05      	cmp	r3, #5
 8109518:	d820      	bhi.n	810955c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810951a:	a201      	add	r2, pc, #4	; (adr r2, 8109520 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109520:	08109563 	.word	0x08109563
 8109524:	08109539 	.word	0x08109539
 8109528:	0810954b 	.word	0x0810954b
 810952c:	08109563 	.word	0x08109563
 8109530:	08109563 	.word	0x08109563
 8109534:	08109563 	.word	0x08109563
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109538:	687b      	ldr	r3, [r7, #4]
 810953a:	3304      	adds	r3, #4
 810953c:	2101      	movs	r1, #1
 810953e:	4618      	mov	r0, r3
 8109540:	f000 fdb4 	bl	810a0ac <RCCEx_PLL2_Config>
 8109544:	4603      	mov	r3, r0
 8109546:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109548:	e00c      	b.n	8109564 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	3324      	adds	r3, #36	; 0x24
 810954e:	2101      	movs	r1, #1
 8109550:	4618      	mov	r0, r3
 8109552:	f000 fe5d 	bl	810a210 <RCCEx_PLL3_Config>
 8109556:	4603      	mov	r3, r0
 8109558:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810955a:	e003      	b.n	8109564 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810955c:	2301      	movs	r3, #1
 810955e:	75fb      	strb	r3, [r7, #23]
      break;
 8109560:	e000      	b.n	8109564 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8109562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109564:	7dfb      	ldrb	r3, [r7, #23]
 8109566:	2b00      	cmp	r3, #0
 8109568:	d10e      	bne.n	8109588 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810956a:	4b05      	ldr	r3, [pc, #20]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810956c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810956e:	f023 0207 	bic.w	r2, r3, #7
 8109572:	687b      	ldr	r3, [r7, #4]
 8109574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109576:	4902      	ldr	r1, [pc, #8]	; (8109580 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109578:	4313      	orrs	r3, r2
 810957a:	654b      	str	r3, [r1, #84]	; 0x54
 810957c:	e006      	b.n	810958c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810957e:	bf00      	nop
 8109580:	58024400 	.word	0x58024400
 8109584:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109588:	7dfb      	ldrb	r3, [r7, #23]
 810958a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810958c:	687b      	ldr	r3, [r7, #4]
 810958e:	681b      	ldr	r3, [r3, #0]
 8109590:	f003 0304 	and.w	r3, r3, #4
 8109594:	2b00      	cmp	r3, #0
 8109596:	d039      	beq.n	810960c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8109598:	687b      	ldr	r3, [r7, #4]
 810959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810959e:	2b05      	cmp	r3, #5
 81095a0:	d820      	bhi.n	81095e4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81095a2:	a201      	add	r2, pc, #4	; (adr r2, 81095a8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81095a8:	081095eb 	.word	0x081095eb
 81095ac:	081095c1 	.word	0x081095c1
 81095b0:	081095d3 	.word	0x081095d3
 81095b4:	081095eb 	.word	0x081095eb
 81095b8:	081095eb 	.word	0x081095eb
 81095bc:	081095eb 	.word	0x081095eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	3304      	adds	r3, #4
 81095c4:	2101      	movs	r1, #1
 81095c6:	4618      	mov	r0, r3
 81095c8:	f000 fd70 	bl	810a0ac <RCCEx_PLL2_Config>
 81095cc:	4603      	mov	r3, r0
 81095ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81095d0:	e00c      	b.n	81095ec <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	3324      	adds	r3, #36	; 0x24
 81095d6:	2101      	movs	r1, #1
 81095d8:	4618      	mov	r0, r3
 81095da:	f000 fe19 	bl	810a210 <RCCEx_PLL3_Config>
 81095de:	4603      	mov	r3, r0
 81095e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81095e2:	e003      	b.n	81095ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81095e4:	2301      	movs	r3, #1
 81095e6:	75fb      	strb	r3, [r7, #23]
      break;
 81095e8:	e000      	b.n	81095ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81095ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81095ec:	7dfb      	ldrb	r3, [r7, #23]
 81095ee:	2b00      	cmp	r3, #0
 81095f0:	d10a      	bne.n	8109608 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81095f2:	4bb7      	ldr	r3, [pc, #732]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81095f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81095f6:	f023 0207 	bic.w	r2, r3, #7
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109600:	49b3      	ldr	r1, [pc, #716]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109602:	4313      	orrs	r3, r2
 8109604:	658b      	str	r3, [r1, #88]	; 0x58
 8109606:	e001      	b.n	810960c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109608:	7dfb      	ldrb	r3, [r7, #23]
 810960a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810960c:	687b      	ldr	r3, [r7, #4]
 810960e:	681b      	ldr	r3, [r3, #0]
 8109610:	f003 0320 	and.w	r3, r3, #32
 8109614:	2b00      	cmp	r3, #0
 8109616:	d04b      	beq.n	81096b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810961e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109622:	d02e      	beq.n	8109682 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8109624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109628:	d828      	bhi.n	810967c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810962a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810962e:	d02a      	beq.n	8109686 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8109630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109634:	d822      	bhi.n	810967c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810963a:	d026      	beq.n	810968a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810963c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109640:	d81c      	bhi.n	810967c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109646:	d010      	beq.n	810966a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8109648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810964c:	d816      	bhi.n	810967c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810964e:	2b00      	cmp	r3, #0
 8109650:	d01d      	beq.n	810968e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8109652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109656:	d111      	bne.n	810967c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109658:	687b      	ldr	r3, [r7, #4]
 810965a:	3304      	adds	r3, #4
 810965c:	2100      	movs	r1, #0
 810965e:	4618      	mov	r0, r3
 8109660:	f000 fd24 	bl	810a0ac <RCCEx_PLL2_Config>
 8109664:	4603      	mov	r3, r0
 8109666:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109668:	e012      	b.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	3324      	adds	r3, #36	; 0x24
 810966e:	2102      	movs	r1, #2
 8109670:	4618      	mov	r0, r3
 8109672:	f000 fdcd 	bl	810a210 <RCCEx_PLL3_Config>
 8109676:	4603      	mov	r3, r0
 8109678:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810967a:	e009      	b.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810967c:	2301      	movs	r3, #1
 810967e:	75fb      	strb	r3, [r7, #23]
      break;
 8109680:	e006      	b.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8109682:	bf00      	nop
 8109684:	e004      	b.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8109686:	bf00      	nop
 8109688:	e002      	b.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810968a:	bf00      	nop
 810968c:	e000      	b.n	8109690 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810968e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109690:	7dfb      	ldrb	r3, [r7, #23]
 8109692:	2b00      	cmp	r3, #0
 8109694:	d10a      	bne.n	81096ac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8109696:	4b8e      	ldr	r3, [pc, #568]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810969a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810969e:	687b      	ldr	r3, [r7, #4]
 81096a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81096a4:	498a      	ldr	r1, [pc, #552]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81096a6:	4313      	orrs	r3, r2
 81096a8:	654b      	str	r3, [r1, #84]	; 0x54
 81096aa:	e001      	b.n	81096b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81096ac:	7dfb      	ldrb	r3, [r7, #23]
 81096ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81096b0:	687b      	ldr	r3, [r7, #4]
 81096b2:	681b      	ldr	r3, [r3, #0]
 81096b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d04b      	beq.n	8109754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81096c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81096c6:	d02e      	beq.n	8109726 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81096c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81096cc:	d828      	bhi.n	8109720 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81096ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81096d2:	d02a      	beq.n	810972a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81096d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81096d8:	d822      	bhi.n	8109720 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81096da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81096de:	d026      	beq.n	810972e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81096e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81096e4:	d81c      	bhi.n	8109720 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81096e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81096ea:	d010      	beq.n	810970e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81096ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81096f0:	d816      	bhi.n	8109720 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81096f2:	2b00      	cmp	r3, #0
 81096f4:	d01d      	beq.n	8109732 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81096f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81096fa:	d111      	bne.n	8109720 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81096fc:	687b      	ldr	r3, [r7, #4]
 81096fe:	3304      	adds	r3, #4
 8109700:	2100      	movs	r1, #0
 8109702:	4618      	mov	r0, r3
 8109704:	f000 fcd2 	bl	810a0ac <RCCEx_PLL2_Config>
 8109708:	4603      	mov	r3, r0
 810970a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810970c:	e012      	b.n	8109734 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	3324      	adds	r3, #36	; 0x24
 8109712:	2102      	movs	r1, #2
 8109714:	4618      	mov	r0, r3
 8109716:	f000 fd7b 	bl	810a210 <RCCEx_PLL3_Config>
 810971a:	4603      	mov	r3, r0
 810971c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810971e:	e009      	b.n	8109734 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109720:	2301      	movs	r3, #1
 8109722:	75fb      	strb	r3, [r7, #23]
      break;
 8109724:	e006      	b.n	8109734 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109726:	bf00      	nop
 8109728:	e004      	b.n	8109734 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810972a:	bf00      	nop
 810972c:	e002      	b.n	8109734 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810972e:	bf00      	nop
 8109730:	e000      	b.n	8109734 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109734:	7dfb      	ldrb	r3, [r7, #23]
 8109736:	2b00      	cmp	r3, #0
 8109738:	d10a      	bne.n	8109750 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810973a:	4b65      	ldr	r3, [pc, #404]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810973c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810973e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109748:	4961      	ldr	r1, [pc, #388]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810974a:	4313      	orrs	r3, r2
 810974c:	658b      	str	r3, [r1, #88]	; 0x58
 810974e:	e001      	b.n	8109754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109750:	7dfb      	ldrb	r3, [r7, #23]
 8109752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	681b      	ldr	r3, [r3, #0]
 8109758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810975c:	2b00      	cmp	r3, #0
 810975e:	d04b      	beq.n	81097f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109766:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810976a:	d02e      	beq.n	81097ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810976c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109770:	d828      	bhi.n	81097c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109776:	d02a      	beq.n	81097ce <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8109778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810977c:	d822      	bhi.n	81097c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810977e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109782:	d026      	beq.n	81097d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8109784:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109788:	d81c      	bhi.n	81097c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810978a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810978e:	d010      	beq.n	81097b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8109790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109794:	d816      	bhi.n	81097c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109796:	2b00      	cmp	r3, #0
 8109798:	d01d      	beq.n	81097d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810979a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810979e:	d111      	bne.n	81097c4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81097a0:	687b      	ldr	r3, [r7, #4]
 81097a2:	3304      	adds	r3, #4
 81097a4:	2100      	movs	r1, #0
 81097a6:	4618      	mov	r0, r3
 81097a8:	f000 fc80 	bl	810a0ac <RCCEx_PLL2_Config>
 81097ac:	4603      	mov	r3, r0
 81097ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81097b0:	e012      	b.n	81097d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81097b2:	687b      	ldr	r3, [r7, #4]
 81097b4:	3324      	adds	r3, #36	; 0x24
 81097b6:	2102      	movs	r1, #2
 81097b8:	4618      	mov	r0, r3
 81097ba:	f000 fd29 	bl	810a210 <RCCEx_PLL3_Config>
 81097be:	4603      	mov	r3, r0
 81097c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81097c2:	e009      	b.n	81097d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81097c4:	2301      	movs	r3, #1
 81097c6:	75fb      	strb	r3, [r7, #23]
      break;
 81097c8:	e006      	b.n	81097d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81097ca:	bf00      	nop
 81097cc:	e004      	b.n	81097d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81097ce:	bf00      	nop
 81097d0:	e002      	b.n	81097d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81097d2:	bf00      	nop
 81097d4:	e000      	b.n	81097d8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81097d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81097d8:	7dfb      	ldrb	r3, [r7, #23]
 81097da:	2b00      	cmp	r3, #0
 81097dc:	d10a      	bne.n	81097f4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81097de:	4b3c      	ldr	r3, [pc, #240]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81097e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81097ec:	4938      	ldr	r1, [pc, #224]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097ee:	4313      	orrs	r3, r2
 81097f0:	658b      	str	r3, [r1, #88]	; 0x58
 81097f2:	e001      	b.n	81097f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81097f4:	7dfb      	ldrb	r3, [r7, #23]
 81097f6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	681b      	ldr	r3, [r3, #0]
 81097fc:	f003 0308 	and.w	r3, r3, #8
 8109800:	2b00      	cmp	r3, #0
 8109802:	d01a      	beq.n	810983a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8109804:	687b      	ldr	r3, [r7, #4]
 8109806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810980a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810980e:	d10a      	bne.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109810:	687b      	ldr	r3, [r7, #4]
 8109812:	3324      	adds	r3, #36	; 0x24
 8109814:	2102      	movs	r1, #2
 8109816:	4618      	mov	r0, r3
 8109818:	f000 fcfa 	bl	810a210 <RCCEx_PLL3_Config>
 810981c:	4603      	mov	r3, r0
 810981e:	2b00      	cmp	r3, #0
 8109820:	d001      	beq.n	8109826 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8109822:	2301      	movs	r3, #1
 8109824:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8109826:	4b2a      	ldr	r3, [pc, #168]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810982a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810982e:	687b      	ldr	r3, [r7, #4]
 8109830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109834:	4926      	ldr	r1, [pc, #152]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109836:	4313      	orrs	r3, r2
 8109838:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	681b      	ldr	r3, [r3, #0]
 810983e:	f003 0310 	and.w	r3, r3, #16
 8109842:	2b00      	cmp	r3, #0
 8109844:	d01a      	beq.n	810987c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8109846:	687b      	ldr	r3, [r7, #4]
 8109848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810984c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109850:	d10a      	bne.n	8109868 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109852:	687b      	ldr	r3, [r7, #4]
 8109854:	3324      	adds	r3, #36	; 0x24
 8109856:	2102      	movs	r1, #2
 8109858:	4618      	mov	r0, r3
 810985a:	f000 fcd9 	bl	810a210 <RCCEx_PLL3_Config>
 810985e:	4603      	mov	r3, r0
 8109860:	2b00      	cmp	r3, #0
 8109862:	d001      	beq.n	8109868 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8109864:	2301      	movs	r3, #1
 8109866:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8109868:	4b19      	ldr	r3, [pc, #100]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810986a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810986c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109876:	4916      	ldr	r1, [pc, #88]	; (81098d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109878:	4313      	orrs	r3, r2
 810987a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810987c:	687b      	ldr	r3, [r7, #4]
 810987e:	681b      	ldr	r3, [r3, #0]
 8109880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8109884:	2b00      	cmp	r3, #0
 8109886:	d036      	beq.n	81098f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8109888:	687b      	ldr	r3, [r7, #4]
 810988a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810988e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109892:	d01f      	beq.n	81098d4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8109894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109898:	d817      	bhi.n	81098ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810989a:	2b00      	cmp	r3, #0
 810989c:	d003      	beq.n	81098a6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810989e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81098a2:	d009      	beq.n	81098b8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81098a4:	e011      	b.n	81098ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81098a6:	687b      	ldr	r3, [r7, #4]
 81098a8:	3304      	adds	r3, #4
 81098aa:	2100      	movs	r1, #0
 81098ac:	4618      	mov	r0, r3
 81098ae:	f000 fbfd 	bl	810a0ac <RCCEx_PLL2_Config>
 81098b2:	4603      	mov	r3, r0
 81098b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81098b6:	e00e      	b.n	81098d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81098b8:	687b      	ldr	r3, [r7, #4]
 81098ba:	3324      	adds	r3, #36	; 0x24
 81098bc:	2102      	movs	r1, #2
 81098be:	4618      	mov	r0, r3
 81098c0:	f000 fca6 	bl	810a210 <RCCEx_PLL3_Config>
 81098c4:	4603      	mov	r3, r0
 81098c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81098c8:	e005      	b.n	81098d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81098ca:	2301      	movs	r3, #1
 81098cc:	75fb      	strb	r3, [r7, #23]
      break;
 81098ce:	e002      	b.n	81098d6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81098d0:	58024400 	.word	0x58024400
      break;
 81098d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81098d6:	7dfb      	ldrb	r3, [r7, #23]
 81098d8:	2b00      	cmp	r3, #0
 81098da:	d10a      	bne.n	81098f2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81098dc:	4b93      	ldr	r3, [pc, #588]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81098de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81098e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81098ea:	4990      	ldr	r1, [pc, #576]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81098ec:	4313      	orrs	r3, r2
 81098ee:	658b      	str	r3, [r1, #88]	; 0x58
 81098f0:	e001      	b.n	81098f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81098f2:	7dfb      	ldrb	r3, [r7, #23]
 81098f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81098f6:	687b      	ldr	r3, [r7, #4]
 81098f8:	681b      	ldr	r3, [r3, #0]
 81098fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81098fe:	2b00      	cmp	r3, #0
 8109900:	d033      	beq.n	810996a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8109902:	687b      	ldr	r3, [r7, #4]
 8109904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810990c:	d01c      	beq.n	8109948 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810990e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109912:	d816      	bhi.n	8109942 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8109914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109918:	d003      	beq.n	8109922 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810991a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810991e:	d007      	beq.n	8109930 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8109920:	e00f      	b.n	8109942 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109922:	4b82      	ldr	r3, [pc, #520]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109926:	4a81      	ldr	r2, [pc, #516]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810992c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810992e:	e00c      	b.n	810994a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109930:	687b      	ldr	r3, [r7, #4]
 8109932:	3324      	adds	r3, #36	; 0x24
 8109934:	2101      	movs	r1, #1
 8109936:	4618      	mov	r0, r3
 8109938:	f000 fc6a 	bl	810a210 <RCCEx_PLL3_Config>
 810993c:	4603      	mov	r3, r0
 810993e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8109940:	e003      	b.n	810994a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109942:	2301      	movs	r3, #1
 8109944:	75fb      	strb	r3, [r7, #23]
      break;
 8109946:	e000      	b.n	810994a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8109948:	bf00      	nop
    }

    if(ret == HAL_OK)
 810994a:	7dfb      	ldrb	r3, [r7, #23]
 810994c:	2b00      	cmp	r3, #0
 810994e:	d10a      	bne.n	8109966 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8109950:	4b76      	ldr	r3, [pc, #472]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109958:	687b      	ldr	r3, [r7, #4]
 810995a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810995e:	4973      	ldr	r1, [pc, #460]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109960:	4313      	orrs	r3, r2
 8109962:	654b      	str	r3, [r1, #84]	; 0x54
 8109964:	e001      	b.n	810996a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109966:	7dfb      	ldrb	r3, [r7, #23]
 8109968:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	681b      	ldr	r3, [r3, #0]
 810996e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109972:	2b00      	cmp	r3, #0
 8109974:	d029      	beq.n	81099ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8109976:	687b      	ldr	r3, [r7, #4]
 8109978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810997a:	2b00      	cmp	r3, #0
 810997c:	d003      	beq.n	8109986 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810997e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109982:	d007      	beq.n	8109994 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8109984:	e00f      	b.n	81099a6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109986:	4b69      	ldr	r3, [pc, #420]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810998a:	4a68      	ldr	r2, [pc, #416]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810998c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109992:	e00b      	b.n	81099ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	3304      	adds	r3, #4
 8109998:	2102      	movs	r1, #2
 810999a:	4618      	mov	r0, r3
 810999c:	f000 fb86 	bl	810a0ac <RCCEx_PLL2_Config>
 81099a0:	4603      	mov	r3, r0
 81099a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81099a4:	e002      	b.n	81099ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81099a6:	2301      	movs	r3, #1
 81099a8:	75fb      	strb	r3, [r7, #23]
      break;
 81099aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81099ac:	7dfb      	ldrb	r3, [r7, #23]
 81099ae:	2b00      	cmp	r3, #0
 81099b0:	d109      	bne.n	81099c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81099b2:	4b5e      	ldr	r3, [pc, #376]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81099b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81099be:	495b      	ldr	r1, [pc, #364]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099c0:	4313      	orrs	r3, r2
 81099c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81099c4:	e001      	b.n	81099ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81099c6:	7dfb      	ldrb	r3, [r7, #23]
 81099c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81099ca:	687b      	ldr	r3, [r7, #4]
 81099cc:	681b      	ldr	r3, [r3, #0]
 81099ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81099d2:	2b00      	cmp	r3, #0
 81099d4:	d00a      	beq.n	81099ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	3324      	adds	r3, #36	; 0x24
 81099da:	2102      	movs	r1, #2
 81099dc:	4618      	mov	r0, r3
 81099de:	f000 fc17 	bl	810a210 <RCCEx_PLL3_Config>
 81099e2:	4603      	mov	r3, r0
 81099e4:	2b00      	cmp	r3, #0
 81099e6:	d001      	beq.n	81099ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81099e8:	2301      	movs	r3, #1
 81099ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81099ec:	687b      	ldr	r3, [r7, #4]
 81099ee:	681b      	ldr	r3, [r3, #0]
 81099f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81099f4:	2b00      	cmp	r3, #0
 81099f6:	d030      	beq.n	8109a5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81099fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109a00:	d017      	beq.n	8109a32 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8109a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109a06:	d811      	bhi.n	8109a2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109a0c:	d013      	beq.n	8109a36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8109a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109a12:	d80b      	bhi.n	8109a2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109a14:	2b00      	cmp	r3, #0
 8109a16:	d010      	beq.n	8109a3a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109a1c:	d106      	bne.n	8109a2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109a1e:	4b43      	ldr	r3, [pc, #268]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109a22:	4a42      	ldr	r2, [pc, #264]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109a28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109a2a:	e007      	b.n	8109a3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109a2c:	2301      	movs	r3, #1
 8109a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8109a30:	e004      	b.n	8109a3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109a32:	bf00      	nop
 8109a34:	e002      	b.n	8109a3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109a36:	bf00      	nop
 8109a38:	e000      	b.n	8109a3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109a3c:	7dfb      	ldrb	r3, [r7, #23]
 8109a3e:	2b00      	cmp	r3, #0
 8109a40:	d109      	bne.n	8109a56 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8109a42:	4b3a      	ldr	r3, [pc, #232]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109a4e:	4937      	ldr	r1, [pc, #220]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a50:	4313      	orrs	r3, r2
 8109a52:	654b      	str	r3, [r1, #84]	; 0x54
 8109a54:	e001      	b.n	8109a5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109a56:	7dfb      	ldrb	r3, [r7, #23]
 8109a58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109a5a:	687b      	ldr	r3, [r7, #4]
 8109a5c:	681b      	ldr	r3, [r3, #0]
 8109a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109a62:	2b00      	cmp	r3, #0
 8109a64:	d008      	beq.n	8109a78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8109a66:	4b31      	ldr	r3, [pc, #196]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109a6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109a72:	492e      	ldr	r1, [pc, #184]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a74:	4313      	orrs	r3, r2
 8109a76:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	681b      	ldr	r3, [r3, #0]
 8109a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109a80:	2b00      	cmp	r3, #0
 8109a82:	d009      	beq.n	8109a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8109a84:	4b29      	ldr	r3, [pc, #164]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a86:	691b      	ldr	r3, [r3, #16]
 8109a88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109a8c:	687b      	ldr	r3, [r7, #4]
 8109a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8109a92:	4926      	ldr	r1, [pc, #152]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a94:	4313      	orrs	r3, r2
 8109a96:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	681b      	ldr	r3, [r3, #0]
 8109a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109aa0:	2b00      	cmp	r3, #0
 8109aa2:	d008      	beq.n	8109ab6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8109aa4:	4b21      	ldr	r3, [pc, #132]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109aa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109ab0:	491e      	ldr	r1, [pc, #120]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ab2:	4313      	orrs	r3, r2
 8109ab4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8109ab6:	687b      	ldr	r3, [r7, #4]
 8109ab8:	681b      	ldr	r3, [r3, #0]
 8109aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109abe:	2b00      	cmp	r3, #0
 8109ac0:	d00d      	beq.n	8109ade <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8109ac2:	4b1a      	ldr	r3, [pc, #104]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ac4:	691b      	ldr	r3, [r3, #16]
 8109ac6:	4a19      	ldr	r2, [pc, #100]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8109acc:	6113      	str	r3, [r2, #16]
 8109ace:	4b17      	ldr	r3, [pc, #92]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ad0:	691a      	ldr	r2, [r3, #16]
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8109ad8:	4914      	ldr	r1, [pc, #80]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ada:	4313      	orrs	r3, r2
 8109adc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8109ade:	687b      	ldr	r3, [r7, #4]
 8109ae0:	681b      	ldr	r3, [r3, #0]
 8109ae2:	2b00      	cmp	r3, #0
 8109ae4:	da08      	bge.n	8109af8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8109ae6:	4b11      	ldr	r3, [pc, #68]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8109aee:	687b      	ldr	r3, [r7, #4]
 8109af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109af2:	490e      	ldr	r1, [pc, #56]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109af4:	4313      	orrs	r3, r2
 8109af6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109b00:	2b00      	cmp	r3, #0
 8109b02:	d009      	beq.n	8109b18 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8109b04:	4b09      	ldr	r3, [pc, #36]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8109b0c:	687b      	ldr	r3, [r7, #4]
 8109b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109b12:	4906      	ldr	r1, [pc, #24]	; (8109b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b14:	4313      	orrs	r3, r2
 8109b16:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8109b18:	7dbb      	ldrb	r3, [r7, #22]
 8109b1a:	2b00      	cmp	r3, #0
 8109b1c:	d101      	bne.n	8109b22 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8109b1e:	2300      	movs	r3, #0
 8109b20:	e000      	b.n	8109b24 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8109b22:	2301      	movs	r3, #1
}
 8109b24:	4618      	mov	r0, r3
 8109b26:	3718      	adds	r7, #24
 8109b28:	46bd      	mov	sp, r7
 8109b2a:	bd80      	pop	{r7, pc}
 8109b2c:	58024400 	.word	0x58024400

08109b30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109b30:	b580      	push	{r7, lr}
 8109b32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8109b34:	f7ff f85e 	bl	8108bf4 <HAL_RCC_GetHCLKFreq>
 8109b38:	4602      	mov	r2, r0
 8109b3a:	4b06      	ldr	r3, [pc, #24]	; (8109b54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109b3c:	6a1b      	ldr	r3, [r3, #32]
 8109b3e:	091b      	lsrs	r3, r3, #4
 8109b40:	f003 0307 	and.w	r3, r3, #7
 8109b44:	4904      	ldr	r1, [pc, #16]	; (8109b58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8109b46:	5ccb      	ldrb	r3, [r1, r3]
 8109b48:	f003 031f 	and.w	r3, r3, #31
 8109b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109b50:	4618      	mov	r0, r3
 8109b52:	bd80      	pop	{r7, pc}
 8109b54:	58024400 	.word	0x58024400
 8109b58:	0810e4f4 	.word	0x0810e4f4

08109b5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8109b5c:	b480      	push	{r7}
 8109b5e:	b089      	sub	sp, #36	; 0x24
 8109b60:	af00      	add	r7, sp, #0
 8109b62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109b64:	4ba1      	ldr	r3, [pc, #644]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109b68:	f003 0303 	and.w	r3, r3, #3
 8109b6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8109b6e:	4b9f      	ldr	r3, [pc, #636]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109b72:	0b1b      	lsrs	r3, r3, #12
 8109b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109b78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109b7a:	4b9c      	ldr	r3, [pc, #624]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b7e:	091b      	lsrs	r3, r3, #4
 8109b80:	f003 0301 	and.w	r3, r3, #1
 8109b84:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8109b86:	4b99      	ldr	r3, [pc, #612]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b8a:	08db      	lsrs	r3, r3, #3
 8109b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109b90:	693a      	ldr	r2, [r7, #16]
 8109b92:	fb02 f303 	mul.w	r3, r2, r3
 8109b96:	ee07 3a90 	vmov	s15, r3
 8109b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109ba2:	697b      	ldr	r3, [r7, #20]
 8109ba4:	2b00      	cmp	r3, #0
 8109ba6:	f000 8111 	beq.w	8109dcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8109baa:	69bb      	ldr	r3, [r7, #24]
 8109bac:	2b02      	cmp	r3, #2
 8109bae:	f000 8083 	beq.w	8109cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109bb2:	69bb      	ldr	r3, [r7, #24]
 8109bb4:	2b02      	cmp	r3, #2
 8109bb6:	f200 80a1 	bhi.w	8109cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8109bba:	69bb      	ldr	r3, [r7, #24]
 8109bbc:	2b00      	cmp	r3, #0
 8109bbe:	d003      	beq.n	8109bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109bc0:	69bb      	ldr	r3, [r7, #24]
 8109bc2:	2b01      	cmp	r3, #1
 8109bc4:	d056      	beq.n	8109c74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8109bc6:	e099      	b.n	8109cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109bc8:	4b88      	ldr	r3, [pc, #544]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109bca:	681b      	ldr	r3, [r3, #0]
 8109bcc:	f003 0320 	and.w	r3, r3, #32
 8109bd0:	2b00      	cmp	r3, #0
 8109bd2:	d02d      	beq.n	8109c30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109bd4:	4b85      	ldr	r3, [pc, #532]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109bd6:	681b      	ldr	r3, [r3, #0]
 8109bd8:	08db      	lsrs	r3, r3, #3
 8109bda:	f003 0303 	and.w	r3, r3, #3
 8109bde:	4a84      	ldr	r2, [pc, #528]	; (8109df0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109be0:	fa22 f303 	lsr.w	r3, r2, r3
 8109be4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109be6:	68bb      	ldr	r3, [r7, #8]
 8109be8:	ee07 3a90 	vmov	s15, r3
 8109bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109bf0:	697b      	ldr	r3, [r7, #20]
 8109bf2:	ee07 3a90 	vmov	s15, r3
 8109bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109bfe:	4b7b      	ldr	r3, [pc, #492]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109c06:	ee07 3a90 	vmov	s15, r3
 8109c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109c12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109c2e:	e087      	b.n	8109d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109c30:	697b      	ldr	r3, [r7, #20]
 8109c32:	ee07 3a90 	vmov	s15, r3
 8109c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109c3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109df8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109c42:	4b6a      	ldr	r3, [pc, #424]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109c4a:	ee07 3a90 	vmov	s15, r3
 8109c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8109c56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109c72:	e065      	b.n	8109d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109c74:	697b      	ldr	r3, [r7, #20]
 8109c76:	ee07 3a90 	vmov	s15, r3
 8109c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109c7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109c86:	4b59      	ldr	r3, [pc, #356]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109c8e:	ee07 3a90 	vmov	s15, r3
 8109c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8109c9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109cb6:	e043      	b.n	8109d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109cb8:	697b      	ldr	r3, [r7, #20]
 8109cba:	ee07 3a90 	vmov	s15, r3
 8109cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8109cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109cca:	4b48      	ldr	r3, [pc, #288]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109cd2:	ee07 3a90 	vmov	s15, r3
 8109cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8109cde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109cfa:	e021      	b.n	8109d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109cfc:	697b      	ldr	r3, [r7, #20]
 8109cfe:	ee07 3a90 	vmov	s15, r3
 8109d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109d06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109d0e:	4b37      	ldr	r3, [pc, #220]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109d16:	ee07 3a90 	vmov	s15, r3
 8109d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109d22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109d3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8109d40:	4b2a      	ldr	r3, [pc, #168]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d44:	0a5b      	lsrs	r3, r3, #9
 8109d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109d4a:	ee07 3a90 	vmov	s15, r3
 8109d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8109d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109d66:	ee17 2a90 	vmov	r2, s15
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8109d6e:	4b1f      	ldr	r3, [pc, #124]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d72:	0c1b      	lsrs	r3, r3, #16
 8109d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109d78:	ee07 3a90 	vmov	s15, r3
 8109d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8109d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109d94:	ee17 2a90 	vmov	r2, s15
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8109d9c:	4b13      	ldr	r3, [pc, #76]	; (8109dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109da0:	0e1b      	lsrs	r3, r3, #24
 8109da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109da6:	ee07 3a90 	vmov	s15, r3
 8109daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8109dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109dc2:	ee17 2a90 	vmov	r2, s15
 8109dc6:	687b      	ldr	r3, [r7, #4]
 8109dc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8109dca:	e008      	b.n	8109dde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	2200      	movs	r2, #0
 8109dd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8109dd2:	687b      	ldr	r3, [r7, #4]
 8109dd4:	2200      	movs	r2, #0
 8109dd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8109dd8:	687b      	ldr	r3, [r7, #4]
 8109dda:	2200      	movs	r2, #0
 8109ddc:	609a      	str	r2, [r3, #8]
}
 8109dde:	bf00      	nop
 8109de0:	3724      	adds	r7, #36	; 0x24
 8109de2:	46bd      	mov	sp, r7
 8109de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109de8:	4770      	bx	lr
 8109dea:	bf00      	nop
 8109dec:	58024400 	.word	0x58024400
 8109df0:	03d09000 	.word	0x03d09000
 8109df4:	46000000 	.word	0x46000000
 8109df8:	4c742400 	.word	0x4c742400
 8109dfc:	4a742400 	.word	0x4a742400
 8109e00:	4b742400 	.word	0x4b742400

08109e04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8109e04:	b480      	push	{r7}
 8109e06:	b089      	sub	sp, #36	; 0x24
 8109e08:	af00      	add	r7, sp, #0
 8109e0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109e0c:	4ba1      	ldr	r3, [pc, #644]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e10:	f003 0303 	and.w	r3, r3, #3
 8109e14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8109e16:	4b9f      	ldr	r3, [pc, #636]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109e1a:	0d1b      	lsrs	r3, r3, #20
 8109e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109e20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8109e22:	4b9c      	ldr	r3, [pc, #624]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e26:	0a1b      	lsrs	r3, r3, #8
 8109e28:	f003 0301 	and.w	r3, r3, #1
 8109e2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8109e2e:	4b99      	ldr	r3, [pc, #612]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109e32:	08db      	lsrs	r3, r3, #3
 8109e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109e38:	693a      	ldr	r2, [r7, #16]
 8109e3a:	fb02 f303 	mul.w	r3, r2, r3
 8109e3e:	ee07 3a90 	vmov	s15, r3
 8109e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109e4a:	697b      	ldr	r3, [r7, #20]
 8109e4c:	2b00      	cmp	r3, #0
 8109e4e:	f000 8111 	beq.w	810a074 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8109e52:	69bb      	ldr	r3, [r7, #24]
 8109e54:	2b02      	cmp	r3, #2
 8109e56:	f000 8083 	beq.w	8109f60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109e5a:	69bb      	ldr	r3, [r7, #24]
 8109e5c:	2b02      	cmp	r3, #2
 8109e5e:	f200 80a1 	bhi.w	8109fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8109e62:	69bb      	ldr	r3, [r7, #24]
 8109e64:	2b00      	cmp	r3, #0
 8109e66:	d003      	beq.n	8109e70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109e68:	69bb      	ldr	r3, [r7, #24]
 8109e6a:	2b01      	cmp	r3, #1
 8109e6c:	d056      	beq.n	8109f1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109e6e:	e099      	b.n	8109fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109e70:	4b88      	ldr	r3, [pc, #544]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e72:	681b      	ldr	r3, [r3, #0]
 8109e74:	f003 0320 	and.w	r3, r3, #32
 8109e78:	2b00      	cmp	r3, #0
 8109e7a:	d02d      	beq.n	8109ed8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109e7c:	4b85      	ldr	r3, [pc, #532]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	08db      	lsrs	r3, r3, #3
 8109e82:	f003 0303 	and.w	r3, r3, #3
 8109e86:	4a84      	ldr	r2, [pc, #528]	; (810a098 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109e88:	fa22 f303 	lsr.w	r3, r2, r3
 8109e8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109e8e:	68bb      	ldr	r3, [r7, #8]
 8109e90:	ee07 3a90 	vmov	s15, r3
 8109e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109e98:	697b      	ldr	r3, [r7, #20]
 8109e9a:	ee07 3a90 	vmov	s15, r3
 8109e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109ea6:	4b7b      	ldr	r3, [pc, #492]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109eae:	ee07 3a90 	vmov	s15, r3
 8109eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8109eba:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109ed6:	e087      	b.n	8109fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109ed8:	697b      	ldr	r3, [r7, #20]
 8109eda:	ee07 3a90 	vmov	s15, r3
 8109ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ee2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8109ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109eea:	4b6a      	ldr	r3, [pc, #424]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109ef2:	ee07 3a90 	vmov	s15, r3
 8109ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8109efe:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109f1a:	e065      	b.n	8109fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109f1c:	697b      	ldr	r3, [r7, #20]
 8109f1e:	ee07 3a90 	vmov	s15, r3
 8109f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f2e:	4b59      	ldr	r3, [pc, #356]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f36:	ee07 3a90 	vmov	s15, r3
 8109f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109f42:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109f5e:	e043      	b.n	8109fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109f60:	697b      	ldr	r3, [r7, #20]
 8109f62:	ee07 3a90 	vmov	s15, r3
 8109f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8109f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f72:	4b48      	ldr	r3, [pc, #288]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f7a:	ee07 3a90 	vmov	s15, r3
 8109f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8109f86:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109fa2:	e021      	b.n	8109fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109fa4:	697b      	ldr	r3, [r7, #20]
 8109fa6:	ee07 3a90 	vmov	s15, r3
 8109faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109fb6:	4b37      	ldr	r3, [pc, #220]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109fbe:	ee07 3a90 	vmov	s15, r3
 8109fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8109fca:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109fe6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8109fe8:	4b2a      	ldr	r3, [pc, #168]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109fec:	0a5b      	lsrs	r3, r3, #9
 8109fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109ff2:	ee07 3a90 	vmov	s15, r3
 8109ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a002:	edd7 6a07 	vldr	s13, [r7, #28]
 810a006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a00e:	ee17 2a90 	vmov	r2, s15
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810a016:	4b1f      	ldr	r3, [pc, #124]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a01a:	0c1b      	lsrs	r3, r3, #16
 810a01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a020:	ee07 3a90 	vmov	s15, r3
 810a024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a030:	edd7 6a07 	vldr	s13, [r7, #28]
 810a034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a03c:	ee17 2a90 	vmov	r2, s15
 810a040:	687b      	ldr	r3, [r7, #4]
 810a042:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810a044:	4b13      	ldr	r3, [pc, #76]	; (810a094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a048:	0e1b      	lsrs	r3, r3, #24
 810a04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a04e:	ee07 3a90 	vmov	s15, r3
 810a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a05e:	edd7 6a07 	vldr	s13, [r7, #28]
 810a062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a06a:	ee17 2a90 	vmov	r2, s15
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a072:	e008      	b.n	810a086 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a074:	687b      	ldr	r3, [r7, #4]
 810a076:	2200      	movs	r2, #0
 810a078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a07a:	687b      	ldr	r3, [r7, #4]
 810a07c:	2200      	movs	r2, #0
 810a07e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a080:	687b      	ldr	r3, [r7, #4]
 810a082:	2200      	movs	r2, #0
 810a084:	609a      	str	r2, [r3, #8]
}
 810a086:	bf00      	nop
 810a088:	3724      	adds	r7, #36	; 0x24
 810a08a:	46bd      	mov	sp, r7
 810a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a090:	4770      	bx	lr
 810a092:	bf00      	nop
 810a094:	58024400 	.word	0x58024400
 810a098:	03d09000 	.word	0x03d09000
 810a09c:	46000000 	.word	0x46000000
 810a0a0:	4c742400 	.word	0x4c742400
 810a0a4:	4a742400 	.word	0x4a742400
 810a0a8:	4b742400 	.word	0x4b742400

0810a0ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a0ac:	b580      	push	{r7, lr}
 810a0ae:	b084      	sub	sp, #16
 810a0b0:	af00      	add	r7, sp, #0
 810a0b2:	6078      	str	r0, [r7, #4]
 810a0b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a0b6:	2300      	movs	r3, #0
 810a0b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a0ba:	4b54      	ldr	r3, [pc, #336]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a0be:	f003 0303 	and.w	r3, r3, #3
 810a0c2:	2b03      	cmp	r3, #3
 810a0c4:	d101      	bne.n	810a0ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a0c6:	2301      	movs	r3, #1
 810a0c8:	e09b      	b.n	810a202 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a0ca:	4b50      	ldr	r3, [pc, #320]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	4a4f      	ldr	r2, [pc, #316]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a0d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810a0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a0d6:	f7f9 fb21 	bl	810371c <HAL_GetTick>
 810a0da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a0dc:	e008      	b.n	810a0f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a0de:	f7f9 fb1d 	bl	810371c <HAL_GetTick>
 810a0e2:	4602      	mov	r2, r0
 810a0e4:	68bb      	ldr	r3, [r7, #8]
 810a0e6:	1ad3      	subs	r3, r2, r3
 810a0e8:	2b02      	cmp	r3, #2
 810a0ea:	d901      	bls.n	810a0f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a0ec:	2303      	movs	r3, #3
 810a0ee:	e088      	b.n	810a202 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a0f0:	4b46      	ldr	r3, [pc, #280]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a0f2:	681b      	ldr	r3, [r3, #0]
 810a0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a0f8:	2b00      	cmp	r3, #0
 810a0fa:	d1f0      	bne.n	810a0de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a0fc:	4b43      	ldr	r3, [pc, #268]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a100:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810a104:	687b      	ldr	r3, [r7, #4]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	031b      	lsls	r3, r3, #12
 810a10a:	4940      	ldr	r1, [pc, #256]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a10c:	4313      	orrs	r3, r2
 810a10e:	628b      	str	r3, [r1, #40]	; 0x28
 810a110:	687b      	ldr	r3, [r7, #4]
 810a112:	685b      	ldr	r3, [r3, #4]
 810a114:	3b01      	subs	r3, #1
 810a116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a11a:	687b      	ldr	r3, [r7, #4]
 810a11c:	689b      	ldr	r3, [r3, #8]
 810a11e:	3b01      	subs	r3, #1
 810a120:	025b      	lsls	r3, r3, #9
 810a122:	b29b      	uxth	r3, r3
 810a124:	431a      	orrs	r2, r3
 810a126:	687b      	ldr	r3, [r7, #4]
 810a128:	68db      	ldr	r3, [r3, #12]
 810a12a:	3b01      	subs	r3, #1
 810a12c:	041b      	lsls	r3, r3, #16
 810a12e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a132:	431a      	orrs	r2, r3
 810a134:	687b      	ldr	r3, [r7, #4]
 810a136:	691b      	ldr	r3, [r3, #16]
 810a138:	3b01      	subs	r3, #1
 810a13a:	061b      	lsls	r3, r3, #24
 810a13c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a140:	4932      	ldr	r1, [pc, #200]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a142:	4313      	orrs	r3, r2
 810a144:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a146:	4b31      	ldr	r3, [pc, #196]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a14a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810a14e:	687b      	ldr	r3, [r7, #4]
 810a150:	695b      	ldr	r3, [r3, #20]
 810a152:	492e      	ldr	r1, [pc, #184]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a154:	4313      	orrs	r3, r2
 810a156:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a158:	4b2c      	ldr	r3, [pc, #176]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a15c:	f023 0220 	bic.w	r2, r3, #32
 810a160:	687b      	ldr	r3, [r7, #4]
 810a162:	699b      	ldr	r3, [r3, #24]
 810a164:	4929      	ldr	r1, [pc, #164]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a166:	4313      	orrs	r3, r2
 810a168:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a16a:	4b28      	ldr	r3, [pc, #160]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a16e:	4a27      	ldr	r2, [pc, #156]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a170:	f023 0310 	bic.w	r3, r3, #16
 810a174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a176:	4b25      	ldr	r3, [pc, #148]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a17a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a17e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a182:	687a      	ldr	r2, [r7, #4]
 810a184:	69d2      	ldr	r2, [r2, #28]
 810a186:	00d2      	lsls	r2, r2, #3
 810a188:	4920      	ldr	r1, [pc, #128]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a18a:	4313      	orrs	r3, r2
 810a18c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a18e:	4b1f      	ldr	r3, [pc, #124]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a192:	4a1e      	ldr	r2, [pc, #120]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a194:	f043 0310 	orr.w	r3, r3, #16
 810a198:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a19a:	683b      	ldr	r3, [r7, #0]
 810a19c:	2b00      	cmp	r3, #0
 810a19e:	d106      	bne.n	810a1ae <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a1a0:	4b1a      	ldr	r3, [pc, #104]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1a4:	4a19      	ldr	r2, [pc, #100]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810a1aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a1ac:	e00f      	b.n	810a1ce <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a1ae:	683b      	ldr	r3, [r7, #0]
 810a1b0:	2b01      	cmp	r3, #1
 810a1b2:	d106      	bne.n	810a1c2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a1b4:	4b15      	ldr	r3, [pc, #84]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1b8:	4a14      	ldr	r2, [pc, #80]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a1be:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a1c0:	e005      	b.n	810a1ce <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a1c2:	4b12      	ldr	r3, [pc, #72]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a1c6:	4a11      	ldr	r2, [pc, #68]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810a1cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a1ce:	4b0f      	ldr	r3, [pc, #60]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	4a0e      	ldr	r2, [pc, #56]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810a1d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a1da:	f7f9 fa9f 	bl	810371c <HAL_GetTick>
 810a1de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a1e0:	e008      	b.n	810a1f4 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a1e2:	f7f9 fa9b 	bl	810371c <HAL_GetTick>
 810a1e6:	4602      	mov	r2, r0
 810a1e8:	68bb      	ldr	r3, [r7, #8]
 810a1ea:	1ad3      	subs	r3, r2, r3
 810a1ec:	2b02      	cmp	r3, #2
 810a1ee:	d901      	bls.n	810a1f4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a1f0:	2303      	movs	r3, #3
 810a1f2:	e006      	b.n	810a202 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a1f4:	4b05      	ldr	r3, [pc, #20]	; (810a20c <RCCEx_PLL2_Config+0x160>)
 810a1f6:	681b      	ldr	r3, [r3, #0]
 810a1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a1fc:	2b00      	cmp	r3, #0
 810a1fe:	d0f0      	beq.n	810a1e2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a200:	7bfb      	ldrb	r3, [r7, #15]
}
 810a202:	4618      	mov	r0, r3
 810a204:	3710      	adds	r7, #16
 810a206:	46bd      	mov	sp, r7
 810a208:	bd80      	pop	{r7, pc}
 810a20a:	bf00      	nop
 810a20c:	58024400 	.word	0x58024400

0810a210 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a210:	b580      	push	{r7, lr}
 810a212:	b084      	sub	sp, #16
 810a214:	af00      	add	r7, sp, #0
 810a216:	6078      	str	r0, [r7, #4]
 810a218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a21a:	2300      	movs	r3, #0
 810a21c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a21e:	4b54      	ldr	r3, [pc, #336]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a222:	f003 0303 	and.w	r3, r3, #3
 810a226:	2b03      	cmp	r3, #3
 810a228:	d101      	bne.n	810a22e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a22a:	2301      	movs	r3, #1
 810a22c:	e09b      	b.n	810a366 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a22e:	4b50      	ldr	r3, [pc, #320]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a230:	681b      	ldr	r3, [r3, #0]
 810a232:	4a4f      	ldr	r2, [pc, #316]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a23a:	f7f9 fa6f 	bl	810371c <HAL_GetTick>
 810a23e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a240:	e008      	b.n	810a254 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a242:	f7f9 fa6b 	bl	810371c <HAL_GetTick>
 810a246:	4602      	mov	r2, r0
 810a248:	68bb      	ldr	r3, [r7, #8]
 810a24a:	1ad3      	subs	r3, r2, r3
 810a24c:	2b02      	cmp	r3, #2
 810a24e:	d901      	bls.n	810a254 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a250:	2303      	movs	r3, #3
 810a252:	e088      	b.n	810a366 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a254:	4b46      	ldr	r3, [pc, #280]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a256:	681b      	ldr	r3, [r3, #0]
 810a258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a25c:	2b00      	cmp	r3, #0
 810a25e:	d1f0      	bne.n	810a242 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a260:	4b43      	ldr	r3, [pc, #268]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a264:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810a268:	687b      	ldr	r3, [r7, #4]
 810a26a:	681b      	ldr	r3, [r3, #0]
 810a26c:	051b      	lsls	r3, r3, #20
 810a26e:	4940      	ldr	r1, [pc, #256]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a270:	4313      	orrs	r3, r2
 810a272:	628b      	str	r3, [r1, #40]	; 0x28
 810a274:	687b      	ldr	r3, [r7, #4]
 810a276:	685b      	ldr	r3, [r3, #4]
 810a278:	3b01      	subs	r3, #1
 810a27a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	689b      	ldr	r3, [r3, #8]
 810a282:	3b01      	subs	r3, #1
 810a284:	025b      	lsls	r3, r3, #9
 810a286:	b29b      	uxth	r3, r3
 810a288:	431a      	orrs	r2, r3
 810a28a:	687b      	ldr	r3, [r7, #4]
 810a28c:	68db      	ldr	r3, [r3, #12]
 810a28e:	3b01      	subs	r3, #1
 810a290:	041b      	lsls	r3, r3, #16
 810a292:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a296:	431a      	orrs	r2, r3
 810a298:	687b      	ldr	r3, [r7, #4]
 810a29a:	691b      	ldr	r3, [r3, #16]
 810a29c:	3b01      	subs	r3, #1
 810a29e:	061b      	lsls	r3, r3, #24
 810a2a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a2a4:	4932      	ldr	r1, [pc, #200]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2a6:	4313      	orrs	r3, r2
 810a2a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a2aa:	4b31      	ldr	r3, [pc, #196]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810a2b2:	687b      	ldr	r3, [r7, #4]
 810a2b4:	695b      	ldr	r3, [r3, #20]
 810a2b6:	492e      	ldr	r1, [pc, #184]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2b8:	4313      	orrs	r3, r2
 810a2ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a2bc:	4b2c      	ldr	r3, [pc, #176]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810a2c4:	687b      	ldr	r3, [r7, #4]
 810a2c6:	699b      	ldr	r3, [r3, #24]
 810a2c8:	4929      	ldr	r1, [pc, #164]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2ca:	4313      	orrs	r3, r2
 810a2cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a2ce:	4b28      	ldr	r3, [pc, #160]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2d2:	4a27      	ldr	r2, [pc, #156]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a2da:	4b25      	ldr	r3, [pc, #148]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a2de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a2e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a2e6:	687a      	ldr	r2, [r7, #4]
 810a2e8:	69d2      	ldr	r2, [r2, #28]
 810a2ea:	00d2      	lsls	r2, r2, #3
 810a2ec:	4920      	ldr	r1, [pc, #128]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2ee:	4313      	orrs	r3, r2
 810a2f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a2f2:	4b1f      	ldr	r3, [pc, #124]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2f6:	4a1e      	ldr	r2, [pc, #120]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a2f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a2fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a2fe:	683b      	ldr	r3, [r7, #0]
 810a300:	2b00      	cmp	r3, #0
 810a302:	d106      	bne.n	810a312 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a304:	4b1a      	ldr	r3, [pc, #104]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a308:	4a19      	ldr	r2, [pc, #100]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a30a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810a30e:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a310:	e00f      	b.n	810a332 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a312:	683b      	ldr	r3, [r7, #0]
 810a314:	2b01      	cmp	r3, #1
 810a316:	d106      	bne.n	810a326 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a318:	4b15      	ldr	r3, [pc, #84]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a31c:	4a14      	ldr	r2, [pc, #80]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a31e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810a322:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a324:	e005      	b.n	810a332 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a326:	4b12      	ldr	r3, [pc, #72]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a32a:	4a11      	ldr	r2, [pc, #68]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a32c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810a330:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a332:	4b0f      	ldr	r3, [pc, #60]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a334:	681b      	ldr	r3, [r3, #0]
 810a336:	4a0e      	ldr	r2, [pc, #56]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810a33c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a33e:	f7f9 f9ed 	bl	810371c <HAL_GetTick>
 810a342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a344:	e008      	b.n	810a358 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a346:	f7f9 f9e9 	bl	810371c <HAL_GetTick>
 810a34a:	4602      	mov	r2, r0
 810a34c:	68bb      	ldr	r3, [r7, #8]
 810a34e:	1ad3      	subs	r3, r2, r3
 810a350:	2b02      	cmp	r3, #2
 810a352:	d901      	bls.n	810a358 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a354:	2303      	movs	r3, #3
 810a356:	e006      	b.n	810a366 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a358:	4b05      	ldr	r3, [pc, #20]	; (810a370 <RCCEx_PLL3_Config+0x160>)
 810a35a:	681b      	ldr	r3, [r3, #0]
 810a35c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a360:	2b00      	cmp	r3, #0
 810a362:	d0f0      	beq.n	810a346 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a364:	7bfb      	ldrb	r3, [r7, #15]
}
 810a366:	4618      	mov	r0, r3
 810a368:	3710      	adds	r7, #16
 810a36a:	46bd      	mov	sp, r7
 810a36c:	bd80      	pop	{r7, pc}
 810a36e:	bf00      	nop
 810a370:	58024400 	.word	0x58024400

0810a374 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a374:	b580      	push	{r7, lr}
 810a376:	b084      	sub	sp, #16
 810a378:	af00      	add	r7, sp, #0
 810a37a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810a37c:	2300      	movs	r3, #0
 810a37e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	2b00      	cmp	r3, #0
 810a384:	d101      	bne.n	810a38a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810a386:	2301      	movs	r3, #1
 810a388:	e0eb      	b.n	810a562 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a38a:	687b      	ldr	r3, [r7, #4]
 810a38c:	2200      	movs	r2, #0
 810a38e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a390:	687b      	ldr	r3, [r7, #4]
 810a392:	681b      	ldr	r3, [r3, #0]
 810a394:	4a75      	ldr	r2, [pc, #468]	; (810a56c <HAL_SPI_Init+0x1f8>)
 810a396:	4293      	cmp	r3, r2
 810a398:	d00f      	beq.n	810a3ba <HAL_SPI_Init+0x46>
 810a39a:	687b      	ldr	r3, [r7, #4]
 810a39c:	681b      	ldr	r3, [r3, #0]
 810a39e:	4a74      	ldr	r2, [pc, #464]	; (810a570 <HAL_SPI_Init+0x1fc>)
 810a3a0:	4293      	cmp	r3, r2
 810a3a2:	d00a      	beq.n	810a3ba <HAL_SPI_Init+0x46>
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	681b      	ldr	r3, [r3, #0]
 810a3a8:	4a72      	ldr	r2, [pc, #456]	; (810a574 <HAL_SPI_Init+0x200>)
 810a3aa:	4293      	cmp	r3, r2
 810a3ac:	d005      	beq.n	810a3ba <HAL_SPI_Init+0x46>
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	68db      	ldr	r3, [r3, #12]
 810a3b2:	2b0f      	cmp	r3, #15
 810a3b4:	d901      	bls.n	810a3ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810a3b6:	2301      	movs	r3, #1
 810a3b8:	e0d3      	b.n	810a562 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a3ba:	6878      	ldr	r0, [r7, #4]
 810a3bc:	f001 fa94 	bl	810b8e8 <SPI_GetPacketSize>
 810a3c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a3c2:	687b      	ldr	r3, [r7, #4]
 810a3c4:	681b      	ldr	r3, [r3, #0]
 810a3c6:	4a69      	ldr	r2, [pc, #420]	; (810a56c <HAL_SPI_Init+0x1f8>)
 810a3c8:	4293      	cmp	r3, r2
 810a3ca:	d00c      	beq.n	810a3e6 <HAL_SPI_Init+0x72>
 810a3cc:	687b      	ldr	r3, [r7, #4]
 810a3ce:	681b      	ldr	r3, [r3, #0]
 810a3d0:	4a67      	ldr	r2, [pc, #412]	; (810a570 <HAL_SPI_Init+0x1fc>)
 810a3d2:	4293      	cmp	r3, r2
 810a3d4:	d007      	beq.n	810a3e6 <HAL_SPI_Init+0x72>
 810a3d6:	687b      	ldr	r3, [r7, #4]
 810a3d8:	681b      	ldr	r3, [r3, #0]
 810a3da:	4a66      	ldr	r2, [pc, #408]	; (810a574 <HAL_SPI_Init+0x200>)
 810a3dc:	4293      	cmp	r3, r2
 810a3de:	d002      	beq.n	810a3e6 <HAL_SPI_Init+0x72>
 810a3e0:	68bb      	ldr	r3, [r7, #8]
 810a3e2:	2b08      	cmp	r3, #8
 810a3e4:	d811      	bhi.n	810a40a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a3e6:	687b      	ldr	r3, [r7, #4]
 810a3e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a3ea:	4a60      	ldr	r2, [pc, #384]	; (810a56c <HAL_SPI_Init+0x1f8>)
 810a3ec:	4293      	cmp	r3, r2
 810a3ee:	d009      	beq.n	810a404 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	681b      	ldr	r3, [r3, #0]
 810a3f4:	4a5e      	ldr	r2, [pc, #376]	; (810a570 <HAL_SPI_Init+0x1fc>)
 810a3f6:	4293      	cmp	r3, r2
 810a3f8:	d004      	beq.n	810a404 <HAL_SPI_Init+0x90>
 810a3fa:	687b      	ldr	r3, [r7, #4]
 810a3fc:	681b      	ldr	r3, [r3, #0]
 810a3fe:	4a5d      	ldr	r2, [pc, #372]	; (810a574 <HAL_SPI_Init+0x200>)
 810a400:	4293      	cmp	r3, r2
 810a402:	d104      	bne.n	810a40e <HAL_SPI_Init+0x9a>
 810a404:	68bb      	ldr	r3, [r7, #8]
 810a406:	2b10      	cmp	r3, #16
 810a408:	d901      	bls.n	810a40e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810a40a:	2301      	movs	r3, #1
 810a40c:	e0a9      	b.n	810a562 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a40e:	687b      	ldr	r3, [r7, #4]
 810a410:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a414:	b2db      	uxtb	r3, r3
 810a416:	2b00      	cmp	r3, #0
 810a418:	d106      	bne.n	810a428 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a41a:	687b      	ldr	r3, [r7, #4]
 810a41c:	2200      	movs	r2, #0
 810a41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a422:	6878      	ldr	r0, [r7, #4]
 810a424:	f7f8 fc2e 	bl	8102c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a428:	687b      	ldr	r3, [r7, #4]
 810a42a:	2202      	movs	r2, #2
 810a42c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a430:	687b      	ldr	r3, [r7, #4]
 810a432:	681b      	ldr	r3, [r3, #0]
 810a434:	681a      	ldr	r2, [r3, #0]
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	681b      	ldr	r3, [r3, #0]
 810a43a:	f022 0201 	bic.w	r2, r2, #1
 810a43e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	699b      	ldr	r3, [r3, #24]
 810a444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a448:	d119      	bne.n	810a47e <HAL_SPI_Init+0x10a>
 810a44a:	687b      	ldr	r3, [r7, #4]
 810a44c:	685b      	ldr	r3, [r3, #4]
 810a44e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a452:	d103      	bne.n	810a45c <HAL_SPI_Init+0xe8>
 810a454:	687b      	ldr	r3, [r7, #4]
 810a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a458:	2b00      	cmp	r3, #0
 810a45a:	d008      	beq.n	810a46e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a45c:	687b      	ldr	r3, [r7, #4]
 810a45e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a460:	2b00      	cmp	r3, #0
 810a462:	d10c      	bne.n	810a47e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a464:	687b      	ldr	r3, [r7, #4]
 810a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a46c:	d107      	bne.n	810a47e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810a46e:	687b      	ldr	r3, [r7, #4]
 810a470:	681b      	ldr	r3, [r3, #0]
 810a472:	681a      	ldr	r2, [r3, #0]
 810a474:	687b      	ldr	r3, [r7, #4]
 810a476:	681b      	ldr	r3, [r3, #0]
 810a478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810a47c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810a47e:	687b      	ldr	r3, [r7, #4]
 810a480:	69da      	ldr	r2, [r3, #28]
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a486:	431a      	orrs	r2, r3
 810a488:	68fb      	ldr	r3, [r7, #12]
 810a48a:	431a      	orrs	r2, r3
 810a48c:	687b      	ldr	r3, [r7, #4]
 810a48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a490:	ea42 0103 	orr.w	r1, r2, r3
 810a494:	687b      	ldr	r3, [r7, #4]
 810a496:	68da      	ldr	r2, [r3, #12]
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	681b      	ldr	r3, [r3, #0]
 810a49c:	430a      	orrs	r2, r1
 810a49e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810a4a0:	687b      	ldr	r3, [r7, #4]
 810a4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a4a4:	687b      	ldr	r3, [r7, #4]
 810a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a4a8:	431a      	orrs	r2, r3
 810a4aa:	687b      	ldr	r3, [r7, #4]
 810a4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a4ae:	431a      	orrs	r2, r3
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	699b      	ldr	r3, [r3, #24]
 810a4b4:	431a      	orrs	r2, r3
 810a4b6:	687b      	ldr	r3, [r7, #4]
 810a4b8:	691b      	ldr	r3, [r3, #16]
 810a4ba:	431a      	orrs	r2, r3
 810a4bc:	687b      	ldr	r3, [r7, #4]
 810a4be:	695b      	ldr	r3, [r3, #20]
 810a4c0:	431a      	orrs	r2, r3
 810a4c2:	687b      	ldr	r3, [r7, #4]
 810a4c4:	6a1b      	ldr	r3, [r3, #32]
 810a4c6:	431a      	orrs	r2, r3
 810a4c8:	687b      	ldr	r3, [r7, #4]
 810a4ca:	685b      	ldr	r3, [r3, #4]
 810a4cc:	431a      	orrs	r2, r3
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a4d2:	431a      	orrs	r2, r3
 810a4d4:	687b      	ldr	r3, [r7, #4]
 810a4d6:	689b      	ldr	r3, [r3, #8]
 810a4d8:	431a      	orrs	r2, r3
 810a4da:	687b      	ldr	r3, [r7, #4]
 810a4dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a4de:	ea42 0103 	orr.w	r1, r2, r3
 810a4e2:	687b      	ldr	r3, [r7, #4]
 810a4e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810a4e6:	687b      	ldr	r3, [r7, #4]
 810a4e8:	681b      	ldr	r3, [r3, #0]
 810a4ea:	430a      	orrs	r2, r1
 810a4ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810a4ee:	687b      	ldr	r3, [r7, #4]
 810a4f0:	685b      	ldr	r3, [r3, #4]
 810a4f2:	2b00      	cmp	r3, #0
 810a4f4:	d113      	bne.n	810a51e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810a4f6:	687b      	ldr	r3, [r7, #4]
 810a4f8:	681b      	ldr	r3, [r3, #0]
 810a4fa:	689b      	ldr	r3, [r3, #8]
 810a4fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810a500:	687b      	ldr	r3, [r7, #4]
 810a502:	681b      	ldr	r3, [r3, #0]
 810a504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a508:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810a50a:	687b      	ldr	r3, [r7, #4]
 810a50c:	681b      	ldr	r3, [r3, #0]
 810a50e:	689b      	ldr	r3, [r3, #8]
 810a510:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810a514:	687b      	ldr	r3, [r7, #4]
 810a516:	681b      	ldr	r3, [r3, #0]
 810a518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810a51c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810a51e:	687b      	ldr	r3, [r7, #4]
 810a520:	681b      	ldr	r3, [r3, #0]
 810a522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810a524:	687b      	ldr	r3, [r7, #4]
 810a526:	681b      	ldr	r3, [r3, #0]
 810a528:	f022 0201 	bic.w	r2, r2, #1
 810a52c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810a52e:	687b      	ldr	r3, [r7, #4]
 810a530:	685b      	ldr	r3, [r3, #4]
 810a532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a536:	2b00      	cmp	r3, #0
 810a538:	d00a      	beq.n	810a550 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810a53a:	687b      	ldr	r3, [r7, #4]
 810a53c:	681b      	ldr	r3, [r3, #0]
 810a53e:	68db      	ldr	r3, [r3, #12]
 810a540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810a544:	687b      	ldr	r3, [r7, #4]
 810a546:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a548:	687b      	ldr	r3, [r7, #4]
 810a54a:	681b      	ldr	r3, [r3, #0]
 810a54c:	430a      	orrs	r2, r1
 810a54e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810a550:	687b      	ldr	r3, [r7, #4]
 810a552:	2200      	movs	r2, #0
 810a554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	2201      	movs	r2, #1
 810a55c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810a560:	2300      	movs	r3, #0
}
 810a562:	4618      	mov	r0, r3
 810a564:	3710      	adds	r7, #16
 810a566:	46bd      	mov	sp, r7
 810a568:	bd80      	pop	{r7, pc}
 810a56a:	bf00      	nop
 810a56c:	40013000 	.word	0x40013000
 810a570:	40003800 	.word	0x40003800
 810a574:	40003c00 	.word	0x40003c00

0810a578 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a578:	b580      	push	{r7, lr}
 810a57a:	b08a      	sub	sp, #40	; 0x28
 810a57c:	af02      	add	r7, sp, #8
 810a57e:	60f8      	str	r0, [r7, #12]
 810a580:	60b9      	str	r1, [r7, #8]
 810a582:	603b      	str	r3, [r7, #0]
 810a584:	4613      	mov	r3, r2
 810a586:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810a588:	68fb      	ldr	r3, [r7, #12]
 810a58a:	681b      	ldr	r3, [r3, #0]
 810a58c:	3320      	adds	r3, #32
 810a58e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810a590:	2300      	movs	r3, #0
 810a592:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 810a594:	68fb      	ldr	r3, [r7, #12]
 810a596:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a59a:	2b01      	cmp	r3, #1
 810a59c:	d101      	bne.n	810a5a2 <HAL_SPI_Transmit+0x2a>
 810a59e:	2302      	movs	r3, #2
 810a5a0:	e1d4      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
 810a5a2:	68fb      	ldr	r3, [r7, #12]
 810a5a4:	2201      	movs	r2, #1
 810a5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810a5aa:	f7f9 f8b7 	bl	810371c <HAL_GetTick>
 810a5ae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810a5b0:	68fb      	ldr	r3, [r7, #12]
 810a5b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a5b6:	b2db      	uxtb	r3, r3
 810a5b8:	2b01      	cmp	r3, #1
 810a5ba:	d007      	beq.n	810a5cc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 810a5bc:	2302      	movs	r3, #2
 810a5be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810a5c0:	68fb      	ldr	r3, [r7, #12]
 810a5c2:	2200      	movs	r2, #0
 810a5c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a5c8:	7efb      	ldrb	r3, [r7, #27]
 810a5ca:	e1bf      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 810a5cc:	68bb      	ldr	r3, [r7, #8]
 810a5ce:	2b00      	cmp	r3, #0
 810a5d0:	d002      	beq.n	810a5d8 <HAL_SPI_Transmit+0x60>
 810a5d2:	88fb      	ldrh	r3, [r7, #6]
 810a5d4:	2b00      	cmp	r3, #0
 810a5d6:	d107      	bne.n	810a5e8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 810a5d8:	2301      	movs	r3, #1
 810a5da:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810a5dc:	68fb      	ldr	r3, [r7, #12]
 810a5de:	2200      	movs	r2, #0
 810a5e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a5e4:	7efb      	ldrb	r3, [r7, #27]
 810a5e6:	e1b1      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 810a5e8:	68fb      	ldr	r3, [r7, #12]
 810a5ea:	2203      	movs	r2, #3
 810a5ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810a5f0:	68fb      	ldr	r3, [r7, #12]
 810a5f2:	2200      	movs	r2, #0
 810a5f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 810a5f8:	68fb      	ldr	r3, [r7, #12]
 810a5fa:	68ba      	ldr	r2, [r7, #8]
 810a5fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810a5fe:	68fb      	ldr	r3, [r7, #12]
 810a600:	88fa      	ldrh	r2, [r7, #6]
 810a602:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810a606:	68fb      	ldr	r3, [r7, #12]
 810a608:	88fa      	ldrh	r2, [r7, #6]
 810a60a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810a60e:	68fb      	ldr	r3, [r7, #12]
 810a610:	2200      	movs	r2, #0
 810a612:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 810a614:	68fb      	ldr	r3, [r7, #12]
 810a616:	2200      	movs	r2, #0
 810a618:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 810a61c:	68fb      	ldr	r3, [r7, #12]
 810a61e:	2200      	movs	r2, #0
 810a620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 810a624:	68fb      	ldr	r3, [r7, #12]
 810a626:	2200      	movs	r2, #0
 810a628:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 810a62a:	68fb      	ldr	r3, [r7, #12]
 810a62c:	2200      	movs	r2, #0
 810a62e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810a630:	68fb      	ldr	r3, [r7, #12]
 810a632:	689b      	ldr	r3, [r3, #8]
 810a634:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810a638:	d107      	bne.n	810a64a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 810a63a:	68fb      	ldr	r3, [r7, #12]
 810a63c:	681b      	ldr	r3, [r3, #0]
 810a63e:	681a      	ldr	r2, [r3, #0]
 810a640:	68fb      	ldr	r3, [r7, #12]
 810a642:	681b      	ldr	r3, [r3, #0]
 810a644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a648:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810a64a:	68fb      	ldr	r3, [r7, #12]
 810a64c:	681b      	ldr	r3, [r3, #0]
 810a64e:	685b      	ldr	r3, [r3, #4]
 810a650:	0c1b      	lsrs	r3, r3, #16
 810a652:	041b      	lsls	r3, r3, #16
 810a654:	88f9      	ldrh	r1, [r7, #6]
 810a656:	68fa      	ldr	r2, [r7, #12]
 810a658:	6812      	ldr	r2, [r2, #0]
 810a65a:	430b      	orrs	r3, r1
 810a65c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810a65e:	68fb      	ldr	r3, [r7, #12]
 810a660:	681b      	ldr	r3, [r3, #0]
 810a662:	681a      	ldr	r2, [r3, #0]
 810a664:	68fb      	ldr	r3, [r7, #12]
 810a666:	681b      	ldr	r3, [r3, #0]
 810a668:	f042 0201 	orr.w	r2, r2, #1
 810a66c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810a66e:	68fb      	ldr	r3, [r7, #12]
 810a670:	685b      	ldr	r3, [r3, #4]
 810a672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a676:	d107      	bne.n	810a688 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810a678:	68fb      	ldr	r3, [r7, #12]
 810a67a:	681b      	ldr	r3, [r3, #0]
 810a67c:	681a      	ldr	r2, [r3, #0]
 810a67e:	68fb      	ldr	r3, [r7, #12]
 810a680:	681b      	ldr	r3, [r3, #0]
 810a682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810a688:	68fb      	ldr	r3, [r7, #12]
 810a68a:	68db      	ldr	r3, [r3, #12]
 810a68c:	2b0f      	cmp	r3, #15
 810a68e:	d947      	bls.n	810a720 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810a690:	e03f      	b.n	810a712 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810a692:	68fb      	ldr	r3, [r7, #12]
 810a694:	681b      	ldr	r3, [r3, #0]
 810a696:	695b      	ldr	r3, [r3, #20]
 810a698:	f003 0302 	and.w	r3, r3, #2
 810a69c:	2b02      	cmp	r3, #2
 810a69e:	d114      	bne.n	810a6ca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810a6a0:	68fb      	ldr	r3, [r7, #12]
 810a6a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810a6a4:	68fb      	ldr	r3, [r7, #12]
 810a6a6:	681b      	ldr	r3, [r3, #0]
 810a6a8:	6812      	ldr	r2, [r2, #0]
 810a6aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810a6ac:	68fb      	ldr	r3, [r7, #12]
 810a6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a6b0:	1d1a      	adds	r2, r3, #4
 810a6b2:	68fb      	ldr	r3, [r7, #12]
 810a6b4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810a6b6:	68fb      	ldr	r3, [r7, #12]
 810a6b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a6bc:	b29b      	uxth	r3, r3
 810a6be:	3b01      	subs	r3, #1
 810a6c0:	b29a      	uxth	r2, r3
 810a6c2:	68fb      	ldr	r3, [r7, #12]
 810a6c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810a6c8:	e023      	b.n	810a712 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810a6ca:	f7f9 f827 	bl	810371c <HAL_GetTick>
 810a6ce:	4602      	mov	r2, r0
 810a6d0:	697b      	ldr	r3, [r7, #20]
 810a6d2:	1ad3      	subs	r3, r2, r3
 810a6d4:	683a      	ldr	r2, [r7, #0]
 810a6d6:	429a      	cmp	r2, r3
 810a6d8:	d803      	bhi.n	810a6e2 <HAL_SPI_Transmit+0x16a>
 810a6da:	683b      	ldr	r3, [r7, #0]
 810a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a6e0:	d102      	bne.n	810a6e8 <HAL_SPI_Transmit+0x170>
 810a6e2:	683b      	ldr	r3, [r7, #0]
 810a6e4:	2b00      	cmp	r3, #0
 810a6e6:	d114      	bne.n	810a712 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810a6e8:	68f8      	ldr	r0, [r7, #12]
 810a6ea:	f001 f82f 	bl	810b74c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810a6ee:	68fb      	ldr	r3, [r7, #12]
 810a6f0:	2200      	movs	r2, #0
 810a6f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810a6f6:	68fb      	ldr	r3, [r7, #12]
 810a6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a6fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810a700:	68fb      	ldr	r3, [r7, #12]
 810a702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810a706:	68fb      	ldr	r3, [r7, #12]
 810a708:	2201      	movs	r2, #1
 810a70a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810a70e:	2301      	movs	r3, #1
 810a710:	e11c      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810a712:	68fb      	ldr	r3, [r7, #12]
 810a714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a718:	b29b      	uxth	r3, r3
 810a71a:	2b00      	cmp	r3, #0
 810a71c:	d1b9      	bne.n	810a692 <HAL_SPI_Transmit+0x11a>
 810a71e:	e0ef      	b.n	810a900 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810a720:	68fb      	ldr	r3, [r7, #12]
 810a722:	68db      	ldr	r3, [r3, #12]
 810a724:	2b07      	cmp	r3, #7
 810a726:	f240 80e4 	bls.w	810a8f2 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810a72a:	e05d      	b.n	810a7e8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810a72c:	68fb      	ldr	r3, [r7, #12]
 810a72e:	681b      	ldr	r3, [r3, #0]
 810a730:	695b      	ldr	r3, [r3, #20]
 810a732:	f003 0302 	and.w	r3, r3, #2
 810a736:	2b02      	cmp	r3, #2
 810a738:	d132      	bne.n	810a7a0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810a73a:	68fb      	ldr	r3, [r7, #12]
 810a73c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a740:	b29b      	uxth	r3, r3
 810a742:	2b01      	cmp	r3, #1
 810a744:	d918      	bls.n	810a778 <HAL_SPI_Transmit+0x200>
 810a746:	68fb      	ldr	r3, [r7, #12]
 810a748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a74a:	2b00      	cmp	r3, #0
 810a74c:	d014      	beq.n	810a778 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810a74e:	68fb      	ldr	r3, [r7, #12]
 810a750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810a752:	68fb      	ldr	r3, [r7, #12]
 810a754:	681b      	ldr	r3, [r3, #0]
 810a756:	6812      	ldr	r2, [r2, #0]
 810a758:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810a75a:	68fb      	ldr	r3, [r7, #12]
 810a75c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a75e:	1d1a      	adds	r2, r3, #4
 810a760:	68fb      	ldr	r3, [r7, #12]
 810a762:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810a764:	68fb      	ldr	r3, [r7, #12]
 810a766:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a76a:	b29b      	uxth	r3, r3
 810a76c:	3b02      	subs	r3, #2
 810a76e:	b29a      	uxth	r2, r3
 810a770:	68fb      	ldr	r3, [r7, #12]
 810a772:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810a776:	e037      	b.n	810a7e8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810a778:	68fb      	ldr	r3, [r7, #12]
 810a77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a77c:	881a      	ldrh	r2, [r3, #0]
 810a77e:	69fb      	ldr	r3, [r7, #28]
 810a780:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810a782:	68fb      	ldr	r3, [r7, #12]
 810a784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a786:	1c9a      	adds	r2, r3, #2
 810a788:	68fb      	ldr	r3, [r7, #12]
 810a78a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810a78c:	68fb      	ldr	r3, [r7, #12]
 810a78e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a792:	b29b      	uxth	r3, r3
 810a794:	3b01      	subs	r3, #1
 810a796:	b29a      	uxth	r2, r3
 810a798:	68fb      	ldr	r3, [r7, #12]
 810a79a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810a79e:	e023      	b.n	810a7e8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810a7a0:	f7f8 ffbc 	bl	810371c <HAL_GetTick>
 810a7a4:	4602      	mov	r2, r0
 810a7a6:	697b      	ldr	r3, [r7, #20]
 810a7a8:	1ad3      	subs	r3, r2, r3
 810a7aa:	683a      	ldr	r2, [r7, #0]
 810a7ac:	429a      	cmp	r2, r3
 810a7ae:	d803      	bhi.n	810a7b8 <HAL_SPI_Transmit+0x240>
 810a7b0:	683b      	ldr	r3, [r7, #0]
 810a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a7b6:	d102      	bne.n	810a7be <HAL_SPI_Transmit+0x246>
 810a7b8:	683b      	ldr	r3, [r7, #0]
 810a7ba:	2b00      	cmp	r3, #0
 810a7bc:	d114      	bne.n	810a7e8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810a7be:	68f8      	ldr	r0, [r7, #12]
 810a7c0:	f000 ffc4 	bl	810b74c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810a7c4:	68fb      	ldr	r3, [r7, #12]
 810a7c6:	2200      	movs	r2, #0
 810a7c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810a7cc:	68fb      	ldr	r3, [r7, #12]
 810a7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a7d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810a7d6:	68fb      	ldr	r3, [r7, #12]
 810a7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810a7dc:	68fb      	ldr	r3, [r7, #12]
 810a7de:	2201      	movs	r2, #1
 810a7e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810a7e4:	2301      	movs	r3, #1
 810a7e6:	e0b1      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810a7e8:	68fb      	ldr	r3, [r7, #12]
 810a7ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a7ee:	b29b      	uxth	r3, r3
 810a7f0:	2b00      	cmp	r3, #0
 810a7f2:	d19b      	bne.n	810a72c <HAL_SPI_Transmit+0x1b4>
 810a7f4:	e084      	b.n	810a900 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810a7f6:	68fb      	ldr	r3, [r7, #12]
 810a7f8:	681b      	ldr	r3, [r3, #0]
 810a7fa:	695b      	ldr	r3, [r3, #20]
 810a7fc:	f003 0302 	and.w	r3, r3, #2
 810a800:	2b02      	cmp	r3, #2
 810a802:	d152      	bne.n	810a8aa <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810a804:	68fb      	ldr	r3, [r7, #12]
 810a806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a80a:	b29b      	uxth	r3, r3
 810a80c:	2b03      	cmp	r3, #3
 810a80e:	d918      	bls.n	810a842 <HAL_SPI_Transmit+0x2ca>
 810a810:	68fb      	ldr	r3, [r7, #12]
 810a812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a814:	2b40      	cmp	r3, #64	; 0x40
 810a816:	d914      	bls.n	810a842 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810a818:	68fb      	ldr	r3, [r7, #12]
 810a81a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810a81c:	68fb      	ldr	r3, [r7, #12]
 810a81e:	681b      	ldr	r3, [r3, #0]
 810a820:	6812      	ldr	r2, [r2, #0]
 810a822:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810a824:	68fb      	ldr	r3, [r7, #12]
 810a826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a828:	1d1a      	adds	r2, r3, #4
 810a82a:	68fb      	ldr	r3, [r7, #12]
 810a82c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810a82e:	68fb      	ldr	r3, [r7, #12]
 810a830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a834:	b29b      	uxth	r3, r3
 810a836:	3b04      	subs	r3, #4
 810a838:	b29a      	uxth	r2, r3
 810a83a:	68fb      	ldr	r3, [r7, #12]
 810a83c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810a840:	e057      	b.n	810a8f2 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810a842:	68fb      	ldr	r3, [r7, #12]
 810a844:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a848:	b29b      	uxth	r3, r3
 810a84a:	2b01      	cmp	r3, #1
 810a84c:	d917      	bls.n	810a87e <HAL_SPI_Transmit+0x306>
 810a84e:	68fb      	ldr	r3, [r7, #12]
 810a850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a852:	2b00      	cmp	r3, #0
 810a854:	d013      	beq.n	810a87e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810a856:	68fb      	ldr	r3, [r7, #12]
 810a858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a85a:	881a      	ldrh	r2, [r3, #0]
 810a85c:	69fb      	ldr	r3, [r7, #28]
 810a85e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810a860:	68fb      	ldr	r3, [r7, #12]
 810a862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a864:	1c9a      	adds	r2, r3, #2
 810a866:	68fb      	ldr	r3, [r7, #12]
 810a868:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810a86a:	68fb      	ldr	r3, [r7, #12]
 810a86c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a870:	b29b      	uxth	r3, r3
 810a872:	3b02      	subs	r3, #2
 810a874:	b29a      	uxth	r2, r3
 810a876:	68fb      	ldr	r3, [r7, #12]
 810a878:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810a87c:	e039      	b.n	810a8f2 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810a87e:	68fb      	ldr	r3, [r7, #12]
 810a880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810a882:	68fb      	ldr	r3, [r7, #12]
 810a884:	681b      	ldr	r3, [r3, #0]
 810a886:	3320      	adds	r3, #32
 810a888:	7812      	ldrb	r2, [r2, #0]
 810a88a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810a88c:	68fb      	ldr	r3, [r7, #12]
 810a88e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a890:	1c5a      	adds	r2, r3, #1
 810a892:	68fb      	ldr	r3, [r7, #12]
 810a894:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810a896:	68fb      	ldr	r3, [r7, #12]
 810a898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a89c:	b29b      	uxth	r3, r3
 810a89e:	3b01      	subs	r3, #1
 810a8a0:	b29a      	uxth	r2, r3
 810a8a2:	68fb      	ldr	r3, [r7, #12]
 810a8a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810a8a8:	e023      	b.n	810a8f2 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810a8aa:	f7f8 ff37 	bl	810371c <HAL_GetTick>
 810a8ae:	4602      	mov	r2, r0
 810a8b0:	697b      	ldr	r3, [r7, #20]
 810a8b2:	1ad3      	subs	r3, r2, r3
 810a8b4:	683a      	ldr	r2, [r7, #0]
 810a8b6:	429a      	cmp	r2, r3
 810a8b8:	d803      	bhi.n	810a8c2 <HAL_SPI_Transmit+0x34a>
 810a8ba:	683b      	ldr	r3, [r7, #0]
 810a8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a8c0:	d102      	bne.n	810a8c8 <HAL_SPI_Transmit+0x350>
 810a8c2:	683b      	ldr	r3, [r7, #0]
 810a8c4:	2b00      	cmp	r3, #0
 810a8c6:	d114      	bne.n	810a8f2 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810a8c8:	68f8      	ldr	r0, [r7, #12]
 810a8ca:	f000 ff3f 	bl	810b74c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810a8ce:	68fb      	ldr	r3, [r7, #12]
 810a8d0:	2200      	movs	r2, #0
 810a8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810a8d6:	68fb      	ldr	r3, [r7, #12]
 810a8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a8dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810a8e0:	68fb      	ldr	r3, [r7, #12]
 810a8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	2201      	movs	r2, #1
 810a8ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810a8ee:	2301      	movs	r3, #1
 810a8f0:	e02c      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810a8f2:	68fb      	ldr	r3, [r7, #12]
 810a8f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a8f8:	b29b      	uxth	r3, r3
 810a8fa:	2b00      	cmp	r3, #0
 810a8fc:	f47f af7b 	bne.w	810a7f6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810a900:	683b      	ldr	r3, [r7, #0]
 810a902:	9300      	str	r3, [sp, #0]
 810a904:	697b      	ldr	r3, [r7, #20]
 810a906:	2200      	movs	r2, #0
 810a908:	2108      	movs	r1, #8
 810a90a:	68f8      	ldr	r0, [r7, #12]
 810a90c:	f000 ffbe 	bl	810b88c <SPI_WaitOnFlagUntilTimeout>
 810a910:	4603      	mov	r3, r0
 810a912:	2b00      	cmp	r3, #0
 810a914:	d007      	beq.n	810a926 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810a916:	68fb      	ldr	r3, [r7, #12]
 810a918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a91c:	f043 0220 	orr.w	r2, r3, #32
 810a920:	68fb      	ldr	r3, [r7, #12]
 810a922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810a926:	68f8      	ldr	r0, [r7, #12]
 810a928:	f000 ff10 	bl	810b74c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810a92c:	68fb      	ldr	r3, [r7, #12]
 810a92e:	2200      	movs	r2, #0
 810a930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810a934:	68fb      	ldr	r3, [r7, #12]
 810a936:	2201      	movs	r2, #1
 810a938:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a93c:	68fb      	ldr	r3, [r7, #12]
 810a93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a942:	2b00      	cmp	r3, #0
 810a944:	d001      	beq.n	810a94a <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810a946:	2301      	movs	r3, #1
 810a948:	e000      	b.n	810a94c <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 810a94a:	7efb      	ldrb	r3, [r7, #27]
}
 810a94c:	4618      	mov	r0, r3
 810a94e:	3720      	adds	r7, #32
 810a950:	46bd      	mov	sp, r7
 810a952:	bd80      	pop	{r7, pc}

0810a954 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810a954:	b580      	push	{r7, lr}
 810a956:	b08a      	sub	sp, #40	; 0x28
 810a958:	af02      	add	r7, sp, #8
 810a95a:	60f8      	str	r0, [r7, #12]
 810a95c:	60b9      	str	r1, [r7, #8]
 810a95e:	603b      	str	r3, [r7, #0]
 810a960:	4613      	mov	r3, r2
 810a962:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810a964:	2300      	movs	r3, #0
 810a966:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810a968:	68fb      	ldr	r3, [r7, #12]
 810a96a:	681b      	ldr	r3, [r3, #0]
 810a96c:	3330      	adds	r3, #48	; 0x30
 810a96e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 810a970:	68fb      	ldr	r3, [r7, #12]
 810a972:	685b      	ldr	r3, [r3, #4]
 810a974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a978:	d112      	bne.n	810a9a0 <HAL_SPI_Receive+0x4c>
 810a97a:	68fb      	ldr	r3, [r7, #12]
 810a97c:	689b      	ldr	r3, [r3, #8]
 810a97e:	2b00      	cmp	r3, #0
 810a980:	d10e      	bne.n	810a9a0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810a982:	68fb      	ldr	r3, [r7, #12]
 810a984:	2204      	movs	r2, #4
 810a986:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 810a98a:	88fa      	ldrh	r2, [r7, #6]
 810a98c:	683b      	ldr	r3, [r7, #0]
 810a98e:	9300      	str	r3, [sp, #0]
 810a990:	4613      	mov	r3, r2
 810a992:	68ba      	ldr	r2, [r7, #8]
 810a994:	68b9      	ldr	r1, [r7, #8]
 810a996:	68f8      	ldr	r0, [r7, #12]
 810a998:	f000 f9cc 	bl	810ad34 <HAL_SPI_TransmitReceive>
 810a99c:	4603      	mov	r3, r0
 810a99e:	e1c5      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 810a9a0:	68fb      	ldr	r3, [r7, #12]
 810a9a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a9a6:	2b01      	cmp	r3, #1
 810a9a8:	d101      	bne.n	810a9ae <HAL_SPI_Receive+0x5a>
 810a9aa:	2302      	movs	r3, #2
 810a9ac:	e1be      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
 810a9ae:	68fb      	ldr	r3, [r7, #12]
 810a9b0:	2201      	movs	r2, #1
 810a9b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810a9b6:	f7f8 feb1 	bl	810371c <HAL_GetTick>
 810a9ba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810a9bc:	68fb      	ldr	r3, [r7, #12]
 810a9be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a9c2:	b2db      	uxtb	r3, r3
 810a9c4:	2b01      	cmp	r3, #1
 810a9c6:	d007      	beq.n	810a9d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 810a9c8:	2302      	movs	r3, #2
 810a9ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810a9cc:	68fb      	ldr	r3, [r7, #12]
 810a9ce:	2200      	movs	r2, #0
 810a9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a9d4:	7ffb      	ldrb	r3, [r7, #31]
 810a9d6:	e1a9      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 810a9d8:	68bb      	ldr	r3, [r7, #8]
 810a9da:	2b00      	cmp	r3, #0
 810a9dc:	d002      	beq.n	810a9e4 <HAL_SPI_Receive+0x90>
 810a9de:	88fb      	ldrh	r3, [r7, #6]
 810a9e0:	2b00      	cmp	r3, #0
 810a9e2:	d107      	bne.n	810a9f4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 810a9e4:	2301      	movs	r3, #1
 810a9e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810a9e8:	68fb      	ldr	r3, [r7, #12]
 810a9ea:	2200      	movs	r2, #0
 810a9ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a9f0:	7ffb      	ldrb	r3, [r7, #31]
 810a9f2:	e19b      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 810a9f4:	68fb      	ldr	r3, [r7, #12]
 810a9f6:	2204      	movs	r2, #4
 810a9f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810a9fc:	68fb      	ldr	r3, [r7, #12]
 810a9fe:	2200      	movs	r2, #0
 810aa00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 810aa04:	68fb      	ldr	r3, [r7, #12]
 810aa06:	68ba      	ldr	r2, [r7, #8]
 810aa08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810aa0a:	68fb      	ldr	r3, [r7, #12]
 810aa0c:	88fa      	ldrh	r2, [r7, #6]
 810aa0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810aa12:	68fb      	ldr	r3, [r7, #12]
 810aa14:	88fa      	ldrh	r2, [r7, #6]
 810aa16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 810aa1a:	68fb      	ldr	r3, [r7, #12]
 810aa1c:	2200      	movs	r2, #0
 810aa1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810aa20:	68fb      	ldr	r3, [r7, #12]
 810aa22:	2200      	movs	r2, #0
 810aa24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 810aa28:	68fb      	ldr	r3, [r7, #12]
 810aa2a:	2200      	movs	r2, #0
 810aa2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 810aa30:	68fb      	ldr	r3, [r7, #12]
 810aa32:	2200      	movs	r2, #0
 810aa34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810aa36:	68fb      	ldr	r3, [r7, #12]
 810aa38:	2200      	movs	r2, #0
 810aa3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810aa3c:	68fb      	ldr	r3, [r7, #12]
 810aa3e:	689b      	ldr	r3, [r3, #8]
 810aa40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810aa44:	d107      	bne.n	810aa56 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 810aa46:	68fb      	ldr	r3, [r7, #12]
 810aa48:	681b      	ldr	r3, [r3, #0]
 810aa4a:	681a      	ldr	r2, [r3, #0]
 810aa4c:	68fb      	ldr	r3, [r7, #12]
 810aa4e:	681b      	ldr	r3, [r3, #0]
 810aa50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 810aa54:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810aa56:	68fb      	ldr	r3, [r7, #12]
 810aa58:	681b      	ldr	r3, [r3, #0]
 810aa5a:	685b      	ldr	r3, [r3, #4]
 810aa5c:	0c1b      	lsrs	r3, r3, #16
 810aa5e:	041b      	lsls	r3, r3, #16
 810aa60:	88f9      	ldrh	r1, [r7, #6]
 810aa62:	68fa      	ldr	r2, [r7, #12]
 810aa64:	6812      	ldr	r2, [r2, #0]
 810aa66:	430b      	orrs	r3, r1
 810aa68:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810aa6a:	68fb      	ldr	r3, [r7, #12]
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	681a      	ldr	r2, [r3, #0]
 810aa70:	68fb      	ldr	r3, [r7, #12]
 810aa72:	681b      	ldr	r3, [r3, #0]
 810aa74:	f042 0201 	orr.w	r2, r2, #1
 810aa78:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810aa7a:	68fb      	ldr	r3, [r7, #12]
 810aa7c:	685b      	ldr	r3, [r3, #4]
 810aa7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810aa82:	d107      	bne.n	810aa94 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810aa84:	68fb      	ldr	r3, [r7, #12]
 810aa86:	681b      	ldr	r3, [r3, #0]
 810aa88:	681a      	ldr	r2, [r3, #0]
 810aa8a:	68fb      	ldr	r3, [r7, #12]
 810aa8c:	681b      	ldr	r3, [r3, #0]
 810aa8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810aa92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810aa94:	68fb      	ldr	r3, [r7, #12]
 810aa96:	68db      	ldr	r3, [r3, #12]
 810aa98:	2b0f      	cmp	r3, #15
 810aa9a:	d948      	bls.n	810ab2e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810aa9c:	e040      	b.n	810ab20 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 810aa9e:	68fb      	ldr	r3, [r7, #12]
 810aaa0:	681b      	ldr	r3, [r3, #0]
 810aaa2:	695a      	ldr	r2, [r3, #20]
 810aaa4:	f248 0308 	movw	r3, #32776	; 0x8008
 810aaa8:	4013      	ands	r3, r2
 810aaaa:	2b00      	cmp	r3, #0
 810aaac:	d014      	beq.n	810aad8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810aaae:	68fb      	ldr	r3, [r7, #12]
 810aab0:	681a      	ldr	r2, [r3, #0]
 810aab2:	68fb      	ldr	r3, [r7, #12]
 810aab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aab6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810aab8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810aaba:	68fb      	ldr	r3, [r7, #12]
 810aabc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aabe:	1d1a      	adds	r2, r3, #4
 810aac0:	68fb      	ldr	r3, [r7, #12]
 810aac2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810aac4:	68fb      	ldr	r3, [r7, #12]
 810aac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810aaca:	b29b      	uxth	r3, r3
 810aacc:	3b01      	subs	r3, #1
 810aace:	b29a      	uxth	r2, r3
 810aad0:	68fb      	ldr	r3, [r7, #12]
 810aad2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810aad6:	e023      	b.n	810ab20 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810aad8:	f7f8 fe20 	bl	810371c <HAL_GetTick>
 810aadc:	4602      	mov	r2, r0
 810aade:	697b      	ldr	r3, [r7, #20]
 810aae0:	1ad3      	subs	r3, r2, r3
 810aae2:	683a      	ldr	r2, [r7, #0]
 810aae4:	429a      	cmp	r2, r3
 810aae6:	d803      	bhi.n	810aaf0 <HAL_SPI_Receive+0x19c>
 810aae8:	683b      	ldr	r3, [r7, #0]
 810aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 810aaee:	d102      	bne.n	810aaf6 <HAL_SPI_Receive+0x1a2>
 810aaf0:	683b      	ldr	r3, [r7, #0]
 810aaf2:	2b00      	cmp	r3, #0
 810aaf4:	d114      	bne.n	810ab20 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810aaf6:	68f8      	ldr	r0, [r7, #12]
 810aaf8:	f000 fe28 	bl	810b74c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810aafc:	68fb      	ldr	r3, [r7, #12]
 810aafe:	2200      	movs	r2, #0
 810ab00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810ab04:	68fb      	ldr	r3, [r7, #12]
 810ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ab0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810ab0e:	68fb      	ldr	r3, [r7, #12]
 810ab10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810ab14:	68fb      	ldr	r3, [r7, #12]
 810ab16:	2201      	movs	r2, #1
 810ab18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810ab1c:	2301      	movs	r3, #1
 810ab1e:	e105      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810ab20:	68fb      	ldr	r3, [r7, #12]
 810ab22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ab26:	b29b      	uxth	r3, r3
 810ab28:	2b00      	cmp	r3, #0
 810ab2a:	d1b8      	bne.n	810aa9e <HAL_SPI_Receive+0x14a>
 810ab2c:	e0eb      	b.n	810ad06 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810ab2e:	68fb      	ldr	r3, [r7, #12]
 810ab30:	68db      	ldr	r3, [r3, #12]
 810ab32:	2b07      	cmp	r3, #7
 810ab34:	f240 80e0 	bls.w	810acf8 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810ab38:	e05b      	b.n	810abf2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810ab3a:	68fb      	ldr	r3, [r7, #12]
 810ab3c:	681b      	ldr	r3, [r3, #0]
 810ab3e:	695b      	ldr	r3, [r3, #20]
 810ab40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810ab44:	2b00      	cmp	r3, #0
 810ab46:	d030      	beq.n	810abaa <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810ab48:	68fb      	ldr	r3, [r7, #12]
 810ab4a:	681b      	ldr	r3, [r3, #0]
 810ab4c:	695b      	ldr	r3, [r3, #20]
 810ab4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810ab52:	2b00      	cmp	r3, #0
 810ab54:	d014      	beq.n	810ab80 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810ab56:	68fb      	ldr	r3, [r7, #12]
 810ab58:	681a      	ldr	r2, [r3, #0]
 810ab5a:	68fb      	ldr	r3, [r7, #12]
 810ab5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ab5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810ab60:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810ab62:	68fb      	ldr	r3, [r7, #12]
 810ab64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ab66:	1d1a      	adds	r2, r3, #4
 810ab68:	68fb      	ldr	r3, [r7, #12]
 810ab6a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810ab6c:	68fb      	ldr	r3, [r7, #12]
 810ab6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ab72:	b29b      	uxth	r3, r3
 810ab74:	3b02      	subs	r3, #2
 810ab76:	b29a      	uxth	r2, r3
 810ab78:	68fb      	ldr	r3, [r7, #12]
 810ab7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810ab7e:	e038      	b.n	810abf2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810ab80:	68fb      	ldr	r3, [r7, #12]
 810ab82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ab84:	69ba      	ldr	r2, [r7, #24]
 810ab86:	8812      	ldrh	r2, [r2, #0]
 810ab88:	b292      	uxth	r2, r2
 810ab8a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810ab8c:	68fb      	ldr	r3, [r7, #12]
 810ab8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ab90:	1c9a      	adds	r2, r3, #2
 810ab92:	68fb      	ldr	r3, [r7, #12]
 810ab94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810ab96:	68fb      	ldr	r3, [r7, #12]
 810ab98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ab9c:	b29b      	uxth	r3, r3
 810ab9e:	3b01      	subs	r3, #1
 810aba0:	b29a      	uxth	r2, r3
 810aba2:	68fb      	ldr	r3, [r7, #12]
 810aba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810aba8:	e023      	b.n	810abf2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810abaa:	f7f8 fdb7 	bl	810371c <HAL_GetTick>
 810abae:	4602      	mov	r2, r0
 810abb0:	697b      	ldr	r3, [r7, #20]
 810abb2:	1ad3      	subs	r3, r2, r3
 810abb4:	683a      	ldr	r2, [r7, #0]
 810abb6:	429a      	cmp	r2, r3
 810abb8:	d803      	bhi.n	810abc2 <HAL_SPI_Receive+0x26e>
 810abba:	683b      	ldr	r3, [r7, #0]
 810abbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810abc0:	d102      	bne.n	810abc8 <HAL_SPI_Receive+0x274>
 810abc2:	683b      	ldr	r3, [r7, #0]
 810abc4:	2b00      	cmp	r3, #0
 810abc6:	d114      	bne.n	810abf2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810abc8:	68f8      	ldr	r0, [r7, #12]
 810abca:	f000 fdbf 	bl	810b74c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810abce:	68fb      	ldr	r3, [r7, #12]
 810abd0:	2200      	movs	r2, #0
 810abd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810abd6:	68fb      	ldr	r3, [r7, #12]
 810abd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810abdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810abe0:	68fb      	ldr	r3, [r7, #12]
 810abe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810abe6:	68fb      	ldr	r3, [r7, #12]
 810abe8:	2201      	movs	r2, #1
 810abea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810abee:	2301      	movs	r3, #1
 810abf0:	e09c      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810abf2:	68fb      	ldr	r3, [r7, #12]
 810abf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810abf8:	b29b      	uxth	r3, r3
 810abfa:	2b00      	cmp	r3, #0
 810abfc:	d19d      	bne.n	810ab3a <HAL_SPI_Receive+0x1e6>
 810abfe:	e082      	b.n	810ad06 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810ac00:	68fb      	ldr	r3, [r7, #12]
 810ac02:	681b      	ldr	r3, [r3, #0]
 810ac04:	695b      	ldr	r3, [r3, #20]
 810ac06:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810ac0a:	2b00      	cmp	r3, #0
 810ac0c:	d050      	beq.n	810acb0 <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810ac0e:	68fb      	ldr	r3, [r7, #12]
 810ac10:	681b      	ldr	r3, [r3, #0]
 810ac12:	695b      	ldr	r3, [r3, #20]
 810ac14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810ac18:	2b00      	cmp	r3, #0
 810ac1a:	d014      	beq.n	810ac46 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810ac1c:	68fb      	ldr	r3, [r7, #12]
 810ac1e:	681a      	ldr	r2, [r3, #0]
 810ac20:	68fb      	ldr	r3, [r7, #12]
 810ac22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ac24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810ac26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810ac28:	68fb      	ldr	r3, [r7, #12]
 810ac2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ac2c:	1d1a      	adds	r2, r3, #4
 810ac2e:	68fb      	ldr	r3, [r7, #12]
 810ac30:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810ac32:	68fb      	ldr	r3, [r7, #12]
 810ac34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ac38:	b29b      	uxth	r3, r3
 810ac3a:	3b04      	subs	r3, #4
 810ac3c:	b29a      	uxth	r2, r3
 810ac3e:	68fb      	ldr	r3, [r7, #12]
 810ac40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810ac44:	e058      	b.n	810acf8 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810ac46:	68fb      	ldr	r3, [r7, #12]
 810ac48:	681b      	ldr	r3, [r3, #0]
 810ac4a:	695b      	ldr	r3, [r3, #20]
 810ac4c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810ac50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810ac54:	d914      	bls.n	810ac80 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810ac56:	68fb      	ldr	r3, [r7, #12]
 810ac58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ac5a:	69ba      	ldr	r2, [r7, #24]
 810ac5c:	8812      	ldrh	r2, [r2, #0]
 810ac5e:	b292      	uxth	r2, r2
 810ac60:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810ac62:	68fb      	ldr	r3, [r7, #12]
 810ac64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ac66:	1c9a      	adds	r2, r3, #2
 810ac68:	68fb      	ldr	r3, [r7, #12]
 810ac6a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810ac6c:	68fb      	ldr	r3, [r7, #12]
 810ac6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ac72:	b29b      	uxth	r3, r3
 810ac74:	3b02      	subs	r3, #2
 810ac76:	b29a      	uxth	r2, r3
 810ac78:	68fb      	ldr	r3, [r7, #12]
 810ac7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810ac7e:	e03b      	b.n	810acf8 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810ac80:	68fb      	ldr	r3, [r7, #12]
 810ac82:	681b      	ldr	r3, [r3, #0]
 810ac84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810ac88:	68fb      	ldr	r3, [r7, #12]
 810ac8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ac8c:	7812      	ldrb	r2, [r2, #0]
 810ac8e:	b2d2      	uxtb	r2, r2
 810ac90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810ac92:	68fb      	ldr	r3, [r7, #12]
 810ac94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ac96:	1c5a      	adds	r2, r3, #1
 810ac98:	68fb      	ldr	r3, [r7, #12]
 810ac9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810ac9c:	68fb      	ldr	r3, [r7, #12]
 810ac9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810aca2:	b29b      	uxth	r3, r3
 810aca4:	3b01      	subs	r3, #1
 810aca6:	b29a      	uxth	r2, r3
 810aca8:	68fb      	ldr	r3, [r7, #12]
 810acaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810acae:	e023      	b.n	810acf8 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810acb0:	f7f8 fd34 	bl	810371c <HAL_GetTick>
 810acb4:	4602      	mov	r2, r0
 810acb6:	697b      	ldr	r3, [r7, #20]
 810acb8:	1ad3      	subs	r3, r2, r3
 810acba:	683a      	ldr	r2, [r7, #0]
 810acbc:	429a      	cmp	r2, r3
 810acbe:	d803      	bhi.n	810acc8 <HAL_SPI_Receive+0x374>
 810acc0:	683b      	ldr	r3, [r7, #0]
 810acc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810acc6:	d102      	bne.n	810acce <HAL_SPI_Receive+0x37a>
 810acc8:	683b      	ldr	r3, [r7, #0]
 810acca:	2b00      	cmp	r3, #0
 810accc:	d114      	bne.n	810acf8 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810acce:	68f8      	ldr	r0, [r7, #12]
 810acd0:	f000 fd3c 	bl	810b74c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810acd4:	68fb      	ldr	r3, [r7, #12]
 810acd6:	2200      	movs	r2, #0
 810acd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810acdc:	68fb      	ldr	r3, [r7, #12]
 810acde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ace2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810ace6:	68fb      	ldr	r3, [r7, #12]
 810ace8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810acec:	68fb      	ldr	r3, [r7, #12]
 810acee:	2201      	movs	r2, #1
 810acf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810acf4:	2301      	movs	r3, #1
 810acf6:	e019      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810acf8:	68fb      	ldr	r3, [r7, #12]
 810acfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810acfe:	b29b      	uxth	r3, r3
 810ad00:	2b00      	cmp	r3, #0
 810ad02:	f47f af7d 	bne.w	810ac00 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810ad06:	68f8      	ldr	r0, [r7, #12]
 810ad08:	f000 fd20 	bl	810b74c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810ad0c:	68fb      	ldr	r3, [r7, #12]
 810ad0e:	2200      	movs	r2, #0
 810ad10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810ad14:	68fb      	ldr	r3, [r7, #12]
 810ad16:	2201      	movs	r2, #1
 810ad18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810ad1c:	68fb      	ldr	r3, [r7, #12]
 810ad1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ad22:	2b00      	cmp	r3, #0
 810ad24:	d001      	beq.n	810ad2a <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 810ad26:	2301      	movs	r3, #1
 810ad28:	e000      	b.n	810ad2c <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 810ad2a:	7ffb      	ldrb	r3, [r7, #31]
}
 810ad2c:	4618      	mov	r0, r3
 810ad2e:	3720      	adds	r7, #32
 810ad30:	46bd      	mov	sp, r7
 810ad32:	bd80      	pop	{r7, pc}

0810ad34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 810ad34:	b580      	push	{r7, lr}
 810ad36:	b08e      	sub	sp, #56	; 0x38
 810ad38:	af02      	add	r7, sp, #8
 810ad3a:	60f8      	str	r0, [r7, #12]
 810ad3c:	60b9      	str	r1, [r7, #8]
 810ad3e:	607a      	str	r2, [r7, #4]
 810ad40:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810ad42:	2300      	movs	r3, #0
 810ad44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810ad48:	68fb      	ldr	r3, [r7, #12]
 810ad4a:	681b      	ldr	r3, [r3, #0]
 810ad4c:	3320      	adds	r3, #32
 810ad4e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810ad50:	68fb      	ldr	r3, [r7, #12]
 810ad52:	681b      	ldr	r3, [r3, #0]
 810ad54:	3330      	adds	r3, #48	; 0x30
 810ad56:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 810ad58:	68fb      	ldr	r3, [r7, #12]
 810ad5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ad5e:	2b01      	cmp	r3, #1
 810ad60:	d101      	bne.n	810ad66 <HAL_SPI_TransmitReceive+0x32>
 810ad62:	2302      	movs	r3, #2
 810ad64:	e2cb      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
 810ad66:	68fb      	ldr	r3, [r7, #12]
 810ad68:	2201      	movs	r2, #1
 810ad6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810ad6e:	f7f8 fcd5 	bl	810371c <HAL_GetTick>
 810ad72:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 810ad74:	887b      	ldrh	r3, [r7, #2]
 810ad76:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 810ad78:	887b      	ldrh	r3, [r7, #2]
 810ad7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 810ad7c:	68fb      	ldr	r3, [r7, #12]
 810ad7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ad82:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 810ad84:	68fb      	ldr	r3, [r7, #12]
 810ad86:	685b      	ldr	r3, [r3, #4]
 810ad88:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 810ad8a:	7efb      	ldrb	r3, [r7, #27]
 810ad8c:	2b01      	cmp	r3, #1
 810ad8e:	d014      	beq.n	810adba <HAL_SPI_TransmitReceive+0x86>
 810ad90:	697b      	ldr	r3, [r7, #20]
 810ad92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ad96:	d106      	bne.n	810ada6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 810ad98:	68fb      	ldr	r3, [r7, #12]
 810ad9a:	689b      	ldr	r3, [r3, #8]
 810ad9c:	2b00      	cmp	r3, #0
 810ad9e:	d102      	bne.n	810ada6 <HAL_SPI_TransmitReceive+0x72>
 810ada0:	7efb      	ldrb	r3, [r7, #27]
 810ada2:	2b04      	cmp	r3, #4
 810ada4:	d009      	beq.n	810adba <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 810ada6:	2302      	movs	r3, #2
 810ada8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810adac:	68fb      	ldr	r3, [r7, #12]
 810adae:	2200      	movs	r2, #0
 810adb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810adb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810adb8:	e2a1      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810adba:	68bb      	ldr	r3, [r7, #8]
 810adbc:	2b00      	cmp	r3, #0
 810adbe:	d005      	beq.n	810adcc <HAL_SPI_TransmitReceive+0x98>
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	2b00      	cmp	r3, #0
 810adc4:	d002      	beq.n	810adcc <HAL_SPI_TransmitReceive+0x98>
 810adc6:	887b      	ldrh	r3, [r7, #2]
 810adc8:	2b00      	cmp	r3, #0
 810adca:	d109      	bne.n	810ade0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 810adcc:	2301      	movs	r3, #1
 810adce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810add2:	68fb      	ldr	r3, [r7, #12]
 810add4:	2200      	movs	r2, #0
 810add6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810adda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810adde:	e28e      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810ade0:	68fb      	ldr	r3, [r7, #12]
 810ade2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ade6:	b2db      	uxtb	r3, r3
 810ade8:	2b04      	cmp	r3, #4
 810adea:	d003      	beq.n	810adf4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810adec:	68fb      	ldr	r3, [r7, #12]
 810adee:	2205      	movs	r2, #5
 810adf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810adf4:	68fb      	ldr	r3, [r7, #12]
 810adf6:	2200      	movs	r2, #0
 810adf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810adfc:	68fb      	ldr	r3, [r7, #12]
 810adfe:	687a      	ldr	r2, [r7, #4]
 810ae00:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810ae02:	68fb      	ldr	r3, [r7, #12]
 810ae04:	887a      	ldrh	r2, [r7, #2]
 810ae06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 810ae0a:	68fb      	ldr	r3, [r7, #12]
 810ae0c:	887a      	ldrh	r2, [r7, #2]
 810ae0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810ae12:	68fb      	ldr	r3, [r7, #12]
 810ae14:	68ba      	ldr	r2, [r7, #8]
 810ae16:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 810ae18:	68fb      	ldr	r3, [r7, #12]
 810ae1a:	887a      	ldrh	r2, [r7, #2]
 810ae1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 810ae20:	68fb      	ldr	r3, [r7, #12]
 810ae22:	887a      	ldrh	r2, [r7, #2]
 810ae24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810ae28:	68fb      	ldr	r3, [r7, #12]
 810ae2a:	2200      	movs	r2, #0
 810ae2c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810ae2e:	68fb      	ldr	r3, [r7, #12]
 810ae30:	2200      	movs	r2, #0
 810ae32:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810ae34:	68fb      	ldr	r3, [r7, #12]
 810ae36:	681b      	ldr	r3, [r3, #0]
 810ae38:	685b      	ldr	r3, [r3, #4]
 810ae3a:	0c1b      	lsrs	r3, r3, #16
 810ae3c:	041b      	lsls	r3, r3, #16
 810ae3e:	8879      	ldrh	r1, [r7, #2]
 810ae40:	68fa      	ldr	r2, [r7, #12]
 810ae42:	6812      	ldr	r2, [r2, #0]
 810ae44:	430b      	orrs	r3, r1
 810ae46:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810ae48:	68fb      	ldr	r3, [r7, #12]
 810ae4a:	681b      	ldr	r3, [r3, #0]
 810ae4c:	681a      	ldr	r2, [r3, #0]
 810ae4e:	68fb      	ldr	r3, [r7, #12]
 810ae50:	681b      	ldr	r3, [r3, #0]
 810ae52:	f042 0201 	orr.w	r2, r2, #1
 810ae56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810ae58:	68fb      	ldr	r3, [r7, #12]
 810ae5a:	685b      	ldr	r3, [r3, #4]
 810ae5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ae60:	d107      	bne.n	810ae72 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810ae62:	68fb      	ldr	r3, [r7, #12]
 810ae64:	681b      	ldr	r3, [r3, #0]
 810ae66:	681a      	ldr	r2, [r3, #0]
 810ae68:	68fb      	ldr	r3, [r7, #12]
 810ae6a:	681b      	ldr	r3, [r3, #0]
 810ae6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810ae70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810ae72:	68fb      	ldr	r3, [r7, #12]
 810ae74:	68db      	ldr	r3, [r3, #12]
 810ae76:	2b0f      	cmp	r3, #15
 810ae78:	d970      	bls.n	810af5c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810ae7a:	e068      	b.n	810af4e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810ae7c:	68fb      	ldr	r3, [r7, #12]
 810ae7e:	681b      	ldr	r3, [r3, #0]
 810ae80:	695b      	ldr	r3, [r3, #20]
 810ae82:	f003 0302 	and.w	r3, r3, #2
 810ae86:	2b02      	cmp	r3, #2
 810ae88:	d11a      	bne.n	810aec0 <HAL_SPI_TransmitReceive+0x18c>
 810ae8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810ae8c:	2b00      	cmp	r3, #0
 810ae8e:	d017      	beq.n	810aec0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810ae90:	68fb      	ldr	r3, [r7, #12]
 810ae92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ae94:	68fb      	ldr	r3, [r7, #12]
 810ae96:	681b      	ldr	r3, [r3, #0]
 810ae98:	6812      	ldr	r2, [r2, #0]
 810ae9a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810ae9c:	68fb      	ldr	r3, [r7, #12]
 810ae9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810aea0:	1d1a      	adds	r2, r3, #4
 810aea2:	68fb      	ldr	r3, [r7, #12]
 810aea4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810aea6:	68fb      	ldr	r3, [r7, #12]
 810aea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810aeac:	b29b      	uxth	r3, r3
 810aeae:	3b01      	subs	r3, #1
 810aeb0:	b29a      	uxth	r2, r3
 810aeb2:	68fb      	ldr	r3, [r7, #12]
 810aeb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810aeb8:	68fb      	ldr	r3, [r7, #12]
 810aeba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810aebe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 810aec0:	68fb      	ldr	r3, [r7, #12]
 810aec2:	681b      	ldr	r3, [r3, #0]
 810aec4:	695a      	ldr	r2, [r3, #20]
 810aec6:	f248 0308 	movw	r3, #32776	; 0x8008
 810aeca:	4013      	ands	r3, r2
 810aecc:	2b00      	cmp	r3, #0
 810aece:	d01a      	beq.n	810af06 <HAL_SPI_TransmitReceive+0x1d2>
 810aed0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810aed2:	2b00      	cmp	r3, #0
 810aed4:	d017      	beq.n	810af06 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810aed6:	68fb      	ldr	r3, [r7, #12]
 810aed8:	681a      	ldr	r2, [r3, #0]
 810aeda:	68fb      	ldr	r3, [r7, #12]
 810aedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aede:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810aee0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810aee2:	68fb      	ldr	r3, [r7, #12]
 810aee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aee6:	1d1a      	adds	r2, r3, #4
 810aee8:	68fb      	ldr	r3, [r7, #12]
 810aeea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 810aeec:	68fb      	ldr	r3, [r7, #12]
 810aeee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810aef2:	b29b      	uxth	r3, r3
 810aef4:	3b01      	subs	r3, #1
 810aef6:	b29a      	uxth	r2, r3
 810aef8:	68fb      	ldr	r3, [r7, #12]
 810aefa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810aefe:	68fb      	ldr	r3, [r7, #12]
 810af00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810af04:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810af06:	f7f8 fc09 	bl	810371c <HAL_GetTick>
 810af0a:	4602      	mov	r2, r0
 810af0c:	69fb      	ldr	r3, [r7, #28]
 810af0e:	1ad3      	subs	r3, r2, r3
 810af10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810af12:	429a      	cmp	r2, r3
 810af14:	d803      	bhi.n	810af1e <HAL_SPI_TransmitReceive+0x1ea>
 810af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 810af1c:	d102      	bne.n	810af24 <HAL_SPI_TransmitReceive+0x1f0>
 810af1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810af20:	2b00      	cmp	r3, #0
 810af22:	d114      	bne.n	810af4e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810af24:	68f8      	ldr	r0, [r7, #12]
 810af26:	f000 fc11 	bl	810b74c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810af2a:	68fb      	ldr	r3, [r7, #12]
 810af2c:	2200      	movs	r2, #0
 810af2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810af32:	68fb      	ldr	r3, [r7, #12]
 810af34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810af38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810af3c:	68fb      	ldr	r3, [r7, #12]
 810af3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810af42:	68fb      	ldr	r3, [r7, #12]
 810af44:	2201      	movs	r2, #1
 810af46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810af4a:	2301      	movs	r3, #1
 810af4c:	e1d7      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810af4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810af50:	2b00      	cmp	r3, #0
 810af52:	d193      	bne.n	810ae7c <HAL_SPI_TransmitReceive+0x148>
 810af54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810af56:	2b00      	cmp	r3, #0
 810af58:	d190      	bne.n	810ae7c <HAL_SPI_TransmitReceive+0x148>
 810af5a:	e1a9      	b.n	810b2b0 <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	68db      	ldr	r3, [r3, #12]
 810af60:	2b07      	cmp	r3, #7
 810af62:	f240 819d 	bls.w	810b2a0 <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810af66:	e0a6      	b.n	810b0b6 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810af68:	68fb      	ldr	r3, [r7, #12]
 810af6a:	681b      	ldr	r3, [r3, #0]
 810af6c:	695b      	ldr	r3, [r3, #20]
 810af6e:	f003 0302 	and.w	r3, r3, #2
 810af72:	2b02      	cmp	r3, #2
 810af74:	d139      	bne.n	810afea <HAL_SPI_TransmitReceive+0x2b6>
 810af76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810af78:	2b00      	cmp	r3, #0
 810af7a:	d036      	beq.n	810afea <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810af7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810af7e:	2b01      	cmp	r3, #1
 810af80:	d91c      	bls.n	810afbc <HAL_SPI_TransmitReceive+0x288>
 810af82:	68fb      	ldr	r3, [r7, #12]
 810af84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810af86:	2b00      	cmp	r3, #0
 810af88:	d018      	beq.n	810afbc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810af8a:	68fb      	ldr	r3, [r7, #12]
 810af8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810af8e:	68fb      	ldr	r3, [r7, #12]
 810af90:	681b      	ldr	r3, [r3, #0]
 810af92:	6812      	ldr	r2, [r2, #0]
 810af94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810af96:	68fb      	ldr	r3, [r7, #12]
 810af98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810af9a:	1d1a      	adds	r2, r3, #4
 810af9c:	68fb      	ldr	r3, [r7, #12]
 810af9e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810afa0:	68fb      	ldr	r3, [r7, #12]
 810afa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810afa6:	b29b      	uxth	r3, r3
 810afa8:	3b02      	subs	r3, #2
 810afaa:	b29a      	uxth	r2, r3
 810afac:	68fb      	ldr	r3, [r7, #12]
 810afae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810afb2:	68fb      	ldr	r3, [r7, #12]
 810afb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810afb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810afba:	e016      	b.n	810afea <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810afbc:	68fb      	ldr	r3, [r7, #12]
 810afbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810afc0:	881a      	ldrh	r2, [r3, #0]
 810afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810afc4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810afc6:	68fb      	ldr	r3, [r7, #12]
 810afc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810afca:	1c9a      	adds	r2, r3, #2
 810afcc:	68fb      	ldr	r3, [r7, #12]
 810afce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810afd6:	b29b      	uxth	r3, r3
 810afd8:	3b01      	subs	r3, #1
 810afda:	b29a      	uxth	r2, r3
 810afdc:	68fb      	ldr	r3, [r7, #12]
 810afde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810afe2:	68fb      	ldr	r3, [r7, #12]
 810afe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810afe8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810afea:	68fb      	ldr	r3, [r7, #12]
 810afec:	681b      	ldr	r3, [r3, #0]
 810afee:	695b      	ldr	r3, [r3, #20]
 810aff0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810aff4:	2b00      	cmp	r3, #0
 810aff6:	d03a      	beq.n	810b06e <HAL_SPI_TransmitReceive+0x33a>
 810aff8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810affa:	2b00      	cmp	r3, #0
 810affc:	d037      	beq.n	810b06e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810affe:	68fb      	ldr	r3, [r7, #12]
 810b000:	681b      	ldr	r3, [r3, #0]
 810b002:	695b      	ldr	r3, [r3, #20]
 810b004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b008:	2b00      	cmp	r3, #0
 810b00a:	d018      	beq.n	810b03e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b00c:	68fb      	ldr	r3, [r7, #12]
 810b00e:	681a      	ldr	r2, [r3, #0]
 810b010:	68fb      	ldr	r3, [r7, #12]
 810b012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b014:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b016:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b01c:	1d1a      	adds	r2, r3, #4
 810b01e:	68fb      	ldr	r3, [r7, #12]
 810b020:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b022:	68fb      	ldr	r3, [r7, #12]
 810b024:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b028:	b29b      	uxth	r3, r3
 810b02a:	3b02      	subs	r3, #2
 810b02c:	b29a      	uxth	r2, r3
 810b02e:	68fb      	ldr	r3, [r7, #12]
 810b030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b034:	68fb      	ldr	r3, [r7, #12]
 810b036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b03a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b03c:	e017      	b.n	810b06e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b03e:	68fb      	ldr	r3, [r7, #12]
 810b040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b042:	6a3a      	ldr	r2, [r7, #32]
 810b044:	8812      	ldrh	r2, [r2, #0]
 810b046:	b292      	uxth	r2, r2
 810b048:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b04a:	68fb      	ldr	r3, [r7, #12]
 810b04c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b04e:	1c9a      	adds	r2, r3, #2
 810b050:	68fb      	ldr	r3, [r7, #12]
 810b052:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b054:	68fb      	ldr	r3, [r7, #12]
 810b056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b05a:	b29b      	uxth	r3, r3
 810b05c:	3b01      	subs	r3, #1
 810b05e:	b29a      	uxth	r2, r3
 810b060:	68fb      	ldr	r3, [r7, #12]
 810b062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b066:	68fb      	ldr	r3, [r7, #12]
 810b068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b06c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b06e:	f7f8 fb55 	bl	810371c <HAL_GetTick>
 810b072:	4602      	mov	r2, r0
 810b074:	69fb      	ldr	r3, [r7, #28]
 810b076:	1ad3      	subs	r3, r2, r3
 810b078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b07a:	429a      	cmp	r2, r3
 810b07c:	d803      	bhi.n	810b086 <HAL_SPI_TransmitReceive+0x352>
 810b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b084:	d102      	bne.n	810b08c <HAL_SPI_TransmitReceive+0x358>
 810b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b088:	2b00      	cmp	r3, #0
 810b08a:	d114      	bne.n	810b0b6 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b08c:	68f8      	ldr	r0, [r7, #12]
 810b08e:	f000 fb5d 	bl	810b74c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b092:	68fb      	ldr	r3, [r7, #12]
 810b094:	2200      	movs	r2, #0
 810b096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b09a:	68fb      	ldr	r3, [r7, #12]
 810b09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b0a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b0a4:	68fb      	ldr	r3, [r7, #12]
 810b0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b0aa:	68fb      	ldr	r3, [r7, #12]
 810b0ac:	2201      	movs	r2, #1
 810b0ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b0b2:	2301      	movs	r3, #1
 810b0b4:	e123      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b0b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b0b8:	2b00      	cmp	r3, #0
 810b0ba:	f47f af55 	bne.w	810af68 <HAL_SPI_TransmitReceive+0x234>
 810b0be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b0c0:	2b00      	cmp	r3, #0
 810b0c2:	f47f af51 	bne.w	810af68 <HAL_SPI_TransmitReceive+0x234>
 810b0c6:	e0f3      	b.n	810b2b0 <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810b0c8:	68fb      	ldr	r3, [r7, #12]
 810b0ca:	681b      	ldr	r3, [r3, #0]
 810b0cc:	695b      	ldr	r3, [r3, #20]
 810b0ce:	f003 0302 	and.w	r3, r3, #2
 810b0d2:	2b02      	cmp	r3, #2
 810b0d4:	d15a      	bne.n	810b18c <HAL_SPI_TransmitReceive+0x458>
 810b0d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b0d8:	2b00      	cmp	r3, #0
 810b0da:	d057      	beq.n	810b18c <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810b0dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b0de:	2b03      	cmp	r3, #3
 810b0e0:	d91c      	bls.n	810b11c <HAL_SPI_TransmitReceive+0x3e8>
 810b0e2:	68fb      	ldr	r3, [r7, #12]
 810b0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b0e6:	2b40      	cmp	r3, #64	; 0x40
 810b0e8:	d918      	bls.n	810b11c <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b0ea:	68fb      	ldr	r3, [r7, #12]
 810b0ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b0ee:	68fb      	ldr	r3, [r7, #12]
 810b0f0:	681b      	ldr	r3, [r3, #0]
 810b0f2:	6812      	ldr	r2, [r2, #0]
 810b0f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810b0f6:	68fb      	ldr	r3, [r7, #12]
 810b0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b0fa:	1d1a      	adds	r2, r3, #4
 810b0fc:	68fb      	ldr	r3, [r7, #12]
 810b0fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810b100:	68fb      	ldr	r3, [r7, #12]
 810b102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b106:	b29b      	uxth	r3, r3
 810b108:	3b04      	subs	r3, #4
 810b10a:	b29a      	uxth	r2, r3
 810b10c:	68fb      	ldr	r3, [r7, #12]
 810b10e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b112:	68fb      	ldr	r3, [r7, #12]
 810b114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b118:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b11a:	e037      	b.n	810b18c <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810b11c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b11e:	2b01      	cmp	r3, #1
 810b120:	d91b      	bls.n	810b15a <HAL_SPI_TransmitReceive+0x426>
 810b122:	68fb      	ldr	r3, [r7, #12]
 810b124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b126:	2b00      	cmp	r3, #0
 810b128:	d017      	beq.n	810b15a <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810b12a:	68fb      	ldr	r3, [r7, #12]
 810b12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b12e:	881a      	ldrh	r2, [r3, #0]
 810b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b132:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810b134:	68fb      	ldr	r3, [r7, #12]
 810b136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b138:	1c9a      	adds	r2, r3, #2
 810b13a:	68fb      	ldr	r3, [r7, #12]
 810b13c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810b13e:	68fb      	ldr	r3, [r7, #12]
 810b140:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b144:	b29b      	uxth	r3, r3
 810b146:	3b02      	subs	r3, #2
 810b148:	b29a      	uxth	r2, r3
 810b14a:	68fb      	ldr	r3, [r7, #12]
 810b14c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b150:	68fb      	ldr	r3, [r7, #12]
 810b152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b156:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b158:	e018      	b.n	810b18c <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810b15a:	68fb      	ldr	r3, [r7, #12]
 810b15c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b15e:	68fb      	ldr	r3, [r7, #12]
 810b160:	681b      	ldr	r3, [r3, #0]
 810b162:	3320      	adds	r3, #32
 810b164:	7812      	ldrb	r2, [r2, #0]
 810b166:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810b168:	68fb      	ldr	r3, [r7, #12]
 810b16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b16c:	1c5a      	adds	r2, r3, #1
 810b16e:	68fb      	ldr	r3, [r7, #12]
 810b170:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810b172:	68fb      	ldr	r3, [r7, #12]
 810b174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b178:	b29b      	uxth	r3, r3
 810b17a:	3b01      	subs	r3, #1
 810b17c:	b29a      	uxth	r2, r3
 810b17e:	68fb      	ldr	r3, [r7, #12]
 810b180:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b184:	68fb      	ldr	r3, [r7, #12]
 810b186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b18a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810b18c:	68fb      	ldr	r3, [r7, #12]
 810b18e:	681b      	ldr	r3, [r3, #0]
 810b190:	695b      	ldr	r3, [r3, #20]
 810b192:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b196:	2b00      	cmp	r3, #0
 810b198:	d05e      	beq.n	810b258 <HAL_SPI_TransmitReceive+0x524>
 810b19a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b19c:	2b00      	cmp	r3, #0
 810b19e:	d05b      	beq.n	810b258 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b1a0:	68fb      	ldr	r3, [r7, #12]
 810b1a2:	681b      	ldr	r3, [r3, #0]
 810b1a4:	695b      	ldr	r3, [r3, #20]
 810b1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b1aa:	2b00      	cmp	r3, #0
 810b1ac:	d018      	beq.n	810b1e0 <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b1ae:	68fb      	ldr	r3, [r7, #12]
 810b1b0:	681a      	ldr	r2, [r3, #0]
 810b1b2:	68fb      	ldr	r3, [r7, #12]
 810b1b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b1b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b1b8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b1ba:	68fb      	ldr	r3, [r7, #12]
 810b1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b1be:	1d1a      	adds	r2, r3, #4
 810b1c0:	68fb      	ldr	r3, [r7, #12]
 810b1c2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810b1c4:	68fb      	ldr	r3, [r7, #12]
 810b1c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b1ca:	b29b      	uxth	r3, r3
 810b1cc:	3b04      	subs	r3, #4
 810b1ce:	b29a      	uxth	r2, r3
 810b1d0:	68fb      	ldr	r3, [r7, #12]
 810b1d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b1d6:	68fb      	ldr	r3, [r7, #12]
 810b1d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b1dc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b1de:	e03b      	b.n	810b258 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810b1e0:	68fb      	ldr	r3, [r7, #12]
 810b1e2:	681b      	ldr	r3, [r3, #0]
 810b1e4:	695b      	ldr	r3, [r3, #20]
 810b1e6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810b1ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b1ee:	d918      	bls.n	810b222 <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b1f0:	68fb      	ldr	r3, [r7, #12]
 810b1f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b1f4:	6a3a      	ldr	r2, [r7, #32]
 810b1f6:	8812      	ldrh	r2, [r2, #0]
 810b1f8:	b292      	uxth	r2, r2
 810b1fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b1fc:	68fb      	ldr	r3, [r7, #12]
 810b1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b200:	1c9a      	adds	r2, r3, #2
 810b202:	68fb      	ldr	r3, [r7, #12]
 810b204:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b206:	68fb      	ldr	r3, [r7, #12]
 810b208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b20c:	b29b      	uxth	r3, r3
 810b20e:	3b02      	subs	r3, #2
 810b210:	b29a      	uxth	r2, r3
 810b212:	68fb      	ldr	r3, [r7, #12]
 810b214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b218:	68fb      	ldr	r3, [r7, #12]
 810b21a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b21e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b220:	e01a      	b.n	810b258 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b222:	68fb      	ldr	r3, [r7, #12]
 810b224:	681b      	ldr	r3, [r3, #0]
 810b226:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810b22a:	68fb      	ldr	r3, [r7, #12]
 810b22c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b22e:	7812      	ldrb	r2, [r2, #0]
 810b230:	b2d2      	uxtb	r2, r2
 810b232:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b234:	68fb      	ldr	r3, [r7, #12]
 810b236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b238:	1c5a      	adds	r2, r3, #1
 810b23a:	68fb      	ldr	r3, [r7, #12]
 810b23c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b23e:	68fb      	ldr	r3, [r7, #12]
 810b240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b244:	b29b      	uxth	r3, r3
 810b246:	3b01      	subs	r3, #1
 810b248:	b29a      	uxth	r2, r3
 810b24a:	68fb      	ldr	r3, [r7, #12]
 810b24c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b250:	68fb      	ldr	r3, [r7, #12]
 810b252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b256:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b258:	f7f8 fa60 	bl	810371c <HAL_GetTick>
 810b25c:	4602      	mov	r2, r0
 810b25e:	69fb      	ldr	r3, [r7, #28]
 810b260:	1ad3      	subs	r3, r2, r3
 810b262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b264:	429a      	cmp	r2, r3
 810b266:	d803      	bhi.n	810b270 <HAL_SPI_TransmitReceive+0x53c>
 810b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b26e:	d102      	bne.n	810b276 <HAL_SPI_TransmitReceive+0x542>
 810b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b272:	2b00      	cmp	r3, #0
 810b274:	d114      	bne.n	810b2a0 <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b276:	68f8      	ldr	r0, [r7, #12]
 810b278:	f000 fa68 	bl	810b74c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b27c:	68fb      	ldr	r3, [r7, #12]
 810b27e:	2200      	movs	r2, #0
 810b280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b284:	68fb      	ldr	r3, [r7, #12]
 810b286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b28a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b28e:	68fb      	ldr	r3, [r7, #12]
 810b290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b294:	68fb      	ldr	r3, [r7, #12]
 810b296:	2201      	movs	r2, #1
 810b298:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b29c:	2301      	movs	r3, #1
 810b29e:	e02e      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b2a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b2a2:	2b00      	cmp	r3, #0
 810b2a4:	f47f af10 	bne.w	810b0c8 <HAL_SPI_TransmitReceive+0x394>
 810b2a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b2aa:	2b00      	cmp	r3, #0
 810b2ac:	f47f af0c 	bne.w	810b0c8 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b2b2:	9300      	str	r3, [sp, #0]
 810b2b4:	69fb      	ldr	r3, [r7, #28]
 810b2b6:	2200      	movs	r2, #0
 810b2b8:	2108      	movs	r1, #8
 810b2ba:	68f8      	ldr	r0, [r7, #12]
 810b2bc:	f000 fae6 	bl	810b88c <SPI_WaitOnFlagUntilTimeout>
 810b2c0:	4603      	mov	r3, r0
 810b2c2:	2b00      	cmp	r3, #0
 810b2c4:	d007      	beq.n	810b2d6 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810b2c6:	68fb      	ldr	r3, [r7, #12]
 810b2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2cc:	f043 0220 	orr.w	r2, r3, #32
 810b2d0:	68fb      	ldr	r3, [r7, #12]
 810b2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810b2d6:	68f8      	ldr	r0, [r7, #12]
 810b2d8:	f000 fa38 	bl	810b74c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810b2dc:	68fb      	ldr	r3, [r7, #12]
 810b2de:	2200      	movs	r2, #0
 810b2e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810b2e4:	68fb      	ldr	r3, [r7, #12]
 810b2e6:	2201      	movs	r2, #1
 810b2e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b2ec:	68fb      	ldr	r3, [r7, #12]
 810b2ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2f2:	2b00      	cmp	r3, #0
 810b2f4:	d001      	beq.n	810b2fa <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 810b2f6:	2301      	movs	r3, #1
 810b2f8:	e001      	b.n	810b2fe <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 810b2fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810b2fe:	4618      	mov	r0, r3
 810b300:	3730      	adds	r7, #48	; 0x30
 810b302:	46bd      	mov	sp, r7
 810b304:	bd80      	pop	{r7, pc}
	...

0810b308 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810b308:	b580      	push	{r7, lr}
 810b30a:	b08a      	sub	sp, #40	; 0x28
 810b30c:	af00      	add	r7, sp, #0
 810b30e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810b310:	687b      	ldr	r3, [r7, #4]
 810b312:	681b      	ldr	r3, [r3, #0]
 810b314:	691b      	ldr	r3, [r3, #16]
 810b316:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810b318:	687b      	ldr	r3, [r7, #4]
 810b31a:	681b      	ldr	r3, [r3, #0]
 810b31c:	695b      	ldr	r3, [r3, #20]
 810b31e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810b320:	6a3a      	ldr	r2, [r7, #32]
 810b322:	69fb      	ldr	r3, [r7, #28]
 810b324:	4013      	ands	r3, r2
 810b326:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810b328:	687b      	ldr	r3, [r7, #4]
 810b32a:	681b      	ldr	r3, [r3, #0]
 810b32c:	689b      	ldr	r3, [r3, #8]
 810b32e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810b330:	2300      	movs	r3, #0
 810b332:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810b334:	687b      	ldr	r3, [r7, #4]
 810b336:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b33a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810b33c:	687b      	ldr	r3, [r7, #4]
 810b33e:	681b      	ldr	r3, [r3, #0]
 810b340:	3330      	adds	r3, #48	; 0x30
 810b342:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810b344:	69bb      	ldr	r3, [r7, #24]
 810b346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b34a:	2b00      	cmp	r3, #0
 810b34c:	d113      	bne.n	810b376 <HAL_SPI_IRQHandler+0x6e>
 810b34e:	69bb      	ldr	r3, [r7, #24]
 810b350:	f003 0320 	and.w	r3, r3, #32
 810b354:	2b00      	cmp	r3, #0
 810b356:	d10e      	bne.n	810b376 <HAL_SPI_IRQHandler+0x6e>
 810b358:	69bb      	ldr	r3, [r7, #24]
 810b35a:	f003 0304 	and.w	r3, r3, #4
 810b35e:	2b00      	cmp	r3, #0
 810b360:	d009      	beq.n	810b376 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810b362:	687b      	ldr	r3, [r7, #4]
 810b364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b366:	6878      	ldr	r0, [r7, #4]
 810b368:	4798      	blx	r3
    hspi->RxISR(hspi);
 810b36a:	687b      	ldr	r3, [r7, #4]
 810b36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b36e:	6878      	ldr	r0, [r7, #4]
 810b370:	4798      	blx	r3
    handled = 1UL;
 810b372:	2301      	movs	r3, #1
 810b374:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810b376:	69bb      	ldr	r3, [r7, #24]
 810b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b37c:	2b00      	cmp	r3, #0
 810b37e:	d10f      	bne.n	810b3a0 <HAL_SPI_IRQHandler+0x98>
 810b380:	69bb      	ldr	r3, [r7, #24]
 810b382:	f003 0301 	and.w	r3, r3, #1
 810b386:	2b00      	cmp	r3, #0
 810b388:	d00a      	beq.n	810b3a0 <HAL_SPI_IRQHandler+0x98>
 810b38a:	69bb      	ldr	r3, [r7, #24]
 810b38c:	f003 0304 	and.w	r3, r3, #4
 810b390:	2b00      	cmp	r3, #0
 810b392:	d105      	bne.n	810b3a0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810b394:	687b      	ldr	r3, [r7, #4]
 810b396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b398:	6878      	ldr	r0, [r7, #4]
 810b39a:	4798      	blx	r3
    handled = 1UL;
 810b39c:	2301      	movs	r3, #1
 810b39e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810b3a0:	69bb      	ldr	r3, [r7, #24]
 810b3a2:	f003 0320 	and.w	r3, r3, #32
 810b3a6:	2b00      	cmp	r3, #0
 810b3a8:	d10f      	bne.n	810b3ca <HAL_SPI_IRQHandler+0xc2>
 810b3aa:	69bb      	ldr	r3, [r7, #24]
 810b3ac:	f003 0302 	and.w	r3, r3, #2
 810b3b0:	2b00      	cmp	r3, #0
 810b3b2:	d00a      	beq.n	810b3ca <HAL_SPI_IRQHandler+0xc2>
 810b3b4:	69bb      	ldr	r3, [r7, #24]
 810b3b6:	f003 0304 	and.w	r3, r3, #4
 810b3ba:	2b00      	cmp	r3, #0
 810b3bc:	d105      	bne.n	810b3ca <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810b3be:	687b      	ldr	r3, [r7, #4]
 810b3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b3c2:	6878      	ldr	r0, [r7, #4]
 810b3c4:	4798      	blx	r3
    handled = 1UL;
 810b3c6:	2301      	movs	r3, #1
 810b3c8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b3cc:	2b00      	cmp	r3, #0
 810b3ce:	f040 8171 	bne.w	810b6b4 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810b3d2:	69bb      	ldr	r3, [r7, #24]
 810b3d4:	f003 0308 	and.w	r3, r3, #8
 810b3d8:	2b00      	cmp	r3, #0
 810b3da:	f000 80a0 	beq.w	810b51e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810b3de:	687b      	ldr	r3, [r7, #4]
 810b3e0:	681b      	ldr	r3, [r3, #0]
 810b3e2:	699a      	ldr	r2, [r3, #24]
 810b3e4:	687b      	ldr	r3, [r7, #4]
 810b3e6:	681b      	ldr	r3, [r3, #0]
 810b3e8:	f042 0208 	orr.w	r2, r2, #8
 810b3ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810b3ee:	687b      	ldr	r3, [r7, #4]
 810b3f0:	681b      	ldr	r3, [r3, #0]
 810b3f2:	699a      	ldr	r2, [r3, #24]
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	681b      	ldr	r3, [r3, #0]
 810b3f8:	f042 0210 	orr.w	r2, r2, #16
 810b3fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810b3fe:	687b      	ldr	r3, [r7, #4]
 810b400:	681b      	ldr	r3, [r3, #0]
 810b402:	699a      	ldr	r2, [r3, #24]
 810b404:	687b      	ldr	r3, [r7, #4]
 810b406:	681b      	ldr	r3, [r3, #0]
 810b408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810b40c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810b40e:	687b      	ldr	r3, [r7, #4]
 810b410:	681b      	ldr	r3, [r3, #0]
 810b412:	691a      	ldr	r2, [r3, #16]
 810b414:	687b      	ldr	r3, [r7, #4]
 810b416:	681b      	ldr	r3, [r3, #0]
 810b418:	f022 0208 	bic.w	r2, r2, #8
 810b41c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810b41e:	697b      	ldr	r3, [r7, #20]
 810b420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810b424:	2b00      	cmp	r3, #0
 810b426:	d00f      	beq.n	810b448 <HAL_SPI_IRQHandler+0x140>
 810b428:	7cfb      	ldrb	r3, [r7, #19]
 810b42a:	2b04      	cmp	r3, #4
 810b42c:	d004      	beq.n	810b438 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810b42e:	687b      	ldr	r3, [r7, #4]
 810b430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b432:	69db      	ldr	r3, [r3, #28]
 810b434:	2b00      	cmp	r3, #0
 810b436:	d007      	beq.n	810b448 <HAL_SPI_IRQHandler+0x140>
 810b438:	7cfb      	ldrb	r3, [r7, #19]
 810b43a:	2b03      	cmp	r3, #3
 810b43c:	d059      	beq.n	810b4f2 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810b43e:	687b      	ldr	r3, [r7, #4]
 810b440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b442:	69db      	ldr	r3, [r3, #28]
 810b444:	2b00      	cmp	r3, #0
 810b446:	d154      	bne.n	810b4f2 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810b448:	687b      	ldr	r3, [r7, #4]
 810b44a:	681b      	ldr	r3, [r3, #0]
 810b44c:	689b      	ldr	r3, [r3, #8]
 810b44e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810b452:	2b00      	cmp	r3, #0
 810b454:	d13d      	bne.n	810b4d2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810b456:	e036      	b.n	810b4c6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810b458:	687b      	ldr	r3, [r7, #4]
 810b45a:	68db      	ldr	r3, [r3, #12]
 810b45c:	2b0f      	cmp	r3, #15
 810b45e:	d90b      	bls.n	810b478 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b460:	687b      	ldr	r3, [r7, #4]
 810b462:	681a      	ldr	r2, [r3, #0]
 810b464:	687b      	ldr	r3, [r7, #4]
 810b466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b468:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b46a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810b46c:	687b      	ldr	r3, [r7, #4]
 810b46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b470:	1d1a      	adds	r2, r3, #4
 810b472:	687b      	ldr	r3, [r7, #4]
 810b474:	665a      	str	r2, [r3, #100]	; 0x64
 810b476:	e01d      	b.n	810b4b4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810b478:	687b      	ldr	r3, [r7, #4]
 810b47a:	68db      	ldr	r3, [r3, #12]
 810b47c:	2b07      	cmp	r3, #7
 810b47e:	d90b      	bls.n	810b498 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b480:	687b      	ldr	r3, [r7, #4]
 810b482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b484:	68fa      	ldr	r2, [r7, #12]
 810b486:	8812      	ldrh	r2, [r2, #0]
 810b488:	b292      	uxth	r2, r2
 810b48a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810b48c:	687b      	ldr	r3, [r7, #4]
 810b48e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b490:	1c9a      	adds	r2, r3, #2
 810b492:	687b      	ldr	r3, [r7, #4]
 810b494:	665a      	str	r2, [r3, #100]	; 0x64
 810b496:	e00d      	b.n	810b4b4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	681b      	ldr	r3, [r3, #0]
 810b49c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810b4a0:	687b      	ldr	r3, [r7, #4]
 810b4a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b4a4:	7812      	ldrb	r2, [r2, #0]
 810b4a6:	b2d2      	uxtb	r2, r2
 810b4a8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810b4aa:	687b      	ldr	r3, [r7, #4]
 810b4ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b4ae:	1c5a      	adds	r2, r3, #1
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810b4b4:	687b      	ldr	r3, [r7, #4]
 810b4b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b4ba:	b29b      	uxth	r3, r3
 810b4bc:	3b01      	subs	r3, #1
 810b4be:	b29a      	uxth	r2, r3
 810b4c0:	687b      	ldr	r3, [r7, #4]
 810b4c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810b4c6:	687b      	ldr	r3, [r7, #4]
 810b4c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b4cc:	b29b      	uxth	r3, r3
 810b4ce:	2b00      	cmp	r3, #0
 810b4d0:	d1c2      	bne.n	810b458 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810b4d2:	6878      	ldr	r0, [r7, #4]
 810b4d4:	f000 f93a 	bl	810b74c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810b4d8:	687b      	ldr	r3, [r7, #4]
 810b4da:	2201      	movs	r2, #1
 810b4dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b4e6:	2b00      	cmp	r3, #0
 810b4e8:	d003      	beq.n	810b4f2 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810b4ea:	6878      	ldr	r0, [r7, #4]
 810b4ec:	f000 f90a 	bl	810b704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810b4f0:	e0e5      	b.n	810b6be <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810b4f2:	7cfb      	ldrb	r3, [r7, #19]
 810b4f4:	2b05      	cmp	r3, #5
 810b4f6:	d103      	bne.n	810b500 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810b4f8:	6878      	ldr	r0, [r7, #4]
 810b4fa:	f000 f8f9 	bl	810b6f0 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810b4fe:	e0db      	b.n	810b6b8 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810b500:	7cfb      	ldrb	r3, [r7, #19]
 810b502:	2b04      	cmp	r3, #4
 810b504:	d103      	bne.n	810b50e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810b506:	6878      	ldr	r0, [r7, #4]
 810b508:	f000 f8e8 	bl	810b6dc <HAL_SPI_RxCpltCallback>
    return;
 810b50c:	e0d4      	b.n	810b6b8 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810b50e:	7cfb      	ldrb	r3, [r7, #19]
 810b510:	2b03      	cmp	r3, #3
 810b512:	f040 80d1 	bne.w	810b6b8 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810b516:	6878      	ldr	r0, [r7, #4]
 810b518:	f000 f8d6 	bl	810b6c8 <HAL_SPI_TxCpltCallback>
    return;
 810b51c:	e0cc      	b.n	810b6b8 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810b51e:	69fb      	ldr	r3, [r7, #28]
 810b520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b524:	2b00      	cmp	r3, #0
 810b526:	d00d      	beq.n	810b544 <HAL_SPI_IRQHandler+0x23c>
 810b528:	6a3b      	ldr	r3, [r7, #32]
 810b52a:	f003 0308 	and.w	r3, r3, #8
 810b52e:	2b00      	cmp	r3, #0
 810b530:	d008      	beq.n	810b544 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810b532:	687b      	ldr	r3, [r7, #4]
 810b534:	681b      	ldr	r3, [r3, #0]
 810b536:	699a      	ldr	r2, [r3, #24]
 810b538:	687b      	ldr	r3, [r7, #4]
 810b53a:	681b      	ldr	r3, [r3, #0]
 810b53c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810b540:	619a      	str	r2, [r3, #24]

    return;
 810b542:	e0bc      	b.n	810b6be <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810b544:	69bb      	ldr	r3, [r7, #24]
 810b546:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810b54a:	2b00      	cmp	r3, #0
 810b54c:	f000 80b7 	beq.w	810b6be <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810b550:	69bb      	ldr	r3, [r7, #24]
 810b552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b556:	2b00      	cmp	r3, #0
 810b558:	d00f      	beq.n	810b57a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810b55a:	687b      	ldr	r3, [r7, #4]
 810b55c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b560:	f043 0204 	orr.w	r2, r3, #4
 810b564:	687b      	ldr	r3, [r7, #4]
 810b566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810b56a:	687b      	ldr	r3, [r7, #4]
 810b56c:	681b      	ldr	r3, [r3, #0]
 810b56e:	699a      	ldr	r2, [r3, #24]
 810b570:	687b      	ldr	r3, [r7, #4]
 810b572:	681b      	ldr	r3, [r3, #0]
 810b574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810b578:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810b57a:	69bb      	ldr	r3, [r7, #24]
 810b57c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810b580:	2b00      	cmp	r3, #0
 810b582:	d00f      	beq.n	810b5a4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810b584:	687b      	ldr	r3, [r7, #4]
 810b586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b58a:	f043 0201 	orr.w	r2, r3, #1
 810b58e:	687b      	ldr	r3, [r7, #4]
 810b590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	681b      	ldr	r3, [r3, #0]
 810b598:	699a      	ldr	r2, [r3, #24]
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	681b      	ldr	r3, [r3, #0]
 810b59e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b5a2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810b5a4:	69bb      	ldr	r3, [r7, #24]
 810b5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b5aa:	2b00      	cmp	r3, #0
 810b5ac:	d00f      	beq.n	810b5ce <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810b5ae:	687b      	ldr	r3, [r7, #4]
 810b5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b5b4:	f043 0208 	orr.w	r2, r3, #8
 810b5b8:	687b      	ldr	r3, [r7, #4]
 810b5ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810b5be:	687b      	ldr	r3, [r7, #4]
 810b5c0:	681b      	ldr	r3, [r3, #0]
 810b5c2:	699a      	ldr	r2, [r3, #24]
 810b5c4:	687b      	ldr	r3, [r7, #4]
 810b5c6:	681b      	ldr	r3, [r3, #0]
 810b5c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810b5cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810b5ce:	69bb      	ldr	r3, [r7, #24]
 810b5d0:	f003 0320 	and.w	r3, r3, #32
 810b5d4:	2b00      	cmp	r3, #0
 810b5d6:	d00f      	beq.n	810b5f8 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b5de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810b5e2:	687b      	ldr	r3, [r7, #4]
 810b5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	681b      	ldr	r3, [r3, #0]
 810b5ec:	699a      	ldr	r2, [r3, #24]
 810b5ee:	687b      	ldr	r3, [r7, #4]
 810b5f0:	681b      	ldr	r3, [r3, #0]
 810b5f2:	f042 0220 	orr.w	r2, r2, #32
 810b5f6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b5f8:	687b      	ldr	r3, [r7, #4]
 810b5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b5fe:	2b00      	cmp	r3, #0
 810b600:	d05c      	beq.n	810b6bc <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810b602:	687b      	ldr	r3, [r7, #4]
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	681a      	ldr	r2, [r3, #0]
 810b608:	687b      	ldr	r3, [r7, #4]
 810b60a:	681b      	ldr	r3, [r3, #0]
 810b60c:	f022 0201 	bic.w	r2, r2, #1
 810b610:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	691b      	ldr	r3, [r3, #16]
 810b618:	687a      	ldr	r2, [r7, #4]
 810b61a:	6812      	ldr	r2, [r2, #0]
 810b61c:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810b620:	f023 0303 	bic.w	r3, r3, #3
 810b624:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810b626:	697b      	ldr	r3, [r7, #20]
 810b628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810b62c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810b630:	d138      	bne.n	810b6a4 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810b632:	687b      	ldr	r3, [r7, #4]
 810b634:	681b      	ldr	r3, [r3, #0]
 810b636:	689a      	ldr	r2, [r3, #8]
 810b638:	687b      	ldr	r3, [r7, #4]
 810b63a:	681b      	ldr	r3, [r3, #0]
 810b63c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810b640:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b646:	2b00      	cmp	r3, #0
 810b648:	d013      	beq.n	810b672 <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810b64a:	687b      	ldr	r3, [r7, #4]
 810b64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b64e:	4a1d      	ldr	r2, [pc, #116]	; (810b6c4 <HAL_SPI_IRQHandler+0x3bc>)
 810b650:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810b652:	687b      	ldr	r3, [r7, #4]
 810b654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b656:	4618      	mov	r0, r3
 810b658:	f7f9 fd88 	bl	810516c <HAL_DMA_Abort_IT>
 810b65c:	4603      	mov	r3, r0
 810b65e:	2b00      	cmp	r3, #0
 810b660:	d007      	beq.n	810b672 <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810b66c:	687b      	ldr	r3, [r7, #4]
 810b66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810b672:	687b      	ldr	r3, [r7, #4]
 810b674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b676:	2b00      	cmp	r3, #0
 810b678:	d020      	beq.n	810b6bc <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810b67a:	687b      	ldr	r3, [r7, #4]
 810b67c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b67e:	4a11      	ldr	r2, [pc, #68]	; (810b6c4 <HAL_SPI_IRQHandler+0x3bc>)
 810b680:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810b682:	687b      	ldr	r3, [r7, #4]
 810b684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b686:	4618      	mov	r0, r3
 810b688:	f7f9 fd70 	bl	810516c <HAL_DMA_Abort_IT>
 810b68c:	4603      	mov	r3, r0
 810b68e:	2b00      	cmp	r3, #0
 810b690:	d014      	beq.n	810b6bc <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810b692:	687b      	ldr	r3, [r7, #4]
 810b694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810b69c:	687b      	ldr	r3, [r7, #4]
 810b69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810b6a2:	e00b      	b.n	810b6bc <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810b6a4:	687b      	ldr	r3, [r7, #4]
 810b6a6:	2201      	movs	r2, #1
 810b6a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810b6ac:	6878      	ldr	r0, [r7, #4]
 810b6ae:	f000 f829 	bl	810b704 <HAL_SPI_ErrorCallback>
    return;
 810b6b2:	e003      	b.n	810b6bc <HAL_SPI_IRQHandler+0x3b4>
    return;
 810b6b4:	bf00      	nop
 810b6b6:	e002      	b.n	810b6be <HAL_SPI_IRQHandler+0x3b6>
    return;
 810b6b8:	bf00      	nop
 810b6ba:	e000      	b.n	810b6be <HAL_SPI_IRQHandler+0x3b6>
    return;
 810b6bc:	bf00      	nop
  }
}
 810b6be:	3728      	adds	r7, #40	; 0x28
 810b6c0:	46bd      	mov	sp, r7
 810b6c2:	bd80      	pop	{r7, pc}
 810b6c4:	0810b719 	.word	0x0810b719

0810b6c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810b6c8:	b480      	push	{r7}
 810b6ca:	b083      	sub	sp, #12
 810b6cc:	af00      	add	r7, sp, #0
 810b6ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810b6d0:	bf00      	nop
 810b6d2:	370c      	adds	r7, #12
 810b6d4:	46bd      	mov	sp, r7
 810b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6da:	4770      	bx	lr

0810b6dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810b6dc:	b480      	push	{r7}
 810b6de:	b083      	sub	sp, #12
 810b6e0:	af00      	add	r7, sp, #0
 810b6e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810b6e4:	bf00      	nop
 810b6e6:	370c      	adds	r7, #12
 810b6e8:	46bd      	mov	sp, r7
 810b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6ee:	4770      	bx	lr

0810b6f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810b6f0:	b480      	push	{r7}
 810b6f2:	b083      	sub	sp, #12
 810b6f4:	af00      	add	r7, sp, #0
 810b6f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 810b6f8:	bf00      	nop
 810b6fa:	370c      	adds	r7, #12
 810b6fc:	46bd      	mov	sp, r7
 810b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b702:	4770      	bx	lr

0810b704 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810b704:	b480      	push	{r7}
 810b706:	b083      	sub	sp, #12
 810b708:	af00      	add	r7, sp, #0
 810b70a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810b70c:	bf00      	nop
 810b70e:	370c      	adds	r7, #12
 810b710:	46bd      	mov	sp, r7
 810b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b716:	4770      	bx	lr

0810b718 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810b718:	b580      	push	{r7, lr}
 810b71a:	b084      	sub	sp, #16
 810b71c:	af00      	add	r7, sp, #0
 810b71e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810b720:	687b      	ldr	r3, [r7, #4]
 810b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b724:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810b726:	68fb      	ldr	r3, [r7, #12]
 810b728:	2200      	movs	r2, #0
 810b72a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810b72e:	68fb      	ldr	r3, [r7, #12]
 810b730:	2200      	movs	r2, #0
 810b732:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810b736:	68fb      	ldr	r3, [r7, #12]
 810b738:	2201      	movs	r2, #1
 810b73a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810b73e:	68f8      	ldr	r0, [r7, #12]
 810b740:	f7ff ffe0 	bl	810b704 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810b744:	bf00      	nop
 810b746:	3710      	adds	r7, #16
 810b748:	46bd      	mov	sp, r7
 810b74a:	bd80      	pop	{r7, pc}

0810b74c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810b74c:	b480      	push	{r7}
 810b74e:	b085      	sub	sp, #20
 810b750:	af00      	add	r7, sp, #0
 810b752:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810b754:	687b      	ldr	r3, [r7, #4]
 810b756:	681b      	ldr	r3, [r3, #0]
 810b758:	695b      	ldr	r3, [r3, #20]
 810b75a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810b75c:	687b      	ldr	r3, [r7, #4]
 810b75e:	681b      	ldr	r3, [r3, #0]
 810b760:	699a      	ldr	r2, [r3, #24]
 810b762:	687b      	ldr	r3, [r7, #4]
 810b764:	681b      	ldr	r3, [r3, #0]
 810b766:	f042 0208 	orr.w	r2, r2, #8
 810b76a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810b76c:	687b      	ldr	r3, [r7, #4]
 810b76e:	681b      	ldr	r3, [r3, #0]
 810b770:	699a      	ldr	r2, [r3, #24]
 810b772:	687b      	ldr	r3, [r7, #4]
 810b774:	681b      	ldr	r3, [r3, #0]
 810b776:	f042 0210 	orr.w	r2, r2, #16
 810b77a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810b77c:	687b      	ldr	r3, [r7, #4]
 810b77e:	681b      	ldr	r3, [r3, #0]
 810b780:	681a      	ldr	r2, [r3, #0]
 810b782:	687b      	ldr	r3, [r7, #4]
 810b784:	681b      	ldr	r3, [r3, #0]
 810b786:	f022 0201 	bic.w	r2, r2, #1
 810b78a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810b78c:	687b      	ldr	r3, [r7, #4]
 810b78e:	681b      	ldr	r3, [r3, #0]
 810b790:	691b      	ldr	r3, [r3, #16]
 810b792:	687a      	ldr	r2, [r7, #4]
 810b794:	6812      	ldr	r2, [r2, #0]
 810b796:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810b79a:	f023 0303 	bic.w	r3, r3, #3
 810b79e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810b7a0:	687b      	ldr	r3, [r7, #4]
 810b7a2:	681b      	ldr	r3, [r3, #0]
 810b7a4:	689a      	ldr	r2, [r3, #8]
 810b7a6:	687b      	ldr	r3, [r7, #4]
 810b7a8:	681b      	ldr	r3, [r3, #0]
 810b7aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810b7ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810b7b0:	687b      	ldr	r3, [r7, #4]
 810b7b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b7b6:	b2db      	uxtb	r3, r3
 810b7b8:	2b04      	cmp	r3, #4
 810b7ba:	d014      	beq.n	810b7e6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810b7bc:	68fb      	ldr	r3, [r7, #12]
 810b7be:	f003 0320 	and.w	r3, r3, #32
 810b7c2:	2b00      	cmp	r3, #0
 810b7c4:	d00f      	beq.n	810b7e6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810b7c6:	687b      	ldr	r3, [r7, #4]
 810b7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b7cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810b7d0:	687b      	ldr	r3, [r7, #4]
 810b7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810b7d6:	687b      	ldr	r3, [r7, #4]
 810b7d8:	681b      	ldr	r3, [r3, #0]
 810b7da:	699a      	ldr	r2, [r3, #24]
 810b7dc:	687b      	ldr	r3, [r7, #4]
 810b7de:	681b      	ldr	r3, [r3, #0]
 810b7e0:	f042 0220 	orr.w	r2, r2, #32
 810b7e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810b7e6:	687b      	ldr	r3, [r7, #4]
 810b7e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b7ec:	b2db      	uxtb	r3, r3
 810b7ee:	2b03      	cmp	r3, #3
 810b7f0:	d014      	beq.n	810b81c <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810b7f2:	68fb      	ldr	r3, [r7, #12]
 810b7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b7f8:	2b00      	cmp	r3, #0
 810b7fa:	d00f      	beq.n	810b81c <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810b7fc:	687b      	ldr	r3, [r7, #4]
 810b7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b802:	f043 0204 	orr.w	r2, r3, #4
 810b806:	687b      	ldr	r3, [r7, #4]
 810b808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810b80c:	687b      	ldr	r3, [r7, #4]
 810b80e:	681b      	ldr	r3, [r3, #0]
 810b810:	699a      	ldr	r2, [r3, #24]
 810b812:	687b      	ldr	r3, [r7, #4]
 810b814:	681b      	ldr	r3, [r3, #0]
 810b816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810b81a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810b81c:	68fb      	ldr	r3, [r7, #12]
 810b81e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810b822:	2b00      	cmp	r3, #0
 810b824:	d00f      	beq.n	810b846 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810b826:	687b      	ldr	r3, [r7, #4]
 810b828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b82c:	f043 0201 	orr.w	r2, r3, #1
 810b830:	687b      	ldr	r3, [r7, #4]
 810b832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810b836:	687b      	ldr	r3, [r7, #4]
 810b838:	681b      	ldr	r3, [r3, #0]
 810b83a:	699a      	ldr	r2, [r3, #24]
 810b83c:	687b      	ldr	r3, [r7, #4]
 810b83e:	681b      	ldr	r3, [r3, #0]
 810b840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b844:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810b846:	68fb      	ldr	r3, [r7, #12]
 810b848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b84c:	2b00      	cmp	r3, #0
 810b84e:	d00f      	beq.n	810b870 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810b850:	687b      	ldr	r3, [r7, #4]
 810b852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b856:	f043 0208 	orr.w	r2, r3, #8
 810b85a:	687b      	ldr	r3, [r7, #4]
 810b85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810b860:	687b      	ldr	r3, [r7, #4]
 810b862:	681b      	ldr	r3, [r3, #0]
 810b864:	699a      	ldr	r2, [r3, #24]
 810b866:	687b      	ldr	r3, [r7, #4]
 810b868:	681b      	ldr	r3, [r3, #0]
 810b86a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810b86e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810b870:	687b      	ldr	r3, [r7, #4]
 810b872:	2200      	movs	r2, #0
 810b874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810b878:	687b      	ldr	r3, [r7, #4]
 810b87a:	2200      	movs	r2, #0
 810b87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810b880:	bf00      	nop
 810b882:	3714      	adds	r7, #20
 810b884:	46bd      	mov	sp, r7
 810b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b88a:	4770      	bx	lr

0810b88c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 810b88c:	b580      	push	{r7, lr}
 810b88e:	b084      	sub	sp, #16
 810b890:	af00      	add	r7, sp, #0
 810b892:	60f8      	str	r0, [r7, #12]
 810b894:	60b9      	str	r1, [r7, #8]
 810b896:	603b      	str	r3, [r7, #0]
 810b898:	4613      	mov	r3, r2
 810b89a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810b89c:	e010      	b.n	810b8c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b89e:	f7f7 ff3d 	bl	810371c <HAL_GetTick>
 810b8a2:	4602      	mov	r2, r0
 810b8a4:	683b      	ldr	r3, [r7, #0]
 810b8a6:	1ad3      	subs	r3, r2, r3
 810b8a8:	69ba      	ldr	r2, [r7, #24]
 810b8aa:	429a      	cmp	r2, r3
 810b8ac:	d803      	bhi.n	810b8b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810b8ae:	69bb      	ldr	r3, [r7, #24]
 810b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b8b4:	d102      	bne.n	810b8bc <SPI_WaitOnFlagUntilTimeout+0x30>
 810b8b6:	69bb      	ldr	r3, [r7, #24]
 810b8b8:	2b00      	cmp	r3, #0
 810b8ba:	d101      	bne.n	810b8c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810b8bc:	2303      	movs	r3, #3
 810b8be:	e00f      	b.n	810b8e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810b8c0:	68fb      	ldr	r3, [r7, #12]
 810b8c2:	681b      	ldr	r3, [r3, #0]
 810b8c4:	695a      	ldr	r2, [r3, #20]
 810b8c6:	68bb      	ldr	r3, [r7, #8]
 810b8c8:	4013      	ands	r3, r2
 810b8ca:	68ba      	ldr	r2, [r7, #8]
 810b8cc:	429a      	cmp	r2, r3
 810b8ce:	bf0c      	ite	eq
 810b8d0:	2301      	moveq	r3, #1
 810b8d2:	2300      	movne	r3, #0
 810b8d4:	b2db      	uxtb	r3, r3
 810b8d6:	461a      	mov	r2, r3
 810b8d8:	79fb      	ldrb	r3, [r7, #7]
 810b8da:	429a      	cmp	r2, r3
 810b8dc:	d0df      	beq.n	810b89e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 810b8de:	2300      	movs	r3, #0
}
 810b8e0:	4618      	mov	r0, r3
 810b8e2:	3710      	adds	r7, #16
 810b8e4:	46bd      	mov	sp, r7
 810b8e6:	bd80      	pop	{r7, pc}

0810b8e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810b8e8:	b480      	push	{r7}
 810b8ea:	b085      	sub	sp, #20
 810b8ec:	af00      	add	r7, sp, #0
 810b8ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810b8f0:	687b      	ldr	r3, [r7, #4]
 810b8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b8f4:	095b      	lsrs	r3, r3, #5
 810b8f6:	3301      	adds	r3, #1
 810b8f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810b8fa:	687b      	ldr	r3, [r7, #4]
 810b8fc:	68db      	ldr	r3, [r3, #12]
 810b8fe:	3301      	adds	r3, #1
 810b900:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810b902:	68bb      	ldr	r3, [r7, #8]
 810b904:	3307      	adds	r3, #7
 810b906:	08db      	lsrs	r3, r3, #3
 810b908:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810b90a:	68bb      	ldr	r3, [r7, #8]
 810b90c:	68fa      	ldr	r2, [r7, #12]
 810b90e:	fb02 f303 	mul.w	r3, r2, r3
}
 810b912:	4618      	mov	r0, r3
 810b914:	3714      	adds	r7, #20
 810b916:	46bd      	mov	sp, r7
 810b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b91c:	4770      	bx	lr

0810b91e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810b91e:	b580      	push	{r7, lr}
 810b920:	b082      	sub	sp, #8
 810b922:	af00      	add	r7, sp, #0
 810b924:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810b926:	687b      	ldr	r3, [r7, #4]
 810b928:	2b00      	cmp	r3, #0
 810b92a:	d101      	bne.n	810b930 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810b92c:	2301      	movs	r3, #1
 810b92e:	e042      	b.n	810b9b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810b930:	687b      	ldr	r3, [r7, #4]
 810b932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b936:	2b00      	cmp	r3, #0
 810b938:	d106      	bne.n	810b948 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	2200      	movs	r2, #0
 810b93e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810b942:	6878      	ldr	r0, [r7, #4]
 810b944:	f7f7 fd44 	bl	81033d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810b948:	687b      	ldr	r3, [r7, #4]
 810b94a:	2224      	movs	r2, #36	; 0x24
 810b94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810b950:	687b      	ldr	r3, [r7, #4]
 810b952:	681b      	ldr	r3, [r3, #0]
 810b954:	681a      	ldr	r2, [r3, #0]
 810b956:	687b      	ldr	r3, [r7, #4]
 810b958:	681b      	ldr	r3, [r3, #0]
 810b95a:	f022 0201 	bic.w	r2, r2, #1
 810b95e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810b960:	6878      	ldr	r0, [r7, #4]
 810b962:	f000 fbd7 	bl	810c114 <UART_SetConfig>
 810b966:	4603      	mov	r3, r0
 810b968:	2b01      	cmp	r3, #1
 810b96a:	d101      	bne.n	810b970 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810b96c:	2301      	movs	r3, #1
 810b96e:	e022      	b.n	810b9b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b974:	2b00      	cmp	r3, #0
 810b976:	d002      	beq.n	810b97e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810b978:	6878      	ldr	r0, [r7, #4]
 810b97a:	f001 f92b 	bl	810cbd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810b97e:	687b      	ldr	r3, [r7, #4]
 810b980:	681b      	ldr	r3, [r3, #0]
 810b982:	685a      	ldr	r2, [r3, #4]
 810b984:	687b      	ldr	r3, [r7, #4]
 810b986:	681b      	ldr	r3, [r3, #0]
 810b988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810b98c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810b98e:	687b      	ldr	r3, [r7, #4]
 810b990:	681b      	ldr	r3, [r3, #0]
 810b992:	689a      	ldr	r2, [r3, #8]
 810b994:	687b      	ldr	r3, [r7, #4]
 810b996:	681b      	ldr	r3, [r3, #0]
 810b998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810b99c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810b99e:	687b      	ldr	r3, [r7, #4]
 810b9a0:	681b      	ldr	r3, [r3, #0]
 810b9a2:	681a      	ldr	r2, [r3, #0]
 810b9a4:	687b      	ldr	r3, [r7, #4]
 810b9a6:	681b      	ldr	r3, [r3, #0]
 810b9a8:	f042 0201 	orr.w	r2, r2, #1
 810b9ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810b9ae:	6878      	ldr	r0, [r7, #4]
 810b9b0:	f001 f9b2 	bl	810cd18 <UART_CheckIdleState>
 810b9b4:	4603      	mov	r3, r0
}
 810b9b6:	4618      	mov	r0, r3
 810b9b8:	3708      	adds	r7, #8
 810b9ba:	46bd      	mov	sp, r7
 810b9bc:	bd80      	pop	{r7, pc}
	...

0810b9c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b9c0:	b580      	push	{r7, lr}
 810b9c2:	b084      	sub	sp, #16
 810b9c4:	af00      	add	r7, sp, #0
 810b9c6:	60f8      	str	r0, [r7, #12]
 810b9c8:	60b9      	str	r1, [r7, #8]
 810b9ca:	4613      	mov	r3, r2
 810b9cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b9ce:	68fb      	ldr	r3, [r7, #12]
 810b9d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b9d4:	2b20      	cmp	r3, #32
 810b9d6:	d168      	bne.n	810baaa <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810b9d8:	68bb      	ldr	r3, [r7, #8]
 810b9da:	2b00      	cmp	r3, #0
 810b9dc:	d002      	beq.n	810b9e4 <HAL_UART_Transmit_DMA+0x24>
 810b9de:	88fb      	ldrh	r3, [r7, #6]
 810b9e0:	2b00      	cmp	r3, #0
 810b9e2:	d101      	bne.n	810b9e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810b9e4:	2301      	movs	r3, #1
 810b9e6:	e061      	b.n	810baac <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810b9e8:	68fb      	ldr	r3, [r7, #12]
 810b9ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b9ee:	2b01      	cmp	r3, #1
 810b9f0:	d101      	bne.n	810b9f6 <HAL_UART_Transmit_DMA+0x36>
 810b9f2:	2302      	movs	r3, #2
 810b9f4:	e05a      	b.n	810baac <HAL_UART_Transmit_DMA+0xec>
 810b9f6:	68fb      	ldr	r3, [r7, #12]
 810b9f8:	2201      	movs	r2, #1
 810b9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810b9fe:	68fb      	ldr	r3, [r7, #12]
 810ba00:	68ba      	ldr	r2, [r7, #8]
 810ba02:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810ba04:	68fb      	ldr	r3, [r7, #12]
 810ba06:	88fa      	ldrh	r2, [r7, #6]
 810ba08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810ba0c:	68fb      	ldr	r3, [r7, #12]
 810ba0e:	88fa      	ldrh	r2, [r7, #6]
 810ba10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ba14:	68fb      	ldr	r3, [r7, #12]
 810ba16:	2200      	movs	r2, #0
 810ba18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810ba1c:	68fb      	ldr	r3, [r7, #12]
 810ba1e:	2221      	movs	r2, #33	; 0x21
 810ba20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810ba24:	68fb      	ldr	r3, [r7, #12]
 810ba26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba28:	2b00      	cmp	r3, #0
 810ba2a:	d02c      	beq.n	810ba86 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810ba2c:	68fb      	ldr	r3, [r7, #12]
 810ba2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba30:	4a20      	ldr	r2, [pc, #128]	; (810bab4 <HAL_UART_Transmit_DMA+0xf4>)
 810ba32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810ba34:	68fb      	ldr	r3, [r7, #12]
 810ba36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba38:	4a1f      	ldr	r2, [pc, #124]	; (810bab8 <HAL_UART_Transmit_DMA+0xf8>)
 810ba3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810ba3c:	68fb      	ldr	r3, [r7, #12]
 810ba3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba40:	4a1e      	ldr	r2, [pc, #120]	; (810babc <HAL_UART_Transmit_DMA+0xfc>)
 810ba42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810ba44:	68fb      	ldr	r3, [r7, #12]
 810ba46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba48:	2200      	movs	r2, #0
 810ba4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810ba4c:	68fb      	ldr	r3, [r7, #12]
 810ba4e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810ba50:	68fb      	ldr	r3, [r7, #12]
 810ba52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ba54:	4619      	mov	r1, r3
 810ba56:	68fb      	ldr	r3, [r7, #12]
 810ba58:	681b      	ldr	r3, [r3, #0]
 810ba5a:	3328      	adds	r3, #40	; 0x28
 810ba5c:	461a      	mov	r2, r3
 810ba5e:	88fb      	ldrh	r3, [r7, #6]
 810ba60:	f7f8 fdfc 	bl	810465c <HAL_DMA_Start_IT>
 810ba64:	4603      	mov	r3, r0
 810ba66:	2b00      	cmp	r3, #0
 810ba68:	d00d      	beq.n	810ba86 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810ba6a:	68fb      	ldr	r3, [r7, #12]
 810ba6c:	2210      	movs	r2, #16
 810ba6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810ba72:	68fb      	ldr	r3, [r7, #12]
 810ba74:	2200      	movs	r2, #0
 810ba76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810ba7a:	68fb      	ldr	r3, [r7, #12]
 810ba7c:	2220      	movs	r2, #32
 810ba7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810ba82:	2301      	movs	r3, #1
 810ba84:	e012      	b.n	810baac <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810ba86:	68fb      	ldr	r3, [r7, #12]
 810ba88:	681b      	ldr	r3, [r3, #0]
 810ba8a:	2240      	movs	r2, #64	; 0x40
 810ba8c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810ba8e:	68fb      	ldr	r3, [r7, #12]
 810ba90:	2200      	movs	r2, #0
 810ba92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810ba96:	68fb      	ldr	r3, [r7, #12]
 810ba98:	681b      	ldr	r3, [r3, #0]
 810ba9a:	689a      	ldr	r2, [r3, #8]
 810ba9c:	68fb      	ldr	r3, [r7, #12]
 810ba9e:	681b      	ldr	r3, [r3, #0]
 810baa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810baa4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810baa6:	2300      	movs	r3, #0
 810baa8:	e000      	b.n	810baac <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810baaa:	2302      	movs	r3, #2
  }
}
 810baac:	4618      	mov	r0, r3
 810baae:	3710      	adds	r7, #16
 810bab0:	46bd      	mov	sp, r7
 810bab2:	bd80      	pop	{r7, pc}
 810bab4:	0810d02d 	.word	0x0810d02d
 810bab8:	0810d07d 	.word	0x0810d07d
 810babc:	0810d167 	.word	0x0810d167

0810bac0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810bac0:	b580      	push	{r7, lr}
 810bac2:	b084      	sub	sp, #16
 810bac4:	af00      	add	r7, sp, #0
 810bac6:	60f8      	str	r0, [r7, #12]
 810bac8:	60b9      	str	r1, [r7, #8]
 810baca:	4613      	mov	r3, r2
 810bacc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810bace:	68fb      	ldr	r3, [r7, #12]
 810bad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810bad4:	2b20      	cmp	r3, #32
 810bad6:	d131      	bne.n	810bb3c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810bad8:	68bb      	ldr	r3, [r7, #8]
 810bada:	2b00      	cmp	r3, #0
 810badc:	d002      	beq.n	810bae4 <HAL_UART_Receive_DMA+0x24>
 810bade:	88fb      	ldrh	r3, [r7, #6]
 810bae0:	2b00      	cmp	r3, #0
 810bae2:	d101      	bne.n	810bae8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810bae4:	2301      	movs	r3, #1
 810bae6:	e02a      	b.n	810bb3e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810bae8:	68fb      	ldr	r3, [r7, #12]
 810baea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810baee:	2b01      	cmp	r3, #1
 810baf0:	d101      	bne.n	810baf6 <HAL_UART_Receive_DMA+0x36>
 810baf2:	2302      	movs	r3, #2
 810baf4:	e023      	b.n	810bb3e <HAL_UART_Receive_DMA+0x7e>
 810baf6:	68fb      	ldr	r3, [r7, #12]
 810baf8:	2201      	movs	r2, #1
 810bafa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bafe:	68fb      	ldr	r3, [r7, #12]
 810bb00:	2200      	movs	r2, #0
 810bb02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810bb04:	68fb      	ldr	r3, [r7, #12]
 810bb06:	681b      	ldr	r3, [r3, #0]
 810bb08:	4a0f      	ldr	r2, [pc, #60]	; (810bb48 <HAL_UART_Receive_DMA+0x88>)
 810bb0a:	4293      	cmp	r3, r2
 810bb0c:	d00e      	beq.n	810bb2c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810bb0e:	68fb      	ldr	r3, [r7, #12]
 810bb10:	681b      	ldr	r3, [r3, #0]
 810bb12:	685b      	ldr	r3, [r3, #4]
 810bb14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810bb18:	2b00      	cmp	r3, #0
 810bb1a:	d007      	beq.n	810bb2c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810bb1c:	68fb      	ldr	r3, [r7, #12]
 810bb1e:	681b      	ldr	r3, [r3, #0]
 810bb20:	681a      	ldr	r2, [r3, #0]
 810bb22:	68fb      	ldr	r3, [r7, #12]
 810bb24:	681b      	ldr	r3, [r3, #0]
 810bb26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810bb2a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810bb2c:	88fb      	ldrh	r3, [r7, #6]
 810bb2e:	461a      	mov	r2, r3
 810bb30:	68b9      	ldr	r1, [r7, #8]
 810bb32:	68f8      	ldr	r0, [r7, #12]
 810bb34:	f001 f9bc 	bl	810ceb0 <UART_Start_Receive_DMA>
 810bb38:	4603      	mov	r3, r0
 810bb3a:	e000      	b.n	810bb3e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810bb3c:	2302      	movs	r3, #2
  }
}
 810bb3e:	4618      	mov	r0, r3
 810bb40:	3710      	adds	r7, #16
 810bb42:	46bd      	mov	sp, r7
 810bb44:	bd80      	pop	{r7, pc}
 810bb46:	bf00      	nop
 810bb48:	58000c00 	.word	0x58000c00

0810bb4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810bb4c:	b580      	push	{r7, lr}
 810bb4e:	b088      	sub	sp, #32
 810bb50:	af00      	add	r7, sp, #0
 810bb52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810bb54:	687b      	ldr	r3, [r7, #4]
 810bb56:	681b      	ldr	r3, [r3, #0]
 810bb58:	69db      	ldr	r3, [r3, #28]
 810bb5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810bb5c:	687b      	ldr	r3, [r7, #4]
 810bb5e:	681b      	ldr	r3, [r3, #0]
 810bb60:	681b      	ldr	r3, [r3, #0]
 810bb62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810bb64:	687b      	ldr	r3, [r7, #4]
 810bb66:	681b      	ldr	r3, [r3, #0]
 810bb68:	689b      	ldr	r3, [r3, #8]
 810bb6a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810bb6c:	69fa      	ldr	r2, [r7, #28]
 810bb6e:	f640 030f 	movw	r3, #2063	; 0x80f
 810bb72:	4013      	ands	r3, r2
 810bb74:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810bb76:	693b      	ldr	r3, [r7, #16]
 810bb78:	2b00      	cmp	r3, #0
 810bb7a:	d118      	bne.n	810bbae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810bb7c:	69fb      	ldr	r3, [r7, #28]
 810bb7e:	f003 0320 	and.w	r3, r3, #32
 810bb82:	2b00      	cmp	r3, #0
 810bb84:	d013      	beq.n	810bbae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810bb86:	69bb      	ldr	r3, [r7, #24]
 810bb88:	f003 0320 	and.w	r3, r3, #32
 810bb8c:	2b00      	cmp	r3, #0
 810bb8e:	d104      	bne.n	810bb9a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810bb90:	697b      	ldr	r3, [r7, #20]
 810bb92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810bb96:	2b00      	cmp	r3, #0
 810bb98:	d009      	beq.n	810bbae <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810bb9a:	687b      	ldr	r3, [r7, #4]
 810bb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810bb9e:	2b00      	cmp	r3, #0
 810bba0:	f000 8282 	beq.w	810c0a8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810bba4:	687b      	ldr	r3, [r7, #4]
 810bba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810bba8:	6878      	ldr	r0, [r7, #4]
 810bbaa:	4798      	blx	r3
      }
      return;
 810bbac:	e27c      	b.n	810c0a8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810bbae:	693b      	ldr	r3, [r7, #16]
 810bbb0:	2b00      	cmp	r3, #0
 810bbb2:	f000 80ef 	beq.w	810bd94 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810bbb6:	697a      	ldr	r2, [r7, #20]
 810bbb8:	4b73      	ldr	r3, [pc, #460]	; (810bd88 <HAL_UART_IRQHandler+0x23c>)
 810bbba:	4013      	ands	r3, r2
 810bbbc:	2b00      	cmp	r3, #0
 810bbbe:	d105      	bne.n	810bbcc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810bbc0:	69ba      	ldr	r2, [r7, #24]
 810bbc2:	4b72      	ldr	r3, [pc, #456]	; (810bd8c <HAL_UART_IRQHandler+0x240>)
 810bbc4:	4013      	ands	r3, r2
 810bbc6:	2b00      	cmp	r3, #0
 810bbc8:	f000 80e4 	beq.w	810bd94 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810bbcc:	69fb      	ldr	r3, [r7, #28]
 810bbce:	f003 0301 	and.w	r3, r3, #1
 810bbd2:	2b00      	cmp	r3, #0
 810bbd4:	d010      	beq.n	810bbf8 <HAL_UART_IRQHandler+0xac>
 810bbd6:	69bb      	ldr	r3, [r7, #24]
 810bbd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bbdc:	2b00      	cmp	r3, #0
 810bbde:	d00b      	beq.n	810bbf8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810bbe0:	687b      	ldr	r3, [r7, #4]
 810bbe2:	681b      	ldr	r3, [r3, #0]
 810bbe4:	2201      	movs	r2, #1
 810bbe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810bbe8:	687b      	ldr	r3, [r7, #4]
 810bbea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bbee:	f043 0201 	orr.w	r2, r3, #1
 810bbf2:	687b      	ldr	r3, [r7, #4]
 810bbf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810bbf8:	69fb      	ldr	r3, [r7, #28]
 810bbfa:	f003 0302 	and.w	r3, r3, #2
 810bbfe:	2b00      	cmp	r3, #0
 810bc00:	d010      	beq.n	810bc24 <HAL_UART_IRQHandler+0xd8>
 810bc02:	697b      	ldr	r3, [r7, #20]
 810bc04:	f003 0301 	and.w	r3, r3, #1
 810bc08:	2b00      	cmp	r3, #0
 810bc0a:	d00b      	beq.n	810bc24 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810bc0c:	687b      	ldr	r3, [r7, #4]
 810bc0e:	681b      	ldr	r3, [r3, #0]
 810bc10:	2202      	movs	r2, #2
 810bc12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810bc14:	687b      	ldr	r3, [r7, #4]
 810bc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bc1a:	f043 0204 	orr.w	r2, r3, #4
 810bc1e:	687b      	ldr	r3, [r7, #4]
 810bc20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810bc24:	69fb      	ldr	r3, [r7, #28]
 810bc26:	f003 0304 	and.w	r3, r3, #4
 810bc2a:	2b00      	cmp	r3, #0
 810bc2c:	d010      	beq.n	810bc50 <HAL_UART_IRQHandler+0x104>
 810bc2e:	697b      	ldr	r3, [r7, #20]
 810bc30:	f003 0301 	and.w	r3, r3, #1
 810bc34:	2b00      	cmp	r3, #0
 810bc36:	d00b      	beq.n	810bc50 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810bc38:	687b      	ldr	r3, [r7, #4]
 810bc3a:	681b      	ldr	r3, [r3, #0]
 810bc3c:	2204      	movs	r2, #4
 810bc3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810bc40:	687b      	ldr	r3, [r7, #4]
 810bc42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bc46:	f043 0202 	orr.w	r2, r3, #2
 810bc4a:	687b      	ldr	r3, [r7, #4]
 810bc4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810bc50:	69fb      	ldr	r3, [r7, #28]
 810bc52:	f003 0308 	and.w	r3, r3, #8
 810bc56:	2b00      	cmp	r3, #0
 810bc58:	d015      	beq.n	810bc86 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810bc5a:	69bb      	ldr	r3, [r7, #24]
 810bc5c:	f003 0320 	and.w	r3, r3, #32
 810bc60:	2b00      	cmp	r3, #0
 810bc62:	d104      	bne.n	810bc6e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810bc64:	697a      	ldr	r2, [r7, #20]
 810bc66:	4b48      	ldr	r3, [pc, #288]	; (810bd88 <HAL_UART_IRQHandler+0x23c>)
 810bc68:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810bc6a:	2b00      	cmp	r3, #0
 810bc6c:	d00b      	beq.n	810bc86 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	681b      	ldr	r3, [r3, #0]
 810bc72:	2208      	movs	r2, #8
 810bc74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bc7c:	f043 0208 	orr.w	r2, r3, #8
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810bc86:	69fb      	ldr	r3, [r7, #28]
 810bc88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810bc8c:	2b00      	cmp	r3, #0
 810bc8e:	d011      	beq.n	810bcb4 <HAL_UART_IRQHandler+0x168>
 810bc90:	69bb      	ldr	r3, [r7, #24]
 810bc92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810bc96:	2b00      	cmp	r3, #0
 810bc98:	d00c      	beq.n	810bcb4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810bc9a:	687b      	ldr	r3, [r7, #4]
 810bc9c:	681b      	ldr	r3, [r3, #0]
 810bc9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810bca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810bca4:	687b      	ldr	r3, [r7, #4]
 810bca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bcaa:	f043 0220 	orr.w	r2, r3, #32
 810bcae:	687b      	ldr	r3, [r7, #4]
 810bcb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810bcb4:	687b      	ldr	r3, [r7, #4]
 810bcb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bcba:	2b00      	cmp	r3, #0
 810bcbc:	f000 81f6 	beq.w	810c0ac <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810bcc0:	69fb      	ldr	r3, [r7, #28]
 810bcc2:	f003 0320 	and.w	r3, r3, #32
 810bcc6:	2b00      	cmp	r3, #0
 810bcc8:	d011      	beq.n	810bcee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810bcca:	69bb      	ldr	r3, [r7, #24]
 810bccc:	f003 0320 	and.w	r3, r3, #32
 810bcd0:	2b00      	cmp	r3, #0
 810bcd2:	d104      	bne.n	810bcde <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810bcd4:	697b      	ldr	r3, [r7, #20]
 810bcd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810bcda:	2b00      	cmp	r3, #0
 810bcdc:	d007      	beq.n	810bcee <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810bcde:	687b      	ldr	r3, [r7, #4]
 810bce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810bce2:	2b00      	cmp	r3, #0
 810bce4:	d003      	beq.n	810bcee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810bce6:	687b      	ldr	r3, [r7, #4]
 810bce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810bcea:	6878      	ldr	r0, [r7, #4]
 810bcec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810bcee:	687b      	ldr	r3, [r7, #4]
 810bcf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810bcf4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810bcf6:	687b      	ldr	r3, [r7, #4]
 810bcf8:	681b      	ldr	r3, [r3, #0]
 810bcfa:	689b      	ldr	r3, [r3, #8]
 810bcfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bd00:	2b40      	cmp	r3, #64	; 0x40
 810bd02:	d004      	beq.n	810bd0e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810bd04:	68fb      	ldr	r3, [r7, #12]
 810bd06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810bd0a:	2b00      	cmp	r3, #0
 810bd0c:	d031      	beq.n	810bd72 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810bd0e:	6878      	ldr	r0, [r7, #4]
 810bd10:	f001 f95a 	bl	810cfc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810bd14:	687b      	ldr	r3, [r7, #4]
 810bd16:	681b      	ldr	r3, [r3, #0]
 810bd18:	689b      	ldr	r3, [r3, #8]
 810bd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bd1e:	2b40      	cmp	r3, #64	; 0x40
 810bd20:	d123      	bne.n	810bd6a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810bd22:	687b      	ldr	r3, [r7, #4]
 810bd24:	681b      	ldr	r3, [r3, #0]
 810bd26:	689a      	ldr	r2, [r3, #8]
 810bd28:	687b      	ldr	r3, [r7, #4]
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810bd30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810bd32:	687b      	ldr	r3, [r7, #4]
 810bd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bd36:	2b00      	cmp	r3, #0
 810bd38:	d013      	beq.n	810bd62 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810bd3a:	687b      	ldr	r3, [r7, #4]
 810bd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bd3e:	4a14      	ldr	r2, [pc, #80]	; (810bd90 <HAL_UART_IRQHandler+0x244>)
 810bd40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810bd42:	687b      	ldr	r3, [r7, #4]
 810bd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bd46:	4618      	mov	r0, r3
 810bd48:	f7f9 fa10 	bl	810516c <HAL_DMA_Abort_IT>
 810bd4c:	4603      	mov	r3, r0
 810bd4e:	2b00      	cmp	r3, #0
 810bd50:	d017      	beq.n	810bd82 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810bd52:	687b      	ldr	r3, [r7, #4]
 810bd54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bd56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810bd58:	687a      	ldr	r2, [r7, #4]
 810bd5a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810bd5c:	4610      	mov	r0, r2
 810bd5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810bd60:	e00f      	b.n	810bd82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810bd62:	6878      	ldr	r0, [r7, #4]
 810bd64:	f000 f9c0 	bl	810c0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810bd68:	e00b      	b.n	810bd82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810bd6a:	6878      	ldr	r0, [r7, #4]
 810bd6c:	f000 f9bc 	bl	810c0e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810bd70:	e007      	b.n	810bd82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810bd72:	6878      	ldr	r0, [r7, #4]
 810bd74:	f000 f9b8 	bl	810c0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bd78:	687b      	ldr	r3, [r7, #4]
 810bd7a:	2200      	movs	r2, #0
 810bd7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810bd80:	e194      	b.n	810c0ac <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810bd82:	bf00      	nop
    return;
 810bd84:	e192      	b.n	810c0ac <HAL_UART_IRQHandler+0x560>
 810bd86:	bf00      	nop
 810bd88:	10000001 	.word	0x10000001
 810bd8c:	04000120 	.word	0x04000120
 810bd90:	0810d1e7 	.word	0x0810d1e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810bd98:	2b01      	cmp	r3, #1
 810bd9a:	f040 8111 	bne.w	810bfc0 <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810bd9e:	69fb      	ldr	r3, [r7, #28]
 810bda0:	f003 0310 	and.w	r3, r3, #16
 810bda4:	2b00      	cmp	r3, #0
 810bda6:	f000 810b 	beq.w	810bfc0 <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810bdaa:	69bb      	ldr	r3, [r7, #24]
 810bdac:	f003 0310 	and.w	r3, r3, #16
 810bdb0:	2b00      	cmp	r3, #0
 810bdb2:	f000 8105 	beq.w	810bfc0 <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810bdb6:	687b      	ldr	r3, [r7, #4]
 810bdb8:	681b      	ldr	r3, [r3, #0]
 810bdba:	2210      	movs	r2, #16
 810bdbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810bdbe:	687b      	ldr	r3, [r7, #4]
 810bdc0:	681b      	ldr	r3, [r3, #0]
 810bdc2:	689b      	ldr	r3, [r3, #8]
 810bdc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bdc8:	2b40      	cmp	r3, #64	; 0x40
 810bdca:	f040 80bb 	bne.w	810bf44 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810bdce:	687b      	ldr	r3, [r7, #4]
 810bdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bdd2:	681b      	ldr	r3, [r3, #0]
 810bdd4:	4a97      	ldr	r2, [pc, #604]	; (810c034 <HAL_UART_IRQHandler+0x4e8>)
 810bdd6:	4293      	cmp	r3, r2
 810bdd8:	d059      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bdde:	681b      	ldr	r3, [r3, #0]
 810bde0:	4a95      	ldr	r2, [pc, #596]	; (810c038 <HAL_UART_IRQHandler+0x4ec>)
 810bde2:	4293      	cmp	r3, r2
 810bde4:	d053      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810bde6:	687b      	ldr	r3, [r7, #4]
 810bde8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bdea:	681b      	ldr	r3, [r3, #0]
 810bdec:	4a93      	ldr	r2, [pc, #588]	; (810c03c <HAL_UART_IRQHandler+0x4f0>)
 810bdee:	4293      	cmp	r3, r2
 810bdf0:	d04d      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810bdf2:	687b      	ldr	r3, [r7, #4]
 810bdf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bdf6:	681b      	ldr	r3, [r3, #0]
 810bdf8:	4a91      	ldr	r2, [pc, #580]	; (810c040 <HAL_UART_IRQHandler+0x4f4>)
 810bdfa:	4293      	cmp	r3, r2
 810bdfc:	d047      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810bdfe:	687b      	ldr	r3, [r7, #4]
 810be00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be02:	681b      	ldr	r3, [r3, #0]
 810be04:	4a8f      	ldr	r2, [pc, #572]	; (810c044 <HAL_UART_IRQHandler+0x4f8>)
 810be06:	4293      	cmp	r3, r2
 810be08:	d041      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be0a:	687b      	ldr	r3, [r7, #4]
 810be0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be0e:	681b      	ldr	r3, [r3, #0]
 810be10:	4a8d      	ldr	r2, [pc, #564]	; (810c048 <HAL_UART_IRQHandler+0x4fc>)
 810be12:	4293      	cmp	r3, r2
 810be14:	d03b      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be16:	687b      	ldr	r3, [r7, #4]
 810be18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be1a:	681b      	ldr	r3, [r3, #0]
 810be1c:	4a8b      	ldr	r2, [pc, #556]	; (810c04c <HAL_UART_IRQHandler+0x500>)
 810be1e:	4293      	cmp	r3, r2
 810be20:	d035      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be26:	681b      	ldr	r3, [r3, #0]
 810be28:	4a89      	ldr	r2, [pc, #548]	; (810c050 <HAL_UART_IRQHandler+0x504>)
 810be2a:	4293      	cmp	r3, r2
 810be2c:	d02f      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be2e:	687b      	ldr	r3, [r7, #4]
 810be30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be32:	681b      	ldr	r3, [r3, #0]
 810be34:	4a87      	ldr	r2, [pc, #540]	; (810c054 <HAL_UART_IRQHandler+0x508>)
 810be36:	4293      	cmp	r3, r2
 810be38:	d029      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be3a:	687b      	ldr	r3, [r7, #4]
 810be3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be3e:	681b      	ldr	r3, [r3, #0]
 810be40:	4a85      	ldr	r2, [pc, #532]	; (810c058 <HAL_UART_IRQHandler+0x50c>)
 810be42:	4293      	cmp	r3, r2
 810be44:	d023      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be46:	687b      	ldr	r3, [r7, #4]
 810be48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be4a:	681b      	ldr	r3, [r3, #0]
 810be4c:	4a83      	ldr	r2, [pc, #524]	; (810c05c <HAL_UART_IRQHandler+0x510>)
 810be4e:	4293      	cmp	r3, r2
 810be50:	d01d      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be52:	687b      	ldr	r3, [r7, #4]
 810be54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be56:	681b      	ldr	r3, [r3, #0]
 810be58:	4a81      	ldr	r2, [pc, #516]	; (810c060 <HAL_UART_IRQHandler+0x514>)
 810be5a:	4293      	cmp	r3, r2
 810be5c:	d017      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be62:	681b      	ldr	r3, [r3, #0]
 810be64:	4a7f      	ldr	r2, [pc, #508]	; (810c064 <HAL_UART_IRQHandler+0x518>)
 810be66:	4293      	cmp	r3, r2
 810be68:	d011      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be6a:	687b      	ldr	r3, [r7, #4]
 810be6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be6e:	681b      	ldr	r3, [r3, #0]
 810be70:	4a7d      	ldr	r2, [pc, #500]	; (810c068 <HAL_UART_IRQHandler+0x51c>)
 810be72:	4293      	cmp	r3, r2
 810be74:	d00b      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be76:	687b      	ldr	r3, [r7, #4]
 810be78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be7a:	681b      	ldr	r3, [r3, #0]
 810be7c:	4a7b      	ldr	r2, [pc, #492]	; (810c06c <HAL_UART_IRQHandler+0x520>)
 810be7e:	4293      	cmp	r3, r2
 810be80:	d005      	beq.n	810be8e <HAL_UART_IRQHandler+0x342>
 810be82:	687b      	ldr	r3, [r7, #4]
 810be84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be86:	681b      	ldr	r3, [r3, #0]
 810be88:	4a79      	ldr	r2, [pc, #484]	; (810c070 <HAL_UART_IRQHandler+0x524>)
 810be8a:	4293      	cmp	r3, r2
 810be8c:	d105      	bne.n	810be9a <HAL_UART_IRQHandler+0x34e>
 810be8e:	687b      	ldr	r3, [r7, #4]
 810be90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be92:	681b      	ldr	r3, [r3, #0]
 810be94:	685b      	ldr	r3, [r3, #4]
 810be96:	b29b      	uxth	r3, r3
 810be98:	e004      	b.n	810bea4 <HAL_UART_IRQHandler+0x358>
 810be9a:	687b      	ldr	r3, [r7, #4]
 810be9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810be9e:	681b      	ldr	r3, [r3, #0]
 810bea0:	685b      	ldr	r3, [r3, #4]
 810bea2:	b29b      	uxth	r3, r3
 810bea4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810bea6:	893b      	ldrh	r3, [r7, #8]
 810bea8:	2b00      	cmp	r3, #0
 810beaa:	f000 8101 	beq.w	810c0b0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810beae:	687b      	ldr	r3, [r7, #4]
 810beb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810beb4:	893a      	ldrh	r2, [r7, #8]
 810beb6:	429a      	cmp	r2, r3
 810beb8:	f080 80fa 	bcs.w	810c0b0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810bebc:	687b      	ldr	r3, [r7, #4]
 810bebe:	893a      	ldrh	r2, [r7, #8]
 810bec0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810bec4:	687b      	ldr	r3, [r7, #4]
 810bec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bec8:	69db      	ldr	r3, [r3, #28]
 810beca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810bece:	d02b      	beq.n	810bf28 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810bed0:	687b      	ldr	r3, [r7, #4]
 810bed2:	681b      	ldr	r3, [r3, #0]
 810bed4:	681a      	ldr	r2, [r3, #0]
 810bed6:	687b      	ldr	r3, [r7, #4]
 810bed8:	681b      	ldr	r3, [r3, #0]
 810beda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810bede:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bee0:	687b      	ldr	r3, [r7, #4]
 810bee2:	681b      	ldr	r3, [r3, #0]
 810bee4:	689a      	ldr	r2, [r3, #8]
 810bee6:	687b      	ldr	r3, [r7, #4]
 810bee8:	681b      	ldr	r3, [r3, #0]
 810beea:	f022 0201 	bic.w	r2, r2, #1
 810beee:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810bef0:	687b      	ldr	r3, [r7, #4]
 810bef2:	681b      	ldr	r3, [r3, #0]
 810bef4:	689a      	ldr	r2, [r3, #8]
 810bef6:	687b      	ldr	r3, [r7, #4]
 810bef8:	681b      	ldr	r3, [r3, #0]
 810befa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810befe:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810bf00:	687b      	ldr	r3, [r7, #4]
 810bf02:	2220      	movs	r2, #32
 810bf04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bf08:	687b      	ldr	r3, [r7, #4]
 810bf0a:	2200      	movs	r2, #0
 810bf0c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810bf0e:	687b      	ldr	r3, [r7, #4]
 810bf10:	681b      	ldr	r3, [r3, #0]
 810bf12:	681a      	ldr	r2, [r3, #0]
 810bf14:	687b      	ldr	r3, [r7, #4]
 810bf16:	681b      	ldr	r3, [r3, #0]
 810bf18:	f022 0210 	bic.w	r2, r2, #16
 810bf1c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810bf1e:	687b      	ldr	r3, [r7, #4]
 810bf20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bf22:	4618      	mov	r0, r3
 810bf24:	f7f8 fe04 	bl	8104b30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810bf28:	687b      	ldr	r3, [r7, #4]
 810bf2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810bf2e:	687b      	ldr	r3, [r7, #4]
 810bf30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810bf34:	b29b      	uxth	r3, r3
 810bf36:	1ad3      	subs	r3, r2, r3
 810bf38:	b29b      	uxth	r3, r3
 810bf3a:	4619      	mov	r1, r3
 810bf3c:	6878      	ldr	r0, [r7, #4]
 810bf3e:	f000 f8dd 	bl	810c0fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810bf42:	e0b5      	b.n	810c0b0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810bf44:	687b      	ldr	r3, [r7, #4]
 810bf46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810bf4a:	687b      	ldr	r3, [r7, #4]
 810bf4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810bf50:	b29b      	uxth	r3, r3
 810bf52:	1ad3      	subs	r3, r2, r3
 810bf54:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810bf56:	687b      	ldr	r3, [r7, #4]
 810bf58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810bf5c:	b29b      	uxth	r3, r3
 810bf5e:	2b00      	cmp	r3, #0
 810bf60:	f000 80a8 	beq.w	810c0b4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810bf64:	897b      	ldrh	r3, [r7, #10]
 810bf66:	2b00      	cmp	r3, #0
 810bf68:	f000 80a4 	beq.w	810c0b4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810bf6c:	687b      	ldr	r3, [r7, #4]
 810bf6e:	681b      	ldr	r3, [r3, #0]
 810bf70:	681a      	ldr	r2, [r3, #0]
 810bf72:	687b      	ldr	r3, [r7, #4]
 810bf74:	681b      	ldr	r3, [r3, #0]
 810bf76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810bf7a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810bf7c:	687b      	ldr	r3, [r7, #4]
 810bf7e:	681b      	ldr	r3, [r3, #0]
 810bf80:	689b      	ldr	r3, [r3, #8]
 810bf82:	687a      	ldr	r2, [r7, #4]
 810bf84:	6812      	ldr	r2, [r2, #0]
 810bf86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810bf8a:	f023 0301 	bic.w	r3, r3, #1
 810bf8e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810bf90:	687b      	ldr	r3, [r7, #4]
 810bf92:	2220      	movs	r2, #32
 810bf94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bf98:	687b      	ldr	r3, [r7, #4]
 810bf9a:	2200      	movs	r2, #0
 810bf9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810bf9e:	687b      	ldr	r3, [r7, #4]
 810bfa0:	2200      	movs	r2, #0
 810bfa2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810bfa4:	687b      	ldr	r3, [r7, #4]
 810bfa6:	681b      	ldr	r3, [r3, #0]
 810bfa8:	681a      	ldr	r2, [r3, #0]
 810bfaa:	687b      	ldr	r3, [r7, #4]
 810bfac:	681b      	ldr	r3, [r3, #0]
 810bfae:	f022 0210 	bic.w	r2, r2, #16
 810bfb2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810bfb4:	897b      	ldrh	r3, [r7, #10]
 810bfb6:	4619      	mov	r1, r3
 810bfb8:	6878      	ldr	r0, [r7, #4]
 810bfba:	f000 f89f 	bl	810c0fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810bfbe:	e079      	b.n	810c0b4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810bfc0:	69fb      	ldr	r3, [r7, #28]
 810bfc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810bfc6:	2b00      	cmp	r3, #0
 810bfc8:	d00d      	beq.n	810bfe6 <HAL_UART_IRQHandler+0x49a>
 810bfca:	697b      	ldr	r3, [r7, #20]
 810bfcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810bfd0:	2b00      	cmp	r3, #0
 810bfd2:	d008      	beq.n	810bfe6 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810bfd4:	687b      	ldr	r3, [r7, #4]
 810bfd6:	681b      	ldr	r3, [r3, #0]
 810bfd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810bfdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810bfde:	6878      	ldr	r0, [r7, #4]
 810bfe0:	f001 f931 	bl	810d246 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810bfe4:	e069      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810bfe6:	69fb      	ldr	r3, [r7, #28]
 810bfe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810bfec:	2b00      	cmp	r3, #0
 810bfee:	d012      	beq.n	810c016 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810bff0:	69bb      	ldr	r3, [r7, #24]
 810bff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810bff6:	2b00      	cmp	r3, #0
 810bff8:	d104      	bne.n	810c004 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810bffa:	697b      	ldr	r3, [r7, #20]
 810bffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c000:	2b00      	cmp	r3, #0
 810c002:	d008      	beq.n	810c016 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810c004:	687b      	ldr	r3, [r7, #4]
 810c006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810c008:	2b00      	cmp	r3, #0
 810c00a:	d055      	beq.n	810c0b8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810c00c:	687b      	ldr	r3, [r7, #4]
 810c00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810c010:	6878      	ldr	r0, [r7, #4]
 810c012:	4798      	blx	r3
    }
    return;
 810c014:	e050      	b.n	810c0b8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810c016:	69fb      	ldr	r3, [r7, #28]
 810c018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c01c:	2b00      	cmp	r3, #0
 810c01e:	d029      	beq.n	810c074 <HAL_UART_IRQHandler+0x528>
 810c020:	69bb      	ldr	r3, [r7, #24]
 810c022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c026:	2b00      	cmp	r3, #0
 810c028:	d024      	beq.n	810c074 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810c02a:	6878      	ldr	r0, [r7, #4]
 810c02c:	f001 f8f1 	bl	810d212 <UART_EndTransmit_IT>
    return;
 810c030:	e043      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
 810c032:	bf00      	nop
 810c034:	40020010 	.word	0x40020010
 810c038:	40020028 	.word	0x40020028
 810c03c:	40020040 	.word	0x40020040
 810c040:	40020058 	.word	0x40020058
 810c044:	40020070 	.word	0x40020070
 810c048:	40020088 	.word	0x40020088
 810c04c:	400200a0 	.word	0x400200a0
 810c050:	400200b8 	.word	0x400200b8
 810c054:	40020410 	.word	0x40020410
 810c058:	40020428 	.word	0x40020428
 810c05c:	40020440 	.word	0x40020440
 810c060:	40020458 	.word	0x40020458
 810c064:	40020470 	.word	0x40020470
 810c068:	40020488 	.word	0x40020488
 810c06c:	400204a0 	.word	0x400204a0
 810c070:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810c074:	69fb      	ldr	r3, [r7, #28]
 810c076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c07a:	2b00      	cmp	r3, #0
 810c07c:	d008      	beq.n	810c090 <HAL_UART_IRQHandler+0x544>
 810c07e:	69bb      	ldr	r3, [r7, #24]
 810c080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810c084:	2b00      	cmp	r3, #0
 810c086:	d003      	beq.n	810c090 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810c088:	6878      	ldr	r0, [r7, #4]
 810c08a:	f001 f8f0 	bl	810d26e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c08e:	e014      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810c090:	69fb      	ldr	r3, [r7, #28]
 810c092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810c096:	2b00      	cmp	r3, #0
 810c098:	d00f      	beq.n	810c0ba <HAL_UART_IRQHandler+0x56e>
 810c09a:	69bb      	ldr	r3, [r7, #24]
 810c09c:	2b00      	cmp	r3, #0
 810c09e:	da0c      	bge.n	810c0ba <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810c0a0:	6878      	ldr	r0, [r7, #4]
 810c0a2:	f001 f8da 	bl	810d25a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c0a6:	e008      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
      return;
 810c0a8:	bf00      	nop
 810c0aa:	e006      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
    return;
 810c0ac:	bf00      	nop
 810c0ae:	e004      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
      return;
 810c0b0:	bf00      	nop
 810c0b2:	e002      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
      return;
 810c0b4:	bf00      	nop
 810c0b6:	e000      	b.n	810c0ba <HAL_UART_IRQHandler+0x56e>
    return;
 810c0b8:	bf00      	nop
  }
}
 810c0ba:	3720      	adds	r7, #32
 810c0bc:	46bd      	mov	sp, r7
 810c0be:	bd80      	pop	{r7, pc}

0810c0c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810c0c0:	b480      	push	{r7}
 810c0c2:	b083      	sub	sp, #12
 810c0c4:	af00      	add	r7, sp, #0
 810c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810c0c8:	bf00      	nop
 810c0ca:	370c      	adds	r7, #12
 810c0cc:	46bd      	mov	sp, r7
 810c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0d2:	4770      	bx	lr

0810c0d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810c0d4:	b480      	push	{r7}
 810c0d6:	b083      	sub	sp, #12
 810c0d8:	af00      	add	r7, sp, #0
 810c0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810c0dc:	bf00      	nop
 810c0de:	370c      	adds	r7, #12
 810c0e0:	46bd      	mov	sp, r7
 810c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0e6:	4770      	bx	lr

0810c0e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810c0e8:	b480      	push	{r7}
 810c0ea:	b083      	sub	sp, #12
 810c0ec:	af00      	add	r7, sp, #0
 810c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810c0f0:	bf00      	nop
 810c0f2:	370c      	adds	r7, #12
 810c0f4:	46bd      	mov	sp, r7
 810c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0fa:	4770      	bx	lr

0810c0fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810c0fc:	b480      	push	{r7}
 810c0fe:	b083      	sub	sp, #12
 810c100:	af00      	add	r7, sp, #0
 810c102:	6078      	str	r0, [r7, #4]
 810c104:	460b      	mov	r3, r1
 810c106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810c108:	bf00      	nop
 810c10a:	370c      	adds	r7, #12
 810c10c:	46bd      	mov	sp, r7
 810c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c112:	4770      	bx	lr

0810c114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810c114:	b5b0      	push	{r4, r5, r7, lr}
 810c116:	b08e      	sub	sp, #56	; 0x38
 810c118:	af00      	add	r7, sp, #0
 810c11a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810c11c:	2300      	movs	r3, #0
 810c11e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810c122:	687b      	ldr	r3, [r7, #4]
 810c124:	689a      	ldr	r2, [r3, #8]
 810c126:	687b      	ldr	r3, [r7, #4]
 810c128:	691b      	ldr	r3, [r3, #16]
 810c12a:	431a      	orrs	r2, r3
 810c12c:	687b      	ldr	r3, [r7, #4]
 810c12e:	695b      	ldr	r3, [r3, #20]
 810c130:	431a      	orrs	r2, r3
 810c132:	687b      	ldr	r3, [r7, #4]
 810c134:	69db      	ldr	r3, [r3, #28]
 810c136:	4313      	orrs	r3, r2
 810c138:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810c13a:	687b      	ldr	r3, [r7, #4]
 810c13c:	681b      	ldr	r3, [r3, #0]
 810c13e:	681a      	ldr	r2, [r3, #0]
 810c140:	4bc0      	ldr	r3, [pc, #768]	; (810c444 <UART_SetConfig+0x330>)
 810c142:	4013      	ands	r3, r2
 810c144:	687a      	ldr	r2, [r7, #4]
 810c146:	6812      	ldr	r2, [r2, #0]
 810c148:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810c14a:	430b      	orrs	r3, r1
 810c14c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810c14e:	687b      	ldr	r3, [r7, #4]
 810c150:	681b      	ldr	r3, [r3, #0]
 810c152:	685b      	ldr	r3, [r3, #4]
 810c154:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810c158:	687b      	ldr	r3, [r7, #4]
 810c15a:	68da      	ldr	r2, [r3, #12]
 810c15c:	687b      	ldr	r3, [r7, #4]
 810c15e:	681b      	ldr	r3, [r3, #0]
 810c160:	430a      	orrs	r2, r1
 810c162:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810c164:	687b      	ldr	r3, [r7, #4]
 810c166:	699b      	ldr	r3, [r3, #24]
 810c168:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810c16a:	687b      	ldr	r3, [r7, #4]
 810c16c:	681b      	ldr	r3, [r3, #0]
 810c16e:	4ab6      	ldr	r2, [pc, #728]	; (810c448 <UART_SetConfig+0x334>)
 810c170:	4293      	cmp	r3, r2
 810c172:	d004      	beq.n	810c17e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810c174:	687b      	ldr	r3, [r7, #4]
 810c176:	6a1b      	ldr	r3, [r3, #32]
 810c178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810c17a:	4313      	orrs	r3, r2
 810c17c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810c17e:	687b      	ldr	r3, [r7, #4]
 810c180:	681b      	ldr	r3, [r3, #0]
 810c182:	689b      	ldr	r3, [r3, #8]
 810c184:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810c188:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810c18c:	687a      	ldr	r2, [r7, #4]
 810c18e:	6812      	ldr	r2, [r2, #0]
 810c190:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810c192:	430b      	orrs	r3, r1
 810c194:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810c196:	687b      	ldr	r3, [r7, #4]
 810c198:	681b      	ldr	r3, [r3, #0]
 810c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c19c:	f023 010f 	bic.w	r1, r3, #15
 810c1a0:	687b      	ldr	r3, [r7, #4]
 810c1a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810c1a4:	687b      	ldr	r3, [r7, #4]
 810c1a6:	681b      	ldr	r3, [r3, #0]
 810c1a8:	430a      	orrs	r2, r1
 810c1aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810c1ac:	687b      	ldr	r3, [r7, #4]
 810c1ae:	681b      	ldr	r3, [r3, #0]
 810c1b0:	4aa6      	ldr	r2, [pc, #664]	; (810c44c <UART_SetConfig+0x338>)
 810c1b2:	4293      	cmp	r3, r2
 810c1b4:	d176      	bne.n	810c2a4 <UART_SetConfig+0x190>
 810c1b6:	4ba6      	ldr	r3, [pc, #664]	; (810c450 <UART_SetConfig+0x33c>)
 810c1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c1ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810c1be:	2b28      	cmp	r3, #40	; 0x28
 810c1c0:	d86c      	bhi.n	810c29c <UART_SetConfig+0x188>
 810c1c2:	a201      	add	r2, pc, #4	; (adr r2, 810c1c8 <UART_SetConfig+0xb4>)
 810c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c1c8:	0810c26d 	.word	0x0810c26d
 810c1cc:	0810c29d 	.word	0x0810c29d
 810c1d0:	0810c29d 	.word	0x0810c29d
 810c1d4:	0810c29d 	.word	0x0810c29d
 810c1d8:	0810c29d 	.word	0x0810c29d
 810c1dc:	0810c29d 	.word	0x0810c29d
 810c1e0:	0810c29d 	.word	0x0810c29d
 810c1e4:	0810c29d 	.word	0x0810c29d
 810c1e8:	0810c275 	.word	0x0810c275
 810c1ec:	0810c29d 	.word	0x0810c29d
 810c1f0:	0810c29d 	.word	0x0810c29d
 810c1f4:	0810c29d 	.word	0x0810c29d
 810c1f8:	0810c29d 	.word	0x0810c29d
 810c1fc:	0810c29d 	.word	0x0810c29d
 810c200:	0810c29d 	.word	0x0810c29d
 810c204:	0810c29d 	.word	0x0810c29d
 810c208:	0810c27d 	.word	0x0810c27d
 810c20c:	0810c29d 	.word	0x0810c29d
 810c210:	0810c29d 	.word	0x0810c29d
 810c214:	0810c29d 	.word	0x0810c29d
 810c218:	0810c29d 	.word	0x0810c29d
 810c21c:	0810c29d 	.word	0x0810c29d
 810c220:	0810c29d 	.word	0x0810c29d
 810c224:	0810c29d 	.word	0x0810c29d
 810c228:	0810c285 	.word	0x0810c285
 810c22c:	0810c29d 	.word	0x0810c29d
 810c230:	0810c29d 	.word	0x0810c29d
 810c234:	0810c29d 	.word	0x0810c29d
 810c238:	0810c29d 	.word	0x0810c29d
 810c23c:	0810c29d 	.word	0x0810c29d
 810c240:	0810c29d 	.word	0x0810c29d
 810c244:	0810c29d 	.word	0x0810c29d
 810c248:	0810c28d 	.word	0x0810c28d
 810c24c:	0810c29d 	.word	0x0810c29d
 810c250:	0810c29d 	.word	0x0810c29d
 810c254:	0810c29d 	.word	0x0810c29d
 810c258:	0810c29d 	.word	0x0810c29d
 810c25c:	0810c29d 	.word	0x0810c29d
 810c260:	0810c29d 	.word	0x0810c29d
 810c264:	0810c29d 	.word	0x0810c29d
 810c268:	0810c295 	.word	0x0810c295
 810c26c:	2301      	movs	r3, #1
 810c26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c272:	e220      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c274:	2304      	movs	r3, #4
 810c276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c27a:	e21c      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c27c:	2308      	movs	r3, #8
 810c27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c282:	e218      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c284:	2310      	movs	r3, #16
 810c286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c28a:	e214      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c28c:	2320      	movs	r3, #32
 810c28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c292:	e210      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c294:	2340      	movs	r3, #64	; 0x40
 810c296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c29a:	e20c      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c29c:	2380      	movs	r3, #128	; 0x80
 810c29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2a2:	e208      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c2a4:	687b      	ldr	r3, [r7, #4]
 810c2a6:	681b      	ldr	r3, [r3, #0]
 810c2a8:	4a6a      	ldr	r2, [pc, #424]	; (810c454 <UART_SetConfig+0x340>)
 810c2aa:	4293      	cmp	r3, r2
 810c2ac:	d130      	bne.n	810c310 <UART_SetConfig+0x1fc>
 810c2ae:	4b68      	ldr	r3, [pc, #416]	; (810c450 <UART_SetConfig+0x33c>)
 810c2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c2b2:	f003 0307 	and.w	r3, r3, #7
 810c2b6:	2b05      	cmp	r3, #5
 810c2b8:	d826      	bhi.n	810c308 <UART_SetConfig+0x1f4>
 810c2ba:	a201      	add	r2, pc, #4	; (adr r2, 810c2c0 <UART_SetConfig+0x1ac>)
 810c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c2c0:	0810c2d9 	.word	0x0810c2d9
 810c2c4:	0810c2e1 	.word	0x0810c2e1
 810c2c8:	0810c2e9 	.word	0x0810c2e9
 810c2cc:	0810c2f1 	.word	0x0810c2f1
 810c2d0:	0810c2f9 	.word	0x0810c2f9
 810c2d4:	0810c301 	.word	0x0810c301
 810c2d8:	2300      	movs	r3, #0
 810c2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2de:	e1ea      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c2e0:	2304      	movs	r3, #4
 810c2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2e6:	e1e6      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c2e8:	2308      	movs	r3, #8
 810c2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2ee:	e1e2      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c2f0:	2310      	movs	r3, #16
 810c2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2f6:	e1de      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c2f8:	2320      	movs	r3, #32
 810c2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2fe:	e1da      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c300:	2340      	movs	r3, #64	; 0x40
 810c302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c306:	e1d6      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c308:	2380      	movs	r3, #128	; 0x80
 810c30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c30e:	e1d2      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c310:	687b      	ldr	r3, [r7, #4]
 810c312:	681b      	ldr	r3, [r3, #0]
 810c314:	4a50      	ldr	r2, [pc, #320]	; (810c458 <UART_SetConfig+0x344>)
 810c316:	4293      	cmp	r3, r2
 810c318:	d130      	bne.n	810c37c <UART_SetConfig+0x268>
 810c31a:	4b4d      	ldr	r3, [pc, #308]	; (810c450 <UART_SetConfig+0x33c>)
 810c31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c31e:	f003 0307 	and.w	r3, r3, #7
 810c322:	2b05      	cmp	r3, #5
 810c324:	d826      	bhi.n	810c374 <UART_SetConfig+0x260>
 810c326:	a201      	add	r2, pc, #4	; (adr r2, 810c32c <UART_SetConfig+0x218>)
 810c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c32c:	0810c345 	.word	0x0810c345
 810c330:	0810c34d 	.word	0x0810c34d
 810c334:	0810c355 	.word	0x0810c355
 810c338:	0810c35d 	.word	0x0810c35d
 810c33c:	0810c365 	.word	0x0810c365
 810c340:	0810c36d 	.word	0x0810c36d
 810c344:	2300      	movs	r3, #0
 810c346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c34a:	e1b4      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c34c:	2304      	movs	r3, #4
 810c34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c352:	e1b0      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c354:	2308      	movs	r3, #8
 810c356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c35a:	e1ac      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c35c:	2310      	movs	r3, #16
 810c35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c362:	e1a8      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c364:	2320      	movs	r3, #32
 810c366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c36a:	e1a4      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c36c:	2340      	movs	r3, #64	; 0x40
 810c36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c372:	e1a0      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c374:	2380      	movs	r3, #128	; 0x80
 810c376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c37a:	e19c      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c37c:	687b      	ldr	r3, [r7, #4]
 810c37e:	681b      	ldr	r3, [r3, #0]
 810c380:	4a36      	ldr	r2, [pc, #216]	; (810c45c <UART_SetConfig+0x348>)
 810c382:	4293      	cmp	r3, r2
 810c384:	d130      	bne.n	810c3e8 <UART_SetConfig+0x2d4>
 810c386:	4b32      	ldr	r3, [pc, #200]	; (810c450 <UART_SetConfig+0x33c>)
 810c388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c38a:	f003 0307 	and.w	r3, r3, #7
 810c38e:	2b05      	cmp	r3, #5
 810c390:	d826      	bhi.n	810c3e0 <UART_SetConfig+0x2cc>
 810c392:	a201      	add	r2, pc, #4	; (adr r2, 810c398 <UART_SetConfig+0x284>)
 810c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c398:	0810c3b1 	.word	0x0810c3b1
 810c39c:	0810c3b9 	.word	0x0810c3b9
 810c3a0:	0810c3c1 	.word	0x0810c3c1
 810c3a4:	0810c3c9 	.word	0x0810c3c9
 810c3a8:	0810c3d1 	.word	0x0810c3d1
 810c3ac:	0810c3d9 	.word	0x0810c3d9
 810c3b0:	2300      	movs	r3, #0
 810c3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3b6:	e17e      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3b8:	2304      	movs	r3, #4
 810c3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3be:	e17a      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3c0:	2308      	movs	r3, #8
 810c3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3c6:	e176      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3c8:	2310      	movs	r3, #16
 810c3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3ce:	e172      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3d0:	2320      	movs	r3, #32
 810c3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3d6:	e16e      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3d8:	2340      	movs	r3, #64	; 0x40
 810c3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3de:	e16a      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3e0:	2380      	movs	r3, #128	; 0x80
 810c3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c3e6:	e166      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c3e8:	687b      	ldr	r3, [r7, #4]
 810c3ea:	681b      	ldr	r3, [r3, #0]
 810c3ec:	4a1c      	ldr	r2, [pc, #112]	; (810c460 <UART_SetConfig+0x34c>)
 810c3ee:	4293      	cmp	r3, r2
 810c3f0:	d140      	bne.n	810c474 <UART_SetConfig+0x360>
 810c3f2:	4b17      	ldr	r3, [pc, #92]	; (810c450 <UART_SetConfig+0x33c>)
 810c3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c3f6:	f003 0307 	and.w	r3, r3, #7
 810c3fa:	2b05      	cmp	r3, #5
 810c3fc:	d836      	bhi.n	810c46c <UART_SetConfig+0x358>
 810c3fe:	a201      	add	r2, pc, #4	; (adr r2, 810c404 <UART_SetConfig+0x2f0>)
 810c400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c404:	0810c41d 	.word	0x0810c41d
 810c408:	0810c425 	.word	0x0810c425
 810c40c:	0810c42d 	.word	0x0810c42d
 810c410:	0810c435 	.word	0x0810c435
 810c414:	0810c43d 	.word	0x0810c43d
 810c418:	0810c465 	.word	0x0810c465
 810c41c:	2300      	movs	r3, #0
 810c41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c422:	e148      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c424:	2304      	movs	r3, #4
 810c426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c42a:	e144      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c42c:	2308      	movs	r3, #8
 810c42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c432:	e140      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c434:	2310      	movs	r3, #16
 810c436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c43a:	e13c      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c43c:	2320      	movs	r3, #32
 810c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c442:	e138      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c444:	cfff69f3 	.word	0xcfff69f3
 810c448:	58000c00 	.word	0x58000c00
 810c44c:	40011000 	.word	0x40011000
 810c450:	58024400 	.word	0x58024400
 810c454:	40004400 	.word	0x40004400
 810c458:	40004800 	.word	0x40004800
 810c45c:	40004c00 	.word	0x40004c00
 810c460:	40005000 	.word	0x40005000
 810c464:	2340      	movs	r3, #64	; 0x40
 810c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c46a:	e124      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c46c:	2380      	movs	r3, #128	; 0x80
 810c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c472:	e120      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c474:	687b      	ldr	r3, [r7, #4]
 810c476:	681b      	ldr	r3, [r3, #0]
 810c478:	4acc      	ldr	r2, [pc, #816]	; (810c7ac <UART_SetConfig+0x698>)
 810c47a:	4293      	cmp	r3, r2
 810c47c:	d176      	bne.n	810c56c <UART_SetConfig+0x458>
 810c47e:	4bcc      	ldr	r3, [pc, #816]	; (810c7b0 <UART_SetConfig+0x69c>)
 810c480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c482:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810c486:	2b28      	cmp	r3, #40	; 0x28
 810c488:	d86c      	bhi.n	810c564 <UART_SetConfig+0x450>
 810c48a:	a201      	add	r2, pc, #4	; (adr r2, 810c490 <UART_SetConfig+0x37c>)
 810c48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c490:	0810c535 	.word	0x0810c535
 810c494:	0810c565 	.word	0x0810c565
 810c498:	0810c565 	.word	0x0810c565
 810c49c:	0810c565 	.word	0x0810c565
 810c4a0:	0810c565 	.word	0x0810c565
 810c4a4:	0810c565 	.word	0x0810c565
 810c4a8:	0810c565 	.word	0x0810c565
 810c4ac:	0810c565 	.word	0x0810c565
 810c4b0:	0810c53d 	.word	0x0810c53d
 810c4b4:	0810c565 	.word	0x0810c565
 810c4b8:	0810c565 	.word	0x0810c565
 810c4bc:	0810c565 	.word	0x0810c565
 810c4c0:	0810c565 	.word	0x0810c565
 810c4c4:	0810c565 	.word	0x0810c565
 810c4c8:	0810c565 	.word	0x0810c565
 810c4cc:	0810c565 	.word	0x0810c565
 810c4d0:	0810c545 	.word	0x0810c545
 810c4d4:	0810c565 	.word	0x0810c565
 810c4d8:	0810c565 	.word	0x0810c565
 810c4dc:	0810c565 	.word	0x0810c565
 810c4e0:	0810c565 	.word	0x0810c565
 810c4e4:	0810c565 	.word	0x0810c565
 810c4e8:	0810c565 	.word	0x0810c565
 810c4ec:	0810c565 	.word	0x0810c565
 810c4f0:	0810c54d 	.word	0x0810c54d
 810c4f4:	0810c565 	.word	0x0810c565
 810c4f8:	0810c565 	.word	0x0810c565
 810c4fc:	0810c565 	.word	0x0810c565
 810c500:	0810c565 	.word	0x0810c565
 810c504:	0810c565 	.word	0x0810c565
 810c508:	0810c565 	.word	0x0810c565
 810c50c:	0810c565 	.word	0x0810c565
 810c510:	0810c555 	.word	0x0810c555
 810c514:	0810c565 	.word	0x0810c565
 810c518:	0810c565 	.word	0x0810c565
 810c51c:	0810c565 	.word	0x0810c565
 810c520:	0810c565 	.word	0x0810c565
 810c524:	0810c565 	.word	0x0810c565
 810c528:	0810c565 	.word	0x0810c565
 810c52c:	0810c565 	.word	0x0810c565
 810c530:	0810c55d 	.word	0x0810c55d
 810c534:	2301      	movs	r3, #1
 810c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c53a:	e0bc      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c53c:	2304      	movs	r3, #4
 810c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c542:	e0b8      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c544:	2308      	movs	r3, #8
 810c546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c54a:	e0b4      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c54c:	2310      	movs	r3, #16
 810c54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c552:	e0b0      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c554:	2320      	movs	r3, #32
 810c556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c55a:	e0ac      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c55c:	2340      	movs	r3, #64	; 0x40
 810c55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c562:	e0a8      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c564:	2380      	movs	r3, #128	; 0x80
 810c566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c56a:	e0a4      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c56c:	687b      	ldr	r3, [r7, #4]
 810c56e:	681b      	ldr	r3, [r3, #0]
 810c570:	4a90      	ldr	r2, [pc, #576]	; (810c7b4 <UART_SetConfig+0x6a0>)
 810c572:	4293      	cmp	r3, r2
 810c574:	d130      	bne.n	810c5d8 <UART_SetConfig+0x4c4>
 810c576:	4b8e      	ldr	r3, [pc, #568]	; (810c7b0 <UART_SetConfig+0x69c>)
 810c578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c57a:	f003 0307 	and.w	r3, r3, #7
 810c57e:	2b05      	cmp	r3, #5
 810c580:	d826      	bhi.n	810c5d0 <UART_SetConfig+0x4bc>
 810c582:	a201      	add	r2, pc, #4	; (adr r2, 810c588 <UART_SetConfig+0x474>)
 810c584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c588:	0810c5a1 	.word	0x0810c5a1
 810c58c:	0810c5a9 	.word	0x0810c5a9
 810c590:	0810c5b1 	.word	0x0810c5b1
 810c594:	0810c5b9 	.word	0x0810c5b9
 810c598:	0810c5c1 	.word	0x0810c5c1
 810c59c:	0810c5c9 	.word	0x0810c5c9
 810c5a0:	2300      	movs	r3, #0
 810c5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5a6:	e086      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5a8:	2304      	movs	r3, #4
 810c5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5ae:	e082      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5b0:	2308      	movs	r3, #8
 810c5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5b6:	e07e      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5b8:	2310      	movs	r3, #16
 810c5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5be:	e07a      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5c0:	2320      	movs	r3, #32
 810c5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5c6:	e076      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5c8:	2340      	movs	r3, #64	; 0x40
 810c5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5ce:	e072      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5d0:	2380      	movs	r3, #128	; 0x80
 810c5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c5d6:	e06e      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c5d8:	687b      	ldr	r3, [r7, #4]
 810c5da:	681b      	ldr	r3, [r3, #0]
 810c5dc:	4a76      	ldr	r2, [pc, #472]	; (810c7b8 <UART_SetConfig+0x6a4>)
 810c5de:	4293      	cmp	r3, r2
 810c5e0:	d130      	bne.n	810c644 <UART_SetConfig+0x530>
 810c5e2:	4b73      	ldr	r3, [pc, #460]	; (810c7b0 <UART_SetConfig+0x69c>)
 810c5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c5e6:	f003 0307 	and.w	r3, r3, #7
 810c5ea:	2b05      	cmp	r3, #5
 810c5ec:	d826      	bhi.n	810c63c <UART_SetConfig+0x528>
 810c5ee:	a201      	add	r2, pc, #4	; (adr r2, 810c5f4 <UART_SetConfig+0x4e0>)
 810c5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c5f4:	0810c60d 	.word	0x0810c60d
 810c5f8:	0810c615 	.word	0x0810c615
 810c5fc:	0810c61d 	.word	0x0810c61d
 810c600:	0810c625 	.word	0x0810c625
 810c604:	0810c62d 	.word	0x0810c62d
 810c608:	0810c635 	.word	0x0810c635
 810c60c:	2300      	movs	r3, #0
 810c60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c612:	e050      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c614:	2304      	movs	r3, #4
 810c616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c61a:	e04c      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c61c:	2308      	movs	r3, #8
 810c61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c622:	e048      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c624:	2310      	movs	r3, #16
 810c626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c62a:	e044      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c62c:	2320      	movs	r3, #32
 810c62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c632:	e040      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c634:	2340      	movs	r3, #64	; 0x40
 810c636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c63a:	e03c      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c63c:	2380      	movs	r3, #128	; 0x80
 810c63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c642:	e038      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	681b      	ldr	r3, [r3, #0]
 810c648:	4a5c      	ldr	r2, [pc, #368]	; (810c7bc <UART_SetConfig+0x6a8>)
 810c64a:	4293      	cmp	r3, r2
 810c64c:	d130      	bne.n	810c6b0 <UART_SetConfig+0x59c>
 810c64e:	4b58      	ldr	r3, [pc, #352]	; (810c7b0 <UART_SetConfig+0x69c>)
 810c650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810c652:	f003 0307 	and.w	r3, r3, #7
 810c656:	2b05      	cmp	r3, #5
 810c658:	d826      	bhi.n	810c6a8 <UART_SetConfig+0x594>
 810c65a:	a201      	add	r2, pc, #4	; (adr r2, 810c660 <UART_SetConfig+0x54c>)
 810c65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c660:	0810c679 	.word	0x0810c679
 810c664:	0810c681 	.word	0x0810c681
 810c668:	0810c689 	.word	0x0810c689
 810c66c:	0810c691 	.word	0x0810c691
 810c670:	0810c699 	.word	0x0810c699
 810c674:	0810c6a1 	.word	0x0810c6a1
 810c678:	2302      	movs	r3, #2
 810c67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c67e:	e01a      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c680:	2304      	movs	r3, #4
 810c682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c686:	e016      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c688:	2308      	movs	r3, #8
 810c68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c68e:	e012      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c690:	2310      	movs	r3, #16
 810c692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c696:	e00e      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c698:	2320      	movs	r3, #32
 810c69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c69e:	e00a      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c6a0:	2340      	movs	r3, #64	; 0x40
 810c6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c6a6:	e006      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c6a8:	2380      	movs	r3, #128	; 0x80
 810c6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c6ae:	e002      	b.n	810c6b6 <UART_SetConfig+0x5a2>
 810c6b0:	2380      	movs	r3, #128	; 0x80
 810c6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810c6b6:	687b      	ldr	r3, [r7, #4]
 810c6b8:	681b      	ldr	r3, [r3, #0]
 810c6ba:	4a40      	ldr	r2, [pc, #256]	; (810c7bc <UART_SetConfig+0x6a8>)
 810c6bc:	4293      	cmp	r3, r2
 810c6be:	f040 80ef 	bne.w	810c8a0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810c6c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c6c6:	2b20      	cmp	r3, #32
 810c6c8:	dc46      	bgt.n	810c758 <UART_SetConfig+0x644>
 810c6ca:	2b02      	cmp	r3, #2
 810c6cc:	f2c0 8081 	blt.w	810c7d2 <UART_SetConfig+0x6be>
 810c6d0:	3b02      	subs	r3, #2
 810c6d2:	2b1e      	cmp	r3, #30
 810c6d4:	d87d      	bhi.n	810c7d2 <UART_SetConfig+0x6be>
 810c6d6:	a201      	add	r2, pc, #4	; (adr r2, 810c6dc <UART_SetConfig+0x5c8>)
 810c6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c6dc:	0810c75f 	.word	0x0810c75f
 810c6e0:	0810c7d3 	.word	0x0810c7d3
 810c6e4:	0810c767 	.word	0x0810c767
 810c6e8:	0810c7d3 	.word	0x0810c7d3
 810c6ec:	0810c7d3 	.word	0x0810c7d3
 810c6f0:	0810c7d3 	.word	0x0810c7d3
 810c6f4:	0810c777 	.word	0x0810c777
 810c6f8:	0810c7d3 	.word	0x0810c7d3
 810c6fc:	0810c7d3 	.word	0x0810c7d3
 810c700:	0810c7d3 	.word	0x0810c7d3
 810c704:	0810c7d3 	.word	0x0810c7d3
 810c708:	0810c7d3 	.word	0x0810c7d3
 810c70c:	0810c7d3 	.word	0x0810c7d3
 810c710:	0810c7d3 	.word	0x0810c7d3
 810c714:	0810c787 	.word	0x0810c787
 810c718:	0810c7d3 	.word	0x0810c7d3
 810c71c:	0810c7d3 	.word	0x0810c7d3
 810c720:	0810c7d3 	.word	0x0810c7d3
 810c724:	0810c7d3 	.word	0x0810c7d3
 810c728:	0810c7d3 	.word	0x0810c7d3
 810c72c:	0810c7d3 	.word	0x0810c7d3
 810c730:	0810c7d3 	.word	0x0810c7d3
 810c734:	0810c7d3 	.word	0x0810c7d3
 810c738:	0810c7d3 	.word	0x0810c7d3
 810c73c:	0810c7d3 	.word	0x0810c7d3
 810c740:	0810c7d3 	.word	0x0810c7d3
 810c744:	0810c7d3 	.word	0x0810c7d3
 810c748:	0810c7d3 	.word	0x0810c7d3
 810c74c:	0810c7d3 	.word	0x0810c7d3
 810c750:	0810c7d3 	.word	0x0810c7d3
 810c754:	0810c7c5 	.word	0x0810c7c5
 810c758:	2b40      	cmp	r3, #64	; 0x40
 810c75a:	d036      	beq.n	810c7ca <UART_SetConfig+0x6b6>
 810c75c:	e039      	b.n	810c7d2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810c75e:	f7fd f9e7 	bl	8109b30 <HAL_RCCEx_GetD3PCLK1Freq>
 810c762:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c764:	e03b      	b.n	810c7de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c766:	f107 0314 	add.w	r3, r7, #20
 810c76a:	4618      	mov	r0, r3
 810c76c:	f7fd f9f6 	bl	8109b5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c770:	69bb      	ldr	r3, [r7, #24]
 810c772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c774:	e033      	b.n	810c7de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c776:	f107 0308 	add.w	r3, r7, #8
 810c77a:	4618      	mov	r0, r3
 810c77c:	f7fd fb42 	bl	8109e04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c780:	68fb      	ldr	r3, [r7, #12]
 810c782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c784:	e02b      	b.n	810c7de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c786:	4b0a      	ldr	r3, [pc, #40]	; (810c7b0 <UART_SetConfig+0x69c>)
 810c788:	681b      	ldr	r3, [r3, #0]
 810c78a:	f003 0320 	and.w	r3, r3, #32
 810c78e:	2b00      	cmp	r3, #0
 810c790:	d009      	beq.n	810c7a6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c792:	4b07      	ldr	r3, [pc, #28]	; (810c7b0 <UART_SetConfig+0x69c>)
 810c794:	681b      	ldr	r3, [r3, #0]
 810c796:	08db      	lsrs	r3, r3, #3
 810c798:	f003 0303 	and.w	r3, r3, #3
 810c79c:	4a08      	ldr	r2, [pc, #32]	; (810c7c0 <UART_SetConfig+0x6ac>)
 810c79e:	fa22 f303 	lsr.w	r3, r2, r3
 810c7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c7a4:	e01b      	b.n	810c7de <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810c7a6:	4b06      	ldr	r3, [pc, #24]	; (810c7c0 <UART_SetConfig+0x6ac>)
 810c7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c7aa:	e018      	b.n	810c7de <UART_SetConfig+0x6ca>
 810c7ac:	40011400 	.word	0x40011400
 810c7b0:	58024400 	.word	0x58024400
 810c7b4:	40007800 	.word	0x40007800
 810c7b8:	40007c00 	.word	0x40007c00
 810c7bc:	58000c00 	.word	0x58000c00
 810c7c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c7c4:	4bc4      	ldr	r3, [pc, #784]	; (810cad8 <UART_SetConfig+0x9c4>)
 810c7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c7c8:	e009      	b.n	810c7de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c7ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c7d0:	e005      	b.n	810c7de <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810c7d2:	2300      	movs	r3, #0
 810c7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c7d6:	2301      	movs	r3, #1
 810c7d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c7dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c7e0:	2b00      	cmp	r3, #0
 810c7e2:	f000 81da 	beq.w	810cb9a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810c7e6:	687b      	ldr	r3, [r7, #4]
 810c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c7ea:	4abc      	ldr	r2, [pc, #752]	; (810cadc <UART_SetConfig+0x9c8>)
 810c7ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c7f0:	461a      	mov	r2, r3
 810c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c7f4:	fbb3 f3f2 	udiv	r3, r3, r2
 810c7f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c7fa:	687b      	ldr	r3, [r7, #4]
 810c7fc:	685a      	ldr	r2, [r3, #4]
 810c7fe:	4613      	mov	r3, r2
 810c800:	005b      	lsls	r3, r3, #1
 810c802:	4413      	add	r3, r2
 810c804:	6a3a      	ldr	r2, [r7, #32]
 810c806:	429a      	cmp	r2, r3
 810c808:	d305      	bcc.n	810c816 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810c80a:	687b      	ldr	r3, [r7, #4]
 810c80c:	685b      	ldr	r3, [r3, #4]
 810c80e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c810:	6a3a      	ldr	r2, [r7, #32]
 810c812:	429a      	cmp	r2, r3
 810c814:	d903      	bls.n	810c81e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810c816:	2301      	movs	r3, #1
 810c818:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c81c:	e1bd      	b.n	810cb9a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c820:	4618      	mov	r0, r3
 810c822:	f04f 0100 	mov.w	r1, #0
 810c826:	687b      	ldr	r3, [r7, #4]
 810c828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c82a:	4aac      	ldr	r2, [pc, #688]	; (810cadc <UART_SetConfig+0x9c8>)
 810c82c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c830:	b29a      	uxth	r2, r3
 810c832:	f04f 0300 	mov.w	r3, #0
 810c836:	f7f4 fb69 	bl	8100f0c <__aeabi_uldivmod>
 810c83a:	4602      	mov	r2, r0
 810c83c:	460b      	mov	r3, r1
 810c83e:	4610      	mov	r0, r2
 810c840:	4619      	mov	r1, r3
 810c842:	f04f 0200 	mov.w	r2, #0
 810c846:	f04f 0300 	mov.w	r3, #0
 810c84a:	020b      	lsls	r3, r1, #8
 810c84c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810c850:	0202      	lsls	r2, r0, #8
 810c852:	6879      	ldr	r1, [r7, #4]
 810c854:	6849      	ldr	r1, [r1, #4]
 810c856:	0849      	lsrs	r1, r1, #1
 810c858:	4608      	mov	r0, r1
 810c85a:	f04f 0100 	mov.w	r1, #0
 810c85e:	1814      	adds	r4, r2, r0
 810c860:	eb43 0501 	adc.w	r5, r3, r1
 810c864:	687b      	ldr	r3, [r7, #4]
 810c866:	685b      	ldr	r3, [r3, #4]
 810c868:	461a      	mov	r2, r3
 810c86a:	f04f 0300 	mov.w	r3, #0
 810c86e:	4620      	mov	r0, r4
 810c870:	4629      	mov	r1, r5
 810c872:	f7f4 fb4b 	bl	8100f0c <__aeabi_uldivmod>
 810c876:	4602      	mov	r2, r0
 810c878:	460b      	mov	r3, r1
 810c87a:	4613      	mov	r3, r2
 810c87c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810c884:	d308      	bcc.n	810c898 <UART_SetConfig+0x784>
 810c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c88c:	d204      	bcs.n	810c898 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810c88e:	687b      	ldr	r3, [r7, #4]
 810c890:	681b      	ldr	r3, [r3, #0]
 810c892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c894:	60da      	str	r2, [r3, #12]
 810c896:	e180      	b.n	810cb9a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810c898:	2301      	movs	r3, #1
 810c89a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c89e:	e17c      	b.n	810cb9a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810c8a0:	687b      	ldr	r3, [r7, #4]
 810c8a2:	69db      	ldr	r3, [r3, #28]
 810c8a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810c8a8:	f040 80bf 	bne.w	810ca2a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810c8ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c8b0:	2b20      	cmp	r3, #32
 810c8b2:	dc49      	bgt.n	810c948 <UART_SetConfig+0x834>
 810c8b4:	2b00      	cmp	r3, #0
 810c8b6:	db7c      	blt.n	810c9b2 <UART_SetConfig+0x89e>
 810c8b8:	2b20      	cmp	r3, #32
 810c8ba:	d87a      	bhi.n	810c9b2 <UART_SetConfig+0x89e>
 810c8bc:	a201      	add	r2, pc, #4	; (adr r2, 810c8c4 <UART_SetConfig+0x7b0>)
 810c8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c8c2:	bf00      	nop
 810c8c4:	0810c94f 	.word	0x0810c94f
 810c8c8:	0810c957 	.word	0x0810c957
 810c8cc:	0810c9b3 	.word	0x0810c9b3
 810c8d0:	0810c9b3 	.word	0x0810c9b3
 810c8d4:	0810c95f 	.word	0x0810c95f
 810c8d8:	0810c9b3 	.word	0x0810c9b3
 810c8dc:	0810c9b3 	.word	0x0810c9b3
 810c8e0:	0810c9b3 	.word	0x0810c9b3
 810c8e4:	0810c96f 	.word	0x0810c96f
 810c8e8:	0810c9b3 	.word	0x0810c9b3
 810c8ec:	0810c9b3 	.word	0x0810c9b3
 810c8f0:	0810c9b3 	.word	0x0810c9b3
 810c8f4:	0810c9b3 	.word	0x0810c9b3
 810c8f8:	0810c9b3 	.word	0x0810c9b3
 810c8fc:	0810c9b3 	.word	0x0810c9b3
 810c900:	0810c9b3 	.word	0x0810c9b3
 810c904:	0810c97f 	.word	0x0810c97f
 810c908:	0810c9b3 	.word	0x0810c9b3
 810c90c:	0810c9b3 	.word	0x0810c9b3
 810c910:	0810c9b3 	.word	0x0810c9b3
 810c914:	0810c9b3 	.word	0x0810c9b3
 810c918:	0810c9b3 	.word	0x0810c9b3
 810c91c:	0810c9b3 	.word	0x0810c9b3
 810c920:	0810c9b3 	.word	0x0810c9b3
 810c924:	0810c9b3 	.word	0x0810c9b3
 810c928:	0810c9b3 	.word	0x0810c9b3
 810c92c:	0810c9b3 	.word	0x0810c9b3
 810c930:	0810c9b3 	.word	0x0810c9b3
 810c934:	0810c9b3 	.word	0x0810c9b3
 810c938:	0810c9b3 	.word	0x0810c9b3
 810c93c:	0810c9b3 	.word	0x0810c9b3
 810c940:	0810c9b3 	.word	0x0810c9b3
 810c944:	0810c9a5 	.word	0x0810c9a5
 810c948:	2b40      	cmp	r3, #64	; 0x40
 810c94a:	d02e      	beq.n	810c9aa <UART_SetConfig+0x896>
 810c94c:	e031      	b.n	810c9b2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c94e:	f7fc f983 	bl	8108c58 <HAL_RCC_GetPCLK1Freq>
 810c952:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c954:	e033      	b.n	810c9be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c956:	f7fc f995 	bl	8108c84 <HAL_RCC_GetPCLK2Freq>
 810c95a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c95c:	e02f      	b.n	810c9be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c95e:	f107 0314 	add.w	r3, r7, #20
 810c962:	4618      	mov	r0, r3
 810c964:	f7fd f8fa 	bl	8109b5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c968:	69bb      	ldr	r3, [r7, #24]
 810c96a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c96c:	e027      	b.n	810c9be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c96e:	f107 0308 	add.w	r3, r7, #8
 810c972:	4618      	mov	r0, r3
 810c974:	f7fd fa46 	bl	8109e04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c978:	68fb      	ldr	r3, [r7, #12]
 810c97a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c97c:	e01f      	b.n	810c9be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c97e:	4b58      	ldr	r3, [pc, #352]	; (810cae0 <UART_SetConfig+0x9cc>)
 810c980:	681b      	ldr	r3, [r3, #0]
 810c982:	f003 0320 	and.w	r3, r3, #32
 810c986:	2b00      	cmp	r3, #0
 810c988:	d009      	beq.n	810c99e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c98a:	4b55      	ldr	r3, [pc, #340]	; (810cae0 <UART_SetConfig+0x9cc>)
 810c98c:	681b      	ldr	r3, [r3, #0]
 810c98e:	08db      	lsrs	r3, r3, #3
 810c990:	f003 0303 	and.w	r3, r3, #3
 810c994:	4a53      	ldr	r2, [pc, #332]	; (810cae4 <UART_SetConfig+0x9d0>)
 810c996:	fa22 f303 	lsr.w	r3, r2, r3
 810c99a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c99c:	e00f      	b.n	810c9be <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810c99e:	4b51      	ldr	r3, [pc, #324]	; (810cae4 <UART_SetConfig+0x9d0>)
 810c9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c9a2:	e00c      	b.n	810c9be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c9a4:	4b4c      	ldr	r3, [pc, #304]	; (810cad8 <UART_SetConfig+0x9c4>)
 810c9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c9a8:	e009      	b.n	810c9be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c9aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c9b0:	e005      	b.n	810c9be <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810c9b2:	2300      	movs	r3, #0
 810c9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c9b6:	2301      	movs	r3, #1
 810c9b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c9bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c9c0:	2b00      	cmp	r3, #0
 810c9c2:	f000 80ea 	beq.w	810cb9a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c9c6:	687b      	ldr	r3, [r7, #4]
 810c9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c9ca:	4a44      	ldr	r2, [pc, #272]	; (810cadc <UART_SetConfig+0x9c8>)
 810c9cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c9d0:	461a      	mov	r2, r3
 810c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c9d4:	fbb3 f3f2 	udiv	r3, r3, r2
 810c9d8:	005a      	lsls	r2, r3, #1
 810c9da:	687b      	ldr	r3, [r7, #4]
 810c9dc:	685b      	ldr	r3, [r3, #4]
 810c9de:	085b      	lsrs	r3, r3, #1
 810c9e0:	441a      	add	r2, r3
 810c9e2:	687b      	ldr	r3, [r7, #4]
 810c9e4:	685b      	ldr	r3, [r3, #4]
 810c9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 810c9ea:	b29b      	uxth	r3, r3
 810c9ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9f0:	2b0f      	cmp	r3, #15
 810c9f2:	d916      	bls.n	810ca22 <UART_SetConfig+0x90e>
 810c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c9fa:	d212      	bcs.n	810ca22 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c9fe:	b29b      	uxth	r3, r3
 810ca00:	f023 030f 	bic.w	r3, r3, #15
 810ca04:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ca08:	085b      	lsrs	r3, r3, #1
 810ca0a:	b29b      	uxth	r3, r3
 810ca0c:	f003 0307 	and.w	r3, r3, #7
 810ca10:	b29a      	uxth	r2, r3
 810ca12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810ca14:	4313      	orrs	r3, r2
 810ca16:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810ca18:	687b      	ldr	r3, [r7, #4]
 810ca1a:	681b      	ldr	r3, [r3, #0]
 810ca1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810ca1e:	60da      	str	r2, [r3, #12]
 810ca20:	e0bb      	b.n	810cb9a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810ca22:	2301      	movs	r3, #1
 810ca24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810ca28:	e0b7      	b.n	810cb9a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810ca2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810ca2e:	2b20      	cmp	r3, #32
 810ca30:	dc4a      	bgt.n	810cac8 <UART_SetConfig+0x9b4>
 810ca32:	2b00      	cmp	r3, #0
 810ca34:	f2c0 8086 	blt.w	810cb44 <UART_SetConfig+0xa30>
 810ca38:	2b20      	cmp	r3, #32
 810ca3a:	f200 8083 	bhi.w	810cb44 <UART_SetConfig+0xa30>
 810ca3e:	a201      	add	r2, pc, #4	; (adr r2, 810ca44 <UART_SetConfig+0x930>)
 810ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ca44:	0810cacf 	.word	0x0810cacf
 810ca48:	0810cae9 	.word	0x0810cae9
 810ca4c:	0810cb45 	.word	0x0810cb45
 810ca50:	0810cb45 	.word	0x0810cb45
 810ca54:	0810caf1 	.word	0x0810caf1
 810ca58:	0810cb45 	.word	0x0810cb45
 810ca5c:	0810cb45 	.word	0x0810cb45
 810ca60:	0810cb45 	.word	0x0810cb45
 810ca64:	0810cb01 	.word	0x0810cb01
 810ca68:	0810cb45 	.word	0x0810cb45
 810ca6c:	0810cb45 	.word	0x0810cb45
 810ca70:	0810cb45 	.word	0x0810cb45
 810ca74:	0810cb45 	.word	0x0810cb45
 810ca78:	0810cb45 	.word	0x0810cb45
 810ca7c:	0810cb45 	.word	0x0810cb45
 810ca80:	0810cb45 	.word	0x0810cb45
 810ca84:	0810cb11 	.word	0x0810cb11
 810ca88:	0810cb45 	.word	0x0810cb45
 810ca8c:	0810cb45 	.word	0x0810cb45
 810ca90:	0810cb45 	.word	0x0810cb45
 810ca94:	0810cb45 	.word	0x0810cb45
 810ca98:	0810cb45 	.word	0x0810cb45
 810ca9c:	0810cb45 	.word	0x0810cb45
 810caa0:	0810cb45 	.word	0x0810cb45
 810caa4:	0810cb45 	.word	0x0810cb45
 810caa8:	0810cb45 	.word	0x0810cb45
 810caac:	0810cb45 	.word	0x0810cb45
 810cab0:	0810cb45 	.word	0x0810cb45
 810cab4:	0810cb45 	.word	0x0810cb45
 810cab8:	0810cb45 	.word	0x0810cb45
 810cabc:	0810cb45 	.word	0x0810cb45
 810cac0:	0810cb45 	.word	0x0810cb45
 810cac4:	0810cb37 	.word	0x0810cb37
 810cac8:	2b40      	cmp	r3, #64	; 0x40
 810caca:	d037      	beq.n	810cb3c <UART_SetConfig+0xa28>
 810cacc:	e03a      	b.n	810cb44 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810cace:	f7fc f8c3 	bl	8108c58 <HAL_RCC_GetPCLK1Freq>
 810cad2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810cad4:	e03c      	b.n	810cb50 <UART_SetConfig+0xa3c>
 810cad6:	bf00      	nop
 810cad8:	003d0900 	.word	0x003d0900
 810cadc:	0810e50c 	.word	0x0810e50c
 810cae0:	58024400 	.word	0x58024400
 810cae4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810cae8:	f7fc f8cc 	bl	8108c84 <HAL_RCC_GetPCLK2Freq>
 810caec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810caee:	e02f      	b.n	810cb50 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810caf0:	f107 0314 	add.w	r3, r7, #20
 810caf4:	4618      	mov	r0, r3
 810caf6:	f7fd f831 	bl	8109b5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810cafa:	69bb      	ldr	r3, [r7, #24]
 810cafc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810cafe:	e027      	b.n	810cb50 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810cb00:	f107 0308 	add.w	r3, r7, #8
 810cb04:	4618      	mov	r0, r3
 810cb06:	f7fd f97d 	bl	8109e04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810cb0a:	68fb      	ldr	r3, [r7, #12]
 810cb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810cb0e:	e01f      	b.n	810cb50 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810cb10:	4b2c      	ldr	r3, [pc, #176]	; (810cbc4 <UART_SetConfig+0xab0>)
 810cb12:	681b      	ldr	r3, [r3, #0]
 810cb14:	f003 0320 	and.w	r3, r3, #32
 810cb18:	2b00      	cmp	r3, #0
 810cb1a:	d009      	beq.n	810cb30 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810cb1c:	4b29      	ldr	r3, [pc, #164]	; (810cbc4 <UART_SetConfig+0xab0>)
 810cb1e:	681b      	ldr	r3, [r3, #0]
 810cb20:	08db      	lsrs	r3, r3, #3
 810cb22:	f003 0303 	and.w	r3, r3, #3
 810cb26:	4a28      	ldr	r2, [pc, #160]	; (810cbc8 <UART_SetConfig+0xab4>)
 810cb28:	fa22 f303 	lsr.w	r3, r2, r3
 810cb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810cb2e:	e00f      	b.n	810cb50 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810cb30:	4b25      	ldr	r3, [pc, #148]	; (810cbc8 <UART_SetConfig+0xab4>)
 810cb32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810cb34:	e00c      	b.n	810cb50 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810cb36:	4b25      	ldr	r3, [pc, #148]	; (810cbcc <UART_SetConfig+0xab8>)
 810cb38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810cb3a:	e009      	b.n	810cb50 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810cb3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810cb40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810cb42:	e005      	b.n	810cb50 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810cb44:	2300      	movs	r3, #0
 810cb46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810cb48:	2301      	movs	r3, #1
 810cb4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810cb4e:	bf00      	nop
    }

    if (pclk != 0U)
 810cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb52:	2b00      	cmp	r3, #0
 810cb54:	d021      	beq.n	810cb9a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810cb56:	687b      	ldr	r3, [r7, #4]
 810cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810cb5a:	4a1d      	ldr	r2, [pc, #116]	; (810cbd0 <UART_SetConfig+0xabc>)
 810cb5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810cb60:	461a      	mov	r2, r3
 810cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810cb64:	fbb3 f2f2 	udiv	r2, r3, r2
 810cb68:	687b      	ldr	r3, [r7, #4]
 810cb6a:	685b      	ldr	r3, [r3, #4]
 810cb6c:	085b      	lsrs	r3, r3, #1
 810cb6e:	441a      	add	r2, r3
 810cb70:	687b      	ldr	r3, [r7, #4]
 810cb72:	685b      	ldr	r3, [r3, #4]
 810cb74:	fbb2 f3f3 	udiv	r3, r2, r3
 810cb78:	b29b      	uxth	r3, r3
 810cb7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb7e:	2b0f      	cmp	r3, #15
 810cb80:	d908      	bls.n	810cb94 <UART_SetConfig+0xa80>
 810cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cb84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810cb88:	d204      	bcs.n	810cb94 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810cb8a:	687b      	ldr	r3, [r7, #4]
 810cb8c:	681b      	ldr	r3, [r3, #0]
 810cb8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810cb90:	60da      	str	r2, [r3, #12]
 810cb92:	e002      	b.n	810cb9a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810cb94:	2301      	movs	r3, #1
 810cb96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810cb9a:	687b      	ldr	r3, [r7, #4]
 810cb9c:	2201      	movs	r2, #1
 810cb9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810cba2:	687b      	ldr	r3, [r7, #4]
 810cba4:	2201      	movs	r2, #1
 810cba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810cbaa:	687b      	ldr	r3, [r7, #4]
 810cbac:	2200      	movs	r2, #0
 810cbae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810cbb0:	687b      	ldr	r3, [r7, #4]
 810cbb2:	2200      	movs	r2, #0
 810cbb4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810cbb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810cbba:	4618      	mov	r0, r3
 810cbbc:	3738      	adds	r7, #56	; 0x38
 810cbbe:	46bd      	mov	sp, r7
 810cbc0:	bdb0      	pop	{r4, r5, r7, pc}
 810cbc2:	bf00      	nop
 810cbc4:	58024400 	.word	0x58024400
 810cbc8:	03d09000 	.word	0x03d09000
 810cbcc:	003d0900 	.word	0x003d0900
 810cbd0:	0810e50c 	.word	0x0810e50c

0810cbd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810cbd4:	b480      	push	{r7}
 810cbd6:	b083      	sub	sp, #12
 810cbd8:	af00      	add	r7, sp, #0
 810cbda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810cbdc:	687b      	ldr	r3, [r7, #4]
 810cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cbe0:	f003 0301 	and.w	r3, r3, #1
 810cbe4:	2b00      	cmp	r3, #0
 810cbe6:	d00a      	beq.n	810cbfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810cbe8:	687b      	ldr	r3, [r7, #4]
 810cbea:	681b      	ldr	r3, [r3, #0]
 810cbec:	685b      	ldr	r3, [r3, #4]
 810cbee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810cbf6:	687b      	ldr	r3, [r7, #4]
 810cbf8:	681b      	ldr	r3, [r3, #0]
 810cbfa:	430a      	orrs	r2, r1
 810cbfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810cbfe:	687b      	ldr	r3, [r7, #4]
 810cc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cc02:	f003 0302 	and.w	r3, r3, #2
 810cc06:	2b00      	cmp	r3, #0
 810cc08:	d00a      	beq.n	810cc20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810cc0a:	687b      	ldr	r3, [r7, #4]
 810cc0c:	681b      	ldr	r3, [r3, #0]
 810cc0e:	685b      	ldr	r3, [r3, #4]
 810cc10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810cc14:	687b      	ldr	r3, [r7, #4]
 810cc16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810cc18:	687b      	ldr	r3, [r7, #4]
 810cc1a:	681b      	ldr	r3, [r3, #0]
 810cc1c:	430a      	orrs	r2, r1
 810cc1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810cc20:	687b      	ldr	r3, [r7, #4]
 810cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cc24:	f003 0304 	and.w	r3, r3, #4
 810cc28:	2b00      	cmp	r3, #0
 810cc2a:	d00a      	beq.n	810cc42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810cc2c:	687b      	ldr	r3, [r7, #4]
 810cc2e:	681b      	ldr	r3, [r3, #0]
 810cc30:	685b      	ldr	r3, [r3, #4]
 810cc32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810cc36:	687b      	ldr	r3, [r7, #4]
 810cc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810cc3a:	687b      	ldr	r3, [r7, #4]
 810cc3c:	681b      	ldr	r3, [r3, #0]
 810cc3e:	430a      	orrs	r2, r1
 810cc40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810cc42:	687b      	ldr	r3, [r7, #4]
 810cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cc46:	f003 0308 	and.w	r3, r3, #8
 810cc4a:	2b00      	cmp	r3, #0
 810cc4c:	d00a      	beq.n	810cc64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810cc4e:	687b      	ldr	r3, [r7, #4]
 810cc50:	681b      	ldr	r3, [r3, #0]
 810cc52:	685b      	ldr	r3, [r3, #4]
 810cc54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810cc58:	687b      	ldr	r3, [r7, #4]
 810cc5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810cc5c:	687b      	ldr	r3, [r7, #4]
 810cc5e:	681b      	ldr	r3, [r3, #0]
 810cc60:	430a      	orrs	r2, r1
 810cc62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810cc64:	687b      	ldr	r3, [r7, #4]
 810cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cc68:	f003 0310 	and.w	r3, r3, #16
 810cc6c:	2b00      	cmp	r3, #0
 810cc6e:	d00a      	beq.n	810cc86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810cc70:	687b      	ldr	r3, [r7, #4]
 810cc72:	681b      	ldr	r3, [r3, #0]
 810cc74:	689b      	ldr	r3, [r3, #8]
 810cc76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810cc7a:	687b      	ldr	r3, [r7, #4]
 810cc7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810cc7e:	687b      	ldr	r3, [r7, #4]
 810cc80:	681b      	ldr	r3, [r3, #0]
 810cc82:	430a      	orrs	r2, r1
 810cc84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810cc86:	687b      	ldr	r3, [r7, #4]
 810cc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cc8a:	f003 0320 	and.w	r3, r3, #32
 810cc8e:	2b00      	cmp	r3, #0
 810cc90:	d00a      	beq.n	810cca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810cc92:	687b      	ldr	r3, [r7, #4]
 810cc94:	681b      	ldr	r3, [r3, #0]
 810cc96:	689b      	ldr	r3, [r3, #8]
 810cc98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810cc9c:	687b      	ldr	r3, [r7, #4]
 810cc9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810cca0:	687b      	ldr	r3, [r7, #4]
 810cca2:	681b      	ldr	r3, [r3, #0]
 810cca4:	430a      	orrs	r2, r1
 810cca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810cca8:	687b      	ldr	r3, [r7, #4]
 810ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ccac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ccb0:	2b00      	cmp	r3, #0
 810ccb2:	d01a      	beq.n	810ccea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810ccb4:	687b      	ldr	r3, [r7, #4]
 810ccb6:	681b      	ldr	r3, [r3, #0]
 810ccb8:	685b      	ldr	r3, [r3, #4]
 810ccba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810ccbe:	687b      	ldr	r3, [r7, #4]
 810ccc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810ccc2:	687b      	ldr	r3, [r7, #4]
 810ccc4:	681b      	ldr	r3, [r3, #0]
 810ccc6:	430a      	orrs	r2, r1
 810ccc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810ccca:	687b      	ldr	r3, [r7, #4]
 810cccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810ccce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ccd2:	d10a      	bne.n	810ccea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810ccd4:	687b      	ldr	r3, [r7, #4]
 810ccd6:	681b      	ldr	r3, [r3, #0]
 810ccd8:	685b      	ldr	r3, [r3, #4]
 810ccda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810ccde:	687b      	ldr	r3, [r7, #4]
 810cce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810cce2:	687b      	ldr	r3, [r7, #4]
 810cce4:	681b      	ldr	r3, [r3, #0]
 810cce6:	430a      	orrs	r2, r1
 810cce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810ccea:	687b      	ldr	r3, [r7, #4]
 810ccec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ccee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ccf2:	2b00      	cmp	r3, #0
 810ccf4:	d00a      	beq.n	810cd0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810ccf6:	687b      	ldr	r3, [r7, #4]
 810ccf8:	681b      	ldr	r3, [r3, #0]
 810ccfa:	685b      	ldr	r3, [r3, #4]
 810ccfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810cd00:	687b      	ldr	r3, [r7, #4]
 810cd02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810cd04:	687b      	ldr	r3, [r7, #4]
 810cd06:	681b      	ldr	r3, [r3, #0]
 810cd08:	430a      	orrs	r2, r1
 810cd0a:	605a      	str	r2, [r3, #4]
  }
}
 810cd0c:	bf00      	nop
 810cd0e:	370c      	adds	r7, #12
 810cd10:	46bd      	mov	sp, r7
 810cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd16:	4770      	bx	lr

0810cd18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810cd18:	b580      	push	{r7, lr}
 810cd1a:	b086      	sub	sp, #24
 810cd1c:	af02      	add	r7, sp, #8
 810cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810cd20:	687b      	ldr	r3, [r7, #4]
 810cd22:	2200      	movs	r2, #0
 810cd24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810cd28:	f7f6 fcf8 	bl	810371c <HAL_GetTick>
 810cd2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810cd2e:	687b      	ldr	r3, [r7, #4]
 810cd30:	681b      	ldr	r3, [r3, #0]
 810cd32:	681b      	ldr	r3, [r3, #0]
 810cd34:	f003 0308 	and.w	r3, r3, #8
 810cd38:	2b08      	cmp	r3, #8
 810cd3a:	d10e      	bne.n	810cd5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810cd3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810cd40:	9300      	str	r3, [sp, #0]
 810cd42:	68fb      	ldr	r3, [r7, #12]
 810cd44:	2200      	movs	r2, #0
 810cd46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810cd4a:	6878      	ldr	r0, [r7, #4]
 810cd4c:	f000 f82f 	bl	810cdae <UART_WaitOnFlagUntilTimeout>
 810cd50:	4603      	mov	r3, r0
 810cd52:	2b00      	cmp	r3, #0
 810cd54:	d001      	beq.n	810cd5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810cd56:	2303      	movs	r3, #3
 810cd58:	e025      	b.n	810cda6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810cd5a:	687b      	ldr	r3, [r7, #4]
 810cd5c:	681b      	ldr	r3, [r3, #0]
 810cd5e:	681b      	ldr	r3, [r3, #0]
 810cd60:	f003 0304 	and.w	r3, r3, #4
 810cd64:	2b04      	cmp	r3, #4
 810cd66:	d10e      	bne.n	810cd86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810cd68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810cd6c:	9300      	str	r3, [sp, #0]
 810cd6e:	68fb      	ldr	r3, [r7, #12]
 810cd70:	2200      	movs	r2, #0
 810cd72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810cd76:	6878      	ldr	r0, [r7, #4]
 810cd78:	f000 f819 	bl	810cdae <UART_WaitOnFlagUntilTimeout>
 810cd7c:	4603      	mov	r3, r0
 810cd7e:	2b00      	cmp	r3, #0
 810cd80:	d001      	beq.n	810cd86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810cd82:	2303      	movs	r3, #3
 810cd84:	e00f      	b.n	810cda6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810cd86:	687b      	ldr	r3, [r7, #4]
 810cd88:	2220      	movs	r2, #32
 810cd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810cd8e:	687b      	ldr	r3, [r7, #4]
 810cd90:	2220      	movs	r2, #32
 810cd92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810cd96:	687b      	ldr	r3, [r7, #4]
 810cd98:	2200      	movs	r2, #0
 810cd9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810cd9c:	687b      	ldr	r3, [r7, #4]
 810cd9e:	2200      	movs	r2, #0
 810cda0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810cda4:	2300      	movs	r3, #0
}
 810cda6:	4618      	mov	r0, r3
 810cda8:	3710      	adds	r7, #16
 810cdaa:	46bd      	mov	sp, r7
 810cdac:	bd80      	pop	{r7, pc}

0810cdae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810cdae:	b580      	push	{r7, lr}
 810cdb0:	b084      	sub	sp, #16
 810cdb2:	af00      	add	r7, sp, #0
 810cdb4:	60f8      	str	r0, [r7, #12]
 810cdb6:	60b9      	str	r1, [r7, #8]
 810cdb8:	603b      	str	r3, [r7, #0]
 810cdba:	4613      	mov	r3, r2
 810cdbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810cdbe:	e062      	b.n	810ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810cdc0:	69bb      	ldr	r3, [r7, #24]
 810cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cdc6:	d05e      	beq.n	810ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810cdc8:	f7f6 fca8 	bl	810371c <HAL_GetTick>
 810cdcc:	4602      	mov	r2, r0
 810cdce:	683b      	ldr	r3, [r7, #0]
 810cdd0:	1ad3      	subs	r3, r2, r3
 810cdd2:	69ba      	ldr	r2, [r7, #24]
 810cdd4:	429a      	cmp	r2, r3
 810cdd6:	d302      	bcc.n	810cdde <UART_WaitOnFlagUntilTimeout+0x30>
 810cdd8:	69bb      	ldr	r3, [r7, #24]
 810cdda:	2b00      	cmp	r3, #0
 810cddc:	d11d      	bne.n	810ce1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810cdde:	68fb      	ldr	r3, [r7, #12]
 810cde0:	681b      	ldr	r3, [r3, #0]
 810cde2:	681a      	ldr	r2, [r3, #0]
 810cde4:	68fb      	ldr	r3, [r7, #12]
 810cde6:	681b      	ldr	r3, [r3, #0]
 810cde8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810cdec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810cdee:	68fb      	ldr	r3, [r7, #12]
 810cdf0:	681b      	ldr	r3, [r3, #0]
 810cdf2:	689a      	ldr	r2, [r3, #8]
 810cdf4:	68fb      	ldr	r3, [r7, #12]
 810cdf6:	681b      	ldr	r3, [r3, #0]
 810cdf8:	f022 0201 	bic.w	r2, r2, #1
 810cdfc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810cdfe:	68fb      	ldr	r3, [r7, #12]
 810ce00:	2220      	movs	r2, #32
 810ce02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810ce06:	68fb      	ldr	r3, [r7, #12]
 810ce08:	2220      	movs	r2, #32
 810ce0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810ce0e:	68fb      	ldr	r3, [r7, #12]
 810ce10:	2200      	movs	r2, #0
 810ce12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810ce16:	2303      	movs	r3, #3
 810ce18:	e045      	b.n	810cea6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810ce1a:	68fb      	ldr	r3, [r7, #12]
 810ce1c:	681b      	ldr	r3, [r3, #0]
 810ce1e:	681b      	ldr	r3, [r3, #0]
 810ce20:	f003 0304 	and.w	r3, r3, #4
 810ce24:	2b00      	cmp	r3, #0
 810ce26:	d02e      	beq.n	810ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810ce28:	68fb      	ldr	r3, [r7, #12]
 810ce2a:	681b      	ldr	r3, [r3, #0]
 810ce2c:	69db      	ldr	r3, [r3, #28]
 810ce2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ce32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810ce36:	d126      	bne.n	810ce86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ce38:	68fb      	ldr	r3, [r7, #12]
 810ce3a:	681b      	ldr	r3, [r3, #0]
 810ce3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ce40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810ce42:	68fb      	ldr	r3, [r7, #12]
 810ce44:	681b      	ldr	r3, [r3, #0]
 810ce46:	681a      	ldr	r2, [r3, #0]
 810ce48:	68fb      	ldr	r3, [r7, #12]
 810ce4a:	681b      	ldr	r3, [r3, #0]
 810ce4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810ce50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810ce52:	68fb      	ldr	r3, [r7, #12]
 810ce54:	681b      	ldr	r3, [r3, #0]
 810ce56:	689a      	ldr	r2, [r3, #8]
 810ce58:	68fb      	ldr	r3, [r7, #12]
 810ce5a:	681b      	ldr	r3, [r3, #0]
 810ce5c:	f022 0201 	bic.w	r2, r2, #1
 810ce60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810ce62:	68fb      	ldr	r3, [r7, #12]
 810ce64:	2220      	movs	r2, #32
 810ce66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810ce6a:	68fb      	ldr	r3, [r7, #12]
 810ce6c:	2220      	movs	r2, #32
 810ce6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810ce72:	68fb      	ldr	r3, [r7, #12]
 810ce74:	2220      	movs	r2, #32
 810ce76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810ce7a:	68fb      	ldr	r3, [r7, #12]
 810ce7c:	2200      	movs	r2, #0
 810ce7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810ce82:	2303      	movs	r3, #3
 810ce84:	e00f      	b.n	810cea6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810ce86:	68fb      	ldr	r3, [r7, #12]
 810ce88:	681b      	ldr	r3, [r3, #0]
 810ce8a:	69da      	ldr	r2, [r3, #28]
 810ce8c:	68bb      	ldr	r3, [r7, #8]
 810ce8e:	4013      	ands	r3, r2
 810ce90:	68ba      	ldr	r2, [r7, #8]
 810ce92:	429a      	cmp	r2, r3
 810ce94:	bf0c      	ite	eq
 810ce96:	2301      	moveq	r3, #1
 810ce98:	2300      	movne	r3, #0
 810ce9a:	b2db      	uxtb	r3, r3
 810ce9c:	461a      	mov	r2, r3
 810ce9e:	79fb      	ldrb	r3, [r7, #7]
 810cea0:	429a      	cmp	r2, r3
 810cea2:	d08d      	beq.n	810cdc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810cea4:	2300      	movs	r3, #0
}
 810cea6:	4618      	mov	r0, r3
 810cea8:	3710      	adds	r7, #16
 810ceaa:	46bd      	mov	sp, r7
 810ceac:	bd80      	pop	{r7, pc}
	...

0810ceb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810ceb0:	b580      	push	{r7, lr}
 810ceb2:	b084      	sub	sp, #16
 810ceb4:	af00      	add	r7, sp, #0
 810ceb6:	60f8      	str	r0, [r7, #12]
 810ceb8:	60b9      	str	r1, [r7, #8]
 810ceba:	4613      	mov	r3, r2
 810cebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810cebe:	68fb      	ldr	r3, [r7, #12]
 810cec0:	68ba      	ldr	r2, [r7, #8]
 810cec2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810cec4:	68fb      	ldr	r3, [r7, #12]
 810cec6:	88fa      	ldrh	r2, [r7, #6]
 810cec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810cecc:	68fb      	ldr	r3, [r7, #12]
 810cece:	2200      	movs	r2, #0
 810ced0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810ced4:	68fb      	ldr	r3, [r7, #12]
 810ced6:	2222      	movs	r2, #34	; 0x22
 810ced8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810cedc:	68fb      	ldr	r3, [r7, #12]
 810cede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cee0:	2b00      	cmp	r3, #0
 810cee2:	d02c      	beq.n	810cf3e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810cee4:	68fb      	ldr	r3, [r7, #12]
 810cee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cee8:	4a25      	ldr	r2, [pc, #148]	; (810cf80 <UART_Start_Receive_DMA+0xd0>)
 810ceea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810ceec:	68fb      	ldr	r3, [r7, #12]
 810ceee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cef0:	4a24      	ldr	r2, [pc, #144]	; (810cf84 <UART_Start_Receive_DMA+0xd4>)
 810cef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810cef4:	68fb      	ldr	r3, [r7, #12]
 810cef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cef8:	4a23      	ldr	r2, [pc, #140]	; (810cf88 <UART_Start_Receive_DMA+0xd8>)
 810cefa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810cefc:	68fb      	ldr	r3, [r7, #12]
 810cefe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810cf00:	2200      	movs	r2, #0
 810cf02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810cf04:	68fb      	ldr	r3, [r7, #12]
 810cf06:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810cf08:	68fb      	ldr	r3, [r7, #12]
 810cf0a:	681b      	ldr	r3, [r3, #0]
 810cf0c:	3324      	adds	r3, #36	; 0x24
 810cf0e:	4619      	mov	r1, r3
 810cf10:	68fb      	ldr	r3, [r7, #12]
 810cf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810cf14:	461a      	mov	r2, r3
 810cf16:	88fb      	ldrh	r3, [r7, #6]
 810cf18:	f7f7 fba0 	bl	810465c <HAL_DMA_Start_IT>
 810cf1c:	4603      	mov	r3, r0
 810cf1e:	2b00      	cmp	r3, #0
 810cf20:	d00d      	beq.n	810cf3e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810cf22:	68fb      	ldr	r3, [r7, #12]
 810cf24:	2210      	movs	r2, #16
 810cf26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810cf2a:	68fb      	ldr	r3, [r7, #12]
 810cf2c:	2200      	movs	r2, #0
 810cf2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810cf32:	68fb      	ldr	r3, [r7, #12]
 810cf34:	2220      	movs	r2, #32
 810cf36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810cf3a:	2301      	movs	r3, #1
 810cf3c:	e01c      	b.n	810cf78 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810cf3e:	68fb      	ldr	r3, [r7, #12]
 810cf40:	2200      	movs	r2, #0
 810cf42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810cf46:	68fb      	ldr	r3, [r7, #12]
 810cf48:	681b      	ldr	r3, [r3, #0]
 810cf4a:	681a      	ldr	r2, [r3, #0]
 810cf4c:	68fb      	ldr	r3, [r7, #12]
 810cf4e:	681b      	ldr	r3, [r3, #0]
 810cf50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810cf54:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810cf56:	68fb      	ldr	r3, [r7, #12]
 810cf58:	681b      	ldr	r3, [r3, #0]
 810cf5a:	689a      	ldr	r2, [r3, #8]
 810cf5c:	68fb      	ldr	r3, [r7, #12]
 810cf5e:	681b      	ldr	r3, [r3, #0]
 810cf60:	f042 0201 	orr.w	r2, r2, #1
 810cf64:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810cf66:	68fb      	ldr	r3, [r7, #12]
 810cf68:	681b      	ldr	r3, [r3, #0]
 810cf6a:	689a      	ldr	r2, [r3, #8]
 810cf6c:	68fb      	ldr	r3, [r7, #12]
 810cf6e:	681b      	ldr	r3, [r3, #0]
 810cf70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810cf74:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810cf76:	2300      	movs	r3, #0
}
 810cf78:	4618      	mov	r0, r3
 810cf7a:	3710      	adds	r7, #16
 810cf7c:	46bd      	mov	sp, r7
 810cf7e:	bd80      	pop	{r7, pc}
 810cf80:	0810d099 	.word	0x0810d099
 810cf84:	0810d12f 	.word	0x0810d12f
 810cf88:	0810d167 	.word	0x0810d167

0810cf8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810cf8c:	b480      	push	{r7}
 810cf8e:	b083      	sub	sp, #12
 810cf90:	af00      	add	r7, sp, #0
 810cf92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810cf94:	687b      	ldr	r3, [r7, #4]
 810cf96:	681b      	ldr	r3, [r3, #0]
 810cf98:	681a      	ldr	r2, [r3, #0]
 810cf9a:	687b      	ldr	r3, [r7, #4]
 810cf9c:	681b      	ldr	r3, [r3, #0]
 810cf9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810cfa2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810cfa4:	687b      	ldr	r3, [r7, #4]
 810cfa6:	681b      	ldr	r3, [r3, #0]
 810cfa8:	689a      	ldr	r2, [r3, #8]
 810cfaa:	687b      	ldr	r3, [r7, #4]
 810cfac:	681b      	ldr	r3, [r3, #0]
 810cfae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810cfb2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810cfb4:	687b      	ldr	r3, [r7, #4]
 810cfb6:	2220      	movs	r2, #32
 810cfb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810cfbc:	bf00      	nop
 810cfbe:	370c      	adds	r7, #12
 810cfc0:	46bd      	mov	sp, r7
 810cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cfc6:	4770      	bx	lr

0810cfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810cfc8:	b480      	push	{r7}
 810cfca:	b083      	sub	sp, #12
 810cfcc:	af00      	add	r7, sp, #0
 810cfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810cfd0:	687b      	ldr	r3, [r7, #4]
 810cfd2:	681b      	ldr	r3, [r3, #0]
 810cfd4:	681a      	ldr	r2, [r3, #0]
 810cfd6:	687b      	ldr	r3, [r7, #4]
 810cfd8:	681b      	ldr	r3, [r3, #0]
 810cfda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810cfde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810cfe0:	687b      	ldr	r3, [r7, #4]
 810cfe2:	681b      	ldr	r3, [r3, #0]
 810cfe4:	689b      	ldr	r3, [r3, #8]
 810cfe6:	687a      	ldr	r2, [r7, #4]
 810cfe8:	6812      	ldr	r2, [r2, #0]
 810cfea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810cfee:	f023 0301 	bic.w	r3, r3, #1
 810cff2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810cff4:	687b      	ldr	r3, [r7, #4]
 810cff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810cff8:	2b01      	cmp	r3, #1
 810cffa:	d107      	bne.n	810d00c <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810cffc:	687b      	ldr	r3, [r7, #4]
 810cffe:	681b      	ldr	r3, [r3, #0]
 810d000:	681a      	ldr	r2, [r3, #0]
 810d002:	687b      	ldr	r3, [r7, #4]
 810d004:	681b      	ldr	r3, [r3, #0]
 810d006:	f022 0210 	bic.w	r2, r2, #16
 810d00a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810d00c:	687b      	ldr	r3, [r7, #4]
 810d00e:	2220      	movs	r2, #32
 810d010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	2200      	movs	r2, #0
 810d018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810d01a:	687b      	ldr	r3, [r7, #4]
 810d01c:	2200      	movs	r2, #0
 810d01e:	671a      	str	r2, [r3, #112]	; 0x70
}
 810d020:	bf00      	nop
 810d022:	370c      	adds	r7, #12
 810d024:	46bd      	mov	sp, r7
 810d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d02a:	4770      	bx	lr

0810d02c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810d02c:	b580      	push	{r7, lr}
 810d02e:	b084      	sub	sp, #16
 810d030:	af00      	add	r7, sp, #0
 810d032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d034:	687b      	ldr	r3, [r7, #4]
 810d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d038:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810d03a:	687b      	ldr	r3, [r7, #4]
 810d03c:	69db      	ldr	r3, [r3, #28]
 810d03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d042:	d014      	beq.n	810d06e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810d044:	68fb      	ldr	r3, [r7, #12]
 810d046:	2200      	movs	r2, #0
 810d048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810d04c:	68fb      	ldr	r3, [r7, #12]
 810d04e:	681b      	ldr	r3, [r3, #0]
 810d050:	689a      	ldr	r2, [r3, #8]
 810d052:	68fb      	ldr	r3, [r7, #12]
 810d054:	681b      	ldr	r3, [r3, #0]
 810d056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810d05a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810d05c:	68fb      	ldr	r3, [r7, #12]
 810d05e:	681b      	ldr	r3, [r3, #0]
 810d060:	681a      	ldr	r2, [r3, #0]
 810d062:	68fb      	ldr	r3, [r7, #12]
 810d064:	681b      	ldr	r3, [r3, #0]
 810d066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d06a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d06c:	e002      	b.n	810d074 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810d06e:	68f8      	ldr	r0, [r7, #12]
 810d070:	f7f6 f958 	bl	8103324 <HAL_UART_TxCpltCallback>
}
 810d074:	bf00      	nop
 810d076:	3710      	adds	r7, #16
 810d078:	46bd      	mov	sp, r7
 810d07a:	bd80      	pop	{r7, pc}

0810d07c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810d07c:	b580      	push	{r7, lr}
 810d07e:	b084      	sub	sp, #16
 810d080:	af00      	add	r7, sp, #0
 810d082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d084:	687b      	ldr	r3, [r7, #4]
 810d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d088:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810d08a:	68f8      	ldr	r0, [r7, #12]
 810d08c:	f7ff f818 	bl	810c0c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d090:	bf00      	nop
 810d092:	3710      	adds	r7, #16
 810d094:	46bd      	mov	sp, r7
 810d096:	bd80      	pop	{r7, pc}

0810d098 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810d098:	b580      	push	{r7, lr}
 810d09a:	b084      	sub	sp, #16
 810d09c:	af00      	add	r7, sp, #0
 810d09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d0a0:	687b      	ldr	r3, [r7, #4]
 810d0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d0a4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810d0a6:	687b      	ldr	r3, [r7, #4]
 810d0a8:	69db      	ldr	r3, [r3, #28]
 810d0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d0ae:	d02b      	beq.n	810d108 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810d0b0:	68fb      	ldr	r3, [r7, #12]
 810d0b2:	2200      	movs	r2, #0
 810d0b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d0b8:	68fb      	ldr	r3, [r7, #12]
 810d0ba:	681b      	ldr	r3, [r3, #0]
 810d0bc:	681a      	ldr	r2, [r3, #0]
 810d0be:	68fb      	ldr	r3, [r7, #12]
 810d0c0:	681b      	ldr	r3, [r3, #0]
 810d0c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810d0c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d0c8:	68fb      	ldr	r3, [r7, #12]
 810d0ca:	681b      	ldr	r3, [r3, #0]
 810d0cc:	689a      	ldr	r2, [r3, #8]
 810d0ce:	68fb      	ldr	r3, [r7, #12]
 810d0d0:	681b      	ldr	r3, [r3, #0]
 810d0d2:	f022 0201 	bic.w	r2, r2, #1
 810d0d6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d0d8:	68fb      	ldr	r3, [r7, #12]
 810d0da:	681b      	ldr	r3, [r3, #0]
 810d0dc:	689a      	ldr	r2, [r3, #8]
 810d0de:	68fb      	ldr	r3, [r7, #12]
 810d0e0:	681b      	ldr	r3, [r3, #0]
 810d0e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d0e6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810d0e8:	68fb      	ldr	r3, [r7, #12]
 810d0ea:	2220      	movs	r2, #32
 810d0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d0f0:	68fb      	ldr	r3, [r7, #12]
 810d0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d0f4:	2b01      	cmp	r3, #1
 810d0f6:	d107      	bne.n	810d108 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d0f8:	68fb      	ldr	r3, [r7, #12]
 810d0fa:	681b      	ldr	r3, [r3, #0]
 810d0fc:	681a      	ldr	r2, [r3, #0]
 810d0fe:	68fb      	ldr	r3, [r7, #12]
 810d100:	681b      	ldr	r3, [r3, #0]
 810d102:	f022 0210 	bic.w	r2, r2, #16
 810d106:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d108:	68fb      	ldr	r3, [r7, #12]
 810d10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d10c:	2b01      	cmp	r3, #1
 810d10e:	d107      	bne.n	810d120 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810d110:	68fb      	ldr	r3, [r7, #12]
 810d112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d116:	4619      	mov	r1, r3
 810d118:	68f8      	ldr	r0, [r7, #12]
 810d11a:	f7fe ffef 	bl	810c0fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d11e:	e002      	b.n	810d126 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810d120:	68f8      	ldr	r0, [r7, #12]
 810d122:	f7f6 f889 	bl	8103238 <HAL_UART_RxCpltCallback>
}
 810d126:	bf00      	nop
 810d128:	3710      	adds	r7, #16
 810d12a:	46bd      	mov	sp, r7
 810d12c:	bd80      	pop	{r7, pc}

0810d12e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810d12e:	b580      	push	{r7, lr}
 810d130:	b084      	sub	sp, #16
 810d132:	af00      	add	r7, sp, #0
 810d134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d136:	687b      	ldr	r3, [r7, #4]
 810d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d13a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d13c:	68fb      	ldr	r3, [r7, #12]
 810d13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d140:	2b01      	cmp	r3, #1
 810d142:	d109      	bne.n	810d158 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810d144:	68fb      	ldr	r3, [r7, #12]
 810d146:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d14a:	085b      	lsrs	r3, r3, #1
 810d14c:	b29b      	uxth	r3, r3
 810d14e:	4619      	mov	r1, r3
 810d150:	68f8      	ldr	r0, [r7, #12]
 810d152:	f7fe ffd3 	bl	810c0fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d156:	e002      	b.n	810d15e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810d158:	68f8      	ldr	r0, [r7, #12]
 810d15a:	f7fe ffbb 	bl	810c0d4 <HAL_UART_RxHalfCpltCallback>
}
 810d15e:	bf00      	nop
 810d160:	3710      	adds	r7, #16
 810d162:	46bd      	mov	sp, r7
 810d164:	bd80      	pop	{r7, pc}

0810d166 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810d166:	b580      	push	{r7, lr}
 810d168:	b086      	sub	sp, #24
 810d16a:	af00      	add	r7, sp, #0
 810d16c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d16e:	687b      	ldr	r3, [r7, #4]
 810d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d172:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810d174:	697b      	ldr	r3, [r7, #20]
 810d176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d17a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810d17c:	697b      	ldr	r3, [r7, #20]
 810d17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810d182:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810d184:	697b      	ldr	r3, [r7, #20]
 810d186:	681b      	ldr	r3, [r3, #0]
 810d188:	689b      	ldr	r3, [r3, #8]
 810d18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d18e:	2b80      	cmp	r3, #128	; 0x80
 810d190:	d109      	bne.n	810d1a6 <UART_DMAError+0x40>
 810d192:	693b      	ldr	r3, [r7, #16]
 810d194:	2b21      	cmp	r3, #33	; 0x21
 810d196:	d106      	bne.n	810d1a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810d198:	697b      	ldr	r3, [r7, #20]
 810d19a:	2200      	movs	r2, #0
 810d19c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810d1a0:	6978      	ldr	r0, [r7, #20]
 810d1a2:	f7ff fef3 	bl	810cf8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810d1a6:	697b      	ldr	r3, [r7, #20]
 810d1a8:	681b      	ldr	r3, [r3, #0]
 810d1aa:	689b      	ldr	r3, [r3, #8]
 810d1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d1b0:	2b40      	cmp	r3, #64	; 0x40
 810d1b2:	d109      	bne.n	810d1c8 <UART_DMAError+0x62>
 810d1b4:	68fb      	ldr	r3, [r7, #12]
 810d1b6:	2b22      	cmp	r3, #34	; 0x22
 810d1b8:	d106      	bne.n	810d1c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810d1ba:	697b      	ldr	r3, [r7, #20]
 810d1bc:	2200      	movs	r2, #0
 810d1be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810d1c2:	6978      	ldr	r0, [r7, #20]
 810d1c4:	f7ff ff00 	bl	810cfc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810d1c8:	697b      	ldr	r3, [r7, #20]
 810d1ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d1ce:	f043 0210 	orr.w	r2, r3, #16
 810d1d2:	697b      	ldr	r3, [r7, #20]
 810d1d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810d1d8:	6978      	ldr	r0, [r7, #20]
 810d1da:	f7fe ff85 	bl	810c0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d1de:	bf00      	nop
 810d1e0:	3718      	adds	r7, #24
 810d1e2:	46bd      	mov	sp, r7
 810d1e4:	bd80      	pop	{r7, pc}

0810d1e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810d1e6:	b580      	push	{r7, lr}
 810d1e8:	b084      	sub	sp, #16
 810d1ea:	af00      	add	r7, sp, #0
 810d1ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d1ee:	687b      	ldr	r3, [r7, #4]
 810d1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d1f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810d1f4:	68fb      	ldr	r3, [r7, #12]
 810d1f6:	2200      	movs	r2, #0
 810d1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810d1fc:	68fb      	ldr	r3, [r7, #12]
 810d1fe:	2200      	movs	r2, #0
 810d200:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810d204:	68f8      	ldr	r0, [r7, #12]
 810d206:	f7fe ff6f 	bl	810c0e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d20a:	bf00      	nop
 810d20c:	3710      	adds	r7, #16
 810d20e:	46bd      	mov	sp, r7
 810d210:	bd80      	pop	{r7, pc}

0810d212 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810d212:	b580      	push	{r7, lr}
 810d214:	b082      	sub	sp, #8
 810d216:	af00      	add	r7, sp, #0
 810d218:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810d21a:	687b      	ldr	r3, [r7, #4]
 810d21c:	681b      	ldr	r3, [r3, #0]
 810d21e:	681a      	ldr	r2, [r3, #0]
 810d220:	687b      	ldr	r3, [r7, #4]
 810d222:	681b      	ldr	r3, [r3, #0]
 810d224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d228:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810d22a:	687b      	ldr	r3, [r7, #4]
 810d22c:	2220      	movs	r2, #32
 810d22e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810d232:	687b      	ldr	r3, [r7, #4]
 810d234:	2200      	movs	r2, #0
 810d236:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810d238:	6878      	ldr	r0, [r7, #4]
 810d23a:	f7f6 f873 	bl	8103324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d23e:	bf00      	nop
 810d240:	3708      	adds	r7, #8
 810d242:	46bd      	mov	sp, r7
 810d244:	bd80      	pop	{r7, pc}

0810d246 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810d246:	b480      	push	{r7}
 810d248:	b083      	sub	sp, #12
 810d24a:	af00      	add	r7, sp, #0
 810d24c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810d24e:	bf00      	nop
 810d250:	370c      	adds	r7, #12
 810d252:	46bd      	mov	sp, r7
 810d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d258:	4770      	bx	lr

0810d25a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810d25a:	b480      	push	{r7}
 810d25c:	b083      	sub	sp, #12
 810d25e:	af00      	add	r7, sp, #0
 810d260:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810d262:	bf00      	nop
 810d264:	370c      	adds	r7, #12
 810d266:	46bd      	mov	sp, r7
 810d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d26c:	4770      	bx	lr

0810d26e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810d26e:	b480      	push	{r7}
 810d270:	b083      	sub	sp, #12
 810d272:	af00      	add	r7, sp, #0
 810d274:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810d276:	bf00      	nop
 810d278:	370c      	adds	r7, #12
 810d27a:	46bd      	mov	sp, r7
 810d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d280:	4770      	bx	lr

0810d282 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810d282:	b480      	push	{r7}
 810d284:	b085      	sub	sp, #20
 810d286:	af00      	add	r7, sp, #0
 810d288:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d28a:	687b      	ldr	r3, [r7, #4]
 810d28c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d290:	2b01      	cmp	r3, #1
 810d292:	d101      	bne.n	810d298 <HAL_UARTEx_DisableFifoMode+0x16>
 810d294:	2302      	movs	r3, #2
 810d296:	e027      	b.n	810d2e8 <HAL_UARTEx_DisableFifoMode+0x66>
 810d298:	687b      	ldr	r3, [r7, #4]
 810d29a:	2201      	movs	r2, #1
 810d29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d2a0:	687b      	ldr	r3, [r7, #4]
 810d2a2:	2224      	movs	r2, #36	; 0x24
 810d2a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d2a8:	687b      	ldr	r3, [r7, #4]
 810d2aa:	681b      	ldr	r3, [r3, #0]
 810d2ac:	681b      	ldr	r3, [r3, #0]
 810d2ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d2b0:	687b      	ldr	r3, [r7, #4]
 810d2b2:	681b      	ldr	r3, [r3, #0]
 810d2b4:	681a      	ldr	r2, [r3, #0]
 810d2b6:	687b      	ldr	r3, [r7, #4]
 810d2b8:	681b      	ldr	r3, [r3, #0]
 810d2ba:	f022 0201 	bic.w	r2, r2, #1
 810d2be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810d2c0:	68fb      	ldr	r3, [r7, #12]
 810d2c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810d2c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810d2c8:	687b      	ldr	r3, [r7, #4]
 810d2ca:	2200      	movs	r2, #0
 810d2cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d2ce:	687b      	ldr	r3, [r7, #4]
 810d2d0:	681b      	ldr	r3, [r3, #0]
 810d2d2:	68fa      	ldr	r2, [r7, #12]
 810d2d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d2d6:	687b      	ldr	r3, [r7, #4]
 810d2d8:	2220      	movs	r2, #32
 810d2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d2de:	687b      	ldr	r3, [r7, #4]
 810d2e0:	2200      	movs	r2, #0
 810d2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d2e6:	2300      	movs	r3, #0
}
 810d2e8:	4618      	mov	r0, r3
 810d2ea:	3714      	adds	r7, #20
 810d2ec:	46bd      	mov	sp, r7
 810d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2f2:	4770      	bx	lr

0810d2f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810d2f4:	b580      	push	{r7, lr}
 810d2f6:	b084      	sub	sp, #16
 810d2f8:	af00      	add	r7, sp, #0
 810d2fa:	6078      	str	r0, [r7, #4]
 810d2fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d2fe:	687b      	ldr	r3, [r7, #4]
 810d300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d304:	2b01      	cmp	r3, #1
 810d306:	d101      	bne.n	810d30c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810d308:	2302      	movs	r3, #2
 810d30a:	e02d      	b.n	810d368 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810d30c:	687b      	ldr	r3, [r7, #4]
 810d30e:	2201      	movs	r2, #1
 810d310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d314:	687b      	ldr	r3, [r7, #4]
 810d316:	2224      	movs	r2, #36	; 0x24
 810d318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d31c:	687b      	ldr	r3, [r7, #4]
 810d31e:	681b      	ldr	r3, [r3, #0]
 810d320:	681b      	ldr	r3, [r3, #0]
 810d322:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d324:	687b      	ldr	r3, [r7, #4]
 810d326:	681b      	ldr	r3, [r3, #0]
 810d328:	681a      	ldr	r2, [r3, #0]
 810d32a:	687b      	ldr	r3, [r7, #4]
 810d32c:	681b      	ldr	r3, [r3, #0]
 810d32e:	f022 0201 	bic.w	r2, r2, #1
 810d332:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810d334:	687b      	ldr	r3, [r7, #4]
 810d336:	681b      	ldr	r3, [r3, #0]
 810d338:	689b      	ldr	r3, [r3, #8]
 810d33a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810d33e:	687b      	ldr	r3, [r7, #4]
 810d340:	681b      	ldr	r3, [r3, #0]
 810d342:	683a      	ldr	r2, [r7, #0]
 810d344:	430a      	orrs	r2, r1
 810d346:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810d348:	6878      	ldr	r0, [r7, #4]
 810d34a:	f000 f84f 	bl	810d3ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d34e:	687b      	ldr	r3, [r7, #4]
 810d350:	681b      	ldr	r3, [r3, #0]
 810d352:	68fa      	ldr	r2, [r7, #12]
 810d354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d356:	687b      	ldr	r3, [r7, #4]
 810d358:	2220      	movs	r2, #32
 810d35a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d35e:	687b      	ldr	r3, [r7, #4]
 810d360:	2200      	movs	r2, #0
 810d362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d366:	2300      	movs	r3, #0
}
 810d368:	4618      	mov	r0, r3
 810d36a:	3710      	adds	r7, #16
 810d36c:	46bd      	mov	sp, r7
 810d36e:	bd80      	pop	{r7, pc}

0810d370 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810d370:	b580      	push	{r7, lr}
 810d372:	b084      	sub	sp, #16
 810d374:	af00      	add	r7, sp, #0
 810d376:	6078      	str	r0, [r7, #4]
 810d378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d37a:	687b      	ldr	r3, [r7, #4]
 810d37c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d380:	2b01      	cmp	r3, #1
 810d382:	d101      	bne.n	810d388 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810d384:	2302      	movs	r3, #2
 810d386:	e02d      	b.n	810d3e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810d388:	687b      	ldr	r3, [r7, #4]
 810d38a:	2201      	movs	r2, #1
 810d38c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d390:	687b      	ldr	r3, [r7, #4]
 810d392:	2224      	movs	r2, #36	; 0x24
 810d394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d398:	687b      	ldr	r3, [r7, #4]
 810d39a:	681b      	ldr	r3, [r3, #0]
 810d39c:	681b      	ldr	r3, [r3, #0]
 810d39e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d3a0:	687b      	ldr	r3, [r7, #4]
 810d3a2:	681b      	ldr	r3, [r3, #0]
 810d3a4:	681a      	ldr	r2, [r3, #0]
 810d3a6:	687b      	ldr	r3, [r7, #4]
 810d3a8:	681b      	ldr	r3, [r3, #0]
 810d3aa:	f022 0201 	bic.w	r2, r2, #1
 810d3ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810d3b0:	687b      	ldr	r3, [r7, #4]
 810d3b2:	681b      	ldr	r3, [r3, #0]
 810d3b4:	689b      	ldr	r3, [r3, #8]
 810d3b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810d3ba:	687b      	ldr	r3, [r7, #4]
 810d3bc:	681b      	ldr	r3, [r3, #0]
 810d3be:	683a      	ldr	r2, [r7, #0]
 810d3c0:	430a      	orrs	r2, r1
 810d3c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810d3c4:	6878      	ldr	r0, [r7, #4]
 810d3c6:	f000 f811 	bl	810d3ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d3ca:	687b      	ldr	r3, [r7, #4]
 810d3cc:	681b      	ldr	r3, [r3, #0]
 810d3ce:	68fa      	ldr	r2, [r7, #12]
 810d3d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d3d2:	687b      	ldr	r3, [r7, #4]
 810d3d4:	2220      	movs	r2, #32
 810d3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d3da:	687b      	ldr	r3, [r7, #4]
 810d3dc:	2200      	movs	r2, #0
 810d3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d3e2:	2300      	movs	r3, #0
}
 810d3e4:	4618      	mov	r0, r3
 810d3e6:	3710      	adds	r7, #16
 810d3e8:	46bd      	mov	sp, r7
 810d3ea:	bd80      	pop	{r7, pc}

0810d3ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810d3ec:	b480      	push	{r7}
 810d3ee:	b085      	sub	sp, #20
 810d3f0:	af00      	add	r7, sp, #0
 810d3f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810d3f4:	687b      	ldr	r3, [r7, #4]
 810d3f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d3f8:	2b00      	cmp	r3, #0
 810d3fa:	d108      	bne.n	810d40e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810d3fc:	687b      	ldr	r3, [r7, #4]
 810d3fe:	2201      	movs	r2, #1
 810d400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810d404:	687b      	ldr	r3, [r7, #4]
 810d406:	2201      	movs	r2, #1
 810d408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810d40c:	e031      	b.n	810d472 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810d40e:	2310      	movs	r3, #16
 810d410:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810d412:	2310      	movs	r3, #16
 810d414:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810d416:	687b      	ldr	r3, [r7, #4]
 810d418:	681b      	ldr	r3, [r3, #0]
 810d41a:	689b      	ldr	r3, [r3, #8]
 810d41c:	0e5b      	lsrs	r3, r3, #25
 810d41e:	b2db      	uxtb	r3, r3
 810d420:	f003 0307 	and.w	r3, r3, #7
 810d424:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810d426:	687b      	ldr	r3, [r7, #4]
 810d428:	681b      	ldr	r3, [r3, #0]
 810d42a:	689b      	ldr	r3, [r3, #8]
 810d42c:	0f5b      	lsrs	r3, r3, #29
 810d42e:	b2db      	uxtb	r3, r3
 810d430:	f003 0307 	and.w	r3, r3, #7
 810d434:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810d436:	7bbb      	ldrb	r3, [r7, #14]
 810d438:	7b3a      	ldrb	r2, [r7, #12]
 810d43a:	4911      	ldr	r1, [pc, #68]	; (810d480 <UARTEx_SetNbDataToProcess+0x94>)
 810d43c:	5c8a      	ldrb	r2, [r1, r2]
 810d43e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810d442:	7b3a      	ldrb	r2, [r7, #12]
 810d444:	490f      	ldr	r1, [pc, #60]	; (810d484 <UARTEx_SetNbDataToProcess+0x98>)
 810d446:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810d448:	fb93 f3f2 	sdiv	r3, r3, r2
 810d44c:	b29a      	uxth	r2, r3
 810d44e:	687b      	ldr	r3, [r7, #4]
 810d450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810d454:	7bfb      	ldrb	r3, [r7, #15]
 810d456:	7b7a      	ldrb	r2, [r7, #13]
 810d458:	4909      	ldr	r1, [pc, #36]	; (810d480 <UARTEx_SetNbDataToProcess+0x94>)
 810d45a:	5c8a      	ldrb	r2, [r1, r2]
 810d45c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810d460:	7b7a      	ldrb	r2, [r7, #13]
 810d462:	4908      	ldr	r1, [pc, #32]	; (810d484 <UARTEx_SetNbDataToProcess+0x98>)
 810d464:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810d466:	fb93 f3f2 	sdiv	r3, r3, r2
 810d46a:	b29a      	uxth	r2, r3
 810d46c:	687b      	ldr	r3, [r7, #4]
 810d46e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810d472:	bf00      	nop
 810d474:	3714      	adds	r7, #20
 810d476:	46bd      	mov	sp, r7
 810d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d47c:	4770      	bx	lr
 810d47e:	bf00      	nop
 810d480:	0810e524 	.word	0x0810e524
 810d484:	0810e52c 	.word	0x0810e52c

0810d488 <__errno>:
 810d488:	4b01      	ldr	r3, [pc, #4]	; (810d490 <__errno+0x8>)
 810d48a:	6818      	ldr	r0, [r3, #0]
 810d48c:	4770      	bx	lr
 810d48e:	bf00      	nop
 810d490:	10000024 	.word	0x10000024

0810d494 <__libc_init_array>:
 810d494:	b570      	push	{r4, r5, r6, lr}
 810d496:	4d0d      	ldr	r5, [pc, #52]	; (810d4cc <__libc_init_array+0x38>)
 810d498:	4c0d      	ldr	r4, [pc, #52]	; (810d4d0 <__libc_init_array+0x3c>)
 810d49a:	1b64      	subs	r4, r4, r5
 810d49c:	10a4      	asrs	r4, r4, #2
 810d49e:	2600      	movs	r6, #0
 810d4a0:	42a6      	cmp	r6, r4
 810d4a2:	d109      	bne.n	810d4b8 <__libc_init_array+0x24>
 810d4a4:	4d0b      	ldr	r5, [pc, #44]	; (810d4d4 <__libc_init_array+0x40>)
 810d4a6:	4c0c      	ldr	r4, [pc, #48]	; (810d4d8 <__libc_init_array+0x44>)
 810d4a8:	f000 ffd4 	bl	810e454 <_init>
 810d4ac:	1b64      	subs	r4, r4, r5
 810d4ae:	10a4      	asrs	r4, r4, #2
 810d4b0:	2600      	movs	r6, #0
 810d4b2:	42a6      	cmp	r6, r4
 810d4b4:	d105      	bne.n	810d4c2 <__libc_init_array+0x2e>
 810d4b6:	bd70      	pop	{r4, r5, r6, pc}
 810d4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 810d4bc:	4798      	blx	r3
 810d4be:	3601      	adds	r6, #1
 810d4c0:	e7ee      	b.n	810d4a0 <__libc_init_array+0xc>
 810d4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 810d4c6:	4798      	blx	r3
 810d4c8:	3601      	adds	r6, #1
 810d4ca:	e7f2      	b.n	810d4b2 <__libc_init_array+0x1e>
 810d4cc:	0810e580 	.word	0x0810e580
 810d4d0:	0810e580 	.word	0x0810e580
 810d4d4:	0810e580 	.word	0x0810e580
 810d4d8:	0810e584 	.word	0x0810e584

0810d4dc <memset>:
 810d4dc:	4402      	add	r2, r0
 810d4de:	4603      	mov	r3, r0
 810d4e0:	4293      	cmp	r3, r2
 810d4e2:	d100      	bne.n	810d4e6 <memset+0xa>
 810d4e4:	4770      	bx	lr
 810d4e6:	f803 1b01 	strb.w	r1, [r3], #1
 810d4ea:	e7f9      	b.n	810d4e0 <memset+0x4>

0810d4ec <pow>:
 810d4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d4f0:	ec59 8b10 	vmov	r8, r9, d0
 810d4f4:	ec57 6b11 	vmov	r6, r7, d1
 810d4f8:	f000 f8a6 	bl	810d648 <__ieee754_pow>
 810d4fc:	4b4e      	ldr	r3, [pc, #312]	; (810d638 <pow+0x14c>)
 810d4fe:	f993 3000 	ldrsb.w	r3, [r3]
 810d502:	3301      	adds	r3, #1
 810d504:	ec55 4b10 	vmov	r4, r5, d0
 810d508:	d015      	beq.n	810d536 <pow+0x4a>
 810d50a:	4632      	mov	r2, r6
 810d50c:	463b      	mov	r3, r7
 810d50e:	4630      	mov	r0, r6
 810d510:	4639      	mov	r1, r7
 810d512:	f7f3 fb37 	bl	8100b84 <__aeabi_dcmpun>
 810d516:	b970      	cbnz	r0, 810d536 <pow+0x4a>
 810d518:	4642      	mov	r2, r8
 810d51a:	464b      	mov	r3, r9
 810d51c:	4640      	mov	r0, r8
 810d51e:	4649      	mov	r1, r9
 810d520:	f7f3 fb30 	bl	8100b84 <__aeabi_dcmpun>
 810d524:	2200      	movs	r2, #0
 810d526:	2300      	movs	r3, #0
 810d528:	b148      	cbz	r0, 810d53e <pow+0x52>
 810d52a:	4630      	mov	r0, r6
 810d52c:	4639      	mov	r1, r7
 810d52e:	f7f3 faf7 	bl	8100b20 <__aeabi_dcmpeq>
 810d532:	2800      	cmp	r0, #0
 810d534:	d17d      	bne.n	810d632 <pow+0x146>
 810d536:	ec45 4b10 	vmov	d0, r4, r5
 810d53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d53e:	4640      	mov	r0, r8
 810d540:	4649      	mov	r1, r9
 810d542:	f7f3 faed 	bl	8100b20 <__aeabi_dcmpeq>
 810d546:	b1e0      	cbz	r0, 810d582 <pow+0x96>
 810d548:	2200      	movs	r2, #0
 810d54a:	2300      	movs	r3, #0
 810d54c:	4630      	mov	r0, r6
 810d54e:	4639      	mov	r1, r7
 810d550:	f7f3 fae6 	bl	8100b20 <__aeabi_dcmpeq>
 810d554:	2800      	cmp	r0, #0
 810d556:	d16c      	bne.n	810d632 <pow+0x146>
 810d558:	ec47 6b10 	vmov	d0, r6, r7
 810d55c:	f000 fe53 	bl	810e206 <finite>
 810d560:	2800      	cmp	r0, #0
 810d562:	d0e8      	beq.n	810d536 <pow+0x4a>
 810d564:	2200      	movs	r2, #0
 810d566:	2300      	movs	r3, #0
 810d568:	4630      	mov	r0, r6
 810d56a:	4639      	mov	r1, r7
 810d56c:	f7f3 fae2 	bl	8100b34 <__aeabi_dcmplt>
 810d570:	2800      	cmp	r0, #0
 810d572:	d0e0      	beq.n	810d536 <pow+0x4a>
 810d574:	f7ff ff88 	bl	810d488 <__errno>
 810d578:	2321      	movs	r3, #33	; 0x21
 810d57a:	6003      	str	r3, [r0, #0]
 810d57c:	2400      	movs	r4, #0
 810d57e:	4d2f      	ldr	r5, [pc, #188]	; (810d63c <pow+0x150>)
 810d580:	e7d9      	b.n	810d536 <pow+0x4a>
 810d582:	ec45 4b10 	vmov	d0, r4, r5
 810d586:	f000 fe3e 	bl	810e206 <finite>
 810d58a:	bbb8      	cbnz	r0, 810d5fc <pow+0x110>
 810d58c:	ec49 8b10 	vmov	d0, r8, r9
 810d590:	f000 fe39 	bl	810e206 <finite>
 810d594:	b390      	cbz	r0, 810d5fc <pow+0x110>
 810d596:	ec47 6b10 	vmov	d0, r6, r7
 810d59a:	f000 fe34 	bl	810e206 <finite>
 810d59e:	b368      	cbz	r0, 810d5fc <pow+0x110>
 810d5a0:	4622      	mov	r2, r4
 810d5a2:	462b      	mov	r3, r5
 810d5a4:	4620      	mov	r0, r4
 810d5a6:	4629      	mov	r1, r5
 810d5a8:	f7f3 faec 	bl	8100b84 <__aeabi_dcmpun>
 810d5ac:	b160      	cbz	r0, 810d5c8 <pow+0xdc>
 810d5ae:	f7ff ff6b 	bl	810d488 <__errno>
 810d5b2:	2321      	movs	r3, #33	; 0x21
 810d5b4:	6003      	str	r3, [r0, #0]
 810d5b6:	2200      	movs	r2, #0
 810d5b8:	2300      	movs	r3, #0
 810d5ba:	4610      	mov	r0, r2
 810d5bc:	4619      	mov	r1, r3
 810d5be:	f7f3 f971 	bl	81008a4 <__aeabi_ddiv>
 810d5c2:	4604      	mov	r4, r0
 810d5c4:	460d      	mov	r5, r1
 810d5c6:	e7b6      	b.n	810d536 <pow+0x4a>
 810d5c8:	f7ff ff5e 	bl	810d488 <__errno>
 810d5cc:	2322      	movs	r3, #34	; 0x22
 810d5ce:	6003      	str	r3, [r0, #0]
 810d5d0:	2200      	movs	r2, #0
 810d5d2:	2300      	movs	r3, #0
 810d5d4:	4640      	mov	r0, r8
 810d5d6:	4649      	mov	r1, r9
 810d5d8:	f7f3 faac 	bl	8100b34 <__aeabi_dcmplt>
 810d5dc:	2400      	movs	r4, #0
 810d5de:	b158      	cbz	r0, 810d5f8 <pow+0x10c>
 810d5e0:	ec47 6b10 	vmov	d0, r6, r7
 810d5e4:	f000 fe24 	bl	810e230 <rint>
 810d5e8:	4632      	mov	r2, r6
 810d5ea:	ec51 0b10 	vmov	r0, r1, d0
 810d5ee:	463b      	mov	r3, r7
 810d5f0:	f7f3 fa96 	bl	8100b20 <__aeabi_dcmpeq>
 810d5f4:	2800      	cmp	r0, #0
 810d5f6:	d0c2      	beq.n	810d57e <pow+0x92>
 810d5f8:	4d11      	ldr	r5, [pc, #68]	; (810d640 <pow+0x154>)
 810d5fa:	e79c      	b.n	810d536 <pow+0x4a>
 810d5fc:	2200      	movs	r2, #0
 810d5fe:	2300      	movs	r3, #0
 810d600:	4620      	mov	r0, r4
 810d602:	4629      	mov	r1, r5
 810d604:	f7f3 fa8c 	bl	8100b20 <__aeabi_dcmpeq>
 810d608:	2800      	cmp	r0, #0
 810d60a:	d094      	beq.n	810d536 <pow+0x4a>
 810d60c:	ec49 8b10 	vmov	d0, r8, r9
 810d610:	f000 fdf9 	bl	810e206 <finite>
 810d614:	2800      	cmp	r0, #0
 810d616:	d08e      	beq.n	810d536 <pow+0x4a>
 810d618:	ec47 6b10 	vmov	d0, r6, r7
 810d61c:	f000 fdf3 	bl	810e206 <finite>
 810d620:	2800      	cmp	r0, #0
 810d622:	d088      	beq.n	810d536 <pow+0x4a>
 810d624:	f7ff ff30 	bl	810d488 <__errno>
 810d628:	2322      	movs	r3, #34	; 0x22
 810d62a:	6003      	str	r3, [r0, #0]
 810d62c:	2400      	movs	r4, #0
 810d62e:	2500      	movs	r5, #0
 810d630:	e781      	b.n	810d536 <pow+0x4a>
 810d632:	4d04      	ldr	r5, [pc, #16]	; (810d644 <pow+0x158>)
 810d634:	2400      	movs	r4, #0
 810d636:	e77e      	b.n	810d536 <pow+0x4a>
 810d638:	10000088 	.word	0x10000088
 810d63c:	fff00000 	.word	0xfff00000
 810d640:	7ff00000 	.word	0x7ff00000
 810d644:	3ff00000 	.word	0x3ff00000

0810d648 <__ieee754_pow>:
 810d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d64c:	ed2d 8b06 	vpush	{d8-d10}
 810d650:	b08d      	sub	sp, #52	; 0x34
 810d652:	ed8d 1b02 	vstr	d1, [sp, #8]
 810d656:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810d65a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810d65e:	ea56 0100 	orrs.w	r1, r6, r0
 810d662:	ec53 2b10 	vmov	r2, r3, d0
 810d666:	f000 84d1 	beq.w	810e00c <__ieee754_pow+0x9c4>
 810d66a:	497f      	ldr	r1, [pc, #508]	; (810d868 <__ieee754_pow+0x220>)
 810d66c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810d670:	428c      	cmp	r4, r1
 810d672:	ee10 8a10 	vmov	r8, s0
 810d676:	4699      	mov	r9, r3
 810d678:	dc09      	bgt.n	810d68e <__ieee754_pow+0x46>
 810d67a:	d103      	bne.n	810d684 <__ieee754_pow+0x3c>
 810d67c:	b97a      	cbnz	r2, 810d69e <__ieee754_pow+0x56>
 810d67e:	42a6      	cmp	r6, r4
 810d680:	dd02      	ble.n	810d688 <__ieee754_pow+0x40>
 810d682:	e00c      	b.n	810d69e <__ieee754_pow+0x56>
 810d684:	428e      	cmp	r6, r1
 810d686:	dc02      	bgt.n	810d68e <__ieee754_pow+0x46>
 810d688:	428e      	cmp	r6, r1
 810d68a:	d110      	bne.n	810d6ae <__ieee754_pow+0x66>
 810d68c:	b178      	cbz	r0, 810d6ae <__ieee754_pow+0x66>
 810d68e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810d692:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810d696:	ea54 0308 	orrs.w	r3, r4, r8
 810d69a:	f000 84b7 	beq.w	810e00c <__ieee754_pow+0x9c4>
 810d69e:	4873      	ldr	r0, [pc, #460]	; (810d86c <__ieee754_pow+0x224>)
 810d6a0:	b00d      	add	sp, #52	; 0x34
 810d6a2:	ecbd 8b06 	vpop	{d8-d10}
 810d6a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d6aa:	f000 bdb9 	b.w	810e220 <nan>
 810d6ae:	f1b9 0f00 	cmp.w	r9, #0
 810d6b2:	da36      	bge.n	810d722 <__ieee754_pow+0xda>
 810d6b4:	496e      	ldr	r1, [pc, #440]	; (810d870 <__ieee754_pow+0x228>)
 810d6b6:	428e      	cmp	r6, r1
 810d6b8:	dc51      	bgt.n	810d75e <__ieee754_pow+0x116>
 810d6ba:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810d6be:	428e      	cmp	r6, r1
 810d6c0:	f340 84af 	ble.w	810e022 <__ieee754_pow+0x9da>
 810d6c4:	1531      	asrs	r1, r6, #20
 810d6c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810d6ca:	2914      	cmp	r1, #20
 810d6cc:	dd0f      	ble.n	810d6ee <__ieee754_pow+0xa6>
 810d6ce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810d6d2:	fa20 fc01 	lsr.w	ip, r0, r1
 810d6d6:	fa0c f101 	lsl.w	r1, ip, r1
 810d6da:	4281      	cmp	r1, r0
 810d6dc:	f040 84a1 	bne.w	810e022 <__ieee754_pow+0x9da>
 810d6e0:	f00c 0c01 	and.w	ip, ip, #1
 810d6e4:	f1cc 0102 	rsb	r1, ip, #2
 810d6e8:	9100      	str	r1, [sp, #0]
 810d6ea:	b180      	cbz	r0, 810d70e <__ieee754_pow+0xc6>
 810d6ec:	e059      	b.n	810d7a2 <__ieee754_pow+0x15a>
 810d6ee:	2800      	cmp	r0, #0
 810d6f0:	d155      	bne.n	810d79e <__ieee754_pow+0x156>
 810d6f2:	f1c1 0114 	rsb	r1, r1, #20
 810d6f6:	fa46 fc01 	asr.w	ip, r6, r1
 810d6fa:	fa0c f101 	lsl.w	r1, ip, r1
 810d6fe:	42b1      	cmp	r1, r6
 810d700:	f040 848c 	bne.w	810e01c <__ieee754_pow+0x9d4>
 810d704:	f00c 0c01 	and.w	ip, ip, #1
 810d708:	f1cc 0102 	rsb	r1, ip, #2
 810d70c:	9100      	str	r1, [sp, #0]
 810d70e:	4959      	ldr	r1, [pc, #356]	; (810d874 <__ieee754_pow+0x22c>)
 810d710:	428e      	cmp	r6, r1
 810d712:	d12d      	bne.n	810d770 <__ieee754_pow+0x128>
 810d714:	2f00      	cmp	r7, #0
 810d716:	da79      	bge.n	810d80c <__ieee754_pow+0x1c4>
 810d718:	4956      	ldr	r1, [pc, #344]	; (810d874 <__ieee754_pow+0x22c>)
 810d71a:	2000      	movs	r0, #0
 810d71c:	f7f3 f8c2 	bl	81008a4 <__aeabi_ddiv>
 810d720:	e016      	b.n	810d750 <__ieee754_pow+0x108>
 810d722:	2100      	movs	r1, #0
 810d724:	9100      	str	r1, [sp, #0]
 810d726:	2800      	cmp	r0, #0
 810d728:	d13b      	bne.n	810d7a2 <__ieee754_pow+0x15a>
 810d72a:	494f      	ldr	r1, [pc, #316]	; (810d868 <__ieee754_pow+0x220>)
 810d72c:	428e      	cmp	r6, r1
 810d72e:	d1ee      	bne.n	810d70e <__ieee754_pow+0xc6>
 810d730:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810d734:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810d738:	ea53 0308 	orrs.w	r3, r3, r8
 810d73c:	f000 8466 	beq.w	810e00c <__ieee754_pow+0x9c4>
 810d740:	4b4d      	ldr	r3, [pc, #308]	; (810d878 <__ieee754_pow+0x230>)
 810d742:	429c      	cmp	r4, r3
 810d744:	dd0d      	ble.n	810d762 <__ieee754_pow+0x11a>
 810d746:	2f00      	cmp	r7, #0
 810d748:	f280 8464 	bge.w	810e014 <__ieee754_pow+0x9cc>
 810d74c:	2000      	movs	r0, #0
 810d74e:	2100      	movs	r1, #0
 810d750:	ec41 0b10 	vmov	d0, r0, r1
 810d754:	b00d      	add	sp, #52	; 0x34
 810d756:	ecbd 8b06 	vpop	{d8-d10}
 810d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d75e:	2102      	movs	r1, #2
 810d760:	e7e0      	b.n	810d724 <__ieee754_pow+0xdc>
 810d762:	2f00      	cmp	r7, #0
 810d764:	daf2      	bge.n	810d74c <__ieee754_pow+0x104>
 810d766:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810d76a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810d76e:	e7ef      	b.n	810d750 <__ieee754_pow+0x108>
 810d770:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810d774:	d104      	bne.n	810d780 <__ieee754_pow+0x138>
 810d776:	4610      	mov	r0, r2
 810d778:	4619      	mov	r1, r3
 810d77a:	f7f2 ff69 	bl	8100650 <__aeabi_dmul>
 810d77e:	e7e7      	b.n	810d750 <__ieee754_pow+0x108>
 810d780:	493e      	ldr	r1, [pc, #248]	; (810d87c <__ieee754_pow+0x234>)
 810d782:	428f      	cmp	r7, r1
 810d784:	d10d      	bne.n	810d7a2 <__ieee754_pow+0x15a>
 810d786:	f1b9 0f00 	cmp.w	r9, #0
 810d78a:	db0a      	blt.n	810d7a2 <__ieee754_pow+0x15a>
 810d78c:	ec43 2b10 	vmov	d0, r2, r3
 810d790:	b00d      	add	sp, #52	; 0x34
 810d792:	ecbd 8b06 	vpop	{d8-d10}
 810d796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d79a:	f000 bc77 	b.w	810e08c <__ieee754_sqrt>
 810d79e:	2100      	movs	r1, #0
 810d7a0:	9100      	str	r1, [sp, #0]
 810d7a2:	ec43 2b10 	vmov	d0, r2, r3
 810d7a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810d7aa:	f000 fd23 	bl	810e1f4 <fabs>
 810d7ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810d7b2:	ec51 0b10 	vmov	r0, r1, d0
 810d7b6:	f1b8 0f00 	cmp.w	r8, #0
 810d7ba:	d12a      	bne.n	810d812 <__ieee754_pow+0x1ca>
 810d7bc:	b12c      	cbz	r4, 810d7ca <__ieee754_pow+0x182>
 810d7be:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810d874 <__ieee754_pow+0x22c>
 810d7c2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810d7c6:	45e6      	cmp	lr, ip
 810d7c8:	d123      	bne.n	810d812 <__ieee754_pow+0x1ca>
 810d7ca:	2f00      	cmp	r7, #0
 810d7cc:	da05      	bge.n	810d7da <__ieee754_pow+0x192>
 810d7ce:	4602      	mov	r2, r0
 810d7d0:	460b      	mov	r3, r1
 810d7d2:	2000      	movs	r0, #0
 810d7d4:	4927      	ldr	r1, [pc, #156]	; (810d874 <__ieee754_pow+0x22c>)
 810d7d6:	f7f3 f865 	bl	81008a4 <__aeabi_ddiv>
 810d7da:	f1b9 0f00 	cmp.w	r9, #0
 810d7de:	dab7      	bge.n	810d750 <__ieee754_pow+0x108>
 810d7e0:	9b00      	ldr	r3, [sp, #0]
 810d7e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810d7e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810d7ea:	4323      	orrs	r3, r4
 810d7ec:	d108      	bne.n	810d800 <__ieee754_pow+0x1b8>
 810d7ee:	4602      	mov	r2, r0
 810d7f0:	460b      	mov	r3, r1
 810d7f2:	4610      	mov	r0, r2
 810d7f4:	4619      	mov	r1, r3
 810d7f6:	f7f2 fd73 	bl	81002e0 <__aeabi_dsub>
 810d7fa:	4602      	mov	r2, r0
 810d7fc:	460b      	mov	r3, r1
 810d7fe:	e78d      	b.n	810d71c <__ieee754_pow+0xd4>
 810d800:	9b00      	ldr	r3, [sp, #0]
 810d802:	2b01      	cmp	r3, #1
 810d804:	d1a4      	bne.n	810d750 <__ieee754_pow+0x108>
 810d806:	4602      	mov	r2, r0
 810d808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d80c:	4610      	mov	r0, r2
 810d80e:	4619      	mov	r1, r3
 810d810:	e79e      	b.n	810d750 <__ieee754_pow+0x108>
 810d812:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810d816:	f10c 35ff 	add.w	r5, ip, #4294967295
 810d81a:	950a      	str	r5, [sp, #40]	; 0x28
 810d81c:	9d00      	ldr	r5, [sp, #0]
 810d81e:	46ac      	mov	ip, r5
 810d820:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810d822:	ea5c 0505 	orrs.w	r5, ip, r5
 810d826:	d0e4      	beq.n	810d7f2 <__ieee754_pow+0x1aa>
 810d828:	4b15      	ldr	r3, [pc, #84]	; (810d880 <__ieee754_pow+0x238>)
 810d82a:	429e      	cmp	r6, r3
 810d82c:	f340 80fc 	ble.w	810da28 <__ieee754_pow+0x3e0>
 810d830:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810d834:	429e      	cmp	r6, r3
 810d836:	4b10      	ldr	r3, [pc, #64]	; (810d878 <__ieee754_pow+0x230>)
 810d838:	dd07      	ble.n	810d84a <__ieee754_pow+0x202>
 810d83a:	429c      	cmp	r4, r3
 810d83c:	dc0a      	bgt.n	810d854 <__ieee754_pow+0x20c>
 810d83e:	2f00      	cmp	r7, #0
 810d840:	da84      	bge.n	810d74c <__ieee754_pow+0x104>
 810d842:	a307      	add	r3, pc, #28	; (adr r3, 810d860 <__ieee754_pow+0x218>)
 810d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d848:	e795      	b.n	810d776 <__ieee754_pow+0x12e>
 810d84a:	429c      	cmp	r4, r3
 810d84c:	dbf7      	blt.n	810d83e <__ieee754_pow+0x1f6>
 810d84e:	4b09      	ldr	r3, [pc, #36]	; (810d874 <__ieee754_pow+0x22c>)
 810d850:	429c      	cmp	r4, r3
 810d852:	dd17      	ble.n	810d884 <__ieee754_pow+0x23c>
 810d854:	2f00      	cmp	r7, #0
 810d856:	dcf4      	bgt.n	810d842 <__ieee754_pow+0x1fa>
 810d858:	e778      	b.n	810d74c <__ieee754_pow+0x104>
 810d85a:	bf00      	nop
 810d85c:	f3af 8000 	nop.w
 810d860:	8800759c 	.word	0x8800759c
 810d864:	7e37e43c 	.word	0x7e37e43c
 810d868:	7ff00000 	.word	0x7ff00000
 810d86c:	0810e534 	.word	0x0810e534
 810d870:	433fffff 	.word	0x433fffff
 810d874:	3ff00000 	.word	0x3ff00000
 810d878:	3fefffff 	.word	0x3fefffff
 810d87c:	3fe00000 	.word	0x3fe00000
 810d880:	41e00000 	.word	0x41e00000
 810d884:	4b64      	ldr	r3, [pc, #400]	; (810da18 <__ieee754_pow+0x3d0>)
 810d886:	2200      	movs	r2, #0
 810d888:	f7f2 fd2a 	bl	81002e0 <__aeabi_dsub>
 810d88c:	a356      	add	r3, pc, #344	; (adr r3, 810d9e8 <__ieee754_pow+0x3a0>)
 810d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d892:	4604      	mov	r4, r0
 810d894:	460d      	mov	r5, r1
 810d896:	f7f2 fedb 	bl	8100650 <__aeabi_dmul>
 810d89a:	a355      	add	r3, pc, #340	; (adr r3, 810d9f0 <__ieee754_pow+0x3a8>)
 810d89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d8a0:	4606      	mov	r6, r0
 810d8a2:	460f      	mov	r7, r1
 810d8a4:	4620      	mov	r0, r4
 810d8a6:	4629      	mov	r1, r5
 810d8a8:	f7f2 fed2 	bl	8100650 <__aeabi_dmul>
 810d8ac:	4b5b      	ldr	r3, [pc, #364]	; (810da1c <__ieee754_pow+0x3d4>)
 810d8ae:	4682      	mov	sl, r0
 810d8b0:	468b      	mov	fp, r1
 810d8b2:	2200      	movs	r2, #0
 810d8b4:	4620      	mov	r0, r4
 810d8b6:	4629      	mov	r1, r5
 810d8b8:	f7f2 feca 	bl	8100650 <__aeabi_dmul>
 810d8bc:	4602      	mov	r2, r0
 810d8be:	460b      	mov	r3, r1
 810d8c0:	a14d      	add	r1, pc, #308	; (adr r1, 810d9f8 <__ieee754_pow+0x3b0>)
 810d8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d8c6:	f7f2 fd0b 	bl	81002e0 <__aeabi_dsub>
 810d8ca:	4622      	mov	r2, r4
 810d8cc:	462b      	mov	r3, r5
 810d8ce:	f7f2 febf 	bl	8100650 <__aeabi_dmul>
 810d8d2:	4602      	mov	r2, r0
 810d8d4:	460b      	mov	r3, r1
 810d8d6:	2000      	movs	r0, #0
 810d8d8:	4951      	ldr	r1, [pc, #324]	; (810da20 <__ieee754_pow+0x3d8>)
 810d8da:	f7f2 fd01 	bl	81002e0 <__aeabi_dsub>
 810d8de:	4622      	mov	r2, r4
 810d8e0:	4680      	mov	r8, r0
 810d8e2:	4689      	mov	r9, r1
 810d8e4:	462b      	mov	r3, r5
 810d8e6:	4620      	mov	r0, r4
 810d8e8:	4629      	mov	r1, r5
 810d8ea:	f7f2 feb1 	bl	8100650 <__aeabi_dmul>
 810d8ee:	4602      	mov	r2, r0
 810d8f0:	460b      	mov	r3, r1
 810d8f2:	4640      	mov	r0, r8
 810d8f4:	4649      	mov	r1, r9
 810d8f6:	f7f2 feab 	bl	8100650 <__aeabi_dmul>
 810d8fa:	a341      	add	r3, pc, #260	; (adr r3, 810da00 <__ieee754_pow+0x3b8>)
 810d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d900:	f7f2 fea6 	bl	8100650 <__aeabi_dmul>
 810d904:	4602      	mov	r2, r0
 810d906:	460b      	mov	r3, r1
 810d908:	4650      	mov	r0, sl
 810d90a:	4659      	mov	r1, fp
 810d90c:	f7f2 fce8 	bl	81002e0 <__aeabi_dsub>
 810d910:	4602      	mov	r2, r0
 810d912:	460b      	mov	r3, r1
 810d914:	4680      	mov	r8, r0
 810d916:	4689      	mov	r9, r1
 810d918:	4630      	mov	r0, r6
 810d91a:	4639      	mov	r1, r7
 810d91c:	f7f2 fce2 	bl	81002e4 <__adddf3>
 810d920:	2400      	movs	r4, #0
 810d922:	4632      	mov	r2, r6
 810d924:	463b      	mov	r3, r7
 810d926:	4620      	mov	r0, r4
 810d928:	460d      	mov	r5, r1
 810d92a:	f7f2 fcd9 	bl	81002e0 <__aeabi_dsub>
 810d92e:	4602      	mov	r2, r0
 810d930:	460b      	mov	r3, r1
 810d932:	4640      	mov	r0, r8
 810d934:	4649      	mov	r1, r9
 810d936:	f7f2 fcd3 	bl	81002e0 <__aeabi_dsub>
 810d93a:	9b00      	ldr	r3, [sp, #0]
 810d93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810d93e:	3b01      	subs	r3, #1
 810d940:	4313      	orrs	r3, r2
 810d942:	4682      	mov	sl, r0
 810d944:	468b      	mov	fp, r1
 810d946:	f040 81f1 	bne.w	810dd2c <__ieee754_pow+0x6e4>
 810d94a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810da08 <__ieee754_pow+0x3c0>
 810d94e:	eeb0 8a47 	vmov.f32	s16, s14
 810d952:	eef0 8a67 	vmov.f32	s17, s15
 810d956:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810d95a:	2600      	movs	r6, #0
 810d95c:	4632      	mov	r2, r6
 810d95e:	463b      	mov	r3, r7
 810d960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d964:	f7f2 fcbc 	bl	81002e0 <__aeabi_dsub>
 810d968:	4622      	mov	r2, r4
 810d96a:	462b      	mov	r3, r5
 810d96c:	f7f2 fe70 	bl	8100650 <__aeabi_dmul>
 810d970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810d974:	4680      	mov	r8, r0
 810d976:	4689      	mov	r9, r1
 810d978:	4650      	mov	r0, sl
 810d97a:	4659      	mov	r1, fp
 810d97c:	f7f2 fe68 	bl	8100650 <__aeabi_dmul>
 810d980:	4602      	mov	r2, r0
 810d982:	460b      	mov	r3, r1
 810d984:	4640      	mov	r0, r8
 810d986:	4649      	mov	r1, r9
 810d988:	f7f2 fcac 	bl	81002e4 <__adddf3>
 810d98c:	4632      	mov	r2, r6
 810d98e:	463b      	mov	r3, r7
 810d990:	4680      	mov	r8, r0
 810d992:	4689      	mov	r9, r1
 810d994:	4620      	mov	r0, r4
 810d996:	4629      	mov	r1, r5
 810d998:	f7f2 fe5a 	bl	8100650 <__aeabi_dmul>
 810d99c:	460b      	mov	r3, r1
 810d99e:	4604      	mov	r4, r0
 810d9a0:	460d      	mov	r5, r1
 810d9a2:	4602      	mov	r2, r0
 810d9a4:	4649      	mov	r1, r9
 810d9a6:	4640      	mov	r0, r8
 810d9a8:	f7f2 fc9c 	bl	81002e4 <__adddf3>
 810d9ac:	4b1d      	ldr	r3, [pc, #116]	; (810da24 <__ieee754_pow+0x3dc>)
 810d9ae:	4299      	cmp	r1, r3
 810d9b0:	ec45 4b19 	vmov	d9, r4, r5
 810d9b4:	4606      	mov	r6, r0
 810d9b6:	460f      	mov	r7, r1
 810d9b8:	468b      	mov	fp, r1
 810d9ba:	f340 82fe 	ble.w	810dfba <__ieee754_pow+0x972>
 810d9be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810d9c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810d9c6:	4303      	orrs	r3, r0
 810d9c8:	f000 81f0 	beq.w	810ddac <__ieee754_pow+0x764>
 810d9cc:	a310      	add	r3, pc, #64	; (adr r3, 810da10 <__ieee754_pow+0x3c8>)
 810d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d9d2:	ec51 0b18 	vmov	r0, r1, d8
 810d9d6:	f7f2 fe3b 	bl	8100650 <__aeabi_dmul>
 810d9da:	a30d      	add	r3, pc, #52	; (adr r3, 810da10 <__ieee754_pow+0x3c8>)
 810d9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d9e0:	e6cb      	b.n	810d77a <__ieee754_pow+0x132>
 810d9e2:	bf00      	nop
 810d9e4:	f3af 8000 	nop.w
 810d9e8:	60000000 	.word	0x60000000
 810d9ec:	3ff71547 	.word	0x3ff71547
 810d9f0:	f85ddf44 	.word	0xf85ddf44
 810d9f4:	3e54ae0b 	.word	0x3e54ae0b
 810d9f8:	55555555 	.word	0x55555555
 810d9fc:	3fd55555 	.word	0x3fd55555
 810da00:	652b82fe 	.word	0x652b82fe
 810da04:	3ff71547 	.word	0x3ff71547
 810da08:	00000000 	.word	0x00000000
 810da0c:	bff00000 	.word	0xbff00000
 810da10:	8800759c 	.word	0x8800759c
 810da14:	7e37e43c 	.word	0x7e37e43c
 810da18:	3ff00000 	.word	0x3ff00000
 810da1c:	3fd00000 	.word	0x3fd00000
 810da20:	3fe00000 	.word	0x3fe00000
 810da24:	408fffff 	.word	0x408fffff
 810da28:	4bd7      	ldr	r3, [pc, #860]	; (810dd88 <__ieee754_pow+0x740>)
 810da2a:	ea03 0309 	and.w	r3, r3, r9
 810da2e:	2200      	movs	r2, #0
 810da30:	b92b      	cbnz	r3, 810da3e <__ieee754_pow+0x3f6>
 810da32:	4bd6      	ldr	r3, [pc, #856]	; (810dd8c <__ieee754_pow+0x744>)
 810da34:	f7f2 fe0c 	bl	8100650 <__aeabi_dmul>
 810da38:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810da3c:	460c      	mov	r4, r1
 810da3e:	1523      	asrs	r3, r4, #20
 810da40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810da44:	4413      	add	r3, r2
 810da46:	9309      	str	r3, [sp, #36]	; 0x24
 810da48:	4bd1      	ldr	r3, [pc, #836]	; (810dd90 <__ieee754_pow+0x748>)
 810da4a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810da4e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810da52:	429c      	cmp	r4, r3
 810da54:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810da58:	dd08      	ble.n	810da6c <__ieee754_pow+0x424>
 810da5a:	4bce      	ldr	r3, [pc, #824]	; (810dd94 <__ieee754_pow+0x74c>)
 810da5c:	429c      	cmp	r4, r3
 810da5e:	f340 8163 	ble.w	810dd28 <__ieee754_pow+0x6e0>
 810da62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810da64:	3301      	adds	r3, #1
 810da66:	9309      	str	r3, [sp, #36]	; 0x24
 810da68:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810da6c:	2400      	movs	r4, #0
 810da6e:	00e3      	lsls	r3, r4, #3
 810da70:	930b      	str	r3, [sp, #44]	; 0x2c
 810da72:	4bc9      	ldr	r3, [pc, #804]	; (810dd98 <__ieee754_pow+0x750>)
 810da74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810da78:	ed93 7b00 	vldr	d7, [r3]
 810da7c:	4629      	mov	r1, r5
 810da7e:	ec53 2b17 	vmov	r2, r3, d7
 810da82:	eeb0 8a47 	vmov.f32	s16, s14
 810da86:	eef0 8a67 	vmov.f32	s17, s15
 810da8a:	4682      	mov	sl, r0
 810da8c:	f7f2 fc28 	bl	81002e0 <__aeabi_dsub>
 810da90:	4652      	mov	r2, sl
 810da92:	4606      	mov	r6, r0
 810da94:	460f      	mov	r7, r1
 810da96:	462b      	mov	r3, r5
 810da98:	ec51 0b18 	vmov	r0, r1, d8
 810da9c:	f7f2 fc22 	bl	81002e4 <__adddf3>
 810daa0:	4602      	mov	r2, r0
 810daa2:	460b      	mov	r3, r1
 810daa4:	2000      	movs	r0, #0
 810daa6:	49bd      	ldr	r1, [pc, #756]	; (810dd9c <__ieee754_pow+0x754>)
 810daa8:	f7f2 fefc 	bl	81008a4 <__aeabi_ddiv>
 810daac:	ec41 0b19 	vmov	d9, r0, r1
 810dab0:	4602      	mov	r2, r0
 810dab2:	460b      	mov	r3, r1
 810dab4:	4630      	mov	r0, r6
 810dab6:	4639      	mov	r1, r7
 810dab8:	f7f2 fdca 	bl	8100650 <__aeabi_dmul>
 810dabc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810dac0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810dac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810dac8:	2300      	movs	r3, #0
 810daca:	9304      	str	r3, [sp, #16]
 810dacc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810dad0:	46ab      	mov	fp, r5
 810dad2:	106d      	asrs	r5, r5, #1
 810dad4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810dad8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810dadc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810dae0:	2200      	movs	r2, #0
 810dae2:	4640      	mov	r0, r8
 810dae4:	4649      	mov	r1, r9
 810dae6:	4614      	mov	r4, r2
 810dae8:	461d      	mov	r5, r3
 810daea:	f7f2 fdb1 	bl	8100650 <__aeabi_dmul>
 810daee:	4602      	mov	r2, r0
 810daf0:	460b      	mov	r3, r1
 810daf2:	4630      	mov	r0, r6
 810daf4:	4639      	mov	r1, r7
 810daf6:	f7f2 fbf3 	bl	81002e0 <__aeabi_dsub>
 810dafa:	ec53 2b18 	vmov	r2, r3, d8
 810dafe:	4606      	mov	r6, r0
 810db00:	460f      	mov	r7, r1
 810db02:	4620      	mov	r0, r4
 810db04:	4629      	mov	r1, r5
 810db06:	f7f2 fbeb 	bl	81002e0 <__aeabi_dsub>
 810db0a:	4602      	mov	r2, r0
 810db0c:	460b      	mov	r3, r1
 810db0e:	4650      	mov	r0, sl
 810db10:	4659      	mov	r1, fp
 810db12:	f7f2 fbe5 	bl	81002e0 <__aeabi_dsub>
 810db16:	4642      	mov	r2, r8
 810db18:	464b      	mov	r3, r9
 810db1a:	f7f2 fd99 	bl	8100650 <__aeabi_dmul>
 810db1e:	4602      	mov	r2, r0
 810db20:	460b      	mov	r3, r1
 810db22:	4630      	mov	r0, r6
 810db24:	4639      	mov	r1, r7
 810db26:	f7f2 fbdb 	bl	81002e0 <__aeabi_dsub>
 810db2a:	ec53 2b19 	vmov	r2, r3, d9
 810db2e:	f7f2 fd8f 	bl	8100650 <__aeabi_dmul>
 810db32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810db36:	ec41 0b18 	vmov	d8, r0, r1
 810db3a:	4610      	mov	r0, r2
 810db3c:	4619      	mov	r1, r3
 810db3e:	f7f2 fd87 	bl	8100650 <__aeabi_dmul>
 810db42:	a37d      	add	r3, pc, #500	; (adr r3, 810dd38 <__ieee754_pow+0x6f0>)
 810db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db48:	4604      	mov	r4, r0
 810db4a:	460d      	mov	r5, r1
 810db4c:	f7f2 fd80 	bl	8100650 <__aeabi_dmul>
 810db50:	a37b      	add	r3, pc, #492	; (adr r3, 810dd40 <__ieee754_pow+0x6f8>)
 810db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db56:	f7f2 fbc5 	bl	81002e4 <__adddf3>
 810db5a:	4622      	mov	r2, r4
 810db5c:	462b      	mov	r3, r5
 810db5e:	f7f2 fd77 	bl	8100650 <__aeabi_dmul>
 810db62:	a379      	add	r3, pc, #484	; (adr r3, 810dd48 <__ieee754_pow+0x700>)
 810db64:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db68:	f7f2 fbbc 	bl	81002e4 <__adddf3>
 810db6c:	4622      	mov	r2, r4
 810db6e:	462b      	mov	r3, r5
 810db70:	f7f2 fd6e 	bl	8100650 <__aeabi_dmul>
 810db74:	a376      	add	r3, pc, #472	; (adr r3, 810dd50 <__ieee754_pow+0x708>)
 810db76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db7a:	f7f2 fbb3 	bl	81002e4 <__adddf3>
 810db7e:	4622      	mov	r2, r4
 810db80:	462b      	mov	r3, r5
 810db82:	f7f2 fd65 	bl	8100650 <__aeabi_dmul>
 810db86:	a374      	add	r3, pc, #464	; (adr r3, 810dd58 <__ieee754_pow+0x710>)
 810db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db8c:	f7f2 fbaa 	bl	81002e4 <__adddf3>
 810db90:	4622      	mov	r2, r4
 810db92:	462b      	mov	r3, r5
 810db94:	f7f2 fd5c 	bl	8100650 <__aeabi_dmul>
 810db98:	a371      	add	r3, pc, #452	; (adr r3, 810dd60 <__ieee754_pow+0x718>)
 810db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db9e:	f7f2 fba1 	bl	81002e4 <__adddf3>
 810dba2:	4622      	mov	r2, r4
 810dba4:	4606      	mov	r6, r0
 810dba6:	460f      	mov	r7, r1
 810dba8:	462b      	mov	r3, r5
 810dbaa:	4620      	mov	r0, r4
 810dbac:	4629      	mov	r1, r5
 810dbae:	f7f2 fd4f 	bl	8100650 <__aeabi_dmul>
 810dbb2:	4602      	mov	r2, r0
 810dbb4:	460b      	mov	r3, r1
 810dbb6:	4630      	mov	r0, r6
 810dbb8:	4639      	mov	r1, r7
 810dbba:	f7f2 fd49 	bl	8100650 <__aeabi_dmul>
 810dbbe:	4642      	mov	r2, r8
 810dbc0:	4604      	mov	r4, r0
 810dbc2:	460d      	mov	r5, r1
 810dbc4:	464b      	mov	r3, r9
 810dbc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810dbca:	f7f2 fb8b 	bl	81002e4 <__adddf3>
 810dbce:	ec53 2b18 	vmov	r2, r3, d8
 810dbd2:	f7f2 fd3d 	bl	8100650 <__aeabi_dmul>
 810dbd6:	4622      	mov	r2, r4
 810dbd8:	462b      	mov	r3, r5
 810dbda:	f7f2 fb83 	bl	81002e4 <__adddf3>
 810dbde:	4642      	mov	r2, r8
 810dbe0:	4682      	mov	sl, r0
 810dbe2:	468b      	mov	fp, r1
 810dbe4:	464b      	mov	r3, r9
 810dbe6:	4640      	mov	r0, r8
 810dbe8:	4649      	mov	r1, r9
 810dbea:	f7f2 fd31 	bl	8100650 <__aeabi_dmul>
 810dbee:	4b6c      	ldr	r3, [pc, #432]	; (810dda0 <__ieee754_pow+0x758>)
 810dbf0:	2200      	movs	r2, #0
 810dbf2:	4606      	mov	r6, r0
 810dbf4:	460f      	mov	r7, r1
 810dbf6:	f7f2 fb75 	bl	81002e4 <__adddf3>
 810dbfa:	4652      	mov	r2, sl
 810dbfc:	465b      	mov	r3, fp
 810dbfe:	f7f2 fb71 	bl	81002e4 <__adddf3>
 810dc02:	9c04      	ldr	r4, [sp, #16]
 810dc04:	460d      	mov	r5, r1
 810dc06:	4622      	mov	r2, r4
 810dc08:	460b      	mov	r3, r1
 810dc0a:	4640      	mov	r0, r8
 810dc0c:	4649      	mov	r1, r9
 810dc0e:	f7f2 fd1f 	bl	8100650 <__aeabi_dmul>
 810dc12:	4b63      	ldr	r3, [pc, #396]	; (810dda0 <__ieee754_pow+0x758>)
 810dc14:	4680      	mov	r8, r0
 810dc16:	4689      	mov	r9, r1
 810dc18:	2200      	movs	r2, #0
 810dc1a:	4620      	mov	r0, r4
 810dc1c:	4629      	mov	r1, r5
 810dc1e:	f7f2 fb5f 	bl	81002e0 <__aeabi_dsub>
 810dc22:	4632      	mov	r2, r6
 810dc24:	463b      	mov	r3, r7
 810dc26:	f7f2 fb5b 	bl	81002e0 <__aeabi_dsub>
 810dc2a:	4602      	mov	r2, r0
 810dc2c:	460b      	mov	r3, r1
 810dc2e:	4650      	mov	r0, sl
 810dc30:	4659      	mov	r1, fp
 810dc32:	f7f2 fb55 	bl	81002e0 <__aeabi_dsub>
 810dc36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810dc3a:	f7f2 fd09 	bl	8100650 <__aeabi_dmul>
 810dc3e:	4622      	mov	r2, r4
 810dc40:	4606      	mov	r6, r0
 810dc42:	460f      	mov	r7, r1
 810dc44:	462b      	mov	r3, r5
 810dc46:	ec51 0b18 	vmov	r0, r1, d8
 810dc4a:	f7f2 fd01 	bl	8100650 <__aeabi_dmul>
 810dc4e:	4602      	mov	r2, r0
 810dc50:	460b      	mov	r3, r1
 810dc52:	4630      	mov	r0, r6
 810dc54:	4639      	mov	r1, r7
 810dc56:	f7f2 fb45 	bl	81002e4 <__adddf3>
 810dc5a:	4606      	mov	r6, r0
 810dc5c:	460f      	mov	r7, r1
 810dc5e:	4602      	mov	r2, r0
 810dc60:	460b      	mov	r3, r1
 810dc62:	4640      	mov	r0, r8
 810dc64:	4649      	mov	r1, r9
 810dc66:	f7f2 fb3d 	bl	81002e4 <__adddf3>
 810dc6a:	9c04      	ldr	r4, [sp, #16]
 810dc6c:	a33e      	add	r3, pc, #248	; (adr r3, 810dd68 <__ieee754_pow+0x720>)
 810dc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc72:	4620      	mov	r0, r4
 810dc74:	460d      	mov	r5, r1
 810dc76:	f7f2 fceb 	bl	8100650 <__aeabi_dmul>
 810dc7a:	4642      	mov	r2, r8
 810dc7c:	ec41 0b18 	vmov	d8, r0, r1
 810dc80:	464b      	mov	r3, r9
 810dc82:	4620      	mov	r0, r4
 810dc84:	4629      	mov	r1, r5
 810dc86:	f7f2 fb2b 	bl	81002e0 <__aeabi_dsub>
 810dc8a:	4602      	mov	r2, r0
 810dc8c:	460b      	mov	r3, r1
 810dc8e:	4630      	mov	r0, r6
 810dc90:	4639      	mov	r1, r7
 810dc92:	f7f2 fb25 	bl	81002e0 <__aeabi_dsub>
 810dc96:	a336      	add	r3, pc, #216	; (adr r3, 810dd70 <__ieee754_pow+0x728>)
 810dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc9c:	f7f2 fcd8 	bl	8100650 <__aeabi_dmul>
 810dca0:	a335      	add	r3, pc, #212	; (adr r3, 810dd78 <__ieee754_pow+0x730>)
 810dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dca6:	4606      	mov	r6, r0
 810dca8:	460f      	mov	r7, r1
 810dcaa:	4620      	mov	r0, r4
 810dcac:	4629      	mov	r1, r5
 810dcae:	f7f2 fccf 	bl	8100650 <__aeabi_dmul>
 810dcb2:	4602      	mov	r2, r0
 810dcb4:	460b      	mov	r3, r1
 810dcb6:	4630      	mov	r0, r6
 810dcb8:	4639      	mov	r1, r7
 810dcba:	f7f2 fb13 	bl	81002e4 <__adddf3>
 810dcbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810dcc0:	4b38      	ldr	r3, [pc, #224]	; (810dda4 <__ieee754_pow+0x75c>)
 810dcc2:	4413      	add	r3, r2
 810dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dcc8:	f7f2 fb0c 	bl	81002e4 <__adddf3>
 810dccc:	4682      	mov	sl, r0
 810dcce:	9809      	ldr	r0, [sp, #36]	; 0x24
 810dcd0:	468b      	mov	fp, r1
 810dcd2:	f7f2 fc53 	bl	810057c <__aeabi_i2d>
 810dcd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810dcd8:	4b33      	ldr	r3, [pc, #204]	; (810dda8 <__ieee754_pow+0x760>)
 810dcda:	4413      	add	r3, r2
 810dcdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 810dce0:	4606      	mov	r6, r0
 810dce2:	460f      	mov	r7, r1
 810dce4:	4652      	mov	r2, sl
 810dce6:	465b      	mov	r3, fp
 810dce8:	ec51 0b18 	vmov	r0, r1, d8
 810dcec:	f7f2 fafa 	bl	81002e4 <__adddf3>
 810dcf0:	4642      	mov	r2, r8
 810dcf2:	464b      	mov	r3, r9
 810dcf4:	f7f2 faf6 	bl	81002e4 <__adddf3>
 810dcf8:	4632      	mov	r2, r6
 810dcfa:	463b      	mov	r3, r7
 810dcfc:	f7f2 faf2 	bl	81002e4 <__adddf3>
 810dd00:	9c04      	ldr	r4, [sp, #16]
 810dd02:	4632      	mov	r2, r6
 810dd04:	463b      	mov	r3, r7
 810dd06:	4620      	mov	r0, r4
 810dd08:	460d      	mov	r5, r1
 810dd0a:	f7f2 fae9 	bl	81002e0 <__aeabi_dsub>
 810dd0e:	4642      	mov	r2, r8
 810dd10:	464b      	mov	r3, r9
 810dd12:	f7f2 fae5 	bl	81002e0 <__aeabi_dsub>
 810dd16:	ec53 2b18 	vmov	r2, r3, d8
 810dd1a:	f7f2 fae1 	bl	81002e0 <__aeabi_dsub>
 810dd1e:	4602      	mov	r2, r0
 810dd20:	460b      	mov	r3, r1
 810dd22:	4650      	mov	r0, sl
 810dd24:	4659      	mov	r1, fp
 810dd26:	e606      	b.n	810d936 <__ieee754_pow+0x2ee>
 810dd28:	2401      	movs	r4, #1
 810dd2a:	e6a0      	b.n	810da6e <__ieee754_pow+0x426>
 810dd2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810dd80 <__ieee754_pow+0x738>
 810dd30:	e60d      	b.n	810d94e <__ieee754_pow+0x306>
 810dd32:	bf00      	nop
 810dd34:	f3af 8000 	nop.w
 810dd38:	4a454eef 	.word	0x4a454eef
 810dd3c:	3fca7e28 	.word	0x3fca7e28
 810dd40:	93c9db65 	.word	0x93c9db65
 810dd44:	3fcd864a 	.word	0x3fcd864a
 810dd48:	a91d4101 	.word	0xa91d4101
 810dd4c:	3fd17460 	.word	0x3fd17460
 810dd50:	518f264d 	.word	0x518f264d
 810dd54:	3fd55555 	.word	0x3fd55555
 810dd58:	db6fabff 	.word	0xdb6fabff
 810dd5c:	3fdb6db6 	.word	0x3fdb6db6
 810dd60:	33333303 	.word	0x33333303
 810dd64:	3fe33333 	.word	0x3fe33333
 810dd68:	e0000000 	.word	0xe0000000
 810dd6c:	3feec709 	.word	0x3feec709
 810dd70:	dc3a03fd 	.word	0xdc3a03fd
 810dd74:	3feec709 	.word	0x3feec709
 810dd78:	145b01f5 	.word	0x145b01f5
 810dd7c:	be3e2fe0 	.word	0xbe3e2fe0
 810dd80:	00000000 	.word	0x00000000
 810dd84:	3ff00000 	.word	0x3ff00000
 810dd88:	7ff00000 	.word	0x7ff00000
 810dd8c:	43400000 	.word	0x43400000
 810dd90:	0003988e 	.word	0x0003988e
 810dd94:	000bb679 	.word	0x000bb679
 810dd98:	0810e538 	.word	0x0810e538
 810dd9c:	3ff00000 	.word	0x3ff00000
 810dda0:	40080000 	.word	0x40080000
 810dda4:	0810e558 	.word	0x0810e558
 810dda8:	0810e548 	.word	0x0810e548
 810ddac:	a3b5      	add	r3, pc, #724	; (adr r3, 810e084 <__ieee754_pow+0xa3c>)
 810ddae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddb2:	4640      	mov	r0, r8
 810ddb4:	4649      	mov	r1, r9
 810ddb6:	f7f2 fa95 	bl	81002e4 <__adddf3>
 810ddba:	4622      	mov	r2, r4
 810ddbc:	ec41 0b1a 	vmov	d10, r0, r1
 810ddc0:	462b      	mov	r3, r5
 810ddc2:	4630      	mov	r0, r6
 810ddc4:	4639      	mov	r1, r7
 810ddc6:	f7f2 fa8b 	bl	81002e0 <__aeabi_dsub>
 810ddca:	4602      	mov	r2, r0
 810ddcc:	460b      	mov	r3, r1
 810ddce:	ec51 0b1a 	vmov	r0, r1, d10
 810ddd2:	f7f2 fecd 	bl	8100b70 <__aeabi_dcmpgt>
 810ddd6:	2800      	cmp	r0, #0
 810ddd8:	f47f adf8 	bne.w	810d9cc <__ieee754_pow+0x384>
 810dddc:	4aa4      	ldr	r2, [pc, #656]	; (810e070 <__ieee754_pow+0xa28>)
 810ddde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810dde2:	4293      	cmp	r3, r2
 810dde4:	f340 810b 	ble.w	810dffe <__ieee754_pow+0x9b6>
 810dde8:	151b      	asrs	r3, r3, #20
 810ddea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810ddee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810ddf2:	fa4a f303 	asr.w	r3, sl, r3
 810ddf6:	445b      	add	r3, fp
 810ddf8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810ddfc:	4e9d      	ldr	r6, [pc, #628]	; (810e074 <__ieee754_pow+0xa2c>)
 810ddfe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810de02:	4116      	asrs	r6, r2
 810de04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810de08:	2000      	movs	r0, #0
 810de0a:	ea23 0106 	bic.w	r1, r3, r6
 810de0e:	f1c2 0214 	rsb	r2, r2, #20
 810de12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810de16:	fa4a fa02 	asr.w	sl, sl, r2
 810de1a:	f1bb 0f00 	cmp.w	fp, #0
 810de1e:	4602      	mov	r2, r0
 810de20:	460b      	mov	r3, r1
 810de22:	4620      	mov	r0, r4
 810de24:	4629      	mov	r1, r5
 810de26:	bfb8      	it	lt
 810de28:	f1ca 0a00 	rsblt	sl, sl, #0
 810de2c:	f7f2 fa58 	bl	81002e0 <__aeabi_dsub>
 810de30:	ec41 0b19 	vmov	d9, r0, r1
 810de34:	4642      	mov	r2, r8
 810de36:	464b      	mov	r3, r9
 810de38:	ec51 0b19 	vmov	r0, r1, d9
 810de3c:	f7f2 fa52 	bl	81002e4 <__adddf3>
 810de40:	2400      	movs	r4, #0
 810de42:	a379      	add	r3, pc, #484	; (adr r3, 810e028 <__ieee754_pow+0x9e0>)
 810de44:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de48:	4620      	mov	r0, r4
 810de4a:	460d      	mov	r5, r1
 810de4c:	f7f2 fc00 	bl	8100650 <__aeabi_dmul>
 810de50:	ec53 2b19 	vmov	r2, r3, d9
 810de54:	4606      	mov	r6, r0
 810de56:	460f      	mov	r7, r1
 810de58:	4620      	mov	r0, r4
 810de5a:	4629      	mov	r1, r5
 810de5c:	f7f2 fa40 	bl	81002e0 <__aeabi_dsub>
 810de60:	4602      	mov	r2, r0
 810de62:	460b      	mov	r3, r1
 810de64:	4640      	mov	r0, r8
 810de66:	4649      	mov	r1, r9
 810de68:	f7f2 fa3a 	bl	81002e0 <__aeabi_dsub>
 810de6c:	a370      	add	r3, pc, #448	; (adr r3, 810e030 <__ieee754_pow+0x9e8>)
 810de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de72:	f7f2 fbed 	bl	8100650 <__aeabi_dmul>
 810de76:	a370      	add	r3, pc, #448	; (adr r3, 810e038 <__ieee754_pow+0x9f0>)
 810de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de7c:	4680      	mov	r8, r0
 810de7e:	4689      	mov	r9, r1
 810de80:	4620      	mov	r0, r4
 810de82:	4629      	mov	r1, r5
 810de84:	f7f2 fbe4 	bl	8100650 <__aeabi_dmul>
 810de88:	4602      	mov	r2, r0
 810de8a:	460b      	mov	r3, r1
 810de8c:	4640      	mov	r0, r8
 810de8e:	4649      	mov	r1, r9
 810de90:	f7f2 fa28 	bl	81002e4 <__adddf3>
 810de94:	4604      	mov	r4, r0
 810de96:	460d      	mov	r5, r1
 810de98:	4602      	mov	r2, r0
 810de9a:	460b      	mov	r3, r1
 810de9c:	4630      	mov	r0, r6
 810de9e:	4639      	mov	r1, r7
 810dea0:	f7f2 fa20 	bl	81002e4 <__adddf3>
 810dea4:	4632      	mov	r2, r6
 810dea6:	463b      	mov	r3, r7
 810dea8:	4680      	mov	r8, r0
 810deaa:	4689      	mov	r9, r1
 810deac:	f7f2 fa18 	bl	81002e0 <__aeabi_dsub>
 810deb0:	4602      	mov	r2, r0
 810deb2:	460b      	mov	r3, r1
 810deb4:	4620      	mov	r0, r4
 810deb6:	4629      	mov	r1, r5
 810deb8:	f7f2 fa12 	bl	81002e0 <__aeabi_dsub>
 810debc:	4642      	mov	r2, r8
 810debe:	4606      	mov	r6, r0
 810dec0:	460f      	mov	r7, r1
 810dec2:	464b      	mov	r3, r9
 810dec4:	4640      	mov	r0, r8
 810dec6:	4649      	mov	r1, r9
 810dec8:	f7f2 fbc2 	bl	8100650 <__aeabi_dmul>
 810decc:	a35c      	add	r3, pc, #368	; (adr r3, 810e040 <__ieee754_pow+0x9f8>)
 810dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ded2:	4604      	mov	r4, r0
 810ded4:	460d      	mov	r5, r1
 810ded6:	f7f2 fbbb 	bl	8100650 <__aeabi_dmul>
 810deda:	a35b      	add	r3, pc, #364	; (adr r3, 810e048 <__ieee754_pow+0xa00>)
 810dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dee0:	f7f2 f9fe 	bl	81002e0 <__aeabi_dsub>
 810dee4:	4622      	mov	r2, r4
 810dee6:	462b      	mov	r3, r5
 810dee8:	f7f2 fbb2 	bl	8100650 <__aeabi_dmul>
 810deec:	a358      	add	r3, pc, #352	; (adr r3, 810e050 <__ieee754_pow+0xa08>)
 810deee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810def2:	f7f2 f9f7 	bl	81002e4 <__adddf3>
 810def6:	4622      	mov	r2, r4
 810def8:	462b      	mov	r3, r5
 810defa:	f7f2 fba9 	bl	8100650 <__aeabi_dmul>
 810defe:	a356      	add	r3, pc, #344	; (adr r3, 810e058 <__ieee754_pow+0xa10>)
 810df00:	e9d3 2300 	ldrd	r2, r3, [r3]
 810df04:	f7f2 f9ec 	bl	81002e0 <__aeabi_dsub>
 810df08:	4622      	mov	r2, r4
 810df0a:	462b      	mov	r3, r5
 810df0c:	f7f2 fba0 	bl	8100650 <__aeabi_dmul>
 810df10:	a353      	add	r3, pc, #332	; (adr r3, 810e060 <__ieee754_pow+0xa18>)
 810df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 810df16:	f7f2 f9e5 	bl	81002e4 <__adddf3>
 810df1a:	4622      	mov	r2, r4
 810df1c:	462b      	mov	r3, r5
 810df1e:	f7f2 fb97 	bl	8100650 <__aeabi_dmul>
 810df22:	4602      	mov	r2, r0
 810df24:	460b      	mov	r3, r1
 810df26:	4640      	mov	r0, r8
 810df28:	4649      	mov	r1, r9
 810df2a:	f7f2 f9d9 	bl	81002e0 <__aeabi_dsub>
 810df2e:	4604      	mov	r4, r0
 810df30:	460d      	mov	r5, r1
 810df32:	4602      	mov	r2, r0
 810df34:	460b      	mov	r3, r1
 810df36:	4640      	mov	r0, r8
 810df38:	4649      	mov	r1, r9
 810df3a:	f7f2 fb89 	bl	8100650 <__aeabi_dmul>
 810df3e:	2200      	movs	r2, #0
 810df40:	ec41 0b19 	vmov	d9, r0, r1
 810df44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810df48:	4620      	mov	r0, r4
 810df4a:	4629      	mov	r1, r5
 810df4c:	f7f2 f9c8 	bl	81002e0 <__aeabi_dsub>
 810df50:	4602      	mov	r2, r0
 810df52:	460b      	mov	r3, r1
 810df54:	ec51 0b19 	vmov	r0, r1, d9
 810df58:	f7f2 fca4 	bl	81008a4 <__aeabi_ddiv>
 810df5c:	4632      	mov	r2, r6
 810df5e:	4604      	mov	r4, r0
 810df60:	460d      	mov	r5, r1
 810df62:	463b      	mov	r3, r7
 810df64:	4640      	mov	r0, r8
 810df66:	4649      	mov	r1, r9
 810df68:	f7f2 fb72 	bl	8100650 <__aeabi_dmul>
 810df6c:	4632      	mov	r2, r6
 810df6e:	463b      	mov	r3, r7
 810df70:	f7f2 f9b8 	bl	81002e4 <__adddf3>
 810df74:	4602      	mov	r2, r0
 810df76:	460b      	mov	r3, r1
 810df78:	4620      	mov	r0, r4
 810df7a:	4629      	mov	r1, r5
 810df7c:	f7f2 f9b0 	bl	81002e0 <__aeabi_dsub>
 810df80:	4642      	mov	r2, r8
 810df82:	464b      	mov	r3, r9
 810df84:	f7f2 f9ac 	bl	81002e0 <__aeabi_dsub>
 810df88:	460b      	mov	r3, r1
 810df8a:	4602      	mov	r2, r0
 810df8c:	493a      	ldr	r1, [pc, #232]	; (810e078 <__ieee754_pow+0xa30>)
 810df8e:	2000      	movs	r0, #0
 810df90:	f7f2 f9a6 	bl	81002e0 <__aeabi_dsub>
 810df94:	e9cd 0100 	strd	r0, r1, [sp]
 810df98:	9b01      	ldr	r3, [sp, #4]
 810df9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810df9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810dfa2:	da2f      	bge.n	810e004 <__ieee754_pow+0x9bc>
 810dfa4:	4650      	mov	r0, sl
 810dfa6:	ed9d 0b00 	vldr	d0, [sp]
 810dfaa:	f000 f9cd 	bl	810e348 <scalbn>
 810dfae:	ec51 0b10 	vmov	r0, r1, d0
 810dfb2:	ec53 2b18 	vmov	r2, r3, d8
 810dfb6:	f7ff bbe0 	b.w	810d77a <__ieee754_pow+0x132>
 810dfba:	4b30      	ldr	r3, [pc, #192]	; (810e07c <__ieee754_pow+0xa34>)
 810dfbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810dfc0:	429e      	cmp	r6, r3
 810dfc2:	f77f af0b 	ble.w	810dddc <__ieee754_pow+0x794>
 810dfc6:	4b2e      	ldr	r3, [pc, #184]	; (810e080 <__ieee754_pow+0xa38>)
 810dfc8:	440b      	add	r3, r1
 810dfca:	4303      	orrs	r3, r0
 810dfcc:	d00b      	beq.n	810dfe6 <__ieee754_pow+0x99e>
 810dfce:	a326      	add	r3, pc, #152	; (adr r3, 810e068 <__ieee754_pow+0xa20>)
 810dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfd4:	ec51 0b18 	vmov	r0, r1, d8
 810dfd8:	f7f2 fb3a 	bl	8100650 <__aeabi_dmul>
 810dfdc:	a322      	add	r3, pc, #136	; (adr r3, 810e068 <__ieee754_pow+0xa20>)
 810dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfe2:	f7ff bbca 	b.w	810d77a <__ieee754_pow+0x132>
 810dfe6:	4622      	mov	r2, r4
 810dfe8:	462b      	mov	r3, r5
 810dfea:	f7f2 f979 	bl	81002e0 <__aeabi_dsub>
 810dfee:	4642      	mov	r2, r8
 810dff0:	464b      	mov	r3, r9
 810dff2:	f7f2 fdb3 	bl	8100b5c <__aeabi_dcmpge>
 810dff6:	2800      	cmp	r0, #0
 810dff8:	f43f aef0 	beq.w	810dddc <__ieee754_pow+0x794>
 810dffc:	e7e7      	b.n	810dfce <__ieee754_pow+0x986>
 810dffe:	f04f 0a00 	mov.w	sl, #0
 810e002:	e717      	b.n	810de34 <__ieee754_pow+0x7ec>
 810e004:	e9dd 0100 	ldrd	r0, r1, [sp]
 810e008:	4619      	mov	r1, r3
 810e00a:	e7d2      	b.n	810dfb2 <__ieee754_pow+0x96a>
 810e00c:	491a      	ldr	r1, [pc, #104]	; (810e078 <__ieee754_pow+0xa30>)
 810e00e:	2000      	movs	r0, #0
 810e010:	f7ff bb9e 	b.w	810d750 <__ieee754_pow+0x108>
 810e014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810e018:	f7ff bb9a 	b.w	810d750 <__ieee754_pow+0x108>
 810e01c:	9000      	str	r0, [sp, #0]
 810e01e:	f7ff bb76 	b.w	810d70e <__ieee754_pow+0xc6>
 810e022:	2100      	movs	r1, #0
 810e024:	f7ff bb60 	b.w	810d6e8 <__ieee754_pow+0xa0>
 810e028:	00000000 	.word	0x00000000
 810e02c:	3fe62e43 	.word	0x3fe62e43
 810e030:	fefa39ef 	.word	0xfefa39ef
 810e034:	3fe62e42 	.word	0x3fe62e42
 810e038:	0ca86c39 	.word	0x0ca86c39
 810e03c:	be205c61 	.word	0xbe205c61
 810e040:	72bea4d0 	.word	0x72bea4d0
 810e044:	3e663769 	.word	0x3e663769
 810e048:	c5d26bf1 	.word	0xc5d26bf1
 810e04c:	3ebbbd41 	.word	0x3ebbbd41
 810e050:	af25de2c 	.word	0xaf25de2c
 810e054:	3f11566a 	.word	0x3f11566a
 810e058:	16bebd93 	.word	0x16bebd93
 810e05c:	3f66c16c 	.word	0x3f66c16c
 810e060:	5555553e 	.word	0x5555553e
 810e064:	3fc55555 	.word	0x3fc55555
 810e068:	c2f8f359 	.word	0xc2f8f359
 810e06c:	01a56e1f 	.word	0x01a56e1f
 810e070:	3fe00000 	.word	0x3fe00000
 810e074:	000fffff 	.word	0x000fffff
 810e078:	3ff00000 	.word	0x3ff00000
 810e07c:	4090cbff 	.word	0x4090cbff
 810e080:	3f6f3400 	.word	0x3f6f3400
 810e084:	652b82fe 	.word	0x652b82fe
 810e088:	3c971547 	.word	0x3c971547

0810e08c <__ieee754_sqrt>:
 810e08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e090:	ec55 4b10 	vmov	r4, r5, d0
 810e094:	4e56      	ldr	r6, [pc, #344]	; (810e1f0 <__ieee754_sqrt+0x164>)
 810e096:	43ae      	bics	r6, r5
 810e098:	ee10 0a10 	vmov	r0, s0
 810e09c:	ee10 3a10 	vmov	r3, s0
 810e0a0:	4629      	mov	r1, r5
 810e0a2:	462a      	mov	r2, r5
 810e0a4:	d110      	bne.n	810e0c8 <__ieee754_sqrt+0x3c>
 810e0a6:	ee10 2a10 	vmov	r2, s0
 810e0aa:	462b      	mov	r3, r5
 810e0ac:	f7f2 fad0 	bl	8100650 <__aeabi_dmul>
 810e0b0:	4602      	mov	r2, r0
 810e0b2:	460b      	mov	r3, r1
 810e0b4:	4620      	mov	r0, r4
 810e0b6:	4629      	mov	r1, r5
 810e0b8:	f7f2 f914 	bl	81002e4 <__adddf3>
 810e0bc:	4604      	mov	r4, r0
 810e0be:	460d      	mov	r5, r1
 810e0c0:	ec45 4b10 	vmov	d0, r4, r5
 810e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e0c8:	2d00      	cmp	r5, #0
 810e0ca:	dc10      	bgt.n	810e0ee <__ieee754_sqrt+0x62>
 810e0cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e0d0:	4330      	orrs	r0, r6
 810e0d2:	d0f5      	beq.n	810e0c0 <__ieee754_sqrt+0x34>
 810e0d4:	b15d      	cbz	r5, 810e0ee <__ieee754_sqrt+0x62>
 810e0d6:	ee10 2a10 	vmov	r2, s0
 810e0da:	462b      	mov	r3, r5
 810e0dc:	ee10 0a10 	vmov	r0, s0
 810e0e0:	f7f2 f8fe 	bl	81002e0 <__aeabi_dsub>
 810e0e4:	4602      	mov	r2, r0
 810e0e6:	460b      	mov	r3, r1
 810e0e8:	f7f2 fbdc 	bl	81008a4 <__aeabi_ddiv>
 810e0ec:	e7e6      	b.n	810e0bc <__ieee754_sqrt+0x30>
 810e0ee:	1509      	asrs	r1, r1, #20
 810e0f0:	d076      	beq.n	810e1e0 <__ieee754_sqrt+0x154>
 810e0f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810e0f6:	07ce      	lsls	r6, r1, #31
 810e0f8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810e0fc:	bf5e      	ittt	pl
 810e0fe:	0fda      	lsrpl	r2, r3, #31
 810e100:	005b      	lslpl	r3, r3, #1
 810e102:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810e106:	0fda      	lsrs	r2, r3, #31
 810e108:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810e10c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810e110:	2000      	movs	r0, #0
 810e112:	106d      	asrs	r5, r5, #1
 810e114:	005b      	lsls	r3, r3, #1
 810e116:	f04f 0e16 	mov.w	lr, #22
 810e11a:	4684      	mov	ip, r0
 810e11c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e120:	eb0c 0401 	add.w	r4, ip, r1
 810e124:	4294      	cmp	r4, r2
 810e126:	bfde      	ittt	le
 810e128:	1b12      	suble	r2, r2, r4
 810e12a:	eb04 0c01 	addle.w	ip, r4, r1
 810e12e:	1840      	addle	r0, r0, r1
 810e130:	0052      	lsls	r2, r2, #1
 810e132:	f1be 0e01 	subs.w	lr, lr, #1
 810e136:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810e13a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e13e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e142:	d1ed      	bne.n	810e120 <__ieee754_sqrt+0x94>
 810e144:	4671      	mov	r1, lr
 810e146:	2720      	movs	r7, #32
 810e148:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810e14c:	4562      	cmp	r2, ip
 810e14e:	eb04 060e 	add.w	r6, r4, lr
 810e152:	dc02      	bgt.n	810e15a <__ieee754_sqrt+0xce>
 810e154:	d113      	bne.n	810e17e <__ieee754_sqrt+0xf2>
 810e156:	429e      	cmp	r6, r3
 810e158:	d811      	bhi.n	810e17e <__ieee754_sqrt+0xf2>
 810e15a:	2e00      	cmp	r6, #0
 810e15c:	eb06 0e04 	add.w	lr, r6, r4
 810e160:	da43      	bge.n	810e1ea <__ieee754_sqrt+0x15e>
 810e162:	f1be 0f00 	cmp.w	lr, #0
 810e166:	db40      	blt.n	810e1ea <__ieee754_sqrt+0x15e>
 810e168:	f10c 0801 	add.w	r8, ip, #1
 810e16c:	eba2 020c 	sub.w	r2, r2, ip
 810e170:	429e      	cmp	r6, r3
 810e172:	bf88      	it	hi
 810e174:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810e178:	1b9b      	subs	r3, r3, r6
 810e17a:	4421      	add	r1, r4
 810e17c:	46c4      	mov	ip, r8
 810e17e:	0052      	lsls	r2, r2, #1
 810e180:	3f01      	subs	r7, #1
 810e182:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810e186:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810e18a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e18e:	d1dd      	bne.n	810e14c <__ieee754_sqrt+0xc0>
 810e190:	4313      	orrs	r3, r2
 810e192:	d006      	beq.n	810e1a2 <__ieee754_sqrt+0x116>
 810e194:	1c4c      	adds	r4, r1, #1
 810e196:	bf13      	iteet	ne
 810e198:	3101      	addne	r1, #1
 810e19a:	3001      	addeq	r0, #1
 810e19c:	4639      	moveq	r1, r7
 810e19e:	f021 0101 	bicne.w	r1, r1, #1
 810e1a2:	1043      	asrs	r3, r0, #1
 810e1a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810e1a8:	0849      	lsrs	r1, r1, #1
 810e1aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810e1ae:	07c2      	lsls	r2, r0, #31
 810e1b0:	bf48      	it	mi
 810e1b2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810e1b6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810e1ba:	460c      	mov	r4, r1
 810e1bc:	463d      	mov	r5, r7
 810e1be:	e77f      	b.n	810e0c0 <__ieee754_sqrt+0x34>
 810e1c0:	0ada      	lsrs	r2, r3, #11
 810e1c2:	3815      	subs	r0, #21
 810e1c4:	055b      	lsls	r3, r3, #21
 810e1c6:	2a00      	cmp	r2, #0
 810e1c8:	d0fa      	beq.n	810e1c0 <__ieee754_sqrt+0x134>
 810e1ca:	02d7      	lsls	r7, r2, #11
 810e1cc:	d50a      	bpl.n	810e1e4 <__ieee754_sqrt+0x158>
 810e1ce:	f1c1 0420 	rsb	r4, r1, #32
 810e1d2:	fa23 f404 	lsr.w	r4, r3, r4
 810e1d6:	1e4d      	subs	r5, r1, #1
 810e1d8:	408b      	lsls	r3, r1
 810e1da:	4322      	orrs	r2, r4
 810e1dc:	1b41      	subs	r1, r0, r5
 810e1de:	e788      	b.n	810e0f2 <__ieee754_sqrt+0x66>
 810e1e0:	4608      	mov	r0, r1
 810e1e2:	e7f0      	b.n	810e1c6 <__ieee754_sqrt+0x13a>
 810e1e4:	0052      	lsls	r2, r2, #1
 810e1e6:	3101      	adds	r1, #1
 810e1e8:	e7ef      	b.n	810e1ca <__ieee754_sqrt+0x13e>
 810e1ea:	46e0      	mov	r8, ip
 810e1ec:	e7be      	b.n	810e16c <__ieee754_sqrt+0xe0>
 810e1ee:	bf00      	nop
 810e1f0:	7ff00000 	.word	0x7ff00000

0810e1f4 <fabs>:
 810e1f4:	ec51 0b10 	vmov	r0, r1, d0
 810e1f8:	ee10 2a10 	vmov	r2, s0
 810e1fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e200:	ec43 2b10 	vmov	d0, r2, r3
 810e204:	4770      	bx	lr

0810e206 <finite>:
 810e206:	b082      	sub	sp, #8
 810e208:	ed8d 0b00 	vstr	d0, [sp]
 810e20c:	9801      	ldr	r0, [sp, #4]
 810e20e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810e212:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810e216:	0fc0      	lsrs	r0, r0, #31
 810e218:	b002      	add	sp, #8
 810e21a:	4770      	bx	lr
 810e21c:	0000      	movs	r0, r0
	...

0810e220 <nan>:
 810e220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810e228 <nan+0x8>
 810e224:	4770      	bx	lr
 810e226:	bf00      	nop
 810e228:	00000000 	.word	0x00000000
 810e22c:	7ff80000 	.word	0x7ff80000

0810e230 <rint>:
 810e230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e232:	ec51 0b10 	vmov	r0, r1, d0
 810e236:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810e23a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810e23e:	2e13      	cmp	r6, #19
 810e240:	ee10 4a10 	vmov	r4, s0
 810e244:	460b      	mov	r3, r1
 810e246:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810e24a:	dc58      	bgt.n	810e2fe <rint+0xce>
 810e24c:	2e00      	cmp	r6, #0
 810e24e:	da2b      	bge.n	810e2a8 <rint+0x78>
 810e250:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810e254:	4302      	orrs	r2, r0
 810e256:	d023      	beq.n	810e2a0 <rint+0x70>
 810e258:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810e25c:	4302      	orrs	r2, r0
 810e25e:	4254      	negs	r4, r2
 810e260:	4314      	orrs	r4, r2
 810e262:	0c4b      	lsrs	r3, r1, #17
 810e264:	0b24      	lsrs	r4, r4, #12
 810e266:	045b      	lsls	r3, r3, #17
 810e268:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810e26c:	ea44 0103 	orr.w	r1, r4, r3
 810e270:	4b32      	ldr	r3, [pc, #200]	; (810e33c <rint+0x10c>)
 810e272:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810e276:	e9d3 6700 	ldrd	r6, r7, [r3]
 810e27a:	4602      	mov	r2, r0
 810e27c:	460b      	mov	r3, r1
 810e27e:	4630      	mov	r0, r6
 810e280:	4639      	mov	r1, r7
 810e282:	f7f2 f82f 	bl	81002e4 <__adddf3>
 810e286:	e9cd 0100 	strd	r0, r1, [sp]
 810e28a:	463b      	mov	r3, r7
 810e28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810e290:	4632      	mov	r2, r6
 810e292:	f7f2 f825 	bl	81002e0 <__aeabi_dsub>
 810e296:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e29a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810e29e:	4639      	mov	r1, r7
 810e2a0:	ec41 0b10 	vmov	d0, r0, r1
 810e2a4:	b003      	add	sp, #12
 810e2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e2a8:	4a25      	ldr	r2, [pc, #148]	; (810e340 <rint+0x110>)
 810e2aa:	4132      	asrs	r2, r6
 810e2ac:	ea01 0702 	and.w	r7, r1, r2
 810e2b0:	4307      	orrs	r7, r0
 810e2b2:	d0f5      	beq.n	810e2a0 <rint+0x70>
 810e2b4:	0851      	lsrs	r1, r2, #1
 810e2b6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810e2ba:	4314      	orrs	r4, r2
 810e2bc:	d00c      	beq.n	810e2d8 <rint+0xa8>
 810e2be:	ea23 0201 	bic.w	r2, r3, r1
 810e2c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810e2c6:	2e13      	cmp	r6, #19
 810e2c8:	fa43 f606 	asr.w	r6, r3, r6
 810e2cc:	bf0c      	ite	eq
 810e2ce:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810e2d2:	2400      	movne	r4, #0
 810e2d4:	ea42 0306 	orr.w	r3, r2, r6
 810e2d8:	4918      	ldr	r1, [pc, #96]	; (810e33c <rint+0x10c>)
 810e2da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810e2de:	4622      	mov	r2, r4
 810e2e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 810e2e4:	4620      	mov	r0, r4
 810e2e6:	4629      	mov	r1, r5
 810e2e8:	f7f1 fffc 	bl	81002e4 <__adddf3>
 810e2ec:	e9cd 0100 	strd	r0, r1, [sp]
 810e2f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810e2f4:	4622      	mov	r2, r4
 810e2f6:	462b      	mov	r3, r5
 810e2f8:	f7f1 fff2 	bl	81002e0 <__aeabi_dsub>
 810e2fc:	e7d0      	b.n	810e2a0 <rint+0x70>
 810e2fe:	2e33      	cmp	r6, #51	; 0x33
 810e300:	dd07      	ble.n	810e312 <rint+0xe2>
 810e302:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810e306:	d1cb      	bne.n	810e2a0 <rint+0x70>
 810e308:	ee10 2a10 	vmov	r2, s0
 810e30c:	f7f1 ffea 	bl	81002e4 <__adddf3>
 810e310:	e7c6      	b.n	810e2a0 <rint+0x70>
 810e312:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810e316:	f04f 36ff 	mov.w	r6, #4294967295
 810e31a:	40d6      	lsrs	r6, r2
 810e31c:	4230      	tst	r0, r6
 810e31e:	d0bf      	beq.n	810e2a0 <rint+0x70>
 810e320:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810e324:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810e328:	bf1f      	itttt	ne
 810e32a:	ea24 0101 	bicne.w	r1, r4, r1
 810e32e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810e332:	fa44 f202 	asrne.w	r2, r4, r2
 810e336:	ea41 0402 	orrne.w	r4, r1, r2
 810e33a:	e7cd      	b.n	810e2d8 <rint+0xa8>
 810e33c:	0810e568 	.word	0x0810e568
 810e340:	000fffff 	.word	0x000fffff
 810e344:	00000000 	.word	0x00000000

0810e348 <scalbn>:
 810e348:	b570      	push	{r4, r5, r6, lr}
 810e34a:	ec55 4b10 	vmov	r4, r5, d0
 810e34e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810e352:	4606      	mov	r6, r0
 810e354:	462b      	mov	r3, r5
 810e356:	b99a      	cbnz	r2, 810e380 <scalbn+0x38>
 810e358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810e35c:	4323      	orrs	r3, r4
 810e35e:	d036      	beq.n	810e3ce <scalbn+0x86>
 810e360:	4b39      	ldr	r3, [pc, #228]	; (810e448 <scalbn+0x100>)
 810e362:	4629      	mov	r1, r5
 810e364:	ee10 0a10 	vmov	r0, s0
 810e368:	2200      	movs	r2, #0
 810e36a:	f7f2 f971 	bl	8100650 <__aeabi_dmul>
 810e36e:	4b37      	ldr	r3, [pc, #220]	; (810e44c <scalbn+0x104>)
 810e370:	429e      	cmp	r6, r3
 810e372:	4604      	mov	r4, r0
 810e374:	460d      	mov	r5, r1
 810e376:	da10      	bge.n	810e39a <scalbn+0x52>
 810e378:	a32b      	add	r3, pc, #172	; (adr r3, 810e428 <scalbn+0xe0>)
 810e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e37e:	e03a      	b.n	810e3f6 <scalbn+0xae>
 810e380:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810e384:	428a      	cmp	r2, r1
 810e386:	d10c      	bne.n	810e3a2 <scalbn+0x5a>
 810e388:	ee10 2a10 	vmov	r2, s0
 810e38c:	4620      	mov	r0, r4
 810e38e:	4629      	mov	r1, r5
 810e390:	f7f1 ffa8 	bl	81002e4 <__adddf3>
 810e394:	4604      	mov	r4, r0
 810e396:	460d      	mov	r5, r1
 810e398:	e019      	b.n	810e3ce <scalbn+0x86>
 810e39a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810e39e:	460b      	mov	r3, r1
 810e3a0:	3a36      	subs	r2, #54	; 0x36
 810e3a2:	4432      	add	r2, r6
 810e3a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e3a8:	428a      	cmp	r2, r1
 810e3aa:	dd08      	ble.n	810e3be <scalbn+0x76>
 810e3ac:	2d00      	cmp	r5, #0
 810e3ae:	a120      	add	r1, pc, #128	; (adr r1, 810e430 <scalbn+0xe8>)
 810e3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e3b4:	da1c      	bge.n	810e3f0 <scalbn+0xa8>
 810e3b6:	a120      	add	r1, pc, #128	; (adr r1, 810e438 <scalbn+0xf0>)
 810e3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e3bc:	e018      	b.n	810e3f0 <scalbn+0xa8>
 810e3be:	2a00      	cmp	r2, #0
 810e3c0:	dd08      	ble.n	810e3d4 <scalbn+0x8c>
 810e3c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e3c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e3ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e3ce:	ec45 4b10 	vmov	d0, r4, r5
 810e3d2:	bd70      	pop	{r4, r5, r6, pc}
 810e3d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e3d8:	da19      	bge.n	810e40e <scalbn+0xc6>
 810e3da:	f24c 3350 	movw	r3, #50000	; 0xc350
 810e3de:	429e      	cmp	r6, r3
 810e3e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810e3e4:	dd0a      	ble.n	810e3fc <scalbn+0xb4>
 810e3e6:	a112      	add	r1, pc, #72	; (adr r1, 810e430 <scalbn+0xe8>)
 810e3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e3ec:	2b00      	cmp	r3, #0
 810e3ee:	d1e2      	bne.n	810e3b6 <scalbn+0x6e>
 810e3f0:	a30f      	add	r3, pc, #60	; (adr r3, 810e430 <scalbn+0xe8>)
 810e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3f6:	f7f2 f92b 	bl	8100650 <__aeabi_dmul>
 810e3fa:	e7cb      	b.n	810e394 <scalbn+0x4c>
 810e3fc:	a10a      	add	r1, pc, #40	; (adr r1, 810e428 <scalbn+0xe0>)
 810e3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e402:	2b00      	cmp	r3, #0
 810e404:	d0b8      	beq.n	810e378 <scalbn+0x30>
 810e406:	a10e      	add	r1, pc, #56	; (adr r1, 810e440 <scalbn+0xf8>)
 810e408:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e40c:	e7b4      	b.n	810e378 <scalbn+0x30>
 810e40e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e412:	3236      	adds	r2, #54	; 0x36
 810e414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e418:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e41c:	4620      	mov	r0, r4
 810e41e:	4b0c      	ldr	r3, [pc, #48]	; (810e450 <scalbn+0x108>)
 810e420:	2200      	movs	r2, #0
 810e422:	e7e8      	b.n	810e3f6 <scalbn+0xae>
 810e424:	f3af 8000 	nop.w
 810e428:	c2f8f359 	.word	0xc2f8f359
 810e42c:	01a56e1f 	.word	0x01a56e1f
 810e430:	8800759c 	.word	0x8800759c
 810e434:	7e37e43c 	.word	0x7e37e43c
 810e438:	8800759c 	.word	0x8800759c
 810e43c:	fe37e43c 	.word	0xfe37e43c
 810e440:	c2f8f359 	.word	0xc2f8f359
 810e444:	81a56e1f 	.word	0x81a56e1f
 810e448:	43500000 	.word	0x43500000
 810e44c:	ffff3cb0 	.word	0xffff3cb0
 810e450:	3c900000 	.word	0x3c900000

0810e454 <_init>:
 810e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e456:	bf00      	nop
 810e458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e45a:	bc08      	pop	{r3}
 810e45c:	469e      	mov	lr, r3
 810e45e:	4770      	bx	lr

0810e460 <_fini>:
 810e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e462:	bf00      	nop
 810e464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e466:	bc08      	pop	{r3}
 810e468:	469e      	mov	lr, r3
 810e46a:	4770      	bx	lr
