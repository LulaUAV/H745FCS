
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08108538  08108538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08108550  08108550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08108554  08108554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08108558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  10000010  08108568  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000035c  08108568  0002035c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000221ba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003aab  00000000  00000000  000421fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f50  00000000  00000000  00045ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000df8  00000000  00000000  00046bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003951c  00000000  00000000  000479f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001600f  00000000  00000000  00080f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001737c8  00000000  00000000  00096f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0020a6e3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003dd0  00000000  00000000  0020a738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08108520 	.word	0x08108520

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08108520 	.word	0x08108520

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <HAL_SPI_TxRxCpltCallback>:




void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0
 8100316:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8100318:	687b      	ldr	r3, [r7, #4]
 810031a:	681b      	ldr	r3, [r3, #0]
 810031c:	4a05      	ldr	r2, [pc, #20]	; (8100334 <HAL_SPI_TxRxCpltCallback+0x24>)
 810031e:	4293      	cmp	r3, r2
 8100320:	d104      	bne.n	810032c <HAL_SPI_TxRxCpltCallback+0x1c>
    {

      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8100322:	2201      	movs	r2, #1
 8100324:	2110      	movs	r1, #16
 8100326:	4804      	ldr	r0, [pc, #16]	; (8100338 <HAL_SPI_TxRxCpltCallback+0x28>)
 8100328:	f004 f8ac 	bl	8104484 <HAL_GPIO_WritePin>
      //ReadComplete();

    }


}
 810032c:	bf00      	nop
 810032e:	3708      	adds	r7, #8
 8100330:	46bd      	mov	sp, r7
 8100332:	bd80      	pop	{r7, pc}
 8100334:	40013000 	.word	0x40013000
 8100338:	58020000 	.word	0x58020000

0810033c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 810033c:	b580      	push	{r7, lr}
 810033e:	b082      	sub	sp, #8
 8100340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100342:	4b19      	ldr	r3, [pc, #100]	; (81003a8 <MX_DMA_Init+0x6c>)
 8100344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100348:	4a17      	ldr	r2, [pc, #92]	; (81003a8 <MX_DMA_Init+0x6c>)
 810034a:	f043 0301 	orr.w	r3, r3, #1
 810034e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100352:	4b15      	ldr	r3, [pc, #84]	; (81003a8 <MX_DMA_Init+0x6c>)
 8100354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100358:	f003 0301 	and.w	r3, r3, #1
 810035c:	607b      	str	r3, [r7, #4]
 810035e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100360:	2200      	movs	r2, #0
 8100362:	2100      	movs	r1, #0
 8100364:	200b      	movs	r0, #11
 8100366:	f001 fae4 	bl	8101932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810036a:	200b      	movs	r0, #11
 810036c:	f001 fafb 	bl	8101966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100370:	2200      	movs	r2, #0
 8100372:	2100      	movs	r1, #0
 8100374:	200c      	movs	r0, #12
 8100376:	f001 fadc 	bl	8101932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810037a:	200c      	movs	r0, #12
 810037c:	f001 faf3 	bl	8101966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8100380:	2200      	movs	r2, #0
 8100382:	2100      	movs	r1, #0
 8100384:	200d      	movs	r0, #13
 8100386:	f001 fad4 	bl	8101932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 810038a:	200d      	movs	r0, #13
 810038c:	f001 faeb 	bl	8101966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8100390:	2200      	movs	r2, #0
 8100392:	2100      	movs	r1, #0
 8100394:	200e      	movs	r0, #14
 8100396:	f001 facc 	bl	8101932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 810039a:	200e      	movs	r0, #14
 810039c:	f001 fae3 	bl	8101966 <HAL_NVIC_EnableIRQ>

}
 81003a0:	bf00      	nop
 81003a2:	3708      	adds	r7, #8
 81003a4:	46bd      	mov	sp, r7
 81003a6:	bd80      	pop	{r7, pc}
 81003a8:	58024400 	.word	0x58024400

081003ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81003ac:	b580      	push	{r7, lr}
 81003ae:	b088      	sub	sp, #32
 81003b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003b2:	f107 030c 	add.w	r3, r7, #12
 81003b6:	2200      	movs	r2, #0
 81003b8:	601a      	str	r2, [r3, #0]
 81003ba:	605a      	str	r2, [r3, #4]
 81003bc:	609a      	str	r2, [r3, #8]
 81003be:	60da      	str	r2, [r3, #12]
 81003c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81003c2:	4b1a      	ldr	r3, [pc, #104]	; (810042c <MX_GPIO_Init+0x80>)
 81003c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003c8:	4a18      	ldr	r2, [pc, #96]	; (810042c <MX_GPIO_Init+0x80>)
 81003ca:	f043 0301 	orr.w	r3, r3, #1
 81003ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003d2:	4b16      	ldr	r3, [pc, #88]	; (810042c <MX_GPIO_Init+0x80>)
 81003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003d8:	f003 0301 	and.w	r3, r3, #1
 81003dc:	60bb      	str	r3, [r7, #8]
 81003de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81003e0:	4b12      	ldr	r3, [pc, #72]	; (810042c <MX_GPIO_Init+0x80>)
 81003e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003e6:	4a11      	ldr	r2, [pc, #68]	; (810042c <MX_GPIO_Init+0x80>)
 81003e8:	f043 0302 	orr.w	r3, r3, #2
 81003ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003f0:	4b0e      	ldr	r3, [pc, #56]	; (810042c <MX_GPIO_Init+0x80>)
 81003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003f6:	f003 0302 	and.w	r3, r3, #2
 81003fa:	607b      	str	r3, [r7, #4]
 81003fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81003fe:	2200      	movs	r2, #0
 8100400:	2110      	movs	r1, #16
 8100402:	480b      	ldr	r0, [pc, #44]	; (8100430 <MX_GPIO_Init+0x84>)
 8100404:	f004 f83e 	bl	8104484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100408:	2310      	movs	r3, #16
 810040a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810040c:	2301      	movs	r3, #1
 810040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100410:	2300      	movs	r3, #0
 8100412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100414:	2300      	movs	r3, #0
 8100416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100418:	f107 030c 	add.w	r3, r7, #12
 810041c:	4619      	mov	r1, r3
 810041e:	4804      	ldr	r0, [pc, #16]	; (8100430 <MX_GPIO_Init+0x84>)
 8100420:	f003 fe80 	bl	8104124 <HAL_GPIO_Init>

}
 8100424:	bf00      	nop
 8100426:	3720      	adds	r7, #32
 8100428:	46bd      	mov	sp, r7
 810042a:	bd80      	pop	{r7, pc}
 810042c:	58024400 	.word	0x58024400
 8100430:	58020000 	.word	0x58020000

08100434 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8100434:	b580      	push	{r7, lr}
 8100436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100438:	4b1b      	ldr	r3, [pc, #108]	; (81004a8 <MX_I2C1_Init+0x74>)
 810043a:	4a1c      	ldr	r2, [pc, #112]	; (81004ac <MX_I2C1_Init+0x78>)
 810043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810043e:	4b1a      	ldr	r3, [pc, #104]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100440:	4a1b      	ldr	r2, [pc, #108]	; (81004b0 <MX_I2C1_Init+0x7c>)
 8100442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8100444:	4b18      	ldr	r3, [pc, #96]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100446:	2200      	movs	r2, #0
 8100448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810044a:	4b17      	ldr	r3, [pc, #92]	; (81004a8 <MX_I2C1_Init+0x74>)
 810044c:	2201      	movs	r2, #1
 810044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100450:	4b15      	ldr	r3, [pc, #84]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100452:	2200      	movs	r2, #0
 8100454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8100456:	4b14      	ldr	r3, [pc, #80]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100458:	2200      	movs	r2, #0
 810045a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810045c:	4b12      	ldr	r3, [pc, #72]	; (81004a8 <MX_I2C1_Init+0x74>)
 810045e:	2200      	movs	r2, #0
 8100460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100462:	4b11      	ldr	r3, [pc, #68]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100464:	2200      	movs	r2, #0
 8100466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100468:	4b0f      	ldr	r3, [pc, #60]	; (81004a8 <MX_I2C1_Init+0x74>)
 810046a:	2200      	movs	r2, #0
 810046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810046e:	480e      	ldr	r0, [pc, #56]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100470:	f004 f834 	bl	81044dc <HAL_I2C_Init>
 8100474:	4603      	mov	r3, r0
 8100476:	2b00      	cmp	r3, #0
 8100478:	d001      	beq.n	810047e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810047a:	f000 fec6 	bl	810120a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810047e:	2100      	movs	r1, #0
 8100480:	4809      	ldr	r0, [pc, #36]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100482:	f006 f90d 	bl	81066a0 <HAL_I2CEx_ConfigAnalogFilter>
 8100486:	4603      	mov	r3, r0
 8100488:	2b00      	cmp	r3, #0
 810048a:	d001      	beq.n	8100490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810048c:	f000 febd 	bl	810120a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100490:	2100      	movs	r1, #0
 8100492:	4805      	ldr	r0, [pc, #20]	; (81004a8 <MX_I2C1_Init+0x74>)
 8100494:	f006 f94f 	bl	8106736 <HAL_I2CEx_ConfigDigitalFilter>
 8100498:	4603      	mov	r3, r0
 810049a:	2b00      	cmp	r3, #0
 810049c:	d001      	beq.n	81004a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810049e:	f000 feb4 	bl	810120a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81004a2:	bf00      	nop
 81004a4:	bd80      	pop	{r7, pc}
 81004a6:	bf00      	nop
 81004a8:	100000a4 	.word	0x100000a4
 81004ac:	40005400 	.word	0x40005400
 81004b0:	307075b1 	.word	0x307075b1

081004b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81004b4:	b580      	push	{r7, lr}
 81004b6:	b0b8      	sub	sp, #224	; 0xe0
 81004b8:	af00      	add	r7, sp, #0
 81004ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81004bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81004c0:	2200      	movs	r2, #0
 81004c2:	601a      	str	r2, [r3, #0]
 81004c4:	605a      	str	r2, [r3, #4]
 81004c6:	609a      	str	r2, [r3, #8]
 81004c8:	60da      	str	r2, [r3, #12]
 81004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81004cc:	f107 0310 	add.w	r3, r7, #16
 81004d0:	22bc      	movs	r2, #188	; 0xbc
 81004d2:	2100      	movs	r1, #0
 81004d4:	4618      	mov	r0, r3
 81004d6:	f008 f81b 	bl	8108510 <memset>
  if(i2cHandle->Instance==I2C1)
 81004da:	687b      	ldr	r3, [r7, #4]
 81004dc:	681b      	ldr	r3, [r3, #0]
 81004de:	4a5b      	ldr	r2, [pc, #364]	; (810064c <HAL_I2C_MspInit+0x198>)
 81004e0:	4293      	cmp	r3, r2
 81004e2:	f040 80af 	bne.w	8100644 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81004e6:	2308      	movs	r3, #8
 81004e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81004ea:	2300      	movs	r3, #0
 81004ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81004f0:	f107 0310 	add.w	r3, r7, #16
 81004f4:	4618      	mov	r0, r3
 81004f6:	f006 fb6d 	bl	8106bd4 <HAL_RCCEx_PeriphCLKConfig>
 81004fa:	4603      	mov	r3, r0
 81004fc:	2b00      	cmp	r3, #0
 81004fe:	d001      	beq.n	8100504 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8100500:	f000 fe83 	bl	810120a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100504:	4b52      	ldr	r3, [pc, #328]	; (8100650 <HAL_I2C_MspInit+0x19c>)
 8100506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810050a:	4a51      	ldr	r2, [pc, #324]	; (8100650 <HAL_I2C_MspInit+0x19c>)
 810050c:	f043 0302 	orr.w	r3, r3, #2
 8100510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100514:	4b4e      	ldr	r3, [pc, #312]	; (8100650 <HAL_I2C_MspInit+0x19c>)
 8100516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810051a:	f003 0302 	and.w	r3, r3, #2
 810051e:	60fb      	str	r3, [r7, #12]
 8100520:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100522:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810052a:	2312      	movs	r3, #18
 810052c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100530:	2300      	movs	r3, #0
 8100532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100536:	2300      	movs	r3, #0
 8100538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810053c:	2304      	movs	r3, #4
 810053e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100542:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100546:	4619      	mov	r1, r3
 8100548:	4842      	ldr	r0, [pc, #264]	; (8100654 <HAL_I2C_MspInit+0x1a0>)
 810054a:	f003 fdeb 	bl	8104124 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810054e:	4b40      	ldr	r3, [pc, #256]	; (8100650 <HAL_I2C_MspInit+0x19c>)
 8100550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100554:	4a3e      	ldr	r2, [pc, #248]	; (8100650 <HAL_I2C_MspInit+0x19c>)
 8100556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810055a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810055e:	4b3c      	ldr	r3, [pc, #240]	; (8100650 <HAL_I2C_MspInit+0x19c>)
 8100560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100568:	60bb      	str	r3, [r7, #8]
 810056a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 810056c:	4b3a      	ldr	r3, [pc, #232]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 810056e:	4a3b      	ldr	r2, [pc, #236]	; (810065c <HAL_I2C_MspInit+0x1a8>)
 8100570:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8100572:	4b39      	ldr	r3, [pc, #228]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 8100574:	2221      	movs	r2, #33	; 0x21
 8100576:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8100578:	4b37      	ldr	r3, [pc, #220]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 810057a:	2200      	movs	r2, #0
 810057c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810057e:	4b36      	ldr	r3, [pc, #216]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 8100580:	2200      	movs	r2, #0
 8100582:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8100584:	4b34      	ldr	r3, [pc, #208]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 8100586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810058a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810058c:	4b32      	ldr	r3, [pc, #200]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 810058e:	2200      	movs	r2, #0
 8100590:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8100592:	4b31      	ldr	r3, [pc, #196]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 8100594:	2200      	movs	r2, #0
 8100596:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8100598:	4b2f      	ldr	r3, [pc, #188]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 810059a:	2200      	movs	r2, #0
 810059c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 810059e:	4b2e      	ldr	r3, [pc, #184]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 81005a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81005a4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81005a6:	4b2c      	ldr	r3, [pc, #176]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 81005a8:	2200      	movs	r2, #0
 81005aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 81005ac:	482a      	ldr	r0, [pc, #168]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 81005ae:	f001 fa85 	bl	8101abc <HAL_DMA_Init>
 81005b2:	4603      	mov	r3, r0
 81005b4:	2b00      	cmp	r3, #0
 81005b6:	d001      	beq.n	81005bc <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 81005b8:	f000 fe27 	bl	810120a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 81005bc:	687b      	ldr	r3, [r7, #4]
 81005be:	4a26      	ldr	r2, [pc, #152]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 81005c0:	63da      	str	r2, [r3, #60]	; 0x3c
 81005c2:	4a25      	ldr	r2, [pc, #148]	; (8100658 <HAL_I2C_MspInit+0x1a4>)
 81005c4:	687b      	ldr	r3, [r7, #4]
 81005c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 81005c8:	4b25      	ldr	r3, [pc, #148]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005ca:	4a26      	ldr	r2, [pc, #152]	; (8100664 <HAL_I2C_MspInit+0x1b0>)
 81005cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 81005ce:	4b24      	ldr	r3, [pc, #144]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005d0:	2222      	movs	r2, #34	; 0x22
 81005d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81005d4:	4b22      	ldr	r3, [pc, #136]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005d6:	2240      	movs	r2, #64	; 0x40
 81005d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81005da:	4b21      	ldr	r3, [pc, #132]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005dc:	2200      	movs	r2, #0
 81005de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81005e0:	4b1f      	ldr	r3, [pc, #124]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81005e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81005e8:	4b1d      	ldr	r3, [pc, #116]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005ea:	2200      	movs	r2, #0
 81005ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81005ee:	4b1c      	ldr	r3, [pc, #112]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005f0:	2200      	movs	r2, #0
 81005f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 81005f4:	4b1a      	ldr	r3, [pc, #104]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005f6:	2200      	movs	r2, #0
 81005f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 81005fa:	4b19      	ldr	r3, [pc, #100]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 81005fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8100600:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100602:	4b17      	ldr	r3, [pc, #92]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 8100604:	2200      	movs	r2, #0
 8100606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8100608:	4815      	ldr	r0, [pc, #84]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 810060a:	f001 fa57 	bl	8101abc <HAL_DMA_Init>
 810060e:	4603      	mov	r3, r0
 8100610:	2b00      	cmp	r3, #0
 8100612:	d001      	beq.n	8100618 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8100614:	f000 fdf9 	bl	810120a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8100618:	687b      	ldr	r3, [r7, #4]
 810061a:	4a11      	ldr	r2, [pc, #68]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 810061c:	639a      	str	r2, [r3, #56]	; 0x38
 810061e:	4a10      	ldr	r2, [pc, #64]	; (8100660 <HAL_I2C_MspInit+0x1ac>)
 8100620:	687b      	ldr	r3, [r7, #4]
 8100622:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8100624:	2200      	movs	r2, #0
 8100626:	2100      	movs	r1, #0
 8100628:	201f      	movs	r0, #31
 810062a:	f001 f982 	bl	8101932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 810062e:	201f      	movs	r0, #31
 8100630:	f001 f999 	bl	8101966 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8100634:	2200      	movs	r2, #0
 8100636:	2100      	movs	r1, #0
 8100638:	2020      	movs	r0, #32
 810063a:	f001 f97a 	bl	8101932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 810063e:	2020      	movs	r0, #32
 8100640:	f001 f991 	bl	8101966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8100644:	bf00      	nop
 8100646:	37e0      	adds	r7, #224	; 0xe0
 8100648:	46bd      	mov	sp, r7
 810064a:	bd80      	pop	{r7, pc}
 810064c:	40005400 	.word	0x40005400
 8100650:	58024400 	.word	0x58024400
 8100654:	58020400 	.word	0x58020400
 8100658:	100000f0 	.word	0x100000f0
 810065c:	40020040 	.word	0x40020040
 8100660:	1000002c 	.word	0x1000002c
 8100664:	40020058 	.word	0x40020058

08100668 <CheckSensorID>:
#include "lsm9ds1.h"
#include <stm32h7xx_hal.h>


uint8_t CheckSensorID(uint8_t address, uint8_t reg)
{
 8100668:	b580      	push	{r7, lr}
 810066a:	b084      	sub	sp, #16
 810066c:	af00      	add	r7, sp, #0
 810066e:	4603      	mov	r3, r0
 8100670:	460a      	mov	r2, r1
 8100672:	71fb      	strb	r3, [r7, #7]
 8100674:	4613      	mov	r3, r2
 8100676:	71bb      	strb	r3, [r7, #6]

   uint8_t result = I2CReadByte(address, reg);
 8100678:	79ba      	ldrb	r2, [r7, #6]
 810067a:	79fb      	ldrb	r3, [r7, #7]
 810067c:	4611      	mov	r1, r2
 810067e:	4618      	mov	r0, r3
 8100680:	f000 fcaa 	bl	8100fd8 <I2CReadByte>
 8100684:	4603      	mov	r3, r0
 8100686:	73fb      	strb	r3, [r7, #15]

   return result;
 8100688:	7bfb      	ldrb	r3, [r7, #15]


}
 810068a:	4618      	mov	r0, r3
 810068c:	3710      	adds	r7, #16
 810068e:	46bd      	mov	sp, r7
 8100690:	bd80      	pop	{r7, pc}

08100692 <init>:

void init(LSM9DS1Handle* imu)
{
 8100692:	b480      	push	{r7}
 8100694:	b083      	sub	sp, #12
 8100696:	af00      	add	r7, sp, #0
 8100698:	6078      	str	r0, [r7, #4]
//  float gBias[3];
//  float aBias[3];
//  float mBias[3];

  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 810069a:	687b      	ldr	r3, [r7, #4]
 810069c:	2201      	movs	r2, #1
 810069e:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 81006a0:	687b      	ldr	r3, [r7, #4]
 81006a2:	2201      	movs	r2, #1
 81006a4:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 81006a6:	687b      	ldr	r3, [r7, #4]
 81006a8:	2201      	movs	r2, #1
 81006aa:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 81006ac:	687b      	ldr	r3, [r7, #4]
 81006ae:	2201      	movs	r2, #1
 81006b0:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale  245, 500, 2000
  imu->gyro_settings.scale = 245;
 81006b2:	687b      	ldr	r3, [r7, #4]
 81006b4:	22f5      	movs	r2, #245	; 0xf5
 81006b6:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 81006b8:	687b      	ldr	r3, [r7, #4]
 81006ba:	2206      	movs	r2, #6
 81006bc:	711a      	strb	r2, [r3, #4]
  // set cutoff frequency // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 81006be:	687b      	ldr	r3, [r7, #4]
 81006c0:	2200      	movs	r2, #0
 81006c2:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 81006c4:	687b      	ldr	r3, [r7, #4]
 81006c6:	2200      	movs	r2, #0
 81006c8:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 81006ca:	687b      	ldr	r3, [r7, #4]
 81006cc:	2200      	movs	r2, #0
 81006ce:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 81006d0:	687b      	ldr	r3, [r7, #4]
 81006d2:	2200      	movs	r2, #0
 81006d4:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 81006d6:	687b      	ldr	r3, [r7, #4]
 81006d8:	2200      	movs	r2, #0
 81006da:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 81006dc:	687b      	ldr	r3, [r7, #4]
 81006de:	2200      	movs	r2, #0
 81006e0:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 81006e2:	687b      	ldr	r3, [r7, #4]
 81006e4:	2200      	movs	r2, #0
 81006e6:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 81006e8:	687b      	ldr	r3, [r7, #4]
 81006ea:	2200      	movs	r2, #0
 81006ec:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 81006ee:	687b      	ldr	r3, [r7, #4]
 81006f0:	2201      	movs	r2, #1
 81006f2:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	2201      	movs	r2, #1
 81006f8:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 81006fa:	687b      	ldr	r3, [r7, #4]
 81006fc:	2201      	movs	r2, #1
 81006fe:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8100700:	687b      	ldr	r3, [r7, #4]
 8100702:	2201      	movs	r2, #1
 8100704:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8100706:	687b      	ldr	r3, [r7, #4]
 8100708:	2201      	movs	r2, #1
 810070a:	75da      	strb	r2, [r3, #23]

  // 2,4, 8,16
  imu->accel_settings.scale = 2;
 810070c:	687b      	ldr	r3, [r7, #4]
 810070e:	2202      	movs	r2, #2
 8100710:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8100712:	687b      	ldr	r3, [r7, #4]
 8100714:	2206      	movs	r2, #6
 8100716:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8100718:	687b      	ldr	r3, [r7, #4]
 810071a:	22ff      	movs	r2, #255	; 0xff
 810071c:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 810071e:	687b      	ldr	r3, [r7, #4]
 8100720:	2200      	movs	r2, #0
 8100722:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8100724:	687b      	ldr	r3, [r7, #4]
 8100726:	2200      	movs	r2, #0
 8100728:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 810072a:	687b      	ldr	r3, [r7, #4]
 810072c:	2201      	movs	r2, #1
 810072e:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8100730:	687b      	ldr	r3, [r7, #4]
 8100732:	2204      	movs	r2, #4
 8100734:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8100736:	687b      	ldr	r3, [r7, #4]
 8100738:	2207      	movs	r2, #7
 810073a:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 810073c:	687b      	ldr	r3, [r7, #4]
 810073e:	2200      	movs	r2, #0
 8100740:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8100742:	687b      	ldr	r3, [r7, #4]
 8100744:	2203      	movs	r2, #3
 8100746:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	2203      	movs	r2, #3
 810074c:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8100750:	687b      	ldr	r3, [r7, #4]
 8100752:	2200      	movs	r2, #0
 8100754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 8100758:	687b      	ldr	r3, [r7, #4]
 810075a:	2200      	movs	r2, #0
 810075c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  imu->temp_settings.enabled = 1;
 8100760:	687b      	ldr	r3, [r7, #4]
 8100762:	2201      	movs	r2, #1
 8100764:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
//      gBiasRaw[i] = 0;
//      aBiasRaw[i] = 0;
//      mBiasRaw[i] = 0;
//    }

}
 8100768:	bf00      	nop
 810076a:	370c      	adds	r7, #12
 810076c:	46bd      	mov	sp, r7
 810076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100772:	4770      	bx	lr

08100774 <setup>:

uint16_t setup(LSM9DS1Handle* imu)
{
 8100774:	b580      	push	{r7, lr}
 8100776:	b084      	sub	sp, #16
 8100778:	af00      	add	r7, sp, #0
 810077a:	6078      	str	r0, [r7, #4]

  // initialise the sensors
  init(imu);
 810077c:	6878      	ldr	r0, [r7, #4]
 810077e:	f7ff ff88 	bl	8100692 <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8100782:	6878      	ldr	r0, [r7, #4]
 8100784:	f000 f9ea 	bl	8100b5c <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 8100788:	6878      	ldr	r0, [r7, #4]
 810078a:	f000 fb5f 	bl	8100e4c <calcGyroResolution>
  calcAccResoltuion(imu);
 810078e:	6878      	ldr	r0, [r7, #4]
 8100790:	f000 fb8a 	bl	8100ea8 <calcAccResoltuion>
  calcMagResolution(imu);
 8100794:	6878      	ldr	r0, [r7, #4]
 8100796:	f000 fbd3 	bl	8100f40 <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check = CheckSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 810079a:	210f      	movs	r1, #15
 810079c:	206b      	movs	r0, #107	; 0x6b
 810079e:	f7ff ff63 	bl	8100668 <CheckSensorID>
 81007a2:	4603      	mov	r3, r0
 81007a4:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 81007a6:	210f      	movs	r1, #15
 81007a8:	201e      	movs	r0, #30
 81007aa:	f7ff ff5d 	bl	8100668 <CheckSensorID>
 81007ae:	4603      	mov	r3, r0
 81007b0:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 81007b2:	7bfb      	ldrb	r3, [r7, #15]
 81007b4:	021b      	lsls	r3, r3, #8
 81007b6:	b21a      	sxth	r2, r3
 81007b8:	7bbb      	ldrb	r3, [r7, #14]
 81007ba:	b21b      	sxth	r3, r3
 81007bc:	4313      	orrs	r3, r2
 81007be:	b21b      	sxth	r3, r3
 81007c0:	81bb      	strh	r3, [r7, #12]

  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 81007c2:	89bb      	ldrh	r3, [r7, #12]
 81007c4:	f646 023d 	movw	r2, #26685	; 0x683d
 81007c8:	4293      	cmp	r3, r2
 81007ca:	d001      	beq.n	81007d0 <setup+0x5c>
  {
          return 0;
 81007cc:	2300      	movs	r3, #0
 81007ce:	e009      	b.n	81007e4 <setup+0x70>
   }

  // initialise gyro
  initGyro(imu);
 81007d0:	6878      	ldr	r0, [r7, #4]
 81007d2:	f000 f80b 	bl	81007ec <initGyro>
  // initialise accel
  initAccel(imu);
 81007d6:	6878      	ldr	r0, [r7, #4]
 81007d8:	f000 f8ad 	bl	8100936 <initAccel>
  // init Mag
 initMag(imu);
 81007dc:	6878      	ldr	r0, [r7, #4]
 81007de:	f000 f931 	bl	8100a44 <initMag>

  return imu_response;
 81007e2:	89bb      	ldrh	r3, [r7, #12]


}
 81007e4:	4618      	mov	r0, r3
 81007e6:	3710      	adds	r7, #16
 81007e8:	46bd      	mov	sp, r7
 81007ea:	bd80      	pop	{r7, pc}

081007ec <initGyro>:



void initGyro(LSM9DS1Handle* imu)
{
 81007ec:	b580      	push	{r7, lr}
 81007ee:	b084      	sub	sp, #16
 81007f0:	af00      	add	r7, sp, #0
 81007f2:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 81007f4:	2300      	movs	r3, #0
 81007f6:	73fb      	strb	r3, [r7, #15]
  // ONly set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	781b      	ldrb	r3, [r3, #0]
 81007fc:	2b01      	cmp	r3, #1
 81007fe:	d103      	bne.n	8100808 <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 8100800:	687b      	ldr	r3, [r7, #4]
 8100802:	791b      	ldrb	r3, [r3, #4]
 8100804:	015b      	lsls	r3, r3, #5
 8100806:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 8100808:	687b      	ldr	r3, [r7, #4]
 810080a:	885b      	ldrh	r3, [r3, #2]
 810080c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100810:	d003      	beq.n	810081a <initGyro+0x2e>
 8100812:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8100816:	d005      	beq.n	8100824 <initGyro+0x38>
 8100818:	e009      	b.n	810082e <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 810081a:	7bfb      	ldrb	r3, [r7, #15]
 810081c:	f043 0308 	orr.w	r3, r3, #8
 8100820:	73fb      	strb	r3, [r7, #15]
      break;
 8100822:	e004      	b.n	810082e <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 8100824:	7bfb      	ldrb	r3, [r7, #15]
 8100826:	f043 0318 	orr.w	r3, r3, #24
 810082a:	73fb      	strb	r3, [r7, #15]
      break;
 810082c:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 810082e:	687b      	ldr	r3, [r7, #4]
 8100830:	795b      	ldrb	r3, [r3, #5]
 8100832:	b25b      	sxtb	r3, r3
 8100834:	f003 0303 	and.w	r3, r3, #3
 8100838:	b25a      	sxtb	r2, r3
 810083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810083e:	4313      	orrs	r3, r2
 8100840:	b25b      	sxtb	r3, r3
 8100842:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 8100844:	7bfb      	ldrb	r3, [r7, #15]
 8100846:	461a      	mov	r2, r3
 8100848:	2110      	movs	r1, #16
 810084a:	206b      	movs	r0, #107	; 0x6b
 810084c:	f000 fc14 	bl	8101078 <WriteByte>

   // reset tempValue
   tempRegValue = 0;
 8100850:	2300      	movs	r3, #0
 8100852:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 8100854:	7bfb      	ldrb	r3, [r7, #15]
 8100856:	461a      	mov	r2, r3
 8100858:	2111      	movs	r1, #17
 810085a:	206b      	movs	r0, #107	; 0x6b
 810085c:	f000 fc0c 	bl	8101078 <WriteByte>

   tempRegValue = 0;
 8100860:	2300      	movs	r3, #0
 8100862:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 8100864:	687b      	ldr	r3, [r7, #4]
 8100866:	799b      	ldrb	r3, [r3, #6]
 8100868:	2b00      	cmp	r3, #0
 810086a:	d001      	beq.n	8100870 <initGyro+0x84>
 810086c:	2380      	movs	r3, #128	; 0x80
 810086e:	e000      	b.n	8100872 <initGyro+0x86>
 8100870:	2300      	movs	r3, #0
 8100872:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 8100874:	687b      	ldr	r3, [r7, #4]
 8100876:	79db      	ldrb	r3, [r3, #7]
 8100878:	2b01      	cmp	r3, #1
 810087a:	d10a      	bne.n	8100892 <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	7a1b      	ldrb	r3, [r3, #8]
 8100880:	f003 030f 	and.w	r3, r3, #15
 8100884:	b2da      	uxtb	r2, r3
 8100886:	7bfb      	ldrb	r3, [r7, #15]
 8100888:	4313      	orrs	r3, r2
 810088a:	b2db      	uxtb	r3, r3
 810088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100890:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 8100892:	7bfb      	ldrb	r3, [r7, #15]
 8100894:	461a      	mov	r2, r3
 8100896:	2112      	movs	r1, #18
 8100898:	206b      	movs	r0, #107	; 0x6b
 810089a:	f000 fbed 	bl	8101078 <WriteByte>


   tempRegValue = 0;
 810089e:	2300      	movs	r3, #0
 81008a0:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 81008a2:	687b      	ldr	r3, [r7, #4]
 81008a4:	7bdb      	ldrb	r3, [r3, #15]
 81008a6:	2b00      	cmp	r3, #0
 81008a8:	d003      	beq.n	81008b2 <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 81008aa:	7bfb      	ldrb	r3, [r7, #15]
 81008ac:	f043 0320 	orr.w	r3, r3, #32
 81008b0:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 81008b2:	687b      	ldr	r3, [r7, #4]
 81008b4:	7b9b      	ldrb	r3, [r3, #14]
 81008b6:	2b00      	cmp	r3, #0
 81008b8:	d003      	beq.n	81008c2 <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 81008ba:	7bfb      	ldrb	r3, [r7, #15]
 81008bc:	f043 0310 	orr.w	r3, r3, #16
 81008c0:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 81008c2:	687b      	ldr	r3, [r7, #4]
 81008c4:	7b5b      	ldrb	r3, [r3, #13]
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d003      	beq.n	81008d2 <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 81008ca:	7bfb      	ldrb	r3, [r7, #15]
 81008cc:	f043 0308 	orr.w	r3, r3, #8
 81008d0:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 81008d2:	687b      	ldr	r3, [r7, #4]
 81008d4:	7c1b      	ldrb	r3, [r3, #16]
 81008d6:	2b00      	cmp	r3, #0
 81008d8:	d003      	beq.n	81008e2 <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 81008da:	7bfb      	ldrb	r3, [r7, #15]
 81008dc:	f043 0302 	orr.w	r3, r3, #2
 81008e0:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 81008e2:	7bfb      	ldrb	r3, [r7, #15]
 81008e4:	461a      	mov	r2, r3
 81008e6:	211e      	movs	r1, #30
 81008e8:	206b      	movs	r0, #107	; 0x6b
 81008ea:	f000 fbc5 	bl	8101078 <WriteByte>

   tempRegValue = 0;
 81008ee:	2300      	movs	r3, #0
 81008f0:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 81008f2:	687b      	ldr	r3, [r7, #4]
 81008f4:	7a5b      	ldrb	r3, [r3, #9]
 81008f6:	2b00      	cmp	r3, #0
 81008f8:	d003      	beq.n	8100902 <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 81008fa:	7bfb      	ldrb	r3, [r7, #15]
 81008fc:	f043 0320 	orr.w	r3, r3, #32
 8100900:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 8100902:	687b      	ldr	r3, [r7, #4]
 8100904:	7a9b      	ldrb	r3, [r3, #10]
 8100906:	2b00      	cmp	r3, #0
 8100908:	d003      	beq.n	8100912 <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 810090a:	7bfb      	ldrb	r3, [r7, #15]
 810090c:	f043 0310 	orr.w	r3, r3, #16
 8100910:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 8100912:	687b      	ldr	r3, [r7, #4]
 8100914:	7adb      	ldrb	r3, [r3, #11]
 8100916:	2b00      	cmp	r3, #0
 8100918:	d003      	beq.n	8100922 <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 810091a:	7bfb      	ldrb	r3, [r7, #15]
 810091c:	f043 0308 	orr.w	r3, r3, #8
 8100920:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 8100922:	7bfb      	ldrb	r3, [r7, #15]
 8100924:	461a      	mov	r2, r3
 8100926:	2113      	movs	r1, #19
 8100928:	206b      	movs	r0, #107	; 0x6b
 810092a:	f000 fba5 	bl	8101078 <WriteByte>




}
 810092e:	bf00      	nop
 8100930:	3710      	adds	r7, #16
 8100932:	46bd      	mov	sp, r7
 8100934:	bd80      	pop	{r7, pc}

08100936 <initAccel>:

void initAccel(LSM9DS1Handle* imu)
{
 8100936:	b580      	push	{r7, lr}
 8100938:	b084      	sub	sp, #16
 810093a:	af00      	add	r7, sp, #0
 810093c:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 810093e:	2300      	movs	r3, #0
 8100940:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 8100942:	687b      	ldr	r3, [r7, #4]
 8100944:	7ddb      	ldrb	r3, [r3, #23]
 8100946:	2b00      	cmp	r3, #0
 8100948:	d003      	beq.n	8100952 <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 810094a:	7bfb      	ldrb	r3, [r7, #15]
 810094c:	f043 0320 	orr.w	r3, r3, #32
 8100950:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 8100952:	687b      	ldr	r3, [r7, #4]
 8100954:	7d9b      	ldrb	r3, [r3, #22]
 8100956:	2b00      	cmp	r3, #0
 8100958:	d003      	beq.n	8100962 <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 810095a:	7bfb      	ldrb	r3, [r7, #15]
 810095c:	f043 0310 	orr.w	r3, r3, #16
 8100960:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 8100962:	687b      	ldr	r3, [r7, #4]
 8100964:	7d5b      	ldrb	r3, [r3, #21]
 8100966:	2b00      	cmp	r3, #0
 8100968:	d003      	beq.n	8100972 <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 810096a:	7bfb      	ldrb	r3, [r7, #15]
 810096c:	f043 0308 	orr.w	r3, r3, #8
 8100970:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 8100972:	7bfb      	ldrb	r3, [r7, #15]
 8100974:	461a      	mov	r2, r3
 8100976:	211f      	movs	r1, #31
 8100978:	206b      	movs	r0, #107	; 0x6b
 810097a:	f000 fb7d 	bl	8101078 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 810097e:	2300      	movs	r3, #0
 8100980:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 8100982:	687b      	ldr	r3, [r7, #4]
 8100984:	7c9b      	ldrb	r3, [r3, #18]
 8100986:	2b00      	cmp	r3, #0
 8100988:	d008      	beq.n	810099c <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 810098a:	687b      	ldr	r3, [r7, #4]
 810098c:	7d1b      	ldrb	r3, [r3, #20]
 810098e:	015b      	lsls	r3, r3, #5
 8100990:	b25a      	sxtb	r2, r3
 8100992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100996:	4313      	orrs	r3, r2
 8100998:	b25b      	sxtb	r3, r3
 810099a:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 810099c:	687b      	ldr	r3, [r7, #4]
 810099e:	7cdb      	ldrb	r3, [r3, #19]
 81009a0:	2b10      	cmp	r3, #16
 81009a2:	d010      	beq.n	81009c6 <initAccel+0x90>
 81009a4:	2b10      	cmp	r3, #16
 81009a6:	dc13      	bgt.n	81009d0 <initAccel+0x9a>
 81009a8:	2b04      	cmp	r3, #4
 81009aa:	d002      	beq.n	81009b2 <initAccel+0x7c>
 81009ac:	2b08      	cmp	r3, #8
 81009ae:	d005      	beq.n	81009bc <initAccel+0x86>
 81009b0:	e00e      	b.n	81009d0 <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 81009b2:	7bfb      	ldrb	r3, [r7, #15]
 81009b4:	f043 0310 	orr.w	r3, r3, #16
 81009b8:	73fb      	strb	r3, [r7, #15]
      break;
 81009ba:	e009      	b.n	81009d0 <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 81009bc:	7bfb      	ldrb	r3, [r7, #15]
 81009be:	f043 0318 	orr.w	r3, r3, #24
 81009c2:	73fb      	strb	r3, [r7, #15]
      break;
 81009c4:	e004      	b.n	81009d0 <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 81009c6:	7bfb      	ldrb	r3, [r7, #15]
 81009c8:	f043 0308 	orr.w	r3, r3, #8
 81009cc:	73fb      	strb	r3, [r7, #15]
      break;
 81009ce:	bf00      	nop

  }

  if(imu->accel_settings.bandwidth >= 0)
 81009d0:	687b      	ldr	r3, [r7, #4]
 81009d2:	f993 3018 	ldrsb.w	r3, [r3, #24]
 81009d6:	2b00      	cmp	r3, #0
 81009d8:	db0e      	blt.n	81009f8 <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 81009da:	7bfb      	ldrb	r3, [r7, #15]
 81009dc:	f043 0304 	orr.w	r3, r3, #4
 81009e0:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 81009e2:	687b      	ldr	r3, [r7, #4]
 81009e4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 81009e8:	f003 0303 	and.w	r3, r3, #3
 81009ec:	b25a      	sxtb	r2, r3
 81009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81009f2:	4313      	orrs	r3, r2
 81009f4:	b25b      	sxtb	r3, r3
 81009f6:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 81009f8:	7bfb      	ldrb	r3, [r7, #15]
 81009fa:	461a      	mov	r2, r3
 81009fc:	2120      	movs	r1, #32
 81009fe:	206b      	movs	r0, #107	; 0x6b
 8100a00:	f000 fb3a 	bl	8101078 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 8100a04:	2300      	movs	r3, #0
 8100a06:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 8100a08:	687b      	ldr	r3, [r7, #4]
 8100a0a:	7e5b      	ldrb	r3, [r3, #25]
 8100a0c:	2b01      	cmp	r3, #1
 8100a0e:	d10f      	bne.n	8100a30 <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 8100a10:	7bfb      	ldrb	r3, [r7, #15]
 8100a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100a16:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 8100a18:	687b      	ldr	r3, [r7, #4]
 8100a1a:	7e9b      	ldrb	r3, [r3, #26]
 8100a1c:	015b      	lsls	r3, r3, #5
 8100a1e:	b25b      	sxtb	r3, r3
 8100a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8100a24:	b25a      	sxtb	r2, r3
 8100a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100a2a:	4313      	orrs	r3, r2
 8100a2c:	b25b      	sxtb	r3, r3
 8100a2e:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 8100a30:	7bfb      	ldrb	r3, [r7, #15]
 8100a32:	461a      	mov	r2, r3
 8100a34:	2121      	movs	r1, #33	; 0x21
 8100a36:	206b      	movs	r0, #107	; 0x6b
 8100a38:	f000 fb1e 	bl	8101078 <WriteByte>

}
 8100a3c:	bf00      	nop
 8100a3e:	3710      	adds	r7, #16
 8100a40:	46bd      	mov	sp, r7
 8100a42:	bd80      	pop	{r7, pc}

08100a44 <initMag>:



void initMag(LSM9DS1Handle* imu)
{
 8100a44:	b580      	push	{r7, lr}
 8100a46:	b084      	sub	sp, #16
 8100a48:	af00      	add	r7, sp, #0
 8100a4a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 8100a4c:	2300      	movs	r3, #0
 8100a4e:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 8100a50:	687b      	ldr	r3, [r7, #4]
 8100a52:	7f9b      	ldrb	r3, [r3, #30]
 8100a54:	2b01      	cmp	r3, #1
 8100a56:	d103      	bne.n	8100a60 <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 8100a58:	7bfb      	ldrb	r3, [r7, #15]
 8100a5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8100a5e:	73fb      	strb	r3, [r7, #15]
  }
  // Make Operative mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 8100a60:	687b      	ldr	r3, [r7, #4]
 8100a62:	7fdb      	ldrb	r3, [r3, #31]
 8100a64:	015b      	lsls	r3, r3, #5
 8100a66:	b25b      	sxtb	r3, r3
 8100a68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8100a6c:	b25a      	sxtb	r2, r3
 8100a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100a72:	4313      	orrs	r3, r2
 8100a74:	b25b      	sxtb	r3, r3
 8100a76:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 8100a78:	687b      	ldr	r3, [r7, #4]
 8100a7a:	7f5b      	ldrb	r3, [r3, #29]
 8100a7c:	009b      	lsls	r3, r3, #2
 8100a7e:	b25b      	sxtb	r3, r3
 8100a80:	f003 031c 	and.w	r3, r3, #28
 8100a84:	b25a      	sxtb	r2, r3
 8100a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100a8a:	4313      	orrs	r3, r2
 8100a8c:	b25b      	sxtb	r3, r3
 8100a8e:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 8100a90:	7bfb      	ldrb	r3, [r7, #15]
 8100a92:	461a      	mov	r2, r3
 8100a94:	2120      	movs	r1, #32
 8100a96:	201e      	movs	r0, #30
 8100a98:	f000 faee 	bl	8101078 <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 8100a9c:	2300      	movs	r3, #0
 8100a9e:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	7f1b      	ldrb	r3, [r3, #28]
 8100aa4:	2b10      	cmp	r3, #16
 8100aa6:	d010      	beq.n	8100aca <initMag+0x86>
 8100aa8:	2b10      	cmp	r3, #16
 8100aaa:	dc13      	bgt.n	8100ad4 <initMag+0x90>
 8100aac:	2b08      	cmp	r3, #8
 8100aae:	d002      	beq.n	8100ab6 <initMag+0x72>
 8100ab0:	2b0c      	cmp	r3, #12
 8100ab2:	d005      	beq.n	8100ac0 <initMag+0x7c>
 8100ab4:	e00e      	b.n	8100ad4 <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 8100ab6:	7bfb      	ldrb	r3, [r7, #15]
 8100ab8:	f043 0320 	orr.w	r3, r3, #32
 8100abc:	73fb      	strb	r3, [r7, #15]
      break;
 8100abe:	e009      	b.n	8100ad4 <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 8100ac0:	7bfb      	ldrb	r3, [r7, #15]
 8100ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8100ac8:	e004      	b.n	8100ad4 <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 8100aca:	7bfb      	ldrb	r3, [r7, #15]
 8100acc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8100ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8100ad2:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 8100ad4:	7bfb      	ldrb	r3, [r7, #15]
 8100ad6:	461a      	mov	r2, r3
 8100ad8:	2121      	movs	r1, #33	; 0x21
 8100ada:	201e      	movs	r0, #30
 8100adc:	f000 facc 	bl	8101078 <WriteByte>

   tempRegValue = 0;
 8100ae0:	2300      	movs	r3, #0
 8100ae2:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 8100ae4:	687b      	ldr	r3, [r7, #4]
 8100ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8100aea:	2b01      	cmp	r3, #1
 8100aec:	d103      	bne.n	8100af6 <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 8100aee:	7bfb      	ldrb	r3, [r7, #15]
 8100af0:	f043 0320 	orr.w	r3, r3, #32
 8100af4:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 8100af6:	687b      	ldr	r3, [r7, #4]
 8100af8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8100afc:	b25b      	sxtb	r3, r3
 8100afe:	f003 0303 	and.w	r3, r3, #3
 8100b02:	b25a      	sxtb	r2, r3
 8100b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100b08:	4313      	orrs	r3, r2
 8100b0a:	b25b      	sxtb	r3, r3
 8100b0c:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 8100b0e:	7bfb      	ldrb	r3, [r7, #15]
 8100b10:	461a      	mov	r2, r3
 8100b12:	2122      	movs	r1, #34	; 0x22
 8100b14:	201e      	movs	r0, #30
 8100b16:	f000 faaf 	bl	8101078 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 8100b1a:	2300      	movs	r3, #0
 8100b1c:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 8100b1e:	687b      	ldr	r3, [r7, #4]
 8100b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8100b24:	009b      	lsls	r3, r3, #2
 8100b26:	b25b      	sxtb	r3, r3
 8100b28:	f003 030c 	and.w	r3, r3, #12
 8100b2c:	b25a      	sxtb	r2, r3
 8100b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100b32:	4313      	orrs	r3, r2
 8100b34:	b25b      	sxtb	r3, r3
 8100b36:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 8100b38:	7bfb      	ldrb	r3, [r7, #15]
 8100b3a:	461a      	mov	r2, r3
 8100b3c:	2123      	movs	r1, #35	; 0x23
 8100b3e:	201e      	movs	r0, #30
 8100b40:	f000 fa9a 	bl	8101078 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 8100b44:	2300      	movs	r3, #0
 8100b46:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 8100b48:	7bfb      	ldrb	r3, [r7, #15]
 8100b4a:	461a      	mov	r2, r3
 8100b4c:	2124      	movs	r1, #36	; 0x24
 8100b4e:	201e      	movs	r0, #30
 8100b50:	f000 fa92 	bl	8101078 <WriteByte>


}
 8100b54:	bf00      	nop
 8100b56:	3710      	adds	r7, #16
 8100b58:	46bd      	mov	sp, r7
 8100b5a:	bd80      	pop	{r7, pc}

08100b5c <clampScales>:


void clampScales(LSM9DS1Handle* imu)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	b083      	sub	sp, #12
 8100b60:	af00      	add	r7, sp, #0
 8100b62:	6078      	str	r0, [r7, #4]

  // clamp gyro scales
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 8100b64:	687b      	ldr	r3, [r7, #4]
 8100b66:	885b      	ldrh	r3, [r3, #2]
 8100b68:	2bf5      	cmp	r3, #245	; 0xf5
 8100b6a:	d00c      	beq.n	8100b86 <clampScales+0x2a>
 8100b6c:	687b      	ldr	r3, [r7, #4]
 8100b6e:	885b      	ldrh	r3, [r3, #2]
 8100b70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100b74:	d007      	beq.n	8100b86 <clampScales+0x2a>
 8100b76:	687b      	ldr	r3, [r7, #4]
 8100b78:	885b      	ldrh	r3, [r3, #2]
 8100b7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8100b7e:	d002      	beq.n	8100b86 <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 8100b80:	687b      	ldr	r3, [r7, #4]
 8100b82:	22f5      	movs	r2, #245	; 0xf5
 8100b84:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 8100b86:	687b      	ldr	r3, [r7, #4]
 8100b88:	7cdb      	ldrb	r3, [r3, #19]
 8100b8a:	2b02      	cmp	r3, #2
 8100b8c:	d00e      	beq.n	8100bac <clampScales+0x50>
 8100b8e:	687b      	ldr	r3, [r7, #4]
 8100b90:	7cdb      	ldrb	r3, [r3, #19]
 8100b92:	2b04      	cmp	r3, #4
 8100b94:	d00a      	beq.n	8100bac <clampScales+0x50>
 8100b96:	687b      	ldr	r3, [r7, #4]
 8100b98:	7cdb      	ldrb	r3, [r3, #19]
 8100b9a:	2b08      	cmp	r3, #8
 8100b9c:	d006      	beq.n	8100bac <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 8100b9e:	687b      	ldr	r3, [r7, #4]
 8100ba0:	7cdb      	ldrb	r3, [r3, #19]
 8100ba2:	2b10      	cmp	r3, #16
 8100ba4:	d002      	beq.n	8100bac <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 8100ba6:	687b      	ldr	r3, [r7, #4]
 8100ba8:	22f5      	movs	r2, #245	; 0xf5
 8100baa:	74da      	strb	r2, [r3, #19]
  }


  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8100bac:	687b      	ldr	r3, [r7, #4]
 8100bae:	7f1b      	ldrb	r3, [r3, #28]
 8100bb0:	2b04      	cmp	r3, #4
 8100bb2:	d00e      	beq.n	8100bd2 <clampScales+0x76>
 8100bb4:	687b      	ldr	r3, [r7, #4]
 8100bb6:	7f1b      	ldrb	r3, [r3, #28]
 8100bb8:	2b08      	cmp	r3, #8
 8100bba:	d00a      	beq.n	8100bd2 <clampScales+0x76>
 8100bbc:	687b      	ldr	r3, [r7, #4]
 8100bbe:	7f1b      	ldrb	r3, [r3, #28]
 8100bc0:	2b0c      	cmp	r3, #12
 8100bc2:	d006      	beq.n	8100bd2 <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 8100bc4:	687b      	ldr	r3, [r7, #4]
 8100bc6:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8100bc8:	2b10      	cmp	r3, #16
 8100bca:	d002      	beq.n	8100bd2 <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 8100bcc:	687b      	ldr	r3, [r7, #4]
 8100bce:	2204      	movs	r2, #4
 8100bd0:	771a      	strb	r2, [r3, #28]
  }

}
 8100bd2:	bf00      	nop
 8100bd4:	370c      	adds	r7, #12
 8100bd6:	46bd      	mov	sp, r7
 8100bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bdc:	4770      	bx	lr
	...

08100be0 <calcGyro>:

float calcGyro(float gyro)
{
 8100be0:	b480      	push	{r7}
 8100be2:	b083      	sub	sp, #12
 8100be4:	af00      	add	r7, sp, #0
 8100be6:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 8100bea:	4b07      	ldr	r3, [pc, #28]	; (8100c08 <calcGyro+0x28>)
 8100bec:	ed93 7a00 	vldr	s14, [r3]
 8100bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8100bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8100bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8100bfc:	370c      	adds	r7, #12
 8100bfe:	46bd      	mov	sp, r7
 8100c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c04:	4770      	bx	lr
 8100c06:	bf00      	nop
 8100c08:	10000170 	.word	0x10000170

08100c0c <calcMag>:
float calcMag(float mag)
{
 8100c0c:	b480      	push	{r7}
 8100c0e:	b083      	sub	sp, #12
 8100c10:	af00      	add	r7, sp, #0
 8100c12:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 8100c16:	4b07      	ldr	r3, [pc, #28]	; (8100c34 <calcMag+0x28>)
 8100c18:	ed93 7a00 	vldr	s14, [r3]
 8100c1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8100c20:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8100c24:	eeb0 0a67 	vmov.f32	s0, s15
 8100c28:	370c      	adds	r7, #12
 8100c2a:	46bd      	mov	sp, r7
 8100c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c30:	4770      	bx	lr
 8100c32:	bf00      	nop
 8100c34:	1000016c 	.word	0x1000016c

08100c38 <calcAccel>:
float calcAccel(float accel)
{
 8100c38:	b480      	push	{r7}
 8100c3a:	b083      	sub	sp, #12
 8100c3c:	af00      	add	r7, sp, #0
 8100c3e:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 8100c42:	4b07      	ldr	r3, [pc, #28]	; (8100c60 <calcAccel+0x28>)
 8100c44:	ed93 7a00 	vldr	s14, [r3]
 8100c48:	edd7 7a01 	vldr	s15, [r7, #4]
 8100c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8100c50:	eeb0 0a67 	vmov.f32	s0, s15
 8100c54:	370c      	adds	r7, #12
 8100c56:	46bd      	mov	sp, r7
 8100c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5c:	4770      	bx	lr
 8100c5e:	bf00      	nop
 8100c60:	10000168 	.word	0x10000168

08100c64 <readGyro>:

void readGyro(LSM9DS1Handle* imu)
{
 8100c64:	b580      	push	{r7, lr}
 8100c66:	b086      	sub	sp, #24
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	6078      	str	r0, [r7, #4]

  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 8100c6c:	f107 020c 	add.w	r2, r7, #12
 8100c70:	2306      	movs	r3, #6
 8100c72:	2118      	movs	r1, #24
 8100c74:	206b      	movs	r0, #107	; 0x6b
 8100c76:	f000 f9d7 	bl	8101028 <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 8100c7a:	7b7b      	ldrb	r3, [r7, #13]
 8100c7c:	021b      	lsls	r3, r3, #8
 8100c7e:	b21a      	sxth	r2, r3
 8100c80:	7b3b      	ldrb	r3, [r7, #12]
 8100c82:	b21b      	sxth	r3, r3
 8100c84:	4313      	orrs	r3, r2
 8100c86:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8100c88:	7bfb      	ldrb	r3, [r7, #15]
 8100c8a:	021b      	lsls	r3, r3, #8
 8100c8c:	b21a      	sxth	r2, r3
 8100c8e:	7bbb      	ldrb	r3, [r7, #14]
 8100c90:	b21b      	sxth	r3, r3
 8100c92:	4313      	orrs	r3, r2
 8100c94:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8100c96:	7c7b      	ldrb	r3, [r7, #17]
 8100c98:	021b      	lsls	r3, r3, #8
 8100c9a:	b21a      	sxth	r2, r3
 8100c9c:	7c3b      	ldrb	r3, [r7, #16]
 8100c9e:	b21b      	sxth	r3, r3
 8100ca0:	4313      	orrs	r3, r2
 8100ca2:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 8100ca4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8100ca8:	ee07 3a90 	vmov	s15, r3
 8100cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8100cb4:	f7ff ff94 	bl	8100be0 <calcGyro>
 8100cb8:	eef0 7a40 	vmov.f32	s15, s0
 8100cbc:	687b      	ldr	r3, [r7, #4]
 8100cbe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 8100cc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8100cc6:	ee07 3a90 	vmov	s15, r3
 8100cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100cce:	eeb0 0a67 	vmov.f32	s0, s15
 8100cd2:	f7ff ff85 	bl	8100be0 <calcGyro>
 8100cd6:	eef0 7a40 	vmov.f32	s15, s0
 8100cda:	687b      	ldr	r3, [r7, #4]
 8100cdc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 8100ce0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8100ce4:	ee07 3a90 	vmov	s15, r3
 8100ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100cec:	eeb0 0a67 	vmov.f32	s0, s15
 8100cf0:	f7ff ff76 	bl	8100be0 <calcGyro>
 8100cf4:	eef0 7a40 	vmov.f32	s15, s0
 8100cf8:	687b      	ldr	r3, [r7, #4]
 8100cfa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44


}
 8100cfe:	bf00      	nop
 8100d00:	3718      	adds	r7, #24
 8100d02:	46bd      	mov	sp, r7
 8100d04:	bd80      	pop	{r7, pc}

08100d06 <readMag>:
void readMag(LSM9DS1Handle* imu)
{
 8100d06:	b580      	push	{r7, lr}
 8100d08:	b086      	sub	sp, #24
 8100d0a:	af00      	add	r7, sp, #0
 8100d0c:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 8100d0e:	f107 020c 	add.w	r2, r7, #12
 8100d12:	2306      	movs	r3, #6
 8100d14:	2128      	movs	r1, #40	; 0x28
 8100d16:	201e      	movs	r0, #30
 8100d18:	f000 f986 	bl	8101028 <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 8100d1c:	7b7b      	ldrb	r3, [r7, #13]
 8100d1e:	021b      	lsls	r3, r3, #8
 8100d20:	b21a      	sxth	r2, r3
 8100d22:	7b3b      	ldrb	r3, [r7, #12]
 8100d24:	b21b      	sxth	r3, r3
 8100d26:	4313      	orrs	r3, r2
 8100d28:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 8100d2a:	7bfb      	ldrb	r3, [r7, #15]
 8100d2c:	021b      	lsls	r3, r3, #8
 8100d2e:	b21a      	sxth	r2, r3
 8100d30:	7bbb      	ldrb	r3, [r7, #14]
 8100d32:	b21b      	sxth	r3, r3
 8100d34:	4313      	orrs	r3, r2
 8100d36:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 8100d38:	7c7b      	ldrb	r3, [r7, #17]
 8100d3a:	021b      	lsls	r3, r3, #8
 8100d3c:	b21a      	sxth	r2, r3
 8100d3e:	7c3b      	ldrb	r3, [r7, #16]
 8100d40:	b21b      	sxth	r3, r3
 8100d42:	4313      	orrs	r3, r2
 8100d44:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 8100d46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8100d4a:	ee07 3a90 	vmov	s15, r3
 8100d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100d52:	eeb0 0a67 	vmov.f32	s0, s15
 8100d56:	f7ff ff59 	bl	8100c0c <calcMag>
 8100d5a:	eef0 7a40 	vmov.f32	s15, s0
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 8100d64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8100d68:	ee07 3a90 	vmov	s15, r3
 8100d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100d70:	eeb0 0a67 	vmov.f32	s0, s15
 8100d74:	f7ff ff4a 	bl	8100c0c <calcMag>
 8100d78:	eef0 7a40 	vmov.f32	s15, s0
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 8100d82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8100d86:	ee07 3a90 	vmov	s15, r3
 8100d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8100d92:	f7ff ff3b 	bl	8100c0c <calcMag>
 8100d96:	eef0 7a40 	vmov.f32	s15, s0
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 8100da0:	bf00      	nop
 8100da2:	3718      	adds	r7, #24
 8100da4:	46bd      	mov	sp, r7
 8100da6:	bd80      	pop	{r7, pc}

08100da8 <readAccel>:
void readAccel(LSM9DS1Handle* imu)
{
 8100da8:	b580      	push	{r7, lr}
 8100daa:	b086      	sub	sp, #24
 8100dac:	af00      	add	r7, sp, #0
 8100dae:	6078      	str	r0, [r7, #4]

  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 8100db0:	f107 020c 	add.w	r2, r7, #12
 8100db4:	2306      	movs	r3, #6
 8100db6:	2128      	movs	r1, #40	; 0x28
 8100db8:	206b      	movs	r0, #107	; 0x6b
 8100dba:	f000 f935 	bl	8101028 <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 8100dbe:	7b7b      	ldrb	r3, [r7, #13]
 8100dc0:	021b      	lsls	r3, r3, #8
 8100dc2:	b21a      	sxth	r2, r3
 8100dc4:	7b3b      	ldrb	r3, [r7, #12]
 8100dc6:	b21b      	sxth	r3, r3
 8100dc8:	4313      	orrs	r3, r2
 8100dca:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8100dcc:	7bfb      	ldrb	r3, [r7, #15]
 8100dce:	021b      	lsls	r3, r3, #8
 8100dd0:	b21a      	sxth	r2, r3
 8100dd2:	7bbb      	ldrb	r3, [r7, #14]
 8100dd4:	b21b      	sxth	r3, r3
 8100dd6:	4313      	orrs	r3, r2
 8100dd8:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8100dda:	7c7b      	ldrb	r3, [r7, #17]
 8100ddc:	021b      	lsls	r3, r3, #8
 8100dde:	b21a      	sxth	r2, r3
 8100de0:	7c3b      	ldrb	r3, [r7, #16]
 8100de2:	b21b      	sxth	r3, r3
 8100de4:	4313      	orrs	r3, r2
 8100de6:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 8100de8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8100dec:	ee07 3a90 	vmov	s15, r3
 8100df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100df4:	eeb0 0a67 	vmov.f32	s0, s15
 8100df8:	f7ff ff1e 	bl	8100c38 <calcAccel>
 8100dfc:	eef0 7a40 	vmov.f32	s15, s0
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 8100e06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8100e0a:	ee07 3a90 	vmov	s15, r3
 8100e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100e12:	eeb0 0a67 	vmov.f32	s0, s15
 8100e16:	f7ff ff0f 	bl	8100c38 <calcAccel>
 8100e1a:	eef0 7a40 	vmov.f32	s15, s0
 8100e1e:	687b      	ldr	r3, [r7, #4]
 8100e20:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 8100e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8100e28:	ee07 3a90 	vmov	s15, r3
 8100e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100e30:	eeb0 0a67 	vmov.f32	s0, s15
 8100e34:	f7ff ff00 	bl	8100c38 <calcAccel>
 8100e38:	eef0 7a40 	vmov.f32	s15, s0
 8100e3c:	687b      	ldr	r3, [r7, #4]
 8100e3e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

}
 8100e42:	bf00      	nop
 8100e44:	3718      	adds	r7, #24
 8100e46:	46bd      	mov	sp, r7
 8100e48:	bd80      	pop	{r7, pc}
	...

08100e4c <calcGyroResolution>:
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG9, temp);
}


void calcGyroResolution(LSM9DS1Handle* imu)
{
 8100e4c:	b480      	push	{r7}
 8100e4e:	b083      	sub	sp, #12
 8100e50:	af00      	add	r7, sp, #0
 8100e52:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	885b      	ldrh	r3, [r3, #2]
 8100e58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8100e5c:	d010      	beq.n	8100e80 <calcGyroResolution+0x34>
 8100e5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8100e62:	dc11      	bgt.n	8100e88 <calcGyroResolution+0x3c>
 8100e64:	2bf5      	cmp	r3, #245	; 0xf5
 8100e66:	d003      	beq.n	8100e70 <calcGyroResolution+0x24>
 8100e68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8100e6c:	d004      	beq.n	8100e78 <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 8100e6e:	e00b      	b.n	8100e88 <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 8100e70:	4b09      	ldr	r3, [pc, #36]	; (8100e98 <calcGyroResolution+0x4c>)
 8100e72:	4a0a      	ldr	r2, [pc, #40]	; (8100e9c <calcGyroResolution+0x50>)
 8100e74:	601a      	str	r2, [r3, #0]
      break;
 8100e76:	e008      	b.n	8100e8a <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 8100e78:	4b07      	ldr	r3, [pc, #28]	; (8100e98 <calcGyroResolution+0x4c>)
 8100e7a:	4a09      	ldr	r2, [pc, #36]	; (8100ea0 <calcGyroResolution+0x54>)
 8100e7c:	601a      	str	r2, [r3, #0]
      break;
 8100e7e:	e004      	b.n	8100e8a <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 8100e80:	4b05      	ldr	r3, [pc, #20]	; (8100e98 <calcGyroResolution+0x4c>)
 8100e82:	4a08      	ldr	r2, [pc, #32]	; (8100ea4 <calcGyroResolution+0x58>)
 8100e84:	601a      	str	r2, [r3, #0]
      break;
 8100e86:	e000      	b.n	8100e8a <calcGyroResolution+0x3e>
      break;
 8100e88:	bf00      	nop
  }
}
 8100e8a:	bf00      	nop
 8100e8c:	370c      	adds	r7, #12
 8100e8e:	46bd      	mov	sp, r7
 8100e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e94:	4770      	bx	lr
 8100e96:	bf00      	nop
 8100e98:	10000170 	.word	0x10000170
 8100e9c:	3c0f5c29 	.word	0x3c0f5c29
 8100ea0:	3c8f5c29 	.word	0x3c8f5c29
 8100ea4:	3d8f5c29 	.word	0x3d8f5c29

08100ea8 <calcAccResoltuion>:

void calcAccResoltuion(LSM9DS1Handle* imu)
{
 8100ea8:	b480      	push	{r7}
 8100eaa:	b083      	sub	sp, #12
 8100eac:	af00      	add	r7, sp, #0
 8100eae:	6078      	str	r0, [r7, #4]

  switch(imu->accel_settings.scale)
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	7cdb      	ldrb	r3, [r3, #19]
 8100eb4:	3b02      	subs	r3, #2
 8100eb6:	2b0e      	cmp	r3, #14
 8100eb8:	d830      	bhi.n	8100f1c <calcAccResoltuion+0x74>
 8100eba:	a201      	add	r2, pc, #4	; (adr r2, 8100ec0 <calcAccResoltuion+0x18>)
 8100ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100ec0:	08100efd 	.word	0x08100efd
 8100ec4:	08100f1d 	.word	0x08100f1d
 8100ec8:	08100f05 	.word	0x08100f05
 8100ecc:	08100f1d 	.word	0x08100f1d
 8100ed0:	08100f1d 	.word	0x08100f1d
 8100ed4:	08100f1d 	.word	0x08100f1d
 8100ed8:	08100f0d 	.word	0x08100f0d
 8100edc:	08100f1d 	.word	0x08100f1d
 8100ee0:	08100f1d 	.word	0x08100f1d
 8100ee4:	08100f1d 	.word	0x08100f1d
 8100ee8:	08100f1d 	.word	0x08100f1d
 8100eec:	08100f1d 	.word	0x08100f1d
 8100ef0:	08100f1d 	.word	0x08100f1d
 8100ef4:	08100f1d 	.word	0x08100f1d
 8100ef8:	08100f15 	.word	0x08100f15
  {
    case 2:
      acc_res = ACC_FS_2G;
 8100efc:	4b0b      	ldr	r3, [pc, #44]	; (8100f2c <calcAccResoltuion+0x84>)
 8100efe:	4a0c      	ldr	r2, [pc, #48]	; (8100f30 <calcAccResoltuion+0x88>)
 8100f00:	601a      	str	r2, [r3, #0]
    break;
 8100f02:	e00c      	b.n	8100f1e <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 8100f04:	4b09      	ldr	r3, [pc, #36]	; (8100f2c <calcAccResoltuion+0x84>)
 8100f06:	4a0b      	ldr	r2, [pc, #44]	; (8100f34 <calcAccResoltuion+0x8c>)
 8100f08:	601a      	str	r2, [r3, #0]
     break;
 8100f0a:	e008      	b.n	8100f1e <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 8100f0c:	4b07      	ldr	r3, [pc, #28]	; (8100f2c <calcAccResoltuion+0x84>)
 8100f0e:	4a0a      	ldr	r2, [pc, #40]	; (8100f38 <calcAccResoltuion+0x90>)
 8100f10:	601a      	str	r2, [r3, #0]
      break;
 8100f12:	e004      	b.n	8100f1e <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 8100f14:	4b05      	ldr	r3, [pc, #20]	; (8100f2c <calcAccResoltuion+0x84>)
 8100f16:	4a09      	ldr	r2, [pc, #36]	; (8100f3c <calcAccResoltuion+0x94>)
 8100f18:	601a      	str	r2, [r3, #0]
      break;
 8100f1a:	e000      	b.n	8100f1e <calcAccResoltuion+0x76>

    default:
      break;
 8100f1c:	bf00      	nop

  }

}
 8100f1e:	bf00      	nop
 8100f20:	370c      	adds	r7, #12
 8100f22:	46bd      	mov	sp, r7
 8100f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f28:	4770      	bx	lr
 8100f2a:	bf00      	nop
 8100f2c:	10000168 	.word	0x10000168
 8100f30:	387fda40 	.word	0x387fda40
 8100f34:	38ffda40 	.word	0x38ffda40
 8100f38:	397fda40 	.word	0x397fda40
 8100f3c:	3a3fe3b0 	.word	0x3a3fe3b0

08100f40 <calcMagResolution>:
void calcMagResolution(LSM9DS1Handle* imu)
{
 8100f40:	b480      	push	{r7}
 8100f42:	b083      	sub	sp, #12
 8100f44:	af00      	add	r7, sp, #0
 8100f46:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	7f1b      	ldrb	r3, [r3, #28]
 8100f4c:	3b02      	subs	r3, #2
 8100f4e:	2b0e      	cmp	r3, #14
 8100f50:	d830      	bhi.n	8100fb4 <calcMagResolution+0x74>
 8100f52:	a201      	add	r2, pc, #4	; (adr r2, 8100f58 <calcMagResolution+0x18>)
 8100f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100f58:	08100f95 	.word	0x08100f95
 8100f5c:	08100fb5 	.word	0x08100fb5
 8100f60:	08100f9d 	.word	0x08100f9d
 8100f64:	08100fb5 	.word	0x08100fb5
 8100f68:	08100fb5 	.word	0x08100fb5
 8100f6c:	08100fb5 	.word	0x08100fb5
 8100f70:	08100fa5 	.word	0x08100fa5
 8100f74:	08100fb5 	.word	0x08100fb5
 8100f78:	08100fb5 	.word	0x08100fb5
 8100f7c:	08100fb5 	.word	0x08100fb5
 8100f80:	08100fb5 	.word	0x08100fb5
 8100f84:	08100fb5 	.word	0x08100fb5
 8100f88:	08100fb5 	.word	0x08100fb5
 8100f8c:	08100fb5 	.word	0x08100fb5
 8100f90:	08100fad 	.word	0x08100fad
  {
    case 2:
      mag_res = MAG_FS_4G;
 8100f94:	4b0b      	ldr	r3, [pc, #44]	; (8100fc4 <calcMagResolution+0x84>)
 8100f96:	4a0c      	ldr	r2, [pc, #48]	; (8100fc8 <calcMagResolution+0x88>)
 8100f98:	601a      	str	r2, [r3, #0]
    break;
 8100f9a:	e00c      	b.n	8100fb6 <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 8100f9c:	4b09      	ldr	r3, [pc, #36]	; (8100fc4 <calcMagResolution+0x84>)
 8100f9e:	4a0b      	ldr	r2, [pc, #44]	; (8100fcc <calcMagResolution+0x8c>)
 8100fa0:	601a      	str	r2, [r3, #0]
     break;
 8100fa2:	e008      	b.n	8100fb6 <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 8100fa4:	4b07      	ldr	r3, [pc, #28]	; (8100fc4 <calcMagResolution+0x84>)
 8100fa6:	4a0a      	ldr	r2, [pc, #40]	; (8100fd0 <calcMagResolution+0x90>)
 8100fa8:	601a      	str	r2, [r3, #0]
      break;
 8100faa:	e004      	b.n	8100fb6 <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 8100fac:	4b05      	ldr	r3, [pc, #20]	; (8100fc4 <calcMagResolution+0x84>)
 8100fae:	4a09      	ldr	r2, [pc, #36]	; (8100fd4 <calcMagResolution+0x94>)
 8100fb0:	601a      	str	r2, [r3, #0]
      break;
 8100fb2:	e000      	b.n	8100fb6 <calcMagResolution+0x76>

    default:
      break;
 8100fb4:	bf00      	nop

  }

}
 8100fb6:	bf00      	nop
 8100fb8:	370c      	adds	r7, #12
 8100fba:	46bd      	mov	sp, r7
 8100fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fc0:	4770      	bx	lr
 8100fc2:	bf00      	nop
 8100fc4:	1000016c 	.word	0x1000016c
 8100fc8:	3912ccf7 	.word	0x3912ccf7
 8100fcc:	39980b24 	.word	0x39980b24
 8100fd0:	39e1719f 	.word	0x39e1719f
 8100fd4:	3a180b24 	.word	0x3a180b24

08100fd8 <I2CReadByte>:



uint8_t I2CReadByte(uint8_t address, uint8_t reg)
{
 8100fd8:	b580      	push	{r7, lr}
 8100fda:	b086      	sub	sp, #24
 8100fdc:	af02      	add	r7, sp, #8
 8100fde:	4603      	mov	r3, r0
 8100fe0:	460a      	mov	r2, r1
 8100fe2:	71fb      	strb	r3, [r7, #7]
 8100fe4:	4613      	mov	r3, r2
 8100fe6:	71bb      	strb	r3, [r7, #6]
   uint8_t value = 0x00;
 8100fe8:	2300      	movs	r3, #0
 8100fea:	73bb      	strb	r3, [r7, #14]
   HAL_StatusTypeDef status;
   status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
 8100fec:	79fb      	ldrb	r3, [r7, #7]
 8100fee:	b29b      	uxth	r3, r3
 8100ff0:	005b      	lsls	r3, r3, #1
 8100ff2:	b299      	uxth	r1, r3
 8100ff4:	79bb      	ldrb	r3, [r7, #6]
 8100ff6:	b29a      	uxth	r2, r3
 8100ff8:	2301      	movs	r3, #1
 8100ffa:	9301      	str	r3, [sp, #4]
 8100ffc:	f107 030e 	add.w	r3, r7, #14
 8101000:	9300      	str	r3, [sp, #0]
 8101002:	2301      	movs	r3, #1
 8101004:	4807      	ldr	r0, [pc, #28]	; (8101024 <I2CReadByte+0x4c>)
 8101006:	f003 fbef 	bl	81047e8 <HAL_I2C_Mem_Read_DMA>
 810100a:	4603      	mov	r3, r0
 810100c:	73fb      	strb	r3, [r7, #15]
   if(status != HAL_OK)
 810100e:	7bfb      	ldrb	r3, [r7, #15]
 8101010:	2b00      	cmp	r3, #0
 8101012:	d001      	beq.n	8101018 <I2CReadByte+0x40>
   {
      return HAL_ERROR;
 8101014:	2301      	movs	r3, #1
 8101016:	e000      	b.n	810101a <I2CReadByte+0x42>
   }
   return value;
 8101018:	7bbb      	ldrb	r3, [r7, #14]
}
 810101a:	4618      	mov	r0, r3
 810101c:	3710      	adds	r7, #16
 810101e:	46bd      	mov	sp, r7
 8101020:	bd80      	pop	{r7, pc}
 8101022:	bf00      	nop
 8101024:	100000a4 	.word	0x100000a4

08101028 <I2CReadBytes>:

uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8101028:	b580      	push	{r7, lr}
 810102a:	b086      	sub	sp, #24
 810102c:	af02      	add	r7, sp, #8
 810102e:	603a      	str	r2, [r7, #0]
 8101030:	461a      	mov	r2, r3
 8101032:	4603      	mov	r3, r0
 8101034:	71fb      	strb	r3, [r7, #7]
 8101036:	460b      	mov	r3, r1
 8101038:	71bb      	strb	r3, [r7, #6]
 810103a:	4613      	mov	r3, r2
 810103c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;

  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 810103e:	79fb      	ldrb	r3, [r7, #7]
 8101040:	b29b      	uxth	r3, r3
 8101042:	005b      	lsls	r3, r3, #1
 8101044:	b299      	uxth	r1, r3
 8101046:	79bb      	ldrb	r3, [r7, #6]
 8101048:	b29a      	uxth	r2, r3
 810104a:	797b      	ldrb	r3, [r7, #5]
 810104c:	b29b      	uxth	r3, r3
 810104e:	9301      	str	r3, [sp, #4]
 8101050:	683b      	ldr	r3, [r7, #0]
 8101052:	9300      	str	r3, [sp, #0]
 8101054:	2301      	movs	r3, #1
 8101056:	4807      	ldr	r0, [pc, #28]	; (8101074 <I2CReadBytes+0x4c>)
 8101058:	f003 fbc6 	bl	81047e8 <HAL_I2C_Mem_Read_DMA>
 810105c:	4603      	mov	r3, r0
 810105e:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 8101060:	7bfb      	ldrb	r3, [r7, #15]
 8101062:	2b00      	cmp	r3, #0
 8101064:	d001      	beq.n	810106a <I2CReadBytes+0x42>
  {
    return HAL_ERROR;
 8101066:	2301      	movs	r3, #1
 8101068:	e000      	b.n	810106c <I2CReadBytes+0x44>
  }

  return numBytes;
 810106a:	797b      	ldrb	r3, [r7, #5]

}
 810106c:	4618      	mov	r0, r3
 810106e:	3710      	adds	r7, #16
 8101070:	46bd      	mov	sp, r7
 8101072:	bd80      	pop	{r7, pc}
 8101074:	100000a4 	.word	0x100000a4

08101078 <WriteByte>:

HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 8101078:	b580      	push	{r7, lr}
 810107a:	b086      	sub	sp, #24
 810107c:	af02      	add	r7, sp, #8
 810107e:	4603      	mov	r3, r0
 8101080:	71fb      	strb	r3, [r7, #7]
 8101082:	460b      	mov	r3, r1
 8101084:	71bb      	strb	r3, [r7, #6]
 8101086:	4613      	mov	r3, r2
 8101088:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status;

  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810108a:	79fb      	ldrb	r3, [r7, #7]
 810108c:	b29b      	uxth	r3, r3
 810108e:	005b      	lsls	r3, r3, #1
 8101090:	b299      	uxth	r1, r3
 8101092:	79bb      	ldrb	r3, [r7, #6]
 8101094:	b29a      	uxth	r2, r3
 8101096:	2301      	movs	r3, #1
 8101098:	9301      	str	r3, [sp, #4]
 810109a:	1d7b      	adds	r3, r7, #5
 810109c:	9300      	str	r3, [sp, #0]
 810109e:	2301      	movs	r3, #1
 81010a0:	4807      	ldr	r0, [pc, #28]	; (81010c0 <WriteByte+0x48>)
 81010a2:	f003 faab 	bl	81045fc <HAL_I2C_Mem_Write_DMA>
 81010a6:	4603      	mov	r3, r0
 81010a8:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81010aa:	7bfb      	ldrb	r3, [r7, #15]
 81010ac:	2b00      	cmp	r3, #0
 81010ae:	d001      	beq.n	81010b4 <WriteByte+0x3c>
  {
    return HAL_ERROR;
 81010b0:	2301      	movs	r3, #1
 81010b2:	e000      	b.n	81010b6 <WriteByte+0x3e>
  }

  return HAL_OK;
 81010b4:	2300      	movs	r3, #0

}
 81010b6:	4618      	mov	r0, r3
 81010b8:	3710      	adds	r7, #16
 81010ba:	46bd      	mov	sp, r7
 81010bc:	bd80      	pop	{r7, pc}
 81010be:	bf00      	nop
 81010c0:	100000a4 	.word	0x100000a4

081010c4 <HAL_I2C_MemRxCpltCallback>:
{

}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81010c4:	b480      	push	{r7}
 81010c6:	b083      	sub	sp, #12
 81010c8:	af00      	add	r7, sp, #0
 81010ca:	6078      	str	r0, [r7, #4]


}
 81010cc:	bf00      	nop
 81010ce:	370c      	adds	r7, #12
 81010d0:	46bd      	mov	sp, r7
 81010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010d6:	4770      	bx	lr

081010d8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81010d8:	b480      	push	{r7}
 81010da:	b083      	sub	sp, #12
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]


}
 81010e0:	bf00      	nop
 81010e2:	370c      	adds	r7, #12
 81010e4:	46bd      	mov	sp, r7
 81010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ea:	4770      	bx	lr

081010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81010ec:	b580      	push	{r7, lr}
 81010ee:	b082      	sub	sp, #8
 81010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 81010f2:	f000 f85d 	bl	81011b0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81010f6:	4b29      	ldr	r3, [pc, #164]	; (810119c <main+0xb0>)
 81010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010fc:	4a27      	ldr	r2, [pc, #156]	; (810119c <main+0xb0>)
 81010fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101106:	4b25      	ldr	r3, [pc, #148]	; (810119c <main+0xb0>)
 8101108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810110c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101110:	603b      	str	r3, [r7, #0]
 8101112:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101114:	2001      	movs	r0, #1
 8101116:	f003 f9cf 	bl	81044b8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810111a:	f005 fbd3 	bl	81068c4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810111e:	2201      	movs	r2, #1
 8101120:	2102      	movs	r1, #2
 8101122:	2000      	movs	r0, #0
 8101124:	f005 fb54 	bl	81067d0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101128:	4b1d      	ldr	r3, [pc, #116]	; (81011a0 <main+0xb4>)
 810112a:	681b      	ldr	r3, [r3, #0]
 810112c:	091b      	lsrs	r3, r3, #4
 810112e:	f003 030f 	and.w	r3, r3, #15
 8101132:	2b07      	cmp	r3, #7
 8101134:	d108      	bne.n	8101148 <main+0x5c>
 8101136:	4b1b      	ldr	r3, [pc, #108]	; (81011a4 <main+0xb8>)
 8101138:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810113c:	4a19      	ldr	r2, [pc, #100]	; (81011a4 <main+0xb8>)
 810113e:	f043 0301 	orr.w	r3, r3, #1
 8101142:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101146:	e007      	b.n	8101158 <main+0x6c>
 8101148:	4b16      	ldr	r3, [pc, #88]	; (81011a4 <main+0xb8>)
 810114a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810114e:	4a15      	ldr	r2, [pc, #84]	; (81011a4 <main+0xb8>)
 8101150:	f043 0301 	orr.w	r3, r3, #1
 8101154:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101158:	f000 fa38 	bl	81015cc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810115c:	f7ff f926 	bl	81003ac <MX_GPIO_Init>
  MX_DMA_Init();
 8101160:	f7ff f8ec 	bl	810033c <MX_DMA_Init>
  MX_SPI1_Init();
 8101164:	f000 f856 	bl	8101214 <MX_SPI1_Init>
  MX_I2C1_Init();
 8101168:	f7ff f964 	bl	8100434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810116c:	2201      	movs	r2, #1
 810116e:	2110      	movs	r1, #16
 8101170:	480d      	ldr	r0, [pc, #52]	; (81011a8 <main+0xbc>)
 8101172:	f003 f987 	bl	8104484 <HAL_GPIO_WritePin>
  //begin(0x6B,0x1E,&hi2c1);    // 0x6B I2C Address of accelerometer and gyroscope // 0x1E I2C Address of magnetometer
   // setMagScale(16);
   // setAccelScale(16);
   // setGyroScale(2000);
  uint16_t res = setup(&imu);
 8101176:	480d      	ldr	r0, [pc, #52]	; (81011ac <main+0xc0>)
 8101178:	f7ff fafc 	bl	8100774 <setup>
 810117c:	4603      	mov	r3, r0
 810117e:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      readGyro(&imu);
 8101180:	480a      	ldr	r0, [pc, #40]	; (81011ac <main+0xc0>)
 8101182:	f7ff fd6f 	bl	8100c64 <readGyro>
      readMag(&imu);
 8101186:	4809      	ldr	r0, [pc, #36]	; (81011ac <main+0xc0>)
 8101188:	f7ff fdbd 	bl	8100d06 <readMag>
      readAccel(&imu);
 810118c:	4807      	ldr	r0, [pc, #28]	; (81011ac <main+0xc0>)
 810118e:	f7ff fe0b 	bl	8100da8 <readAccel>

      HAL_Delay(100);
 8101192:	2064      	movs	r0, #100	; 0x64
 8101194:	f000 face 	bl	8101734 <HAL_Delay>
      readGyro(&imu);
 8101198:	e7f2      	b.n	8101180 <main+0x94>
 810119a:	bf00      	nop
 810119c:	58024400 	.word	0x58024400
 81011a0:	e000ed00 	.word	0xe000ed00
 81011a4:	58026400 	.word	0x58026400
 81011a8:	58020000 	.word	0x58020000
 81011ac:	10000174 	.word	0x10000174

081011b0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 81011b0:	b580      	push	{r7, lr}
 81011b2:	b084      	sub	sp, #16
 81011b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 81011b6:	463b      	mov	r3, r7
 81011b8:	2200      	movs	r2, #0
 81011ba:	601a      	str	r2, [r3, #0]
 81011bc:	605a      	str	r2, [r3, #4]
 81011be:	609a      	str	r2, [r3, #8]
 81011c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 81011c2:	f000 fbeb 	bl	810199c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81011c6:	2301      	movs	r3, #1
 81011c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 81011ca:	2300      	movs	r3, #0
 81011cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x10000000;
 81011ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81011d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 81011d4:	2311      	movs	r3, #17
 81011d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 81011d8:	2300      	movs	r3, #0
 81011da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 81011dc:	2300      	movs	r3, #0
 81011de:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 81011e0:	2303      	movs	r3, #3
 81011e2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81011e4:	2300      	movs	r3, #0
 81011e6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 81011e8:	2300      	movs	r3, #0
 81011ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 81011ec:	2300      	movs	r3, #0
 81011ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 81011f0:	2300      	movs	r3, #0
 81011f2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81011f4:	463b      	mov	r3, r7
 81011f6:	4618      	mov	r0, r3
 81011f8:	f000 fc08 	bl	8101a0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 81011fc:	2004      	movs	r0, #4
 81011fe:	f000 fbe5 	bl	81019cc <HAL_MPU_Enable>

}
 8101202:	bf00      	nop
 8101204:	3710      	adds	r7, #16
 8101206:	46bd      	mov	sp, r7
 8101208:	bd80      	pop	{r7, pc}

0810120a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810120a:	b480      	push	{r7}
 810120c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810120e:	b672      	cpsid	i
}
 8101210:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101212:	e7fe      	b.n	8101212 <Error_Handler+0x8>

08101214 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101218:	4b27      	ldr	r3, [pc, #156]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810121a:	4a28      	ldr	r2, [pc, #160]	; (81012bc <MX_SPI1_Init+0xa8>)
 810121c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810121e:	4b26      	ldr	r3, [pc, #152]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101220:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101226:	4b24      	ldr	r3, [pc, #144]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101228:	2200      	movs	r2, #0
 810122a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 810122c:	4b22      	ldr	r3, [pc, #136]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810122e:	2207      	movs	r2, #7
 8101230:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101232:	4b21      	ldr	r3, [pc, #132]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101234:	2200      	movs	r2, #0
 8101236:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101238:	4b1f      	ldr	r3, [pc, #124]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810123a:	2200      	movs	r2, #0
 810123c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810123e:	4b1e      	ldr	r3, [pc, #120]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101240:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101244:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101246:	4b1c      	ldr	r3, [pc, #112]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101248:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 810124c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810124e:	4b1a      	ldr	r3, [pc, #104]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101250:	2200      	movs	r2, #0
 8101252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101254:	4b18      	ldr	r3, [pc, #96]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101256:	2200      	movs	r2, #0
 8101258:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810125a:	4b17      	ldr	r3, [pc, #92]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810125c:	2200      	movs	r2, #0
 810125e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101260:	4b15      	ldr	r3, [pc, #84]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101262:	2200      	movs	r2, #0
 8101264:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101266:	4b14      	ldr	r3, [pc, #80]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810126c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810126e:	4b12      	ldr	r3, [pc, #72]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101270:	2200      	movs	r2, #0
 8101272:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101274:	4b10      	ldr	r3, [pc, #64]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101276:	2200      	movs	r2, #0
 8101278:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810127a:	4b0f      	ldr	r3, [pc, #60]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810127c:	2200      	movs	r2, #0
 810127e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101280:	4b0d      	ldr	r3, [pc, #52]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101282:	2200      	movs	r2, #0
 8101284:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101286:	4b0c      	ldr	r3, [pc, #48]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101288:	2200      	movs	r2, #0
 810128a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810128c:	4b0a      	ldr	r3, [pc, #40]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810128e:	2200      	movs	r2, #0
 8101290:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101292:	4b09      	ldr	r3, [pc, #36]	; (81012b8 <MX_SPI1_Init+0xa4>)
 8101294:	2200      	movs	r2, #0
 8101296:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101298:	4b07      	ldr	r3, [pc, #28]	; (81012b8 <MX_SPI1_Init+0xa4>)
 810129a:	2200      	movs	r2, #0
 810129c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810129e:	4b06      	ldr	r3, [pc, #24]	; (81012b8 <MX_SPI1_Init+0xa4>)
 81012a0:	2200      	movs	r2, #0
 81012a2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81012a4:	4804      	ldr	r0, [pc, #16]	; (81012b8 <MX_SPI1_Init+0xa4>)
 81012a6:	f006 fd39 	bl	8107d1c <HAL_SPI_Init>
 81012aa:	4603      	mov	r3, r0
 81012ac:	2b00      	cmp	r3, #0
 81012ae:	d001      	beq.n	81012b4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 81012b0:	f7ff ffab 	bl	810120a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81012b4:	bf00      	nop
 81012b6:	bd80      	pop	{r7, pc}
 81012b8:	100001e0 	.word	0x100001e0
 81012bc:	40013000 	.word	0x40013000

081012c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81012c0:	b580      	push	{r7, lr}
 81012c2:	b0b8      	sub	sp, #224	; 0xe0
 81012c4:	af00      	add	r7, sp, #0
 81012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012cc:	2200      	movs	r2, #0
 81012ce:	601a      	str	r2, [r3, #0]
 81012d0:	605a      	str	r2, [r3, #4]
 81012d2:	609a      	str	r2, [r3, #8]
 81012d4:	60da      	str	r2, [r3, #12]
 81012d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81012d8:	f107 0310 	add.w	r3, r7, #16
 81012dc:	22bc      	movs	r2, #188	; 0xbc
 81012de:	2100      	movs	r1, #0
 81012e0:	4618      	mov	r0, r3
 81012e2:	f007 f915 	bl	8108510 <memset>
  if(spiHandle->Instance==SPI1)
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	681b      	ldr	r3, [r3, #0]
 81012ea:	4a57      	ldr	r2, [pc, #348]	; (8101448 <HAL_SPI_MspInit+0x188>)
 81012ec:	4293      	cmp	r3, r2
 81012ee:	f040 80a6 	bne.w	810143e <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81012f6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81012f8:	2300      	movs	r3, #0
 81012fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81012fc:	f107 0310 	add.w	r3, r7, #16
 8101300:	4618      	mov	r0, r3
 8101302:	f005 fc67 	bl	8106bd4 <HAL_RCCEx_PeriphCLKConfig>
 8101306:	4603      	mov	r3, r0
 8101308:	2b00      	cmp	r3, #0
 810130a:	d001      	beq.n	8101310 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 810130c:	f7ff ff7d 	bl	810120a <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101310:	4b4e      	ldr	r3, [pc, #312]	; (810144c <HAL_SPI_MspInit+0x18c>)
 8101312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101316:	4a4d      	ldr	r2, [pc, #308]	; (810144c <HAL_SPI_MspInit+0x18c>)
 8101318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 810131c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101320:	4b4a      	ldr	r3, [pc, #296]	; (810144c <HAL_SPI_MspInit+0x18c>)
 8101322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810132a:	60fb      	str	r3, [r7, #12]
 810132c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810132e:	4b47      	ldr	r3, [pc, #284]	; (810144c <HAL_SPI_MspInit+0x18c>)
 8101330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101334:	4a45      	ldr	r2, [pc, #276]	; (810144c <HAL_SPI_MspInit+0x18c>)
 8101336:	f043 0301 	orr.w	r3, r3, #1
 810133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810133e:	4b43      	ldr	r3, [pc, #268]	; (810144c <HAL_SPI_MspInit+0x18c>)
 8101340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101344:	f003 0301 	and.w	r3, r3, #1
 8101348:	60bb      	str	r3, [r7, #8]
 810134a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 810134c:	23e0      	movs	r3, #224	; 0xe0
 810134e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101352:	2302      	movs	r3, #2
 8101354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101358:	2300      	movs	r3, #0
 810135a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810135e:	2300      	movs	r3, #0
 8101360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101364:	2305      	movs	r3, #5
 8101366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810136a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810136e:	4619      	mov	r1, r3
 8101370:	4837      	ldr	r0, [pc, #220]	; (8101450 <HAL_SPI_MspInit+0x190>)
 8101372:	f002 fed7 	bl	8104124 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8101376:	4b37      	ldr	r3, [pc, #220]	; (8101454 <HAL_SPI_MspInit+0x194>)
 8101378:	4a37      	ldr	r2, [pc, #220]	; (8101458 <HAL_SPI_MspInit+0x198>)
 810137a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 810137c:	4b35      	ldr	r3, [pc, #212]	; (8101454 <HAL_SPI_MspInit+0x194>)
 810137e:	2225      	movs	r2, #37	; 0x25
 8101380:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101382:	4b34      	ldr	r3, [pc, #208]	; (8101454 <HAL_SPI_MspInit+0x194>)
 8101384:	2200      	movs	r2, #0
 8101386:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101388:	4b32      	ldr	r3, [pc, #200]	; (8101454 <HAL_SPI_MspInit+0x194>)
 810138a:	2200      	movs	r2, #0
 810138c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810138e:	4b31      	ldr	r3, [pc, #196]	; (8101454 <HAL_SPI_MspInit+0x194>)
 8101390:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101394:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101396:	4b2f      	ldr	r3, [pc, #188]	; (8101454 <HAL_SPI_MspInit+0x194>)
 8101398:	2200      	movs	r2, #0
 810139a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810139c:	4b2d      	ldr	r3, [pc, #180]	; (8101454 <HAL_SPI_MspInit+0x194>)
 810139e:	2200      	movs	r2, #0
 81013a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 81013a2:	4b2c      	ldr	r3, [pc, #176]	; (8101454 <HAL_SPI_MspInit+0x194>)
 81013a4:	2200      	movs	r2, #0
 81013a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 81013a8:	4b2a      	ldr	r3, [pc, #168]	; (8101454 <HAL_SPI_MspInit+0x194>)
 81013aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81013ae:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81013b0:	4b28      	ldr	r3, [pc, #160]	; (8101454 <HAL_SPI_MspInit+0x194>)
 81013b2:	2200      	movs	r2, #0
 81013b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 81013b6:	4827      	ldr	r0, [pc, #156]	; (8101454 <HAL_SPI_MspInit+0x194>)
 81013b8:	f000 fb80 	bl	8101abc <HAL_DMA_Init>
 81013bc:	4603      	mov	r3, r0
 81013be:	2b00      	cmp	r3, #0
 81013c0:	d001      	beq.n	81013c6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 81013c2:	f7ff ff22 	bl	810120a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	4a22      	ldr	r2, [pc, #136]	; (8101454 <HAL_SPI_MspInit+0x194>)
 81013ca:	67da      	str	r2, [r3, #124]	; 0x7c
 81013cc:	4a21      	ldr	r2, [pc, #132]	; (8101454 <HAL_SPI_MspInit+0x194>)
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 81013d2:	4b22      	ldr	r3, [pc, #136]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013d4:	4a22      	ldr	r2, [pc, #136]	; (8101460 <HAL_SPI_MspInit+0x1a0>)
 81013d6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 81013d8:	4b20      	ldr	r3, [pc, #128]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013da:	2226      	movs	r2, #38	; 0x26
 81013dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81013de:	4b1f      	ldr	r3, [pc, #124]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013e0:	2240      	movs	r2, #64	; 0x40
 81013e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81013e4:	4b1d      	ldr	r3, [pc, #116]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013e6:	2200      	movs	r2, #0
 81013e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81013ea:	4b1c      	ldr	r3, [pc, #112]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81013f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81013f2:	4b1a      	ldr	r3, [pc, #104]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013f4:	2200      	movs	r2, #0
 81013f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81013f8:	4b18      	ldr	r3, [pc, #96]	; (810145c <HAL_SPI_MspInit+0x19c>)
 81013fa:	2200      	movs	r2, #0
 81013fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81013fe:	4b17      	ldr	r3, [pc, #92]	; (810145c <HAL_SPI_MspInit+0x19c>)
 8101400:	2200      	movs	r2, #0
 8101402:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101404:	4b15      	ldr	r3, [pc, #84]	; (810145c <HAL_SPI_MspInit+0x19c>)
 8101406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810140a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810140c:	4b13      	ldr	r3, [pc, #76]	; (810145c <HAL_SPI_MspInit+0x19c>)
 810140e:	2200      	movs	r2, #0
 8101410:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101412:	4812      	ldr	r0, [pc, #72]	; (810145c <HAL_SPI_MspInit+0x19c>)
 8101414:	f000 fb52 	bl	8101abc <HAL_DMA_Init>
 8101418:	4603      	mov	r3, r0
 810141a:	2b00      	cmp	r3, #0
 810141c:	d001      	beq.n	8101422 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 810141e:	f7ff fef4 	bl	810120a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	4a0d      	ldr	r2, [pc, #52]	; (810145c <HAL_SPI_MspInit+0x19c>)
 8101426:	679a      	str	r2, [r3, #120]	; 0x78
 8101428:	4a0c      	ldr	r2, [pc, #48]	; (810145c <HAL_SPI_MspInit+0x19c>)
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 810142e:	2200      	movs	r2, #0
 8101430:	2100      	movs	r1, #0
 8101432:	2023      	movs	r0, #35	; 0x23
 8101434:	f000 fa7d 	bl	8101932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101438:	2023      	movs	r0, #35	; 0x23
 810143a:	f000 fa94 	bl	8101966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 810143e:	bf00      	nop
 8101440:	37e0      	adds	r7, #224	; 0xe0
 8101442:	46bd      	mov	sp, r7
 8101444:	bd80      	pop	{r7, pc}
 8101446:	bf00      	nop
 8101448:	40013000 	.word	0x40013000
 810144c:	58024400 	.word	0x58024400
 8101450:	58020000 	.word	0x58020000
 8101454:	10000268 	.word	0x10000268
 8101458:	40020010 	.word	0x40020010
 810145c:	100002e0 	.word	0x100002e0
 8101460:	40020028 	.word	0x40020028

08101464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101464:	b480      	push	{r7}
 8101466:	b083      	sub	sp, #12
 8101468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810146a:	4b0a      	ldr	r3, [pc, #40]	; (8101494 <HAL_MspInit+0x30>)
 810146c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101470:	4a08      	ldr	r2, [pc, #32]	; (8101494 <HAL_MspInit+0x30>)
 8101472:	f043 0302 	orr.w	r3, r3, #2
 8101476:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810147a:	4b06      	ldr	r3, [pc, #24]	; (8101494 <HAL_MspInit+0x30>)
 810147c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101480:	f003 0302 	and.w	r3, r3, #2
 8101484:	607b      	str	r3, [r7, #4]
 8101486:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101488:	bf00      	nop
 810148a:	370c      	adds	r7, #12
 810148c:	46bd      	mov	sp, r7
 810148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101492:	4770      	bx	lr
 8101494:	58024400 	.word	0x58024400

08101498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101498:	b480      	push	{r7}
 810149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810149c:	e7fe      	b.n	810149c <NMI_Handler+0x4>

0810149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810149e:	b480      	push	{r7}
 81014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81014a2:	e7fe      	b.n	81014a2 <HardFault_Handler+0x4>

081014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81014a4:	b480      	push	{r7}
 81014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81014a8:	e7fe      	b.n	81014a8 <MemManage_Handler+0x4>

081014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81014aa:	b480      	push	{r7}
 81014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81014ae:	e7fe      	b.n	81014ae <BusFault_Handler+0x4>

081014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81014b0:	b480      	push	{r7}
 81014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81014b4:	e7fe      	b.n	81014b4 <UsageFault_Handler+0x4>

081014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81014b6:	b480      	push	{r7}
 81014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81014ba:	bf00      	nop
 81014bc:	46bd      	mov	sp, r7
 81014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c2:	4770      	bx	lr

081014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81014c4:	b480      	push	{r7}
 81014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81014c8:	bf00      	nop
 81014ca:	46bd      	mov	sp, r7
 81014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014d0:	4770      	bx	lr

081014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81014d2:	b480      	push	{r7}
 81014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81014d6:	bf00      	nop
 81014d8:	46bd      	mov	sp, r7
 81014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014de:	4770      	bx	lr

081014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81014e0:	b580      	push	{r7, lr}
 81014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81014e4:	f000 f906 	bl	81016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81014e8:	bf00      	nop
 81014ea:	bd80      	pop	{r7, pc}

081014ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81014ec:	b580      	push	{r7, lr}
 81014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81014f0:	4802      	ldr	r0, [pc, #8]	; (81014fc <DMA1_Stream0_IRQHandler+0x10>)
 81014f2:	f001 faeb 	bl	8102acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81014f6:	bf00      	nop
 81014f8:	bd80      	pop	{r7, pc}
 81014fa:	bf00      	nop
 81014fc:	10000268 	.word	0x10000268

08101500 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101500:	b580      	push	{r7, lr}
 8101502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8101504:	4802      	ldr	r0, [pc, #8]	; (8101510 <DMA1_Stream1_IRQHandler+0x10>)
 8101506:	f001 fae1 	bl	8102acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810150a:	bf00      	nop
 810150c:	bd80      	pop	{r7, pc}
 810150e:	bf00      	nop
 8101510:	100002e0 	.word	0x100002e0

08101514 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8101514:	b580      	push	{r7, lr}
 8101516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8101518:	4802      	ldr	r0, [pc, #8]	; (8101524 <DMA1_Stream2_IRQHandler+0x10>)
 810151a:	f001 fad7 	bl	8102acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 810151e:	bf00      	nop
 8101520:	bd80      	pop	{r7, pc}
 8101522:	bf00      	nop
 8101524:	100000f0 	.word	0x100000f0

08101528 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8101528:	b580      	push	{r7, lr}
 810152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 810152c:	4802      	ldr	r0, [pc, #8]	; (8101538 <DMA1_Stream3_IRQHandler+0x10>)
 810152e:	f001 facd 	bl	8102acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8101532:	bf00      	nop
 8101534:	bd80      	pop	{r7, pc}
 8101536:	bf00      	nop
 8101538:	1000002c 	.word	0x1000002c

0810153c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 810153c:	b580      	push	{r7, lr}
 810153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8101540:	4802      	ldr	r0, [pc, #8]	; (810154c <I2C1_EV_IRQHandler+0x10>)
 8101542:	f003 fa49 	bl	81049d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8101546:	bf00      	nop
 8101548:	bd80      	pop	{r7, pc}
 810154a:	bf00      	nop
 810154c:	100000a4 	.word	0x100000a4

08101550 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8101550:	b580      	push	{r7, lr}
 8101552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8101554:	4802      	ldr	r0, [pc, #8]	; (8101560 <I2C1_ER_IRQHandler+0x10>)
 8101556:	f003 fa59 	bl	8104a0c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 810155a:	bf00      	nop
 810155c:	bd80      	pop	{r7, pc}
 810155e:	bf00      	nop
 8101560:	100000a4 	.word	0x100000a4

08101564 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101564:	b580      	push	{r7, lr}
 8101566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101568:	4802      	ldr	r0, [pc, #8]	; (8101574 <SPI1_IRQHandler+0x10>)
 810156a:	f006 fcd9 	bl	8107f20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 810156e:	bf00      	nop
 8101570:	bd80      	pop	{r7, pc}
 8101572:	bf00      	nop
 8101574:	100001e0 	.word	0x100001e0

08101578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101578:	f8df d034 	ldr.w	sp, [pc, #52]	; 81015b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810157c:	f7fe feac 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101580:	480c      	ldr	r0, [pc, #48]	; (81015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101582:	490d      	ldr	r1, [pc, #52]	; (81015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101584:	4a0d      	ldr	r2, [pc, #52]	; (81015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101588:	e002      	b.n	8101590 <LoopCopyDataInit>

0810158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810158e:	3304      	adds	r3, #4

08101590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101594:	d3f9      	bcc.n	810158a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101596:	4a0a      	ldr	r2, [pc, #40]	; (81015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101598:	4c0a      	ldr	r4, [pc, #40]	; (81015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810159c:	e001      	b.n	81015a2 <LoopFillZerobss>

0810159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81015a0:	3204      	adds	r2, #4

081015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81015a4:	d3fb      	bcc.n	810159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81015a6:	f006 ff8f 	bl	81084c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81015aa:	f7ff fd9f 	bl	81010ec <main>
  bx  lr
 81015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81015b0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81015b4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81015b8:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81015bc:	08108558 	.word	0x08108558
  ldr r2, =_sbss
 81015c0:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81015c4:	1000035c 	.word	0x1000035c

081015c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81015c8:	e7fe      	b.n	81015c8 <ADC3_IRQHandler>
	...

081015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81015cc:	b580      	push	{r7, lr}
 81015ce:	b082      	sub	sp, #8
 81015d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81015d2:	4b28      	ldr	r3, [pc, #160]	; (8101674 <HAL_Init+0xa8>)
 81015d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015d8:	4a26      	ldr	r2, [pc, #152]	; (8101674 <HAL_Init+0xa8>)
 81015da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81015de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81015e2:	4b24      	ldr	r3, [pc, #144]	; (8101674 <HAL_Init+0xa8>)
 81015e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81015ec:	603b      	str	r3, [r7, #0]
 81015ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81015f0:	4b21      	ldr	r3, [pc, #132]	; (8101678 <HAL_Init+0xac>)
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81015f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81015fc:	4a1e      	ldr	r2, [pc, #120]	; (8101678 <HAL_Init+0xac>)
 81015fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101602:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101604:	4b1c      	ldr	r3, [pc, #112]	; (8101678 <HAL_Init+0xac>)
 8101606:	681b      	ldr	r3, [r3, #0]
 8101608:	4a1b      	ldr	r2, [pc, #108]	; (8101678 <HAL_Init+0xac>)
 810160a:	f043 0301 	orr.w	r3, r3, #1
 810160e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101610:	2003      	movs	r0, #3
 8101612:	f000 f983 	bl	810191c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101616:	f005 f963 	bl	81068e0 <HAL_RCC_GetSysClockFreq>
 810161a:	4602      	mov	r2, r0
 810161c:	4b15      	ldr	r3, [pc, #84]	; (8101674 <HAL_Init+0xa8>)
 810161e:	699b      	ldr	r3, [r3, #24]
 8101620:	0a1b      	lsrs	r3, r3, #8
 8101622:	f003 030f 	and.w	r3, r3, #15
 8101626:	4915      	ldr	r1, [pc, #84]	; (810167c <HAL_Init+0xb0>)
 8101628:	5ccb      	ldrb	r3, [r1, r3]
 810162a:	f003 031f 	and.w	r3, r3, #31
 810162e:	fa22 f303 	lsr.w	r3, r2, r3
 8101632:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101634:	4b0f      	ldr	r3, [pc, #60]	; (8101674 <HAL_Init+0xa8>)
 8101636:	699b      	ldr	r3, [r3, #24]
 8101638:	f003 030f 	and.w	r3, r3, #15
 810163c:	4a0f      	ldr	r2, [pc, #60]	; (810167c <HAL_Init+0xb0>)
 810163e:	5cd3      	ldrb	r3, [r2, r3]
 8101640:	f003 031f 	and.w	r3, r3, #31
 8101644:	687a      	ldr	r2, [r7, #4]
 8101646:	fa22 f303 	lsr.w	r3, r2, r3
 810164a:	4a0d      	ldr	r2, [pc, #52]	; (8101680 <HAL_Init+0xb4>)
 810164c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810164e:	4b0c      	ldr	r3, [pc, #48]	; (8101680 <HAL_Init+0xb4>)
 8101650:	681b      	ldr	r3, [r3, #0]
 8101652:	4a0c      	ldr	r2, [pc, #48]	; (8101684 <HAL_Init+0xb8>)
 8101654:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101656:	2000      	movs	r0, #0
 8101658:	f000 f816 	bl	8101688 <HAL_InitTick>
 810165c:	4603      	mov	r3, r0
 810165e:	2b00      	cmp	r3, #0
 8101660:	d001      	beq.n	8101666 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101662:	2301      	movs	r3, #1
 8101664:	e002      	b.n	810166c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101666:	f7ff fefd 	bl	8101464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810166a:	2300      	movs	r3, #0
}
 810166c:	4618      	mov	r0, r3
 810166e:	3708      	adds	r7, #8
 8101670:	46bd      	mov	sp, r7
 8101672:	bd80      	pop	{r7, pc}
 8101674:	58024400 	.word	0x58024400
 8101678:	40024400 	.word	0x40024400
 810167c:	08108538 	.word	0x08108538
 8101680:	10000004 	.word	0x10000004
 8101684:	10000000 	.word	0x10000000

08101688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101688:	b580      	push	{r7, lr}
 810168a:	b082      	sub	sp, #8
 810168c:	af00      	add	r7, sp, #0
 810168e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101690:	4b15      	ldr	r3, [pc, #84]	; (81016e8 <HAL_InitTick+0x60>)
 8101692:	781b      	ldrb	r3, [r3, #0]
 8101694:	2b00      	cmp	r3, #0
 8101696:	d101      	bne.n	810169c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101698:	2301      	movs	r3, #1
 810169a:	e021      	b.n	81016e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810169c:	4b13      	ldr	r3, [pc, #76]	; (81016ec <HAL_InitTick+0x64>)
 810169e:	681a      	ldr	r2, [r3, #0]
 81016a0:	4b11      	ldr	r3, [pc, #68]	; (81016e8 <HAL_InitTick+0x60>)
 81016a2:	781b      	ldrb	r3, [r3, #0]
 81016a4:	4619      	mov	r1, r3
 81016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 81016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81016b2:	4618      	mov	r0, r3
 81016b4:	f000 f965 	bl	8101982 <HAL_SYSTICK_Config>
 81016b8:	4603      	mov	r3, r0
 81016ba:	2b00      	cmp	r3, #0
 81016bc:	d001      	beq.n	81016c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81016be:	2301      	movs	r3, #1
 81016c0:	e00e      	b.n	81016e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	2b0f      	cmp	r3, #15
 81016c6:	d80a      	bhi.n	81016de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81016c8:	2200      	movs	r2, #0
 81016ca:	6879      	ldr	r1, [r7, #4]
 81016cc:	f04f 30ff 	mov.w	r0, #4294967295
 81016d0:	f000 f92f 	bl	8101932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81016d4:	4a06      	ldr	r2, [pc, #24]	; (81016f0 <HAL_InitTick+0x68>)
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81016da:	2300      	movs	r3, #0
 81016dc:	e000      	b.n	81016e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81016de:	2301      	movs	r3, #1
}
 81016e0:	4618      	mov	r0, r3
 81016e2:	3708      	adds	r7, #8
 81016e4:	46bd      	mov	sp, r7
 81016e6:	bd80      	pop	{r7, pc}
 81016e8:	1000000c 	.word	0x1000000c
 81016ec:	10000000 	.word	0x10000000
 81016f0:	10000008 	.word	0x10000008

081016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81016f4:	b480      	push	{r7}
 81016f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81016f8:	4b06      	ldr	r3, [pc, #24]	; (8101714 <HAL_IncTick+0x20>)
 81016fa:	781b      	ldrb	r3, [r3, #0]
 81016fc:	461a      	mov	r2, r3
 81016fe:	4b06      	ldr	r3, [pc, #24]	; (8101718 <HAL_IncTick+0x24>)
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	4413      	add	r3, r2
 8101704:	4a04      	ldr	r2, [pc, #16]	; (8101718 <HAL_IncTick+0x24>)
 8101706:	6013      	str	r3, [r2, #0]
}
 8101708:	bf00      	nop
 810170a:	46bd      	mov	sp, r7
 810170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101710:	4770      	bx	lr
 8101712:	bf00      	nop
 8101714:	1000000c 	.word	0x1000000c
 8101718:	10000358 	.word	0x10000358

0810171c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810171c:	b480      	push	{r7}
 810171e:	af00      	add	r7, sp, #0
  return uwTick;
 8101720:	4b03      	ldr	r3, [pc, #12]	; (8101730 <HAL_GetTick+0x14>)
 8101722:	681b      	ldr	r3, [r3, #0]
}
 8101724:	4618      	mov	r0, r3
 8101726:	46bd      	mov	sp, r7
 8101728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810172c:	4770      	bx	lr
 810172e:	bf00      	nop
 8101730:	10000358 	.word	0x10000358

08101734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	b084      	sub	sp, #16
 8101738:	af00      	add	r7, sp, #0
 810173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810173c:	f7ff ffee 	bl	810171c <HAL_GetTick>
 8101740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101742:	687b      	ldr	r3, [r7, #4]
 8101744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101746:	68fb      	ldr	r3, [r7, #12]
 8101748:	f1b3 3fff 	cmp.w	r3, #4294967295
 810174c:	d005      	beq.n	810175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810174e:	4b0a      	ldr	r3, [pc, #40]	; (8101778 <HAL_Delay+0x44>)
 8101750:	781b      	ldrb	r3, [r3, #0]
 8101752:	461a      	mov	r2, r3
 8101754:	68fb      	ldr	r3, [r7, #12]
 8101756:	4413      	add	r3, r2
 8101758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810175a:	bf00      	nop
 810175c:	f7ff ffde 	bl	810171c <HAL_GetTick>
 8101760:	4602      	mov	r2, r0
 8101762:	68bb      	ldr	r3, [r7, #8]
 8101764:	1ad3      	subs	r3, r2, r3
 8101766:	68fa      	ldr	r2, [r7, #12]
 8101768:	429a      	cmp	r2, r3
 810176a:	d8f7      	bhi.n	810175c <HAL_Delay+0x28>
  {
  }
}
 810176c:	bf00      	nop
 810176e:	bf00      	nop
 8101770:	3710      	adds	r7, #16
 8101772:	46bd      	mov	sp, r7
 8101774:	bd80      	pop	{r7, pc}
 8101776:	bf00      	nop
 8101778:	1000000c 	.word	0x1000000c

0810177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810177c:	b480      	push	{r7}
 810177e:	b085      	sub	sp, #20
 8101780:	af00      	add	r7, sp, #0
 8101782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101784:	687b      	ldr	r3, [r7, #4]
 8101786:	f003 0307 	and.w	r3, r3, #7
 810178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810178c:	4b0c      	ldr	r3, [pc, #48]	; (81017c0 <__NVIC_SetPriorityGrouping+0x44>)
 810178e:	68db      	ldr	r3, [r3, #12]
 8101790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101792:	68ba      	ldr	r2, [r7, #8]
 8101794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101798:	4013      	ands	r3, r2
 810179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810179c:	68fb      	ldr	r3, [r7, #12]
 810179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81017a0:	68bb      	ldr	r3, [r7, #8]
 81017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81017ae:	4a04      	ldr	r2, [pc, #16]	; (81017c0 <__NVIC_SetPriorityGrouping+0x44>)
 81017b0:	68bb      	ldr	r3, [r7, #8]
 81017b2:	60d3      	str	r3, [r2, #12]
}
 81017b4:	bf00      	nop
 81017b6:	3714      	adds	r7, #20
 81017b8:	46bd      	mov	sp, r7
 81017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017be:	4770      	bx	lr
 81017c0:	e000ed00 	.word	0xe000ed00

081017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81017c4:	b480      	push	{r7}
 81017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81017c8:	4b04      	ldr	r3, [pc, #16]	; (81017dc <__NVIC_GetPriorityGrouping+0x18>)
 81017ca:	68db      	ldr	r3, [r3, #12]
 81017cc:	0a1b      	lsrs	r3, r3, #8
 81017ce:	f003 0307 	and.w	r3, r3, #7
}
 81017d2:	4618      	mov	r0, r3
 81017d4:	46bd      	mov	sp, r7
 81017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017da:	4770      	bx	lr
 81017dc:	e000ed00 	.word	0xe000ed00

081017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81017e0:	b480      	push	{r7}
 81017e2:	b083      	sub	sp, #12
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	4603      	mov	r3, r0
 81017e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017ee:	2b00      	cmp	r3, #0
 81017f0:	db0b      	blt.n	810180a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81017f2:	88fb      	ldrh	r3, [r7, #6]
 81017f4:	f003 021f 	and.w	r2, r3, #31
 81017f8:	4907      	ldr	r1, [pc, #28]	; (8101818 <__NVIC_EnableIRQ+0x38>)
 81017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017fe:	095b      	lsrs	r3, r3, #5
 8101800:	2001      	movs	r0, #1
 8101802:	fa00 f202 	lsl.w	r2, r0, r2
 8101806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810180a:	bf00      	nop
 810180c:	370c      	adds	r7, #12
 810180e:	46bd      	mov	sp, r7
 8101810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101814:	4770      	bx	lr
 8101816:	bf00      	nop
 8101818:	e000e100 	.word	0xe000e100

0810181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810181c:	b480      	push	{r7}
 810181e:	b083      	sub	sp, #12
 8101820:	af00      	add	r7, sp, #0
 8101822:	4603      	mov	r3, r0
 8101824:	6039      	str	r1, [r7, #0]
 8101826:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810182c:	2b00      	cmp	r3, #0
 810182e:	db0a      	blt.n	8101846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101830:	683b      	ldr	r3, [r7, #0]
 8101832:	b2da      	uxtb	r2, r3
 8101834:	490c      	ldr	r1, [pc, #48]	; (8101868 <__NVIC_SetPriority+0x4c>)
 8101836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810183a:	0112      	lsls	r2, r2, #4
 810183c:	b2d2      	uxtb	r2, r2
 810183e:	440b      	add	r3, r1
 8101840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101844:	e00a      	b.n	810185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101846:	683b      	ldr	r3, [r7, #0]
 8101848:	b2da      	uxtb	r2, r3
 810184a:	4908      	ldr	r1, [pc, #32]	; (810186c <__NVIC_SetPriority+0x50>)
 810184c:	88fb      	ldrh	r3, [r7, #6]
 810184e:	f003 030f 	and.w	r3, r3, #15
 8101852:	3b04      	subs	r3, #4
 8101854:	0112      	lsls	r2, r2, #4
 8101856:	b2d2      	uxtb	r2, r2
 8101858:	440b      	add	r3, r1
 810185a:	761a      	strb	r2, [r3, #24]
}
 810185c:	bf00      	nop
 810185e:	370c      	adds	r7, #12
 8101860:	46bd      	mov	sp, r7
 8101862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101866:	4770      	bx	lr
 8101868:	e000e100 	.word	0xe000e100
 810186c:	e000ed00 	.word	0xe000ed00

08101870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101870:	b480      	push	{r7}
 8101872:	b089      	sub	sp, #36	; 0x24
 8101874:	af00      	add	r7, sp, #0
 8101876:	60f8      	str	r0, [r7, #12]
 8101878:	60b9      	str	r1, [r7, #8]
 810187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810187c:	68fb      	ldr	r3, [r7, #12]
 810187e:	f003 0307 	and.w	r3, r3, #7
 8101882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101884:	69fb      	ldr	r3, [r7, #28]
 8101886:	f1c3 0307 	rsb	r3, r3, #7
 810188a:	2b04      	cmp	r3, #4
 810188c:	bf28      	it	cs
 810188e:	2304      	movcs	r3, #4
 8101890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101892:	69fb      	ldr	r3, [r7, #28]
 8101894:	3304      	adds	r3, #4
 8101896:	2b06      	cmp	r3, #6
 8101898:	d902      	bls.n	81018a0 <NVIC_EncodePriority+0x30>
 810189a:	69fb      	ldr	r3, [r7, #28]
 810189c:	3b03      	subs	r3, #3
 810189e:	e000      	b.n	81018a2 <NVIC_EncodePriority+0x32>
 81018a0:	2300      	movs	r3, #0
 81018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81018a4:	f04f 32ff 	mov.w	r2, #4294967295
 81018a8:	69bb      	ldr	r3, [r7, #24]
 81018aa:	fa02 f303 	lsl.w	r3, r2, r3
 81018ae:	43da      	mvns	r2, r3
 81018b0:	68bb      	ldr	r3, [r7, #8]
 81018b2:	401a      	ands	r2, r3
 81018b4:	697b      	ldr	r3, [r7, #20]
 81018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81018b8:	f04f 31ff 	mov.w	r1, #4294967295
 81018bc:	697b      	ldr	r3, [r7, #20]
 81018be:	fa01 f303 	lsl.w	r3, r1, r3
 81018c2:	43d9      	mvns	r1, r3
 81018c4:	687b      	ldr	r3, [r7, #4]
 81018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81018c8:	4313      	orrs	r3, r2
         );
}
 81018ca:	4618      	mov	r0, r3
 81018cc:	3724      	adds	r7, #36	; 0x24
 81018ce:	46bd      	mov	sp, r7
 81018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d4:	4770      	bx	lr
	...

081018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81018d8:	b580      	push	{r7, lr}
 81018da:	b082      	sub	sp, #8
 81018dc:	af00      	add	r7, sp, #0
 81018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	3b01      	subs	r3, #1
 81018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81018e8:	d301      	bcc.n	81018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81018ea:	2301      	movs	r3, #1
 81018ec:	e00f      	b.n	810190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81018ee:	4a0a      	ldr	r2, [pc, #40]	; (8101918 <SysTick_Config+0x40>)
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	3b01      	subs	r3, #1
 81018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81018f6:	210f      	movs	r1, #15
 81018f8:	f04f 30ff 	mov.w	r0, #4294967295
 81018fc:	f7ff ff8e 	bl	810181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101900:	4b05      	ldr	r3, [pc, #20]	; (8101918 <SysTick_Config+0x40>)
 8101902:	2200      	movs	r2, #0
 8101904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101906:	4b04      	ldr	r3, [pc, #16]	; (8101918 <SysTick_Config+0x40>)
 8101908:	2207      	movs	r2, #7
 810190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810190c:	2300      	movs	r3, #0
}
 810190e:	4618      	mov	r0, r3
 8101910:	3708      	adds	r7, #8
 8101912:	46bd      	mov	sp, r7
 8101914:	bd80      	pop	{r7, pc}
 8101916:	bf00      	nop
 8101918:	e000e010 	.word	0xe000e010

0810191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810191c:	b580      	push	{r7, lr}
 810191e:	b082      	sub	sp, #8
 8101920:	af00      	add	r7, sp, #0
 8101922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101924:	6878      	ldr	r0, [r7, #4]
 8101926:	f7ff ff29 	bl	810177c <__NVIC_SetPriorityGrouping>
}
 810192a:	bf00      	nop
 810192c:	3708      	adds	r7, #8
 810192e:	46bd      	mov	sp, r7
 8101930:	bd80      	pop	{r7, pc}

08101932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101932:	b580      	push	{r7, lr}
 8101934:	b086      	sub	sp, #24
 8101936:	af00      	add	r7, sp, #0
 8101938:	4603      	mov	r3, r0
 810193a:	60b9      	str	r1, [r7, #8]
 810193c:	607a      	str	r2, [r7, #4]
 810193e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101940:	f7ff ff40 	bl	81017c4 <__NVIC_GetPriorityGrouping>
 8101944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101946:	687a      	ldr	r2, [r7, #4]
 8101948:	68b9      	ldr	r1, [r7, #8]
 810194a:	6978      	ldr	r0, [r7, #20]
 810194c:	f7ff ff90 	bl	8101870 <NVIC_EncodePriority>
 8101950:	4602      	mov	r2, r0
 8101952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101956:	4611      	mov	r1, r2
 8101958:	4618      	mov	r0, r3
 810195a:	f7ff ff5f 	bl	810181c <__NVIC_SetPriority>
}
 810195e:	bf00      	nop
 8101960:	3718      	adds	r7, #24
 8101962:	46bd      	mov	sp, r7
 8101964:	bd80      	pop	{r7, pc}

08101966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101966:	b580      	push	{r7, lr}
 8101968:	b082      	sub	sp, #8
 810196a:	af00      	add	r7, sp, #0
 810196c:	4603      	mov	r3, r0
 810196e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101974:	4618      	mov	r0, r3
 8101976:	f7ff ff33 	bl	81017e0 <__NVIC_EnableIRQ>
}
 810197a:	bf00      	nop
 810197c:	3708      	adds	r7, #8
 810197e:	46bd      	mov	sp, r7
 8101980:	bd80      	pop	{r7, pc}

08101982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101982:	b580      	push	{r7, lr}
 8101984:	b082      	sub	sp, #8
 8101986:	af00      	add	r7, sp, #0
 8101988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810198a:	6878      	ldr	r0, [r7, #4]
 810198c:	f7ff ffa4 	bl	81018d8 <SysTick_Config>
 8101990:	4603      	mov	r3, r0
}
 8101992:	4618      	mov	r0, r3
 8101994:	3708      	adds	r7, #8
 8101996:	46bd      	mov	sp, r7
 8101998:	bd80      	pop	{r7, pc}
	...

0810199c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 810199c:	b480      	push	{r7}
 810199e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81019a0:	f3bf 8f5f 	dmb	sy
}
 81019a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81019a6:	4b07      	ldr	r3, [pc, #28]	; (81019c4 <HAL_MPU_Disable+0x28>)
 81019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81019aa:	4a06      	ldr	r2, [pc, #24]	; (81019c4 <HAL_MPU_Disable+0x28>)
 81019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81019b0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81019b2:	4b05      	ldr	r3, [pc, #20]	; (81019c8 <HAL_MPU_Disable+0x2c>)
 81019b4:	2200      	movs	r2, #0
 81019b6:	605a      	str	r2, [r3, #4]
}
 81019b8:	bf00      	nop
 81019ba:	46bd      	mov	sp, r7
 81019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c0:	4770      	bx	lr
 81019c2:	bf00      	nop
 81019c4:	e000ed00 	.word	0xe000ed00
 81019c8:	e000ed90 	.word	0xe000ed90

081019cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 81019cc:	b480      	push	{r7}
 81019ce:	b083      	sub	sp, #12
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 81019d4:	4a0b      	ldr	r2, [pc, #44]	; (8101a04 <HAL_MPU_Enable+0x38>)
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	f043 0301 	orr.w	r3, r3, #1
 81019dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 81019de:	4b0a      	ldr	r3, [pc, #40]	; (8101a08 <HAL_MPU_Enable+0x3c>)
 81019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81019e2:	4a09      	ldr	r2, [pc, #36]	; (8101a08 <HAL_MPU_Enable+0x3c>)
 81019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81019e8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 81019ea:	f3bf 8f4f 	dsb	sy
}
 81019ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81019f0:	f3bf 8f6f 	isb	sy
}
 81019f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 81019f6:	bf00      	nop
 81019f8:	370c      	adds	r7, #12
 81019fa:	46bd      	mov	sp, r7
 81019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a00:	4770      	bx	lr
 8101a02:	bf00      	nop
 8101a04:	e000ed90 	.word	0xe000ed90
 8101a08:	e000ed00 	.word	0xe000ed00

08101a0c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8101a0c:	b480      	push	{r7}
 8101a0e:	b083      	sub	sp, #12
 8101a10:	af00      	add	r7, sp, #0
 8101a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	785a      	ldrb	r2, [r3, #1]
 8101a18:	4b1d      	ldr	r3, [pc, #116]	; (8101a90 <HAL_MPU_ConfigRegion+0x84>)
 8101a1a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	781b      	ldrb	r3, [r3, #0]
 8101a20:	2b00      	cmp	r3, #0
 8101a22:	d029      	beq.n	8101a78 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8101a24:	4a1a      	ldr	r2, [pc, #104]	; (8101a90 <HAL_MPU_ConfigRegion+0x84>)
 8101a26:	687b      	ldr	r3, [r7, #4]
 8101a28:	685b      	ldr	r3, [r3, #4]
 8101a2a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	7b1b      	ldrb	r3, [r3, #12]
 8101a30:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	7adb      	ldrb	r3, [r3, #11]
 8101a36:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8101a3a:	687b      	ldr	r3, [r7, #4]
 8101a3c:	7a9b      	ldrb	r3, [r3, #10]
 8101a3e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8101a40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	7b5b      	ldrb	r3, [r3, #13]
 8101a46:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8101a48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	7b9b      	ldrb	r3, [r3, #14]
 8101a4e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8101a50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	7bdb      	ldrb	r3, [r3, #15]
 8101a56:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8101a58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8101a5a:	687b      	ldr	r3, [r7, #4]
 8101a5c:	7a5b      	ldrb	r3, [r3, #9]
 8101a5e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8101a60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	7a1b      	ldrb	r3, [r3, #8]
 8101a66:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8101a68:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8101a6a:	687a      	ldr	r2, [r7, #4]
 8101a6c:	7812      	ldrb	r2, [r2, #0]
 8101a6e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101a70:	4a07      	ldr	r2, [pc, #28]	; (8101a90 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8101a72:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101a74:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8101a76:	e005      	b.n	8101a84 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8101a78:	4b05      	ldr	r3, [pc, #20]	; (8101a90 <HAL_MPU_ConfigRegion+0x84>)
 8101a7a:	2200      	movs	r2, #0
 8101a7c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8101a7e:	4b04      	ldr	r3, [pc, #16]	; (8101a90 <HAL_MPU_ConfigRegion+0x84>)
 8101a80:	2200      	movs	r2, #0
 8101a82:	611a      	str	r2, [r3, #16]
}
 8101a84:	bf00      	nop
 8101a86:	370c      	adds	r7, #12
 8101a88:	46bd      	mov	sp, r7
 8101a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a8e:	4770      	bx	lr
 8101a90:	e000ed90 	.word	0xe000ed90

08101a94 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101a94:	b480      	push	{r7}
 8101a96:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101a98:	4b07      	ldr	r3, [pc, #28]	; (8101ab8 <HAL_GetCurrentCPUID+0x24>)
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	091b      	lsrs	r3, r3, #4
 8101a9e:	f003 030f 	and.w	r3, r3, #15
 8101aa2:	2b07      	cmp	r3, #7
 8101aa4:	d101      	bne.n	8101aaa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101aa6:	2303      	movs	r3, #3
 8101aa8:	e000      	b.n	8101aac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101aaa:	2301      	movs	r3, #1
  }
}
 8101aac:	4618      	mov	r0, r3
 8101aae:	46bd      	mov	sp, r7
 8101ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab4:	4770      	bx	lr
 8101ab6:	bf00      	nop
 8101ab8:	e000ed00 	.word	0xe000ed00

08101abc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8101abc:	b580      	push	{r7, lr}
 8101abe:	b086      	sub	sp, #24
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8101ac4:	f7ff fe2a 	bl	810171c <HAL_GetTick>
 8101ac8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	2b00      	cmp	r3, #0
 8101ace:	d101      	bne.n	8101ad4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8101ad0:	2301      	movs	r3, #1
 8101ad2:	e314      	b.n	81020fe <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	4a66      	ldr	r2, [pc, #408]	; (8101c74 <HAL_DMA_Init+0x1b8>)
 8101ada:	4293      	cmp	r3, r2
 8101adc:	d04a      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4a65      	ldr	r2, [pc, #404]	; (8101c78 <HAL_DMA_Init+0x1bc>)
 8101ae4:	4293      	cmp	r3, r2
 8101ae6:	d045      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	681b      	ldr	r3, [r3, #0]
 8101aec:	4a63      	ldr	r2, [pc, #396]	; (8101c7c <HAL_DMA_Init+0x1c0>)
 8101aee:	4293      	cmp	r3, r2
 8101af0:	d040      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	681b      	ldr	r3, [r3, #0]
 8101af6:	4a62      	ldr	r2, [pc, #392]	; (8101c80 <HAL_DMA_Init+0x1c4>)
 8101af8:	4293      	cmp	r3, r2
 8101afa:	d03b      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	4a60      	ldr	r2, [pc, #384]	; (8101c84 <HAL_DMA_Init+0x1c8>)
 8101b02:	4293      	cmp	r3, r2
 8101b04:	d036      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	4a5f      	ldr	r2, [pc, #380]	; (8101c88 <HAL_DMA_Init+0x1cc>)
 8101b0c:	4293      	cmp	r3, r2
 8101b0e:	d031      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	4a5d      	ldr	r2, [pc, #372]	; (8101c8c <HAL_DMA_Init+0x1d0>)
 8101b16:	4293      	cmp	r3, r2
 8101b18:	d02c      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	4a5c      	ldr	r2, [pc, #368]	; (8101c90 <HAL_DMA_Init+0x1d4>)
 8101b20:	4293      	cmp	r3, r2
 8101b22:	d027      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	4a5a      	ldr	r2, [pc, #360]	; (8101c94 <HAL_DMA_Init+0x1d8>)
 8101b2a:	4293      	cmp	r3, r2
 8101b2c:	d022      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	681b      	ldr	r3, [r3, #0]
 8101b32:	4a59      	ldr	r2, [pc, #356]	; (8101c98 <HAL_DMA_Init+0x1dc>)
 8101b34:	4293      	cmp	r3, r2
 8101b36:	d01d      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	4a57      	ldr	r2, [pc, #348]	; (8101c9c <HAL_DMA_Init+0x1e0>)
 8101b3e:	4293      	cmp	r3, r2
 8101b40:	d018      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	4a56      	ldr	r2, [pc, #344]	; (8101ca0 <HAL_DMA_Init+0x1e4>)
 8101b48:	4293      	cmp	r3, r2
 8101b4a:	d013      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	4a54      	ldr	r2, [pc, #336]	; (8101ca4 <HAL_DMA_Init+0x1e8>)
 8101b52:	4293      	cmp	r3, r2
 8101b54:	d00e      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b56:	687b      	ldr	r3, [r7, #4]
 8101b58:	681b      	ldr	r3, [r3, #0]
 8101b5a:	4a53      	ldr	r2, [pc, #332]	; (8101ca8 <HAL_DMA_Init+0x1ec>)
 8101b5c:	4293      	cmp	r3, r2
 8101b5e:	d009      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	681b      	ldr	r3, [r3, #0]
 8101b64:	4a51      	ldr	r2, [pc, #324]	; (8101cac <HAL_DMA_Init+0x1f0>)
 8101b66:	4293      	cmp	r3, r2
 8101b68:	d004      	beq.n	8101b74 <HAL_DMA_Init+0xb8>
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	4a50      	ldr	r2, [pc, #320]	; (8101cb0 <HAL_DMA_Init+0x1f4>)
 8101b70:	4293      	cmp	r3, r2
 8101b72:	d101      	bne.n	8101b78 <HAL_DMA_Init+0xbc>
 8101b74:	2301      	movs	r3, #1
 8101b76:	e000      	b.n	8101b7a <HAL_DMA_Init+0xbe>
 8101b78:	2300      	movs	r3, #0
 8101b7a:	2b00      	cmp	r3, #0
 8101b7c:	f000 813b 	beq.w	8101df6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	2200      	movs	r2, #0
 8101b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	2202      	movs	r2, #2
 8101b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	681b      	ldr	r3, [r3, #0]
 8101b94:	4a37      	ldr	r2, [pc, #220]	; (8101c74 <HAL_DMA_Init+0x1b8>)
 8101b96:	4293      	cmp	r3, r2
 8101b98:	d04a      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	4a36      	ldr	r2, [pc, #216]	; (8101c78 <HAL_DMA_Init+0x1bc>)
 8101ba0:	4293      	cmp	r3, r2
 8101ba2:	d045      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	681b      	ldr	r3, [r3, #0]
 8101ba8:	4a34      	ldr	r2, [pc, #208]	; (8101c7c <HAL_DMA_Init+0x1c0>)
 8101baa:	4293      	cmp	r3, r2
 8101bac:	d040      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	4a33      	ldr	r2, [pc, #204]	; (8101c80 <HAL_DMA_Init+0x1c4>)
 8101bb4:	4293      	cmp	r3, r2
 8101bb6:	d03b      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	4a31      	ldr	r2, [pc, #196]	; (8101c84 <HAL_DMA_Init+0x1c8>)
 8101bbe:	4293      	cmp	r3, r2
 8101bc0:	d036      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	4a30      	ldr	r2, [pc, #192]	; (8101c88 <HAL_DMA_Init+0x1cc>)
 8101bc8:	4293      	cmp	r3, r2
 8101bca:	d031      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	4a2e      	ldr	r2, [pc, #184]	; (8101c8c <HAL_DMA_Init+0x1d0>)
 8101bd2:	4293      	cmp	r3, r2
 8101bd4:	d02c      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	4a2d      	ldr	r2, [pc, #180]	; (8101c90 <HAL_DMA_Init+0x1d4>)
 8101bdc:	4293      	cmp	r3, r2
 8101bde:	d027      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	4a2b      	ldr	r2, [pc, #172]	; (8101c94 <HAL_DMA_Init+0x1d8>)
 8101be6:	4293      	cmp	r3, r2
 8101be8:	d022      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	4a2a      	ldr	r2, [pc, #168]	; (8101c98 <HAL_DMA_Init+0x1dc>)
 8101bf0:	4293      	cmp	r3, r2
 8101bf2:	d01d      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	4a28      	ldr	r2, [pc, #160]	; (8101c9c <HAL_DMA_Init+0x1e0>)
 8101bfa:	4293      	cmp	r3, r2
 8101bfc:	d018      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	4a27      	ldr	r2, [pc, #156]	; (8101ca0 <HAL_DMA_Init+0x1e4>)
 8101c04:	4293      	cmp	r3, r2
 8101c06:	d013      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	4a25      	ldr	r2, [pc, #148]	; (8101ca4 <HAL_DMA_Init+0x1e8>)
 8101c0e:	4293      	cmp	r3, r2
 8101c10:	d00e      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	4a24      	ldr	r2, [pc, #144]	; (8101ca8 <HAL_DMA_Init+0x1ec>)
 8101c18:	4293      	cmp	r3, r2
 8101c1a:	d009      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101c1c:	687b      	ldr	r3, [r7, #4]
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	4a22      	ldr	r2, [pc, #136]	; (8101cac <HAL_DMA_Init+0x1f0>)
 8101c22:	4293      	cmp	r3, r2
 8101c24:	d004      	beq.n	8101c30 <HAL_DMA_Init+0x174>
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	681b      	ldr	r3, [r3, #0]
 8101c2a:	4a21      	ldr	r2, [pc, #132]	; (8101cb0 <HAL_DMA_Init+0x1f4>)
 8101c2c:	4293      	cmp	r3, r2
 8101c2e:	d108      	bne.n	8101c42 <HAL_DMA_Init+0x186>
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	681a      	ldr	r2, [r3, #0]
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	681b      	ldr	r3, [r3, #0]
 8101c3a:	f022 0201 	bic.w	r2, r2, #1
 8101c3e:	601a      	str	r2, [r3, #0]
 8101c40:	e007      	b.n	8101c52 <HAL_DMA_Init+0x196>
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	681a      	ldr	r2, [r3, #0]
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	f022 0201 	bic.w	r2, r2, #1
 8101c50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101c52:	e02f      	b.n	8101cb4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101c54:	f7ff fd62 	bl	810171c <HAL_GetTick>
 8101c58:	4602      	mov	r2, r0
 8101c5a:	693b      	ldr	r3, [r7, #16]
 8101c5c:	1ad3      	subs	r3, r2, r3
 8101c5e:	2b05      	cmp	r3, #5
 8101c60:	d928      	bls.n	8101cb4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	2220      	movs	r2, #32
 8101c66:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	2203      	movs	r2, #3
 8101c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8101c70:	2301      	movs	r3, #1
 8101c72:	e244      	b.n	81020fe <HAL_DMA_Init+0x642>
 8101c74:	40020010 	.word	0x40020010
 8101c78:	40020028 	.word	0x40020028
 8101c7c:	40020040 	.word	0x40020040
 8101c80:	40020058 	.word	0x40020058
 8101c84:	40020070 	.word	0x40020070
 8101c88:	40020088 	.word	0x40020088
 8101c8c:	400200a0 	.word	0x400200a0
 8101c90:	400200b8 	.word	0x400200b8
 8101c94:	40020410 	.word	0x40020410
 8101c98:	40020428 	.word	0x40020428
 8101c9c:	40020440 	.word	0x40020440
 8101ca0:	40020458 	.word	0x40020458
 8101ca4:	40020470 	.word	0x40020470
 8101ca8:	40020488 	.word	0x40020488
 8101cac:	400204a0 	.word	0x400204a0
 8101cb0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	f003 0301 	and.w	r3, r3, #1
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d1c8      	bne.n	8101c54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	681b      	ldr	r3, [r3, #0]
 8101cc8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8101cca:	697a      	ldr	r2, [r7, #20]
 8101ccc:	4b84      	ldr	r3, [pc, #528]	; (8101ee0 <HAL_DMA_Init+0x424>)
 8101cce:	4013      	ands	r3, r2
 8101cd0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8101cda:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	691b      	ldr	r3, [r3, #16]
 8101ce0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101ce2:	687b      	ldr	r3, [r7, #4]
 8101ce4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8101ce6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	699b      	ldr	r3, [r3, #24]
 8101cec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8101cf2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	6a1b      	ldr	r3, [r3, #32]
 8101cf8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8101cfa:	697a      	ldr	r2, [r7, #20]
 8101cfc:	4313      	orrs	r3, r2
 8101cfe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d04:	2b04      	cmp	r3, #4
 8101d06:	d107      	bne.n	8101d18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101d10:	4313      	orrs	r3, r2
 8101d12:	697a      	ldr	r2, [r7, #20]
 8101d14:	4313      	orrs	r3, r2
 8101d16:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8101d18:	4b72      	ldr	r3, [pc, #456]	; (8101ee4 <HAL_DMA_Init+0x428>)
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	0c1b      	lsrs	r3, r3, #16
 8101d1e:	041b      	lsls	r3, r3, #16
 8101d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101d24:	d328      	bcc.n	8101d78 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	685b      	ldr	r3, [r3, #4]
 8101d2a:	2b28      	cmp	r3, #40	; 0x28
 8101d2c:	d903      	bls.n	8101d36 <HAL_DMA_Init+0x27a>
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	685b      	ldr	r3, [r3, #4]
 8101d32:	2b2e      	cmp	r3, #46	; 0x2e
 8101d34:	d917      	bls.n	8101d66 <HAL_DMA_Init+0x2aa>
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	685b      	ldr	r3, [r3, #4]
 8101d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8101d3c:	d903      	bls.n	8101d46 <HAL_DMA_Init+0x28a>
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	685b      	ldr	r3, [r3, #4]
 8101d42:	2b42      	cmp	r3, #66	; 0x42
 8101d44:	d90f      	bls.n	8101d66 <HAL_DMA_Init+0x2aa>
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	685b      	ldr	r3, [r3, #4]
 8101d4a:	2b46      	cmp	r3, #70	; 0x46
 8101d4c:	d903      	bls.n	8101d56 <HAL_DMA_Init+0x29a>
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	685b      	ldr	r3, [r3, #4]
 8101d52:	2b48      	cmp	r3, #72	; 0x48
 8101d54:	d907      	bls.n	8101d66 <HAL_DMA_Init+0x2aa>
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	685b      	ldr	r3, [r3, #4]
 8101d5a:	2b4e      	cmp	r3, #78	; 0x4e
 8101d5c:	d905      	bls.n	8101d6a <HAL_DMA_Init+0x2ae>
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	685b      	ldr	r3, [r3, #4]
 8101d62:	2b52      	cmp	r3, #82	; 0x52
 8101d64:	d801      	bhi.n	8101d6a <HAL_DMA_Init+0x2ae>
 8101d66:	2301      	movs	r3, #1
 8101d68:	e000      	b.n	8101d6c <HAL_DMA_Init+0x2b0>
 8101d6a:	2300      	movs	r3, #0
 8101d6c:	2b00      	cmp	r3, #0
 8101d6e:	d003      	beq.n	8101d78 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8101d70:	697b      	ldr	r3, [r7, #20]
 8101d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101d76:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	697a      	ldr	r2, [r7, #20]
 8101d7e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	681b      	ldr	r3, [r3, #0]
 8101d84:	695b      	ldr	r3, [r3, #20]
 8101d86:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8101d88:	697b      	ldr	r3, [r7, #20]
 8101d8a:	f023 0307 	bic.w	r3, r3, #7
 8101d8e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d94:	697a      	ldr	r2, [r7, #20]
 8101d96:	4313      	orrs	r3, r2
 8101d98:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d9e:	2b04      	cmp	r3, #4
 8101da0:	d117      	bne.n	8101dd2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8101da2:	687b      	ldr	r3, [r7, #4]
 8101da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101da6:	697a      	ldr	r2, [r7, #20]
 8101da8:	4313      	orrs	r3, r2
 8101daa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101db0:	2b00      	cmp	r3, #0
 8101db2:	d00e      	beq.n	8101dd2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8101db4:	6878      	ldr	r0, [r7, #4]
 8101db6:	f002 f82b 	bl	8103e10 <DMA_CheckFifoParam>
 8101dba:	4603      	mov	r3, r0
 8101dbc:	2b00      	cmp	r3, #0
 8101dbe:	d008      	beq.n	8101dd2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101dc0:	687b      	ldr	r3, [r7, #4]
 8101dc2:	2240      	movs	r2, #64	; 0x40
 8101dc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	2201      	movs	r2, #1
 8101dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8101dce:	2301      	movs	r3, #1
 8101dd0:	e195      	b.n	81020fe <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	697a      	ldr	r2, [r7, #20]
 8101dd8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101dda:	6878      	ldr	r0, [r7, #4]
 8101ddc:	f001 ff66 	bl	8103cac <DMA_CalcBaseAndBitshift>
 8101de0:	4603      	mov	r3, r0
 8101de2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101de8:	f003 031f 	and.w	r3, r3, #31
 8101dec:	223f      	movs	r2, #63	; 0x3f
 8101dee:	409a      	lsls	r2, r3
 8101df0:	68bb      	ldr	r3, [r7, #8]
 8101df2:	609a      	str	r2, [r3, #8]
 8101df4:	e0cb      	b.n	8101f8e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	681b      	ldr	r3, [r3, #0]
 8101dfa:	4a3b      	ldr	r2, [pc, #236]	; (8101ee8 <HAL_DMA_Init+0x42c>)
 8101dfc:	4293      	cmp	r3, r2
 8101dfe:	d022      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	681b      	ldr	r3, [r3, #0]
 8101e04:	4a39      	ldr	r2, [pc, #228]	; (8101eec <HAL_DMA_Init+0x430>)
 8101e06:	4293      	cmp	r3, r2
 8101e08:	d01d      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	681b      	ldr	r3, [r3, #0]
 8101e0e:	4a38      	ldr	r2, [pc, #224]	; (8101ef0 <HAL_DMA_Init+0x434>)
 8101e10:	4293      	cmp	r3, r2
 8101e12:	d018      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	681b      	ldr	r3, [r3, #0]
 8101e18:	4a36      	ldr	r2, [pc, #216]	; (8101ef4 <HAL_DMA_Init+0x438>)
 8101e1a:	4293      	cmp	r3, r2
 8101e1c:	d013      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	4a35      	ldr	r2, [pc, #212]	; (8101ef8 <HAL_DMA_Init+0x43c>)
 8101e24:	4293      	cmp	r3, r2
 8101e26:	d00e      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	681b      	ldr	r3, [r3, #0]
 8101e2c:	4a33      	ldr	r2, [pc, #204]	; (8101efc <HAL_DMA_Init+0x440>)
 8101e2e:	4293      	cmp	r3, r2
 8101e30:	d009      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	681b      	ldr	r3, [r3, #0]
 8101e36:	4a32      	ldr	r2, [pc, #200]	; (8101f00 <HAL_DMA_Init+0x444>)
 8101e38:	4293      	cmp	r3, r2
 8101e3a:	d004      	beq.n	8101e46 <HAL_DMA_Init+0x38a>
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	681b      	ldr	r3, [r3, #0]
 8101e40:	4a30      	ldr	r2, [pc, #192]	; (8101f04 <HAL_DMA_Init+0x448>)
 8101e42:	4293      	cmp	r3, r2
 8101e44:	d101      	bne.n	8101e4a <HAL_DMA_Init+0x38e>
 8101e46:	2301      	movs	r3, #1
 8101e48:	e000      	b.n	8101e4c <HAL_DMA_Init+0x390>
 8101e4a:	2300      	movs	r3, #0
 8101e4c:	2b00      	cmp	r3, #0
 8101e4e:	f000 8095 	beq.w	8101f7c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	681b      	ldr	r3, [r3, #0]
 8101e56:	4a24      	ldr	r2, [pc, #144]	; (8101ee8 <HAL_DMA_Init+0x42c>)
 8101e58:	4293      	cmp	r3, r2
 8101e5a:	d021      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a22      	ldr	r2, [pc, #136]	; (8101eec <HAL_DMA_Init+0x430>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d01c      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	4a21      	ldr	r2, [pc, #132]	; (8101ef0 <HAL_DMA_Init+0x434>)
 8101e6c:	4293      	cmp	r3, r2
 8101e6e:	d017      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4a1f      	ldr	r2, [pc, #124]	; (8101ef4 <HAL_DMA_Init+0x438>)
 8101e76:	4293      	cmp	r3, r2
 8101e78:	d012      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	4a1e      	ldr	r2, [pc, #120]	; (8101ef8 <HAL_DMA_Init+0x43c>)
 8101e80:	4293      	cmp	r3, r2
 8101e82:	d00d      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
 8101e88:	4a1c      	ldr	r2, [pc, #112]	; (8101efc <HAL_DMA_Init+0x440>)
 8101e8a:	4293      	cmp	r3, r2
 8101e8c:	d008      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	681b      	ldr	r3, [r3, #0]
 8101e92:	4a1b      	ldr	r2, [pc, #108]	; (8101f00 <HAL_DMA_Init+0x444>)
 8101e94:	4293      	cmp	r3, r2
 8101e96:	d003      	beq.n	8101ea0 <HAL_DMA_Init+0x3e4>
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	4a19      	ldr	r2, [pc, #100]	; (8101f04 <HAL_DMA_Init+0x448>)
 8101e9e:	4293      	cmp	r3, r2
 8101ea0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	2200      	movs	r2, #0
 8101ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	2202      	movs	r2, #2
 8101eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	681b      	ldr	r3, [r3, #0]
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8101eba:	697b      	ldr	r3, [r7, #20]
 8101ebc:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8101ec0:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8101ec4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	689b      	ldr	r3, [r3, #8]
 8101eca:	2b40      	cmp	r3, #64	; 0x40
 8101ecc:	d01c      	beq.n	8101f08 <HAL_DMA_Init+0x44c>
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	689b      	ldr	r3, [r3, #8]
 8101ed2:	2b80      	cmp	r3, #128	; 0x80
 8101ed4:	d102      	bne.n	8101edc <HAL_DMA_Init+0x420>
 8101ed6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101eda:	e016      	b.n	8101f0a <HAL_DMA_Init+0x44e>
 8101edc:	2300      	movs	r3, #0
 8101ede:	e014      	b.n	8101f0a <HAL_DMA_Init+0x44e>
 8101ee0:	fe10803f 	.word	0xfe10803f
 8101ee4:	5c001000 	.word	0x5c001000
 8101ee8:	58025408 	.word	0x58025408
 8101eec:	5802541c 	.word	0x5802541c
 8101ef0:	58025430 	.word	0x58025430
 8101ef4:	58025444 	.word	0x58025444
 8101ef8:	58025458 	.word	0x58025458
 8101efc:	5802546c 	.word	0x5802546c
 8101f00:	58025480 	.word	0x58025480
 8101f04:	58025494 	.word	0x58025494
 8101f08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101f0a:	687a      	ldr	r2, [r7, #4]
 8101f0c:	68d2      	ldr	r2, [r2, #12]
 8101f0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101f10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	691b      	ldr	r3, [r3, #16]
 8101f16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101f18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	695b      	ldr	r3, [r3, #20]
 8101f1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	699b      	ldr	r3, [r3, #24]
 8101f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	69db      	ldr	r3, [r3, #28]
 8101f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	6a1b      	ldr	r3, [r3, #32]
 8101f36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101f38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101f3a:	697a      	ldr	r2, [r7, #20]
 8101f3c:	4313      	orrs	r3, r2
 8101f3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	681b      	ldr	r3, [r3, #0]
 8101f44:	697a      	ldr	r2, [r7, #20]
 8101f46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	681b      	ldr	r3, [r3, #0]
 8101f4c:	461a      	mov	r2, r3
 8101f4e:	4b6e      	ldr	r3, [pc, #440]	; (8102108 <HAL_DMA_Init+0x64c>)
 8101f50:	4413      	add	r3, r2
 8101f52:	4a6e      	ldr	r2, [pc, #440]	; (810210c <HAL_DMA_Init+0x650>)
 8101f54:	fba2 2303 	umull	r2, r3, r2, r3
 8101f58:	091b      	lsrs	r3, r3, #4
 8101f5a:	009a      	lsls	r2, r3, #2
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101f60:	6878      	ldr	r0, [r7, #4]
 8101f62:	f001 fea3 	bl	8103cac <DMA_CalcBaseAndBitshift>
 8101f66:	4603      	mov	r3, r0
 8101f68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101f6e:	f003 031f 	and.w	r3, r3, #31
 8101f72:	2201      	movs	r2, #1
 8101f74:	409a      	lsls	r2, r3
 8101f76:	68fb      	ldr	r3, [r7, #12]
 8101f78:	605a      	str	r2, [r3, #4]
 8101f7a:	e008      	b.n	8101f8e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	2240      	movs	r2, #64	; 0x40
 8101f80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	2203      	movs	r2, #3
 8101f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8101f8a:	2301      	movs	r3, #1
 8101f8c:	e0b7      	b.n	81020fe <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	4a5f      	ldr	r2, [pc, #380]	; (8102110 <HAL_DMA_Init+0x654>)
 8101f94:	4293      	cmp	r3, r2
 8101f96:	d072      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	4a5d      	ldr	r2, [pc, #372]	; (8102114 <HAL_DMA_Init+0x658>)
 8101f9e:	4293      	cmp	r3, r2
 8101fa0:	d06d      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	4a5c      	ldr	r2, [pc, #368]	; (8102118 <HAL_DMA_Init+0x65c>)
 8101fa8:	4293      	cmp	r3, r2
 8101faa:	d068      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	4a5a      	ldr	r2, [pc, #360]	; (810211c <HAL_DMA_Init+0x660>)
 8101fb2:	4293      	cmp	r3, r2
 8101fb4:	d063      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	4a59      	ldr	r2, [pc, #356]	; (8102120 <HAL_DMA_Init+0x664>)
 8101fbc:	4293      	cmp	r3, r2
 8101fbe:	d05e      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	681b      	ldr	r3, [r3, #0]
 8101fc4:	4a57      	ldr	r2, [pc, #348]	; (8102124 <HAL_DMA_Init+0x668>)
 8101fc6:	4293      	cmp	r3, r2
 8101fc8:	d059      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	681b      	ldr	r3, [r3, #0]
 8101fce:	4a56      	ldr	r2, [pc, #344]	; (8102128 <HAL_DMA_Init+0x66c>)
 8101fd0:	4293      	cmp	r3, r2
 8101fd2:	d054      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	4a54      	ldr	r2, [pc, #336]	; (810212c <HAL_DMA_Init+0x670>)
 8101fda:	4293      	cmp	r3, r2
 8101fdc:	d04f      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	4a53      	ldr	r2, [pc, #332]	; (8102130 <HAL_DMA_Init+0x674>)
 8101fe4:	4293      	cmp	r3, r2
 8101fe6:	d04a      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	4a51      	ldr	r2, [pc, #324]	; (8102134 <HAL_DMA_Init+0x678>)
 8101fee:	4293      	cmp	r3, r2
 8101ff0:	d045      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	4a50      	ldr	r2, [pc, #320]	; (8102138 <HAL_DMA_Init+0x67c>)
 8101ff8:	4293      	cmp	r3, r2
 8101ffa:	d040      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	4a4e      	ldr	r2, [pc, #312]	; (810213c <HAL_DMA_Init+0x680>)
 8102002:	4293      	cmp	r3, r2
 8102004:	d03b      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	4a4d      	ldr	r2, [pc, #308]	; (8102140 <HAL_DMA_Init+0x684>)
 810200c:	4293      	cmp	r3, r2
 810200e:	d036      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	4a4b      	ldr	r2, [pc, #300]	; (8102144 <HAL_DMA_Init+0x688>)
 8102016:	4293      	cmp	r3, r2
 8102018:	d031      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	4a4a      	ldr	r2, [pc, #296]	; (8102148 <HAL_DMA_Init+0x68c>)
 8102020:	4293      	cmp	r3, r2
 8102022:	d02c      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	681b      	ldr	r3, [r3, #0]
 8102028:	4a48      	ldr	r2, [pc, #288]	; (810214c <HAL_DMA_Init+0x690>)
 810202a:	4293      	cmp	r3, r2
 810202c:	d027      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 810202e:	687b      	ldr	r3, [r7, #4]
 8102030:	681b      	ldr	r3, [r3, #0]
 8102032:	4a47      	ldr	r2, [pc, #284]	; (8102150 <HAL_DMA_Init+0x694>)
 8102034:	4293      	cmp	r3, r2
 8102036:	d022      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	681b      	ldr	r3, [r3, #0]
 810203c:	4a45      	ldr	r2, [pc, #276]	; (8102154 <HAL_DMA_Init+0x698>)
 810203e:	4293      	cmp	r3, r2
 8102040:	d01d      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	681b      	ldr	r3, [r3, #0]
 8102046:	4a44      	ldr	r2, [pc, #272]	; (8102158 <HAL_DMA_Init+0x69c>)
 8102048:	4293      	cmp	r3, r2
 810204a:	d018      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	4a42      	ldr	r2, [pc, #264]	; (810215c <HAL_DMA_Init+0x6a0>)
 8102052:	4293      	cmp	r3, r2
 8102054:	d013      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	4a41      	ldr	r2, [pc, #260]	; (8102160 <HAL_DMA_Init+0x6a4>)
 810205c:	4293      	cmp	r3, r2
 810205e:	d00e      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	4a3f      	ldr	r2, [pc, #252]	; (8102164 <HAL_DMA_Init+0x6a8>)
 8102066:	4293      	cmp	r3, r2
 8102068:	d009      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	4a3e      	ldr	r2, [pc, #248]	; (8102168 <HAL_DMA_Init+0x6ac>)
 8102070:	4293      	cmp	r3, r2
 8102072:	d004      	beq.n	810207e <HAL_DMA_Init+0x5c2>
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	4a3c      	ldr	r2, [pc, #240]	; (810216c <HAL_DMA_Init+0x6b0>)
 810207a:	4293      	cmp	r3, r2
 810207c:	d101      	bne.n	8102082 <HAL_DMA_Init+0x5c6>
 810207e:	2301      	movs	r3, #1
 8102080:	e000      	b.n	8102084 <HAL_DMA_Init+0x5c8>
 8102082:	2300      	movs	r3, #0
 8102084:	2b00      	cmp	r3, #0
 8102086:	d032      	beq.n	81020ee <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102088:	6878      	ldr	r0, [r7, #4]
 810208a:	f001 ff3d 	bl	8103f08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	689b      	ldr	r3, [r3, #8]
 8102092:	2b80      	cmp	r3, #128	; 0x80
 8102094:	d102      	bne.n	810209c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	2200      	movs	r2, #0
 810209a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	685a      	ldr	r2, [r3, #4]
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81020a4:	b2d2      	uxtb	r2, r2
 81020a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81020ac:	687a      	ldr	r2, [r7, #4]
 81020ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81020b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	685b      	ldr	r3, [r3, #4]
 81020b6:	2b00      	cmp	r3, #0
 81020b8:	d010      	beq.n	81020dc <HAL_DMA_Init+0x620>
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	685b      	ldr	r3, [r3, #4]
 81020be:	2b08      	cmp	r3, #8
 81020c0:	d80c      	bhi.n	81020dc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81020c2:	6878      	ldr	r0, [r7, #4]
 81020c4:	f001 ffba 	bl	810403c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81020cc:	2200      	movs	r2, #0
 81020ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81020d4:	687a      	ldr	r2, [r7, #4]
 81020d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81020d8:	605a      	str	r2, [r3, #4]
 81020da:	e008      	b.n	81020ee <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	2200      	movs	r2, #0
 81020e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	2200      	movs	r2, #0
 81020e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	2200      	movs	r2, #0
 81020ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	2200      	movs	r2, #0
 81020f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	2201      	movs	r2, #1
 81020f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81020fc:	2300      	movs	r3, #0
}
 81020fe:	4618      	mov	r0, r3
 8102100:	3718      	adds	r7, #24
 8102102:	46bd      	mov	sp, r7
 8102104:	bd80      	pop	{r7, pc}
 8102106:	bf00      	nop
 8102108:	a7fdabf8 	.word	0xa7fdabf8
 810210c:	cccccccd 	.word	0xcccccccd
 8102110:	40020010 	.word	0x40020010
 8102114:	40020028 	.word	0x40020028
 8102118:	40020040 	.word	0x40020040
 810211c:	40020058 	.word	0x40020058
 8102120:	40020070 	.word	0x40020070
 8102124:	40020088 	.word	0x40020088
 8102128:	400200a0 	.word	0x400200a0
 810212c:	400200b8 	.word	0x400200b8
 8102130:	40020410 	.word	0x40020410
 8102134:	40020428 	.word	0x40020428
 8102138:	40020440 	.word	0x40020440
 810213c:	40020458 	.word	0x40020458
 8102140:	40020470 	.word	0x40020470
 8102144:	40020488 	.word	0x40020488
 8102148:	400204a0 	.word	0x400204a0
 810214c:	400204b8 	.word	0x400204b8
 8102150:	58025408 	.word	0x58025408
 8102154:	5802541c 	.word	0x5802541c
 8102158:	58025430 	.word	0x58025430
 810215c:	58025444 	.word	0x58025444
 8102160:	58025458 	.word	0x58025458
 8102164:	5802546c 	.word	0x5802546c
 8102168:	58025480 	.word	0x58025480
 810216c:	58025494 	.word	0x58025494

08102170 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102170:	b580      	push	{r7, lr}
 8102172:	b086      	sub	sp, #24
 8102174:	af00      	add	r7, sp, #0
 8102176:	60f8      	str	r0, [r7, #12]
 8102178:	60b9      	str	r1, [r7, #8]
 810217a:	607a      	str	r2, [r7, #4]
 810217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810217e:	2300      	movs	r3, #0
 8102180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102182:	68fb      	ldr	r3, [r7, #12]
 8102184:	2b00      	cmp	r3, #0
 8102186:	d101      	bne.n	810218c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102188:	2301      	movs	r3, #1
 810218a:	e226      	b.n	81025da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 810218c:	68fb      	ldr	r3, [r7, #12]
 810218e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102192:	2b01      	cmp	r3, #1
 8102194:	d101      	bne.n	810219a <HAL_DMA_Start_IT+0x2a>
 8102196:	2302      	movs	r3, #2
 8102198:	e21f      	b.n	81025da <HAL_DMA_Start_IT+0x46a>
 810219a:	68fb      	ldr	r3, [r7, #12]
 810219c:	2201      	movs	r2, #1
 810219e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81021a2:	68fb      	ldr	r3, [r7, #12]
 81021a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81021a8:	b2db      	uxtb	r3, r3
 81021aa:	2b01      	cmp	r3, #1
 81021ac:	f040 820a 	bne.w	81025c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	2202      	movs	r2, #2
 81021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81021b8:	68fb      	ldr	r3, [r7, #12]
 81021ba:	2200      	movs	r2, #0
 81021bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	681b      	ldr	r3, [r3, #0]
 81021c2:	4a68      	ldr	r2, [pc, #416]	; (8102364 <HAL_DMA_Start_IT+0x1f4>)
 81021c4:	4293      	cmp	r3, r2
 81021c6:	d04a      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	681b      	ldr	r3, [r3, #0]
 81021cc:	4a66      	ldr	r2, [pc, #408]	; (8102368 <HAL_DMA_Start_IT+0x1f8>)
 81021ce:	4293      	cmp	r3, r2
 81021d0:	d045      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 81021d2:	68fb      	ldr	r3, [r7, #12]
 81021d4:	681b      	ldr	r3, [r3, #0]
 81021d6:	4a65      	ldr	r2, [pc, #404]	; (810236c <HAL_DMA_Start_IT+0x1fc>)
 81021d8:	4293      	cmp	r3, r2
 81021da:	d040      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 81021dc:	68fb      	ldr	r3, [r7, #12]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	4a63      	ldr	r2, [pc, #396]	; (8102370 <HAL_DMA_Start_IT+0x200>)
 81021e2:	4293      	cmp	r3, r2
 81021e4:	d03b      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 81021e6:	68fb      	ldr	r3, [r7, #12]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	4a62      	ldr	r2, [pc, #392]	; (8102374 <HAL_DMA_Start_IT+0x204>)
 81021ec:	4293      	cmp	r3, r2
 81021ee:	d036      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 81021f0:	68fb      	ldr	r3, [r7, #12]
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	4a60      	ldr	r2, [pc, #384]	; (8102378 <HAL_DMA_Start_IT+0x208>)
 81021f6:	4293      	cmp	r3, r2
 81021f8:	d031      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 81021fa:	68fb      	ldr	r3, [r7, #12]
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	4a5f      	ldr	r2, [pc, #380]	; (810237c <HAL_DMA_Start_IT+0x20c>)
 8102200:	4293      	cmp	r3, r2
 8102202:	d02c      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 8102204:	68fb      	ldr	r3, [r7, #12]
 8102206:	681b      	ldr	r3, [r3, #0]
 8102208:	4a5d      	ldr	r2, [pc, #372]	; (8102380 <HAL_DMA_Start_IT+0x210>)
 810220a:	4293      	cmp	r3, r2
 810220c:	d027      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 810220e:	68fb      	ldr	r3, [r7, #12]
 8102210:	681b      	ldr	r3, [r3, #0]
 8102212:	4a5c      	ldr	r2, [pc, #368]	; (8102384 <HAL_DMA_Start_IT+0x214>)
 8102214:	4293      	cmp	r3, r2
 8102216:	d022      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 8102218:	68fb      	ldr	r3, [r7, #12]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	4a5a      	ldr	r2, [pc, #360]	; (8102388 <HAL_DMA_Start_IT+0x218>)
 810221e:	4293      	cmp	r3, r2
 8102220:	d01d      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 8102222:	68fb      	ldr	r3, [r7, #12]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	4a59      	ldr	r2, [pc, #356]	; (810238c <HAL_DMA_Start_IT+0x21c>)
 8102228:	4293      	cmp	r3, r2
 810222a:	d018      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 810222c:	68fb      	ldr	r3, [r7, #12]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	4a57      	ldr	r2, [pc, #348]	; (8102390 <HAL_DMA_Start_IT+0x220>)
 8102232:	4293      	cmp	r3, r2
 8102234:	d013      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 8102236:	68fb      	ldr	r3, [r7, #12]
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	4a56      	ldr	r2, [pc, #344]	; (8102394 <HAL_DMA_Start_IT+0x224>)
 810223c:	4293      	cmp	r3, r2
 810223e:	d00e      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 8102240:	68fb      	ldr	r3, [r7, #12]
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	4a54      	ldr	r2, [pc, #336]	; (8102398 <HAL_DMA_Start_IT+0x228>)
 8102246:	4293      	cmp	r3, r2
 8102248:	d009      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 810224a:	68fb      	ldr	r3, [r7, #12]
 810224c:	681b      	ldr	r3, [r3, #0]
 810224e:	4a53      	ldr	r2, [pc, #332]	; (810239c <HAL_DMA_Start_IT+0x22c>)
 8102250:	4293      	cmp	r3, r2
 8102252:	d004      	beq.n	810225e <HAL_DMA_Start_IT+0xee>
 8102254:	68fb      	ldr	r3, [r7, #12]
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	4a51      	ldr	r2, [pc, #324]	; (81023a0 <HAL_DMA_Start_IT+0x230>)
 810225a:	4293      	cmp	r3, r2
 810225c:	d108      	bne.n	8102270 <HAL_DMA_Start_IT+0x100>
 810225e:	68fb      	ldr	r3, [r7, #12]
 8102260:	681b      	ldr	r3, [r3, #0]
 8102262:	681a      	ldr	r2, [r3, #0]
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	f022 0201 	bic.w	r2, r2, #1
 810226c:	601a      	str	r2, [r3, #0]
 810226e:	e007      	b.n	8102280 <HAL_DMA_Start_IT+0x110>
 8102270:	68fb      	ldr	r3, [r7, #12]
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	681a      	ldr	r2, [r3, #0]
 8102276:	68fb      	ldr	r3, [r7, #12]
 8102278:	681b      	ldr	r3, [r3, #0]
 810227a:	f022 0201 	bic.w	r2, r2, #1
 810227e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102280:	683b      	ldr	r3, [r7, #0]
 8102282:	687a      	ldr	r2, [r7, #4]
 8102284:	68b9      	ldr	r1, [r7, #8]
 8102286:	68f8      	ldr	r0, [r7, #12]
 8102288:	f001 fb64 	bl	8103954 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810228c:	68fb      	ldr	r3, [r7, #12]
 810228e:	681b      	ldr	r3, [r3, #0]
 8102290:	4a34      	ldr	r2, [pc, #208]	; (8102364 <HAL_DMA_Start_IT+0x1f4>)
 8102292:	4293      	cmp	r3, r2
 8102294:	d04a      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 8102296:	68fb      	ldr	r3, [r7, #12]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	4a33      	ldr	r2, [pc, #204]	; (8102368 <HAL_DMA_Start_IT+0x1f8>)
 810229c:	4293      	cmp	r3, r2
 810229e:	d045      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022a0:	68fb      	ldr	r3, [r7, #12]
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	4a31      	ldr	r2, [pc, #196]	; (810236c <HAL_DMA_Start_IT+0x1fc>)
 81022a6:	4293      	cmp	r3, r2
 81022a8:	d040      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022aa:	68fb      	ldr	r3, [r7, #12]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	4a30      	ldr	r2, [pc, #192]	; (8102370 <HAL_DMA_Start_IT+0x200>)
 81022b0:	4293      	cmp	r3, r2
 81022b2:	d03b      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022b4:	68fb      	ldr	r3, [r7, #12]
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	4a2e      	ldr	r2, [pc, #184]	; (8102374 <HAL_DMA_Start_IT+0x204>)
 81022ba:	4293      	cmp	r3, r2
 81022bc:	d036      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022be:	68fb      	ldr	r3, [r7, #12]
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	4a2d      	ldr	r2, [pc, #180]	; (8102378 <HAL_DMA_Start_IT+0x208>)
 81022c4:	4293      	cmp	r3, r2
 81022c6:	d031      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022c8:	68fb      	ldr	r3, [r7, #12]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	4a2b      	ldr	r2, [pc, #172]	; (810237c <HAL_DMA_Start_IT+0x20c>)
 81022ce:	4293      	cmp	r3, r2
 81022d0:	d02c      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022d2:	68fb      	ldr	r3, [r7, #12]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	4a2a      	ldr	r2, [pc, #168]	; (8102380 <HAL_DMA_Start_IT+0x210>)
 81022d8:	4293      	cmp	r3, r2
 81022da:	d027      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022dc:	68fb      	ldr	r3, [r7, #12]
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	4a28      	ldr	r2, [pc, #160]	; (8102384 <HAL_DMA_Start_IT+0x214>)
 81022e2:	4293      	cmp	r3, r2
 81022e4:	d022      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	4a27      	ldr	r2, [pc, #156]	; (8102388 <HAL_DMA_Start_IT+0x218>)
 81022ec:	4293      	cmp	r3, r2
 81022ee:	d01d      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022f0:	68fb      	ldr	r3, [r7, #12]
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	4a25      	ldr	r2, [pc, #148]	; (810238c <HAL_DMA_Start_IT+0x21c>)
 81022f6:	4293      	cmp	r3, r2
 81022f8:	d018      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 81022fa:	68fb      	ldr	r3, [r7, #12]
 81022fc:	681b      	ldr	r3, [r3, #0]
 81022fe:	4a24      	ldr	r2, [pc, #144]	; (8102390 <HAL_DMA_Start_IT+0x220>)
 8102300:	4293      	cmp	r3, r2
 8102302:	d013      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 8102304:	68fb      	ldr	r3, [r7, #12]
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	4a22      	ldr	r2, [pc, #136]	; (8102394 <HAL_DMA_Start_IT+0x224>)
 810230a:	4293      	cmp	r3, r2
 810230c:	d00e      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 810230e:	68fb      	ldr	r3, [r7, #12]
 8102310:	681b      	ldr	r3, [r3, #0]
 8102312:	4a21      	ldr	r2, [pc, #132]	; (8102398 <HAL_DMA_Start_IT+0x228>)
 8102314:	4293      	cmp	r3, r2
 8102316:	d009      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 8102318:	68fb      	ldr	r3, [r7, #12]
 810231a:	681b      	ldr	r3, [r3, #0]
 810231c:	4a1f      	ldr	r2, [pc, #124]	; (810239c <HAL_DMA_Start_IT+0x22c>)
 810231e:	4293      	cmp	r3, r2
 8102320:	d004      	beq.n	810232c <HAL_DMA_Start_IT+0x1bc>
 8102322:	68fb      	ldr	r3, [r7, #12]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	4a1e      	ldr	r2, [pc, #120]	; (81023a0 <HAL_DMA_Start_IT+0x230>)
 8102328:	4293      	cmp	r3, r2
 810232a:	d101      	bne.n	8102330 <HAL_DMA_Start_IT+0x1c0>
 810232c:	2301      	movs	r3, #1
 810232e:	e000      	b.n	8102332 <HAL_DMA_Start_IT+0x1c2>
 8102330:	2300      	movs	r3, #0
 8102332:	2b00      	cmp	r3, #0
 8102334:	d036      	beq.n	81023a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102336:	68fb      	ldr	r3, [r7, #12]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	f023 021e 	bic.w	r2, r3, #30
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	f042 0216 	orr.w	r2, r2, #22
 8102348:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810234a:	68fb      	ldr	r3, [r7, #12]
 810234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810234e:	2b00      	cmp	r3, #0
 8102350:	d03e      	beq.n	81023d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102352:	68fb      	ldr	r3, [r7, #12]
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	681a      	ldr	r2, [r3, #0]
 8102358:	68fb      	ldr	r3, [r7, #12]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	f042 0208 	orr.w	r2, r2, #8
 8102360:	601a      	str	r2, [r3, #0]
 8102362:	e035      	b.n	81023d0 <HAL_DMA_Start_IT+0x260>
 8102364:	40020010 	.word	0x40020010
 8102368:	40020028 	.word	0x40020028
 810236c:	40020040 	.word	0x40020040
 8102370:	40020058 	.word	0x40020058
 8102374:	40020070 	.word	0x40020070
 8102378:	40020088 	.word	0x40020088
 810237c:	400200a0 	.word	0x400200a0
 8102380:	400200b8 	.word	0x400200b8
 8102384:	40020410 	.word	0x40020410
 8102388:	40020428 	.word	0x40020428
 810238c:	40020440 	.word	0x40020440
 8102390:	40020458 	.word	0x40020458
 8102394:	40020470 	.word	0x40020470
 8102398:	40020488 	.word	0x40020488
 810239c:	400204a0 	.word	0x400204a0
 81023a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81023a4:	68fb      	ldr	r3, [r7, #12]
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	f023 020e 	bic.w	r2, r3, #14
 81023ae:	68fb      	ldr	r3, [r7, #12]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	f042 020a 	orr.w	r2, r2, #10
 81023b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81023b8:	68fb      	ldr	r3, [r7, #12]
 81023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81023bc:	2b00      	cmp	r3, #0
 81023be:	d007      	beq.n	81023d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 81023c0:	68fb      	ldr	r3, [r7, #12]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	681a      	ldr	r2, [r3, #0]
 81023c6:	68fb      	ldr	r3, [r7, #12]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	f042 0204 	orr.w	r2, r2, #4
 81023ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81023d0:	68fb      	ldr	r3, [r7, #12]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	4a83      	ldr	r2, [pc, #524]	; (81025e4 <HAL_DMA_Start_IT+0x474>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d072      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81023da:	68fb      	ldr	r3, [r7, #12]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a82      	ldr	r2, [pc, #520]	; (81025e8 <HAL_DMA_Start_IT+0x478>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d06d      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81023e4:	68fb      	ldr	r3, [r7, #12]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	4a80      	ldr	r2, [pc, #512]	; (81025ec <HAL_DMA_Start_IT+0x47c>)
 81023ea:	4293      	cmp	r3, r2
 81023ec:	d068      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81023ee:	68fb      	ldr	r3, [r7, #12]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	4a7f      	ldr	r2, [pc, #508]	; (81025f0 <HAL_DMA_Start_IT+0x480>)
 81023f4:	4293      	cmp	r3, r2
 81023f6:	d063      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81023f8:	68fb      	ldr	r3, [r7, #12]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	4a7d      	ldr	r2, [pc, #500]	; (81025f4 <HAL_DMA_Start_IT+0x484>)
 81023fe:	4293      	cmp	r3, r2
 8102400:	d05e      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102402:	68fb      	ldr	r3, [r7, #12]
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	4a7c      	ldr	r2, [pc, #496]	; (81025f8 <HAL_DMA_Start_IT+0x488>)
 8102408:	4293      	cmp	r3, r2
 810240a:	d059      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 810240c:	68fb      	ldr	r3, [r7, #12]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a7a      	ldr	r2, [pc, #488]	; (81025fc <HAL_DMA_Start_IT+0x48c>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d054      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102416:	68fb      	ldr	r3, [r7, #12]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a79      	ldr	r2, [pc, #484]	; (8102600 <HAL_DMA_Start_IT+0x490>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d04f      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102420:	68fb      	ldr	r3, [r7, #12]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a77      	ldr	r2, [pc, #476]	; (8102604 <HAL_DMA_Start_IT+0x494>)
 8102426:	4293      	cmp	r3, r2
 8102428:	d04a      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	4a76      	ldr	r2, [pc, #472]	; (8102608 <HAL_DMA_Start_IT+0x498>)
 8102430:	4293      	cmp	r3, r2
 8102432:	d045      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102434:	68fb      	ldr	r3, [r7, #12]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	4a74      	ldr	r2, [pc, #464]	; (810260c <HAL_DMA_Start_IT+0x49c>)
 810243a:	4293      	cmp	r3, r2
 810243c:	d040      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 810243e:	68fb      	ldr	r3, [r7, #12]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	4a73      	ldr	r2, [pc, #460]	; (8102610 <HAL_DMA_Start_IT+0x4a0>)
 8102444:	4293      	cmp	r3, r2
 8102446:	d03b      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	4a71      	ldr	r2, [pc, #452]	; (8102614 <HAL_DMA_Start_IT+0x4a4>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d036      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102452:	68fb      	ldr	r3, [r7, #12]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	4a70      	ldr	r2, [pc, #448]	; (8102618 <HAL_DMA_Start_IT+0x4a8>)
 8102458:	4293      	cmp	r3, r2
 810245a:	d031      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 810245c:	68fb      	ldr	r3, [r7, #12]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	4a6e      	ldr	r2, [pc, #440]	; (810261c <HAL_DMA_Start_IT+0x4ac>)
 8102462:	4293      	cmp	r3, r2
 8102464:	d02c      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102466:	68fb      	ldr	r3, [r7, #12]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	4a6d      	ldr	r2, [pc, #436]	; (8102620 <HAL_DMA_Start_IT+0x4b0>)
 810246c:	4293      	cmp	r3, r2
 810246e:	d027      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102470:	68fb      	ldr	r3, [r7, #12]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	4a6b      	ldr	r2, [pc, #428]	; (8102624 <HAL_DMA_Start_IT+0x4b4>)
 8102476:	4293      	cmp	r3, r2
 8102478:	d022      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 810247a:	68fb      	ldr	r3, [r7, #12]
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	4a6a      	ldr	r2, [pc, #424]	; (8102628 <HAL_DMA_Start_IT+0x4b8>)
 8102480:	4293      	cmp	r3, r2
 8102482:	d01d      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102484:	68fb      	ldr	r3, [r7, #12]
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	4a68      	ldr	r2, [pc, #416]	; (810262c <HAL_DMA_Start_IT+0x4bc>)
 810248a:	4293      	cmp	r3, r2
 810248c:	d018      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 810248e:	68fb      	ldr	r3, [r7, #12]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	4a67      	ldr	r2, [pc, #412]	; (8102630 <HAL_DMA_Start_IT+0x4c0>)
 8102494:	4293      	cmp	r3, r2
 8102496:	d013      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	4a65      	ldr	r2, [pc, #404]	; (8102634 <HAL_DMA_Start_IT+0x4c4>)
 810249e:	4293      	cmp	r3, r2
 81024a0:	d00e      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81024a2:	68fb      	ldr	r3, [r7, #12]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	4a64      	ldr	r2, [pc, #400]	; (8102638 <HAL_DMA_Start_IT+0x4c8>)
 81024a8:	4293      	cmp	r3, r2
 81024aa:	d009      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81024ac:	68fb      	ldr	r3, [r7, #12]
 81024ae:	681b      	ldr	r3, [r3, #0]
 81024b0:	4a62      	ldr	r2, [pc, #392]	; (810263c <HAL_DMA_Start_IT+0x4cc>)
 81024b2:	4293      	cmp	r3, r2
 81024b4:	d004      	beq.n	81024c0 <HAL_DMA_Start_IT+0x350>
 81024b6:	68fb      	ldr	r3, [r7, #12]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	4a61      	ldr	r2, [pc, #388]	; (8102640 <HAL_DMA_Start_IT+0x4d0>)
 81024bc:	4293      	cmp	r3, r2
 81024be:	d101      	bne.n	81024c4 <HAL_DMA_Start_IT+0x354>
 81024c0:	2301      	movs	r3, #1
 81024c2:	e000      	b.n	81024c6 <HAL_DMA_Start_IT+0x356>
 81024c4:	2300      	movs	r3, #0
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d01a      	beq.n	8102500 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81024ca:	68fb      	ldr	r3, [r7, #12]
 81024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024ce:	681b      	ldr	r3, [r3, #0]
 81024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81024d4:	2b00      	cmp	r3, #0
 81024d6:	d007      	beq.n	81024e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81024d8:	68fb      	ldr	r3, [r7, #12]
 81024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024dc:	681a      	ldr	r2, [r3, #0]
 81024de:	68fb      	ldr	r3, [r7, #12]
 81024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81024e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81024e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 81024e8:	68fb      	ldr	r3, [r7, #12]
 81024ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	d007      	beq.n	8102500 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81024f0:	68fb      	ldr	r3, [r7, #12]
 81024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024f4:	681a      	ldr	r2, [r3, #0]
 81024f6:	68fb      	ldr	r3, [r7, #12]
 81024f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81024fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102500:	68fb      	ldr	r3, [r7, #12]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	4a37      	ldr	r2, [pc, #220]	; (81025e4 <HAL_DMA_Start_IT+0x474>)
 8102506:	4293      	cmp	r3, r2
 8102508:	d04a      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 810250a:	68fb      	ldr	r3, [r7, #12]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	4a36      	ldr	r2, [pc, #216]	; (81025e8 <HAL_DMA_Start_IT+0x478>)
 8102510:	4293      	cmp	r3, r2
 8102512:	d045      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102514:	68fb      	ldr	r3, [r7, #12]
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	4a34      	ldr	r2, [pc, #208]	; (81025ec <HAL_DMA_Start_IT+0x47c>)
 810251a:	4293      	cmp	r3, r2
 810251c:	d040      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 810251e:	68fb      	ldr	r3, [r7, #12]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	4a33      	ldr	r2, [pc, #204]	; (81025f0 <HAL_DMA_Start_IT+0x480>)
 8102524:	4293      	cmp	r3, r2
 8102526:	d03b      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102528:	68fb      	ldr	r3, [r7, #12]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	4a31      	ldr	r2, [pc, #196]	; (81025f4 <HAL_DMA_Start_IT+0x484>)
 810252e:	4293      	cmp	r3, r2
 8102530:	d036      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102532:	68fb      	ldr	r3, [r7, #12]
 8102534:	681b      	ldr	r3, [r3, #0]
 8102536:	4a30      	ldr	r2, [pc, #192]	; (81025f8 <HAL_DMA_Start_IT+0x488>)
 8102538:	4293      	cmp	r3, r2
 810253a:	d031      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 810253c:	68fb      	ldr	r3, [r7, #12]
 810253e:	681b      	ldr	r3, [r3, #0]
 8102540:	4a2e      	ldr	r2, [pc, #184]	; (81025fc <HAL_DMA_Start_IT+0x48c>)
 8102542:	4293      	cmp	r3, r2
 8102544:	d02c      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102546:	68fb      	ldr	r3, [r7, #12]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	4a2d      	ldr	r2, [pc, #180]	; (8102600 <HAL_DMA_Start_IT+0x490>)
 810254c:	4293      	cmp	r3, r2
 810254e:	d027      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	4a2b      	ldr	r2, [pc, #172]	; (8102604 <HAL_DMA_Start_IT+0x494>)
 8102556:	4293      	cmp	r3, r2
 8102558:	d022      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 810255a:	68fb      	ldr	r3, [r7, #12]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	4a2a      	ldr	r2, [pc, #168]	; (8102608 <HAL_DMA_Start_IT+0x498>)
 8102560:	4293      	cmp	r3, r2
 8102562:	d01d      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102564:	68fb      	ldr	r3, [r7, #12]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	4a28      	ldr	r2, [pc, #160]	; (810260c <HAL_DMA_Start_IT+0x49c>)
 810256a:	4293      	cmp	r3, r2
 810256c:	d018      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	681b      	ldr	r3, [r3, #0]
 8102572:	4a27      	ldr	r2, [pc, #156]	; (8102610 <HAL_DMA_Start_IT+0x4a0>)
 8102574:	4293      	cmp	r3, r2
 8102576:	d013      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102578:	68fb      	ldr	r3, [r7, #12]
 810257a:	681b      	ldr	r3, [r3, #0]
 810257c:	4a25      	ldr	r2, [pc, #148]	; (8102614 <HAL_DMA_Start_IT+0x4a4>)
 810257e:	4293      	cmp	r3, r2
 8102580:	d00e      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102582:	68fb      	ldr	r3, [r7, #12]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	4a24      	ldr	r2, [pc, #144]	; (8102618 <HAL_DMA_Start_IT+0x4a8>)
 8102588:	4293      	cmp	r3, r2
 810258a:	d009      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 810258c:	68fb      	ldr	r3, [r7, #12]
 810258e:	681b      	ldr	r3, [r3, #0]
 8102590:	4a22      	ldr	r2, [pc, #136]	; (810261c <HAL_DMA_Start_IT+0x4ac>)
 8102592:	4293      	cmp	r3, r2
 8102594:	d004      	beq.n	81025a0 <HAL_DMA_Start_IT+0x430>
 8102596:	68fb      	ldr	r3, [r7, #12]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	4a21      	ldr	r2, [pc, #132]	; (8102620 <HAL_DMA_Start_IT+0x4b0>)
 810259c:	4293      	cmp	r3, r2
 810259e:	d108      	bne.n	81025b2 <HAL_DMA_Start_IT+0x442>
 81025a0:	68fb      	ldr	r3, [r7, #12]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	681a      	ldr	r2, [r3, #0]
 81025a6:	68fb      	ldr	r3, [r7, #12]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	f042 0201 	orr.w	r2, r2, #1
 81025ae:	601a      	str	r2, [r3, #0]
 81025b0:	e012      	b.n	81025d8 <HAL_DMA_Start_IT+0x468>
 81025b2:	68fb      	ldr	r3, [r7, #12]
 81025b4:	681b      	ldr	r3, [r3, #0]
 81025b6:	681a      	ldr	r2, [r3, #0]
 81025b8:	68fb      	ldr	r3, [r7, #12]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	f042 0201 	orr.w	r2, r2, #1
 81025c0:	601a      	str	r2, [r3, #0]
 81025c2:	e009      	b.n	81025d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 81025c4:	68fb      	ldr	r3, [r7, #12]
 81025c6:	2200      	movs	r2, #0
 81025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81025cc:	68fb      	ldr	r3, [r7, #12]
 81025ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81025d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 81025d4:	2301      	movs	r3, #1
 81025d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 81025d8:	7dfb      	ldrb	r3, [r7, #23]
}
 81025da:	4618      	mov	r0, r3
 81025dc:	3718      	adds	r7, #24
 81025de:	46bd      	mov	sp, r7
 81025e0:	bd80      	pop	{r7, pc}
 81025e2:	bf00      	nop
 81025e4:	40020010 	.word	0x40020010
 81025e8:	40020028 	.word	0x40020028
 81025ec:	40020040 	.word	0x40020040
 81025f0:	40020058 	.word	0x40020058
 81025f4:	40020070 	.word	0x40020070
 81025f8:	40020088 	.word	0x40020088
 81025fc:	400200a0 	.word	0x400200a0
 8102600:	400200b8 	.word	0x400200b8
 8102604:	40020410 	.word	0x40020410
 8102608:	40020428 	.word	0x40020428
 810260c:	40020440 	.word	0x40020440
 8102610:	40020458 	.word	0x40020458
 8102614:	40020470 	.word	0x40020470
 8102618:	40020488 	.word	0x40020488
 810261c:	400204a0 	.word	0x400204a0
 8102620:	400204b8 	.word	0x400204b8
 8102624:	58025408 	.word	0x58025408
 8102628:	5802541c 	.word	0x5802541c
 810262c:	58025430 	.word	0x58025430
 8102630:	58025444 	.word	0x58025444
 8102634:	58025458 	.word	0x58025458
 8102638:	5802546c 	.word	0x5802546c
 810263c:	58025480 	.word	0x58025480
 8102640:	58025494 	.word	0x58025494

08102644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102644:	b580      	push	{r7, lr}
 8102646:	b084      	sub	sp, #16
 8102648:	af00      	add	r7, sp, #0
 810264a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	2b00      	cmp	r3, #0
 8102650:	d101      	bne.n	8102656 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102652:	2301      	movs	r3, #1
 8102654:	e205      	b.n	8102a62 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810265c:	b2db      	uxtb	r3, r3
 810265e:	2b02      	cmp	r3, #2
 8102660:	d004      	beq.n	810266c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	2280      	movs	r2, #128	; 0x80
 8102666:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102668:	2301      	movs	r3, #1
 810266a:	e1fa      	b.n	8102a62 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	4a8c      	ldr	r2, [pc, #560]	; (81028a4 <HAL_DMA_Abort_IT+0x260>)
 8102672:	4293      	cmp	r3, r2
 8102674:	d04a      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	681b      	ldr	r3, [r3, #0]
 810267a:	4a8b      	ldr	r2, [pc, #556]	; (81028a8 <HAL_DMA_Abort_IT+0x264>)
 810267c:	4293      	cmp	r3, r2
 810267e:	d045      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	4a89      	ldr	r2, [pc, #548]	; (81028ac <HAL_DMA_Abort_IT+0x268>)
 8102686:	4293      	cmp	r3, r2
 8102688:	d040      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	4a88      	ldr	r2, [pc, #544]	; (81028b0 <HAL_DMA_Abort_IT+0x26c>)
 8102690:	4293      	cmp	r3, r2
 8102692:	d03b      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 8102694:	687b      	ldr	r3, [r7, #4]
 8102696:	681b      	ldr	r3, [r3, #0]
 8102698:	4a86      	ldr	r2, [pc, #536]	; (81028b4 <HAL_DMA_Abort_IT+0x270>)
 810269a:	4293      	cmp	r3, r2
 810269c:	d036      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	681b      	ldr	r3, [r3, #0]
 81026a2:	4a85      	ldr	r2, [pc, #532]	; (81028b8 <HAL_DMA_Abort_IT+0x274>)
 81026a4:	4293      	cmp	r3, r2
 81026a6:	d031      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	681b      	ldr	r3, [r3, #0]
 81026ac:	4a83      	ldr	r2, [pc, #524]	; (81028bc <HAL_DMA_Abort_IT+0x278>)
 81026ae:	4293      	cmp	r3, r2
 81026b0:	d02c      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	681b      	ldr	r3, [r3, #0]
 81026b6:	4a82      	ldr	r2, [pc, #520]	; (81028c0 <HAL_DMA_Abort_IT+0x27c>)
 81026b8:	4293      	cmp	r3, r2
 81026ba:	d027      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	4a80      	ldr	r2, [pc, #512]	; (81028c4 <HAL_DMA_Abort_IT+0x280>)
 81026c2:	4293      	cmp	r3, r2
 81026c4:	d022      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	4a7f      	ldr	r2, [pc, #508]	; (81028c8 <HAL_DMA_Abort_IT+0x284>)
 81026cc:	4293      	cmp	r3, r2
 81026ce:	d01d      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	4a7d      	ldr	r2, [pc, #500]	; (81028cc <HAL_DMA_Abort_IT+0x288>)
 81026d6:	4293      	cmp	r3, r2
 81026d8:	d018      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	4a7c      	ldr	r2, [pc, #496]	; (81028d0 <HAL_DMA_Abort_IT+0x28c>)
 81026e0:	4293      	cmp	r3, r2
 81026e2:	d013      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	681b      	ldr	r3, [r3, #0]
 81026e8:	4a7a      	ldr	r2, [pc, #488]	; (81028d4 <HAL_DMA_Abort_IT+0x290>)
 81026ea:	4293      	cmp	r3, r2
 81026ec:	d00e      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	681b      	ldr	r3, [r3, #0]
 81026f2:	4a79      	ldr	r2, [pc, #484]	; (81028d8 <HAL_DMA_Abort_IT+0x294>)
 81026f4:	4293      	cmp	r3, r2
 81026f6:	d009      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	4a77      	ldr	r2, [pc, #476]	; (81028dc <HAL_DMA_Abort_IT+0x298>)
 81026fe:	4293      	cmp	r3, r2
 8102700:	d004      	beq.n	810270c <HAL_DMA_Abort_IT+0xc8>
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	4a76      	ldr	r2, [pc, #472]	; (81028e0 <HAL_DMA_Abort_IT+0x29c>)
 8102708:	4293      	cmp	r3, r2
 810270a:	d101      	bne.n	8102710 <HAL_DMA_Abort_IT+0xcc>
 810270c:	2301      	movs	r3, #1
 810270e:	e000      	b.n	8102712 <HAL_DMA_Abort_IT+0xce>
 8102710:	2300      	movs	r3, #0
 8102712:	2b00      	cmp	r3, #0
 8102714:	d065      	beq.n	81027e2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102716:	687b      	ldr	r3, [r7, #4]
 8102718:	2204      	movs	r2, #4
 810271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	681b      	ldr	r3, [r3, #0]
 8102722:	4a60      	ldr	r2, [pc, #384]	; (81028a4 <HAL_DMA_Abort_IT+0x260>)
 8102724:	4293      	cmp	r3, r2
 8102726:	d04a      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	4a5e      	ldr	r2, [pc, #376]	; (81028a8 <HAL_DMA_Abort_IT+0x264>)
 810272e:	4293      	cmp	r3, r2
 8102730:	d045      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	4a5d      	ldr	r2, [pc, #372]	; (81028ac <HAL_DMA_Abort_IT+0x268>)
 8102738:	4293      	cmp	r3, r2
 810273a:	d040      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	4a5b      	ldr	r2, [pc, #364]	; (81028b0 <HAL_DMA_Abort_IT+0x26c>)
 8102742:	4293      	cmp	r3, r2
 8102744:	d03b      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	4a5a      	ldr	r2, [pc, #360]	; (81028b4 <HAL_DMA_Abort_IT+0x270>)
 810274c:	4293      	cmp	r3, r2
 810274e:	d036      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	4a58      	ldr	r2, [pc, #352]	; (81028b8 <HAL_DMA_Abort_IT+0x274>)
 8102756:	4293      	cmp	r3, r2
 8102758:	d031      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	4a57      	ldr	r2, [pc, #348]	; (81028bc <HAL_DMA_Abort_IT+0x278>)
 8102760:	4293      	cmp	r3, r2
 8102762:	d02c      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	4a55      	ldr	r2, [pc, #340]	; (81028c0 <HAL_DMA_Abort_IT+0x27c>)
 810276a:	4293      	cmp	r3, r2
 810276c:	d027      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	4a54      	ldr	r2, [pc, #336]	; (81028c4 <HAL_DMA_Abort_IT+0x280>)
 8102774:	4293      	cmp	r3, r2
 8102776:	d022      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	4a52      	ldr	r2, [pc, #328]	; (81028c8 <HAL_DMA_Abort_IT+0x284>)
 810277e:	4293      	cmp	r3, r2
 8102780:	d01d      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	681b      	ldr	r3, [r3, #0]
 8102786:	4a51      	ldr	r2, [pc, #324]	; (81028cc <HAL_DMA_Abort_IT+0x288>)
 8102788:	4293      	cmp	r3, r2
 810278a:	d018      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	4a4f      	ldr	r2, [pc, #316]	; (81028d0 <HAL_DMA_Abort_IT+0x28c>)
 8102792:	4293      	cmp	r3, r2
 8102794:	d013      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	4a4e      	ldr	r2, [pc, #312]	; (81028d4 <HAL_DMA_Abort_IT+0x290>)
 810279c:	4293      	cmp	r3, r2
 810279e:	d00e      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	4a4c      	ldr	r2, [pc, #304]	; (81028d8 <HAL_DMA_Abort_IT+0x294>)
 81027a6:	4293      	cmp	r3, r2
 81027a8:	d009      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	4a4b      	ldr	r2, [pc, #300]	; (81028dc <HAL_DMA_Abort_IT+0x298>)
 81027b0:	4293      	cmp	r3, r2
 81027b2:	d004      	beq.n	81027be <HAL_DMA_Abort_IT+0x17a>
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	681b      	ldr	r3, [r3, #0]
 81027b8:	4a49      	ldr	r2, [pc, #292]	; (81028e0 <HAL_DMA_Abort_IT+0x29c>)
 81027ba:	4293      	cmp	r3, r2
 81027bc:	d108      	bne.n	81027d0 <HAL_DMA_Abort_IT+0x18c>
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	681b      	ldr	r3, [r3, #0]
 81027c2:	681a      	ldr	r2, [r3, #0]
 81027c4:	687b      	ldr	r3, [r7, #4]
 81027c6:	681b      	ldr	r3, [r3, #0]
 81027c8:	f022 0201 	bic.w	r2, r2, #1
 81027cc:	601a      	str	r2, [r3, #0]
 81027ce:	e147      	b.n	8102a60 <HAL_DMA_Abort_IT+0x41c>
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	681a      	ldr	r2, [r3, #0]
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	f022 0201 	bic.w	r2, r2, #1
 81027de:	601a      	str	r2, [r3, #0]
 81027e0:	e13e      	b.n	8102a60 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	681a      	ldr	r2, [r3, #0]
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	f022 020e 	bic.w	r2, r2, #14
 81027f0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	4a2b      	ldr	r2, [pc, #172]	; (81028a4 <HAL_DMA_Abort_IT+0x260>)
 81027f8:	4293      	cmp	r3, r2
 81027fa:	d04a      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	4a29      	ldr	r2, [pc, #164]	; (81028a8 <HAL_DMA_Abort_IT+0x264>)
 8102802:	4293      	cmp	r3, r2
 8102804:	d045      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a28      	ldr	r2, [pc, #160]	; (81028ac <HAL_DMA_Abort_IT+0x268>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d040      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a26      	ldr	r2, [pc, #152]	; (81028b0 <HAL_DMA_Abort_IT+0x26c>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d03b      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a25      	ldr	r2, [pc, #148]	; (81028b4 <HAL_DMA_Abort_IT+0x270>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d036      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a23      	ldr	r2, [pc, #140]	; (81028b8 <HAL_DMA_Abort_IT+0x274>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d031      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a22      	ldr	r2, [pc, #136]	; (81028bc <HAL_DMA_Abort_IT+0x278>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d02c      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a20      	ldr	r2, [pc, #128]	; (81028c0 <HAL_DMA_Abort_IT+0x27c>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d027      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a1f      	ldr	r2, [pc, #124]	; (81028c4 <HAL_DMA_Abort_IT+0x280>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d022      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a1d      	ldr	r2, [pc, #116]	; (81028c8 <HAL_DMA_Abort_IT+0x284>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d01d      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	4a1c      	ldr	r2, [pc, #112]	; (81028cc <HAL_DMA_Abort_IT+0x288>)
 810285c:	4293      	cmp	r3, r2
 810285e:	d018      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	4a1a      	ldr	r2, [pc, #104]	; (81028d0 <HAL_DMA_Abort_IT+0x28c>)
 8102866:	4293      	cmp	r3, r2
 8102868:	d013      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	681b      	ldr	r3, [r3, #0]
 810286e:	4a19      	ldr	r2, [pc, #100]	; (81028d4 <HAL_DMA_Abort_IT+0x290>)
 8102870:	4293      	cmp	r3, r2
 8102872:	d00e      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	681b      	ldr	r3, [r3, #0]
 8102878:	4a17      	ldr	r2, [pc, #92]	; (81028d8 <HAL_DMA_Abort_IT+0x294>)
 810287a:	4293      	cmp	r3, r2
 810287c:	d009      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	4a16      	ldr	r2, [pc, #88]	; (81028dc <HAL_DMA_Abort_IT+0x298>)
 8102884:	4293      	cmp	r3, r2
 8102886:	d004      	beq.n	8102892 <HAL_DMA_Abort_IT+0x24e>
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	4a14      	ldr	r2, [pc, #80]	; (81028e0 <HAL_DMA_Abort_IT+0x29c>)
 810288e:	4293      	cmp	r3, r2
 8102890:	d128      	bne.n	81028e4 <HAL_DMA_Abort_IT+0x2a0>
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	681a      	ldr	r2, [r3, #0]
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	f022 0201 	bic.w	r2, r2, #1
 81028a0:	601a      	str	r2, [r3, #0]
 81028a2:	e027      	b.n	81028f4 <HAL_DMA_Abort_IT+0x2b0>
 81028a4:	40020010 	.word	0x40020010
 81028a8:	40020028 	.word	0x40020028
 81028ac:	40020040 	.word	0x40020040
 81028b0:	40020058 	.word	0x40020058
 81028b4:	40020070 	.word	0x40020070
 81028b8:	40020088 	.word	0x40020088
 81028bc:	400200a0 	.word	0x400200a0
 81028c0:	400200b8 	.word	0x400200b8
 81028c4:	40020410 	.word	0x40020410
 81028c8:	40020428 	.word	0x40020428
 81028cc:	40020440 	.word	0x40020440
 81028d0:	40020458 	.word	0x40020458
 81028d4:	40020470 	.word	0x40020470
 81028d8:	40020488 	.word	0x40020488
 81028dc:	400204a0 	.word	0x400204a0
 81028e0:	400204b8 	.word	0x400204b8
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	681a      	ldr	r2, [r3, #0]
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	f022 0201 	bic.w	r2, r2, #1
 81028f2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	4a5c      	ldr	r2, [pc, #368]	; (8102a6c <HAL_DMA_Abort_IT+0x428>)
 81028fa:	4293      	cmp	r3, r2
 81028fc:	d072      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	4a5b      	ldr	r2, [pc, #364]	; (8102a70 <HAL_DMA_Abort_IT+0x42c>)
 8102904:	4293      	cmp	r3, r2
 8102906:	d06d      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	681b      	ldr	r3, [r3, #0]
 810290c:	4a59      	ldr	r2, [pc, #356]	; (8102a74 <HAL_DMA_Abort_IT+0x430>)
 810290e:	4293      	cmp	r3, r2
 8102910:	d068      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	4a58      	ldr	r2, [pc, #352]	; (8102a78 <HAL_DMA_Abort_IT+0x434>)
 8102918:	4293      	cmp	r3, r2
 810291a:	d063      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	4a56      	ldr	r2, [pc, #344]	; (8102a7c <HAL_DMA_Abort_IT+0x438>)
 8102922:	4293      	cmp	r3, r2
 8102924:	d05e      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	4a55      	ldr	r2, [pc, #340]	; (8102a80 <HAL_DMA_Abort_IT+0x43c>)
 810292c:	4293      	cmp	r3, r2
 810292e:	d059      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	681b      	ldr	r3, [r3, #0]
 8102934:	4a53      	ldr	r2, [pc, #332]	; (8102a84 <HAL_DMA_Abort_IT+0x440>)
 8102936:	4293      	cmp	r3, r2
 8102938:	d054      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	4a52      	ldr	r2, [pc, #328]	; (8102a88 <HAL_DMA_Abort_IT+0x444>)
 8102940:	4293      	cmp	r3, r2
 8102942:	d04f      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	4a50      	ldr	r2, [pc, #320]	; (8102a8c <HAL_DMA_Abort_IT+0x448>)
 810294a:	4293      	cmp	r3, r2
 810294c:	d04a      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	4a4f      	ldr	r2, [pc, #316]	; (8102a90 <HAL_DMA_Abort_IT+0x44c>)
 8102954:	4293      	cmp	r3, r2
 8102956:	d045      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4a4d      	ldr	r2, [pc, #308]	; (8102a94 <HAL_DMA_Abort_IT+0x450>)
 810295e:	4293      	cmp	r3, r2
 8102960:	d040      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	4a4c      	ldr	r2, [pc, #304]	; (8102a98 <HAL_DMA_Abort_IT+0x454>)
 8102968:	4293      	cmp	r3, r2
 810296a:	d03b      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	4a4a      	ldr	r2, [pc, #296]	; (8102a9c <HAL_DMA_Abort_IT+0x458>)
 8102972:	4293      	cmp	r3, r2
 8102974:	d036      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	4a49      	ldr	r2, [pc, #292]	; (8102aa0 <HAL_DMA_Abort_IT+0x45c>)
 810297c:	4293      	cmp	r3, r2
 810297e:	d031      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	4a47      	ldr	r2, [pc, #284]	; (8102aa4 <HAL_DMA_Abort_IT+0x460>)
 8102986:	4293      	cmp	r3, r2
 8102988:	d02c      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	4a46      	ldr	r2, [pc, #280]	; (8102aa8 <HAL_DMA_Abort_IT+0x464>)
 8102990:	4293      	cmp	r3, r2
 8102992:	d027      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4a44      	ldr	r2, [pc, #272]	; (8102aac <HAL_DMA_Abort_IT+0x468>)
 810299a:	4293      	cmp	r3, r2
 810299c:	d022      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	4a43      	ldr	r2, [pc, #268]	; (8102ab0 <HAL_DMA_Abort_IT+0x46c>)
 81029a4:	4293      	cmp	r3, r2
 81029a6:	d01d      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	4a41      	ldr	r2, [pc, #260]	; (8102ab4 <HAL_DMA_Abort_IT+0x470>)
 81029ae:	4293      	cmp	r3, r2
 81029b0:	d018      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	681b      	ldr	r3, [r3, #0]
 81029b6:	4a40      	ldr	r2, [pc, #256]	; (8102ab8 <HAL_DMA_Abort_IT+0x474>)
 81029b8:	4293      	cmp	r3, r2
 81029ba:	d013      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	4a3e      	ldr	r2, [pc, #248]	; (8102abc <HAL_DMA_Abort_IT+0x478>)
 81029c2:	4293      	cmp	r3, r2
 81029c4:	d00e      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4a3d      	ldr	r2, [pc, #244]	; (8102ac0 <HAL_DMA_Abort_IT+0x47c>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d009      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	4a3b      	ldr	r2, [pc, #236]	; (8102ac4 <HAL_DMA_Abort_IT+0x480>)
 81029d6:	4293      	cmp	r3, r2
 81029d8:	d004      	beq.n	81029e4 <HAL_DMA_Abort_IT+0x3a0>
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	4a3a      	ldr	r2, [pc, #232]	; (8102ac8 <HAL_DMA_Abort_IT+0x484>)
 81029e0:	4293      	cmp	r3, r2
 81029e2:	d101      	bne.n	81029e8 <HAL_DMA_Abort_IT+0x3a4>
 81029e4:	2301      	movs	r3, #1
 81029e6:	e000      	b.n	81029ea <HAL_DMA_Abort_IT+0x3a6>
 81029e8:	2300      	movs	r3, #0
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d028      	beq.n	8102a40 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81029f2:	681a      	ldr	r2, [r3, #0]
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81029f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81029fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a08:	f003 031f 	and.w	r3, r3, #31
 8102a0c:	2201      	movs	r2, #1
 8102a0e:	409a      	lsls	r2, r3
 8102a10:	68fb      	ldr	r3, [r7, #12]
 8102a12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102a18:	687a      	ldr	r2, [r7, #4]
 8102a1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102a1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a22:	2b00      	cmp	r3, #0
 8102a24:	d00c      	beq.n	8102a40 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a2a:	681a      	ldr	r2, [r3, #0]
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102a34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a3a:	687a      	ldr	r2, [r7, #4]
 8102a3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102a3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	2200      	movs	r2, #0
 8102a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	2201      	movs	r2, #1
 8102a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a54:	2b00      	cmp	r3, #0
 8102a56:	d003      	beq.n	8102a60 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a5c:	6878      	ldr	r0, [r7, #4]
 8102a5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8102a60:	2300      	movs	r3, #0
}
 8102a62:	4618      	mov	r0, r3
 8102a64:	3710      	adds	r7, #16
 8102a66:	46bd      	mov	sp, r7
 8102a68:	bd80      	pop	{r7, pc}
 8102a6a:	bf00      	nop
 8102a6c:	40020010 	.word	0x40020010
 8102a70:	40020028 	.word	0x40020028
 8102a74:	40020040 	.word	0x40020040
 8102a78:	40020058 	.word	0x40020058
 8102a7c:	40020070 	.word	0x40020070
 8102a80:	40020088 	.word	0x40020088
 8102a84:	400200a0 	.word	0x400200a0
 8102a88:	400200b8 	.word	0x400200b8
 8102a8c:	40020410 	.word	0x40020410
 8102a90:	40020428 	.word	0x40020428
 8102a94:	40020440 	.word	0x40020440
 8102a98:	40020458 	.word	0x40020458
 8102a9c:	40020470 	.word	0x40020470
 8102aa0:	40020488 	.word	0x40020488
 8102aa4:	400204a0 	.word	0x400204a0
 8102aa8:	400204b8 	.word	0x400204b8
 8102aac:	58025408 	.word	0x58025408
 8102ab0:	5802541c 	.word	0x5802541c
 8102ab4:	58025430 	.word	0x58025430
 8102ab8:	58025444 	.word	0x58025444
 8102abc:	58025458 	.word	0x58025458
 8102ac0:	5802546c 	.word	0x5802546c
 8102ac4:	58025480 	.word	0x58025480
 8102ac8:	58025494 	.word	0x58025494

08102acc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8102acc:	b580      	push	{r7, lr}
 8102ace:	b08a      	sub	sp, #40	; 0x28
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8102ad4:	2300      	movs	r3, #0
 8102ad6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102ad8:	4b67      	ldr	r3, [pc, #412]	; (8102c78 <HAL_DMA_IRQHandler+0x1ac>)
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	4a67      	ldr	r2, [pc, #412]	; (8102c7c <HAL_DMA_IRQHandler+0x1b0>)
 8102ade:	fba2 2303 	umull	r2, r3, r2, r3
 8102ae2:	0a9b      	lsrs	r3, r3, #10
 8102ae4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102aea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102af0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8102af2:	6a3b      	ldr	r3, [r7, #32]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8102af8:	69fb      	ldr	r3, [r7, #28]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	681b      	ldr	r3, [r3, #0]
 8102b02:	4a5f      	ldr	r2, [pc, #380]	; (8102c80 <HAL_DMA_IRQHandler+0x1b4>)
 8102b04:	4293      	cmp	r3, r2
 8102b06:	d04a      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b08:	687b      	ldr	r3, [r7, #4]
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	4a5d      	ldr	r2, [pc, #372]	; (8102c84 <HAL_DMA_IRQHandler+0x1b8>)
 8102b0e:	4293      	cmp	r3, r2
 8102b10:	d045      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	681b      	ldr	r3, [r3, #0]
 8102b16:	4a5c      	ldr	r2, [pc, #368]	; (8102c88 <HAL_DMA_IRQHandler+0x1bc>)
 8102b18:	4293      	cmp	r3, r2
 8102b1a:	d040      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	4a5a      	ldr	r2, [pc, #360]	; (8102c8c <HAL_DMA_IRQHandler+0x1c0>)
 8102b22:	4293      	cmp	r3, r2
 8102b24:	d03b      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a59      	ldr	r2, [pc, #356]	; (8102c90 <HAL_DMA_IRQHandler+0x1c4>)
 8102b2c:	4293      	cmp	r3, r2
 8102b2e:	d036      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	4a57      	ldr	r2, [pc, #348]	; (8102c94 <HAL_DMA_IRQHandler+0x1c8>)
 8102b36:	4293      	cmp	r3, r2
 8102b38:	d031      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a56      	ldr	r2, [pc, #344]	; (8102c98 <HAL_DMA_IRQHandler+0x1cc>)
 8102b40:	4293      	cmp	r3, r2
 8102b42:	d02c      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	4a54      	ldr	r2, [pc, #336]	; (8102c9c <HAL_DMA_IRQHandler+0x1d0>)
 8102b4a:	4293      	cmp	r3, r2
 8102b4c:	d027      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	4a53      	ldr	r2, [pc, #332]	; (8102ca0 <HAL_DMA_IRQHandler+0x1d4>)
 8102b54:	4293      	cmp	r3, r2
 8102b56:	d022      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	4a51      	ldr	r2, [pc, #324]	; (8102ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8102b5e:	4293      	cmp	r3, r2
 8102b60:	d01d      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	4a50      	ldr	r2, [pc, #320]	; (8102ca8 <HAL_DMA_IRQHandler+0x1dc>)
 8102b68:	4293      	cmp	r3, r2
 8102b6a:	d018      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	4a4e      	ldr	r2, [pc, #312]	; (8102cac <HAL_DMA_IRQHandler+0x1e0>)
 8102b72:	4293      	cmp	r3, r2
 8102b74:	d013      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	681b      	ldr	r3, [r3, #0]
 8102b7a:	4a4d      	ldr	r2, [pc, #308]	; (8102cb0 <HAL_DMA_IRQHandler+0x1e4>)
 8102b7c:	4293      	cmp	r3, r2
 8102b7e:	d00e      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	4a4b      	ldr	r2, [pc, #300]	; (8102cb4 <HAL_DMA_IRQHandler+0x1e8>)
 8102b86:	4293      	cmp	r3, r2
 8102b88:	d009      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	4a4a      	ldr	r2, [pc, #296]	; (8102cb8 <HAL_DMA_IRQHandler+0x1ec>)
 8102b90:	4293      	cmp	r3, r2
 8102b92:	d004      	beq.n	8102b9e <HAL_DMA_IRQHandler+0xd2>
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	4a48      	ldr	r2, [pc, #288]	; (8102cbc <HAL_DMA_IRQHandler+0x1f0>)
 8102b9a:	4293      	cmp	r3, r2
 8102b9c:	d101      	bne.n	8102ba2 <HAL_DMA_IRQHandler+0xd6>
 8102b9e:	2301      	movs	r3, #1
 8102ba0:	e000      	b.n	8102ba4 <HAL_DMA_IRQHandler+0xd8>
 8102ba2:	2300      	movs	r3, #0
 8102ba4:	2b00      	cmp	r3, #0
 8102ba6:	f000 842b 	beq.w	8103400 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102bae:	f003 031f 	and.w	r3, r3, #31
 8102bb2:	2208      	movs	r2, #8
 8102bb4:	409a      	lsls	r2, r3
 8102bb6:	69bb      	ldr	r3, [r7, #24]
 8102bb8:	4013      	ands	r3, r2
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	f000 80a2 	beq.w	8102d04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8102bc0:	687b      	ldr	r3, [r7, #4]
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	4a2e      	ldr	r2, [pc, #184]	; (8102c80 <HAL_DMA_IRQHandler+0x1b4>)
 8102bc6:	4293      	cmp	r3, r2
 8102bc8:	d04a      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4a2d      	ldr	r2, [pc, #180]	; (8102c84 <HAL_DMA_IRQHandler+0x1b8>)
 8102bd0:	4293      	cmp	r3, r2
 8102bd2:	d045      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	4a2b      	ldr	r2, [pc, #172]	; (8102c88 <HAL_DMA_IRQHandler+0x1bc>)
 8102bda:	4293      	cmp	r3, r2
 8102bdc:	d040      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	681b      	ldr	r3, [r3, #0]
 8102be2:	4a2a      	ldr	r2, [pc, #168]	; (8102c8c <HAL_DMA_IRQHandler+0x1c0>)
 8102be4:	4293      	cmp	r3, r2
 8102be6:	d03b      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	4a28      	ldr	r2, [pc, #160]	; (8102c90 <HAL_DMA_IRQHandler+0x1c4>)
 8102bee:	4293      	cmp	r3, r2
 8102bf0:	d036      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102bf2:	687b      	ldr	r3, [r7, #4]
 8102bf4:	681b      	ldr	r3, [r3, #0]
 8102bf6:	4a27      	ldr	r2, [pc, #156]	; (8102c94 <HAL_DMA_IRQHandler+0x1c8>)
 8102bf8:	4293      	cmp	r3, r2
 8102bfa:	d031      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	681b      	ldr	r3, [r3, #0]
 8102c00:	4a25      	ldr	r2, [pc, #148]	; (8102c98 <HAL_DMA_IRQHandler+0x1cc>)
 8102c02:	4293      	cmp	r3, r2
 8102c04:	d02c      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4a24      	ldr	r2, [pc, #144]	; (8102c9c <HAL_DMA_IRQHandler+0x1d0>)
 8102c0c:	4293      	cmp	r3, r2
 8102c0e:	d027      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	4a22      	ldr	r2, [pc, #136]	; (8102ca0 <HAL_DMA_IRQHandler+0x1d4>)
 8102c16:	4293      	cmp	r3, r2
 8102c18:	d022      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	4a21      	ldr	r2, [pc, #132]	; (8102ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8102c20:	4293      	cmp	r3, r2
 8102c22:	d01d      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a1f      	ldr	r2, [pc, #124]	; (8102ca8 <HAL_DMA_IRQHandler+0x1dc>)
 8102c2a:	4293      	cmp	r3, r2
 8102c2c:	d018      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	681b      	ldr	r3, [r3, #0]
 8102c32:	4a1e      	ldr	r2, [pc, #120]	; (8102cac <HAL_DMA_IRQHandler+0x1e0>)
 8102c34:	4293      	cmp	r3, r2
 8102c36:	d013      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4a1c      	ldr	r2, [pc, #112]	; (8102cb0 <HAL_DMA_IRQHandler+0x1e4>)
 8102c3e:	4293      	cmp	r3, r2
 8102c40:	d00e      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4a1b      	ldr	r2, [pc, #108]	; (8102cb4 <HAL_DMA_IRQHandler+0x1e8>)
 8102c48:	4293      	cmp	r3, r2
 8102c4a:	d009      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a19      	ldr	r2, [pc, #100]	; (8102cb8 <HAL_DMA_IRQHandler+0x1ec>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d004      	beq.n	8102c60 <HAL_DMA_IRQHandler+0x194>
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	4a18      	ldr	r2, [pc, #96]	; (8102cbc <HAL_DMA_IRQHandler+0x1f0>)
 8102c5c:	4293      	cmp	r3, r2
 8102c5e:	d12f      	bne.n	8102cc0 <HAL_DMA_IRQHandler+0x1f4>
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	f003 0304 	and.w	r3, r3, #4
 8102c6a:	2b00      	cmp	r3, #0
 8102c6c:	bf14      	ite	ne
 8102c6e:	2301      	movne	r3, #1
 8102c70:	2300      	moveq	r3, #0
 8102c72:	b2db      	uxtb	r3, r3
 8102c74:	e02e      	b.n	8102cd4 <HAL_DMA_IRQHandler+0x208>
 8102c76:	bf00      	nop
 8102c78:	10000000 	.word	0x10000000
 8102c7c:	1b4e81b5 	.word	0x1b4e81b5
 8102c80:	40020010 	.word	0x40020010
 8102c84:	40020028 	.word	0x40020028
 8102c88:	40020040 	.word	0x40020040
 8102c8c:	40020058 	.word	0x40020058
 8102c90:	40020070 	.word	0x40020070
 8102c94:	40020088 	.word	0x40020088
 8102c98:	400200a0 	.word	0x400200a0
 8102c9c:	400200b8 	.word	0x400200b8
 8102ca0:	40020410 	.word	0x40020410
 8102ca4:	40020428 	.word	0x40020428
 8102ca8:	40020440 	.word	0x40020440
 8102cac:	40020458 	.word	0x40020458
 8102cb0:	40020470 	.word	0x40020470
 8102cb4:	40020488 	.word	0x40020488
 8102cb8:	400204a0 	.word	0x400204a0
 8102cbc:	400204b8 	.word	0x400204b8
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	f003 0308 	and.w	r3, r3, #8
 8102cca:	2b00      	cmp	r3, #0
 8102ccc:	bf14      	ite	ne
 8102cce:	2301      	movne	r3, #1
 8102cd0:	2300      	moveq	r3, #0
 8102cd2:	b2db      	uxtb	r3, r3
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d015      	beq.n	8102d04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	681a      	ldr	r2, [r3, #0]
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	f022 0204 	bic.w	r2, r2, #4
 8102ce6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102cec:	f003 031f 	and.w	r3, r3, #31
 8102cf0:	2208      	movs	r2, #8
 8102cf2:	409a      	lsls	r2, r3
 8102cf4:	6a3b      	ldr	r3, [r7, #32]
 8102cf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cfc:	f043 0201 	orr.w	r2, r3, #1
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102d08:	f003 031f 	and.w	r3, r3, #31
 8102d0c:	69ba      	ldr	r2, [r7, #24]
 8102d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8102d12:	f003 0301 	and.w	r3, r3, #1
 8102d16:	2b00      	cmp	r3, #0
 8102d18:	d06e      	beq.n	8102df8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	681b      	ldr	r3, [r3, #0]
 8102d1e:	4a69      	ldr	r2, [pc, #420]	; (8102ec4 <HAL_DMA_IRQHandler+0x3f8>)
 8102d20:	4293      	cmp	r3, r2
 8102d22:	d04a      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	4a67      	ldr	r2, [pc, #412]	; (8102ec8 <HAL_DMA_IRQHandler+0x3fc>)
 8102d2a:	4293      	cmp	r3, r2
 8102d2c:	d045      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	4a66      	ldr	r2, [pc, #408]	; (8102ecc <HAL_DMA_IRQHandler+0x400>)
 8102d34:	4293      	cmp	r3, r2
 8102d36:	d040      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	4a64      	ldr	r2, [pc, #400]	; (8102ed0 <HAL_DMA_IRQHandler+0x404>)
 8102d3e:	4293      	cmp	r3, r2
 8102d40:	d03b      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	4a63      	ldr	r2, [pc, #396]	; (8102ed4 <HAL_DMA_IRQHandler+0x408>)
 8102d48:	4293      	cmp	r3, r2
 8102d4a:	d036      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	4a61      	ldr	r2, [pc, #388]	; (8102ed8 <HAL_DMA_IRQHandler+0x40c>)
 8102d52:	4293      	cmp	r3, r2
 8102d54:	d031      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4a60      	ldr	r2, [pc, #384]	; (8102edc <HAL_DMA_IRQHandler+0x410>)
 8102d5c:	4293      	cmp	r3, r2
 8102d5e:	d02c      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	4a5e      	ldr	r2, [pc, #376]	; (8102ee0 <HAL_DMA_IRQHandler+0x414>)
 8102d66:	4293      	cmp	r3, r2
 8102d68:	d027      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	4a5d      	ldr	r2, [pc, #372]	; (8102ee4 <HAL_DMA_IRQHandler+0x418>)
 8102d70:	4293      	cmp	r3, r2
 8102d72:	d022      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4a5b      	ldr	r2, [pc, #364]	; (8102ee8 <HAL_DMA_IRQHandler+0x41c>)
 8102d7a:	4293      	cmp	r3, r2
 8102d7c:	d01d      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	4a5a      	ldr	r2, [pc, #360]	; (8102eec <HAL_DMA_IRQHandler+0x420>)
 8102d84:	4293      	cmp	r3, r2
 8102d86:	d018      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	4a58      	ldr	r2, [pc, #352]	; (8102ef0 <HAL_DMA_IRQHandler+0x424>)
 8102d8e:	4293      	cmp	r3, r2
 8102d90:	d013      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	4a57      	ldr	r2, [pc, #348]	; (8102ef4 <HAL_DMA_IRQHandler+0x428>)
 8102d98:	4293      	cmp	r3, r2
 8102d9a:	d00e      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	4a55      	ldr	r2, [pc, #340]	; (8102ef8 <HAL_DMA_IRQHandler+0x42c>)
 8102da2:	4293      	cmp	r3, r2
 8102da4:	d009      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	4a54      	ldr	r2, [pc, #336]	; (8102efc <HAL_DMA_IRQHandler+0x430>)
 8102dac:	4293      	cmp	r3, r2
 8102dae:	d004      	beq.n	8102dba <HAL_DMA_IRQHandler+0x2ee>
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	4a52      	ldr	r2, [pc, #328]	; (8102f00 <HAL_DMA_IRQHandler+0x434>)
 8102db6:	4293      	cmp	r3, r2
 8102db8:	d10a      	bne.n	8102dd0 <HAL_DMA_IRQHandler+0x304>
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	695b      	ldr	r3, [r3, #20]
 8102dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	bf14      	ite	ne
 8102dc8:	2301      	movne	r3, #1
 8102dca:	2300      	moveq	r3, #0
 8102dcc:	b2db      	uxtb	r3, r3
 8102dce:	e003      	b.n	8102dd8 <HAL_DMA_IRQHandler+0x30c>
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	2300      	movs	r3, #0
 8102dd8:	2b00      	cmp	r3, #0
 8102dda:	d00d      	beq.n	8102df8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102de0:	f003 031f 	and.w	r3, r3, #31
 8102de4:	2201      	movs	r2, #1
 8102de6:	409a      	lsls	r2, r3
 8102de8:	6a3b      	ldr	r3, [r7, #32]
 8102dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102df0:	f043 0202 	orr.w	r2, r3, #2
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102dfc:	f003 031f 	and.w	r3, r3, #31
 8102e00:	2204      	movs	r2, #4
 8102e02:	409a      	lsls	r2, r3
 8102e04:	69bb      	ldr	r3, [r7, #24]
 8102e06:	4013      	ands	r3, r2
 8102e08:	2b00      	cmp	r3, #0
 8102e0a:	f000 808f 	beq.w	8102f2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	4a2c      	ldr	r2, [pc, #176]	; (8102ec4 <HAL_DMA_IRQHandler+0x3f8>)
 8102e14:	4293      	cmp	r3, r2
 8102e16:	d04a      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	4a2a      	ldr	r2, [pc, #168]	; (8102ec8 <HAL_DMA_IRQHandler+0x3fc>)
 8102e1e:	4293      	cmp	r3, r2
 8102e20:	d045      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	4a29      	ldr	r2, [pc, #164]	; (8102ecc <HAL_DMA_IRQHandler+0x400>)
 8102e28:	4293      	cmp	r3, r2
 8102e2a:	d040      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	4a27      	ldr	r2, [pc, #156]	; (8102ed0 <HAL_DMA_IRQHandler+0x404>)
 8102e32:	4293      	cmp	r3, r2
 8102e34:	d03b      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	4a26      	ldr	r2, [pc, #152]	; (8102ed4 <HAL_DMA_IRQHandler+0x408>)
 8102e3c:	4293      	cmp	r3, r2
 8102e3e:	d036      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	681b      	ldr	r3, [r3, #0]
 8102e44:	4a24      	ldr	r2, [pc, #144]	; (8102ed8 <HAL_DMA_IRQHandler+0x40c>)
 8102e46:	4293      	cmp	r3, r2
 8102e48:	d031      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	681b      	ldr	r3, [r3, #0]
 8102e4e:	4a23      	ldr	r2, [pc, #140]	; (8102edc <HAL_DMA_IRQHandler+0x410>)
 8102e50:	4293      	cmp	r3, r2
 8102e52:	d02c      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	4a21      	ldr	r2, [pc, #132]	; (8102ee0 <HAL_DMA_IRQHandler+0x414>)
 8102e5a:	4293      	cmp	r3, r2
 8102e5c:	d027      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	681b      	ldr	r3, [r3, #0]
 8102e62:	4a20      	ldr	r2, [pc, #128]	; (8102ee4 <HAL_DMA_IRQHandler+0x418>)
 8102e64:	4293      	cmp	r3, r2
 8102e66:	d022      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	681b      	ldr	r3, [r3, #0]
 8102e6c:	4a1e      	ldr	r2, [pc, #120]	; (8102ee8 <HAL_DMA_IRQHandler+0x41c>)
 8102e6e:	4293      	cmp	r3, r2
 8102e70:	d01d      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	4a1d      	ldr	r2, [pc, #116]	; (8102eec <HAL_DMA_IRQHandler+0x420>)
 8102e78:	4293      	cmp	r3, r2
 8102e7a:	d018      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	4a1b      	ldr	r2, [pc, #108]	; (8102ef0 <HAL_DMA_IRQHandler+0x424>)
 8102e82:	4293      	cmp	r3, r2
 8102e84:	d013      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	4a1a      	ldr	r2, [pc, #104]	; (8102ef4 <HAL_DMA_IRQHandler+0x428>)
 8102e8c:	4293      	cmp	r3, r2
 8102e8e:	d00e      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	4a18      	ldr	r2, [pc, #96]	; (8102ef8 <HAL_DMA_IRQHandler+0x42c>)
 8102e96:	4293      	cmp	r3, r2
 8102e98:	d009      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	4a17      	ldr	r2, [pc, #92]	; (8102efc <HAL_DMA_IRQHandler+0x430>)
 8102ea0:	4293      	cmp	r3, r2
 8102ea2:	d004      	beq.n	8102eae <HAL_DMA_IRQHandler+0x3e2>
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	681b      	ldr	r3, [r3, #0]
 8102ea8:	4a15      	ldr	r2, [pc, #84]	; (8102f00 <HAL_DMA_IRQHandler+0x434>)
 8102eaa:	4293      	cmp	r3, r2
 8102eac:	d12a      	bne.n	8102f04 <HAL_DMA_IRQHandler+0x438>
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	f003 0302 	and.w	r3, r3, #2
 8102eb8:	2b00      	cmp	r3, #0
 8102eba:	bf14      	ite	ne
 8102ebc:	2301      	movne	r3, #1
 8102ebe:	2300      	moveq	r3, #0
 8102ec0:	b2db      	uxtb	r3, r3
 8102ec2:	e023      	b.n	8102f0c <HAL_DMA_IRQHandler+0x440>
 8102ec4:	40020010 	.word	0x40020010
 8102ec8:	40020028 	.word	0x40020028
 8102ecc:	40020040 	.word	0x40020040
 8102ed0:	40020058 	.word	0x40020058
 8102ed4:	40020070 	.word	0x40020070
 8102ed8:	40020088 	.word	0x40020088
 8102edc:	400200a0 	.word	0x400200a0
 8102ee0:	400200b8 	.word	0x400200b8
 8102ee4:	40020410 	.word	0x40020410
 8102ee8:	40020428 	.word	0x40020428
 8102eec:	40020440 	.word	0x40020440
 8102ef0:	40020458 	.word	0x40020458
 8102ef4:	40020470 	.word	0x40020470
 8102ef8:	40020488 	.word	0x40020488
 8102efc:	400204a0 	.word	0x400204a0
 8102f00:	400204b8 	.word	0x400204b8
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	2300      	movs	r3, #0
 8102f0c:	2b00      	cmp	r3, #0
 8102f0e:	d00d      	beq.n	8102f2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f14:	f003 031f 	and.w	r3, r3, #31
 8102f18:	2204      	movs	r2, #4
 8102f1a:	409a      	lsls	r2, r3
 8102f1c:	6a3b      	ldr	r3, [r7, #32]
 8102f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f24:	f043 0204 	orr.w	r2, r3, #4
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102f30:	f003 031f 	and.w	r3, r3, #31
 8102f34:	2210      	movs	r2, #16
 8102f36:	409a      	lsls	r2, r3
 8102f38:	69bb      	ldr	r3, [r7, #24]
 8102f3a:	4013      	ands	r3, r2
 8102f3c:	2b00      	cmp	r3, #0
 8102f3e:	f000 80a6 	beq.w	810308e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	4a85      	ldr	r2, [pc, #532]	; (810315c <HAL_DMA_IRQHandler+0x690>)
 8102f48:	4293      	cmp	r3, r2
 8102f4a:	d04a      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a83      	ldr	r2, [pc, #524]	; (8103160 <HAL_DMA_IRQHandler+0x694>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d045      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	4a82      	ldr	r2, [pc, #520]	; (8103164 <HAL_DMA_IRQHandler+0x698>)
 8102f5c:	4293      	cmp	r3, r2
 8102f5e:	d040      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	4a80      	ldr	r2, [pc, #512]	; (8103168 <HAL_DMA_IRQHandler+0x69c>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d03b      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	681b      	ldr	r3, [r3, #0]
 8102f6e:	4a7f      	ldr	r2, [pc, #508]	; (810316c <HAL_DMA_IRQHandler+0x6a0>)
 8102f70:	4293      	cmp	r3, r2
 8102f72:	d036      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a7d      	ldr	r2, [pc, #500]	; (8103170 <HAL_DMA_IRQHandler+0x6a4>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d031      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	4a7c      	ldr	r2, [pc, #496]	; (8103174 <HAL_DMA_IRQHandler+0x6a8>)
 8102f84:	4293      	cmp	r3, r2
 8102f86:	d02c      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	4a7a      	ldr	r2, [pc, #488]	; (8103178 <HAL_DMA_IRQHandler+0x6ac>)
 8102f8e:	4293      	cmp	r3, r2
 8102f90:	d027      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4a79      	ldr	r2, [pc, #484]	; (810317c <HAL_DMA_IRQHandler+0x6b0>)
 8102f98:	4293      	cmp	r3, r2
 8102f9a:	d022      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	4a77      	ldr	r2, [pc, #476]	; (8103180 <HAL_DMA_IRQHandler+0x6b4>)
 8102fa2:	4293      	cmp	r3, r2
 8102fa4:	d01d      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	681b      	ldr	r3, [r3, #0]
 8102faa:	4a76      	ldr	r2, [pc, #472]	; (8103184 <HAL_DMA_IRQHandler+0x6b8>)
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d018      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	4a74      	ldr	r2, [pc, #464]	; (8103188 <HAL_DMA_IRQHandler+0x6bc>)
 8102fb6:	4293      	cmp	r3, r2
 8102fb8:	d013      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	4a73      	ldr	r2, [pc, #460]	; (810318c <HAL_DMA_IRQHandler+0x6c0>)
 8102fc0:	4293      	cmp	r3, r2
 8102fc2:	d00e      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4a71      	ldr	r2, [pc, #452]	; (8103190 <HAL_DMA_IRQHandler+0x6c4>)
 8102fca:	4293      	cmp	r3, r2
 8102fcc:	d009      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	4a70      	ldr	r2, [pc, #448]	; (8103194 <HAL_DMA_IRQHandler+0x6c8>)
 8102fd4:	4293      	cmp	r3, r2
 8102fd6:	d004      	beq.n	8102fe2 <HAL_DMA_IRQHandler+0x516>
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	4a6e      	ldr	r2, [pc, #440]	; (8103198 <HAL_DMA_IRQHandler+0x6cc>)
 8102fde:	4293      	cmp	r3, r2
 8102fe0:	d10a      	bne.n	8102ff8 <HAL_DMA_IRQHandler+0x52c>
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	f003 0308 	and.w	r3, r3, #8
 8102fec:	2b00      	cmp	r3, #0
 8102fee:	bf14      	ite	ne
 8102ff0:	2301      	movne	r3, #1
 8102ff2:	2300      	moveq	r3, #0
 8102ff4:	b2db      	uxtb	r3, r3
 8102ff6:	e009      	b.n	810300c <HAL_DMA_IRQHandler+0x540>
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	f003 0304 	and.w	r3, r3, #4
 8103002:	2b00      	cmp	r3, #0
 8103004:	bf14      	ite	ne
 8103006:	2301      	movne	r3, #1
 8103008:	2300      	moveq	r3, #0
 810300a:	b2db      	uxtb	r3, r3
 810300c:	2b00      	cmp	r3, #0
 810300e:	d03e      	beq.n	810308e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103014:	f003 031f 	and.w	r3, r3, #31
 8103018:	2210      	movs	r2, #16
 810301a:	409a      	lsls	r2, r3
 810301c:	6a3b      	ldr	r3, [r7, #32]
 810301e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810302a:	2b00      	cmp	r3, #0
 810302c:	d018      	beq.n	8103060 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810302e:	687b      	ldr	r3, [r7, #4]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	681b      	ldr	r3, [r3, #0]
 8103034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103038:	2b00      	cmp	r3, #0
 810303a:	d108      	bne.n	810304e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103040:	2b00      	cmp	r3, #0
 8103042:	d024      	beq.n	810308e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103048:	6878      	ldr	r0, [r7, #4]
 810304a:	4798      	blx	r3
 810304c:	e01f      	b.n	810308e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103052:	2b00      	cmp	r3, #0
 8103054:	d01b      	beq.n	810308e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810305a:	6878      	ldr	r0, [r7, #4]
 810305c:	4798      	blx	r3
 810305e:	e016      	b.n	810308e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810306a:	2b00      	cmp	r3, #0
 810306c:	d107      	bne.n	810307e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	681a      	ldr	r2, [r3, #0]
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	f022 0208 	bic.w	r2, r2, #8
 810307c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103082:	2b00      	cmp	r3, #0
 8103084:	d003      	beq.n	810308e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103086:	687b      	ldr	r3, [r7, #4]
 8103088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810308a:	6878      	ldr	r0, [r7, #4]
 810308c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103092:	f003 031f 	and.w	r3, r3, #31
 8103096:	2220      	movs	r2, #32
 8103098:	409a      	lsls	r2, r3
 810309a:	69bb      	ldr	r3, [r7, #24]
 810309c:	4013      	ands	r3, r2
 810309e:	2b00      	cmp	r3, #0
 81030a0:	f000 8110 	beq.w	81032c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	4a2c      	ldr	r2, [pc, #176]	; (810315c <HAL_DMA_IRQHandler+0x690>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d04a      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	4a2b      	ldr	r2, [pc, #172]	; (8103160 <HAL_DMA_IRQHandler+0x694>)
 81030b4:	4293      	cmp	r3, r2
 81030b6:	d045      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	4a29      	ldr	r2, [pc, #164]	; (8103164 <HAL_DMA_IRQHandler+0x698>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d040      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	4a28      	ldr	r2, [pc, #160]	; (8103168 <HAL_DMA_IRQHandler+0x69c>)
 81030c8:	4293      	cmp	r3, r2
 81030ca:	d03b      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4a26      	ldr	r2, [pc, #152]	; (810316c <HAL_DMA_IRQHandler+0x6a0>)
 81030d2:	4293      	cmp	r3, r2
 81030d4:	d036      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	681b      	ldr	r3, [r3, #0]
 81030da:	4a25      	ldr	r2, [pc, #148]	; (8103170 <HAL_DMA_IRQHandler+0x6a4>)
 81030dc:	4293      	cmp	r3, r2
 81030de:	d031      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	4a23      	ldr	r2, [pc, #140]	; (8103174 <HAL_DMA_IRQHandler+0x6a8>)
 81030e6:	4293      	cmp	r3, r2
 81030e8:	d02c      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	4a22      	ldr	r2, [pc, #136]	; (8103178 <HAL_DMA_IRQHandler+0x6ac>)
 81030f0:	4293      	cmp	r3, r2
 81030f2:	d027      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	4a20      	ldr	r2, [pc, #128]	; (810317c <HAL_DMA_IRQHandler+0x6b0>)
 81030fa:	4293      	cmp	r3, r2
 81030fc:	d022      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4a1f      	ldr	r2, [pc, #124]	; (8103180 <HAL_DMA_IRQHandler+0x6b4>)
 8103104:	4293      	cmp	r3, r2
 8103106:	d01d      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	4a1d      	ldr	r2, [pc, #116]	; (8103184 <HAL_DMA_IRQHandler+0x6b8>)
 810310e:	4293      	cmp	r3, r2
 8103110:	d018      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4a1c      	ldr	r2, [pc, #112]	; (8103188 <HAL_DMA_IRQHandler+0x6bc>)
 8103118:	4293      	cmp	r3, r2
 810311a:	d013      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	4a1a      	ldr	r2, [pc, #104]	; (810318c <HAL_DMA_IRQHandler+0x6c0>)
 8103122:	4293      	cmp	r3, r2
 8103124:	d00e      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a19      	ldr	r2, [pc, #100]	; (8103190 <HAL_DMA_IRQHandler+0x6c4>)
 810312c:	4293      	cmp	r3, r2
 810312e:	d009      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	4a17      	ldr	r2, [pc, #92]	; (8103194 <HAL_DMA_IRQHandler+0x6c8>)
 8103136:	4293      	cmp	r3, r2
 8103138:	d004      	beq.n	8103144 <HAL_DMA_IRQHandler+0x678>
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	4a16      	ldr	r2, [pc, #88]	; (8103198 <HAL_DMA_IRQHandler+0x6cc>)
 8103140:	4293      	cmp	r3, r2
 8103142:	d12b      	bne.n	810319c <HAL_DMA_IRQHandler+0x6d0>
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	f003 0310 	and.w	r3, r3, #16
 810314e:	2b00      	cmp	r3, #0
 8103150:	bf14      	ite	ne
 8103152:	2301      	movne	r3, #1
 8103154:	2300      	moveq	r3, #0
 8103156:	b2db      	uxtb	r3, r3
 8103158:	e02a      	b.n	81031b0 <HAL_DMA_IRQHandler+0x6e4>
 810315a:	bf00      	nop
 810315c:	40020010 	.word	0x40020010
 8103160:	40020028 	.word	0x40020028
 8103164:	40020040 	.word	0x40020040
 8103168:	40020058 	.word	0x40020058
 810316c:	40020070 	.word	0x40020070
 8103170:	40020088 	.word	0x40020088
 8103174:	400200a0 	.word	0x400200a0
 8103178:	400200b8 	.word	0x400200b8
 810317c:	40020410 	.word	0x40020410
 8103180:	40020428 	.word	0x40020428
 8103184:	40020440 	.word	0x40020440
 8103188:	40020458 	.word	0x40020458
 810318c:	40020470 	.word	0x40020470
 8103190:	40020488 	.word	0x40020488
 8103194:	400204a0 	.word	0x400204a0
 8103198:	400204b8 	.word	0x400204b8
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	f003 0302 	and.w	r3, r3, #2
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	bf14      	ite	ne
 81031aa:	2301      	movne	r3, #1
 81031ac:	2300      	moveq	r3, #0
 81031ae:	b2db      	uxtb	r3, r3
 81031b0:	2b00      	cmp	r3, #0
 81031b2:	f000 8087 	beq.w	81032c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031ba:	f003 031f 	and.w	r3, r3, #31
 81031be:	2220      	movs	r2, #32
 81031c0:	409a      	lsls	r2, r3
 81031c2:	6a3b      	ldr	r3, [r7, #32]
 81031c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81031cc:	b2db      	uxtb	r3, r3
 81031ce:	2b04      	cmp	r3, #4
 81031d0:	d139      	bne.n	8103246 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	681a      	ldr	r2, [r3, #0]
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	f022 0216 	bic.w	r2, r2, #22
 81031e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	695a      	ldr	r2, [r3, #20]
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81031f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81031f6:	2b00      	cmp	r3, #0
 81031f8:	d103      	bne.n	8103202 <HAL_DMA_IRQHandler+0x736>
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81031fe:	2b00      	cmp	r3, #0
 8103200:	d007      	beq.n	8103212 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	681b      	ldr	r3, [r3, #0]
 8103206:	681a      	ldr	r2, [r3, #0]
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	f022 0208 	bic.w	r2, r2, #8
 8103210:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103216:	f003 031f 	and.w	r3, r3, #31
 810321a:	223f      	movs	r2, #63	; 0x3f
 810321c:	409a      	lsls	r2, r3
 810321e:	6a3b      	ldr	r3, [r7, #32]
 8103220:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	2200      	movs	r2, #0
 8103226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	2201      	movs	r2, #1
 810322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103236:	2b00      	cmp	r3, #0
 8103238:	f000 834a 	beq.w	81038d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103240:	6878      	ldr	r0, [r7, #4]
 8103242:	4798      	blx	r3
          }
          return;
 8103244:	e344      	b.n	81038d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103250:	2b00      	cmp	r3, #0
 8103252:	d018      	beq.n	8103286 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810325e:	2b00      	cmp	r3, #0
 8103260:	d108      	bne.n	8103274 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103266:	2b00      	cmp	r3, #0
 8103268:	d02c      	beq.n	81032c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810326e:	6878      	ldr	r0, [r7, #4]
 8103270:	4798      	blx	r3
 8103272:	e027      	b.n	81032c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103278:	2b00      	cmp	r3, #0
 810327a:	d023      	beq.n	81032c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103280:	6878      	ldr	r0, [r7, #4]
 8103282:	4798      	blx	r3
 8103284:	e01e      	b.n	81032c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	681b      	ldr	r3, [r3, #0]
 810328a:	681b      	ldr	r3, [r3, #0]
 810328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103290:	2b00      	cmp	r3, #0
 8103292:	d10f      	bne.n	81032b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	681a      	ldr	r2, [r3, #0]
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	f022 0210 	bic.w	r2, r2, #16
 81032a2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	2200      	movs	r2, #0
 81032a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	2201      	movs	r2, #1
 81032b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d003      	beq.n	81032c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81032c0:	6878      	ldr	r0, [r7, #4]
 81032c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032c8:	2b00      	cmp	r3, #0
 81032ca:	f000 8306 	beq.w	81038da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032d2:	f003 0301 	and.w	r3, r3, #1
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	f000 8088 	beq.w	81033ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	2204      	movs	r2, #4
 81032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	4a7a      	ldr	r2, [pc, #488]	; (81034d4 <HAL_DMA_IRQHandler+0xa08>)
 81032ea:	4293      	cmp	r3, r2
 81032ec:	d04a      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	4a79      	ldr	r2, [pc, #484]	; (81034d8 <HAL_DMA_IRQHandler+0xa0c>)
 81032f4:	4293      	cmp	r3, r2
 81032f6:	d045      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	4a77      	ldr	r2, [pc, #476]	; (81034dc <HAL_DMA_IRQHandler+0xa10>)
 81032fe:	4293      	cmp	r3, r2
 8103300:	d040      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	4a76      	ldr	r2, [pc, #472]	; (81034e0 <HAL_DMA_IRQHandler+0xa14>)
 8103308:	4293      	cmp	r3, r2
 810330a:	d03b      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	4a74      	ldr	r2, [pc, #464]	; (81034e4 <HAL_DMA_IRQHandler+0xa18>)
 8103312:	4293      	cmp	r3, r2
 8103314:	d036      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	4a73      	ldr	r2, [pc, #460]	; (81034e8 <HAL_DMA_IRQHandler+0xa1c>)
 810331c:	4293      	cmp	r3, r2
 810331e:	d031      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	4a71      	ldr	r2, [pc, #452]	; (81034ec <HAL_DMA_IRQHandler+0xa20>)
 8103326:	4293      	cmp	r3, r2
 8103328:	d02c      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	681b      	ldr	r3, [r3, #0]
 810332e:	4a70      	ldr	r2, [pc, #448]	; (81034f0 <HAL_DMA_IRQHandler+0xa24>)
 8103330:	4293      	cmp	r3, r2
 8103332:	d027      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	4a6e      	ldr	r2, [pc, #440]	; (81034f4 <HAL_DMA_IRQHandler+0xa28>)
 810333a:	4293      	cmp	r3, r2
 810333c:	d022      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	4a6d      	ldr	r2, [pc, #436]	; (81034f8 <HAL_DMA_IRQHandler+0xa2c>)
 8103344:	4293      	cmp	r3, r2
 8103346:	d01d      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	681b      	ldr	r3, [r3, #0]
 810334c:	4a6b      	ldr	r2, [pc, #428]	; (81034fc <HAL_DMA_IRQHandler+0xa30>)
 810334e:	4293      	cmp	r3, r2
 8103350:	d018      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	4a6a      	ldr	r2, [pc, #424]	; (8103500 <HAL_DMA_IRQHandler+0xa34>)
 8103358:	4293      	cmp	r3, r2
 810335a:	d013      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	681b      	ldr	r3, [r3, #0]
 8103360:	4a68      	ldr	r2, [pc, #416]	; (8103504 <HAL_DMA_IRQHandler+0xa38>)
 8103362:	4293      	cmp	r3, r2
 8103364:	d00e      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	681b      	ldr	r3, [r3, #0]
 810336a:	4a67      	ldr	r2, [pc, #412]	; (8103508 <HAL_DMA_IRQHandler+0xa3c>)
 810336c:	4293      	cmp	r3, r2
 810336e:	d009      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	4a65      	ldr	r2, [pc, #404]	; (810350c <HAL_DMA_IRQHandler+0xa40>)
 8103376:	4293      	cmp	r3, r2
 8103378:	d004      	beq.n	8103384 <HAL_DMA_IRQHandler+0x8b8>
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a64      	ldr	r2, [pc, #400]	; (8103510 <HAL_DMA_IRQHandler+0xa44>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d108      	bne.n	8103396 <HAL_DMA_IRQHandler+0x8ca>
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	681a      	ldr	r2, [r3, #0]
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	f022 0201 	bic.w	r2, r2, #1
 8103392:	601a      	str	r2, [r3, #0]
 8103394:	e007      	b.n	81033a6 <HAL_DMA_IRQHandler+0x8da>
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	681b      	ldr	r3, [r3, #0]
 810339a:	681a      	ldr	r2, [r3, #0]
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	f022 0201 	bic.w	r2, r2, #1
 81033a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81033a6:	68fb      	ldr	r3, [r7, #12]
 81033a8:	3301      	adds	r3, #1
 81033aa:	60fb      	str	r3, [r7, #12]
 81033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81033ae:	429a      	cmp	r2, r3
 81033b0:	d307      	bcc.n	81033c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	f003 0301 	and.w	r3, r3, #1
 81033bc:	2b00      	cmp	r3, #0
 81033be:	d1f2      	bne.n	81033a6 <HAL_DMA_IRQHandler+0x8da>
 81033c0:	e000      	b.n	81033c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81033c2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	2200      	movs	r2, #0
 81033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	f003 0301 	and.w	r3, r3, #1
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d004      	beq.n	81033e4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	2203      	movs	r2, #3
 81033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81033e2:	e003      	b.n	81033ec <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	2201      	movs	r2, #1
 81033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	f000 8272 	beq.w	81038da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81033f6:	687b      	ldr	r3, [r7, #4]
 81033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81033fa:	6878      	ldr	r0, [r7, #4]
 81033fc:	4798      	blx	r3
 81033fe:	e26c      	b.n	81038da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	681b      	ldr	r3, [r3, #0]
 8103404:	4a43      	ldr	r2, [pc, #268]	; (8103514 <HAL_DMA_IRQHandler+0xa48>)
 8103406:	4293      	cmp	r3, r2
 8103408:	d022      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	681b      	ldr	r3, [r3, #0]
 810340e:	4a42      	ldr	r2, [pc, #264]	; (8103518 <HAL_DMA_IRQHandler+0xa4c>)
 8103410:	4293      	cmp	r3, r2
 8103412:	d01d      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 8103414:	687b      	ldr	r3, [r7, #4]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	4a40      	ldr	r2, [pc, #256]	; (810351c <HAL_DMA_IRQHandler+0xa50>)
 810341a:	4293      	cmp	r3, r2
 810341c:	d018      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	4a3f      	ldr	r2, [pc, #252]	; (8103520 <HAL_DMA_IRQHandler+0xa54>)
 8103424:	4293      	cmp	r3, r2
 8103426:	d013      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	4a3d      	ldr	r2, [pc, #244]	; (8103524 <HAL_DMA_IRQHandler+0xa58>)
 810342e:	4293      	cmp	r3, r2
 8103430:	d00e      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a3c      	ldr	r2, [pc, #240]	; (8103528 <HAL_DMA_IRQHandler+0xa5c>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d009      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	4a3a      	ldr	r2, [pc, #232]	; (810352c <HAL_DMA_IRQHandler+0xa60>)
 8103442:	4293      	cmp	r3, r2
 8103444:	d004      	beq.n	8103450 <HAL_DMA_IRQHandler+0x984>
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	681b      	ldr	r3, [r3, #0]
 810344a:	4a39      	ldr	r2, [pc, #228]	; (8103530 <HAL_DMA_IRQHandler+0xa64>)
 810344c:	4293      	cmp	r3, r2
 810344e:	d101      	bne.n	8103454 <HAL_DMA_IRQHandler+0x988>
 8103450:	2301      	movs	r3, #1
 8103452:	e000      	b.n	8103456 <HAL_DMA_IRQHandler+0x98a>
 8103454:	2300      	movs	r3, #0
 8103456:	2b00      	cmp	r3, #0
 8103458:	f000 823f 	beq.w	81038da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103468:	f003 031f 	and.w	r3, r3, #31
 810346c:	2204      	movs	r2, #4
 810346e:	409a      	lsls	r2, r3
 8103470:	697b      	ldr	r3, [r7, #20]
 8103472:	4013      	ands	r3, r2
 8103474:	2b00      	cmp	r3, #0
 8103476:	f000 80cd 	beq.w	8103614 <HAL_DMA_IRQHandler+0xb48>
 810347a:	693b      	ldr	r3, [r7, #16]
 810347c:	f003 0304 	and.w	r3, r3, #4
 8103480:	2b00      	cmp	r3, #0
 8103482:	f000 80c7 	beq.w	8103614 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810348a:	f003 031f 	and.w	r3, r3, #31
 810348e:	2204      	movs	r2, #4
 8103490:	409a      	lsls	r2, r3
 8103492:	69fb      	ldr	r3, [r7, #28]
 8103494:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103496:	693b      	ldr	r3, [r7, #16]
 8103498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810349c:	2b00      	cmp	r3, #0
 810349e:	d049      	beq.n	8103534 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81034a0:	693b      	ldr	r3, [r7, #16]
 81034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81034a6:	2b00      	cmp	r3, #0
 81034a8:	d109      	bne.n	81034be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81034ae:	2b00      	cmp	r3, #0
 81034b0:	f000 8210 	beq.w	81038d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81034b8:	6878      	ldr	r0, [r7, #4]
 81034ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81034bc:	e20a      	b.n	81038d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	f000 8206 	beq.w	81038d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034cc:	6878      	ldr	r0, [r7, #4]
 81034ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81034d0:	e200      	b.n	81038d4 <HAL_DMA_IRQHandler+0xe08>
 81034d2:	bf00      	nop
 81034d4:	40020010 	.word	0x40020010
 81034d8:	40020028 	.word	0x40020028
 81034dc:	40020040 	.word	0x40020040
 81034e0:	40020058 	.word	0x40020058
 81034e4:	40020070 	.word	0x40020070
 81034e8:	40020088 	.word	0x40020088
 81034ec:	400200a0 	.word	0x400200a0
 81034f0:	400200b8 	.word	0x400200b8
 81034f4:	40020410 	.word	0x40020410
 81034f8:	40020428 	.word	0x40020428
 81034fc:	40020440 	.word	0x40020440
 8103500:	40020458 	.word	0x40020458
 8103504:	40020470 	.word	0x40020470
 8103508:	40020488 	.word	0x40020488
 810350c:	400204a0 	.word	0x400204a0
 8103510:	400204b8 	.word	0x400204b8
 8103514:	58025408 	.word	0x58025408
 8103518:	5802541c 	.word	0x5802541c
 810351c:	58025430 	.word	0x58025430
 8103520:	58025444 	.word	0x58025444
 8103524:	58025458 	.word	0x58025458
 8103528:	5802546c 	.word	0x5802546c
 810352c:	58025480 	.word	0x58025480
 8103530:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103534:	693b      	ldr	r3, [r7, #16]
 8103536:	f003 0320 	and.w	r3, r3, #32
 810353a:	2b00      	cmp	r3, #0
 810353c:	d160      	bne.n	8103600 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	681b      	ldr	r3, [r3, #0]
 8103542:	4a8c      	ldr	r2, [pc, #560]	; (8103774 <HAL_DMA_IRQHandler+0xca8>)
 8103544:	4293      	cmp	r3, r2
 8103546:	d04a      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	681b      	ldr	r3, [r3, #0]
 810354c:	4a8a      	ldr	r2, [pc, #552]	; (8103778 <HAL_DMA_IRQHandler+0xcac>)
 810354e:	4293      	cmp	r3, r2
 8103550:	d045      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	681b      	ldr	r3, [r3, #0]
 8103556:	4a89      	ldr	r2, [pc, #548]	; (810377c <HAL_DMA_IRQHandler+0xcb0>)
 8103558:	4293      	cmp	r3, r2
 810355a:	d040      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	681b      	ldr	r3, [r3, #0]
 8103560:	4a87      	ldr	r2, [pc, #540]	; (8103780 <HAL_DMA_IRQHandler+0xcb4>)
 8103562:	4293      	cmp	r3, r2
 8103564:	d03b      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	681b      	ldr	r3, [r3, #0]
 810356a:	4a86      	ldr	r2, [pc, #536]	; (8103784 <HAL_DMA_IRQHandler+0xcb8>)
 810356c:	4293      	cmp	r3, r2
 810356e:	d036      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	4a84      	ldr	r2, [pc, #528]	; (8103788 <HAL_DMA_IRQHandler+0xcbc>)
 8103576:	4293      	cmp	r3, r2
 8103578:	d031      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	681b      	ldr	r3, [r3, #0]
 810357e:	4a83      	ldr	r2, [pc, #524]	; (810378c <HAL_DMA_IRQHandler+0xcc0>)
 8103580:	4293      	cmp	r3, r2
 8103582:	d02c      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	681b      	ldr	r3, [r3, #0]
 8103588:	4a81      	ldr	r2, [pc, #516]	; (8103790 <HAL_DMA_IRQHandler+0xcc4>)
 810358a:	4293      	cmp	r3, r2
 810358c:	d027      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	681b      	ldr	r3, [r3, #0]
 8103592:	4a80      	ldr	r2, [pc, #512]	; (8103794 <HAL_DMA_IRQHandler+0xcc8>)
 8103594:	4293      	cmp	r3, r2
 8103596:	d022      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	4a7e      	ldr	r2, [pc, #504]	; (8103798 <HAL_DMA_IRQHandler+0xccc>)
 810359e:	4293      	cmp	r3, r2
 81035a0:	d01d      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	4a7d      	ldr	r2, [pc, #500]	; (810379c <HAL_DMA_IRQHandler+0xcd0>)
 81035a8:	4293      	cmp	r3, r2
 81035aa:	d018      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 81035ac:	687b      	ldr	r3, [r7, #4]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	4a7b      	ldr	r2, [pc, #492]	; (81037a0 <HAL_DMA_IRQHandler+0xcd4>)
 81035b2:	4293      	cmp	r3, r2
 81035b4:	d013      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	4a7a      	ldr	r2, [pc, #488]	; (81037a4 <HAL_DMA_IRQHandler+0xcd8>)
 81035bc:	4293      	cmp	r3, r2
 81035be:	d00e      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	4a78      	ldr	r2, [pc, #480]	; (81037a8 <HAL_DMA_IRQHandler+0xcdc>)
 81035c6:	4293      	cmp	r3, r2
 81035c8:	d009      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	4a77      	ldr	r2, [pc, #476]	; (81037ac <HAL_DMA_IRQHandler+0xce0>)
 81035d0:	4293      	cmp	r3, r2
 81035d2:	d004      	beq.n	81035de <HAL_DMA_IRQHandler+0xb12>
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	4a75      	ldr	r2, [pc, #468]	; (81037b0 <HAL_DMA_IRQHandler+0xce4>)
 81035da:	4293      	cmp	r3, r2
 81035dc:	d108      	bne.n	81035f0 <HAL_DMA_IRQHandler+0xb24>
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	681a      	ldr	r2, [r3, #0]
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	f022 0208 	bic.w	r2, r2, #8
 81035ec:	601a      	str	r2, [r3, #0]
 81035ee:	e007      	b.n	8103600 <HAL_DMA_IRQHandler+0xb34>
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	681b      	ldr	r3, [r3, #0]
 81035f4:	681a      	ldr	r2, [r3, #0]
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	f022 0204 	bic.w	r2, r2, #4
 81035fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103604:	2b00      	cmp	r3, #0
 8103606:	f000 8165 	beq.w	81038d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810360e:	6878      	ldr	r0, [r7, #4]
 8103610:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103612:	e15f      	b.n	81038d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103618:	f003 031f 	and.w	r3, r3, #31
 810361c:	2202      	movs	r2, #2
 810361e:	409a      	lsls	r2, r3
 8103620:	697b      	ldr	r3, [r7, #20]
 8103622:	4013      	ands	r3, r2
 8103624:	2b00      	cmp	r3, #0
 8103626:	f000 80c5 	beq.w	81037b4 <HAL_DMA_IRQHandler+0xce8>
 810362a:	693b      	ldr	r3, [r7, #16]
 810362c:	f003 0302 	and.w	r3, r3, #2
 8103630:	2b00      	cmp	r3, #0
 8103632:	f000 80bf 	beq.w	81037b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810363a:	f003 031f 	and.w	r3, r3, #31
 810363e:	2202      	movs	r2, #2
 8103640:	409a      	lsls	r2, r3
 8103642:	69fb      	ldr	r3, [r7, #28]
 8103644:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103646:	693b      	ldr	r3, [r7, #16]
 8103648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810364c:	2b00      	cmp	r3, #0
 810364e:	d018      	beq.n	8103682 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103650:	693b      	ldr	r3, [r7, #16]
 8103652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103656:	2b00      	cmp	r3, #0
 8103658:	d109      	bne.n	810366e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810365e:	2b00      	cmp	r3, #0
 8103660:	f000 813a 	beq.w	81038d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103668:	6878      	ldr	r0, [r7, #4]
 810366a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810366c:	e134      	b.n	81038d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103672:	2b00      	cmp	r3, #0
 8103674:	f000 8130 	beq.w	81038d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810367c:	6878      	ldr	r0, [r7, #4]
 810367e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103680:	e12a      	b.n	81038d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103682:	693b      	ldr	r3, [r7, #16]
 8103684:	f003 0320 	and.w	r3, r3, #32
 8103688:	2b00      	cmp	r3, #0
 810368a:	d168      	bne.n	810375e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	681b      	ldr	r3, [r3, #0]
 8103690:	4a38      	ldr	r2, [pc, #224]	; (8103774 <HAL_DMA_IRQHandler+0xca8>)
 8103692:	4293      	cmp	r3, r2
 8103694:	d04a      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	681b      	ldr	r3, [r3, #0]
 810369a:	4a37      	ldr	r2, [pc, #220]	; (8103778 <HAL_DMA_IRQHandler+0xcac>)
 810369c:	4293      	cmp	r3, r2
 810369e:	d045      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	681b      	ldr	r3, [r3, #0]
 81036a4:	4a35      	ldr	r2, [pc, #212]	; (810377c <HAL_DMA_IRQHandler+0xcb0>)
 81036a6:	4293      	cmp	r3, r2
 81036a8:	d040      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	681b      	ldr	r3, [r3, #0]
 81036ae:	4a34      	ldr	r2, [pc, #208]	; (8103780 <HAL_DMA_IRQHandler+0xcb4>)
 81036b0:	4293      	cmp	r3, r2
 81036b2:	d03b      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	4a32      	ldr	r2, [pc, #200]	; (8103784 <HAL_DMA_IRQHandler+0xcb8>)
 81036ba:	4293      	cmp	r3, r2
 81036bc:	d036      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	4a31      	ldr	r2, [pc, #196]	; (8103788 <HAL_DMA_IRQHandler+0xcbc>)
 81036c4:	4293      	cmp	r3, r2
 81036c6:	d031      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	681b      	ldr	r3, [r3, #0]
 81036cc:	4a2f      	ldr	r2, [pc, #188]	; (810378c <HAL_DMA_IRQHandler+0xcc0>)
 81036ce:	4293      	cmp	r3, r2
 81036d0:	d02c      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	4a2e      	ldr	r2, [pc, #184]	; (8103790 <HAL_DMA_IRQHandler+0xcc4>)
 81036d8:	4293      	cmp	r3, r2
 81036da:	d027      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	4a2c      	ldr	r2, [pc, #176]	; (8103794 <HAL_DMA_IRQHandler+0xcc8>)
 81036e2:	4293      	cmp	r3, r2
 81036e4:	d022      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	681b      	ldr	r3, [r3, #0]
 81036ea:	4a2b      	ldr	r2, [pc, #172]	; (8103798 <HAL_DMA_IRQHandler+0xccc>)
 81036ec:	4293      	cmp	r3, r2
 81036ee:	d01d      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	4a29      	ldr	r2, [pc, #164]	; (810379c <HAL_DMA_IRQHandler+0xcd0>)
 81036f6:	4293      	cmp	r3, r2
 81036f8:	d018      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 81036fa:	687b      	ldr	r3, [r7, #4]
 81036fc:	681b      	ldr	r3, [r3, #0]
 81036fe:	4a28      	ldr	r2, [pc, #160]	; (81037a0 <HAL_DMA_IRQHandler+0xcd4>)
 8103700:	4293      	cmp	r3, r2
 8103702:	d013      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	681b      	ldr	r3, [r3, #0]
 8103708:	4a26      	ldr	r2, [pc, #152]	; (81037a4 <HAL_DMA_IRQHandler+0xcd8>)
 810370a:	4293      	cmp	r3, r2
 810370c:	d00e      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	681b      	ldr	r3, [r3, #0]
 8103712:	4a25      	ldr	r2, [pc, #148]	; (81037a8 <HAL_DMA_IRQHandler+0xcdc>)
 8103714:	4293      	cmp	r3, r2
 8103716:	d009      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 8103718:	687b      	ldr	r3, [r7, #4]
 810371a:	681b      	ldr	r3, [r3, #0]
 810371c:	4a23      	ldr	r2, [pc, #140]	; (81037ac <HAL_DMA_IRQHandler+0xce0>)
 810371e:	4293      	cmp	r3, r2
 8103720:	d004      	beq.n	810372c <HAL_DMA_IRQHandler+0xc60>
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	681b      	ldr	r3, [r3, #0]
 8103726:	4a22      	ldr	r2, [pc, #136]	; (81037b0 <HAL_DMA_IRQHandler+0xce4>)
 8103728:	4293      	cmp	r3, r2
 810372a:	d108      	bne.n	810373e <HAL_DMA_IRQHandler+0xc72>
 810372c:	687b      	ldr	r3, [r7, #4]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	681a      	ldr	r2, [r3, #0]
 8103732:	687b      	ldr	r3, [r7, #4]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	f022 0214 	bic.w	r2, r2, #20
 810373a:	601a      	str	r2, [r3, #0]
 810373c:	e007      	b.n	810374e <HAL_DMA_IRQHandler+0xc82>
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	681a      	ldr	r2, [r3, #0]
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	f022 020a 	bic.w	r2, r2, #10
 810374c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	2200      	movs	r2, #0
 8103752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	2201      	movs	r2, #1
 810375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103762:	2b00      	cmp	r3, #0
 8103764:	f000 80b8 	beq.w	81038d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810376c:	6878      	ldr	r0, [r7, #4]
 810376e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103770:	e0b2      	b.n	81038d8 <HAL_DMA_IRQHandler+0xe0c>
 8103772:	bf00      	nop
 8103774:	40020010 	.word	0x40020010
 8103778:	40020028 	.word	0x40020028
 810377c:	40020040 	.word	0x40020040
 8103780:	40020058 	.word	0x40020058
 8103784:	40020070 	.word	0x40020070
 8103788:	40020088 	.word	0x40020088
 810378c:	400200a0 	.word	0x400200a0
 8103790:	400200b8 	.word	0x400200b8
 8103794:	40020410 	.word	0x40020410
 8103798:	40020428 	.word	0x40020428
 810379c:	40020440 	.word	0x40020440
 81037a0:	40020458 	.word	0x40020458
 81037a4:	40020470 	.word	0x40020470
 81037a8:	40020488 	.word	0x40020488
 81037ac:	400204a0 	.word	0x400204a0
 81037b0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037b8:	f003 031f 	and.w	r3, r3, #31
 81037bc:	2208      	movs	r2, #8
 81037be:	409a      	lsls	r2, r3
 81037c0:	697b      	ldr	r3, [r7, #20]
 81037c2:	4013      	ands	r3, r2
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	f000 8088 	beq.w	81038da <HAL_DMA_IRQHandler+0xe0e>
 81037ca:	693b      	ldr	r3, [r7, #16]
 81037cc:	f003 0308 	and.w	r3, r3, #8
 81037d0:	2b00      	cmp	r3, #0
 81037d2:	f000 8082 	beq.w	81038da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a41      	ldr	r2, [pc, #260]	; (81038e0 <HAL_DMA_IRQHandler+0xe14>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d04a      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a3f      	ldr	r2, [pc, #252]	; (81038e4 <HAL_DMA_IRQHandler+0xe18>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d045      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a3e      	ldr	r2, [pc, #248]	; (81038e8 <HAL_DMA_IRQHandler+0xe1c>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d040      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	4a3c      	ldr	r2, [pc, #240]	; (81038ec <HAL_DMA_IRQHandler+0xe20>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d03b      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	4a3b      	ldr	r2, [pc, #236]	; (81038f0 <HAL_DMA_IRQHandler+0xe24>)
 8103804:	4293      	cmp	r3, r2
 8103806:	d036      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	4a39      	ldr	r2, [pc, #228]	; (81038f4 <HAL_DMA_IRQHandler+0xe28>)
 810380e:	4293      	cmp	r3, r2
 8103810:	d031      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	4a38      	ldr	r2, [pc, #224]	; (81038f8 <HAL_DMA_IRQHandler+0xe2c>)
 8103818:	4293      	cmp	r3, r2
 810381a:	d02c      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	4a36      	ldr	r2, [pc, #216]	; (81038fc <HAL_DMA_IRQHandler+0xe30>)
 8103822:	4293      	cmp	r3, r2
 8103824:	d027      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	4a35      	ldr	r2, [pc, #212]	; (8103900 <HAL_DMA_IRQHandler+0xe34>)
 810382c:	4293      	cmp	r3, r2
 810382e:	d022      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	4a33      	ldr	r2, [pc, #204]	; (8103904 <HAL_DMA_IRQHandler+0xe38>)
 8103836:	4293      	cmp	r3, r2
 8103838:	d01d      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	4a32      	ldr	r2, [pc, #200]	; (8103908 <HAL_DMA_IRQHandler+0xe3c>)
 8103840:	4293      	cmp	r3, r2
 8103842:	d018      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	681b      	ldr	r3, [r3, #0]
 8103848:	4a30      	ldr	r2, [pc, #192]	; (810390c <HAL_DMA_IRQHandler+0xe40>)
 810384a:	4293      	cmp	r3, r2
 810384c:	d013      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	4a2f      	ldr	r2, [pc, #188]	; (8103910 <HAL_DMA_IRQHandler+0xe44>)
 8103854:	4293      	cmp	r3, r2
 8103856:	d00e      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	4a2d      	ldr	r2, [pc, #180]	; (8103914 <HAL_DMA_IRQHandler+0xe48>)
 810385e:	4293      	cmp	r3, r2
 8103860:	d009      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	4a2c      	ldr	r2, [pc, #176]	; (8103918 <HAL_DMA_IRQHandler+0xe4c>)
 8103868:	4293      	cmp	r3, r2
 810386a:	d004      	beq.n	8103876 <HAL_DMA_IRQHandler+0xdaa>
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	4a2a      	ldr	r2, [pc, #168]	; (810391c <HAL_DMA_IRQHandler+0xe50>)
 8103872:	4293      	cmp	r3, r2
 8103874:	d108      	bne.n	8103888 <HAL_DMA_IRQHandler+0xdbc>
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	681a      	ldr	r2, [r3, #0]
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	f022 021c 	bic.w	r2, r2, #28
 8103884:	601a      	str	r2, [r3, #0]
 8103886:	e007      	b.n	8103898 <HAL_DMA_IRQHandler+0xdcc>
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	681a      	ldr	r2, [r3, #0]
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	f022 020e 	bic.w	r2, r2, #14
 8103896:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810389c:	f003 031f 	and.w	r3, r3, #31
 81038a0:	2201      	movs	r2, #1
 81038a2:	409a      	lsls	r2, r3
 81038a4:	69fb      	ldr	r3, [r7, #28]
 81038a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	2201      	movs	r2, #1
 81038ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	2200      	movs	r2, #0
 81038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	2201      	movs	r2, #1
 81038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038c2:	2b00      	cmp	r3, #0
 81038c4:	d009      	beq.n	81038da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038ca:	6878      	ldr	r0, [r7, #4]
 81038cc:	4798      	blx	r3
 81038ce:	e004      	b.n	81038da <HAL_DMA_IRQHandler+0xe0e>
          return;
 81038d0:	bf00      	nop
 81038d2:	e002      	b.n	81038da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038d4:	bf00      	nop
 81038d6:	e000      	b.n	81038da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81038d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 81038da:	3728      	adds	r7, #40	; 0x28
 81038dc:	46bd      	mov	sp, r7
 81038de:	bd80      	pop	{r7, pc}
 81038e0:	40020010 	.word	0x40020010
 81038e4:	40020028 	.word	0x40020028
 81038e8:	40020040 	.word	0x40020040
 81038ec:	40020058 	.word	0x40020058
 81038f0:	40020070 	.word	0x40020070
 81038f4:	40020088 	.word	0x40020088
 81038f8:	400200a0 	.word	0x400200a0
 81038fc:	400200b8 	.word	0x400200b8
 8103900:	40020410 	.word	0x40020410
 8103904:	40020428 	.word	0x40020428
 8103908:	40020440 	.word	0x40020440
 810390c:	40020458 	.word	0x40020458
 8103910:	40020470 	.word	0x40020470
 8103914:	40020488 	.word	0x40020488
 8103918:	400204a0 	.word	0x400204a0
 810391c:	400204b8 	.word	0x400204b8

08103920 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8103920:	b480      	push	{r7}
 8103922:	b083      	sub	sp, #12
 8103924:	af00      	add	r7, sp, #0
 8103926:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810392e:	b2db      	uxtb	r3, r3
}
 8103930:	4618      	mov	r0, r3
 8103932:	370c      	adds	r7, #12
 8103934:	46bd      	mov	sp, r7
 8103936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810393a:	4770      	bx	lr

0810393c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 810393c:	b480      	push	{r7}
 810393e:	b083      	sub	sp, #12
 8103940:	af00      	add	r7, sp, #0
 8103942:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8103948:	4618      	mov	r0, r3
 810394a:	370c      	adds	r7, #12
 810394c:	46bd      	mov	sp, r7
 810394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103952:	4770      	bx	lr

08103954 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103954:	b480      	push	{r7}
 8103956:	b087      	sub	sp, #28
 8103958:	af00      	add	r7, sp, #0
 810395a:	60f8      	str	r0, [r7, #12]
 810395c:	60b9      	str	r1, [r7, #8]
 810395e:	607a      	str	r2, [r7, #4]
 8103960:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103962:	68fb      	ldr	r3, [r7, #12]
 8103964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103966:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103968:	68fb      	ldr	r3, [r7, #12]
 810396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810396c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810396e:	68fb      	ldr	r3, [r7, #12]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	4a84      	ldr	r2, [pc, #528]	; (8103b84 <DMA_SetConfig+0x230>)
 8103974:	4293      	cmp	r3, r2
 8103976:	d072      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103978:	68fb      	ldr	r3, [r7, #12]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	4a82      	ldr	r2, [pc, #520]	; (8103b88 <DMA_SetConfig+0x234>)
 810397e:	4293      	cmp	r3, r2
 8103980:	d06d      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103982:	68fb      	ldr	r3, [r7, #12]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	4a81      	ldr	r2, [pc, #516]	; (8103b8c <DMA_SetConfig+0x238>)
 8103988:	4293      	cmp	r3, r2
 810398a:	d068      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 810398c:	68fb      	ldr	r3, [r7, #12]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	4a7f      	ldr	r2, [pc, #508]	; (8103b90 <DMA_SetConfig+0x23c>)
 8103992:	4293      	cmp	r3, r2
 8103994:	d063      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103996:	68fb      	ldr	r3, [r7, #12]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	4a7e      	ldr	r2, [pc, #504]	; (8103b94 <DMA_SetConfig+0x240>)
 810399c:	4293      	cmp	r3, r2
 810399e:	d05e      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039a0:	68fb      	ldr	r3, [r7, #12]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	4a7c      	ldr	r2, [pc, #496]	; (8103b98 <DMA_SetConfig+0x244>)
 81039a6:	4293      	cmp	r3, r2
 81039a8:	d059      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039aa:	68fb      	ldr	r3, [r7, #12]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	4a7b      	ldr	r2, [pc, #492]	; (8103b9c <DMA_SetConfig+0x248>)
 81039b0:	4293      	cmp	r3, r2
 81039b2:	d054      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039b4:	68fb      	ldr	r3, [r7, #12]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	4a79      	ldr	r2, [pc, #484]	; (8103ba0 <DMA_SetConfig+0x24c>)
 81039ba:	4293      	cmp	r3, r2
 81039bc:	d04f      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039be:	68fb      	ldr	r3, [r7, #12]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	4a78      	ldr	r2, [pc, #480]	; (8103ba4 <DMA_SetConfig+0x250>)
 81039c4:	4293      	cmp	r3, r2
 81039c6:	d04a      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039c8:	68fb      	ldr	r3, [r7, #12]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	4a76      	ldr	r2, [pc, #472]	; (8103ba8 <DMA_SetConfig+0x254>)
 81039ce:	4293      	cmp	r3, r2
 81039d0:	d045      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039d2:	68fb      	ldr	r3, [r7, #12]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4a75      	ldr	r2, [pc, #468]	; (8103bac <DMA_SetConfig+0x258>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d040      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039dc:	68fb      	ldr	r3, [r7, #12]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a73      	ldr	r2, [pc, #460]	; (8103bb0 <DMA_SetConfig+0x25c>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d03b      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039e6:	68fb      	ldr	r3, [r7, #12]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	4a72      	ldr	r2, [pc, #456]	; (8103bb4 <DMA_SetConfig+0x260>)
 81039ec:	4293      	cmp	r3, r2
 81039ee:	d036      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039f0:	68fb      	ldr	r3, [r7, #12]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	4a70      	ldr	r2, [pc, #448]	; (8103bb8 <DMA_SetConfig+0x264>)
 81039f6:	4293      	cmp	r3, r2
 81039f8:	d031      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 81039fa:	68fb      	ldr	r3, [r7, #12]
 81039fc:	681b      	ldr	r3, [r3, #0]
 81039fe:	4a6f      	ldr	r2, [pc, #444]	; (8103bbc <DMA_SetConfig+0x268>)
 8103a00:	4293      	cmp	r3, r2
 8103a02:	d02c      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a04:	68fb      	ldr	r3, [r7, #12]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	4a6d      	ldr	r2, [pc, #436]	; (8103bc0 <DMA_SetConfig+0x26c>)
 8103a0a:	4293      	cmp	r3, r2
 8103a0c:	d027      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a0e:	68fb      	ldr	r3, [r7, #12]
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	4a6c      	ldr	r2, [pc, #432]	; (8103bc4 <DMA_SetConfig+0x270>)
 8103a14:	4293      	cmp	r3, r2
 8103a16:	d022      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a18:	68fb      	ldr	r3, [r7, #12]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	4a6a      	ldr	r2, [pc, #424]	; (8103bc8 <DMA_SetConfig+0x274>)
 8103a1e:	4293      	cmp	r3, r2
 8103a20:	d01d      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a22:	68fb      	ldr	r3, [r7, #12]
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4a69      	ldr	r2, [pc, #420]	; (8103bcc <DMA_SetConfig+0x278>)
 8103a28:	4293      	cmp	r3, r2
 8103a2a:	d018      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a2c:	68fb      	ldr	r3, [r7, #12]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	4a67      	ldr	r2, [pc, #412]	; (8103bd0 <DMA_SetConfig+0x27c>)
 8103a32:	4293      	cmp	r3, r2
 8103a34:	d013      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a36:	68fb      	ldr	r3, [r7, #12]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	4a66      	ldr	r2, [pc, #408]	; (8103bd4 <DMA_SetConfig+0x280>)
 8103a3c:	4293      	cmp	r3, r2
 8103a3e:	d00e      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a40:	68fb      	ldr	r3, [r7, #12]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	4a64      	ldr	r2, [pc, #400]	; (8103bd8 <DMA_SetConfig+0x284>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d009      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a4a:	68fb      	ldr	r3, [r7, #12]
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	4a63      	ldr	r2, [pc, #396]	; (8103bdc <DMA_SetConfig+0x288>)
 8103a50:	4293      	cmp	r3, r2
 8103a52:	d004      	beq.n	8103a5e <DMA_SetConfig+0x10a>
 8103a54:	68fb      	ldr	r3, [r7, #12]
 8103a56:	681b      	ldr	r3, [r3, #0]
 8103a58:	4a61      	ldr	r2, [pc, #388]	; (8103be0 <DMA_SetConfig+0x28c>)
 8103a5a:	4293      	cmp	r3, r2
 8103a5c:	d101      	bne.n	8103a62 <DMA_SetConfig+0x10e>
 8103a5e:	2301      	movs	r3, #1
 8103a60:	e000      	b.n	8103a64 <DMA_SetConfig+0x110>
 8103a62:	2300      	movs	r3, #0
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d00d      	beq.n	8103a84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103a68:	68fb      	ldr	r3, [r7, #12]
 8103a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a6c:	68fa      	ldr	r2, [r7, #12]
 8103a6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103a70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8103a72:	68fb      	ldr	r3, [r7, #12]
 8103a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d004      	beq.n	8103a84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103a7a:	68fb      	ldr	r3, [r7, #12]
 8103a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a7e:	68fa      	ldr	r2, [r7, #12]
 8103a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103a82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103a84:	68fb      	ldr	r3, [r7, #12]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	4a3e      	ldr	r2, [pc, #248]	; (8103b84 <DMA_SetConfig+0x230>)
 8103a8a:	4293      	cmp	r3, r2
 8103a8c:	d04a      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103a8e:	68fb      	ldr	r3, [r7, #12]
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	4a3d      	ldr	r2, [pc, #244]	; (8103b88 <DMA_SetConfig+0x234>)
 8103a94:	4293      	cmp	r3, r2
 8103a96:	d045      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103a98:	68fb      	ldr	r3, [r7, #12]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	4a3b      	ldr	r2, [pc, #236]	; (8103b8c <DMA_SetConfig+0x238>)
 8103a9e:	4293      	cmp	r3, r2
 8103aa0:	d040      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	4a3a      	ldr	r2, [pc, #232]	; (8103b90 <DMA_SetConfig+0x23c>)
 8103aa8:	4293      	cmp	r3, r2
 8103aaa:	d03b      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103aac:	68fb      	ldr	r3, [r7, #12]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	4a38      	ldr	r2, [pc, #224]	; (8103b94 <DMA_SetConfig+0x240>)
 8103ab2:	4293      	cmp	r3, r2
 8103ab4:	d036      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103ab6:	68fb      	ldr	r3, [r7, #12]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	4a37      	ldr	r2, [pc, #220]	; (8103b98 <DMA_SetConfig+0x244>)
 8103abc:	4293      	cmp	r3, r2
 8103abe:	d031      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103ac0:	68fb      	ldr	r3, [r7, #12]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	4a35      	ldr	r2, [pc, #212]	; (8103b9c <DMA_SetConfig+0x248>)
 8103ac6:	4293      	cmp	r3, r2
 8103ac8:	d02c      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103aca:	68fb      	ldr	r3, [r7, #12]
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	4a34      	ldr	r2, [pc, #208]	; (8103ba0 <DMA_SetConfig+0x24c>)
 8103ad0:	4293      	cmp	r3, r2
 8103ad2:	d027      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103ad4:	68fb      	ldr	r3, [r7, #12]
 8103ad6:	681b      	ldr	r3, [r3, #0]
 8103ad8:	4a32      	ldr	r2, [pc, #200]	; (8103ba4 <DMA_SetConfig+0x250>)
 8103ada:	4293      	cmp	r3, r2
 8103adc:	d022      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103ade:	68fb      	ldr	r3, [r7, #12]
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	4a31      	ldr	r2, [pc, #196]	; (8103ba8 <DMA_SetConfig+0x254>)
 8103ae4:	4293      	cmp	r3, r2
 8103ae6:	d01d      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103ae8:	68fb      	ldr	r3, [r7, #12]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	4a2f      	ldr	r2, [pc, #188]	; (8103bac <DMA_SetConfig+0x258>)
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d018      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103af2:	68fb      	ldr	r3, [r7, #12]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	4a2e      	ldr	r2, [pc, #184]	; (8103bb0 <DMA_SetConfig+0x25c>)
 8103af8:	4293      	cmp	r3, r2
 8103afa:	d013      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	4a2c      	ldr	r2, [pc, #176]	; (8103bb4 <DMA_SetConfig+0x260>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d00e      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103b06:	68fb      	ldr	r3, [r7, #12]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	4a2b      	ldr	r2, [pc, #172]	; (8103bb8 <DMA_SetConfig+0x264>)
 8103b0c:	4293      	cmp	r3, r2
 8103b0e:	d009      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103b10:	68fb      	ldr	r3, [r7, #12]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	4a29      	ldr	r2, [pc, #164]	; (8103bbc <DMA_SetConfig+0x268>)
 8103b16:	4293      	cmp	r3, r2
 8103b18:	d004      	beq.n	8103b24 <DMA_SetConfig+0x1d0>
 8103b1a:	68fb      	ldr	r3, [r7, #12]
 8103b1c:	681b      	ldr	r3, [r3, #0]
 8103b1e:	4a28      	ldr	r2, [pc, #160]	; (8103bc0 <DMA_SetConfig+0x26c>)
 8103b20:	4293      	cmp	r3, r2
 8103b22:	d101      	bne.n	8103b28 <DMA_SetConfig+0x1d4>
 8103b24:	2301      	movs	r3, #1
 8103b26:	e000      	b.n	8103b2a <DMA_SetConfig+0x1d6>
 8103b28:	2300      	movs	r3, #0
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	d05a      	beq.n	8103be4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103b2e:	68fb      	ldr	r3, [r7, #12]
 8103b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b32:	f003 031f 	and.w	r3, r3, #31
 8103b36:	223f      	movs	r2, #63	; 0x3f
 8103b38:	409a      	lsls	r2, r3
 8103b3a:	697b      	ldr	r3, [r7, #20]
 8103b3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8103b3e:	68fb      	ldr	r3, [r7, #12]
 8103b40:	681b      	ldr	r3, [r3, #0]
 8103b42:	681a      	ldr	r2, [r3, #0]
 8103b44:	68fb      	ldr	r3, [r7, #12]
 8103b46:	681b      	ldr	r3, [r3, #0]
 8103b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8103b4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8103b4e:	68fb      	ldr	r3, [r7, #12]
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	683a      	ldr	r2, [r7, #0]
 8103b54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103b56:	68fb      	ldr	r3, [r7, #12]
 8103b58:	689b      	ldr	r3, [r3, #8]
 8103b5a:	2b40      	cmp	r3, #64	; 0x40
 8103b5c:	d108      	bne.n	8103b70 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8103b5e:	68fb      	ldr	r3, [r7, #12]
 8103b60:	681b      	ldr	r3, [r3, #0]
 8103b62:	687a      	ldr	r2, [r7, #4]
 8103b64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8103b66:	68fb      	ldr	r3, [r7, #12]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	68ba      	ldr	r2, [r7, #8]
 8103b6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103b6e:	e087      	b.n	8103c80 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8103b70:	68fb      	ldr	r3, [r7, #12]
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	68ba      	ldr	r2, [r7, #8]
 8103b76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8103b78:	68fb      	ldr	r3, [r7, #12]
 8103b7a:	681b      	ldr	r3, [r3, #0]
 8103b7c:	687a      	ldr	r2, [r7, #4]
 8103b7e:	60da      	str	r2, [r3, #12]
}
 8103b80:	e07e      	b.n	8103c80 <DMA_SetConfig+0x32c>
 8103b82:	bf00      	nop
 8103b84:	40020010 	.word	0x40020010
 8103b88:	40020028 	.word	0x40020028
 8103b8c:	40020040 	.word	0x40020040
 8103b90:	40020058 	.word	0x40020058
 8103b94:	40020070 	.word	0x40020070
 8103b98:	40020088 	.word	0x40020088
 8103b9c:	400200a0 	.word	0x400200a0
 8103ba0:	400200b8 	.word	0x400200b8
 8103ba4:	40020410 	.word	0x40020410
 8103ba8:	40020428 	.word	0x40020428
 8103bac:	40020440 	.word	0x40020440
 8103bb0:	40020458 	.word	0x40020458
 8103bb4:	40020470 	.word	0x40020470
 8103bb8:	40020488 	.word	0x40020488
 8103bbc:	400204a0 	.word	0x400204a0
 8103bc0:	400204b8 	.word	0x400204b8
 8103bc4:	58025408 	.word	0x58025408
 8103bc8:	5802541c 	.word	0x5802541c
 8103bcc:	58025430 	.word	0x58025430
 8103bd0:	58025444 	.word	0x58025444
 8103bd4:	58025458 	.word	0x58025458
 8103bd8:	5802546c 	.word	0x5802546c
 8103bdc:	58025480 	.word	0x58025480
 8103be0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103be4:	68fb      	ldr	r3, [r7, #12]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	4a28      	ldr	r2, [pc, #160]	; (8103c8c <DMA_SetConfig+0x338>)
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d022      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103bee:	68fb      	ldr	r3, [r7, #12]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	4a27      	ldr	r2, [pc, #156]	; (8103c90 <DMA_SetConfig+0x33c>)
 8103bf4:	4293      	cmp	r3, r2
 8103bf6:	d01d      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103bf8:	68fb      	ldr	r3, [r7, #12]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	4a25      	ldr	r2, [pc, #148]	; (8103c94 <DMA_SetConfig+0x340>)
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d018      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103c02:	68fb      	ldr	r3, [r7, #12]
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	4a24      	ldr	r2, [pc, #144]	; (8103c98 <DMA_SetConfig+0x344>)
 8103c08:	4293      	cmp	r3, r2
 8103c0a:	d013      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	4a22      	ldr	r2, [pc, #136]	; (8103c9c <DMA_SetConfig+0x348>)
 8103c12:	4293      	cmp	r3, r2
 8103c14:	d00e      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	4a21      	ldr	r2, [pc, #132]	; (8103ca0 <DMA_SetConfig+0x34c>)
 8103c1c:	4293      	cmp	r3, r2
 8103c1e:	d009      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103c20:	68fb      	ldr	r3, [r7, #12]
 8103c22:	681b      	ldr	r3, [r3, #0]
 8103c24:	4a1f      	ldr	r2, [pc, #124]	; (8103ca4 <DMA_SetConfig+0x350>)
 8103c26:	4293      	cmp	r3, r2
 8103c28:	d004      	beq.n	8103c34 <DMA_SetConfig+0x2e0>
 8103c2a:	68fb      	ldr	r3, [r7, #12]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	4a1e      	ldr	r2, [pc, #120]	; (8103ca8 <DMA_SetConfig+0x354>)
 8103c30:	4293      	cmp	r3, r2
 8103c32:	d101      	bne.n	8103c38 <DMA_SetConfig+0x2e4>
 8103c34:	2301      	movs	r3, #1
 8103c36:	e000      	b.n	8103c3a <DMA_SetConfig+0x2e6>
 8103c38:	2300      	movs	r3, #0
 8103c3a:	2b00      	cmp	r3, #0
 8103c3c:	d020      	beq.n	8103c80 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103c3e:	68fb      	ldr	r3, [r7, #12]
 8103c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c42:	f003 031f 	and.w	r3, r3, #31
 8103c46:	2201      	movs	r2, #1
 8103c48:	409a      	lsls	r2, r3
 8103c4a:	693b      	ldr	r3, [r7, #16]
 8103c4c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8103c4e:	68fb      	ldr	r3, [r7, #12]
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	683a      	ldr	r2, [r7, #0]
 8103c54:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103c56:	68fb      	ldr	r3, [r7, #12]
 8103c58:	689b      	ldr	r3, [r3, #8]
 8103c5a:	2b40      	cmp	r3, #64	; 0x40
 8103c5c:	d108      	bne.n	8103c70 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8103c5e:	68fb      	ldr	r3, [r7, #12]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	687a      	ldr	r2, [r7, #4]
 8103c64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8103c66:	68fb      	ldr	r3, [r7, #12]
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	68ba      	ldr	r2, [r7, #8]
 8103c6c:	60da      	str	r2, [r3, #12]
}
 8103c6e:	e007      	b.n	8103c80 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8103c70:	68fb      	ldr	r3, [r7, #12]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	68ba      	ldr	r2, [r7, #8]
 8103c76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8103c78:	68fb      	ldr	r3, [r7, #12]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	687a      	ldr	r2, [r7, #4]
 8103c7e:	60da      	str	r2, [r3, #12]
}
 8103c80:	bf00      	nop
 8103c82:	371c      	adds	r7, #28
 8103c84:	46bd      	mov	sp, r7
 8103c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c8a:	4770      	bx	lr
 8103c8c:	58025408 	.word	0x58025408
 8103c90:	5802541c 	.word	0x5802541c
 8103c94:	58025430 	.word	0x58025430
 8103c98:	58025444 	.word	0x58025444
 8103c9c:	58025458 	.word	0x58025458
 8103ca0:	5802546c 	.word	0x5802546c
 8103ca4:	58025480 	.word	0x58025480
 8103ca8:	58025494 	.word	0x58025494

08103cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8103cac:	b480      	push	{r7}
 8103cae:	b085      	sub	sp, #20
 8103cb0:	af00      	add	r7, sp, #0
 8103cb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	4a43      	ldr	r2, [pc, #268]	; (8103dc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8103cba:	4293      	cmp	r3, r2
 8103cbc:	d04a      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a42      	ldr	r2, [pc, #264]	; (8103dcc <DMA_CalcBaseAndBitshift+0x120>)
 8103cc4:	4293      	cmp	r3, r2
 8103cc6:	d045      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	4a40      	ldr	r2, [pc, #256]	; (8103dd0 <DMA_CalcBaseAndBitshift+0x124>)
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d040      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a3f      	ldr	r2, [pc, #252]	; (8103dd4 <DMA_CalcBaseAndBitshift+0x128>)
 8103cd8:	4293      	cmp	r3, r2
 8103cda:	d03b      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a3d      	ldr	r2, [pc, #244]	; (8103dd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d036      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a3c      	ldr	r2, [pc, #240]	; (8103ddc <DMA_CalcBaseAndBitshift+0x130>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d031      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	4a3a      	ldr	r2, [pc, #232]	; (8103de0 <DMA_CalcBaseAndBitshift+0x134>)
 8103cf6:	4293      	cmp	r3, r2
 8103cf8:	d02c      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	4a39      	ldr	r2, [pc, #228]	; (8103de4 <DMA_CalcBaseAndBitshift+0x138>)
 8103d00:	4293      	cmp	r3, r2
 8103d02:	d027      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a37      	ldr	r2, [pc, #220]	; (8103de8 <DMA_CalcBaseAndBitshift+0x13c>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d022      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	4a36      	ldr	r2, [pc, #216]	; (8103dec <DMA_CalcBaseAndBitshift+0x140>)
 8103d14:	4293      	cmp	r3, r2
 8103d16:	d01d      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	4a34      	ldr	r2, [pc, #208]	; (8103df0 <DMA_CalcBaseAndBitshift+0x144>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d018      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	4a33      	ldr	r2, [pc, #204]	; (8103df4 <DMA_CalcBaseAndBitshift+0x148>)
 8103d28:	4293      	cmp	r3, r2
 8103d2a:	d013      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	4a31      	ldr	r2, [pc, #196]	; (8103df8 <DMA_CalcBaseAndBitshift+0x14c>)
 8103d32:	4293      	cmp	r3, r2
 8103d34:	d00e      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	4a30      	ldr	r2, [pc, #192]	; (8103dfc <DMA_CalcBaseAndBitshift+0x150>)
 8103d3c:	4293      	cmp	r3, r2
 8103d3e:	d009      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	4a2e      	ldr	r2, [pc, #184]	; (8103e00 <DMA_CalcBaseAndBitshift+0x154>)
 8103d46:	4293      	cmp	r3, r2
 8103d48:	d004      	beq.n	8103d54 <DMA_CalcBaseAndBitshift+0xa8>
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	4a2d      	ldr	r2, [pc, #180]	; (8103e04 <DMA_CalcBaseAndBitshift+0x158>)
 8103d50:	4293      	cmp	r3, r2
 8103d52:	d101      	bne.n	8103d58 <DMA_CalcBaseAndBitshift+0xac>
 8103d54:	2301      	movs	r3, #1
 8103d56:	e000      	b.n	8103d5a <DMA_CalcBaseAndBitshift+0xae>
 8103d58:	2300      	movs	r3, #0
 8103d5a:	2b00      	cmp	r3, #0
 8103d5c:	d026      	beq.n	8103dac <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	681b      	ldr	r3, [r3, #0]
 8103d62:	b2db      	uxtb	r3, r3
 8103d64:	3b10      	subs	r3, #16
 8103d66:	4a28      	ldr	r2, [pc, #160]	; (8103e08 <DMA_CalcBaseAndBitshift+0x15c>)
 8103d68:	fba2 2303 	umull	r2, r3, r2, r3
 8103d6c:	091b      	lsrs	r3, r3, #4
 8103d6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103d70:	68fb      	ldr	r3, [r7, #12]
 8103d72:	f003 0307 	and.w	r3, r3, #7
 8103d76:	4a25      	ldr	r2, [pc, #148]	; (8103e0c <DMA_CalcBaseAndBitshift+0x160>)
 8103d78:	5cd3      	ldrb	r3, [r2, r3]
 8103d7a:	461a      	mov	r2, r3
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	2b03      	cmp	r3, #3
 8103d84:	d909      	bls.n	8103d9a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103d8e:	f023 0303 	bic.w	r3, r3, #3
 8103d92:	1d1a      	adds	r2, r3, #4
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	659a      	str	r2, [r3, #88]	; 0x58
 8103d98:	e00e      	b.n	8103db8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	681b      	ldr	r3, [r3, #0]
 8103d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103da2:	f023 0303 	bic.w	r3, r3, #3
 8103da6:	687a      	ldr	r2, [r7, #4]
 8103da8:	6593      	str	r3, [r2, #88]	; 0x58
 8103daa:	e005      	b.n	8103db8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8103dbc:	4618      	mov	r0, r3
 8103dbe:	3714      	adds	r7, #20
 8103dc0:	46bd      	mov	sp, r7
 8103dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dc6:	4770      	bx	lr
 8103dc8:	40020010 	.word	0x40020010
 8103dcc:	40020028 	.word	0x40020028
 8103dd0:	40020040 	.word	0x40020040
 8103dd4:	40020058 	.word	0x40020058
 8103dd8:	40020070 	.word	0x40020070
 8103ddc:	40020088 	.word	0x40020088
 8103de0:	400200a0 	.word	0x400200a0
 8103de4:	400200b8 	.word	0x400200b8
 8103de8:	40020410 	.word	0x40020410
 8103dec:	40020428 	.word	0x40020428
 8103df0:	40020440 	.word	0x40020440
 8103df4:	40020458 	.word	0x40020458
 8103df8:	40020470 	.word	0x40020470
 8103dfc:	40020488 	.word	0x40020488
 8103e00:	400204a0 	.word	0x400204a0
 8103e04:	400204b8 	.word	0x400204b8
 8103e08:	aaaaaaab 	.word	0xaaaaaaab
 8103e0c:	08108548 	.word	0x08108548

08103e10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8103e10:	b480      	push	{r7}
 8103e12:	b085      	sub	sp, #20
 8103e14:	af00      	add	r7, sp, #0
 8103e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103e18:	2300      	movs	r3, #0
 8103e1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	699b      	ldr	r3, [r3, #24]
 8103e20:	2b00      	cmp	r3, #0
 8103e22:	d120      	bne.n	8103e66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e28:	2b03      	cmp	r3, #3
 8103e2a:	d858      	bhi.n	8103ede <DMA_CheckFifoParam+0xce>
 8103e2c:	a201      	add	r2, pc, #4	; (adr r2, 8103e34 <DMA_CheckFifoParam+0x24>)
 8103e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e32:	bf00      	nop
 8103e34:	08103e45 	.word	0x08103e45
 8103e38:	08103e57 	.word	0x08103e57
 8103e3c:	08103e45 	.word	0x08103e45
 8103e40:	08103edf 	.word	0x08103edf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	d048      	beq.n	8103ee2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8103e50:	2301      	movs	r3, #1
 8103e52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103e54:	e045      	b.n	8103ee2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103e5e:	d142      	bne.n	8103ee6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8103e60:	2301      	movs	r3, #1
 8103e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103e64:	e03f      	b.n	8103ee6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	699b      	ldr	r3, [r3, #24]
 8103e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103e6e:	d123      	bne.n	8103eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e74:	2b03      	cmp	r3, #3
 8103e76:	d838      	bhi.n	8103eea <DMA_CheckFifoParam+0xda>
 8103e78:	a201      	add	r2, pc, #4	; (adr r2, 8103e80 <DMA_CheckFifoParam+0x70>)
 8103e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e7e:	bf00      	nop
 8103e80:	08103e91 	.word	0x08103e91
 8103e84:	08103e97 	.word	0x08103e97
 8103e88:	08103e91 	.word	0x08103e91
 8103e8c:	08103ea9 	.word	0x08103ea9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8103e90:	2301      	movs	r3, #1
 8103e92:	73fb      	strb	r3, [r7, #15]
        break;
 8103e94:	e030      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d025      	beq.n	8103eee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8103ea2:	2301      	movs	r3, #1
 8103ea4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103ea6:	e022      	b.n	8103eee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8103eb0:	d11f      	bne.n	8103ef2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8103eb6:	e01c      	b.n	8103ef2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ebc:	2b02      	cmp	r3, #2
 8103ebe:	d902      	bls.n	8103ec6 <DMA_CheckFifoParam+0xb6>
 8103ec0:	2b03      	cmp	r3, #3
 8103ec2:	d003      	beq.n	8103ecc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8103ec4:	e018      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8103ec6:	2301      	movs	r3, #1
 8103ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8103eca:	e015      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103ed4:	2b00      	cmp	r3, #0
 8103ed6:	d00e      	beq.n	8103ef6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8103ed8:	2301      	movs	r3, #1
 8103eda:	73fb      	strb	r3, [r7, #15]
    break;
 8103edc:	e00b      	b.n	8103ef6 <DMA_CheckFifoParam+0xe6>
        break;
 8103ede:	bf00      	nop
 8103ee0:	e00a      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8103ee2:	bf00      	nop
 8103ee4:	e008      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8103ee6:	bf00      	nop
 8103ee8:	e006      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8103eea:	bf00      	nop
 8103eec:	e004      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8103eee:	bf00      	nop
 8103ef0:	e002      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8103ef2:	bf00      	nop
 8103ef4:	e000      	b.n	8103ef8 <DMA_CheckFifoParam+0xe8>
    break;
 8103ef6:	bf00      	nop
    }
  }

  return status;
 8103ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8103efa:	4618      	mov	r0, r3
 8103efc:	3714      	adds	r7, #20
 8103efe:	46bd      	mov	sp, r7
 8103f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f04:	4770      	bx	lr
 8103f06:	bf00      	nop

08103f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8103f08:	b480      	push	{r7}
 8103f0a:	b085      	sub	sp, #20
 8103f0c:	af00      	add	r7, sp, #0
 8103f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	4a3a      	ldr	r2, [pc, #232]	; (8104004 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8103f1c:	4293      	cmp	r3, r2
 8103f1e:	d022      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	4a38      	ldr	r2, [pc, #224]	; (8104008 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8103f26:	4293      	cmp	r3, r2
 8103f28:	d01d      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f2a:	687b      	ldr	r3, [r7, #4]
 8103f2c:	681b      	ldr	r3, [r3, #0]
 8103f2e:	4a37      	ldr	r2, [pc, #220]	; (810400c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8103f30:	4293      	cmp	r3, r2
 8103f32:	d018      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	4a35      	ldr	r2, [pc, #212]	; (8104010 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8103f3a:	4293      	cmp	r3, r2
 8103f3c:	d013      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	4a34      	ldr	r2, [pc, #208]	; (8104014 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8103f44:	4293      	cmp	r3, r2
 8103f46:	d00e      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	4a32      	ldr	r2, [pc, #200]	; (8104018 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8103f4e:	4293      	cmp	r3, r2
 8103f50:	d009      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	681b      	ldr	r3, [r3, #0]
 8103f56:	4a31      	ldr	r2, [pc, #196]	; (810401c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d004      	beq.n	8103f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	4a2f      	ldr	r2, [pc, #188]	; (8104020 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8103f62:	4293      	cmp	r3, r2
 8103f64:	d101      	bne.n	8103f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103f66:	2301      	movs	r3, #1
 8103f68:	e000      	b.n	8103f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8103f6a:	2300      	movs	r3, #0
 8103f6c:	2b00      	cmp	r3, #0
 8103f6e:	d01c      	beq.n	8103faa <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	681b      	ldr	r3, [r3, #0]
 8103f74:	b2db      	uxtb	r3, r3
 8103f76:	3b08      	subs	r3, #8
 8103f78:	4a2a      	ldr	r2, [pc, #168]	; (8104024 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8103f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8103f7e:	091b      	lsrs	r3, r3, #4
 8103f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103f82:	68fb      	ldr	r3, [r7, #12]
 8103f84:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8103f88:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8103f8c:	009b      	lsls	r3, r3, #2
 8103f8e:	461a      	mov	r2, r3
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	4a24      	ldr	r2, [pc, #144]	; (8104028 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8103f98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103f9a:	68fb      	ldr	r3, [r7, #12]
 8103f9c:	f003 031f 	and.w	r3, r3, #31
 8103fa0:	2201      	movs	r2, #1
 8103fa2:	409a      	lsls	r2, r3
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8103fa8:	e026      	b.n	8103ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	b2db      	uxtb	r3, r3
 8103fb0:	3b10      	subs	r3, #16
 8103fb2:	4a1e      	ldr	r2, [pc, #120]	; (810402c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8103fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8103fb8:	091b      	lsrs	r3, r3, #4
 8103fba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103fbc:	68bb      	ldr	r3, [r7, #8]
 8103fbe:	4a1c      	ldr	r2, [pc, #112]	; (8104030 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8103fc0:	4293      	cmp	r3, r2
 8103fc2:	d806      	bhi.n	8103fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8103fc4:	68bb      	ldr	r3, [r7, #8]
 8103fc6:	4a1b      	ldr	r2, [pc, #108]	; (8104034 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d902      	bls.n	8103fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8103fcc:	68fb      	ldr	r3, [r7, #12]
 8103fce:	3308      	adds	r3, #8
 8103fd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8103fd8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8103fdc:	009b      	lsls	r3, r3, #2
 8103fde:	461a      	mov	r2, r3
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	4a14      	ldr	r2, [pc, #80]	; (8104038 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8103fe8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103fea:	68fb      	ldr	r3, [r7, #12]
 8103fec:	f003 031f 	and.w	r3, r3, #31
 8103ff0:	2201      	movs	r2, #1
 8103ff2:	409a      	lsls	r2, r3
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8103ff8:	bf00      	nop
 8103ffa:	3714      	adds	r7, #20
 8103ffc:	46bd      	mov	sp, r7
 8103ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104002:	4770      	bx	lr
 8104004:	58025408 	.word	0x58025408
 8104008:	5802541c 	.word	0x5802541c
 810400c:	58025430 	.word	0x58025430
 8104010:	58025444 	.word	0x58025444
 8104014:	58025458 	.word	0x58025458
 8104018:	5802546c 	.word	0x5802546c
 810401c:	58025480 	.word	0x58025480
 8104020:	58025494 	.word	0x58025494
 8104024:	cccccccd 	.word	0xcccccccd
 8104028:	58025880 	.word	0x58025880
 810402c:	aaaaaaab 	.word	0xaaaaaaab
 8104030:	400204b8 	.word	0x400204b8
 8104034:	4002040f 	.word	0x4002040f
 8104038:	40020880 	.word	0x40020880

0810403c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810403c:	b480      	push	{r7}
 810403e:	b085      	sub	sp, #20
 8104040:	af00      	add	r7, sp, #0
 8104042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	685b      	ldr	r3, [r3, #4]
 8104048:	b2db      	uxtb	r3, r3
 810404a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810404c:	68fb      	ldr	r3, [r7, #12]
 810404e:	2b00      	cmp	r3, #0
 8104050:	d04a      	beq.n	81040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104052:	68fb      	ldr	r3, [r7, #12]
 8104054:	2b08      	cmp	r3, #8
 8104056:	d847      	bhi.n	81040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	4a25      	ldr	r2, [pc, #148]	; (81040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810405e:	4293      	cmp	r3, r2
 8104060:	d022      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	4a24      	ldr	r2, [pc, #144]	; (81040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104068:	4293      	cmp	r3, r2
 810406a:	d01d      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	681b      	ldr	r3, [r3, #0]
 8104070:	4a22      	ldr	r2, [pc, #136]	; (81040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104072:	4293      	cmp	r3, r2
 8104074:	d018      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	4a21      	ldr	r2, [pc, #132]	; (8104100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810407c:	4293      	cmp	r3, r2
 810407e:	d013      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	4a1f      	ldr	r2, [pc, #124]	; (8104104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104086:	4293      	cmp	r3, r2
 8104088:	d00e      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	4a1e      	ldr	r2, [pc, #120]	; (8104108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104090:	4293      	cmp	r3, r2
 8104092:	d009      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	4a1c      	ldr	r2, [pc, #112]	; (810410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810409a:	4293      	cmp	r3, r2
 810409c:	d004      	beq.n	81040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	4a1b      	ldr	r2, [pc, #108]	; (8104110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81040a4:	4293      	cmp	r3, r2
 81040a6:	d101      	bne.n	81040ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81040a8:	2301      	movs	r3, #1
 81040aa:	e000      	b.n	81040ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81040ac:	2300      	movs	r3, #0
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d00a      	beq.n	81040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81040b2:	68fa      	ldr	r2, [r7, #12]
 81040b4:	4b17      	ldr	r3, [pc, #92]	; (8104114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81040b6:	4413      	add	r3, r2
 81040b8:	009b      	lsls	r3, r3, #2
 81040ba:	461a      	mov	r2, r3
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	4a15      	ldr	r2, [pc, #84]	; (8104118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81040c4:	671a      	str	r2, [r3, #112]	; 0x70
 81040c6:	e009      	b.n	81040dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81040c8:	68fa      	ldr	r2, [r7, #12]
 81040ca:	4b14      	ldr	r3, [pc, #80]	; (810411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81040cc:	4413      	add	r3, r2
 81040ce:	009b      	lsls	r3, r3, #2
 81040d0:	461a      	mov	r2, r3
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	4a11      	ldr	r2, [pc, #68]	; (8104120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81040da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81040dc:	68fb      	ldr	r3, [r7, #12]
 81040de:	3b01      	subs	r3, #1
 81040e0:	2201      	movs	r2, #1
 81040e2:	409a      	lsls	r2, r3
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81040e8:	bf00      	nop
 81040ea:	3714      	adds	r7, #20
 81040ec:	46bd      	mov	sp, r7
 81040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f2:	4770      	bx	lr
 81040f4:	58025408 	.word	0x58025408
 81040f8:	5802541c 	.word	0x5802541c
 81040fc:	58025430 	.word	0x58025430
 8104100:	58025444 	.word	0x58025444
 8104104:	58025458 	.word	0x58025458
 8104108:	5802546c 	.word	0x5802546c
 810410c:	58025480 	.word	0x58025480
 8104110:	58025494 	.word	0x58025494
 8104114:	1600963f 	.word	0x1600963f
 8104118:	58025940 	.word	0x58025940
 810411c:	1000823f 	.word	0x1000823f
 8104120:	40020940 	.word	0x40020940

08104124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104124:	b480      	push	{r7}
 8104126:	b089      	sub	sp, #36	; 0x24
 8104128:	af00      	add	r7, sp, #0
 810412a:	6078      	str	r0, [r7, #4]
 810412c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810412e:	2300      	movs	r3, #0
 8104130:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104132:	4b89      	ldr	r3, [pc, #548]	; (8104358 <HAL_GPIO_Init+0x234>)
 8104134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104136:	e194      	b.n	8104462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104138:	683b      	ldr	r3, [r7, #0]
 810413a:	681a      	ldr	r2, [r3, #0]
 810413c:	2101      	movs	r1, #1
 810413e:	69fb      	ldr	r3, [r7, #28]
 8104140:	fa01 f303 	lsl.w	r3, r1, r3
 8104144:	4013      	ands	r3, r2
 8104146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104148:	693b      	ldr	r3, [r7, #16]
 810414a:	2b00      	cmp	r3, #0
 810414c:	f000 8186 	beq.w	810445c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104150:	683b      	ldr	r3, [r7, #0]
 8104152:	685b      	ldr	r3, [r3, #4]
 8104154:	2b01      	cmp	r3, #1
 8104156:	d00b      	beq.n	8104170 <HAL_GPIO_Init+0x4c>
 8104158:	683b      	ldr	r3, [r7, #0]
 810415a:	685b      	ldr	r3, [r3, #4]
 810415c:	2b02      	cmp	r3, #2
 810415e:	d007      	beq.n	8104170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104160:	683b      	ldr	r3, [r7, #0]
 8104162:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104164:	2b11      	cmp	r3, #17
 8104166:	d003      	beq.n	8104170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104168:	683b      	ldr	r3, [r7, #0]
 810416a:	685b      	ldr	r3, [r3, #4]
 810416c:	2b12      	cmp	r3, #18
 810416e:	d130      	bne.n	81041d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	689b      	ldr	r3, [r3, #8]
 8104174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104176:	69fb      	ldr	r3, [r7, #28]
 8104178:	005b      	lsls	r3, r3, #1
 810417a:	2203      	movs	r2, #3
 810417c:	fa02 f303 	lsl.w	r3, r2, r3
 8104180:	43db      	mvns	r3, r3
 8104182:	69ba      	ldr	r2, [r7, #24]
 8104184:	4013      	ands	r3, r2
 8104186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104188:	683b      	ldr	r3, [r7, #0]
 810418a:	68da      	ldr	r2, [r3, #12]
 810418c:	69fb      	ldr	r3, [r7, #28]
 810418e:	005b      	lsls	r3, r3, #1
 8104190:	fa02 f303 	lsl.w	r3, r2, r3
 8104194:	69ba      	ldr	r2, [r7, #24]
 8104196:	4313      	orrs	r3, r2
 8104198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810419a:	687b      	ldr	r3, [r7, #4]
 810419c:	69ba      	ldr	r2, [r7, #24]
 810419e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	685b      	ldr	r3, [r3, #4]
 81041a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81041a6:	2201      	movs	r2, #1
 81041a8:	69fb      	ldr	r3, [r7, #28]
 81041aa:	fa02 f303 	lsl.w	r3, r2, r3
 81041ae:	43db      	mvns	r3, r3
 81041b0:	69ba      	ldr	r2, [r7, #24]
 81041b2:	4013      	ands	r3, r2
 81041b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81041b6:	683b      	ldr	r3, [r7, #0]
 81041b8:	685b      	ldr	r3, [r3, #4]
 81041ba:	091b      	lsrs	r3, r3, #4
 81041bc:	f003 0201 	and.w	r2, r3, #1
 81041c0:	69fb      	ldr	r3, [r7, #28]
 81041c2:	fa02 f303 	lsl.w	r3, r2, r3
 81041c6:	69ba      	ldr	r2, [r7, #24]
 81041c8:	4313      	orrs	r3, r2
 81041ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	69ba      	ldr	r2, [r7, #24]
 81041d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	68db      	ldr	r3, [r3, #12]
 81041d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81041d8:	69fb      	ldr	r3, [r7, #28]
 81041da:	005b      	lsls	r3, r3, #1
 81041dc:	2203      	movs	r2, #3
 81041de:	fa02 f303 	lsl.w	r3, r2, r3
 81041e2:	43db      	mvns	r3, r3
 81041e4:	69ba      	ldr	r2, [r7, #24]
 81041e6:	4013      	ands	r3, r2
 81041e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81041ea:	683b      	ldr	r3, [r7, #0]
 81041ec:	689a      	ldr	r2, [r3, #8]
 81041ee:	69fb      	ldr	r3, [r7, #28]
 81041f0:	005b      	lsls	r3, r3, #1
 81041f2:	fa02 f303 	lsl.w	r3, r2, r3
 81041f6:	69ba      	ldr	r2, [r7, #24]
 81041f8:	4313      	orrs	r3, r2
 81041fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	69ba      	ldr	r2, [r7, #24]
 8104200:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104202:	683b      	ldr	r3, [r7, #0]
 8104204:	685b      	ldr	r3, [r3, #4]
 8104206:	2b02      	cmp	r3, #2
 8104208:	d003      	beq.n	8104212 <HAL_GPIO_Init+0xee>
 810420a:	683b      	ldr	r3, [r7, #0]
 810420c:	685b      	ldr	r3, [r3, #4]
 810420e:	2b12      	cmp	r3, #18
 8104210:	d123      	bne.n	810425a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104212:	69fb      	ldr	r3, [r7, #28]
 8104214:	08da      	lsrs	r2, r3, #3
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	3208      	adds	r2, #8
 810421a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104220:	69fb      	ldr	r3, [r7, #28]
 8104222:	f003 0307 	and.w	r3, r3, #7
 8104226:	009b      	lsls	r3, r3, #2
 8104228:	220f      	movs	r2, #15
 810422a:	fa02 f303 	lsl.w	r3, r2, r3
 810422e:	43db      	mvns	r3, r3
 8104230:	69ba      	ldr	r2, [r7, #24]
 8104232:	4013      	ands	r3, r2
 8104234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104236:	683b      	ldr	r3, [r7, #0]
 8104238:	691a      	ldr	r2, [r3, #16]
 810423a:	69fb      	ldr	r3, [r7, #28]
 810423c:	f003 0307 	and.w	r3, r3, #7
 8104240:	009b      	lsls	r3, r3, #2
 8104242:	fa02 f303 	lsl.w	r3, r2, r3
 8104246:	69ba      	ldr	r2, [r7, #24]
 8104248:	4313      	orrs	r3, r2
 810424a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810424c:	69fb      	ldr	r3, [r7, #28]
 810424e:	08da      	lsrs	r2, r3, #3
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	3208      	adds	r2, #8
 8104254:	69b9      	ldr	r1, [r7, #24]
 8104256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104260:	69fb      	ldr	r3, [r7, #28]
 8104262:	005b      	lsls	r3, r3, #1
 8104264:	2203      	movs	r2, #3
 8104266:	fa02 f303 	lsl.w	r3, r2, r3
 810426a:	43db      	mvns	r3, r3
 810426c:	69ba      	ldr	r2, [r7, #24]
 810426e:	4013      	ands	r3, r2
 8104270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104272:	683b      	ldr	r3, [r7, #0]
 8104274:	685b      	ldr	r3, [r3, #4]
 8104276:	f003 0203 	and.w	r2, r3, #3
 810427a:	69fb      	ldr	r3, [r7, #28]
 810427c:	005b      	lsls	r3, r3, #1
 810427e:	fa02 f303 	lsl.w	r3, r2, r3
 8104282:	69ba      	ldr	r2, [r7, #24]
 8104284:	4313      	orrs	r3, r2
 8104286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	69ba      	ldr	r2, [r7, #24]
 810428c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810428e:	683b      	ldr	r3, [r7, #0]
 8104290:	685b      	ldr	r3, [r3, #4]
 8104292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104296:	2b00      	cmp	r3, #0
 8104298:	f000 80e0 	beq.w	810445c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810429c:	4b2f      	ldr	r3, [pc, #188]	; (810435c <HAL_GPIO_Init+0x238>)
 810429e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81042a2:	4a2e      	ldr	r2, [pc, #184]	; (810435c <HAL_GPIO_Init+0x238>)
 81042a4:	f043 0302 	orr.w	r3, r3, #2
 81042a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81042ac:	4b2b      	ldr	r3, [pc, #172]	; (810435c <HAL_GPIO_Init+0x238>)
 81042ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81042b2:	f003 0302 	and.w	r3, r3, #2
 81042b6:	60fb      	str	r3, [r7, #12]
 81042b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81042ba:	4a29      	ldr	r2, [pc, #164]	; (8104360 <HAL_GPIO_Init+0x23c>)
 81042bc:	69fb      	ldr	r3, [r7, #28]
 81042be:	089b      	lsrs	r3, r3, #2
 81042c0:	3302      	adds	r3, #2
 81042c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81042c8:	69fb      	ldr	r3, [r7, #28]
 81042ca:	f003 0303 	and.w	r3, r3, #3
 81042ce:	009b      	lsls	r3, r3, #2
 81042d0:	220f      	movs	r2, #15
 81042d2:	fa02 f303 	lsl.w	r3, r2, r3
 81042d6:	43db      	mvns	r3, r3
 81042d8:	69ba      	ldr	r2, [r7, #24]
 81042da:	4013      	ands	r3, r2
 81042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	4a20      	ldr	r2, [pc, #128]	; (8104364 <HAL_GPIO_Init+0x240>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d052      	beq.n	810438c <HAL_GPIO_Init+0x268>
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	4a1f      	ldr	r2, [pc, #124]	; (8104368 <HAL_GPIO_Init+0x244>)
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d031      	beq.n	8104352 <HAL_GPIO_Init+0x22e>
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	4a1e      	ldr	r2, [pc, #120]	; (810436c <HAL_GPIO_Init+0x248>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d02b      	beq.n	810434e <HAL_GPIO_Init+0x22a>
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	4a1d      	ldr	r2, [pc, #116]	; (8104370 <HAL_GPIO_Init+0x24c>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d025      	beq.n	810434a <HAL_GPIO_Init+0x226>
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	4a1c      	ldr	r2, [pc, #112]	; (8104374 <HAL_GPIO_Init+0x250>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d01f      	beq.n	8104346 <HAL_GPIO_Init+0x222>
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	4a1b      	ldr	r2, [pc, #108]	; (8104378 <HAL_GPIO_Init+0x254>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d019      	beq.n	8104342 <HAL_GPIO_Init+0x21e>
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	4a1a      	ldr	r2, [pc, #104]	; (810437c <HAL_GPIO_Init+0x258>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d013      	beq.n	810433e <HAL_GPIO_Init+0x21a>
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	4a19      	ldr	r2, [pc, #100]	; (8104380 <HAL_GPIO_Init+0x25c>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d00d      	beq.n	810433a <HAL_GPIO_Init+0x216>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	4a18      	ldr	r2, [pc, #96]	; (8104384 <HAL_GPIO_Init+0x260>)
 8104322:	4293      	cmp	r3, r2
 8104324:	d007      	beq.n	8104336 <HAL_GPIO_Init+0x212>
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	4a17      	ldr	r2, [pc, #92]	; (8104388 <HAL_GPIO_Init+0x264>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d101      	bne.n	8104332 <HAL_GPIO_Init+0x20e>
 810432e:	2309      	movs	r3, #9
 8104330:	e02d      	b.n	810438e <HAL_GPIO_Init+0x26a>
 8104332:	230a      	movs	r3, #10
 8104334:	e02b      	b.n	810438e <HAL_GPIO_Init+0x26a>
 8104336:	2308      	movs	r3, #8
 8104338:	e029      	b.n	810438e <HAL_GPIO_Init+0x26a>
 810433a:	2307      	movs	r3, #7
 810433c:	e027      	b.n	810438e <HAL_GPIO_Init+0x26a>
 810433e:	2306      	movs	r3, #6
 8104340:	e025      	b.n	810438e <HAL_GPIO_Init+0x26a>
 8104342:	2305      	movs	r3, #5
 8104344:	e023      	b.n	810438e <HAL_GPIO_Init+0x26a>
 8104346:	2304      	movs	r3, #4
 8104348:	e021      	b.n	810438e <HAL_GPIO_Init+0x26a>
 810434a:	2303      	movs	r3, #3
 810434c:	e01f      	b.n	810438e <HAL_GPIO_Init+0x26a>
 810434e:	2302      	movs	r3, #2
 8104350:	e01d      	b.n	810438e <HAL_GPIO_Init+0x26a>
 8104352:	2301      	movs	r3, #1
 8104354:	e01b      	b.n	810438e <HAL_GPIO_Init+0x26a>
 8104356:	bf00      	nop
 8104358:	580000c0 	.word	0x580000c0
 810435c:	58024400 	.word	0x58024400
 8104360:	58000400 	.word	0x58000400
 8104364:	58020000 	.word	0x58020000
 8104368:	58020400 	.word	0x58020400
 810436c:	58020800 	.word	0x58020800
 8104370:	58020c00 	.word	0x58020c00
 8104374:	58021000 	.word	0x58021000
 8104378:	58021400 	.word	0x58021400
 810437c:	58021800 	.word	0x58021800
 8104380:	58021c00 	.word	0x58021c00
 8104384:	58022000 	.word	0x58022000
 8104388:	58022400 	.word	0x58022400
 810438c:	2300      	movs	r3, #0
 810438e:	69fa      	ldr	r2, [r7, #28]
 8104390:	f002 0203 	and.w	r2, r2, #3
 8104394:	0092      	lsls	r2, r2, #2
 8104396:	4093      	lsls	r3, r2
 8104398:	69ba      	ldr	r2, [r7, #24]
 810439a:	4313      	orrs	r3, r2
 810439c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810439e:	4938      	ldr	r1, [pc, #224]	; (8104480 <HAL_GPIO_Init+0x35c>)
 81043a0:	69fb      	ldr	r3, [r7, #28]
 81043a2:	089b      	lsrs	r3, r3, #2
 81043a4:	3302      	adds	r3, #2
 81043a6:	69ba      	ldr	r2, [r7, #24]
 81043a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81043ac:	697b      	ldr	r3, [r7, #20]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81043b2:	693b      	ldr	r3, [r7, #16]
 81043b4:	43db      	mvns	r3, r3
 81043b6:	69ba      	ldr	r2, [r7, #24]
 81043b8:	4013      	ands	r3, r2
 81043ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81043bc:	683b      	ldr	r3, [r7, #0]
 81043be:	685b      	ldr	r3, [r3, #4]
 81043c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81043c4:	2b00      	cmp	r3, #0
 81043c6:	d003      	beq.n	81043d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81043c8:	69ba      	ldr	r2, [r7, #24]
 81043ca:	693b      	ldr	r3, [r7, #16]
 81043cc:	4313      	orrs	r3, r2
 81043ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81043d0:	697b      	ldr	r3, [r7, #20]
 81043d2:	69ba      	ldr	r2, [r7, #24]
 81043d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81043d6:	697b      	ldr	r3, [r7, #20]
 81043d8:	685b      	ldr	r3, [r3, #4]
 81043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81043dc:	693b      	ldr	r3, [r7, #16]
 81043de:	43db      	mvns	r3, r3
 81043e0:	69ba      	ldr	r2, [r7, #24]
 81043e2:	4013      	ands	r3, r2
 81043e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81043e6:	683b      	ldr	r3, [r7, #0]
 81043e8:	685b      	ldr	r3, [r3, #4]
 81043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81043ee:	2b00      	cmp	r3, #0
 81043f0:	d003      	beq.n	81043fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81043f2:	69ba      	ldr	r2, [r7, #24]
 81043f4:	693b      	ldr	r3, [r7, #16]
 81043f6:	4313      	orrs	r3, r2
 81043f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81043fa:	697b      	ldr	r3, [r7, #20]
 81043fc:	69ba      	ldr	r2, [r7, #24]
 81043fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104408:	693b      	ldr	r3, [r7, #16]
 810440a:	43db      	mvns	r3, r3
 810440c:	69ba      	ldr	r2, [r7, #24]
 810440e:	4013      	ands	r3, r2
 8104410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104412:	683b      	ldr	r3, [r7, #0]
 8104414:	685b      	ldr	r3, [r3, #4]
 8104416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810441a:	2b00      	cmp	r3, #0
 810441c:	d003      	beq.n	8104426 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810441e:	69ba      	ldr	r2, [r7, #24]
 8104420:	693b      	ldr	r3, [r7, #16]
 8104422:	4313      	orrs	r3, r2
 8104424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810442a:	69bb      	ldr	r3, [r7, #24]
 810442c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104432:	685b      	ldr	r3, [r3, #4]
 8104434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104436:	693b      	ldr	r3, [r7, #16]
 8104438:	43db      	mvns	r3, r3
 810443a:	69ba      	ldr	r2, [r7, #24]
 810443c:	4013      	ands	r3, r2
 810443e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104440:	683b      	ldr	r3, [r7, #0]
 8104442:	685b      	ldr	r3, [r3, #4]
 8104444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104448:	2b00      	cmp	r3, #0
 810444a:	d003      	beq.n	8104454 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810444c:	69ba      	ldr	r2, [r7, #24]
 810444e:	693b      	ldr	r3, [r7, #16]
 8104450:	4313      	orrs	r3, r2
 8104452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104458:	69bb      	ldr	r3, [r7, #24]
 810445a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810445c:	69fb      	ldr	r3, [r7, #28]
 810445e:	3301      	adds	r3, #1
 8104460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104462:	683b      	ldr	r3, [r7, #0]
 8104464:	681a      	ldr	r2, [r3, #0]
 8104466:	69fb      	ldr	r3, [r7, #28]
 8104468:	fa22 f303 	lsr.w	r3, r2, r3
 810446c:	2b00      	cmp	r3, #0
 810446e:	f47f ae63 	bne.w	8104138 <HAL_GPIO_Init+0x14>
  }
}
 8104472:	bf00      	nop
 8104474:	bf00      	nop
 8104476:	3724      	adds	r7, #36	; 0x24
 8104478:	46bd      	mov	sp, r7
 810447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810447e:	4770      	bx	lr
 8104480:	58000400 	.word	0x58000400

08104484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104484:	b480      	push	{r7}
 8104486:	b083      	sub	sp, #12
 8104488:	af00      	add	r7, sp, #0
 810448a:	6078      	str	r0, [r7, #4]
 810448c:	460b      	mov	r3, r1
 810448e:	807b      	strh	r3, [r7, #2]
 8104490:	4613      	mov	r3, r2
 8104492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104494:	787b      	ldrb	r3, [r7, #1]
 8104496:	2b00      	cmp	r3, #0
 8104498:	d003      	beq.n	81044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810449a:	887a      	ldrh	r2, [r7, #2]
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81044a0:	e003      	b.n	81044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81044a2:	887b      	ldrh	r3, [r7, #2]
 81044a4:	041a      	lsls	r2, r3, #16
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	619a      	str	r2, [r3, #24]
}
 81044aa:	bf00      	nop
 81044ac:	370c      	adds	r7, #12
 81044ae:	46bd      	mov	sp, r7
 81044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044b4:	4770      	bx	lr
	...

081044b8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81044b8:	b480      	push	{r7}
 81044ba:	b083      	sub	sp, #12
 81044bc:	af00      	add	r7, sp, #0
 81044be:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81044c0:	4b05      	ldr	r3, [pc, #20]	; (81044d8 <HAL_HSEM_ActivateNotification+0x20>)
 81044c2:	681a      	ldr	r2, [r3, #0]
 81044c4:	4904      	ldr	r1, [pc, #16]	; (81044d8 <HAL_HSEM_ActivateNotification+0x20>)
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	4313      	orrs	r3, r2
 81044ca:	600b      	str	r3, [r1, #0]
#endif
}
 81044cc:	bf00      	nop
 81044ce:	370c      	adds	r7, #12
 81044d0:	46bd      	mov	sp, r7
 81044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044d6:	4770      	bx	lr
 81044d8:	58026510 	.word	0x58026510

081044dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81044dc:	b580      	push	{r7, lr}
 81044de:	b082      	sub	sp, #8
 81044e0:	af00      	add	r7, sp, #0
 81044e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	2b00      	cmp	r3, #0
 81044e8:	d101      	bne.n	81044ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81044ea:	2301      	movs	r3, #1
 81044ec:	e081      	b.n	81045f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81044f4:	b2db      	uxtb	r3, r3
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	d106      	bne.n	8104508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	2200      	movs	r2, #0
 81044fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104502:	6878      	ldr	r0, [r7, #4]
 8104504:	f7fb ffd6 	bl	81004b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	2224      	movs	r2, #36	; 0x24
 810450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	681b      	ldr	r3, [r3, #0]
 8104514:	681a      	ldr	r2, [r3, #0]
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	f022 0201 	bic.w	r2, r2, #1
 810451e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	685a      	ldr	r2, [r3, #4]
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810452c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	681b      	ldr	r3, [r3, #0]
 8104532:	689a      	ldr	r2, [r3, #8]
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810453c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	68db      	ldr	r3, [r3, #12]
 8104542:	2b01      	cmp	r3, #1
 8104544:	d107      	bne.n	8104556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	689a      	ldr	r2, [r3, #8]
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104552:	609a      	str	r2, [r3, #8]
 8104554:	e006      	b.n	8104564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	689a      	ldr	r2, [r3, #8]
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	68db      	ldr	r3, [r3, #12]
 8104568:	2b02      	cmp	r3, #2
 810456a:	d104      	bne.n	8104576 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	685b      	ldr	r3, [r3, #4]
 810457c:	687a      	ldr	r2, [r7, #4]
 810457e:	6812      	ldr	r2, [r2, #0]
 8104580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	68da      	ldr	r2, [r3, #12]
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	691a      	ldr	r2, [r3, #16]
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	695b      	ldr	r3, [r3, #20]
 81045a2:	ea42 0103 	orr.w	r1, r2, r3
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	699b      	ldr	r3, [r3, #24]
 81045aa:	021a      	lsls	r2, r3, #8
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	681b      	ldr	r3, [r3, #0]
 81045b0:	430a      	orrs	r2, r1
 81045b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	69d9      	ldr	r1, [r3, #28]
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	6a1a      	ldr	r2, [r3, #32]
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	430a      	orrs	r2, r1
 81045c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	681a      	ldr	r2, [r3, #0]
 81045ca:	687b      	ldr	r3, [r7, #4]
 81045cc:	681b      	ldr	r3, [r3, #0]
 81045ce:	f042 0201 	orr.w	r2, r2, #1
 81045d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	2200      	movs	r2, #0
 81045d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	2220      	movs	r2, #32
 81045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	2200      	movs	r2, #0
 81045e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	2200      	movs	r2, #0
 81045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81045f0:	2300      	movs	r3, #0
}
 81045f2:	4618      	mov	r0, r3
 81045f4:	3708      	adds	r7, #8
 81045f6:	46bd      	mov	sp, r7
 81045f8:	bd80      	pop	{r7, pc}
	...

081045fc <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 81045fc:	b580      	push	{r7, lr}
 81045fe:	b08a      	sub	sp, #40	; 0x28
 8104600:	af02      	add	r7, sp, #8
 8104602:	60f8      	str	r0, [r7, #12]
 8104604:	4608      	mov	r0, r1
 8104606:	4611      	mov	r1, r2
 8104608:	461a      	mov	r2, r3
 810460a:	4603      	mov	r3, r0
 810460c:	817b      	strh	r3, [r7, #10]
 810460e:	460b      	mov	r3, r1
 8104610:	813b      	strh	r3, [r7, #8]
 8104612:	4613      	mov	r3, r2
 8104614:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810461c:	b2db      	uxtb	r3, r3
 810461e:	2b20      	cmp	r3, #32
 8104620:	f040 80d5 	bne.w	81047ce <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8104624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104626:	2b00      	cmp	r3, #0
 8104628:	d002      	beq.n	8104630 <HAL_I2C_Mem_Write_DMA+0x34>
 810462a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810462c:	2b00      	cmp	r3, #0
 810462e:	d105      	bne.n	810463c <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104630:	68fb      	ldr	r3, [r7, #12]
 8104632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104636:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104638:	2301      	movs	r3, #1
 810463a:	e0c9      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 810463c:	68fb      	ldr	r3, [r7, #12]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	699b      	ldr	r3, [r3, #24]
 8104642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810464a:	d101      	bne.n	8104650 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 810464c:	2302      	movs	r3, #2
 810464e:	e0bf      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104656:	2b01      	cmp	r3, #1
 8104658:	d101      	bne.n	810465e <HAL_I2C_Mem_Write_DMA+0x62>
 810465a:	2302      	movs	r3, #2
 810465c:	e0b8      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
 810465e:	68fb      	ldr	r3, [r7, #12]
 8104660:	2201      	movs	r2, #1
 8104662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104666:	f7fd f859 	bl	810171c <HAL_GetTick>
 810466a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 810466c:	68fb      	ldr	r3, [r7, #12]
 810466e:	2221      	movs	r2, #33	; 0x21
 8104670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8104674:	68fb      	ldr	r3, [r7, #12]
 8104676:	2240      	movs	r2, #64	; 0x40
 8104678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	2200      	movs	r2, #0
 8104680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8104682:	68fb      	ldr	r3, [r7, #12]
 8104684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 810468c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810468e:	68fb      	ldr	r3, [r7, #12]
 8104690:	4a51      	ldr	r2, [pc, #324]	; (81047d8 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8104692:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8104694:	68fb      	ldr	r3, [r7, #12]
 8104696:	4a51      	ldr	r2, [pc, #324]	; (81047dc <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8104698:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810469a:	68fb      	ldr	r3, [r7, #12]
 810469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810469e:	b29b      	uxth	r3, r3
 81046a0:	2bff      	cmp	r3, #255	; 0xff
 81046a2:	d906      	bls.n	81046b2 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81046a4:	68fb      	ldr	r3, [r7, #12]
 81046a6:	22ff      	movs	r2, #255	; 0xff
 81046a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 81046aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81046ae:	61fb      	str	r3, [r7, #28]
 81046b0:	e007      	b.n	81046c2 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81046b2:	68fb      	ldr	r3, [r7, #12]
 81046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81046b6:	b29a      	uxth	r2, r3
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 81046bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81046c0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 81046c2:	88f8      	ldrh	r0, [r7, #6]
 81046c4:	893a      	ldrh	r2, [r7, #8]
 81046c6:	8979      	ldrh	r1, [r7, #10]
 81046c8:	69bb      	ldr	r3, [r7, #24]
 81046ca:	9301      	str	r3, [sp, #4]
 81046cc:	2319      	movs	r3, #25
 81046ce:	9300      	str	r3, [sp, #0]
 81046d0:	4603      	mov	r3, r0
 81046d2:	68f8      	ldr	r0, [r7, #12]
 81046d4:	f000 fe26 	bl	8105324 <I2C_RequestMemoryWrite>
 81046d8:	4603      	mov	r3, r0
 81046da:	2b00      	cmp	r3, #0
 81046dc:	d005      	beq.n	81046ea <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81046de:	68fb      	ldr	r3, [r7, #12]
 81046e0:	2200      	movs	r2, #0
 81046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81046e6:	2301      	movs	r3, #1
 81046e8:	e072      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d020      	beq.n	8104734 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 81046f2:	68fb      	ldr	r3, [r7, #12]
 81046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81046f6:	4a3a      	ldr	r2, [pc, #232]	; (81047e0 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 81046f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 81046fa:	68fb      	ldr	r3, [r7, #12]
 81046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81046fe:	4a39      	ldr	r2, [pc, #228]	; (81047e4 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8104700:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8104702:	68fb      	ldr	r3, [r7, #12]
 8104704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104706:	2200      	movs	r2, #0
 8104708:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 810470a:	68fb      	ldr	r3, [r7, #12]
 810470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810470e:	2200      	movs	r2, #0
 8104710:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8104712:	68fb      	ldr	r3, [r7, #12]
 8104714:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8104716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	3328      	adds	r3, #40	; 0x28
 810471e:	461a      	mov	r2, r3
 8104720:	68fb      	ldr	r3, [r7, #12]
 8104722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104724:	f7fd fd24 	bl	8102170 <HAL_DMA_Start_IT>
 8104728:	4603      	mov	r3, r0
 810472a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 810472c:	7dfb      	ldrb	r3, [r7, #23]
 810472e:	2b00      	cmp	r3, #0
 8104730:	d139      	bne.n	81047a6 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8104732:	e013      	b.n	810475c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104734:	68fb      	ldr	r3, [r7, #12]
 8104736:	2220      	movs	r2, #32
 8104738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 810473c:	68fb      	ldr	r3, [r7, #12]
 810473e:	2200      	movs	r2, #0
 8104740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8104744:	68fb      	ldr	r3, [r7, #12]
 8104746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104748:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	2200      	movs	r2, #0
 8104754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104758:	2301      	movs	r3, #1
 810475a:	e039      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104760:	b2da      	uxtb	r2, r3
 8104762:	8979      	ldrh	r1, [r7, #10]
 8104764:	2300      	movs	r3, #0
 8104766:	9300      	str	r3, [sp, #0]
 8104768:	69fb      	ldr	r3, [r7, #28]
 810476a:	68f8      	ldr	r0, [r7, #12]
 810476c:	f001 fea8 	bl	81064c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8104770:	68fb      	ldr	r3, [r7, #12]
 8104772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104774:	b29a      	uxth	r2, r3
 8104776:	68fb      	ldr	r3, [r7, #12]
 8104778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810477a:	1ad3      	subs	r3, r2, r3
 810477c:	b29a      	uxth	r2, r3
 810477e:	68fb      	ldr	r3, [r7, #12]
 8104780:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104782:	68fb      	ldr	r3, [r7, #12]
 8104784:	2200      	movs	r2, #0
 8104786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 810478a:	2110      	movs	r1, #16
 810478c:	68f8      	ldr	r0, [r7, #12]
 810478e:	f001 fec5 	bl	810651c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8104792:	68fb      	ldr	r3, [r7, #12]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	681a      	ldr	r2, [r3, #0]
 8104798:	68fb      	ldr	r3, [r7, #12]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81047a0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 81047a2:	2300      	movs	r3, #0
 81047a4:	e014      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 81047a6:	68fb      	ldr	r3, [r7, #12]
 81047a8:	2220      	movs	r2, #32
 81047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	2200      	movs	r2, #0
 81047b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81047ba:	f043 0210 	orr.w	r2, r3, #16
 81047be:	68fb      	ldr	r3, [r7, #12]
 81047c0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 81047c2:	68fb      	ldr	r3, [r7, #12]
 81047c4:	2200      	movs	r2, #0
 81047c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81047ca:	2301      	movs	r3, #1
 81047cc:	e000      	b.n	81047d0 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 81047ce:	2302      	movs	r3, #2
  }
}
 81047d0:	4618      	mov	r0, r3
 81047d2:	3720      	adds	r7, #32
 81047d4:	46bd      	mov	sp, r7
 81047d6:	bd80      	pop	{r7, pc}
 81047d8:	ffff0000 	.word	0xffff0000
 81047dc:	08104d7d 	.word	0x08104d7d
 81047e0:	08105f1b 	.word	0x08105f1b
 81047e4:	08106049 	.word	0x08106049

081047e8 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 81047e8:	b580      	push	{r7, lr}
 81047ea:	b08a      	sub	sp, #40	; 0x28
 81047ec:	af02      	add	r7, sp, #8
 81047ee:	60f8      	str	r0, [r7, #12]
 81047f0:	4608      	mov	r0, r1
 81047f2:	4611      	mov	r1, r2
 81047f4:	461a      	mov	r2, r3
 81047f6:	4603      	mov	r3, r0
 81047f8:	817b      	strh	r3, [r7, #10]
 81047fa:	460b      	mov	r3, r1
 81047fc:	813b      	strh	r3, [r7, #8]
 81047fe:	4613      	mov	r3, r2
 8104800:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104802:	68fb      	ldr	r3, [r7, #12]
 8104804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104808:	b2db      	uxtb	r3, r3
 810480a:	2b20      	cmp	r3, #32
 810480c:	f040 80d5 	bne.w	81049ba <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8104810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104812:	2b00      	cmp	r3, #0
 8104814:	d002      	beq.n	810481c <HAL_I2C_Mem_Read_DMA+0x34>
 8104816:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104818:	2b00      	cmp	r3, #0
 810481a:	d105      	bne.n	8104828 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104822:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104824:	2301      	movs	r3, #1
 8104826:	e0c9      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104828:	68fb      	ldr	r3, [r7, #12]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	699b      	ldr	r3, [r3, #24]
 810482e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104836:	d101      	bne.n	810483c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8104838:	2302      	movs	r3, #2
 810483a:	e0bf      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810483c:	68fb      	ldr	r3, [r7, #12]
 810483e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104842:	2b01      	cmp	r3, #1
 8104844:	d101      	bne.n	810484a <HAL_I2C_Mem_Read_DMA+0x62>
 8104846:	2302      	movs	r3, #2
 8104848:	e0b8      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
 810484a:	68fb      	ldr	r3, [r7, #12]
 810484c:	2201      	movs	r2, #1
 810484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104852:	f7fc ff63 	bl	810171c <HAL_GetTick>
 8104856:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	2222      	movs	r2, #34	; 0x22
 810485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8104860:	68fb      	ldr	r3, [r7, #12]
 8104862:	2240      	movs	r2, #64	; 0x40
 8104864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8104868:	68fb      	ldr	r3, [r7, #12]
 810486a:	2200      	movs	r2, #0
 810486c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8104878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810487a:	68fb      	ldr	r3, [r7, #12]
 810487c:	4a51      	ldr	r2, [pc, #324]	; (81049c4 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 810487e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8104880:	68fb      	ldr	r3, [r7, #12]
 8104882:	4a51      	ldr	r2, [pc, #324]	; (81049c8 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8104884:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104886:	68fb      	ldr	r3, [r7, #12]
 8104888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810488a:	b29b      	uxth	r3, r3
 810488c:	2bff      	cmp	r3, #255	; 0xff
 810488e:	d906      	bls.n	810489e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	22ff      	movs	r2, #255	; 0xff
 8104894:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8104896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810489a:	61fb      	str	r3, [r7, #28]
 810489c:	e007      	b.n	81048ae <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810489e:	68fb      	ldr	r3, [r7, #12]
 81048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81048a2:	b29a      	uxth	r2, r3
 81048a4:	68fb      	ldr	r3, [r7, #12]
 81048a6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 81048a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81048ac:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 81048ae:	88f8      	ldrh	r0, [r7, #6]
 81048b0:	893a      	ldrh	r2, [r7, #8]
 81048b2:	8979      	ldrh	r1, [r7, #10]
 81048b4:	69bb      	ldr	r3, [r7, #24]
 81048b6:	9301      	str	r3, [sp, #4]
 81048b8:	2319      	movs	r3, #25
 81048ba:	9300      	str	r3, [sp, #0]
 81048bc:	4603      	mov	r3, r0
 81048be:	68f8      	ldr	r0, [r7, #12]
 81048c0:	f000 fd84 	bl	81053cc <I2C_RequestMemoryRead>
 81048c4:	4603      	mov	r3, r0
 81048c6:	2b00      	cmp	r3, #0
 81048c8:	d005      	beq.n	81048d6 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81048ca:	68fb      	ldr	r3, [r7, #12]
 81048cc:	2200      	movs	r2, #0
 81048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81048d2:	2301      	movs	r3, #1
 81048d4:	e072      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 81048d6:	68fb      	ldr	r3, [r7, #12]
 81048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048da:	2b00      	cmp	r3, #0
 81048dc:	d020      	beq.n	8104920 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 81048de:	68fb      	ldr	r3, [r7, #12]
 81048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048e2:	4a3a      	ldr	r2, [pc, #232]	; (81049cc <HAL_I2C_Mem_Read_DMA+0x1e4>)
 81048e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 81048e6:	68fb      	ldr	r3, [r7, #12]
 81048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048ea:	4a39      	ldr	r2, [pc, #228]	; (81049d0 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 81048ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 81048ee:	68fb      	ldr	r3, [r7, #12]
 81048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048f2:	2200      	movs	r2, #0
 81048f4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81048fa:	2200      	movs	r2, #0
 81048fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 81048fe:	68fb      	ldr	r3, [r7, #12]
 8104900:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8104902:	68fb      	ldr	r3, [r7, #12]
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	3324      	adds	r3, #36	; 0x24
 8104908:	4619      	mov	r1, r3
 810490a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810490c:	68fb      	ldr	r3, [r7, #12]
 810490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104910:	f7fd fc2e 	bl	8102170 <HAL_DMA_Start_IT>
 8104914:	4603      	mov	r3, r0
 8104916:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8104918:	7dfb      	ldrb	r3, [r7, #23]
 810491a:	2b00      	cmp	r3, #0
 810491c:	d139      	bne.n	8104992 <HAL_I2C_Mem_Read_DMA+0x1aa>
 810491e:	e013      	b.n	8104948 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	2220      	movs	r2, #32
 8104924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	2200      	movs	r2, #0
 810492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104938:	68fb      	ldr	r3, [r7, #12]
 810493a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 810493c:	68fb      	ldr	r3, [r7, #12]
 810493e:	2200      	movs	r2, #0
 8104940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104944:	2301      	movs	r3, #1
 8104946:	e039      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8104948:	68fb      	ldr	r3, [r7, #12]
 810494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810494c:	b2da      	uxtb	r2, r3
 810494e:	8979      	ldrh	r1, [r7, #10]
 8104950:	4b20      	ldr	r3, [pc, #128]	; (81049d4 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8104952:	9300      	str	r3, [sp, #0]
 8104954:	69fb      	ldr	r3, [r7, #28]
 8104956:	68f8      	ldr	r0, [r7, #12]
 8104958:	f001 fdb2 	bl	81064c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104960:	b29a      	uxth	r2, r3
 8104962:	68fb      	ldr	r3, [r7, #12]
 8104964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104966:	1ad3      	subs	r3, r2, r3
 8104968:	b29a      	uxth	r2, r3
 810496a:	68fb      	ldr	r3, [r7, #12]
 810496c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810496e:	68fb      	ldr	r3, [r7, #12]
 8104970:	2200      	movs	r2, #0
 8104972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8104976:	2110      	movs	r1, #16
 8104978:	68f8      	ldr	r0, [r7, #12]
 810497a:	f001 fdcf 	bl	810651c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 810497e:	68fb      	ldr	r3, [r7, #12]
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	681a      	ldr	r2, [r3, #0]
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810498c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 810498e:	2300      	movs	r3, #0
 8104990:	e014      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104992:	68fb      	ldr	r3, [r7, #12]
 8104994:	2220      	movs	r2, #32
 8104996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 810499a:	68fb      	ldr	r3, [r7, #12]
 810499c:	2200      	movs	r2, #0
 810499e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 81049a2:	68fb      	ldr	r3, [r7, #12]
 81049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81049a6:	f043 0210 	orr.w	r2, r3, #16
 81049aa:	68fb      	ldr	r3, [r7, #12]
 81049ac:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	2200      	movs	r2, #0
 81049b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81049b6:	2301      	movs	r3, #1
 81049b8:	e000      	b.n	81049bc <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 81049ba:	2302      	movs	r3, #2
  }
}
 81049bc:	4618      	mov	r0, r3
 81049be:	3720      	adds	r7, #32
 81049c0:	46bd      	mov	sp, r7
 81049c2:	bd80      	pop	{r7, pc}
 81049c4:	ffff0000 	.word	0xffff0000
 81049c8:	08104d7d 	.word	0x08104d7d
 81049cc:	08105fb1 	.word	0x08105fb1
 81049d0:	08106049 	.word	0x08106049
 81049d4:	80002400 	.word	0x80002400

081049d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81049d8:	b580      	push	{r7, lr}
 81049da:	b084      	sub	sp, #16
 81049dc:	af00      	add	r7, sp, #0
 81049de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	699b      	ldr	r3, [r3, #24]
 81049e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	681b      	ldr	r3, [r3, #0]
 81049ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81049f4:	2b00      	cmp	r3, #0
 81049f6:	d005      	beq.n	8104a04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81049fc:	68ba      	ldr	r2, [r7, #8]
 81049fe:	68f9      	ldr	r1, [r7, #12]
 8104a00:	6878      	ldr	r0, [r7, #4]
 8104a02:	4798      	blx	r3
  }
}
 8104a04:	bf00      	nop
 8104a06:	3710      	adds	r7, #16
 8104a08:	46bd      	mov	sp, r7
 8104a0a:	bd80      	pop	{r7, pc}

08104a0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8104a0c:	b580      	push	{r7, lr}
 8104a0e:	b086      	sub	sp, #24
 8104a10:	af00      	add	r7, sp, #0
 8104a12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	681b      	ldr	r3, [r3, #0]
 8104a18:	699b      	ldr	r3, [r3, #24]
 8104a1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	681b      	ldr	r3, [r3, #0]
 8104a20:	681b      	ldr	r3, [r3, #0]
 8104a22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104a24:	697b      	ldr	r3, [r7, #20]
 8104a26:	0a1b      	lsrs	r3, r3, #8
 8104a28:	f003 0301 	and.w	r3, r3, #1
 8104a2c:	2b00      	cmp	r3, #0
 8104a2e:	d010      	beq.n	8104a52 <HAL_I2C_ER_IRQHandler+0x46>
 8104a30:	693b      	ldr	r3, [r7, #16]
 8104a32:	09db      	lsrs	r3, r3, #7
 8104a34:	f003 0301 	and.w	r3, r3, #1
 8104a38:	2b00      	cmp	r3, #0
 8104a3a:	d00a      	beq.n	8104a52 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a40:	f043 0201 	orr.w	r2, r3, #1
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104a48:	687b      	ldr	r3, [r7, #4]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8104a50:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104a52:	697b      	ldr	r3, [r7, #20]
 8104a54:	0a9b      	lsrs	r3, r3, #10
 8104a56:	f003 0301 	and.w	r3, r3, #1
 8104a5a:	2b00      	cmp	r3, #0
 8104a5c:	d010      	beq.n	8104a80 <HAL_I2C_ER_IRQHandler+0x74>
 8104a5e:	693b      	ldr	r3, [r7, #16]
 8104a60:	09db      	lsrs	r3, r3, #7
 8104a62:	f003 0301 	and.w	r3, r3, #1
 8104a66:	2b00      	cmp	r3, #0
 8104a68:	d00a      	beq.n	8104a80 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a6e:	f043 0208 	orr.w	r2, r3, #8
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	681b      	ldr	r3, [r3, #0]
 8104a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104a7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104a80:	697b      	ldr	r3, [r7, #20]
 8104a82:	0a5b      	lsrs	r3, r3, #9
 8104a84:	f003 0301 	and.w	r3, r3, #1
 8104a88:	2b00      	cmp	r3, #0
 8104a8a:	d010      	beq.n	8104aae <HAL_I2C_ER_IRQHandler+0xa2>
 8104a8c:	693b      	ldr	r3, [r7, #16]
 8104a8e:	09db      	lsrs	r3, r3, #7
 8104a90:	f003 0301 	and.w	r3, r3, #1
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	d00a      	beq.n	8104aae <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a9c:	f043 0202 	orr.w	r2, r3, #2
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104aac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104ab2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	f003 030b 	and.w	r3, r3, #11
 8104aba:	2b00      	cmp	r3, #0
 8104abc:	d003      	beq.n	8104ac6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8104abe:	68f9      	ldr	r1, [r7, #12]
 8104ac0:	6878      	ldr	r0, [r7, #4]
 8104ac2:	f001 f90f 	bl	8105ce4 <I2C_ITError>
  }
}
 8104ac6:	bf00      	nop
 8104ac8:	3718      	adds	r7, #24
 8104aca:	46bd      	mov	sp, r7
 8104acc:	bd80      	pop	{r7, pc}

08104ace <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8104ace:	b480      	push	{r7}
 8104ad0:	b083      	sub	sp, #12
 8104ad2:	af00      	add	r7, sp, #0
 8104ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8104ad6:	bf00      	nop
 8104ad8:	370c      	adds	r7, #12
 8104ada:	46bd      	mov	sp, r7
 8104adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ae0:	4770      	bx	lr

08104ae2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8104ae2:	b480      	push	{r7}
 8104ae4:	b083      	sub	sp, #12
 8104ae6:	af00      	add	r7, sp, #0
 8104ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8104aea:	bf00      	nop
 8104aec:	370c      	adds	r7, #12
 8104aee:	46bd      	mov	sp, r7
 8104af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104af4:	4770      	bx	lr

08104af6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8104af6:	b480      	push	{r7}
 8104af8:	b083      	sub	sp, #12
 8104afa:	af00      	add	r7, sp, #0
 8104afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8104afe:	bf00      	nop
 8104b00:	370c      	adds	r7, #12
 8104b02:	46bd      	mov	sp, r7
 8104b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b08:	4770      	bx	lr

08104b0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8104b0a:	b480      	push	{r7}
 8104b0c:	b083      	sub	sp, #12
 8104b0e:	af00      	add	r7, sp, #0
 8104b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8104b12:	bf00      	nop
 8104b14:	370c      	adds	r7, #12
 8104b16:	46bd      	mov	sp, r7
 8104b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b1c:	4770      	bx	lr

08104b1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8104b1e:	b480      	push	{r7}
 8104b20:	b083      	sub	sp, #12
 8104b22:	af00      	add	r7, sp, #0
 8104b24:	6078      	str	r0, [r7, #4]
 8104b26:	460b      	mov	r3, r1
 8104b28:	70fb      	strb	r3, [r7, #3]
 8104b2a:	4613      	mov	r3, r2
 8104b2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8104b2e:	bf00      	nop
 8104b30:	370c      	adds	r7, #12
 8104b32:	46bd      	mov	sp, r7
 8104b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b38:	4770      	bx	lr

08104b3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8104b3a:	b480      	push	{r7}
 8104b3c:	b083      	sub	sp, #12
 8104b3e:	af00      	add	r7, sp, #0
 8104b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8104b42:	bf00      	nop
 8104b44:	370c      	adds	r7, #12
 8104b46:	46bd      	mov	sp, r7
 8104b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b4c:	4770      	bx	lr

08104b4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8104b4e:	b480      	push	{r7}
 8104b50:	b083      	sub	sp, #12
 8104b52:	af00      	add	r7, sp, #0
 8104b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8104b56:	bf00      	nop
 8104b58:	370c      	adds	r7, #12
 8104b5a:	46bd      	mov	sp, r7
 8104b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b60:	4770      	bx	lr

08104b62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8104b62:	b480      	push	{r7}
 8104b64:	b083      	sub	sp, #12
 8104b66:	af00      	add	r7, sp, #0
 8104b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8104b6a:	bf00      	nop
 8104b6c:	370c      	adds	r7, #12
 8104b6e:	46bd      	mov	sp, r7
 8104b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b74:	4770      	bx	lr

08104b76 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8104b76:	b580      	push	{r7, lr}
 8104b78:	b086      	sub	sp, #24
 8104b7a:	af00      	add	r7, sp, #0
 8104b7c:	60f8      	str	r0, [r7, #12]
 8104b7e:	60b9      	str	r1, [r7, #8]
 8104b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8104b82:	68fb      	ldr	r3, [r7, #12]
 8104b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b86:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8104b88:	68bb      	ldr	r3, [r7, #8]
 8104b8a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8104b8c:	68fb      	ldr	r3, [r7, #12]
 8104b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104b92:	2b01      	cmp	r3, #1
 8104b94:	d101      	bne.n	8104b9a <I2C_Slave_ISR_IT+0x24>
 8104b96:	2302      	movs	r3, #2
 8104b98:	e0ec      	b.n	8104d74 <I2C_Slave_ISR_IT+0x1fe>
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	2201      	movs	r2, #1
 8104b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8104ba2:	693b      	ldr	r3, [r7, #16]
 8104ba4:	095b      	lsrs	r3, r3, #5
 8104ba6:	f003 0301 	and.w	r3, r3, #1
 8104baa:	2b00      	cmp	r3, #0
 8104bac:	d009      	beq.n	8104bc2 <I2C_Slave_ISR_IT+0x4c>
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	095b      	lsrs	r3, r3, #5
 8104bb2:	f003 0301 	and.w	r3, r3, #1
 8104bb6:	2b00      	cmp	r3, #0
 8104bb8:	d003      	beq.n	8104bc2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8104bba:	6939      	ldr	r1, [r7, #16]
 8104bbc:	68f8      	ldr	r0, [r7, #12]
 8104bbe:	f000 fe43 	bl	8105848 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8104bc2:	693b      	ldr	r3, [r7, #16]
 8104bc4:	091b      	lsrs	r3, r3, #4
 8104bc6:	f003 0301 	and.w	r3, r3, #1
 8104bca:	2b00      	cmp	r3, #0
 8104bcc:	d04d      	beq.n	8104c6a <I2C_Slave_ISR_IT+0xf4>
 8104bce:	687b      	ldr	r3, [r7, #4]
 8104bd0:	091b      	lsrs	r3, r3, #4
 8104bd2:	f003 0301 	and.w	r3, r3, #1
 8104bd6:	2b00      	cmp	r3, #0
 8104bd8:	d047      	beq.n	8104c6a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8104bda:	68fb      	ldr	r3, [r7, #12]
 8104bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104bde:	b29b      	uxth	r3, r3
 8104be0:	2b00      	cmp	r3, #0
 8104be2:	d128      	bne.n	8104c36 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104bea:	b2db      	uxtb	r3, r3
 8104bec:	2b28      	cmp	r3, #40	; 0x28
 8104bee:	d108      	bne.n	8104c02 <I2C_Slave_ISR_IT+0x8c>
 8104bf0:	697b      	ldr	r3, [r7, #20]
 8104bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104bf6:	d104      	bne.n	8104c02 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8104bf8:	6939      	ldr	r1, [r7, #16]
 8104bfa:	68f8      	ldr	r0, [r7, #12]
 8104bfc:	f001 f81c 	bl	8105c38 <I2C_ITListenCplt>
 8104c00:	e032      	b.n	8104c68 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104c08:	b2db      	uxtb	r3, r3
 8104c0a:	2b29      	cmp	r3, #41	; 0x29
 8104c0c:	d10e      	bne.n	8104c2c <I2C_Slave_ISR_IT+0xb6>
 8104c0e:	697b      	ldr	r3, [r7, #20]
 8104c10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8104c14:	d00a      	beq.n	8104c2c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104c16:	68fb      	ldr	r3, [r7, #12]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	2210      	movs	r2, #16
 8104c1c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8104c1e:	68f8      	ldr	r0, [r7, #12]
 8104c20:	f001 f957 	bl	8105ed2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8104c24:	68f8      	ldr	r0, [r7, #12]
 8104c26:	f000 fce6 	bl	81055f6 <I2C_ITSlaveSeqCplt>
 8104c2a:	e01d      	b.n	8104c68 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104c2c:	68fb      	ldr	r3, [r7, #12]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	2210      	movs	r2, #16
 8104c32:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8104c34:	e096      	b.n	8104d64 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104c36:	68fb      	ldr	r3, [r7, #12]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	2210      	movs	r2, #16
 8104c3c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104c42:	f043 0204 	orr.w	r2, r3, #4
 8104c46:	68fb      	ldr	r3, [r7, #12]
 8104c48:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8104c4a:	697b      	ldr	r3, [r7, #20]
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d004      	beq.n	8104c5a <I2C_Slave_ISR_IT+0xe4>
 8104c50:	697b      	ldr	r3, [r7, #20]
 8104c52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104c56:	f040 8085 	bne.w	8104d64 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8104c5a:	68fb      	ldr	r3, [r7, #12]
 8104c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104c5e:	4619      	mov	r1, r3
 8104c60:	68f8      	ldr	r0, [r7, #12]
 8104c62:	f001 f83f 	bl	8105ce4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8104c66:	e07d      	b.n	8104d64 <I2C_Slave_ISR_IT+0x1ee>
 8104c68:	e07c      	b.n	8104d64 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8104c6a:	693b      	ldr	r3, [r7, #16]
 8104c6c:	089b      	lsrs	r3, r3, #2
 8104c6e:	f003 0301 	and.w	r3, r3, #1
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	d030      	beq.n	8104cd8 <I2C_Slave_ISR_IT+0x162>
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	089b      	lsrs	r3, r3, #2
 8104c7a:	f003 0301 	and.w	r3, r3, #1
 8104c7e:	2b00      	cmp	r3, #0
 8104c80:	d02a      	beq.n	8104cd8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8104c82:	68fb      	ldr	r3, [r7, #12]
 8104c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104c86:	b29b      	uxth	r3, r3
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d018      	beq.n	8104cbe <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104c8c:	68fb      	ldr	r3, [r7, #12]
 8104c8e:	681b      	ldr	r3, [r3, #0]
 8104c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104c92:	68fb      	ldr	r3, [r7, #12]
 8104c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c96:	b2d2      	uxtb	r2, r2
 8104c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104c9a:	68fb      	ldr	r3, [r7, #12]
 8104c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c9e:	1c5a      	adds	r2, r3, #1
 8104ca0:	68fb      	ldr	r3, [r7, #12]
 8104ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104ca8:	3b01      	subs	r3, #1
 8104caa:	b29a      	uxth	r2, r3
 8104cac:	68fb      	ldr	r3, [r7, #12]
 8104cae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cb4:	b29b      	uxth	r3, r3
 8104cb6:	3b01      	subs	r3, #1
 8104cb8:	b29a      	uxth	r2, r3
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8104cbe:	68fb      	ldr	r3, [r7, #12]
 8104cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104cc2:	b29b      	uxth	r3, r3
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d14f      	bne.n	8104d68 <I2C_Slave_ISR_IT+0x1f2>
 8104cc8:	697b      	ldr	r3, [r7, #20]
 8104cca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8104cce:	d04b      	beq.n	8104d68 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8104cd0:	68f8      	ldr	r0, [r7, #12]
 8104cd2:	f000 fc90 	bl	81055f6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8104cd6:	e047      	b.n	8104d68 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8104cd8:	693b      	ldr	r3, [r7, #16]
 8104cda:	08db      	lsrs	r3, r3, #3
 8104cdc:	f003 0301 	and.w	r3, r3, #1
 8104ce0:	2b00      	cmp	r3, #0
 8104ce2:	d00a      	beq.n	8104cfa <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	08db      	lsrs	r3, r3, #3
 8104ce8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8104cec:	2b00      	cmp	r3, #0
 8104cee:	d004      	beq.n	8104cfa <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8104cf0:	6939      	ldr	r1, [r7, #16]
 8104cf2:	68f8      	ldr	r0, [r7, #12]
 8104cf4:	f000 fbbe 	bl	8105474 <I2C_ITAddrCplt>
 8104cf8:	e037      	b.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8104cfa:	693b      	ldr	r3, [r7, #16]
 8104cfc:	085b      	lsrs	r3, r3, #1
 8104cfe:	f003 0301 	and.w	r3, r3, #1
 8104d02:	2b00      	cmp	r3, #0
 8104d04:	d031      	beq.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	085b      	lsrs	r3, r3, #1
 8104d0a:	f003 0301 	and.w	r3, r3, #1
 8104d0e:	2b00      	cmp	r3, #0
 8104d10:	d02b      	beq.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8104d12:	68fb      	ldr	r3, [r7, #12]
 8104d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d16:	b29b      	uxth	r3, r3
 8104d18:	2b00      	cmp	r3, #0
 8104d1a:	d018      	beq.n	8104d4e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104d1c:	68fb      	ldr	r3, [r7, #12]
 8104d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d20:	781a      	ldrb	r2, [r3, #0]
 8104d22:	68fb      	ldr	r3, [r7, #12]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104d28:	68fb      	ldr	r3, [r7, #12]
 8104d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d2c:	1c5a      	adds	r2, r3, #1
 8104d2e:	68fb      	ldr	r3, [r7, #12]
 8104d30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104d32:	68fb      	ldr	r3, [r7, #12]
 8104d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104d36:	b29b      	uxth	r3, r3
 8104d38:	3b01      	subs	r3, #1
 8104d3a:	b29a      	uxth	r2, r3
 8104d3c:	68fb      	ldr	r3, [r7, #12]
 8104d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104d44:	3b01      	subs	r3, #1
 8104d46:	b29a      	uxth	r2, r3
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	851a      	strh	r2, [r3, #40]	; 0x28
 8104d4c:	e00d      	b.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8104d4e:	697b      	ldr	r3, [r7, #20]
 8104d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104d54:	d002      	beq.n	8104d5c <I2C_Slave_ISR_IT+0x1e6>
 8104d56:	697b      	ldr	r3, [r7, #20]
 8104d58:	2b00      	cmp	r3, #0
 8104d5a:	d106      	bne.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8104d5c:	68f8      	ldr	r0, [r7, #12]
 8104d5e:	f000 fc4a 	bl	81055f6 <I2C_ITSlaveSeqCplt>
 8104d62:	e002      	b.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8104d64:	bf00      	nop
 8104d66:	e000      	b.n	8104d6a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8104d68:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8104d6a:	68fb      	ldr	r3, [r7, #12]
 8104d6c:	2200      	movs	r2, #0
 8104d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8104d72:	2300      	movs	r3, #0
}
 8104d74:	4618      	mov	r0, r3
 8104d76:	3718      	adds	r7, #24
 8104d78:	46bd      	mov	sp, r7
 8104d7a:	bd80      	pop	{r7, pc}

08104d7c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8104d7c:	b580      	push	{r7, lr}
 8104d7e:	b088      	sub	sp, #32
 8104d80:	af02      	add	r7, sp, #8
 8104d82:	60f8      	str	r0, [r7, #12]
 8104d84:	60b9      	str	r1, [r7, #8]
 8104d86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8104d88:	68fb      	ldr	r3, [r7, #12]
 8104d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104d8e:	2b01      	cmp	r3, #1
 8104d90:	d101      	bne.n	8104d96 <I2C_Master_ISR_DMA+0x1a>
 8104d92:	2302      	movs	r3, #2
 8104d94:	e0e1      	b.n	8104f5a <I2C_Master_ISR_DMA+0x1de>
 8104d96:	68fb      	ldr	r3, [r7, #12]
 8104d98:	2201      	movs	r2, #1
 8104d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8104d9e:	68bb      	ldr	r3, [r7, #8]
 8104da0:	091b      	lsrs	r3, r3, #4
 8104da2:	f003 0301 	and.w	r3, r3, #1
 8104da6:	2b00      	cmp	r3, #0
 8104da8:	d017      	beq.n	8104dda <I2C_Master_ISR_DMA+0x5e>
 8104daa:	687b      	ldr	r3, [r7, #4]
 8104dac:	091b      	lsrs	r3, r3, #4
 8104dae:	f003 0301 	and.w	r3, r3, #1
 8104db2:	2b00      	cmp	r3, #0
 8104db4:	d011      	beq.n	8104dda <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104db6:	68fb      	ldr	r3, [r7, #12]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	2210      	movs	r2, #16
 8104dbc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104dbe:	68fb      	ldr	r3, [r7, #12]
 8104dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104dc2:	f043 0204 	orr.w	r2, r3, #4
 8104dc6:	68fb      	ldr	r3, [r7, #12]
 8104dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8104dca:	2120      	movs	r1, #32
 8104dcc:	68f8      	ldr	r0, [r7, #12]
 8104dce:	f001 fba5 	bl	810651c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104dd2:	68f8      	ldr	r0, [r7, #12]
 8104dd4:	f001 f87d 	bl	8105ed2 <I2C_Flush_TXDR>
 8104dd8:	e0ba      	b.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8104dda:	68bb      	ldr	r3, [r7, #8]
 8104ddc:	09db      	lsrs	r3, r3, #7
 8104dde:	f003 0301 	and.w	r3, r3, #1
 8104de2:	2b00      	cmp	r3, #0
 8104de4:	d072      	beq.n	8104ecc <I2C_Master_ISR_DMA+0x150>
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	099b      	lsrs	r3, r3, #6
 8104dea:	f003 0301 	and.w	r3, r3, #1
 8104dee:	2b00      	cmp	r3, #0
 8104df0:	d06c      	beq.n	8104ecc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8104df2:	68fb      	ldr	r3, [r7, #12]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	681a      	ldr	r2, [r3, #0]
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8104e00:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e06:	b29b      	uxth	r3, r3
 8104e08:	2b00      	cmp	r3, #0
 8104e0a:	d04e      	beq.n	8104eaa <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8104e0c:	68fb      	ldr	r3, [r7, #12]
 8104e0e:	681b      	ldr	r3, [r3, #0]
 8104e10:	685b      	ldr	r3, [r3, #4]
 8104e12:	b29b      	uxth	r3, r3
 8104e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104e18:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104e1a:	68fb      	ldr	r3, [r7, #12]
 8104e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e1e:	b29b      	uxth	r3, r3
 8104e20:	2bff      	cmp	r3, #255	; 0xff
 8104e22:	d906      	bls.n	8104e32 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8104e24:	68fb      	ldr	r3, [r7, #12]
 8104e26:	22ff      	movs	r2, #255	; 0xff
 8104e28:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8104e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104e2e:	617b      	str	r3, [r7, #20]
 8104e30:	e010      	b.n	8104e54 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8104e32:	68fb      	ldr	r3, [r7, #12]
 8104e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e36:	b29a      	uxth	r2, r3
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8104e44:	d003      	beq.n	8104e4e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8104e46:	68fb      	ldr	r3, [r7, #12]
 8104e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e4a:	617b      	str	r3, [r7, #20]
 8104e4c:	e002      	b.n	8104e54 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8104e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104e52:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8104e54:	68fb      	ldr	r3, [r7, #12]
 8104e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104e58:	b2da      	uxtb	r2, r3
 8104e5a:	8a79      	ldrh	r1, [r7, #18]
 8104e5c:	2300      	movs	r3, #0
 8104e5e:	9300      	str	r3, [sp, #0]
 8104e60:	697b      	ldr	r3, [r7, #20]
 8104e62:	68f8      	ldr	r0, [r7, #12]
 8104e64:	f001 fb2c 	bl	81064c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8104e68:	68fb      	ldr	r3, [r7, #12]
 8104e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104e6c:	b29a      	uxth	r2, r3
 8104e6e:	68fb      	ldr	r3, [r7, #12]
 8104e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104e72:	1ad3      	subs	r3, r2, r3
 8104e74:	b29a      	uxth	r2, r3
 8104e76:	68fb      	ldr	r3, [r7, #12]
 8104e78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8104e7a:	68fb      	ldr	r3, [r7, #12]
 8104e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104e80:	b2db      	uxtb	r3, r3
 8104e82:	2b22      	cmp	r3, #34	; 0x22
 8104e84:	d108      	bne.n	8104e98 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8104e86:	68fb      	ldr	r3, [r7, #12]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	681a      	ldr	r2, [r3, #0]
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104e94:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8104e96:	e05b      	b.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8104e98:	68fb      	ldr	r3, [r7, #12]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	681a      	ldr	r2, [r3, #0]
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104ea6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8104ea8:	e052      	b.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8104eaa:	68fb      	ldr	r3, [r7, #12]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	685b      	ldr	r3, [r3, #4]
 8104eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104eb8:	d003      	beq.n	8104ec2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8104eba:	68f8      	ldr	r0, [r7, #12]
 8104ebc:	f000 fb5e 	bl	810557c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8104ec0:	e046      	b.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8104ec2:	2140      	movs	r1, #64	; 0x40
 8104ec4:	68f8      	ldr	r0, [r7, #12]
 8104ec6:	f000 ff0d 	bl	8105ce4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8104eca:	e041      	b.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8104ecc:	68bb      	ldr	r3, [r7, #8]
 8104ece:	099b      	lsrs	r3, r3, #6
 8104ed0:	f003 0301 	and.w	r3, r3, #1
 8104ed4:	2b00      	cmp	r3, #0
 8104ed6:	d029      	beq.n	8104f2c <I2C_Master_ISR_DMA+0x1b0>
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	099b      	lsrs	r3, r3, #6
 8104edc:	f003 0301 	and.w	r3, r3, #1
 8104ee0:	2b00      	cmp	r3, #0
 8104ee2:	d023      	beq.n	8104f2c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8104ee4:	68fb      	ldr	r3, [r7, #12]
 8104ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104ee8:	b29b      	uxth	r3, r3
 8104eea:	2b00      	cmp	r3, #0
 8104eec:	d119      	bne.n	8104f22 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8104eee:	68fb      	ldr	r3, [r7, #12]
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	685b      	ldr	r3, [r3, #4]
 8104ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104efc:	d027      	beq.n	8104f4e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8104efe:	68fb      	ldr	r3, [r7, #12]
 8104f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8104f06:	d108      	bne.n	8104f1a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	685a      	ldr	r2, [r3, #4]
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104f16:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8104f18:	e019      	b.n	8104f4e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8104f1a:	68f8      	ldr	r0, [r7, #12]
 8104f1c:	f000 fb2e 	bl	810557c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8104f20:	e015      	b.n	8104f4e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8104f22:	2140      	movs	r1, #64	; 0x40
 8104f24:	68f8      	ldr	r0, [r7, #12]
 8104f26:	f000 fedd 	bl	8105ce4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8104f2a:	e010      	b.n	8104f4e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8104f2c:	68bb      	ldr	r3, [r7, #8]
 8104f2e:	095b      	lsrs	r3, r3, #5
 8104f30:	f003 0301 	and.w	r3, r3, #1
 8104f34:	2b00      	cmp	r3, #0
 8104f36:	d00b      	beq.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	095b      	lsrs	r3, r3, #5
 8104f3c:	f003 0301 	and.w	r3, r3, #1
 8104f40:	2b00      	cmp	r3, #0
 8104f42:	d005      	beq.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8104f44:	68b9      	ldr	r1, [r7, #8]
 8104f46:	68f8      	ldr	r0, [r7, #12]
 8104f48:	f000 fbb4 	bl	81056b4 <I2C_ITMasterCplt>
 8104f4c:	e000      	b.n	8104f50 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8104f4e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8104f50:	68fb      	ldr	r3, [r7, #12]
 8104f52:	2200      	movs	r2, #0
 8104f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8104f58:	2300      	movs	r3, #0
}
 8104f5a:	4618      	mov	r0, r3
 8104f5c:	3718      	adds	r7, #24
 8104f5e:	46bd      	mov	sp, r7
 8104f60:	bd80      	pop	{r7, pc}
	...

08104f64 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8104f64:	b580      	push	{r7, lr}
 8104f66:	b088      	sub	sp, #32
 8104f68:	af00      	add	r7, sp, #0
 8104f6a:	60f8      	str	r0, [r7, #12]
 8104f6c:	60b9      	str	r1, [r7, #8]
 8104f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f74:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8104f76:	2300      	movs	r3, #0
 8104f78:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8104f7a:	68fb      	ldr	r3, [r7, #12]
 8104f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104f80:	2b01      	cmp	r3, #1
 8104f82:	d101      	bne.n	8104f88 <I2C_Slave_ISR_DMA+0x24>
 8104f84:	2302      	movs	r3, #2
 8104f86:	e1c8      	b.n	810531a <I2C_Slave_ISR_DMA+0x3b6>
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	2201      	movs	r2, #1
 8104f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8104f90:	68bb      	ldr	r3, [r7, #8]
 8104f92:	095b      	lsrs	r3, r3, #5
 8104f94:	f003 0301 	and.w	r3, r3, #1
 8104f98:	2b00      	cmp	r3, #0
 8104f9a:	d009      	beq.n	8104fb0 <I2C_Slave_ISR_DMA+0x4c>
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	095b      	lsrs	r3, r3, #5
 8104fa0:	f003 0301 	and.w	r3, r3, #1
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d003      	beq.n	8104fb0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8104fa8:	68b9      	ldr	r1, [r7, #8]
 8104faa:	68f8      	ldr	r0, [r7, #12]
 8104fac:	f000 fc4c 	bl	8105848 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8104fb0:	68bb      	ldr	r3, [r7, #8]
 8104fb2:	091b      	lsrs	r3, r3, #4
 8104fb4:	f003 0301 	and.w	r3, r3, #1
 8104fb8:	2b00      	cmp	r3, #0
 8104fba:	f000 8199 	beq.w	81052f0 <I2C_Slave_ISR_DMA+0x38c>
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	091b      	lsrs	r3, r3, #4
 8104fc2:	f003 0301 	and.w	r3, r3, #1
 8104fc6:	2b00      	cmp	r3, #0
 8104fc8:	f000 8192 	beq.w	81052f0 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	0b9b      	lsrs	r3, r3, #14
 8104fd0:	f003 0301 	and.w	r3, r3, #1
 8104fd4:	2b00      	cmp	r3, #0
 8104fd6:	d106      	bne.n	8104fe6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	0bdb      	lsrs	r3, r3, #15
 8104fdc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	f000 817e 	beq.w	81052e2 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8104fe6:	68fb      	ldr	r3, [r7, #12]
 8104fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	d07c      	beq.n	81050e8 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	0bdb      	lsrs	r3, r3, #15
 8104ff2:	f003 0301 	and.w	r3, r3, #1
 8104ff6:	2b00      	cmp	r3, #0
 8104ff8:	d076      	beq.n	81050e8 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8104ffa:	68fb      	ldr	r3, [r7, #12]
 8104ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	4a8d      	ldr	r2, [pc, #564]	; (8105238 <I2C_Slave_ISR_DMA+0x2d4>)
 8105002:	4293      	cmp	r3, r2
 8105004:	d059      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105006:	68fb      	ldr	r3, [r7, #12]
 8105008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	4a8b      	ldr	r2, [pc, #556]	; (810523c <I2C_Slave_ISR_DMA+0x2d8>)
 810500e:	4293      	cmp	r3, r2
 8105010:	d053      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105012:	68fb      	ldr	r3, [r7, #12]
 8105014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	4a89      	ldr	r2, [pc, #548]	; (8105240 <I2C_Slave_ISR_DMA+0x2dc>)
 810501a:	4293      	cmp	r3, r2
 810501c:	d04d      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 810501e:	68fb      	ldr	r3, [r7, #12]
 8105020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	4a87      	ldr	r2, [pc, #540]	; (8105244 <I2C_Slave_ISR_DMA+0x2e0>)
 8105026:	4293      	cmp	r3, r2
 8105028:	d047      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 810502a:	68fb      	ldr	r3, [r7, #12]
 810502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	4a85      	ldr	r2, [pc, #532]	; (8105248 <I2C_Slave_ISR_DMA+0x2e4>)
 8105032:	4293      	cmp	r3, r2
 8105034:	d041      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105036:	68fb      	ldr	r3, [r7, #12]
 8105038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	4a83      	ldr	r2, [pc, #524]	; (810524c <I2C_Slave_ISR_DMA+0x2e8>)
 810503e:	4293      	cmp	r3, r2
 8105040:	d03b      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105042:	68fb      	ldr	r3, [r7, #12]
 8105044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	4a81      	ldr	r2, [pc, #516]	; (8105250 <I2C_Slave_ISR_DMA+0x2ec>)
 810504a:	4293      	cmp	r3, r2
 810504c:	d035      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 810504e:	68fb      	ldr	r3, [r7, #12]
 8105050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	4a7f      	ldr	r2, [pc, #508]	; (8105254 <I2C_Slave_ISR_DMA+0x2f0>)
 8105056:	4293      	cmp	r3, r2
 8105058:	d02f      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 810505a:	68fb      	ldr	r3, [r7, #12]
 810505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	4a7d      	ldr	r2, [pc, #500]	; (8105258 <I2C_Slave_ISR_DMA+0x2f4>)
 8105062:	4293      	cmp	r3, r2
 8105064:	d029      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105066:	68fb      	ldr	r3, [r7, #12]
 8105068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	4a7b      	ldr	r2, [pc, #492]	; (810525c <I2C_Slave_ISR_DMA+0x2f8>)
 810506e:	4293      	cmp	r3, r2
 8105070:	d023      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105072:	68fb      	ldr	r3, [r7, #12]
 8105074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	4a79      	ldr	r2, [pc, #484]	; (8105260 <I2C_Slave_ISR_DMA+0x2fc>)
 810507a:	4293      	cmp	r3, r2
 810507c:	d01d      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 810507e:	68fb      	ldr	r3, [r7, #12]
 8105080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	4a77      	ldr	r2, [pc, #476]	; (8105264 <I2C_Slave_ISR_DMA+0x300>)
 8105086:	4293      	cmp	r3, r2
 8105088:	d017      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 810508a:	68fb      	ldr	r3, [r7, #12]
 810508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	4a75      	ldr	r2, [pc, #468]	; (8105268 <I2C_Slave_ISR_DMA+0x304>)
 8105092:	4293      	cmp	r3, r2
 8105094:	d011      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 8105096:	68fb      	ldr	r3, [r7, #12]
 8105098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	4a73      	ldr	r2, [pc, #460]	; (810526c <I2C_Slave_ISR_DMA+0x308>)
 810509e:	4293      	cmp	r3, r2
 81050a0:	d00b      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 81050a2:	68fb      	ldr	r3, [r7, #12]
 81050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	4a71      	ldr	r2, [pc, #452]	; (8105270 <I2C_Slave_ISR_DMA+0x30c>)
 81050aa:	4293      	cmp	r3, r2
 81050ac:	d005      	beq.n	81050ba <I2C_Slave_ISR_DMA+0x156>
 81050ae:	68fb      	ldr	r3, [r7, #12]
 81050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	4a6f      	ldr	r2, [pc, #444]	; (8105274 <I2C_Slave_ISR_DMA+0x310>)
 81050b6:	4293      	cmp	r3, r2
 81050b8:	d109      	bne.n	81050ce <I2C_Slave_ISR_DMA+0x16a>
 81050ba:	68fb      	ldr	r3, [r7, #12]
 81050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	685b      	ldr	r3, [r3, #4]
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	bf0c      	ite	eq
 81050c6:	2301      	moveq	r3, #1
 81050c8:	2300      	movne	r3, #0
 81050ca:	b2db      	uxtb	r3, r3
 81050cc:	e008      	b.n	81050e0 <I2C_Slave_ISR_DMA+0x17c>
 81050ce:	68fb      	ldr	r3, [r7, #12]
 81050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81050d2:	681b      	ldr	r3, [r3, #0]
 81050d4:	685b      	ldr	r3, [r3, #4]
 81050d6:	2b00      	cmp	r3, #0
 81050d8:	bf0c      	ite	eq
 81050da:	2301      	moveq	r3, #1
 81050dc:	2300      	movne	r3, #0
 81050de:	b2db      	uxtb	r3, r3
 81050e0:	2b00      	cmp	r3, #0
 81050e2:	d001      	beq.n	81050e8 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 81050e4:	2301      	movs	r3, #1
 81050e6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 81050e8:	68fb      	ldr	r3, [r7, #12]
 81050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	d07c      	beq.n	81051ea <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	0b9b      	lsrs	r3, r3, #14
 81050f4:	f003 0301 	and.w	r3, r3, #1
 81050f8:	2b00      	cmp	r3, #0
 81050fa:	d076      	beq.n	81051ea <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 81050fc:	68fb      	ldr	r3, [r7, #12]
 81050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105100:	681b      	ldr	r3, [r3, #0]
 8105102:	4a4d      	ldr	r2, [pc, #308]	; (8105238 <I2C_Slave_ISR_DMA+0x2d4>)
 8105104:	4293      	cmp	r3, r2
 8105106:	d059      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	4a4b      	ldr	r2, [pc, #300]	; (810523c <I2C_Slave_ISR_DMA+0x2d8>)
 8105110:	4293      	cmp	r3, r2
 8105112:	d053      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105114:	68fb      	ldr	r3, [r7, #12]
 8105116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	4a49      	ldr	r2, [pc, #292]	; (8105240 <I2C_Slave_ISR_DMA+0x2dc>)
 810511c:	4293      	cmp	r3, r2
 810511e:	d04d      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105124:	681b      	ldr	r3, [r3, #0]
 8105126:	4a47      	ldr	r2, [pc, #284]	; (8105244 <I2C_Slave_ISR_DMA+0x2e0>)
 8105128:	4293      	cmp	r3, r2
 810512a:	d047      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	4a45      	ldr	r2, [pc, #276]	; (8105248 <I2C_Slave_ISR_DMA+0x2e4>)
 8105134:	4293      	cmp	r3, r2
 8105136:	d041      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105138:	68fb      	ldr	r3, [r7, #12]
 810513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810513c:	681b      	ldr	r3, [r3, #0]
 810513e:	4a43      	ldr	r2, [pc, #268]	; (810524c <I2C_Slave_ISR_DMA+0x2e8>)
 8105140:	4293      	cmp	r3, r2
 8105142:	d03b      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	4a41      	ldr	r2, [pc, #260]	; (8105250 <I2C_Slave_ISR_DMA+0x2ec>)
 810514c:	4293      	cmp	r3, r2
 810514e:	d035      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105154:	681b      	ldr	r3, [r3, #0]
 8105156:	4a3f      	ldr	r2, [pc, #252]	; (8105254 <I2C_Slave_ISR_DMA+0x2f0>)
 8105158:	4293      	cmp	r3, r2
 810515a:	d02f      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 810515c:	68fb      	ldr	r3, [r7, #12]
 810515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105160:	681b      	ldr	r3, [r3, #0]
 8105162:	4a3d      	ldr	r2, [pc, #244]	; (8105258 <I2C_Slave_ISR_DMA+0x2f4>)
 8105164:	4293      	cmp	r3, r2
 8105166:	d029      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105168:	68fb      	ldr	r3, [r7, #12]
 810516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	4a3b      	ldr	r2, [pc, #236]	; (810525c <I2C_Slave_ISR_DMA+0x2f8>)
 8105170:	4293      	cmp	r3, r2
 8105172:	d023      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105174:	68fb      	ldr	r3, [r7, #12]
 8105176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105178:	681b      	ldr	r3, [r3, #0]
 810517a:	4a39      	ldr	r2, [pc, #228]	; (8105260 <I2C_Slave_ISR_DMA+0x2fc>)
 810517c:	4293      	cmp	r3, r2
 810517e:	d01d      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105180:	68fb      	ldr	r3, [r7, #12]
 8105182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	4a37      	ldr	r2, [pc, #220]	; (8105264 <I2C_Slave_ISR_DMA+0x300>)
 8105188:	4293      	cmp	r3, r2
 810518a:	d017      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	4a35      	ldr	r2, [pc, #212]	; (8105268 <I2C_Slave_ISR_DMA+0x304>)
 8105194:	4293      	cmp	r3, r2
 8105196:	d011      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	4a33      	ldr	r2, [pc, #204]	; (810526c <I2C_Slave_ISR_DMA+0x308>)
 81051a0:	4293      	cmp	r3, r2
 81051a2:	d00b      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	4a31      	ldr	r2, [pc, #196]	; (8105270 <I2C_Slave_ISR_DMA+0x30c>)
 81051ac:	4293      	cmp	r3, r2
 81051ae:	d005      	beq.n	81051bc <I2C_Slave_ISR_DMA+0x258>
 81051b0:	68fb      	ldr	r3, [r7, #12]
 81051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051b4:	681b      	ldr	r3, [r3, #0]
 81051b6:	4a2f      	ldr	r2, [pc, #188]	; (8105274 <I2C_Slave_ISR_DMA+0x310>)
 81051b8:	4293      	cmp	r3, r2
 81051ba:	d109      	bne.n	81051d0 <I2C_Slave_ISR_DMA+0x26c>
 81051bc:	68fb      	ldr	r3, [r7, #12]
 81051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	685b      	ldr	r3, [r3, #4]
 81051c4:	2b00      	cmp	r3, #0
 81051c6:	bf0c      	ite	eq
 81051c8:	2301      	moveq	r3, #1
 81051ca:	2300      	movne	r3, #0
 81051cc:	b2db      	uxtb	r3, r3
 81051ce:	e008      	b.n	81051e2 <I2C_Slave_ISR_DMA+0x27e>
 81051d0:	68fb      	ldr	r3, [r7, #12]
 81051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	685b      	ldr	r3, [r3, #4]
 81051d8:	2b00      	cmp	r3, #0
 81051da:	bf0c      	ite	eq
 81051dc:	2301      	moveq	r3, #1
 81051de:	2300      	movne	r3, #0
 81051e0:	b2db      	uxtb	r3, r3
 81051e2:	2b00      	cmp	r3, #0
 81051e4:	d001      	beq.n	81051ea <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 81051e6:	2301      	movs	r3, #1
 81051e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 81051ea:	69fb      	ldr	r3, [r7, #28]
 81051ec:	2b01      	cmp	r3, #1
 81051ee:	d148      	bne.n	8105282 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81051f0:	68fb      	ldr	r3, [r7, #12]
 81051f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81051f6:	b2db      	uxtb	r3, r3
 81051f8:	2b28      	cmp	r3, #40	; 0x28
 81051fa:	d108      	bne.n	810520e <I2C_Slave_ISR_DMA+0x2aa>
 81051fc:	69bb      	ldr	r3, [r7, #24]
 81051fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105202:	d104      	bne.n	810520e <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8105204:	68b9      	ldr	r1, [r7, #8]
 8105206:	68f8      	ldr	r0, [r7, #12]
 8105208:	f000 fd16 	bl	8105c38 <I2C_ITListenCplt>
 810520c:	e068      	b.n	81052e0 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810520e:	68fb      	ldr	r3, [r7, #12]
 8105210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105214:	b2db      	uxtb	r3, r3
 8105216:	2b29      	cmp	r3, #41	; 0x29
 8105218:	d12e      	bne.n	8105278 <I2C_Slave_ISR_DMA+0x314>
 810521a:	69bb      	ldr	r3, [r7, #24]
 810521c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8105220:	d02a      	beq.n	8105278 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105222:	68fb      	ldr	r3, [r7, #12]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	2210      	movs	r2, #16
 8105228:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 810522a:	68f8      	ldr	r0, [r7, #12]
 810522c:	f000 fe51 	bl	8105ed2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8105230:	68f8      	ldr	r0, [r7, #12]
 8105232:	f000 f9e0 	bl	81055f6 <I2C_ITSlaveSeqCplt>
 8105236:	e053      	b.n	81052e0 <I2C_Slave_ISR_DMA+0x37c>
 8105238:	40020010 	.word	0x40020010
 810523c:	40020028 	.word	0x40020028
 8105240:	40020040 	.word	0x40020040
 8105244:	40020058 	.word	0x40020058
 8105248:	40020070 	.word	0x40020070
 810524c:	40020088 	.word	0x40020088
 8105250:	400200a0 	.word	0x400200a0
 8105254:	400200b8 	.word	0x400200b8
 8105258:	40020410 	.word	0x40020410
 810525c:	40020428 	.word	0x40020428
 8105260:	40020440 	.word	0x40020440
 8105264:	40020458 	.word	0x40020458
 8105268:	40020470 	.word	0x40020470
 810526c:	40020488 	.word	0x40020488
 8105270:	400204a0 	.word	0x400204a0
 8105274:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105278:	68fb      	ldr	r3, [r7, #12]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	2210      	movs	r2, #16
 810527e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8105280:	e034      	b.n	81052ec <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105282:	68fb      	ldr	r3, [r7, #12]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	2210      	movs	r2, #16
 8105288:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810528a:	68fb      	ldr	r3, [r7, #12]
 810528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810528e:	f043 0204 	orr.w	r2, r3, #4
 8105292:	68fb      	ldr	r3, [r7, #12]
 8105294:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8105296:	68fb      	ldr	r3, [r7, #12]
 8105298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810529c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810529e:	69bb      	ldr	r3, [r7, #24]
 81052a0:	2b00      	cmp	r3, #0
 81052a2:	d003      	beq.n	81052ac <I2C_Slave_ISR_DMA+0x348>
 81052a4:	69bb      	ldr	r3, [r7, #24]
 81052a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81052aa:	d11f      	bne.n	81052ec <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 81052ac:	7dfb      	ldrb	r3, [r7, #23]
 81052ae:	2b21      	cmp	r3, #33	; 0x21
 81052b0:	d002      	beq.n	81052b8 <I2C_Slave_ISR_DMA+0x354>
 81052b2:	7dfb      	ldrb	r3, [r7, #23]
 81052b4:	2b29      	cmp	r3, #41	; 0x29
 81052b6:	d103      	bne.n	81052c0 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 81052b8:	68fb      	ldr	r3, [r7, #12]
 81052ba:	2221      	movs	r2, #33	; 0x21
 81052bc:	631a      	str	r2, [r3, #48]	; 0x30
 81052be:	e008      	b.n	81052d2 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 81052c0:	7dfb      	ldrb	r3, [r7, #23]
 81052c2:	2b22      	cmp	r3, #34	; 0x22
 81052c4:	d002      	beq.n	81052cc <I2C_Slave_ISR_DMA+0x368>
 81052c6:	7dfb      	ldrb	r3, [r7, #23]
 81052c8:	2b2a      	cmp	r3, #42	; 0x2a
 81052ca:	d102      	bne.n	81052d2 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81052cc:	68fb      	ldr	r3, [r7, #12]
 81052ce:	2222      	movs	r2, #34	; 0x22
 81052d0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 81052d2:	68fb      	ldr	r3, [r7, #12]
 81052d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81052d6:	4619      	mov	r1, r3
 81052d8:	68f8      	ldr	r0, [r7, #12]
 81052da:	f000 fd03 	bl	8105ce4 <I2C_ITError>
      if (treatdmanack == 1U)
 81052de:	e005      	b.n	81052ec <I2C_Slave_ISR_DMA+0x388>
 81052e0:	e004      	b.n	81052ec <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81052e2:	68fb      	ldr	r3, [r7, #12]
 81052e4:	681b      	ldr	r3, [r3, #0]
 81052e6:	2210      	movs	r2, #16
 81052e8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 81052ea:	e011      	b.n	8105310 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 81052ec:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 81052ee:	e00f      	b.n	8105310 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81052f0:	68bb      	ldr	r3, [r7, #8]
 81052f2:	08db      	lsrs	r3, r3, #3
 81052f4:	f003 0301 	and.w	r3, r3, #1
 81052f8:	2b00      	cmp	r3, #0
 81052fa:	d009      	beq.n	8105310 <I2C_Slave_ISR_DMA+0x3ac>
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	08db      	lsrs	r3, r3, #3
 8105300:	f003 0301 	and.w	r3, r3, #1
 8105304:	2b00      	cmp	r3, #0
 8105306:	d003      	beq.n	8105310 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8105308:	68b9      	ldr	r1, [r7, #8]
 810530a:	68f8      	ldr	r0, [r7, #12]
 810530c:	f000 f8b2 	bl	8105474 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8105310:	68fb      	ldr	r3, [r7, #12]
 8105312:	2200      	movs	r2, #0
 8105314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8105318:	2300      	movs	r3, #0
}
 810531a:	4618      	mov	r0, r3
 810531c:	3720      	adds	r7, #32
 810531e:	46bd      	mov	sp, r7
 8105320:	bd80      	pop	{r7, pc}
 8105322:	bf00      	nop

08105324 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105324:	b580      	push	{r7, lr}
 8105326:	b086      	sub	sp, #24
 8105328:	af02      	add	r7, sp, #8
 810532a:	60f8      	str	r0, [r7, #12]
 810532c:	4608      	mov	r0, r1
 810532e:	4611      	mov	r1, r2
 8105330:	461a      	mov	r2, r3
 8105332:	4603      	mov	r3, r0
 8105334:	817b      	strh	r3, [r7, #10]
 8105336:	460b      	mov	r3, r1
 8105338:	813b      	strh	r3, [r7, #8]
 810533a:	4613      	mov	r3, r2
 810533c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810533e:	88fb      	ldrh	r3, [r7, #6]
 8105340:	b2da      	uxtb	r2, r3
 8105342:	8979      	ldrh	r1, [r7, #10]
 8105344:	4b20      	ldr	r3, [pc, #128]	; (81053c8 <I2C_RequestMemoryWrite+0xa4>)
 8105346:	9300      	str	r3, [sp, #0]
 8105348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810534c:	68f8      	ldr	r0, [r7, #12]
 810534e:	f001 f8b7 	bl	81064c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105352:	69fa      	ldr	r2, [r7, #28]
 8105354:	69b9      	ldr	r1, [r7, #24]
 8105356:	68f8      	ldr	r0, [r7, #12]
 8105358:	f001 f80c 	bl	8106374 <I2C_WaitOnTXISFlagUntilTimeout>
 810535c:	4603      	mov	r3, r0
 810535e:	2b00      	cmp	r3, #0
 8105360:	d001      	beq.n	8105366 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8105362:	2301      	movs	r3, #1
 8105364:	e02c      	b.n	81053c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8105366:	88fb      	ldrh	r3, [r7, #6]
 8105368:	2b01      	cmp	r3, #1
 810536a:	d105      	bne.n	8105378 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810536c:	893b      	ldrh	r3, [r7, #8]
 810536e:	b2da      	uxtb	r2, r3
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	629a      	str	r2, [r3, #40]	; 0x28
 8105376:	e015      	b.n	81053a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8105378:	893b      	ldrh	r3, [r7, #8]
 810537a:	0a1b      	lsrs	r3, r3, #8
 810537c:	b29b      	uxth	r3, r3
 810537e:	b2da      	uxtb	r2, r3
 8105380:	68fb      	ldr	r3, [r7, #12]
 8105382:	681b      	ldr	r3, [r3, #0]
 8105384:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8105386:	69fa      	ldr	r2, [r7, #28]
 8105388:	69b9      	ldr	r1, [r7, #24]
 810538a:	68f8      	ldr	r0, [r7, #12]
 810538c:	f000 fff2 	bl	8106374 <I2C_WaitOnTXISFlagUntilTimeout>
 8105390:	4603      	mov	r3, r0
 8105392:	2b00      	cmp	r3, #0
 8105394:	d001      	beq.n	810539a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8105396:	2301      	movs	r3, #1
 8105398:	e012      	b.n	81053c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810539a:	893b      	ldrh	r3, [r7, #8]
 810539c:	b2da      	uxtb	r2, r3
 810539e:	68fb      	ldr	r3, [r7, #12]
 81053a0:	681b      	ldr	r3, [r3, #0]
 81053a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81053a4:	69fb      	ldr	r3, [r7, #28]
 81053a6:	9300      	str	r3, [sp, #0]
 81053a8:	69bb      	ldr	r3, [r7, #24]
 81053aa:	2200      	movs	r2, #0
 81053ac:	2180      	movs	r1, #128	; 0x80
 81053ae:	68f8      	ldr	r0, [r7, #12]
 81053b0:	f000 ffa0 	bl	81062f4 <I2C_WaitOnFlagUntilTimeout>
 81053b4:	4603      	mov	r3, r0
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d001      	beq.n	81053be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81053ba:	2301      	movs	r3, #1
 81053bc:	e000      	b.n	81053c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81053be:	2300      	movs	r3, #0
}
 81053c0:	4618      	mov	r0, r3
 81053c2:	3710      	adds	r7, #16
 81053c4:	46bd      	mov	sp, r7
 81053c6:	bd80      	pop	{r7, pc}
 81053c8:	80002000 	.word	0x80002000

081053cc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81053cc:	b580      	push	{r7, lr}
 81053ce:	b086      	sub	sp, #24
 81053d0:	af02      	add	r7, sp, #8
 81053d2:	60f8      	str	r0, [r7, #12]
 81053d4:	4608      	mov	r0, r1
 81053d6:	4611      	mov	r1, r2
 81053d8:	461a      	mov	r2, r3
 81053da:	4603      	mov	r3, r0
 81053dc:	817b      	strh	r3, [r7, #10]
 81053de:	460b      	mov	r3, r1
 81053e0:	813b      	strh	r3, [r7, #8]
 81053e2:	4613      	mov	r3, r2
 81053e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 81053e6:	88fb      	ldrh	r3, [r7, #6]
 81053e8:	b2da      	uxtb	r2, r3
 81053ea:	8979      	ldrh	r1, [r7, #10]
 81053ec:	4b20      	ldr	r3, [pc, #128]	; (8105470 <I2C_RequestMemoryRead+0xa4>)
 81053ee:	9300      	str	r3, [sp, #0]
 81053f0:	2300      	movs	r3, #0
 81053f2:	68f8      	ldr	r0, [r7, #12]
 81053f4:	f001 f864 	bl	81064c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81053f8:	69fa      	ldr	r2, [r7, #28]
 81053fa:	69b9      	ldr	r1, [r7, #24]
 81053fc:	68f8      	ldr	r0, [r7, #12]
 81053fe:	f000 ffb9 	bl	8106374 <I2C_WaitOnTXISFlagUntilTimeout>
 8105402:	4603      	mov	r3, r0
 8105404:	2b00      	cmp	r3, #0
 8105406:	d001      	beq.n	810540c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8105408:	2301      	movs	r3, #1
 810540a:	e02c      	b.n	8105466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810540c:	88fb      	ldrh	r3, [r7, #6]
 810540e:	2b01      	cmp	r3, #1
 8105410:	d105      	bne.n	810541e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105412:	893b      	ldrh	r3, [r7, #8]
 8105414:	b2da      	uxtb	r2, r3
 8105416:	68fb      	ldr	r3, [r7, #12]
 8105418:	681b      	ldr	r3, [r3, #0]
 810541a:	629a      	str	r2, [r3, #40]	; 0x28
 810541c:	e015      	b.n	810544a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810541e:	893b      	ldrh	r3, [r7, #8]
 8105420:	0a1b      	lsrs	r3, r3, #8
 8105422:	b29b      	uxth	r3, r3
 8105424:	b2da      	uxtb	r2, r3
 8105426:	68fb      	ldr	r3, [r7, #12]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810542c:	69fa      	ldr	r2, [r7, #28]
 810542e:	69b9      	ldr	r1, [r7, #24]
 8105430:	68f8      	ldr	r0, [r7, #12]
 8105432:	f000 ff9f 	bl	8106374 <I2C_WaitOnTXISFlagUntilTimeout>
 8105436:	4603      	mov	r3, r0
 8105438:	2b00      	cmp	r3, #0
 810543a:	d001      	beq.n	8105440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810543c:	2301      	movs	r3, #1
 810543e:	e012      	b.n	8105466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105440:	893b      	ldrh	r3, [r7, #8]
 8105442:	b2da      	uxtb	r2, r3
 8105444:	68fb      	ldr	r3, [r7, #12]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810544a:	69fb      	ldr	r3, [r7, #28]
 810544c:	9300      	str	r3, [sp, #0]
 810544e:	69bb      	ldr	r3, [r7, #24]
 8105450:	2200      	movs	r2, #0
 8105452:	2140      	movs	r1, #64	; 0x40
 8105454:	68f8      	ldr	r0, [r7, #12]
 8105456:	f000 ff4d 	bl	81062f4 <I2C_WaitOnFlagUntilTimeout>
 810545a:	4603      	mov	r3, r0
 810545c:	2b00      	cmp	r3, #0
 810545e:	d001      	beq.n	8105464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8105460:	2301      	movs	r3, #1
 8105462:	e000      	b.n	8105466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8105464:	2300      	movs	r3, #0
}
 8105466:	4618      	mov	r0, r3
 8105468:	3710      	adds	r7, #16
 810546a:	46bd      	mov	sp, r7
 810546c:	bd80      	pop	{r7, pc}
 810546e:	bf00      	nop
 8105470:	80002000 	.word	0x80002000

08105474 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8105474:	b580      	push	{r7, lr}
 8105476:	b084      	sub	sp, #16
 8105478:	af00      	add	r7, sp, #0
 810547a:	6078      	str	r0, [r7, #4]
 810547c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105484:	b2db      	uxtb	r3, r3
 8105486:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810548a:	2b28      	cmp	r3, #40	; 0x28
 810548c:	d16a      	bne.n	8105564 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 810548e:	687b      	ldr	r3, [r7, #4]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	699b      	ldr	r3, [r3, #24]
 8105494:	0c1b      	lsrs	r3, r3, #16
 8105496:	b2db      	uxtb	r3, r3
 8105498:	f003 0301 	and.w	r3, r3, #1
 810549c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	681b      	ldr	r3, [r3, #0]
 81054a2:	699b      	ldr	r3, [r3, #24]
 81054a4:	0c1b      	lsrs	r3, r3, #16
 81054a6:	b29b      	uxth	r3, r3
 81054a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81054ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81054ae:	687b      	ldr	r3, [r7, #4]
 81054b0:	681b      	ldr	r3, [r3, #0]
 81054b2:	689b      	ldr	r3, [r3, #8]
 81054b4:	b29b      	uxth	r3, r3
 81054b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81054ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	68db      	ldr	r3, [r3, #12]
 81054c2:	b29b      	uxth	r3, r3
 81054c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81054c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	68db      	ldr	r3, [r3, #12]
 81054ce:	2b02      	cmp	r3, #2
 81054d0:	d138      	bne.n	8105544 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81054d2:	897b      	ldrh	r3, [r7, #10]
 81054d4:	09db      	lsrs	r3, r3, #7
 81054d6:	b29a      	uxth	r2, r3
 81054d8:	89bb      	ldrh	r3, [r7, #12]
 81054da:	4053      	eors	r3, r2
 81054dc:	b29b      	uxth	r3, r3
 81054de:	f003 0306 	and.w	r3, r3, #6
 81054e2:	2b00      	cmp	r3, #0
 81054e4:	d11c      	bne.n	8105520 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 81054e6:	897b      	ldrh	r3, [r7, #10]
 81054e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81054ee:	1c5a      	adds	r2, r3, #1
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81054f8:	2b02      	cmp	r3, #2
 81054fa:	d13b      	bne.n	8105574 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	2200      	movs	r2, #0
 8105500:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	2208      	movs	r2, #8
 8105508:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	2200      	movs	r2, #0
 810550e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8105512:	89ba      	ldrh	r2, [r7, #12]
 8105514:	7bfb      	ldrb	r3, [r7, #15]
 8105516:	4619      	mov	r1, r3
 8105518:	6878      	ldr	r0, [r7, #4]
 810551a:	f7ff fb00 	bl	8104b1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 810551e:	e029      	b.n	8105574 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8105520:	893b      	ldrh	r3, [r7, #8]
 8105522:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8105524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105528:	6878      	ldr	r0, [r7, #4]
 810552a:	f001 f85b 	bl	81065e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	2200      	movs	r2, #0
 8105532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8105536:	89ba      	ldrh	r2, [r7, #12]
 8105538:	7bfb      	ldrb	r3, [r7, #15]
 810553a:	4619      	mov	r1, r3
 810553c:	6878      	ldr	r0, [r7, #4]
 810553e:	f7ff faee 	bl	8104b1e <HAL_I2C_AddrCallback>
}
 8105542:	e017      	b.n	8105574 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8105544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8105548:	6878      	ldr	r0, [r7, #4]
 810554a:	f001 f84b 	bl	81065e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 810554e:	687b      	ldr	r3, [r7, #4]
 8105550:	2200      	movs	r2, #0
 8105552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8105556:	89ba      	ldrh	r2, [r7, #12]
 8105558:	7bfb      	ldrb	r3, [r7, #15]
 810555a:	4619      	mov	r1, r3
 810555c:	6878      	ldr	r0, [r7, #4]
 810555e:	f7ff fade 	bl	8104b1e <HAL_I2C_AddrCallback>
}
 8105562:	e007      	b.n	8105574 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	2208      	movs	r2, #8
 810556a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	2200      	movs	r2, #0
 8105570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8105574:	bf00      	nop
 8105576:	3710      	adds	r7, #16
 8105578:	46bd      	mov	sp, r7
 810557a:	bd80      	pop	{r7, pc}

0810557c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 810557c:	b580      	push	{r7, lr}
 810557e:	b082      	sub	sp, #8
 8105580:	af00      	add	r7, sp, #0
 8105582:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	2200      	movs	r2, #0
 8105588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105592:	b2db      	uxtb	r3, r3
 8105594:	2b21      	cmp	r3, #33	; 0x21
 8105596:	d115      	bne.n	81055c4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	2220      	movs	r2, #32
 810559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	2211      	movs	r2, #17
 81055a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	2200      	movs	r2, #0
 81055aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81055ac:	2101      	movs	r1, #1
 81055ae:	6878      	ldr	r0, [r7, #4]
 81055b0:	f001 f818 	bl	81065e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	2200      	movs	r2, #0
 81055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 81055bc:	6878      	ldr	r0, [r7, #4]
 81055be:	f7ff fa86 	bl	8104ace <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 81055c2:	e014      	b.n	81055ee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	2220      	movs	r2, #32
 81055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	2212      	movs	r2, #18
 81055d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	2200      	movs	r2, #0
 81055d6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 81055d8:	2102      	movs	r1, #2
 81055da:	6878      	ldr	r0, [r7, #4]
 81055dc:	f001 f802 	bl	81065e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	2200      	movs	r2, #0
 81055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 81055e8:	6878      	ldr	r0, [r7, #4]
 81055ea:	f7ff fa7a 	bl	8104ae2 <HAL_I2C_MasterRxCpltCallback>
}
 81055ee:	bf00      	nop
 81055f0:	3708      	adds	r7, #8
 81055f2:	46bd      	mov	sp, r7
 81055f4:	bd80      	pop	{r7, pc}

081055f6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 81055f6:	b580      	push	{r7, lr}
 81055f8:	b084      	sub	sp, #16
 81055fa:	af00      	add	r7, sp, #0
 81055fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 81055fe:	687b      	ldr	r3, [r7, #4]
 8105600:	681b      	ldr	r3, [r3, #0]
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	2200      	movs	r2, #0
 810560a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 810560e:	68fb      	ldr	r3, [r7, #12]
 8105610:	0b9b      	lsrs	r3, r3, #14
 8105612:	f003 0301 	and.w	r3, r3, #1
 8105616:	2b00      	cmp	r3, #0
 8105618:	d008      	beq.n	810562c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	681b      	ldr	r3, [r3, #0]
 810561e:	681a      	ldr	r2, [r3, #0]
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105628:	601a      	str	r2, [r3, #0]
 810562a:	e00d      	b.n	8105648 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 810562c:	68fb      	ldr	r3, [r7, #12]
 810562e:	0bdb      	lsrs	r3, r3, #15
 8105630:	f003 0301 	and.w	r3, r3, #1
 8105634:	2b00      	cmp	r3, #0
 8105636:	d007      	beq.n	8105648 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	681b      	ldr	r3, [r3, #0]
 810563c:	681a      	ldr	r2, [r3, #0]
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	681b      	ldr	r3, [r3, #0]
 8105642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105646:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810564e:	b2db      	uxtb	r3, r3
 8105650:	2b29      	cmp	r3, #41	; 0x29
 8105652:	d112      	bne.n	810567a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	2228      	movs	r2, #40	; 0x28
 8105658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	2221      	movs	r2, #33	; 0x21
 8105660:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8105662:	2101      	movs	r1, #1
 8105664:	6878      	ldr	r0, [r7, #4]
 8105666:	f000 ffbd 	bl	81065e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	2200      	movs	r2, #0
 810566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8105672:	6878      	ldr	r0, [r7, #4]
 8105674:	f7ff fa3f 	bl	8104af6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8105678:	e017      	b.n	81056aa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105680:	b2db      	uxtb	r3, r3
 8105682:	2b2a      	cmp	r3, #42	; 0x2a
 8105684:	d111      	bne.n	81056aa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	2228      	movs	r2, #40	; 0x28
 810568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	2222      	movs	r2, #34	; 0x22
 8105692:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8105694:	2102      	movs	r1, #2
 8105696:	6878      	ldr	r0, [r7, #4]
 8105698:	f000 ffa4 	bl	81065e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	2200      	movs	r2, #0
 81056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81056a4:	6878      	ldr	r0, [r7, #4]
 81056a6:	f7ff fa30 	bl	8104b0a <HAL_I2C_SlaveRxCpltCallback>
}
 81056aa:	bf00      	nop
 81056ac:	3710      	adds	r7, #16
 81056ae:	46bd      	mov	sp, r7
 81056b0:	bd80      	pop	{r7, pc}
	...

081056b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81056b4:	b580      	push	{r7, lr}
 81056b6:	b086      	sub	sp, #24
 81056b8:	af00      	add	r7, sp, #0
 81056ba:	6078      	str	r0, [r7, #4]
 81056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 81056be:	683b      	ldr	r3, [r7, #0]
 81056c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	2220      	movs	r2, #32
 81056c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81056d0:	b2db      	uxtb	r3, r3
 81056d2:	2b21      	cmp	r3, #33	; 0x21
 81056d4:	d107      	bne.n	81056e6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 81056d6:	2101      	movs	r1, #1
 81056d8:	6878      	ldr	r0, [r7, #4]
 81056da:	f000 ff83 	bl	81065e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	2211      	movs	r2, #17
 81056e2:	631a      	str	r2, [r3, #48]	; 0x30
 81056e4:	e00c      	b.n	8105700 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81056ec:	b2db      	uxtb	r3, r3
 81056ee:	2b22      	cmp	r3, #34	; 0x22
 81056f0:	d106      	bne.n	8105700 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 81056f2:	2102      	movs	r1, #2
 81056f4:	6878      	ldr	r0, [r7, #4]
 81056f6:	f000 ff75 	bl	81065e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	2212      	movs	r2, #18
 81056fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	681b      	ldr	r3, [r3, #0]
 8105704:	6859      	ldr	r1, [r3, #4]
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	681a      	ldr	r2, [r3, #0]
 810570a:	4b4d      	ldr	r3, [pc, #308]	; (8105840 <I2C_ITMasterCplt+0x18c>)
 810570c:	400b      	ands	r3, r1
 810570e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8105710:	687b      	ldr	r3, [r7, #4]
 8105712:	2200      	movs	r2, #0
 8105714:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	4a4a      	ldr	r2, [pc, #296]	; (8105844 <I2C_ITMasterCplt+0x190>)
 810571a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 810571c:	697b      	ldr	r3, [r7, #20]
 810571e:	091b      	lsrs	r3, r3, #4
 8105720:	f003 0301 	and.w	r3, r3, #1
 8105724:	2b00      	cmp	r3, #0
 8105726:	d009      	beq.n	810573c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	2210      	movs	r2, #16
 810572e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105730:	687b      	ldr	r3, [r7, #4]
 8105732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105734:	f043 0204 	orr.w	r2, r3, #4
 8105738:	687b      	ldr	r3, [r7, #4]
 810573a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105742:	b2db      	uxtb	r3, r3
 8105744:	2b60      	cmp	r3, #96	; 0x60
 8105746:	d10b      	bne.n	8105760 <I2C_ITMasterCplt+0xac>
 8105748:	697b      	ldr	r3, [r7, #20]
 810574a:	089b      	lsrs	r3, r3, #2
 810574c:	f003 0301 	and.w	r3, r3, #1
 8105750:	2b00      	cmp	r3, #0
 8105752:	d005      	beq.n	8105760 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810575a:	b2db      	uxtb	r3, r3
 810575c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 810575e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8105760:	6878      	ldr	r0, [r7, #4]
 8105762:	f000 fbb6 	bl	8105ed2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810576a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 810576c:	687b      	ldr	r3, [r7, #4]
 810576e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105772:	b2db      	uxtb	r3, r3
 8105774:	2b60      	cmp	r3, #96	; 0x60
 8105776:	d002      	beq.n	810577e <I2C_ITMasterCplt+0xca>
 8105778:	693b      	ldr	r3, [r7, #16]
 810577a:	2b00      	cmp	r3, #0
 810577c:	d006      	beq.n	810578c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105782:	4619      	mov	r1, r3
 8105784:	6878      	ldr	r0, [r7, #4]
 8105786:	f000 faad 	bl	8105ce4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 810578a:	e054      	b.n	8105836 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 810578c:	687b      	ldr	r3, [r7, #4]
 810578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105792:	b2db      	uxtb	r3, r3
 8105794:	2b21      	cmp	r3, #33	; 0x21
 8105796:	d124      	bne.n	81057e2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	2220      	movs	r2, #32
 810579c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	2200      	movs	r2, #0
 81057a4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81057ac:	b2db      	uxtb	r3, r3
 81057ae:	2b40      	cmp	r3, #64	; 0x40
 81057b0:	d10b      	bne.n	81057ca <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	2200      	movs	r2, #0
 81057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	2200      	movs	r2, #0
 81057be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 81057c2:	6878      	ldr	r0, [r7, #4]
 81057c4:	f7fb fc88 	bl	81010d8 <HAL_I2C_MemTxCpltCallback>
}
 81057c8:	e035      	b.n	8105836 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	2200      	movs	r2, #0
 81057ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	2200      	movs	r2, #0
 81057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 81057da:	6878      	ldr	r0, [r7, #4]
 81057dc:	f7ff f977 	bl	8104ace <HAL_I2C_MasterTxCpltCallback>
}
 81057e0:	e029      	b.n	8105836 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81057e8:	b2db      	uxtb	r3, r3
 81057ea:	2b22      	cmp	r3, #34	; 0x22
 81057ec:	d123      	bne.n	8105836 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 81057ee:	687b      	ldr	r3, [r7, #4]
 81057f0:	2220      	movs	r2, #32
 81057f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	2200      	movs	r2, #0
 81057fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 81057fc:	687b      	ldr	r3, [r7, #4]
 81057fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105802:	b2db      	uxtb	r3, r3
 8105804:	2b40      	cmp	r3, #64	; 0x40
 8105806:	d10b      	bne.n	8105820 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	2200      	movs	r2, #0
 810580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	2200      	movs	r2, #0
 8105814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8105818:	6878      	ldr	r0, [r7, #4]
 810581a:	f7fb fc53 	bl	81010c4 <HAL_I2C_MemRxCpltCallback>
}
 810581e:	e00a      	b.n	8105836 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	2200      	movs	r2, #0
 8105824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	2200      	movs	r2, #0
 810582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8105830:	6878      	ldr	r0, [r7, #4]
 8105832:	f7ff f956 	bl	8104ae2 <HAL_I2C_MasterRxCpltCallback>
}
 8105836:	bf00      	nop
 8105838:	3718      	adds	r7, #24
 810583a:	46bd      	mov	sp, r7
 810583c:	bd80      	pop	{r7, pc}
 810583e:	bf00      	nop
 8105840:	fe00e800 	.word	0xfe00e800
 8105844:	ffff0000 	.word	0xffff0000

08105848 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8105848:	b580      	push	{r7, lr}
 810584a:	b086      	sub	sp, #24
 810584c:	af00      	add	r7, sp, #0
 810584e:	6078      	str	r0, [r7, #4]
 8105850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 810585a:	683b      	ldr	r3, [r7, #0]
 810585c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105864:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	681b      	ldr	r3, [r3, #0]
 810586a:	2220      	movs	r2, #32
 810586c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810586e:	7bfb      	ldrb	r3, [r7, #15]
 8105870:	2b21      	cmp	r3, #33	; 0x21
 8105872:	d002      	beq.n	810587a <I2C_ITSlaveCplt+0x32>
 8105874:	7bfb      	ldrb	r3, [r7, #15]
 8105876:	2b29      	cmp	r3, #41	; 0x29
 8105878:	d108      	bne.n	810588c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 810587a:	f248 0101 	movw	r1, #32769	; 0x8001
 810587e:	6878      	ldr	r0, [r7, #4]
 8105880:	f000 feb0 	bl	81065e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	2221      	movs	r2, #33	; 0x21
 8105888:	631a      	str	r2, [r3, #48]	; 0x30
 810588a:	e00d      	b.n	81058a8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 810588c:	7bfb      	ldrb	r3, [r7, #15]
 810588e:	2b22      	cmp	r3, #34	; 0x22
 8105890:	d002      	beq.n	8105898 <I2C_ITSlaveCplt+0x50>
 8105892:	7bfb      	ldrb	r3, [r7, #15]
 8105894:	2b2a      	cmp	r3, #42	; 0x2a
 8105896:	d107      	bne.n	81058a8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8105898:	f248 0102 	movw	r1, #32770	; 0x8002
 810589c:	6878      	ldr	r0, [r7, #4]
 810589e:	f000 fea1 	bl	81065e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	2222      	movs	r2, #34	; 0x22
 81058a6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	685a      	ldr	r2, [r3, #4]
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81058b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	6859      	ldr	r1, [r3, #4]
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	681a      	ldr	r2, [r3, #0]
 81058c2:	4b80      	ldr	r3, [pc, #512]	; (8105ac4 <I2C_ITSlaveCplt+0x27c>)
 81058c4:	400b      	ands	r3, r1
 81058c6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 81058c8:	6878      	ldr	r0, [r7, #4]
 81058ca:	f000 fb02 	bl	8105ed2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81058ce:	693b      	ldr	r3, [r7, #16]
 81058d0:	0b9b      	lsrs	r3, r3, #14
 81058d2:	f003 0301 	and.w	r3, r3, #1
 81058d6:	2b00      	cmp	r3, #0
 81058d8:	d07a      	beq.n	81059d0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	681a      	ldr	r2, [r3, #0]
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	681b      	ldr	r3, [r3, #0]
 81058e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81058e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058ee:	2b00      	cmp	r3, #0
 81058f0:	f000 8111 	beq.w	8105b16 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	4a73      	ldr	r2, [pc, #460]	; (8105ac8 <I2C_ITSlaveCplt+0x280>)
 81058fc:	4293      	cmp	r3, r2
 81058fe:	d059      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	4a71      	ldr	r2, [pc, #452]	; (8105acc <I2C_ITSlaveCplt+0x284>)
 8105908:	4293      	cmp	r3, r2
 810590a:	d053      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105910:	681b      	ldr	r3, [r3, #0]
 8105912:	4a6f      	ldr	r2, [pc, #444]	; (8105ad0 <I2C_ITSlaveCplt+0x288>)
 8105914:	4293      	cmp	r3, r2
 8105916:	d04d      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	4a6d      	ldr	r2, [pc, #436]	; (8105ad4 <I2C_ITSlaveCplt+0x28c>)
 8105920:	4293      	cmp	r3, r2
 8105922:	d047      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	4a6b      	ldr	r2, [pc, #428]	; (8105ad8 <I2C_ITSlaveCplt+0x290>)
 810592c:	4293      	cmp	r3, r2
 810592e:	d041      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	4a69      	ldr	r2, [pc, #420]	; (8105adc <I2C_ITSlaveCplt+0x294>)
 8105938:	4293      	cmp	r3, r2
 810593a:	d03b      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	4a67      	ldr	r2, [pc, #412]	; (8105ae0 <I2C_ITSlaveCplt+0x298>)
 8105944:	4293      	cmp	r3, r2
 8105946:	d035      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810594c:	681b      	ldr	r3, [r3, #0]
 810594e:	4a65      	ldr	r2, [pc, #404]	; (8105ae4 <I2C_ITSlaveCplt+0x29c>)
 8105950:	4293      	cmp	r3, r2
 8105952:	d02f      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	4a63      	ldr	r2, [pc, #396]	; (8105ae8 <I2C_ITSlaveCplt+0x2a0>)
 810595c:	4293      	cmp	r3, r2
 810595e:	d029      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105964:	681b      	ldr	r3, [r3, #0]
 8105966:	4a61      	ldr	r2, [pc, #388]	; (8105aec <I2C_ITSlaveCplt+0x2a4>)
 8105968:	4293      	cmp	r3, r2
 810596a:	d023      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	4a5f      	ldr	r2, [pc, #380]	; (8105af0 <I2C_ITSlaveCplt+0x2a8>)
 8105974:	4293      	cmp	r3, r2
 8105976:	d01d      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810597c:	681b      	ldr	r3, [r3, #0]
 810597e:	4a5d      	ldr	r2, [pc, #372]	; (8105af4 <I2C_ITSlaveCplt+0x2ac>)
 8105980:	4293      	cmp	r3, r2
 8105982:	d017      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	4a5b      	ldr	r2, [pc, #364]	; (8105af8 <I2C_ITSlaveCplt+0x2b0>)
 810598c:	4293      	cmp	r3, r2
 810598e:	d011      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	4a59      	ldr	r2, [pc, #356]	; (8105afc <I2C_ITSlaveCplt+0x2b4>)
 8105998:	4293      	cmp	r3, r2
 810599a:	d00b      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059a0:	681b      	ldr	r3, [r3, #0]
 81059a2:	4a57      	ldr	r2, [pc, #348]	; (8105b00 <I2C_ITSlaveCplt+0x2b8>)
 81059a4:	4293      	cmp	r3, r2
 81059a6:	d005      	beq.n	81059b4 <I2C_ITSlaveCplt+0x16c>
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	4a55      	ldr	r2, [pc, #340]	; (8105b04 <I2C_ITSlaveCplt+0x2bc>)
 81059b0:	4293      	cmp	r3, r2
 81059b2:	d105      	bne.n	81059c0 <I2C_ITSlaveCplt+0x178>
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059b8:	681b      	ldr	r3, [r3, #0]
 81059ba:	685b      	ldr	r3, [r3, #4]
 81059bc:	b29b      	uxth	r3, r3
 81059be:	e004      	b.n	81059ca <I2C_ITSlaveCplt+0x182>
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	685b      	ldr	r3, [r3, #4]
 81059c8:	b29b      	uxth	r3, r3
 81059ca:	687a      	ldr	r2, [r7, #4]
 81059cc:	8553      	strh	r3, [r2, #42]	; 0x2a
 81059ce:	e0a2      	b.n	8105b16 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81059d0:	693b      	ldr	r3, [r7, #16]
 81059d2:	0bdb      	lsrs	r3, r3, #15
 81059d4:	f003 0301 	and.w	r3, r3, #1
 81059d8:	2b00      	cmp	r3, #0
 81059da:	f000 809c 	beq.w	8105b16 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	681b      	ldr	r3, [r3, #0]
 81059e2:	681a      	ldr	r2, [r3, #0]
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81059ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	f000 808f 	beq.w	8105b16 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4a32      	ldr	r2, [pc, #200]	; (8105ac8 <I2C_ITSlaveCplt+0x280>)
 8105a00:	4293      	cmp	r3, r2
 8105a02:	d059      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a08:	681b      	ldr	r3, [r3, #0]
 8105a0a:	4a30      	ldr	r2, [pc, #192]	; (8105acc <I2C_ITSlaveCplt+0x284>)
 8105a0c:	4293      	cmp	r3, r2
 8105a0e:	d053      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	4a2e      	ldr	r2, [pc, #184]	; (8105ad0 <I2C_ITSlaveCplt+0x288>)
 8105a18:	4293      	cmp	r3, r2
 8105a1a:	d04d      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a20:	681b      	ldr	r3, [r3, #0]
 8105a22:	4a2c      	ldr	r2, [pc, #176]	; (8105ad4 <I2C_ITSlaveCplt+0x28c>)
 8105a24:	4293      	cmp	r3, r2
 8105a26:	d047      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a28:	687b      	ldr	r3, [r7, #4]
 8105a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	4a2a      	ldr	r2, [pc, #168]	; (8105ad8 <I2C_ITSlaveCplt+0x290>)
 8105a30:	4293      	cmp	r3, r2
 8105a32:	d041      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	4a28      	ldr	r2, [pc, #160]	; (8105adc <I2C_ITSlaveCplt+0x294>)
 8105a3c:	4293      	cmp	r3, r2
 8105a3e:	d03b      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	4a26      	ldr	r2, [pc, #152]	; (8105ae0 <I2C_ITSlaveCplt+0x298>)
 8105a48:	4293      	cmp	r3, r2
 8105a4a:	d035      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a50:	681b      	ldr	r3, [r3, #0]
 8105a52:	4a24      	ldr	r2, [pc, #144]	; (8105ae4 <I2C_ITSlaveCplt+0x29c>)
 8105a54:	4293      	cmp	r3, r2
 8105a56:	d02f      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	4a22      	ldr	r2, [pc, #136]	; (8105ae8 <I2C_ITSlaveCplt+0x2a0>)
 8105a60:	4293      	cmp	r3, r2
 8105a62:	d029      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	4a20      	ldr	r2, [pc, #128]	; (8105aec <I2C_ITSlaveCplt+0x2a4>)
 8105a6c:	4293      	cmp	r3, r2
 8105a6e:	d023      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	4a1e      	ldr	r2, [pc, #120]	; (8105af0 <I2C_ITSlaveCplt+0x2a8>)
 8105a78:	4293      	cmp	r3, r2
 8105a7a:	d01d      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	4a1c      	ldr	r2, [pc, #112]	; (8105af4 <I2C_ITSlaveCplt+0x2ac>)
 8105a84:	4293      	cmp	r3, r2
 8105a86:	d017      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	4a1a      	ldr	r2, [pc, #104]	; (8105af8 <I2C_ITSlaveCplt+0x2b0>)
 8105a90:	4293      	cmp	r3, r2
 8105a92:	d011      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	4a18      	ldr	r2, [pc, #96]	; (8105afc <I2C_ITSlaveCplt+0x2b4>)
 8105a9c:	4293      	cmp	r3, r2
 8105a9e:	d00b      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	4a16      	ldr	r2, [pc, #88]	; (8105b00 <I2C_ITSlaveCplt+0x2b8>)
 8105aa8:	4293      	cmp	r3, r2
 8105aaa:	d005      	beq.n	8105ab8 <I2C_ITSlaveCplt+0x270>
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	4a14      	ldr	r2, [pc, #80]	; (8105b04 <I2C_ITSlaveCplt+0x2bc>)
 8105ab4:	4293      	cmp	r3, r2
 8105ab6:	d127      	bne.n	8105b08 <I2C_ITSlaveCplt+0x2c0>
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	685b      	ldr	r3, [r3, #4]
 8105ac0:	b29b      	uxth	r3, r3
 8105ac2:	e026      	b.n	8105b12 <I2C_ITSlaveCplt+0x2ca>
 8105ac4:	fe00e800 	.word	0xfe00e800
 8105ac8:	40020010 	.word	0x40020010
 8105acc:	40020028 	.word	0x40020028
 8105ad0:	40020040 	.word	0x40020040
 8105ad4:	40020058 	.word	0x40020058
 8105ad8:	40020070 	.word	0x40020070
 8105adc:	40020088 	.word	0x40020088
 8105ae0:	400200a0 	.word	0x400200a0
 8105ae4:	400200b8 	.word	0x400200b8
 8105ae8:	40020410 	.word	0x40020410
 8105aec:	40020428 	.word	0x40020428
 8105af0:	40020440 	.word	0x40020440
 8105af4:	40020458 	.word	0x40020458
 8105af8:	40020470 	.word	0x40020470
 8105afc:	40020488 	.word	0x40020488
 8105b00:	400204a0 	.word	0x400204a0
 8105b04:	400204b8 	.word	0x400204b8
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	685b      	ldr	r3, [r3, #4]
 8105b10:	b29b      	uxth	r3, r3
 8105b12:	687a      	ldr	r2, [r7, #4]
 8105b14:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8105b16:	697b      	ldr	r3, [r7, #20]
 8105b18:	089b      	lsrs	r3, r3, #2
 8105b1a:	f003 0301 	and.w	r3, r3, #1
 8105b1e:	2b00      	cmp	r3, #0
 8105b20:	d020      	beq.n	8105b64 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8105b22:	697b      	ldr	r3, [r7, #20]
 8105b24:	f023 0304 	bic.w	r3, r3, #4
 8105b28:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105b34:	b2d2      	uxtb	r2, r2
 8105b36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105b3c:	1c5a      	adds	r2, r3, #1
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b46:	2b00      	cmp	r3, #0
 8105b48:	d00c      	beq.n	8105b64 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105b4e:	3b01      	subs	r3, #1
 8105b50:	b29a      	uxth	r2, r3
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b5a:	b29b      	uxth	r3, r3
 8105b5c:	3b01      	subs	r3, #1
 8105b5e:	b29a      	uxth	r2, r3
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105b68:	b29b      	uxth	r3, r3
 8105b6a:	2b00      	cmp	r3, #0
 8105b6c:	d005      	beq.n	8105b7a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b72:	f043 0204 	orr.w	r2, r3, #4
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	2200      	movs	r2, #0
 8105b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	2200      	movs	r2, #0
 8105b86:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b8c:	2b00      	cmp	r3, #0
 8105b8e:	d010      	beq.n	8105bb2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b94:	4619      	mov	r1, r3
 8105b96:	6878      	ldr	r0, [r7, #4]
 8105b98:	f000 f8a4 	bl	8105ce4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105ba2:	b2db      	uxtb	r3, r3
 8105ba4:	2b28      	cmp	r3, #40	; 0x28
 8105ba6:	d141      	bne.n	8105c2c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8105ba8:	6979      	ldr	r1, [r7, #20]
 8105baa:	6878      	ldr	r0, [r7, #4]
 8105bac:	f000 f844 	bl	8105c38 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8105bb0:	e03c      	b.n	8105c2c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8105bba:	d014      	beq.n	8105be6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8105bbc:	6878      	ldr	r0, [r7, #4]
 8105bbe:	f7ff fd1a 	bl	81055f6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	4a1b      	ldr	r2, [pc, #108]	; (8105c34 <I2C_ITSlaveCplt+0x3ec>)
 8105bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	2220      	movs	r2, #32
 8105bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	2200      	movs	r2, #0
 8105bd4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105bd6:	687b      	ldr	r3, [r7, #4]
 8105bd8:	2200      	movs	r2, #0
 8105bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8105bde:	6878      	ldr	r0, [r7, #4]
 8105be0:	f7fe ffab 	bl	8104b3a <HAL_I2C_ListenCpltCallback>
}
 8105be4:	e022      	b.n	8105c2c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105bec:	b2db      	uxtb	r3, r3
 8105bee:	2b22      	cmp	r3, #34	; 0x22
 8105bf0:	d10e      	bne.n	8105c10 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	2220      	movs	r2, #32
 8105bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	2200      	movs	r2, #0
 8105bfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105c00:	687b      	ldr	r3, [r7, #4]
 8105c02:	2200      	movs	r2, #0
 8105c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8105c08:	6878      	ldr	r0, [r7, #4]
 8105c0a:	f7fe ff7e 	bl	8104b0a <HAL_I2C_SlaveRxCpltCallback>
}
 8105c0e:	e00d      	b.n	8105c2c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	2220      	movs	r2, #32
 8105c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	2200      	movs	r2, #0
 8105c1c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	2200      	movs	r2, #0
 8105c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8105c26:	6878      	ldr	r0, [r7, #4]
 8105c28:	f7fe ff65 	bl	8104af6 <HAL_I2C_SlaveTxCpltCallback>
}
 8105c2c:	bf00      	nop
 8105c2e:	3718      	adds	r7, #24
 8105c30:	46bd      	mov	sp, r7
 8105c32:	bd80      	pop	{r7, pc}
 8105c34:	ffff0000 	.word	0xffff0000

08105c38 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8105c38:	b580      	push	{r7, lr}
 8105c3a:	b082      	sub	sp, #8
 8105c3c:	af00      	add	r7, sp, #0
 8105c3e:	6078      	str	r0, [r7, #4]
 8105c40:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	4a26      	ldr	r2, [pc, #152]	; (8105ce0 <I2C_ITListenCplt+0xa8>)
 8105c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	2200      	movs	r2, #0
 8105c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	2220      	movs	r2, #32
 8105c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c56:	687b      	ldr	r3, [r7, #4]
 8105c58:	2200      	movs	r2, #0
 8105c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	2200      	movs	r2, #0
 8105c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8105c64:	683b      	ldr	r3, [r7, #0]
 8105c66:	089b      	lsrs	r3, r3, #2
 8105c68:	f003 0301 	and.w	r3, r3, #1
 8105c6c:	2b00      	cmp	r3, #0
 8105c6e:	d022      	beq.n	8105cb6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c7a:	b2d2      	uxtb	r2, r2
 8105c7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c82:	1c5a      	adds	r2, r3, #1
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d012      	beq.n	8105cb6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105c94:	3b01      	subs	r3, #1
 8105c96:	b29a      	uxth	r2, r3
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ca0:	b29b      	uxth	r3, r3
 8105ca2:	3b01      	subs	r3, #1
 8105ca4:	b29a      	uxth	r2, r3
 8105ca6:	687b      	ldr	r3, [r7, #4]
 8105ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105cae:	f043 0204 	orr.w	r2, r3, #4
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8105cb6:	f248 0103 	movw	r1, #32771	; 0x8003
 8105cba:	6878      	ldr	r0, [r7, #4]
 8105cbc:	f000 fc92 	bl	81065e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105cc0:	687b      	ldr	r3, [r7, #4]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	2210      	movs	r2, #16
 8105cc6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	2200      	movs	r2, #0
 8105ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8105cd0:	6878      	ldr	r0, [r7, #4]
 8105cd2:	f7fe ff32 	bl	8104b3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8105cd6:	bf00      	nop
 8105cd8:	3708      	adds	r7, #8
 8105cda:	46bd      	mov	sp, r7
 8105cdc:	bd80      	pop	{r7, pc}
 8105cde:	bf00      	nop
 8105ce0:	ffff0000 	.word	0xffff0000

08105ce4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8105ce4:	b580      	push	{r7, lr}
 8105ce6:	b084      	sub	sp, #16
 8105ce8:	af00      	add	r7, sp, #0
 8105cea:	6078      	str	r0, [r7, #4]
 8105cec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	2200      	movs	r2, #0
 8105cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	4a5d      	ldr	r2, [pc, #372]	; (8105e78 <I2C_ITError+0x194>)
 8105d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	2200      	movs	r2, #0
 8105d08:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105d0e:	683b      	ldr	r3, [r7, #0]
 8105d10:	431a      	orrs	r2, r3
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8105d16:	7bfb      	ldrb	r3, [r7, #15]
 8105d18:	2b28      	cmp	r3, #40	; 0x28
 8105d1a:	d005      	beq.n	8105d28 <I2C_ITError+0x44>
 8105d1c:	7bfb      	ldrb	r3, [r7, #15]
 8105d1e:	2b29      	cmp	r3, #41	; 0x29
 8105d20:	d002      	beq.n	8105d28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8105d22:	7bfb      	ldrb	r3, [r7, #15]
 8105d24:	2b2a      	cmp	r3, #42	; 0x2a
 8105d26:	d10b      	bne.n	8105d40 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8105d28:	2103      	movs	r1, #3
 8105d2a:	6878      	ldr	r0, [r7, #4]
 8105d2c:	f000 fc5a 	bl	81065e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	2228      	movs	r2, #40	; 0x28
 8105d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	4a50      	ldr	r2, [pc, #320]	; (8105e7c <I2C_ITError+0x198>)
 8105d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8105d3e:	e011      	b.n	8105d64 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8105d40:	f248 0103 	movw	r1, #32771	; 0x8003
 8105d44:	6878      	ldr	r0, [r7, #4]
 8105d46:	f000 fc4d 	bl	81065e4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105d50:	b2db      	uxtb	r3, r3
 8105d52:	2b60      	cmp	r3, #96	; 0x60
 8105d54:	d003      	beq.n	8105d5e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	2220      	movs	r2, #32
 8105d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	2200      	movs	r2, #0
 8105d62:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d68:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8105d6a:	687b      	ldr	r3, [r7, #4]
 8105d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105d6e:	2b00      	cmp	r3, #0
 8105d70:	d039      	beq.n	8105de6 <I2C_ITError+0x102>
 8105d72:	68bb      	ldr	r3, [r7, #8]
 8105d74:	2b11      	cmp	r3, #17
 8105d76:	d002      	beq.n	8105d7e <I2C_ITError+0x9a>
 8105d78:	68bb      	ldr	r3, [r7, #8]
 8105d7a:	2b21      	cmp	r3, #33	; 0x21
 8105d7c:	d133      	bne.n	8105de6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105d8c:	d107      	bne.n	8105d9e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	681a      	ldr	r2, [r3, #0]
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	681b      	ldr	r3, [r3, #0]
 8105d98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105d9c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105da2:	4618      	mov	r0, r3
 8105da4:	f7fd fdbc 	bl	8103920 <HAL_DMA_GetState>
 8105da8:	4603      	mov	r3, r0
 8105daa:	2b01      	cmp	r3, #1
 8105dac:	d017      	beq.n	8105dde <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105db2:	4a33      	ldr	r2, [pc, #204]	; (8105e80 <I2C_ITError+0x19c>)
 8105db4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105db6:	687b      	ldr	r3, [r7, #4]
 8105db8:	2200      	movs	r2, #0
 8105dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dc2:	4618      	mov	r0, r3
 8105dc4:	f7fc fc3e 	bl	8102644 <HAL_DMA_Abort_IT>
 8105dc8:	4603      	mov	r3, r0
 8105dca:	2b00      	cmp	r3, #0
 8105dcc:	d04d      	beq.n	8105e6a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105dd4:	687a      	ldr	r2, [r7, #4]
 8105dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8105dd8:	4610      	mov	r0, r2
 8105dda:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105ddc:	e045      	b.n	8105e6a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8105dde:	6878      	ldr	r0, [r7, #4]
 8105de0:	f000 f850 	bl	8105e84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105de4:	e041      	b.n	8105e6a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105dea:	2b00      	cmp	r3, #0
 8105dec:	d039      	beq.n	8105e62 <I2C_ITError+0x17e>
 8105dee:	68bb      	ldr	r3, [r7, #8]
 8105df0:	2b12      	cmp	r3, #18
 8105df2:	d002      	beq.n	8105dfa <I2C_ITError+0x116>
 8105df4:	68bb      	ldr	r3, [r7, #8]
 8105df6:	2b22      	cmp	r3, #34	; 0x22
 8105df8:	d133      	bne.n	8105e62 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105e08:	d107      	bne.n	8105e1a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	681a      	ldr	r2, [r3, #0]
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105e18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e1e:	4618      	mov	r0, r3
 8105e20:	f7fd fd7e 	bl	8103920 <HAL_DMA_GetState>
 8105e24:	4603      	mov	r3, r0
 8105e26:	2b01      	cmp	r3, #1
 8105e28:	d017      	beq.n	8105e5a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e2e:	4a14      	ldr	r2, [pc, #80]	; (8105e80 <I2C_ITError+0x19c>)
 8105e30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	2200      	movs	r2, #0
 8105e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e3e:	4618      	mov	r0, r3
 8105e40:	f7fc fc00 	bl	8102644 <HAL_DMA_Abort_IT>
 8105e44:	4603      	mov	r3, r0
 8105e46:	2b00      	cmp	r3, #0
 8105e48:	d011      	beq.n	8105e6e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e50:	687a      	ldr	r2, [r7, #4]
 8105e52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8105e54:	4610      	mov	r0, r2
 8105e56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e58:	e009      	b.n	8105e6e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8105e5a:	6878      	ldr	r0, [r7, #4]
 8105e5c:	f000 f812 	bl	8105e84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e60:	e005      	b.n	8105e6e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8105e62:	6878      	ldr	r0, [r7, #4]
 8105e64:	f000 f80e 	bl	8105e84 <I2C_TreatErrorCallback>
  }
}
 8105e68:	e002      	b.n	8105e70 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105e6a:	bf00      	nop
 8105e6c:	e000      	b.n	8105e70 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105e6e:	bf00      	nop
}
 8105e70:	bf00      	nop
 8105e72:	3710      	adds	r7, #16
 8105e74:	46bd      	mov	sp, r7
 8105e76:	bd80      	pop	{r7, pc}
 8105e78:	ffff0000 	.word	0xffff0000
 8105e7c:	08104b77 	.word	0x08104b77
 8105e80:	081062b9 	.word	0x081062b9

08105e84 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8105e84:	b580      	push	{r7, lr}
 8105e86:	b082      	sub	sp, #8
 8105e88:	af00      	add	r7, sp, #0
 8105e8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8105e8c:	687b      	ldr	r3, [r7, #4]
 8105e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105e92:	b2db      	uxtb	r3, r3
 8105e94:	2b60      	cmp	r3, #96	; 0x60
 8105e96:	d10e      	bne.n	8105eb6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	2220      	movs	r2, #32
 8105e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	2200      	movs	r2, #0
 8105ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	2200      	movs	r2, #0
 8105eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8105eae:	6878      	ldr	r0, [r7, #4]
 8105eb0:	f7fe fe57 	bl	8104b62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8105eb4:	e009      	b.n	8105eca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	2200      	movs	r2, #0
 8105eba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	2200      	movs	r2, #0
 8105ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8105ec4:	6878      	ldr	r0, [r7, #4]
 8105ec6:	f7fe fe42 	bl	8104b4e <HAL_I2C_ErrorCallback>
}
 8105eca:	bf00      	nop
 8105ecc:	3708      	adds	r7, #8
 8105ece:	46bd      	mov	sp, r7
 8105ed0:	bd80      	pop	{r7, pc}

08105ed2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105ed2:	b480      	push	{r7}
 8105ed4:	b083      	sub	sp, #12
 8105ed6:	af00      	add	r7, sp, #0
 8105ed8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	699b      	ldr	r3, [r3, #24]
 8105ee0:	f003 0302 	and.w	r3, r3, #2
 8105ee4:	2b02      	cmp	r3, #2
 8105ee6:	d103      	bne.n	8105ef0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	2200      	movs	r2, #0
 8105eee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	699b      	ldr	r3, [r3, #24]
 8105ef6:	f003 0301 	and.w	r3, r3, #1
 8105efa:	2b01      	cmp	r3, #1
 8105efc:	d007      	beq.n	8105f0e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	699a      	ldr	r2, [r3, #24]
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	681b      	ldr	r3, [r3, #0]
 8105f08:	f042 0201 	orr.w	r2, r2, #1
 8105f0c:	619a      	str	r2, [r3, #24]
  }
}
 8105f0e:	bf00      	nop
 8105f10:	370c      	adds	r7, #12
 8105f12:	46bd      	mov	sp, r7
 8105f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f18:	4770      	bx	lr

08105f1a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8105f1a:	b580      	push	{r7, lr}
 8105f1c:	b084      	sub	sp, #16
 8105f1e:	af00      	add	r7, sp, #0
 8105f20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105f26:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8105f28:	68fb      	ldr	r3, [r7, #12]
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	681a      	ldr	r2, [r3, #0]
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105f36:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8105f38:	68fb      	ldr	r3, [r7, #12]
 8105f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105f3c:	b29b      	uxth	r3, r3
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	d104      	bne.n	8105f4c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8105f42:	2120      	movs	r1, #32
 8105f44:	68f8      	ldr	r0, [r7, #12]
 8105f46:	f000 fae9 	bl	810651c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8105f4a:	e02d      	b.n	8105fa8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f50:	68fa      	ldr	r2, [r7, #12]
 8105f52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8105f54:	441a      	add	r2, r3
 8105f56:	68fb      	ldr	r3, [r7, #12]
 8105f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105f5a:	68fb      	ldr	r3, [r7, #12]
 8105f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105f5e:	b29b      	uxth	r3, r3
 8105f60:	2bff      	cmp	r3, #255	; 0xff
 8105f62:	d903      	bls.n	8105f6c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105f64:	68fb      	ldr	r3, [r7, #12]
 8105f66:	22ff      	movs	r2, #255	; 0xff
 8105f68:	851a      	strh	r2, [r3, #40]	; 0x28
 8105f6a:	e004      	b.n	8105f76 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8105f6c:	68fb      	ldr	r3, [r7, #12]
 8105f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105f70:	b29a      	uxth	r2, r3
 8105f72:	68fb      	ldr	r3, [r7, #12]
 8105f74:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8105f76:	68fb      	ldr	r3, [r7, #12]
 8105f78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f7e:	4619      	mov	r1, r3
 8105f80:	68fb      	ldr	r3, [r7, #12]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	3328      	adds	r3, #40	; 0x28
 8105f86:	461a      	mov	r2, r3
 8105f88:	68fb      	ldr	r3, [r7, #12]
 8105f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105f8c:	f7fc f8f0 	bl	8102170 <HAL_DMA_Start_IT>
 8105f90:	4603      	mov	r3, r0
 8105f92:	2b00      	cmp	r3, #0
 8105f94:	d004      	beq.n	8105fa0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105f96:	2110      	movs	r1, #16
 8105f98:	68f8      	ldr	r0, [r7, #12]
 8105f9a:	f7ff fea3 	bl	8105ce4 <I2C_ITError>
}
 8105f9e:	e003      	b.n	8105fa8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8105fa0:	2140      	movs	r1, #64	; 0x40
 8105fa2:	68f8      	ldr	r0, [r7, #12]
 8105fa4:	f000 faba 	bl	810651c <I2C_Enable_IRQ>
}
 8105fa8:	bf00      	nop
 8105faa:	3710      	adds	r7, #16
 8105fac:	46bd      	mov	sp, r7
 8105fae:	bd80      	pop	{r7, pc}

08105fb0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8105fb0:	b580      	push	{r7, lr}
 8105fb2:	b084      	sub	sp, #16
 8105fb4:	af00      	add	r7, sp, #0
 8105fb6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105fbc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105fbe:	68fb      	ldr	r3, [r7, #12]
 8105fc0:	681b      	ldr	r3, [r3, #0]
 8105fc2:	681a      	ldr	r2, [r3, #0]
 8105fc4:	68fb      	ldr	r3, [r7, #12]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105fcc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8105fce:	68fb      	ldr	r3, [r7, #12]
 8105fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105fd2:	b29b      	uxth	r3, r3
 8105fd4:	2b00      	cmp	r3, #0
 8105fd6:	d104      	bne.n	8105fe2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8105fd8:	2120      	movs	r1, #32
 8105fda:	68f8      	ldr	r0, [r7, #12]
 8105fdc:	f000 fa9e 	bl	810651c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8105fe0:	e02d      	b.n	810603e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8105fe2:	68fb      	ldr	r3, [r7, #12]
 8105fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105fe6:	68fa      	ldr	r2, [r7, #12]
 8105fe8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8105fea:	441a      	add	r2, r3
 8105fec:	68fb      	ldr	r3, [r7, #12]
 8105fee:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105ff0:	68fb      	ldr	r3, [r7, #12]
 8105ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105ff4:	b29b      	uxth	r3, r3
 8105ff6:	2bff      	cmp	r3, #255	; 0xff
 8105ff8:	d903      	bls.n	8106002 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105ffa:	68fb      	ldr	r3, [r7, #12]
 8105ffc:	22ff      	movs	r2, #255	; 0xff
 8105ffe:	851a      	strh	r2, [r3, #40]	; 0x28
 8106000:	e004      	b.n	810600c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8106002:	68fb      	ldr	r3, [r7, #12]
 8106004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106006:	b29a      	uxth	r2, r3
 8106008:	68fb      	ldr	r3, [r7, #12]
 810600a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 810600c:	68fb      	ldr	r3, [r7, #12]
 810600e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8106010:	68fb      	ldr	r3, [r7, #12]
 8106012:	681b      	ldr	r3, [r3, #0]
 8106014:	3324      	adds	r3, #36	; 0x24
 8106016:	4619      	mov	r1, r3
 8106018:	68fb      	ldr	r3, [r7, #12]
 810601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810601c:	461a      	mov	r2, r3
 810601e:	68fb      	ldr	r3, [r7, #12]
 8106020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106022:	f7fc f8a5 	bl	8102170 <HAL_DMA_Start_IT>
 8106026:	4603      	mov	r3, r0
 8106028:	2b00      	cmp	r3, #0
 810602a:	d004      	beq.n	8106036 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 810602c:	2110      	movs	r1, #16
 810602e:	68f8      	ldr	r0, [r7, #12]
 8106030:	f7ff fe58 	bl	8105ce4 <I2C_ITError>
}
 8106034:	e003      	b.n	810603e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8106036:	2140      	movs	r1, #64	; 0x40
 8106038:	68f8      	ldr	r0, [r7, #12]
 810603a:	f000 fa6f 	bl	810651c <I2C_Enable_IRQ>
}
 810603e:	bf00      	nop
 8106040:	3710      	adds	r7, #16
 8106042:	46bd      	mov	sp, r7
 8106044:	bd80      	pop	{r7, pc}
	...

08106048 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8106048:	b580      	push	{r7, lr}
 810604a:	b084      	sub	sp, #16
 810604c:	af00      	add	r7, sp, #0
 810604e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8106050:	2300      	movs	r3, #0
 8106052:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106058:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 810605a:	68bb      	ldr	r3, [r7, #8]
 810605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810605e:	2b00      	cmp	r3, #0
 8106060:	d076      	beq.n	8106150 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8106062:	68bb      	ldr	r3, [r7, #8]
 8106064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106066:	681b      	ldr	r3, [r3, #0]
 8106068:	4a83      	ldr	r2, [pc, #524]	; (8106278 <I2C_DMAError+0x230>)
 810606a:	4293      	cmp	r3, r2
 810606c:	d059      	beq.n	8106122 <I2C_DMAError+0xda>
 810606e:	68bb      	ldr	r3, [r7, #8]
 8106070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106072:	681b      	ldr	r3, [r3, #0]
 8106074:	4a81      	ldr	r2, [pc, #516]	; (810627c <I2C_DMAError+0x234>)
 8106076:	4293      	cmp	r3, r2
 8106078:	d053      	beq.n	8106122 <I2C_DMAError+0xda>
 810607a:	68bb      	ldr	r3, [r7, #8]
 810607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	4a7f      	ldr	r2, [pc, #508]	; (8106280 <I2C_DMAError+0x238>)
 8106082:	4293      	cmp	r3, r2
 8106084:	d04d      	beq.n	8106122 <I2C_DMAError+0xda>
 8106086:	68bb      	ldr	r3, [r7, #8]
 8106088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	4a7d      	ldr	r2, [pc, #500]	; (8106284 <I2C_DMAError+0x23c>)
 810608e:	4293      	cmp	r3, r2
 8106090:	d047      	beq.n	8106122 <I2C_DMAError+0xda>
 8106092:	68bb      	ldr	r3, [r7, #8]
 8106094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	4a7b      	ldr	r2, [pc, #492]	; (8106288 <I2C_DMAError+0x240>)
 810609a:	4293      	cmp	r3, r2
 810609c:	d041      	beq.n	8106122 <I2C_DMAError+0xda>
 810609e:	68bb      	ldr	r3, [r7, #8]
 81060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	4a79      	ldr	r2, [pc, #484]	; (810628c <I2C_DMAError+0x244>)
 81060a6:	4293      	cmp	r3, r2
 81060a8:	d03b      	beq.n	8106122 <I2C_DMAError+0xda>
 81060aa:	68bb      	ldr	r3, [r7, #8]
 81060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060ae:	681b      	ldr	r3, [r3, #0]
 81060b0:	4a77      	ldr	r2, [pc, #476]	; (8106290 <I2C_DMAError+0x248>)
 81060b2:	4293      	cmp	r3, r2
 81060b4:	d035      	beq.n	8106122 <I2C_DMAError+0xda>
 81060b6:	68bb      	ldr	r3, [r7, #8]
 81060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060ba:	681b      	ldr	r3, [r3, #0]
 81060bc:	4a75      	ldr	r2, [pc, #468]	; (8106294 <I2C_DMAError+0x24c>)
 81060be:	4293      	cmp	r3, r2
 81060c0:	d02f      	beq.n	8106122 <I2C_DMAError+0xda>
 81060c2:	68bb      	ldr	r3, [r7, #8]
 81060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	4a73      	ldr	r2, [pc, #460]	; (8106298 <I2C_DMAError+0x250>)
 81060ca:	4293      	cmp	r3, r2
 81060cc:	d029      	beq.n	8106122 <I2C_DMAError+0xda>
 81060ce:	68bb      	ldr	r3, [r7, #8]
 81060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060d2:	681b      	ldr	r3, [r3, #0]
 81060d4:	4a71      	ldr	r2, [pc, #452]	; (810629c <I2C_DMAError+0x254>)
 81060d6:	4293      	cmp	r3, r2
 81060d8:	d023      	beq.n	8106122 <I2C_DMAError+0xda>
 81060da:	68bb      	ldr	r3, [r7, #8]
 81060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060de:	681b      	ldr	r3, [r3, #0]
 81060e0:	4a6f      	ldr	r2, [pc, #444]	; (81062a0 <I2C_DMAError+0x258>)
 81060e2:	4293      	cmp	r3, r2
 81060e4:	d01d      	beq.n	8106122 <I2C_DMAError+0xda>
 81060e6:	68bb      	ldr	r3, [r7, #8]
 81060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060ea:	681b      	ldr	r3, [r3, #0]
 81060ec:	4a6d      	ldr	r2, [pc, #436]	; (81062a4 <I2C_DMAError+0x25c>)
 81060ee:	4293      	cmp	r3, r2
 81060f0:	d017      	beq.n	8106122 <I2C_DMAError+0xda>
 81060f2:	68bb      	ldr	r3, [r7, #8]
 81060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81060f6:	681b      	ldr	r3, [r3, #0]
 81060f8:	4a6b      	ldr	r2, [pc, #428]	; (81062a8 <I2C_DMAError+0x260>)
 81060fa:	4293      	cmp	r3, r2
 81060fc:	d011      	beq.n	8106122 <I2C_DMAError+0xda>
 81060fe:	68bb      	ldr	r3, [r7, #8]
 8106100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	4a69      	ldr	r2, [pc, #420]	; (81062ac <I2C_DMAError+0x264>)
 8106106:	4293      	cmp	r3, r2
 8106108:	d00b      	beq.n	8106122 <I2C_DMAError+0xda>
 810610a:	68bb      	ldr	r3, [r7, #8]
 810610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810610e:	681b      	ldr	r3, [r3, #0]
 8106110:	4a67      	ldr	r2, [pc, #412]	; (81062b0 <I2C_DMAError+0x268>)
 8106112:	4293      	cmp	r3, r2
 8106114:	d005      	beq.n	8106122 <I2C_DMAError+0xda>
 8106116:	68bb      	ldr	r3, [r7, #8]
 8106118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	4a65      	ldr	r2, [pc, #404]	; (81062b4 <I2C_DMAError+0x26c>)
 810611e:	4293      	cmp	r3, r2
 8106120:	d109      	bne.n	8106136 <I2C_DMAError+0xee>
 8106122:	68bb      	ldr	r3, [r7, #8]
 8106124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	685b      	ldr	r3, [r3, #4]
 810612a:	2b00      	cmp	r3, #0
 810612c:	bf0c      	ite	eq
 810612e:	2301      	moveq	r3, #1
 8106130:	2300      	movne	r3, #0
 8106132:	b2db      	uxtb	r3, r3
 8106134:	e008      	b.n	8106148 <I2C_DMAError+0x100>
 8106136:	68bb      	ldr	r3, [r7, #8]
 8106138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	685b      	ldr	r3, [r3, #4]
 810613e:	2b00      	cmp	r3, #0
 8106140:	bf0c      	ite	eq
 8106142:	2301      	moveq	r3, #1
 8106144:	2300      	movne	r3, #0
 8106146:	b2db      	uxtb	r3, r3
 8106148:	2b00      	cmp	r3, #0
 810614a:	d001      	beq.n	8106150 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 810614c:	2301      	movs	r3, #1
 810614e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8106150:	68bb      	ldr	r3, [r7, #8]
 8106152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106154:	2b00      	cmp	r3, #0
 8106156:	d076      	beq.n	8106246 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8106158:	68bb      	ldr	r3, [r7, #8]
 810615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	4a46      	ldr	r2, [pc, #280]	; (8106278 <I2C_DMAError+0x230>)
 8106160:	4293      	cmp	r3, r2
 8106162:	d059      	beq.n	8106218 <I2C_DMAError+0x1d0>
 8106164:	68bb      	ldr	r3, [r7, #8]
 8106166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	4a44      	ldr	r2, [pc, #272]	; (810627c <I2C_DMAError+0x234>)
 810616c:	4293      	cmp	r3, r2
 810616e:	d053      	beq.n	8106218 <I2C_DMAError+0x1d0>
 8106170:	68bb      	ldr	r3, [r7, #8]
 8106172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106174:	681b      	ldr	r3, [r3, #0]
 8106176:	4a42      	ldr	r2, [pc, #264]	; (8106280 <I2C_DMAError+0x238>)
 8106178:	4293      	cmp	r3, r2
 810617a:	d04d      	beq.n	8106218 <I2C_DMAError+0x1d0>
 810617c:	68bb      	ldr	r3, [r7, #8]
 810617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	4a40      	ldr	r2, [pc, #256]	; (8106284 <I2C_DMAError+0x23c>)
 8106184:	4293      	cmp	r3, r2
 8106186:	d047      	beq.n	8106218 <I2C_DMAError+0x1d0>
 8106188:	68bb      	ldr	r3, [r7, #8]
 810618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	4a3e      	ldr	r2, [pc, #248]	; (8106288 <I2C_DMAError+0x240>)
 8106190:	4293      	cmp	r3, r2
 8106192:	d041      	beq.n	8106218 <I2C_DMAError+0x1d0>
 8106194:	68bb      	ldr	r3, [r7, #8]
 8106196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106198:	681b      	ldr	r3, [r3, #0]
 810619a:	4a3c      	ldr	r2, [pc, #240]	; (810628c <I2C_DMAError+0x244>)
 810619c:	4293      	cmp	r3, r2
 810619e:	d03b      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061a0:	68bb      	ldr	r3, [r7, #8]
 81061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	4a3a      	ldr	r2, [pc, #232]	; (8106290 <I2C_DMAError+0x248>)
 81061a8:	4293      	cmp	r3, r2
 81061aa:	d035      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061ac:	68bb      	ldr	r3, [r7, #8]
 81061ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	4a38      	ldr	r2, [pc, #224]	; (8106294 <I2C_DMAError+0x24c>)
 81061b4:	4293      	cmp	r3, r2
 81061b6:	d02f      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061b8:	68bb      	ldr	r3, [r7, #8]
 81061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	4a36      	ldr	r2, [pc, #216]	; (8106298 <I2C_DMAError+0x250>)
 81061c0:	4293      	cmp	r3, r2
 81061c2:	d029      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061c4:	68bb      	ldr	r3, [r7, #8]
 81061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	4a34      	ldr	r2, [pc, #208]	; (810629c <I2C_DMAError+0x254>)
 81061cc:	4293      	cmp	r3, r2
 81061ce:	d023      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061d0:	68bb      	ldr	r3, [r7, #8]
 81061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061d4:	681b      	ldr	r3, [r3, #0]
 81061d6:	4a32      	ldr	r2, [pc, #200]	; (81062a0 <I2C_DMAError+0x258>)
 81061d8:	4293      	cmp	r3, r2
 81061da:	d01d      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061dc:	68bb      	ldr	r3, [r7, #8]
 81061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	4a30      	ldr	r2, [pc, #192]	; (81062a4 <I2C_DMAError+0x25c>)
 81061e4:	4293      	cmp	r3, r2
 81061e6:	d017      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061e8:	68bb      	ldr	r3, [r7, #8]
 81061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061ec:	681b      	ldr	r3, [r3, #0]
 81061ee:	4a2e      	ldr	r2, [pc, #184]	; (81062a8 <I2C_DMAError+0x260>)
 81061f0:	4293      	cmp	r3, r2
 81061f2:	d011      	beq.n	8106218 <I2C_DMAError+0x1d0>
 81061f4:	68bb      	ldr	r3, [r7, #8]
 81061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	4a2c      	ldr	r2, [pc, #176]	; (81062ac <I2C_DMAError+0x264>)
 81061fc:	4293      	cmp	r3, r2
 81061fe:	d00b      	beq.n	8106218 <I2C_DMAError+0x1d0>
 8106200:	68bb      	ldr	r3, [r7, #8]
 8106202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106204:	681b      	ldr	r3, [r3, #0]
 8106206:	4a2a      	ldr	r2, [pc, #168]	; (81062b0 <I2C_DMAError+0x268>)
 8106208:	4293      	cmp	r3, r2
 810620a:	d005      	beq.n	8106218 <I2C_DMAError+0x1d0>
 810620c:	68bb      	ldr	r3, [r7, #8]
 810620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	4a28      	ldr	r2, [pc, #160]	; (81062b4 <I2C_DMAError+0x26c>)
 8106214:	4293      	cmp	r3, r2
 8106216:	d109      	bne.n	810622c <I2C_DMAError+0x1e4>
 8106218:	68bb      	ldr	r3, [r7, #8]
 810621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	685b      	ldr	r3, [r3, #4]
 8106220:	2b00      	cmp	r3, #0
 8106222:	bf0c      	ite	eq
 8106224:	2301      	moveq	r3, #1
 8106226:	2300      	movne	r3, #0
 8106228:	b2db      	uxtb	r3, r3
 810622a:	e008      	b.n	810623e <I2C_DMAError+0x1f6>
 810622c:	68bb      	ldr	r3, [r7, #8]
 810622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	685b      	ldr	r3, [r3, #4]
 8106234:	2b00      	cmp	r3, #0
 8106236:	bf0c      	ite	eq
 8106238:	2301      	moveq	r3, #1
 810623a:	2300      	movne	r3, #0
 810623c:	b2db      	uxtb	r3, r3
 810623e:	2b00      	cmp	r3, #0
 8106240:	d001      	beq.n	8106246 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8106242:	2301      	movs	r3, #1
 8106244:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8106246:	6878      	ldr	r0, [r7, #4]
 8106248:	f7fd fb78 	bl	810393c <HAL_DMA_GetError>
 810624c:	4603      	mov	r3, r0
 810624e:	2b02      	cmp	r3, #2
 8106250:	d00e      	beq.n	8106270 <I2C_DMAError+0x228>
 8106252:	68fb      	ldr	r3, [r7, #12]
 8106254:	2b00      	cmp	r3, #0
 8106256:	d00b      	beq.n	8106270 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8106258:	68bb      	ldr	r3, [r7, #8]
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	685a      	ldr	r2, [r3, #4]
 810625e:	68bb      	ldr	r3, [r7, #8]
 8106260:	681b      	ldr	r3, [r3, #0]
 8106262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106266:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8106268:	2110      	movs	r1, #16
 810626a:	68b8      	ldr	r0, [r7, #8]
 810626c:	f7ff fd3a 	bl	8105ce4 <I2C_ITError>
  }
}
 8106270:	bf00      	nop
 8106272:	3710      	adds	r7, #16
 8106274:	46bd      	mov	sp, r7
 8106276:	bd80      	pop	{r7, pc}
 8106278:	40020010 	.word	0x40020010
 810627c:	40020028 	.word	0x40020028
 8106280:	40020040 	.word	0x40020040
 8106284:	40020058 	.word	0x40020058
 8106288:	40020070 	.word	0x40020070
 810628c:	40020088 	.word	0x40020088
 8106290:	400200a0 	.word	0x400200a0
 8106294:	400200b8 	.word	0x400200b8
 8106298:	40020410 	.word	0x40020410
 810629c:	40020428 	.word	0x40020428
 81062a0:	40020440 	.word	0x40020440
 81062a4:	40020458 	.word	0x40020458
 81062a8:	40020470 	.word	0x40020470
 81062ac:	40020488 	.word	0x40020488
 81062b0:	400204a0 	.word	0x400204a0
 81062b4:	400204b8 	.word	0x400204b8

081062b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 81062b8:	b580      	push	{r7, lr}
 81062ba:	b084      	sub	sp, #16
 81062bc:	af00      	add	r7, sp, #0
 81062be:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062c4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 81062c6:	68fb      	ldr	r3, [r7, #12]
 81062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062ca:	2b00      	cmp	r3, #0
 81062cc:	d003      	beq.n	81062d6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 81062ce:	68fb      	ldr	r3, [r7, #12]
 81062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062d2:	2200      	movs	r2, #0
 81062d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 81062d6:	68fb      	ldr	r3, [r7, #12]
 81062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81062da:	2b00      	cmp	r3, #0
 81062dc:	d003      	beq.n	81062e6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 81062de:	68fb      	ldr	r3, [r7, #12]
 81062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81062e2:	2200      	movs	r2, #0
 81062e4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 81062e6:	68f8      	ldr	r0, [r7, #12]
 81062e8:	f7ff fdcc 	bl	8105e84 <I2C_TreatErrorCallback>
}
 81062ec:	bf00      	nop
 81062ee:	3710      	adds	r7, #16
 81062f0:	46bd      	mov	sp, r7
 81062f2:	bd80      	pop	{r7, pc}

081062f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81062f4:	b580      	push	{r7, lr}
 81062f6:	b084      	sub	sp, #16
 81062f8:	af00      	add	r7, sp, #0
 81062fa:	60f8      	str	r0, [r7, #12]
 81062fc:	60b9      	str	r1, [r7, #8]
 81062fe:	603b      	str	r3, [r7, #0]
 8106300:	4613      	mov	r3, r2
 8106302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8106304:	e022      	b.n	810634c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106306:	683b      	ldr	r3, [r7, #0]
 8106308:	f1b3 3fff 	cmp.w	r3, #4294967295
 810630c:	d01e      	beq.n	810634c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810630e:	f7fb fa05 	bl	810171c <HAL_GetTick>
 8106312:	4602      	mov	r2, r0
 8106314:	69bb      	ldr	r3, [r7, #24]
 8106316:	1ad3      	subs	r3, r2, r3
 8106318:	683a      	ldr	r2, [r7, #0]
 810631a:	429a      	cmp	r2, r3
 810631c:	d302      	bcc.n	8106324 <I2C_WaitOnFlagUntilTimeout+0x30>
 810631e:	683b      	ldr	r3, [r7, #0]
 8106320:	2b00      	cmp	r3, #0
 8106322:	d113      	bne.n	810634c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8106324:	68fb      	ldr	r3, [r7, #12]
 8106326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106328:	f043 0220 	orr.w	r2, r3, #32
 810632c:	68fb      	ldr	r3, [r7, #12]
 810632e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8106330:	68fb      	ldr	r3, [r7, #12]
 8106332:	2220      	movs	r2, #32
 8106334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8106338:	68fb      	ldr	r3, [r7, #12]
 810633a:	2200      	movs	r2, #0
 810633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8106340:	68fb      	ldr	r3, [r7, #12]
 8106342:	2200      	movs	r2, #0
 8106344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8106348:	2301      	movs	r3, #1
 810634a:	e00f      	b.n	810636c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810634c:	68fb      	ldr	r3, [r7, #12]
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	699a      	ldr	r2, [r3, #24]
 8106352:	68bb      	ldr	r3, [r7, #8]
 8106354:	4013      	ands	r3, r2
 8106356:	68ba      	ldr	r2, [r7, #8]
 8106358:	429a      	cmp	r2, r3
 810635a:	bf0c      	ite	eq
 810635c:	2301      	moveq	r3, #1
 810635e:	2300      	movne	r3, #0
 8106360:	b2db      	uxtb	r3, r3
 8106362:	461a      	mov	r2, r3
 8106364:	79fb      	ldrb	r3, [r7, #7]
 8106366:	429a      	cmp	r2, r3
 8106368:	d0cd      	beq.n	8106306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810636a:	2300      	movs	r3, #0
}
 810636c:	4618      	mov	r0, r3
 810636e:	3710      	adds	r7, #16
 8106370:	46bd      	mov	sp, r7
 8106372:	bd80      	pop	{r7, pc}

08106374 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8106374:	b580      	push	{r7, lr}
 8106376:	b084      	sub	sp, #16
 8106378:	af00      	add	r7, sp, #0
 810637a:	60f8      	str	r0, [r7, #12]
 810637c:	60b9      	str	r1, [r7, #8]
 810637e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8106380:	e02c      	b.n	81063dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8106382:	687a      	ldr	r2, [r7, #4]
 8106384:	68b9      	ldr	r1, [r7, #8]
 8106386:	68f8      	ldr	r0, [r7, #12]
 8106388:	f000 f834 	bl	81063f4 <I2C_IsAcknowledgeFailed>
 810638c:	4603      	mov	r3, r0
 810638e:	2b00      	cmp	r3, #0
 8106390:	d001      	beq.n	8106396 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8106392:	2301      	movs	r3, #1
 8106394:	e02a      	b.n	81063ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106396:	68bb      	ldr	r3, [r7, #8]
 8106398:	f1b3 3fff 	cmp.w	r3, #4294967295
 810639c:	d01e      	beq.n	81063dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810639e:	f7fb f9bd 	bl	810171c <HAL_GetTick>
 81063a2:	4602      	mov	r2, r0
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	1ad3      	subs	r3, r2, r3
 81063a8:	68ba      	ldr	r2, [r7, #8]
 81063aa:	429a      	cmp	r2, r3
 81063ac:	d302      	bcc.n	81063b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81063ae:	68bb      	ldr	r3, [r7, #8]
 81063b0:	2b00      	cmp	r3, #0
 81063b2:	d113      	bne.n	81063dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81063b4:	68fb      	ldr	r3, [r7, #12]
 81063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063b8:	f043 0220 	orr.w	r2, r3, #32
 81063bc:	68fb      	ldr	r3, [r7, #12]
 81063be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81063c0:	68fb      	ldr	r3, [r7, #12]
 81063c2:	2220      	movs	r2, #32
 81063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81063c8:	68fb      	ldr	r3, [r7, #12]
 81063ca:	2200      	movs	r2, #0
 81063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	2200      	movs	r2, #0
 81063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81063d8:	2301      	movs	r3, #1
 81063da:	e007      	b.n	81063ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81063dc:	68fb      	ldr	r3, [r7, #12]
 81063de:	681b      	ldr	r3, [r3, #0]
 81063e0:	699b      	ldr	r3, [r3, #24]
 81063e2:	f003 0302 	and.w	r3, r3, #2
 81063e6:	2b02      	cmp	r3, #2
 81063e8:	d1cb      	bne.n	8106382 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81063ea:	2300      	movs	r3, #0
}
 81063ec:	4618      	mov	r0, r3
 81063ee:	3710      	adds	r7, #16
 81063f0:	46bd      	mov	sp, r7
 81063f2:	bd80      	pop	{r7, pc}

081063f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81063f4:	b580      	push	{r7, lr}
 81063f6:	b084      	sub	sp, #16
 81063f8:	af00      	add	r7, sp, #0
 81063fa:	60f8      	str	r0, [r7, #12]
 81063fc:	60b9      	str	r1, [r7, #8]
 81063fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8106400:	68fb      	ldr	r3, [r7, #12]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	699b      	ldr	r3, [r3, #24]
 8106406:	f003 0310 	and.w	r3, r3, #16
 810640a:	2b10      	cmp	r3, #16
 810640c:	d151      	bne.n	81064b2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810640e:	e022      	b.n	8106456 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8106410:	68bb      	ldr	r3, [r7, #8]
 8106412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106416:	d01e      	beq.n	8106456 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106418:	f7fb f980 	bl	810171c <HAL_GetTick>
 810641c:	4602      	mov	r2, r0
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	1ad3      	subs	r3, r2, r3
 8106422:	68ba      	ldr	r2, [r7, #8]
 8106424:	429a      	cmp	r2, r3
 8106426:	d302      	bcc.n	810642e <I2C_IsAcknowledgeFailed+0x3a>
 8106428:	68bb      	ldr	r3, [r7, #8]
 810642a:	2b00      	cmp	r3, #0
 810642c:	d113      	bne.n	8106456 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810642e:	68fb      	ldr	r3, [r7, #12]
 8106430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106432:	f043 0220 	orr.w	r2, r3, #32
 8106436:	68fb      	ldr	r3, [r7, #12]
 8106438:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810643a:	68fb      	ldr	r3, [r7, #12]
 810643c:	2220      	movs	r2, #32
 810643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8106442:	68fb      	ldr	r3, [r7, #12]
 8106444:	2200      	movs	r2, #0
 8106446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810644a:	68fb      	ldr	r3, [r7, #12]
 810644c:	2200      	movs	r2, #0
 810644e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8106452:	2301      	movs	r3, #1
 8106454:	e02e      	b.n	81064b4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8106456:	68fb      	ldr	r3, [r7, #12]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	699b      	ldr	r3, [r3, #24]
 810645c:	f003 0320 	and.w	r3, r3, #32
 8106460:	2b20      	cmp	r3, #32
 8106462:	d1d5      	bne.n	8106410 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8106464:	68fb      	ldr	r3, [r7, #12]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	2210      	movs	r2, #16
 810646a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810646c:	68fb      	ldr	r3, [r7, #12]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	2220      	movs	r2, #32
 8106472:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8106474:	68f8      	ldr	r0, [r7, #12]
 8106476:	f7ff fd2c 	bl	8105ed2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810647a:	68fb      	ldr	r3, [r7, #12]
 810647c:	681b      	ldr	r3, [r3, #0]
 810647e:	6859      	ldr	r1, [r3, #4]
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	681a      	ldr	r2, [r3, #0]
 8106484:	4b0d      	ldr	r3, [pc, #52]	; (81064bc <I2C_IsAcknowledgeFailed+0xc8>)
 8106486:	400b      	ands	r3, r1
 8106488:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810648a:	68fb      	ldr	r3, [r7, #12]
 810648c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810648e:	f043 0204 	orr.w	r2, r3, #4
 8106492:	68fb      	ldr	r3, [r7, #12]
 8106494:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8106496:	68fb      	ldr	r3, [r7, #12]
 8106498:	2220      	movs	r2, #32
 810649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	2200      	movs	r2, #0
 81064a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81064a6:	68fb      	ldr	r3, [r7, #12]
 81064a8:	2200      	movs	r2, #0
 81064aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81064ae:	2301      	movs	r3, #1
 81064b0:	e000      	b.n	81064b4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81064b2:	2300      	movs	r3, #0
}
 81064b4:	4618      	mov	r0, r3
 81064b6:	3710      	adds	r7, #16
 81064b8:	46bd      	mov	sp, r7
 81064ba:	bd80      	pop	{r7, pc}
 81064bc:	fe00e800 	.word	0xfe00e800

081064c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81064c0:	b480      	push	{r7}
 81064c2:	b085      	sub	sp, #20
 81064c4:	af00      	add	r7, sp, #0
 81064c6:	60f8      	str	r0, [r7, #12]
 81064c8:	607b      	str	r3, [r7, #4]
 81064ca:	460b      	mov	r3, r1
 81064cc:	817b      	strh	r3, [r7, #10]
 81064ce:	4613      	mov	r3, r2
 81064d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81064d2:	68fb      	ldr	r3, [r7, #12]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	685a      	ldr	r2, [r3, #4]
 81064d8:	69bb      	ldr	r3, [r7, #24]
 81064da:	0d5b      	lsrs	r3, r3, #21
 81064dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81064e0:	4b0d      	ldr	r3, [pc, #52]	; (8106518 <I2C_TransferConfig+0x58>)
 81064e2:	430b      	orrs	r3, r1
 81064e4:	43db      	mvns	r3, r3
 81064e6:	ea02 0103 	and.w	r1, r2, r3
 81064ea:	897b      	ldrh	r3, [r7, #10]
 81064ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81064f0:	7a7b      	ldrb	r3, [r7, #9]
 81064f2:	041b      	lsls	r3, r3, #16
 81064f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81064f8:	431a      	orrs	r2, r3
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	431a      	orrs	r2, r3
 81064fe:	69bb      	ldr	r3, [r7, #24]
 8106500:	431a      	orrs	r2, r3
 8106502:	68fb      	ldr	r3, [r7, #12]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	430a      	orrs	r2, r1
 8106508:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 810650a:	bf00      	nop
 810650c:	3714      	adds	r7, #20
 810650e:	46bd      	mov	sp, r7
 8106510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106514:	4770      	bx	lr
 8106516:	bf00      	nop
 8106518:	03ff63ff 	.word	0x03ff63ff

0810651c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 810651c:	b480      	push	{r7}
 810651e:	b085      	sub	sp, #20
 8106520:	af00      	add	r7, sp, #0
 8106522:	6078      	str	r0, [r7, #4]
 8106524:	460b      	mov	r3, r1
 8106526:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8106528:	2300      	movs	r3, #0
 810652a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106530:	4a2a      	ldr	r2, [pc, #168]	; (81065dc <I2C_Enable_IRQ+0xc0>)
 8106532:	4293      	cmp	r3, r2
 8106534:	d004      	beq.n	8106540 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8106536:	687b      	ldr	r3, [r7, #4]
 8106538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 810653a:	4a29      	ldr	r2, [pc, #164]	; (81065e0 <I2C_Enable_IRQ+0xc4>)
 810653c:	4293      	cmp	r3, r2
 810653e:	d11d      	bne.n	810657c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8106540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8106544:	2b00      	cmp	r3, #0
 8106546:	da03      	bge.n	8106550 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8106548:	68fb      	ldr	r3, [r7, #12]
 810654a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 810654e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8106550:	887b      	ldrh	r3, [r7, #2]
 8106552:	2b10      	cmp	r3, #16
 8106554:	d103      	bne.n	810655e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8106556:	68fb      	ldr	r3, [r7, #12]
 8106558:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 810655c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 810655e:	887b      	ldrh	r3, [r7, #2]
 8106560:	2b20      	cmp	r3, #32
 8106562:	d103      	bne.n	810656c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8106564:	68fb      	ldr	r3, [r7, #12]
 8106566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 810656a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 810656c:	887b      	ldrh	r3, [r7, #2]
 810656e:	2b40      	cmp	r3, #64	; 0x40
 8106570:	d125      	bne.n	81065be <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8106572:	68fb      	ldr	r3, [r7, #12]
 8106574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106578:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 810657a:	e020      	b.n	81065be <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 810657c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8106580:	2b00      	cmp	r3, #0
 8106582:	da03      	bge.n	810658c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8106584:	68fb      	ldr	r3, [r7, #12]
 8106586:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 810658a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 810658c:	887b      	ldrh	r3, [r7, #2]
 810658e:	f003 0301 	and.w	r3, r3, #1
 8106592:	2b00      	cmp	r3, #0
 8106594:	d003      	beq.n	810659e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 810659c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 810659e:	887b      	ldrh	r3, [r7, #2]
 81065a0:	f003 0302 	and.w	r3, r3, #2
 81065a4:	2b00      	cmp	r3, #0
 81065a6:	d003      	beq.n	81065b0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 81065a8:	68fb      	ldr	r3, [r7, #12]
 81065aa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 81065ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 81065b0:	887b      	ldrh	r3, [r7, #2]
 81065b2:	2b20      	cmp	r3, #32
 81065b4:	d103      	bne.n	81065be <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 81065b6:	68fb      	ldr	r3, [r7, #12]
 81065b8:	f043 0320 	orr.w	r3, r3, #32
 81065bc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	6819      	ldr	r1, [r3, #0]
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	68fa      	ldr	r2, [r7, #12]
 81065ca:	430a      	orrs	r2, r1
 81065cc:	601a      	str	r2, [r3, #0]
}
 81065ce:	bf00      	nop
 81065d0:	3714      	adds	r7, #20
 81065d2:	46bd      	mov	sp, r7
 81065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065d8:	4770      	bx	lr
 81065da:	bf00      	nop
 81065dc:	08104d7d 	.word	0x08104d7d
 81065e0:	08104f65 	.word	0x08104f65

081065e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 81065e4:	b480      	push	{r7}
 81065e6:	b085      	sub	sp, #20
 81065e8:	af00      	add	r7, sp, #0
 81065ea:	6078      	str	r0, [r7, #4]
 81065ec:	460b      	mov	r3, r1
 81065ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 81065f0:	2300      	movs	r3, #0
 81065f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 81065f4:	887b      	ldrh	r3, [r7, #2]
 81065f6:	f003 0301 	and.w	r3, r3, #1
 81065fa:	2b00      	cmp	r3, #0
 81065fc:	d00f      	beq.n	810661e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 81065fe:	68fb      	ldr	r3, [r7, #12]
 8106600:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8106604:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810660c:	b2db      	uxtb	r3, r3
 810660e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8106612:	2b28      	cmp	r3, #40	; 0x28
 8106614:	d003      	beq.n	810661e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8106616:	68fb      	ldr	r3, [r7, #12]
 8106618:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 810661c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 810661e:	887b      	ldrh	r3, [r7, #2]
 8106620:	f003 0302 	and.w	r3, r3, #2
 8106624:	2b00      	cmp	r3, #0
 8106626:	d00f      	beq.n	8106648 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 810662e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106636:	b2db      	uxtb	r3, r3
 8106638:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810663c:	2b28      	cmp	r3, #40	; 0x28
 810663e:	d003      	beq.n	8106648 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8106640:	68fb      	ldr	r3, [r7, #12]
 8106642:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8106646:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8106648:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 810664c:	2b00      	cmp	r3, #0
 810664e:	da03      	bge.n	8106658 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8106650:	68fb      	ldr	r3, [r7, #12]
 8106652:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8106656:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8106658:	887b      	ldrh	r3, [r7, #2]
 810665a:	2b10      	cmp	r3, #16
 810665c:	d103      	bne.n	8106666 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8106664:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8106666:	887b      	ldrh	r3, [r7, #2]
 8106668:	2b20      	cmp	r3, #32
 810666a:	d103      	bne.n	8106674 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	f043 0320 	orr.w	r3, r3, #32
 8106672:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8106674:	887b      	ldrh	r3, [r7, #2]
 8106676:	2b40      	cmp	r3, #64	; 0x40
 8106678:	d103      	bne.n	8106682 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 810667a:	68fb      	ldr	r3, [r7, #12]
 810667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106680:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	681b      	ldr	r3, [r3, #0]
 8106686:	6819      	ldr	r1, [r3, #0]
 8106688:	68fb      	ldr	r3, [r7, #12]
 810668a:	43da      	mvns	r2, r3
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	681b      	ldr	r3, [r3, #0]
 8106690:	400a      	ands	r2, r1
 8106692:	601a      	str	r2, [r3, #0]
}
 8106694:	bf00      	nop
 8106696:	3714      	adds	r7, #20
 8106698:	46bd      	mov	sp, r7
 810669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810669e:	4770      	bx	lr

081066a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81066a0:	b480      	push	{r7}
 81066a2:	b083      	sub	sp, #12
 81066a4:	af00      	add	r7, sp, #0
 81066a6:	6078      	str	r0, [r7, #4]
 81066a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81066b0:	b2db      	uxtb	r3, r3
 81066b2:	2b20      	cmp	r3, #32
 81066b4:	d138      	bne.n	8106728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81066bc:	2b01      	cmp	r3, #1
 81066be:	d101      	bne.n	81066c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81066c0:	2302      	movs	r3, #2
 81066c2:	e032      	b.n	810672a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	2201      	movs	r2, #1
 81066c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	2224      	movs	r2, #36	; 0x24
 81066d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	681a      	ldr	r2, [r3, #0]
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	f022 0201 	bic.w	r2, r2, #1
 81066e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	681a      	ldr	r2, [r3, #0]
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	681b      	ldr	r3, [r3, #0]
 81066ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81066f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	6819      	ldr	r1, [r3, #0]
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	681b      	ldr	r3, [r3, #0]
 81066fe:	683a      	ldr	r2, [r7, #0]
 8106700:	430a      	orrs	r2, r1
 8106702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	681b      	ldr	r3, [r3, #0]
 8106708:	681a      	ldr	r2, [r3, #0]
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	681b      	ldr	r3, [r3, #0]
 810670e:	f042 0201 	orr.w	r2, r2, #1
 8106712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	2220      	movs	r2, #32
 8106718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	2200      	movs	r2, #0
 8106720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106724:	2300      	movs	r3, #0
 8106726:	e000      	b.n	810672a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8106728:	2302      	movs	r3, #2
  }
}
 810672a:	4618      	mov	r0, r3
 810672c:	370c      	adds	r7, #12
 810672e:	46bd      	mov	sp, r7
 8106730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106734:	4770      	bx	lr

08106736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8106736:	b480      	push	{r7}
 8106738:	b085      	sub	sp, #20
 810673a:	af00      	add	r7, sp, #0
 810673c:	6078      	str	r0, [r7, #4]
 810673e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106746:	b2db      	uxtb	r3, r3
 8106748:	2b20      	cmp	r3, #32
 810674a:	d139      	bne.n	81067c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106752:	2b01      	cmp	r3, #1
 8106754:	d101      	bne.n	810675a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8106756:	2302      	movs	r3, #2
 8106758:	e033      	b.n	81067c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	2201      	movs	r2, #1
 810675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	2224      	movs	r2, #36	; 0x24
 8106766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	681a      	ldr	r2, [r3, #0]
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	681b      	ldr	r3, [r3, #0]
 8106774:	f022 0201 	bic.w	r2, r2, #1
 8106778:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	681b      	ldr	r3, [r3, #0]
 810677e:	681b      	ldr	r3, [r3, #0]
 8106780:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8106782:	68fb      	ldr	r3, [r7, #12]
 8106784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8106788:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810678a:	683b      	ldr	r3, [r7, #0]
 810678c:	021b      	lsls	r3, r3, #8
 810678e:	68fa      	ldr	r2, [r7, #12]
 8106790:	4313      	orrs	r3, r2
 8106792:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	68fa      	ldr	r2, [r7, #12]
 810679a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810679c:	687b      	ldr	r3, [r7, #4]
 810679e:	681b      	ldr	r3, [r3, #0]
 81067a0:	681a      	ldr	r2, [r3, #0]
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	f042 0201 	orr.w	r2, r2, #1
 81067aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	2220      	movs	r2, #32
 81067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	2200      	movs	r2, #0
 81067b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81067bc:	2300      	movs	r3, #0
 81067be:	e000      	b.n	81067c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81067c0:	2302      	movs	r3, #2
  }
}
 81067c2:	4618      	mov	r0, r3
 81067c4:	3714      	adds	r7, #20
 81067c6:	46bd      	mov	sp, r7
 81067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067cc:	4770      	bx	lr
	...

081067d0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81067d0:	b580      	push	{r7, lr}
 81067d2:	b084      	sub	sp, #16
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	60f8      	str	r0, [r7, #12]
 81067d8:	460b      	mov	r3, r1
 81067da:	607a      	str	r2, [r7, #4]
 81067dc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81067de:	4b37      	ldr	r3, [pc, #220]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	f023 0201 	bic.w	r2, r3, #1
 81067e6:	4935      	ldr	r1, [pc, #212]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81067e8:	68fb      	ldr	r3, [r7, #12]
 81067ea:	4313      	orrs	r3, r2
 81067ec:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	2b00      	cmp	r3, #0
 81067f2:	d123      	bne.n	810683c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81067f4:	f7fb f94e 	bl	8101a94 <HAL_GetCurrentCPUID>
 81067f8:	4603      	mov	r3, r0
 81067fa:	2b03      	cmp	r3, #3
 81067fc:	d158      	bne.n	81068b0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81067fe:	4b2f      	ldr	r3, [pc, #188]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106800:	691b      	ldr	r3, [r3, #16]
 8106802:	4a2e      	ldr	r2, [pc, #184]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106804:	f023 0301 	bic.w	r3, r3, #1
 8106808:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810680a:	4b2d      	ldr	r3, [pc, #180]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810680c:	691b      	ldr	r3, [r3, #16]
 810680e:	4a2c      	ldr	r2, [pc, #176]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106810:	f043 0304 	orr.w	r3, r3, #4
 8106814:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106816:	f3bf 8f4f 	dsb	sy
}
 810681a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810681c:	f3bf 8f6f 	isb	sy
}
 8106820:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106822:	7afb      	ldrb	r3, [r7, #11]
 8106824:	2b01      	cmp	r3, #1
 8106826:	d101      	bne.n	810682c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106828:	bf30      	wfi
 810682a:	e000      	b.n	810682e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810682c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810682e:	4b24      	ldr	r3, [pc, #144]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106830:	691b      	ldr	r3, [r3, #16]
 8106832:	4a23      	ldr	r2, [pc, #140]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106834:	f023 0304 	bic.w	r3, r3, #4
 8106838:	6113      	str	r3, [r2, #16]
 810683a:	e03c      	b.n	81068b6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	2b01      	cmp	r3, #1
 8106840:	d123      	bne.n	810688a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106842:	f7fb f927 	bl	8101a94 <HAL_GetCurrentCPUID>
 8106846:	4603      	mov	r3, r0
 8106848:	2b01      	cmp	r3, #1
 810684a:	d133      	bne.n	81068b4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810684c:	4b1b      	ldr	r3, [pc, #108]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810684e:	695b      	ldr	r3, [r3, #20]
 8106850:	4a1a      	ldr	r2, [pc, #104]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106852:	f023 0302 	bic.w	r3, r3, #2
 8106856:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106858:	4b19      	ldr	r3, [pc, #100]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810685a:	691b      	ldr	r3, [r3, #16]
 810685c:	4a18      	ldr	r2, [pc, #96]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810685e:	f043 0304 	orr.w	r3, r3, #4
 8106862:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106864:	f3bf 8f4f 	dsb	sy
}
 8106868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810686a:	f3bf 8f6f 	isb	sy
}
 810686e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106870:	7afb      	ldrb	r3, [r7, #11]
 8106872:	2b01      	cmp	r3, #1
 8106874:	d101      	bne.n	810687a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106876:	bf30      	wfi
 8106878:	e000      	b.n	810687c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810687a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810687c:	4b10      	ldr	r3, [pc, #64]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810687e:	691b      	ldr	r3, [r3, #16]
 8106880:	4a0f      	ldr	r2, [pc, #60]	; (81068c0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106882:	f023 0304 	bic.w	r3, r3, #4
 8106886:	6113      	str	r3, [r2, #16]
 8106888:	e015      	b.n	81068b6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810688a:	f7fb f903 	bl	8101a94 <HAL_GetCurrentCPUID>
 810688e:	4603      	mov	r3, r0
 8106890:	2b03      	cmp	r3, #3
 8106892:	d106      	bne.n	81068a2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106894:	4b09      	ldr	r3, [pc, #36]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 8106896:	691b      	ldr	r3, [r3, #16]
 8106898:	4a08      	ldr	r2, [pc, #32]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 810689a:	f023 0304 	bic.w	r3, r3, #4
 810689e:	6113      	str	r3, [r2, #16]
 81068a0:	e009      	b.n	81068b6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81068a2:	4b06      	ldr	r3, [pc, #24]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81068a4:	695b      	ldr	r3, [r3, #20]
 81068a6:	4a05      	ldr	r2, [pc, #20]	; (81068bc <HAL_PWREx_EnterSTOPMode+0xec>)
 81068a8:	f023 0304 	bic.w	r3, r3, #4
 81068ac:	6153      	str	r3, [r2, #20]
 81068ae:	e002      	b.n	81068b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81068b0:	bf00      	nop
 81068b2:	e000      	b.n	81068b6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81068b4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81068b6:	3710      	adds	r7, #16
 81068b8:	46bd      	mov	sp, r7
 81068ba:	bd80      	pop	{r7, pc}
 81068bc:	58024800 	.word	0x58024800
 81068c0:	e000ed00 	.word	0xe000ed00

081068c4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81068c4:	b580      	push	{r7, lr}
 81068c6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81068c8:	f7fb f8e4 	bl	8101a94 <HAL_GetCurrentCPUID>
 81068cc:	4603      	mov	r3, r0
 81068ce:	2b03      	cmp	r3, #3
 81068d0:	d101      	bne.n	81068d6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81068d2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81068d4:	e001      	b.n	81068da <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81068d6:	bf40      	sev
    __WFE ();
 81068d8:	bf20      	wfe
}
 81068da:	bf00      	nop
 81068dc:	bd80      	pop	{r7, pc}
	...

081068e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81068e0:	b480      	push	{r7}
 81068e2:	b089      	sub	sp, #36	; 0x24
 81068e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81068e6:	4bb3      	ldr	r3, [pc, #716]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81068e8:	691b      	ldr	r3, [r3, #16]
 81068ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81068ee:	2b18      	cmp	r3, #24
 81068f0:	f200 8155 	bhi.w	8106b9e <HAL_RCC_GetSysClockFreq+0x2be>
 81068f4:	a201      	add	r2, pc, #4	; (adr r2, 81068fc <HAL_RCC_GetSysClockFreq+0x1c>)
 81068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068fa:	bf00      	nop
 81068fc:	08106961 	.word	0x08106961
 8106900:	08106b9f 	.word	0x08106b9f
 8106904:	08106b9f 	.word	0x08106b9f
 8106908:	08106b9f 	.word	0x08106b9f
 810690c:	08106b9f 	.word	0x08106b9f
 8106910:	08106b9f 	.word	0x08106b9f
 8106914:	08106b9f 	.word	0x08106b9f
 8106918:	08106b9f 	.word	0x08106b9f
 810691c:	08106987 	.word	0x08106987
 8106920:	08106b9f 	.word	0x08106b9f
 8106924:	08106b9f 	.word	0x08106b9f
 8106928:	08106b9f 	.word	0x08106b9f
 810692c:	08106b9f 	.word	0x08106b9f
 8106930:	08106b9f 	.word	0x08106b9f
 8106934:	08106b9f 	.word	0x08106b9f
 8106938:	08106b9f 	.word	0x08106b9f
 810693c:	0810698d 	.word	0x0810698d
 8106940:	08106b9f 	.word	0x08106b9f
 8106944:	08106b9f 	.word	0x08106b9f
 8106948:	08106b9f 	.word	0x08106b9f
 810694c:	08106b9f 	.word	0x08106b9f
 8106950:	08106b9f 	.word	0x08106b9f
 8106954:	08106b9f 	.word	0x08106b9f
 8106958:	08106b9f 	.word	0x08106b9f
 810695c:	08106993 	.word	0x08106993
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106960:	4b94      	ldr	r3, [pc, #592]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106962:	681b      	ldr	r3, [r3, #0]
 8106964:	f003 0320 	and.w	r3, r3, #32
 8106968:	2b00      	cmp	r3, #0
 810696a:	d009      	beq.n	8106980 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810696c:	4b91      	ldr	r3, [pc, #580]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810696e:	681b      	ldr	r3, [r3, #0]
 8106970:	08db      	lsrs	r3, r3, #3
 8106972:	f003 0303 	and.w	r3, r3, #3
 8106976:	4a90      	ldr	r2, [pc, #576]	; (8106bb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106978:	fa22 f303 	lsr.w	r3, r2, r3
 810697c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810697e:	e111      	b.n	8106ba4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106980:	4b8d      	ldr	r3, [pc, #564]	; (8106bb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106982:	61bb      	str	r3, [r7, #24]
    break;
 8106984:	e10e      	b.n	8106ba4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106986:	4b8d      	ldr	r3, [pc, #564]	; (8106bbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106988:	61bb      	str	r3, [r7, #24]
    break;
 810698a:	e10b      	b.n	8106ba4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810698c:	4b8c      	ldr	r3, [pc, #560]	; (8106bc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810698e:	61bb      	str	r3, [r7, #24]
    break;
 8106990:	e108      	b.n	8106ba4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106992:	4b88      	ldr	r3, [pc, #544]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106996:	f003 0303 	and.w	r3, r3, #3
 810699a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810699c:	4b85      	ldr	r3, [pc, #532]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81069a0:	091b      	lsrs	r3, r3, #4
 81069a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81069a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81069a8:	4b82      	ldr	r3, [pc, #520]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069ac:	f003 0301 	and.w	r3, r3, #1
 81069b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81069b2:	4b80      	ldr	r3, [pc, #512]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81069b6:	08db      	lsrs	r3, r3, #3
 81069b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81069bc:	68fa      	ldr	r2, [r7, #12]
 81069be:	fb02 f303 	mul.w	r3, r2, r3
 81069c2:	ee07 3a90 	vmov	s15, r3
 81069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81069ce:	693b      	ldr	r3, [r7, #16]
 81069d0:	2b00      	cmp	r3, #0
 81069d2:	f000 80e1 	beq.w	8106b98 <HAL_RCC_GetSysClockFreq+0x2b8>
 81069d6:	697b      	ldr	r3, [r7, #20]
 81069d8:	2b02      	cmp	r3, #2
 81069da:	f000 8083 	beq.w	8106ae4 <HAL_RCC_GetSysClockFreq+0x204>
 81069de:	697b      	ldr	r3, [r7, #20]
 81069e0:	2b02      	cmp	r3, #2
 81069e2:	f200 80a1 	bhi.w	8106b28 <HAL_RCC_GetSysClockFreq+0x248>
 81069e6:	697b      	ldr	r3, [r7, #20]
 81069e8:	2b00      	cmp	r3, #0
 81069ea:	d003      	beq.n	81069f4 <HAL_RCC_GetSysClockFreq+0x114>
 81069ec:	697b      	ldr	r3, [r7, #20]
 81069ee:	2b01      	cmp	r3, #1
 81069f0:	d056      	beq.n	8106aa0 <HAL_RCC_GetSysClockFreq+0x1c0>
 81069f2:	e099      	b.n	8106b28 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81069f4:	4b6f      	ldr	r3, [pc, #444]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	f003 0320 	and.w	r3, r3, #32
 81069fc:	2b00      	cmp	r3, #0
 81069fe:	d02d      	beq.n	8106a5c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a00:	4b6c      	ldr	r3, [pc, #432]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	08db      	lsrs	r3, r3, #3
 8106a06:	f003 0303 	and.w	r3, r3, #3
 8106a0a:	4a6b      	ldr	r2, [pc, #428]	; (8106bb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8106a10:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	ee07 3a90 	vmov	s15, r3
 8106a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a1c:	693b      	ldr	r3, [r7, #16]
 8106a1e:	ee07 3a90 	vmov	s15, r3
 8106a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a2a:	4b62      	ldr	r3, [pc, #392]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a32:	ee07 3a90 	vmov	s15, r3
 8106a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106a3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8106a5a:	e087      	b.n	8106b6c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106a5c:	693b      	ldr	r3, [r7, #16]
 8106a5e:	ee07 3a90 	vmov	s15, r3
 8106a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a66:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106bc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106a6e:	4b51      	ldr	r3, [pc, #324]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106a76:	ee07 3a90 	vmov	s15, r3
 8106a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106a82:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106a9e:	e065      	b.n	8106b6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106aa0:	693b      	ldr	r3, [r7, #16]
 8106aa2:	ee07 3a90 	vmov	s15, r3
 8106aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aaa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8106bcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8106aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ab2:	4b40      	ldr	r3, [pc, #256]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106aba:	ee07 3a90 	vmov	s15, r3
 8106abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8106ac6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106ae2:	e043      	b.n	8106b6c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106ae4:	693b      	ldr	r3, [r7, #16]
 8106ae6:	ee07 3a90 	vmov	s15, r3
 8106aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106aee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106bd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106af6:	4b2f      	ldr	r3, [pc, #188]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106afe:	ee07 3a90 	vmov	s15, r3
 8106b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8106b0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106b26:	e021      	b.n	8106b6c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106b28:	693b      	ldr	r3, [r7, #16]
 8106b2a:	ee07 3a90 	vmov	s15, r3
 8106b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8106bcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8106b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b3a:	4b1e      	ldr	r3, [pc, #120]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b42:	ee07 3a90 	vmov	s15, r3
 8106b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8106b4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106bc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106b6a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8106b6c:	4b11      	ldr	r3, [pc, #68]	; (8106bb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106b70:	0a5b      	lsrs	r3, r3, #9
 8106b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106b76:	3301      	adds	r3, #1
 8106b78:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8106b7a:	683b      	ldr	r3, [r7, #0]
 8106b7c:	ee07 3a90 	vmov	s15, r3
 8106b80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8106b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106b90:	ee17 3a90 	vmov	r3, s15
 8106b94:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106b96:	e005      	b.n	8106ba4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8106b98:	2300      	movs	r3, #0
 8106b9a:	61bb      	str	r3, [r7, #24]
    break;
 8106b9c:	e002      	b.n	8106ba4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8106b9e:	4b07      	ldr	r3, [pc, #28]	; (8106bbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106ba0:	61bb      	str	r3, [r7, #24]
    break;
 8106ba2:	bf00      	nop
  }

  return sysclockfreq;
 8106ba4:	69bb      	ldr	r3, [r7, #24]
}
 8106ba6:	4618      	mov	r0, r3
 8106ba8:	3724      	adds	r7, #36	; 0x24
 8106baa:	46bd      	mov	sp, r7
 8106bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb0:	4770      	bx	lr
 8106bb2:	bf00      	nop
 8106bb4:	58024400 	.word	0x58024400
 8106bb8:	03d09000 	.word	0x03d09000
 8106bbc:	003d0900 	.word	0x003d0900
 8106bc0:	00f42400 	.word	0x00f42400
 8106bc4:	46000000 	.word	0x46000000
 8106bc8:	4c742400 	.word	0x4c742400
 8106bcc:	4a742400 	.word	0x4a742400
 8106bd0:	4b742400 	.word	0x4b742400

08106bd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8106bd4:	b580      	push	{r7, lr}
 8106bd6:	b086      	sub	sp, #24
 8106bd8:	af00      	add	r7, sp, #0
 8106bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8106bdc:	2300      	movs	r3, #0
 8106bde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8106be0:	2300      	movs	r3, #0
 8106be2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106bec:	2b00      	cmp	r3, #0
 8106bee:	d03f      	beq.n	8106c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106bf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106bf8:	d02a      	beq.n	8106c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8106bfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106bfe:	d824      	bhi.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106c04:	d018      	beq.n	8106c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106c0a:	d81e      	bhi.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8106c0c:	2b00      	cmp	r3, #0
 8106c0e:	d003      	beq.n	8106c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8106c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106c14:	d007      	beq.n	8106c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8106c16:	e018      	b.n	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c18:	4bab      	ldr	r3, [pc, #684]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c1c:	4aaa      	ldr	r2, [pc, #680]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106c24:	e015      	b.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	3304      	adds	r3, #4
 8106c2a:	2102      	movs	r1, #2
 8106c2c:	4618      	mov	r0, r3
 8106c2e:	f000 ff11 	bl	8107a54 <RCCEx_PLL2_Config>
 8106c32:	4603      	mov	r3, r0
 8106c34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106c36:	e00c      	b.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	3324      	adds	r3, #36	; 0x24
 8106c3c:	2102      	movs	r1, #2
 8106c3e:	4618      	mov	r0, r3
 8106c40:	f000 ffba 	bl	8107bb8 <RCCEx_PLL3_Config>
 8106c44:	4603      	mov	r3, r0
 8106c46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106c48:	e003      	b.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106c4a:	2301      	movs	r3, #1
 8106c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8106c4e:	e000      	b.n	8106c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8106c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106c52:	7dfb      	ldrb	r3, [r7, #23]
 8106c54:	2b00      	cmp	r3, #0
 8106c56:	d109      	bne.n	8106c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106c58:	4b9b      	ldr	r3, [pc, #620]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106c64:	4998      	ldr	r1, [pc, #608]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106c66:	4313      	orrs	r3, r2
 8106c68:	650b      	str	r3, [r1, #80]	; 0x50
 8106c6a:	e001      	b.n	8106c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c6c:	7dfb      	ldrb	r3, [r7, #23]
 8106c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	681b      	ldr	r3, [r3, #0]
 8106c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c78:	2b00      	cmp	r3, #0
 8106c7a:	d03d      	beq.n	8106cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c80:	2b04      	cmp	r3, #4
 8106c82:	d826      	bhi.n	8106cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8106c84:	a201      	add	r2, pc, #4	; (adr r2, 8106c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8106c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c8a:	bf00      	nop
 8106c8c:	08106ca1 	.word	0x08106ca1
 8106c90:	08106caf 	.word	0x08106caf
 8106c94:	08106cc1 	.word	0x08106cc1
 8106c98:	08106cd9 	.word	0x08106cd9
 8106c9c:	08106cd9 	.word	0x08106cd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106ca0:	4b89      	ldr	r3, [pc, #548]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ca4:	4a88      	ldr	r2, [pc, #544]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106cac:	e015      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	3304      	adds	r3, #4
 8106cb2:	2100      	movs	r1, #0
 8106cb4:	4618      	mov	r0, r3
 8106cb6:	f000 fecd 	bl	8107a54 <RCCEx_PLL2_Config>
 8106cba:	4603      	mov	r3, r0
 8106cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106cbe:	e00c      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	3324      	adds	r3, #36	; 0x24
 8106cc4:	2100      	movs	r1, #0
 8106cc6:	4618      	mov	r0, r3
 8106cc8:	f000 ff76 	bl	8107bb8 <RCCEx_PLL3_Config>
 8106ccc:	4603      	mov	r3, r0
 8106cce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106cd0:	e003      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106cd2:	2301      	movs	r3, #1
 8106cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8106cd6:	e000      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8106cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106cda:	7dfb      	ldrb	r3, [r7, #23]
 8106cdc:	2b00      	cmp	r3, #0
 8106cde:	d109      	bne.n	8106cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106ce0:	4b79      	ldr	r3, [pc, #484]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ce4:	f023 0207 	bic.w	r2, r3, #7
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cec:	4976      	ldr	r1, [pc, #472]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106cee:	4313      	orrs	r3, r2
 8106cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8106cf2:	e001      	b.n	8106cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cf4:	7dfb      	ldrb	r3, [r7, #23]
 8106cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	681b      	ldr	r3, [r3, #0]
 8106cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106d00:	2b00      	cmp	r3, #0
 8106d02:	d042      	beq.n	8106d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106d0c:	d02b      	beq.n	8106d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8106d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106d12:	d825      	bhi.n	8106d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8106d14:	2bc0      	cmp	r3, #192	; 0xc0
 8106d16:	d028      	beq.n	8106d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8106d18:	2bc0      	cmp	r3, #192	; 0xc0
 8106d1a:	d821      	bhi.n	8106d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8106d1c:	2b80      	cmp	r3, #128	; 0x80
 8106d1e:	d016      	beq.n	8106d4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8106d20:	2b80      	cmp	r3, #128	; 0x80
 8106d22:	d81d      	bhi.n	8106d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8106d24:	2b00      	cmp	r3, #0
 8106d26:	d002      	beq.n	8106d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8106d28:	2b40      	cmp	r3, #64	; 0x40
 8106d2a:	d007      	beq.n	8106d3c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8106d2c:	e018      	b.n	8106d60 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d2e:	4b66      	ldr	r3, [pc, #408]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106d32:	4a65      	ldr	r2, [pc, #404]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106d3a:	e017      	b.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	3304      	adds	r3, #4
 8106d40:	2100      	movs	r1, #0
 8106d42:	4618      	mov	r0, r3
 8106d44:	f000 fe86 	bl	8107a54 <RCCEx_PLL2_Config>
 8106d48:	4603      	mov	r3, r0
 8106d4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106d4c:	e00e      	b.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	3324      	adds	r3, #36	; 0x24
 8106d52:	2100      	movs	r1, #0
 8106d54:	4618      	mov	r0, r3
 8106d56:	f000 ff2f 	bl	8107bb8 <RCCEx_PLL3_Config>
 8106d5a:	4603      	mov	r3, r0
 8106d5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8106d5e:	e005      	b.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106d60:	2301      	movs	r3, #1
 8106d62:	75fb      	strb	r3, [r7, #23]
      break;
 8106d64:	e002      	b.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8106d66:	bf00      	nop
 8106d68:	e000      	b.n	8106d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8106d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106d6c:	7dfb      	ldrb	r3, [r7, #23]
 8106d6e:	2b00      	cmp	r3, #0
 8106d70:	d109      	bne.n	8106d86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106d72:	4b55      	ldr	r3, [pc, #340]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106d76:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106d7e:	4952      	ldr	r1, [pc, #328]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106d80:	4313      	orrs	r3, r2
 8106d82:	650b      	str	r3, [r1, #80]	; 0x50
 8106d84:	e001      	b.n	8106d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d86:	7dfb      	ldrb	r3, [r7, #23]
 8106d88:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8106d92:	2b00      	cmp	r3, #0
 8106d94:	d049      	beq.n	8106e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106da0:	d030      	beq.n	8106e04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8106da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106da6:	d82a      	bhi.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106da8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106dac:	d02c      	beq.n	8106e08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8106dae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106db2:	d824      	bhi.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106db8:	d018      	beq.n	8106dec <HAL_RCCEx_PeriphCLKConfig+0x218>
 8106dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106dbe:	d81e      	bhi.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106dc0:	2b00      	cmp	r3, #0
 8106dc2:	d003      	beq.n	8106dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8106dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106dc8:	d007      	beq.n	8106dda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8106dca:	e018      	b.n	8106dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106dcc:	4b3e      	ldr	r3, [pc, #248]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106dd0:	4a3d      	ldr	r2, [pc, #244]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106dd8:	e017      	b.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	3304      	adds	r3, #4
 8106dde:	2100      	movs	r1, #0
 8106de0:	4618      	mov	r0, r3
 8106de2:	f000 fe37 	bl	8107a54 <RCCEx_PLL2_Config>
 8106de6:	4603      	mov	r3, r0
 8106de8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8106dea:	e00e      	b.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	3324      	adds	r3, #36	; 0x24
 8106df0:	2100      	movs	r1, #0
 8106df2:	4618      	mov	r0, r3
 8106df4:	f000 fee0 	bl	8107bb8 <RCCEx_PLL3_Config>
 8106df8:	4603      	mov	r3, r0
 8106dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106dfc:	e005      	b.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8106dfe:	2301      	movs	r3, #1
 8106e00:	75fb      	strb	r3, [r7, #23]
      break;
 8106e02:	e002      	b.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8106e04:	bf00      	nop
 8106e06:	e000      	b.n	8106e0a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8106e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106e0a:	7dfb      	ldrb	r3, [r7, #23]
 8106e0c:	2b00      	cmp	r3, #0
 8106e0e:	d10a      	bne.n	8106e26 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106e10:	4b2d      	ldr	r3, [pc, #180]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106e14:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106e1e:	492a      	ldr	r1, [pc, #168]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106e20:	4313      	orrs	r3, r2
 8106e22:	658b      	str	r3, [r1, #88]	; 0x58
 8106e24:	e001      	b.n	8106e2a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e26:	7dfb      	ldrb	r3, [r7, #23]
 8106e28:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106e2a:	687b      	ldr	r3, [r7, #4]
 8106e2c:	681b      	ldr	r3, [r3, #0]
 8106e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106e32:	2b00      	cmp	r3, #0
 8106e34:	d04c      	beq.n	8106ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106e40:	d030      	beq.n	8106ea4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8106e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106e46:	d82a      	bhi.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106e4c:	d02c      	beq.n	8106ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8106e4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106e52:	d824      	bhi.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106e58:	d018      	beq.n	8106e8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8106e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106e5e:	d81e      	bhi.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106e60:	2b00      	cmp	r3, #0
 8106e62:	d003      	beq.n	8106e6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8106e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106e68:	d007      	beq.n	8106e7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8106e6a:	e018      	b.n	8106e9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e6c:	4b16      	ldr	r3, [pc, #88]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e70:	4a15      	ldr	r2, [pc, #84]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106e78:	e017      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106e7a:	687b      	ldr	r3, [r7, #4]
 8106e7c:	3304      	adds	r3, #4
 8106e7e:	2100      	movs	r1, #0
 8106e80:	4618      	mov	r0, r3
 8106e82:	f000 fde7 	bl	8107a54 <RCCEx_PLL2_Config>
 8106e86:	4603      	mov	r3, r0
 8106e88:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8106e8a:	e00e      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106e8c:	687b      	ldr	r3, [r7, #4]
 8106e8e:	3324      	adds	r3, #36	; 0x24
 8106e90:	2100      	movs	r1, #0
 8106e92:	4618      	mov	r0, r3
 8106e94:	f000 fe90 	bl	8107bb8 <RCCEx_PLL3_Config>
 8106e98:	4603      	mov	r3, r0
 8106e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106e9c:	e005      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8106e9e:	2301      	movs	r3, #1
 8106ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8106ea2:	e002      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8106ea4:	bf00      	nop
 8106ea6:	e000      	b.n	8106eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8106ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106eaa:	7dfb      	ldrb	r3, [r7, #23]
 8106eac:	2b00      	cmp	r3, #0
 8106eae:	d10d      	bne.n	8106ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106eb0:	4b05      	ldr	r3, [pc, #20]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106eb4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106ebe:	4902      	ldr	r1, [pc, #8]	; (8106ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106ec0:	4313      	orrs	r3, r2
 8106ec2:	658b      	str	r3, [r1, #88]	; 0x58
 8106ec4:	e004      	b.n	8106ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8106ec6:	bf00      	nop
 8106ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ecc:	7dfb      	ldrb	r3, [r7, #23]
 8106ece:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106ed8:	2b00      	cmp	r3, #0
 8106eda:	d032      	beq.n	8106f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106ee0:	2b30      	cmp	r3, #48	; 0x30
 8106ee2:	d01c      	beq.n	8106f1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106ee4:	2b30      	cmp	r3, #48	; 0x30
 8106ee6:	d817      	bhi.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8106ee8:	2b20      	cmp	r3, #32
 8106eea:	d00c      	beq.n	8106f06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8106eec:	2b20      	cmp	r3, #32
 8106eee:	d813      	bhi.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8106ef0:	2b00      	cmp	r3, #0
 8106ef2:	d016      	beq.n	8106f22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8106ef4:	2b10      	cmp	r3, #16
 8106ef6:	d10f      	bne.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106ef8:	4baf      	ldr	r3, [pc, #700]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106efc:	4aae      	ldr	r2, [pc, #696]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8106f04:	e00e      	b.n	8106f24 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	3304      	adds	r3, #4
 8106f0a:	2102      	movs	r1, #2
 8106f0c:	4618      	mov	r0, r3
 8106f0e:	f000 fda1 	bl	8107a54 <RCCEx_PLL2_Config>
 8106f12:	4603      	mov	r3, r0
 8106f14:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8106f16:	e005      	b.n	8106f24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106f18:	2301      	movs	r3, #1
 8106f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8106f1c:	e002      	b.n	8106f24 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8106f1e:	bf00      	nop
 8106f20:	e000      	b.n	8106f24 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8106f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106f24:	7dfb      	ldrb	r3, [r7, #23]
 8106f26:	2b00      	cmp	r3, #0
 8106f28:	d109      	bne.n	8106f3e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106f2a:	4ba3      	ldr	r3, [pc, #652]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106f36:	49a0      	ldr	r1, [pc, #640]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106f38:	4313      	orrs	r3, r2
 8106f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106f3c:	e001      	b.n	8106f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f3e:	7dfb      	ldrb	r3, [r7, #23]
 8106f40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	681b      	ldr	r3, [r3, #0]
 8106f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8106f4a:	2b00      	cmp	r3, #0
 8106f4c:	d047      	beq.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f56:	d030      	beq.n	8106fba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8106f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f5c:	d82a      	bhi.n	8106fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8106f5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106f62:	d02c      	beq.n	8106fbe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8106f64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106f68:	d824      	bhi.n	8106fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8106f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f6e:	d018      	beq.n	8106fa2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8106f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f74:	d81e      	bhi.n	8106fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8106f76:	2b00      	cmp	r3, #0
 8106f78:	d003      	beq.n	8106f82 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8106f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f7e:	d007      	beq.n	8106f90 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8106f80:	e018      	b.n	8106fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f82:	4b8d      	ldr	r3, [pc, #564]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f86:	4a8c      	ldr	r2, [pc, #560]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8106f8e:	e017      	b.n	8106fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	3304      	adds	r3, #4
 8106f94:	2100      	movs	r1, #0
 8106f96:	4618      	mov	r0, r3
 8106f98:	f000 fd5c 	bl	8107a54 <RCCEx_PLL2_Config>
 8106f9c:	4603      	mov	r3, r0
 8106f9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8106fa0:	e00e      	b.n	8106fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106fa2:	687b      	ldr	r3, [r7, #4]
 8106fa4:	3324      	adds	r3, #36	; 0x24
 8106fa6:	2100      	movs	r1, #0
 8106fa8:	4618      	mov	r0, r3
 8106faa:	f000 fe05 	bl	8107bb8 <RCCEx_PLL3_Config>
 8106fae:	4603      	mov	r3, r0
 8106fb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8106fb2:	e005      	b.n	8106fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106fb4:	2301      	movs	r3, #1
 8106fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8106fb8:	e002      	b.n	8106fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8106fba:	bf00      	nop
 8106fbc:	e000      	b.n	8106fc0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8106fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106fc0:	7dfb      	ldrb	r3, [r7, #23]
 8106fc2:	2b00      	cmp	r3, #0
 8106fc4:	d109      	bne.n	8106fda <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106fc6:	4b7c      	ldr	r3, [pc, #496]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106fca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106fd2:	4979      	ldr	r1, [pc, #484]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106fd4:	4313      	orrs	r3, r2
 8106fd6:	650b      	str	r3, [r1, #80]	; 0x50
 8106fd8:	e001      	b.n	8106fde <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fda:	7dfb      	ldrb	r3, [r7, #23]
 8106fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	681b      	ldr	r3, [r3, #0]
 8106fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d049      	beq.n	810707e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106ff2:	d02e      	beq.n	8107052 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8106ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106ff8:	d828      	bhi.n	810704c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8106ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106ffe:	d02a      	beq.n	8107056 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8107000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107004:	d822      	bhi.n	810704c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107006:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810700a:	d026      	beq.n	810705a <HAL_RCCEx_PeriphCLKConfig+0x486>
 810700c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107010:	d81c      	bhi.n	810704c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8107012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107016:	d010      	beq.n	810703a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8107018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810701c:	d816      	bhi.n	810704c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810701e:	2b00      	cmp	r3, #0
 8107020:	d01d      	beq.n	810705e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8107022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107026:	d111      	bne.n	810704c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	3304      	adds	r3, #4
 810702c:	2101      	movs	r1, #1
 810702e:	4618      	mov	r0, r3
 8107030:	f000 fd10 	bl	8107a54 <RCCEx_PLL2_Config>
 8107034:	4603      	mov	r3, r0
 8107036:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8107038:	e012      	b.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810703a:	687b      	ldr	r3, [r7, #4]
 810703c:	3324      	adds	r3, #36	; 0x24
 810703e:	2101      	movs	r1, #1
 8107040:	4618      	mov	r0, r3
 8107042:	f000 fdb9 	bl	8107bb8 <RCCEx_PLL3_Config>
 8107046:	4603      	mov	r3, r0
 8107048:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810704a:	e009      	b.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810704c:	2301      	movs	r3, #1
 810704e:	75fb      	strb	r3, [r7, #23]
      break;
 8107050:	e006      	b.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107052:	bf00      	nop
 8107054:	e004      	b.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8107056:	bf00      	nop
 8107058:	e002      	b.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810705a:	bf00      	nop
 810705c:	e000      	b.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810705e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107060:	7dfb      	ldrb	r3, [r7, #23]
 8107062:	2b00      	cmp	r3, #0
 8107064:	d109      	bne.n	810707a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8107066:	4b54      	ldr	r3, [pc, #336]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810706a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107072:	4951      	ldr	r1, [pc, #324]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107074:	4313      	orrs	r3, r2
 8107076:	650b      	str	r3, [r1, #80]	; 0x50
 8107078:	e001      	b.n	810707e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810707a:	7dfb      	ldrb	r3, [r7, #23]
 810707c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107086:	2b00      	cmp	r3, #0
 8107088:	d04b      	beq.n	8107122 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107094:	d02e      	beq.n	81070f4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8107096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810709a:	d828      	bhi.n	81070ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81070a0:	d02a      	beq.n	81070f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81070a6:	d822      	bhi.n	81070ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81070a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81070ac:	d026      	beq.n	81070fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 81070ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81070b2:	d81c      	bhi.n	81070ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81070b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070b8:	d010      	beq.n	81070dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 81070ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81070be:	d816      	bhi.n	81070ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81070c0:	2b00      	cmp	r3, #0
 81070c2:	d01d      	beq.n	8107100 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81070c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81070c8:	d111      	bne.n	81070ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	3304      	adds	r3, #4
 81070ce:	2101      	movs	r1, #1
 81070d0:	4618      	mov	r0, r3
 81070d2:	f000 fcbf 	bl	8107a54 <RCCEx_PLL2_Config>
 81070d6:	4603      	mov	r3, r0
 81070d8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81070da:	e012      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	3324      	adds	r3, #36	; 0x24
 81070e0:	2101      	movs	r1, #1
 81070e2:	4618      	mov	r0, r3
 81070e4:	f000 fd68 	bl	8107bb8 <RCCEx_PLL3_Config>
 81070e8:	4603      	mov	r3, r0
 81070ea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81070ec:	e009      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81070ee:	2301      	movs	r3, #1
 81070f0:	75fb      	strb	r3, [r7, #23]
      break;
 81070f2:	e006      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81070f4:	bf00      	nop
 81070f6:	e004      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81070f8:	bf00      	nop
 81070fa:	e002      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81070fc:	bf00      	nop
 81070fe:	e000      	b.n	8107102 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8107100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107102:	7dfb      	ldrb	r3, [r7, #23]
 8107104:	2b00      	cmp	r3, #0
 8107106:	d10a      	bne.n	810711e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8107108:	4b2b      	ldr	r3, [pc, #172]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810710a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810710c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107116:	4928      	ldr	r1, [pc, #160]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107118:	4313      	orrs	r3, r2
 810711a:	658b      	str	r3, [r1, #88]	; 0x58
 810711c:	e001      	b.n	8107122 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810711e:	7dfb      	ldrb	r3, [r7, #23]
 8107120:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	681b      	ldr	r3, [r3, #0]
 8107126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810712a:	2b00      	cmp	r3, #0
 810712c:	d02f      	beq.n	810718e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107136:	d00e      	beq.n	8107156 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8107138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810713c:	d814      	bhi.n	8107168 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810713e:	2b00      	cmp	r3, #0
 8107140:	d015      	beq.n	810716e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8107142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107146:	d10f      	bne.n	8107168 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107148:	4b1b      	ldr	r3, [pc, #108]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810714c:	4a1a      	ldr	r2, [pc, #104]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810714e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8107154:	e00c      	b.n	8107170 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	3304      	adds	r3, #4
 810715a:	2101      	movs	r1, #1
 810715c:	4618      	mov	r0, r3
 810715e:	f000 fc79 	bl	8107a54 <RCCEx_PLL2_Config>
 8107162:	4603      	mov	r3, r0
 8107164:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8107166:	e003      	b.n	8107170 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107168:	2301      	movs	r3, #1
 810716a:	75fb      	strb	r3, [r7, #23]
      break;
 810716c:	e000      	b.n	8107170 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810716e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107170:	7dfb      	ldrb	r3, [r7, #23]
 8107172:	2b00      	cmp	r3, #0
 8107174:	d109      	bne.n	810718a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8107176:	4b10      	ldr	r3, [pc, #64]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810717a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107182:	490d      	ldr	r1, [pc, #52]	; (81071b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8107184:	4313      	orrs	r3, r2
 8107186:	650b      	str	r3, [r1, #80]	; 0x50
 8107188:	e001      	b.n	810718e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810718a:	7dfb      	ldrb	r3, [r7, #23]
 810718c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810718e:	687b      	ldr	r3, [r7, #4]
 8107190:	681b      	ldr	r3, [r3, #0]
 8107192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107196:	2b00      	cmp	r3, #0
 8107198:	d033      	beq.n	8107202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810719e:	2b03      	cmp	r3, #3
 81071a0:	d81c      	bhi.n	81071dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 81071a2:	a201      	add	r2, pc, #4	; (adr r2, 81071a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071a8:	081071e3 	.word	0x081071e3
 81071ac:	081071bd 	.word	0x081071bd
 81071b0:	081071cb 	.word	0x081071cb
 81071b4:	081071e3 	.word	0x081071e3
 81071b8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81071bc:	4bb9      	ldr	r3, [pc, #740]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81071c0:	4ab8      	ldr	r2, [pc, #736]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81071c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81071c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81071c8:	e00c      	b.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	3304      	adds	r3, #4
 81071ce:	2102      	movs	r1, #2
 81071d0:	4618      	mov	r0, r3
 81071d2:	f000 fc3f 	bl	8107a54 <RCCEx_PLL2_Config>
 81071d6:	4603      	mov	r3, r0
 81071d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81071da:	e003      	b.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81071dc:	2301      	movs	r3, #1
 81071de:	75fb      	strb	r3, [r7, #23]
      break;
 81071e0:	e000      	b.n	81071e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81071e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81071e4:	7dfb      	ldrb	r3, [r7, #23]
 81071e6:	2b00      	cmp	r3, #0
 81071e8:	d109      	bne.n	81071fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81071ea:	4bae      	ldr	r3, [pc, #696]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81071ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81071ee:	f023 0203 	bic.w	r2, r3, #3
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071f6:	49ab      	ldr	r1, [pc, #684]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81071f8:	4313      	orrs	r3, r2
 81071fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 81071fc:	e001      	b.n	8107202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071fe:	7dfb      	ldrb	r3, [r7, #23]
 8107200:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	681b      	ldr	r3, [r3, #0]
 8107206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810720a:	2b00      	cmp	r3, #0
 810720c:	f000 8088 	beq.w	8107320 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8107210:	4ba5      	ldr	r3, [pc, #660]	; (81074a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8107212:	681b      	ldr	r3, [r3, #0]
 8107214:	4aa4      	ldr	r2, [pc, #656]	; (81074a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8107216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810721a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810721c:	f7fa fa7e 	bl	810171c <HAL_GetTick>
 8107220:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107222:	e009      	b.n	8107238 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107224:	f7fa fa7a 	bl	810171c <HAL_GetTick>
 8107228:	4602      	mov	r2, r0
 810722a:	693b      	ldr	r3, [r7, #16]
 810722c:	1ad3      	subs	r3, r2, r3
 810722e:	2b64      	cmp	r3, #100	; 0x64
 8107230:	d902      	bls.n	8107238 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8107232:	2303      	movs	r3, #3
 8107234:	75fb      	strb	r3, [r7, #23]
        break;
 8107236:	e005      	b.n	8107244 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107238:	4b9b      	ldr	r3, [pc, #620]	; (81074a8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810723a:	681b      	ldr	r3, [r3, #0]
 810723c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107240:	2b00      	cmp	r3, #0
 8107242:	d0ef      	beq.n	8107224 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8107244:	7dfb      	ldrb	r3, [r7, #23]
 8107246:	2b00      	cmp	r3, #0
 8107248:	d168      	bne.n	810731c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810724a:	4b96      	ldr	r3, [pc, #600]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810724c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8107254:	4053      	eors	r3, r2
 8107256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810725a:	2b00      	cmp	r3, #0
 810725c:	d013      	beq.n	8107286 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810725e:	4b91      	ldr	r3, [pc, #580]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107266:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8107268:	4b8e      	ldr	r3, [pc, #568]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810726c:	4a8d      	ldr	r2, [pc, #564]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810726e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8107272:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8107274:	4b8b      	ldr	r3, [pc, #556]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107278:	4a8a      	ldr	r2, [pc, #552]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810727a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810727e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8107280:	4a88      	ldr	r2, [pc, #544]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8107286:	687b      	ldr	r3, [r7, #4]
 8107288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810728c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107290:	d115      	bne.n	81072be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8107292:	f7fa fa43 	bl	810171c <HAL_GetTick>
 8107296:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8107298:	e00b      	b.n	81072b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810729a:	f7fa fa3f 	bl	810171c <HAL_GetTick>
 810729e:	4602      	mov	r2, r0
 81072a0:	693b      	ldr	r3, [r7, #16]
 81072a2:	1ad3      	subs	r3, r2, r3
 81072a4:	f241 3288 	movw	r2, #5000	; 0x1388
 81072a8:	4293      	cmp	r3, r2
 81072aa:	d902      	bls.n	81072b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81072ac:	2303      	movs	r3, #3
 81072ae:	75fb      	strb	r3, [r7, #23]
            break;
 81072b0:	e005      	b.n	81072be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81072b2:	4b7c      	ldr	r3, [pc, #496]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81072b6:	f003 0302 	and.w	r3, r3, #2
 81072ba:	2b00      	cmp	r3, #0
 81072bc:	d0ed      	beq.n	810729a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81072be:	7dfb      	ldrb	r3, [r7, #23]
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d128      	bne.n	8107316 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81072c4:	687b      	ldr	r3, [r7, #4]
 81072c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81072ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81072d2:	d10f      	bne.n	81072f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81072d4:	4b73      	ldr	r3, [pc, #460]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81072d6:	691b      	ldr	r3, [r3, #16]
 81072d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81072dc:	687b      	ldr	r3, [r7, #4]
 81072de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81072e2:	091b      	lsrs	r3, r3, #4
 81072e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81072e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81072ec:	496d      	ldr	r1, [pc, #436]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81072ee:	4313      	orrs	r3, r2
 81072f0:	610b      	str	r3, [r1, #16]
 81072f2:	e005      	b.n	8107300 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81072f4:	4b6b      	ldr	r3, [pc, #428]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81072f6:	691b      	ldr	r3, [r3, #16]
 81072f8:	4a6a      	ldr	r2, [pc, #424]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81072fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81072fe:	6113      	str	r3, [r2, #16]
 8107300:	4b68      	ldr	r3, [pc, #416]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810730a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810730e:	4965      	ldr	r1, [pc, #404]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107310:	4313      	orrs	r3, r2
 8107312:	670b      	str	r3, [r1, #112]	; 0x70
 8107314:	e004      	b.n	8107320 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8107316:	7dfb      	ldrb	r3, [r7, #23]
 8107318:	75bb      	strb	r3, [r7, #22]
 810731a:	e001      	b.n	8107320 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810731c:	7dfb      	ldrb	r3, [r7, #23]
 810731e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	681b      	ldr	r3, [r3, #0]
 8107324:	f003 0301 	and.w	r3, r3, #1
 8107328:	2b00      	cmp	r3, #0
 810732a:	d07e      	beq.n	810742a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107330:	2b28      	cmp	r3, #40	; 0x28
 8107332:	d867      	bhi.n	8107404 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8107334:	a201      	add	r2, pc, #4	; (adr r2, 810733c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8107336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810733a:	bf00      	nop
 810733c:	0810740b 	.word	0x0810740b
 8107340:	08107405 	.word	0x08107405
 8107344:	08107405 	.word	0x08107405
 8107348:	08107405 	.word	0x08107405
 810734c:	08107405 	.word	0x08107405
 8107350:	08107405 	.word	0x08107405
 8107354:	08107405 	.word	0x08107405
 8107358:	08107405 	.word	0x08107405
 810735c:	081073e1 	.word	0x081073e1
 8107360:	08107405 	.word	0x08107405
 8107364:	08107405 	.word	0x08107405
 8107368:	08107405 	.word	0x08107405
 810736c:	08107405 	.word	0x08107405
 8107370:	08107405 	.word	0x08107405
 8107374:	08107405 	.word	0x08107405
 8107378:	08107405 	.word	0x08107405
 810737c:	081073f3 	.word	0x081073f3
 8107380:	08107405 	.word	0x08107405
 8107384:	08107405 	.word	0x08107405
 8107388:	08107405 	.word	0x08107405
 810738c:	08107405 	.word	0x08107405
 8107390:	08107405 	.word	0x08107405
 8107394:	08107405 	.word	0x08107405
 8107398:	08107405 	.word	0x08107405
 810739c:	0810740b 	.word	0x0810740b
 81073a0:	08107405 	.word	0x08107405
 81073a4:	08107405 	.word	0x08107405
 81073a8:	08107405 	.word	0x08107405
 81073ac:	08107405 	.word	0x08107405
 81073b0:	08107405 	.word	0x08107405
 81073b4:	08107405 	.word	0x08107405
 81073b8:	08107405 	.word	0x08107405
 81073bc:	0810740b 	.word	0x0810740b
 81073c0:	08107405 	.word	0x08107405
 81073c4:	08107405 	.word	0x08107405
 81073c8:	08107405 	.word	0x08107405
 81073cc:	08107405 	.word	0x08107405
 81073d0:	08107405 	.word	0x08107405
 81073d4:	08107405 	.word	0x08107405
 81073d8:	08107405 	.word	0x08107405
 81073dc:	0810740b 	.word	0x0810740b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	3304      	adds	r3, #4
 81073e4:	2101      	movs	r1, #1
 81073e6:	4618      	mov	r0, r3
 81073e8:	f000 fb34 	bl	8107a54 <RCCEx_PLL2_Config>
 81073ec:	4603      	mov	r3, r0
 81073ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81073f0:	e00c      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	3324      	adds	r3, #36	; 0x24
 81073f6:	2101      	movs	r1, #1
 81073f8:	4618      	mov	r0, r3
 81073fa:	f000 fbdd 	bl	8107bb8 <RCCEx_PLL3_Config>
 81073fe:	4603      	mov	r3, r0
 8107400:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8107402:	e003      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107404:	2301      	movs	r3, #1
 8107406:	75fb      	strb	r3, [r7, #23]
      break;
 8107408:	e000      	b.n	810740c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810740a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810740c:	7dfb      	ldrb	r3, [r7, #23]
 810740e:	2b00      	cmp	r3, #0
 8107410:	d109      	bne.n	8107426 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8107412:	4b24      	ldr	r3, [pc, #144]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107416:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810741e:	4921      	ldr	r1, [pc, #132]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107420:	4313      	orrs	r3, r2
 8107422:	654b      	str	r3, [r1, #84]	; 0x54
 8107424:	e001      	b.n	810742a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107426:	7dfb      	ldrb	r3, [r7, #23]
 8107428:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	681b      	ldr	r3, [r3, #0]
 810742e:	f003 0302 	and.w	r3, r3, #2
 8107432:	2b00      	cmp	r3, #0
 8107434:	d03c      	beq.n	81074b0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810743a:	2b05      	cmp	r3, #5
 810743c:	d820      	bhi.n	8107480 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810743e:	a201      	add	r2, pc, #4	; (adr r2, 8107444 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8107440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107444:	08107487 	.word	0x08107487
 8107448:	0810745d 	.word	0x0810745d
 810744c:	0810746f 	.word	0x0810746f
 8107450:	08107487 	.word	0x08107487
 8107454:	08107487 	.word	0x08107487
 8107458:	08107487 	.word	0x08107487
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810745c:	687b      	ldr	r3, [r7, #4]
 810745e:	3304      	adds	r3, #4
 8107460:	2101      	movs	r1, #1
 8107462:	4618      	mov	r0, r3
 8107464:	f000 faf6 	bl	8107a54 <RCCEx_PLL2_Config>
 8107468:	4603      	mov	r3, r0
 810746a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810746c:	e00c      	b.n	8107488 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810746e:	687b      	ldr	r3, [r7, #4]
 8107470:	3324      	adds	r3, #36	; 0x24
 8107472:	2101      	movs	r1, #1
 8107474:	4618      	mov	r0, r3
 8107476:	f000 fb9f 	bl	8107bb8 <RCCEx_PLL3_Config>
 810747a:	4603      	mov	r3, r0
 810747c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810747e:	e003      	b.n	8107488 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107480:	2301      	movs	r3, #1
 8107482:	75fb      	strb	r3, [r7, #23]
      break;
 8107484:	e000      	b.n	8107488 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8107486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107488:	7dfb      	ldrb	r3, [r7, #23]
 810748a:	2b00      	cmp	r3, #0
 810748c:	d10e      	bne.n	81074ac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810748e:	4b05      	ldr	r3, [pc, #20]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8107490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107492:	f023 0207 	bic.w	r2, r3, #7
 8107496:	687b      	ldr	r3, [r7, #4]
 8107498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810749a:	4902      	ldr	r1, [pc, #8]	; (81074a4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810749c:	4313      	orrs	r3, r2
 810749e:	654b      	str	r3, [r1, #84]	; 0x54
 81074a0:	e006      	b.n	81074b0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81074a2:	bf00      	nop
 81074a4:	58024400 	.word	0x58024400
 81074a8:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074ac:	7dfb      	ldrb	r3, [r7, #23]
 81074ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	681b      	ldr	r3, [r3, #0]
 81074b4:	f003 0304 	and.w	r3, r3, #4
 81074b8:	2b00      	cmp	r3, #0
 81074ba:	d039      	beq.n	8107530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81074c2:	2b05      	cmp	r3, #5
 81074c4:	d820      	bhi.n	8107508 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81074c6:	a201      	add	r2, pc, #4	; (adr r2, 81074cc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074cc:	0810750f 	.word	0x0810750f
 81074d0:	081074e5 	.word	0x081074e5
 81074d4:	081074f7 	.word	0x081074f7
 81074d8:	0810750f 	.word	0x0810750f
 81074dc:	0810750f 	.word	0x0810750f
 81074e0:	0810750f 	.word	0x0810750f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81074e4:	687b      	ldr	r3, [r7, #4]
 81074e6:	3304      	adds	r3, #4
 81074e8:	2101      	movs	r1, #1
 81074ea:	4618      	mov	r0, r3
 81074ec:	f000 fab2 	bl	8107a54 <RCCEx_PLL2_Config>
 81074f0:	4603      	mov	r3, r0
 81074f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81074f4:	e00c      	b.n	8107510 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	3324      	adds	r3, #36	; 0x24
 81074fa:	2101      	movs	r1, #1
 81074fc:	4618      	mov	r0, r3
 81074fe:	f000 fb5b 	bl	8107bb8 <RCCEx_PLL3_Config>
 8107502:	4603      	mov	r3, r0
 8107504:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8107506:	e003      	b.n	8107510 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107508:	2301      	movs	r3, #1
 810750a:	75fb      	strb	r3, [r7, #23]
      break;
 810750c:	e000      	b.n	8107510 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810750e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107510:	7dfb      	ldrb	r3, [r7, #23]
 8107512:	2b00      	cmp	r3, #0
 8107514:	d10a      	bne.n	810752c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107516:	4bb7      	ldr	r3, [pc, #732]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810751a:	f023 0207 	bic.w	r2, r3, #7
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8107524:	49b3      	ldr	r1, [pc, #716]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107526:	4313      	orrs	r3, r2
 8107528:	658b      	str	r3, [r1, #88]	; 0x58
 810752a:	e001      	b.n	8107530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810752c:	7dfb      	ldrb	r3, [r7, #23]
 810752e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107530:	687b      	ldr	r3, [r7, #4]
 8107532:	681b      	ldr	r3, [r3, #0]
 8107534:	f003 0320 	and.w	r3, r3, #32
 8107538:	2b00      	cmp	r3, #0
 810753a:	d04b      	beq.n	81075d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810753c:	687b      	ldr	r3, [r7, #4]
 810753e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107546:	d02e      	beq.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8107548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810754c:	d828      	bhi.n	81075a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107552:	d02a      	beq.n	81075aa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8107554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107558:	d822      	bhi.n	81075a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810755a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810755e:	d026      	beq.n	81075ae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8107560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107564:	d81c      	bhi.n	81075a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8107566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810756a:	d010      	beq.n	810758e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810756c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107570:	d816      	bhi.n	81075a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8107572:	2b00      	cmp	r3, #0
 8107574:	d01d      	beq.n	81075b2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8107576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810757a:	d111      	bne.n	81075a0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	3304      	adds	r3, #4
 8107580:	2100      	movs	r1, #0
 8107582:	4618      	mov	r0, r3
 8107584:	f000 fa66 	bl	8107a54 <RCCEx_PLL2_Config>
 8107588:	4603      	mov	r3, r0
 810758a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810758c:	e012      	b.n	81075b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	3324      	adds	r3, #36	; 0x24
 8107592:	2102      	movs	r1, #2
 8107594:	4618      	mov	r0, r3
 8107596:	f000 fb0f 	bl	8107bb8 <RCCEx_PLL3_Config>
 810759a:	4603      	mov	r3, r0
 810759c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810759e:	e009      	b.n	81075b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81075a0:	2301      	movs	r3, #1
 81075a2:	75fb      	strb	r3, [r7, #23]
      break;
 81075a4:	e006      	b.n	81075b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81075a6:	bf00      	nop
 81075a8:	e004      	b.n	81075b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81075aa:	bf00      	nop
 81075ac:	e002      	b.n	81075b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81075ae:	bf00      	nop
 81075b0:	e000      	b.n	81075b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81075b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81075b4:	7dfb      	ldrb	r3, [r7, #23]
 81075b6:	2b00      	cmp	r3, #0
 81075b8:	d10a      	bne.n	81075d0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81075ba:	4b8e      	ldr	r3, [pc, #568]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81075be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81075c8:	498a      	ldr	r1, [pc, #552]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81075ca:	4313      	orrs	r3, r2
 81075cc:	654b      	str	r3, [r1, #84]	; 0x54
 81075ce:	e001      	b.n	81075d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075d0:	7dfb      	ldrb	r3, [r7, #23]
 81075d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	681b      	ldr	r3, [r3, #0]
 81075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81075dc:	2b00      	cmp	r3, #0
 81075de:	d04b      	beq.n	8107678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81075e0:	687b      	ldr	r3, [r7, #4]
 81075e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81075e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81075ea:	d02e      	beq.n	810764a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81075ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81075f0:	d828      	bhi.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81075f6:	d02a      	beq.n	810764e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81075f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81075fc:	d822      	bhi.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81075fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8107602:	d026      	beq.n	8107652 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8107604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8107608:	d81c      	bhi.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810760a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810760e:	d010      	beq.n	8107632 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8107610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107614:	d816      	bhi.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8107616:	2b00      	cmp	r3, #0
 8107618:	d01d      	beq.n	8107656 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810761a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810761e:	d111      	bne.n	8107644 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107620:	687b      	ldr	r3, [r7, #4]
 8107622:	3304      	adds	r3, #4
 8107624:	2100      	movs	r1, #0
 8107626:	4618      	mov	r0, r3
 8107628:	f000 fa14 	bl	8107a54 <RCCEx_PLL2_Config>
 810762c:	4603      	mov	r3, r0
 810762e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107630:	e012      	b.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107632:	687b      	ldr	r3, [r7, #4]
 8107634:	3324      	adds	r3, #36	; 0x24
 8107636:	2102      	movs	r1, #2
 8107638:	4618      	mov	r0, r3
 810763a:	f000 fabd 	bl	8107bb8 <RCCEx_PLL3_Config>
 810763e:	4603      	mov	r3, r0
 8107640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107642:	e009      	b.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107644:	2301      	movs	r3, #1
 8107646:	75fb      	strb	r3, [r7, #23]
      break;
 8107648:	e006      	b.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810764a:	bf00      	nop
 810764c:	e004      	b.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810764e:	bf00      	nop
 8107650:	e002      	b.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107652:	bf00      	nop
 8107654:	e000      	b.n	8107658 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107658:	7dfb      	ldrb	r3, [r7, #23]
 810765a:	2b00      	cmp	r3, #0
 810765c:	d10a      	bne.n	8107674 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810765e:	4b65      	ldr	r3, [pc, #404]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107662:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810766c:	4961      	ldr	r1, [pc, #388]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810766e:	4313      	orrs	r3, r2
 8107670:	658b      	str	r3, [r1, #88]	; 0x58
 8107672:	e001      	b.n	8107678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107674:	7dfb      	ldrb	r3, [r7, #23]
 8107676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107678:	687b      	ldr	r3, [r7, #4]
 810767a:	681b      	ldr	r3, [r3, #0]
 810767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107680:	2b00      	cmp	r3, #0
 8107682:	d04b      	beq.n	810771c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810768a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810768e:	d02e      	beq.n	81076ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8107690:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107694:	d828      	bhi.n	81076e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8107696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810769a:	d02a      	beq.n	81076f2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810769c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81076a0:	d822      	bhi.n	81076e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81076a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81076a6:	d026      	beq.n	81076f6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81076a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81076ac:	d81c      	bhi.n	81076e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81076ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81076b2:	d010      	beq.n	81076d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81076b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81076b8:	d816      	bhi.n	81076e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81076ba:	2b00      	cmp	r3, #0
 81076bc:	d01d      	beq.n	81076fa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81076c2:	d111      	bne.n	81076e8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	3304      	adds	r3, #4
 81076c8:	2100      	movs	r1, #0
 81076ca:	4618      	mov	r0, r3
 81076cc:	f000 f9c2 	bl	8107a54 <RCCEx_PLL2_Config>
 81076d0:	4603      	mov	r3, r0
 81076d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81076d4:	e012      	b.n	81076fc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	3324      	adds	r3, #36	; 0x24
 81076da:	2102      	movs	r1, #2
 81076dc:	4618      	mov	r0, r3
 81076de:	f000 fa6b 	bl	8107bb8 <RCCEx_PLL3_Config>
 81076e2:	4603      	mov	r3, r0
 81076e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81076e6:	e009      	b.n	81076fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81076e8:	2301      	movs	r3, #1
 81076ea:	75fb      	strb	r3, [r7, #23]
      break;
 81076ec:	e006      	b.n	81076fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81076ee:	bf00      	nop
 81076f0:	e004      	b.n	81076fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81076f2:	bf00      	nop
 81076f4:	e002      	b.n	81076fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81076f6:	bf00      	nop
 81076f8:	e000      	b.n	81076fc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81076fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81076fc:	7dfb      	ldrb	r3, [r7, #23]
 81076fe:	2b00      	cmp	r3, #0
 8107700:	d10a      	bne.n	8107718 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8107702:	4b3c      	ldr	r3, [pc, #240]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810770a:	687b      	ldr	r3, [r7, #4]
 810770c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8107710:	4938      	ldr	r1, [pc, #224]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107712:	4313      	orrs	r3, r2
 8107714:	658b      	str	r3, [r1, #88]	; 0x58
 8107716:	e001      	b.n	810771c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107718:	7dfb      	ldrb	r3, [r7, #23]
 810771a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810771c:	687b      	ldr	r3, [r7, #4]
 810771e:	681b      	ldr	r3, [r3, #0]
 8107720:	f003 0308 	and.w	r3, r3, #8
 8107724:	2b00      	cmp	r3, #0
 8107726:	d01a      	beq.n	810775e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810772e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107732:	d10a      	bne.n	810774a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	3324      	adds	r3, #36	; 0x24
 8107738:	2102      	movs	r1, #2
 810773a:	4618      	mov	r0, r3
 810773c:	f000 fa3c 	bl	8107bb8 <RCCEx_PLL3_Config>
 8107740:	4603      	mov	r3, r0
 8107742:	2b00      	cmp	r3, #0
 8107744:	d001      	beq.n	810774a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8107746:	2301      	movs	r3, #1
 8107748:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810774a:	4b2a      	ldr	r3, [pc, #168]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810774e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107758:	4926      	ldr	r1, [pc, #152]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810775a:	4313      	orrs	r3, r2
 810775c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810775e:	687b      	ldr	r3, [r7, #4]
 8107760:	681b      	ldr	r3, [r3, #0]
 8107762:	f003 0310 	and.w	r3, r3, #16
 8107766:	2b00      	cmp	r3, #0
 8107768:	d01a      	beq.n	81077a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8107770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107774:	d10a      	bne.n	810778c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8107776:	687b      	ldr	r3, [r7, #4]
 8107778:	3324      	adds	r3, #36	; 0x24
 810777a:	2102      	movs	r1, #2
 810777c:	4618      	mov	r0, r3
 810777e:	f000 fa1b 	bl	8107bb8 <RCCEx_PLL3_Config>
 8107782:	4603      	mov	r3, r0
 8107784:	2b00      	cmp	r3, #0
 8107786:	d001      	beq.n	810778c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8107788:	2301      	movs	r3, #1
 810778a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810778c:	4b19      	ldr	r3, [pc, #100]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810778e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107794:	687b      	ldr	r3, [r7, #4]
 8107796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810779a:	4916      	ldr	r1, [pc, #88]	; (81077f4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810779c:	4313      	orrs	r3, r2
 810779e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	681b      	ldr	r3, [r3, #0]
 81077a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81077a8:	2b00      	cmp	r3, #0
 81077aa:	d036      	beq.n	810781a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81077ac:	687b      	ldr	r3, [r7, #4]
 81077ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81077b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81077b6:	d01f      	beq.n	81077f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81077b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81077bc:	d817      	bhi.n	81077ee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81077be:	2b00      	cmp	r3, #0
 81077c0:	d003      	beq.n	81077ca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81077c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81077c6:	d009      	beq.n	81077dc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81077c8:	e011      	b.n	81077ee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	3304      	adds	r3, #4
 81077ce:	2100      	movs	r1, #0
 81077d0:	4618      	mov	r0, r3
 81077d2:	f000 f93f 	bl	8107a54 <RCCEx_PLL2_Config>
 81077d6:	4603      	mov	r3, r0
 81077d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81077da:	e00e      	b.n	81077fa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	3324      	adds	r3, #36	; 0x24
 81077e0:	2102      	movs	r1, #2
 81077e2:	4618      	mov	r0, r3
 81077e4:	f000 f9e8 	bl	8107bb8 <RCCEx_PLL3_Config>
 81077e8:	4603      	mov	r3, r0
 81077ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81077ec:	e005      	b.n	81077fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81077ee:	2301      	movs	r3, #1
 81077f0:	75fb      	strb	r3, [r7, #23]
      break;
 81077f2:	e002      	b.n	81077fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81077f4:	58024400 	.word	0x58024400
      break;
 81077f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81077fa:	7dfb      	ldrb	r3, [r7, #23]
 81077fc:	2b00      	cmp	r3, #0
 81077fe:	d10a      	bne.n	8107816 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8107800:	4b93      	ldr	r3, [pc, #588]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810780e:	4990      	ldr	r1, [pc, #576]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107810:	4313      	orrs	r3, r2
 8107812:	658b      	str	r3, [r1, #88]	; 0x58
 8107814:	e001      	b.n	810781a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107816:	7dfb      	ldrb	r3, [r7, #23]
 8107818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8107822:	2b00      	cmp	r3, #0
 8107824:	d033      	beq.n	810788e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810782c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107830:	d01c      	beq.n	810786c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8107832:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107836:	d816      	bhi.n	8107866 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8107838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810783c:	d003      	beq.n	8107846 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810783e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107842:	d007      	beq.n	8107854 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8107844:	e00f      	b.n	8107866 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107846:	4b82      	ldr	r3, [pc, #520]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810784a:	4a81      	ldr	r2, [pc, #516]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810784c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8107852:	e00c      	b.n	810786e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8107854:	687b      	ldr	r3, [r7, #4]
 8107856:	3324      	adds	r3, #36	; 0x24
 8107858:	2101      	movs	r1, #1
 810785a:	4618      	mov	r0, r3
 810785c:	f000 f9ac 	bl	8107bb8 <RCCEx_PLL3_Config>
 8107860:	4603      	mov	r3, r0
 8107862:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8107864:	e003      	b.n	810786e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107866:	2301      	movs	r3, #1
 8107868:	75fb      	strb	r3, [r7, #23]
      break;
 810786a:	e000      	b.n	810786e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810786c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810786e:	7dfb      	ldrb	r3, [r7, #23]
 8107870:	2b00      	cmp	r3, #0
 8107872:	d10a      	bne.n	810788a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107874:	4b76      	ldr	r3, [pc, #472]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107882:	4973      	ldr	r1, [pc, #460]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107884:	4313      	orrs	r3, r2
 8107886:	654b      	str	r3, [r1, #84]	; 0x54
 8107888:	e001      	b.n	810788e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810788a:	7dfb      	ldrb	r3, [r7, #23]
 810788c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810788e:	687b      	ldr	r3, [r7, #4]
 8107890:	681b      	ldr	r3, [r3, #0]
 8107892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107896:	2b00      	cmp	r3, #0
 8107898:	d029      	beq.n	81078ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810789e:	2b00      	cmp	r3, #0
 81078a0:	d003      	beq.n	81078aa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81078a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81078a6:	d007      	beq.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81078a8:	e00f      	b.n	81078ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81078aa:	4b69      	ldr	r3, [pc, #420]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81078ae:	4a68      	ldr	r2, [pc, #416]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81078b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81078b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81078b6:	e00b      	b.n	81078d0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81078b8:	687b      	ldr	r3, [r7, #4]
 81078ba:	3304      	adds	r3, #4
 81078bc:	2102      	movs	r1, #2
 81078be:	4618      	mov	r0, r3
 81078c0:	f000 f8c8 	bl	8107a54 <RCCEx_PLL2_Config>
 81078c4:	4603      	mov	r3, r0
 81078c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81078c8:	e002      	b.n	81078d0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81078ca:	2301      	movs	r3, #1
 81078cc:	75fb      	strb	r3, [r7, #23]
      break;
 81078ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81078d0:	7dfb      	ldrb	r3, [r7, #23]
 81078d2:	2b00      	cmp	r3, #0
 81078d4:	d109      	bne.n	81078ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81078d6:	4b5e      	ldr	r3, [pc, #376]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81078d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81078da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81078e2:	495b      	ldr	r1, [pc, #364]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81078e4:	4313      	orrs	r3, r2
 81078e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81078e8:	e001      	b.n	81078ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078ea:	7dfb      	ldrb	r3, [r7, #23]
 81078ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	681b      	ldr	r3, [r3, #0]
 81078f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81078f6:	2b00      	cmp	r3, #0
 81078f8:	d00a      	beq.n	8107910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	3324      	adds	r3, #36	; 0x24
 81078fe:	2102      	movs	r1, #2
 8107900:	4618      	mov	r0, r3
 8107902:	f000 f959 	bl	8107bb8 <RCCEx_PLL3_Config>
 8107906:	4603      	mov	r3, r0
 8107908:	2b00      	cmp	r3, #0
 810790a:	d001      	beq.n	8107910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810790c:	2301      	movs	r3, #1
 810790e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	681b      	ldr	r3, [r3, #0]
 8107914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107918:	2b00      	cmp	r3, #0
 810791a:	d030      	beq.n	810797e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107924:	d017      	beq.n	8107956 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8107926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810792a:	d811      	bhi.n	8107950 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810792c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107930:	d013      	beq.n	810795a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8107932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107936:	d80b      	bhi.n	8107950 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8107938:	2b00      	cmp	r3, #0
 810793a:	d010      	beq.n	810795e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810793c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107940:	d106      	bne.n	8107950 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107942:	4b43      	ldr	r3, [pc, #268]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107946:	4a42      	ldr	r2, [pc, #264]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810794c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810794e:	e007      	b.n	8107960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107950:	2301      	movs	r3, #1
 8107952:	75fb      	strb	r3, [r7, #23]
      break;
 8107954:	e004      	b.n	8107960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8107956:	bf00      	nop
 8107958:	e002      	b.n	8107960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810795a:	bf00      	nop
 810795c:	e000      	b.n	8107960 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810795e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107960:	7dfb      	ldrb	r3, [r7, #23]
 8107962:	2b00      	cmp	r3, #0
 8107964:	d109      	bne.n	810797a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107966:	4b3a      	ldr	r3, [pc, #232]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810796a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810796e:	687b      	ldr	r3, [r7, #4]
 8107970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107972:	4937      	ldr	r1, [pc, #220]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107974:	4313      	orrs	r3, r2
 8107976:	654b      	str	r3, [r1, #84]	; 0x54
 8107978:	e001      	b.n	810797e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810797a:	7dfb      	ldrb	r3, [r7, #23]
 810797c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	681b      	ldr	r3, [r3, #0]
 8107982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107986:	2b00      	cmp	r3, #0
 8107988:	d008      	beq.n	810799c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810798a:	4b31      	ldr	r3, [pc, #196]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810798c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810798e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107996:	492e      	ldr	r1, [pc, #184]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107998:	4313      	orrs	r3, r2
 810799a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81079a4:	2b00      	cmp	r3, #0
 81079a6:	d009      	beq.n	81079bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81079a8:	4b29      	ldr	r3, [pc, #164]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079aa:	691b      	ldr	r3, [r3, #16]
 81079ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81079b6:	4926      	ldr	r1, [pc, #152]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079b8:	4313      	orrs	r3, r2
 81079ba:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81079bc:	687b      	ldr	r3, [r7, #4]
 81079be:	681b      	ldr	r3, [r3, #0]
 81079c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81079c4:	2b00      	cmp	r3, #0
 81079c6:	d008      	beq.n	81079da <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81079c8:	4b21      	ldr	r3, [pc, #132]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81079cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81079d4:	491e      	ldr	r1, [pc, #120]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079d6:	4313      	orrs	r3, r2
 81079d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	681b      	ldr	r3, [r3, #0]
 81079de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81079e2:	2b00      	cmp	r3, #0
 81079e4:	d00d      	beq.n	8107a02 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81079e6:	4b1a      	ldr	r3, [pc, #104]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079e8:	691b      	ldr	r3, [r3, #16]
 81079ea:	4a19      	ldr	r2, [pc, #100]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81079f0:	6113      	str	r3, [r2, #16]
 81079f2:	4b17      	ldr	r3, [pc, #92]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079f4:	691a      	ldr	r2, [r3, #16]
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81079fc:	4914      	ldr	r1, [pc, #80]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81079fe:	4313      	orrs	r3, r2
 8107a00:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	2b00      	cmp	r3, #0
 8107a08:	da08      	bge.n	8107a1c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107a0a:	4b11      	ldr	r3, [pc, #68]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107a0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107a16:	490e      	ldr	r1, [pc, #56]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107a18:	4313      	orrs	r3, r2
 8107a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	681b      	ldr	r3, [r3, #0]
 8107a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8107a24:	2b00      	cmp	r3, #0
 8107a26:	d009      	beq.n	8107a3c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107a28:	4b09      	ldr	r3, [pc, #36]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107a36:	4906      	ldr	r1, [pc, #24]	; (8107a50 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107a38:	4313      	orrs	r3, r2
 8107a3a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8107a3c:	7dbb      	ldrb	r3, [r7, #22]
 8107a3e:	2b00      	cmp	r3, #0
 8107a40:	d101      	bne.n	8107a46 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8107a42:	2300      	movs	r3, #0
 8107a44:	e000      	b.n	8107a48 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8107a46:	2301      	movs	r3, #1
}
 8107a48:	4618      	mov	r0, r3
 8107a4a:	3718      	adds	r7, #24
 8107a4c:	46bd      	mov	sp, r7
 8107a4e:	bd80      	pop	{r7, pc}
 8107a50:	58024400 	.word	0x58024400

08107a54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107a54:	b580      	push	{r7, lr}
 8107a56:	b084      	sub	sp, #16
 8107a58:	af00      	add	r7, sp, #0
 8107a5a:	6078      	str	r0, [r7, #4]
 8107a5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107a5e:	2300      	movs	r3, #0
 8107a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107a62:	4b54      	ldr	r3, [pc, #336]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a66:	f003 0303 	and.w	r3, r3, #3
 8107a6a:	2b03      	cmp	r3, #3
 8107a6c:	d101      	bne.n	8107a72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107a6e:	2301      	movs	r3, #1
 8107a70:	e09b      	b.n	8107baa <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107a72:	4b50      	ldr	r3, [pc, #320]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	4a4f      	ldr	r2, [pc, #316]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a7e:	f7f9 fe4d 	bl	810171c <HAL_GetTick>
 8107a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a84:	e008      	b.n	8107a98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107a86:	f7f9 fe49 	bl	810171c <HAL_GetTick>
 8107a8a:	4602      	mov	r2, r0
 8107a8c:	68bb      	ldr	r3, [r7, #8]
 8107a8e:	1ad3      	subs	r3, r2, r3
 8107a90:	2b02      	cmp	r3, #2
 8107a92:	d901      	bls.n	8107a98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107a94:	2303      	movs	r3, #3
 8107a96:	e088      	b.n	8107baa <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107a98:	4b46      	ldr	r3, [pc, #280]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107a9a:	681b      	ldr	r3, [r3, #0]
 8107a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107aa0:	2b00      	cmp	r3, #0
 8107aa2:	d1f0      	bne.n	8107a86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107aa4:	4b43      	ldr	r3, [pc, #268]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107aa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	681b      	ldr	r3, [r3, #0]
 8107ab0:	031b      	lsls	r3, r3, #12
 8107ab2:	4940      	ldr	r1, [pc, #256]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107ab4:	4313      	orrs	r3, r2
 8107ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	685b      	ldr	r3, [r3, #4]
 8107abc:	3b01      	subs	r3, #1
 8107abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	689b      	ldr	r3, [r3, #8]
 8107ac6:	3b01      	subs	r3, #1
 8107ac8:	025b      	lsls	r3, r3, #9
 8107aca:	b29b      	uxth	r3, r3
 8107acc:	431a      	orrs	r2, r3
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	68db      	ldr	r3, [r3, #12]
 8107ad2:	3b01      	subs	r3, #1
 8107ad4:	041b      	lsls	r3, r3, #16
 8107ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107ada:	431a      	orrs	r2, r3
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	691b      	ldr	r3, [r3, #16]
 8107ae0:	3b01      	subs	r3, #1
 8107ae2:	061b      	lsls	r3, r3, #24
 8107ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107ae8:	4932      	ldr	r1, [pc, #200]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107aea:	4313      	orrs	r3, r2
 8107aec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107aee:	4b31      	ldr	r3, [pc, #196]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	695b      	ldr	r3, [r3, #20]
 8107afa:	492e      	ldr	r1, [pc, #184]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107afc:	4313      	orrs	r3, r2
 8107afe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107b00:	4b2c      	ldr	r3, [pc, #176]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b04:	f023 0220 	bic.w	r2, r3, #32
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	699b      	ldr	r3, [r3, #24]
 8107b0c:	4929      	ldr	r1, [pc, #164]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b0e:	4313      	orrs	r3, r2
 8107b10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107b12:	4b28      	ldr	r3, [pc, #160]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b16:	4a27      	ldr	r2, [pc, #156]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b18:	f023 0310 	bic.w	r3, r3, #16
 8107b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107b1e:	4b25      	ldr	r3, [pc, #148]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107b26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107b2a:	687a      	ldr	r2, [r7, #4]
 8107b2c:	69d2      	ldr	r2, [r2, #28]
 8107b2e:	00d2      	lsls	r2, r2, #3
 8107b30:	4920      	ldr	r1, [pc, #128]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b32:	4313      	orrs	r3, r2
 8107b34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107b36:	4b1f      	ldr	r3, [pc, #124]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b3a:	4a1e      	ldr	r2, [pc, #120]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b3c:	f043 0310 	orr.w	r3, r3, #16
 8107b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107b42:	683b      	ldr	r3, [r7, #0]
 8107b44:	2b00      	cmp	r3, #0
 8107b46:	d106      	bne.n	8107b56 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107b48:	4b1a      	ldr	r3, [pc, #104]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b4c:	4a19      	ldr	r2, [pc, #100]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b54:	e00f      	b.n	8107b76 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107b56:	683b      	ldr	r3, [r7, #0]
 8107b58:	2b01      	cmp	r3, #1
 8107b5a:	d106      	bne.n	8107b6a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107b5c:	4b15      	ldr	r3, [pc, #84]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b60:	4a14      	ldr	r2, [pc, #80]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b68:	e005      	b.n	8107b76 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107b6a:	4b12      	ldr	r3, [pc, #72]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b6e:	4a11      	ldr	r2, [pc, #68]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107b76:	4b0f      	ldr	r3, [pc, #60]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	4a0e      	ldr	r2, [pc, #56]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b82:	f7f9 fdcb 	bl	810171c <HAL_GetTick>
 8107b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b88:	e008      	b.n	8107b9c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107b8a:	f7f9 fdc7 	bl	810171c <HAL_GetTick>
 8107b8e:	4602      	mov	r2, r0
 8107b90:	68bb      	ldr	r3, [r7, #8]
 8107b92:	1ad3      	subs	r3, r2, r3
 8107b94:	2b02      	cmp	r3, #2
 8107b96:	d901      	bls.n	8107b9c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107b98:	2303      	movs	r3, #3
 8107b9a:	e006      	b.n	8107baa <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107b9c:	4b05      	ldr	r3, [pc, #20]	; (8107bb4 <RCCEx_PLL2_Config+0x160>)
 8107b9e:	681b      	ldr	r3, [r3, #0]
 8107ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107ba4:	2b00      	cmp	r3, #0
 8107ba6:	d0f0      	beq.n	8107b8a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8107baa:	4618      	mov	r0, r3
 8107bac:	3710      	adds	r7, #16
 8107bae:	46bd      	mov	sp, r7
 8107bb0:	bd80      	pop	{r7, pc}
 8107bb2:	bf00      	nop
 8107bb4:	58024400 	.word	0x58024400

08107bb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107bb8:	b580      	push	{r7, lr}
 8107bba:	b084      	sub	sp, #16
 8107bbc:	af00      	add	r7, sp, #0
 8107bbe:	6078      	str	r0, [r7, #4]
 8107bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107bc2:	2300      	movs	r3, #0
 8107bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107bc6:	4b54      	ldr	r3, [pc, #336]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bca:	f003 0303 	and.w	r3, r3, #3
 8107bce:	2b03      	cmp	r3, #3
 8107bd0:	d101      	bne.n	8107bd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107bd2:	2301      	movs	r3, #1
 8107bd4:	e09b      	b.n	8107d0e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107bd6:	4b50      	ldr	r3, [pc, #320]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107bd8:	681b      	ldr	r3, [r3, #0]
 8107bda:	4a4f      	ldr	r2, [pc, #316]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107be2:	f7f9 fd9b 	bl	810171c <HAL_GetTick>
 8107be6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107be8:	e008      	b.n	8107bfc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107bea:	f7f9 fd97 	bl	810171c <HAL_GetTick>
 8107bee:	4602      	mov	r2, r0
 8107bf0:	68bb      	ldr	r3, [r7, #8]
 8107bf2:	1ad3      	subs	r3, r2, r3
 8107bf4:	2b02      	cmp	r3, #2
 8107bf6:	d901      	bls.n	8107bfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107bf8:	2303      	movs	r3, #3
 8107bfa:	e088      	b.n	8107d0e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107bfc:	4b46      	ldr	r3, [pc, #280]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107bfe:	681b      	ldr	r3, [r3, #0]
 8107c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107c04:	2b00      	cmp	r3, #0
 8107c06:	d1f0      	bne.n	8107bea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107c08:	4b43      	ldr	r3, [pc, #268]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	681b      	ldr	r3, [r3, #0]
 8107c14:	051b      	lsls	r3, r3, #20
 8107c16:	4940      	ldr	r1, [pc, #256]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c18:	4313      	orrs	r3, r2
 8107c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	685b      	ldr	r3, [r3, #4]
 8107c20:	3b01      	subs	r3, #1
 8107c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	689b      	ldr	r3, [r3, #8]
 8107c2a:	3b01      	subs	r3, #1
 8107c2c:	025b      	lsls	r3, r3, #9
 8107c2e:	b29b      	uxth	r3, r3
 8107c30:	431a      	orrs	r2, r3
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	68db      	ldr	r3, [r3, #12]
 8107c36:	3b01      	subs	r3, #1
 8107c38:	041b      	lsls	r3, r3, #16
 8107c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107c3e:	431a      	orrs	r2, r3
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	691b      	ldr	r3, [r3, #16]
 8107c44:	3b01      	subs	r3, #1
 8107c46:	061b      	lsls	r3, r3, #24
 8107c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107c4c:	4932      	ldr	r1, [pc, #200]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c4e:	4313      	orrs	r3, r2
 8107c50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107c52:	4b31      	ldr	r3, [pc, #196]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	695b      	ldr	r3, [r3, #20]
 8107c5e:	492e      	ldr	r1, [pc, #184]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c60:	4313      	orrs	r3, r2
 8107c62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107c64:	4b2c      	ldr	r3, [pc, #176]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	699b      	ldr	r3, [r3, #24]
 8107c70:	4929      	ldr	r1, [pc, #164]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c72:	4313      	orrs	r3, r2
 8107c74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107c76:	4b28      	ldr	r3, [pc, #160]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c7a:	4a27      	ldr	r2, [pc, #156]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107c82:	4b25      	ldr	r3, [pc, #148]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107c8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107c8e:	687a      	ldr	r2, [r7, #4]
 8107c90:	69d2      	ldr	r2, [r2, #28]
 8107c92:	00d2      	lsls	r2, r2, #3
 8107c94:	4920      	ldr	r1, [pc, #128]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c96:	4313      	orrs	r3, r2
 8107c98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107c9a:	4b1f      	ldr	r3, [pc, #124]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c9e:	4a1e      	ldr	r2, [pc, #120]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107ca6:	683b      	ldr	r3, [r7, #0]
 8107ca8:	2b00      	cmp	r3, #0
 8107caa:	d106      	bne.n	8107cba <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107cac:	4b1a      	ldr	r3, [pc, #104]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cb0:	4a19      	ldr	r2, [pc, #100]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107cb8:	e00f      	b.n	8107cda <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107cba:	683b      	ldr	r3, [r7, #0]
 8107cbc:	2b01      	cmp	r3, #1
 8107cbe:	d106      	bne.n	8107cce <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107cc0:	4b15      	ldr	r3, [pc, #84]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cc4:	4a14      	ldr	r2, [pc, #80]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107ccc:	e005      	b.n	8107cda <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107cce:	4b12      	ldr	r3, [pc, #72]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107cd2:	4a11      	ldr	r2, [pc, #68]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107cda:	4b0f      	ldr	r3, [pc, #60]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	4a0e      	ldr	r2, [pc, #56]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107ce6:	f7f9 fd19 	bl	810171c <HAL_GetTick>
 8107cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107cec:	e008      	b.n	8107d00 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107cee:	f7f9 fd15 	bl	810171c <HAL_GetTick>
 8107cf2:	4602      	mov	r2, r0
 8107cf4:	68bb      	ldr	r3, [r7, #8]
 8107cf6:	1ad3      	subs	r3, r2, r3
 8107cf8:	2b02      	cmp	r3, #2
 8107cfa:	d901      	bls.n	8107d00 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107cfc:	2303      	movs	r3, #3
 8107cfe:	e006      	b.n	8107d0e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107d00:	4b05      	ldr	r3, [pc, #20]	; (8107d18 <RCCEx_PLL3_Config+0x160>)
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107d08:	2b00      	cmp	r3, #0
 8107d0a:	d0f0      	beq.n	8107cee <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107d0e:	4618      	mov	r0, r3
 8107d10:	3710      	adds	r7, #16
 8107d12:	46bd      	mov	sp, r7
 8107d14:	bd80      	pop	{r7, pc}
 8107d16:	bf00      	nop
 8107d18:	58024400 	.word	0x58024400

08107d1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8107d1c:	b580      	push	{r7, lr}
 8107d1e:	b084      	sub	sp, #16
 8107d20:	af00      	add	r7, sp, #0
 8107d22:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8107d24:	2300      	movs	r3, #0
 8107d26:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	2b00      	cmp	r3, #0
 8107d2c:	d101      	bne.n	8107d32 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8107d2e:	2301      	movs	r3, #1
 8107d30:	e0eb      	b.n	8107f0a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	2200      	movs	r2, #0
 8107d36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	681b      	ldr	r3, [r3, #0]
 8107d3c:	4a75      	ldr	r2, [pc, #468]	; (8107f14 <HAL_SPI_Init+0x1f8>)
 8107d3e:	4293      	cmp	r3, r2
 8107d40:	d00f      	beq.n	8107d62 <HAL_SPI_Init+0x46>
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	4a74      	ldr	r2, [pc, #464]	; (8107f18 <HAL_SPI_Init+0x1fc>)
 8107d48:	4293      	cmp	r3, r2
 8107d4a:	d00a      	beq.n	8107d62 <HAL_SPI_Init+0x46>
 8107d4c:	687b      	ldr	r3, [r7, #4]
 8107d4e:	681b      	ldr	r3, [r3, #0]
 8107d50:	4a72      	ldr	r2, [pc, #456]	; (8107f1c <HAL_SPI_Init+0x200>)
 8107d52:	4293      	cmp	r3, r2
 8107d54:	d005      	beq.n	8107d62 <HAL_SPI_Init+0x46>
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	68db      	ldr	r3, [r3, #12]
 8107d5a:	2b0f      	cmp	r3, #15
 8107d5c:	d901      	bls.n	8107d62 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8107d5e:	2301      	movs	r3, #1
 8107d60:	e0d3      	b.n	8107f0a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8107d62:	6878      	ldr	r0, [r7, #4]
 8107d64:	f000 fb94 	bl	8108490 <SPI_GetPacketSize>
 8107d68:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	681b      	ldr	r3, [r3, #0]
 8107d6e:	4a69      	ldr	r2, [pc, #420]	; (8107f14 <HAL_SPI_Init+0x1f8>)
 8107d70:	4293      	cmp	r3, r2
 8107d72:	d00c      	beq.n	8107d8e <HAL_SPI_Init+0x72>
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	681b      	ldr	r3, [r3, #0]
 8107d78:	4a67      	ldr	r2, [pc, #412]	; (8107f18 <HAL_SPI_Init+0x1fc>)
 8107d7a:	4293      	cmp	r3, r2
 8107d7c:	d007      	beq.n	8107d8e <HAL_SPI_Init+0x72>
 8107d7e:	687b      	ldr	r3, [r7, #4]
 8107d80:	681b      	ldr	r3, [r3, #0]
 8107d82:	4a66      	ldr	r2, [pc, #408]	; (8107f1c <HAL_SPI_Init+0x200>)
 8107d84:	4293      	cmp	r3, r2
 8107d86:	d002      	beq.n	8107d8e <HAL_SPI_Init+0x72>
 8107d88:	68bb      	ldr	r3, [r7, #8]
 8107d8a:	2b08      	cmp	r3, #8
 8107d8c:	d811      	bhi.n	8107db2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107d8e:	687b      	ldr	r3, [r7, #4]
 8107d90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107d92:	4a60      	ldr	r2, [pc, #384]	; (8107f14 <HAL_SPI_Init+0x1f8>)
 8107d94:	4293      	cmp	r3, r2
 8107d96:	d009      	beq.n	8107dac <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107d98:	687b      	ldr	r3, [r7, #4]
 8107d9a:	681b      	ldr	r3, [r3, #0]
 8107d9c:	4a5e      	ldr	r2, [pc, #376]	; (8107f18 <HAL_SPI_Init+0x1fc>)
 8107d9e:	4293      	cmp	r3, r2
 8107da0:	d004      	beq.n	8107dac <HAL_SPI_Init+0x90>
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	4a5d      	ldr	r2, [pc, #372]	; (8107f1c <HAL_SPI_Init+0x200>)
 8107da8:	4293      	cmp	r3, r2
 8107daa:	d104      	bne.n	8107db6 <HAL_SPI_Init+0x9a>
 8107dac:	68bb      	ldr	r3, [r7, #8]
 8107dae:	2b10      	cmp	r3, #16
 8107db0:	d901      	bls.n	8107db6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8107db2:	2301      	movs	r3, #1
 8107db4:	e0a9      	b.n	8107f0a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107dbc:	b2db      	uxtb	r3, r3
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d106      	bne.n	8107dd0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8107dc2:	687b      	ldr	r3, [r7, #4]
 8107dc4:	2200      	movs	r2, #0
 8107dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8107dca:	6878      	ldr	r0, [r7, #4]
 8107dcc:	f7f9 fa78 	bl	81012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	2202      	movs	r2, #2
 8107dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	681a      	ldr	r2, [r3, #0]
 8107dde:	687b      	ldr	r3, [r7, #4]
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	f022 0201 	bic.w	r2, r2, #1
 8107de6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	699b      	ldr	r3, [r3, #24]
 8107dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107df0:	d119      	bne.n	8107e26 <HAL_SPI_Init+0x10a>
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	685b      	ldr	r3, [r3, #4]
 8107df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107dfa:	d103      	bne.n	8107e04 <HAL_SPI_Init+0xe8>
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e00:	2b00      	cmp	r3, #0
 8107e02:	d008      	beq.n	8107e16 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107e08:	2b00      	cmp	r3, #0
 8107e0a:	d10c      	bne.n	8107e26 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e14:	d107      	bne.n	8107e26 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	681b      	ldr	r3, [r3, #0]
 8107e1a:	681a      	ldr	r2, [r3, #0]
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8107e24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107e26:	687b      	ldr	r3, [r7, #4]
 8107e28:	69da      	ldr	r2, [r3, #28]
 8107e2a:	687b      	ldr	r3, [r7, #4]
 8107e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107e2e:	431a      	orrs	r2, r3
 8107e30:	68fb      	ldr	r3, [r7, #12]
 8107e32:	431a      	orrs	r2, r3
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e38:	ea42 0103 	orr.w	r1, r2, r3
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	68da      	ldr	r2, [r3, #12]
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	681b      	ldr	r3, [r3, #0]
 8107e44:	430a      	orrs	r2, r1
 8107e46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107e50:	431a      	orrs	r2, r3
 8107e52:	687b      	ldr	r3, [r7, #4]
 8107e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e56:	431a      	orrs	r2, r3
 8107e58:	687b      	ldr	r3, [r7, #4]
 8107e5a:	699b      	ldr	r3, [r3, #24]
 8107e5c:	431a      	orrs	r2, r3
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	691b      	ldr	r3, [r3, #16]
 8107e62:	431a      	orrs	r2, r3
 8107e64:	687b      	ldr	r3, [r7, #4]
 8107e66:	695b      	ldr	r3, [r3, #20]
 8107e68:	431a      	orrs	r2, r3
 8107e6a:	687b      	ldr	r3, [r7, #4]
 8107e6c:	6a1b      	ldr	r3, [r3, #32]
 8107e6e:	431a      	orrs	r2, r3
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	685b      	ldr	r3, [r3, #4]
 8107e74:	431a      	orrs	r2, r3
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e7a:	431a      	orrs	r2, r3
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	689b      	ldr	r3, [r3, #8]
 8107e80:	431a      	orrs	r2, r3
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107e86:	ea42 0103 	orr.w	r1, r2, r3
 8107e8a:	687b      	ldr	r3, [r7, #4]
 8107e8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8107e8e:	687b      	ldr	r3, [r7, #4]
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	430a      	orrs	r2, r1
 8107e94:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8107e96:	687b      	ldr	r3, [r7, #4]
 8107e98:	685b      	ldr	r3, [r3, #4]
 8107e9a:	2b00      	cmp	r3, #0
 8107e9c:	d113      	bne.n	8107ec6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8107e9e:	687b      	ldr	r3, [r7, #4]
 8107ea0:	681b      	ldr	r3, [r3, #0]
 8107ea2:	689b      	ldr	r3, [r3, #8]
 8107ea4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	681b      	ldr	r3, [r3, #0]
 8107eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107eb0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107eb2:	687b      	ldr	r3, [r7, #4]
 8107eb4:	681b      	ldr	r3, [r3, #0]
 8107eb6:	689b      	ldr	r3, [r3, #8]
 8107eb8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	681b      	ldr	r3, [r3, #0]
 8107ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8107ec4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	681b      	ldr	r3, [r3, #0]
 8107eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	681b      	ldr	r3, [r3, #0]
 8107ed0:	f022 0201 	bic.w	r2, r2, #1
 8107ed4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107ed6:	687b      	ldr	r3, [r7, #4]
 8107ed8:	685b      	ldr	r3, [r3, #4]
 8107eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8107ede:	2b00      	cmp	r3, #0
 8107ee0:	d00a      	beq.n	8107ef8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	681b      	ldr	r3, [r3, #0]
 8107ee6:	68db      	ldr	r3, [r3, #12]
 8107ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	681b      	ldr	r3, [r3, #0]
 8107ef4:	430a      	orrs	r2, r1
 8107ef6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	2200      	movs	r2, #0
 8107efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	2201      	movs	r2, #1
 8107f04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8107f08:	2300      	movs	r3, #0
}
 8107f0a:	4618      	mov	r0, r3
 8107f0c:	3710      	adds	r7, #16
 8107f0e:	46bd      	mov	sp, r7
 8107f10:	bd80      	pop	{r7, pc}
 8107f12:	bf00      	nop
 8107f14:	40013000 	.word	0x40013000
 8107f18:	40003800 	.word	0x40003800
 8107f1c:	40003c00 	.word	0x40003c00

08107f20 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8107f20:	b580      	push	{r7, lr}
 8107f22:	b08a      	sub	sp, #40	; 0x28
 8107f24:	af00      	add	r7, sp, #0
 8107f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	691b      	ldr	r3, [r3, #16]
 8107f2e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	681b      	ldr	r3, [r3, #0]
 8107f34:	695b      	ldr	r3, [r3, #20]
 8107f36:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8107f38:	6a3a      	ldr	r2, [r7, #32]
 8107f3a:	69fb      	ldr	r3, [r7, #28]
 8107f3c:	4013      	ands	r3, r2
 8107f3e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8107f40:	687b      	ldr	r3, [r7, #4]
 8107f42:	681b      	ldr	r3, [r3, #0]
 8107f44:	689b      	ldr	r3, [r3, #8]
 8107f46:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8107f48:	2300      	movs	r3, #0
 8107f4a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8107f52:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	681b      	ldr	r3, [r3, #0]
 8107f58:	3330      	adds	r3, #48	; 0x30
 8107f5a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8107f5c:	69bb      	ldr	r3, [r7, #24]
 8107f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107f62:	2b00      	cmp	r3, #0
 8107f64:	d113      	bne.n	8107f8e <HAL_SPI_IRQHandler+0x6e>
 8107f66:	69bb      	ldr	r3, [r7, #24]
 8107f68:	f003 0320 	and.w	r3, r3, #32
 8107f6c:	2b00      	cmp	r3, #0
 8107f6e:	d10e      	bne.n	8107f8e <HAL_SPI_IRQHandler+0x6e>
 8107f70:	69bb      	ldr	r3, [r7, #24]
 8107f72:	f003 0304 	and.w	r3, r3, #4
 8107f76:	2b00      	cmp	r3, #0
 8107f78:	d009      	beq.n	8107f8e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107f7e:	6878      	ldr	r0, [r7, #4]
 8107f80:	4798      	blx	r3
    hspi->RxISR(hspi);
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107f86:	6878      	ldr	r0, [r7, #4]
 8107f88:	4798      	blx	r3
    handled = 1UL;
 8107f8a:	2301      	movs	r3, #1
 8107f8c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8107f8e:	69bb      	ldr	r3, [r7, #24]
 8107f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107f94:	2b00      	cmp	r3, #0
 8107f96:	d10f      	bne.n	8107fb8 <HAL_SPI_IRQHandler+0x98>
 8107f98:	69bb      	ldr	r3, [r7, #24]
 8107f9a:	f003 0301 	and.w	r3, r3, #1
 8107f9e:	2b00      	cmp	r3, #0
 8107fa0:	d00a      	beq.n	8107fb8 <HAL_SPI_IRQHandler+0x98>
 8107fa2:	69bb      	ldr	r3, [r7, #24]
 8107fa4:	f003 0304 	and.w	r3, r3, #4
 8107fa8:	2b00      	cmp	r3, #0
 8107faa:	d105      	bne.n	8107fb8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8107fac:	687b      	ldr	r3, [r7, #4]
 8107fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107fb0:	6878      	ldr	r0, [r7, #4]
 8107fb2:	4798      	blx	r3
    handled = 1UL;
 8107fb4:	2301      	movs	r3, #1
 8107fb6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8107fb8:	69bb      	ldr	r3, [r7, #24]
 8107fba:	f003 0320 	and.w	r3, r3, #32
 8107fbe:	2b00      	cmp	r3, #0
 8107fc0:	d10f      	bne.n	8107fe2 <HAL_SPI_IRQHandler+0xc2>
 8107fc2:	69bb      	ldr	r3, [r7, #24]
 8107fc4:	f003 0302 	and.w	r3, r3, #2
 8107fc8:	2b00      	cmp	r3, #0
 8107fca:	d00a      	beq.n	8107fe2 <HAL_SPI_IRQHandler+0xc2>
 8107fcc:	69bb      	ldr	r3, [r7, #24]
 8107fce:	f003 0304 	and.w	r3, r3, #4
 8107fd2:	2b00      	cmp	r3, #0
 8107fd4:	d105      	bne.n	8107fe2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107fda:	6878      	ldr	r0, [r7, #4]
 8107fdc:	4798      	blx	r3
    handled = 1UL;
 8107fde:	2301      	movs	r3, #1
 8107fe0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8107fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107fe4:	2b00      	cmp	r3, #0
 8107fe6:	f040 8171 	bne.w	81082cc <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8107fea:	69bb      	ldr	r3, [r7, #24]
 8107fec:	f003 0308 	and.w	r3, r3, #8
 8107ff0:	2b00      	cmp	r3, #0
 8107ff2:	f000 80a0 	beq.w	8108136 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	681b      	ldr	r3, [r3, #0]
 8107ffa:	699a      	ldr	r2, [r3, #24]
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	681b      	ldr	r3, [r3, #0]
 8108000:	f042 0208 	orr.w	r2, r2, #8
 8108004:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	699a      	ldr	r2, [r3, #24]
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	681b      	ldr	r3, [r3, #0]
 8108010:	f042 0210 	orr.w	r2, r2, #16
 8108014:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8108016:	687b      	ldr	r3, [r7, #4]
 8108018:	681b      	ldr	r3, [r3, #0]
 810801a:	699a      	ldr	r2, [r3, #24]
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108024:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	681b      	ldr	r3, [r3, #0]
 810802a:	691a      	ldr	r2, [r3, #16]
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	681b      	ldr	r3, [r3, #0]
 8108030:	f022 0208 	bic.w	r2, r2, #8
 8108034:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8108036:	697b      	ldr	r3, [r7, #20]
 8108038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810803c:	2b00      	cmp	r3, #0
 810803e:	d00f      	beq.n	8108060 <HAL_SPI_IRQHandler+0x140>
 8108040:	7cfb      	ldrb	r3, [r7, #19]
 8108042:	2b04      	cmp	r3, #4
 8108044:	d004      	beq.n	8108050 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810804a:	69db      	ldr	r3, [r3, #28]
 810804c:	2b00      	cmp	r3, #0
 810804e:	d007      	beq.n	8108060 <HAL_SPI_IRQHandler+0x140>
 8108050:	7cfb      	ldrb	r3, [r7, #19]
 8108052:	2b03      	cmp	r3, #3
 8108054:	d059      	beq.n	810810a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810805a:	69db      	ldr	r3, [r3, #28]
 810805c:	2b00      	cmp	r3, #0
 810805e:	d154      	bne.n	810810a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	681b      	ldr	r3, [r3, #0]
 8108064:	689b      	ldr	r3, [r3, #8]
 8108066:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810806a:	2b00      	cmp	r3, #0
 810806c:	d13d      	bne.n	81080ea <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810806e:	e036      	b.n	81080de <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	68db      	ldr	r3, [r3, #12]
 8108074:	2b0f      	cmp	r3, #15
 8108076:	d90b      	bls.n	8108090 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	681a      	ldr	r2, [r3, #0]
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8108082:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8108084:	687b      	ldr	r3, [r7, #4]
 8108086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108088:	1d1a      	adds	r2, r3, #4
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	665a      	str	r2, [r3, #100]	; 0x64
 810808e:	e01d      	b.n	81080cc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	68db      	ldr	r3, [r3, #12]
 8108094:	2b07      	cmp	r3, #7
 8108096:	d90b      	bls.n	81080b0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810809c:	68fa      	ldr	r2, [r7, #12]
 810809e:	8812      	ldrh	r2, [r2, #0]
 81080a0:	b292      	uxth	r2, r2
 81080a2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 81080a4:	687b      	ldr	r3, [r7, #4]
 81080a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81080a8:	1c9a      	adds	r2, r3, #2
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	665a      	str	r2, [r3, #100]	; 0x64
 81080ae:	e00d      	b.n	81080cc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81080bc:	7812      	ldrb	r2, [r2, #0]
 81080be:	b2d2      	uxtb	r2, r2
 81080c0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81080c6:	1c5a      	adds	r2, r3, #1
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81080d2:	b29b      	uxth	r3, r3
 81080d4:	3b01      	subs	r3, #1
 81080d6:	b29a      	uxth	r2, r3
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81080e4:	b29b      	uxth	r3, r3
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d1c2      	bne.n	8108070 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 81080ea:	6878      	ldr	r0, [r7, #4]
 81080ec:	f000 f930 	bl	8108350 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 81080f0:	687b      	ldr	r3, [r7, #4]
 81080f2:	2201      	movs	r2, #1
 81080f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81080fe:	2b00      	cmp	r3, #0
 8108100:	d003      	beq.n	810810a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8108102:	6878      	ldr	r0, [r7, #4]
 8108104:	f000 f900 	bl	8108308 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8108108:	e0e5      	b.n	81082d6 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810810a:	7cfb      	ldrb	r3, [r7, #19]
 810810c:	2b05      	cmp	r3, #5
 810810e:	d103      	bne.n	8108118 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8108110:	6878      	ldr	r0, [r7, #4]
 8108112:	f7f8 f8fd 	bl	8100310 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8108116:	e0db      	b.n	81082d0 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8108118:	7cfb      	ldrb	r3, [r7, #19]
 810811a:	2b04      	cmp	r3, #4
 810811c:	d103      	bne.n	8108126 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810811e:	6878      	ldr	r0, [r7, #4]
 8108120:	f000 f8e8 	bl	81082f4 <HAL_SPI_RxCpltCallback>
    return;
 8108124:	e0d4      	b.n	81082d0 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8108126:	7cfb      	ldrb	r3, [r7, #19]
 8108128:	2b03      	cmp	r3, #3
 810812a:	f040 80d1 	bne.w	81082d0 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810812e:	6878      	ldr	r0, [r7, #4]
 8108130:	f000 f8d6 	bl	81082e0 <HAL_SPI_TxCpltCallback>
    return;
 8108134:	e0cc      	b.n	81082d0 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8108136:	69fb      	ldr	r3, [r7, #28]
 8108138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810813c:	2b00      	cmp	r3, #0
 810813e:	d00d      	beq.n	810815c <HAL_SPI_IRQHandler+0x23c>
 8108140:	6a3b      	ldr	r3, [r7, #32]
 8108142:	f003 0308 	and.w	r3, r3, #8
 8108146:	2b00      	cmp	r3, #0
 8108148:	d008      	beq.n	810815c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	681b      	ldr	r3, [r3, #0]
 810814e:	699a      	ldr	r2, [r3, #24]
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	681b      	ldr	r3, [r3, #0]
 8108154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108158:	619a      	str	r2, [r3, #24]

    return;
 810815a:	e0bc      	b.n	81082d6 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810815c:	69bb      	ldr	r3, [r7, #24]
 810815e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8108162:	2b00      	cmp	r3, #0
 8108164:	f000 80b7 	beq.w	81082d6 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8108168:	69bb      	ldr	r3, [r7, #24]
 810816a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810816e:	2b00      	cmp	r3, #0
 8108170:	d00f      	beq.n	8108192 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108178:	f043 0204 	orr.w	r2, r3, #4
 810817c:	687b      	ldr	r3, [r7, #4]
 810817e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8108182:	687b      	ldr	r3, [r7, #4]
 8108184:	681b      	ldr	r3, [r3, #0]
 8108186:	699a      	ldr	r2, [r3, #24]
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108190:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8108192:	69bb      	ldr	r3, [r7, #24]
 8108194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108198:	2b00      	cmp	r3, #0
 810819a:	d00f      	beq.n	81081bc <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081a2:	f043 0201 	orr.w	r2, r3, #1
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81081ac:	687b      	ldr	r3, [r7, #4]
 81081ae:	681b      	ldr	r3, [r3, #0]
 81081b0:	699a      	ldr	r2, [r3, #24]
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	681b      	ldr	r3, [r3, #0]
 81081b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81081ba:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 81081bc:	69bb      	ldr	r3, [r7, #24]
 81081be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81081c2:	2b00      	cmp	r3, #0
 81081c4:	d00f      	beq.n	81081e6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81081c6:	687b      	ldr	r3, [r7, #4]
 81081c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081cc:	f043 0208 	orr.w	r2, r3, #8
 81081d0:	687b      	ldr	r3, [r7, #4]
 81081d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 81081d6:	687b      	ldr	r3, [r7, #4]
 81081d8:	681b      	ldr	r3, [r3, #0]
 81081da:	699a      	ldr	r2, [r3, #24]
 81081dc:	687b      	ldr	r3, [r7, #4]
 81081de:	681b      	ldr	r3, [r3, #0]
 81081e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81081e4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 81081e6:	69bb      	ldr	r3, [r7, #24]
 81081e8:	f003 0320 	and.w	r3, r3, #32
 81081ec:	2b00      	cmp	r3, #0
 81081ee:	d00f      	beq.n	8108210 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81081f0:	687b      	ldr	r3, [r7, #4]
 81081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81081f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81081fa:	687b      	ldr	r3, [r7, #4]
 81081fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	681b      	ldr	r3, [r3, #0]
 8108204:	699a      	ldr	r2, [r3, #24]
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	f042 0220 	orr.w	r2, r2, #32
 810820e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108216:	2b00      	cmp	r3, #0
 8108218:	d05c      	beq.n	81082d4 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	681b      	ldr	r3, [r3, #0]
 810821e:	681a      	ldr	r2, [r3, #0]
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	f022 0201 	bic.w	r2, r2, #1
 8108228:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810822a:	687b      	ldr	r3, [r7, #4]
 810822c:	681b      	ldr	r3, [r3, #0]
 810822e:	691b      	ldr	r3, [r3, #16]
 8108230:	687a      	ldr	r2, [r7, #4]
 8108232:	6812      	ldr	r2, [r2, #0]
 8108234:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 8108238:	f023 0303 	bic.w	r3, r3, #3
 810823c:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810823e:	697b      	ldr	r3, [r7, #20]
 8108240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8108244:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8108248:	d138      	bne.n	81082bc <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810824a:	687b      	ldr	r3, [r7, #4]
 810824c:	681b      	ldr	r3, [r3, #0]
 810824e:	689a      	ldr	r2, [r3, #8]
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	681b      	ldr	r3, [r3, #0]
 8108254:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8108258:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810825e:	2b00      	cmp	r3, #0
 8108260:	d013      	beq.n	810828a <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108266:	4a1d      	ldr	r2, [pc, #116]	; (81082dc <HAL_SPI_IRQHandler+0x3bc>)
 8108268:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810826a:	687b      	ldr	r3, [r7, #4]
 810826c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810826e:	4618      	mov	r0, r3
 8108270:	f7fa f9e8 	bl	8102644 <HAL_DMA_Abort_IT>
 8108274:	4603      	mov	r3, r0
 8108276:	2b00      	cmp	r3, #0
 8108278:	d007      	beq.n	810828a <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810827a:	687b      	ldr	r3, [r7, #4]
 810827c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8108284:	687b      	ldr	r3, [r7, #4]
 8108286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810828a:	687b      	ldr	r3, [r7, #4]
 810828c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810828e:	2b00      	cmp	r3, #0
 8108290:	d020      	beq.n	81082d4 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8108292:	687b      	ldr	r3, [r7, #4]
 8108294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108296:	4a11      	ldr	r2, [pc, #68]	; (81082dc <HAL_SPI_IRQHandler+0x3bc>)
 8108298:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810829a:	687b      	ldr	r3, [r7, #4]
 810829c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810829e:	4618      	mov	r0, r3
 81082a0:	f7fa f9d0 	bl	8102644 <HAL_DMA_Abort_IT>
 81082a4:	4603      	mov	r3, r0
 81082a6:	2b00      	cmp	r3, #0
 81082a8:	d014      	beq.n	81082d4 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81082aa:	687b      	ldr	r3, [r7, #4]
 81082ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81082b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81082b4:	687b      	ldr	r3, [r7, #4]
 81082b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 81082ba:	e00b      	b.n	81082d4 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 81082bc:	687b      	ldr	r3, [r7, #4]
 81082be:	2201      	movs	r2, #1
 81082c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 81082c4:	6878      	ldr	r0, [r7, #4]
 81082c6:	f000 f81f 	bl	8108308 <HAL_SPI_ErrorCallback>
    return;
 81082ca:	e003      	b.n	81082d4 <HAL_SPI_IRQHandler+0x3b4>
    return;
 81082cc:	bf00      	nop
 81082ce:	e002      	b.n	81082d6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 81082d0:	bf00      	nop
 81082d2:	e000      	b.n	81082d6 <HAL_SPI_IRQHandler+0x3b6>
    return;
 81082d4:	bf00      	nop
  }
}
 81082d6:	3728      	adds	r7, #40	; 0x28
 81082d8:	46bd      	mov	sp, r7
 81082da:	bd80      	pop	{r7, pc}
 81082dc:	0810831d 	.word	0x0810831d

081082e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81082e0:	b480      	push	{r7}
 81082e2:	b083      	sub	sp, #12
 81082e4:	af00      	add	r7, sp, #0
 81082e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 81082e8:	bf00      	nop
 81082ea:	370c      	adds	r7, #12
 81082ec:	46bd      	mov	sp, r7
 81082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082f2:	4770      	bx	lr

081082f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 81082f4:	b480      	push	{r7}
 81082f6:	b083      	sub	sp, #12
 81082f8:	af00      	add	r7, sp, #0
 81082fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 81082fc:	bf00      	nop
 81082fe:	370c      	adds	r7, #12
 8108300:	46bd      	mov	sp, r7
 8108302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108306:	4770      	bx	lr

08108308 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8108308:	b480      	push	{r7}
 810830a:	b083      	sub	sp, #12
 810830c:	af00      	add	r7, sp, #0
 810830e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8108310:	bf00      	nop
 8108312:	370c      	adds	r7, #12
 8108314:	46bd      	mov	sp, r7
 8108316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810831a:	4770      	bx	lr

0810831c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810831c:	b580      	push	{r7, lr}
 810831e:	b084      	sub	sp, #16
 8108320:	af00      	add	r7, sp, #0
 8108322:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8108324:	687b      	ldr	r3, [r7, #4]
 8108326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108328:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810832a:	68fb      	ldr	r3, [r7, #12]
 810832c:	2200      	movs	r2, #0
 810832e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8108332:	68fb      	ldr	r3, [r7, #12]
 8108334:	2200      	movs	r2, #0
 8108336:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810833a:	68fb      	ldr	r3, [r7, #12]
 810833c:	2201      	movs	r2, #1
 810833e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8108342:	68f8      	ldr	r0, [r7, #12]
 8108344:	f7ff ffe0 	bl	8108308 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8108348:	bf00      	nop
 810834a:	3710      	adds	r7, #16
 810834c:	46bd      	mov	sp, r7
 810834e:	bd80      	pop	{r7, pc}

08108350 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8108350:	b480      	push	{r7}
 8108352:	b085      	sub	sp, #20
 8108354:	af00      	add	r7, sp, #0
 8108356:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	681b      	ldr	r3, [r3, #0]
 810835c:	695b      	ldr	r3, [r3, #20]
 810835e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	699a      	ldr	r2, [r3, #24]
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	681b      	ldr	r3, [r3, #0]
 810836a:	f042 0208 	orr.w	r2, r2, #8
 810836e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	699a      	ldr	r2, [r3, #24]
 8108376:	687b      	ldr	r3, [r7, #4]
 8108378:	681b      	ldr	r3, [r3, #0]
 810837a:	f042 0210 	orr.w	r2, r2, #16
 810837e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	681b      	ldr	r3, [r3, #0]
 8108384:	681a      	ldr	r2, [r3, #0]
 8108386:	687b      	ldr	r3, [r7, #4]
 8108388:	681b      	ldr	r3, [r3, #0]
 810838a:	f022 0201 	bic.w	r2, r2, #1
 810838e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8108390:	687b      	ldr	r3, [r7, #4]
 8108392:	681b      	ldr	r3, [r3, #0]
 8108394:	691b      	ldr	r3, [r3, #16]
 8108396:	687a      	ldr	r2, [r7, #4]
 8108398:	6812      	ldr	r2, [r2, #0]
 810839a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810839e:	f023 0303 	bic.w	r3, r3, #3
 81083a2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81083a4:	687b      	ldr	r3, [r7, #4]
 81083a6:	681b      	ldr	r3, [r3, #0]
 81083a8:	689a      	ldr	r2, [r3, #8]
 81083aa:	687b      	ldr	r3, [r7, #4]
 81083ac:	681b      	ldr	r3, [r3, #0]
 81083ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81083b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81083b4:	687b      	ldr	r3, [r7, #4]
 81083b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81083ba:	b2db      	uxtb	r3, r3
 81083bc:	2b04      	cmp	r3, #4
 81083be:	d014      	beq.n	81083ea <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81083c0:	68fb      	ldr	r3, [r7, #12]
 81083c2:	f003 0320 	and.w	r3, r3, #32
 81083c6:	2b00      	cmp	r3, #0
 81083c8:	d00f      	beq.n	81083ea <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81083d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	681b      	ldr	r3, [r3, #0]
 81083de:	699a      	ldr	r2, [r3, #24]
 81083e0:	687b      	ldr	r3, [r7, #4]
 81083e2:	681b      	ldr	r3, [r3, #0]
 81083e4:	f042 0220 	orr.w	r2, r2, #32
 81083e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81083ea:	687b      	ldr	r3, [r7, #4]
 81083ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81083f0:	b2db      	uxtb	r3, r3
 81083f2:	2b03      	cmp	r3, #3
 81083f4:	d014      	beq.n	8108420 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81083f6:	68fb      	ldr	r3, [r7, #12]
 81083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	d00f      	beq.n	8108420 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108406:	f043 0204 	orr.w	r2, r3, #4
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8108410:	687b      	ldr	r3, [r7, #4]
 8108412:	681b      	ldr	r3, [r3, #0]
 8108414:	699a      	ldr	r2, [r3, #24]
 8108416:	687b      	ldr	r3, [r7, #4]
 8108418:	681b      	ldr	r3, [r3, #0]
 810841a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810841e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8108420:	68fb      	ldr	r3, [r7, #12]
 8108422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108426:	2b00      	cmp	r3, #0
 8108428:	d00f      	beq.n	810844a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810842a:	687b      	ldr	r3, [r7, #4]
 810842c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108430:	f043 0201 	orr.w	r2, r3, #1
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810843a:	687b      	ldr	r3, [r7, #4]
 810843c:	681b      	ldr	r3, [r3, #0]
 810843e:	699a      	ldr	r2, [r3, #24]
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	681b      	ldr	r3, [r3, #0]
 8108444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8108448:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810844a:	68fb      	ldr	r3, [r7, #12]
 810844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108450:	2b00      	cmp	r3, #0
 8108452:	d00f      	beq.n	8108474 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8108454:	687b      	ldr	r3, [r7, #4]
 8108456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810845a:	f043 0208 	orr.w	r2, r3, #8
 810845e:	687b      	ldr	r3, [r7, #4]
 8108460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	681b      	ldr	r3, [r3, #0]
 8108468:	699a      	ldr	r2, [r3, #24]
 810846a:	687b      	ldr	r3, [r7, #4]
 810846c:	681b      	ldr	r3, [r3, #0]
 810846e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8108472:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	2200      	movs	r2, #0
 8108478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	2200      	movs	r2, #0
 8108480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8108484:	bf00      	nop
 8108486:	3714      	adds	r7, #20
 8108488:	46bd      	mov	sp, r7
 810848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810848e:	4770      	bx	lr

08108490 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8108490:	b480      	push	{r7}
 8108492:	b085      	sub	sp, #20
 8108494:	af00      	add	r7, sp, #0
 8108496:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8108498:	687b      	ldr	r3, [r7, #4]
 810849a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810849c:	095b      	lsrs	r3, r3, #5
 810849e:	3301      	adds	r3, #1
 81084a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	68db      	ldr	r3, [r3, #12]
 81084a6:	3301      	adds	r3, #1
 81084a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81084aa:	68bb      	ldr	r3, [r7, #8]
 81084ac:	3307      	adds	r3, #7
 81084ae:	08db      	lsrs	r3, r3, #3
 81084b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81084b2:	68bb      	ldr	r3, [r7, #8]
 81084b4:	68fa      	ldr	r2, [r7, #12]
 81084b6:	fb02 f303 	mul.w	r3, r2, r3
}
 81084ba:	4618      	mov	r0, r3
 81084bc:	3714      	adds	r7, #20
 81084be:	46bd      	mov	sp, r7
 81084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084c4:	4770      	bx	lr
	...

081084c8 <__libc_init_array>:
 81084c8:	b570      	push	{r4, r5, r6, lr}
 81084ca:	4d0d      	ldr	r5, [pc, #52]	; (8108500 <__libc_init_array+0x38>)
 81084cc:	4c0d      	ldr	r4, [pc, #52]	; (8108504 <__libc_init_array+0x3c>)
 81084ce:	1b64      	subs	r4, r4, r5
 81084d0:	10a4      	asrs	r4, r4, #2
 81084d2:	2600      	movs	r6, #0
 81084d4:	42a6      	cmp	r6, r4
 81084d6:	d109      	bne.n	81084ec <__libc_init_array+0x24>
 81084d8:	4d0b      	ldr	r5, [pc, #44]	; (8108508 <__libc_init_array+0x40>)
 81084da:	4c0c      	ldr	r4, [pc, #48]	; (810850c <__libc_init_array+0x44>)
 81084dc:	f000 f820 	bl	8108520 <_init>
 81084e0:	1b64      	subs	r4, r4, r5
 81084e2:	10a4      	asrs	r4, r4, #2
 81084e4:	2600      	movs	r6, #0
 81084e6:	42a6      	cmp	r6, r4
 81084e8:	d105      	bne.n	81084f6 <__libc_init_array+0x2e>
 81084ea:	bd70      	pop	{r4, r5, r6, pc}
 81084ec:	f855 3b04 	ldr.w	r3, [r5], #4
 81084f0:	4798      	blx	r3
 81084f2:	3601      	adds	r6, #1
 81084f4:	e7ee      	b.n	81084d4 <__libc_init_array+0xc>
 81084f6:	f855 3b04 	ldr.w	r3, [r5], #4
 81084fa:	4798      	blx	r3
 81084fc:	3601      	adds	r6, #1
 81084fe:	e7f2      	b.n	81084e6 <__libc_init_array+0x1e>
 8108500:	08108550 	.word	0x08108550
 8108504:	08108550 	.word	0x08108550
 8108508:	08108550 	.word	0x08108550
 810850c:	08108554 	.word	0x08108554

08108510 <memset>:
 8108510:	4402      	add	r2, r0
 8108512:	4603      	mov	r3, r0
 8108514:	4293      	cmp	r3, r2
 8108516:	d100      	bne.n	810851a <memset+0xa>
 8108518:	4770      	bx	lr
 810851a:	f803 1b01 	strb.w	r1, [r3], #1
 810851e:	e7f9      	b.n	8108514 <memset+0x4>

08108520 <_init>:
 8108520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108522:	bf00      	nop
 8108524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108526:	bc08      	pop	{r3}
 8108528:	469e      	mov	lr, r3
 810852a:	4770      	bx	lr

0810852c <_fini>:
 810852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810852e:	bf00      	nop
 8108530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108532:	bc08      	pop	{r3}
 8108534:	469e      	mov	lr, r3
 8108536:	4770      	bx	lr
