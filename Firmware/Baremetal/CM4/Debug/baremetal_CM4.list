
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9e4  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0810dc80  0810dc80  0001dc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810dd90  0810dd90  0001dd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810dd98  0810dd98  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810dd9c  0810dd9c  0001dd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  10000000  0810dda0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000664  1000008c  0810de2c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100006f0  0810de2c  000206f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032543  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f1a  00000000  00000000  000525ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001748  00000000  00000000  00057520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015b0  00000000  00000000  00058c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d348  00000000  00000000  0005a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000202f5  00000000  00000000  00097560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018fa5e  00000000  00000000  000b7855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002472b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065f0  00000000  00000000  00247308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000008c 	.word	0x1000008c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810dc64 	.word	0x0810dc64

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000090 	.word	0x10000090
 81002d4:	0810dc64 	.word	0x0810dc64

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <CheckBMP280ChipID>:

int flag = 0;


uint8_t CheckBMP280ChipID()
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b082      	sub	sp, #8
 8101240:	af00      	add	r7, sp, #0
  uint8_t SerialData[3] = {(BMP280_REG_ID | 0x80), 0, 0};
 8101242:	4a19      	ldr	r2, [pc, #100]	; (81012a8 <CheckBMP280ChipID+0x6c>)
 8101244:	1d3b      	adds	r3, r7, #4
 8101246:	6812      	ldr	r2, [r2, #0]
 8101248:	4611      	mov	r1, r2
 810124a:	8019      	strh	r1, [r3, #0]
 810124c:	3302      	adds	r3, #2
 810124e:	0c12      	lsrs	r2, r2, #16
 8101250:	701a      	strb	r2, [r3, #0]
  volatile uint8_t aRxBuffer[3]= {0};
 8101252:	4b16      	ldr	r3, [pc, #88]	; (81012ac <CheckBMP280ChipID+0x70>)
 8101254:	881b      	ldrh	r3, [r3, #0]
 8101256:	803b      	strh	r3, [r7, #0]
 8101258:	2300      	movs	r3, #0
 810125a:	70bb      	strb	r3, [r7, #2]

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 810125c:	2200      	movs	r2, #0
 810125e:	2110      	movs	r1, #16
 8101260:	4813      	ldr	r0, [pc, #76]	; (81012b0 <CheckBMP280ChipID+0x74>)
 8101262:	f005 ff39 	bl	81070d8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8101266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810126a:	f002 faf9 	bl	8103860 <HAL_Delay>
  if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 2) == HAL_OK)
 810126e:	463a      	mov	r2, r7
 8101270:	1d39      	adds	r1, r7, #4
 8101272:	2302      	movs	r3, #2
 8101274:	480f      	ldr	r0, [pc, #60]	; (81012b4 <CheckBMP280ChipID+0x78>)
 8101276:	f009 fa21 	bl	810a6bc <HAL_SPI_TransmitReceive_DMA>
 810127a:	4603      	mov	r3, r0
 810127c:	2b00      	cmp	r3, #0
 810127e:	d10a      	bne.n	8101296 <CheckBMP280ChipID+0x5a>
  {
   while(flag == 1)
 8101280:	e005      	b.n	810128e <CheckBMP280ChipID+0x52>
    {
      if(aRxBuffer[1] != BMP280_CHIP_ID)
 8101282:	787b      	ldrb	r3, [r7, #1]
 8101284:	b2db      	uxtb	r3, r3
 8101286:	2b58      	cmp	r3, #88	; 0x58
 8101288:	d001      	beq.n	810128e <CheckBMP280ChipID+0x52>
      {
        return HAL_ERROR;
 810128a:	2301      	movs	r3, #1
 810128c:	e007      	b.n	810129e <CheckBMP280ChipID+0x62>
   while(flag == 1)
 810128e:	4b0a      	ldr	r3, [pc, #40]	; (81012b8 <CheckBMP280ChipID+0x7c>)
 8101290:	681b      	ldr	r3, [r3, #0]
 8101292:	2b01      	cmp	r3, #1
 8101294:	d0f5      	beq.n	8101282 <CheckBMP280ChipID+0x46>
      }
    }

  }

  flag = 0;
 8101296:	4b08      	ldr	r3, [pc, #32]	; (81012b8 <CheckBMP280ChipID+0x7c>)
 8101298:	2200      	movs	r2, #0
 810129a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 810129c:	2300      	movs	r3, #0

}
 810129e:	4618      	mov	r0, r3
 81012a0:	3708      	adds	r7, #8
 81012a2:	46bd      	mov	sp, r7
 81012a4:	bd80      	pop	{r7, pc}
 81012a6:	bf00      	nop
 81012a8:	0810dc80 	.word	0x0810dc80
 81012ac:	0810dc84 	.word	0x0810dc84
 81012b0:	58020000 	.word	0x58020000
 81012b4:	100003f4 	.word	0x100003f4
 81012b8:	100000a8 	.word	0x100000a8

081012bc <Read16Bit>:
{
  return HAL_OK;
}

uint16_t Read16Bit(uint8_t reg)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b084      	sub	sp, #16
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	4603      	mov	r3, r0
 81012c4:	71fb      	strb	r3, [r7, #7]
   uint16_t result;
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81012c6:	2200      	movs	r2, #0
 81012c8:	2110      	movs	r1, #16
 81012ca:	4815      	ldr	r0, [pc, #84]	; (8101320 <Read16Bit+0x64>)
 81012cc:	f005 ff04 	bl	81070d8 <HAL_GPIO_WritePin>
   uint8_t SerialData[3] = {(reg|0x80), 0, 0};
 81012d0:	79fb      	ldrb	r3, [r7, #7]
 81012d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81012d6:	b2db      	uxtb	r3, r3
 81012d8:	723b      	strb	r3, [r7, #8]
 81012da:	2300      	movs	r3, #0
 81012dc:	727b      	strb	r3, [r7, #9]
 81012de:	2300      	movs	r3, #0
 81012e0:	72bb      	strb	r3, [r7, #10]
   static uint8_t aRxBuffer[3]= {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 3);
 81012e2:	f107 0108 	add.w	r1, r7, #8
 81012e6:	2303      	movs	r3, #3
 81012e8:	4a0e      	ldr	r2, [pc, #56]	; (8101324 <Read16Bit+0x68>)
 81012ea:	480f      	ldr	r0, [pc, #60]	; (8101328 <Read16Bit+0x6c>)
 81012ec:	f009 f9e6 	bl	810a6bc <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 81012f0:	e00c      	b.n	810130c <Read16Bit+0x50>
   {
     result = aRxBuffer[2] << 8 | aRxBuffer [1];
 81012f2:	4b0c      	ldr	r3, [pc, #48]	; (8101324 <Read16Bit+0x68>)
 81012f4:	789b      	ldrb	r3, [r3, #2]
 81012f6:	021b      	lsls	r3, r3, #8
 81012f8:	b21a      	sxth	r2, r3
 81012fa:	4b0a      	ldr	r3, [pc, #40]	; (8101324 <Read16Bit+0x68>)
 81012fc:	785b      	ldrb	r3, [r3, #1]
 81012fe:	b21b      	sxth	r3, r3
 8101300:	4313      	orrs	r3, r2
 8101302:	b21b      	sxth	r3, r3
 8101304:	81fb      	strh	r3, [r7, #14]
     flag = 0;
 8101306:	4b09      	ldr	r3, [pc, #36]	; (810132c <Read16Bit+0x70>)
 8101308:	2200      	movs	r2, #0
 810130a:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 810130c:	4b07      	ldr	r3, [pc, #28]	; (810132c <Read16Bit+0x70>)
 810130e:	681b      	ldr	r3, [r3, #0]
 8101310:	2b01      	cmp	r3, #1
 8101312:	d0ee      	beq.n	81012f2 <Read16Bit+0x36>

   }


   return result;
 8101314:	89fb      	ldrh	r3, [r7, #14]
}
 8101316:	4618      	mov	r0, r3
 8101318:	3710      	adds	r7, #16
 810131a:	46bd      	mov	sp, r7
 810131c:	bd80      	pop	{r7, pc}
 810131e:	bf00      	nop
 8101320:	58020000 	.word	0x58020000
 8101324:	100000ac 	.word	0x100000ac
 8101328:	100003f4 	.word	0x100003f4
 810132c:	100000a8 	.word	0x100000a8

08101330 <Read24Bit>:


uint32_t Read24Bit(uint8_t reg)
{
 8101330:	b580      	push	{r7, lr}
 8101332:	b084      	sub	sp, #16
 8101334:	af00      	add	r7, sp, #0
 8101336:	4603      	mov	r3, r0
 8101338:	71fb      	strb	r3, [r7, #7]
  uint32_t result;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810133a:	2200      	movs	r2, #0
 810133c:	2110      	movs	r1, #16
 810133e:	4817      	ldr	r0, [pc, #92]	; (810139c <Read24Bit+0x6c>)
 8101340:	f005 feca 	bl	81070d8 <HAL_GPIO_WritePin>
  uint8_t SerialData[4] = {(reg|0x80), 0, 0,0};
 8101344:	79fb      	ldrb	r3, [r7, #7]
 8101346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810134a:	b2db      	uxtb	r3, r3
 810134c:	723b      	strb	r3, [r7, #8]
 810134e:	2300      	movs	r3, #0
 8101350:	727b      	strb	r3, [r7, #9]
 8101352:	2300      	movs	r3, #0
 8101354:	72bb      	strb	r3, [r7, #10]
 8101356:	2300      	movs	r3, #0
 8101358:	72fb      	strb	r3, [r7, #11]
  static uint8_t aRxBuffer[4] = {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 4);
 810135a:	f107 0108 	add.w	r1, r7, #8
 810135e:	2304      	movs	r3, #4
 8101360:	4a0f      	ldr	r2, [pc, #60]	; (81013a0 <Read24Bit+0x70>)
 8101362:	4810      	ldr	r0, [pc, #64]	; (81013a4 <Read24Bit+0x74>)
 8101364:	f009 f9aa 	bl	810a6bc <HAL_SPI_TransmitReceive_DMA>
  while(flag == 1)
 8101368:	e00f      	b.n	810138a <Read24Bit+0x5a>
     {
        result = aRxBuffer[1] << 16 | aRxBuffer[2] << 8 | aRxBuffer[3] >> 4;
 810136a:	4b0d      	ldr	r3, [pc, #52]	; (81013a0 <Read24Bit+0x70>)
 810136c:	785b      	ldrb	r3, [r3, #1]
 810136e:	041a      	lsls	r2, r3, #16
 8101370:	4b0b      	ldr	r3, [pc, #44]	; (81013a0 <Read24Bit+0x70>)
 8101372:	789b      	ldrb	r3, [r3, #2]
 8101374:	021b      	lsls	r3, r3, #8
 8101376:	4313      	orrs	r3, r2
 8101378:	4a09      	ldr	r2, [pc, #36]	; (81013a0 <Read24Bit+0x70>)
 810137a:	78d2      	ldrb	r2, [r2, #3]
 810137c:	0912      	lsrs	r2, r2, #4
 810137e:	b2d2      	uxtb	r2, r2
 8101380:	4313      	orrs	r3, r2
 8101382:	60fb      	str	r3, [r7, #12]
        flag = 0;
 8101384:	4b08      	ldr	r3, [pc, #32]	; (81013a8 <Read24Bit+0x78>)
 8101386:	2200      	movs	r2, #0
 8101388:	601a      	str	r2, [r3, #0]
  while(flag == 1)
 810138a:	4b07      	ldr	r3, [pc, #28]	; (81013a8 <Read24Bit+0x78>)
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	2b01      	cmp	r3, #1
 8101390:	d0eb      	beq.n	810136a <Read24Bit+0x3a>
     }


  return result;
 8101392:	68fb      	ldr	r3, [r7, #12]
}
 8101394:	4618      	mov	r0, r3
 8101396:	3710      	adds	r7, #16
 8101398:	46bd      	mov	sp, r7
 810139a:	bd80      	pop	{r7, pc}
 810139c:	58020000 	.word	0x58020000
 81013a0:	100000b0 	.word	0x100000b0
 81013a4:	100003f4 	.word	0x100003f4
 81013a8:	100000a8 	.word	0x100000a8

081013ac <ReadTemp>:

void ReadTemp(BMP280Handle* baro)
{
 81013ac:	b580      	push	{r7, lr}
 81013ae:	b086      	sub	sp, #24
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 81013b4:	20fa      	movs	r0, #250	; 0xfa
 81013b6:	f7ff ffbb 	bl	8101330 <Read24Bit>
 81013ba:	4603      	mov	r3, r0
 81013bc:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 81013be:	697b      	ldr	r3, [r7, #20]
 81013c0:	111b      	asrs	r3, r3, #4
 81013c2:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013c4:	697b      	ldr	r3, [r7, #20]
 81013c6:	10da      	asrs	r2, r3, #3
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	8b1b      	ldrh	r3, [r3, #24]
 81013cc:	005b      	lsls	r3, r3, #1
 81013ce:	1ad3      	subs	r3, r2, r3
         ((int32_t)baro->comp_vals.dig_T2)) >> 11;
 81013d0:	687a      	ldr	r2, [r7, #4]
 81013d2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013d6:	fb02 f303 	mul.w	r3, r2, r3
 81013da:	12db      	asrs	r3, r3, #11
 81013dc:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013de:	697b      	ldr	r3, [r7, #20]
 81013e0:	111b      	asrs	r3, r3, #4
 81013e2:	687a      	ldr	r2, [r7, #4]
 81013e4:	8b12      	ldrh	r2, [r2, #24]
 81013e6:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013e8:	697a      	ldr	r2, [r7, #20]
 81013ea:	1112      	asrs	r2, r2, #4
 81013ec:	6879      	ldr	r1, [r7, #4]
 81013ee:	8b09      	ldrh	r1, [r1, #24]
 81013f0:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013f2:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013f6:	131b      	asrs	r3, r3, #12
            12) *
           ((int32_t)baro->comp_vals.dig_T3)) >>
 81013f8:	687a      	ldr	r2, [r7, #4]
 81013fa:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
            12) *
 81013fe:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 8101402:	139b      	asrs	r3, r3, #14
 8101404:	60fb      	str	r3, [r7, #12]
          14;

  t_fine = var1 + var2;
 8101406:	693a      	ldr	r2, [r7, #16]
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	4413      	add	r3, r2
 810140c:	4a0d      	ldr	r2, [pc, #52]	; (8101444 <ReadTemp+0x98>)
 810140e:	6013      	str	r3, [r2, #0]

  float T = (t_fine * 5 + 128) >> 8;
 8101410:	4b0c      	ldr	r3, [pc, #48]	; (8101444 <ReadTemp+0x98>)
 8101412:	681a      	ldr	r2, [r3, #0]
 8101414:	4613      	mov	r3, r2
 8101416:	009b      	lsls	r3, r3, #2
 8101418:	4413      	add	r3, r2
 810141a:	3380      	adds	r3, #128	; 0x80
 810141c:	121b      	asrs	r3, r3, #8
 810141e:	ee07 3a90 	vmov	s15, r3
 8101422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101426:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T/100;
 810142a:	ed97 7a02 	vldr	s14, [r7, #8]
 810142e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8101448 <ReadTemp+0x9c>
 8101432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	edc3 7a00 	vstr	s15, [r3]

}
 810143c:	bf00      	nop
 810143e:	3718      	adds	r7, #24
 8101440:	46bd      	mov	sp, r7
 8101442:	bd80      	pop	{r7, pc}
 8101444:	100001a8 	.word	0x100001a8
 8101448:	42c80000 	.word	0x42c80000

0810144c <ReadPressure>:

void ReadPressure(BMP280Handle* baro)
{
 810144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101450:	b09c      	sub	sp, #112	; 0x70
 8101452:	af00      	add	r7, sp, #0
 8101454:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 8101456:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8101458:	f7ff ffa8 	bl	81013ac <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 810145c:	20f7      	movs	r0, #247	; 0xf7
 810145e:	f7ff ff67 	bl	8101330 <Read24Bit>
 8101462:	4603      	mov	r3, r0
 8101464:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>=4;
 8101466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101468:	111b      	asrs	r3, r3, #4
 810146a:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t)t_fine) - 128000;
 810146c:	4b6b      	ldr	r3, [pc, #428]	; (810161c <ReadPressure+0x1d0>)
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	461a      	mov	r2, r3
 8101472:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101476:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 810147a:	f143 35ff 	adc.w	r5, r3, #4294967295
 810147e:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t)baro->comp_vals.dig_P6;
 8101482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101486:	fb03 f102 	mul.w	r1, r3, r2
 810148a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810148c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810148e:	fb03 f302 	mul.w	r3, r3, r2
 8101492:	18ca      	adds	r2, r1, r3
 8101494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101496:	fba3 4503 	umull	r4, r5, r3, r3
 810149a:	1953      	adds	r3, r2, r5
 810149c:	461d      	mov	r5, r3
 810149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 81014a4:	b21a      	sxth	r2, r3
 81014a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014aa:	fb02 f005 	mul.w	r0, r2, r5
 81014ae:	fb04 f103 	mul.w	r1, r4, r3
 81014b2:	4401      	add	r1, r0
 81014b4:	fba4 2302 	umull	r2, r3, r4, r2
 81014b8:	4419      	add	r1, r3
 81014ba:	460b      	mov	r3, r1
 81014bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 81014c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t)baro->comp_vals.dig_P5) << 17);
 81014c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014c6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 81014ca:	b21a      	sxth	r2, r3
 81014cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014d2:	fb03 f001 	mul.w	r0, r3, r1
 81014d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81014d8:	fb02 f101 	mul.w	r1, r2, r1
 81014dc:	4408      	add	r0, r1
 81014de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014e0:	fba1 2302 	umull	r2, r3, r1, r2
 81014e4:	18c1      	adds	r1, r0, r3
 81014e6:	460b      	mov	r3, r1
 81014e8:	f04f 0000 	mov.w	r0, #0
 81014ec:	f04f 0100 	mov.w	r1, #0
 81014f0:	0459      	lsls	r1, r3, #17
 81014f2:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 81014f6:	0450      	lsls	r0, r2, #17
 81014f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81014fc:	eb12 0800 	adds.w	r8, r2, r0
 8101500:	eb43 0901 	adc.w	r9, r3, r1
 8101504:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t)baro->comp_vals.dig_P4) << 35);
 8101508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810150a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 810150e:	b21a      	sxth	r2, r3
 8101510:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101514:	f04f 0000 	mov.w	r0, #0
 8101518:	f04f 0100 	mov.w	r1, #0
 810151c:	00d1      	lsls	r1, r2, #3
 810151e:	2000      	movs	r0, #0
 8101520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101524:	1814      	adds	r4, r2, r0
 8101526:	61bc      	str	r4, [r7, #24]
 8101528:	414b      	adcs	r3, r1
 810152a:	61fb      	str	r3, [r7, #28]
 810152c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8101530:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101534:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101538:	fb03 f102 	mul.w	r1, r3, r2
 810153c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810153e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101540:	fb03 f302 	mul.w	r3, r3, r2
 8101544:	18ca      	adds	r2, r1, r3
 8101546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101548:	fba3 4503 	umull	r4, r5, r3, r3
 810154c:	1953      	adds	r3, r2, r5
 810154e:	461d      	mov	r5, r3
 8101550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101552:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8101556:	b21a      	sxth	r2, r3
 8101558:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810155c:	fb02 f005 	mul.w	r0, r2, r5
 8101560:	fb04 f103 	mul.w	r1, r4, r3
 8101564:	4401      	add	r1, r0
 8101566:	fba4 2302 	umull	r2, r3, r4, r2
 810156a:	4419      	add	r1, r3
 810156c:	460b      	mov	r3, r1
 810156e:	f04f 0800 	mov.w	r8, #0
 8101572:	f04f 0900 	mov.w	r9, #0
 8101576:	ea4f 2812 	mov.w	r8, r2, lsr #8
 810157a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 810157e:	ea4f 2923 	mov.w	r9, r3, asr #8
           ((var1 * (int64_t)baro->comp_vals.dig_P2) << 12);
 8101582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101584:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8101588:	b21a      	sxth	r2, r3
 810158a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810158e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101590:	fb03 f001 	mul.w	r0, r3, r1
 8101594:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101596:	fb02 f101 	mul.w	r1, r2, r1
 810159a:	1844      	adds	r4, r0, r1
 810159c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810159e:	fba1 0102 	umull	r0, r1, r1, r2
 81015a2:	1863      	adds	r3, r4, r1
 81015a4:	4619      	mov	r1, r3
 81015a6:	f04f 0200 	mov.w	r2, #0
 81015aa:	f04f 0300 	mov.w	r3, #0
 81015ae:	030b      	lsls	r3, r1, #12
 81015b0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 81015b4:	0302      	lsls	r2, r0, #12
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 81015b6:	eb18 0102 	adds.w	r1, r8, r2
 81015ba:	6139      	str	r1, [r7, #16]
 81015bc:	eb49 0303 	adc.w	r3, r9, r3
 81015c0:	617b      	str	r3, [r7, #20]
 81015c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 81015c6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 =
        (((((int64_t)1) << 47) + var1)) * ((int64_t)baro->comp_vals.dig_P1) >> 33;
 81015ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81015ce:	1c11      	adds	r1, r2, #0
 81015d0:	6439      	str	r1, [r7, #64]	; 0x40
 81015d2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 81015d6:	647b      	str	r3, [r7, #68]	; 0x44
 81015d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015da:	8bdb      	ldrh	r3, [r3, #30]
 81015dc:	b29a      	uxth	r2, r3
 81015de:	f04f 0300 	mov.w	r3, #0
 81015e2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 81015e6:	4629      	mov	r1, r5
 81015e8:	fb02 f001 	mul.w	r0, r2, r1
 81015ec:	4621      	mov	r1, r4
 81015ee:	fb01 f103 	mul.w	r1, r1, r3
 81015f2:	4401      	add	r1, r0
 81015f4:	4620      	mov	r0, r4
 81015f6:	fba0 2302 	umull	r2, r3, r0, r2
 81015fa:	4419      	add	r1, r3
 81015fc:	460b      	mov	r3, r1
  var1 =
 81015fe:	f04f 0000 	mov.w	r0, #0
 8101602:	f04f 0100 	mov.w	r1, #0
 8101606:	1058      	asrs	r0, r3, #1
 8101608:	17d9      	asrs	r1, r3, #31
 810160a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    if (var1 == 0) {
 810160e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101612:	4313      	orrs	r3, r2
 8101614:	f000 80f5 	beq.w	8101802 <ReadPressure+0x3b6>
 8101618:	e004      	b.n	8101624 <ReadPressure+0x1d8>
 810161a:	bf00      	nop
 810161c:	100001a8 	.word	0x100001a8
 8101620:	43800000 	.word	0x43800000
        return; // avoid exception caused by division by zero
      }
    p = 1048576 - adc_P;
 8101624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101626:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810162a:	461a      	mov	r2, r3
 810162c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101630:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    p = (((p << 31) - var2) * 3125) / var1;
 8101634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101636:	105b      	asrs	r3, r3, #1
 8101638:	63fb      	str	r3, [r7, #60]	; 0x3c
 810163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810163c:	07db      	lsls	r3, r3, #31
 810163e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101644:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8101648:	4621      	mov	r1, r4
 810164a:	ebb1 0a02 	subs.w	sl, r1, r2
 810164e:	4629      	mov	r1, r5
 8101650:	eb61 0b03 	sbc.w	fp, r1, r3
 8101654:	4652      	mov	r2, sl
 8101656:	465b      	mov	r3, fp
 8101658:	1891      	adds	r1, r2, r2
 810165a:	60b9      	str	r1, [r7, #8]
 810165c:	415b      	adcs	r3, r3
 810165e:	60fb      	str	r3, [r7, #12]
 8101660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101664:	eb12 020a 	adds.w	r2, r2, sl
 8101668:	eb43 030b 	adc.w	r3, r3, fp
 810166c:	f04f 0000 	mov.w	r0, #0
 8101670:	f04f 0100 	mov.w	r1, #0
 8101674:	0199      	lsls	r1, r3, #6
 8101676:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 810167a:	0190      	lsls	r0, r2, #6
 810167c:	1812      	adds	r2, r2, r0
 810167e:	eb41 0303 	adc.w	r3, r1, r3
 8101682:	f04f 0000 	mov.w	r0, #0
 8101686:	f04f 0100 	mov.w	r1, #0
 810168a:	0099      	lsls	r1, r3, #2
 810168c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101690:	0090      	lsls	r0, r2, #2
 8101692:	4602      	mov	r2, r0
 8101694:	460b      	mov	r3, r1
 8101696:	eb12 020a 	adds.w	r2, r2, sl
 810169a:	eb43 030b 	adc.w	r3, r3, fp
 810169e:	f04f 0000 	mov.w	r0, #0
 81016a2:	f04f 0100 	mov.w	r1, #0
 81016a6:	0099      	lsls	r1, r3, #2
 81016a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 81016ac:	0090      	lsls	r0, r2, #2
 81016ae:	4602      	mov	r2, r0
 81016b0:	460b      	mov	r3, r1
 81016b2:	eb12 010a 	adds.w	r1, r2, sl
 81016b6:	6339      	str	r1, [r7, #48]	; 0x30
 81016b8:	eb43 030b 	adc.w	r3, r3, fp
 81016bc:	637b      	str	r3, [r7, #52]	; 0x34
 81016be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81016c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81016c6:	f7ff fbd1 	bl	8100e6c <__aeabi_ldivmod>
 81016ca:	4602      	mov	r2, r0
 81016cc:	460b      	mov	r3, r1
 81016ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    var1 = (((int64_t)baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 81016d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016d4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 81016d8:	b218      	sxth	r0, r3
 81016da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 81016de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81016e2:	f04f 0200 	mov.w	r2, #0
 81016e6:	f04f 0300 	mov.w	r3, #0
 81016ea:	0b62      	lsrs	r2, r4, #13
 81016ec:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81016f0:	136b      	asrs	r3, r5, #13
 81016f2:	fb02 f501 	mul.w	r5, r2, r1
 81016f6:	fb00 f403 	mul.w	r4, r0, r3
 81016fa:	442c      	add	r4, r5
 81016fc:	fba0 0102 	umull	r0, r1, r0, r2
 8101700:	1863      	adds	r3, r4, r1
 8101702:	4619      	mov	r1, r3
 8101704:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8101708:	f04f 0200 	mov.w	r2, #0
 810170c:	f04f 0300 	mov.w	r3, #0
 8101710:	0b62      	lsrs	r2, r4, #13
 8101712:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8101716:	136b      	asrs	r3, r5, #13
 8101718:	fb02 f501 	mul.w	r5, r2, r1
 810171c:	fb00 f403 	mul.w	r4, r0, r3
 8101720:	442c      	add	r4, r5
 8101722:	fba0 0102 	umull	r0, r1, r0, r2
 8101726:	1863      	adds	r3, r4, r1
 8101728:	4619      	mov	r1, r3
 810172a:	f04f 0200 	mov.w	r2, #0
 810172e:	f04f 0300 	mov.w	r3, #0
 8101732:	0e42      	lsrs	r2, r0, #25
 8101734:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8101738:	164b      	asrs	r3, r1, #25
 810173a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    var2 = (((int64_t)baro->comp_vals.dig_P8) * p) >> 19;
 810173e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101740:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8101744:	b21a      	sxth	r2, r3
 8101746:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810174a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810174c:	fb03 f001 	mul.w	r0, r3, r1
 8101750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8101752:	fb02 f101 	mul.w	r1, r2, r1
 8101756:	1844      	adds	r4, r0, r1
 8101758:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810175a:	fba1 0102 	umull	r0, r1, r1, r2
 810175e:	1863      	adds	r3, r4, r1
 8101760:	4619      	mov	r1, r3
 8101762:	f04f 0200 	mov.w	r2, #0
 8101766:	f04f 0300 	mov.w	r3, #0
 810176a:	0cc2      	lsrs	r2, r0, #19
 810176c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8101770:	14cb      	asrs	r3, r1, #19
 8101772:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    p = ((p + var1 + var2) >> 8) + (((int64_t)baro->comp_vals.dig_P7) << 4);
 8101776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 810177a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810177e:	1884      	adds	r4, r0, r2
 8101780:	62bc      	str	r4, [r7, #40]	; 0x28
 8101782:	eb41 0303 	adc.w	r3, r1, r3
 8101786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101788:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 810178c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101790:	4621      	mov	r1, r4
 8101792:	1889      	adds	r1, r1, r2
 8101794:	6239      	str	r1, [r7, #32]
 8101796:	4629      	mov	r1, r5
 8101798:	eb43 0101 	adc.w	r1, r3, r1
 810179c:	6279      	str	r1, [r7, #36]	; 0x24
 810179e:	f04f 0000 	mov.w	r0, #0
 81017a2:	f04f 0100 	mov.w	r1, #0
 81017a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 81017aa:	4623      	mov	r3, r4
 81017ac:	0a18      	lsrs	r0, r3, #8
 81017ae:	462b      	mov	r3, r5
 81017b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 81017b4:	462b      	mov	r3, r5
 81017b6:	1219      	asrs	r1, r3, #8
 81017b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017ba:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 81017be:	b21c      	sxth	r4, r3
 81017c0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 81017c4:	f04f 0200 	mov.w	r2, #0
 81017c8:	f04f 0300 	mov.w	r3, #0
 81017cc:	012b      	lsls	r3, r5, #4
 81017ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 81017d2:	0122      	lsls	r2, r4, #4
 81017d4:	1884      	adds	r4, r0, r2
 81017d6:	603c      	str	r4, [r7, #0]
 81017d8:	eb41 0303 	adc.w	r3, r1, r3
 81017dc:	607b      	str	r3, [r7, #4]
 81017de:	e9d7 3400 	ldrd	r3, r4, [r7]
 81017e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    baro->pressure = (float) p/256;
 81017e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81017ea:	f7ff fb01 	bl	8100df0 <__aeabi_l2f>
 81017ee:	ee06 0a90 	vmov	s13, r0
 81017f2:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8101620 <ReadPressure+0x1d4>
 81017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017fc:	edc3 7a01 	vstr	s15, [r3, #4]
 8101800:	e000      	b.n	8101804 <ReadPressure+0x3b8>
        return; // avoid exception caused by division by zero
 8101802:	bf00      	nop

}
 8101804:	3770      	adds	r7, #112	; 0x70
 8101806:	46bd      	mov	sp, r7
 8101808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810180c:	0000      	movs	r0, r0
	...

08101810 <ReadAltitude>:

void ReadAltitude(BMP280Handle* baro)
{
 8101810:	b580      	push	{r7, lr}
 8101812:	b084      	sub	sp, #16
 8101814:	af00      	add	r7, sp, #0
 8101816:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 8101818:	f04f 0300 	mov.w	r3, #0
 810181c:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	685b      	ldr	r3, [r3, #4]
 8101822:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure/ SEA_LEVEL_PRESSURE), (1/5.255)));
 8101824:	edd7 7a02 	vldr	s15, [r7, #8]
 8101828:	ed9f 7a25 	vldr	s14, [pc, #148]	; 81018c0 <ReadAltitude+0xb0>
 810182c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101830:	ee16 0a90 	vmov	r0, s13
 8101834:	f7fe feb4 	bl	81005a0 <__aeabi_f2d>
 8101838:	4602      	mov	r2, r0
 810183a:	460b      	mov	r3, r1
 810183c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 81018b0 <ReadAltitude+0xa0>
 8101840:	ec43 2b10 	vmov	d0, r2, r3
 8101844:	f00b fa58 	bl	810ccf8 <pow>
 8101848:	ec53 2b10 	vmov	r2, r3, d0
 810184c:	f04f 0000 	mov.w	r0, #0
 8101850:	491c      	ldr	r1, [pc, #112]	; (81018c4 <ReadAltitude+0xb4>)
 8101852:	f7fe fd45 	bl	81002e0 <__aeabi_dsub>
 8101856:	4602      	mov	r2, r0
 8101858:	460b      	mov	r3, r1
 810185a:	4610      	mov	r0, r2
 810185c:	4619      	mov	r1, r3
 810185e:	a316      	add	r3, pc, #88	; (adr r3, 81018b8 <ReadAltitude+0xa8>)
 8101860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101864:	f7fe fef4 	bl	8100650 <__aeabi_dmul>
 8101868:	4602      	mov	r2, r0
 810186a:	460b      	mov	r3, r1
 810186c:	4610      	mov	r0, r2
 810186e:	4619      	mov	r1, r3
 8101870:	f7ff f99e 	bl	8100bb0 <__aeabi_d2f>
 8101874:	4603      	mov	r3, r0
 8101876:	60fb      	str	r3, [r7, #12]

  if((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 8101878:	edd7 7a03 	vldr	s15, [r7, #12]
 810187c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 81018c8 <ReadAltitude+0xb8>
 8101880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101888:	d90c      	bls.n	81018a4 <ReadAltitude+0x94>
 810188a:	edd7 7a03 	vldr	s15, [r7, #12]
 810188e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 81018cc <ReadAltitude+0xbc>
 8101892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810189a:	da03      	bge.n	81018a4 <ReadAltitude+0x94>
  {
    return;
  }

  baro->altitude = altitude;
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	68fa      	ldr	r2, [r7, #12]
 81018a0:	609a      	str	r2, [r3, #8]
 81018a2:	e000      	b.n	81018a6 <ReadAltitude+0x96>
    return;
 81018a4:	bf00      	nop

}
 81018a6:	3710      	adds	r7, #16
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	f3af 8000 	nop.w
 81018b0:	ccd9456c 	.word	0xccd9456c
 81018b4:	3fc85b95 	.word	0x3fc85b95
 81018b8:	00000000 	.word	0x00000000
 81018bc:	40e5a540 	.word	0x40e5a540
 81018c0:	47c5e680 	.word	0x47c5e680
 81018c4:	3ff00000 	.word	0x3ff00000
 81018c8:	c3fa0000 	.word	0xc3fa0000
 81018cc:	460ca000 	.word	0x460ca000

081018d0 <ReadCalibCoefficients>:



void ReadCalibCoefficients(BMP280Handle* baro)
{
 81018d0:	b580      	push	{r7, lr}
 81018d2:	b082      	sub	sp, #8
 81018d4:	af00      	add	r7, sp, #0
 81018d6:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16Bit(dig_T1);
 81018d8:	2088      	movs	r0, #136	; 0x88
 81018da:	f7ff fcef 	bl	81012bc <Read16Bit>
 81018de:	4603      	mov	r3, r0
 81018e0:	461a      	mov	r2, r3
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_T2 = Read16Bit(dig_T2);
 81018e6:	208a      	movs	r0, #138	; 0x8a
 81018e8:	f7ff fce8 	bl	81012bc <Read16Bit>
 81018ec:	4603      	mov	r3, r0
 81018ee:	b21a      	sxth	r2, r3
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_T3 = Read16Bit(dig_T3);
 81018f4:	208c      	movs	r0, #140	; 0x8c
 81018f6:	f7ff fce1 	bl	81012bc <Read16Bit>
 81018fa:	4603      	mov	r3, r0
 81018fc:	b21a      	sxth	r2, r3
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P1 = Read16Bit(dig_P1);
 8101902:	208e      	movs	r0, #142	; 0x8e
 8101904:	f7ff fcda 	bl	81012bc <Read16Bit>
 8101908:	4603      	mov	r3, r0
 810190a:	461a      	mov	r2, r3
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P2 = Read16Bit(dig_P2);
 8101910:	2090      	movs	r0, #144	; 0x90
 8101912:	f7ff fcd3 	bl	81012bc <Read16Bit>
 8101916:	4603      	mov	r3, r0
 8101918:	b21a      	sxth	r2, r3
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P3 = Read16Bit(dig_P3);
 810191e:	2092      	movs	r0, #146	; 0x92
 8101920:	f7ff fccc 	bl	81012bc <Read16Bit>
 8101924:	4603      	mov	r3, r0
 8101926:	b21a      	sxth	r2, r3
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P4 = Read16Bit(dig_P4);
 810192c:	2094      	movs	r0, #148	; 0x94
 810192e:	f7ff fcc5 	bl	81012bc <Read16Bit>
 8101932:	4603      	mov	r3, r0
 8101934:	b21a      	sxth	r2, r3
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P5 = Read16Bit(dig_P5);
 810193a:	2096      	movs	r0, #150	; 0x96
 810193c:	f7ff fcbe 	bl	81012bc <Read16Bit>
 8101940:	4603      	mov	r3, r0
 8101942:	b21a      	sxth	r2, r3
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P6 = Read16Bit(dig_P6);
 8101948:	2098      	movs	r0, #152	; 0x98
 810194a:	f7ff fcb7 	bl	81012bc <Read16Bit>
 810194e:	4603      	mov	r3, r0
 8101950:	b21a      	sxth	r2, r3
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	851a      	strh	r2, [r3, #40]	; 0x28
  baro->comp_vals.dig_P7 = Read16Bit(dig_P7);
 8101956:	209a      	movs	r0, #154	; 0x9a
 8101958:	f7ff fcb0 	bl	81012bc <Read16Bit>
 810195c:	4603      	mov	r3, r0
 810195e:	b21a      	sxth	r2, r3
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	855a      	strh	r2, [r3, #42]	; 0x2a
  baro->comp_vals.dig_P8 = Read16Bit(dig_P8);
 8101964:	209c      	movs	r0, #156	; 0x9c
 8101966:	f7ff fca9 	bl	81012bc <Read16Bit>
 810196a:	4603      	mov	r3, r0
 810196c:	b21a      	sxth	r2, r3
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	859a      	strh	r2, [r3, #44]	; 0x2c
  baro->comp_vals.dig_P9 = Read16Bit(dig_P9);
 8101972:	209e      	movs	r0, #158	; 0x9e
 8101974:	f7ff fca2 	bl	81012bc <Read16Bit>
 8101978:	4603      	mov	r3, r0
 810197a:	b21a      	sxth	r2, r3
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 8101980:	bf00      	nop
 8101982:	3708      	adds	r7, #8
 8101984:	46bd      	mov	sp, r7
 8101986:	bd80      	pop	{r7, pc}

08101988 <setConfig>:
void WriteRegister(uint8_t reg, uint8_t data)
{

}
uint8_t setConfig(BMP280Handle* baro)
{
 8101988:	b580      	push	{r7, lr}
 810198a:	b084      	sub	sp, #16
 810198c:	af00      	add	r7, sp, #0
 810198e:	6078      	str	r0, [r7, #4]


    // Ultra High resolution 26.3 Hz
   baro->config.mode = NORMAL;
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	2203      	movs	r2, #3
 8101994:	749a      	strb	r2, [r3, #18]
   baro->config.pressure_oversampling =  X16; // X16;
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	2205      	movs	r2, #5
 810199a:	755a      	strb	r2, [r3, #21]
   baro->config.temp_oversampling =  X2; //X2;
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	2202      	movs	r2, #2
 81019a0:	759a      	strb	r2, [r3, #22]

   uint8_t SerialData[2] = {0};
 81019a2:	2300      	movs	r3, #0
 81019a4:	81bb      	strh	r3, [r7, #12]
   uint8_t aRxBuffer[3]= {0};
 81019a6:	4b3c      	ldr	r3, [pc, #240]	; (8101a98 <setConfig+0x110>)
 81019a8:	881b      	ldrh	r3, [r3, #0]
 81019aa:	813b      	strh	r3, [r7, #8]
 81019ac:	2300      	movs	r3, #0
 81019ae:	72bb      	strb	r3, [r7, #10]
   SerialData[0] = BMP280_REG_CTRL_MEAS & ~0x80;
 81019b0:	2374      	movs	r3, #116	; 0x74
 81019b2:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode ;
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	7d9b      	ldrb	r3, [r3, #22]
 81019b8:	015b      	lsls	r3, r3, #5
 81019ba:	b25a      	sxtb	r2, r3
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	7d5b      	ldrb	r3, [r3, #21]
 81019c0:	009b      	lsls	r3, r3, #2
 81019c2:	b25b      	sxtb	r3, r3
 81019c4:	4313      	orrs	r3, r2
 81019c6:	b25a      	sxtb	r2, r3
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	7c9b      	ldrb	r3, [r3, #18]
 81019cc:	b25b      	sxtb	r3, r3
 81019ce:	4313      	orrs	r3, r2
 81019d0:	b25b      	sxtb	r3, r3
 81019d2:	b2db      	uxtb	r3, r3
 81019d4:	737b      	strb	r3, [r7, #13]
   //SerialData[1] = 0x27;

   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81019d6:	2200      	movs	r2, #0
 81019d8:	2110      	movs	r1, #16
 81019da:	4830      	ldr	r0, [pc, #192]	; (8101a9c <setConfig+0x114>)
 81019dc:	f005 fb7c 	bl	81070d8 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 81019e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81019e4:	f001 ff3c 	bl	8103860 <HAL_Delay>

   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 81019e8:	f107 0208 	add.w	r2, r7, #8
 81019ec:	f107 010c 	add.w	r1, r7, #12
 81019f0:	2303      	movs	r3, #3
 81019f2:	482b      	ldr	r0, [pc, #172]	; (8101aa0 <setConfig+0x118>)
 81019f4:	f008 fe62 	bl	810a6bc <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 81019f8:	e010      	b.n	8101a1c <setConfig+0x94>
   {
        memset(SerialData, 0, sizeof(SerialData));
 81019fa:	f107 030c 	add.w	r3, r7, #12
 81019fe:	2202      	movs	r2, #2
 8101a00:	2100      	movs	r1, #0
 8101a02:	4618      	mov	r0, r3
 8101a04:	f00b f970 	bl	810cce8 <memset>
        memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8101a08:	f107 0308 	add.w	r3, r7, #8
 8101a0c:	2203      	movs	r2, #3
 8101a0e:	2100      	movs	r1, #0
 8101a10:	4618      	mov	r0, r3
 8101a12:	f00b f969 	bl	810cce8 <memset>
        flag  = 0;
 8101a16:	4b23      	ldr	r3, [pc, #140]	; (8101aa4 <setConfig+0x11c>)
 8101a18:	2200      	movs	r2, #0
 8101a1a:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 8101a1c:	4b21      	ldr	r3, [pc, #132]	; (8101aa4 <setConfig+0x11c>)
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	2b01      	cmp	r3, #1
 8101a22:	d0ea      	beq.n	81019fa <setConfig+0x72>
   }


       baro->config.IIR_Filter = FILTER_OFF;
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	2200      	movs	r2, #0
 8101a28:	74da      	strb	r2, [r3, #19]
       baro->config.standby = STANDBY_0_5;
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	2200      	movs	r2, #0
 8101a2e:	751a      	strb	r2, [r3, #20]

       SerialData[0] = BMP280_REG_CONFIG & ~0x80;
 8101a30:	2375      	movs	r3, #117	; 0x75
 8101a32:	733b      	strb	r3, [r7, #12]
       SerialData[1] = baro->config.standby << 5 | baro->config.IIR_Filter ;
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	7d1b      	ldrb	r3, [r3, #20]
 8101a38:	015b      	lsls	r3, r3, #5
 8101a3a:	b25a      	sxtb	r2, r3
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	7cdb      	ldrb	r3, [r3, #19]
 8101a40:	b25b      	sxtb	r3, r3
 8101a42:	4313      	orrs	r3, r2
 8101a44:	b25b      	sxtb	r3, r3
 8101a46:	b2db      	uxtb	r3, r3
 8101a48:	737b      	strb	r3, [r7, #13]
       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	2110      	movs	r1, #16
 8101a4e:	4813      	ldr	r0, [pc, #76]	; (8101a9c <setConfig+0x114>)
 8101a50:	f005 fb42 	bl	81070d8 <HAL_GPIO_WritePin>

       uint8_t res = HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101a54:	f107 0208 	add.w	r2, r7, #8
 8101a58:	f107 010c 	add.w	r1, r7, #12
 8101a5c:	2303      	movs	r3, #3
 8101a5e:	4810      	ldr	r0, [pc, #64]	; (8101aa0 <setConfig+0x118>)
 8101a60:	f008 fe2c 	bl	810a6bc <HAL_SPI_TransmitReceive_DMA>
 8101a64:	4603      	mov	r3, r0
 8101a66:	73fb      	strb	r3, [r7, #15]

       while(flag == 1)
 8101a68:	bf00      	nop
 8101a6a:	4b0e      	ldr	r3, [pc, #56]	; (8101aa4 <setConfig+0x11c>)
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	2b01      	cmp	r3, #1
 8101a70:	d10c      	bne.n	8101a8c <setConfig+0x104>
       {
          if(res == HAL_OK)
 8101a72:	7bfb      	ldrb	r3, [r7, #15]
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d104      	bne.n	8101a82 <setConfig+0xfa>
          {
            flag = 0;
 8101a78:	4b0a      	ldr	r3, [pc, #40]	; (8101aa4 <setConfig+0x11c>)
 8101a7a:	2200      	movs	r2, #0
 8101a7c:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8101a7e:	2300      	movs	r3, #0
 8101a80:	e005      	b.n	8101a8e <setConfig+0x106>
          }

          else
          {
            flag = 0;
 8101a82:	4b08      	ldr	r3, [pc, #32]	; (8101aa4 <setConfig+0x11c>)
 8101a84:	2200      	movs	r2, #0
 8101a86:	601a      	str	r2, [r3, #0]
              return HAL_ERROR;
 8101a88:	2301      	movs	r3, #1
 8101a8a:	e000      	b.n	8101a8e <setConfig+0x106>
          }

       }


       return HAL_OK;
 8101a8c:	2300      	movs	r3, #0


}
 8101a8e:	4618      	mov	r0, r3
 8101a90:	3710      	adds	r7, #16
 8101a92:	46bd      	mov	sp, r7
 8101a94:	bd80      	pop	{r7, pc}
 8101a96:	bf00      	nop
 8101a98:	0810dc84 	.word	0x0810dc84
 8101a9c:	58020000 	.word	0x58020000
 8101aa0:	100003f4 	.word	0x100003f4
 8101aa4:	100000a8 	.word	0x100000a8

08101aa8 <HAL_SPI_TxRxCpltCallback>:

void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8101aa8:	b580      	push	{r7, lr}
 8101aaa:	b082      	sub	sp, #8
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	4a07      	ldr	r2, [pc, #28]	; (8101ad4 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8101ab6:	4293      	cmp	r3, r2
 8101ab8:	d107      	bne.n	8101aca <HAL_SPI_TxRxCpltCallback+0x22>
    {
      flag = 1;
 8101aba:	4b07      	ldr	r3, [pc, #28]	; (8101ad8 <HAL_SPI_TxRxCpltCallback+0x30>)
 8101abc:	2201      	movs	r2, #1
 8101abe:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8101ac0:	2201      	movs	r2, #1
 8101ac2:	2110      	movs	r1, #16
 8101ac4:	4805      	ldr	r0, [pc, #20]	; (8101adc <HAL_SPI_TxRxCpltCallback+0x34>)
 8101ac6:	f005 fb07 	bl	81070d8 <HAL_GPIO_WritePin>
    }
}
 8101aca:	bf00      	nop
 8101acc:	3708      	adds	r7, #8
 8101ace:	46bd      	mov	sp, r7
 8101ad0:	bd80      	pop	{r7, pc}
 8101ad2:	bf00      	nop
 8101ad4:	40013000 	.word	0x40013000
 8101ad8:	100000a8 	.word	0x100000a8
 8101adc:	58020000 	.word	0x58020000

08101ae0 <ResetBMP280>:
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);

}

uint8_t ResetBMP280(void)
{
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	b082      	sub	sp, #8
 8101ae4:	af00      	add	r7, sp, #0
   uint8_t SerialData[2] = {(BMP280_REG_RESET & ~0x80), BMP280_RESET_VALUE}; // Register address, Data,
 8101ae6:	f24b 6360 	movw	r3, #46688	; 0xb660
 8101aea:	80bb      	strh	r3, [r7, #4]
   static uint8_t aRxBuffer[3]= {0};
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101aec:	2200      	movs	r2, #0
 8101aee:	2110      	movs	r1, #16
 8101af0:	4809      	ldr	r0, [pc, #36]	; (8101b18 <ResetBMP280+0x38>)
 8101af2:	f005 faf1 	bl	81070d8 <HAL_GPIO_WritePin>

   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101af6:	1d39      	adds	r1, r7, #4
 8101af8:	2302      	movs	r3, #2
 8101afa:	4a08      	ldr	r2, [pc, #32]	; (8101b1c <ResetBMP280+0x3c>)
 8101afc:	4808      	ldr	r0, [pc, #32]	; (8101b20 <ResetBMP280+0x40>)
 8101afe:	f008 fddd 	bl	810a6bc <HAL_SPI_TransmitReceive_DMA>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d101      	bne.n	8101b0c <ResetBMP280+0x2c>
   {
     return HAL_OK;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	e000      	b.n	8101b0e <ResetBMP280+0x2e>
//     return HAL_OK;
//   }

   else
   {
     return HAL_ERROR;
 8101b0c:	2301      	movs	r3, #1
   }



}
 8101b0e:	4618      	mov	r0, r3
 8101b10:	3708      	adds	r7, #8
 8101b12:	46bd      	mov	sp, r7
 8101b14:	bd80      	pop	{r7, pc}
 8101b16:	bf00      	nop
 8101b18:	58020000 	.word	0x58020000
 8101b1c:	100000b4 	.word	0x100000b4
 8101b20:	100003f4 	.word	0x100003f4

08101b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101b24:	b580      	push	{r7, lr}
 8101b26:	b082      	sub	sp, #8
 8101b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101b2a:	4b2d      	ldr	r3, [pc, #180]	; (8101be0 <MX_DMA_Init+0xbc>)
 8101b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b30:	4a2b      	ldr	r2, [pc, #172]	; (8101be0 <MX_DMA_Init+0xbc>)
 8101b32:	f043 0301 	orr.w	r3, r3, #1
 8101b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b3a:	4b29      	ldr	r3, [pc, #164]	; (8101be0 <MX_DMA_Init+0xbc>)
 8101b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b40:	f003 0301 	and.w	r3, r3, #1
 8101b44:	607b      	str	r3, [r7, #4]
 8101b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b48:	4b25      	ldr	r3, [pc, #148]	; (8101be0 <MX_DMA_Init+0xbc>)
 8101b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b4e:	4a24      	ldr	r2, [pc, #144]	; (8101be0 <MX_DMA_Init+0xbc>)
 8101b50:	f043 0302 	orr.w	r3, r3, #2
 8101b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b58:	4b21      	ldr	r3, [pc, #132]	; (8101be0 <MX_DMA_Init+0xbc>)
 8101b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b5e:	f003 0302 	and.w	r3, r3, #2
 8101b62:	603b      	str	r3, [r7, #0]
 8101b64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b66:	2200      	movs	r2, #0
 8101b68:	2100      	movs	r1, #0
 8101b6a:	200b      	movs	r0, #11
 8101b6c:	f002 fa69 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101b70:	200b      	movs	r0, #11
 8101b72:	f002 fa80 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101b76:	2200      	movs	r2, #0
 8101b78:	2100      	movs	r1, #0
 8101b7a:	200c      	movs	r0, #12
 8101b7c:	f002 fa61 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101b80:	200c      	movs	r0, #12
 8101b82:	f002 fa78 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101b86:	2200      	movs	r2, #0
 8101b88:	2100      	movs	r1, #0
 8101b8a:	200d      	movs	r0, #13
 8101b8c:	f002 fa59 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101b90:	200d      	movs	r0, #13
 8101b92:	f002 fa70 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101b96:	2200      	movs	r2, #0
 8101b98:	2100      	movs	r1, #0
 8101b9a:	200e      	movs	r0, #14
 8101b9c:	f002 fa51 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101ba0:	200e      	movs	r0, #14
 8101ba2:	f002 fa68 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101ba6:	2200      	movs	r2, #0
 8101ba8:	2100      	movs	r1, #0
 8101baa:	200f      	movs	r0, #15
 8101bac:	f002 fa49 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101bb0:	200f      	movs	r0, #15
 8101bb2:	f002 fa60 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101bb6:	2200      	movs	r2, #0
 8101bb8:	2100      	movs	r1, #0
 8101bba:	202f      	movs	r0, #47	; 0x2f
 8101bbc:	f002 fa41 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101bc0:	202f      	movs	r0, #47	; 0x2f
 8101bc2:	f002 fa58 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101bc6:	2200      	movs	r2, #0
 8101bc8:	2100      	movs	r1, #0
 8101bca:	2038      	movs	r0, #56	; 0x38
 8101bcc:	f002 fa39 	bl	8104042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101bd0:	2038      	movs	r0, #56	; 0x38
 8101bd2:	f002 fa50 	bl	8104076 <HAL_NVIC_EnableIRQ>

}
 8101bd6:	bf00      	nop
 8101bd8:	3708      	adds	r7, #8
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	bd80      	pop	{r7, pc}
 8101bde:	bf00      	nop
 8101be0:	58024400 	.word	0x58024400

08101be4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101be4:	b580      	push	{r7, lr}
 8101be6:	b08a      	sub	sp, #40	; 0x28
 8101be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bea:	f107 0314 	add.w	r3, r7, #20
 8101bee:	2200      	movs	r2, #0
 8101bf0:	601a      	str	r2, [r3, #0]
 8101bf2:	605a      	str	r2, [r3, #4]
 8101bf4:	609a      	str	r2, [r3, #8]
 8101bf6:	60da      	str	r2, [r3, #12]
 8101bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bfa:	4b29      	ldr	r3, [pc, #164]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c00:	4a27      	ldr	r2, [pc, #156]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c02:	f043 0301 	orr.w	r3, r3, #1
 8101c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c0a:	4b25      	ldr	r3, [pc, #148]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c10:	f003 0301 	and.w	r3, r3, #1
 8101c14:	613b      	str	r3, [r7, #16]
 8101c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101c18:	4b21      	ldr	r3, [pc, #132]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c1e:	4a20      	ldr	r2, [pc, #128]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c20:	f043 0320 	orr.w	r3, r3, #32
 8101c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c28:	4b1d      	ldr	r3, [pc, #116]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c2e:	f003 0320 	and.w	r3, r3, #32
 8101c32:	60fb      	str	r3, [r7, #12]
 8101c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c36:	4b1a      	ldr	r3, [pc, #104]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c3c:	4a18      	ldr	r2, [pc, #96]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c3e:	f043 0308 	orr.w	r3, r3, #8
 8101c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c46:	4b16      	ldr	r3, [pc, #88]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c4c:	f003 0308 	and.w	r3, r3, #8
 8101c50:	60bb      	str	r3, [r7, #8]
 8101c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c54:	4b12      	ldr	r3, [pc, #72]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c5a:	4a11      	ldr	r2, [pc, #68]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c5c:	f043 0302 	orr.w	r3, r3, #2
 8101c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c64:	4b0e      	ldr	r3, [pc, #56]	; (8101ca0 <MX_GPIO_Init+0xbc>)
 8101c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6a:	f003 0302 	and.w	r3, r3, #2
 8101c6e:	607b      	str	r3, [r7, #4]
 8101c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101c72:	2200      	movs	r2, #0
 8101c74:	2110      	movs	r1, #16
 8101c76:	480b      	ldr	r0, [pc, #44]	; (8101ca4 <MX_GPIO_Init+0xc0>)
 8101c78:	f005 fa2e 	bl	81070d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c7c:	2310      	movs	r3, #16
 8101c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c80:	2301      	movs	r3, #1
 8101c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c84:	2300      	movs	r3, #0
 8101c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c88:	2300      	movs	r3, #0
 8101c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c8c:	f107 0314 	add.w	r3, r7, #20
 8101c90:	4619      	mov	r1, r3
 8101c92:	4804      	ldr	r0, [pc, #16]	; (8101ca4 <MX_GPIO_Init+0xc0>)
 8101c94:	f005 f870 	bl	8106d78 <HAL_GPIO_Init>

}
 8101c98:	bf00      	nop
 8101c9a:	3728      	adds	r7, #40	; 0x28
 8101c9c:	46bd      	mov	sp, r7
 8101c9e:	bd80      	pop	{r7, pc}
 8101ca0:	58024400 	.word	0x58024400
 8101ca4:	58020000 	.word	0x58020000

08101ca8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101ca8:	b580      	push	{r7, lr}
 8101caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101cac:	4b1b      	ldr	r3, [pc, #108]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cae:	4a1c      	ldr	r2, [pc, #112]	; (8101d20 <MX_I2C1_Init+0x78>)
 8101cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101cb2:	4b1a      	ldr	r3, [pc, #104]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cb4:	4a1b      	ldr	r2, [pc, #108]	; (8101d24 <MX_I2C1_Init+0x7c>)
 8101cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101cb8:	4b18      	ldr	r3, [pc, #96]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cba:	2200      	movs	r2, #0
 8101cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101cbe:	4b17      	ldr	r3, [pc, #92]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cc0:	2201      	movs	r2, #1
 8101cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101cc4:	4b15      	ldr	r3, [pc, #84]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cc6:	2200      	movs	r2, #0
 8101cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101cca:	4b14      	ldr	r3, [pc, #80]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101ccc:	2200      	movs	r2, #0
 8101cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101cd0:	4b12      	ldr	r3, [pc, #72]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cd2:	2200      	movs	r2, #0
 8101cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101cd6:	4b11      	ldr	r3, [pc, #68]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cd8:	2200      	movs	r2, #0
 8101cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101cdc:	4b0f      	ldr	r3, [pc, #60]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cde:	2200      	movs	r2, #0
 8101ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101ce2:	480e      	ldr	r0, [pc, #56]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101ce4:	f005 fa52 	bl	810718c <HAL_I2C_Init>
 8101ce8:	4603      	mov	r3, r0
 8101cea:	2b00      	cmp	r3, #0
 8101cec:	d001      	beq.n	8101cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101cee:	f001 f805 	bl	8102cfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101cf2:	2100      	movs	r1, #0
 8101cf4:	4809      	ldr	r0, [pc, #36]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101cf6:	f006 fd85 	bl	8108804 <HAL_I2CEx_ConfigAnalogFilter>
 8101cfa:	4603      	mov	r3, r0
 8101cfc:	2b00      	cmp	r3, #0
 8101cfe:	d001      	beq.n	8101d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101d00:	f000 fffc 	bl	8102cfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101d04:	2100      	movs	r1, #0
 8101d06:	4805      	ldr	r0, [pc, #20]	; (8101d1c <MX_I2C1_Init+0x74>)
 8101d08:	f006 fdc7 	bl	810889a <HAL_I2CEx_ConfigDigitalFilter>
 8101d0c:	4603      	mov	r3, r0
 8101d0e:	2b00      	cmp	r3, #0
 8101d10:	d001      	beq.n	8101d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101d12:	f000 fff3 	bl	8102cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101d16:	bf00      	nop
 8101d18:	bd80      	pop	{r7, pc}
 8101d1a:	bf00      	nop
 8101d1c:	10000224 	.word	0x10000224
 8101d20:	40005400 	.word	0x40005400
 8101d24:	307075b1 	.word	0x307075b1

08101d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101d28:	b580      	push	{r7, lr}
 8101d2a:	b0b8      	sub	sp, #224	; 0xe0
 8101d2c:	af00      	add	r7, sp, #0
 8101d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d34:	2200      	movs	r2, #0
 8101d36:	601a      	str	r2, [r3, #0]
 8101d38:	605a      	str	r2, [r3, #4]
 8101d3a:	609a      	str	r2, [r3, #8]
 8101d3c:	60da      	str	r2, [r3, #12]
 8101d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d40:	f107 0310 	add.w	r3, r7, #16
 8101d44:	22bc      	movs	r2, #188	; 0xbc
 8101d46:	2100      	movs	r1, #0
 8101d48:	4618      	mov	r0, r3
 8101d4a:	f00a ffcd 	bl	810cce8 <memset>
  if(i2cHandle->Instance==I2C1)
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	4a5b      	ldr	r2, [pc, #364]	; (8101ec0 <HAL_I2C_MspInit+0x198>)
 8101d54:	4293      	cmp	r3, r2
 8101d56:	f040 80af 	bne.w	8101eb8 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101d5a:	2308      	movs	r3, #8
 8101d5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101d5e:	2300      	movs	r3, #0
 8101d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d64:	f107 0310 	add.w	r3, r7, #16
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f007 f843 	bl	8108df4 <HAL_RCCEx_PeriphCLKConfig>
 8101d6e:	4603      	mov	r3, r0
 8101d70:	2b00      	cmp	r3, #0
 8101d72:	d001      	beq.n	8101d78 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101d74:	f000 ffc2 	bl	8102cfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d78:	4b52      	ldr	r3, [pc, #328]	; (8101ec4 <HAL_I2C_MspInit+0x19c>)
 8101d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d7e:	4a51      	ldr	r2, [pc, #324]	; (8101ec4 <HAL_I2C_MspInit+0x19c>)
 8101d80:	f043 0302 	orr.w	r3, r3, #2
 8101d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d88:	4b4e      	ldr	r3, [pc, #312]	; (8101ec4 <HAL_I2C_MspInit+0x19c>)
 8101d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d8e:	f003 0302 	and.w	r3, r3, #2
 8101d92:	60fb      	str	r3, [r7, #12]
 8101d94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101d9e:	2312      	movs	r3, #18
 8101da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101da4:	2300      	movs	r3, #0
 8101da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101daa:	2300      	movs	r3, #0
 8101dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101db0:	2304      	movs	r3, #4
 8101db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101db6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101dba:	4619      	mov	r1, r3
 8101dbc:	4842      	ldr	r0, [pc, #264]	; (8101ec8 <HAL_I2C_MspInit+0x1a0>)
 8101dbe:	f004 ffdb 	bl	8106d78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101dc2:	4b40      	ldr	r3, [pc, #256]	; (8101ec4 <HAL_I2C_MspInit+0x19c>)
 8101dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dc8:	4a3e      	ldr	r2, [pc, #248]	; (8101ec4 <HAL_I2C_MspInit+0x19c>)
 8101dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101dce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101dd2:	4b3c      	ldr	r3, [pc, #240]	; (8101ec4 <HAL_I2C_MspInit+0x19c>)
 8101dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101ddc:	60bb      	str	r3, [r7, #8]
 8101dde:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101de0:	4b3a      	ldr	r3, [pc, #232]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101de2:	4a3b      	ldr	r2, [pc, #236]	; (8101ed0 <HAL_I2C_MspInit+0x1a8>)
 8101de4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101de6:	4b39      	ldr	r3, [pc, #228]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101de8:	2221      	movs	r2, #33	; 0x21
 8101dea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101dec:	4b37      	ldr	r3, [pc, #220]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101dee:	2200      	movs	r2, #0
 8101df0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101df2:	4b36      	ldr	r3, [pc, #216]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101df4:	2200      	movs	r2, #0
 8101df6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101df8:	4b34      	ldr	r3, [pc, #208]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101dfe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e00:	4b32      	ldr	r3, [pc, #200]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e02:	2200      	movs	r2, #0
 8101e04:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e06:	4b31      	ldr	r3, [pc, #196]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e08:	2200      	movs	r2, #0
 8101e0a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101e0c:	4b2f      	ldr	r3, [pc, #188]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e0e:	2200      	movs	r2, #0
 8101e10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e12:	4b2e      	ldr	r3, [pc, #184]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e18:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e1a:	4b2c      	ldr	r3, [pc, #176]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e1c:	2200      	movs	r2, #0
 8101e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101e20:	482a      	ldr	r0, [pc, #168]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e22:	f002 f957 	bl	81040d4 <HAL_DMA_Init>
 8101e26:	4603      	mov	r3, r0
 8101e28:	2b00      	cmp	r3, #0
 8101e2a:	d001      	beq.n	8101e30 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101e2c:	f000 ff66 	bl	8102cfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	4a26      	ldr	r2, [pc, #152]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e34:	63da      	str	r2, [r3, #60]	; 0x3c
 8101e36:	4a25      	ldr	r2, [pc, #148]	; (8101ecc <HAL_I2C_MspInit+0x1a4>)
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101e3c:	4b25      	ldr	r3, [pc, #148]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e3e:	4a26      	ldr	r2, [pc, #152]	; (8101ed8 <HAL_I2C_MspInit+0x1b0>)
 8101e40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101e42:	4b24      	ldr	r3, [pc, #144]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e44:	2222      	movs	r2, #34	; 0x22
 8101e46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101e48:	4b22      	ldr	r3, [pc, #136]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e4a:	2240      	movs	r2, #64	; 0x40
 8101e4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e4e:	4b21      	ldr	r3, [pc, #132]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e50:	2200      	movs	r2, #0
 8101e52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101e54:	4b1f      	ldr	r3, [pc, #124]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e5a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e5c:	4b1d      	ldr	r3, [pc, #116]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e5e:	2200      	movs	r2, #0
 8101e60:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e62:	4b1c      	ldr	r3, [pc, #112]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e64:	2200      	movs	r2, #0
 8101e66:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101e68:	4b1a      	ldr	r3, [pc, #104]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e6a:	2200      	movs	r2, #0
 8101e6c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e6e:	4b19      	ldr	r3, [pc, #100]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e74:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e76:	4b17      	ldr	r3, [pc, #92]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e78:	2200      	movs	r2, #0
 8101e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101e7c:	4815      	ldr	r0, [pc, #84]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e7e:	f002 f929 	bl	81040d4 <HAL_DMA_Init>
 8101e82:	4603      	mov	r3, r0
 8101e84:	2b00      	cmp	r3, #0
 8101e86:	d001      	beq.n	8101e8c <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101e88:	f000 ff38 	bl	8102cfc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	4a11      	ldr	r2, [pc, #68]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e90:	639a      	str	r2, [r3, #56]	; 0x38
 8101e92:	4a10      	ldr	r2, [pc, #64]	; (8101ed4 <HAL_I2C_MspInit+0x1ac>)
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101e98:	2200      	movs	r2, #0
 8101e9a:	2100      	movs	r1, #0
 8101e9c:	201f      	movs	r0, #31
 8101e9e:	f002 f8d0 	bl	8104042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101ea2:	201f      	movs	r0, #31
 8101ea4:	f002 f8e7 	bl	8104076 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101ea8:	2200      	movs	r2, #0
 8101eaa:	2100      	movs	r1, #0
 8101eac:	2020      	movs	r0, #32
 8101eae:	f002 f8c8 	bl	8104042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101eb2:	2020      	movs	r0, #32
 8101eb4:	f002 f8df 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101eb8:	bf00      	nop
 8101eba:	37e0      	adds	r7, #224	; 0xe0
 8101ebc:	46bd      	mov	sp, r7
 8101ebe:	bd80      	pop	{r7, pc}
 8101ec0:	40005400 	.word	0x40005400
 8101ec4:	58024400 	.word	0x58024400
 8101ec8:	58020400 	.word	0x58020400
 8101ecc:	10000270 	.word	0x10000270
 8101ed0:	40020040 	.word	0x40020040
 8101ed4:	100001ac 	.word	0x100001ac
 8101ed8:	40020058 	.word	0x40020058

08101edc <CheckIMUSensorID>:
#include "lsm9ds1.h"
#include <stm32h7xx_hal.h>


uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8101edc:	b580      	push	{r7, lr}
 8101ede:	b088      	sub	sp, #32
 8101ee0:	af04      	add	r7, sp, #16
 8101ee2:	4603      	mov	r3, r0
 8101ee4:	460a      	mov	r2, r1
 8101ee6:	71fb      	strb	r3, [r7, #7]
 8101ee8:	4613      	mov	r3, r2
 8101eea:	71bb      	strb	r3, [r7, #6]

//  HAL_Delay(100);
//   uint8_t result = I2CReadByte(address, reg);
//

    uint8_t value = 0x00;
 8101eec:	2300      	movs	r3, #0
 8101eee:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
//    status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,100);
 8101ef0:	79fb      	ldrb	r3, [r7, #7]
 8101ef2:	b29b      	uxth	r3, r3
 8101ef4:	005b      	lsls	r3, r3, #1
 8101ef6:	b299      	uxth	r1, r3
 8101ef8:	79bb      	ldrb	r3, [r7, #6]
 8101efa:	b29a      	uxth	r2, r3
 8101efc:	2364      	movs	r3, #100	; 0x64
 8101efe:	9302      	str	r3, [sp, #8]
 8101f00:	2301      	movs	r3, #1
 8101f02:	9301      	str	r3, [sp, #4]
 8101f04:	f107 030e 	add.w	r3, r7, #14
 8101f08:	9300      	str	r3, [sp, #0]
 8101f0a:	2301      	movs	r3, #1
 8101f0c:	4807      	ldr	r0, [pc, #28]	; (8101f2c <CheckIMUSensorID+0x50>)
 8101f0e:	f005 fae1 	bl	81074d4 <HAL_I2C_Mem_Read>
 8101f12:	4603      	mov	r3, r0
 8101f14:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK)
 8101f16:	7bfb      	ldrb	r3, [r7, #15]
 8101f18:	2b00      	cmp	r3, #0
 8101f1a:	d001      	beq.n	8101f20 <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8101f1c:	2301      	movs	r3, #1
 8101f1e:	e000      	b.n	8101f22 <CheckIMUSensorID+0x46>
    }
    return value;
 8101f20:	7bbb      	ldrb	r3, [r7, #14]
   //return result;


}
 8101f22:	4618      	mov	r0, r3
 8101f24:	3710      	adds	r7, #16
 8101f26:	46bd      	mov	sp, r7
 8101f28:	bd80      	pop	{r7, pc}
 8101f2a:	bf00      	nop
 8101f2c:	10000224 	.word	0x10000224

08101f30 <init>:

void init(LSM9DS1Handle* imu)
{
 8101f30:	b480      	push	{r7}
 8101f32:	b083      	sub	sp, #12
 8101f34:	af00      	add	r7, sp, #0
 8101f36:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	2201      	movs	r2, #1
 8101f3c:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	2201      	movs	r2, #1
 8101f42:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	2201      	movs	r2, #1
 8101f48:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	2201      	movs	r2, #1
 8101f4e:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale  245, 500, 2000
  imu->gyro_settings.scale = 245;
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	22f5      	movs	r2, #245	; 0xf5
 8101f54:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	2206      	movs	r2, #6
 8101f5a:	711a      	strb	r2, [r3, #4]
  // set cutoff frequency // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	2200      	movs	r2, #0
 8101f60:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	2200      	movs	r2, #0
 8101f66:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	2200      	movs	r2, #0
 8101f6c:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	2200      	movs	r2, #0
 8101f72:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	2200      	movs	r2, #0
 8101f78:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	2200      	movs	r2, #0
 8101f84:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	2200      	movs	r2, #0
 8101f8a:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	2201      	movs	r2, #1
 8101f90:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	2201      	movs	r2, #1
 8101f96:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	2201      	movs	r2, #1
 8101f9c:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	2201      	movs	r2, #1
 8101fa2:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	2201      	movs	r2, #1
 8101fa8:	75da      	strb	r2, [r3, #23]

  // 2,4, 8,16
  imu->accel_settings.scale = 2;
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	2202      	movs	r2, #2
 8101fae:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	2206      	movs	r2, #6
 8101fb4:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	22ff      	movs	r2, #255	; 0xff
 8101fba:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	2200      	movs	r2, #0
 8101fc0:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	2200      	movs	r2, #0
 8101fc6:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	2201      	movs	r2, #1
 8101fcc:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	2204      	movs	r2, #4
 8101fd2:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	2207      	movs	r2, #7
 8101fd8:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	2200      	movs	r2, #0
 8101fde:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	2203      	movs	r2, #3
 8101fe4:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	2203      	movs	r2, #3
 8101fea:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	2200      	movs	r2, #0
 8101ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	2200      	movs	r2, #0
 8101ffa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  imu->temp_settings.enabled = 1;
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	2201      	movs	r2, #1
 8102002:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
 8102006:	bf00      	nop
 8102008:	370c      	adds	r7, #12
 810200a:	46bd      	mov	sp, r7
 810200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102010:	4770      	bx	lr

08102012 <setup>:

uint16_t setup(LSM9DS1Handle* imu)
{
 8102012:	b580      	push	{r7, lr}
 8102014:	b084      	sub	sp, #16
 8102016:	af00      	add	r7, sp, #0
 8102018:	6078      	str	r0, [r7, #4]

  // initialise the sensors
  init(imu);
 810201a:	6878      	ldr	r0, [r7, #4]
 810201c:	f7ff ff88 	bl	8101f30 <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8102020:	6878      	ldr	r0, [r7, #4]
 8102022:	f000 f9ea 	bl	81023fa <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 8102026:	6878      	ldr	r0, [r7, #4]
 8102028:	f000 fb5e 	bl	81026e8 <calcGyroResolution>
  calcAccResoltuion(imu);
 810202c:	6878      	ldr	r0, [r7, #4]
 810202e:	f000 fb89 	bl	8102744 <calcAccResoltuion>
  calcMagResolution(imu);
 8102032:	6878      	ldr	r0, [r7, #4]
 8102034:	f000 fbd2 	bl	81027dc <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check = CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 8102038:	210f      	movs	r1, #15
 810203a:	206b      	movs	r0, #107	; 0x6b
 810203c:	f7ff ff4e 	bl	8101edc <CheckIMUSensorID>
 8102040:	4603      	mov	r3, r0
 8102042:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 8102044:	210f      	movs	r1, #15
 8102046:	201e      	movs	r0, #30
 8102048:	f7ff ff48 	bl	8101edc <CheckIMUSensorID>
 810204c:	4603      	mov	r3, r0
 810204e:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8102050:	7bfb      	ldrb	r3, [r7, #15]
 8102052:	021b      	lsls	r3, r3, #8
 8102054:	b21a      	sxth	r2, r3
 8102056:	7bbb      	ldrb	r3, [r7, #14]
 8102058:	b21b      	sxth	r3, r3
 810205a:	4313      	orrs	r3, r2
 810205c:	b21b      	sxth	r3, r3
 810205e:	81bb      	strh	r3, [r7, #12]

  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 8102060:	89bb      	ldrh	r3, [r7, #12]
 8102062:	f646 023d 	movw	r2, #26685	; 0x683d
 8102066:	4293      	cmp	r3, r2
 8102068:	d001      	beq.n	810206e <setup+0x5c>
  {
          return 0;
 810206a:	2300      	movs	r3, #0
 810206c:	e009      	b.n	8102082 <setup+0x70>
  }

  // initialise gyro
  initGyro(imu);
 810206e:	6878      	ldr	r0, [r7, #4]
 8102070:	f000 f80b 	bl	810208a <initGyro>
  // initialise accel
  initAccel(imu);
 8102074:	6878      	ldr	r0, [r7, #4]
 8102076:	f000 f8ad 	bl	81021d4 <initAccel>
  // init Mag
 initMag(imu);
 810207a:	6878      	ldr	r0, [r7, #4]
 810207c:	f000 f931 	bl	81022e2 <initMag>
  return imu_response;
 8102080:	89bb      	ldrh	r3, [r7, #12]
}
 8102082:	4618      	mov	r0, r3
 8102084:	3710      	adds	r7, #16
 8102086:	46bd      	mov	sp, r7
 8102088:	bd80      	pop	{r7, pc}

0810208a <initGyro>:


void initGyro(LSM9DS1Handle* imu)
{
 810208a:	b580      	push	{r7, lr}
 810208c:	b084      	sub	sp, #16
 810208e:	af00      	add	r7, sp, #0
 8102090:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 8102092:	2300      	movs	r3, #0
 8102094:	73fb      	strb	r3, [r7, #15]
  // ONly set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	781b      	ldrb	r3, [r3, #0]
 810209a:	2b01      	cmp	r3, #1
 810209c:	d103      	bne.n	81020a6 <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	791b      	ldrb	r3, [r3, #4]
 81020a2:	015b      	lsls	r3, r3, #5
 81020a4:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	885b      	ldrh	r3, [r3, #2]
 81020aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81020ae:	d003      	beq.n	81020b8 <initGyro+0x2e>
 81020b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81020b4:	d005      	beq.n	81020c2 <initGyro+0x38>
 81020b6:	e009      	b.n	81020cc <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 81020b8:	7bfb      	ldrb	r3, [r7, #15]
 81020ba:	f043 0308 	orr.w	r3, r3, #8
 81020be:	73fb      	strb	r3, [r7, #15]
      break;
 81020c0:	e004      	b.n	81020cc <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 81020c2:	7bfb      	ldrb	r3, [r7, #15]
 81020c4:	f043 0318 	orr.w	r3, r3, #24
 81020c8:	73fb      	strb	r3, [r7, #15]
      break;
 81020ca:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	795b      	ldrb	r3, [r3, #5]
 81020d0:	b25b      	sxtb	r3, r3
 81020d2:	f003 0303 	and.w	r3, r3, #3
 81020d6:	b25a      	sxtb	r2, r3
 81020d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81020dc:	4313      	orrs	r3, r2
 81020de:	b25b      	sxtb	r3, r3
 81020e0:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 81020e2:	7bfb      	ldrb	r3, [r7, #15]
 81020e4:	461a      	mov	r2, r3
 81020e6:	2110      	movs	r1, #16
 81020e8:	206b      	movs	r0, #107	; 0x6b
 81020ea:	f000 fbed 	bl	81028c8 <WriteByte>

   // reset tempValue
   tempRegValue = 0;
 81020ee:	2300      	movs	r3, #0
 81020f0:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 81020f2:	7bfb      	ldrb	r3, [r7, #15]
 81020f4:	461a      	mov	r2, r3
 81020f6:	2111      	movs	r1, #17
 81020f8:	206b      	movs	r0, #107	; 0x6b
 81020fa:	f000 fbe5 	bl	81028c8 <WriteByte>

   tempRegValue = 0;
 81020fe:	2300      	movs	r3, #0
 8102100:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	799b      	ldrb	r3, [r3, #6]
 8102106:	2b00      	cmp	r3, #0
 8102108:	d001      	beq.n	810210e <initGyro+0x84>
 810210a:	2380      	movs	r3, #128	; 0x80
 810210c:	e000      	b.n	8102110 <initGyro+0x86>
 810210e:	2300      	movs	r3, #0
 8102110:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	79db      	ldrb	r3, [r3, #7]
 8102116:	2b01      	cmp	r3, #1
 8102118:	d10a      	bne.n	8102130 <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	7a1b      	ldrb	r3, [r3, #8]
 810211e:	f003 030f 	and.w	r3, r3, #15
 8102122:	b2da      	uxtb	r2, r3
 8102124:	7bfb      	ldrb	r3, [r7, #15]
 8102126:	4313      	orrs	r3, r2
 8102128:	b2db      	uxtb	r3, r3
 810212a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810212e:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 8102130:	7bfb      	ldrb	r3, [r7, #15]
 8102132:	461a      	mov	r2, r3
 8102134:	2112      	movs	r1, #18
 8102136:	206b      	movs	r0, #107	; 0x6b
 8102138:	f000 fbc6 	bl	81028c8 <WriteByte>


   tempRegValue = 0;
 810213c:	2300      	movs	r3, #0
 810213e:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	7bdb      	ldrb	r3, [r3, #15]
 8102144:	2b00      	cmp	r3, #0
 8102146:	d003      	beq.n	8102150 <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 8102148:	7bfb      	ldrb	r3, [r7, #15]
 810214a:	f043 0320 	orr.w	r3, r3, #32
 810214e:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	7b9b      	ldrb	r3, [r3, #14]
 8102154:	2b00      	cmp	r3, #0
 8102156:	d003      	beq.n	8102160 <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 8102158:	7bfb      	ldrb	r3, [r7, #15]
 810215a:	f043 0310 	orr.w	r3, r3, #16
 810215e:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	7b5b      	ldrb	r3, [r3, #13]
 8102164:	2b00      	cmp	r3, #0
 8102166:	d003      	beq.n	8102170 <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 8102168:	7bfb      	ldrb	r3, [r7, #15]
 810216a:	f043 0308 	orr.w	r3, r3, #8
 810216e:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	7c1b      	ldrb	r3, [r3, #16]
 8102174:	2b00      	cmp	r3, #0
 8102176:	d003      	beq.n	8102180 <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 8102178:	7bfb      	ldrb	r3, [r7, #15]
 810217a:	f043 0302 	orr.w	r3, r3, #2
 810217e:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 8102180:	7bfb      	ldrb	r3, [r7, #15]
 8102182:	461a      	mov	r2, r3
 8102184:	211e      	movs	r1, #30
 8102186:	206b      	movs	r0, #107	; 0x6b
 8102188:	f000 fb9e 	bl	81028c8 <WriteByte>

   tempRegValue = 0;
 810218c:	2300      	movs	r3, #0
 810218e:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	7a5b      	ldrb	r3, [r3, #9]
 8102194:	2b00      	cmp	r3, #0
 8102196:	d003      	beq.n	81021a0 <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 8102198:	7bfb      	ldrb	r3, [r7, #15]
 810219a:	f043 0320 	orr.w	r3, r3, #32
 810219e:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	7a9b      	ldrb	r3, [r3, #10]
 81021a4:	2b00      	cmp	r3, #0
 81021a6:	d003      	beq.n	81021b0 <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 81021a8:	7bfb      	ldrb	r3, [r7, #15]
 81021aa:	f043 0310 	orr.w	r3, r3, #16
 81021ae:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	7adb      	ldrb	r3, [r3, #11]
 81021b4:	2b00      	cmp	r3, #0
 81021b6:	d003      	beq.n	81021c0 <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 81021b8:	7bfb      	ldrb	r3, [r7, #15]
 81021ba:	f043 0308 	orr.w	r3, r3, #8
 81021be:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 81021c0:	7bfb      	ldrb	r3, [r7, #15]
 81021c2:	461a      	mov	r2, r3
 81021c4:	2113      	movs	r1, #19
 81021c6:	206b      	movs	r0, #107	; 0x6b
 81021c8:	f000 fb7e 	bl	81028c8 <WriteByte>
}
 81021cc:	bf00      	nop
 81021ce:	3710      	adds	r7, #16
 81021d0:	46bd      	mov	sp, r7
 81021d2:	bd80      	pop	{r7, pc}

081021d4 <initAccel>:

void initAccel(LSM9DS1Handle* imu)
{
 81021d4:	b580      	push	{r7, lr}
 81021d6:	b084      	sub	sp, #16
 81021d8:	af00      	add	r7, sp, #0
 81021da:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 81021dc:	2300      	movs	r3, #0
 81021de:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	7ddb      	ldrb	r3, [r3, #23]
 81021e4:	2b00      	cmp	r3, #0
 81021e6:	d003      	beq.n	81021f0 <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 81021e8:	7bfb      	ldrb	r3, [r7, #15]
 81021ea:	f043 0320 	orr.w	r3, r3, #32
 81021ee:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	7d9b      	ldrb	r3, [r3, #22]
 81021f4:	2b00      	cmp	r3, #0
 81021f6:	d003      	beq.n	8102200 <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 81021f8:	7bfb      	ldrb	r3, [r7, #15]
 81021fa:	f043 0310 	orr.w	r3, r3, #16
 81021fe:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	7d5b      	ldrb	r3, [r3, #21]
 8102204:	2b00      	cmp	r3, #0
 8102206:	d003      	beq.n	8102210 <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 8102208:	7bfb      	ldrb	r3, [r7, #15]
 810220a:	f043 0308 	orr.w	r3, r3, #8
 810220e:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 8102210:	7bfb      	ldrb	r3, [r7, #15]
 8102212:	461a      	mov	r2, r3
 8102214:	211f      	movs	r1, #31
 8102216:	206b      	movs	r0, #107	; 0x6b
 8102218:	f000 fb56 	bl	81028c8 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 810221c:	2300      	movs	r3, #0
 810221e:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 8102220:	687b      	ldr	r3, [r7, #4]
 8102222:	7c9b      	ldrb	r3, [r3, #18]
 8102224:	2b00      	cmp	r3, #0
 8102226:	d008      	beq.n	810223a <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	7d1b      	ldrb	r3, [r3, #20]
 810222c:	015b      	lsls	r3, r3, #5
 810222e:	b25a      	sxtb	r2, r3
 8102230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102234:	4313      	orrs	r3, r2
 8102236:	b25b      	sxtb	r3, r3
 8102238:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	7cdb      	ldrb	r3, [r3, #19]
 810223e:	2b10      	cmp	r3, #16
 8102240:	d010      	beq.n	8102264 <initAccel+0x90>
 8102242:	2b10      	cmp	r3, #16
 8102244:	dc13      	bgt.n	810226e <initAccel+0x9a>
 8102246:	2b04      	cmp	r3, #4
 8102248:	d002      	beq.n	8102250 <initAccel+0x7c>
 810224a:	2b08      	cmp	r3, #8
 810224c:	d005      	beq.n	810225a <initAccel+0x86>
 810224e:	e00e      	b.n	810226e <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 8102250:	7bfb      	ldrb	r3, [r7, #15]
 8102252:	f043 0310 	orr.w	r3, r3, #16
 8102256:	73fb      	strb	r3, [r7, #15]
      break;
 8102258:	e009      	b.n	810226e <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 810225a:	7bfb      	ldrb	r3, [r7, #15]
 810225c:	f043 0318 	orr.w	r3, r3, #24
 8102260:	73fb      	strb	r3, [r7, #15]
      break;
 8102262:	e004      	b.n	810226e <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 8102264:	7bfb      	ldrb	r3, [r7, #15]
 8102266:	f043 0308 	orr.w	r3, r3, #8
 810226a:	73fb      	strb	r3, [r7, #15]
      break;
 810226c:	bf00      	nop

  }

  if(imu->accel_settings.bandwidth >= 0)
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102274:	2b00      	cmp	r3, #0
 8102276:	db0e      	blt.n	8102296 <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 8102278:	7bfb      	ldrb	r3, [r7, #15]
 810227a:	f043 0304 	orr.w	r3, r3, #4
 810227e:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102286:	f003 0303 	and.w	r3, r3, #3
 810228a:	b25a      	sxtb	r2, r3
 810228c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102290:	4313      	orrs	r3, r2
 8102292:	b25b      	sxtb	r3, r3
 8102294:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 8102296:	7bfb      	ldrb	r3, [r7, #15]
 8102298:	461a      	mov	r2, r3
 810229a:	2120      	movs	r1, #32
 810229c:	206b      	movs	r0, #107	; 0x6b
 810229e:	f000 fb13 	bl	81028c8 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 81022a2:	2300      	movs	r3, #0
 81022a4:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	7e5b      	ldrb	r3, [r3, #25]
 81022aa:	2b01      	cmp	r3, #1
 81022ac:	d10f      	bne.n	81022ce <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 81022ae:	7bfb      	ldrb	r3, [r7, #15]
 81022b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81022b4:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	7e9b      	ldrb	r3, [r3, #26]
 81022ba:	015b      	lsls	r3, r3, #5
 81022bc:	b25b      	sxtb	r3, r3
 81022be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81022c2:	b25a      	sxtb	r2, r3
 81022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022c8:	4313      	orrs	r3, r2
 81022ca:	b25b      	sxtb	r3, r3
 81022cc:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 81022ce:	7bfb      	ldrb	r3, [r7, #15]
 81022d0:	461a      	mov	r2, r3
 81022d2:	2121      	movs	r1, #33	; 0x21
 81022d4:	206b      	movs	r0, #107	; 0x6b
 81022d6:	f000 faf7 	bl	81028c8 <WriteByte>
}
 81022da:	bf00      	nop
 81022dc:	3710      	adds	r7, #16
 81022de:	46bd      	mov	sp, r7
 81022e0:	bd80      	pop	{r7, pc}

081022e2 <initMag>:



void initMag(LSM9DS1Handle* imu)
{
 81022e2:	b580      	push	{r7, lr}
 81022e4:	b084      	sub	sp, #16
 81022e6:	af00      	add	r7, sp, #0
 81022e8:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 81022ea:	2300      	movs	r3, #0
 81022ec:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	7f9b      	ldrb	r3, [r3, #30]
 81022f2:	2b01      	cmp	r3, #1
 81022f4:	d103      	bne.n	81022fe <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 81022f6:	7bfb      	ldrb	r3, [r7, #15]
 81022f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81022fc:	73fb      	strb	r3, [r7, #15]
  }
  // Make Operative mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	7fdb      	ldrb	r3, [r3, #31]
 8102302:	015b      	lsls	r3, r3, #5
 8102304:	b25b      	sxtb	r3, r3
 8102306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 810230a:	b25a      	sxtb	r2, r3
 810230c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102310:	4313      	orrs	r3, r2
 8102312:	b25b      	sxtb	r3, r3
 8102314:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	7f5b      	ldrb	r3, [r3, #29]
 810231a:	009b      	lsls	r3, r3, #2
 810231c:	b25b      	sxtb	r3, r3
 810231e:	f003 031c 	and.w	r3, r3, #28
 8102322:	b25a      	sxtb	r2, r3
 8102324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102328:	4313      	orrs	r3, r2
 810232a:	b25b      	sxtb	r3, r3
 810232c:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 810232e:	7bfb      	ldrb	r3, [r7, #15]
 8102330:	461a      	mov	r2, r3
 8102332:	2120      	movs	r1, #32
 8102334:	201e      	movs	r0, #30
 8102336:	f000 fac7 	bl	81028c8 <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 810233a:	2300      	movs	r3, #0
 810233c:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	7f1b      	ldrb	r3, [r3, #28]
 8102342:	2b10      	cmp	r3, #16
 8102344:	d010      	beq.n	8102368 <initMag+0x86>
 8102346:	2b10      	cmp	r3, #16
 8102348:	dc13      	bgt.n	8102372 <initMag+0x90>
 810234a:	2b08      	cmp	r3, #8
 810234c:	d002      	beq.n	8102354 <initMag+0x72>
 810234e:	2b0c      	cmp	r3, #12
 8102350:	d005      	beq.n	810235e <initMag+0x7c>
 8102352:	e00e      	b.n	8102372 <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 8102354:	7bfb      	ldrb	r3, [r7, #15]
 8102356:	f043 0320 	orr.w	r3, r3, #32
 810235a:	73fb      	strb	r3, [r7, #15]
      break;
 810235c:	e009      	b.n	8102372 <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 810235e:	7bfb      	ldrb	r3, [r7, #15]
 8102360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102364:	73fb      	strb	r3, [r7, #15]
      break;
 8102366:	e004      	b.n	8102372 <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 8102368:	7bfb      	ldrb	r3, [r7, #15]
 810236a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 810236e:	73fb      	strb	r3, [r7, #15]
      break;
 8102370:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 8102372:	7bfb      	ldrb	r3, [r7, #15]
 8102374:	461a      	mov	r2, r3
 8102376:	2121      	movs	r1, #33	; 0x21
 8102378:	201e      	movs	r0, #30
 810237a:	f000 faa5 	bl	81028c8 <WriteByte>

   tempRegValue = 0;
 810237e:	2300      	movs	r3, #0
 8102380:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8102388:	2b01      	cmp	r3, #1
 810238a:	d103      	bne.n	8102394 <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 810238c:	7bfb      	ldrb	r3, [r7, #15]
 810238e:	f043 0320 	orr.w	r3, r3, #32
 8102392:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 810239a:	b25b      	sxtb	r3, r3
 810239c:	f003 0303 	and.w	r3, r3, #3
 81023a0:	b25a      	sxtb	r2, r3
 81023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81023a6:	4313      	orrs	r3, r2
 81023a8:	b25b      	sxtb	r3, r3
 81023aa:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 81023ac:	7bfb      	ldrb	r3, [r7, #15]
 81023ae:	461a      	mov	r2, r3
 81023b0:	2122      	movs	r1, #34	; 0x22
 81023b2:	201e      	movs	r0, #30
 81023b4:	f000 fa88 	bl	81028c8 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 81023b8:	2300      	movs	r3, #0
 81023ba:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	f893 3020 	ldrb.w	r3, [r3, #32]
 81023c2:	009b      	lsls	r3, r3, #2
 81023c4:	b25b      	sxtb	r3, r3
 81023c6:	f003 030c 	and.w	r3, r3, #12
 81023ca:	b25a      	sxtb	r2, r3
 81023cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81023d0:	4313      	orrs	r3, r2
 81023d2:	b25b      	sxtb	r3, r3
 81023d4:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 81023d6:	7bfb      	ldrb	r3, [r7, #15]
 81023d8:	461a      	mov	r2, r3
 81023da:	2123      	movs	r1, #35	; 0x23
 81023dc:	201e      	movs	r0, #30
 81023de:	f000 fa73 	bl	81028c8 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 81023e2:	2300      	movs	r3, #0
 81023e4:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 81023e6:	7bfb      	ldrb	r3, [r7, #15]
 81023e8:	461a      	mov	r2, r3
 81023ea:	2124      	movs	r1, #36	; 0x24
 81023ec:	201e      	movs	r0, #30
 81023ee:	f000 fa6b 	bl	81028c8 <WriteByte>

}
 81023f2:	bf00      	nop
 81023f4:	3710      	adds	r7, #16
 81023f6:	46bd      	mov	sp, r7
 81023f8:	bd80      	pop	{r7, pc}

081023fa <clampScales>:


void clampScales(LSM9DS1Handle* imu)
{
 81023fa:	b480      	push	{r7}
 81023fc:	b083      	sub	sp, #12
 81023fe:	af00      	add	r7, sp, #0
 8102400:	6078      	str	r0, [r7, #4]

  // clamp gyro scales
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	885b      	ldrh	r3, [r3, #2]
 8102406:	2bf5      	cmp	r3, #245	; 0xf5
 8102408:	d00c      	beq.n	8102424 <clampScales+0x2a>
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	885b      	ldrh	r3, [r3, #2]
 810240e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102412:	d007      	beq.n	8102424 <clampScales+0x2a>
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	885b      	ldrh	r3, [r3, #2]
 8102418:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 810241c:	d002      	beq.n	8102424 <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	22f5      	movs	r2, #245	; 0xf5
 8102422:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	7cdb      	ldrb	r3, [r3, #19]
 8102428:	2b02      	cmp	r3, #2
 810242a:	d00e      	beq.n	810244a <clampScales+0x50>
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	7cdb      	ldrb	r3, [r3, #19]
 8102430:	2b04      	cmp	r3, #4
 8102432:	d00a      	beq.n	810244a <clampScales+0x50>
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	7cdb      	ldrb	r3, [r3, #19]
 8102438:	2b08      	cmp	r3, #8
 810243a:	d006      	beq.n	810244a <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	7cdb      	ldrb	r3, [r3, #19]
 8102440:	2b10      	cmp	r3, #16
 8102442:	d002      	beq.n	810244a <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	22f5      	movs	r2, #245	; 0xf5
 8102448:	74da      	strb	r2, [r3, #19]
  }


  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	7f1b      	ldrb	r3, [r3, #28]
 810244e:	2b04      	cmp	r3, #4
 8102450:	d00e      	beq.n	8102470 <clampScales+0x76>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	7f1b      	ldrb	r3, [r3, #28]
 8102456:	2b08      	cmp	r3, #8
 8102458:	d00a      	beq.n	8102470 <clampScales+0x76>
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	7f1b      	ldrb	r3, [r3, #28]
 810245e:	2b0c      	cmp	r3, #12
 8102460:	d006      	beq.n	8102470 <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 8102466:	2b10      	cmp	r3, #16
 8102468:	d002      	beq.n	8102470 <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	2204      	movs	r2, #4
 810246e:	771a      	strb	r2, [r3, #28]
  }

}
 8102470:	bf00      	nop
 8102472:	370c      	adds	r7, #12
 8102474:	46bd      	mov	sp, r7
 8102476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810247a:	4770      	bx	lr

0810247c <calcGyro>:

float calcGyro(float gyro)
{
 810247c:	b480      	push	{r7}
 810247e:	b083      	sub	sp, #12
 8102480:	af00      	add	r7, sp, #0
 8102482:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 8102486:	4b07      	ldr	r3, [pc, #28]	; (81024a4 <calcGyro+0x28>)
 8102488:	ed93 7a00 	vldr	s14, [r3]
 810248c:	edd7 7a01 	vldr	s15, [r7, #4]
 8102490:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102494:	eeb0 0a67 	vmov.f32	s0, s15
 8102498:	370c      	adds	r7, #12
 810249a:	46bd      	mov	sp, r7
 810249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024a0:	4770      	bx	lr
 81024a2:	bf00      	nop
 81024a4:	100002f0 	.word	0x100002f0

081024a8 <calcMag>:
float calcMag(float mag)
{
 81024a8:	b480      	push	{r7}
 81024aa:	b083      	sub	sp, #12
 81024ac:	af00      	add	r7, sp, #0
 81024ae:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 81024b2:	4b07      	ldr	r3, [pc, #28]	; (81024d0 <calcMag+0x28>)
 81024b4:	ed93 7a00 	vldr	s14, [r3]
 81024b8:	edd7 7a01 	vldr	s15, [r7, #4]
 81024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81024c0:	eeb0 0a67 	vmov.f32	s0, s15
 81024c4:	370c      	adds	r7, #12
 81024c6:	46bd      	mov	sp, r7
 81024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024cc:	4770      	bx	lr
 81024ce:	bf00      	nop
 81024d0:	100002ec 	.word	0x100002ec

081024d4 <calcAccel>:
float calcAccel(float accel)
{
 81024d4:	b480      	push	{r7}
 81024d6:	b083      	sub	sp, #12
 81024d8:	af00      	add	r7, sp, #0
 81024da:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 81024de:	4b07      	ldr	r3, [pc, #28]	; (81024fc <calcAccel+0x28>)
 81024e0:	ed93 7a00 	vldr	s14, [r3]
 81024e4:	edd7 7a01 	vldr	s15, [r7, #4]
 81024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81024ec:	eeb0 0a67 	vmov.f32	s0, s15
 81024f0:	370c      	adds	r7, #12
 81024f2:	46bd      	mov	sp, r7
 81024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024f8:	4770      	bx	lr
 81024fa:	bf00      	nop
 81024fc:	100002e8 	.word	0x100002e8

08102500 <readGyro>:
///@brief returns the gyroscope
/// data in dps
///@param imu struct handle
///@returns nothing
void readGyro(LSM9DS1Handle* imu)
{
 8102500:	b580      	push	{r7, lr}
 8102502:	b086      	sub	sp, #24
 8102504:	af00      	add	r7, sp, #0
 8102506:	6078      	str	r0, [r7, #4]

  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 8102508:	f107 020c 	add.w	r2, r7, #12
 810250c:	2306      	movs	r3, #6
 810250e:	2118      	movs	r1, #24
 8102510:	206b      	movs	r0, #107	; 0x6b
 8102512:	f000 f9af 	bl	8102874 <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 8102516:	7b7b      	ldrb	r3, [r7, #13]
 8102518:	021b      	lsls	r3, r3, #8
 810251a:	b21a      	sxth	r2, r3
 810251c:	7b3b      	ldrb	r3, [r7, #12]
 810251e:	b21b      	sxth	r3, r3
 8102520:	4313      	orrs	r3, r2
 8102522:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8102524:	7bfb      	ldrb	r3, [r7, #15]
 8102526:	021b      	lsls	r3, r3, #8
 8102528:	b21a      	sxth	r2, r3
 810252a:	7bbb      	ldrb	r3, [r7, #14]
 810252c:	b21b      	sxth	r3, r3
 810252e:	4313      	orrs	r3, r2
 8102530:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8102532:	7c7b      	ldrb	r3, [r7, #17]
 8102534:	021b      	lsls	r3, r3, #8
 8102536:	b21a      	sxth	r2, r3
 8102538:	7c3b      	ldrb	r3, [r7, #16]
 810253a:	b21b      	sxth	r3, r3
 810253c:	4313      	orrs	r3, r2
 810253e:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 8102540:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102544:	ee07 3a90 	vmov	s15, r3
 8102548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810254c:	eeb0 0a67 	vmov.f32	s0, s15
 8102550:	f7ff ff94 	bl	810247c <calcGyro>
 8102554:	eef0 7a40 	vmov.f32	s15, s0
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 810255e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102562:	ee07 3a90 	vmov	s15, r3
 8102566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810256a:	eeb0 0a67 	vmov.f32	s0, s15
 810256e:	f7ff ff85 	bl	810247c <calcGyro>
 8102572:	eef0 7a40 	vmov.f32	s15, s0
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 810257c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102580:	ee07 3a90 	vmov	s15, r3
 8102584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102588:	eeb0 0a67 	vmov.f32	s0, s15
 810258c:	f7ff ff76 	bl	810247c <calcGyro>
 8102590:	eef0 7a40 	vmov.f32	s15, s0
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 810259a:	bf00      	nop
 810259c:	3718      	adds	r7, #24
 810259e:	46bd      	mov	sp, r7
 81025a0:	bd80      	pop	{r7, pc}

081025a2 <readMag>:
///@brief returns the magnetometer
/// data in Gauss
///@param imu struct handle
///@returns nothing
void readMag(LSM9DS1Handle* imu)
{
 81025a2:	b580      	push	{r7, lr}
 81025a4:	b086      	sub	sp, #24
 81025a6:	af00      	add	r7, sp, #0
 81025a8:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 81025aa:	f107 020c 	add.w	r2, r7, #12
 81025ae:	2306      	movs	r3, #6
 81025b0:	2128      	movs	r1, #40	; 0x28
 81025b2:	201e      	movs	r0, #30
 81025b4:	f000 f95e 	bl	8102874 <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 81025b8:	7b7b      	ldrb	r3, [r7, #13]
 81025ba:	021b      	lsls	r3, r3, #8
 81025bc:	b21a      	sxth	r2, r3
 81025be:	7b3b      	ldrb	r3, [r7, #12]
 81025c0:	b21b      	sxth	r3, r3
 81025c2:	4313      	orrs	r3, r2
 81025c4:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 81025c6:	7bfb      	ldrb	r3, [r7, #15]
 81025c8:	021b      	lsls	r3, r3, #8
 81025ca:	b21a      	sxth	r2, r3
 81025cc:	7bbb      	ldrb	r3, [r7, #14]
 81025ce:	b21b      	sxth	r3, r3
 81025d0:	4313      	orrs	r3, r2
 81025d2:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 81025d4:	7c7b      	ldrb	r3, [r7, #17]
 81025d6:	021b      	lsls	r3, r3, #8
 81025d8:	b21a      	sxth	r2, r3
 81025da:	7c3b      	ldrb	r3, [r7, #16]
 81025dc:	b21b      	sxth	r3, r3
 81025de:	4313      	orrs	r3, r2
 81025e0:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 81025e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81025e6:	ee07 3a90 	vmov	s15, r3
 81025ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025ee:	eeb0 0a67 	vmov.f32	s0, s15
 81025f2:	f7ff ff59 	bl	81024a8 <calcMag>
 81025f6:	eef0 7a40 	vmov.f32	s15, s0
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 8102600:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102604:	ee07 3a90 	vmov	s15, r3
 8102608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810260c:	eeb0 0a67 	vmov.f32	s0, s15
 8102610:	f7ff ff4a 	bl	81024a8 <calcMag>
 8102614:	eef0 7a40 	vmov.f32	s15, s0
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 810261e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102622:	ee07 3a90 	vmov	s15, r3
 8102626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810262a:	eeb0 0a67 	vmov.f32	s0, s15
 810262e:	f7ff ff3b 	bl	81024a8 <calcMag>
 8102632:	eef0 7a40 	vmov.f32	s15, s0
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 810263c:	bf00      	nop
 810263e:	3718      	adds	r7, #24
 8102640:	46bd      	mov	sp, r7
 8102642:	bd80      	pop	{r7, pc}

08102644 <readAccel>:
///@brief returns the
/// accelerometer data in g's
///@param imu struct handle
///@returns nothing
void readAccel(LSM9DS1Handle* imu)
{
 8102644:	b580      	push	{r7, lr}
 8102646:	b086      	sub	sp, #24
 8102648:	af00      	add	r7, sp, #0
 810264a:	6078      	str	r0, [r7, #4]

  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 810264c:	f107 020c 	add.w	r2, r7, #12
 8102650:	2306      	movs	r3, #6
 8102652:	2128      	movs	r1, #40	; 0x28
 8102654:	206b      	movs	r0, #107	; 0x6b
 8102656:	f000 f90d 	bl	8102874 <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 810265a:	7b7b      	ldrb	r3, [r7, #13]
 810265c:	021b      	lsls	r3, r3, #8
 810265e:	b21a      	sxth	r2, r3
 8102660:	7b3b      	ldrb	r3, [r7, #12]
 8102662:	b21b      	sxth	r3, r3
 8102664:	4313      	orrs	r3, r2
 8102666:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8102668:	7bfb      	ldrb	r3, [r7, #15]
 810266a:	021b      	lsls	r3, r3, #8
 810266c:	b21a      	sxth	r2, r3
 810266e:	7bbb      	ldrb	r3, [r7, #14]
 8102670:	b21b      	sxth	r3, r3
 8102672:	4313      	orrs	r3, r2
 8102674:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8102676:	7c7b      	ldrb	r3, [r7, #17]
 8102678:	021b      	lsls	r3, r3, #8
 810267a:	b21a      	sxth	r2, r3
 810267c:	7c3b      	ldrb	r3, [r7, #16]
 810267e:	b21b      	sxth	r3, r3
 8102680:	4313      	orrs	r3, r2
 8102682:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 8102684:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102688:	ee07 3a90 	vmov	s15, r3
 810268c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102690:	eeb0 0a67 	vmov.f32	s0, s15
 8102694:	f7ff ff1e 	bl	81024d4 <calcAccel>
 8102698:	eef0 7a40 	vmov.f32	s15, s0
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 81026a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81026a6:	ee07 3a90 	vmov	s15, r3
 81026aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81026ae:	eeb0 0a67 	vmov.f32	s0, s15
 81026b2:	f7ff ff0f 	bl	81024d4 <calcAccel>
 81026b6:	eef0 7a40 	vmov.f32	s15, s0
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 81026c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81026c4:	ee07 3a90 	vmov	s15, r3
 81026c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81026cc:	eeb0 0a67 	vmov.f32	s0, s15
 81026d0:	f7ff ff00 	bl	81024d4 <calcAccel>
 81026d4:	eef0 7a40 	vmov.f32	s15, s0
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38


}
 81026de:	bf00      	nop
 81026e0:	3718      	adds	r7, #24
 81026e2:	46bd      	mov	sp, r7
 81026e4:	bd80      	pop	{r7, pc}
	...

081026e8 <calcGyroResolution>:
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG9, temp);
}


void calcGyroResolution(LSM9DS1Handle* imu)
{
 81026e8:	b480      	push	{r7}
 81026ea:	b083      	sub	sp, #12
 81026ec:	af00      	add	r7, sp, #0
 81026ee:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	885b      	ldrh	r3, [r3, #2]
 81026f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026f8:	d010      	beq.n	810271c <calcGyroResolution+0x34>
 81026fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026fe:	dc11      	bgt.n	8102724 <calcGyroResolution+0x3c>
 8102700:	2bf5      	cmp	r3, #245	; 0xf5
 8102702:	d003      	beq.n	810270c <calcGyroResolution+0x24>
 8102704:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102708:	d004      	beq.n	8102714 <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 810270a:	e00b      	b.n	8102724 <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 810270c:	4b09      	ldr	r3, [pc, #36]	; (8102734 <calcGyroResolution+0x4c>)
 810270e:	4a0a      	ldr	r2, [pc, #40]	; (8102738 <calcGyroResolution+0x50>)
 8102710:	601a      	str	r2, [r3, #0]
      break;
 8102712:	e008      	b.n	8102726 <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 8102714:	4b07      	ldr	r3, [pc, #28]	; (8102734 <calcGyroResolution+0x4c>)
 8102716:	4a09      	ldr	r2, [pc, #36]	; (810273c <calcGyroResolution+0x54>)
 8102718:	601a      	str	r2, [r3, #0]
      break;
 810271a:	e004      	b.n	8102726 <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 810271c:	4b05      	ldr	r3, [pc, #20]	; (8102734 <calcGyroResolution+0x4c>)
 810271e:	4a08      	ldr	r2, [pc, #32]	; (8102740 <calcGyroResolution+0x58>)
 8102720:	601a      	str	r2, [r3, #0]
      break;
 8102722:	e000      	b.n	8102726 <calcGyroResolution+0x3e>
      break;
 8102724:	bf00      	nop
  }
}
 8102726:	bf00      	nop
 8102728:	370c      	adds	r7, #12
 810272a:	46bd      	mov	sp, r7
 810272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102730:	4770      	bx	lr
 8102732:	bf00      	nop
 8102734:	100002f0 	.word	0x100002f0
 8102738:	3c0f5c29 	.word	0x3c0f5c29
 810273c:	3c8f5c29 	.word	0x3c8f5c29
 8102740:	3d8f5c29 	.word	0x3d8f5c29

08102744 <calcAccResoltuion>:

void calcAccResoltuion(LSM9DS1Handle* imu)
{
 8102744:	b480      	push	{r7}
 8102746:	b083      	sub	sp, #12
 8102748:	af00      	add	r7, sp, #0
 810274a:	6078      	str	r0, [r7, #4]

  switch(imu->accel_settings.scale)
 810274c:	687b      	ldr	r3, [r7, #4]
 810274e:	7cdb      	ldrb	r3, [r3, #19]
 8102750:	3b02      	subs	r3, #2
 8102752:	2b0e      	cmp	r3, #14
 8102754:	d830      	bhi.n	81027b8 <calcAccResoltuion+0x74>
 8102756:	a201      	add	r2, pc, #4	; (adr r2, 810275c <calcAccResoltuion+0x18>)
 8102758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810275c:	08102799 	.word	0x08102799
 8102760:	081027b9 	.word	0x081027b9
 8102764:	081027a1 	.word	0x081027a1
 8102768:	081027b9 	.word	0x081027b9
 810276c:	081027b9 	.word	0x081027b9
 8102770:	081027b9 	.word	0x081027b9
 8102774:	081027a9 	.word	0x081027a9
 8102778:	081027b9 	.word	0x081027b9
 810277c:	081027b9 	.word	0x081027b9
 8102780:	081027b9 	.word	0x081027b9
 8102784:	081027b9 	.word	0x081027b9
 8102788:	081027b9 	.word	0x081027b9
 810278c:	081027b9 	.word	0x081027b9
 8102790:	081027b9 	.word	0x081027b9
 8102794:	081027b1 	.word	0x081027b1
  {
    case 2:
      acc_res = ACC_FS_2G;
 8102798:	4b0b      	ldr	r3, [pc, #44]	; (81027c8 <calcAccResoltuion+0x84>)
 810279a:	4a0c      	ldr	r2, [pc, #48]	; (81027cc <calcAccResoltuion+0x88>)
 810279c:	601a      	str	r2, [r3, #0]
    break;
 810279e:	e00c      	b.n	81027ba <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 81027a0:	4b09      	ldr	r3, [pc, #36]	; (81027c8 <calcAccResoltuion+0x84>)
 81027a2:	4a0b      	ldr	r2, [pc, #44]	; (81027d0 <calcAccResoltuion+0x8c>)
 81027a4:	601a      	str	r2, [r3, #0]
     break;
 81027a6:	e008      	b.n	81027ba <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 81027a8:	4b07      	ldr	r3, [pc, #28]	; (81027c8 <calcAccResoltuion+0x84>)
 81027aa:	4a0a      	ldr	r2, [pc, #40]	; (81027d4 <calcAccResoltuion+0x90>)
 81027ac:	601a      	str	r2, [r3, #0]
      break;
 81027ae:	e004      	b.n	81027ba <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 81027b0:	4b05      	ldr	r3, [pc, #20]	; (81027c8 <calcAccResoltuion+0x84>)
 81027b2:	4a09      	ldr	r2, [pc, #36]	; (81027d8 <calcAccResoltuion+0x94>)
 81027b4:	601a      	str	r2, [r3, #0]
      break;
 81027b6:	e000      	b.n	81027ba <calcAccResoltuion+0x76>

    default:
      break;
 81027b8:	bf00      	nop

  }

}
 81027ba:	bf00      	nop
 81027bc:	370c      	adds	r7, #12
 81027be:	46bd      	mov	sp, r7
 81027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c4:	4770      	bx	lr
 81027c6:	bf00      	nop
 81027c8:	100002e8 	.word	0x100002e8
 81027cc:	387fda40 	.word	0x387fda40
 81027d0:	38ffda40 	.word	0x38ffda40
 81027d4:	397fda40 	.word	0x397fda40
 81027d8:	3a3fe3b0 	.word	0x3a3fe3b0

081027dc <calcMagResolution>:
void calcMagResolution(LSM9DS1Handle* imu)
{
 81027dc:	b480      	push	{r7}
 81027de:	b083      	sub	sp, #12
 81027e0:	af00      	add	r7, sp, #0
 81027e2:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	7f1b      	ldrb	r3, [r3, #28]
 81027e8:	3b02      	subs	r3, #2
 81027ea:	2b0e      	cmp	r3, #14
 81027ec:	d830      	bhi.n	8102850 <calcMagResolution+0x74>
 81027ee:	a201      	add	r2, pc, #4	; (adr r2, 81027f4 <calcMagResolution+0x18>)
 81027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027f4:	08102831 	.word	0x08102831
 81027f8:	08102851 	.word	0x08102851
 81027fc:	08102839 	.word	0x08102839
 8102800:	08102851 	.word	0x08102851
 8102804:	08102851 	.word	0x08102851
 8102808:	08102851 	.word	0x08102851
 810280c:	08102841 	.word	0x08102841
 8102810:	08102851 	.word	0x08102851
 8102814:	08102851 	.word	0x08102851
 8102818:	08102851 	.word	0x08102851
 810281c:	08102851 	.word	0x08102851
 8102820:	08102851 	.word	0x08102851
 8102824:	08102851 	.word	0x08102851
 8102828:	08102851 	.word	0x08102851
 810282c:	08102849 	.word	0x08102849
  {
    case 2:
      mag_res = MAG_FS_4G;
 8102830:	4b0b      	ldr	r3, [pc, #44]	; (8102860 <calcMagResolution+0x84>)
 8102832:	4a0c      	ldr	r2, [pc, #48]	; (8102864 <calcMagResolution+0x88>)
 8102834:	601a      	str	r2, [r3, #0]
    break;
 8102836:	e00c      	b.n	8102852 <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 8102838:	4b09      	ldr	r3, [pc, #36]	; (8102860 <calcMagResolution+0x84>)
 810283a:	4a0b      	ldr	r2, [pc, #44]	; (8102868 <calcMagResolution+0x8c>)
 810283c:	601a      	str	r2, [r3, #0]
     break;
 810283e:	e008      	b.n	8102852 <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 8102840:	4b07      	ldr	r3, [pc, #28]	; (8102860 <calcMagResolution+0x84>)
 8102842:	4a0a      	ldr	r2, [pc, #40]	; (810286c <calcMagResolution+0x90>)
 8102844:	601a      	str	r2, [r3, #0]
      break;
 8102846:	e004      	b.n	8102852 <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 8102848:	4b05      	ldr	r3, [pc, #20]	; (8102860 <calcMagResolution+0x84>)
 810284a:	4a09      	ldr	r2, [pc, #36]	; (8102870 <calcMagResolution+0x94>)
 810284c:	601a      	str	r2, [r3, #0]
      break;
 810284e:	e000      	b.n	8102852 <calcMagResolution+0x76>

    default:
      break;
 8102850:	bf00      	nop

  }

}
 8102852:	bf00      	nop
 8102854:	370c      	adds	r7, #12
 8102856:	46bd      	mov	sp, r7
 8102858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810285c:	4770      	bx	lr
 810285e:	bf00      	nop
 8102860:	100002ec 	.word	0x100002ec
 8102864:	3912ccf7 	.word	0x3912ccf7
 8102868:	39980b24 	.word	0x39980b24
 810286c:	39e1719f 	.word	0x39e1719f
 8102870:	3a180b24 	.word	0x3a180b24

08102874 <I2CReadBytes>:
   }
   return value;
}

uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8102874:	b580      	push	{r7, lr}
 8102876:	b088      	sub	sp, #32
 8102878:	af04      	add	r7, sp, #16
 810287a:	603a      	str	r2, [r7, #0]
 810287c:	461a      	mov	r2, r3
 810287e:	4603      	mov	r3, r0
 8102880:	71fb      	strb	r3, [r7, #7]
 8102882:	460b      	mov	r3, r1
 8102884:	71bb      	strb	r3, [r7, #6]
 8102886:	4613      	mov	r3, r2
 8102888:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;

  //status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 810288a:	79fb      	ldrb	r3, [r7, #7]
 810288c:	b29b      	uxth	r3, r3
 810288e:	005b      	lsls	r3, r3, #1
 8102890:	b299      	uxth	r1, r3
 8102892:	79bb      	ldrb	r3, [r7, #6]
 8102894:	b29a      	uxth	r2, r3
 8102896:	797b      	ldrb	r3, [r7, #5]
 8102898:	b29b      	uxth	r3, r3
 810289a:	2064      	movs	r0, #100	; 0x64
 810289c:	9002      	str	r0, [sp, #8]
 810289e:	9301      	str	r3, [sp, #4]
 81028a0:	683b      	ldr	r3, [r7, #0]
 81028a2:	9300      	str	r3, [sp, #0]
 81028a4:	2301      	movs	r3, #1
 81028a6:	4807      	ldr	r0, [pc, #28]	; (81028c4 <I2CReadBytes+0x50>)
 81028a8:	f004 fe14 	bl	81074d4 <HAL_I2C_Mem_Read>
 81028ac:	4603      	mov	r3, r0
 81028ae:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81028b0:	7bfb      	ldrb	r3, [r7, #15]
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d001      	beq.n	81028ba <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 81028b6:	2301      	movs	r3, #1
 81028b8:	e000      	b.n	81028bc <I2CReadBytes+0x48>
  }

  return numBytes;
 81028ba:	797b      	ldrb	r3, [r7, #5]

}
 81028bc:	4618      	mov	r0, r3
 81028be:	3710      	adds	r7, #16
 81028c0:	46bd      	mov	sp, r7
 81028c2:	bd80      	pop	{r7, pc}
 81028c4:	10000224 	.word	0x10000224

081028c8 <WriteByte>:

HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 81028c8:	b580      	push	{r7, lr}
 81028ca:	b088      	sub	sp, #32
 81028cc:	af04      	add	r7, sp, #16
 81028ce:	4603      	mov	r3, r0
 81028d0:	71fb      	strb	r3, [r7, #7]
 81028d2:	460b      	mov	r3, r1
 81028d4:	71bb      	strb	r3, [r7, #6]
 81028d6:	4613      	mov	r3, r2
 81028d8:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status;

//  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 81028da:	79fb      	ldrb	r3, [r7, #7]
 81028dc:	b29b      	uxth	r3, r3
 81028de:	005b      	lsls	r3, r3, #1
 81028e0:	b299      	uxth	r1, r3
 81028e2:	79bb      	ldrb	r3, [r7, #6]
 81028e4:	b29a      	uxth	r2, r3
 81028e6:	2364      	movs	r3, #100	; 0x64
 81028e8:	9302      	str	r3, [sp, #8]
 81028ea:	2301      	movs	r3, #1
 81028ec:	9301      	str	r3, [sp, #4]
 81028ee:	1d7b      	adds	r3, r7, #5
 81028f0:	9300      	str	r3, [sp, #0]
 81028f2:	2301      	movs	r3, #1
 81028f4:	4807      	ldr	r0, [pc, #28]	; (8102914 <WriteByte+0x4c>)
 81028f6:	f004 fcd9 	bl	81072ac <HAL_I2C_Mem_Write>
 81028fa:	4603      	mov	r3, r0
 81028fc:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81028fe:	7bfb      	ldrb	r3, [r7, #15]
 8102900:	2b00      	cmp	r3, #0
 8102902:	d001      	beq.n	8102908 <WriteByte+0x40>
  {
    return HAL_ERROR;
 8102904:	2301      	movs	r3, #1
 8102906:	e000      	b.n	810290a <WriteByte+0x42>
  }

  return HAL_OK;
 8102908:	2300      	movs	r3, #0

}
 810290a:	4618      	mov	r0, r3
 810290c:	3710      	adds	r7, #16
 810290e:	46bd      	mov	sp, r7
 8102910:	bd80      	pop	{r7, pc}
 8102912:	bf00      	nop
 8102914:	10000224 	.word	0x10000224

08102918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810291c:	b082      	sub	sp, #8
 810291e:	af00      	add	r7, sp, #0
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102920:	4b4b      	ldr	r3, [pc, #300]	; (8102a50 <main+0x138>)
 8102922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102926:	4a4a      	ldr	r2, [pc, #296]	; (8102a50 <main+0x138>)
 8102928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810292c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102930:	4b47      	ldr	r3, [pc, #284]	; (8102a50 <main+0x138>)
 8102932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810293a:	607b      	str	r3, [r7, #4]
 810293c:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810293e:	2001      	movs	r0, #1
 8102940:	f004 fc12 	bl	8107168 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8102944:	f006 f870 	bl	8108a28 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8102948:	2201      	movs	r2, #1
 810294a:	2102      	movs	r1, #2
 810294c:	2000      	movs	r0, #0
 810294e:	f005 fff1 	bl	8108934 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102952:	4b40      	ldr	r3, [pc, #256]	; (8102a54 <main+0x13c>)
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	091b      	lsrs	r3, r3, #4
 8102958:	f003 030f 	and.w	r3, r3, #15
 810295c:	2b07      	cmp	r3, #7
 810295e:	d108      	bne.n	8102972 <main+0x5a>
 8102960:	4b3d      	ldr	r3, [pc, #244]	; (8102a58 <main+0x140>)
 8102962:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8102966:	4a3c      	ldr	r2, [pc, #240]	; (8102a58 <main+0x140>)
 8102968:	f043 0301 	orr.w	r3, r3, #1
 810296c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102970:	e007      	b.n	8102982 <main+0x6a>
 8102972:	4b39      	ldr	r3, [pc, #228]	; (8102a58 <main+0x140>)
 8102974:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8102978:	4a37      	ldr	r2, [pc, #220]	; (8102a58 <main+0x140>)
 810297a:	f043 0301 	orr.w	r3, r3, #1
 810297e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102982:	f000 feb9 	bl	81036f8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102986:	f7ff f92d 	bl	8101be4 <MX_GPIO_Init>
  MX_DMA_Init();
 810298a:	f7ff f8cb 	bl	8101b24 <MX_DMA_Init>
  MX_SPI1_Init();
 810298e:	f000 f9bb 	bl	8102d08 <MX_SPI1_Init>
  MX_I2C1_Init();
 8102992:	f7ff f989 	bl	8101ca8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8102996:	f000 fd67 	bl	8103468 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
   ConfigSensors();
 810299a:	f000 f97b 	bl	8102c94 <ConfigSensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    TimerCount_Start();
 810299e:	4b2f      	ldr	r3, [pc, #188]	; (8102a5c <main+0x144>)
 81029a0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 81029a4:	605a      	str	r2, [r3, #4]
 81029a6:	4b2d      	ldr	r3, [pc, #180]	; (8102a5c <main+0x144>)
 81029a8:	2200      	movs	r2, #0
 81029aa:	609a      	str	r2, [r3, #8]
 81029ac:	4b2b      	ldr	r3, [pc, #172]	; (8102a5c <main+0x144>)
 81029ae:	2205      	movs	r2, #5
 81029b0:	601a      	str	r2, [r3, #0]
    ReadSensors();
 81029b2:	f000 f89d 	bl	8102af0 <ReadSensors>
    TimerCount_Stop(nb_cycles);
 81029b6:	4b29      	ldr	r3, [pc, #164]	; (8102a5c <main+0x144>)
 81029b8:	2200      	movs	r2, #0
 81029ba:	601a      	str	r2, [r3, #0]
 81029bc:	4b27      	ldr	r3, [pc, #156]	; (8102a5c <main+0x144>)
 81029be:	689b      	ldr	r3, [r3, #8]
 81029c0:	4a27      	ldr	r2, [pc, #156]	; (8102a60 <main+0x148>)
 81029c2:	6013      	str	r3, [r2, #0]
 81029c4:	4b26      	ldr	r3, [pc, #152]	; (8102a60 <main+0x148>)
 81029c6:	681b      	ldr	r3, [r3, #0]
 81029c8:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 81029cc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 81029d0:	4a23      	ldr	r2, [pc, #140]	; (8102a60 <main+0x148>)
 81029d2:	6013      	str	r3, [r2, #0]
    duration_us = (uint32_t)(((uint64_t)US_IN_SECOND * (nb_cycles)) / SystemCoreClock);
 81029d4:	4b22      	ldr	r3, [pc, #136]	; (8102a60 <main+0x148>)
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	461c      	mov	r4, r3
 81029da:	f04f 0500 	mov.w	r5, #0
 81029de:	4622      	mov	r2, r4
 81029e0:	462b      	mov	r3, r5
 81029e2:	f04f 0000 	mov.w	r0, #0
 81029e6:	f04f 0100 	mov.w	r1, #0
 81029ea:	0159      	lsls	r1, r3, #5
 81029ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 81029f0:	0150      	lsls	r0, r2, #5
 81029f2:	4602      	mov	r2, r0
 81029f4:	460b      	mov	r3, r1
 81029f6:	1b12      	subs	r2, r2, r4
 81029f8:	eb63 0305 	sbc.w	r3, r3, r5
 81029fc:	f04f 0000 	mov.w	r0, #0
 8102a00:	f04f 0100 	mov.w	r1, #0
 8102a04:	0259      	lsls	r1, r3, #9
 8102a06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8102a0a:	0250      	lsls	r0, r2, #9
 8102a0c:	4602      	mov	r2, r0
 8102a0e:	460b      	mov	r3, r1
 8102a10:	1912      	adds	r2, r2, r4
 8102a12:	eb45 0303 	adc.w	r3, r5, r3
 8102a16:	f04f 0000 	mov.w	r0, #0
 8102a1a:	f04f 0100 	mov.w	r1, #0
 8102a1e:	0199      	lsls	r1, r3, #6
 8102a20:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8102a24:	0190      	lsls	r0, r2, #6
 8102a26:	1a80      	subs	r0, r0, r2
 8102a28:	eb61 0103 	sbc.w	r1, r1, r3
 8102a2c:	eb10 0804 	adds.w	r8, r0, r4
 8102a30:	eb41 0905 	adc.w	r9, r1, r5
 8102a34:	4b0b      	ldr	r3, [pc, #44]	; (8102a64 <main+0x14c>)
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	461a      	mov	r2, r3
 8102a3a:	f04f 0300 	mov.w	r3, #0
 8102a3e:	4640      	mov	r0, r8
 8102a40:	4649      	mov	r1, r9
 8102a42:	f7fe fa63 	bl	8100f0c <__aeabi_uldivmod>
 8102a46:	4602      	mov	r2, r0
 8102a48:	460b      	mov	r3, r1
 8102a4a:	4b07      	ldr	r3, [pc, #28]	; (8102a68 <main+0x150>)
 8102a4c:	601a      	str	r2, [r3, #0]
    TimerCount_Start();
 8102a4e:	e7a6      	b.n	810299e <main+0x86>
 8102a50:	58024400 	.word	0x58024400
 8102a54:	e000ed00 	.word	0xe000ed00
 8102a58:	58026400 	.word	0x58026400
 8102a5c:	e000e010 	.word	0xe000e010
 8102a60:	100000bc 	.word	0x100000bc
 8102a64:	10000000 	.word	0x10000000
 8102a68:	100000b8 	.word	0x100000b8

08102a6c <GpsTask>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void GpsTask(void)
{
 8102a6c:	b580      	push	{r7, lr}
 8102a6e:	af00      	add	r7, sp, #0
     processGPS(&gps);
 8102a70:	4803      	ldr	r0, [pc, #12]	; (8102a80 <GpsTask+0x14>)
 8102a72:	f000 fb5d 	bl	8103130 <processGPS>
     M4DataToM7(GPS_DATA_TYPE);
 8102a76:	2001      	movs	r0, #1
 8102a78:	f000 f848 	bl	8102b0c <M4DataToM7>
}
 8102a7c:	bf00      	nop
 8102a7e:	bd80      	pop	{r7, pc}
 8102a80:	100002f4 	.word	0x100002f4

08102a84 <AccelTask>:
void AccelTask(void)
{
 8102a84:	b580      	push	{r7, lr}
 8102a86:	af00      	add	r7, sp, #0
    readAccel(&imu);
 8102a88:	4803      	ldr	r0, [pc, #12]	; (8102a98 <AccelTask+0x14>)
 8102a8a:	f7ff fddb 	bl	8102644 <readAccel>
    M4DataToM7(ACC_DATA_TYPE);
 8102a8e:	2003      	movs	r0, #3
 8102a90:	f000 f83c 	bl	8102b0c <M4DataToM7>
}
 8102a94:	bf00      	nop
 8102a96:	bd80      	pop	{r7, pc}
 8102a98:	10000374 	.word	0x10000374

08102a9c <GyroTask>:
void GyroTask(void)
{
 8102a9c:	b580      	push	{r7, lr}
 8102a9e:	af00      	add	r7, sp, #0
    readGyro(&imu);
 8102aa0:	4803      	ldr	r0, [pc, #12]	; (8102ab0 <GyroTask+0x14>)
 8102aa2:	f7ff fd2d 	bl	8102500 <readGyro>
    //readTemp(&imu);
    M4DataToM7(GYRO_DATA_TYPE);
 8102aa6:	2004      	movs	r0, #4
 8102aa8:	f000 f830 	bl	8102b0c <M4DataToM7>
}
 8102aac:	bf00      	nop
 8102aae:	bd80      	pop	{r7, pc}
 8102ab0:	10000374 	.word	0x10000374

08102ab4 <MagTask>:
void MagTask(void)
{
 8102ab4:	b580      	push	{r7, lr}
 8102ab6:	af00      	add	r7, sp, #0
    readMag(&imu);
 8102ab8:	4803      	ldr	r0, [pc, #12]	; (8102ac8 <MagTask+0x14>)
 8102aba:	f7ff fd72 	bl	81025a2 <readMag>
    M4DataToM7(MAG_DATA_TYPE);
 8102abe:	2002      	movs	r0, #2
 8102ac0:	f000 f824 	bl	8102b0c <M4DataToM7>
}
 8102ac4:	bf00      	nop
 8102ac6:	bd80      	pop	{r7, pc}
 8102ac8:	10000374 	.word	0x10000374

08102acc <BaroTask>:

void BaroTask(void)
{
 8102acc:	b580      	push	{r7, lr}
 8102ace:	af00      	add	r7, sp, #0
    ReadTemp(&baro);
 8102ad0:	4806      	ldr	r0, [pc, #24]	; (8102aec <BaroTask+0x20>)
 8102ad2:	f7fe fc6b 	bl	81013ac <ReadTemp>
    ReadPressure(&baro);
 8102ad6:	4805      	ldr	r0, [pc, #20]	; (8102aec <BaroTask+0x20>)
 8102ad8:	f7fe fcb8 	bl	810144c <ReadPressure>
    ReadAltitude(&baro);
 8102adc:	4803      	ldr	r0, [pc, #12]	; (8102aec <BaroTask+0x20>)
 8102ade:	f7fe fe97 	bl	8101810 <ReadAltitude>

    M4DataToM7(BARO_DATA_TYPE);
 8102ae2:	2005      	movs	r0, #5
 8102ae4:	f000 f812 	bl	8102b0c <M4DataToM7>

}
 8102ae8:	bf00      	nop
 8102aea:	bd80      	pop	{r7, pc}
 8102aec:	100003c0 	.word	0x100003c0

08102af0 <ReadSensors>:
  notif_rx = 1;
}


void ReadSensors(void)
{
 8102af0:	b580      	push	{r7, lr}
 8102af2:	af00      	add	r7, sp, #0
  GpsTask();
 8102af4:	f7ff ffba 	bl	8102a6c <GpsTask>

  AccelTask();
 8102af8:	f7ff ffc4 	bl	8102a84 <AccelTask>

  GyroTask();
 8102afc:	f7ff ffce 	bl	8102a9c <GyroTask>

  MagTask();
 8102b00:	f7ff ffd8 	bl	8102ab4 <MagTask>

  BaroTask();
 8102b04:	f7ff ffe2 	bl	8102acc <BaroTask>

}
 8102b08:	bf00      	nop
 8102b0a:	bd80      	pop	{r7, pc}

08102b0c <M4DataToM7>:
void M4DataToM7(uint8_t data_type)
{
 8102b0c:	b580      	push	{r7, lr}
 8102b0e:	b082      	sub	sp, #8
 8102b10:	af00      	add	r7, sp, #0
 8102b12:	4603      	mov	r3, r0
 8102b14:	71fb      	strb	r3, [r7, #7]

  switch (data_type)
 8102b16:	79fb      	ldrb	r3, [r7, #7]
 8102b18:	3b01      	subs	r3, #1
 8102b1a:	2b04      	cmp	r3, #4
 8102b1c:	f200 80a4 	bhi.w	8102c68 <M4DataToM7+0x15c>
 8102b20:	a201      	add	r2, pc, #4	; (adr r2, 8102b28 <M4DataToM7+0x1c>)
 8102b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b26:	bf00      	nop
 8102b28:	08102b3d 	.word	0x08102b3d
 8102b2c:	08102c0b 	.word	0x08102c0b
 8102b30:	08102ba3 	.word	0x08102ba3
 8102b34:	08102bd7 	.word	0x08102bd7
 8102b38:	08102c3f 	.word	0x08102c3f
  {
    case GPS_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102b3c:	2000      	movs	r0, #0
 8102b3e:	f004 fae5 	bl	810710c <HAL_HSEM_FastTake>
 8102b42:	4603      	mov	r3, r0
 8102b44:	2b00      	cmp	r3, #0
 8102b46:	d127      	bne.n	8102b98 <M4DataToM7+0x8c>
      {

        gps_values_m4->gps_latitude = gps.latitude;
 8102b48:	4b4a      	ldr	r3, [pc, #296]	; (8102c74 <M4DataToM7+0x168>)
 8102b4a:	681b      	ldr	r3, [r3, #0]
 8102b4c:	4a4a      	ldr	r2, [pc, #296]	; (8102c78 <M4DataToM7+0x16c>)
 8102b4e:	6812      	ldr	r2, [r2, #0]
 8102b50:	601a      	str	r2, [r3, #0]
        gps_values_m4->gps_longitude = gps.longitude;
 8102b52:	4b48      	ldr	r3, [pc, #288]	; (8102c74 <M4DataToM7+0x168>)
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	4a48      	ldr	r2, [pc, #288]	; (8102c78 <M4DataToM7+0x16c>)
 8102b58:	6852      	ldr	r2, [r2, #4]
 8102b5a:	605a      	str	r2, [r3, #4]
        gps_values_m4->gps_altitude = gps.altitude;
 8102b5c:	4b45      	ldr	r3, [pc, #276]	; (8102c74 <M4DataToM7+0x168>)
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	4a45      	ldr	r2, [pc, #276]	; (8102c78 <M4DataToM7+0x16c>)
 8102b62:	6892      	ldr	r2, [r2, #8]
 8102b64:	609a      	str	r2, [r3, #8]
        gps_values_m4->gps_velocity_x = gps.vel_x;
 8102b66:	4b43      	ldr	r3, [pc, #268]	; (8102c74 <M4DataToM7+0x168>)
 8102b68:	681b      	ldr	r3, [r3, #0]
 8102b6a:	4a43      	ldr	r2, [pc, #268]	; (8102c78 <M4DataToM7+0x16c>)
 8102b6c:	68d2      	ldr	r2, [r2, #12]
 8102b6e:	60da      	str	r2, [r3, #12]
        gps_values_m4->gps_velocity_y = gps.vel_y;
 8102b70:	4b40      	ldr	r3, [pc, #256]	; (8102c74 <M4DataToM7+0x168>)
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	4a40      	ldr	r2, [pc, #256]	; (8102c78 <M4DataToM7+0x16c>)
 8102b76:	6912      	ldr	r2, [r2, #16]
 8102b78:	611a      	str	r2, [r3, #16]
        gps_values_m4->gps_velocity_z = gps.vel_z;
 8102b7a:	4b3e      	ldr	r3, [pc, #248]	; (8102c74 <M4DataToM7+0x168>)
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	4a3e      	ldr	r2, [pc, #248]	; (8102c78 <M4DataToM7+0x16c>)
 8102b80:	6952      	ldr	r2, [r2, #20]
 8102b82:	615a      	str	r2, [r3, #20]
        gps_values_m4->gnd_speed = gps.gndSpeed;
 8102b84:	4b3b      	ldr	r3, [pc, #236]	; (8102c74 <M4DataToM7+0x168>)
 8102b86:	681b      	ldr	r3, [r3, #0]
 8102b88:	4a3b      	ldr	r2, [pc, #236]	; (8102c78 <M4DataToM7+0x16c>)
 8102b8a:	6992      	ldr	r2, [r2, #24]
 8102b8c:	619a      	str	r2, [r3, #24]
        gps_values_m4->gps_satellites = gps.num_satellites;
 8102b8e:	4b39      	ldr	r3, [pc, #228]	; (8102c74 <M4DataToM7+0x168>)
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	4a39      	ldr	r2, [pc, #228]	; (8102c78 <M4DataToM7+0x16c>)
 8102b94:	69d2      	ldr	r2, [r2, #28]
 8102b96:	61da      	str	r2, [r3, #28]
      }
      // Release semaphore
      HAL_HSEM_Release(HSEM_ID_0, 0);
 8102b98:	2100      	movs	r1, #0
 8102b9a:	2000      	movs	r0, #0
 8102b9c:	f004 fad0 	bl	8107140 <HAL_HSEM_Release>
      break;
 8102ba0:	e063      	b.n	8102c6a <M4DataToM7+0x15e>
    }

    case ACC_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102ba2:	2000      	movs	r0, #0
 8102ba4:	f004 fab2 	bl	810710c <HAL_HSEM_FastTake>
 8102ba8:	4603      	mov	r3, r0
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	d10e      	bne.n	8102bcc <M4DataToM7+0xc0>
      {
        acc_values_m4->imu_acc_x = imu.accel_values.x;
 8102bae:	4b33      	ldr	r3, [pc, #204]	; (8102c7c <M4DataToM7+0x170>)
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	4a33      	ldr	r2, [pc, #204]	; (8102c80 <M4DataToM7+0x174>)
 8102bb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102bb6:	601a      	str	r2, [r3, #0]
        acc_values_m4->imu_acc_y = imu.accel_values.y;
 8102bb8:	4b30      	ldr	r3, [pc, #192]	; (8102c7c <M4DataToM7+0x170>)
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	4a30      	ldr	r2, [pc, #192]	; (8102c80 <M4DataToM7+0x174>)
 8102bbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102bc0:	605a      	str	r2, [r3, #4]
        acc_values_m4->imu_acc_z = imu.accel_values.z;
 8102bc2:	4b2e      	ldr	r3, [pc, #184]	; (8102c7c <M4DataToM7+0x170>)
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	4a2e      	ldr	r2, [pc, #184]	; (8102c80 <M4DataToM7+0x174>)
 8102bc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102bca:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102bcc:	2100      	movs	r1, #0
 8102bce:	2000      	movs	r0, #0
 8102bd0:	f004 fab6 	bl	8107140 <HAL_HSEM_Release>

      break;
 8102bd4:	e049      	b.n	8102c6a <M4DataToM7+0x15e>
    }

    case GYRO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102bd6:	2000      	movs	r0, #0
 8102bd8:	f004 fa98 	bl	810710c <HAL_HSEM_FastTake>
 8102bdc:	4603      	mov	r3, r0
 8102bde:	2b00      	cmp	r3, #0
 8102be0:	d10e      	bne.n	8102c00 <M4DataToM7+0xf4>
      {
        gyro_values_m4->imu_gyro_x = imu.gyro_values.x;
 8102be2:	4b28      	ldr	r3, [pc, #160]	; (8102c84 <M4DataToM7+0x178>)
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	4a26      	ldr	r2, [pc, #152]	; (8102c80 <M4DataToM7+0x174>)
 8102be8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102bea:	601a      	str	r2, [r3, #0]
        gyro_values_m4->imu_gyro_y = imu.gyro_values.y;
 8102bec:	4b25      	ldr	r3, [pc, #148]	; (8102c84 <M4DataToM7+0x178>)
 8102bee:	681b      	ldr	r3, [r3, #0]
 8102bf0:	4a23      	ldr	r2, [pc, #140]	; (8102c80 <M4DataToM7+0x174>)
 8102bf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102bf4:	605a      	str	r2, [r3, #4]
        gyro_values_m4->imu_gyro_z = imu.gyro_values.z;
 8102bf6:	4b23      	ldr	r3, [pc, #140]	; (8102c84 <M4DataToM7+0x178>)
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a21      	ldr	r2, [pc, #132]	; (8102c80 <M4DataToM7+0x174>)
 8102bfc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102bfe:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102c00:	2100      	movs	r1, #0
 8102c02:	2000      	movs	r0, #0
 8102c04:	f004 fa9c 	bl	8107140 <HAL_HSEM_Release>

      break;
 8102c08:	e02f      	b.n	8102c6a <M4DataToM7+0x15e>
    }

    case MAG_DATA_TYPE:
    {

      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102c0a:	2000      	movs	r0, #0
 8102c0c:	f004 fa7e 	bl	810710c <HAL_HSEM_FastTake>
 8102c10:	4603      	mov	r3, r0
 8102c12:	2b00      	cmp	r3, #0
 8102c14:	d10e      	bne.n	8102c34 <M4DataToM7+0x128>
        {
          mag_values_m4->imu_mag_x = imu.mag_values.x;
 8102c16:	4b1c      	ldr	r3, [pc, #112]	; (8102c88 <M4DataToM7+0x17c>)
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	4a19      	ldr	r2, [pc, #100]	; (8102c80 <M4DataToM7+0x174>)
 8102c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8102c1e:	601a      	str	r2, [r3, #0]
          mag_values_m4->imu_mag_y = imu.mag_values.y;
 8102c20:	4b19      	ldr	r3, [pc, #100]	; (8102c88 <M4DataToM7+0x17c>)
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	4a16      	ldr	r2, [pc, #88]	; (8102c80 <M4DataToM7+0x174>)
 8102c26:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8102c28:	605a      	str	r2, [r3, #4]
          mag_values_m4->imu_mag_z = imu.mag_values.z;
 8102c2a:	4b17      	ldr	r3, [pc, #92]	; (8102c88 <M4DataToM7+0x17c>)
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	4a14      	ldr	r2, [pc, #80]	; (8102c80 <M4DataToM7+0x174>)
 8102c30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8102c32:	609a      	str	r2, [r3, #8]
        }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102c34:	2100      	movs	r1, #0
 8102c36:	2000      	movs	r0, #0
 8102c38:	f004 fa82 	bl	8107140 <HAL_HSEM_Release>
      break;
 8102c3c:	e015      	b.n	8102c6a <M4DataToM7+0x15e>
    }

    case BARO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102c3e:	2000      	movs	r0, #0
 8102c40:	f004 fa64 	bl	810710c <HAL_HSEM_FastTake>
 8102c44:	4603      	mov	r3, r0
 8102c46:	2b00      	cmp	r3, #0
 8102c48:	d109      	bne.n	8102c5e <M4DataToM7+0x152>
      {
          baro_values_m4->baro_altitude = baro.altitude;
 8102c4a:	4b10      	ldr	r3, [pc, #64]	; (8102c8c <M4DataToM7+0x180>)
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4a10      	ldr	r2, [pc, #64]	; (8102c90 <M4DataToM7+0x184>)
 8102c50:	6892      	ldr	r2, [r2, #8]
 8102c52:	605a      	str	r2, [r3, #4]
          baro_values_m4->baro_pressure = baro.pressure;
 8102c54:	4b0d      	ldr	r3, [pc, #52]	; (8102c8c <M4DataToM7+0x180>)
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	4a0d      	ldr	r2, [pc, #52]	; (8102c90 <M4DataToM7+0x184>)
 8102c5a:	6852      	ldr	r2, [r2, #4]
 8102c5c:	601a      	str	r2, [r3, #0]
      }
             // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102c5e:	2100      	movs	r1, #0
 8102c60:	2000      	movs	r0, #0
 8102c62:	f004 fa6d 	bl	8107140 <HAL_HSEM_Release>
      break;
 8102c66:	e000      	b.n	8102c6a <M4DataToM7+0x15e>
    }

    default:
      break;
 8102c68:	bf00      	nop

  }



}
 8102c6a:	bf00      	nop
 8102c6c:	3708      	adds	r7, #8
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	bd80      	pop	{r7, pc}
 8102c72:	bf00      	nop
 8102c74:	10000018 	.word	0x10000018
 8102c78:	100002f4 	.word	0x100002f4
 8102c7c:	10000008 	.word	0x10000008
 8102c80:	10000374 	.word	0x10000374
 8102c84:	1000000c 	.word	0x1000000c
 8102c88:	10000010 	.word	0x10000010
 8102c8c:	10000014 	.word	0x10000014
 8102c90:	100003c0 	.word	0x100003c0

08102c94 <ConfigSensors>:




void ConfigSensors(void)
{
 8102c94:	b580      	push	{r7, lr}
 8102c96:	b082      	sub	sp, #8
 8102c98:	af00      	add	r7, sp, #0

  // COnfigure GPS Sensor
  ConfigGPS();
 8102c9a:	f000 fac7 	bl	810322c <ConfigGPS>

  // Configure BMP280
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8102c9e:	2201      	movs	r2, #1
 8102ca0:	2110      	movs	r1, #16
 8102ca2:	4813      	ldr	r0, [pc, #76]	; (8102cf0 <ConfigSensors+0x5c>)
 8102ca4:	f004 fa18 	bl	81070d8 <HAL_GPIO_WritePin>
  uint8_t baro_res = CheckBMP280ChipID();
 8102ca8:	f7fe fac8 	bl	810123c <CheckBMP280ChipID>
 8102cac:	4603      	mov	r3, r0
 8102cae:	71fb      	strb	r3, [r7, #7]
  if(baro_res == HAL_OK)
 8102cb0:	79fb      	ldrb	r3, [r7, #7]
 8102cb2:	2b00      	cmp	r3, #0
 8102cb4:	d10f      	bne.n	8102cd6 <ConfigSensors+0x42>
  {
    uint8_t reset_chip_ok = ResetBMP280();
 8102cb6:	f7fe ff13 	bl	8101ae0 <ResetBMP280>
 8102cba:	4603      	mov	r3, r0
 8102cbc:	71bb      	strb	r3, [r7, #6]
    HAL_Delay(1000);
 8102cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102cc2:	f000 fdcd 	bl	8103860 <HAL_Delay>
    uint8_t set_config_ok = setConfig(&baro);
 8102cc6:	480b      	ldr	r0, [pc, #44]	; (8102cf4 <ConfigSensors+0x60>)
 8102cc8:	f7fe fe5e 	bl	8101988 <setConfig>
 8102ccc:	4603      	mov	r3, r0
 8102cce:	717b      	strb	r3, [r7, #5]
    ReadCalibCoefficients(&baro);
 8102cd0:	4808      	ldr	r0, [pc, #32]	; (8102cf4 <ConfigSensors+0x60>)
 8102cd2:	f7fe fdfd 	bl	81018d0 <ReadCalibCoefficients>
  }

  HAL_Delay(1000);
 8102cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102cda:	f000 fdc1 	bl	8103860 <HAL_Delay>

  // Configure IMU;
  uint16_t imu_res = setup(&imu);
 8102cde:	4806      	ldr	r0, [pc, #24]	; (8102cf8 <ConfigSensors+0x64>)
 8102ce0:	f7ff f997 	bl	8102012 <setup>
 8102ce4:	4603      	mov	r3, r0
 8102ce6:	807b      	strh	r3, [r7, #2]


}
 8102ce8:	bf00      	nop
 8102cea:	3708      	adds	r7, #8
 8102cec:	46bd      	mov	sp, r7
 8102cee:	bd80      	pop	{r7, pc}
 8102cf0:	58020000 	.word	0x58020000
 8102cf4:	100003c0 	.word	0x100003c0
 8102cf8:	10000374 	.word	0x10000374

08102cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102cfc:	b480      	push	{r7}
 8102cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102d00:	b672      	cpsid	i
}
 8102d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102d04:	e7fe      	b.n	8102d04 <Error_Handler+0x8>
	...

08102d08 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102d08:	b580      	push	{r7, lr}
 8102d0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102d0c:	4b27      	ldr	r3, [pc, #156]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d0e:	4a28      	ldr	r2, [pc, #160]	; (8102db0 <MX_SPI1_Init+0xa8>)
 8102d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102d12:	4b26      	ldr	r3, [pc, #152]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102d1a:	4b24      	ldr	r3, [pc, #144]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d1c:	2200      	movs	r2, #0
 8102d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102d20:	4b22      	ldr	r3, [pc, #136]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d22:	2207      	movs	r2, #7
 8102d24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102d26:	4b21      	ldr	r3, [pc, #132]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d28:	2200      	movs	r2, #0
 8102d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102d2c:	4b1f      	ldr	r3, [pc, #124]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d2e:	2200      	movs	r2, #0
 8102d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102d32:	4b1e      	ldr	r3, [pc, #120]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102d3a:	4b1c      	ldr	r3, [pc, #112]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d3c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102d42:	4b1a      	ldr	r3, [pc, #104]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d44:	2200      	movs	r2, #0
 8102d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102d48:	4b18      	ldr	r3, [pc, #96]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d4a:	2200      	movs	r2, #0
 8102d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102d4e:	4b17      	ldr	r3, [pc, #92]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d50:	2200      	movs	r2, #0
 8102d52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102d54:	4b15      	ldr	r3, [pc, #84]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d56:	2200      	movs	r2, #0
 8102d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102d5a:	4b14      	ldr	r3, [pc, #80]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102d60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102d62:	4b12      	ldr	r3, [pc, #72]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d64:	2200      	movs	r2, #0
 8102d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102d68:	4b10      	ldr	r3, [pc, #64]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d6a:	2200      	movs	r2, #0
 8102d6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102d6e:	4b0f      	ldr	r3, [pc, #60]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d70:	2200      	movs	r2, #0
 8102d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102d74:	4b0d      	ldr	r3, [pc, #52]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d76:	2200      	movs	r2, #0
 8102d78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102d7a:	4b0c      	ldr	r3, [pc, #48]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d7c:	2200      	movs	r2, #0
 8102d7e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102d80:	4b0a      	ldr	r3, [pc, #40]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d82:	2200      	movs	r2, #0
 8102d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102d86:	4b09      	ldr	r3, [pc, #36]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d88:	2200      	movs	r2, #0
 8102d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102d8c:	4b07      	ldr	r3, [pc, #28]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d8e:	2200      	movs	r2, #0
 8102d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102d92:	4b06      	ldr	r3, [pc, #24]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d94:	2200      	movs	r2, #0
 8102d96:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102d98:	4804      	ldr	r0, [pc, #16]	; (8102dac <MX_SPI1_Init+0xa4>)
 8102d9a:	f007 fb8d 	bl	810a4b8 <HAL_SPI_Init>
 8102d9e:	4603      	mov	r3, r0
 8102da0:	2b00      	cmp	r3, #0
 8102da2:	d001      	beq.n	8102da8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102da4:	f7ff ffaa 	bl	8102cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102da8:	bf00      	nop
 8102daa:	bd80      	pop	{r7, pc}
 8102dac:	100003f4 	.word	0x100003f4
 8102db0:	40013000 	.word	0x40013000

08102db4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102db4:	b580      	push	{r7, lr}
 8102db6:	b0b8      	sub	sp, #224	; 0xe0
 8102db8:	af00      	add	r7, sp, #0
 8102dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102dc0:	2200      	movs	r2, #0
 8102dc2:	601a      	str	r2, [r3, #0]
 8102dc4:	605a      	str	r2, [r3, #4]
 8102dc6:	609a      	str	r2, [r3, #8]
 8102dc8:	60da      	str	r2, [r3, #12]
 8102dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102dcc:	f107 0310 	add.w	r3, r7, #16
 8102dd0:	22bc      	movs	r2, #188	; 0xbc
 8102dd2:	2100      	movs	r1, #0
 8102dd4:	4618      	mov	r0, r3
 8102dd6:	f009 ff87 	bl	810cce8 <memset>
  if(spiHandle->Instance==SPI1)
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	4a57      	ldr	r2, [pc, #348]	; (8102f3c <HAL_SPI_MspInit+0x188>)
 8102de0:	4293      	cmp	r3, r2
 8102de2:	f040 80a6 	bne.w	8102f32 <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102dea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102dec:	2300      	movs	r3, #0
 8102dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102df0:	f107 0310 	add.w	r3, r7, #16
 8102df4:	4618      	mov	r0, r3
 8102df6:	f005 fffd 	bl	8108df4 <HAL_RCCEx_PeriphCLKConfig>
 8102dfa:	4603      	mov	r3, r0
 8102dfc:	2b00      	cmp	r3, #0
 8102dfe:	d001      	beq.n	8102e04 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8102e00:	f7ff ff7c 	bl	8102cfc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102e04:	4b4e      	ldr	r3, [pc, #312]	; (8102f40 <HAL_SPI_MspInit+0x18c>)
 8102e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102e0a:	4a4d      	ldr	r2, [pc, #308]	; (8102f40 <HAL_SPI_MspInit+0x18c>)
 8102e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102e10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102e14:	4b4a      	ldr	r3, [pc, #296]	; (8102f40 <HAL_SPI_MspInit+0x18c>)
 8102e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102e1e:	60fb      	str	r3, [r7, #12]
 8102e20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102e22:	4b47      	ldr	r3, [pc, #284]	; (8102f40 <HAL_SPI_MspInit+0x18c>)
 8102e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e28:	4a45      	ldr	r2, [pc, #276]	; (8102f40 <HAL_SPI_MspInit+0x18c>)
 8102e2a:	f043 0301 	orr.w	r3, r3, #1
 8102e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102e32:	4b43      	ldr	r3, [pc, #268]	; (8102f40 <HAL_SPI_MspInit+0x18c>)
 8102e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e38:	f003 0301 	and.w	r3, r3, #1
 8102e3c:	60bb      	str	r3, [r7, #8]
 8102e3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8102e40:	23e0      	movs	r3, #224	; 0xe0
 8102e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102e46:	2302      	movs	r3, #2
 8102e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e4c:	2300      	movs	r3, #0
 8102e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e52:	2300      	movs	r3, #0
 8102e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102e58:	2305      	movs	r3, #5
 8102e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102e5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102e62:	4619      	mov	r1, r3
 8102e64:	4837      	ldr	r0, [pc, #220]	; (8102f44 <HAL_SPI_MspInit+0x190>)
 8102e66:	f003 ff87 	bl	8106d78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102e6a:	4b37      	ldr	r3, [pc, #220]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e6c:	4a37      	ldr	r2, [pc, #220]	; (8102f4c <HAL_SPI_MspInit+0x198>)
 8102e6e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102e70:	4b35      	ldr	r3, [pc, #212]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e72:	2225      	movs	r2, #37	; 0x25
 8102e74:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102e76:	4b34      	ldr	r3, [pc, #208]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e78:	2200      	movs	r2, #0
 8102e7a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102e7c:	4b32      	ldr	r3, [pc, #200]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e7e:	2200      	movs	r2, #0
 8102e80:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102e82:	4b31      	ldr	r3, [pc, #196]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102e88:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102e8a:	4b2f      	ldr	r3, [pc, #188]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e8c:	2200      	movs	r2, #0
 8102e8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102e90:	4b2d      	ldr	r3, [pc, #180]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e92:	2200      	movs	r2, #0
 8102e94:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102e96:	4b2c      	ldr	r3, [pc, #176]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e98:	2200      	movs	r2, #0
 8102e9a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102e9c:	4b2a      	ldr	r3, [pc, #168]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102ea2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102ea4:	4b28      	ldr	r3, [pc, #160]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102ea6:	2200      	movs	r2, #0
 8102ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102eaa:	4827      	ldr	r0, [pc, #156]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102eac:	f001 f912 	bl	81040d4 <HAL_DMA_Init>
 8102eb0:	4603      	mov	r3, r0
 8102eb2:	2b00      	cmp	r3, #0
 8102eb4:	d001      	beq.n	8102eba <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102eb6:	f7ff ff21 	bl	8102cfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	4a22      	ldr	r2, [pc, #136]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102ebe:	67da      	str	r2, [r3, #124]	; 0x7c
 8102ec0:	4a21      	ldr	r2, [pc, #132]	; (8102f48 <HAL_SPI_MspInit+0x194>)
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102ec6:	4b22      	ldr	r3, [pc, #136]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102ec8:	4a22      	ldr	r2, [pc, #136]	; (8102f54 <HAL_SPI_MspInit+0x1a0>)
 8102eca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102ecc:	4b20      	ldr	r3, [pc, #128]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102ece:	2226      	movs	r2, #38	; 0x26
 8102ed0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102ed2:	4b1f      	ldr	r3, [pc, #124]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102ed4:	2240      	movs	r2, #64	; 0x40
 8102ed6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102ed8:	4b1d      	ldr	r3, [pc, #116]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102eda:	2200      	movs	r2, #0
 8102edc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102ede:	4b1c      	ldr	r3, [pc, #112]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102ee4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102ee6:	4b1a      	ldr	r3, [pc, #104]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102ee8:	2200      	movs	r2, #0
 8102eea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102eec:	4b18      	ldr	r3, [pc, #96]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102eee:	2200      	movs	r2, #0
 8102ef0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8102ef2:	4b17      	ldr	r3, [pc, #92]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102ef4:	2200      	movs	r2, #0
 8102ef6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102ef8:	4b15      	ldr	r3, [pc, #84]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102efe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102f00:	4b13      	ldr	r3, [pc, #76]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102f02:	2200      	movs	r2, #0
 8102f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102f06:	4812      	ldr	r0, [pc, #72]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102f08:	f001 f8e4 	bl	81040d4 <HAL_DMA_Init>
 8102f0c:	4603      	mov	r3, r0
 8102f0e:	2b00      	cmp	r3, #0
 8102f10:	d001      	beq.n	8102f16 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8102f12:	f7ff fef3 	bl	8102cfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	4a0d      	ldr	r2, [pc, #52]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102f1a:	679a      	str	r2, [r3, #120]	; 0x78
 8102f1c:	4a0c      	ldr	r2, [pc, #48]	; (8102f50 <HAL_SPI_MspInit+0x19c>)
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102f22:	2200      	movs	r2, #0
 8102f24:	2100      	movs	r1, #0
 8102f26:	2023      	movs	r0, #35	; 0x23
 8102f28:	f001 f88b 	bl	8104042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102f2c:	2023      	movs	r0, #35	; 0x23
 8102f2e:	f001 f8a2 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8102f32:	bf00      	nop
 8102f34:	37e0      	adds	r7, #224	; 0xe0
 8102f36:	46bd      	mov	sp, r7
 8102f38:	bd80      	pop	{r7, pc}
 8102f3a:	bf00      	nop
 8102f3c:	40013000 	.word	0x40013000
 8102f40:	58024400 	.word	0x58024400
 8102f44:	58020000 	.word	0x58020000
 8102f48:	1000047c 	.word	0x1000047c
 8102f4c:	40020010 	.word	0x40020010
 8102f50:	100004f4 	.word	0x100004f4
 8102f54:	40020028 	.word	0x40020028

08102f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102f58:	b480      	push	{r7}
 8102f5a:	b083      	sub	sp, #12
 8102f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102f5e:	4b0a      	ldr	r3, [pc, #40]	; (8102f88 <HAL_MspInit+0x30>)
 8102f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102f64:	4a08      	ldr	r2, [pc, #32]	; (8102f88 <HAL_MspInit+0x30>)
 8102f66:	f043 0302 	orr.w	r3, r3, #2
 8102f6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102f6e:	4b06      	ldr	r3, [pc, #24]	; (8102f88 <HAL_MspInit+0x30>)
 8102f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102f74:	f003 0302 	and.w	r3, r3, #2
 8102f78:	607b      	str	r3, [r7, #4]
 8102f7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102f7c:	bf00      	nop
 8102f7e:	370c      	adds	r7, #12
 8102f80:	46bd      	mov	sp, r7
 8102f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f86:	4770      	bx	lr
 8102f88:	58024400 	.word	0x58024400

08102f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102f8c:	b480      	push	{r7}
 8102f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102f90:	e7fe      	b.n	8102f90 <NMI_Handler+0x4>

08102f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102f92:	b480      	push	{r7}
 8102f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102f96:	e7fe      	b.n	8102f96 <HardFault_Handler+0x4>

08102f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102f98:	b480      	push	{r7}
 8102f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102f9c:	e7fe      	b.n	8102f9c <MemManage_Handler+0x4>

08102f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102f9e:	b480      	push	{r7}
 8102fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102fa2:	e7fe      	b.n	8102fa2 <BusFault_Handler+0x4>

08102fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102fa4:	b480      	push	{r7}
 8102fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102fa8:	e7fe      	b.n	8102fa8 <UsageFault_Handler+0x4>

08102faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102faa:	b480      	push	{r7}
 8102fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102fae:	bf00      	nop
 8102fb0:	46bd      	mov	sp, r7
 8102fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fb6:	4770      	bx	lr

08102fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102fb8:	b480      	push	{r7}
 8102fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102fbc:	bf00      	nop
 8102fbe:	46bd      	mov	sp, r7
 8102fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc4:	4770      	bx	lr

08102fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102fc6:	b480      	push	{r7}
 8102fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102fca:	bf00      	nop
 8102fcc:	46bd      	mov	sp, r7
 8102fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd2:	4770      	bx	lr

08102fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102fd4:	b580      	push	{r7, lr}
 8102fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102fd8:	f000 fc22 	bl	8103820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102fdc:	bf00      	nop
 8102fde:	bd80      	pop	{r7, pc}

08102fe0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102fe0:	b580      	push	{r7, lr}
 8102fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102fe4:	4802      	ldr	r0, [pc, #8]	; (8102ff0 <DMA1_Stream0_IRQHandler+0x10>)
 8102fe6:	f002 fb9b 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102fea:	bf00      	nop
 8102fec:	bd80      	pop	{r7, pc}
 8102fee:	bf00      	nop
 8102ff0:	1000047c 	.word	0x1000047c

08102ff4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102ff4:	b580      	push	{r7, lr}
 8102ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102ff8:	4802      	ldr	r0, [pc, #8]	; (8103004 <DMA1_Stream1_IRQHandler+0x10>)
 8102ffa:	f002 fb91 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102ffe:	bf00      	nop
 8103000:	bd80      	pop	{r7, pc}
 8103002:	bf00      	nop
 8103004:	100004f4 	.word	0x100004f4

08103008 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8103008:	b580      	push	{r7, lr}
 810300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 810300c:	4802      	ldr	r0, [pc, #8]	; (8103018 <DMA1_Stream2_IRQHandler+0x10>)
 810300e:	f002 fb87 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8103012:	bf00      	nop
 8103014:	bd80      	pop	{r7, pc}
 8103016:	bf00      	nop
 8103018:	10000270 	.word	0x10000270

0810301c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 810301c:	b580      	push	{r7, lr}
 810301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8103020:	4802      	ldr	r0, [pc, #8]	; (810302c <DMA1_Stream3_IRQHandler+0x10>)
 8103022:	f002 fb7d 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8103026:	bf00      	nop
 8103028:	bd80      	pop	{r7, pc}
 810302a:	bf00      	nop
 810302c:	100001ac 	.word	0x100001ac

08103030 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8103030:	b580      	push	{r7, lr}
 8103032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8103034:	4802      	ldr	r0, [pc, #8]	; (8103040 <DMA1_Stream4_IRQHandler+0x10>)
 8103036:	f002 fb73 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 810303a:	bf00      	nop
 810303c:	bd80      	pop	{r7, pc}
 810303e:	bf00      	nop
 8103040:	10000130 	.word	0x10000130

08103044 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8103044:	b580      	push	{r7, lr}
 8103046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8103048:	4802      	ldr	r0, [pc, #8]	; (8103054 <ADC_IRQHandler+0x10>)
 810304a:	f000 fc95 	bl	8103978 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 810304e:	bf00      	nop
 8103050:	bd80      	pop	{r7, pc}
 8103052:	bf00      	nop
 8103054:	100000cc 	.word	0x100000cc

08103058 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8103058:	b580      	push	{r7, lr}
 810305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 810305c:	4802      	ldr	r0, [pc, #8]	; (8103068 <I2C1_EV_IRQHandler+0x10>)
 810305e:	f004 fb53 	bl	8107708 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8103062:	bf00      	nop
 8103064:	bd80      	pop	{r7, pc}
 8103066:	bf00      	nop
 8103068:	10000224 	.word	0x10000224

0810306c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 810306c:	b580      	push	{r7, lr}
 810306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8103070:	4802      	ldr	r0, [pc, #8]	; (810307c <I2C1_ER_IRQHandler+0x10>)
 8103072:	f004 fb63 	bl	810773c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8103076:	bf00      	nop
 8103078:	bd80      	pop	{r7, pc}
 810307a:	bf00      	nop
 810307c:	10000224 	.word	0x10000224

08103080 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8103080:	b580      	push	{r7, lr}
 8103082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8103084:	4802      	ldr	r0, [pc, #8]	; (8103090 <SPI1_IRQHandler+0x10>)
 8103086:	f007 fce5 	bl	810aa54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 810308a:	bf00      	nop
 810308c:	bd80      	pop	{r7, pc}
 810308e:	bf00      	nop
 8103090:	100003f4 	.word	0x100003f4

08103094 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8103094:	b580      	push	{r7, lr}
 8103096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8103098:	4802      	ldr	r0, [pc, #8]	; (81030a4 <USART3_IRQHandler+0x10>)
 810309a:	f008 f95d 	bl	810b358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810309e:	bf00      	nop
 81030a0:	bd80      	pop	{r7, pc}
 81030a2:	bf00      	nop
 81030a4:	100005e4 	.word	0x100005e4

081030a8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 81030a8:	b580      	push	{r7, lr}
 81030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 81030ac:	4802      	ldr	r0, [pc, #8]	; (81030b8 <DMA1_Stream7_IRQHandler+0x10>)
 81030ae:	f002 fb37 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 81030b2:	bf00      	nop
 81030b4:	bd80      	pop	{r7, pc}
 81030b6:	bf00      	nop
 81030b8:	1000056c 	.word	0x1000056c

081030bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 81030bc:	b580      	push	{r7, lr}
 81030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 81030c0:	4802      	ldr	r0, [pc, #8]	; (81030cc <DMA2_Stream0_IRQHandler+0x10>)
 81030c2:	f002 fb2d 	bl	8105720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81030c6:	bf00      	nop
 81030c8:	bd80      	pop	{r7, pc}
 81030ca:	bf00      	nop
 81030cc:	10000674 	.word	0x10000674

081030d0 <calcChecksum>:
//      }
//
// }

 void calcChecksum(unsigned char* ck)
 {
 81030d0:	b580      	push	{r7, lr}
 81030d2:	b084      	sub	sp, #16
 81030d4:	af00      	add	r7, sp, #0
 81030d6:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 81030d8:	2202      	movs	r2, #2
 81030da:	2100      	movs	r1, #0
 81030dc:	6878      	ldr	r0, [r7, #4]
 81030de:	f009 fe03 	bl	810cce8 <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 81030e2:	2300      	movs	r3, #0
 81030e4:	60fb      	str	r3, [r7, #12]
 81030e6:	e016      	b.n	8103116 <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	781a      	ldrb	r2, [r3, #0]
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	490e      	ldr	r1, [pc, #56]	; (8103128 <calcChecksum+0x58>)
 81030f0:	440b      	add	r3, r1
 81030f2:	781b      	ldrb	r3, [r3, #0]
 81030f4:	4413      	add	r3, r2
 81030f6:	b2da      	uxtb	r2, r3
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	3301      	adds	r3, #1
 8103100:	7819      	ldrb	r1, [r3, #0]
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	781a      	ldrb	r2, [r3, #0]
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	3301      	adds	r3, #1
 810310a:	440a      	add	r2, r1
 810310c:	b2d2      	uxtb	r2, r2
 810310e:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 8103110:	68fb      	ldr	r3, [r7, #12]
 8103112:	3301      	adds	r3, #1
 8103114:	60fb      	str	r3, [r7, #12]
 8103116:	68fb      	ldr	r3, [r7, #12]
 8103118:	2b5f      	cmp	r3, #95	; 0x5f
 810311a:	dde5      	ble.n	81030e8 <calcChecksum+0x18>
      }

 }
 810311c:	bf00      	nop
 810311e:	bf00      	nop
 8103120:	3710      	adds	r7, #16
 8103122:	46bd      	mov	sp, r7
 8103124:	bd80      	pop	{r7, pc}
 8103126:	bf00      	nop
 8103128:	10000314 	.word	0x10000314
 810312c:	00000000 	.word	0x00000000

08103130 <processGPS>:


 void processGPS(GPSHandle* gps)
 {
 8103130:	b580      	push	{r7, lr}
 8103132:	b082      	sub	sp, #8
 8103134:	af00      	add	r7, sp, #0
 8103136:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 8103138:	4b39      	ldr	r3, [pc, #228]	; (8103220 <processGPS+0xf0>)
 810313a:	6a1b      	ldr	r3, [r3, #32]
 810313c:	4618      	mov	r0, r3
 810313e:	f7fd fa1d 	bl	810057c <__aeabi_i2d>
 8103142:	a335      	add	r3, pc, #212	; (adr r3, 8103218 <processGPS+0xe8>)
 8103144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103148:	f7fd fa82 	bl	8100650 <__aeabi_dmul>
 810314c:	4602      	mov	r2, r0
 810314e:	460b      	mov	r3, r1
 8103150:	4610      	mov	r0, r2
 8103152:	4619      	mov	r1, r3
 8103154:	f7fd fd2c 	bl	8100bb0 <__aeabi_d2f>
 8103158:	4602      	mov	r2, r0
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 810315e:	4b30      	ldr	r3, [pc, #192]	; (8103220 <processGPS+0xf0>)
 8103160:	69db      	ldr	r3, [r3, #28]
 8103162:	4618      	mov	r0, r3
 8103164:	f7fd fa0a 	bl	810057c <__aeabi_i2d>
 8103168:	a32b      	add	r3, pc, #172	; (adr r3, 8103218 <processGPS+0xe8>)
 810316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810316e:	f7fd fa6f 	bl	8100650 <__aeabi_dmul>
 8103172:	4602      	mov	r2, r0
 8103174:	460b      	mov	r3, r1
 8103176:	4610      	mov	r0, r2
 8103178:	4619      	mov	r1, r3
 810317a:	f7fd fd19 	bl	8100bb0 <__aeabi_d2f>
 810317e:	4602      	mov	r2, r0
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.hMSL / 1000.0f;  // use Mean sea level instead
 8103184:	4b26      	ldr	r3, [pc, #152]	; (8103220 <processGPS+0xf0>)
 8103186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103188:	ee07 3a90 	vmov	s15, r3
 810318c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103190:	eddf 6a24 	vldr	s13, [pc, #144]	; 8103224 <processGPS+0xf4>
 8103194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 810319e:	4b20      	ldr	r3, [pc, #128]	; (8103220 <processGPS+0xf0>)
 81031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031a2:	ee07 3a90 	vmov	s15, r3
 81031a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81031aa:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8103224 <processGPS+0xf4>
 81031ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 81031b8:	4b19      	ldr	r3, [pc, #100]	; (8103220 <processGPS+0xf0>)
 81031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81031bc:	ee07 3a90 	vmov	s15, r3
 81031c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81031c4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8103224 <processGPS+0xf4>
 81031c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 81031d2:	4b13      	ldr	r3, [pc, #76]	; (8103220 <processGPS+0xf0>)
 81031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81031d6:	ee07 3a90 	vmov	s15, r3
 81031da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81031de:	eddf 6a12 	vldr	s13, [pc, #72]	; 8103228 <processGPS+0xf8>
 81031e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 81031ec:	4b0c      	ldr	r3, [pc, #48]	; (8103220 <processGPS+0xf0>)
 81031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81031f0:	ee07 3a90 	vmov	s15, r3
 81031f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81031f8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8103224 <processGPS+0xf4>
 81031fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	edc3 7a06 	vstr	s15, [r3, #24]
     gps->num_satellites = pvt.numSV;
 8103206:	4b06      	ldr	r3, [pc, #24]	; (8103220 <processGPS+0xf0>)
 8103208:	7edb      	ldrb	r3, [r3, #27]
 810320a:	461a      	mov	r2, r3
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	61da      	str	r2, [r3, #28]


 }
 8103210:	bf00      	nop
 8103212:	3708      	adds	r7, #8
 8103214:	46bd      	mov	sp, r7
 8103216:	bd80      	pop	{r7, pc}
 8103218:	9abcaf48 	.word	0x9abcaf48
 810321c:	3e7ad7f2 	.word	0x3e7ad7f2
 8103220:	10000314 	.word	0x10000314
 8103224:	447a0000 	.word	0x447a0000
 8103228:	c47a0000 	.word	0xc47a0000

0810322c <ConfigGPS>:
//     return *gps;
// }


 void ConfigGPS(void)
 {
 810322c:	b590      	push	{r4, r7, lr}
 810322e:	b0c1      	sub	sp, #260	; 0x104
 8103230:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 8103232:	4b43      	ldr	r3, [pc, #268]	; (8103340 <ConfigGPS+0x114>)
 8103234:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8103238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810323a:	c407      	stmia	r4!, {r0, r1, r2}
 810323c:	8023      	strh	r3, [r4, #0]
 810323e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8103242:	220e      	movs	r2, #14
 8103244:	4619      	mov	r1, r3
 8103246:	483f      	ldr	r0, [pc, #252]	; (8103344 <ConfigGPS+0x118>)
 8103248:	f007 ffc0 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 810324c:	2032      	movs	r0, #50	; 0x32
 810324e:	f000 fb07 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 8103252:	4b3d      	ldr	r3, [pc, #244]	; (8103348 <ConfigGPS+0x11c>)
 8103254:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8103258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810325a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810325e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8103262:	2210      	movs	r2, #16
 8103264:	4619      	mov	r1, r3
 8103266:	4837      	ldr	r0, [pc, #220]	; (8103344 <ConfigGPS+0x118>)
 8103268:	f007 ffb0 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 810326c:	2032      	movs	r0, #50	; 0x32
 810326e:	f000 faf7 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 8103272:	4b36      	ldr	r3, [pc, #216]	; (810334c <ConfigGPS+0x120>)
 8103274:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8103278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810327a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810327e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8103282:	2210      	movs	r2, #16
 8103284:	4619      	mov	r1, r3
 8103286:	482f      	ldr	r0, [pc, #188]	; (8103344 <ConfigGPS+0x118>)
 8103288:	f007 ffa0 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 810328c:	2032      	movs	r0, #50	; 0x32
 810328e:	f000 fae7 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 8103292:	4b2f      	ldr	r3, [pc, #188]	; (8103350 <ConfigGPS+0x124>)
 8103294:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8103298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810329a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810329e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 81032a2:	2210      	movs	r2, #16
 81032a4:	4619      	mov	r1, r3
 81032a6:	4827      	ldr	r0, [pc, #156]	; (8103344 <ConfigGPS+0x118>)
 81032a8:	f007 ff90 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81032ac:	2032      	movs	r0, #50	; 0x32
 81032ae:	f000 fad7 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 81032b2:	4b28      	ldr	r3, [pc, #160]	; (8103354 <ConfigGPS+0x128>)
 81032b4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 81032b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81032ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81032be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 81032c2:	2210      	movs	r2, #16
 81032c4:	4619      	mov	r1, r3
 81032c6:	481f      	ldr	r0, [pc, #124]	; (8103344 <ConfigGPS+0x118>)
 81032c8:	f007 ff80 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81032cc:	2032      	movs	r0, #50	; 0x32
 81032ce:	f000 fac7 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81032d2:	4b21      	ldr	r3, [pc, #132]	; (8103358 <ConfigGPS+0x12c>)
 81032d4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 81032d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81032da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81032de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 81032e2:	2210      	movs	r2, #16
 81032e4:	4619      	mov	r1, r3
 81032e6:	4817      	ldr	r0, [pc, #92]	; (8103344 <ConfigGPS+0x118>)
 81032e8:	f007 ff70 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81032ec:	2032      	movs	r0, #50	; 0x32
 81032ee:	f000 fab7 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 81032f2:	4b1a      	ldr	r3, [pc, #104]	; (810335c <ConfigGPS+0x130>)
 81032f4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 81032f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81032fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81032fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8103302:	2210      	movs	r2, #16
 8103304:	4619      	mov	r1, r3
 8103306:	480f      	ldr	r0, [pc, #60]	; (8103344 <ConfigGPS+0x118>)
 8103308:	f007 ff60 	bl	810b1cc <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 810330c:	2032      	movs	r0, #50	; 0x32
 810330e:	f000 faa7 	bl	8103860 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 8103312:	4b13      	ldr	r3, [pc, #76]	; (8103360 <ConfigGPS+0x134>)
 8103314:	f107 0410 	add.w	r4, r7, #16
 8103318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810331a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810331e:	f107 0310 	add.w	r3, r7, #16
 8103322:	2210      	movs	r2, #16
 8103324:	4619      	mov	r1, r3
 8103326:	4807      	ldr	r0, [pc, #28]	; (8103344 <ConfigGPS+0x118>)
 8103328:	f007 ff50 	bl	810b1cc <HAL_UART_Transmit_DMA>

   HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 810332c:	2201      	movs	r2, #1
 810332e:	490d      	ldr	r1, [pc, #52]	; (8103364 <ConfigGPS+0x138>)
 8103330:	4804      	ldr	r0, [pc, #16]	; (8103344 <ConfigGPS+0x118>)
 8103332:	f007 ffcb 	bl	810b2cc <HAL_UART_Receive_DMA>
 }
 8103336:	bf00      	nop
 8103338:	f507 7782 	add.w	r7, r7, #260	; 0x104
 810333c:	46bd      	mov	sp, r7
 810333e:	bd90      	pop	{r4, r7, pc}
 8103340:	0810dc88 	.word	0x0810dc88
 8103344:	100005e4 	.word	0x100005e4
 8103348:	0810dc98 	.word	0x0810dc98
 810334c:	0810dca8 	.word	0x0810dca8
 8103350:	0810dcb8 	.word	0x0810dcb8
 8103354:	0810dcc8 	.word	0x0810dcc8
 8103358:	0810dcd8 	.word	0x0810dcd8
 810335c:	0810dce8 	.word	0x0810dce8
 8103360:	0810dcf8 	.word	0x0810dcf8
 8103364:	100000c0 	.word	0x100000c0

08103368 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103368:	b480      	push	{r7}
 810336a:	b083      	sub	sp, #12
 810336c:	af00      	add	r7, sp, #0
 810336e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8103370:	bf00      	nop
 8103372:	370c      	adds	r7, #12
 8103374:	46bd      	mov	sp, r7
 8103376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810337a:	4770      	bx	lr

0810337c <HAL_UART_RxCpltCallback>:


 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 810337c:	b580      	push	{r7, lr}
 810337e:	b084      	sub	sp, #16
 8103380:	af00      	add	r7, sp, #0
 8103382:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a31      	ldr	r2, [pc, #196]	; (8103450 <HAL_UART_RxCpltCallback+0xd4>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d15b      	bne.n	8103446 <HAL_UART_RxCpltCallback+0xca>
    {
      if(byte_pos < 2)
 810338e:	4b31      	ldr	r3, [pc, #196]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	2b01      	cmp	r3, #1
 8103394:	dc17      	bgt.n	81033c6 <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 8103396:	4b30      	ldr	r3, [pc, #192]	; (8103458 <HAL_UART_RxCpltCallback+0xdc>)
 8103398:	781a      	ldrb	r2, [r3, #0]
 810339a:	4b30      	ldr	r3, [pc, #192]	; (810345c <HAL_UART_RxCpltCallback+0xe0>)
 810339c:	881b      	ldrh	r3, [r3, #0]
 810339e:	81bb      	strh	r3, [r7, #12]
 81033a0:	4b2c      	ldr	r3, [pc, #176]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	f107 0110 	add.w	r1, r7, #16
 81033a8:	440b      	add	r3, r1
 81033aa:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 81033ae:	429a      	cmp	r2, r3
 81033b0:	d105      	bne.n	81033be <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 81033b2:	4b28      	ldr	r3, [pc, #160]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	3301      	adds	r3, #1
 81033b8:	4a26      	ldr	r2, [pc, #152]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033ba:	6013      	str	r3, [r2, #0]
        }
      }
    }

    //processGPS(&gps);
 }
 81033bc:	e043      	b.n	8103446 <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 81033be:	4b25      	ldr	r3, [pc, #148]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033c0:	2200      	movs	r2, #0
 81033c2:	601a      	str	r2, [r3, #0]
 }
 81033c4:	e03f      	b.n	8103446 <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 81033c6:	4b23      	ldr	r3, [pc, #140]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	3b01      	subs	r3, #1
 81033cc:	2260      	movs	r2, #96	; 0x60
 81033ce:	4293      	cmp	r3, r2
 81033d0:	dc07      	bgt.n	81033e2 <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 81033d2:	4b20      	ldr	r3, [pc, #128]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	3b02      	subs	r3, #2
 81033d8:	4a21      	ldr	r2, [pc, #132]	; (8103460 <HAL_UART_RxCpltCallback+0xe4>)
 81033da:	4413      	add	r3, r2
 81033dc:	4a1e      	ldr	r2, [pc, #120]	; (8103458 <HAL_UART_RxCpltCallback+0xdc>)
 81033de:	7812      	ldrb	r2, [r2, #0]
 81033e0:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 81033e2:	4b1c      	ldr	r3, [pc, #112]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	3301      	adds	r3, #1
 81033e8:	4a1a      	ldr	r2, [pc, #104]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033ea:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 81033ec:	2360      	movs	r3, #96	; 0x60
 81033ee:	1c9a      	adds	r2, r3, #2
 81033f0:	4b18      	ldr	r3, [pc, #96]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	429a      	cmp	r2, r3
 81033f6:	d103      	bne.n	8103400 <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 81033f8:	481a      	ldr	r0, [pc, #104]	; (8103464 <HAL_UART_RxCpltCallback+0xe8>)
 81033fa:	f7ff fe69 	bl	81030d0 <calcChecksum>
 }
 81033fe:	e022      	b.n	8103446 <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 8103400:	2360      	movs	r3, #96	; 0x60
 8103402:	1cda      	adds	r2, r3, #3
 8103404:	4b13      	ldr	r3, [pc, #76]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	429a      	cmp	r2, r3
 810340a:	d109      	bne.n	8103420 <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 810340c:	4b12      	ldr	r3, [pc, #72]	; (8103458 <HAL_UART_RxCpltCallback+0xdc>)
 810340e:	781a      	ldrb	r2, [r3, #0]
 8103410:	4b14      	ldr	r3, [pc, #80]	; (8103464 <HAL_UART_RxCpltCallback+0xe8>)
 8103412:	781b      	ldrb	r3, [r3, #0]
 8103414:	429a      	cmp	r2, r3
 8103416:	d016      	beq.n	8103446 <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 8103418:	4b0e      	ldr	r3, [pc, #56]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 810341a:	2200      	movs	r2, #0
 810341c:	601a      	str	r2, [r3, #0]
 }
 810341e:	e012      	b.n	8103446 <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 8103420:	2360      	movs	r3, #96	; 0x60
 8103422:	1d1a      	adds	r2, r3, #4
 8103424:	4b0b      	ldr	r3, [pc, #44]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	429a      	cmp	r2, r3
 810342a:	d103      	bne.n	8103434 <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 810342c:	4b09      	ldr	r3, [pc, #36]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 810342e:	2200      	movs	r2, #0
 8103430:	601a      	str	r2, [r3, #0]
 }
 8103432:	e008      	b.n	8103446 <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 8103434:	2360      	movs	r3, #96	; 0x60
 8103436:	1d1a      	adds	r2, r3, #4
 8103438:	4b06      	ldr	r3, [pc, #24]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	429a      	cmp	r2, r3
 810343e:	da02      	bge.n	8103446 <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8103440:	4b04      	ldr	r3, [pc, #16]	; (8103454 <HAL_UART_RxCpltCallback+0xd8>)
 8103442:	2200      	movs	r2, #0
 8103444:	601a      	str	r2, [r3, #0]
 }
 8103446:	bf00      	nop
 8103448:	3710      	adds	r7, #16
 810344a:	46bd      	mov	sp, r7
 810344c:	bd80      	pop	{r7, pc}
 810344e:	bf00      	nop
 8103450:	40004800 	.word	0x40004800
 8103454:	100000c4 	.word	0x100000c4
 8103458:	100000c0 	.word	0x100000c0
 810345c:	0810dd08 	.word	0x0810dd08
 8103460:	10000314 	.word	0x10000314
 8103464:	100000c8 	.word	0x100000c8

08103468 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8103468:	b580      	push	{r7, lr}
 810346a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810346c:	4b22      	ldr	r3, [pc, #136]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 810346e:	4a23      	ldr	r2, [pc, #140]	; (81034fc <MX_USART3_UART_Init+0x94>)
 8103470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8103472:	4b21      	ldr	r3, [pc, #132]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 8103474:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8103478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810347a:	4b1f      	ldr	r3, [pc, #124]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 810347c:	2200      	movs	r2, #0
 810347e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103480:	4b1d      	ldr	r3, [pc, #116]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 8103482:	2200      	movs	r2, #0
 8103484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8103486:	4b1c      	ldr	r3, [pc, #112]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 8103488:	2200      	movs	r2, #0
 810348a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810348c:	4b1a      	ldr	r3, [pc, #104]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 810348e:	220c      	movs	r2, #12
 8103490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103492:	4b19      	ldr	r3, [pc, #100]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 8103494:	2200      	movs	r2, #0
 8103496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103498:	4b17      	ldr	r3, [pc, #92]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 810349a:	2200      	movs	r2, #0
 810349c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810349e:	4b16      	ldr	r3, [pc, #88]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034a0:	2200      	movs	r2, #0
 81034a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81034a4:	4b14      	ldr	r3, [pc, #80]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034a6:	2200      	movs	r2, #0
 81034a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81034aa:	4b13      	ldr	r3, [pc, #76]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034ac:	2200      	movs	r2, #0
 81034ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81034b0:	4811      	ldr	r0, [pc, #68]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034b2:	f007 fe3b 	bl	810b12c <HAL_UART_Init>
 81034b6:	4603      	mov	r3, r0
 81034b8:	2b00      	cmp	r3, #0
 81034ba:	d001      	beq.n	81034c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81034bc:	f7ff fc1e 	bl	8102cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81034c0:	2100      	movs	r1, #0
 81034c2:	480d      	ldr	r0, [pc, #52]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034c4:	f009 fb1c 	bl	810cb00 <HAL_UARTEx_SetTxFifoThreshold>
 81034c8:	4603      	mov	r3, r0
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	d001      	beq.n	81034d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81034ce:	f7ff fc15 	bl	8102cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81034d2:	2100      	movs	r1, #0
 81034d4:	4808      	ldr	r0, [pc, #32]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034d6:	f009 fb51 	bl	810cb7c <HAL_UARTEx_SetRxFifoThreshold>
 81034da:	4603      	mov	r3, r0
 81034dc:	2b00      	cmp	r3, #0
 81034de:	d001      	beq.n	81034e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81034e0:	f7ff fc0c 	bl	8102cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81034e4:	4804      	ldr	r0, [pc, #16]	; (81034f8 <MX_USART3_UART_Init+0x90>)
 81034e6:	f009 fad2 	bl	810ca8e <HAL_UARTEx_DisableFifoMode>
 81034ea:	4603      	mov	r3, r0
 81034ec:	2b00      	cmp	r3, #0
 81034ee:	d001      	beq.n	81034f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81034f0:	f7ff fc04 	bl	8102cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81034f4:	bf00      	nop
 81034f6:	bd80      	pop	{r7, pc}
 81034f8:	100005e4 	.word	0x100005e4
 81034fc:	40004800 	.word	0x40004800

08103500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8103500:	b580      	push	{r7, lr}
 8103502:	b0b8      	sub	sp, #224	; 0xe0
 8103504:	af00      	add	r7, sp, #0
 8103506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103508:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810350c:	2200      	movs	r2, #0
 810350e:	601a      	str	r2, [r3, #0]
 8103510:	605a      	str	r2, [r3, #4]
 8103512:	609a      	str	r2, [r3, #8]
 8103514:	60da      	str	r2, [r3, #12]
 8103516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103518:	f107 0310 	add.w	r3, r7, #16
 810351c:	22bc      	movs	r2, #188	; 0xbc
 810351e:	2100      	movs	r1, #0
 8103520:	4618      	mov	r0, r3
 8103522:	f009 fbe1 	bl	810cce8 <memset>
  if(uartHandle->Instance==USART3)
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a57      	ldr	r2, [pc, #348]	; (8103688 <HAL_UART_MspInit+0x188>)
 810352c:	4293      	cmp	r3, r2
 810352e:	f040 80a7 	bne.w	8103680 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103532:	2302      	movs	r3, #2
 8103534:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103536:	2300      	movs	r3, #0
 8103538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810353c:	f107 0310 	add.w	r3, r7, #16
 8103540:	4618      	mov	r0, r3
 8103542:	f005 fc57 	bl	8108df4 <HAL_RCCEx_PeriphCLKConfig>
 8103546:	4603      	mov	r3, r0
 8103548:	2b00      	cmp	r3, #0
 810354a:	d001      	beq.n	8103550 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 810354c:	f7ff fbd6 	bl	8102cfc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8103550:	4b4e      	ldr	r3, [pc, #312]	; (810368c <HAL_UART_MspInit+0x18c>)
 8103552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103556:	4a4d      	ldr	r2, [pc, #308]	; (810368c <HAL_UART_MspInit+0x18c>)
 8103558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810355c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103560:	4b4a      	ldr	r3, [pc, #296]	; (810368c <HAL_UART_MspInit+0x18c>)
 8103562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810356a:	60fb      	str	r3, [r7, #12]
 810356c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810356e:	4b47      	ldr	r3, [pc, #284]	; (810368c <HAL_UART_MspInit+0x18c>)
 8103570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103574:	4a45      	ldr	r2, [pc, #276]	; (810368c <HAL_UART_MspInit+0x18c>)
 8103576:	f043 0308 	orr.w	r3, r3, #8
 810357a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810357e:	4b43      	ldr	r3, [pc, #268]	; (810368c <HAL_UART_MspInit+0x18c>)
 8103580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103584:	f003 0308 	and.w	r3, r3, #8
 8103588:	60bb      	str	r3, [r7, #8]
 810358a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810358c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103594:	2302      	movs	r3, #2
 8103596:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810359a:	2300      	movs	r3, #0
 810359c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81035a0:	2300      	movs	r3, #0
 81035a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81035a6:	2307      	movs	r3, #7
 81035a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81035ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81035b0:	4619      	mov	r1, r3
 81035b2:	4837      	ldr	r0, [pc, #220]	; (8103690 <HAL_UART_MspInit+0x190>)
 81035b4:	f003 fbe0 	bl	8106d78 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 81035b8:	4b36      	ldr	r3, [pc, #216]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035ba:	4a37      	ldr	r2, [pc, #220]	; (8103698 <HAL_UART_MspInit+0x198>)
 81035bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81035be:	4b35      	ldr	r3, [pc, #212]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035c0:	222d      	movs	r2, #45	; 0x2d
 81035c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81035c4:	4b33      	ldr	r3, [pc, #204]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035c6:	2200      	movs	r2, #0
 81035c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81035ca:	4b32      	ldr	r3, [pc, #200]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035cc:	2200      	movs	r2, #0
 81035ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81035d0:	4b30      	ldr	r3, [pc, #192]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81035d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81035d8:	4b2e      	ldr	r3, [pc, #184]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035da:	2200      	movs	r2, #0
 81035dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81035de:	4b2d      	ldr	r3, [pc, #180]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035e0:	2200      	movs	r2, #0
 81035e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 81035e4:	4b2b      	ldr	r3, [pc, #172]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 81035ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 81035ec:	4b29      	ldr	r3, [pc, #164]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81035f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81035f4:	4b27      	ldr	r3, [pc, #156]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035f6:	2200      	movs	r2, #0
 81035f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81035fa:	4826      	ldr	r0, [pc, #152]	; (8103694 <HAL_UART_MspInit+0x194>)
 81035fc:	f000 fd6a 	bl	81040d4 <HAL_DMA_Init>
 8103600:	4603      	mov	r3, r0
 8103602:	2b00      	cmp	r3, #0
 8103604:	d001      	beq.n	810360a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8103606:	f7ff fb79 	bl	8102cfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	4a21      	ldr	r2, [pc, #132]	; (8103694 <HAL_UART_MspInit+0x194>)
 810360e:	67da      	str	r2, [r3, #124]	; 0x7c
 8103610:	4a20      	ldr	r2, [pc, #128]	; (8103694 <HAL_UART_MspInit+0x194>)
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8103616:	4b21      	ldr	r3, [pc, #132]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103618:	4a21      	ldr	r2, [pc, #132]	; (81036a0 <HAL_UART_MspInit+0x1a0>)
 810361a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 810361c:	4b1f      	ldr	r3, [pc, #124]	; (810369c <HAL_UART_MspInit+0x19c>)
 810361e:	222e      	movs	r2, #46	; 0x2e
 8103620:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8103622:	4b1e      	ldr	r3, [pc, #120]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103624:	2240      	movs	r2, #64	; 0x40
 8103626:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103628:	4b1c      	ldr	r3, [pc, #112]	; (810369c <HAL_UART_MspInit+0x19c>)
 810362a:	2200      	movs	r2, #0
 810362c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 810362e:	4b1b      	ldr	r3, [pc, #108]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103634:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103636:	4b19      	ldr	r3, [pc, #100]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103638:	2200      	movs	r2, #0
 810363a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810363c:	4b17      	ldr	r3, [pc, #92]	; (810369c <HAL_UART_MspInit+0x19c>)
 810363e:	2200      	movs	r2, #0
 8103640:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8103642:	4b16      	ldr	r3, [pc, #88]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103644:	2200      	movs	r2, #0
 8103646:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8103648:	4b14      	ldr	r3, [pc, #80]	; (810369c <HAL_UART_MspInit+0x19c>)
 810364a:	2200      	movs	r2, #0
 810364c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810364e:	4b13      	ldr	r3, [pc, #76]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103650:	2200      	movs	r2, #0
 8103652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8103654:	4811      	ldr	r0, [pc, #68]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103656:	f000 fd3d 	bl	81040d4 <HAL_DMA_Init>
 810365a:	4603      	mov	r3, r0
 810365c:	2b00      	cmp	r3, #0
 810365e:	d001      	beq.n	8103664 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8103660:	f7ff fb4c 	bl	8102cfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	4a0d      	ldr	r2, [pc, #52]	; (810369c <HAL_UART_MspInit+0x19c>)
 8103668:	679a      	str	r2, [r3, #120]	; 0x78
 810366a:	4a0c      	ldr	r2, [pc, #48]	; (810369c <HAL_UART_MspInit+0x19c>)
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8103670:	2200      	movs	r2, #0
 8103672:	2105      	movs	r1, #5
 8103674:	2027      	movs	r0, #39	; 0x27
 8103676:	f000 fce4 	bl	8104042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810367a:	2027      	movs	r0, #39	; 0x27
 810367c:	f000 fcfb 	bl	8104076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8103680:	bf00      	nop
 8103682:	37e0      	adds	r7, #224	; 0xe0
 8103684:	46bd      	mov	sp, r7
 8103686:	bd80      	pop	{r7, pc}
 8103688:	40004800 	.word	0x40004800
 810368c:	58024400 	.word	0x58024400
 8103690:	58020c00 	.word	0x58020c00
 8103694:	1000056c 	.word	0x1000056c
 8103698:	400200b8 	.word	0x400200b8
 810369c:	10000674 	.word	0x10000674
 81036a0:	40020410 	.word	0x40020410

081036a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81036a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81036dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81036a8:	f7fd fdac 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81036ac:	480c      	ldr	r0, [pc, #48]	; (81036e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81036ae:	490d      	ldr	r1, [pc, #52]	; (81036e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81036b0:	4a0d      	ldr	r2, [pc, #52]	; (81036e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81036b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81036b4:	e002      	b.n	81036bc <LoopCopyDataInit>

081036b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81036b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81036b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81036ba:	3304      	adds	r3, #4

081036bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81036bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81036be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81036c0:	d3f9      	bcc.n	81036b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81036c2:	4a0a      	ldr	r2, [pc, #40]	; (81036ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81036c4:	4c0a      	ldr	r4, [pc, #40]	; (81036f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 81036c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81036c8:	e001      	b.n	81036ce <LoopFillZerobss>

081036ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81036ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81036cc:	3204      	adds	r2, #4

081036ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81036ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81036d0:	d3fb      	bcc.n	81036ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81036d2:	f009 fae5 	bl	810cca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81036d6:	f7ff f91f 	bl	8102918 <main>
  bx  lr
 81036da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81036dc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81036e0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81036e4:	1000008c 	.word	0x1000008c
  ldr r2, =_sidata
 81036e8:	0810dda0 	.word	0x0810dda0
  ldr r2, =_sbss
 81036ec:	1000008c 	.word	0x1000008c
  ldr r4, =_ebss
 81036f0:	100006f0 	.word	0x100006f0

081036f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81036f4:	e7fe      	b.n	81036f4 <ADC3_IRQHandler>
	...

081036f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81036f8:	b580      	push	{r7, lr}
 81036fa:	b082      	sub	sp, #8
 81036fc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81036fe:	4b28      	ldr	r3, [pc, #160]	; (81037a0 <HAL_Init+0xa8>)
 8103700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103704:	4a26      	ldr	r2, [pc, #152]	; (81037a0 <HAL_Init+0xa8>)
 8103706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810370a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810370e:	4b24      	ldr	r3, [pc, #144]	; (81037a0 <HAL_Init+0xa8>)
 8103710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103718:	603b      	str	r3, [r7, #0]
 810371a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810371c:	4b21      	ldr	r3, [pc, #132]	; (81037a4 <HAL_Init+0xac>)
 810371e:	681b      	ldr	r3, [r3, #0]
 8103720:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103728:	4a1e      	ldr	r2, [pc, #120]	; (81037a4 <HAL_Init+0xac>)
 810372a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810372e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103730:	4b1c      	ldr	r3, [pc, #112]	; (81037a4 <HAL_Init+0xac>)
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	4a1b      	ldr	r2, [pc, #108]	; (81037a4 <HAL_Init+0xac>)
 8103736:	f043 0301 	orr.w	r3, r3, #1
 810373a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810373c:	2003      	movs	r0, #3
 810373e:	f000 fc75 	bl	810402c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103742:	f005 f97f 	bl	8108a44 <HAL_RCC_GetSysClockFreq>
 8103746:	4602      	mov	r2, r0
 8103748:	4b15      	ldr	r3, [pc, #84]	; (81037a0 <HAL_Init+0xa8>)
 810374a:	699b      	ldr	r3, [r3, #24]
 810374c:	0a1b      	lsrs	r3, r3, #8
 810374e:	f003 030f 	and.w	r3, r3, #15
 8103752:	4915      	ldr	r1, [pc, #84]	; (81037a8 <HAL_Init+0xb0>)
 8103754:	5ccb      	ldrb	r3, [r1, r3]
 8103756:	f003 031f 	and.w	r3, r3, #31
 810375a:	fa22 f303 	lsr.w	r3, r2, r3
 810375e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103760:	4b0f      	ldr	r3, [pc, #60]	; (81037a0 <HAL_Init+0xa8>)
 8103762:	699b      	ldr	r3, [r3, #24]
 8103764:	f003 030f 	and.w	r3, r3, #15
 8103768:	4a0f      	ldr	r2, [pc, #60]	; (81037a8 <HAL_Init+0xb0>)
 810376a:	5cd3      	ldrb	r3, [r2, r3]
 810376c:	f003 031f 	and.w	r3, r3, #31
 8103770:	687a      	ldr	r2, [r7, #4]
 8103772:	fa22 f303 	lsr.w	r3, r2, r3
 8103776:	4a0d      	ldr	r2, [pc, #52]	; (81037ac <HAL_Init+0xb4>)
 8103778:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810377a:	4b0c      	ldr	r3, [pc, #48]	; (81037ac <HAL_Init+0xb4>)
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	4a0c      	ldr	r2, [pc, #48]	; (81037b0 <HAL_Init+0xb8>)
 8103780:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103782:	2000      	movs	r0, #0
 8103784:	f000 f816 	bl	81037b4 <HAL_InitTick>
 8103788:	4603      	mov	r3, r0
 810378a:	2b00      	cmp	r3, #0
 810378c:	d001      	beq.n	8103792 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810378e:	2301      	movs	r3, #1
 8103790:	e002      	b.n	8103798 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103792:	f7ff fbe1 	bl	8102f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103796:	2300      	movs	r3, #0
}
 8103798:	4618      	mov	r0, r3
 810379a:	3708      	adds	r7, #8
 810379c:	46bd      	mov	sp, r7
 810379e:	bd80      	pop	{r7, pc}
 81037a0:	58024400 	.word	0x58024400
 81037a4:	40024400 	.word	0x40024400
 81037a8:	0810dd0c 	.word	0x0810dd0c
 81037ac:	10000004 	.word	0x10000004
 81037b0:	10000000 	.word	0x10000000

081037b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81037b4:	b580      	push	{r7, lr}
 81037b6:	b082      	sub	sp, #8
 81037b8:	af00      	add	r7, sp, #0
 81037ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81037bc:	4b15      	ldr	r3, [pc, #84]	; (8103814 <HAL_InitTick+0x60>)
 81037be:	781b      	ldrb	r3, [r3, #0]
 81037c0:	2b00      	cmp	r3, #0
 81037c2:	d101      	bne.n	81037c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81037c4:	2301      	movs	r3, #1
 81037c6:	e021      	b.n	810380c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81037c8:	4b13      	ldr	r3, [pc, #76]	; (8103818 <HAL_InitTick+0x64>)
 81037ca:	681a      	ldr	r2, [r3, #0]
 81037cc:	4b11      	ldr	r3, [pc, #68]	; (8103814 <HAL_InitTick+0x60>)
 81037ce:	781b      	ldrb	r3, [r3, #0]
 81037d0:	4619      	mov	r1, r3
 81037d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81037d6:	fbb3 f3f1 	udiv	r3, r3, r1
 81037da:	fbb2 f3f3 	udiv	r3, r2, r3
 81037de:	4618      	mov	r0, r3
 81037e0:	f000 fc57 	bl	8104092 <HAL_SYSTICK_Config>
 81037e4:	4603      	mov	r3, r0
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d001      	beq.n	81037ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81037ea:	2301      	movs	r3, #1
 81037ec:	e00e      	b.n	810380c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	2b0f      	cmp	r3, #15
 81037f2:	d80a      	bhi.n	810380a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81037f4:	2200      	movs	r2, #0
 81037f6:	6879      	ldr	r1, [r7, #4]
 81037f8:	f04f 30ff 	mov.w	r0, #4294967295
 81037fc:	f000 fc21 	bl	8104042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103800:	4a06      	ldr	r2, [pc, #24]	; (810381c <HAL_InitTick+0x68>)
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103806:	2300      	movs	r3, #0
 8103808:	e000      	b.n	810380c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810380a:	2301      	movs	r3, #1
}
 810380c:	4618      	mov	r0, r3
 810380e:	3708      	adds	r7, #8
 8103810:	46bd      	mov	sp, r7
 8103812:	bd80      	pop	{r7, pc}
 8103814:	10000020 	.word	0x10000020
 8103818:	10000000 	.word	0x10000000
 810381c:	1000001c 	.word	0x1000001c

08103820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103820:	b480      	push	{r7}
 8103822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103824:	4b06      	ldr	r3, [pc, #24]	; (8103840 <HAL_IncTick+0x20>)
 8103826:	781b      	ldrb	r3, [r3, #0]
 8103828:	461a      	mov	r2, r3
 810382a:	4b06      	ldr	r3, [pc, #24]	; (8103844 <HAL_IncTick+0x24>)
 810382c:	681b      	ldr	r3, [r3, #0]
 810382e:	4413      	add	r3, r2
 8103830:	4a04      	ldr	r2, [pc, #16]	; (8103844 <HAL_IncTick+0x24>)
 8103832:	6013      	str	r3, [r2, #0]
}
 8103834:	bf00      	nop
 8103836:	46bd      	mov	sp, r7
 8103838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810383c:	4770      	bx	lr
 810383e:	bf00      	nop
 8103840:	10000020 	.word	0x10000020
 8103844:	100006ec 	.word	0x100006ec

08103848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103848:	b480      	push	{r7}
 810384a:	af00      	add	r7, sp, #0
  return uwTick;
 810384c:	4b03      	ldr	r3, [pc, #12]	; (810385c <HAL_GetTick+0x14>)
 810384e:	681b      	ldr	r3, [r3, #0]
}
 8103850:	4618      	mov	r0, r3
 8103852:	46bd      	mov	sp, r7
 8103854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103858:	4770      	bx	lr
 810385a:	bf00      	nop
 810385c:	100006ec 	.word	0x100006ec

08103860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103860:	b580      	push	{r7, lr}
 8103862:	b084      	sub	sp, #16
 8103864:	af00      	add	r7, sp, #0
 8103866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103868:	f7ff ffee 	bl	8103848 <HAL_GetTick>
 810386c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103872:	68fb      	ldr	r3, [r7, #12]
 8103874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103878:	d005      	beq.n	8103886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810387a:	4b0a      	ldr	r3, [pc, #40]	; (81038a4 <HAL_Delay+0x44>)
 810387c:	781b      	ldrb	r3, [r3, #0]
 810387e:	461a      	mov	r2, r3
 8103880:	68fb      	ldr	r3, [r7, #12]
 8103882:	4413      	add	r3, r2
 8103884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103886:	bf00      	nop
 8103888:	f7ff ffde 	bl	8103848 <HAL_GetTick>
 810388c:	4602      	mov	r2, r0
 810388e:	68bb      	ldr	r3, [r7, #8]
 8103890:	1ad3      	subs	r3, r2, r3
 8103892:	68fa      	ldr	r2, [r7, #12]
 8103894:	429a      	cmp	r2, r3
 8103896:	d8f7      	bhi.n	8103888 <HAL_Delay+0x28>
  {
  }
}
 8103898:	bf00      	nop
 810389a:	bf00      	nop
 810389c:	3710      	adds	r7, #16
 810389e:	46bd      	mov	sp, r7
 81038a0:	bd80      	pop	{r7, pc}
 81038a2:	bf00      	nop
 81038a4:	10000020 	.word	0x10000020

081038a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81038a8:	b480      	push	{r7}
 81038aa:	b083      	sub	sp, #12
 81038ac:	af00      	add	r7, sp, #0
 81038ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	68db      	ldr	r3, [r3, #12]
 81038b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	d101      	bne.n	81038c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81038bc:	2301      	movs	r3, #1
 81038be:	e000      	b.n	81038c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81038c0:	2300      	movs	r3, #0
}
 81038c2:	4618      	mov	r0, r3
 81038c4:	370c      	adds	r7, #12
 81038c6:	46bd      	mov	sp, r7
 81038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038cc:	4770      	bx	lr

081038ce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81038ce:	b480      	push	{r7}
 81038d0:	b083      	sub	sp, #12
 81038d2:	af00      	add	r7, sp, #0
 81038d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038da:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d101      	bne.n	81038e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 81038e2:	2301      	movs	r3, #1
 81038e4:	e000      	b.n	81038e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 81038e6:	2300      	movs	r3, #0
}
 81038e8:	4618      	mov	r0, r3
 81038ea:	370c      	adds	r7, #12
 81038ec:	46bd      	mov	sp, r7
 81038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f2:	4770      	bx	lr

081038f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81038f4:	b480      	push	{r7}
 81038f6:	b083      	sub	sp, #12
 81038f8:	af00      	add	r7, sp, #0
 81038fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	689b      	ldr	r3, [r3, #8]
 8103900:	f003 031f 	and.w	r3, r3, #31
}
 8103904:	4618      	mov	r0, r3
 8103906:	370c      	adds	r7, #12
 8103908:	46bd      	mov	sp, r7
 810390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810390e:	4770      	bx	lr

08103910 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103910:	b480      	push	{r7}
 8103912:	b083      	sub	sp, #12
 8103914:	af00      	add	r7, sp, #0
 8103916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	689b      	ldr	r3, [r3, #8]
 810391c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8103920:	4618      	mov	r0, r3
 8103922:	370c      	adds	r7, #12
 8103924:	46bd      	mov	sp, r7
 8103926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810392a:	4770      	bx	lr

0810392c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810392c:	b480      	push	{r7}
 810392e:	b083      	sub	sp, #12
 8103930:	af00      	add	r7, sp, #0
 8103932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	689b      	ldr	r3, [r3, #8]
 8103938:	f003 0304 	and.w	r3, r3, #4
 810393c:	2b04      	cmp	r3, #4
 810393e:	d101      	bne.n	8103944 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103940:	2301      	movs	r3, #1
 8103942:	e000      	b.n	8103946 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103944:	2300      	movs	r3, #0
}
 8103946:	4618      	mov	r0, r3
 8103948:	370c      	adds	r7, #12
 810394a:	46bd      	mov	sp, r7
 810394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103950:	4770      	bx	lr

08103952 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103952:	b480      	push	{r7}
 8103954:	b083      	sub	sp, #12
 8103956:	af00      	add	r7, sp, #0
 8103958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	689b      	ldr	r3, [r3, #8]
 810395e:	f003 0308 	and.w	r3, r3, #8
 8103962:	2b08      	cmp	r3, #8
 8103964:	d101      	bne.n	810396a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103966:	2301      	movs	r3, #1
 8103968:	e000      	b.n	810396c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810396a:	2300      	movs	r3, #0
}
 810396c:	4618      	mov	r0, r3
 810396e:	370c      	adds	r7, #12
 8103970:	46bd      	mov	sp, r7
 8103972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103976:	4770      	bx	lr

08103978 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8103978:	b580      	push	{r7, lr}
 810397a:	b08a      	sub	sp, #40	; 0x28
 810397c:	af00      	add	r7, sp, #0
 810397e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8103980:	2300      	movs	r3, #0
 8103982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	681b      	ldr	r3, [r3, #0]
 810398a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	685b      	ldr	r3, [r3, #4]
 8103992:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	4a87      	ldr	r2, [pc, #540]	; (8103bb8 <HAL_ADC_IRQHandler+0x240>)
 810399a:	4293      	cmp	r3, r2
 810399c:	d004      	beq.n	81039a8 <HAL_ADC_IRQHandler+0x30>
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	4a86      	ldr	r2, [pc, #536]	; (8103bbc <HAL_ADC_IRQHandler+0x244>)
 81039a4:	4293      	cmp	r3, r2
 81039a6:	d101      	bne.n	81039ac <HAL_ADC_IRQHandler+0x34>
 81039a8:	4b85      	ldr	r3, [pc, #532]	; (8103bc0 <HAL_ADC_IRQHandler+0x248>)
 81039aa:	e000      	b.n	81039ae <HAL_ADC_IRQHandler+0x36>
 81039ac:	4b85      	ldr	r3, [pc, #532]	; (8103bc4 <HAL_ADC_IRQHandler+0x24c>)
 81039ae:	4618      	mov	r0, r3
 81039b0:	f7ff ffa0 	bl	81038f4 <LL_ADC_GetMultimode>
 81039b4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 81039b6:	69fb      	ldr	r3, [r7, #28]
 81039b8:	f003 0302 	and.w	r3, r3, #2
 81039bc:	2b00      	cmp	r3, #0
 81039be:	d017      	beq.n	81039f0 <HAL_ADC_IRQHandler+0x78>
 81039c0:	69bb      	ldr	r3, [r7, #24]
 81039c2:	f003 0302 	and.w	r3, r3, #2
 81039c6:	2b00      	cmp	r3, #0
 81039c8:	d012      	beq.n	81039f0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039ce:	f003 0310 	and.w	r3, r3, #16
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	d105      	bne.n	81039e2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039da:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81039e2:	6878      	ldr	r0, [r7, #4]
 81039e4:	f000 fa48 	bl	8103e78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	2202      	movs	r2, #2
 81039ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81039f0:	69fb      	ldr	r3, [r7, #28]
 81039f2:	f003 0304 	and.w	r3, r3, #4
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	d004      	beq.n	8103a04 <HAL_ADC_IRQHandler+0x8c>
 81039fa:	69bb      	ldr	r3, [r7, #24]
 81039fc:	f003 0304 	and.w	r3, r3, #4
 8103a00:	2b00      	cmp	r3, #0
 8103a02:	d10a      	bne.n	8103a1a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103a04:	69fb      	ldr	r3, [r7, #28]
 8103a06:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	f000 8083 	beq.w	8103b16 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103a10:	69bb      	ldr	r3, [r7, #24]
 8103a12:	f003 0308 	and.w	r3, r3, #8
 8103a16:	2b00      	cmp	r3, #0
 8103a18:	d07d      	beq.n	8103b16 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a1e:	f003 0310 	and.w	r3, r3, #16
 8103a22:	2b00      	cmp	r3, #0
 8103a24:	d105      	bne.n	8103a32 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4618      	mov	r0, r3
 8103a38:	f7ff ff36 	bl	81038a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103a3c:	4603      	mov	r3, r0
 8103a3e:	2b00      	cmp	r3, #0
 8103a40:	d062      	beq.n	8103b08 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	4a5d      	ldr	r2, [pc, #372]	; (8103bbc <HAL_ADC_IRQHandler+0x244>)
 8103a48:	4293      	cmp	r3, r2
 8103a4a:	d002      	beq.n	8103a52 <HAL_ADC_IRQHandler+0xda>
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	681b      	ldr	r3, [r3, #0]
 8103a50:	e000      	b.n	8103a54 <HAL_ADC_IRQHandler+0xdc>
 8103a52:	4b59      	ldr	r3, [pc, #356]	; (8103bb8 <HAL_ADC_IRQHandler+0x240>)
 8103a54:	687a      	ldr	r2, [r7, #4]
 8103a56:	6812      	ldr	r2, [r2, #0]
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d008      	beq.n	8103a6e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103a5c:	697b      	ldr	r3, [r7, #20]
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d005      	beq.n	8103a6e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8103a62:	697b      	ldr	r3, [r7, #20]
 8103a64:	2b05      	cmp	r3, #5
 8103a66:	d002      	beq.n	8103a6e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103a68:	697b      	ldr	r3, [r7, #20]
 8103a6a:	2b09      	cmp	r3, #9
 8103a6c:	d104      	bne.n	8103a78 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	68db      	ldr	r3, [r3, #12]
 8103a74:	623b      	str	r3, [r7, #32]
 8103a76:	e00c      	b.n	8103a92 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	4a4f      	ldr	r2, [pc, #316]	; (8103bbc <HAL_ADC_IRQHandler+0x244>)
 8103a7e:	4293      	cmp	r3, r2
 8103a80:	d002      	beq.n	8103a88 <HAL_ADC_IRQHandler+0x110>
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	e000      	b.n	8103a8a <HAL_ADC_IRQHandler+0x112>
 8103a88:	4b4b      	ldr	r3, [pc, #300]	; (8103bb8 <HAL_ADC_IRQHandler+0x240>)
 8103a8a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103a8c:	693b      	ldr	r3, [r7, #16]
 8103a8e:	68db      	ldr	r3, [r3, #12]
 8103a90:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8103a92:	6a3b      	ldr	r3, [r7, #32]
 8103a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103a98:	2b00      	cmp	r3, #0
 8103a9a:	d135      	bne.n	8103b08 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	f003 0308 	and.w	r3, r3, #8
 8103aa6:	2b08      	cmp	r3, #8
 8103aa8:	d12e      	bne.n	8103b08 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4618      	mov	r0, r3
 8103ab0:	f7ff ff3c 	bl	810392c <LL_ADC_REG_IsConversionOngoing>
 8103ab4:	4603      	mov	r3, r0
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d11a      	bne.n	8103af0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	681b      	ldr	r3, [r3, #0]
 8103abe:	685a      	ldr	r2, [r3, #4]
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	f022 020c 	bic.w	r2, r2, #12
 8103ac8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d112      	bne.n	8103b08 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ae6:	f043 0201 	orr.w	r2, r3, #1
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	655a      	str	r2, [r3, #84]	; 0x54
 8103aee:	e00b      	b.n	8103b08 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103af4:	f043 0210 	orr.w	r2, r3, #16
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b00:	f043 0201 	orr.w	r2, r3, #1
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8103b08:	6878      	ldr	r0, [r7, #4]
 8103b0a:	f000 f96f 	bl	8103dec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	220c      	movs	r2, #12
 8103b14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103b16:	69fb      	ldr	r3, [r7, #28]
 8103b18:	f003 0320 	and.w	r3, r3, #32
 8103b1c:	2b00      	cmp	r3, #0
 8103b1e:	d004      	beq.n	8103b2a <HAL_ADC_IRQHandler+0x1b2>
 8103b20:	69bb      	ldr	r3, [r7, #24]
 8103b22:	f003 0320 	and.w	r3, r3, #32
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d10b      	bne.n	8103b42 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8103b2a:	69fb      	ldr	r3, [r7, #28]
 8103b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103b30:	2b00      	cmp	r3, #0
 8103b32:	f000 80a0 	beq.w	8103c76 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8103b36:	69bb      	ldr	r3, [r7, #24]
 8103b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	f000 809a 	beq.w	8103c76 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b46:	f003 0310 	and.w	r3, r3, #16
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d105      	bne.n	8103b5a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	4618      	mov	r0, r3
 8103b60:	f7ff feb5 	bl	81038ce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8103b64:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	4618      	mov	r0, r3
 8103b6c:	f7ff fe9c 	bl	81038a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103b70:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	681b      	ldr	r3, [r3, #0]
 8103b76:	4a11      	ldr	r2, [pc, #68]	; (8103bbc <HAL_ADC_IRQHandler+0x244>)
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d002      	beq.n	8103b82 <HAL_ADC_IRQHandler+0x20a>
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	e000      	b.n	8103b84 <HAL_ADC_IRQHandler+0x20c>
 8103b82:	4b0d      	ldr	r3, [pc, #52]	; (8103bb8 <HAL_ADC_IRQHandler+0x240>)
 8103b84:	687a      	ldr	r2, [r7, #4]
 8103b86:	6812      	ldr	r2, [r2, #0]
 8103b88:	4293      	cmp	r3, r2
 8103b8a:	d008      	beq.n	8103b9e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103b8c:	697b      	ldr	r3, [r7, #20]
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d005      	beq.n	8103b9e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8103b92:	697b      	ldr	r3, [r7, #20]
 8103b94:	2b06      	cmp	r3, #6
 8103b96:	d002      	beq.n	8103b9e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8103b98:	697b      	ldr	r3, [r7, #20]
 8103b9a:	2b07      	cmp	r3, #7
 8103b9c:	d104      	bne.n	8103ba8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	68db      	ldr	r3, [r3, #12]
 8103ba4:	623b      	str	r3, [r7, #32]
 8103ba6:	e014      	b.n	8103bd2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a03      	ldr	r2, [pc, #12]	; (8103bbc <HAL_ADC_IRQHandler+0x244>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d00a      	beq.n	8103bc8 <HAL_ADC_IRQHandler+0x250>
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	e008      	b.n	8103bca <HAL_ADC_IRQHandler+0x252>
 8103bb8:	40022000 	.word	0x40022000
 8103bbc:	40022100 	.word	0x40022100
 8103bc0:	40022300 	.word	0x40022300
 8103bc4:	58026300 	.word	0x58026300
 8103bc8:	4b84      	ldr	r3, [pc, #528]	; (8103ddc <HAL_ADC_IRQHandler+0x464>)
 8103bca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103bcc:	693b      	ldr	r3, [r7, #16]
 8103bce:	68db      	ldr	r3, [r3, #12]
 8103bd0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	d10c      	bne.n	8103bf2 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103bd8:	6a3b      	ldr	r3, [r7, #32]
 8103bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	d142      	bne.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103be2:	68bb      	ldr	r3, [r7, #8]
 8103be4:	2b00      	cmp	r3, #0
 8103be6:	d03f      	beq.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8103be8:	6a3b      	ldr	r3, [r7, #32]
 8103bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	d13a      	bne.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103bfc:	2b40      	cmp	r3, #64	; 0x40
 8103bfe:	d133      	bne.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103c00:	6a3b      	ldr	r3, [r7, #32]
 8103c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103c06:	2b00      	cmp	r3, #0
 8103c08:	d12e      	bne.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	4618      	mov	r0, r3
 8103c10:	f7ff fe9f 	bl	8103952 <LL_ADC_INJ_IsConversionOngoing>
 8103c14:	4603      	mov	r3, r0
 8103c16:	2b00      	cmp	r3, #0
 8103c18:	d11a      	bne.n	8103c50 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	685a      	ldr	r2, [r3, #4]
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	681b      	ldr	r3, [r3, #0]
 8103c24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8103c28:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103c3e:	2b00      	cmp	r3, #0
 8103c40:	d112      	bne.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c46:	f043 0201 	orr.w	r2, r3, #1
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8103c4e:	e00b      	b.n	8103c68 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c54:	f043 0210 	orr.w	r2, r3, #16
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c60:	f043 0201 	orr.w	r2, r3, #1
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8103c68:	6878      	ldr	r0, [r7, #4]
 8103c6a:	f000 f8dd 	bl	8103e28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	2260      	movs	r2, #96	; 0x60
 8103c74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8103c76:	69fb      	ldr	r3, [r7, #28]
 8103c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d011      	beq.n	8103ca4 <HAL_ADC_IRQHandler+0x32c>
 8103c80:	69bb      	ldr	r3, [r7, #24]
 8103c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103c86:	2b00      	cmp	r3, #0
 8103c88:	d00c      	beq.n	8103ca4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8103c96:	6878      	ldr	r0, [r7, #4]
 8103c98:	f000 f8b2 	bl	8103e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	2280      	movs	r2, #128	; 0x80
 8103ca2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8103ca4:	69fb      	ldr	r3, [r7, #28]
 8103ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103caa:	2b00      	cmp	r3, #0
 8103cac:	d012      	beq.n	8103cd4 <HAL_ADC_IRQHandler+0x35c>
 8103cae:	69bb      	ldr	r3, [r7, #24]
 8103cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d00d      	beq.n	8103cd4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8103cc4:	6878      	ldr	r0, [r7, #4]
 8103cc6:	f000 f8c3 	bl	8103e50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103cd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8103cd4:	69fb      	ldr	r3, [r7, #28]
 8103cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d012      	beq.n	8103d04 <HAL_ADC_IRQHandler+0x38c>
 8103cde:	69bb      	ldr	r3, [r7, #24]
 8103ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103ce4:	2b00      	cmp	r3, #0
 8103ce6:	d00d      	beq.n	8103d04 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8103cf4:	6878      	ldr	r0, [r7, #4]
 8103cf6:	f000 f8b5 	bl	8103e64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103d02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8103d04:	69fb      	ldr	r3, [r7, #28]
 8103d06:	f003 0310 	and.w	r3, r3, #16
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d043      	beq.n	8103d96 <HAL_ADC_IRQHandler+0x41e>
 8103d0e:	69bb      	ldr	r3, [r7, #24]
 8103d10:	f003 0310 	and.w	r3, r3, #16
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	d03e      	beq.n	8103d96 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d102      	bne.n	8103d26 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8103d20:	2301      	movs	r3, #1
 8103d22:	627b      	str	r3, [r7, #36]	; 0x24
 8103d24:	e021      	b.n	8103d6a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8103d26:	697b      	ldr	r3, [r7, #20]
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	d015      	beq.n	8103d58 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	4a2a      	ldr	r2, [pc, #168]	; (8103ddc <HAL_ADC_IRQHandler+0x464>)
 8103d32:	4293      	cmp	r3, r2
 8103d34:	d004      	beq.n	8103d40 <HAL_ADC_IRQHandler+0x3c8>
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	4a29      	ldr	r2, [pc, #164]	; (8103de0 <HAL_ADC_IRQHandler+0x468>)
 8103d3c:	4293      	cmp	r3, r2
 8103d3e:	d101      	bne.n	8103d44 <HAL_ADC_IRQHandler+0x3cc>
 8103d40:	4b28      	ldr	r3, [pc, #160]	; (8103de4 <HAL_ADC_IRQHandler+0x46c>)
 8103d42:	e000      	b.n	8103d46 <HAL_ADC_IRQHandler+0x3ce>
 8103d44:	4b28      	ldr	r3, [pc, #160]	; (8103de8 <HAL_ADC_IRQHandler+0x470>)
 8103d46:	4618      	mov	r0, r3
 8103d48:	f7ff fde2 	bl	8103910 <LL_ADC_GetMultiDMATransfer>
 8103d4c:	4603      	mov	r3, r0
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d00b      	beq.n	8103d6a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103d52:	2301      	movs	r3, #1
 8103d54:	627b      	str	r3, [r7, #36]	; 0x24
 8103d56:	e008      	b.n	8103d6a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	68db      	ldr	r3, [r3, #12]
 8103d5e:	f003 0303 	and.w	r3, r3, #3
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d001      	beq.n	8103d6a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103d66:	2301      	movs	r3, #1
 8103d68:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8103d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103d6c:	2b01      	cmp	r3, #1
 8103d6e:	d10e      	bne.n	8103d8e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d80:	f043 0202 	orr.w	r2, r3, #2
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103d88:	6878      	ldr	r0, [r7, #4]
 8103d8a:	f000 f843 	bl	8103e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	2210      	movs	r2, #16
 8103d94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8103d96:	69fb      	ldr	r3, [r7, #28]
 8103d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d018      	beq.n	8103dd2 <HAL_ADC_IRQHandler+0x45a>
 8103da0:	69bb      	ldr	r3, [r7, #24]
 8103da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103da6:	2b00      	cmp	r3, #0
 8103da8:	d013      	beq.n	8103dd2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103dae:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103dba:	f043 0208 	orr.w	r2, r3, #8
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103dca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103dcc:	6878      	ldr	r0, [r7, #4]
 8103dce:	f000 f835 	bl	8103e3c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8103dd2:	bf00      	nop
 8103dd4:	3728      	adds	r7, #40	; 0x28
 8103dd6:	46bd      	mov	sp, r7
 8103dd8:	bd80      	pop	{r7, pc}
 8103dda:	bf00      	nop
 8103ddc:	40022000 	.word	0x40022000
 8103de0:	40022100 	.word	0x40022100
 8103de4:	40022300 	.word	0x40022300
 8103de8:	58026300 	.word	0x58026300

08103dec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103dec:	b480      	push	{r7}
 8103dee:	b083      	sub	sp, #12
 8103df0:	af00      	add	r7, sp, #0
 8103df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8103df4:	bf00      	nop
 8103df6:	370c      	adds	r7, #12
 8103df8:	46bd      	mov	sp, r7
 8103dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dfe:	4770      	bx	lr

08103e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103e00:	b480      	push	{r7}
 8103e02:	b083      	sub	sp, #12
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8103e08:	bf00      	nop
 8103e0a:	370c      	adds	r7, #12
 8103e0c:	46bd      	mov	sp, r7
 8103e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e12:	4770      	bx	lr

08103e14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8103e14:	b480      	push	{r7}
 8103e16:	b083      	sub	sp, #12
 8103e18:	af00      	add	r7, sp, #0
 8103e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8103e1c:	bf00      	nop
 8103e1e:	370c      	adds	r7, #12
 8103e20:	46bd      	mov	sp, r7
 8103e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e26:	4770      	bx	lr

08103e28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103e28:	b480      	push	{r7}
 8103e2a:	b083      	sub	sp, #12
 8103e2c:	af00      	add	r7, sp, #0
 8103e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103e30:	bf00      	nop
 8103e32:	370c      	adds	r7, #12
 8103e34:	46bd      	mov	sp, r7
 8103e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e3a:	4770      	bx	lr

08103e3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103e3c:	b480      	push	{r7}
 8103e3e:	b083      	sub	sp, #12
 8103e40:	af00      	add	r7, sp, #0
 8103e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103e44:	bf00      	nop
 8103e46:	370c      	adds	r7, #12
 8103e48:	46bd      	mov	sp, r7
 8103e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e4e:	4770      	bx	lr

08103e50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103e50:	b480      	push	{r7}
 8103e52:	b083      	sub	sp, #12
 8103e54:	af00      	add	r7, sp, #0
 8103e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103e58:	bf00      	nop
 8103e5a:	370c      	adds	r7, #12
 8103e5c:	46bd      	mov	sp, r7
 8103e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e62:	4770      	bx	lr

08103e64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103e64:	b480      	push	{r7}
 8103e66:	b083      	sub	sp, #12
 8103e68:	af00      	add	r7, sp, #0
 8103e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103e6c:	bf00      	nop
 8103e6e:	370c      	adds	r7, #12
 8103e70:	46bd      	mov	sp, r7
 8103e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e76:	4770      	bx	lr

08103e78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103e78:	b480      	push	{r7}
 8103e7a:	b083      	sub	sp, #12
 8103e7c:	af00      	add	r7, sp, #0
 8103e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103e80:	bf00      	nop
 8103e82:	370c      	adds	r7, #12
 8103e84:	46bd      	mov	sp, r7
 8103e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e8a:	4770      	bx	lr

08103e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103e8c:	b480      	push	{r7}
 8103e8e:	b085      	sub	sp, #20
 8103e90:	af00      	add	r7, sp, #0
 8103e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	f003 0307 	and.w	r3, r3, #7
 8103e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103e9c:	4b0c      	ldr	r3, [pc, #48]	; (8103ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8103e9e:	68db      	ldr	r3, [r3, #12]
 8103ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103ea2:	68ba      	ldr	r2, [r7, #8]
 8103ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103ea8:	4013      	ands	r3, r2
 8103eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103eb0:	68bb      	ldr	r3, [r7, #8]
 8103eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103ebe:	4a04      	ldr	r2, [pc, #16]	; (8103ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8103ec0:	68bb      	ldr	r3, [r7, #8]
 8103ec2:	60d3      	str	r3, [r2, #12]
}
 8103ec4:	bf00      	nop
 8103ec6:	3714      	adds	r7, #20
 8103ec8:	46bd      	mov	sp, r7
 8103eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ece:	4770      	bx	lr
 8103ed0:	e000ed00 	.word	0xe000ed00

08103ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103ed4:	b480      	push	{r7}
 8103ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103ed8:	4b04      	ldr	r3, [pc, #16]	; (8103eec <__NVIC_GetPriorityGrouping+0x18>)
 8103eda:	68db      	ldr	r3, [r3, #12]
 8103edc:	0a1b      	lsrs	r3, r3, #8
 8103ede:	f003 0307 	and.w	r3, r3, #7
}
 8103ee2:	4618      	mov	r0, r3
 8103ee4:	46bd      	mov	sp, r7
 8103ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eea:	4770      	bx	lr
 8103eec:	e000ed00 	.word	0xe000ed00

08103ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103ef0:	b480      	push	{r7}
 8103ef2:	b083      	sub	sp, #12
 8103ef4:	af00      	add	r7, sp, #0
 8103ef6:	4603      	mov	r3, r0
 8103ef8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103efe:	2b00      	cmp	r3, #0
 8103f00:	db0b      	blt.n	8103f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103f02:	88fb      	ldrh	r3, [r7, #6]
 8103f04:	f003 021f 	and.w	r2, r3, #31
 8103f08:	4907      	ldr	r1, [pc, #28]	; (8103f28 <__NVIC_EnableIRQ+0x38>)
 8103f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f0e:	095b      	lsrs	r3, r3, #5
 8103f10:	2001      	movs	r0, #1
 8103f12:	fa00 f202 	lsl.w	r2, r0, r2
 8103f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103f1a:	bf00      	nop
 8103f1c:	370c      	adds	r7, #12
 8103f1e:	46bd      	mov	sp, r7
 8103f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f24:	4770      	bx	lr
 8103f26:	bf00      	nop
 8103f28:	e000e100 	.word	0xe000e100

08103f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103f2c:	b480      	push	{r7}
 8103f2e:	b083      	sub	sp, #12
 8103f30:	af00      	add	r7, sp, #0
 8103f32:	4603      	mov	r3, r0
 8103f34:	6039      	str	r1, [r7, #0]
 8103f36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	db0a      	blt.n	8103f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103f40:	683b      	ldr	r3, [r7, #0]
 8103f42:	b2da      	uxtb	r2, r3
 8103f44:	490c      	ldr	r1, [pc, #48]	; (8103f78 <__NVIC_SetPriority+0x4c>)
 8103f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f4a:	0112      	lsls	r2, r2, #4
 8103f4c:	b2d2      	uxtb	r2, r2
 8103f4e:	440b      	add	r3, r1
 8103f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103f54:	e00a      	b.n	8103f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103f56:	683b      	ldr	r3, [r7, #0]
 8103f58:	b2da      	uxtb	r2, r3
 8103f5a:	4908      	ldr	r1, [pc, #32]	; (8103f7c <__NVIC_SetPriority+0x50>)
 8103f5c:	88fb      	ldrh	r3, [r7, #6]
 8103f5e:	f003 030f 	and.w	r3, r3, #15
 8103f62:	3b04      	subs	r3, #4
 8103f64:	0112      	lsls	r2, r2, #4
 8103f66:	b2d2      	uxtb	r2, r2
 8103f68:	440b      	add	r3, r1
 8103f6a:	761a      	strb	r2, [r3, #24]
}
 8103f6c:	bf00      	nop
 8103f6e:	370c      	adds	r7, #12
 8103f70:	46bd      	mov	sp, r7
 8103f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f76:	4770      	bx	lr
 8103f78:	e000e100 	.word	0xe000e100
 8103f7c:	e000ed00 	.word	0xe000ed00

08103f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103f80:	b480      	push	{r7}
 8103f82:	b089      	sub	sp, #36	; 0x24
 8103f84:	af00      	add	r7, sp, #0
 8103f86:	60f8      	str	r0, [r7, #12]
 8103f88:	60b9      	str	r1, [r7, #8]
 8103f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	f003 0307 	and.w	r3, r3, #7
 8103f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103f94:	69fb      	ldr	r3, [r7, #28]
 8103f96:	f1c3 0307 	rsb	r3, r3, #7
 8103f9a:	2b04      	cmp	r3, #4
 8103f9c:	bf28      	it	cs
 8103f9e:	2304      	movcs	r3, #4
 8103fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103fa2:	69fb      	ldr	r3, [r7, #28]
 8103fa4:	3304      	adds	r3, #4
 8103fa6:	2b06      	cmp	r3, #6
 8103fa8:	d902      	bls.n	8103fb0 <NVIC_EncodePriority+0x30>
 8103faa:	69fb      	ldr	r3, [r7, #28]
 8103fac:	3b03      	subs	r3, #3
 8103fae:	e000      	b.n	8103fb2 <NVIC_EncodePriority+0x32>
 8103fb0:	2300      	movs	r3, #0
 8103fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8103fb8:	69bb      	ldr	r3, [r7, #24]
 8103fba:	fa02 f303 	lsl.w	r3, r2, r3
 8103fbe:	43da      	mvns	r2, r3
 8103fc0:	68bb      	ldr	r3, [r7, #8]
 8103fc2:	401a      	ands	r2, r3
 8103fc4:	697b      	ldr	r3, [r7, #20]
 8103fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8103fcc:	697b      	ldr	r3, [r7, #20]
 8103fce:	fa01 f303 	lsl.w	r3, r1, r3
 8103fd2:	43d9      	mvns	r1, r3
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103fd8:	4313      	orrs	r3, r2
         );
}
 8103fda:	4618      	mov	r0, r3
 8103fdc:	3724      	adds	r7, #36	; 0x24
 8103fde:	46bd      	mov	sp, r7
 8103fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fe4:	4770      	bx	lr
	...

08103fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103fe8:	b580      	push	{r7, lr}
 8103fea:	b082      	sub	sp, #8
 8103fec:	af00      	add	r7, sp, #0
 8103fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	3b01      	subs	r3, #1
 8103ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103ff8:	d301      	bcc.n	8103ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103ffa:	2301      	movs	r3, #1
 8103ffc:	e00f      	b.n	810401e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103ffe:	4a0a      	ldr	r2, [pc, #40]	; (8104028 <SysTick_Config+0x40>)
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	3b01      	subs	r3, #1
 8104004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104006:	210f      	movs	r1, #15
 8104008:	f04f 30ff 	mov.w	r0, #4294967295
 810400c:	f7ff ff8e 	bl	8103f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104010:	4b05      	ldr	r3, [pc, #20]	; (8104028 <SysTick_Config+0x40>)
 8104012:	2200      	movs	r2, #0
 8104014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104016:	4b04      	ldr	r3, [pc, #16]	; (8104028 <SysTick_Config+0x40>)
 8104018:	2207      	movs	r2, #7
 810401a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810401c:	2300      	movs	r3, #0
}
 810401e:	4618      	mov	r0, r3
 8104020:	3708      	adds	r7, #8
 8104022:	46bd      	mov	sp, r7
 8104024:	bd80      	pop	{r7, pc}
 8104026:	bf00      	nop
 8104028:	e000e010 	.word	0xe000e010

0810402c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810402c:	b580      	push	{r7, lr}
 810402e:	b082      	sub	sp, #8
 8104030:	af00      	add	r7, sp, #0
 8104032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104034:	6878      	ldr	r0, [r7, #4]
 8104036:	f7ff ff29 	bl	8103e8c <__NVIC_SetPriorityGrouping>
}
 810403a:	bf00      	nop
 810403c:	3708      	adds	r7, #8
 810403e:	46bd      	mov	sp, r7
 8104040:	bd80      	pop	{r7, pc}

08104042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104042:	b580      	push	{r7, lr}
 8104044:	b086      	sub	sp, #24
 8104046:	af00      	add	r7, sp, #0
 8104048:	4603      	mov	r3, r0
 810404a:	60b9      	str	r1, [r7, #8]
 810404c:	607a      	str	r2, [r7, #4]
 810404e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104050:	f7ff ff40 	bl	8103ed4 <__NVIC_GetPriorityGrouping>
 8104054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104056:	687a      	ldr	r2, [r7, #4]
 8104058:	68b9      	ldr	r1, [r7, #8]
 810405a:	6978      	ldr	r0, [r7, #20]
 810405c:	f7ff ff90 	bl	8103f80 <NVIC_EncodePriority>
 8104060:	4602      	mov	r2, r0
 8104062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104066:	4611      	mov	r1, r2
 8104068:	4618      	mov	r0, r3
 810406a:	f7ff ff5f 	bl	8103f2c <__NVIC_SetPriority>
}
 810406e:	bf00      	nop
 8104070:	3718      	adds	r7, #24
 8104072:	46bd      	mov	sp, r7
 8104074:	bd80      	pop	{r7, pc}

08104076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104076:	b580      	push	{r7, lr}
 8104078:	b082      	sub	sp, #8
 810407a:	af00      	add	r7, sp, #0
 810407c:	4603      	mov	r3, r0
 810407e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104084:	4618      	mov	r0, r3
 8104086:	f7ff ff33 	bl	8103ef0 <__NVIC_EnableIRQ>
}
 810408a:	bf00      	nop
 810408c:	3708      	adds	r7, #8
 810408e:	46bd      	mov	sp, r7
 8104090:	bd80      	pop	{r7, pc}

08104092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104092:	b580      	push	{r7, lr}
 8104094:	b082      	sub	sp, #8
 8104096:	af00      	add	r7, sp, #0
 8104098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810409a:	6878      	ldr	r0, [r7, #4]
 810409c:	f7ff ffa4 	bl	8103fe8 <SysTick_Config>
 81040a0:	4603      	mov	r3, r0
}
 81040a2:	4618      	mov	r0, r3
 81040a4:	3708      	adds	r7, #8
 81040a6:	46bd      	mov	sp, r7
 81040a8:	bd80      	pop	{r7, pc}
	...

081040ac <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81040ac:	b480      	push	{r7}
 81040ae:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81040b0:	4b07      	ldr	r3, [pc, #28]	; (81040d0 <HAL_GetCurrentCPUID+0x24>)
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	091b      	lsrs	r3, r3, #4
 81040b6:	f003 030f 	and.w	r3, r3, #15
 81040ba:	2b07      	cmp	r3, #7
 81040bc:	d101      	bne.n	81040c2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81040be:	2303      	movs	r3, #3
 81040c0:	e000      	b.n	81040c4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81040c2:	2301      	movs	r3, #1
  }
}
 81040c4:	4618      	mov	r0, r3
 81040c6:	46bd      	mov	sp, r7
 81040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040cc:	4770      	bx	lr
 81040ce:	bf00      	nop
 81040d0:	e000ed00 	.word	0xe000ed00

081040d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81040d4:	b580      	push	{r7, lr}
 81040d6:	b086      	sub	sp, #24
 81040d8:	af00      	add	r7, sp, #0
 81040da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81040dc:	f7ff fbb4 	bl	8103848 <HAL_GetTick>
 81040e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	2b00      	cmp	r3, #0
 81040e6:	d101      	bne.n	81040ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81040e8:	2301      	movs	r3, #1
 81040ea:	e314      	b.n	8104716 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a66      	ldr	r2, [pc, #408]	; (810428c <HAL_DMA_Init+0x1b8>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d04a      	beq.n	810418c <HAL_DMA_Init+0xb8>
 81040f6:	687b      	ldr	r3, [r7, #4]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a65      	ldr	r2, [pc, #404]	; (8104290 <HAL_DMA_Init+0x1bc>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d045      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a63      	ldr	r2, [pc, #396]	; (8104294 <HAL_DMA_Init+0x1c0>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d040      	beq.n	810418c <HAL_DMA_Init+0xb8>
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a62      	ldr	r2, [pc, #392]	; (8104298 <HAL_DMA_Init+0x1c4>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d03b      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a60      	ldr	r2, [pc, #384]	; (810429c <HAL_DMA_Init+0x1c8>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d036      	beq.n	810418c <HAL_DMA_Init+0xb8>
 810411e:	687b      	ldr	r3, [r7, #4]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a5f      	ldr	r2, [pc, #380]	; (81042a0 <HAL_DMA_Init+0x1cc>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d031      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a5d      	ldr	r2, [pc, #372]	; (81042a4 <HAL_DMA_Init+0x1d0>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d02c      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a5c      	ldr	r2, [pc, #368]	; (81042a8 <HAL_DMA_Init+0x1d4>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d027      	beq.n	810418c <HAL_DMA_Init+0xb8>
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a5a      	ldr	r2, [pc, #360]	; (81042ac <HAL_DMA_Init+0x1d8>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d022      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	4a59      	ldr	r2, [pc, #356]	; (81042b0 <HAL_DMA_Init+0x1dc>)
 810414c:	4293      	cmp	r3, r2
 810414e:	d01d      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	4a57      	ldr	r2, [pc, #348]	; (81042b4 <HAL_DMA_Init+0x1e0>)
 8104156:	4293      	cmp	r3, r2
 8104158:	d018      	beq.n	810418c <HAL_DMA_Init+0xb8>
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	681b      	ldr	r3, [r3, #0]
 810415e:	4a56      	ldr	r2, [pc, #344]	; (81042b8 <HAL_DMA_Init+0x1e4>)
 8104160:	4293      	cmp	r3, r2
 8104162:	d013      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104164:	687b      	ldr	r3, [r7, #4]
 8104166:	681b      	ldr	r3, [r3, #0]
 8104168:	4a54      	ldr	r2, [pc, #336]	; (81042bc <HAL_DMA_Init+0x1e8>)
 810416a:	4293      	cmp	r3, r2
 810416c:	d00e      	beq.n	810418c <HAL_DMA_Init+0xb8>
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	4a53      	ldr	r2, [pc, #332]	; (81042c0 <HAL_DMA_Init+0x1ec>)
 8104174:	4293      	cmp	r3, r2
 8104176:	d009      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	4a51      	ldr	r2, [pc, #324]	; (81042c4 <HAL_DMA_Init+0x1f0>)
 810417e:	4293      	cmp	r3, r2
 8104180:	d004      	beq.n	810418c <HAL_DMA_Init+0xb8>
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	4a50      	ldr	r2, [pc, #320]	; (81042c8 <HAL_DMA_Init+0x1f4>)
 8104188:	4293      	cmp	r3, r2
 810418a:	d101      	bne.n	8104190 <HAL_DMA_Init+0xbc>
 810418c:	2301      	movs	r3, #1
 810418e:	e000      	b.n	8104192 <HAL_DMA_Init+0xbe>
 8104190:	2300      	movs	r3, #0
 8104192:	2b00      	cmp	r3, #0
 8104194:	f000 813b 	beq.w	810440e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	2200      	movs	r2, #0
 810419c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	2202      	movs	r2, #2
 81041a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	4a37      	ldr	r2, [pc, #220]	; (810428c <HAL_DMA_Init+0x1b8>)
 81041ae:	4293      	cmp	r3, r2
 81041b0:	d04a      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	4a36      	ldr	r2, [pc, #216]	; (8104290 <HAL_DMA_Init+0x1bc>)
 81041b8:	4293      	cmp	r3, r2
 81041ba:	d045      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	4a34      	ldr	r2, [pc, #208]	; (8104294 <HAL_DMA_Init+0x1c0>)
 81041c2:	4293      	cmp	r3, r2
 81041c4:	d040      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	4a33      	ldr	r2, [pc, #204]	; (8104298 <HAL_DMA_Init+0x1c4>)
 81041cc:	4293      	cmp	r3, r2
 81041ce:	d03b      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	4a31      	ldr	r2, [pc, #196]	; (810429c <HAL_DMA_Init+0x1c8>)
 81041d6:	4293      	cmp	r3, r2
 81041d8:	d036      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	4a30      	ldr	r2, [pc, #192]	; (81042a0 <HAL_DMA_Init+0x1cc>)
 81041e0:	4293      	cmp	r3, r2
 81041e2:	d031      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	4a2e      	ldr	r2, [pc, #184]	; (81042a4 <HAL_DMA_Init+0x1d0>)
 81041ea:	4293      	cmp	r3, r2
 81041ec:	d02c      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	681b      	ldr	r3, [r3, #0]
 81041f2:	4a2d      	ldr	r2, [pc, #180]	; (81042a8 <HAL_DMA_Init+0x1d4>)
 81041f4:	4293      	cmp	r3, r2
 81041f6:	d027      	beq.n	8104248 <HAL_DMA_Init+0x174>
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	4a2b      	ldr	r2, [pc, #172]	; (81042ac <HAL_DMA_Init+0x1d8>)
 81041fe:	4293      	cmp	r3, r2
 8104200:	d022      	beq.n	8104248 <HAL_DMA_Init+0x174>
 8104202:	687b      	ldr	r3, [r7, #4]
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	4a2a      	ldr	r2, [pc, #168]	; (81042b0 <HAL_DMA_Init+0x1dc>)
 8104208:	4293      	cmp	r3, r2
 810420a:	d01d      	beq.n	8104248 <HAL_DMA_Init+0x174>
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	4a28      	ldr	r2, [pc, #160]	; (81042b4 <HAL_DMA_Init+0x1e0>)
 8104212:	4293      	cmp	r3, r2
 8104214:	d018      	beq.n	8104248 <HAL_DMA_Init+0x174>
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	4a27      	ldr	r2, [pc, #156]	; (81042b8 <HAL_DMA_Init+0x1e4>)
 810421c:	4293      	cmp	r3, r2
 810421e:	d013      	beq.n	8104248 <HAL_DMA_Init+0x174>
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	4a25      	ldr	r2, [pc, #148]	; (81042bc <HAL_DMA_Init+0x1e8>)
 8104226:	4293      	cmp	r3, r2
 8104228:	d00e      	beq.n	8104248 <HAL_DMA_Init+0x174>
 810422a:	687b      	ldr	r3, [r7, #4]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	4a24      	ldr	r2, [pc, #144]	; (81042c0 <HAL_DMA_Init+0x1ec>)
 8104230:	4293      	cmp	r3, r2
 8104232:	d009      	beq.n	8104248 <HAL_DMA_Init+0x174>
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	4a22      	ldr	r2, [pc, #136]	; (81042c4 <HAL_DMA_Init+0x1f0>)
 810423a:	4293      	cmp	r3, r2
 810423c:	d004      	beq.n	8104248 <HAL_DMA_Init+0x174>
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	681b      	ldr	r3, [r3, #0]
 8104242:	4a21      	ldr	r2, [pc, #132]	; (81042c8 <HAL_DMA_Init+0x1f4>)
 8104244:	4293      	cmp	r3, r2
 8104246:	d108      	bne.n	810425a <HAL_DMA_Init+0x186>
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	681a      	ldr	r2, [r3, #0]
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	f022 0201 	bic.w	r2, r2, #1
 8104256:	601a      	str	r2, [r3, #0]
 8104258:	e007      	b.n	810426a <HAL_DMA_Init+0x196>
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	681a      	ldr	r2, [r3, #0]
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	f022 0201 	bic.w	r2, r2, #1
 8104268:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810426a:	e02f      	b.n	81042cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810426c:	f7ff faec 	bl	8103848 <HAL_GetTick>
 8104270:	4602      	mov	r2, r0
 8104272:	693b      	ldr	r3, [r7, #16]
 8104274:	1ad3      	subs	r3, r2, r3
 8104276:	2b05      	cmp	r3, #5
 8104278:	d928      	bls.n	81042cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	2220      	movs	r2, #32
 810427e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	2203      	movs	r2, #3
 8104284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104288:	2301      	movs	r3, #1
 810428a:	e244      	b.n	8104716 <HAL_DMA_Init+0x642>
 810428c:	40020010 	.word	0x40020010
 8104290:	40020028 	.word	0x40020028
 8104294:	40020040 	.word	0x40020040
 8104298:	40020058 	.word	0x40020058
 810429c:	40020070 	.word	0x40020070
 81042a0:	40020088 	.word	0x40020088
 81042a4:	400200a0 	.word	0x400200a0
 81042a8:	400200b8 	.word	0x400200b8
 81042ac:	40020410 	.word	0x40020410
 81042b0:	40020428 	.word	0x40020428
 81042b4:	40020440 	.word	0x40020440
 81042b8:	40020458 	.word	0x40020458
 81042bc:	40020470 	.word	0x40020470
 81042c0:	40020488 	.word	0x40020488
 81042c4:	400204a0 	.word	0x400204a0
 81042c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	f003 0301 	and.w	r3, r3, #1
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d1c8      	bne.n	810426c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81042e2:	697a      	ldr	r2, [r7, #20]
 81042e4:	4b84      	ldr	r3, [pc, #528]	; (81044f8 <HAL_DMA_Init+0x424>)
 81042e6:	4013      	ands	r3, r2
 81042e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81042f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	691b      	ldr	r3, [r3, #16]
 81042f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81042fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	699b      	ldr	r3, [r3, #24]
 8104304:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810430a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	6a1b      	ldr	r3, [r3, #32]
 8104310:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8104312:	697a      	ldr	r2, [r7, #20]
 8104314:	4313      	orrs	r3, r2
 8104316:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810431c:	2b04      	cmp	r3, #4
 810431e:	d107      	bne.n	8104330 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104328:	4313      	orrs	r3, r2
 810432a:	697a      	ldr	r2, [r7, #20]
 810432c:	4313      	orrs	r3, r2
 810432e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104330:	4b72      	ldr	r3, [pc, #456]	; (81044fc <HAL_DMA_Init+0x428>)
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	0c1b      	lsrs	r3, r3, #16
 8104336:	041b      	lsls	r3, r3, #16
 8104338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810433c:	d328      	bcc.n	8104390 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	685b      	ldr	r3, [r3, #4]
 8104342:	2b28      	cmp	r3, #40	; 0x28
 8104344:	d903      	bls.n	810434e <HAL_DMA_Init+0x27a>
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	685b      	ldr	r3, [r3, #4]
 810434a:	2b2e      	cmp	r3, #46	; 0x2e
 810434c:	d917      	bls.n	810437e <HAL_DMA_Init+0x2aa>
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	685b      	ldr	r3, [r3, #4]
 8104352:	2b3e      	cmp	r3, #62	; 0x3e
 8104354:	d903      	bls.n	810435e <HAL_DMA_Init+0x28a>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	685b      	ldr	r3, [r3, #4]
 810435a:	2b42      	cmp	r3, #66	; 0x42
 810435c:	d90f      	bls.n	810437e <HAL_DMA_Init+0x2aa>
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	685b      	ldr	r3, [r3, #4]
 8104362:	2b46      	cmp	r3, #70	; 0x46
 8104364:	d903      	bls.n	810436e <HAL_DMA_Init+0x29a>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	685b      	ldr	r3, [r3, #4]
 810436a:	2b48      	cmp	r3, #72	; 0x48
 810436c:	d907      	bls.n	810437e <HAL_DMA_Init+0x2aa>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	685b      	ldr	r3, [r3, #4]
 8104372:	2b4e      	cmp	r3, #78	; 0x4e
 8104374:	d905      	bls.n	8104382 <HAL_DMA_Init+0x2ae>
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	685b      	ldr	r3, [r3, #4]
 810437a:	2b52      	cmp	r3, #82	; 0x52
 810437c:	d801      	bhi.n	8104382 <HAL_DMA_Init+0x2ae>
 810437e:	2301      	movs	r3, #1
 8104380:	e000      	b.n	8104384 <HAL_DMA_Init+0x2b0>
 8104382:	2300      	movs	r3, #0
 8104384:	2b00      	cmp	r3, #0
 8104386:	d003      	beq.n	8104390 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8104388:	697b      	ldr	r3, [r7, #20]
 810438a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810438e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	697a      	ldr	r2, [r7, #20]
 8104396:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	695b      	ldr	r3, [r3, #20]
 810439e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81043a0:	697b      	ldr	r3, [r7, #20]
 81043a2:	f023 0307 	bic.w	r3, r3, #7
 81043a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81043ac:	697a      	ldr	r2, [r7, #20]
 81043ae:	4313      	orrs	r3, r2
 81043b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81043b6:	2b04      	cmp	r3, #4
 81043b8:	d117      	bne.n	81043ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043be:	697a      	ldr	r2, [r7, #20]
 81043c0:	4313      	orrs	r3, r2
 81043c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043c8:	2b00      	cmp	r3, #0
 81043ca:	d00e      	beq.n	81043ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81043cc:	6878      	ldr	r0, [r7, #4]
 81043ce:	f002 fb49 	bl	8106a64 <DMA_CheckFifoParam>
 81043d2:	4603      	mov	r3, r0
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d008      	beq.n	81043ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	2240      	movs	r2, #64	; 0x40
 81043dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	2201      	movs	r2, #1
 81043e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81043e6:	2301      	movs	r3, #1
 81043e8:	e195      	b.n	8104716 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	697a      	ldr	r2, [r7, #20]
 81043f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81043f2:	6878      	ldr	r0, [r7, #4]
 81043f4:	f002 fa84 	bl	8106900 <DMA_CalcBaseAndBitshift>
 81043f8:	4603      	mov	r3, r0
 81043fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104400:	f003 031f 	and.w	r3, r3, #31
 8104404:	223f      	movs	r2, #63	; 0x3f
 8104406:	409a      	lsls	r2, r3
 8104408:	68bb      	ldr	r3, [r7, #8]
 810440a:	609a      	str	r2, [r3, #8]
 810440c:	e0cb      	b.n	81045a6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	4a3b      	ldr	r2, [pc, #236]	; (8104500 <HAL_DMA_Init+0x42c>)
 8104414:	4293      	cmp	r3, r2
 8104416:	d022      	beq.n	810445e <HAL_DMA_Init+0x38a>
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	4a39      	ldr	r2, [pc, #228]	; (8104504 <HAL_DMA_Init+0x430>)
 810441e:	4293      	cmp	r3, r2
 8104420:	d01d      	beq.n	810445e <HAL_DMA_Init+0x38a>
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	4a38      	ldr	r2, [pc, #224]	; (8104508 <HAL_DMA_Init+0x434>)
 8104428:	4293      	cmp	r3, r2
 810442a:	d018      	beq.n	810445e <HAL_DMA_Init+0x38a>
 810442c:	687b      	ldr	r3, [r7, #4]
 810442e:	681b      	ldr	r3, [r3, #0]
 8104430:	4a36      	ldr	r2, [pc, #216]	; (810450c <HAL_DMA_Init+0x438>)
 8104432:	4293      	cmp	r3, r2
 8104434:	d013      	beq.n	810445e <HAL_DMA_Init+0x38a>
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	4a35      	ldr	r2, [pc, #212]	; (8104510 <HAL_DMA_Init+0x43c>)
 810443c:	4293      	cmp	r3, r2
 810443e:	d00e      	beq.n	810445e <HAL_DMA_Init+0x38a>
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	4a33      	ldr	r2, [pc, #204]	; (8104514 <HAL_DMA_Init+0x440>)
 8104446:	4293      	cmp	r3, r2
 8104448:	d009      	beq.n	810445e <HAL_DMA_Init+0x38a>
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	4a32      	ldr	r2, [pc, #200]	; (8104518 <HAL_DMA_Init+0x444>)
 8104450:	4293      	cmp	r3, r2
 8104452:	d004      	beq.n	810445e <HAL_DMA_Init+0x38a>
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	681b      	ldr	r3, [r3, #0]
 8104458:	4a30      	ldr	r2, [pc, #192]	; (810451c <HAL_DMA_Init+0x448>)
 810445a:	4293      	cmp	r3, r2
 810445c:	d101      	bne.n	8104462 <HAL_DMA_Init+0x38e>
 810445e:	2301      	movs	r3, #1
 8104460:	e000      	b.n	8104464 <HAL_DMA_Init+0x390>
 8104462:	2300      	movs	r3, #0
 8104464:	2b00      	cmp	r3, #0
 8104466:	f000 8095 	beq.w	8104594 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a24      	ldr	r2, [pc, #144]	; (8104500 <HAL_DMA_Init+0x42c>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d021      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a22      	ldr	r2, [pc, #136]	; (8104504 <HAL_DMA_Init+0x430>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d01c      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a21      	ldr	r2, [pc, #132]	; (8104508 <HAL_DMA_Init+0x434>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d017      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	4a1f      	ldr	r2, [pc, #124]	; (810450c <HAL_DMA_Init+0x438>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d012      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	4a1e      	ldr	r2, [pc, #120]	; (8104510 <HAL_DMA_Init+0x43c>)
 8104498:	4293      	cmp	r3, r2
 810449a:	d00d      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	4a1c      	ldr	r2, [pc, #112]	; (8104514 <HAL_DMA_Init+0x440>)
 81044a2:	4293      	cmp	r3, r2
 81044a4:	d008      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	4a1b      	ldr	r2, [pc, #108]	; (8104518 <HAL_DMA_Init+0x444>)
 81044ac:	4293      	cmp	r3, r2
 81044ae:	d003      	beq.n	81044b8 <HAL_DMA_Init+0x3e4>
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	4a19      	ldr	r2, [pc, #100]	; (810451c <HAL_DMA_Init+0x448>)
 81044b6:	4293      	cmp	r3, r2
 81044b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	2200      	movs	r2, #0
 81044be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	2202      	movs	r2, #2
 81044c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81044d2:	697b      	ldr	r3, [r7, #20]
 81044d4:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 81044d8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 81044dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	689b      	ldr	r3, [r3, #8]
 81044e2:	2b40      	cmp	r3, #64	; 0x40
 81044e4:	d01c      	beq.n	8104520 <HAL_DMA_Init+0x44c>
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	689b      	ldr	r3, [r3, #8]
 81044ea:	2b80      	cmp	r3, #128	; 0x80
 81044ec:	d102      	bne.n	81044f4 <HAL_DMA_Init+0x420>
 81044ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81044f2:	e016      	b.n	8104522 <HAL_DMA_Init+0x44e>
 81044f4:	2300      	movs	r3, #0
 81044f6:	e014      	b.n	8104522 <HAL_DMA_Init+0x44e>
 81044f8:	fe10803f 	.word	0xfe10803f
 81044fc:	5c001000 	.word	0x5c001000
 8104500:	58025408 	.word	0x58025408
 8104504:	5802541c 	.word	0x5802541c
 8104508:	58025430 	.word	0x58025430
 810450c:	58025444 	.word	0x58025444
 8104510:	58025458 	.word	0x58025458
 8104514:	5802546c 	.word	0x5802546c
 8104518:	58025480 	.word	0x58025480
 810451c:	58025494 	.word	0x58025494
 8104520:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104522:	687a      	ldr	r2, [r7, #4]
 8104524:	68d2      	ldr	r2, [r2, #12]
 8104526:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104528:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	691b      	ldr	r3, [r3, #16]
 810452e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	695b      	ldr	r3, [r3, #20]
 8104536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	699b      	ldr	r3, [r3, #24]
 810453e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	69db      	ldr	r3, [r3, #28]
 8104546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	6a1b      	ldr	r3, [r3, #32]
 810454e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104550:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104552:	697a      	ldr	r2, [r7, #20]
 8104554:	4313      	orrs	r3, r2
 8104556:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	697a      	ldr	r2, [r7, #20]
 810455e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	461a      	mov	r2, r3
 8104566:	4b6e      	ldr	r3, [pc, #440]	; (8104720 <HAL_DMA_Init+0x64c>)
 8104568:	4413      	add	r3, r2
 810456a:	4a6e      	ldr	r2, [pc, #440]	; (8104724 <HAL_DMA_Init+0x650>)
 810456c:	fba2 2303 	umull	r2, r3, r2, r3
 8104570:	091b      	lsrs	r3, r3, #4
 8104572:	009a      	lsls	r2, r3, #2
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104578:	6878      	ldr	r0, [r7, #4]
 810457a:	f002 f9c1 	bl	8106900 <DMA_CalcBaseAndBitshift>
 810457e:	4603      	mov	r3, r0
 8104580:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104586:	f003 031f 	and.w	r3, r3, #31
 810458a:	2201      	movs	r2, #1
 810458c:	409a      	lsls	r2, r3
 810458e:	68fb      	ldr	r3, [r7, #12]
 8104590:	605a      	str	r2, [r3, #4]
 8104592:	e008      	b.n	81045a6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	2240      	movs	r2, #64	; 0x40
 8104598:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	2203      	movs	r2, #3
 810459e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81045a2:	2301      	movs	r3, #1
 81045a4:	e0b7      	b.n	8104716 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	4a5f      	ldr	r2, [pc, #380]	; (8104728 <HAL_DMA_Init+0x654>)
 81045ac:	4293      	cmp	r3, r2
 81045ae:	d072      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	4a5d      	ldr	r2, [pc, #372]	; (810472c <HAL_DMA_Init+0x658>)
 81045b6:	4293      	cmp	r3, r2
 81045b8:	d06d      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	681b      	ldr	r3, [r3, #0]
 81045be:	4a5c      	ldr	r2, [pc, #368]	; (8104730 <HAL_DMA_Init+0x65c>)
 81045c0:	4293      	cmp	r3, r2
 81045c2:	d068      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	4a5a      	ldr	r2, [pc, #360]	; (8104734 <HAL_DMA_Init+0x660>)
 81045ca:	4293      	cmp	r3, r2
 81045cc:	d063      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	4a59      	ldr	r2, [pc, #356]	; (8104738 <HAL_DMA_Init+0x664>)
 81045d4:	4293      	cmp	r3, r2
 81045d6:	d05e      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	4a57      	ldr	r2, [pc, #348]	; (810473c <HAL_DMA_Init+0x668>)
 81045de:	4293      	cmp	r3, r2
 81045e0:	d059      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	4a56      	ldr	r2, [pc, #344]	; (8104740 <HAL_DMA_Init+0x66c>)
 81045e8:	4293      	cmp	r3, r2
 81045ea:	d054      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	4a54      	ldr	r2, [pc, #336]	; (8104744 <HAL_DMA_Init+0x670>)
 81045f2:	4293      	cmp	r3, r2
 81045f4:	d04f      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	4a53      	ldr	r2, [pc, #332]	; (8104748 <HAL_DMA_Init+0x674>)
 81045fc:	4293      	cmp	r3, r2
 81045fe:	d04a      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	4a51      	ldr	r2, [pc, #324]	; (810474c <HAL_DMA_Init+0x678>)
 8104606:	4293      	cmp	r3, r2
 8104608:	d045      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	681b      	ldr	r3, [r3, #0]
 810460e:	4a50      	ldr	r2, [pc, #320]	; (8104750 <HAL_DMA_Init+0x67c>)
 8104610:	4293      	cmp	r3, r2
 8104612:	d040      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	4a4e      	ldr	r2, [pc, #312]	; (8104754 <HAL_DMA_Init+0x680>)
 810461a:	4293      	cmp	r3, r2
 810461c:	d03b      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	681b      	ldr	r3, [r3, #0]
 8104622:	4a4d      	ldr	r2, [pc, #308]	; (8104758 <HAL_DMA_Init+0x684>)
 8104624:	4293      	cmp	r3, r2
 8104626:	d036      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	681b      	ldr	r3, [r3, #0]
 810462c:	4a4b      	ldr	r2, [pc, #300]	; (810475c <HAL_DMA_Init+0x688>)
 810462e:	4293      	cmp	r3, r2
 8104630:	d031      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	681b      	ldr	r3, [r3, #0]
 8104636:	4a4a      	ldr	r2, [pc, #296]	; (8104760 <HAL_DMA_Init+0x68c>)
 8104638:	4293      	cmp	r3, r2
 810463a:	d02c      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	4a48      	ldr	r2, [pc, #288]	; (8104764 <HAL_DMA_Init+0x690>)
 8104642:	4293      	cmp	r3, r2
 8104644:	d027      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	4a47      	ldr	r2, [pc, #284]	; (8104768 <HAL_DMA_Init+0x694>)
 810464c:	4293      	cmp	r3, r2
 810464e:	d022      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	681b      	ldr	r3, [r3, #0]
 8104654:	4a45      	ldr	r2, [pc, #276]	; (810476c <HAL_DMA_Init+0x698>)
 8104656:	4293      	cmp	r3, r2
 8104658:	d01d      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	4a44      	ldr	r2, [pc, #272]	; (8104770 <HAL_DMA_Init+0x69c>)
 8104660:	4293      	cmp	r3, r2
 8104662:	d018      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	681b      	ldr	r3, [r3, #0]
 8104668:	4a42      	ldr	r2, [pc, #264]	; (8104774 <HAL_DMA_Init+0x6a0>)
 810466a:	4293      	cmp	r3, r2
 810466c:	d013      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	4a41      	ldr	r2, [pc, #260]	; (8104778 <HAL_DMA_Init+0x6a4>)
 8104674:	4293      	cmp	r3, r2
 8104676:	d00e      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	681b      	ldr	r3, [r3, #0]
 810467c:	4a3f      	ldr	r2, [pc, #252]	; (810477c <HAL_DMA_Init+0x6a8>)
 810467e:	4293      	cmp	r3, r2
 8104680:	d009      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	681b      	ldr	r3, [r3, #0]
 8104686:	4a3e      	ldr	r2, [pc, #248]	; (8104780 <HAL_DMA_Init+0x6ac>)
 8104688:	4293      	cmp	r3, r2
 810468a:	d004      	beq.n	8104696 <HAL_DMA_Init+0x5c2>
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	4a3c      	ldr	r2, [pc, #240]	; (8104784 <HAL_DMA_Init+0x6b0>)
 8104692:	4293      	cmp	r3, r2
 8104694:	d101      	bne.n	810469a <HAL_DMA_Init+0x5c6>
 8104696:	2301      	movs	r3, #1
 8104698:	e000      	b.n	810469c <HAL_DMA_Init+0x5c8>
 810469a:	2300      	movs	r3, #0
 810469c:	2b00      	cmp	r3, #0
 810469e:	d032      	beq.n	8104706 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81046a0:	6878      	ldr	r0, [r7, #4]
 81046a2:	f002 fa5b 	bl	8106b5c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	689b      	ldr	r3, [r3, #8]
 81046aa:	2b80      	cmp	r3, #128	; 0x80
 81046ac:	d102      	bne.n	81046b4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	2200      	movs	r2, #0
 81046b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	685a      	ldr	r2, [r3, #4]
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81046bc:	b2d2      	uxtb	r2, r2
 81046be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81046c4:	687a      	ldr	r2, [r7, #4]
 81046c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81046c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	685b      	ldr	r3, [r3, #4]
 81046ce:	2b00      	cmp	r3, #0
 81046d0:	d010      	beq.n	81046f4 <HAL_DMA_Init+0x620>
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	685b      	ldr	r3, [r3, #4]
 81046d6:	2b08      	cmp	r3, #8
 81046d8:	d80c      	bhi.n	81046f4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81046da:	6878      	ldr	r0, [r7, #4]
 81046dc:	f002 fad8 	bl	8106c90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81046e4:	2200      	movs	r2, #0
 81046e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81046ec:	687a      	ldr	r2, [r7, #4]
 81046ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81046f0:	605a      	str	r2, [r3, #4]
 81046f2:	e008      	b.n	8104706 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	2200      	movs	r2, #0
 81046f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	2200      	movs	r2, #0
 81046fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	2200      	movs	r2, #0
 8104704:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	2200      	movs	r2, #0
 810470a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	2201      	movs	r2, #1
 8104710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8104714:	2300      	movs	r3, #0
}
 8104716:	4618      	mov	r0, r3
 8104718:	3718      	adds	r7, #24
 810471a:	46bd      	mov	sp, r7
 810471c:	bd80      	pop	{r7, pc}
 810471e:	bf00      	nop
 8104720:	a7fdabf8 	.word	0xa7fdabf8
 8104724:	cccccccd 	.word	0xcccccccd
 8104728:	40020010 	.word	0x40020010
 810472c:	40020028 	.word	0x40020028
 8104730:	40020040 	.word	0x40020040
 8104734:	40020058 	.word	0x40020058
 8104738:	40020070 	.word	0x40020070
 810473c:	40020088 	.word	0x40020088
 8104740:	400200a0 	.word	0x400200a0
 8104744:	400200b8 	.word	0x400200b8
 8104748:	40020410 	.word	0x40020410
 810474c:	40020428 	.word	0x40020428
 8104750:	40020440 	.word	0x40020440
 8104754:	40020458 	.word	0x40020458
 8104758:	40020470 	.word	0x40020470
 810475c:	40020488 	.word	0x40020488
 8104760:	400204a0 	.word	0x400204a0
 8104764:	400204b8 	.word	0x400204b8
 8104768:	58025408 	.word	0x58025408
 810476c:	5802541c 	.word	0x5802541c
 8104770:	58025430 	.word	0x58025430
 8104774:	58025444 	.word	0x58025444
 8104778:	58025458 	.word	0x58025458
 810477c:	5802546c 	.word	0x5802546c
 8104780:	58025480 	.word	0x58025480
 8104784:	58025494 	.word	0x58025494

08104788 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104788:	b580      	push	{r7, lr}
 810478a:	b086      	sub	sp, #24
 810478c:	af00      	add	r7, sp, #0
 810478e:	60f8      	str	r0, [r7, #12]
 8104790:	60b9      	str	r1, [r7, #8]
 8104792:	607a      	str	r2, [r7, #4]
 8104794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8104796:	2300      	movs	r3, #0
 8104798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	2b00      	cmp	r3, #0
 810479e:	d101      	bne.n	81047a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81047a0:	2301      	movs	r3, #1
 81047a2:	e226      	b.n	8104bf2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 81047a4:	68fb      	ldr	r3, [r7, #12]
 81047a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81047aa:	2b01      	cmp	r3, #1
 81047ac:	d101      	bne.n	81047b2 <HAL_DMA_Start_IT+0x2a>
 81047ae:	2302      	movs	r3, #2
 81047b0:	e21f      	b.n	8104bf2 <HAL_DMA_Start_IT+0x46a>
 81047b2:	68fb      	ldr	r3, [r7, #12]
 81047b4:	2201      	movs	r2, #1
 81047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81047ba:	68fb      	ldr	r3, [r7, #12]
 81047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81047c0:	b2db      	uxtb	r3, r3
 81047c2:	2b01      	cmp	r3, #1
 81047c4:	f040 820a 	bne.w	8104bdc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81047c8:	68fb      	ldr	r3, [r7, #12]
 81047ca:	2202      	movs	r2, #2
 81047cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81047d0:	68fb      	ldr	r3, [r7, #12]
 81047d2:	2200      	movs	r2, #0
 81047d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	4a68      	ldr	r2, [pc, #416]	; (810497c <HAL_DMA_Start_IT+0x1f4>)
 81047dc:	4293      	cmp	r3, r2
 81047de:	d04a      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	681b      	ldr	r3, [r3, #0]
 81047e4:	4a66      	ldr	r2, [pc, #408]	; (8104980 <HAL_DMA_Start_IT+0x1f8>)
 81047e6:	4293      	cmp	r3, r2
 81047e8:	d045      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 81047ea:	68fb      	ldr	r3, [r7, #12]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	4a65      	ldr	r2, [pc, #404]	; (8104984 <HAL_DMA_Start_IT+0x1fc>)
 81047f0:	4293      	cmp	r3, r2
 81047f2:	d040      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 81047f4:	68fb      	ldr	r3, [r7, #12]
 81047f6:	681b      	ldr	r3, [r3, #0]
 81047f8:	4a63      	ldr	r2, [pc, #396]	; (8104988 <HAL_DMA_Start_IT+0x200>)
 81047fa:	4293      	cmp	r3, r2
 81047fc:	d03b      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 81047fe:	68fb      	ldr	r3, [r7, #12]
 8104800:	681b      	ldr	r3, [r3, #0]
 8104802:	4a62      	ldr	r2, [pc, #392]	; (810498c <HAL_DMA_Start_IT+0x204>)
 8104804:	4293      	cmp	r3, r2
 8104806:	d036      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	4a60      	ldr	r2, [pc, #384]	; (8104990 <HAL_DMA_Start_IT+0x208>)
 810480e:	4293      	cmp	r3, r2
 8104810:	d031      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104812:	68fb      	ldr	r3, [r7, #12]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	4a5f      	ldr	r2, [pc, #380]	; (8104994 <HAL_DMA_Start_IT+0x20c>)
 8104818:	4293      	cmp	r3, r2
 810481a:	d02c      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	681b      	ldr	r3, [r3, #0]
 8104820:	4a5d      	ldr	r2, [pc, #372]	; (8104998 <HAL_DMA_Start_IT+0x210>)
 8104822:	4293      	cmp	r3, r2
 8104824:	d027      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	4a5c      	ldr	r2, [pc, #368]	; (810499c <HAL_DMA_Start_IT+0x214>)
 810482c:	4293      	cmp	r3, r2
 810482e:	d022      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	4a5a      	ldr	r2, [pc, #360]	; (81049a0 <HAL_DMA_Start_IT+0x218>)
 8104836:	4293      	cmp	r3, r2
 8104838:	d01d      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 810483a:	68fb      	ldr	r3, [r7, #12]
 810483c:	681b      	ldr	r3, [r3, #0]
 810483e:	4a59      	ldr	r2, [pc, #356]	; (81049a4 <HAL_DMA_Start_IT+0x21c>)
 8104840:	4293      	cmp	r3, r2
 8104842:	d018      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	4a57      	ldr	r2, [pc, #348]	; (81049a8 <HAL_DMA_Start_IT+0x220>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d013      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 810484e:	68fb      	ldr	r3, [r7, #12]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	4a56      	ldr	r2, [pc, #344]	; (81049ac <HAL_DMA_Start_IT+0x224>)
 8104854:	4293      	cmp	r3, r2
 8104856:	d00e      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	4a54      	ldr	r2, [pc, #336]	; (81049b0 <HAL_DMA_Start_IT+0x228>)
 810485e:	4293      	cmp	r3, r2
 8104860:	d009      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	4a53      	ldr	r2, [pc, #332]	; (81049b4 <HAL_DMA_Start_IT+0x22c>)
 8104868:	4293      	cmp	r3, r2
 810486a:	d004      	beq.n	8104876 <HAL_DMA_Start_IT+0xee>
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	4a51      	ldr	r2, [pc, #324]	; (81049b8 <HAL_DMA_Start_IT+0x230>)
 8104872:	4293      	cmp	r3, r2
 8104874:	d108      	bne.n	8104888 <HAL_DMA_Start_IT+0x100>
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	681b      	ldr	r3, [r3, #0]
 810487a:	681a      	ldr	r2, [r3, #0]
 810487c:	68fb      	ldr	r3, [r7, #12]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	f022 0201 	bic.w	r2, r2, #1
 8104884:	601a      	str	r2, [r3, #0]
 8104886:	e007      	b.n	8104898 <HAL_DMA_Start_IT+0x110>
 8104888:	68fb      	ldr	r3, [r7, #12]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	681a      	ldr	r2, [r3, #0]
 810488e:	68fb      	ldr	r3, [r7, #12]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	f022 0201 	bic.w	r2, r2, #1
 8104896:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104898:	683b      	ldr	r3, [r7, #0]
 810489a:	687a      	ldr	r2, [r7, #4]
 810489c:	68b9      	ldr	r1, [r7, #8]
 810489e:	68f8      	ldr	r0, [r7, #12]
 81048a0:	f001 fe82 	bl	81065a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81048a4:	68fb      	ldr	r3, [r7, #12]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	4a34      	ldr	r2, [pc, #208]	; (810497c <HAL_DMA_Start_IT+0x1f4>)
 81048aa:	4293      	cmp	r3, r2
 81048ac:	d04a      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048ae:	68fb      	ldr	r3, [r7, #12]
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	4a33      	ldr	r2, [pc, #204]	; (8104980 <HAL_DMA_Start_IT+0x1f8>)
 81048b4:	4293      	cmp	r3, r2
 81048b6:	d045      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048b8:	68fb      	ldr	r3, [r7, #12]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	4a31      	ldr	r2, [pc, #196]	; (8104984 <HAL_DMA_Start_IT+0x1fc>)
 81048be:	4293      	cmp	r3, r2
 81048c0:	d040      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048c2:	68fb      	ldr	r3, [r7, #12]
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	4a30      	ldr	r2, [pc, #192]	; (8104988 <HAL_DMA_Start_IT+0x200>)
 81048c8:	4293      	cmp	r3, r2
 81048ca:	d03b      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048cc:	68fb      	ldr	r3, [r7, #12]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	4a2e      	ldr	r2, [pc, #184]	; (810498c <HAL_DMA_Start_IT+0x204>)
 81048d2:	4293      	cmp	r3, r2
 81048d4:	d036      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048d6:	68fb      	ldr	r3, [r7, #12]
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	4a2d      	ldr	r2, [pc, #180]	; (8104990 <HAL_DMA_Start_IT+0x208>)
 81048dc:	4293      	cmp	r3, r2
 81048de:	d031      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048e0:	68fb      	ldr	r3, [r7, #12]
 81048e2:	681b      	ldr	r3, [r3, #0]
 81048e4:	4a2b      	ldr	r2, [pc, #172]	; (8104994 <HAL_DMA_Start_IT+0x20c>)
 81048e6:	4293      	cmp	r3, r2
 81048e8:	d02c      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048ea:	68fb      	ldr	r3, [r7, #12]
 81048ec:	681b      	ldr	r3, [r3, #0]
 81048ee:	4a2a      	ldr	r2, [pc, #168]	; (8104998 <HAL_DMA_Start_IT+0x210>)
 81048f0:	4293      	cmp	r3, r2
 81048f2:	d027      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048f4:	68fb      	ldr	r3, [r7, #12]
 81048f6:	681b      	ldr	r3, [r3, #0]
 81048f8:	4a28      	ldr	r2, [pc, #160]	; (810499c <HAL_DMA_Start_IT+0x214>)
 81048fa:	4293      	cmp	r3, r2
 81048fc:	d022      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 81048fe:	68fb      	ldr	r3, [r7, #12]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	4a27      	ldr	r2, [pc, #156]	; (81049a0 <HAL_DMA_Start_IT+0x218>)
 8104904:	4293      	cmp	r3, r2
 8104906:	d01d      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 8104908:	68fb      	ldr	r3, [r7, #12]
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	4a25      	ldr	r2, [pc, #148]	; (81049a4 <HAL_DMA_Start_IT+0x21c>)
 810490e:	4293      	cmp	r3, r2
 8104910:	d018      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 8104912:	68fb      	ldr	r3, [r7, #12]
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	4a24      	ldr	r2, [pc, #144]	; (81049a8 <HAL_DMA_Start_IT+0x220>)
 8104918:	4293      	cmp	r3, r2
 810491a:	d013      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 810491c:	68fb      	ldr	r3, [r7, #12]
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	4a22      	ldr	r2, [pc, #136]	; (81049ac <HAL_DMA_Start_IT+0x224>)
 8104922:	4293      	cmp	r3, r2
 8104924:	d00e      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	4a21      	ldr	r2, [pc, #132]	; (81049b0 <HAL_DMA_Start_IT+0x228>)
 810492c:	4293      	cmp	r3, r2
 810492e:	d009      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	4a1f      	ldr	r2, [pc, #124]	; (81049b4 <HAL_DMA_Start_IT+0x22c>)
 8104936:	4293      	cmp	r3, r2
 8104938:	d004      	beq.n	8104944 <HAL_DMA_Start_IT+0x1bc>
 810493a:	68fb      	ldr	r3, [r7, #12]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	4a1e      	ldr	r2, [pc, #120]	; (81049b8 <HAL_DMA_Start_IT+0x230>)
 8104940:	4293      	cmp	r3, r2
 8104942:	d101      	bne.n	8104948 <HAL_DMA_Start_IT+0x1c0>
 8104944:	2301      	movs	r3, #1
 8104946:	e000      	b.n	810494a <HAL_DMA_Start_IT+0x1c2>
 8104948:	2300      	movs	r3, #0
 810494a:	2b00      	cmp	r3, #0
 810494c:	d036      	beq.n	81049bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810494e:	68fb      	ldr	r3, [r7, #12]
 8104950:	681b      	ldr	r3, [r3, #0]
 8104952:	681b      	ldr	r3, [r3, #0]
 8104954:	f023 021e 	bic.w	r2, r3, #30
 8104958:	68fb      	ldr	r3, [r7, #12]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	f042 0216 	orr.w	r2, r2, #22
 8104960:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104962:	68fb      	ldr	r3, [r7, #12]
 8104964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104966:	2b00      	cmp	r3, #0
 8104968:	d03e      	beq.n	81049e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810496a:	68fb      	ldr	r3, [r7, #12]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	681a      	ldr	r2, [r3, #0]
 8104970:	68fb      	ldr	r3, [r7, #12]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	f042 0208 	orr.w	r2, r2, #8
 8104978:	601a      	str	r2, [r3, #0]
 810497a:	e035      	b.n	81049e8 <HAL_DMA_Start_IT+0x260>
 810497c:	40020010 	.word	0x40020010
 8104980:	40020028 	.word	0x40020028
 8104984:	40020040 	.word	0x40020040
 8104988:	40020058 	.word	0x40020058
 810498c:	40020070 	.word	0x40020070
 8104990:	40020088 	.word	0x40020088
 8104994:	400200a0 	.word	0x400200a0
 8104998:	400200b8 	.word	0x400200b8
 810499c:	40020410 	.word	0x40020410
 81049a0:	40020428 	.word	0x40020428
 81049a4:	40020440 	.word	0x40020440
 81049a8:	40020458 	.word	0x40020458
 81049ac:	40020470 	.word	0x40020470
 81049b0:	40020488 	.word	0x40020488
 81049b4:	400204a0 	.word	0x400204a0
 81049b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81049bc:	68fb      	ldr	r3, [r7, #12]
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	f023 020e 	bic.w	r2, r3, #14
 81049c6:	68fb      	ldr	r3, [r7, #12]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	f042 020a 	orr.w	r2, r2, #10
 81049ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81049d0:	68fb      	ldr	r3, [r7, #12]
 81049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81049d4:	2b00      	cmp	r3, #0
 81049d6:	d007      	beq.n	81049e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 81049d8:	68fb      	ldr	r3, [r7, #12]
 81049da:	681b      	ldr	r3, [r3, #0]
 81049dc:	681a      	ldr	r2, [r3, #0]
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	f042 0204 	orr.w	r2, r2, #4
 81049e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81049e8:	68fb      	ldr	r3, [r7, #12]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	4a83      	ldr	r2, [pc, #524]	; (8104bfc <HAL_DMA_Start_IT+0x474>)
 81049ee:	4293      	cmp	r3, r2
 81049f0:	d072      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	4a82      	ldr	r2, [pc, #520]	; (8104c00 <HAL_DMA_Start_IT+0x478>)
 81049f8:	4293      	cmp	r3, r2
 81049fa:	d06d      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 81049fc:	68fb      	ldr	r3, [r7, #12]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	4a80      	ldr	r2, [pc, #512]	; (8104c04 <HAL_DMA_Start_IT+0x47c>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d068      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a06:	68fb      	ldr	r3, [r7, #12]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	4a7f      	ldr	r2, [pc, #508]	; (8104c08 <HAL_DMA_Start_IT+0x480>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d063      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a10:	68fb      	ldr	r3, [r7, #12]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	4a7d      	ldr	r2, [pc, #500]	; (8104c0c <HAL_DMA_Start_IT+0x484>)
 8104a16:	4293      	cmp	r3, r2
 8104a18:	d05e      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a1a:	68fb      	ldr	r3, [r7, #12]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	4a7c      	ldr	r2, [pc, #496]	; (8104c10 <HAL_DMA_Start_IT+0x488>)
 8104a20:	4293      	cmp	r3, r2
 8104a22:	d059      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a24:	68fb      	ldr	r3, [r7, #12]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	4a7a      	ldr	r2, [pc, #488]	; (8104c14 <HAL_DMA_Start_IT+0x48c>)
 8104a2a:	4293      	cmp	r3, r2
 8104a2c:	d054      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	4a79      	ldr	r2, [pc, #484]	; (8104c18 <HAL_DMA_Start_IT+0x490>)
 8104a34:	4293      	cmp	r3, r2
 8104a36:	d04f      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a77      	ldr	r2, [pc, #476]	; (8104c1c <HAL_DMA_Start_IT+0x494>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d04a      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a42:	68fb      	ldr	r3, [r7, #12]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	4a76      	ldr	r2, [pc, #472]	; (8104c20 <HAL_DMA_Start_IT+0x498>)
 8104a48:	4293      	cmp	r3, r2
 8104a4a:	d045      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	4a74      	ldr	r2, [pc, #464]	; (8104c24 <HAL_DMA_Start_IT+0x49c>)
 8104a52:	4293      	cmp	r3, r2
 8104a54:	d040      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	4a73      	ldr	r2, [pc, #460]	; (8104c28 <HAL_DMA_Start_IT+0x4a0>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d03b      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	4a71      	ldr	r2, [pc, #452]	; (8104c2c <HAL_DMA_Start_IT+0x4a4>)
 8104a66:	4293      	cmp	r3, r2
 8104a68:	d036      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a6a:	68fb      	ldr	r3, [r7, #12]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	4a70      	ldr	r2, [pc, #448]	; (8104c30 <HAL_DMA_Start_IT+0x4a8>)
 8104a70:	4293      	cmp	r3, r2
 8104a72:	d031      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a74:	68fb      	ldr	r3, [r7, #12]
 8104a76:	681b      	ldr	r3, [r3, #0]
 8104a78:	4a6e      	ldr	r2, [pc, #440]	; (8104c34 <HAL_DMA_Start_IT+0x4ac>)
 8104a7a:	4293      	cmp	r3, r2
 8104a7c:	d02c      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	4a6d      	ldr	r2, [pc, #436]	; (8104c38 <HAL_DMA_Start_IT+0x4b0>)
 8104a84:	4293      	cmp	r3, r2
 8104a86:	d027      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a88:	68fb      	ldr	r3, [r7, #12]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	4a6b      	ldr	r2, [pc, #428]	; (8104c3c <HAL_DMA_Start_IT+0x4b4>)
 8104a8e:	4293      	cmp	r3, r2
 8104a90:	d022      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a92:	68fb      	ldr	r3, [r7, #12]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	4a6a      	ldr	r2, [pc, #424]	; (8104c40 <HAL_DMA_Start_IT+0x4b8>)
 8104a98:	4293      	cmp	r3, r2
 8104a9a:	d01d      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104a9c:	68fb      	ldr	r3, [r7, #12]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	4a68      	ldr	r2, [pc, #416]	; (8104c44 <HAL_DMA_Start_IT+0x4bc>)
 8104aa2:	4293      	cmp	r3, r2
 8104aa4:	d018      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104aa6:	68fb      	ldr	r3, [r7, #12]
 8104aa8:	681b      	ldr	r3, [r3, #0]
 8104aaa:	4a67      	ldr	r2, [pc, #412]	; (8104c48 <HAL_DMA_Start_IT+0x4c0>)
 8104aac:	4293      	cmp	r3, r2
 8104aae:	d013      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	4a65      	ldr	r2, [pc, #404]	; (8104c4c <HAL_DMA_Start_IT+0x4c4>)
 8104ab6:	4293      	cmp	r3, r2
 8104ab8:	d00e      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	4a64      	ldr	r2, [pc, #400]	; (8104c50 <HAL_DMA_Start_IT+0x4c8>)
 8104ac0:	4293      	cmp	r3, r2
 8104ac2:	d009      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	4a62      	ldr	r2, [pc, #392]	; (8104c54 <HAL_DMA_Start_IT+0x4cc>)
 8104aca:	4293      	cmp	r3, r2
 8104acc:	d004      	beq.n	8104ad8 <HAL_DMA_Start_IT+0x350>
 8104ace:	68fb      	ldr	r3, [r7, #12]
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	4a61      	ldr	r2, [pc, #388]	; (8104c58 <HAL_DMA_Start_IT+0x4d0>)
 8104ad4:	4293      	cmp	r3, r2
 8104ad6:	d101      	bne.n	8104adc <HAL_DMA_Start_IT+0x354>
 8104ad8:	2301      	movs	r3, #1
 8104ada:	e000      	b.n	8104ade <HAL_DMA_Start_IT+0x356>
 8104adc:	2300      	movs	r3, #0
 8104ade:	2b00      	cmp	r3, #0
 8104ae0:	d01a      	beq.n	8104b18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8104ae2:	68fb      	ldr	r3, [r7, #12]
 8104ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104aec:	2b00      	cmp	r3, #0
 8104aee:	d007      	beq.n	8104b00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104af4:	681a      	ldr	r2, [r3, #0]
 8104af6:	68fb      	ldr	r3, [r7, #12]
 8104af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104afe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104b04:	2b00      	cmp	r3, #0
 8104b06:	d007      	beq.n	8104b18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104b08:	68fb      	ldr	r3, [r7, #12]
 8104b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104b0c:	681a      	ldr	r2, [r3, #0]
 8104b0e:	68fb      	ldr	r3, [r7, #12]
 8104b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104b16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104b18:	68fb      	ldr	r3, [r7, #12]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	4a37      	ldr	r2, [pc, #220]	; (8104bfc <HAL_DMA_Start_IT+0x474>)
 8104b1e:	4293      	cmp	r3, r2
 8104b20:	d04a      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b22:	68fb      	ldr	r3, [r7, #12]
 8104b24:	681b      	ldr	r3, [r3, #0]
 8104b26:	4a36      	ldr	r2, [pc, #216]	; (8104c00 <HAL_DMA_Start_IT+0x478>)
 8104b28:	4293      	cmp	r3, r2
 8104b2a:	d045      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b2c:	68fb      	ldr	r3, [r7, #12]
 8104b2e:	681b      	ldr	r3, [r3, #0]
 8104b30:	4a34      	ldr	r2, [pc, #208]	; (8104c04 <HAL_DMA_Start_IT+0x47c>)
 8104b32:	4293      	cmp	r3, r2
 8104b34:	d040      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b36:	68fb      	ldr	r3, [r7, #12]
 8104b38:	681b      	ldr	r3, [r3, #0]
 8104b3a:	4a33      	ldr	r2, [pc, #204]	; (8104c08 <HAL_DMA_Start_IT+0x480>)
 8104b3c:	4293      	cmp	r3, r2
 8104b3e:	d03b      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b40:	68fb      	ldr	r3, [r7, #12]
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	4a31      	ldr	r2, [pc, #196]	; (8104c0c <HAL_DMA_Start_IT+0x484>)
 8104b46:	4293      	cmp	r3, r2
 8104b48:	d036      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b4a:	68fb      	ldr	r3, [r7, #12]
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	4a30      	ldr	r2, [pc, #192]	; (8104c10 <HAL_DMA_Start_IT+0x488>)
 8104b50:	4293      	cmp	r3, r2
 8104b52:	d031      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	4a2e      	ldr	r2, [pc, #184]	; (8104c14 <HAL_DMA_Start_IT+0x48c>)
 8104b5a:	4293      	cmp	r3, r2
 8104b5c:	d02c      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	4a2d      	ldr	r2, [pc, #180]	; (8104c18 <HAL_DMA_Start_IT+0x490>)
 8104b64:	4293      	cmp	r3, r2
 8104b66:	d027      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	4a2b      	ldr	r2, [pc, #172]	; (8104c1c <HAL_DMA_Start_IT+0x494>)
 8104b6e:	4293      	cmp	r3, r2
 8104b70:	d022      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	4a2a      	ldr	r2, [pc, #168]	; (8104c20 <HAL_DMA_Start_IT+0x498>)
 8104b78:	4293      	cmp	r3, r2
 8104b7a:	d01d      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b7c:	68fb      	ldr	r3, [r7, #12]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	4a28      	ldr	r2, [pc, #160]	; (8104c24 <HAL_DMA_Start_IT+0x49c>)
 8104b82:	4293      	cmp	r3, r2
 8104b84:	d018      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b86:	68fb      	ldr	r3, [r7, #12]
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	4a27      	ldr	r2, [pc, #156]	; (8104c28 <HAL_DMA_Start_IT+0x4a0>)
 8104b8c:	4293      	cmp	r3, r2
 8104b8e:	d013      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b90:	68fb      	ldr	r3, [r7, #12]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	4a25      	ldr	r2, [pc, #148]	; (8104c2c <HAL_DMA_Start_IT+0x4a4>)
 8104b96:	4293      	cmp	r3, r2
 8104b98:	d00e      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	681b      	ldr	r3, [r3, #0]
 8104b9e:	4a24      	ldr	r2, [pc, #144]	; (8104c30 <HAL_DMA_Start_IT+0x4a8>)
 8104ba0:	4293      	cmp	r3, r2
 8104ba2:	d009      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104ba4:	68fb      	ldr	r3, [r7, #12]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	4a22      	ldr	r2, [pc, #136]	; (8104c34 <HAL_DMA_Start_IT+0x4ac>)
 8104baa:	4293      	cmp	r3, r2
 8104bac:	d004      	beq.n	8104bb8 <HAL_DMA_Start_IT+0x430>
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	4a21      	ldr	r2, [pc, #132]	; (8104c38 <HAL_DMA_Start_IT+0x4b0>)
 8104bb4:	4293      	cmp	r3, r2
 8104bb6:	d108      	bne.n	8104bca <HAL_DMA_Start_IT+0x442>
 8104bb8:	68fb      	ldr	r3, [r7, #12]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	681a      	ldr	r2, [r3, #0]
 8104bbe:	68fb      	ldr	r3, [r7, #12]
 8104bc0:	681b      	ldr	r3, [r3, #0]
 8104bc2:	f042 0201 	orr.w	r2, r2, #1
 8104bc6:	601a      	str	r2, [r3, #0]
 8104bc8:	e012      	b.n	8104bf0 <HAL_DMA_Start_IT+0x468>
 8104bca:	68fb      	ldr	r3, [r7, #12]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	681a      	ldr	r2, [r3, #0]
 8104bd0:	68fb      	ldr	r3, [r7, #12]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	f042 0201 	orr.w	r2, r2, #1
 8104bd8:	601a      	str	r2, [r3, #0]
 8104bda:	e009      	b.n	8104bf0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104bdc:	68fb      	ldr	r3, [r7, #12]
 8104bde:	2200      	movs	r2, #0
 8104be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104be4:	68fb      	ldr	r3, [r7, #12]
 8104be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104bec:	2301      	movs	r3, #1
 8104bee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8104bf2:	4618      	mov	r0, r3
 8104bf4:	3718      	adds	r7, #24
 8104bf6:	46bd      	mov	sp, r7
 8104bf8:	bd80      	pop	{r7, pc}
 8104bfa:	bf00      	nop
 8104bfc:	40020010 	.word	0x40020010
 8104c00:	40020028 	.word	0x40020028
 8104c04:	40020040 	.word	0x40020040
 8104c08:	40020058 	.word	0x40020058
 8104c0c:	40020070 	.word	0x40020070
 8104c10:	40020088 	.word	0x40020088
 8104c14:	400200a0 	.word	0x400200a0
 8104c18:	400200b8 	.word	0x400200b8
 8104c1c:	40020410 	.word	0x40020410
 8104c20:	40020428 	.word	0x40020428
 8104c24:	40020440 	.word	0x40020440
 8104c28:	40020458 	.word	0x40020458
 8104c2c:	40020470 	.word	0x40020470
 8104c30:	40020488 	.word	0x40020488
 8104c34:	400204a0 	.word	0x400204a0
 8104c38:	400204b8 	.word	0x400204b8
 8104c3c:	58025408 	.word	0x58025408
 8104c40:	5802541c 	.word	0x5802541c
 8104c44:	58025430 	.word	0x58025430
 8104c48:	58025444 	.word	0x58025444
 8104c4c:	58025458 	.word	0x58025458
 8104c50:	5802546c 	.word	0x5802546c
 8104c54:	58025480 	.word	0x58025480
 8104c58:	58025494 	.word	0x58025494

08104c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104c5c:	b580      	push	{r7, lr}
 8104c5e:	b086      	sub	sp, #24
 8104c60:	af00      	add	r7, sp, #0
 8104c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104c64:	f7fe fdf0 	bl	8103848 <HAL_GetTick>
 8104c68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	2b00      	cmp	r3, #0
 8104c6e:	d101      	bne.n	8104c74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104c70:	2301      	movs	r3, #1
 8104c72:	e2dc      	b.n	810522e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104c7a:	b2db      	uxtb	r3, r3
 8104c7c:	2b02      	cmp	r3, #2
 8104c7e:	d008      	beq.n	8104c92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	2280      	movs	r2, #128	; 0x80
 8104c84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	2200      	movs	r2, #0
 8104c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104c8e:	2301      	movs	r3, #1
 8104c90:	e2cd      	b.n	810522e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	4a76      	ldr	r2, [pc, #472]	; (8104e70 <HAL_DMA_Abort+0x214>)
 8104c98:	4293      	cmp	r3, r2
 8104c9a:	d04a      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	681b      	ldr	r3, [r3, #0]
 8104ca0:	4a74      	ldr	r2, [pc, #464]	; (8104e74 <HAL_DMA_Abort+0x218>)
 8104ca2:	4293      	cmp	r3, r2
 8104ca4:	d045      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	4a73      	ldr	r2, [pc, #460]	; (8104e78 <HAL_DMA_Abort+0x21c>)
 8104cac:	4293      	cmp	r3, r2
 8104cae:	d040      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	4a71      	ldr	r2, [pc, #452]	; (8104e7c <HAL_DMA_Abort+0x220>)
 8104cb6:	4293      	cmp	r3, r2
 8104cb8:	d03b      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	4a70      	ldr	r2, [pc, #448]	; (8104e80 <HAL_DMA_Abort+0x224>)
 8104cc0:	4293      	cmp	r3, r2
 8104cc2:	d036      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	4a6e      	ldr	r2, [pc, #440]	; (8104e84 <HAL_DMA_Abort+0x228>)
 8104cca:	4293      	cmp	r3, r2
 8104ccc:	d031      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	4a6d      	ldr	r2, [pc, #436]	; (8104e88 <HAL_DMA_Abort+0x22c>)
 8104cd4:	4293      	cmp	r3, r2
 8104cd6:	d02c      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	4a6b      	ldr	r2, [pc, #428]	; (8104e8c <HAL_DMA_Abort+0x230>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d027      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	4a6a      	ldr	r2, [pc, #424]	; (8104e90 <HAL_DMA_Abort+0x234>)
 8104ce8:	4293      	cmp	r3, r2
 8104cea:	d022      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	4a68      	ldr	r2, [pc, #416]	; (8104e94 <HAL_DMA_Abort+0x238>)
 8104cf2:	4293      	cmp	r3, r2
 8104cf4:	d01d      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	4a67      	ldr	r2, [pc, #412]	; (8104e98 <HAL_DMA_Abort+0x23c>)
 8104cfc:	4293      	cmp	r3, r2
 8104cfe:	d018      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104d00:	687b      	ldr	r3, [r7, #4]
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	4a65      	ldr	r2, [pc, #404]	; (8104e9c <HAL_DMA_Abort+0x240>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d013      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104d0a:	687b      	ldr	r3, [r7, #4]
 8104d0c:	681b      	ldr	r3, [r3, #0]
 8104d0e:	4a64      	ldr	r2, [pc, #400]	; (8104ea0 <HAL_DMA_Abort+0x244>)
 8104d10:	4293      	cmp	r3, r2
 8104d12:	d00e      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	4a62      	ldr	r2, [pc, #392]	; (8104ea4 <HAL_DMA_Abort+0x248>)
 8104d1a:	4293      	cmp	r3, r2
 8104d1c:	d009      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	4a61      	ldr	r2, [pc, #388]	; (8104ea8 <HAL_DMA_Abort+0x24c>)
 8104d24:	4293      	cmp	r3, r2
 8104d26:	d004      	beq.n	8104d32 <HAL_DMA_Abort+0xd6>
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	4a5f      	ldr	r2, [pc, #380]	; (8104eac <HAL_DMA_Abort+0x250>)
 8104d2e:	4293      	cmp	r3, r2
 8104d30:	d101      	bne.n	8104d36 <HAL_DMA_Abort+0xda>
 8104d32:	2301      	movs	r3, #1
 8104d34:	e000      	b.n	8104d38 <HAL_DMA_Abort+0xdc>
 8104d36:	2300      	movs	r3, #0
 8104d38:	2b00      	cmp	r3, #0
 8104d3a:	d013      	beq.n	8104d64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	681a      	ldr	r2, [r3, #0]
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	f022 021e 	bic.w	r2, r2, #30
 8104d4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	695a      	ldr	r2, [r3, #20]
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	681b      	ldr	r3, [r3, #0]
 8104d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104d5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	617b      	str	r3, [r7, #20]
 8104d62:	e00a      	b.n	8104d7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	681a      	ldr	r2, [r3, #0]
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	f022 020e 	bic.w	r2, r2, #14
 8104d72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	681b      	ldr	r3, [r3, #0]
 8104d78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	4a3c      	ldr	r2, [pc, #240]	; (8104e70 <HAL_DMA_Abort+0x214>)
 8104d80:	4293      	cmp	r3, r2
 8104d82:	d072      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	4a3a      	ldr	r2, [pc, #232]	; (8104e74 <HAL_DMA_Abort+0x218>)
 8104d8a:	4293      	cmp	r3, r2
 8104d8c:	d06d      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	4a39      	ldr	r2, [pc, #228]	; (8104e78 <HAL_DMA_Abort+0x21c>)
 8104d94:	4293      	cmp	r3, r2
 8104d96:	d068      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	4a37      	ldr	r2, [pc, #220]	; (8104e7c <HAL_DMA_Abort+0x220>)
 8104d9e:	4293      	cmp	r3, r2
 8104da0:	d063      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	4a36      	ldr	r2, [pc, #216]	; (8104e80 <HAL_DMA_Abort+0x224>)
 8104da8:	4293      	cmp	r3, r2
 8104daa:	d05e      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	4a34      	ldr	r2, [pc, #208]	; (8104e84 <HAL_DMA_Abort+0x228>)
 8104db2:	4293      	cmp	r3, r2
 8104db4:	d059      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	4a33      	ldr	r2, [pc, #204]	; (8104e88 <HAL_DMA_Abort+0x22c>)
 8104dbc:	4293      	cmp	r3, r2
 8104dbe:	d054      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a31      	ldr	r2, [pc, #196]	; (8104e8c <HAL_DMA_Abort+0x230>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d04f      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	4a30      	ldr	r2, [pc, #192]	; (8104e90 <HAL_DMA_Abort+0x234>)
 8104dd0:	4293      	cmp	r3, r2
 8104dd2:	d04a      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	4a2e      	ldr	r2, [pc, #184]	; (8104e94 <HAL_DMA_Abort+0x238>)
 8104dda:	4293      	cmp	r3, r2
 8104ddc:	d045      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a2d      	ldr	r2, [pc, #180]	; (8104e98 <HAL_DMA_Abort+0x23c>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d040      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a2b      	ldr	r2, [pc, #172]	; (8104e9c <HAL_DMA_Abort+0x240>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d03b      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	4a2a      	ldr	r2, [pc, #168]	; (8104ea0 <HAL_DMA_Abort+0x244>)
 8104df8:	4293      	cmp	r3, r2
 8104dfa:	d036      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	4a28      	ldr	r2, [pc, #160]	; (8104ea4 <HAL_DMA_Abort+0x248>)
 8104e02:	4293      	cmp	r3, r2
 8104e04:	d031      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a27      	ldr	r2, [pc, #156]	; (8104ea8 <HAL_DMA_Abort+0x24c>)
 8104e0c:	4293      	cmp	r3, r2
 8104e0e:	d02c      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	4a25      	ldr	r2, [pc, #148]	; (8104eac <HAL_DMA_Abort+0x250>)
 8104e16:	4293      	cmp	r3, r2
 8104e18:	d027      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	4a24      	ldr	r2, [pc, #144]	; (8104eb0 <HAL_DMA_Abort+0x254>)
 8104e20:	4293      	cmp	r3, r2
 8104e22:	d022      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	4a22      	ldr	r2, [pc, #136]	; (8104eb4 <HAL_DMA_Abort+0x258>)
 8104e2a:	4293      	cmp	r3, r2
 8104e2c:	d01d      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	4a21      	ldr	r2, [pc, #132]	; (8104eb8 <HAL_DMA_Abort+0x25c>)
 8104e34:	4293      	cmp	r3, r2
 8104e36:	d018      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	4a1f      	ldr	r2, [pc, #124]	; (8104ebc <HAL_DMA_Abort+0x260>)
 8104e3e:	4293      	cmp	r3, r2
 8104e40:	d013      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	681b      	ldr	r3, [r3, #0]
 8104e46:	4a1e      	ldr	r2, [pc, #120]	; (8104ec0 <HAL_DMA_Abort+0x264>)
 8104e48:	4293      	cmp	r3, r2
 8104e4a:	d00e      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	4a1c      	ldr	r2, [pc, #112]	; (8104ec4 <HAL_DMA_Abort+0x268>)
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d009      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	4a1b      	ldr	r2, [pc, #108]	; (8104ec8 <HAL_DMA_Abort+0x26c>)
 8104e5c:	4293      	cmp	r3, r2
 8104e5e:	d004      	beq.n	8104e6a <HAL_DMA_Abort+0x20e>
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	4a19      	ldr	r2, [pc, #100]	; (8104ecc <HAL_DMA_Abort+0x270>)
 8104e66:	4293      	cmp	r3, r2
 8104e68:	d132      	bne.n	8104ed0 <HAL_DMA_Abort+0x274>
 8104e6a:	2301      	movs	r3, #1
 8104e6c:	e031      	b.n	8104ed2 <HAL_DMA_Abort+0x276>
 8104e6e:	bf00      	nop
 8104e70:	40020010 	.word	0x40020010
 8104e74:	40020028 	.word	0x40020028
 8104e78:	40020040 	.word	0x40020040
 8104e7c:	40020058 	.word	0x40020058
 8104e80:	40020070 	.word	0x40020070
 8104e84:	40020088 	.word	0x40020088
 8104e88:	400200a0 	.word	0x400200a0
 8104e8c:	400200b8 	.word	0x400200b8
 8104e90:	40020410 	.word	0x40020410
 8104e94:	40020428 	.word	0x40020428
 8104e98:	40020440 	.word	0x40020440
 8104e9c:	40020458 	.word	0x40020458
 8104ea0:	40020470 	.word	0x40020470
 8104ea4:	40020488 	.word	0x40020488
 8104ea8:	400204a0 	.word	0x400204a0
 8104eac:	400204b8 	.word	0x400204b8
 8104eb0:	58025408 	.word	0x58025408
 8104eb4:	5802541c 	.word	0x5802541c
 8104eb8:	58025430 	.word	0x58025430
 8104ebc:	58025444 	.word	0x58025444
 8104ec0:	58025458 	.word	0x58025458
 8104ec4:	5802546c 	.word	0x5802546c
 8104ec8:	58025480 	.word	0x58025480
 8104ecc:	58025494 	.word	0x58025494
 8104ed0:	2300      	movs	r3, #0
 8104ed2:	2b00      	cmp	r3, #0
 8104ed4:	d007      	beq.n	8104ee6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104eda:	681a      	ldr	r2, [r3, #0]
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	681b      	ldr	r3, [r3, #0]
 8104eea:	4a6d      	ldr	r2, [pc, #436]	; (81050a0 <HAL_DMA_Abort+0x444>)
 8104eec:	4293      	cmp	r3, r2
 8104eee:	d04a      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	4a6b      	ldr	r2, [pc, #428]	; (81050a4 <HAL_DMA_Abort+0x448>)
 8104ef6:	4293      	cmp	r3, r2
 8104ef8:	d045      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	4a6a      	ldr	r2, [pc, #424]	; (81050a8 <HAL_DMA_Abort+0x44c>)
 8104f00:	4293      	cmp	r3, r2
 8104f02:	d040      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	4a68      	ldr	r2, [pc, #416]	; (81050ac <HAL_DMA_Abort+0x450>)
 8104f0a:	4293      	cmp	r3, r2
 8104f0c:	d03b      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	4a67      	ldr	r2, [pc, #412]	; (81050b0 <HAL_DMA_Abort+0x454>)
 8104f14:	4293      	cmp	r3, r2
 8104f16:	d036      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	4a65      	ldr	r2, [pc, #404]	; (81050b4 <HAL_DMA_Abort+0x458>)
 8104f1e:	4293      	cmp	r3, r2
 8104f20:	d031      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	4a64      	ldr	r2, [pc, #400]	; (81050b8 <HAL_DMA_Abort+0x45c>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d02c      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	4a62      	ldr	r2, [pc, #392]	; (81050bc <HAL_DMA_Abort+0x460>)
 8104f32:	4293      	cmp	r3, r2
 8104f34:	d027      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	4a61      	ldr	r2, [pc, #388]	; (81050c0 <HAL_DMA_Abort+0x464>)
 8104f3c:	4293      	cmp	r3, r2
 8104f3e:	d022      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	4a5f      	ldr	r2, [pc, #380]	; (81050c4 <HAL_DMA_Abort+0x468>)
 8104f46:	4293      	cmp	r3, r2
 8104f48:	d01d      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	4a5e      	ldr	r2, [pc, #376]	; (81050c8 <HAL_DMA_Abort+0x46c>)
 8104f50:	4293      	cmp	r3, r2
 8104f52:	d018      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	681b      	ldr	r3, [r3, #0]
 8104f58:	4a5c      	ldr	r2, [pc, #368]	; (81050cc <HAL_DMA_Abort+0x470>)
 8104f5a:	4293      	cmp	r3, r2
 8104f5c:	d013      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	4a5b      	ldr	r2, [pc, #364]	; (81050d0 <HAL_DMA_Abort+0x474>)
 8104f64:	4293      	cmp	r3, r2
 8104f66:	d00e      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	4a59      	ldr	r2, [pc, #356]	; (81050d4 <HAL_DMA_Abort+0x478>)
 8104f6e:	4293      	cmp	r3, r2
 8104f70:	d009      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	681b      	ldr	r3, [r3, #0]
 8104f76:	4a58      	ldr	r2, [pc, #352]	; (81050d8 <HAL_DMA_Abort+0x47c>)
 8104f78:	4293      	cmp	r3, r2
 8104f7a:	d004      	beq.n	8104f86 <HAL_DMA_Abort+0x32a>
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	4a56      	ldr	r2, [pc, #344]	; (81050dc <HAL_DMA_Abort+0x480>)
 8104f82:	4293      	cmp	r3, r2
 8104f84:	d108      	bne.n	8104f98 <HAL_DMA_Abort+0x33c>
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	681a      	ldr	r2, [r3, #0]
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	f022 0201 	bic.w	r2, r2, #1
 8104f94:	601a      	str	r2, [r3, #0]
 8104f96:	e007      	b.n	8104fa8 <HAL_DMA_Abort+0x34c>
 8104f98:	687b      	ldr	r3, [r7, #4]
 8104f9a:	681b      	ldr	r3, [r3, #0]
 8104f9c:	681a      	ldr	r2, [r3, #0]
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	f022 0201 	bic.w	r2, r2, #1
 8104fa6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104fa8:	e013      	b.n	8104fd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104faa:	f7fe fc4d 	bl	8103848 <HAL_GetTick>
 8104fae:	4602      	mov	r2, r0
 8104fb0:	693b      	ldr	r3, [r7, #16]
 8104fb2:	1ad3      	subs	r3, r2, r3
 8104fb4:	2b05      	cmp	r3, #5
 8104fb6:	d90c      	bls.n	8104fd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	2220      	movs	r2, #32
 8104fbc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	2200      	movs	r2, #0
 8104fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	2203      	movs	r2, #3
 8104fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104fce:	2301      	movs	r3, #1
 8104fd0:	e12d      	b.n	810522e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104fd2:	697b      	ldr	r3, [r7, #20]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	f003 0301 	and.w	r3, r3, #1
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d1e5      	bne.n	8104faa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4a2f      	ldr	r2, [pc, #188]	; (81050a0 <HAL_DMA_Abort+0x444>)
 8104fe4:	4293      	cmp	r3, r2
 8104fe6:	d04a      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	4a2d      	ldr	r2, [pc, #180]	; (81050a4 <HAL_DMA_Abort+0x448>)
 8104fee:	4293      	cmp	r3, r2
 8104ff0:	d045      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	4a2c      	ldr	r2, [pc, #176]	; (81050a8 <HAL_DMA_Abort+0x44c>)
 8104ff8:	4293      	cmp	r3, r2
 8104ffa:	d040      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	4a2a      	ldr	r2, [pc, #168]	; (81050ac <HAL_DMA_Abort+0x450>)
 8105002:	4293      	cmp	r3, r2
 8105004:	d03b      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	4a29      	ldr	r2, [pc, #164]	; (81050b0 <HAL_DMA_Abort+0x454>)
 810500c:	4293      	cmp	r3, r2
 810500e:	d036      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105010:	687b      	ldr	r3, [r7, #4]
 8105012:	681b      	ldr	r3, [r3, #0]
 8105014:	4a27      	ldr	r2, [pc, #156]	; (81050b4 <HAL_DMA_Abort+0x458>)
 8105016:	4293      	cmp	r3, r2
 8105018:	d031      	beq.n	810507e <HAL_DMA_Abort+0x422>
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	4a26      	ldr	r2, [pc, #152]	; (81050b8 <HAL_DMA_Abort+0x45c>)
 8105020:	4293      	cmp	r3, r2
 8105022:	d02c      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105024:	687b      	ldr	r3, [r7, #4]
 8105026:	681b      	ldr	r3, [r3, #0]
 8105028:	4a24      	ldr	r2, [pc, #144]	; (81050bc <HAL_DMA_Abort+0x460>)
 810502a:	4293      	cmp	r3, r2
 810502c:	d027      	beq.n	810507e <HAL_DMA_Abort+0x422>
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	681b      	ldr	r3, [r3, #0]
 8105032:	4a23      	ldr	r2, [pc, #140]	; (81050c0 <HAL_DMA_Abort+0x464>)
 8105034:	4293      	cmp	r3, r2
 8105036:	d022      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	4a21      	ldr	r2, [pc, #132]	; (81050c4 <HAL_DMA_Abort+0x468>)
 810503e:	4293      	cmp	r3, r2
 8105040:	d01d      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4a20      	ldr	r2, [pc, #128]	; (81050c8 <HAL_DMA_Abort+0x46c>)
 8105048:	4293      	cmp	r3, r2
 810504a:	d018      	beq.n	810507e <HAL_DMA_Abort+0x422>
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	4a1e      	ldr	r2, [pc, #120]	; (81050cc <HAL_DMA_Abort+0x470>)
 8105052:	4293      	cmp	r3, r2
 8105054:	d013      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	4a1d      	ldr	r2, [pc, #116]	; (81050d0 <HAL_DMA_Abort+0x474>)
 810505c:	4293      	cmp	r3, r2
 810505e:	d00e      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	4a1b      	ldr	r2, [pc, #108]	; (81050d4 <HAL_DMA_Abort+0x478>)
 8105066:	4293      	cmp	r3, r2
 8105068:	d009      	beq.n	810507e <HAL_DMA_Abort+0x422>
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	4a1a      	ldr	r2, [pc, #104]	; (81050d8 <HAL_DMA_Abort+0x47c>)
 8105070:	4293      	cmp	r3, r2
 8105072:	d004      	beq.n	810507e <HAL_DMA_Abort+0x422>
 8105074:	687b      	ldr	r3, [r7, #4]
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	4a18      	ldr	r2, [pc, #96]	; (81050dc <HAL_DMA_Abort+0x480>)
 810507a:	4293      	cmp	r3, r2
 810507c:	d101      	bne.n	8105082 <HAL_DMA_Abort+0x426>
 810507e:	2301      	movs	r3, #1
 8105080:	e000      	b.n	8105084 <HAL_DMA_Abort+0x428>
 8105082:	2300      	movs	r3, #0
 8105084:	2b00      	cmp	r3, #0
 8105086:	d02b      	beq.n	81050e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810508c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105092:	f003 031f 	and.w	r3, r3, #31
 8105096:	223f      	movs	r2, #63	; 0x3f
 8105098:	409a      	lsls	r2, r3
 810509a:	68bb      	ldr	r3, [r7, #8]
 810509c:	609a      	str	r2, [r3, #8]
 810509e:	e02a      	b.n	81050f6 <HAL_DMA_Abort+0x49a>
 81050a0:	40020010 	.word	0x40020010
 81050a4:	40020028 	.word	0x40020028
 81050a8:	40020040 	.word	0x40020040
 81050ac:	40020058 	.word	0x40020058
 81050b0:	40020070 	.word	0x40020070
 81050b4:	40020088 	.word	0x40020088
 81050b8:	400200a0 	.word	0x400200a0
 81050bc:	400200b8 	.word	0x400200b8
 81050c0:	40020410 	.word	0x40020410
 81050c4:	40020428 	.word	0x40020428
 81050c8:	40020440 	.word	0x40020440
 81050cc:	40020458 	.word	0x40020458
 81050d0:	40020470 	.word	0x40020470
 81050d4:	40020488 	.word	0x40020488
 81050d8:	400204a0 	.word	0x400204a0
 81050dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81050e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81050e6:	687b      	ldr	r3, [r7, #4]
 81050e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050ea:	f003 031f 	and.w	r3, r3, #31
 81050ee:	2201      	movs	r2, #1
 81050f0:	409a      	lsls	r2, r3
 81050f2:	68fb      	ldr	r3, [r7, #12]
 81050f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	681b      	ldr	r3, [r3, #0]
 81050fa:	4a4f      	ldr	r2, [pc, #316]	; (8105238 <HAL_DMA_Abort+0x5dc>)
 81050fc:	4293      	cmp	r3, r2
 81050fe:	d072      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	4a4d      	ldr	r2, [pc, #308]	; (810523c <HAL_DMA_Abort+0x5e0>)
 8105106:	4293      	cmp	r3, r2
 8105108:	d06d      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	4a4c      	ldr	r2, [pc, #304]	; (8105240 <HAL_DMA_Abort+0x5e4>)
 8105110:	4293      	cmp	r3, r2
 8105112:	d068      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	681b      	ldr	r3, [r3, #0]
 8105118:	4a4a      	ldr	r2, [pc, #296]	; (8105244 <HAL_DMA_Abort+0x5e8>)
 810511a:	4293      	cmp	r3, r2
 810511c:	d063      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	681b      	ldr	r3, [r3, #0]
 8105122:	4a49      	ldr	r2, [pc, #292]	; (8105248 <HAL_DMA_Abort+0x5ec>)
 8105124:	4293      	cmp	r3, r2
 8105126:	d05e      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105128:	687b      	ldr	r3, [r7, #4]
 810512a:	681b      	ldr	r3, [r3, #0]
 810512c:	4a47      	ldr	r2, [pc, #284]	; (810524c <HAL_DMA_Abort+0x5f0>)
 810512e:	4293      	cmp	r3, r2
 8105130:	d059      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	681b      	ldr	r3, [r3, #0]
 8105136:	4a46      	ldr	r2, [pc, #280]	; (8105250 <HAL_DMA_Abort+0x5f4>)
 8105138:	4293      	cmp	r3, r2
 810513a:	d054      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	681b      	ldr	r3, [r3, #0]
 8105140:	4a44      	ldr	r2, [pc, #272]	; (8105254 <HAL_DMA_Abort+0x5f8>)
 8105142:	4293      	cmp	r3, r2
 8105144:	d04f      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	681b      	ldr	r3, [r3, #0]
 810514a:	4a43      	ldr	r2, [pc, #268]	; (8105258 <HAL_DMA_Abort+0x5fc>)
 810514c:	4293      	cmp	r3, r2
 810514e:	d04a      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	4a41      	ldr	r2, [pc, #260]	; (810525c <HAL_DMA_Abort+0x600>)
 8105156:	4293      	cmp	r3, r2
 8105158:	d045      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	681b      	ldr	r3, [r3, #0]
 810515e:	4a40      	ldr	r2, [pc, #256]	; (8105260 <HAL_DMA_Abort+0x604>)
 8105160:	4293      	cmp	r3, r2
 8105162:	d040      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	681b      	ldr	r3, [r3, #0]
 8105168:	4a3e      	ldr	r2, [pc, #248]	; (8105264 <HAL_DMA_Abort+0x608>)
 810516a:	4293      	cmp	r3, r2
 810516c:	d03b      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	4a3d      	ldr	r2, [pc, #244]	; (8105268 <HAL_DMA_Abort+0x60c>)
 8105174:	4293      	cmp	r3, r2
 8105176:	d036      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	4a3b      	ldr	r2, [pc, #236]	; (810526c <HAL_DMA_Abort+0x610>)
 810517e:	4293      	cmp	r3, r2
 8105180:	d031      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	681b      	ldr	r3, [r3, #0]
 8105186:	4a3a      	ldr	r2, [pc, #232]	; (8105270 <HAL_DMA_Abort+0x614>)
 8105188:	4293      	cmp	r3, r2
 810518a:	d02c      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	4a38      	ldr	r2, [pc, #224]	; (8105274 <HAL_DMA_Abort+0x618>)
 8105192:	4293      	cmp	r3, r2
 8105194:	d027      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	681b      	ldr	r3, [r3, #0]
 810519a:	4a37      	ldr	r2, [pc, #220]	; (8105278 <HAL_DMA_Abort+0x61c>)
 810519c:	4293      	cmp	r3, r2
 810519e:	d022      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	4a35      	ldr	r2, [pc, #212]	; (810527c <HAL_DMA_Abort+0x620>)
 81051a6:	4293      	cmp	r3, r2
 81051a8:	d01d      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	4a34      	ldr	r2, [pc, #208]	; (8105280 <HAL_DMA_Abort+0x624>)
 81051b0:	4293      	cmp	r3, r2
 81051b2:	d018      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4a32      	ldr	r2, [pc, #200]	; (8105284 <HAL_DMA_Abort+0x628>)
 81051ba:	4293      	cmp	r3, r2
 81051bc:	d013      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	4a31      	ldr	r2, [pc, #196]	; (8105288 <HAL_DMA_Abort+0x62c>)
 81051c4:	4293      	cmp	r3, r2
 81051c6:	d00e      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	681b      	ldr	r3, [r3, #0]
 81051cc:	4a2f      	ldr	r2, [pc, #188]	; (810528c <HAL_DMA_Abort+0x630>)
 81051ce:	4293      	cmp	r3, r2
 81051d0:	d009      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	4a2e      	ldr	r2, [pc, #184]	; (8105290 <HAL_DMA_Abort+0x634>)
 81051d8:	4293      	cmp	r3, r2
 81051da:	d004      	beq.n	81051e6 <HAL_DMA_Abort+0x58a>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	4a2c      	ldr	r2, [pc, #176]	; (8105294 <HAL_DMA_Abort+0x638>)
 81051e2:	4293      	cmp	r3, r2
 81051e4:	d101      	bne.n	81051ea <HAL_DMA_Abort+0x58e>
 81051e6:	2301      	movs	r3, #1
 81051e8:	e000      	b.n	81051ec <HAL_DMA_Abort+0x590>
 81051ea:	2300      	movs	r3, #0
 81051ec:	2b00      	cmp	r3, #0
 81051ee:	d015      	beq.n	810521c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051f4:	687a      	ldr	r2, [r7, #4]
 81051f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81051f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81051fe:	2b00      	cmp	r3, #0
 8105200:	d00c      	beq.n	810521c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105202:	687b      	ldr	r3, [r7, #4]
 8105204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105206:	681a      	ldr	r2, [r3, #0]
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810520c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105210:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105216:	687a      	ldr	r2, [r7, #4]
 8105218:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810521a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	2200      	movs	r2, #0
 8105220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8105224:	687b      	ldr	r3, [r7, #4]
 8105226:	2201      	movs	r2, #1
 8105228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 810522c:	2300      	movs	r3, #0
}
 810522e:	4618      	mov	r0, r3
 8105230:	3718      	adds	r7, #24
 8105232:	46bd      	mov	sp, r7
 8105234:	bd80      	pop	{r7, pc}
 8105236:	bf00      	nop
 8105238:	40020010 	.word	0x40020010
 810523c:	40020028 	.word	0x40020028
 8105240:	40020040 	.word	0x40020040
 8105244:	40020058 	.word	0x40020058
 8105248:	40020070 	.word	0x40020070
 810524c:	40020088 	.word	0x40020088
 8105250:	400200a0 	.word	0x400200a0
 8105254:	400200b8 	.word	0x400200b8
 8105258:	40020410 	.word	0x40020410
 810525c:	40020428 	.word	0x40020428
 8105260:	40020440 	.word	0x40020440
 8105264:	40020458 	.word	0x40020458
 8105268:	40020470 	.word	0x40020470
 810526c:	40020488 	.word	0x40020488
 8105270:	400204a0 	.word	0x400204a0
 8105274:	400204b8 	.word	0x400204b8
 8105278:	58025408 	.word	0x58025408
 810527c:	5802541c 	.word	0x5802541c
 8105280:	58025430 	.word	0x58025430
 8105284:	58025444 	.word	0x58025444
 8105288:	58025458 	.word	0x58025458
 810528c:	5802546c 	.word	0x5802546c
 8105290:	58025480 	.word	0x58025480
 8105294:	58025494 	.word	0x58025494

08105298 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8105298:	b580      	push	{r7, lr}
 810529a:	b084      	sub	sp, #16
 810529c:	af00      	add	r7, sp, #0
 810529e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	2b00      	cmp	r3, #0
 81052a4:	d101      	bne.n	81052aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81052a6:	2301      	movs	r3, #1
 81052a8:	e205      	b.n	81056b6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81052b0:	b2db      	uxtb	r3, r3
 81052b2:	2b02      	cmp	r3, #2
 81052b4:	d004      	beq.n	81052c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	2280      	movs	r2, #128	; 0x80
 81052ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81052bc:	2301      	movs	r3, #1
 81052be:	e1fa      	b.n	81056b6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	681b      	ldr	r3, [r3, #0]
 81052c4:	4a8c      	ldr	r2, [pc, #560]	; (81054f8 <HAL_DMA_Abort_IT+0x260>)
 81052c6:	4293      	cmp	r3, r2
 81052c8:	d04a      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	4a8b      	ldr	r2, [pc, #556]	; (81054fc <HAL_DMA_Abort_IT+0x264>)
 81052d0:	4293      	cmp	r3, r2
 81052d2:	d045      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	4a89      	ldr	r2, [pc, #548]	; (8105500 <HAL_DMA_Abort_IT+0x268>)
 81052da:	4293      	cmp	r3, r2
 81052dc:	d040      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	4a88      	ldr	r2, [pc, #544]	; (8105504 <HAL_DMA_Abort_IT+0x26c>)
 81052e4:	4293      	cmp	r3, r2
 81052e6:	d03b      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	681b      	ldr	r3, [r3, #0]
 81052ec:	4a86      	ldr	r2, [pc, #536]	; (8105508 <HAL_DMA_Abort_IT+0x270>)
 81052ee:	4293      	cmp	r3, r2
 81052f0:	d036      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	4a85      	ldr	r2, [pc, #532]	; (810550c <HAL_DMA_Abort_IT+0x274>)
 81052f8:	4293      	cmp	r3, r2
 81052fa:	d031      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	4a83      	ldr	r2, [pc, #524]	; (8105510 <HAL_DMA_Abort_IT+0x278>)
 8105302:	4293      	cmp	r3, r2
 8105304:	d02c      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	681b      	ldr	r3, [r3, #0]
 810530a:	4a82      	ldr	r2, [pc, #520]	; (8105514 <HAL_DMA_Abort_IT+0x27c>)
 810530c:	4293      	cmp	r3, r2
 810530e:	d027      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	4a80      	ldr	r2, [pc, #512]	; (8105518 <HAL_DMA_Abort_IT+0x280>)
 8105316:	4293      	cmp	r3, r2
 8105318:	d022      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	681b      	ldr	r3, [r3, #0]
 810531e:	4a7f      	ldr	r2, [pc, #508]	; (810551c <HAL_DMA_Abort_IT+0x284>)
 8105320:	4293      	cmp	r3, r2
 8105322:	d01d      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	4a7d      	ldr	r2, [pc, #500]	; (8105520 <HAL_DMA_Abort_IT+0x288>)
 810532a:	4293      	cmp	r3, r2
 810532c:	d018      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a7c      	ldr	r2, [pc, #496]	; (8105524 <HAL_DMA_Abort_IT+0x28c>)
 8105334:	4293      	cmp	r3, r2
 8105336:	d013      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	4a7a      	ldr	r2, [pc, #488]	; (8105528 <HAL_DMA_Abort_IT+0x290>)
 810533e:	4293      	cmp	r3, r2
 8105340:	d00e      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	4a79      	ldr	r2, [pc, #484]	; (810552c <HAL_DMA_Abort_IT+0x294>)
 8105348:	4293      	cmp	r3, r2
 810534a:	d009      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	4a77      	ldr	r2, [pc, #476]	; (8105530 <HAL_DMA_Abort_IT+0x298>)
 8105352:	4293      	cmp	r3, r2
 8105354:	d004      	beq.n	8105360 <HAL_DMA_Abort_IT+0xc8>
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	681b      	ldr	r3, [r3, #0]
 810535a:	4a76      	ldr	r2, [pc, #472]	; (8105534 <HAL_DMA_Abort_IT+0x29c>)
 810535c:	4293      	cmp	r3, r2
 810535e:	d101      	bne.n	8105364 <HAL_DMA_Abort_IT+0xcc>
 8105360:	2301      	movs	r3, #1
 8105362:	e000      	b.n	8105366 <HAL_DMA_Abort_IT+0xce>
 8105364:	2300      	movs	r3, #0
 8105366:	2b00      	cmp	r3, #0
 8105368:	d065      	beq.n	8105436 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	2204      	movs	r2, #4
 810536e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	681b      	ldr	r3, [r3, #0]
 8105376:	4a60      	ldr	r2, [pc, #384]	; (81054f8 <HAL_DMA_Abort_IT+0x260>)
 8105378:	4293      	cmp	r3, r2
 810537a:	d04a      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	4a5e      	ldr	r2, [pc, #376]	; (81054fc <HAL_DMA_Abort_IT+0x264>)
 8105382:	4293      	cmp	r3, r2
 8105384:	d045      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	681b      	ldr	r3, [r3, #0]
 810538a:	4a5d      	ldr	r2, [pc, #372]	; (8105500 <HAL_DMA_Abort_IT+0x268>)
 810538c:	4293      	cmp	r3, r2
 810538e:	d040      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	681b      	ldr	r3, [r3, #0]
 8105394:	4a5b      	ldr	r2, [pc, #364]	; (8105504 <HAL_DMA_Abort_IT+0x26c>)
 8105396:	4293      	cmp	r3, r2
 8105398:	d03b      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	681b      	ldr	r3, [r3, #0]
 810539e:	4a5a      	ldr	r2, [pc, #360]	; (8105508 <HAL_DMA_Abort_IT+0x270>)
 81053a0:	4293      	cmp	r3, r2
 81053a2:	d036      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	681b      	ldr	r3, [r3, #0]
 81053a8:	4a58      	ldr	r2, [pc, #352]	; (810550c <HAL_DMA_Abort_IT+0x274>)
 81053aa:	4293      	cmp	r3, r2
 81053ac:	d031      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053ae:	687b      	ldr	r3, [r7, #4]
 81053b0:	681b      	ldr	r3, [r3, #0]
 81053b2:	4a57      	ldr	r2, [pc, #348]	; (8105510 <HAL_DMA_Abort_IT+0x278>)
 81053b4:	4293      	cmp	r3, r2
 81053b6:	d02c      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	681b      	ldr	r3, [r3, #0]
 81053bc:	4a55      	ldr	r2, [pc, #340]	; (8105514 <HAL_DMA_Abort_IT+0x27c>)
 81053be:	4293      	cmp	r3, r2
 81053c0:	d027      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	681b      	ldr	r3, [r3, #0]
 81053c6:	4a54      	ldr	r2, [pc, #336]	; (8105518 <HAL_DMA_Abort_IT+0x280>)
 81053c8:	4293      	cmp	r3, r2
 81053ca:	d022      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	4a52      	ldr	r2, [pc, #328]	; (810551c <HAL_DMA_Abort_IT+0x284>)
 81053d2:	4293      	cmp	r3, r2
 81053d4:	d01d      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	4a51      	ldr	r2, [pc, #324]	; (8105520 <HAL_DMA_Abort_IT+0x288>)
 81053dc:	4293      	cmp	r3, r2
 81053de:	d018      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053e0:	687b      	ldr	r3, [r7, #4]
 81053e2:	681b      	ldr	r3, [r3, #0]
 81053e4:	4a4f      	ldr	r2, [pc, #316]	; (8105524 <HAL_DMA_Abort_IT+0x28c>)
 81053e6:	4293      	cmp	r3, r2
 81053e8:	d013      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	681b      	ldr	r3, [r3, #0]
 81053ee:	4a4e      	ldr	r2, [pc, #312]	; (8105528 <HAL_DMA_Abort_IT+0x290>)
 81053f0:	4293      	cmp	r3, r2
 81053f2:	d00e      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	4a4c      	ldr	r2, [pc, #304]	; (810552c <HAL_DMA_Abort_IT+0x294>)
 81053fa:	4293      	cmp	r3, r2
 81053fc:	d009      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	681b      	ldr	r3, [r3, #0]
 8105402:	4a4b      	ldr	r2, [pc, #300]	; (8105530 <HAL_DMA_Abort_IT+0x298>)
 8105404:	4293      	cmp	r3, r2
 8105406:	d004      	beq.n	8105412 <HAL_DMA_Abort_IT+0x17a>
 8105408:	687b      	ldr	r3, [r7, #4]
 810540a:	681b      	ldr	r3, [r3, #0]
 810540c:	4a49      	ldr	r2, [pc, #292]	; (8105534 <HAL_DMA_Abort_IT+0x29c>)
 810540e:	4293      	cmp	r3, r2
 8105410:	d108      	bne.n	8105424 <HAL_DMA_Abort_IT+0x18c>
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	681b      	ldr	r3, [r3, #0]
 8105416:	681a      	ldr	r2, [r3, #0]
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	681b      	ldr	r3, [r3, #0]
 810541c:	f022 0201 	bic.w	r2, r2, #1
 8105420:	601a      	str	r2, [r3, #0]
 8105422:	e147      	b.n	81056b4 <HAL_DMA_Abort_IT+0x41c>
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	681a      	ldr	r2, [r3, #0]
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	f022 0201 	bic.w	r2, r2, #1
 8105432:	601a      	str	r2, [r3, #0]
 8105434:	e13e      	b.n	81056b4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	681b      	ldr	r3, [r3, #0]
 810543a:	681a      	ldr	r2, [r3, #0]
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	f022 020e 	bic.w	r2, r2, #14
 8105444:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
 810544a:	4a2b      	ldr	r2, [pc, #172]	; (81054f8 <HAL_DMA_Abort_IT+0x260>)
 810544c:	4293      	cmp	r3, r2
 810544e:	d04a      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	4a29      	ldr	r2, [pc, #164]	; (81054fc <HAL_DMA_Abort_IT+0x264>)
 8105456:	4293      	cmp	r3, r2
 8105458:	d045      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a28      	ldr	r2, [pc, #160]	; (8105500 <HAL_DMA_Abort_IT+0x268>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d040      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	4a26      	ldr	r2, [pc, #152]	; (8105504 <HAL_DMA_Abort_IT+0x26c>)
 810546a:	4293      	cmp	r3, r2
 810546c:	d03b      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4a25      	ldr	r2, [pc, #148]	; (8105508 <HAL_DMA_Abort_IT+0x270>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d036      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a23      	ldr	r2, [pc, #140]	; (810550c <HAL_DMA_Abort_IT+0x274>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d031      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a22      	ldr	r2, [pc, #136]	; (8105510 <HAL_DMA_Abort_IT+0x278>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d02c      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a20      	ldr	r2, [pc, #128]	; (8105514 <HAL_DMA_Abort_IT+0x27c>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d027      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a1f      	ldr	r2, [pc, #124]	; (8105518 <HAL_DMA_Abort_IT+0x280>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d022      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a1d      	ldr	r2, [pc, #116]	; (810551c <HAL_DMA_Abort_IT+0x284>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d01d      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a1c      	ldr	r2, [pc, #112]	; (8105520 <HAL_DMA_Abort_IT+0x288>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d018      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	4a1a      	ldr	r2, [pc, #104]	; (8105524 <HAL_DMA_Abort_IT+0x28c>)
 81054ba:	4293      	cmp	r3, r2
 81054bc:	d013      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	4a19      	ldr	r2, [pc, #100]	; (8105528 <HAL_DMA_Abort_IT+0x290>)
 81054c4:	4293      	cmp	r3, r2
 81054c6:	d00e      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	4a17      	ldr	r2, [pc, #92]	; (810552c <HAL_DMA_Abort_IT+0x294>)
 81054ce:	4293      	cmp	r3, r2
 81054d0:	d009      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	4a16      	ldr	r2, [pc, #88]	; (8105530 <HAL_DMA_Abort_IT+0x298>)
 81054d8:	4293      	cmp	r3, r2
 81054da:	d004      	beq.n	81054e6 <HAL_DMA_Abort_IT+0x24e>
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	4a14      	ldr	r2, [pc, #80]	; (8105534 <HAL_DMA_Abort_IT+0x29c>)
 81054e2:	4293      	cmp	r3, r2
 81054e4:	d128      	bne.n	8105538 <HAL_DMA_Abort_IT+0x2a0>
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	681a      	ldr	r2, [r3, #0]
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	f022 0201 	bic.w	r2, r2, #1
 81054f4:	601a      	str	r2, [r3, #0]
 81054f6:	e027      	b.n	8105548 <HAL_DMA_Abort_IT+0x2b0>
 81054f8:	40020010 	.word	0x40020010
 81054fc:	40020028 	.word	0x40020028
 8105500:	40020040 	.word	0x40020040
 8105504:	40020058 	.word	0x40020058
 8105508:	40020070 	.word	0x40020070
 810550c:	40020088 	.word	0x40020088
 8105510:	400200a0 	.word	0x400200a0
 8105514:	400200b8 	.word	0x400200b8
 8105518:	40020410 	.word	0x40020410
 810551c:	40020428 	.word	0x40020428
 8105520:	40020440 	.word	0x40020440
 8105524:	40020458 	.word	0x40020458
 8105528:	40020470 	.word	0x40020470
 810552c:	40020488 	.word	0x40020488
 8105530:	400204a0 	.word	0x400204a0
 8105534:	400204b8 	.word	0x400204b8
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	681a      	ldr	r2, [r3, #0]
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	f022 0201 	bic.w	r2, r2, #1
 8105546:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	4a5c      	ldr	r2, [pc, #368]	; (81056c0 <HAL_DMA_Abort_IT+0x428>)
 810554e:	4293      	cmp	r3, r2
 8105550:	d072      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	4a5b      	ldr	r2, [pc, #364]	; (81056c4 <HAL_DMA_Abort_IT+0x42c>)
 8105558:	4293      	cmp	r3, r2
 810555a:	d06d      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	4a59      	ldr	r2, [pc, #356]	; (81056c8 <HAL_DMA_Abort_IT+0x430>)
 8105562:	4293      	cmp	r3, r2
 8105564:	d068      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	4a58      	ldr	r2, [pc, #352]	; (81056cc <HAL_DMA_Abort_IT+0x434>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d063      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a56      	ldr	r2, [pc, #344]	; (81056d0 <HAL_DMA_Abort_IT+0x438>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d05e      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a55      	ldr	r2, [pc, #340]	; (81056d4 <HAL_DMA_Abort_IT+0x43c>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d059      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a53      	ldr	r2, [pc, #332]	; (81056d8 <HAL_DMA_Abort_IT+0x440>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d054      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a52      	ldr	r2, [pc, #328]	; (81056dc <HAL_DMA_Abort_IT+0x444>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d04f      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	4a50      	ldr	r2, [pc, #320]	; (81056e0 <HAL_DMA_Abort_IT+0x448>)
 810559e:	4293      	cmp	r3, r2
 81055a0:	d04a      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	4a4f      	ldr	r2, [pc, #316]	; (81056e4 <HAL_DMA_Abort_IT+0x44c>)
 81055a8:	4293      	cmp	r3, r2
 81055aa:	d045      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a4d      	ldr	r2, [pc, #308]	; (81056e8 <HAL_DMA_Abort_IT+0x450>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d040      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	4a4c      	ldr	r2, [pc, #304]	; (81056ec <HAL_DMA_Abort_IT+0x454>)
 81055bc:	4293      	cmp	r3, r2
 81055be:	d03b      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	4a4a      	ldr	r2, [pc, #296]	; (81056f0 <HAL_DMA_Abort_IT+0x458>)
 81055c6:	4293      	cmp	r3, r2
 81055c8:	d036      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	4a49      	ldr	r2, [pc, #292]	; (81056f4 <HAL_DMA_Abort_IT+0x45c>)
 81055d0:	4293      	cmp	r3, r2
 81055d2:	d031      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	4a47      	ldr	r2, [pc, #284]	; (81056f8 <HAL_DMA_Abort_IT+0x460>)
 81055da:	4293      	cmp	r3, r2
 81055dc:	d02c      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	4a46      	ldr	r2, [pc, #280]	; (81056fc <HAL_DMA_Abort_IT+0x464>)
 81055e4:	4293      	cmp	r3, r2
 81055e6:	d027      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	4a44      	ldr	r2, [pc, #272]	; (8105700 <HAL_DMA_Abort_IT+0x468>)
 81055ee:	4293      	cmp	r3, r2
 81055f0:	d022      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	4a43      	ldr	r2, [pc, #268]	; (8105704 <HAL_DMA_Abort_IT+0x46c>)
 81055f8:	4293      	cmp	r3, r2
 81055fa:	d01d      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	4a41      	ldr	r2, [pc, #260]	; (8105708 <HAL_DMA_Abort_IT+0x470>)
 8105602:	4293      	cmp	r3, r2
 8105604:	d018      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	4a40      	ldr	r2, [pc, #256]	; (810570c <HAL_DMA_Abort_IT+0x474>)
 810560c:	4293      	cmp	r3, r2
 810560e:	d013      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	4a3e      	ldr	r2, [pc, #248]	; (8105710 <HAL_DMA_Abort_IT+0x478>)
 8105616:	4293      	cmp	r3, r2
 8105618:	d00e      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	681b      	ldr	r3, [r3, #0]
 810561e:	4a3d      	ldr	r2, [pc, #244]	; (8105714 <HAL_DMA_Abort_IT+0x47c>)
 8105620:	4293      	cmp	r3, r2
 8105622:	d009      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	681b      	ldr	r3, [r3, #0]
 8105628:	4a3b      	ldr	r2, [pc, #236]	; (8105718 <HAL_DMA_Abort_IT+0x480>)
 810562a:	4293      	cmp	r3, r2
 810562c:	d004      	beq.n	8105638 <HAL_DMA_Abort_IT+0x3a0>
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	681b      	ldr	r3, [r3, #0]
 8105632:	4a3a      	ldr	r2, [pc, #232]	; (810571c <HAL_DMA_Abort_IT+0x484>)
 8105634:	4293      	cmp	r3, r2
 8105636:	d101      	bne.n	810563c <HAL_DMA_Abort_IT+0x3a4>
 8105638:	2301      	movs	r3, #1
 810563a:	e000      	b.n	810563e <HAL_DMA_Abort_IT+0x3a6>
 810563c:	2300      	movs	r3, #0
 810563e:	2b00      	cmp	r3, #0
 8105640:	d028      	beq.n	8105694 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105646:	681a      	ldr	r2, [r3, #0]
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810564c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105650:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105656:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105658:	687b      	ldr	r3, [r7, #4]
 810565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810565c:	f003 031f 	and.w	r3, r3, #31
 8105660:	2201      	movs	r2, #1
 8105662:	409a      	lsls	r2, r3
 8105664:	68fb      	ldr	r3, [r7, #12]
 8105666:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810566c:	687a      	ldr	r2, [r7, #4]
 810566e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105670:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105672:	687b      	ldr	r3, [r7, #4]
 8105674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105676:	2b00      	cmp	r3, #0
 8105678:	d00c      	beq.n	8105694 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810567e:	681a      	ldr	r2, [r3, #0]
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105688:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810568e:	687a      	ldr	r2, [r7, #4]
 8105690:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105692:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	2200      	movs	r2, #0
 8105698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	2201      	movs	r2, #1
 81056a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056a8:	2b00      	cmp	r3, #0
 81056aa:	d003      	beq.n	81056b4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056b0:	6878      	ldr	r0, [r7, #4]
 81056b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81056b4:	2300      	movs	r3, #0
}
 81056b6:	4618      	mov	r0, r3
 81056b8:	3710      	adds	r7, #16
 81056ba:	46bd      	mov	sp, r7
 81056bc:	bd80      	pop	{r7, pc}
 81056be:	bf00      	nop
 81056c0:	40020010 	.word	0x40020010
 81056c4:	40020028 	.word	0x40020028
 81056c8:	40020040 	.word	0x40020040
 81056cc:	40020058 	.word	0x40020058
 81056d0:	40020070 	.word	0x40020070
 81056d4:	40020088 	.word	0x40020088
 81056d8:	400200a0 	.word	0x400200a0
 81056dc:	400200b8 	.word	0x400200b8
 81056e0:	40020410 	.word	0x40020410
 81056e4:	40020428 	.word	0x40020428
 81056e8:	40020440 	.word	0x40020440
 81056ec:	40020458 	.word	0x40020458
 81056f0:	40020470 	.word	0x40020470
 81056f4:	40020488 	.word	0x40020488
 81056f8:	400204a0 	.word	0x400204a0
 81056fc:	400204b8 	.word	0x400204b8
 8105700:	58025408 	.word	0x58025408
 8105704:	5802541c 	.word	0x5802541c
 8105708:	58025430 	.word	0x58025430
 810570c:	58025444 	.word	0x58025444
 8105710:	58025458 	.word	0x58025458
 8105714:	5802546c 	.word	0x5802546c
 8105718:	58025480 	.word	0x58025480
 810571c:	58025494 	.word	0x58025494

08105720 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8105720:	b580      	push	{r7, lr}
 8105722:	b08a      	sub	sp, #40	; 0x28
 8105724:	af00      	add	r7, sp, #0
 8105726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8105728:	2300      	movs	r3, #0
 810572a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 810572c:	4b67      	ldr	r3, [pc, #412]	; (81058cc <HAL_DMA_IRQHandler+0x1ac>)
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	4a67      	ldr	r2, [pc, #412]	; (81058d0 <HAL_DMA_IRQHandler+0x1b0>)
 8105732:	fba2 2303 	umull	r2, r3, r2, r3
 8105736:	0a9b      	lsrs	r3, r3, #10
 8105738:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810573e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105740:	687b      	ldr	r3, [r7, #4]
 8105742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105744:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8105746:	6a3b      	ldr	r3, [r7, #32]
 8105748:	681b      	ldr	r3, [r3, #0]
 810574a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 810574c:	69fb      	ldr	r3, [r7, #28]
 810574e:	681b      	ldr	r3, [r3, #0]
 8105750:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	681b      	ldr	r3, [r3, #0]
 8105756:	4a5f      	ldr	r2, [pc, #380]	; (81058d4 <HAL_DMA_IRQHandler+0x1b4>)
 8105758:	4293      	cmp	r3, r2
 810575a:	d04a      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	681b      	ldr	r3, [r3, #0]
 8105760:	4a5d      	ldr	r2, [pc, #372]	; (81058d8 <HAL_DMA_IRQHandler+0x1b8>)
 8105762:	4293      	cmp	r3, r2
 8105764:	d045      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	681b      	ldr	r3, [r3, #0]
 810576a:	4a5c      	ldr	r2, [pc, #368]	; (81058dc <HAL_DMA_IRQHandler+0x1bc>)
 810576c:	4293      	cmp	r3, r2
 810576e:	d040      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 8105770:	687b      	ldr	r3, [r7, #4]
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	4a5a      	ldr	r2, [pc, #360]	; (81058e0 <HAL_DMA_IRQHandler+0x1c0>)
 8105776:	4293      	cmp	r3, r2
 8105778:	d03b      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	681b      	ldr	r3, [r3, #0]
 810577e:	4a59      	ldr	r2, [pc, #356]	; (81058e4 <HAL_DMA_IRQHandler+0x1c4>)
 8105780:	4293      	cmp	r3, r2
 8105782:	d036      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	4a57      	ldr	r2, [pc, #348]	; (81058e8 <HAL_DMA_IRQHandler+0x1c8>)
 810578a:	4293      	cmp	r3, r2
 810578c:	d031      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	4a56      	ldr	r2, [pc, #344]	; (81058ec <HAL_DMA_IRQHandler+0x1cc>)
 8105794:	4293      	cmp	r3, r2
 8105796:	d02c      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	4a54      	ldr	r2, [pc, #336]	; (81058f0 <HAL_DMA_IRQHandler+0x1d0>)
 810579e:	4293      	cmp	r3, r2
 81057a0:	d027      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	681b      	ldr	r3, [r3, #0]
 81057a6:	4a53      	ldr	r2, [pc, #332]	; (81058f4 <HAL_DMA_IRQHandler+0x1d4>)
 81057a8:	4293      	cmp	r3, r2
 81057aa:	d022      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	4a51      	ldr	r2, [pc, #324]	; (81058f8 <HAL_DMA_IRQHandler+0x1d8>)
 81057b2:	4293      	cmp	r3, r2
 81057b4:	d01d      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	4a50      	ldr	r2, [pc, #320]	; (81058fc <HAL_DMA_IRQHandler+0x1dc>)
 81057bc:	4293      	cmp	r3, r2
 81057be:	d018      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	4a4e      	ldr	r2, [pc, #312]	; (8105900 <HAL_DMA_IRQHandler+0x1e0>)
 81057c6:	4293      	cmp	r3, r2
 81057c8:	d013      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	4a4d      	ldr	r2, [pc, #308]	; (8105904 <HAL_DMA_IRQHandler+0x1e4>)
 81057d0:	4293      	cmp	r3, r2
 81057d2:	d00e      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	4a4b      	ldr	r2, [pc, #300]	; (8105908 <HAL_DMA_IRQHandler+0x1e8>)
 81057da:	4293      	cmp	r3, r2
 81057dc:	d009      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	681b      	ldr	r3, [r3, #0]
 81057e2:	4a4a      	ldr	r2, [pc, #296]	; (810590c <HAL_DMA_IRQHandler+0x1ec>)
 81057e4:	4293      	cmp	r3, r2
 81057e6:	d004      	beq.n	81057f2 <HAL_DMA_IRQHandler+0xd2>
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	4a48      	ldr	r2, [pc, #288]	; (8105910 <HAL_DMA_IRQHandler+0x1f0>)
 81057ee:	4293      	cmp	r3, r2
 81057f0:	d101      	bne.n	81057f6 <HAL_DMA_IRQHandler+0xd6>
 81057f2:	2301      	movs	r3, #1
 81057f4:	e000      	b.n	81057f8 <HAL_DMA_IRQHandler+0xd8>
 81057f6:	2300      	movs	r3, #0
 81057f8:	2b00      	cmp	r3, #0
 81057fa:	f000 842b 	beq.w	8106054 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105802:	f003 031f 	and.w	r3, r3, #31
 8105806:	2208      	movs	r2, #8
 8105808:	409a      	lsls	r2, r3
 810580a:	69bb      	ldr	r3, [r7, #24]
 810580c:	4013      	ands	r3, r2
 810580e:	2b00      	cmp	r3, #0
 8105810:	f000 80a2 	beq.w	8105958 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105814:	687b      	ldr	r3, [r7, #4]
 8105816:	681b      	ldr	r3, [r3, #0]
 8105818:	4a2e      	ldr	r2, [pc, #184]	; (81058d4 <HAL_DMA_IRQHandler+0x1b4>)
 810581a:	4293      	cmp	r3, r2
 810581c:	d04a      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	4a2d      	ldr	r2, [pc, #180]	; (81058d8 <HAL_DMA_IRQHandler+0x1b8>)
 8105824:	4293      	cmp	r3, r2
 8105826:	d045      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	4a2b      	ldr	r2, [pc, #172]	; (81058dc <HAL_DMA_IRQHandler+0x1bc>)
 810582e:	4293      	cmp	r3, r2
 8105830:	d040      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	4a2a      	ldr	r2, [pc, #168]	; (81058e0 <HAL_DMA_IRQHandler+0x1c0>)
 8105838:	4293      	cmp	r3, r2
 810583a:	d03b      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	4a28      	ldr	r2, [pc, #160]	; (81058e4 <HAL_DMA_IRQHandler+0x1c4>)
 8105842:	4293      	cmp	r3, r2
 8105844:	d036      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	681b      	ldr	r3, [r3, #0]
 810584a:	4a27      	ldr	r2, [pc, #156]	; (81058e8 <HAL_DMA_IRQHandler+0x1c8>)
 810584c:	4293      	cmp	r3, r2
 810584e:	d031      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	4a25      	ldr	r2, [pc, #148]	; (81058ec <HAL_DMA_IRQHandler+0x1cc>)
 8105856:	4293      	cmp	r3, r2
 8105858:	d02c      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	4a24      	ldr	r2, [pc, #144]	; (81058f0 <HAL_DMA_IRQHandler+0x1d0>)
 8105860:	4293      	cmp	r3, r2
 8105862:	d027      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	4a22      	ldr	r2, [pc, #136]	; (81058f4 <HAL_DMA_IRQHandler+0x1d4>)
 810586a:	4293      	cmp	r3, r2
 810586c:	d022      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	4a21      	ldr	r2, [pc, #132]	; (81058f8 <HAL_DMA_IRQHandler+0x1d8>)
 8105874:	4293      	cmp	r3, r2
 8105876:	d01d      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	4a1f      	ldr	r2, [pc, #124]	; (81058fc <HAL_DMA_IRQHandler+0x1dc>)
 810587e:	4293      	cmp	r3, r2
 8105880:	d018      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	4a1e      	ldr	r2, [pc, #120]	; (8105900 <HAL_DMA_IRQHandler+0x1e0>)
 8105888:	4293      	cmp	r3, r2
 810588a:	d013      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	4a1c      	ldr	r2, [pc, #112]	; (8105904 <HAL_DMA_IRQHandler+0x1e4>)
 8105892:	4293      	cmp	r3, r2
 8105894:	d00e      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	4a1b      	ldr	r2, [pc, #108]	; (8105908 <HAL_DMA_IRQHandler+0x1e8>)
 810589c:	4293      	cmp	r3, r2
 810589e:	d009      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	4a19      	ldr	r2, [pc, #100]	; (810590c <HAL_DMA_IRQHandler+0x1ec>)
 81058a6:	4293      	cmp	r3, r2
 81058a8:	d004      	beq.n	81058b4 <HAL_DMA_IRQHandler+0x194>
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	4a18      	ldr	r2, [pc, #96]	; (8105910 <HAL_DMA_IRQHandler+0x1f0>)
 81058b0:	4293      	cmp	r3, r2
 81058b2:	d12f      	bne.n	8105914 <HAL_DMA_IRQHandler+0x1f4>
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	681b      	ldr	r3, [r3, #0]
 81058ba:	f003 0304 	and.w	r3, r3, #4
 81058be:	2b00      	cmp	r3, #0
 81058c0:	bf14      	ite	ne
 81058c2:	2301      	movne	r3, #1
 81058c4:	2300      	moveq	r3, #0
 81058c6:	b2db      	uxtb	r3, r3
 81058c8:	e02e      	b.n	8105928 <HAL_DMA_IRQHandler+0x208>
 81058ca:	bf00      	nop
 81058cc:	10000000 	.word	0x10000000
 81058d0:	1b4e81b5 	.word	0x1b4e81b5
 81058d4:	40020010 	.word	0x40020010
 81058d8:	40020028 	.word	0x40020028
 81058dc:	40020040 	.word	0x40020040
 81058e0:	40020058 	.word	0x40020058
 81058e4:	40020070 	.word	0x40020070
 81058e8:	40020088 	.word	0x40020088
 81058ec:	400200a0 	.word	0x400200a0
 81058f0:	400200b8 	.word	0x400200b8
 81058f4:	40020410 	.word	0x40020410
 81058f8:	40020428 	.word	0x40020428
 81058fc:	40020440 	.word	0x40020440
 8105900:	40020458 	.word	0x40020458
 8105904:	40020470 	.word	0x40020470
 8105908:	40020488 	.word	0x40020488
 810590c:	400204a0 	.word	0x400204a0
 8105910:	400204b8 	.word	0x400204b8
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	f003 0308 	and.w	r3, r3, #8
 810591e:	2b00      	cmp	r3, #0
 8105920:	bf14      	ite	ne
 8105922:	2301      	movne	r3, #1
 8105924:	2300      	moveq	r3, #0
 8105926:	b2db      	uxtb	r3, r3
 8105928:	2b00      	cmp	r3, #0
 810592a:	d015      	beq.n	8105958 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 810592c:	687b      	ldr	r3, [r7, #4]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	681a      	ldr	r2, [r3, #0]
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	f022 0204 	bic.w	r2, r2, #4
 810593a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105940:	f003 031f 	and.w	r3, r3, #31
 8105944:	2208      	movs	r2, #8
 8105946:	409a      	lsls	r2, r3
 8105948:	6a3b      	ldr	r3, [r7, #32]
 810594a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105950:	f043 0201 	orr.w	r2, r3, #1
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810595c:	f003 031f 	and.w	r3, r3, #31
 8105960:	69ba      	ldr	r2, [r7, #24]
 8105962:	fa22 f303 	lsr.w	r3, r2, r3
 8105966:	f003 0301 	and.w	r3, r3, #1
 810596a:	2b00      	cmp	r3, #0
 810596c:	d06e      	beq.n	8105a4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	4a69      	ldr	r2, [pc, #420]	; (8105b18 <HAL_DMA_IRQHandler+0x3f8>)
 8105974:	4293      	cmp	r3, r2
 8105976:	d04a      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	4a67      	ldr	r2, [pc, #412]	; (8105b1c <HAL_DMA_IRQHandler+0x3fc>)
 810597e:	4293      	cmp	r3, r2
 8105980:	d045      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	4a66      	ldr	r2, [pc, #408]	; (8105b20 <HAL_DMA_IRQHandler+0x400>)
 8105988:	4293      	cmp	r3, r2
 810598a:	d040      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	4a64      	ldr	r2, [pc, #400]	; (8105b24 <HAL_DMA_IRQHandler+0x404>)
 8105992:	4293      	cmp	r3, r2
 8105994:	d03b      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	4a63      	ldr	r2, [pc, #396]	; (8105b28 <HAL_DMA_IRQHandler+0x408>)
 810599c:	4293      	cmp	r3, r2
 810599e:	d036      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	4a61      	ldr	r2, [pc, #388]	; (8105b2c <HAL_DMA_IRQHandler+0x40c>)
 81059a6:	4293      	cmp	r3, r2
 81059a8:	d031      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	4a60      	ldr	r2, [pc, #384]	; (8105b30 <HAL_DMA_IRQHandler+0x410>)
 81059b0:	4293      	cmp	r3, r2
 81059b2:	d02c      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	4a5e      	ldr	r2, [pc, #376]	; (8105b34 <HAL_DMA_IRQHandler+0x414>)
 81059ba:	4293      	cmp	r3, r2
 81059bc:	d027      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	4a5d      	ldr	r2, [pc, #372]	; (8105b38 <HAL_DMA_IRQHandler+0x418>)
 81059c4:	4293      	cmp	r3, r2
 81059c6:	d022      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	4a5b      	ldr	r2, [pc, #364]	; (8105b3c <HAL_DMA_IRQHandler+0x41c>)
 81059ce:	4293      	cmp	r3, r2
 81059d0:	d01d      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	4a5a      	ldr	r2, [pc, #360]	; (8105b40 <HAL_DMA_IRQHandler+0x420>)
 81059d8:	4293      	cmp	r3, r2
 81059da:	d018      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	4a58      	ldr	r2, [pc, #352]	; (8105b44 <HAL_DMA_IRQHandler+0x424>)
 81059e2:	4293      	cmp	r3, r2
 81059e4:	d013      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	4a57      	ldr	r2, [pc, #348]	; (8105b48 <HAL_DMA_IRQHandler+0x428>)
 81059ec:	4293      	cmp	r3, r2
 81059ee:	d00e      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	681b      	ldr	r3, [r3, #0]
 81059f4:	4a55      	ldr	r2, [pc, #340]	; (8105b4c <HAL_DMA_IRQHandler+0x42c>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	d009      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4a54      	ldr	r2, [pc, #336]	; (8105b50 <HAL_DMA_IRQHandler+0x430>)
 8105a00:	4293      	cmp	r3, r2
 8105a02:	d004      	beq.n	8105a0e <HAL_DMA_IRQHandler+0x2ee>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	4a52      	ldr	r2, [pc, #328]	; (8105b54 <HAL_DMA_IRQHandler+0x434>)
 8105a0a:	4293      	cmp	r3, r2
 8105a0c:	d10a      	bne.n	8105a24 <HAL_DMA_IRQHandler+0x304>
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	695b      	ldr	r3, [r3, #20]
 8105a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	bf14      	ite	ne
 8105a1c:	2301      	movne	r3, #1
 8105a1e:	2300      	moveq	r3, #0
 8105a20:	b2db      	uxtb	r3, r3
 8105a22:	e003      	b.n	8105a2c <HAL_DMA_IRQHandler+0x30c>
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	681b      	ldr	r3, [r3, #0]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	2300      	movs	r3, #0
 8105a2c:	2b00      	cmp	r3, #0
 8105a2e:	d00d      	beq.n	8105a4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105a30:	687b      	ldr	r3, [r7, #4]
 8105a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a34:	f003 031f 	and.w	r3, r3, #31
 8105a38:	2201      	movs	r2, #1
 8105a3a:	409a      	lsls	r2, r3
 8105a3c:	6a3b      	ldr	r3, [r7, #32]
 8105a3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a44:	f043 0202 	orr.w	r2, r3, #2
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a50:	f003 031f 	and.w	r3, r3, #31
 8105a54:	2204      	movs	r2, #4
 8105a56:	409a      	lsls	r2, r3
 8105a58:	69bb      	ldr	r3, [r7, #24]
 8105a5a:	4013      	ands	r3, r2
 8105a5c:	2b00      	cmp	r3, #0
 8105a5e:	f000 808f 	beq.w	8105b80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	4a2c      	ldr	r2, [pc, #176]	; (8105b18 <HAL_DMA_IRQHandler+0x3f8>)
 8105a68:	4293      	cmp	r3, r2
 8105a6a:	d04a      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	681b      	ldr	r3, [r3, #0]
 8105a70:	4a2a      	ldr	r2, [pc, #168]	; (8105b1c <HAL_DMA_IRQHandler+0x3fc>)
 8105a72:	4293      	cmp	r3, r2
 8105a74:	d045      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	4a29      	ldr	r2, [pc, #164]	; (8105b20 <HAL_DMA_IRQHandler+0x400>)
 8105a7c:	4293      	cmp	r3, r2
 8105a7e:	d040      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	4a27      	ldr	r2, [pc, #156]	; (8105b24 <HAL_DMA_IRQHandler+0x404>)
 8105a86:	4293      	cmp	r3, r2
 8105a88:	d03b      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	4a26      	ldr	r2, [pc, #152]	; (8105b28 <HAL_DMA_IRQHandler+0x408>)
 8105a90:	4293      	cmp	r3, r2
 8105a92:	d036      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	4a24      	ldr	r2, [pc, #144]	; (8105b2c <HAL_DMA_IRQHandler+0x40c>)
 8105a9a:	4293      	cmp	r3, r2
 8105a9c:	d031      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	4a23      	ldr	r2, [pc, #140]	; (8105b30 <HAL_DMA_IRQHandler+0x410>)
 8105aa4:	4293      	cmp	r3, r2
 8105aa6:	d02c      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	4a21      	ldr	r2, [pc, #132]	; (8105b34 <HAL_DMA_IRQHandler+0x414>)
 8105aae:	4293      	cmp	r3, r2
 8105ab0:	d027      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	4a20      	ldr	r2, [pc, #128]	; (8105b38 <HAL_DMA_IRQHandler+0x418>)
 8105ab8:	4293      	cmp	r3, r2
 8105aba:	d022      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	681b      	ldr	r3, [r3, #0]
 8105ac0:	4a1e      	ldr	r2, [pc, #120]	; (8105b3c <HAL_DMA_IRQHandler+0x41c>)
 8105ac2:	4293      	cmp	r3, r2
 8105ac4:	d01d      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	4a1d      	ldr	r2, [pc, #116]	; (8105b40 <HAL_DMA_IRQHandler+0x420>)
 8105acc:	4293      	cmp	r3, r2
 8105ace:	d018      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105ad0:	687b      	ldr	r3, [r7, #4]
 8105ad2:	681b      	ldr	r3, [r3, #0]
 8105ad4:	4a1b      	ldr	r2, [pc, #108]	; (8105b44 <HAL_DMA_IRQHandler+0x424>)
 8105ad6:	4293      	cmp	r3, r2
 8105ad8:	d013      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	4a1a      	ldr	r2, [pc, #104]	; (8105b48 <HAL_DMA_IRQHandler+0x428>)
 8105ae0:	4293      	cmp	r3, r2
 8105ae2:	d00e      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	4a18      	ldr	r2, [pc, #96]	; (8105b4c <HAL_DMA_IRQHandler+0x42c>)
 8105aea:	4293      	cmp	r3, r2
 8105aec:	d009      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	681b      	ldr	r3, [r3, #0]
 8105af2:	4a17      	ldr	r2, [pc, #92]	; (8105b50 <HAL_DMA_IRQHandler+0x430>)
 8105af4:	4293      	cmp	r3, r2
 8105af6:	d004      	beq.n	8105b02 <HAL_DMA_IRQHandler+0x3e2>
 8105af8:	687b      	ldr	r3, [r7, #4]
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	4a15      	ldr	r2, [pc, #84]	; (8105b54 <HAL_DMA_IRQHandler+0x434>)
 8105afe:	4293      	cmp	r3, r2
 8105b00:	d12a      	bne.n	8105b58 <HAL_DMA_IRQHandler+0x438>
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	681b      	ldr	r3, [r3, #0]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	f003 0302 	and.w	r3, r3, #2
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	bf14      	ite	ne
 8105b10:	2301      	movne	r3, #1
 8105b12:	2300      	moveq	r3, #0
 8105b14:	b2db      	uxtb	r3, r3
 8105b16:	e023      	b.n	8105b60 <HAL_DMA_IRQHandler+0x440>
 8105b18:	40020010 	.word	0x40020010
 8105b1c:	40020028 	.word	0x40020028
 8105b20:	40020040 	.word	0x40020040
 8105b24:	40020058 	.word	0x40020058
 8105b28:	40020070 	.word	0x40020070
 8105b2c:	40020088 	.word	0x40020088
 8105b30:	400200a0 	.word	0x400200a0
 8105b34:	400200b8 	.word	0x400200b8
 8105b38:	40020410 	.word	0x40020410
 8105b3c:	40020428 	.word	0x40020428
 8105b40:	40020440 	.word	0x40020440
 8105b44:	40020458 	.word	0x40020458
 8105b48:	40020470 	.word	0x40020470
 8105b4c:	40020488 	.word	0x40020488
 8105b50:	400204a0 	.word	0x400204a0
 8105b54:	400204b8 	.word	0x400204b8
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	2300      	movs	r3, #0
 8105b60:	2b00      	cmp	r3, #0
 8105b62:	d00d      	beq.n	8105b80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b68:	f003 031f 	and.w	r3, r3, #31
 8105b6c:	2204      	movs	r2, #4
 8105b6e:	409a      	lsls	r2, r3
 8105b70:	6a3b      	ldr	r3, [r7, #32]
 8105b72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b78:	f043 0204 	orr.w	r2, r3, #4
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b84:	f003 031f 	and.w	r3, r3, #31
 8105b88:	2210      	movs	r2, #16
 8105b8a:	409a      	lsls	r2, r3
 8105b8c:	69bb      	ldr	r3, [r7, #24]
 8105b8e:	4013      	ands	r3, r2
 8105b90:	2b00      	cmp	r3, #0
 8105b92:	f000 80a6 	beq.w	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	4a85      	ldr	r2, [pc, #532]	; (8105db0 <HAL_DMA_IRQHandler+0x690>)
 8105b9c:	4293      	cmp	r3, r2
 8105b9e:	d04a      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	681b      	ldr	r3, [r3, #0]
 8105ba4:	4a83      	ldr	r2, [pc, #524]	; (8105db4 <HAL_DMA_IRQHandler+0x694>)
 8105ba6:	4293      	cmp	r3, r2
 8105ba8:	d045      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	681b      	ldr	r3, [r3, #0]
 8105bae:	4a82      	ldr	r2, [pc, #520]	; (8105db8 <HAL_DMA_IRQHandler+0x698>)
 8105bb0:	4293      	cmp	r3, r2
 8105bb2:	d040      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	4a80      	ldr	r2, [pc, #512]	; (8105dbc <HAL_DMA_IRQHandler+0x69c>)
 8105bba:	4293      	cmp	r3, r2
 8105bbc:	d03b      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	681b      	ldr	r3, [r3, #0]
 8105bc2:	4a7f      	ldr	r2, [pc, #508]	; (8105dc0 <HAL_DMA_IRQHandler+0x6a0>)
 8105bc4:	4293      	cmp	r3, r2
 8105bc6:	d036      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	681b      	ldr	r3, [r3, #0]
 8105bcc:	4a7d      	ldr	r2, [pc, #500]	; (8105dc4 <HAL_DMA_IRQHandler+0x6a4>)
 8105bce:	4293      	cmp	r3, r2
 8105bd0:	d031      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	681b      	ldr	r3, [r3, #0]
 8105bd6:	4a7c      	ldr	r2, [pc, #496]	; (8105dc8 <HAL_DMA_IRQHandler+0x6a8>)
 8105bd8:	4293      	cmp	r3, r2
 8105bda:	d02c      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	4a7a      	ldr	r2, [pc, #488]	; (8105dcc <HAL_DMA_IRQHandler+0x6ac>)
 8105be2:	4293      	cmp	r3, r2
 8105be4:	d027      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	4a79      	ldr	r2, [pc, #484]	; (8105dd0 <HAL_DMA_IRQHandler+0x6b0>)
 8105bec:	4293      	cmp	r3, r2
 8105bee:	d022      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bf0:	687b      	ldr	r3, [r7, #4]
 8105bf2:	681b      	ldr	r3, [r3, #0]
 8105bf4:	4a77      	ldr	r2, [pc, #476]	; (8105dd4 <HAL_DMA_IRQHandler+0x6b4>)
 8105bf6:	4293      	cmp	r3, r2
 8105bf8:	d01d      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	681b      	ldr	r3, [r3, #0]
 8105bfe:	4a76      	ldr	r2, [pc, #472]	; (8105dd8 <HAL_DMA_IRQHandler+0x6b8>)
 8105c00:	4293      	cmp	r3, r2
 8105c02:	d018      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105c04:	687b      	ldr	r3, [r7, #4]
 8105c06:	681b      	ldr	r3, [r3, #0]
 8105c08:	4a74      	ldr	r2, [pc, #464]	; (8105ddc <HAL_DMA_IRQHandler+0x6bc>)
 8105c0a:	4293      	cmp	r3, r2
 8105c0c:	d013      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	4a73      	ldr	r2, [pc, #460]	; (8105de0 <HAL_DMA_IRQHandler+0x6c0>)
 8105c14:	4293      	cmp	r3, r2
 8105c16:	d00e      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	681b      	ldr	r3, [r3, #0]
 8105c1c:	4a71      	ldr	r2, [pc, #452]	; (8105de4 <HAL_DMA_IRQHandler+0x6c4>)
 8105c1e:	4293      	cmp	r3, r2
 8105c20:	d009      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	681b      	ldr	r3, [r3, #0]
 8105c26:	4a70      	ldr	r2, [pc, #448]	; (8105de8 <HAL_DMA_IRQHandler+0x6c8>)
 8105c28:	4293      	cmp	r3, r2
 8105c2a:	d004      	beq.n	8105c36 <HAL_DMA_IRQHandler+0x516>
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	681b      	ldr	r3, [r3, #0]
 8105c30:	4a6e      	ldr	r2, [pc, #440]	; (8105dec <HAL_DMA_IRQHandler+0x6cc>)
 8105c32:	4293      	cmp	r3, r2
 8105c34:	d10a      	bne.n	8105c4c <HAL_DMA_IRQHandler+0x52c>
 8105c36:	687b      	ldr	r3, [r7, #4]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	f003 0308 	and.w	r3, r3, #8
 8105c40:	2b00      	cmp	r3, #0
 8105c42:	bf14      	ite	ne
 8105c44:	2301      	movne	r3, #1
 8105c46:	2300      	moveq	r3, #0
 8105c48:	b2db      	uxtb	r3, r3
 8105c4a:	e009      	b.n	8105c60 <HAL_DMA_IRQHandler+0x540>
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	681b      	ldr	r3, [r3, #0]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	f003 0304 	and.w	r3, r3, #4
 8105c56:	2b00      	cmp	r3, #0
 8105c58:	bf14      	ite	ne
 8105c5a:	2301      	movne	r3, #1
 8105c5c:	2300      	moveq	r3, #0
 8105c5e:	b2db      	uxtb	r3, r3
 8105c60:	2b00      	cmp	r3, #0
 8105c62:	d03e      	beq.n	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c68:	f003 031f 	and.w	r3, r3, #31
 8105c6c:	2210      	movs	r2, #16
 8105c6e:	409a      	lsls	r2, r3
 8105c70:	6a3b      	ldr	r3, [r7, #32]
 8105c72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	681b      	ldr	r3, [r3, #0]
 8105c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105c7e:	2b00      	cmp	r3, #0
 8105c80:	d018      	beq.n	8105cb4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105c8c:	2b00      	cmp	r3, #0
 8105c8e:	d108      	bne.n	8105ca2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c94:	2b00      	cmp	r3, #0
 8105c96:	d024      	beq.n	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c9c:	6878      	ldr	r0, [r7, #4]
 8105c9e:	4798      	blx	r3
 8105ca0:	e01f      	b.n	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ca6:	2b00      	cmp	r3, #0
 8105ca8:	d01b      	beq.n	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105cae:	6878      	ldr	r0, [r7, #4]
 8105cb0:	4798      	blx	r3
 8105cb2:	e016      	b.n	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d107      	bne.n	8105cd2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	681a      	ldr	r2, [r3, #0]
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	f022 0208 	bic.w	r2, r2, #8
 8105cd0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	d003      	beq.n	8105ce2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105cda:	687b      	ldr	r3, [r7, #4]
 8105cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105cde:	6878      	ldr	r0, [r7, #4]
 8105ce0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ce6:	f003 031f 	and.w	r3, r3, #31
 8105cea:	2220      	movs	r2, #32
 8105cec:	409a      	lsls	r2, r3
 8105cee:	69bb      	ldr	r3, [r7, #24]
 8105cf0:	4013      	ands	r3, r2
 8105cf2:	2b00      	cmp	r3, #0
 8105cf4:	f000 8110 	beq.w	8105f18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	4a2c      	ldr	r2, [pc, #176]	; (8105db0 <HAL_DMA_IRQHandler+0x690>)
 8105cfe:	4293      	cmp	r3, r2
 8105d00:	d04a      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	4a2b      	ldr	r2, [pc, #172]	; (8105db4 <HAL_DMA_IRQHandler+0x694>)
 8105d08:	4293      	cmp	r3, r2
 8105d0a:	d045      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	4a29      	ldr	r2, [pc, #164]	; (8105db8 <HAL_DMA_IRQHandler+0x698>)
 8105d12:	4293      	cmp	r3, r2
 8105d14:	d040      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	4a28      	ldr	r2, [pc, #160]	; (8105dbc <HAL_DMA_IRQHandler+0x69c>)
 8105d1c:	4293      	cmp	r3, r2
 8105d1e:	d03b      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	681b      	ldr	r3, [r3, #0]
 8105d24:	4a26      	ldr	r2, [pc, #152]	; (8105dc0 <HAL_DMA_IRQHandler+0x6a0>)
 8105d26:	4293      	cmp	r3, r2
 8105d28:	d036      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	4a25      	ldr	r2, [pc, #148]	; (8105dc4 <HAL_DMA_IRQHandler+0x6a4>)
 8105d30:	4293      	cmp	r3, r2
 8105d32:	d031      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	4a23      	ldr	r2, [pc, #140]	; (8105dc8 <HAL_DMA_IRQHandler+0x6a8>)
 8105d3a:	4293      	cmp	r3, r2
 8105d3c:	d02c      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d3e:	687b      	ldr	r3, [r7, #4]
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	4a22      	ldr	r2, [pc, #136]	; (8105dcc <HAL_DMA_IRQHandler+0x6ac>)
 8105d44:	4293      	cmp	r3, r2
 8105d46:	d027      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	4a20      	ldr	r2, [pc, #128]	; (8105dd0 <HAL_DMA_IRQHandler+0x6b0>)
 8105d4e:	4293      	cmp	r3, r2
 8105d50:	d022      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	681b      	ldr	r3, [r3, #0]
 8105d56:	4a1f      	ldr	r2, [pc, #124]	; (8105dd4 <HAL_DMA_IRQHandler+0x6b4>)
 8105d58:	4293      	cmp	r3, r2
 8105d5a:	d01d      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	4a1d      	ldr	r2, [pc, #116]	; (8105dd8 <HAL_DMA_IRQHandler+0x6b8>)
 8105d62:	4293      	cmp	r3, r2
 8105d64:	d018      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	4a1c      	ldr	r2, [pc, #112]	; (8105ddc <HAL_DMA_IRQHandler+0x6bc>)
 8105d6c:	4293      	cmp	r3, r2
 8105d6e:	d013      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	4a1a      	ldr	r2, [pc, #104]	; (8105de0 <HAL_DMA_IRQHandler+0x6c0>)
 8105d76:	4293      	cmp	r3, r2
 8105d78:	d00e      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	681b      	ldr	r3, [r3, #0]
 8105d7e:	4a19      	ldr	r2, [pc, #100]	; (8105de4 <HAL_DMA_IRQHandler+0x6c4>)
 8105d80:	4293      	cmp	r3, r2
 8105d82:	d009      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	4a17      	ldr	r2, [pc, #92]	; (8105de8 <HAL_DMA_IRQHandler+0x6c8>)
 8105d8a:	4293      	cmp	r3, r2
 8105d8c:	d004      	beq.n	8105d98 <HAL_DMA_IRQHandler+0x678>
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	4a16      	ldr	r2, [pc, #88]	; (8105dec <HAL_DMA_IRQHandler+0x6cc>)
 8105d94:	4293      	cmp	r3, r2
 8105d96:	d12b      	bne.n	8105df0 <HAL_DMA_IRQHandler+0x6d0>
 8105d98:	687b      	ldr	r3, [r7, #4]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	f003 0310 	and.w	r3, r3, #16
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	bf14      	ite	ne
 8105da6:	2301      	movne	r3, #1
 8105da8:	2300      	moveq	r3, #0
 8105daa:	b2db      	uxtb	r3, r3
 8105dac:	e02a      	b.n	8105e04 <HAL_DMA_IRQHandler+0x6e4>
 8105dae:	bf00      	nop
 8105db0:	40020010 	.word	0x40020010
 8105db4:	40020028 	.word	0x40020028
 8105db8:	40020040 	.word	0x40020040
 8105dbc:	40020058 	.word	0x40020058
 8105dc0:	40020070 	.word	0x40020070
 8105dc4:	40020088 	.word	0x40020088
 8105dc8:	400200a0 	.word	0x400200a0
 8105dcc:	400200b8 	.word	0x400200b8
 8105dd0:	40020410 	.word	0x40020410
 8105dd4:	40020428 	.word	0x40020428
 8105dd8:	40020440 	.word	0x40020440
 8105ddc:	40020458 	.word	0x40020458
 8105de0:	40020470 	.word	0x40020470
 8105de4:	40020488 	.word	0x40020488
 8105de8:	400204a0 	.word	0x400204a0
 8105dec:	400204b8 	.word	0x400204b8
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	681b      	ldr	r3, [r3, #0]
 8105df6:	f003 0302 	and.w	r3, r3, #2
 8105dfa:	2b00      	cmp	r3, #0
 8105dfc:	bf14      	ite	ne
 8105dfe:	2301      	movne	r3, #1
 8105e00:	2300      	moveq	r3, #0
 8105e02:	b2db      	uxtb	r3, r3
 8105e04:	2b00      	cmp	r3, #0
 8105e06:	f000 8087 	beq.w	8105f18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e0e:	f003 031f 	and.w	r3, r3, #31
 8105e12:	2220      	movs	r2, #32
 8105e14:	409a      	lsls	r2, r3
 8105e16:	6a3b      	ldr	r3, [r7, #32]
 8105e18:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105e20:	b2db      	uxtb	r3, r3
 8105e22:	2b04      	cmp	r3, #4
 8105e24:	d139      	bne.n	8105e9a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	681a      	ldr	r2, [r3, #0]
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	f022 0216 	bic.w	r2, r2, #22
 8105e34:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105e36:	687b      	ldr	r3, [r7, #4]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	695a      	ldr	r2, [r3, #20]
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	681b      	ldr	r3, [r3, #0]
 8105e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105e44:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e4a:	2b00      	cmp	r3, #0
 8105e4c:	d103      	bne.n	8105e56 <HAL_DMA_IRQHandler+0x736>
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105e52:	2b00      	cmp	r3, #0
 8105e54:	d007      	beq.n	8105e66 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	681b      	ldr	r3, [r3, #0]
 8105e5a:	681a      	ldr	r2, [r3, #0]
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	f022 0208 	bic.w	r2, r2, #8
 8105e64:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e6a:	f003 031f 	and.w	r3, r3, #31
 8105e6e:	223f      	movs	r2, #63	; 0x3f
 8105e70:	409a      	lsls	r2, r3
 8105e72:	6a3b      	ldr	r3, [r7, #32]
 8105e74:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	2200      	movs	r2, #0
 8105e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	2201      	movs	r2, #1
 8105e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	f000 834a 	beq.w	8106524 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e94:	6878      	ldr	r0, [r7, #4]
 8105e96:	4798      	blx	r3
          }
          return;
 8105e98:	e344      	b.n	8106524 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	681b      	ldr	r3, [r3, #0]
 8105ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105ea4:	2b00      	cmp	r3, #0
 8105ea6:	d018      	beq.n	8105eda <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	681b      	ldr	r3, [r3, #0]
 8105eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105eb2:	2b00      	cmp	r3, #0
 8105eb4:	d108      	bne.n	8105ec8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105eba:	2b00      	cmp	r3, #0
 8105ebc:	d02c      	beq.n	8105f18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105ec2:	6878      	ldr	r0, [r7, #4]
 8105ec4:	4798      	blx	r3
 8105ec6:	e027      	b.n	8105f18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ecc:	2b00      	cmp	r3, #0
 8105ece:	d023      	beq.n	8105f18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ed4:	6878      	ldr	r0, [r7, #4]
 8105ed6:	4798      	blx	r3
 8105ed8:	e01e      	b.n	8105f18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	681b      	ldr	r3, [r3, #0]
 8105ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	d10f      	bne.n	8105f08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	681a      	ldr	r2, [r3, #0]
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	f022 0210 	bic.w	r2, r2, #16
 8105ef6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	2200      	movs	r2, #0
 8105efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	2201      	movs	r2, #1
 8105f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f0c:	2b00      	cmp	r3, #0
 8105f0e:	d003      	beq.n	8105f18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f14:	6878      	ldr	r0, [r7, #4]
 8105f16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f1c:	2b00      	cmp	r3, #0
 8105f1e:	f000 8306 	beq.w	810652e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f26:	f003 0301 	and.w	r3, r3, #1
 8105f2a:	2b00      	cmp	r3, #0
 8105f2c:	f000 8088 	beq.w	8106040 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	2204      	movs	r2, #4
 8105f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	4a7a      	ldr	r2, [pc, #488]	; (8106128 <HAL_DMA_IRQHandler+0xa08>)
 8105f3e:	4293      	cmp	r3, r2
 8105f40:	d04a      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	4a79      	ldr	r2, [pc, #484]	; (810612c <HAL_DMA_IRQHandler+0xa0c>)
 8105f48:	4293      	cmp	r3, r2
 8105f4a:	d045      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	4a77      	ldr	r2, [pc, #476]	; (8106130 <HAL_DMA_IRQHandler+0xa10>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d040      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	4a76      	ldr	r2, [pc, #472]	; (8106134 <HAL_DMA_IRQHandler+0xa14>)
 8105f5c:	4293      	cmp	r3, r2
 8105f5e:	d03b      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	681b      	ldr	r3, [r3, #0]
 8105f64:	4a74      	ldr	r2, [pc, #464]	; (8106138 <HAL_DMA_IRQHandler+0xa18>)
 8105f66:	4293      	cmp	r3, r2
 8105f68:	d036      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	681b      	ldr	r3, [r3, #0]
 8105f6e:	4a73      	ldr	r2, [pc, #460]	; (810613c <HAL_DMA_IRQHandler+0xa1c>)
 8105f70:	4293      	cmp	r3, r2
 8105f72:	d031      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	4a71      	ldr	r2, [pc, #452]	; (8106140 <HAL_DMA_IRQHandler+0xa20>)
 8105f7a:	4293      	cmp	r3, r2
 8105f7c:	d02c      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	4a70      	ldr	r2, [pc, #448]	; (8106144 <HAL_DMA_IRQHandler+0xa24>)
 8105f84:	4293      	cmp	r3, r2
 8105f86:	d027      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	4a6e      	ldr	r2, [pc, #440]	; (8106148 <HAL_DMA_IRQHandler+0xa28>)
 8105f8e:	4293      	cmp	r3, r2
 8105f90:	d022      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	4a6d      	ldr	r2, [pc, #436]	; (810614c <HAL_DMA_IRQHandler+0xa2c>)
 8105f98:	4293      	cmp	r3, r2
 8105f9a:	d01d      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	681b      	ldr	r3, [r3, #0]
 8105fa0:	4a6b      	ldr	r2, [pc, #428]	; (8106150 <HAL_DMA_IRQHandler+0xa30>)
 8105fa2:	4293      	cmp	r3, r2
 8105fa4:	d018      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	4a6a      	ldr	r2, [pc, #424]	; (8106154 <HAL_DMA_IRQHandler+0xa34>)
 8105fac:	4293      	cmp	r3, r2
 8105fae:	d013      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	4a68      	ldr	r2, [pc, #416]	; (8106158 <HAL_DMA_IRQHandler+0xa38>)
 8105fb6:	4293      	cmp	r3, r2
 8105fb8:	d00e      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	4a67      	ldr	r2, [pc, #412]	; (810615c <HAL_DMA_IRQHandler+0xa3c>)
 8105fc0:	4293      	cmp	r3, r2
 8105fc2:	d009      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	4a65      	ldr	r2, [pc, #404]	; (8106160 <HAL_DMA_IRQHandler+0xa40>)
 8105fca:	4293      	cmp	r3, r2
 8105fcc:	d004      	beq.n	8105fd8 <HAL_DMA_IRQHandler+0x8b8>
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	681b      	ldr	r3, [r3, #0]
 8105fd2:	4a64      	ldr	r2, [pc, #400]	; (8106164 <HAL_DMA_IRQHandler+0xa44>)
 8105fd4:	4293      	cmp	r3, r2
 8105fd6:	d108      	bne.n	8105fea <HAL_DMA_IRQHandler+0x8ca>
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	681a      	ldr	r2, [r3, #0]
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	681b      	ldr	r3, [r3, #0]
 8105fe2:	f022 0201 	bic.w	r2, r2, #1
 8105fe6:	601a      	str	r2, [r3, #0]
 8105fe8:	e007      	b.n	8105ffa <HAL_DMA_IRQHandler+0x8da>
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	681b      	ldr	r3, [r3, #0]
 8105fee:	681a      	ldr	r2, [r3, #0]
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	f022 0201 	bic.w	r2, r2, #1
 8105ff8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8105ffa:	68fb      	ldr	r3, [r7, #12]
 8105ffc:	3301      	adds	r3, #1
 8105ffe:	60fb      	str	r3, [r7, #12]
 8106000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106002:	429a      	cmp	r2, r3
 8106004:	d307      	bcc.n	8106016 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8106006:	687b      	ldr	r3, [r7, #4]
 8106008:	681b      	ldr	r3, [r3, #0]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	f003 0301 	and.w	r3, r3, #1
 8106010:	2b00      	cmp	r3, #0
 8106012:	d1f2      	bne.n	8105ffa <HAL_DMA_IRQHandler+0x8da>
 8106014:	e000      	b.n	8106018 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8106016:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	2200      	movs	r2, #0
 810601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	f003 0301 	and.w	r3, r3, #1
 810602a:	2b00      	cmp	r3, #0
 810602c:	d004      	beq.n	8106038 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	2203      	movs	r2, #3
 8106032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8106036:	e003      	b.n	8106040 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8106038:	687b      	ldr	r3, [r7, #4]
 810603a:	2201      	movs	r2, #1
 810603c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106044:	2b00      	cmp	r3, #0
 8106046:	f000 8272 	beq.w	810652e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810604e:	6878      	ldr	r0, [r7, #4]
 8106050:	4798      	blx	r3
 8106052:	e26c      	b.n	810652e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	4a43      	ldr	r2, [pc, #268]	; (8106168 <HAL_DMA_IRQHandler+0xa48>)
 810605a:	4293      	cmp	r3, r2
 810605c:	d022      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	4a42      	ldr	r2, [pc, #264]	; (810616c <HAL_DMA_IRQHandler+0xa4c>)
 8106064:	4293      	cmp	r3, r2
 8106066:	d01d      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	4a40      	ldr	r2, [pc, #256]	; (8106170 <HAL_DMA_IRQHandler+0xa50>)
 810606e:	4293      	cmp	r3, r2
 8106070:	d018      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	4a3f      	ldr	r2, [pc, #252]	; (8106174 <HAL_DMA_IRQHandler+0xa54>)
 8106078:	4293      	cmp	r3, r2
 810607a:	d013      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	4a3d      	ldr	r2, [pc, #244]	; (8106178 <HAL_DMA_IRQHandler+0xa58>)
 8106082:	4293      	cmp	r3, r2
 8106084:	d00e      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	681b      	ldr	r3, [r3, #0]
 810608a:	4a3c      	ldr	r2, [pc, #240]	; (810617c <HAL_DMA_IRQHandler+0xa5c>)
 810608c:	4293      	cmp	r3, r2
 810608e:	d009      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	4a3a      	ldr	r2, [pc, #232]	; (8106180 <HAL_DMA_IRQHandler+0xa60>)
 8106096:	4293      	cmp	r3, r2
 8106098:	d004      	beq.n	81060a4 <HAL_DMA_IRQHandler+0x984>
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	4a39      	ldr	r2, [pc, #228]	; (8106184 <HAL_DMA_IRQHandler+0xa64>)
 81060a0:	4293      	cmp	r3, r2
 81060a2:	d101      	bne.n	81060a8 <HAL_DMA_IRQHandler+0x988>
 81060a4:	2301      	movs	r3, #1
 81060a6:	e000      	b.n	81060aa <HAL_DMA_IRQHandler+0x98a>
 81060a8:	2300      	movs	r3, #0
 81060aa:	2b00      	cmp	r3, #0
 81060ac:	f000 823f 	beq.w	810652e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81060b0:	687b      	ldr	r3, [r7, #4]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060bc:	f003 031f 	and.w	r3, r3, #31
 81060c0:	2204      	movs	r2, #4
 81060c2:	409a      	lsls	r2, r3
 81060c4:	697b      	ldr	r3, [r7, #20]
 81060c6:	4013      	ands	r3, r2
 81060c8:	2b00      	cmp	r3, #0
 81060ca:	f000 80cd 	beq.w	8106268 <HAL_DMA_IRQHandler+0xb48>
 81060ce:	693b      	ldr	r3, [r7, #16]
 81060d0:	f003 0304 	and.w	r3, r3, #4
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	f000 80c7 	beq.w	8106268 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060de:	f003 031f 	and.w	r3, r3, #31
 81060e2:	2204      	movs	r2, #4
 81060e4:	409a      	lsls	r2, r3
 81060e6:	69fb      	ldr	r3, [r7, #28]
 81060e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81060ea:	693b      	ldr	r3, [r7, #16]
 81060ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81060f0:	2b00      	cmp	r3, #0
 81060f2:	d049      	beq.n	8106188 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81060f4:	693b      	ldr	r3, [r7, #16]
 81060f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81060fa:	2b00      	cmp	r3, #0
 81060fc:	d109      	bne.n	8106112 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106102:	2b00      	cmp	r3, #0
 8106104:	f000 8210 	beq.w	8106528 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810610c:	6878      	ldr	r0, [r7, #4]
 810610e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106110:	e20a      	b.n	8106528 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106116:	2b00      	cmp	r3, #0
 8106118:	f000 8206 	beq.w	8106528 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106120:	6878      	ldr	r0, [r7, #4]
 8106122:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106124:	e200      	b.n	8106528 <HAL_DMA_IRQHandler+0xe08>
 8106126:	bf00      	nop
 8106128:	40020010 	.word	0x40020010
 810612c:	40020028 	.word	0x40020028
 8106130:	40020040 	.word	0x40020040
 8106134:	40020058 	.word	0x40020058
 8106138:	40020070 	.word	0x40020070
 810613c:	40020088 	.word	0x40020088
 8106140:	400200a0 	.word	0x400200a0
 8106144:	400200b8 	.word	0x400200b8
 8106148:	40020410 	.word	0x40020410
 810614c:	40020428 	.word	0x40020428
 8106150:	40020440 	.word	0x40020440
 8106154:	40020458 	.word	0x40020458
 8106158:	40020470 	.word	0x40020470
 810615c:	40020488 	.word	0x40020488
 8106160:	400204a0 	.word	0x400204a0
 8106164:	400204b8 	.word	0x400204b8
 8106168:	58025408 	.word	0x58025408
 810616c:	5802541c 	.word	0x5802541c
 8106170:	58025430 	.word	0x58025430
 8106174:	58025444 	.word	0x58025444
 8106178:	58025458 	.word	0x58025458
 810617c:	5802546c 	.word	0x5802546c
 8106180:	58025480 	.word	0x58025480
 8106184:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106188:	693b      	ldr	r3, [r7, #16]
 810618a:	f003 0320 	and.w	r3, r3, #32
 810618e:	2b00      	cmp	r3, #0
 8106190:	d160      	bne.n	8106254 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8106192:	687b      	ldr	r3, [r7, #4]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	4a8c      	ldr	r2, [pc, #560]	; (81063c8 <HAL_DMA_IRQHandler+0xca8>)
 8106198:	4293      	cmp	r3, r2
 810619a:	d04a      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	4a8a      	ldr	r2, [pc, #552]	; (81063cc <HAL_DMA_IRQHandler+0xcac>)
 81061a2:	4293      	cmp	r3, r2
 81061a4:	d045      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	681b      	ldr	r3, [r3, #0]
 81061aa:	4a89      	ldr	r2, [pc, #548]	; (81063d0 <HAL_DMA_IRQHandler+0xcb0>)
 81061ac:	4293      	cmp	r3, r2
 81061ae:	d040      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a87      	ldr	r2, [pc, #540]	; (81063d4 <HAL_DMA_IRQHandler+0xcb4>)
 81061b6:	4293      	cmp	r3, r2
 81061b8:	d03b      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	4a86      	ldr	r2, [pc, #536]	; (81063d8 <HAL_DMA_IRQHandler+0xcb8>)
 81061c0:	4293      	cmp	r3, r2
 81061c2:	d036      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	4a84      	ldr	r2, [pc, #528]	; (81063dc <HAL_DMA_IRQHandler+0xcbc>)
 81061ca:	4293      	cmp	r3, r2
 81061cc:	d031      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	681b      	ldr	r3, [r3, #0]
 81061d2:	4a83      	ldr	r2, [pc, #524]	; (81063e0 <HAL_DMA_IRQHandler+0xcc0>)
 81061d4:	4293      	cmp	r3, r2
 81061d6:	d02c      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	4a81      	ldr	r2, [pc, #516]	; (81063e4 <HAL_DMA_IRQHandler+0xcc4>)
 81061de:	4293      	cmp	r3, r2
 81061e0:	d027      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	681b      	ldr	r3, [r3, #0]
 81061e6:	4a80      	ldr	r2, [pc, #512]	; (81063e8 <HAL_DMA_IRQHandler+0xcc8>)
 81061e8:	4293      	cmp	r3, r2
 81061ea:	d022      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	681b      	ldr	r3, [r3, #0]
 81061f0:	4a7e      	ldr	r2, [pc, #504]	; (81063ec <HAL_DMA_IRQHandler+0xccc>)
 81061f2:	4293      	cmp	r3, r2
 81061f4:	d01d      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	4a7d      	ldr	r2, [pc, #500]	; (81063f0 <HAL_DMA_IRQHandler+0xcd0>)
 81061fc:	4293      	cmp	r3, r2
 81061fe:	d018      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	4a7b      	ldr	r2, [pc, #492]	; (81063f4 <HAL_DMA_IRQHandler+0xcd4>)
 8106206:	4293      	cmp	r3, r2
 8106208:	d013      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	4a7a      	ldr	r2, [pc, #488]	; (81063f8 <HAL_DMA_IRQHandler+0xcd8>)
 8106210:	4293      	cmp	r3, r2
 8106212:	d00e      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	4a78      	ldr	r2, [pc, #480]	; (81063fc <HAL_DMA_IRQHandler+0xcdc>)
 810621a:	4293      	cmp	r3, r2
 810621c:	d009      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	4a77      	ldr	r2, [pc, #476]	; (8106400 <HAL_DMA_IRQHandler+0xce0>)
 8106224:	4293      	cmp	r3, r2
 8106226:	d004      	beq.n	8106232 <HAL_DMA_IRQHandler+0xb12>
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	4a75      	ldr	r2, [pc, #468]	; (8106404 <HAL_DMA_IRQHandler+0xce4>)
 810622e:	4293      	cmp	r3, r2
 8106230:	d108      	bne.n	8106244 <HAL_DMA_IRQHandler+0xb24>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	681a      	ldr	r2, [r3, #0]
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	681b      	ldr	r3, [r3, #0]
 810623c:	f022 0208 	bic.w	r2, r2, #8
 8106240:	601a      	str	r2, [r3, #0]
 8106242:	e007      	b.n	8106254 <HAL_DMA_IRQHandler+0xb34>
 8106244:	687b      	ldr	r3, [r7, #4]
 8106246:	681b      	ldr	r3, [r3, #0]
 8106248:	681a      	ldr	r2, [r3, #0]
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	f022 0204 	bic.w	r2, r2, #4
 8106252:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8106254:	687b      	ldr	r3, [r7, #4]
 8106256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106258:	2b00      	cmp	r3, #0
 810625a:	f000 8165 	beq.w	8106528 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106262:	6878      	ldr	r0, [r7, #4]
 8106264:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106266:	e15f      	b.n	8106528 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810626c:	f003 031f 	and.w	r3, r3, #31
 8106270:	2202      	movs	r2, #2
 8106272:	409a      	lsls	r2, r3
 8106274:	697b      	ldr	r3, [r7, #20]
 8106276:	4013      	ands	r3, r2
 8106278:	2b00      	cmp	r3, #0
 810627a:	f000 80c5 	beq.w	8106408 <HAL_DMA_IRQHandler+0xce8>
 810627e:	693b      	ldr	r3, [r7, #16]
 8106280:	f003 0302 	and.w	r3, r3, #2
 8106284:	2b00      	cmp	r3, #0
 8106286:	f000 80bf 	beq.w	8106408 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810628e:	f003 031f 	and.w	r3, r3, #31
 8106292:	2202      	movs	r2, #2
 8106294:	409a      	lsls	r2, r3
 8106296:	69fb      	ldr	r3, [r7, #28]
 8106298:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810629a:	693b      	ldr	r3, [r7, #16]
 810629c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81062a0:	2b00      	cmp	r3, #0
 81062a2:	d018      	beq.n	81062d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81062a4:	693b      	ldr	r3, [r7, #16]
 81062a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81062aa:	2b00      	cmp	r3, #0
 81062ac:	d109      	bne.n	81062c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81062b2:	2b00      	cmp	r3, #0
 81062b4:	f000 813a 	beq.w	810652c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81062bc:	6878      	ldr	r0, [r7, #4]
 81062be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81062c0:	e134      	b.n	810652c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81062c6:	2b00      	cmp	r3, #0
 81062c8:	f000 8130 	beq.w	810652c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81062d0:	6878      	ldr	r0, [r7, #4]
 81062d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81062d4:	e12a      	b.n	810652c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81062d6:	693b      	ldr	r3, [r7, #16]
 81062d8:	f003 0320 	and.w	r3, r3, #32
 81062dc:	2b00      	cmp	r3, #0
 81062de:	d168      	bne.n	81063b2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	4a38      	ldr	r2, [pc, #224]	; (81063c8 <HAL_DMA_IRQHandler+0xca8>)
 81062e6:	4293      	cmp	r3, r2
 81062e8:	d04a      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	4a37      	ldr	r2, [pc, #220]	; (81063cc <HAL_DMA_IRQHandler+0xcac>)
 81062f0:	4293      	cmp	r3, r2
 81062f2:	d045      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	681b      	ldr	r3, [r3, #0]
 81062f8:	4a35      	ldr	r2, [pc, #212]	; (81063d0 <HAL_DMA_IRQHandler+0xcb0>)
 81062fa:	4293      	cmp	r3, r2
 81062fc:	d040      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	4a34      	ldr	r2, [pc, #208]	; (81063d4 <HAL_DMA_IRQHandler+0xcb4>)
 8106304:	4293      	cmp	r3, r2
 8106306:	d03b      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	4a32      	ldr	r2, [pc, #200]	; (81063d8 <HAL_DMA_IRQHandler+0xcb8>)
 810630e:	4293      	cmp	r3, r2
 8106310:	d036      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	681b      	ldr	r3, [r3, #0]
 8106316:	4a31      	ldr	r2, [pc, #196]	; (81063dc <HAL_DMA_IRQHandler+0xcbc>)
 8106318:	4293      	cmp	r3, r2
 810631a:	d031      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4a2f      	ldr	r2, [pc, #188]	; (81063e0 <HAL_DMA_IRQHandler+0xcc0>)
 8106322:	4293      	cmp	r3, r2
 8106324:	d02c      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	4a2e      	ldr	r2, [pc, #184]	; (81063e4 <HAL_DMA_IRQHandler+0xcc4>)
 810632c:	4293      	cmp	r3, r2
 810632e:	d027      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	4a2c      	ldr	r2, [pc, #176]	; (81063e8 <HAL_DMA_IRQHandler+0xcc8>)
 8106336:	4293      	cmp	r3, r2
 8106338:	d022      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	4a2b      	ldr	r2, [pc, #172]	; (81063ec <HAL_DMA_IRQHandler+0xccc>)
 8106340:	4293      	cmp	r3, r2
 8106342:	d01d      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	4a29      	ldr	r2, [pc, #164]	; (81063f0 <HAL_DMA_IRQHandler+0xcd0>)
 810634a:	4293      	cmp	r3, r2
 810634c:	d018      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	4a28      	ldr	r2, [pc, #160]	; (81063f4 <HAL_DMA_IRQHandler+0xcd4>)
 8106354:	4293      	cmp	r3, r2
 8106356:	d013      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	4a26      	ldr	r2, [pc, #152]	; (81063f8 <HAL_DMA_IRQHandler+0xcd8>)
 810635e:	4293      	cmp	r3, r2
 8106360:	d00e      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	4a25      	ldr	r2, [pc, #148]	; (81063fc <HAL_DMA_IRQHandler+0xcdc>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d009      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	4a23      	ldr	r2, [pc, #140]	; (8106400 <HAL_DMA_IRQHandler+0xce0>)
 8106372:	4293      	cmp	r3, r2
 8106374:	d004      	beq.n	8106380 <HAL_DMA_IRQHandler+0xc60>
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	4a22      	ldr	r2, [pc, #136]	; (8106404 <HAL_DMA_IRQHandler+0xce4>)
 810637c:	4293      	cmp	r3, r2
 810637e:	d108      	bne.n	8106392 <HAL_DMA_IRQHandler+0xc72>
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	681a      	ldr	r2, [r3, #0]
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	f022 0214 	bic.w	r2, r2, #20
 810638e:	601a      	str	r2, [r3, #0]
 8106390:	e007      	b.n	81063a2 <HAL_DMA_IRQHandler+0xc82>
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	681a      	ldr	r2, [r3, #0]
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	f022 020a 	bic.w	r2, r2, #10
 81063a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	2200      	movs	r2, #0
 81063a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	2201      	movs	r2, #1
 81063ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063b6:	2b00      	cmp	r3, #0
 81063b8:	f000 80b8 	beq.w	810652c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063c0:	6878      	ldr	r0, [r7, #4]
 81063c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81063c4:	e0b2      	b.n	810652c <HAL_DMA_IRQHandler+0xe0c>
 81063c6:	bf00      	nop
 81063c8:	40020010 	.word	0x40020010
 81063cc:	40020028 	.word	0x40020028
 81063d0:	40020040 	.word	0x40020040
 81063d4:	40020058 	.word	0x40020058
 81063d8:	40020070 	.word	0x40020070
 81063dc:	40020088 	.word	0x40020088
 81063e0:	400200a0 	.word	0x400200a0
 81063e4:	400200b8 	.word	0x400200b8
 81063e8:	40020410 	.word	0x40020410
 81063ec:	40020428 	.word	0x40020428
 81063f0:	40020440 	.word	0x40020440
 81063f4:	40020458 	.word	0x40020458
 81063f8:	40020470 	.word	0x40020470
 81063fc:	40020488 	.word	0x40020488
 8106400:	400204a0 	.word	0x400204a0
 8106404:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810640c:	f003 031f 	and.w	r3, r3, #31
 8106410:	2208      	movs	r2, #8
 8106412:	409a      	lsls	r2, r3
 8106414:	697b      	ldr	r3, [r7, #20]
 8106416:	4013      	ands	r3, r2
 8106418:	2b00      	cmp	r3, #0
 810641a:	f000 8088 	beq.w	810652e <HAL_DMA_IRQHandler+0xe0e>
 810641e:	693b      	ldr	r3, [r7, #16]
 8106420:	f003 0308 	and.w	r3, r3, #8
 8106424:	2b00      	cmp	r3, #0
 8106426:	f000 8082 	beq.w	810652e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	4a41      	ldr	r2, [pc, #260]	; (8106534 <HAL_DMA_IRQHandler+0xe14>)
 8106430:	4293      	cmp	r3, r2
 8106432:	d04a      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	681b      	ldr	r3, [r3, #0]
 8106438:	4a3f      	ldr	r2, [pc, #252]	; (8106538 <HAL_DMA_IRQHandler+0xe18>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d045      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	4a3e      	ldr	r2, [pc, #248]	; (810653c <HAL_DMA_IRQHandler+0xe1c>)
 8106444:	4293      	cmp	r3, r2
 8106446:	d040      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	4a3c      	ldr	r2, [pc, #240]	; (8106540 <HAL_DMA_IRQHandler+0xe20>)
 810644e:	4293      	cmp	r3, r2
 8106450:	d03b      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	4a3b      	ldr	r2, [pc, #236]	; (8106544 <HAL_DMA_IRQHandler+0xe24>)
 8106458:	4293      	cmp	r3, r2
 810645a:	d036      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	4a39      	ldr	r2, [pc, #228]	; (8106548 <HAL_DMA_IRQHandler+0xe28>)
 8106462:	4293      	cmp	r3, r2
 8106464:	d031      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	681b      	ldr	r3, [r3, #0]
 810646a:	4a38      	ldr	r2, [pc, #224]	; (810654c <HAL_DMA_IRQHandler+0xe2c>)
 810646c:	4293      	cmp	r3, r2
 810646e:	d02c      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	4a36      	ldr	r2, [pc, #216]	; (8106550 <HAL_DMA_IRQHandler+0xe30>)
 8106476:	4293      	cmp	r3, r2
 8106478:	d027      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	681b      	ldr	r3, [r3, #0]
 810647e:	4a35      	ldr	r2, [pc, #212]	; (8106554 <HAL_DMA_IRQHandler+0xe34>)
 8106480:	4293      	cmp	r3, r2
 8106482:	d022      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	4a33      	ldr	r2, [pc, #204]	; (8106558 <HAL_DMA_IRQHandler+0xe38>)
 810648a:	4293      	cmp	r3, r2
 810648c:	d01d      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	681b      	ldr	r3, [r3, #0]
 8106492:	4a32      	ldr	r2, [pc, #200]	; (810655c <HAL_DMA_IRQHandler+0xe3c>)
 8106494:	4293      	cmp	r3, r2
 8106496:	d018      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	4a30      	ldr	r2, [pc, #192]	; (8106560 <HAL_DMA_IRQHandler+0xe40>)
 810649e:	4293      	cmp	r3, r2
 81064a0:	d013      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	4a2f      	ldr	r2, [pc, #188]	; (8106564 <HAL_DMA_IRQHandler+0xe44>)
 81064a8:	4293      	cmp	r3, r2
 81064aa:	d00e      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	4a2d      	ldr	r2, [pc, #180]	; (8106568 <HAL_DMA_IRQHandler+0xe48>)
 81064b2:	4293      	cmp	r3, r2
 81064b4:	d009      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	4a2c      	ldr	r2, [pc, #176]	; (810656c <HAL_DMA_IRQHandler+0xe4c>)
 81064bc:	4293      	cmp	r3, r2
 81064be:	d004      	beq.n	81064ca <HAL_DMA_IRQHandler+0xdaa>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	4a2a      	ldr	r2, [pc, #168]	; (8106570 <HAL_DMA_IRQHandler+0xe50>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d108      	bne.n	81064dc <HAL_DMA_IRQHandler+0xdbc>
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	681a      	ldr	r2, [r3, #0]
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	f022 021c 	bic.w	r2, r2, #28
 81064d8:	601a      	str	r2, [r3, #0]
 81064da:	e007      	b.n	81064ec <HAL_DMA_IRQHandler+0xdcc>
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	681a      	ldr	r2, [r3, #0]
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	681b      	ldr	r3, [r3, #0]
 81064e6:	f022 020e 	bic.w	r2, r2, #14
 81064ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81064f0:	f003 031f 	and.w	r3, r3, #31
 81064f4:	2201      	movs	r2, #1
 81064f6:	409a      	lsls	r2, r3
 81064f8:	69fb      	ldr	r3, [r7, #28]
 81064fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	2201      	movs	r2, #1
 8106500:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	2200      	movs	r2, #0
 8106506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	2201      	movs	r2, #1
 810650e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106516:	2b00      	cmp	r3, #0
 8106518:	d009      	beq.n	810652e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810651e:	6878      	ldr	r0, [r7, #4]
 8106520:	4798      	blx	r3
 8106522:	e004      	b.n	810652e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8106524:	bf00      	nop
 8106526:	e002      	b.n	810652e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106528:	bf00      	nop
 810652a:	e000      	b.n	810652e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810652c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 810652e:	3728      	adds	r7, #40	; 0x28
 8106530:	46bd      	mov	sp, r7
 8106532:	bd80      	pop	{r7, pc}
 8106534:	40020010 	.word	0x40020010
 8106538:	40020028 	.word	0x40020028
 810653c:	40020040 	.word	0x40020040
 8106540:	40020058 	.word	0x40020058
 8106544:	40020070 	.word	0x40020070
 8106548:	40020088 	.word	0x40020088
 810654c:	400200a0 	.word	0x400200a0
 8106550:	400200b8 	.word	0x400200b8
 8106554:	40020410 	.word	0x40020410
 8106558:	40020428 	.word	0x40020428
 810655c:	40020440 	.word	0x40020440
 8106560:	40020458 	.word	0x40020458
 8106564:	40020470 	.word	0x40020470
 8106568:	40020488 	.word	0x40020488
 810656c:	400204a0 	.word	0x400204a0
 8106570:	400204b8 	.word	0x400204b8

08106574 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8106574:	b480      	push	{r7}
 8106576:	b083      	sub	sp, #12
 8106578:	af00      	add	r7, sp, #0
 810657a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8106582:	b2db      	uxtb	r3, r3
}
 8106584:	4618      	mov	r0, r3
 8106586:	370c      	adds	r7, #12
 8106588:	46bd      	mov	sp, r7
 810658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810658e:	4770      	bx	lr

08106590 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8106590:	b480      	push	{r7}
 8106592:	b083      	sub	sp, #12
 8106594:	af00      	add	r7, sp, #0
 8106596:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 810659c:	4618      	mov	r0, r3
 810659e:	370c      	adds	r7, #12
 81065a0:	46bd      	mov	sp, r7
 81065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065a6:	4770      	bx	lr

081065a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81065a8:	b480      	push	{r7}
 81065aa:	b087      	sub	sp, #28
 81065ac:	af00      	add	r7, sp, #0
 81065ae:	60f8      	str	r0, [r7, #12]
 81065b0:	60b9      	str	r1, [r7, #8]
 81065b2:	607a      	str	r2, [r7, #4]
 81065b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81065b6:	68fb      	ldr	r3, [r7, #12]
 81065b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81065bc:	68fb      	ldr	r3, [r7, #12]
 81065be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81065c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81065c2:	68fb      	ldr	r3, [r7, #12]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	4a84      	ldr	r2, [pc, #528]	; (81067d8 <DMA_SetConfig+0x230>)
 81065c8:	4293      	cmp	r3, r2
 81065ca:	d072      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81065cc:	68fb      	ldr	r3, [r7, #12]
 81065ce:	681b      	ldr	r3, [r3, #0]
 81065d0:	4a82      	ldr	r2, [pc, #520]	; (81067dc <DMA_SetConfig+0x234>)
 81065d2:	4293      	cmp	r3, r2
 81065d4:	d06d      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81065d6:	68fb      	ldr	r3, [r7, #12]
 81065d8:	681b      	ldr	r3, [r3, #0]
 81065da:	4a81      	ldr	r2, [pc, #516]	; (81067e0 <DMA_SetConfig+0x238>)
 81065dc:	4293      	cmp	r3, r2
 81065de:	d068      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81065e0:	68fb      	ldr	r3, [r7, #12]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	4a7f      	ldr	r2, [pc, #508]	; (81067e4 <DMA_SetConfig+0x23c>)
 81065e6:	4293      	cmp	r3, r2
 81065e8:	d063      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81065ea:	68fb      	ldr	r3, [r7, #12]
 81065ec:	681b      	ldr	r3, [r3, #0]
 81065ee:	4a7e      	ldr	r2, [pc, #504]	; (81067e8 <DMA_SetConfig+0x240>)
 81065f0:	4293      	cmp	r3, r2
 81065f2:	d05e      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81065f4:	68fb      	ldr	r3, [r7, #12]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	4a7c      	ldr	r2, [pc, #496]	; (81067ec <DMA_SetConfig+0x244>)
 81065fa:	4293      	cmp	r3, r2
 81065fc:	d059      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81065fe:	68fb      	ldr	r3, [r7, #12]
 8106600:	681b      	ldr	r3, [r3, #0]
 8106602:	4a7b      	ldr	r2, [pc, #492]	; (81067f0 <DMA_SetConfig+0x248>)
 8106604:	4293      	cmp	r3, r2
 8106606:	d054      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106608:	68fb      	ldr	r3, [r7, #12]
 810660a:	681b      	ldr	r3, [r3, #0]
 810660c:	4a79      	ldr	r2, [pc, #484]	; (81067f4 <DMA_SetConfig+0x24c>)
 810660e:	4293      	cmp	r3, r2
 8106610:	d04f      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106612:	68fb      	ldr	r3, [r7, #12]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	4a78      	ldr	r2, [pc, #480]	; (81067f8 <DMA_SetConfig+0x250>)
 8106618:	4293      	cmp	r3, r2
 810661a:	d04a      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 810661c:	68fb      	ldr	r3, [r7, #12]
 810661e:	681b      	ldr	r3, [r3, #0]
 8106620:	4a76      	ldr	r2, [pc, #472]	; (81067fc <DMA_SetConfig+0x254>)
 8106622:	4293      	cmp	r3, r2
 8106624:	d045      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106626:	68fb      	ldr	r3, [r7, #12]
 8106628:	681b      	ldr	r3, [r3, #0]
 810662a:	4a75      	ldr	r2, [pc, #468]	; (8106800 <DMA_SetConfig+0x258>)
 810662c:	4293      	cmp	r3, r2
 810662e:	d040      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106630:	68fb      	ldr	r3, [r7, #12]
 8106632:	681b      	ldr	r3, [r3, #0]
 8106634:	4a73      	ldr	r2, [pc, #460]	; (8106804 <DMA_SetConfig+0x25c>)
 8106636:	4293      	cmp	r3, r2
 8106638:	d03b      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 810663a:	68fb      	ldr	r3, [r7, #12]
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	4a72      	ldr	r2, [pc, #456]	; (8106808 <DMA_SetConfig+0x260>)
 8106640:	4293      	cmp	r3, r2
 8106642:	d036      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106644:	68fb      	ldr	r3, [r7, #12]
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	4a70      	ldr	r2, [pc, #448]	; (810680c <DMA_SetConfig+0x264>)
 810664a:	4293      	cmp	r3, r2
 810664c:	d031      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 810664e:	68fb      	ldr	r3, [r7, #12]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	4a6f      	ldr	r2, [pc, #444]	; (8106810 <DMA_SetConfig+0x268>)
 8106654:	4293      	cmp	r3, r2
 8106656:	d02c      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106658:	68fb      	ldr	r3, [r7, #12]
 810665a:	681b      	ldr	r3, [r3, #0]
 810665c:	4a6d      	ldr	r2, [pc, #436]	; (8106814 <DMA_SetConfig+0x26c>)
 810665e:	4293      	cmp	r3, r2
 8106660:	d027      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106662:	68fb      	ldr	r3, [r7, #12]
 8106664:	681b      	ldr	r3, [r3, #0]
 8106666:	4a6c      	ldr	r2, [pc, #432]	; (8106818 <DMA_SetConfig+0x270>)
 8106668:	4293      	cmp	r3, r2
 810666a:	d022      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	4a6a      	ldr	r2, [pc, #424]	; (810681c <DMA_SetConfig+0x274>)
 8106672:	4293      	cmp	r3, r2
 8106674:	d01d      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	4a69      	ldr	r2, [pc, #420]	; (8106820 <DMA_SetConfig+0x278>)
 810667c:	4293      	cmp	r3, r2
 810667e:	d018      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106680:	68fb      	ldr	r3, [r7, #12]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	4a67      	ldr	r2, [pc, #412]	; (8106824 <DMA_SetConfig+0x27c>)
 8106686:	4293      	cmp	r3, r2
 8106688:	d013      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 810668a:	68fb      	ldr	r3, [r7, #12]
 810668c:	681b      	ldr	r3, [r3, #0]
 810668e:	4a66      	ldr	r2, [pc, #408]	; (8106828 <DMA_SetConfig+0x280>)
 8106690:	4293      	cmp	r3, r2
 8106692:	d00e      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 8106694:	68fb      	ldr	r3, [r7, #12]
 8106696:	681b      	ldr	r3, [r3, #0]
 8106698:	4a64      	ldr	r2, [pc, #400]	; (810682c <DMA_SetConfig+0x284>)
 810669a:	4293      	cmp	r3, r2
 810669c:	d009      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 810669e:	68fb      	ldr	r3, [r7, #12]
 81066a0:	681b      	ldr	r3, [r3, #0]
 81066a2:	4a63      	ldr	r2, [pc, #396]	; (8106830 <DMA_SetConfig+0x288>)
 81066a4:	4293      	cmp	r3, r2
 81066a6:	d004      	beq.n	81066b2 <DMA_SetConfig+0x10a>
 81066a8:	68fb      	ldr	r3, [r7, #12]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	4a61      	ldr	r2, [pc, #388]	; (8106834 <DMA_SetConfig+0x28c>)
 81066ae:	4293      	cmp	r3, r2
 81066b0:	d101      	bne.n	81066b6 <DMA_SetConfig+0x10e>
 81066b2:	2301      	movs	r3, #1
 81066b4:	e000      	b.n	81066b8 <DMA_SetConfig+0x110>
 81066b6:	2300      	movs	r3, #0
 81066b8:	2b00      	cmp	r3, #0
 81066ba:	d00d      	beq.n	81066d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81066bc:	68fb      	ldr	r3, [r7, #12]
 81066be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81066c0:	68fa      	ldr	r2, [r7, #12]
 81066c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81066c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81066c6:	68fb      	ldr	r3, [r7, #12]
 81066c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81066ca:	2b00      	cmp	r3, #0
 81066cc:	d004      	beq.n	81066d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81066ce:	68fb      	ldr	r3, [r7, #12]
 81066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81066d2:	68fa      	ldr	r2, [r7, #12]
 81066d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81066d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81066d8:	68fb      	ldr	r3, [r7, #12]
 81066da:	681b      	ldr	r3, [r3, #0]
 81066dc:	4a3e      	ldr	r2, [pc, #248]	; (81067d8 <DMA_SetConfig+0x230>)
 81066de:	4293      	cmp	r3, r2
 81066e0:	d04a      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 81066e2:	68fb      	ldr	r3, [r7, #12]
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	4a3d      	ldr	r2, [pc, #244]	; (81067dc <DMA_SetConfig+0x234>)
 81066e8:	4293      	cmp	r3, r2
 81066ea:	d045      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 81066ec:	68fb      	ldr	r3, [r7, #12]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	4a3b      	ldr	r2, [pc, #236]	; (81067e0 <DMA_SetConfig+0x238>)
 81066f2:	4293      	cmp	r3, r2
 81066f4:	d040      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 81066f6:	68fb      	ldr	r3, [r7, #12]
 81066f8:	681b      	ldr	r3, [r3, #0]
 81066fa:	4a3a      	ldr	r2, [pc, #232]	; (81067e4 <DMA_SetConfig+0x23c>)
 81066fc:	4293      	cmp	r3, r2
 81066fe:	d03b      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106700:	68fb      	ldr	r3, [r7, #12]
 8106702:	681b      	ldr	r3, [r3, #0]
 8106704:	4a38      	ldr	r2, [pc, #224]	; (81067e8 <DMA_SetConfig+0x240>)
 8106706:	4293      	cmp	r3, r2
 8106708:	d036      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 810670a:	68fb      	ldr	r3, [r7, #12]
 810670c:	681b      	ldr	r3, [r3, #0]
 810670e:	4a37      	ldr	r2, [pc, #220]	; (81067ec <DMA_SetConfig+0x244>)
 8106710:	4293      	cmp	r3, r2
 8106712:	d031      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106714:	68fb      	ldr	r3, [r7, #12]
 8106716:	681b      	ldr	r3, [r3, #0]
 8106718:	4a35      	ldr	r2, [pc, #212]	; (81067f0 <DMA_SetConfig+0x248>)
 810671a:	4293      	cmp	r3, r2
 810671c:	d02c      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 810671e:	68fb      	ldr	r3, [r7, #12]
 8106720:	681b      	ldr	r3, [r3, #0]
 8106722:	4a34      	ldr	r2, [pc, #208]	; (81067f4 <DMA_SetConfig+0x24c>)
 8106724:	4293      	cmp	r3, r2
 8106726:	d027      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106728:	68fb      	ldr	r3, [r7, #12]
 810672a:	681b      	ldr	r3, [r3, #0]
 810672c:	4a32      	ldr	r2, [pc, #200]	; (81067f8 <DMA_SetConfig+0x250>)
 810672e:	4293      	cmp	r3, r2
 8106730:	d022      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106732:	68fb      	ldr	r3, [r7, #12]
 8106734:	681b      	ldr	r3, [r3, #0]
 8106736:	4a31      	ldr	r2, [pc, #196]	; (81067fc <DMA_SetConfig+0x254>)
 8106738:	4293      	cmp	r3, r2
 810673a:	d01d      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 810673c:	68fb      	ldr	r3, [r7, #12]
 810673e:	681b      	ldr	r3, [r3, #0]
 8106740:	4a2f      	ldr	r2, [pc, #188]	; (8106800 <DMA_SetConfig+0x258>)
 8106742:	4293      	cmp	r3, r2
 8106744:	d018      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106746:	68fb      	ldr	r3, [r7, #12]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	4a2e      	ldr	r2, [pc, #184]	; (8106804 <DMA_SetConfig+0x25c>)
 810674c:	4293      	cmp	r3, r2
 810674e:	d013      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106750:	68fb      	ldr	r3, [r7, #12]
 8106752:	681b      	ldr	r3, [r3, #0]
 8106754:	4a2c      	ldr	r2, [pc, #176]	; (8106808 <DMA_SetConfig+0x260>)
 8106756:	4293      	cmp	r3, r2
 8106758:	d00e      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 810675a:	68fb      	ldr	r3, [r7, #12]
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	4a2b      	ldr	r2, [pc, #172]	; (810680c <DMA_SetConfig+0x264>)
 8106760:	4293      	cmp	r3, r2
 8106762:	d009      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 8106764:	68fb      	ldr	r3, [r7, #12]
 8106766:	681b      	ldr	r3, [r3, #0]
 8106768:	4a29      	ldr	r2, [pc, #164]	; (8106810 <DMA_SetConfig+0x268>)
 810676a:	4293      	cmp	r3, r2
 810676c:	d004      	beq.n	8106778 <DMA_SetConfig+0x1d0>
 810676e:	68fb      	ldr	r3, [r7, #12]
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	4a28      	ldr	r2, [pc, #160]	; (8106814 <DMA_SetConfig+0x26c>)
 8106774:	4293      	cmp	r3, r2
 8106776:	d101      	bne.n	810677c <DMA_SetConfig+0x1d4>
 8106778:	2301      	movs	r3, #1
 810677a:	e000      	b.n	810677e <DMA_SetConfig+0x1d6>
 810677c:	2300      	movs	r3, #0
 810677e:	2b00      	cmp	r3, #0
 8106780:	d05a      	beq.n	8106838 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106782:	68fb      	ldr	r3, [r7, #12]
 8106784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106786:	f003 031f 	and.w	r3, r3, #31
 810678a:	223f      	movs	r2, #63	; 0x3f
 810678c:	409a      	lsls	r2, r3
 810678e:	697b      	ldr	r3, [r7, #20]
 8106790:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8106792:	68fb      	ldr	r3, [r7, #12]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	681a      	ldr	r2, [r3, #0]
 8106798:	68fb      	ldr	r3, [r7, #12]
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81067a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81067a2:	68fb      	ldr	r3, [r7, #12]
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	683a      	ldr	r2, [r7, #0]
 81067a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81067aa:	68fb      	ldr	r3, [r7, #12]
 81067ac:	689b      	ldr	r3, [r3, #8]
 81067ae:	2b40      	cmp	r3, #64	; 0x40
 81067b0:	d108      	bne.n	81067c4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81067b2:	68fb      	ldr	r3, [r7, #12]
 81067b4:	681b      	ldr	r3, [r3, #0]
 81067b6:	687a      	ldr	r2, [r7, #4]
 81067b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81067ba:	68fb      	ldr	r3, [r7, #12]
 81067bc:	681b      	ldr	r3, [r3, #0]
 81067be:	68ba      	ldr	r2, [r7, #8]
 81067c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 81067c2:	e087      	b.n	81068d4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81067c4:	68fb      	ldr	r3, [r7, #12]
 81067c6:	681b      	ldr	r3, [r3, #0]
 81067c8:	68ba      	ldr	r2, [r7, #8]
 81067ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81067cc:	68fb      	ldr	r3, [r7, #12]
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	687a      	ldr	r2, [r7, #4]
 81067d2:	60da      	str	r2, [r3, #12]
}
 81067d4:	e07e      	b.n	81068d4 <DMA_SetConfig+0x32c>
 81067d6:	bf00      	nop
 81067d8:	40020010 	.word	0x40020010
 81067dc:	40020028 	.word	0x40020028
 81067e0:	40020040 	.word	0x40020040
 81067e4:	40020058 	.word	0x40020058
 81067e8:	40020070 	.word	0x40020070
 81067ec:	40020088 	.word	0x40020088
 81067f0:	400200a0 	.word	0x400200a0
 81067f4:	400200b8 	.word	0x400200b8
 81067f8:	40020410 	.word	0x40020410
 81067fc:	40020428 	.word	0x40020428
 8106800:	40020440 	.word	0x40020440
 8106804:	40020458 	.word	0x40020458
 8106808:	40020470 	.word	0x40020470
 810680c:	40020488 	.word	0x40020488
 8106810:	400204a0 	.word	0x400204a0
 8106814:	400204b8 	.word	0x400204b8
 8106818:	58025408 	.word	0x58025408
 810681c:	5802541c 	.word	0x5802541c
 8106820:	58025430 	.word	0x58025430
 8106824:	58025444 	.word	0x58025444
 8106828:	58025458 	.word	0x58025458
 810682c:	5802546c 	.word	0x5802546c
 8106830:	58025480 	.word	0x58025480
 8106834:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106838:	68fb      	ldr	r3, [r7, #12]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	4a28      	ldr	r2, [pc, #160]	; (81068e0 <DMA_SetConfig+0x338>)
 810683e:	4293      	cmp	r3, r2
 8106840:	d022      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 8106842:	68fb      	ldr	r3, [r7, #12]
 8106844:	681b      	ldr	r3, [r3, #0]
 8106846:	4a27      	ldr	r2, [pc, #156]	; (81068e4 <DMA_SetConfig+0x33c>)
 8106848:	4293      	cmp	r3, r2
 810684a:	d01d      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 810684c:	68fb      	ldr	r3, [r7, #12]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	4a25      	ldr	r2, [pc, #148]	; (81068e8 <DMA_SetConfig+0x340>)
 8106852:	4293      	cmp	r3, r2
 8106854:	d018      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 8106856:	68fb      	ldr	r3, [r7, #12]
 8106858:	681b      	ldr	r3, [r3, #0]
 810685a:	4a24      	ldr	r2, [pc, #144]	; (81068ec <DMA_SetConfig+0x344>)
 810685c:	4293      	cmp	r3, r2
 810685e:	d013      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 8106860:	68fb      	ldr	r3, [r7, #12]
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	4a22      	ldr	r2, [pc, #136]	; (81068f0 <DMA_SetConfig+0x348>)
 8106866:	4293      	cmp	r3, r2
 8106868:	d00e      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 810686a:	68fb      	ldr	r3, [r7, #12]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	4a21      	ldr	r2, [pc, #132]	; (81068f4 <DMA_SetConfig+0x34c>)
 8106870:	4293      	cmp	r3, r2
 8106872:	d009      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 8106874:	68fb      	ldr	r3, [r7, #12]
 8106876:	681b      	ldr	r3, [r3, #0]
 8106878:	4a1f      	ldr	r2, [pc, #124]	; (81068f8 <DMA_SetConfig+0x350>)
 810687a:	4293      	cmp	r3, r2
 810687c:	d004      	beq.n	8106888 <DMA_SetConfig+0x2e0>
 810687e:	68fb      	ldr	r3, [r7, #12]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	4a1e      	ldr	r2, [pc, #120]	; (81068fc <DMA_SetConfig+0x354>)
 8106884:	4293      	cmp	r3, r2
 8106886:	d101      	bne.n	810688c <DMA_SetConfig+0x2e4>
 8106888:	2301      	movs	r3, #1
 810688a:	e000      	b.n	810688e <DMA_SetConfig+0x2e6>
 810688c:	2300      	movs	r3, #0
 810688e:	2b00      	cmp	r3, #0
 8106890:	d020      	beq.n	81068d4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106892:	68fb      	ldr	r3, [r7, #12]
 8106894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106896:	f003 031f 	and.w	r3, r3, #31
 810689a:	2201      	movs	r2, #1
 810689c:	409a      	lsls	r2, r3
 810689e:	693b      	ldr	r3, [r7, #16]
 81068a0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 81068a2:	68fb      	ldr	r3, [r7, #12]
 81068a4:	681b      	ldr	r3, [r3, #0]
 81068a6:	683a      	ldr	r2, [r7, #0]
 81068a8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81068aa:	68fb      	ldr	r3, [r7, #12]
 81068ac:	689b      	ldr	r3, [r3, #8]
 81068ae:	2b40      	cmp	r3, #64	; 0x40
 81068b0:	d108      	bne.n	81068c4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 81068b2:	68fb      	ldr	r3, [r7, #12]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	687a      	ldr	r2, [r7, #4]
 81068b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 81068ba:	68fb      	ldr	r3, [r7, #12]
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	68ba      	ldr	r2, [r7, #8]
 81068c0:	60da      	str	r2, [r3, #12]
}
 81068c2:	e007      	b.n	81068d4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 81068c4:	68fb      	ldr	r3, [r7, #12]
 81068c6:	681b      	ldr	r3, [r3, #0]
 81068c8:	68ba      	ldr	r2, [r7, #8]
 81068ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 81068cc:	68fb      	ldr	r3, [r7, #12]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	687a      	ldr	r2, [r7, #4]
 81068d2:	60da      	str	r2, [r3, #12]
}
 81068d4:	bf00      	nop
 81068d6:	371c      	adds	r7, #28
 81068d8:	46bd      	mov	sp, r7
 81068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068de:	4770      	bx	lr
 81068e0:	58025408 	.word	0x58025408
 81068e4:	5802541c 	.word	0x5802541c
 81068e8:	58025430 	.word	0x58025430
 81068ec:	58025444 	.word	0x58025444
 81068f0:	58025458 	.word	0x58025458
 81068f4:	5802546c 	.word	0x5802546c
 81068f8:	58025480 	.word	0x58025480
 81068fc:	58025494 	.word	0x58025494

08106900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106900:	b480      	push	{r7}
 8106902:	b085      	sub	sp, #20
 8106904:	af00      	add	r7, sp, #0
 8106906:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106908:	687b      	ldr	r3, [r7, #4]
 810690a:	681b      	ldr	r3, [r3, #0]
 810690c:	4a43      	ldr	r2, [pc, #268]	; (8106a1c <DMA_CalcBaseAndBitshift+0x11c>)
 810690e:	4293      	cmp	r3, r2
 8106910:	d04a      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	681b      	ldr	r3, [r3, #0]
 8106916:	4a42      	ldr	r2, [pc, #264]	; (8106a20 <DMA_CalcBaseAndBitshift+0x120>)
 8106918:	4293      	cmp	r3, r2
 810691a:	d045      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 810691c:	687b      	ldr	r3, [r7, #4]
 810691e:	681b      	ldr	r3, [r3, #0]
 8106920:	4a40      	ldr	r2, [pc, #256]	; (8106a24 <DMA_CalcBaseAndBitshift+0x124>)
 8106922:	4293      	cmp	r3, r2
 8106924:	d040      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106926:	687b      	ldr	r3, [r7, #4]
 8106928:	681b      	ldr	r3, [r3, #0]
 810692a:	4a3f      	ldr	r2, [pc, #252]	; (8106a28 <DMA_CalcBaseAndBitshift+0x128>)
 810692c:	4293      	cmp	r3, r2
 810692e:	d03b      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	4a3d      	ldr	r2, [pc, #244]	; (8106a2c <DMA_CalcBaseAndBitshift+0x12c>)
 8106936:	4293      	cmp	r3, r2
 8106938:	d036      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	681b      	ldr	r3, [r3, #0]
 810693e:	4a3c      	ldr	r2, [pc, #240]	; (8106a30 <DMA_CalcBaseAndBitshift+0x130>)
 8106940:	4293      	cmp	r3, r2
 8106942:	d031      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	681b      	ldr	r3, [r3, #0]
 8106948:	4a3a      	ldr	r2, [pc, #232]	; (8106a34 <DMA_CalcBaseAndBitshift+0x134>)
 810694a:	4293      	cmp	r3, r2
 810694c:	d02c      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	681b      	ldr	r3, [r3, #0]
 8106952:	4a39      	ldr	r2, [pc, #228]	; (8106a38 <DMA_CalcBaseAndBitshift+0x138>)
 8106954:	4293      	cmp	r3, r2
 8106956:	d027      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106958:	687b      	ldr	r3, [r7, #4]
 810695a:	681b      	ldr	r3, [r3, #0]
 810695c:	4a37      	ldr	r2, [pc, #220]	; (8106a3c <DMA_CalcBaseAndBitshift+0x13c>)
 810695e:	4293      	cmp	r3, r2
 8106960:	d022      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	4a36      	ldr	r2, [pc, #216]	; (8106a40 <DMA_CalcBaseAndBitshift+0x140>)
 8106968:	4293      	cmp	r3, r2
 810696a:	d01d      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	681b      	ldr	r3, [r3, #0]
 8106970:	4a34      	ldr	r2, [pc, #208]	; (8106a44 <DMA_CalcBaseAndBitshift+0x144>)
 8106972:	4293      	cmp	r3, r2
 8106974:	d018      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	681b      	ldr	r3, [r3, #0]
 810697a:	4a33      	ldr	r2, [pc, #204]	; (8106a48 <DMA_CalcBaseAndBitshift+0x148>)
 810697c:	4293      	cmp	r3, r2
 810697e:	d013      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	681b      	ldr	r3, [r3, #0]
 8106984:	4a31      	ldr	r2, [pc, #196]	; (8106a4c <DMA_CalcBaseAndBitshift+0x14c>)
 8106986:	4293      	cmp	r3, r2
 8106988:	d00e      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	4a30      	ldr	r2, [pc, #192]	; (8106a50 <DMA_CalcBaseAndBitshift+0x150>)
 8106990:	4293      	cmp	r3, r2
 8106992:	d009      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	4a2e      	ldr	r2, [pc, #184]	; (8106a54 <DMA_CalcBaseAndBitshift+0x154>)
 810699a:	4293      	cmp	r3, r2
 810699c:	d004      	beq.n	81069a8 <DMA_CalcBaseAndBitshift+0xa8>
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	681b      	ldr	r3, [r3, #0]
 81069a2:	4a2d      	ldr	r2, [pc, #180]	; (8106a58 <DMA_CalcBaseAndBitshift+0x158>)
 81069a4:	4293      	cmp	r3, r2
 81069a6:	d101      	bne.n	81069ac <DMA_CalcBaseAndBitshift+0xac>
 81069a8:	2301      	movs	r3, #1
 81069aa:	e000      	b.n	81069ae <DMA_CalcBaseAndBitshift+0xae>
 81069ac:	2300      	movs	r3, #0
 81069ae:	2b00      	cmp	r3, #0
 81069b0:	d026      	beq.n	8106a00 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	681b      	ldr	r3, [r3, #0]
 81069b6:	b2db      	uxtb	r3, r3
 81069b8:	3b10      	subs	r3, #16
 81069ba:	4a28      	ldr	r2, [pc, #160]	; (8106a5c <DMA_CalcBaseAndBitshift+0x15c>)
 81069bc:	fba2 2303 	umull	r2, r3, r2, r3
 81069c0:	091b      	lsrs	r3, r3, #4
 81069c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81069c4:	68fb      	ldr	r3, [r7, #12]
 81069c6:	f003 0307 	and.w	r3, r3, #7
 81069ca:	4a25      	ldr	r2, [pc, #148]	; (8106a60 <DMA_CalcBaseAndBitshift+0x160>)
 81069cc:	5cd3      	ldrb	r3, [r2, r3]
 81069ce:	461a      	mov	r2, r3
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81069d4:	68fb      	ldr	r3, [r7, #12]
 81069d6:	2b03      	cmp	r3, #3
 81069d8:	d909      	bls.n	81069ee <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81069e2:	f023 0303 	bic.w	r3, r3, #3
 81069e6:	1d1a      	adds	r2, r3, #4
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	659a      	str	r2, [r3, #88]	; 0x58
 81069ec:	e00e      	b.n	8106a0c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81069f6:	f023 0303 	bic.w	r3, r3, #3
 81069fa:	687a      	ldr	r2, [r7, #4]
 81069fc:	6593      	str	r3, [r2, #88]	; 0x58
 81069fe:	e005      	b.n	8106a0c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	681b      	ldr	r3, [r3, #0]
 8106a04:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106a10:	4618      	mov	r0, r3
 8106a12:	3714      	adds	r7, #20
 8106a14:	46bd      	mov	sp, r7
 8106a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a1a:	4770      	bx	lr
 8106a1c:	40020010 	.word	0x40020010
 8106a20:	40020028 	.word	0x40020028
 8106a24:	40020040 	.word	0x40020040
 8106a28:	40020058 	.word	0x40020058
 8106a2c:	40020070 	.word	0x40020070
 8106a30:	40020088 	.word	0x40020088
 8106a34:	400200a0 	.word	0x400200a0
 8106a38:	400200b8 	.word	0x400200b8
 8106a3c:	40020410 	.word	0x40020410
 8106a40:	40020428 	.word	0x40020428
 8106a44:	40020440 	.word	0x40020440
 8106a48:	40020458 	.word	0x40020458
 8106a4c:	40020470 	.word	0x40020470
 8106a50:	40020488 	.word	0x40020488
 8106a54:	400204a0 	.word	0x400204a0
 8106a58:	400204b8 	.word	0x400204b8
 8106a5c:	aaaaaaab 	.word	0xaaaaaaab
 8106a60:	0810dd1c 	.word	0x0810dd1c

08106a64 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106a64:	b480      	push	{r7}
 8106a66:	b085      	sub	sp, #20
 8106a68:	af00      	add	r7, sp, #0
 8106a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106a6c:	2300      	movs	r3, #0
 8106a6e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	699b      	ldr	r3, [r3, #24]
 8106a74:	2b00      	cmp	r3, #0
 8106a76:	d120      	bne.n	8106aba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106a78:	687b      	ldr	r3, [r7, #4]
 8106a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a7c:	2b03      	cmp	r3, #3
 8106a7e:	d858      	bhi.n	8106b32 <DMA_CheckFifoParam+0xce>
 8106a80:	a201      	add	r2, pc, #4	; (adr r2, 8106a88 <DMA_CheckFifoParam+0x24>)
 8106a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a86:	bf00      	nop
 8106a88:	08106a99 	.word	0x08106a99
 8106a8c:	08106aab 	.word	0x08106aab
 8106a90:	08106a99 	.word	0x08106a99
 8106a94:	08106b33 	.word	0x08106b33
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106a98:	687b      	ldr	r3, [r7, #4]
 8106a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106aa0:	2b00      	cmp	r3, #0
 8106aa2:	d048      	beq.n	8106b36 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106aa4:	2301      	movs	r3, #1
 8106aa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106aa8:	e045      	b.n	8106b36 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106ab2:	d142      	bne.n	8106b3a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106ab4:	2301      	movs	r3, #1
 8106ab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106ab8:	e03f      	b.n	8106b3a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	699b      	ldr	r3, [r3, #24]
 8106abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106ac2:	d123      	bne.n	8106b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ac8:	2b03      	cmp	r3, #3
 8106aca:	d838      	bhi.n	8106b3e <DMA_CheckFifoParam+0xda>
 8106acc:	a201      	add	r2, pc, #4	; (adr r2, 8106ad4 <DMA_CheckFifoParam+0x70>)
 8106ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ad2:	bf00      	nop
 8106ad4:	08106ae5 	.word	0x08106ae5
 8106ad8:	08106aeb 	.word	0x08106aeb
 8106adc:	08106ae5 	.word	0x08106ae5
 8106ae0:	08106afd 	.word	0x08106afd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106ae4:	2301      	movs	r3, #1
 8106ae6:	73fb      	strb	r3, [r7, #15]
        break;
 8106ae8:	e030      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106af2:	2b00      	cmp	r3, #0
 8106af4:	d025      	beq.n	8106b42 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106af6:	2301      	movs	r3, #1
 8106af8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106afa:	e022      	b.n	8106b42 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106afc:	687b      	ldr	r3, [r7, #4]
 8106afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106b04:	d11f      	bne.n	8106b46 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106b06:	2301      	movs	r3, #1
 8106b08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106b0a:	e01c      	b.n	8106b46 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106b0c:	687b      	ldr	r3, [r7, #4]
 8106b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b10:	2b02      	cmp	r3, #2
 8106b12:	d902      	bls.n	8106b1a <DMA_CheckFifoParam+0xb6>
 8106b14:	2b03      	cmp	r3, #3
 8106b16:	d003      	beq.n	8106b20 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106b18:	e018      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106b1a:	2301      	movs	r3, #1
 8106b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8106b1e:	e015      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106b28:	2b00      	cmp	r3, #0
 8106b2a:	d00e      	beq.n	8106b4a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106b2c:	2301      	movs	r3, #1
 8106b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8106b30:	e00b      	b.n	8106b4a <DMA_CheckFifoParam+0xe6>
        break;
 8106b32:	bf00      	nop
 8106b34:	e00a      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        break;
 8106b36:	bf00      	nop
 8106b38:	e008      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        break;
 8106b3a:	bf00      	nop
 8106b3c:	e006      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        break;
 8106b3e:	bf00      	nop
 8106b40:	e004      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        break;
 8106b42:	bf00      	nop
 8106b44:	e002      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
        break;
 8106b46:	bf00      	nop
 8106b48:	e000      	b.n	8106b4c <DMA_CheckFifoParam+0xe8>
    break;
 8106b4a:	bf00      	nop
    }
  }

  return status;
 8106b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8106b4e:	4618      	mov	r0, r3
 8106b50:	3714      	adds	r7, #20
 8106b52:	46bd      	mov	sp, r7
 8106b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b58:	4770      	bx	lr
 8106b5a:	bf00      	nop

08106b5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106b5c:	b480      	push	{r7}
 8106b5e:	b085      	sub	sp, #20
 8106b60:	af00      	add	r7, sp, #0
 8106b62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	681b      	ldr	r3, [r3, #0]
 8106b68:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	681b      	ldr	r3, [r3, #0]
 8106b6e:	4a3a      	ldr	r2, [pc, #232]	; (8106c58 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106b70:	4293      	cmp	r3, r2
 8106b72:	d022      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	681b      	ldr	r3, [r3, #0]
 8106b78:	4a38      	ldr	r2, [pc, #224]	; (8106c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106b7a:	4293      	cmp	r3, r2
 8106b7c:	d01d      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	681b      	ldr	r3, [r3, #0]
 8106b82:	4a37      	ldr	r2, [pc, #220]	; (8106c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106b84:	4293      	cmp	r3, r2
 8106b86:	d018      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	681b      	ldr	r3, [r3, #0]
 8106b8c:	4a35      	ldr	r2, [pc, #212]	; (8106c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106b8e:	4293      	cmp	r3, r2
 8106b90:	d013      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106b92:	687b      	ldr	r3, [r7, #4]
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	4a34      	ldr	r2, [pc, #208]	; (8106c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106b98:	4293      	cmp	r3, r2
 8106b9a:	d00e      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106b9c:	687b      	ldr	r3, [r7, #4]
 8106b9e:	681b      	ldr	r3, [r3, #0]
 8106ba0:	4a32      	ldr	r2, [pc, #200]	; (8106c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106ba2:	4293      	cmp	r3, r2
 8106ba4:	d009      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	681b      	ldr	r3, [r3, #0]
 8106baa:	4a31      	ldr	r2, [pc, #196]	; (8106c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106bac:	4293      	cmp	r3, r2
 8106bae:	d004      	beq.n	8106bba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	4a2f      	ldr	r2, [pc, #188]	; (8106c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106bb6:	4293      	cmp	r3, r2
 8106bb8:	d101      	bne.n	8106bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106bba:	2301      	movs	r3, #1
 8106bbc:	e000      	b.n	8106bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106bbe:	2300      	movs	r3, #0
 8106bc0:	2b00      	cmp	r3, #0
 8106bc2:	d01c      	beq.n	8106bfe <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	681b      	ldr	r3, [r3, #0]
 8106bc8:	b2db      	uxtb	r3, r3
 8106bca:	3b08      	subs	r3, #8
 8106bcc:	4a2a      	ldr	r2, [pc, #168]	; (8106c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106bce:	fba2 2303 	umull	r2, r3, r2, r3
 8106bd2:	091b      	lsrs	r3, r3, #4
 8106bd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106bd6:	68fb      	ldr	r3, [r7, #12]
 8106bd8:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106bdc:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106be0:	009b      	lsls	r3, r3, #2
 8106be2:	461a      	mov	r2, r3
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	4a24      	ldr	r2, [pc, #144]	; (8106c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106bec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106bee:	68fb      	ldr	r3, [r7, #12]
 8106bf0:	f003 031f 	and.w	r3, r3, #31
 8106bf4:	2201      	movs	r2, #1
 8106bf6:	409a      	lsls	r2, r3
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106bfc:	e026      	b.n	8106c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	b2db      	uxtb	r3, r3
 8106c04:	3b10      	subs	r3, #16
 8106c06:	4a1e      	ldr	r2, [pc, #120]	; (8106c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106c08:	fba2 2303 	umull	r2, r3, r2, r3
 8106c0c:	091b      	lsrs	r3, r3, #4
 8106c0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106c10:	68bb      	ldr	r3, [r7, #8]
 8106c12:	4a1c      	ldr	r2, [pc, #112]	; (8106c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106c14:	4293      	cmp	r3, r2
 8106c16:	d806      	bhi.n	8106c26 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106c18:	68bb      	ldr	r3, [r7, #8]
 8106c1a:	4a1b      	ldr	r2, [pc, #108]	; (8106c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106c1c:	4293      	cmp	r3, r2
 8106c1e:	d902      	bls.n	8106c26 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106c20:	68fb      	ldr	r3, [r7, #12]
 8106c22:	3308      	adds	r3, #8
 8106c24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106c26:	68fb      	ldr	r3, [r7, #12]
 8106c28:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8106c2c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106c30:	009b      	lsls	r3, r3, #2
 8106c32:	461a      	mov	r2, r3
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	4a14      	ldr	r2, [pc, #80]	; (8106c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106c3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106c3e:	68fb      	ldr	r3, [r7, #12]
 8106c40:	f003 031f 	and.w	r3, r3, #31
 8106c44:	2201      	movs	r2, #1
 8106c46:	409a      	lsls	r2, r3
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106c4c:	bf00      	nop
 8106c4e:	3714      	adds	r7, #20
 8106c50:	46bd      	mov	sp, r7
 8106c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c56:	4770      	bx	lr
 8106c58:	58025408 	.word	0x58025408
 8106c5c:	5802541c 	.word	0x5802541c
 8106c60:	58025430 	.word	0x58025430
 8106c64:	58025444 	.word	0x58025444
 8106c68:	58025458 	.word	0x58025458
 8106c6c:	5802546c 	.word	0x5802546c
 8106c70:	58025480 	.word	0x58025480
 8106c74:	58025494 	.word	0x58025494
 8106c78:	cccccccd 	.word	0xcccccccd
 8106c7c:	58025880 	.word	0x58025880
 8106c80:	aaaaaaab 	.word	0xaaaaaaab
 8106c84:	400204b8 	.word	0x400204b8
 8106c88:	4002040f 	.word	0x4002040f
 8106c8c:	40020880 	.word	0x40020880

08106c90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106c90:	b480      	push	{r7}
 8106c92:	b085      	sub	sp, #20
 8106c94:	af00      	add	r7, sp, #0
 8106c96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	685b      	ldr	r3, [r3, #4]
 8106c9c:	b2db      	uxtb	r3, r3
 8106c9e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106ca0:	68fb      	ldr	r3, [r7, #12]
 8106ca2:	2b00      	cmp	r3, #0
 8106ca4:	d04a      	beq.n	8106d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106ca6:	68fb      	ldr	r3, [r7, #12]
 8106ca8:	2b08      	cmp	r3, #8
 8106caa:	d847      	bhi.n	8106d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	681b      	ldr	r3, [r3, #0]
 8106cb0:	4a25      	ldr	r2, [pc, #148]	; (8106d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106cb2:	4293      	cmp	r3, r2
 8106cb4:	d022      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	681b      	ldr	r3, [r3, #0]
 8106cba:	4a24      	ldr	r2, [pc, #144]	; (8106d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106cbc:	4293      	cmp	r3, r2
 8106cbe:	d01d      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	681b      	ldr	r3, [r3, #0]
 8106cc4:	4a22      	ldr	r2, [pc, #136]	; (8106d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106cc6:	4293      	cmp	r3, r2
 8106cc8:	d018      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	4a21      	ldr	r2, [pc, #132]	; (8106d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106cd0:	4293      	cmp	r3, r2
 8106cd2:	d013      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	681b      	ldr	r3, [r3, #0]
 8106cd8:	4a1f      	ldr	r2, [pc, #124]	; (8106d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106cda:	4293      	cmp	r3, r2
 8106cdc:	d00e      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	4a1e      	ldr	r2, [pc, #120]	; (8106d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106ce4:	4293      	cmp	r3, r2
 8106ce6:	d009      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	4a1c      	ldr	r2, [pc, #112]	; (8106d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106cee:	4293      	cmp	r3, r2
 8106cf0:	d004      	beq.n	8106cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	4a1b      	ldr	r2, [pc, #108]	; (8106d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106cf8:	4293      	cmp	r3, r2
 8106cfa:	d101      	bne.n	8106d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106cfc:	2301      	movs	r3, #1
 8106cfe:	e000      	b.n	8106d02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106d00:	2300      	movs	r3, #0
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	d00a      	beq.n	8106d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106d06:	68fa      	ldr	r2, [r7, #12]
 8106d08:	4b17      	ldr	r3, [pc, #92]	; (8106d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106d0a:	4413      	add	r3, r2
 8106d0c:	009b      	lsls	r3, r3, #2
 8106d0e:	461a      	mov	r2, r3
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	4a15      	ldr	r2, [pc, #84]	; (8106d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106d18:	671a      	str	r2, [r3, #112]	; 0x70
 8106d1a:	e009      	b.n	8106d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106d1c:	68fa      	ldr	r2, [r7, #12]
 8106d1e:	4b14      	ldr	r3, [pc, #80]	; (8106d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106d20:	4413      	add	r3, r2
 8106d22:	009b      	lsls	r3, r3, #2
 8106d24:	461a      	mov	r2, r3
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	4a11      	ldr	r2, [pc, #68]	; (8106d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106d2e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106d30:	68fb      	ldr	r3, [r7, #12]
 8106d32:	3b01      	subs	r3, #1
 8106d34:	2201      	movs	r2, #1
 8106d36:	409a      	lsls	r2, r3
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8106d3c:	bf00      	nop
 8106d3e:	3714      	adds	r7, #20
 8106d40:	46bd      	mov	sp, r7
 8106d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d46:	4770      	bx	lr
 8106d48:	58025408 	.word	0x58025408
 8106d4c:	5802541c 	.word	0x5802541c
 8106d50:	58025430 	.word	0x58025430
 8106d54:	58025444 	.word	0x58025444
 8106d58:	58025458 	.word	0x58025458
 8106d5c:	5802546c 	.word	0x5802546c
 8106d60:	58025480 	.word	0x58025480
 8106d64:	58025494 	.word	0x58025494
 8106d68:	1600963f 	.word	0x1600963f
 8106d6c:	58025940 	.word	0x58025940
 8106d70:	1000823f 	.word	0x1000823f
 8106d74:	40020940 	.word	0x40020940

08106d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106d78:	b480      	push	{r7}
 8106d7a:	b089      	sub	sp, #36	; 0x24
 8106d7c:	af00      	add	r7, sp, #0
 8106d7e:	6078      	str	r0, [r7, #4]
 8106d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106d82:	2300      	movs	r3, #0
 8106d84:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106d86:	4b89      	ldr	r3, [pc, #548]	; (8106fac <HAL_GPIO_Init+0x234>)
 8106d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106d8a:	e194      	b.n	81070b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106d8c:	683b      	ldr	r3, [r7, #0]
 8106d8e:	681a      	ldr	r2, [r3, #0]
 8106d90:	2101      	movs	r1, #1
 8106d92:	69fb      	ldr	r3, [r7, #28]
 8106d94:	fa01 f303 	lsl.w	r3, r1, r3
 8106d98:	4013      	ands	r3, r2
 8106d9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106d9c:	693b      	ldr	r3, [r7, #16]
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	f000 8186 	beq.w	81070b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106da4:	683b      	ldr	r3, [r7, #0]
 8106da6:	685b      	ldr	r3, [r3, #4]
 8106da8:	2b01      	cmp	r3, #1
 8106daa:	d00b      	beq.n	8106dc4 <HAL_GPIO_Init+0x4c>
 8106dac:	683b      	ldr	r3, [r7, #0]
 8106dae:	685b      	ldr	r3, [r3, #4]
 8106db0:	2b02      	cmp	r3, #2
 8106db2:	d007      	beq.n	8106dc4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106db4:	683b      	ldr	r3, [r7, #0]
 8106db6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106db8:	2b11      	cmp	r3, #17
 8106dba:	d003      	beq.n	8106dc4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106dbc:	683b      	ldr	r3, [r7, #0]
 8106dbe:	685b      	ldr	r3, [r3, #4]
 8106dc0:	2b12      	cmp	r3, #18
 8106dc2:	d130      	bne.n	8106e26 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	689b      	ldr	r3, [r3, #8]
 8106dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106dca:	69fb      	ldr	r3, [r7, #28]
 8106dcc:	005b      	lsls	r3, r3, #1
 8106dce:	2203      	movs	r2, #3
 8106dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8106dd4:	43db      	mvns	r3, r3
 8106dd6:	69ba      	ldr	r2, [r7, #24]
 8106dd8:	4013      	ands	r3, r2
 8106dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106ddc:	683b      	ldr	r3, [r7, #0]
 8106dde:	68da      	ldr	r2, [r3, #12]
 8106de0:	69fb      	ldr	r3, [r7, #28]
 8106de2:	005b      	lsls	r3, r3, #1
 8106de4:	fa02 f303 	lsl.w	r3, r2, r3
 8106de8:	69ba      	ldr	r2, [r7, #24]
 8106dea:	4313      	orrs	r3, r2
 8106dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	69ba      	ldr	r2, [r7, #24]
 8106df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	685b      	ldr	r3, [r3, #4]
 8106df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106dfa:	2201      	movs	r2, #1
 8106dfc:	69fb      	ldr	r3, [r7, #28]
 8106dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8106e02:	43db      	mvns	r3, r3
 8106e04:	69ba      	ldr	r2, [r7, #24]
 8106e06:	4013      	ands	r3, r2
 8106e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8106e0a:	683b      	ldr	r3, [r7, #0]
 8106e0c:	685b      	ldr	r3, [r3, #4]
 8106e0e:	091b      	lsrs	r3, r3, #4
 8106e10:	f003 0201 	and.w	r2, r3, #1
 8106e14:	69fb      	ldr	r3, [r7, #28]
 8106e16:	fa02 f303 	lsl.w	r3, r2, r3
 8106e1a:	69ba      	ldr	r2, [r7, #24]
 8106e1c:	4313      	orrs	r3, r2
 8106e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	69ba      	ldr	r2, [r7, #24]
 8106e24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	68db      	ldr	r3, [r3, #12]
 8106e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106e2c:	69fb      	ldr	r3, [r7, #28]
 8106e2e:	005b      	lsls	r3, r3, #1
 8106e30:	2203      	movs	r2, #3
 8106e32:	fa02 f303 	lsl.w	r3, r2, r3
 8106e36:	43db      	mvns	r3, r3
 8106e38:	69ba      	ldr	r2, [r7, #24]
 8106e3a:	4013      	ands	r3, r2
 8106e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106e3e:	683b      	ldr	r3, [r7, #0]
 8106e40:	689a      	ldr	r2, [r3, #8]
 8106e42:	69fb      	ldr	r3, [r7, #28]
 8106e44:	005b      	lsls	r3, r3, #1
 8106e46:	fa02 f303 	lsl.w	r3, r2, r3
 8106e4a:	69ba      	ldr	r2, [r7, #24]
 8106e4c:	4313      	orrs	r3, r2
 8106e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	69ba      	ldr	r2, [r7, #24]
 8106e54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106e56:	683b      	ldr	r3, [r7, #0]
 8106e58:	685b      	ldr	r3, [r3, #4]
 8106e5a:	2b02      	cmp	r3, #2
 8106e5c:	d003      	beq.n	8106e66 <HAL_GPIO_Init+0xee>
 8106e5e:	683b      	ldr	r3, [r7, #0]
 8106e60:	685b      	ldr	r3, [r3, #4]
 8106e62:	2b12      	cmp	r3, #18
 8106e64:	d123      	bne.n	8106eae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106e66:	69fb      	ldr	r3, [r7, #28]
 8106e68:	08da      	lsrs	r2, r3, #3
 8106e6a:	687b      	ldr	r3, [r7, #4]
 8106e6c:	3208      	adds	r2, #8
 8106e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106e74:	69fb      	ldr	r3, [r7, #28]
 8106e76:	f003 0307 	and.w	r3, r3, #7
 8106e7a:	009b      	lsls	r3, r3, #2
 8106e7c:	220f      	movs	r2, #15
 8106e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8106e82:	43db      	mvns	r3, r3
 8106e84:	69ba      	ldr	r2, [r7, #24]
 8106e86:	4013      	ands	r3, r2
 8106e88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106e8a:	683b      	ldr	r3, [r7, #0]
 8106e8c:	691a      	ldr	r2, [r3, #16]
 8106e8e:	69fb      	ldr	r3, [r7, #28]
 8106e90:	f003 0307 	and.w	r3, r3, #7
 8106e94:	009b      	lsls	r3, r3, #2
 8106e96:	fa02 f303 	lsl.w	r3, r2, r3
 8106e9a:	69ba      	ldr	r2, [r7, #24]
 8106e9c:	4313      	orrs	r3, r2
 8106e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106ea0:	69fb      	ldr	r3, [r7, #28]
 8106ea2:	08da      	lsrs	r2, r3, #3
 8106ea4:	687b      	ldr	r3, [r7, #4]
 8106ea6:	3208      	adds	r2, #8
 8106ea8:	69b9      	ldr	r1, [r7, #24]
 8106eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106eae:	687b      	ldr	r3, [r7, #4]
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106eb4:	69fb      	ldr	r3, [r7, #28]
 8106eb6:	005b      	lsls	r3, r3, #1
 8106eb8:	2203      	movs	r2, #3
 8106eba:	fa02 f303 	lsl.w	r3, r2, r3
 8106ebe:	43db      	mvns	r3, r3
 8106ec0:	69ba      	ldr	r2, [r7, #24]
 8106ec2:	4013      	ands	r3, r2
 8106ec4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106ec6:	683b      	ldr	r3, [r7, #0]
 8106ec8:	685b      	ldr	r3, [r3, #4]
 8106eca:	f003 0203 	and.w	r2, r3, #3
 8106ece:	69fb      	ldr	r3, [r7, #28]
 8106ed0:	005b      	lsls	r3, r3, #1
 8106ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8106ed6:	69ba      	ldr	r2, [r7, #24]
 8106ed8:	4313      	orrs	r3, r2
 8106eda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	69ba      	ldr	r2, [r7, #24]
 8106ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8106ee2:	683b      	ldr	r3, [r7, #0]
 8106ee4:	685b      	ldr	r3, [r3, #4]
 8106ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106eea:	2b00      	cmp	r3, #0
 8106eec:	f000 80e0 	beq.w	81070b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106ef0:	4b2f      	ldr	r3, [pc, #188]	; (8106fb0 <HAL_GPIO_Init+0x238>)
 8106ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106ef6:	4a2e      	ldr	r2, [pc, #184]	; (8106fb0 <HAL_GPIO_Init+0x238>)
 8106ef8:	f043 0302 	orr.w	r3, r3, #2
 8106efc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106f00:	4b2b      	ldr	r3, [pc, #172]	; (8106fb0 <HAL_GPIO_Init+0x238>)
 8106f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106f06:	f003 0302 	and.w	r3, r3, #2
 8106f0a:	60fb      	str	r3, [r7, #12]
 8106f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106f0e:	4a29      	ldr	r2, [pc, #164]	; (8106fb4 <HAL_GPIO_Init+0x23c>)
 8106f10:	69fb      	ldr	r3, [r7, #28]
 8106f12:	089b      	lsrs	r3, r3, #2
 8106f14:	3302      	adds	r3, #2
 8106f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106f1c:	69fb      	ldr	r3, [r7, #28]
 8106f1e:	f003 0303 	and.w	r3, r3, #3
 8106f22:	009b      	lsls	r3, r3, #2
 8106f24:	220f      	movs	r2, #15
 8106f26:	fa02 f303 	lsl.w	r3, r2, r3
 8106f2a:	43db      	mvns	r3, r3
 8106f2c:	69ba      	ldr	r2, [r7, #24]
 8106f2e:	4013      	ands	r3, r2
 8106f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	4a20      	ldr	r2, [pc, #128]	; (8106fb8 <HAL_GPIO_Init+0x240>)
 8106f36:	4293      	cmp	r3, r2
 8106f38:	d052      	beq.n	8106fe0 <HAL_GPIO_Init+0x268>
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	4a1f      	ldr	r2, [pc, #124]	; (8106fbc <HAL_GPIO_Init+0x244>)
 8106f3e:	4293      	cmp	r3, r2
 8106f40:	d031      	beq.n	8106fa6 <HAL_GPIO_Init+0x22e>
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	4a1e      	ldr	r2, [pc, #120]	; (8106fc0 <HAL_GPIO_Init+0x248>)
 8106f46:	4293      	cmp	r3, r2
 8106f48:	d02b      	beq.n	8106fa2 <HAL_GPIO_Init+0x22a>
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	4a1d      	ldr	r2, [pc, #116]	; (8106fc4 <HAL_GPIO_Init+0x24c>)
 8106f4e:	4293      	cmp	r3, r2
 8106f50:	d025      	beq.n	8106f9e <HAL_GPIO_Init+0x226>
 8106f52:	687b      	ldr	r3, [r7, #4]
 8106f54:	4a1c      	ldr	r2, [pc, #112]	; (8106fc8 <HAL_GPIO_Init+0x250>)
 8106f56:	4293      	cmp	r3, r2
 8106f58:	d01f      	beq.n	8106f9a <HAL_GPIO_Init+0x222>
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	4a1b      	ldr	r2, [pc, #108]	; (8106fcc <HAL_GPIO_Init+0x254>)
 8106f5e:	4293      	cmp	r3, r2
 8106f60:	d019      	beq.n	8106f96 <HAL_GPIO_Init+0x21e>
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	4a1a      	ldr	r2, [pc, #104]	; (8106fd0 <HAL_GPIO_Init+0x258>)
 8106f66:	4293      	cmp	r3, r2
 8106f68:	d013      	beq.n	8106f92 <HAL_GPIO_Init+0x21a>
 8106f6a:	687b      	ldr	r3, [r7, #4]
 8106f6c:	4a19      	ldr	r2, [pc, #100]	; (8106fd4 <HAL_GPIO_Init+0x25c>)
 8106f6e:	4293      	cmp	r3, r2
 8106f70:	d00d      	beq.n	8106f8e <HAL_GPIO_Init+0x216>
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	4a18      	ldr	r2, [pc, #96]	; (8106fd8 <HAL_GPIO_Init+0x260>)
 8106f76:	4293      	cmp	r3, r2
 8106f78:	d007      	beq.n	8106f8a <HAL_GPIO_Init+0x212>
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	4a17      	ldr	r2, [pc, #92]	; (8106fdc <HAL_GPIO_Init+0x264>)
 8106f7e:	4293      	cmp	r3, r2
 8106f80:	d101      	bne.n	8106f86 <HAL_GPIO_Init+0x20e>
 8106f82:	2309      	movs	r3, #9
 8106f84:	e02d      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f86:	230a      	movs	r3, #10
 8106f88:	e02b      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f8a:	2308      	movs	r3, #8
 8106f8c:	e029      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f8e:	2307      	movs	r3, #7
 8106f90:	e027      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f92:	2306      	movs	r3, #6
 8106f94:	e025      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f96:	2305      	movs	r3, #5
 8106f98:	e023      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f9a:	2304      	movs	r3, #4
 8106f9c:	e021      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106f9e:	2303      	movs	r3, #3
 8106fa0:	e01f      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106fa2:	2302      	movs	r3, #2
 8106fa4:	e01d      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106fa6:	2301      	movs	r3, #1
 8106fa8:	e01b      	b.n	8106fe2 <HAL_GPIO_Init+0x26a>
 8106faa:	bf00      	nop
 8106fac:	580000c0 	.word	0x580000c0
 8106fb0:	58024400 	.word	0x58024400
 8106fb4:	58000400 	.word	0x58000400
 8106fb8:	58020000 	.word	0x58020000
 8106fbc:	58020400 	.word	0x58020400
 8106fc0:	58020800 	.word	0x58020800
 8106fc4:	58020c00 	.word	0x58020c00
 8106fc8:	58021000 	.word	0x58021000
 8106fcc:	58021400 	.word	0x58021400
 8106fd0:	58021800 	.word	0x58021800
 8106fd4:	58021c00 	.word	0x58021c00
 8106fd8:	58022000 	.word	0x58022000
 8106fdc:	58022400 	.word	0x58022400
 8106fe0:	2300      	movs	r3, #0
 8106fe2:	69fa      	ldr	r2, [r7, #28]
 8106fe4:	f002 0203 	and.w	r2, r2, #3
 8106fe8:	0092      	lsls	r2, r2, #2
 8106fea:	4093      	lsls	r3, r2
 8106fec:	69ba      	ldr	r2, [r7, #24]
 8106fee:	4313      	orrs	r3, r2
 8106ff0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106ff2:	4938      	ldr	r1, [pc, #224]	; (81070d4 <HAL_GPIO_Init+0x35c>)
 8106ff4:	69fb      	ldr	r3, [r7, #28]
 8106ff6:	089b      	lsrs	r3, r3, #2
 8106ff8:	3302      	adds	r3, #2
 8106ffa:	69ba      	ldr	r2, [r7, #24]
 8106ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8107000:	697b      	ldr	r3, [r7, #20]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107006:	693b      	ldr	r3, [r7, #16]
 8107008:	43db      	mvns	r3, r3
 810700a:	69ba      	ldr	r2, [r7, #24]
 810700c:	4013      	ands	r3, r2
 810700e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8107010:	683b      	ldr	r3, [r7, #0]
 8107012:	685b      	ldr	r3, [r3, #4]
 8107014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107018:	2b00      	cmp	r3, #0
 810701a:	d003      	beq.n	8107024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810701c:	69ba      	ldr	r2, [r7, #24]
 810701e:	693b      	ldr	r3, [r7, #16]
 8107020:	4313      	orrs	r3, r2
 8107022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8107024:	697b      	ldr	r3, [r7, #20]
 8107026:	69ba      	ldr	r2, [r7, #24]
 8107028:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810702a:	697b      	ldr	r3, [r7, #20]
 810702c:	685b      	ldr	r3, [r3, #4]
 810702e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107030:	693b      	ldr	r3, [r7, #16]
 8107032:	43db      	mvns	r3, r3
 8107034:	69ba      	ldr	r2, [r7, #24]
 8107036:	4013      	ands	r3, r2
 8107038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810703a:	683b      	ldr	r3, [r7, #0]
 810703c:	685b      	ldr	r3, [r3, #4]
 810703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107042:	2b00      	cmp	r3, #0
 8107044:	d003      	beq.n	810704e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8107046:	69ba      	ldr	r2, [r7, #24]
 8107048:	693b      	ldr	r3, [r7, #16]
 810704a:	4313      	orrs	r3, r2
 810704c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810704e:	697b      	ldr	r3, [r7, #20]
 8107050:	69ba      	ldr	r2, [r7, #24]
 8107052:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8107054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107058:	681b      	ldr	r3, [r3, #0]
 810705a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810705c:	693b      	ldr	r3, [r7, #16]
 810705e:	43db      	mvns	r3, r3
 8107060:	69ba      	ldr	r2, [r7, #24]
 8107062:	4013      	ands	r3, r2
 8107064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8107066:	683b      	ldr	r3, [r7, #0]
 8107068:	685b      	ldr	r3, [r3, #4]
 810706a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810706e:	2b00      	cmp	r3, #0
 8107070:	d003      	beq.n	810707a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8107072:	69ba      	ldr	r2, [r7, #24]
 8107074:	693b      	ldr	r3, [r7, #16]
 8107076:	4313      	orrs	r3, r2
 8107078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810707a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810707e:	69bb      	ldr	r3, [r7, #24]
 8107080:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8107082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8107086:	685b      	ldr	r3, [r3, #4]
 8107088:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810708a:	693b      	ldr	r3, [r7, #16]
 810708c:	43db      	mvns	r3, r3
 810708e:	69ba      	ldr	r2, [r7, #24]
 8107090:	4013      	ands	r3, r2
 8107092:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8107094:	683b      	ldr	r3, [r7, #0]
 8107096:	685b      	ldr	r3, [r3, #4]
 8107098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810709c:	2b00      	cmp	r3, #0
 810709e:	d003      	beq.n	81070a8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81070a0:	69ba      	ldr	r2, [r7, #24]
 81070a2:	693b      	ldr	r3, [r7, #16]
 81070a4:	4313      	orrs	r3, r2
 81070a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81070a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81070ac:	69bb      	ldr	r3, [r7, #24]
 81070ae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81070b0:	69fb      	ldr	r3, [r7, #28]
 81070b2:	3301      	adds	r3, #1
 81070b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81070b6:	683b      	ldr	r3, [r7, #0]
 81070b8:	681a      	ldr	r2, [r3, #0]
 81070ba:	69fb      	ldr	r3, [r7, #28]
 81070bc:	fa22 f303 	lsr.w	r3, r2, r3
 81070c0:	2b00      	cmp	r3, #0
 81070c2:	f47f ae63 	bne.w	8106d8c <HAL_GPIO_Init+0x14>
  }
}
 81070c6:	bf00      	nop
 81070c8:	bf00      	nop
 81070ca:	3724      	adds	r7, #36	; 0x24
 81070cc:	46bd      	mov	sp, r7
 81070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070d2:	4770      	bx	lr
 81070d4:	58000400 	.word	0x58000400

081070d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81070d8:	b480      	push	{r7}
 81070da:	b083      	sub	sp, #12
 81070dc:	af00      	add	r7, sp, #0
 81070de:	6078      	str	r0, [r7, #4]
 81070e0:	460b      	mov	r3, r1
 81070e2:	807b      	strh	r3, [r7, #2]
 81070e4:	4613      	mov	r3, r2
 81070e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81070e8:	787b      	ldrb	r3, [r7, #1]
 81070ea:	2b00      	cmp	r3, #0
 81070ec:	d003      	beq.n	81070f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81070ee:	887a      	ldrh	r2, [r7, #2]
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81070f4:	e003      	b.n	81070fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81070f6:	887b      	ldrh	r3, [r7, #2]
 81070f8:	041a      	lsls	r2, r3, #16
 81070fa:	687b      	ldr	r3, [r7, #4]
 81070fc:	619a      	str	r2, [r3, #24]
}
 81070fe:	bf00      	nop
 8107100:	370c      	adds	r7, #12
 8107102:	46bd      	mov	sp, r7
 8107104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107108:	4770      	bx	lr
	...

0810710c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 810710c:	b480      	push	{r7}
 810710e:	b083      	sub	sp, #12
 8107110:	af00      	add	r7, sp, #0
 8107112:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8107114:	4a08      	ldr	r2, [pc, #32]	; (8107138 <HAL_HSEM_FastTake+0x2c>)
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	3320      	adds	r3, #32
 810711a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810711e:	4a07      	ldr	r2, [pc, #28]	; (810713c <HAL_HSEM_FastTake+0x30>)
 8107120:	4293      	cmp	r3, r2
 8107122:	d101      	bne.n	8107128 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8107124:	2300      	movs	r3, #0
 8107126:	e000      	b.n	810712a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8107128:	2301      	movs	r3, #1
}
 810712a:	4618      	mov	r0, r3
 810712c:	370c      	adds	r7, #12
 810712e:	46bd      	mov	sp, r7
 8107130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107134:	4770      	bx	lr
 8107136:	bf00      	nop
 8107138:	58026400 	.word	0x58026400
 810713c:	80000100 	.word	0x80000100

08107140 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8107140:	b480      	push	{r7}
 8107142:	b083      	sub	sp, #12
 8107144:	af00      	add	r7, sp, #0
 8107146:	6078      	str	r0, [r7, #4]
 8107148:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810714a:	4906      	ldr	r1, [pc, #24]	; (8107164 <HAL_HSEM_Release+0x24>)
 810714c:	683b      	ldr	r3, [r7, #0]
 810714e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8107158:	bf00      	nop
 810715a:	370c      	adds	r7, #12
 810715c:	46bd      	mov	sp, r7
 810715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107162:	4770      	bx	lr
 8107164:	58026400 	.word	0x58026400

08107168 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107168:	b480      	push	{r7}
 810716a:	b083      	sub	sp, #12
 810716c:	af00      	add	r7, sp, #0
 810716e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8107170:	4b05      	ldr	r3, [pc, #20]	; (8107188 <HAL_HSEM_ActivateNotification+0x20>)
 8107172:	681a      	ldr	r2, [r3, #0]
 8107174:	4904      	ldr	r1, [pc, #16]	; (8107188 <HAL_HSEM_ActivateNotification+0x20>)
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	4313      	orrs	r3, r2
 810717a:	600b      	str	r3, [r1, #0]
#endif
}
 810717c:	bf00      	nop
 810717e:	370c      	adds	r7, #12
 8107180:	46bd      	mov	sp, r7
 8107182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107186:	4770      	bx	lr
 8107188:	58026510 	.word	0x58026510

0810718c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810718c:	b580      	push	{r7, lr}
 810718e:	b082      	sub	sp, #8
 8107190:	af00      	add	r7, sp, #0
 8107192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8107194:	687b      	ldr	r3, [r7, #4]
 8107196:	2b00      	cmp	r3, #0
 8107198:	d101      	bne.n	810719e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810719a:	2301      	movs	r3, #1
 810719c:	e081      	b.n	81072a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810719e:	687b      	ldr	r3, [r7, #4]
 81071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81071a4:	b2db      	uxtb	r3, r3
 81071a6:	2b00      	cmp	r3, #0
 81071a8:	d106      	bne.n	81071b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	2200      	movs	r2, #0
 81071ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81071b2:	6878      	ldr	r0, [r7, #4]
 81071b4:	f7fa fdb8 	bl	8101d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81071b8:	687b      	ldr	r3, [r7, #4]
 81071ba:	2224      	movs	r2, #36	; 0x24
 81071bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	681b      	ldr	r3, [r3, #0]
 81071c4:	681a      	ldr	r2, [r3, #0]
 81071c6:	687b      	ldr	r3, [r7, #4]
 81071c8:	681b      	ldr	r3, [r3, #0]
 81071ca:	f022 0201 	bic.w	r2, r2, #1
 81071ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	685a      	ldr	r2, [r3, #4]
 81071d4:	687b      	ldr	r3, [r7, #4]
 81071d6:	681b      	ldr	r3, [r3, #0]
 81071d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81071dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	681b      	ldr	r3, [r3, #0]
 81071e2:	689a      	ldr	r2, [r3, #8]
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	681b      	ldr	r3, [r3, #0]
 81071e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81071ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81071ee:	687b      	ldr	r3, [r7, #4]
 81071f0:	68db      	ldr	r3, [r3, #12]
 81071f2:	2b01      	cmp	r3, #1
 81071f4:	d107      	bne.n	8107206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	689a      	ldr	r2, [r3, #8]
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107202:	609a      	str	r2, [r3, #8]
 8107204:	e006      	b.n	8107214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	689a      	ldr	r2, [r3, #8]
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	681b      	ldr	r3, [r3, #0]
 810720e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8107212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	68db      	ldr	r3, [r3, #12]
 8107218:	2b02      	cmp	r3, #2
 810721a:	d104      	bne.n	8107226 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 810721c:	687b      	ldr	r3, [r7, #4]
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107224:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	681b      	ldr	r3, [r3, #0]
 810722a:	685b      	ldr	r3, [r3, #4]
 810722c:	687a      	ldr	r2, [r7, #4]
 810722e:	6812      	ldr	r2, [r2, #0]
 8107230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8107234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8107238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	681b      	ldr	r3, [r3, #0]
 810723e:	68da      	ldr	r2, [r3, #12]
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810724a:	687b      	ldr	r3, [r7, #4]
 810724c:	691a      	ldr	r2, [r3, #16]
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	695b      	ldr	r3, [r3, #20]
 8107252:	ea42 0103 	orr.w	r1, r2, r3
 8107256:	687b      	ldr	r3, [r7, #4]
 8107258:	699b      	ldr	r3, [r3, #24]
 810725a:	021a      	lsls	r2, r3, #8
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	681b      	ldr	r3, [r3, #0]
 8107260:	430a      	orrs	r2, r1
 8107262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	69d9      	ldr	r1, [r3, #28]
 8107268:	687b      	ldr	r3, [r7, #4]
 810726a:	6a1a      	ldr	r2, [r3, #32]
 810726c:	687b      	ldr	r3, [r7, #4]
 810726e:	681b      	ldr	r3, [r3, #0]
 8107270:	430a      	orrs	r2, r1
 8107272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8107274:	687b      	ldr	r3, [r7, #4]
 8107276:	681b      	ldr	r3, [r3, #0]
 8107278:	681a      	ldr	r2, [r3, #0]
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	f042 0201 	orr.w	r2, r2, #1
 8107282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	2200      	movs	r2, #0
 8107288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	2220      	movs	r2, #32
 810728e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	2200      	movs	r2, #0
 8107296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	2200      	movs	r2, #0
 810729c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81072a0:	2300      	movs	r3, #0
}
 81072a2:	4618      	mov	r0, r3
 81072a4:	3708      	adds	r7, #8
 81072a6:	46bd      	mov	sp, r7
 81072a8:	bd80      	pop	{r7, pc}
	...

081072ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81072ac:	b580      	push	{r7, lr}
 81072ae:	b088      	sub	sp, #32
 81072b0:	af02      	add	r7, sp, #8
 81072b2:	60f8      	str	r0, [r7, #12]
 81072b4:	4608      	mov	r0, r1
 81072b6:	4611      	mov	r1, r2
 81072b8:	461a      	mov	r2, r3
 81072ba:	4603      	mov	r3, r0
 81072bc:	817b      	strh	r3, [r7, #10]
 81072be:	460b      	mov	r3, r1
 81072c0:	813b      	strh	r3, [r7, #8]
 81072c2:	4613      	mov	r3, r2
 81072c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81072c6:	68fb      	ldr	r3, [r7, #12]
 81072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81072cc:	b2db      	uxtb	r3, r3
 81072ce:	2b20      	cmp	r3, #32
 81072d0:	f040 80f9 	bne.w	81074c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81072d4:	6a3b      	ldr	r3, [r7, #32]
 81072d6:	2b00      	cmp	r3, #0
 81072d8:	d002      	beq.n	81072e0 <HAL_I2C_Mem_Write+0x34>
 81072da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81072dc:	2b00      	cmp	r3, #0
 81072de:	d105      	bne.n	81072ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81072e0:	68fb      	ldr	r3, [r7, #12]
 81072e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81072e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81072e8:	2301      	movs	r3, #1
 81072ea:	e0ed      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81072ec:	68fb      	ldr	r3, [r7, #12]
 81072ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81072f2:	2b01      	cmp	r3, #1
 81072f4:	d101      	bne.n	81072fa <HAL_I2C_Mem_Write+0x4e>
 81072f6:	2302      	movs	r3, #2
 81072f8:	e0e6      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
 81072fa:	68fb      	ldr	r3, [r7, #12]
 81072fc:	2201      	movs	r2, #1
 81072fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8107302:	f7fc faa1 	bl	8103848 <HAL_GetTick>
 8107306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107308:	697b      	ldr	r3, [r7, #20]
 810730a:	9300      	str	r3, [sp, #0]
 810730c:	2319      	movs	r3, #25
 810730e:	2201      	movs	r2, #1
 8107310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107314:	68f8      	ldr	r0, [r7, #12]
 8107316:	f001 f8c6 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 810731a:	4603      	mov	r3, r0
 810731c:	2b00      	cmp	r3, #0
 810731e:	d001      	beq.n	8107324 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8107320:	2301      	movs	r3, #1
 8107322:	e0d1      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8107324:	68fb      	ldr	r3, [r7, #12]
 8107326:	2221      	movs	r2, #33	; 0x21
 8107328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810732c:	68fb      	ldr	r3, [r7, #12]
 810732e:	2240      	movs	r2, #64	; 0x40
 8107330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107334:	68fb      	ldr	r3, [r7, #12]
 8107336:	2200      	movs	r2, #0
 8107338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	6a3a      	ldr	r2, [r7, #32]
 810733e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8107340:	68fb      	ldr	r3, [r7, #12]
 8107342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8107344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8107346:	68fb      	ldr	r3, [r7, #12]
 8107348:	2200      	movs	r2, #0
 810734a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810734c:	88f8      	ldrh	r0, [r7, #6]
 810734e:	893a      	ldrh	r2, [r7, #8]
 8107350:	8979      	ldrh	r1, [r7, #10]
 8107352:	697b      	ldr	r3, [r7, #20]
 8107354:	9301      	str	r3, [sp, #4]
 8107356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107358:	9300      	str	r3, [sp, #0]
 810735a:	4603      	mov	r3, r0
 810735c:	68f8      	ldr	r0, [r7, #12]
 810735e:	f000 fb91 	bl	8107a84 <I2C_RequestMemoryWrite>
 8107362:	4603      	mov	r3, r0
 8107364:	2b00      	cmp	r3, #0
 8107366:	d005      	beq.n	8107374 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	2200      	movs	r2, #0
 810736c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8107370:	2301      	movs	r3, #1
 8107372:	e0a9      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107378:	b29b      	uxth	r3, r3
 810737a:	2bff      	cmp	r3, #255	; 0xff
 810737c:	d90e      	bls.n	810739c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	22ff      	movs	r2, #255	; 0xff
 8107382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107388:	b2da      	uxtb	r2, r3
 810738a:	8979      	ldrh	r1, [r7, #10]
 810738c:	2300      	movs	r3, #0
 810738e:	9300      	str	r3, [sp, #0]
 8107390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107394:	68f8      	ldr	r0, [r7, #12]
 8107396:	f001 f9a9 	bl	81086ec <I2C_TransferConfig>
 810739a:	e00f      	b.n	81073bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810739c:	68fb      	ldr	r3, [r7, #12]
 810739e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073a0:	b29a      	uxth	r2, r3
 81073a2:	68fb      	ldr	r3, [r7, #12]
 81073a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81073a6:	68fb      	ldr	r3, [r7, #12]
 81073a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073aa:	b2da      	uxtb	r2, r3
 81073ac:	8979      	ldrh	r1, [r7, #10]
 81073ae:	2300      	movs	r3, #0
 81073b0:	9300      	str	r3, [sp, #0]
 81073b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81073b6:	68f8      	ldr	r0, [r7, #12]
 81073b8:	f001 f998 	bl	81086ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81073bc:	697a      	ldr	r2, [r7, #20]
 81073be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81073c0:	68f8      	ldr	r0, [r7, #12]
 81073c2:	f001 f8b0 	bl	8108526 <I2C_WaitOnTXISFlagUntilTimeout>
 81073c6:	4603      	mov	r3, r0
 81073c8:	2b00      	cmp	r3, #0
 81073ca:	d001      	beq.n	81073d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81073cc:	2301      	movs	r3, #1
 81073ce:	e07b      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81073d0:	68fb      	ldr	r3, [r7, #12]
 81073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81073d4:	781a      	ldrb	r2, [r3, #0]
 81073d6:	68fb      	ldr	r3, [r7, #12]
 81073d8:	681b      	ldr	r3, [r3, #0]
 81073da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81073dc:	68fb      	ldr	r3, [r7, #12]
 81073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81073e0:	1c5a      	adds	r2, r3, #1
 81073e2:	68fb      	ldr	r3, [r7, #12]
 81073e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81073e6:	68fb      	ldr	r3, [r7, #12]
 81073e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073ea:	b29b      	uxth	r3, r3
 81073ec:	3b01      	subs	r3, #1
 81073ee:	b29a      	uxth	r2, r3
 81073f0:	68fb      	ldr	r3, [r7, #12]
 81073f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073f8:	3b01      	subs	r3, #1
 81073fa:	b29a      	uxth	r2, r3
 81073fc:	68fb      	ldr	r3, [r7, #12]
 81073fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107404:	b29b      	uxth	r3, r3
 8107406:	2b00      	cmp	r3, #0
 8107408:	d034      	beq.n	8107474 <HAL_I2C_Mem_Write+0x1c8>
 810740a:	68fb      	ldr	r3, [r7, #12]
 810740c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810740e:	2b00      	cmp	r3, #0
 8107410:	d130      	bne.n	8107474 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8107412:	697b      	ldr	r3, [r7, #20]
 8107414:	9300      	str	r3, [sp, #0]
 8107416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107418:	2200      	movs	r2, #0
 810741a:	2180      	movs	r1, #128	; 0x80
 810741c:	68f8      	ldr	r0, [r7, #12]
 810741e:	f001 f842 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 8107422:	4603      	mov	r3, r0
 8107424:	2b00      	cmp	r3, #0
 8107426:	d001      	beq.n	810742c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8107428:	2301      	movs	r3, #1
 810742a:	e04d      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810742c:	68fb      	ldr	r3, [r7, #12]
 810742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107430:	b29b      	uxth	r3, r3
 8107432:	2bff      	cmp	r3, #255	; 0xff
 8107434:	d90e      	bls.n	8107454 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107436:	68fb      	ldr	r3, [r7, #12]
 8107438:	22ff      	movs	r2, #255	; 0xff
 810743a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810743c:	68fb      	ldr	r3, [r7, #12]
 810743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107440:	b2da      	uxtb	r2, r3
 8107442:	8979      	ldrh	r1, [r7, #10]
 8107444:	2300      	movs	r3, #0
 8107446:	9300      	str	r3, [sp, #0]
 8107448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810744c:	68f8      	ldr	r0, [r7, #12]
 810744e:	f001 f94d 	bl	81086ec <I2C_TransferConfig>
 8107452:	e00f      	b.n	8107474 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107458:	b29a      	uxth	r2, r3
 810745a:	68fb      	ldr	r3, [r7, #12]
 810745c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810745e:	68fb      	ldr	r3, [r7, #12]
 8107460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107462:	b2da      	uxtb	r2, r3
 8107464:	8979      	ldrh	r1, [r7, #10]
 8107466:	2300      	movs	r3, #0
 8107468:	9300      	str	r3, [sp, #0]
 810746a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810746e:	68f8      	ldr	r0, [r7, #12]
 8107470:	f001 f93c 	bl	81086ec <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8107474:	68fb      	ldr	r3, [r7, #12]
 8107476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107478:	b29b      	uxth	r3, r3
 810747a:	2b00      	cmp	r3, #0
 810747c:	d19e      	bne.n	81073bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810747e:	697a      	ldr	r2, [r7, #20]
 8107480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8107482:	68f8      	ldr	r0, [r7, #12]
 8107484:	f001 f88f 	bl	81085a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8107488:	4603      	mov	r3, r0
 810748a:	2b00      	cmp	r3, #0
 810748c:	d001      	beq.n	8107492 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810748e:	2301      	movs	r3, #1
 8107490:	e01a      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107492:	68fb      	ldr	r3, [r7, #12]
 8107494:	681b      	ldr	r3, [r3, #0]
 8107496:	2220      	movs	r2, #32
 8107498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810749a:	68fb      	ldr	r3, [r7, #12]
 810749c:	681b      	ldr	r3, [r3, #0]
 810749e:	6859      	ldr	r1, [r3, #4]
 81074a0:	68fb      	ldr	r3, [r7, #12]
 81074a2:	681a      	ldr	r2, [r3, #0]
 81074a4:	4b0a      	ldr	r3, [pc, #40]	; (81074d0 <HAL_I2C_Mem_Write+0x224>)
 81074a6:	400b      	ands	r3, r1
 81074a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81074aa:	68fb      	ldr	r3, [r7, #12]
 81074ac:	2220      	movs	r2, #32
 81074ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	2200      	movs	r2, #0
 81074b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81074ba:	68fb      	ldr	r3, [r7, #12]
 81074bc:	2200      	movs	r2, #0
 81074be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81074c2:	2300      	movs	r3, #0
 81074c4:	e000      	b.n	81074c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81074c6:	2302      	movs	r3, #2
  }
}
 81074c8:	4618      	mov	r0, r3
 81074ca:	3718      	adds	r7, #24
 81074cc:	46bd      	mov	sp, r7
 81074ce:	bd80      	pop	{r7, pc}
 81074d0:	fe00e800 	.word	0xfe00e800

081074d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81074d4:	b580      	push	{r7, lr}
 81074d6:	b088      	sub	sp, #32
 81074d8:	af02      	add	r7, sp, #8
 81074da:	60f8      	str	r0, [r7, #12]
 81074dc:	4608      	mov	r0, r1
 81074de:	4611      	mov	r1, r2
 81074e0:	461a      	mov	r2, r3
 81074e2:	4603      	mov	r3, r0
 81074e4:	817b      	strh	r3, [r7, #10]
 81074e6:	460b      	mov	r3, r1
 81074e8:	813b      	strh	r3, [r7, #8]
 81074ea:	4613      	mov	r3, r2
 81074ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81074ee:	68fb      	ldr	r3, [r7, #12]
 81074f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81074f4:	b2db      	uxtb	r3, r3
 81074f6:	2b20      	cmp	r3, #32
 81074f8:	f040 80fd 	bne.w	81076f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81074fc:	6a3b      	ldr	r3, [r7, #32]
 81074fe:	2b00      	cmp	r3, #0
 8107500:	d002      	beq.n	8107508 <HAL_I2C_Mem_Read+0x34>
 8107502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8107504:	2b00      	cmp	r3, #0
 8107506:	d105      	bne.n	8107514 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8107508:	68fb      	ldr	r3, [r7, #12]
 810750a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810750e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8107510:	2301      	movs	r3, #1
 8107512:	e0f1      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107514:	68fb      	ldr	r3, [r7, #12]
 8107516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810751a:	2b01      	cmp	r3, #1
 810751c:	d101      	bne.n	8107522 <HAL_I2C_Mem_Read+0x4e>
 810751e:	2302      	movs	r3, #2
 8107520:	e0ea      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
 8107522:	68fb      	ldr	r3, [r7, #12]
 8107524:	2201      	movs	r2, #1
 8107526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810752a:	f7fc f98d 	bl	8103848 <HAL_GetTick>
 810752e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107530:	697b      	ldr	r3, [r7, #20]
 8107532:	9300      	str	r3, [sp, #0]
 8107534:	2319      	movs	r3, #25
 8107536:	2201      	movs	r2, #1
 8107538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810753c:	68f8      	ldr	r0, [r7, #12]
 810753e:	f000 ffb2 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 8107542:	4603      	mov	r3, r0
 8107544:	2b00      	cmp	r3, #0
 8107546:	d001      	beq.n	810754c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8107548:	2301      	movs	r3, #1
 810754a:	e0d5      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810754c:	68fb      	ldr	r3, [r7, #12]
 810754e:	2222      	movs	r2, #34	; 0x22
 8107550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	2240      	movs	r2, #64	; 0x40
 8107558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810755c:	68fb      	ldr	r3, [r7, #12]
 810755e:	2200      	movs	r2, #0
 8107560:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8107562:	68fb      	ldr	r3, [r7, #12]
 8107564:	6a3a      	ldr	r2, [r7, #32]
 8107566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8107568:	68fb      	ldr	r3, [r7, #12]
 810756a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810756c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810756e:	68fb      	ldr	r3, [r7, #12]
 8107570:	2200      	movs	r2, #0
 8107572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8107574:	88f8      	ldrh	r0, [r7, #6]
 8107576:	893a      	ldrh	r2, [r7, #8]
 8107578:	8979      	ldrh	r1, [r7, #10]
 810757a:	697b      	ldr	r3, [r7, #20]
 810757c:	9301      	str	r3, [sp, #4]
 810757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107580:	9300      	str	r3, [sp, #0]
 8107582:	4603      	mov	r3, r0
 8107584:	68f8      	ldr	r0, [r7, #12]
 8107586:	f000 fad1 	bl	8107b2c <I2C_RequestMemoryRead>
 810758a:	4603      	mov	r3, r0
 810758c:	2b00      	cmp	r3, #0
 810758e:	d005      	beq.n	810759c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107590:	68fb      	ldr	r3, [r7, #12]
 8107592:	2200      	movs	r2, #0
 8107594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8107598:	2301      	movs	r3, #1
 810759a:	e0ad      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810759c:	68fb      	ldr	r3, [r7, #12]
 810759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81075a0:	b29b      	uxth	r3, r3
 81075a2:	2bff      	cmp	r3, #255	; 0xff
 81075a4:	d90e      	bls.n	81075c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81075a6:	68fb      	ldr	r3, [r7, #12]
 81075a8:	22ff      	movs	r2, #255	; 0xff
 81075aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81075ac:	68fb      	ldr	r3, [r7, #12]
 81075ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81075b0:	b2da      	uxtb	r2, r3
 81075b2:	8979      	ldrh	r1, [r7, #10]
 81075b4:	4b52      	ldr	r3, [pc, #328]	; (8107700 <HAL_I2C_Mem_Read+0x22c>)
 81075b6:	9300      	str	r3, [sp, #0]
 81075b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81075bc:	68f8      	ldr	r0, [r7, #12]
 81075be:	f001 f895 	bl	81086ec <I2C_TransferConfig>
 81075c2:	e00f      	b.n	81075e4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81075c4:	68fb      	ldr	r3, [r7, #12]
 81075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81075c8:	b29a      	uxth	r2, r3
 81075ca:	68fb      	ldr	r3, [r7, #12]
 81075cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81075ce:	68fb      	ldr	r3, [r7, #12]
 81075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81075d2:	b2da      	uxtb	r2, r3
 81075d4:	8979      	ldrh	r1, [r7, #10]
 81075d6:	4b4a      	ldr	r3, [pc, #296]	; (8107700 <HAL_I2C_Mem_Read+0x22c>)
 81075d8:	9300      	str	r3, [sp, #0]
 81075da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81075de:	68f8      	ldr	r0, [r7, #12]
 81075e0:	f001 f884 	bl	81086ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81075e4:	697b      	ldr	r3, [r7, #20]
 81075e6:	9300      	str	r3, [sp, #0]
 81075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81075ea:	2200      	movs	r2, #0
 81075ec:	2104      	movs	r1, #4
 81075ee:	68f8      	ldr	r0, [r7, #12]
 81075f0:	f000 ff59 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 81075f4:	4603      	mov	r3, r0
 81075f6:	2b00      	cmp	r3, #0
 81075f8:	d001      	beq.n	81075fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81075fa:	2301      	movs	r3, #1
 81075fc:	e07c      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81075fe:	68fb      	ldr	r3, [r7, #12]
 8107600:	681b      	ldr	r3, [r3, #0]
 8107602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107604:	68fb      	ldr	r3, [r7, #12]
 8107606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107608:	b2d2      	uxtb	r2, r2
 810760a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810760c:	68fb      	ldr	r3, [r7, #12]
 810760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107610:	1c5a      	adds	r2, r3, #1
 8107612:	68fb      	ldr	r3, [r7, #12]
 8107614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8107616:	68fb      	ldr	r3, [r7, #12]
 8107618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810761a:	3b01      	subs	r3, #1
 810761c:	b29a      	uxth	r2, r3
 810761e:	68fb      	ldr	r3, [r7, #12]
 8107620:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107622:	68fb      	ldr	r3, [r7, #12]
 8107624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107626:	b29b      	uxth	r3, r3
 8107628:	3b01      	subs	r3, #1
 810762a:	b29a      	uxth	r2, r3
 810762c:	68fb      	ldr	r3, [r7, #12]
 810762e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8107630:	68fb      	ldr	r3, [r7, #12]
 8107632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107634:	b29b      	uxth	r3, r3
 8107636:	2b00      	cmp	r3, #0
 8107638:	d034      	beq.n	81076a4 <HAL_I2C_Mem_Read+0x1d0>
 810763a:	68fb      	ldr	r3, [r7, #12]
 810763c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810763e:	2b00      	cmp	r3, #0
 8107640:	d130      	bne.n	81076a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8107642:	697b      	ldr	r3, [r7, #20]
 8107644:	9300      	str	r3, [sp, #0]
 8107646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107648:	2200      	movs	r2, #0
 810764a:	2180      	movs	r1, #128	; 0x80
 810764c:	68f8      	ldr	r0, [r7, #12]
 810764e:	f000 ff2a 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 8107652:	4603      	mov	r3, r0
 8107654:	2b00      	cmp	r3, #0
 8107656:	d001      	beq.n	810765c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8107658:	2301      	movs	r3, #1
 810765a:	e04d      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810765c:	68fb      	ldr	r3, [r7, #12]
 810765e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107660:	b29b      	uxth	r3, r3
 8107662:	2bff      	cmp	r3, #255	; 0xff
 8107664:	d90e      	bls.n	8107684 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8107666:	68fb      	ldr	r3, [r7, #12]
 8107668:	22ff      	movs	r2, #255	; 0xff
 810766a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810766c:	68fb      	ldr	r3, [r7, #12]
 810766e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107670:	b2da      	uxtb	r2, r3
 8107672:	8979      	ldrh	r1, [r7, #10]
 8107674:	2300      	movs	r3, #0
 8107676:	9300      	str	r3, [sp, #0]
 8107678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810767c:	68f8      	ldr	r0, [r7, #12]
 810767e:	f001 f835 	bl	81086ec <I2C_TransferConfig>
 8107682:	e00f      	b.n	81076a4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107688:	b29a      	uxth	r2, r3
 810768a:	68fb      	ldr	r3, [r7, #12]
 810768c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810768e:	68fb      	ldr	r3, [r7, #12]
 8107690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107692:	b2da      	uxtb	r2, r3
 8107694:	8979      	ldrh	r1, [r7, #10]
 8107696:	2300      	movs	r3, #0
 8107698:	9300      	str	r3, [sp, #0]
 810769a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810769e:	68f8      	ldr	r0, [r7, #12]
 81076a0:	f001 f824 	bl	81086ec <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 81076a4:	68fb      	ldr	r3, [r7, #12]
 81076a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81076a8:	b29b      	uxth	r3, r3
 81076aa:	2b00      	cmp	r3, #0
 81076ac:	d19a      	bne.n	81075e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81076ae:	697a      	ldr	r2, [r7, #20]
 81076b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81076b2:	68f8      	ldr	r0, [r7, #12]
 81076b4:	f000 ff77 	bl	81085a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 81076b8:	4603      	mov	r3, r0
 81076ba:	2b00      	cmp	r3, #0
 81076bc:	d001      	beq.n	81076c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81076be:	2301      	movs	r3, #1
 81076c0:	e01a      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81076c2:	68fb      	ldr	r3, [r7, #12]
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	2220      	movs	r2, #32
 81076c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81076ca:	68fb      	ldr	r3, [r7, #12]
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	6859      	ldr	r1, [r3, #4]
 81076d0:	68fb      	ldr	r3, [r7, #12]
 81076d2:	681a      	ldr	r2, [r3, #0]
 81076d4:	4b0b      	ldr	r3, [pc, #44]	; (8107704 <HAL_I2C_Mem_Read+0x230>)
 81076d6:	400b      	ands	r3, r1
 81076d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81076da:	68fb      	ldr	r3, [r7, #12]
 81076dc:	2220      	movs	r2, #32
 81076de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81076e2:	68fb      	ldr	r3, [r7, #12]
 81076e4:	2200      	movs	r2, #0
 81076e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81076ea:	68fb      	ldr	r3, [r7, #12]
 81076ec:	2200      	movs	r2, #0
 81076ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81076f2:	2300      	movs	r3, #0
 81076f4:	e000      	b.n	81076f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81076f6:	2302      	movs	r3, #2
  }
}
 81076f8:	4618      	mov	r0, r3
 81076fa:	3718      	adds	r7, #24
 81076fc:	46bd      	mov	sp, r7
 81076fe:	bd80      	pop	{r7, pc}
 8107700:	80002400 	.word	0x80002400
 8107704:	fe00e800 	.word	0xfe00e800

08107708 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107708:	b580      	push	{r7, lr}
 810770a:	b084      	sub	sp, #16
 810770c:	af00      	add	r7, sp, #0
 810770e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	681b      	ldr	r3, [r3, #0]
 8107714:	699b      	ldr	r3, [r3, #24]
 8107716:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	681b      	ldr	r3, [r3, #0]
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107724:	2b00      	cmp	r3, #0
 8107726:	d005      	beq.n	8107734 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810772c:	68ba      	ldr	r2, [r7, #8]
 810772e:	68f9      	ldr	r1, [r7, #12]
 8107730:	6878      	ldr	r0, [r7, #4]
 8107732:	4798      	blx	r3
  }
}
 8107734:	bf00      	nop
 8107736:	3710      	adds	r7, #16
 8107738:	46bd      	mov	sp, r7
 810773a:	bd80      	pop	{r7, pc}

0810773c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 810773c:	b580      	push	{r7, lr}
 810773e:	b086      	sub	sp, #24
 8107740:	af00      	add	r7, sp, #0
 8107742:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	681b      	ldr	r3, [r3, #0]
 8107748:	699b      	ldr	r3, [r3, #24]
 810774a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107754:	697b      	ldr	r3, [r7, #20]
 8107756:	0a1b      	lsrs	r3, r3, #8
 8107758:	f003 0301 	and.w	r3, r3, #1
 810775c:	2b00      	cmp	r3, #0
 810775e:	d010      	beq.n	8107782 <HAL_I2C_ER_IRQHandler+0x46>
 8107760:	693b      	ldr	r3, [r7, #16]
 8107762:	09db      	lsrs	r3, r3, #7
 8107764:	f003 0301 	and.w	r3, r3, #1
 8107768:	2b00      	cmp	r3, #0
 810776a:	d00a      	beq.n	8107782 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 810776c:	687b      	ldr	r3, [r7, #4]
 810776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107770:	f043 0201 	orr.w	r2, r3, #1
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8107778:	687b      	ldr	r3, [r7, #4]
 810777a:	681b      	ldr	r3, [r3, #0]
 810777c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8107780:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107782:	697b      	ldr	r3, [r7, #20]
 8107784:	0a9b      	lsrs	r3, r3, #10
 8107786:	f003 0301 	and.w	r3, r3, #1
 810778a:	2b00      	cmp	r3, #0
 810778c:	d010      	beq.n	81077b0 <HAL_I2C_ER_IRQHandler+0x74>
 810778e:	693b      	ldr	r3, [r7, #16]
 8107790:	09db      	lsrs	r3, r3, #7
 8107792:	f003 0301 	and.w	r3, r3, #1
 8107796:	2b00      	cmp	r3, #0
 8107798:	d00a      	beq.n	81077b0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810779e:	f043 0208 	orr.w	r2, r3, #8
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	681b      	ldr	r3, [r3, #0]
 81077aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81077ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81077b0:	697b      	ldr	r3, [r7, #20]
 81077b2:	0a5b      	lsrs	r3, r3, #9
 81077b4:	f003 0301 	and.w	r3, r3, #1
 81077b8:	2b00      	cmp	r3, #0
 81077ba:	d010      	beq.n	81077de <HAL_I2C_ER_IRQHandler+0xa2>
 81077bc:	693b      	ldr	r3, [r7, #16]
 81077be:	09db      	lsrs	r3, r3, #7
 81077c0:	f003 0301 	and.w	r3, r3, #1
 81077c4:	2b00      	cmp	r3, #0
 81077c6:	d00a      	beq.n	81077de <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81077cc:	f043 0202 	orr.w	r2, r3, #2
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81077d4:	687b      	ldr	r3, [r7, #4]
 81077d6:	681b      	ldr	r3, [r3, #0]
 81077d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 81077dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 81077de:	687b      	ldr	r3, [r7, #4]
 81077e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81077e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 81077e4:	68fb      	ldr	r3, [r7, #12]
 81077e6:	f003 030b 	and.w	r3, r3, #11
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d003      	beq.n	81077f6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 81077ee:	68f9      	ldr	r1, [r7, #12]
 81077f0:	6878      	ldr	r0, [r7, #4]
 81077f2:	f000 fd1f 	bl	8108234 <I2C_ITError>
  }
}
 81077f6:	bf00      	nop
 81077f8:	3718      	adds	r7, #24
 81077fa:	46bd      	mov	sp, r7
 81077fc:	bd80      	pop	{r7, pc}

081077fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81077fe:	b480      	push	{r7}
 8107800:	b083      	sub	sp, #12
 8107802:	af00      	add	r7, sp, #0
 8107804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8107806:	bf00      	nop
 8107808:	370c      	adds	r7, #12
 810780a:	46bd      	mov	sp, r7
 810780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107810:	4770      	bx	lr

08107812 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107812:	b480      	push	{r7}
 8107814:	b083      	sub	sp, #12
 8107816:	af00      	add	r7, sp, #0
 8107818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 810781a:	bf00      	nop
 810781c:	370c      	adds	r7, #12
 810781e:	46bd      	mov	sp, r7
 8107820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107824:	4770      	bx	lr

08107826 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8107826:	b480      	push	{r7}
 8107828:	b083      	sub	sp, #12
 810782a:	af00      	add	r7, sp, #0
 810782c:	6078      	str	r0, [r7, #4]
 810782e:	460b      	mov	r3, r1
 8107830:	70fb      	strb	r3, [r7, #3]
 8107832:	4613      	mov	r3, r2
 8107834:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8107836:	bf00      	nop
 8107838:	370c      	adds	r7, #12
 810783a:	46bd      	mov	sp, r7
 810783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107840:	4770      	bx	lr

08107842 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107842:	b480      	push	{r7}
 8107844:	b083      	sub	sp, #12
 8107846:	af00      	add	r7, sp, #0
 8107848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 810784a:	bf00      	nop
 810784c:	370c      	adds	r7, #12
 810784e:	46bd      	mov	sp, r7
 8107850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107854:	4770      	bx	lr

08107856 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107856:	b480      	push	{r7}
 8107858:	b083      	sub	sp, #12
 810785a:	af00      	add	r7, sp, #0
 810785c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 810785e:	bf00      	nop
 8107860:	370c      	adds	r7, #12
 8107862:	46bd      	mov	sp, r7
 8107864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107868:	4770      	bx	lr

0810786a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810786a:	b480      	push	{r7}
 810786c:	b083      	sub	sp, #12
 810786e:	af00      	add	r7, sp, #0
 8107870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8107872:	bf00      	nop
 8107874:	370c      	adds	r7, #12
 8107876:	46bd      	mov	sp, r7
 8107878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810787c:	4770      	bx	lr

0810787e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 810787e:	b580      	push	{r7, lr}
 8107880:	b086      	sub	sp, #24
 8107882:	af00      	add	r7, sp, #0
 8107884:	60f8      	str	r0, [r7, #12]
 8107886:	60b9      	str	r1, [r7, #8]
 8107888:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 810788a:	68fb      	ldr	r3, [r7, #12]
 810788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810788e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8107890:	68bb      	ldr	r3, [r7, #8]
 8107892:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8107894:	68fb      	ldr	r3, [r7, #12]
 8107896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810789a:	2b01      	cmp	r3, #1
 810789c:	d101      	bne.n	81078a2 <I2C_Slave_ISR_IT+0x24>
 810789e:	2302      	movs	r3, #2
 81078a0:	e0ec      	b.n	8107a7c <I2C_Slave_ISR_IT+0x1fe>
 81078a2:	68fb      	ldr	r3, [r7, #12]
 81078a4:	2201      	movs	r2, #1
 81078a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81078aa:	693b      	ldr	r3, [r7, #16]
 81078ac:	095b      	lsrs	r3, r3, #5
 81078ae:	f003 0301 	and.w	r3, r3, #1
 81078b2:	2b00      	cmp	r3, #0
 81078b4:	d009      	beq.n	81078ca <I2C_Slave_ISR_IT+0x4c>
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	095b      	lsrs	r3, r3, #5
 81078ba:	f003 0301 	and.w	r3, r3, #1
 81078be:	2b00      	cmp	r3, #0
 81078c0:	d003      	beq.n	81078ca <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81078c2:	6939      	ldr	r1, [r7, #16]
 81078c4:	68f8      	ldr	r0, [r7, #12]
 81078c6:	f000 fa67 	bl	8107d98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81078ca:	693b      	ldr	r3, [r7, #16]
 81078cc:	091b      	lsrs	r3, r3, #4
 81078ce:	f003 0301 	and.w	r3, r3, #1
 81078d2:	2b00      	cmp	r3, #0
 81078d4:	d04d      	beq.n	8107972 <I2C_Slave_ISR_IT+0xf4>
 81078d6:	687b      	ldr	r3, [r7, #4]
 81078d8:	091b      	lsrs	r3, r3, #4
 81078da:	f003 0301 	and.w	r3, r3, #1
 81078de:	2b00      	cmp	r3, #0
 81078e0:	d047      	beq.n	8107972 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81078e2:	68fb      	ldr	r3, [r7, #12]
 81078e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81078e6:	b29b      	uxth	r3, r3
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d128      	bne.n	810793e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81078ec:	68fb      	ldr	r3, [r7, #12]
 81078ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81078f2:	b2db      	uxtb	r3, r3
 81078f4:	2b28      	cmp	r3, #40	; 0x28
 81078f6:	d108      	bne.n	810790a <I2C_Slave_ISR_IT+0x8c>
 81078f8:	697b      	ldr	r3, [r7, #20]
 81078fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81078fe:	d104      	bne.n	810790a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8107900:	6939      	ldr	r1, [r7, #16]
 8107902:	68f8      	ldr	r0, [r7, #12]
 8107904:	f000 fc40 	bl	8108188 <I2C_ITListenCplt>
 8107908:	e032      	b.n	8107970 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810790a:	68fb      	ldr	r3, [r7, #12]
 810790c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107910:	b2db      	uxtb	r3, r3
 8107912:	2b29      	cmp	r3, #41	; 0x29
 8107914:	d10e      	bne.n	8107934 <I2C_Slave_ISR_IT+0xb6>
 8107916:	697b      	ldr	r3, [r7, #20]
 8107918:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810791c:	d00a      	beq.n	8107934 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810791e:	68fb      	ldr	r3, [r7, #12]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	2210      	movs	r2, #16
 8107924:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8107926:	68f8      	ldr	r0, [r7, #12]
 8107928:	f000 fd7b 	bl	8108422 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 810792c:	68f8      	ldr	r0, [r7, #12]
 810792e:	f000 f9d5 	bl	8107cdc <I2C_ITSlaveSeqCplt>
 8107932:	e01d      	b.n	8107970 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107934:	68fb      	ldr	r3, [r7, #12]
 8107936:	681b      	ldr	r3, [r3, #0]
 8107938:	2210      	movs	r2, #16
 810793a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 810793c:	e096      	b.n	8107a6c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810793e:	68fb      	ldr	r3, [r7, #12]
 8107940:	681b      	ldr	r3, [r3, #0]
 8107942:	2210      	movs	r2, #16
 8107944:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107946:	68fb      	ldr	r3, [r7, #12]
 8107948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810794a:	f043 0204 	orr.w	r2, r3, #4
 810794e:	68fb      	ldr	r3, [r7, #12]
 8107950:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8107952:	697b      	ldr	r3, [r7, #20]
 8107954:	2b00      	cmp	r3, #0
 8107956:	d004      	beq.n	8107962 <I2C_Slave_ISR_IT+0xe4>
 8107958:	697b      	ldr	r3, [r7, #20]
 810795a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810795e:	f040 8085 	bne.w	8107a6c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8107962:	68fb      	ldr	r3, [r7, #12]
 8107964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107966:	4619      	mov	r1, r3
 8107968:	68f8      	ldr	r0, [r7, #12]
 810796a:	f000 fc63 	bl	8108234 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 810796e:	e07d      	b.n	8107a6c <I2C_Slave_ISR_IT+0x1ee>
 8107970:	e07c      	b.n	8107a6c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8107972:	693b      	ldr	r3, [r7, #16]
 8107974:	089b      	lsrs	r3, r3, #2
 8107976:	f003 0301 	and.w	r3, r3, #1
 810797a:	2b00      	cmp	r3, #0
 810797c:	d030      	beq.n	81079e0 <I2C_Slave_ISR_IT+0x162>
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	089b      	lsrs	r3, r3, #2
 8107982:	f003 0301 	and.w	r3, r3, #1
 8107986:	2b00      	cmp	r3, #0
 8107988:	d02a      	beq.n	81079e0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 810798a:	68fb      	ldr	r3, [r7, #12]
 810798c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810798e:	b29b      	uxth	r3, r3
 8107990:	2b00      	cmp	r3, #0
 8107992:	d018      	beq.n	81079c6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107994:	68fb      	ldr	r3, [r7, #12]
 8107996:	681b      	ldr	r3, [r3, #0]
 8107998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810799a:	68fb      	ldr	r3, [r7, #12]
 810799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810799e:	b2d2      	uxtb	r2, r2
 81079a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81079a2:	68fb      	ldr	r3, [r7, #12]
 81079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81079a6:	1c5a      	adds	r2, r3, #1
 81079a8:	68fb      	ldr	r3, [r7, #12]
 81079aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81079ac:	68fb      	ldr	r3, [r7, #12]
 81079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81079b0:	3b01      	subs	r3, #1
 81079b2:	b29a      	uxth	r2, r3
 81079b4:	68fb      	ldr	r3, [r7, #12]
 81079b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81079b8:	68fb      	ldr	r3, [r7, #12]
 81079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81079bc:	b29b      	uxth	r3, r3
 81079be:	3b01      	subs	r3, #1
 81079c0:	b29a      	uxth	r2, r3
 81079c2:	68fb      	ldr	r3, [r7, #12]
 81079c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 81079c6:	68fb      	ldr	r3, [r7, #12]
 81079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81079ca:	b29b      	uxth	r3, r3
 81079cc:	2b00      	cmp	r3, #0
 81079ce:	d14f      	bne.n	8107a70 <I2C_Slave_ISR_IT+0x1f2>
 81079d0:	697b      	ldr	r3, [r7, #20]
 81079d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81079d6:	d04b      	beq.n	8107a70 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 81079d8:	68f8      	ldr	r0, [r7, #12]
 81079da:	f000 f97f 	bl	8107cdc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 81079de:	e047      	b.n	8107a70 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81079e0:	693b      	ldr	r3, [r7, #16]
 81079e2:	08db      	lsrs	r3, r3, #3
 81079e4:	f003 0301 	and.w	r3, r3, #1
 81079e8:	2b00      	cmp	r3, #0
 81079ea:	d00a      	beq.n	8107a02 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	08db      	lsrs	r3, r3, #3
 81079f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81079f4:	2b00      	cmp	r3, #0
 81079f6:	d004      	beq.n	8107a02 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 81079f8:	6939      	ldr	r1, [r7, #16]
 81079fa:	68f8      	ldr	r0, [r7, #12]
 81079fc:	f000 f8ea 	bl	8107bd4 <I2C_ITAddrCplt>
 8107a00:	e037      	b.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8107a02:	693b      	ldr	r3, [r7, #16]
 8107a04:	085b      	lsrs	r3, r3, #1
 8107a06:	f003 0301 	and.w	r3, r3, #1
 8107a0a:	2b00      	cmp	r3, #0
 8107a0c:	d031      	beq.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
 8107a0e:	687b      	ldr	r3, [r7, #4]
 8107a10:	085b      	lsrs	r3, r3, #1
 8107a12:	f003 0301 	and.w	r3, r3, #1
 8107a16:	2b00      	cmp	r3, #0
 8107a18:	d02b      	beq.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107a1a:	68fb      	ldr	r3, [r7, #12]
 8107a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107a1e:	b29b      	uxth	r3, r3
 8107a20:	2b00      	cmp	r3, #0
 8107a22:	d018      	beq.n	8107a56 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8107a24:	68fb      	ldr	r3, [r7, #12]
 8107a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a28:	781a      	ldrb	r2, [r3, #0]
 8107a2a:	68fb      	ldr	r3, [r7, #12]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107a30:	68fb      	ldr	r3, [r7, #12]
 8107a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a34:	1c5a      	adds	r2, r3, #1
 8107a36:	68fb      	ldr	r3, [r7, #12]
 8107a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8107a3a:	68fb      	ldr	r3, [r7, #12]
 8107a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107a3e:	b29b      	uxth	r3, r3
 8107a40:	3b01      	subs	r3, #1
 8107a42:	b29a      	uxth	r2, r3
 8107a44:	68fb      	ldr	r3, [r7, #12]
 8107a46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8107a48:	68fb      	ldr	r3, [r7, #12]
 8107a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107a4c:	3b01      	subs	r3, #1
 8107a4e:	b29a      	uxth	r2, r3
 8107a50:	68fb      	ldr	r3, [r7, #12]
 8107a52:	851a      	strh	r2, [r3, #40]	; 0x28
 8107a54:	e00d      	b.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8107a56:	697b      	ldr	r3, [r7, #20]
 8107a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107a5c:	d002      	beq.n	8107a64 <I2C_Slave_ISR_IT+0x1e6>
 8107a5e:	697b      	ldr	r3, [r7, #20]
 8107a60:	2b00      	cmp	r3, #0
 8107a62:	d106      	bne.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107a64:	68f8      	ldr	r0, [r7, #12]
 8107a66:	f000 f939 	bl	8107cdc <I2C_ITSlaveSeqCplt>
 8107a6a:	e002      	b.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107a6c:	bf00      	nop
 8107a6e:	e000      	b.n	8107a72 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8107a70:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107a72:	68fb      	ldr	r3, [r7, #12]
 8107a74:	2200      	movs	r2, #0
 8107a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8107a7a:	2300      	movs	r3, #0
}
 8107a7c:	4618      	mov	r0, r3
 8107a7e:	3718      	adds	r7, #24
 8107a80:	46bd      	mov	sp, r7
 8107a82:	bd80      	pop	{r7, pc}

08107a84 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107a84:	b580      	push	{r7, lr}
 8107a86:	b086      	sub	sp, #24
 8107a88:	af02      	add	r7, sp, #8
 8107a8a:	60f8      	str	r0, [r7, #12]
 8107a8c:	4608      	mov	r0, r1
 8107a8e:	4611      	mov	r1, r2
 8107a90:	461a      	mov	r2, r3
 8107a92:	4603      	mov	r3, r0
 8107a94:	817b      	strh	r3, [r7, #10]
 8107a96:	460b      	mov	r3, r1
 8107a98:	813b      	strh	r3, [r7, #8]
 8107a9a:	4613      	mov	r3, r2
 8107a9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8107a9e:	88fb      	ldrh	r3, [r7, #6]
 8107aa0:	b2da      	uxtb	r2, r3
 8107aa2:	8979      	ldrh	r1, [r7, #10]
 8107aa4:	4b20      	ldr	r3, [pc, #128]	; (8107b28 <I2C_RequestMemoryWrite+0xa4>)
 8107aa6:	9300      	str	r3, [sp, #0]
 8107aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107aac:	68f8      	ldr	r0, [r7, #12]
 8107aae:	f000 fe1d 	bl	81086ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107ab2:	69fa      	ldr	r2, [r7, #28]
 8107ab4:	69b9      	ldr	r1, [r7, #24]
 8107ab6:	68f8      	ldr	r0, [r7, #12]
 8107ab8:	f000 fd35 	bl	8108526 <I2C_WaitOnTXISFlagUntilTimeout>
 8107abc:	4603      	mov	r3, r0
 8107abe:	2b00      	cmp	r3, #0
 8107ac0:	d001      	beq.n	8107ac6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8107ac2:	2301      	movs	r3, #1
 8107ac4:	e02c      	b.n	8107b20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107ac6:	88fb      	ldrh	r3, [r7, #6]
 8107ac8:	2b01      	cmp	r3, #1
 8107aca:	d105      	bne.n	8107ad8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107acc:	893b      	ldrh	r3, [r7, #8]
 8107ace:	b2da      	uxtb	r2, r3
 8107ad0:	68fb      	ldr	r3, [r7, #12]
 8107ad2:	681b      	ldr	r3, [r3, #0]
 8107ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8107ad6:	e015      	b.n	8107b04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107ad8:	893b      	ldrh	r3, [r7, #8]
 8107ada:	0a1b      	lsrs	r3, r3, #8
 8107adc:	b29b      	uxth	r3, r3
 8107ade:	b2da      	uxtb	r2, r3
 8107ae0:	68fb      	ldr	r3, [r7, #12]
 8107ae2:	681b      	ldr	r3, [r3, #0]
 8107ae4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107ae6:	69fa      	ldr	r2, [r7, #28]
 8107ae8:	69b9      	ldr	r1, [r7, #24]
 8107aea:	68f8      	ldr	r0, [r7, #12]
 8107aec:	f000 fd1b 	bl	8108526 <I2C_WaitOnTXISFlagUntilTimeout>
 8107af0:	4603      	mov	r3, r0
 8107af2:	2b00      	cmp	r3, #0
 8107af4:	d001      	beq.n	8107afa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8107af6:	2301      	movs	r3, #1
 8107af8:	e012      	b.n	8107b20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107afa:	893b      	ldrh	r3, [r7, #8]
 8107afc:	b2da      	uxtb	r2, r3
 8107afe:	68fb      	ldr	r3, [r7, #12]
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8107b04:	69fb      	ldr	r3, [r7, #28]
 8107b06:	9300      	str	r3, [sp, #0]
 8107b08:	69bb      	ldr	r3, [r7, #24]
 8107b0a:	2200      	movs	r2, #0
 8107b0c:	2180      	movs	r1, #128	; 0x80
 8107b0e:	68f8      	ldr	r0, [r7, #12]
 8107b10:	f000 fcc9 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 8107b14:	4603      	mov	r3, r0
 8107b16:	2b00      	cmp	r3, #0
 8107b18:	d001      	beq.n	8107b1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8107b1a:	2301      	movs	r3, #1
 8107b1c:	e000      	b.n	8107b20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8107b1e:	2300      	movs	r3, #0
}
 8107b20:	4618      	mov	r0, r3
 8107b22:	3710      	adds	r7, #16
 8107b24:	46bd      	mov	sp, r7
 8107b26:	bd80      	pop	{r7, pc}
 8107b28:	80002000 	.word	0x80002000

08107b2c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107b2c:	b580      	push	{r7, lr}
 8107b2e:	b086      	sub	sp, #24
 8107b30:	af02      	add	r7, sp, #8
 8107b32:	60f8      	str	r0, [r7, #12]
 8107b34:	4608      	mov	r0, r1
 8107b36:	4611      	mov	r1, r2
 8107b38:	461a      	mov	r2, r3
 8107b3a:	4603      	mov	r3, r0
 8107b3c:	817b      	strh	r3, [r7, #10]
 8107b3e:	460b      	mov	r3, r1
 8107b40:	813b      	strh	r3, [r7, #8]
 8107b42:	4613      	mov	r3, r2
 8107b44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8107b46:	88fb      	ldrh	r3, [r7, #6]
 8107b48:	b2da      	uxtb	r2, r3
 8107b4a:	8979      	ldrh	r1, [r7, #10]
 8107b4c:	4b20      	ldr	r3, [pc, #128]	; (8107bd0 <I2C_RequestMemoryRead+0xa4>)
 8107b4e:	9300      	str	r3, [sp, #0]
 8107b50:	2300      	movs	r3, #0
 8107b52:	68f8      	ldr	r0, [r7, #12]
 8107b54:	f000 fdca 	bl	81086ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107b58:	69fa      	ldr	r2, [r7, #28]
 8107b5a:	69b9      	ldr	r1, [r7, #24]
 8107b5c:	68f8      	ldr	r0, [r7, #12]
 8107b5e:	f000 fce2 	bl	8108526 <I2C_WaitOnTXISFlagUntilTimeout>
 8107b62:	4603      	mov	r3, r0
 8107b64:	2b00      	cmp	r3, #0
 8107b66:	d001      	beq.n	8107b6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8107b68:	2301      	movs	r3, #1
 8107b6a:	e02c      	b.n	8107bc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107b6c:	88fb      	ldrh	r3, [r7, #6]
 8107b6e:	2b01      	cmp	r3, #1
 8107b70:	d105      	bne.n	8107b7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107b72:	893b      	ldrh	r3, [r7, #8]
 8107b74:	b2da      	uxtb	r2, r3
 8107b76:	68fb      	ldr	r3, [r7, #12]
 8107b78:	681b      	ldr	r3, [r3, #0]
 8107b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8107b7c:	e015      	b.n	8107baa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107b7e:	893b      	ldrh	r3, [r7, #8]
 8107b80:	0a1b      	lsrs	r3, r3, #8
 8107b82:	b29b      	uxth	r3, r3
 8107b84:	b2da      	uxtb	r2, r3
 8107b86:	68fb      	ldr	r3, [r7, #12]
 8107b88:	681b      	ldr	r3, [r3, #0]
 8107b8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107b8c:	69fa      	ldr	r2, [r7, #28]
 8107b8e:	69b9      	ldr	r1, [r7, #24]
 8107b90:	68f8      	ldr	r0, [r7, #12]
 8107b92:	f000 fcc8 	bl	8108526 <I2C_WaitOnTXISFlagUntilTimeout>
 8107b96:	4603      	mov	r3, r0
 8107b98:	2b00      	cmp	r3, #0
 8107b9a:	d001      	beq.n	8107ba0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8107b9c:	2301      	movs	r3, #1
 8107b9e:	e012      	b.n	8107bc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107ba0:	893b      	ldrh	r3, [r7, #8]
 8107ba2:	b2da      	uxtb	r2, r3
 8107ba4:	68fb      	ldr	r3, [r7, #12]
 8107ba6:	681b      	ldr	r3, [r3, #0]
 8107ba8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8107baa:	69fb      	ldr	r3, [r7, #28]
 8107bac:	9300      	str	r3, [sp, #0]
 8107bae:	69bb      	ldr	r3, [r7, #24]
 8107bb0:	2200      	movs	r2, #0
 8107bb2:	2140      	movs	r1, #64	; 0x40
 8107bb4:	68f8      	ldr	r0, [r7, #12]
 8107bb6:	f000 fc76 	bl	81084a6 <I2C_WaitOnFlagUntilTimeout>
 8107bba:	4603      	mov	r3, r0
 8107bbc:	2b00      	cmp	r3, #0
 8107bbe:	d001      	beq.n	8107bc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8107bc0:	2301      	movs	r3, #1
 8107bc2:	e000      	b.n	8107bc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107bc4:	2300      	movs	r3, #0
}
 8107bc6:	4618      	mov	r0, r3
 8107bc8:	3710      	adds	r7, #16
 8107bca:	46bd      	mov	sp, r7
 8107bcc:	bd80      	pop	{r7, pc}
 8107bce:	bf00      	nop
 8107bd0:	80002000 	.word	0x80002000

08107bd4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107bd4:	b580      	push	{r7, lr}
 8107bd6:	b084      	sub	sp, #16
 8107bd8:	af00      	add	r7, sp, #0
 8107bda:	6078      	str	r0, [r7, #4]
 8107bdc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107be4:	b2db      	uxtb	r3, r3
 8107be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107bea:	2b28      	cmp	r3, #40	; 0x28
 8107bec:	d16a      	bne.n	8107cc4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	681b      	ldr	r3, [r3, #0]
 8107bf2:	699b      	ldr	r3, [r3, #24]
 8107bf4:	0c1b      	lsrs	r3, r3, #16
 8107bf6:	b2db      	uxtb	r3, r3
 8107bf8:	f003 0301 	and.w	r3, r3, #1
 8107bfc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8107bfe:	687b      	ldr	r3, [r7, #4]
 8107c00:	681b      	ldr	r3, [r3, #0]
 8107c02:	699b      	ldr	r3, [r3, #24]
 8107c04:	0c1b      	lsrs	r3, r3, #16
 8107c06:	b29b      	uxth	r3, r3
 8107c08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107c0c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	681b      	ldr	r3, [r3, #0]
 8107c12:	689b      	ldr	r3, [r3, #8]
 8107c14:	b29b      	uxth	r3, r3
 8107c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107c1a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	681b      	ldr	r3, [r3, #0]
 8107c20:	68db      	ldr	r3, [r3, #12]
 8107c22:	b29b      	uxth	r3, r3
 8107c24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107c28:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107c2a:	687b      	ldr	r3, [r7, #4]
 8107c2c:	68db      	ldr	r3, [r3, #12]
 8107c2e:	2b02      	cmp	r3, #2
 8107c30:	d138      	bne.n	8107ca4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107c32:	897b      	ldrh	r3, [r7, #10]
 8107c34:	09db      	lsrs	r3, r3, #7
 8107c36:	b29a      	uxth	r2, r3
 8107c38:	89bb      	ldrh	r3, [r7, #12]
 8107c3a:	4053      	eors	r3, r2
 8107c3c:	b29b      	uxth	r3, r3
 8107c3e:	f003 0306 	and.w	r3, r3, #6
 8107c42:	2b00      	cmp	r3, #0
 8107c44:	d11c      	bne.n	8107c80 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107c46:	897b      	ldrh	r3, [r7, #10]
 8107c48:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107c4e:	1c5a      	adds	r2, r3, #1
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107c58:	2b02      	cmp	r3, #2
 8107c5a:	d13b      	bne.n	8107cd4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	2200      	movs	r2, #0
 8107c60:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	2208      	movs	r2, #8
 8107c68:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107c6a:	687b      	ldr	r3, [r7, #4]
 8107c6c:	2200      	movs	r2, #0
 8107c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107c72:	89ba      	ldrh	r2, [r7, #12]
 8107c74:	7bfb      	ldrb	r3, [r7, #15]
 8107c76:	4619      	mov	r1, r3
 8107c78:	6878      	ldr	r0, [r7, #4]
 8107c7a:	f7ff fdd4 	bl	8107826 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107c7e:	e029      	b.n	8107cd4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107c80:	893b      	ldrh	r3, [r7, #8]
 8107c82:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107c88:	6878      	ldr	r0, [r7, #4]
 8107c8a:	f000 fd5d 	bl	8108748 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	2200      	movs	r2, #0
 8107c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107c96:	89ba      	ldrh	r2, [r7, #12]
 8107c98:	7bfb      	ldrb	r3, [r7, #15]
 8107c9a:	4619      	mov	r1, r3
 8107c9c:	6878      	ldr	r0, [r7, #4]
 8107c9e:	f7ff fdc2 	bl	8107826 <HAL_I2C_AddrCallback>
}
 8107ca2:	e017      	b.n	8107cd4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107ca8:	6878      	ldr	r0, [r7, #4]
 8107caa:	f000 fd4d 	bl	8108748 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	2200      	movs	r2, #0
 8107cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107cb6:	89ba      	ldrh	r2, [r7, #12]
 8107cb8:	7bfb      	ldrb	r3, [r7, #15]
 8107cba:	4619      	mov	r1, r3
 8107cbc:	6878      	ldr	r0, [r7, #4]
 8107cbe:	f7ff fdb2 	bl	8107826 <HAL_I2C_AddrCallback>
}
 8107cc2:	e007      	b.n	8107cd4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	681b      	ldr	r3, [r3, #0]
 8107cc8:	2208      	movs	r2, #8
 8107cca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107ccc:	687b      	ldr	r3, [r7, #4]
 8107cce:	2200      	movs	r2, #0
 8107cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107cd4:	bf00      	nop
 8107cd6:	3710      	adds	r7, #16
 8107cd8:	46bd      	mov	sp, r7
 8107cda:	bd80      	pop	{r7, pc}

08107cdc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107cdc:	b580      	push	{r7, lr}
 8107cde:	b084      	sub	sp, #16
 8107ce0:	af00      	add	r7, sp, #0
 8107ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	681b      	ldr	r3, [r3, #0]
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	2200      	movs	r2, #0
 8107cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107cf4:	68fb      	ldr	r3, [r7, #12]
 8107cf6:	0b9b      	lsrs	r3, r3, #14
 8107cf8:	f003 0301 	and.w	r3, r3, #1
 8107cfc:	2b00      	cmp	r3, #0
 8107cfe:	d008      	beq.n	8107d12 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	681a      	ldr	r2, [r3, #0]
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107d0e:	601a      	str	r2, [r3, #0]
 8107d10:	e00d      	b.n	8107d2e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107d12:	68fb      	ldr	r3, [r7, #12]
 8107d14:	0bdb      	lsrs	r3, r3, #15
 8107d16:	f003 0301 	and.w	r3, r3, #1
 8107d1a:	2b00      	cmp	r3, #0
 8107d1c:	d007      	beq.n	8107d2e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	681a      	ldr	r2, [r3, #0]
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	681b      	ldr	r3, [r3, #0]
 8107d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107d2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d34:	b2db      	uxtb	r3, r3
 8107d36:	2b29      	cmp	r3, #41	; 0x29
 8107d38:	d112      	bne.n	8107d60 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	2228      	movs	r2, #40	; 0x28
 8107d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	2221      	movs	r2, #33	; 0x21
 8107d46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107d48:	2101      	movs	r1, #1
 8107d4a:	6878      	ldr	r0, [r7, #4]
 8107d4c:	f000 fcfc 	bl	8108748 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	2200      	movs	r2, #0
 8107d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107d58:	6878      	ldr	r0, [r7, #4]
 8107d5a:	f7ff fd50 	bl	81077fe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107d5e:	e017      	b.n	8107d90 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d66:	b2db      	uxtb	r3, r3
 8107d68:	2b2a      	cmp	r3, #42	; 0x2a
 8107d6a:	d111      	bne.n	8107d90 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	2228      	movs	r2, #40	; 0x28
 8107d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	2222      	movs	r2, #34	; 0x22
 8107d78:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107d7a:	2102      	movs	r1, #2
 8107d7c:	6878      	ldr	r0, [r7, #4]
 8107d7e:	f000 fce3 	bl	8108748 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107d82:	687b      	ldr	r3, [r7, #4]
 8107d84:	2200      	movs	r2, #0
 8107d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107d8a:	6878      	ldr	r0, [r7, #4]
 8107d8c:	f7ff fd41 	bl	8107812 <HAL_I2C_SlaveRxCpltCallback>
}
 8107d90:	bf00      	nop
 8107d92:	3710      	adds	r7, #16
 8107d94:	46bd      	mov	sp, r7
 8107d96:	bd80      	pop	{r7, pc}

08107d98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107d98:	b580      	push	{r7, lr}
 8107d9a:	b086      	sub	sp, #24
 8107d9c:	af00      	add	r7, sp, #0
 8107d9e:	6078      	str	r0, [r7, #4]
 8107da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107daa:	683b      	ldr	r3, [r7, #0]
 8107dac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107db4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	681b      	ldr	r3, [r3, #0]
 8107dba:	2220      	movs	r2, #32
 8107dbc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107dbe:	7bfb      	ldrb	r3, [r7, #15]
 8107dc0:	2b21      	cmp	r3, #33	; 0x21
 8107dc2:	d002      	beq.n	8107dca <I2C_ITSlaveCplt+0x32>
 8107dc4:	7bfb      	ldrb	r3, [r7, #15]
 8107dc6:	2b29      	cmp	r3, #41	; 0x29
 8107dc8:	d108      	bne.n	8107ddc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107dca:	f248 0101 	movw	r1, #32769	; 0x8001
 8107dce:	6878      	ldr	r0, [r7, #4]
 8107dd0:	f000 fcba 	bl	8108748 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107dd4:	687b      	ldr	r3, [r7, #4]
 8107dd6:	2221      	movs	r2, #33	; 0x21
 8107dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8107dda:	e00d      	b.n	8107df8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107ddc:	7bfb      	ldrb	r3, [r7, #15]
 8107dde:	2b22      	cmp	r3, #34	; 0x22
 8107de0:	d002      	beq.n	8107de8 <I2C_ITSlaveCplt+0x50>
 8107de2:	7bfb      	ldrb	r3, [r7, #15]
 8107de4:	2b2a      	cmp	r3, #42	; 0x2a
 8107de6:	d107      	bne.n	8107df8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107de8:	f248 0102 	movw	r1, #32770	; 0x8002
 8107dec:	6878      	ldr	r0, [r7, #4]
 8107dee:	f000 fcab 	bl	8108748 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	2222      	movs	r2, #34	; 0x22
 8107df6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	681b      	ldr	r3, [r3, #0]
 8107dfc:	685a      	ldr	r2, [r3, #4]
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107e06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	6859      	ldr	r1, [r3, #4]
 8107e0e:	687b      	ldr	r3, [r7, #4]
 8107e10:	681a      	ldr	r2, [r3, #0]
 8107e12:	4b80      	ldr	r3, [pc, #512]	; (8108014 <I2C_ITSlaveCplt+0x27c>)
 8107e14:	400b      	ands	r3, r1
 8107e16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107e18:	6878      	ldr	r0, [r7, #4]
 8107e1a:	f000 fb02 	bl	8108422 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107e1e:	693b      	ldr	r3, [r7, #16]
 8107e20:	0b9b      	lsrs	r3, r3, #14
 8107e22:	f003 0301 	and.w	r3, r3, #1
 8107e26:	2b00      	cmp	r3, #0
 8107e28:	d07a      	beq.n	8107f20 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107e2a:	687b      	ldr	r3, [r7, #4]
 8107e2c:	681b      	ldr	r3, [r3, #0]
 8107e2e:	681a      	ldr	r2, [r3, #0]
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	681b      	ldr	r3, [r3, #0]
 8107e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107e38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107e3a:	687b      	ldr	r3, [r7, #4]
 8107e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e3e:	2b00      	cmp	r3, #0
 8107e40:	f000 8111 	beq.w	8108066 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e48:	681b      	ldr	r3, [r3, #0]
 8107e4a:	4a73      	ldr	r2, [pc, #460]	; (8108018 <I2C_ITSlaveCplt+0x280>)
 8107e4c:	4293      	cmp	r3, r2
 8107e4e:	d059      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e54:	681b      	ldr	r3, [r3, #0]
 8107e56:	4a71      	ldr	r2, [pc, #452]	; (810801c <I2C_ITSlaveCplt+0x284>)
 8107e58:	4293      	cmp	r3, r2
 8107e5a:	d053      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	4a6f      	ldr	r2, [pc, #444]	; (8108020 <I2C_ITSlaveCplt+0x288>)
 8107e64:	4293      	cmp	r3, r2
 8107e66:	d04d      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	4a6d      	ldr	r2, [pc, #436]	; (8108024 <I2C_ITSlaveCplt+0x28c>)
 8107e70:	4293      	cmp	r3, r2
 8107e72:	d047      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	4a6b      	ldr	r2, [pc, #428]	; (8108028 <I2C_ITSlaveCplt+0x290>)
 8107e7c:	4293      	cmp	r3, r2
 8107e7e:	d041      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	4a69      	ldr	r2, [pc, #420]	; (810802c <I2C_ITSlaveCplt+0x294>)
 8107e88:	4293      	cmp	r3, r2
 8107e8a:	d03b      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e8c:	687b      	ldr	r3, [r7, #4]
 8107e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	4a67      	ldr	r2, [pc, #412]	; (8108030 <I2C_ITSlaveCplt+0x298>)
 8107e94:	4293      	cmp	r3, r2
 8107e96:	d035      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	4a65      	ldr	r2, [pc, #404]	; (8108034 <I2C_ITSlaveCplt+0x29c>)
 8107ea0:	4293      	cmp	r3, r2
 8107ea2:	d02f      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ea8:	681b      	ldr	r3, [r3, #0]
 8107eaa:	4a63      	ldr	r2, [pc, #396]	; (8108038 <I2C_ITSlaveCplt+0x2a0>)
 8107eac:	4293      	cmp	r3, r2
 8107eae:	d029      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107eb4:	681b      	ldr	r3, [r3, #0]
 8107eb6:	4a61      	ldr	r2, [pc, #388]	; (810803c <I2C_ITSlaveCplt+0x2a4>)
 8107eb8:	4293      	cmp	r3, r2
 8107eba:	d023      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ec0:	681b      	ldr	r3, [r3, #0]
 8107ec2:	4a5f      	ldr	r2, [pc, #380]	; (8108040 <I2C_ITSlaveCplt+0x2a8>)
 8107ec4:	4293      	cmp	r3, r2
 8107ec6:	d01d      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ecc:	681b      	ldr	r3, [r3, #0]
 8107ece:	4a5d      	ldr	r2, [pc, #372]	; (8108044 <I2C_ITSlaveCplt+0x2ac>)
 8107ed0:	4293      	cmp	r3, r2
 8107ed2:	d017      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ed8:	681b      	ldr	r3, [r3, #0]
 8107eda:	4a5b      	ldr	r2, [pc, #364]	; (8108048 <I2C_ITSlaveCplt+0x2b0>)
 8107edc:	4293      	cmp	r3, r2
 8107ede:	d011      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ee4:	681b      	ldr	r3, [r3, #0]
 8107ee6:	4a59      	ldr	r2, [pc, #356]	; (810804c <I2C_ITSlaveCplt+0x2b4>)
 8107ee8:	4293      	cmp	r3, r2
 8107eea:	d00b      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	4a57      	ldr	r2, [pc, #348]	; (8108050 <I2C_ITSlaveCplt+0x2b8>)
 8107ef4:	4293      	cmp	r3, r2
 8107ef6:	d005      	beq.n	8107f04 <I2C_ITSlaveCplt+0x16c>
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107efc:	681b      	ldr	r3, [r3, #0]
 8107efe:	4a55      	ldr	r2, [pc, #340]	; (8108054 <I2C_ITSlaveCplt+0x2bc>)
 8107f00:	4293      	cmp	r3, r2
 8107f02:	d105      	bne.n	8107f10 <I2C_ITSlaveCplt+0x178>
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f08:	681b      	ldr	r3, [r3, #0]
 8107f0a:	685b      	ldr	r3, [r3, #4]
 8107f0c:	b29b      	uxth	r3, r3
 8107f0e:	e004      	b.n	8107f1a <I2C_ITSlaveCplt+0x182>
 8107f10:	687b      	ldr	r3, [r7, #4]
 8107f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	685b      	ldr	r3, [r3, #4]
 8107f18:	b29b      	uxth	r3, r3
 8107f1a:	687a      	ldr	r2, [r7, #4]
 8107f1c:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107f1e:	e0a2      	b.n	8108066 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107f20:	693b      	ldr	r3, [r7, #16]
 8107f22:	0bdb      	lsrs	r3, r3, #15
 8107f24:	f003 0301 	and.w	r3, r3, #1
 8107f28:	2b00      	cmp	r3, #0
 8107f2a:	f000 809c 	beq.w	8108066 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107f2e:	687b      	ldr	r3, [r7, #4]
 8107f30:	681b      	ldr	r3, [r3, #0]
 8107f32:	681a      	ldr	r2, [r3, #0]
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	681b      	ldr	r3, [r3, #0]
 8107f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107f3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f42:	2b00      	cmp	r3, #0
 8107f44:	f000 808f 	beq.w	8108066 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f4c:	681b      	ldr	r3, [r3, #0]
 8107f4e:	4a32      	ldr	r2, [pc, #200]	; (8108018 <I2C_ITSlaveCplt+0x280>)
 8107f50:	4293      	cmp	r3, r2
 8107f52:	d059      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f54:	687b      	ldr	r3, [r7, #4]
 8107f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f58:	681b      	ldr	r3, [r3, #0]
 8107f5a:	4a30      	ldr	r2, [pc, #192]	; (810801c <I2C_ITSlaveCplt+0x284>)
 8107f5c:	4293      	cmp	r3, r2
 8107f5e:	d053      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f64:	681b      	ldr	r3, [r3, #0]
 8107f66:	4a2e      	ldr	r2, [pc, #184]	; (8108020 <I2C_ITSlaveCplt+0x288>)
 8107f68:	4293      	cmp	r3, r2
 8107f6a:	d04d      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f70:	681b      	ldr	r3, [r3, #0]
 8107f72:	4a2c      	ldr	r2, [pc, #176]	; (8108024 <I2C_ITSlaveCplt+0x28c>)
 8107f74:	4293      	cmp	r3, r2
 8107f76:	d047      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	4a2a      	ldr	r2, [pc, #168]	; (8108028 <I2C_ITSlaveCplt+0x290>)
 8107f80:	4293      	cmp	r3, r2
 8107f82:	d041      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	4a28      	ldr	r2, [pc, #160]	; (810802c <I2C_ITSlaveCplt+0x294>)
 8107f8c:	4293      	cmp	r3, r2
 8107f8e:	d03b      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	4a26      	ldr	r2, [pc, #152]	; (8108030 <I2C_ITSlaveCplt+0x298>)
 8107f98:	4293      	cmp	r3, r2
 8107f9a:	d035      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	4a24      	ldr	r2, [pc, #144]	; (8108034 <I2C_ITSlaveCplt+0x29c>)
 8107fa4:	4293      	cmp	r3, r2
 8107fa6:	d02f      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fac:	681b      	ldr	r3, [r3, #0]
 8107fae:	4a22      	ldr	r2, [pc, #136]	; (8108038 <I2C_ITSlaveCplt+0x2a0>)
 8107fb0:	4293      	cmp	r3, r2
 8107fb2:	d029      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107fb4:	687b      	ldr	r3, [r7, #4]
 8107fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fb8:	681b      	ldr	r3, [r3, #0]
 8107fba:	4a20      	ldr	r2, [pc, #128]	; (810803c <I2C_ITSlaveCplt+0x2a4>)
 8107fbc:	4293      	cmp	r3, r2
 8107fbe:	d023      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	4a1e      	ldr	r2, [pc, #120]	; (8108040 <I2C_ITSlaveCplt+0x2a8>)
 8107fc8:	4293      	cmp	r3, r2
 8107fca:	d01d      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fd0:	681b      	ldr	r3, [r3, #0]
 8107fd2:	4a1c      	ldr	r2, [pc, #112]	; (8108044 <I2C_ITSlaveCplt+0x2ac>)
 8107fd4:	4293      	cmp	r3, r2
 8107fd6:	d017      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fdc:	681b      	ldr	r3, [r3, #0]
 8107fde:	4a1a      	ldr	r2, [pc, #104]	; (8108048 <I2C_ITSlaveCplt+0x2b0>)
 8107fe0:	4293      	cmp	r3, r2
 8107fe2:	d011      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fe8:	681b      	ldr	r3, [r3, #0]
 8107fea:	4a18      	ldr	r2, [pc, #96]	; (810804c <I2C_ITSlaveCplt+0x2b4>)
 8107fec:	4293      	cmp	r3, r2
 8107fee:	d00b      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	4a16      	ldr	r2, [pc, #88]	; (8108050 <I2C_ITSlaveCplt+0x2b8>)
 8107ff8:	4293      	cmp	r3, r2
 8107ffa:	d005      	beq.n	8108008 <I2C_ITSlaveCplt+0x270>
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	4a14      	ldr	r2, [pc, #80]	; (8108054 <I2C_ITSlaveCplt+0x2bc>)
 8108004:	4293      	cmp	r3, r2
 8108006:	d127      	bne.n	8108058 <I2C_ITSlaveCplt+0x2c0>
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810800c:	681b      	ldr	r3, [r3, #0]
 810800e:	685b      	ldr	r3, [r3, #4]
 8108010:	b29b      	uxth	r3, r3
 8108012:	e026      	b.n	8108062 <I2C_ITSlaveCplt+0x2ca>
 8108014:	fe00e800 	.word	0xfe00e800
 8108018:	40020010 	.word	0x40020010
 810801c:	40020028 	.word	0x40020028
 8108020:	40020040 	.word	0x40020040
 8108024:	40020058 	.word	0x40020058
 8108028:	40020070 	.word	0x40020070
 810802c:	40020088 	.word	0x40020088
 8108030:	400200a0 	.word	0x400200a0
 8108034:	400200b8 	.word	0x400200b8
 8108038:	40020410 	.word	0x40020410
 810803c:	40020428 	.word	0x40020428
 8108040:	40020440 	.word	0x40020440
 8108044:	40020458 	.word	0x40020458
 8108048:	40020470 	.word	0x40020470
 810804c:	40020488 	.word	0x40020488
 8108050:	400204a0 	.word	0x400204a0
 8108054:	400204b8 	.word	0x400204b8
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810805c:	681b      	ldr	r3, [r3, #0]
 810805e:	685b      	ldr	r3, [r3, #4]
 8108060:	b29b      	uxth	r3, r3
 8108062:	687a      	ldr	r2, [r7, #4]
 8108064:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8108066:	697b      	ldr	r3, [r7, #20]
 8108068:	089b      	lsrs	r3, r3, #2
 810806a:	f003 0301 	and.w	r3, r3, #1
 810806e:	2b00      	cmp	r3, #0
 8108070:	d020      	beq.n	81080b4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8108072:	697b      	ldr	r3, [r7, #20]
 8108074:	f023 0304 	bic.w	r3, r3, #4
 8108078:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	681b      	ldr	r3, [r3, #0]
 810807e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108080:	687b      	ldr	r3, [r7, #4]
 8108082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108084:	b2d2      	uxtb	r2, r2
 8108086:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810808c:	1c5a      	adds	r2, r3, #1
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108096:	2b00      	cmp	r3, #0
 8108098:	d00c      	beq.n	81080b4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810809e:	3b01      	subs	r3, #1
 81080a0:	b29a      	uxth	r2, r3
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080aa:	b29b      	uxth	r3, r3
 81080ac:	3b01      	subs	r3, #1
 81080ae:	b29a      	uxth	r2, r3
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080b8:	b29b      	uxth	r3, r3
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	d005      	beq.n	81080ca <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080c2:	f043 0204 	orr.w	r2, r3, #4
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	2200      	movs	r2, #0
 81080ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	2200      	movs	r2, #0
 81080d6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080dc:	2b00      	cmp	r3, #0
 81080de:	d010      	beq.n	8108102 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080e4:	4619      	mov	r1, r3
 81080e6:	6878      	ldr	r0, [r7, #4]
 81080e8:	f000 f8a4 	bl	8108234 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81080f2:	b2db      	uxtb	r3, r3
 81080f4:	2b28      	cmp	r3, #40	; 0x28
 81080f6:	d141      	bne.n	810817c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 81080f8:	6979      	ldr	r1, [r7, #20]
 81080fa:	6878      	ldr	r0, [r7, #4]
 81080fc:	f000 f844 	bl	8108188 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108100:	e03c      	b.n	810817c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108106:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810810a:	d014      	beq.n	8108136 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 810810c:	6878      	ldr	r0, [r7, #4]
 810810e:	f7ff fde5 	bl	8107cdc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8108112:	687b      	ldr	r3, [r7, #4]
 8108114:	4a1b      	ldr	r2, [pc, #108]	; (8108184 <I2C_ITSlaveCplt+0x3ec>)
 8108116:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8108118:	687b      	ldr	r3, [r7, #4]
 810811a:	2220      	movs	r2, #32
 810811c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	2200      	movs	r2, #0
 8108124:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	2200      	movs	r2, #0
 810812a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 810812e:	6878      	ldr	r0, [r7, #4]
 8108130:	f7ff fb87 	bl	8107842 <HAL_I2C_ListenCpltCallback>
}
 8108134:	e022      	b.n	810817c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810813c:	b2db      	uxtb	r3, r3
 810813e:	2b22      	cmp	r3, #34	; 0x22
 8108140:	d10e      	bne.n	8108160 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	2220      	movs	r2, #32
 8108146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	2200      	movs	r2, #0
 810814e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	2200      	movs	r2, #0
 8108154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8108158:	6878      	ldr	r0, [r7, #4]
 810815a:	f7ff fb5a 	bl	8107812 <HAL_I2C_SlaveRxCpltCallback>
}
 810815e:	e00d      	b.n	810817c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8108160:	687b      	ldr	r3, [r7, #4]
 8108162:	2220      	movs	r2, #32
 8108164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108168:	687b      	ldr	r3, [r7, #4]
 810816a:	2200      	movs	r2, #0
 810816c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	2200      	movs	r2, #0
 8108172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8108176:	6878      	ldr	r0, [r7, #4]
 8108178:	f7ff fb41 	bl	81077fe <HAL_I2C_SlaveTxCpltCallback>
}
 810817c:	bf00      	nop
 810817e:	3718      	adds	r7, #24
 8108180:	46bd      	mov	sp, r7
 8108182:	bd80      	pop	{r7, pc}
 8108184:	ffff0000 	.word	0xffff0000

08108188 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8108188:	b580      	push	{r7, lr}
 810818a:	b082      	sub	sp, #8
 810818c:	af00      	add	r7, sp, #0
 810818e:	6078      	str	r0, [r7, #4]
 8108190:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	4a26      	ldr	r2, [pc, #152]	; (8108230 <I2C_ITListenCplt+0xa8>)
 8108196:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8108198:	687b      	ldr	r3, [r7, #4]
 810819a:	2200      	movs	r2, #0
 810819c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	2220      	movs	r2, #32
 81081a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	2200      	movs	r2, #0
 81081aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	2200      	movs	r2, #0
 81081b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 81081b4:	683b      	ldr	r3, [r7, #0]
 81081b6:	089b      	lsrs	r3, r3, #2
 81081b8:	f003 0301 	and.w	r3, r3, #1
 81081bc:	2b00      	cmp	r3, #0
 81081be:	d022      	beq.n	8108206 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	681b      	ldr	r3, [r3, #0]
 81081c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81081c6:	687b      	ldr	r3, [r7, #4]
 81081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081ca:	b2d2      	uxtb	r2, r2
 81081cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81081ce:	687b      	ldr	r3, [r7, #4]
 81081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081d2:	1c5a      	adds	r2, r3, #1
 81081d4:	687b      	ldr	r3, [r7, #4]
 81081d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81081dc:	2b00      	cmp	r3, #0
 81081de:	d012      	beq.n	8108206 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 81081e0:	687b      	ldr	r3, [r7, #4]
 81081e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81081e4:	3b01      	subs	r3, #1
 81081e6:	b29a      	uxth	r2, r3
 81081e8:	687b      	ldr	r3, [r7, #4]
 81081ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81081f0:	b29b      	uxth	r3, r3
 81081f2:	3b01      	subs	r3, #1
 81081f4:	b29a      	uxth	r2, r3
 81081f6:	687b      	ldr	r3, [r7, #4]
 81081f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81081fa:	687b      	ldr	r3, [r7, #4]
 81081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81081fe:	f043 0204 	orr.w	r2, r3, #4
 8108202:	687b      	ldr	r3, [r7, #4]
 8108204:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108206:	f248 0103 	movw	r1, #32771	; 0x8003
 810820a:	6878      	ldr	r0, [r7, #4]
 810820c:	f000 fa9c 	bl	8108748 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	2210      	movs	r2, #16
 8108216:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	2200      	movs	r2, #0
 810821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8108220:	6878      	ldr	r0, [r7, #4]
 8108222:	f7ff fb0e 	bl	8107842 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8108226:	bf00      	nop
 8108228:	3708      	adds	r7, #8
 810822a:	46bd      	mov	sp, r7
 810822c:	bd80      	pop	{r7, pc}
 810822e:	bf00      	nop
 8108230:	ffff0000 	.word	0xffff0000

08108234 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8108234:	b580      	push	{r7, lr}
 8108236:	b084      	sub	sp, #16
 8108238:	af00      	add	r7, sp, #0
 810823a:	6078      	str	r0, [r7, #4]
 810823c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	2200      	movs	r2, #0
 810824a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	4a5d      	ldr	r2, [pc, #372]	; (81083c8 <I2C_ITError+0x194>)
 8108252:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8108254:	687b      	ldr	r3, [r7, #4]
 8108256:	2200      	movs	r2, #0
 8108258:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810825e:	683b      	ldr	r3, [r7, #0]
 8108260:	431a      	orrs	r2, r3
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8108266:	7bfb      	ldrb	r3, [r7, #15]
 8108268:	2b28      	cmp	r3, #40	; 0x28
 810826a:	d005      	beq.n	8108278 <I2C_ITError+0x44>
 810826c:	7bfb      	ldrb	r3, [r7, #15]
 810826e:	2b29      	cmp	r3, #41	; 0x29
 8108270:	d002      	beq.n	8108278 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8108272:	7bfb      	ldrb	r3, [r7, #15]
 8108274:	2b2a      	cmp	r3, #42	; 0x2a
 8108276:	d10b      	bne.n	8108290 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108278:	2103      	movs	r1, #3
 810827a:	6878      	ldr	r0, [r7, #4]
 810827c:	f000 fa64 	bl	8108748 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	2228      	movs	r2, #40	; 0x28
 8108284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8108288:	687b      	ldr	r3, [r7, #4]
 810828a:	4a50      	ldr	r2, [pc, #320]	; (81083cc <I2C_ITError+0x198>)
 810828c:	635a      	str	r2, [r3, #52]	; 0x34
 810828e:	e011      	b.n	81082b4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8108290:	f248 0103 	movw	r1, #32771	; 0x8003
 8108294:	6878      	ldr	r0, [r7, #4]
 8108296:	f000 fa57 	bl	8108748 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 810829a:	687b      	ldr	r3, [r7, #4]
 810829c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81082a0:	b2db      	uxtb	r3, r3
 81082a2:	2b60      	cmp	r3, #96	; 0x60
 81082a4:	d003      	beq.n	81082ae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 81082a6:	687b      	ldr	r3, [r7, #4]
 81082a8:	2220      	movs	r2, #32
 81082aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	2200      	movs	r2, #0
 81082b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 81082b4:	687b      	ldr	r3, [r7, #4]
 81082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81082b8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d039      	beq.n	8108336 <I2C_ITError+0x102>
 81082c2:	68bb      	ldr	r3, [r7, #8]
 81082c4:	2b11      	cmp	r3, #17
 81082c6:	d002      	beq.n	81082ce <I2C_ITError+0x9a>
 81082c8:	68bb      	ldr	r3, [r7, #8]
 81082ca:	2b21      	cmp	r3, #33	; 0x21
 81082cc:	d133      	bne.n	8108336 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 81082ce:	687b      	ldr	r3, [r7, #4]
 81082d0:	681b      	ldr	r3, [r3, #0]
 81082d2:	681b      	ldr	r3, [r3, #0]
 81082d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81082d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81082dc:	d107      	bne.n	81082ee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	681b      	ldr	r3, [r3, #0]
 81082e2:	681a      	ldr	r2, [r3, #0]
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81082ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082f2:	4618      	mov	r0, r3
 81082f4:	f7fe f93e 	bl	8106574 <HAL_DMA_GetState>
 81082f8:	4603      	mov	r3, r0
 81082fa:	2b01      	cmp	r3, #1
 81082fc:	d017      	beq.n	810832e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108302:	4a33      	ldr	r2, [pc, #204]	; (81083d0 <I2C_ITError+0x19c>)
 8108304:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	2200      	movs	r2, #0
 810830a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 810830e:	687b      	ldr	r3, [r7, #4]
 8108310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108312:	4618      	mov	r0, r3
 8108314:	f7fc ffc0 	bl	8105298 <HAL_DMA_Abort_IT>
 8108318:	4603      	mov	r3, r0
 810831a:	2b00      	cmp	r3, #0
 810831c:	d04d      	beq.n	81083ba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 810831e:	687b      	ldr	r3, [r7, #4]
 8108320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108324:	687a      	ldr	r2, [r7, #4]
 8108326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8108328:	4610      	mov	r0, r2
 810832a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810832c:	e045      	b.n	81083ba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 810832e:	6878      	ldr	r0, [r7, #4]
 8108330:	f000 f850 	bl	81083d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108334:	e041      	b.n	81083ba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810833a:	2b00      	cmp	r3, #0
 810833c:	d039      	beq.n	81083b2 <I2C_ITError+0x17e>
 810833e:	68bb      	ldr	r3, [r7, #8]
 8108340:	2b12      	cmp	r3, #18
 8108342:	d002      	beq.n	810834a <I2C_ITError+0x116>
 8108344:	68bb      	ldr	r3, [r7, #8]
 8108346:	2b22      	cmp	r3, #34	; 0x22
 8108348:	d133      	bne.n	81083b2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	681b      	ldr	r3, [r3, #0]
 810834e:	681b      	ldr	r3, [r3, #0]
 8108350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108358:	d107      	bne.n	810836a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	681a      	ldr	r2, [r3, #0]
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108368:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810836e:	4618      	mov	r0, r3
 8108370:	f7fe f900 	bl	8106574 <HAL_DMA_GetState>
 8108374:	4603      	mov	r3, r0
 8108376:	2b01      	cmp	r3, #1
 8108378:	d017      	beq.n	81083aa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810837e:	4a14      	ldr	r2, [pc, #80]	; (81083d0 <I2C_ITError+0x19c>)
 8108380:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	2200      	movs	r2, #0
 8108386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 810838a:	687b      	ldr	r3, [r7, #4]
 810838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810838e:	4618      	mov	r0, r3
 8108390:	f7fc ff82 	bl	8105298 <HAL_DMA_Abort_IT>
 8108394:	4603      	mov	r3, r0
 8108396:	2b00      	cmp	r3, #0
 8108398:	d011      	beq.n	81083be <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 810839a:	687b      	ldr	r3, [r7, #4]
 810839c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810839e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81083a0:	687a      	ldr	r2, [r7, #4]
 81083a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81083a4:	4610      	mov	r0, r2
 81083a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083a8:	e009      	b.n	81083be <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81083aa:	6878      	ldr	r0, [r7, #4]
 81083ac:	f000 f812 	bl	81083d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083b0:	e005      	b.n	81083be <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 81083b2:	6878      	ldr	r0, [r7, #4]
 81083b4:	f000 f80e 	bl	81083d4 <I2C_TreatErrorCallback>
  }
}
 81083b8:	e002      	b.n	81083c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81083ba:	bf00      	nop
 81083bc:	e000      	b.n	81083c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083be:	bf00      	nop
}
 81083c0:	bf00      	nop
 81083c2:	3710      	adds	r7, #16
 81083c4:	46bd      	mov	sp, r7
 81083c6:	bd80      	pop	{r7, pc}
 81083c8:	ffff0000 	.word	0xffff0000
 81083cc:	0810787f 	.word	0x0810787f
 81083d0:	0810846b 	.word	0x0810846b

081083d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81083d4:	b580      	push	{r7, lr}
 81083d6:	b082      	sub	sp, #8
 81083d8:	af00      	add	r7, sp, #0
 81083da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 81083dc:	687b      	ldr	r3, [r7, #4]
 81083de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81083e2:	b2db      	uxtb	r3, r3
 81083e4:	2b60      	cmp	r3, #96	; 0x60
 81083e6:	d10e      	bne.n	8108406 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	2220      	movs	r2, #32
 81083ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	2200      	movs	r2, #0
 81083f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81083f6:	687b      	ldr	r3, [r7, #4]
 81083f8:	2200      	movs	r2, #0
 81083fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 81083fe:	6878      	ldr	r0, [r7, #4]
 8108400:	f7ff fa33 	bl	810786a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108404:	e009      	b.n	810841a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8108406:	687b      	ldr	r3, [r7, #4]
 8108408:	2200      	movs	r2, #0
 810840a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810840c:	687b      	ldr	r3, [r7, #4]
 810840e:	2200      	movs	r2, #0
 8108410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8108414:	6878      	ldr	r0, [r7, #4]
 8108416:	f7ff fa1e 	bl	8107856 <HAL_I2C_ErrorCallback>
}
 810841a:	bf00      	nop
 810841c:	3708      	adds	r7, #8
 810841e:	46bd      	mov	sp, r7
 8108420:	bd80      	pop	{r7, pc}

08108422 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8108422:	b480      	push	{r7}
 8108424:	b083      	sub	sp, #12
 8108426:	af00      	add	r7, sp, #0
 8108428:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810842a:	687b      	ldr	r3, [r7, #4]
 810842c:	681b      	ldr	r3, [r3, #0]
 810842e:	699b      	ldr	r3, [r3, #24]
 8108430:	f003 0302 	and.w	r3, r3, #2
 8108434:	2b02      	cmp	r3, #2
 8108436:	d103      	bne.n	8108440 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	681b      	ldr	r3, [r3, #0]
 810843c:	2200      	movs	r2, #0
 810843e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	681b      	ldr	r3, [r3, #0]
 8108444:	699b      	ldr	r3, [r3, #24]
 8108446:	f003 0301 	and.w	r3, r3, #1
 810844a:	2b01      	cmp	r3, #1
 810844c:	d007      	beq.n	810845e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	699a      	ldr	r2, [r3, #24]
 8108454:	687b      	ldr	r3, [r7, #4]
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	f042 0201 	orr.w	r2, r2, #1
 810845c:	619a      	str	r2, [r3, #24]
  }
}
 810845e:	bf00      	nop
 8108460:	370c      	adds	r7, #12
 8108462:	46bd      	mov	sp, r7
 8108464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108468:	4770      	bx	lr

0810846a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 810846a:	b580      	push	{r7, lr}
 810846c:	b084      	sub	sp, #16
 810846e:	af00      	add	r7, sp, #0
 8108470:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108476:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8108478:	68fb      	ldr	r3, [r7, #12]
 810847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810847c:	2b00      	cmp	r3, #0
 810847e:	d003      	beq.n	8108488 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8108480:	68fb      	ldr	r3, [r7, #12]
 8108482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108484:	2200      	movs	r2, #0
 8108486:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8108488:	68fb      	ldr	r3, [r7, #12]
 810848a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810848c:	2b00      	cmp	r3, #0
 810848e:	d003      	beq.n	8108498 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8108490:	68fb      	ldr	r3, [r7, #12]
 8108492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108494:	2200      	movs	r2, #0
 8108496:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8108498:	68f8      	ldr	r0, [r7, #12]
 810849a:	f7ff ff9b 	bl	81083d4 <I2C_TreatErrorCallback>
}
 810849e:	bf00      	nop
 81084a0:	3710      	adds	r7, #16
 81084a2:	46bd      	mov	sp, r7
 81084a4:	bd80      	pop	{r7, pc}

081084a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81084a6:	b580      	push	{r7, lr}
 81084a8:	b084      	sub	sp, #16
 81084aa:	af00      	add	r7, sp, #0
 81084ac:	60f8      	str	r0, [r7, #12]
 81084ae:	60b9      	str	r1, [r7, #8]
 81084b0:	603b      	str	r3, [r7, #0]
 81084b2:	4613      	mov	r3, r2
 81084b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81084b6:	e022      	b.n	81084fe <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81084b8:	683b      	ldr	r3, [r7, #0]
 81084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81084be:	d01e      	beq.n	81084fe <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81084c0:	f7fb f9c2 	bl	8103848 <HAL_GetTick>
 81084c4:	4602      	mov	r2, r0
 81084c6:	69bb      	ldr	r3, [r7, #24]
 81084c8:	1ad3      	subs	r3, r2, r3
 81084ca:	683a      	ldr	r2, [r7, #0]
 81084cc:	429a      	cmp	r2, r3
 81084ce:	d302      	bcc.n	81084d6 <I2C_WaitOnFlagUntilTimeout+0x30>
 81084d0:	683b      	ldr	r3, [r7, #0]
 81084d2:	2b00      	cmp	r3, #0
 81084d4:	d113      	bne.n	81084fe <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81084d6:	68fb      	ldr	r3, [r7, #12]
 81084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81084da:	f043 0220 	orr.w	r2, r3, #32
 81084de:	68fb      	ldr	r3, [r7, #12]
 81084e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81084e2:	68fb      	ldr	r3, [r7, #12]
 81084e4:	2220      	movs	r2, #32
 81084e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	2200      	movs	r2, #0
 81084ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81084f2:	68fb      	ldr	r3, [r7, #12]
 81084f4:	2200      	movs	r2, #0
 81084f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81084fa:	2301      	movs	r3, #1
 81084fc:	e00f      	b.n	810851e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81084fe:	68fb      	ldr	r3, [r7, #12]
 8108500:	681b      	ldr	r3, [r3, #0]
 8108502:	699a      	ldr	r2, [r3, #24]
 8108504:	68bb      	ldr	r3, [r7, #8]
 8108506:	4013      	ands	r3, r2
 8108508:	68ba      	ldr	r2, [r7, #8]
 810850a:	429a      	cmp	r2, r3
 810850c:	bf0c      	ite	eq
 810850e:	2301      	moveq	r3, #1
 8108510:	2300      	movne	r3, #0
 8108512:	b2db      	uxtb	r3, r3
 8108514:	461a      	mov	r2, r3
 8108516:	79fb      	ldrb	r3, [r7, #7]
 8108518:	429a      	cmp	r2, r3
 810851a:	d0cd      	beq.n	81084b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 810851c:	2300      	movs	r3, #0
}
 810851e:	4618      	mov	r0, r3
 8108520:	3710      	adds	r7, #16
 8108522:	46bd      	mov	sp, r7
 8108524:	bd80      	pop	{r7, pc}

08108526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8108526:	b580      	push	{r7, lr}
 8108528:	b084      	sub	sp, #16
 810852a:	af00      	add	r7, sp, #0
 810852c:	60f8      	str	r0, [r7, #12]
 810852e:	60b9      	str	r1, [r7, #8]
 8108530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8108532:	e02c      	b.n	810858e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8108534:	687a      	ldr	r2, [r7, #4]
 8108536:	68b9      	ldr	r1, [r7, #8]
 8108538:	68f8      	ldr	r0, [r7, #12]
 810853a:	f000 f871 	bl	8108620 <I2C_IsAcknowledgeFailed>
 810853e:	4603      	mov	r3, r0
 8108540:	2b00      	cmp	r3, #0
 8108542:	d001      	beq.n	8108548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8108544:	2301      	movs	r3, #1
 8108546:	e02a      	b.n	810859e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108548:	68bb      	ldr	r3, [r7, #8]
 810854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810854e:	d01e      	beq.n	810858e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108550:	f7fb f97a 	bl	8103848 <HAL_GetTick>
 8108554:	4602      	mov	r2, r0
 8108556:	687b      	ldr	r3, [r7, #4]
 8108558:	1ad3      	subs	r3, r2, r3
 810855a:	68ba      	ldr	r2, [r7, #8]
 810855c:	429a      	cmp	r2, r3
 810855e:	d302      	bcc.n	8108566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8108560:	68bb      	ldr	r3, [r7, #8]
 8108562:	2b00      	cmp	r3, #0
 8108564:	d113      	bne.n	810858e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108566:	68fb      	ldr	r3, [r7, #12]
 8108568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810856a:	f043 0220 	orr.w	r2, r3, #32
 810856e:	68fb      	ldr	r3, [r7, #12]
 8108570:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8108572:	68fb      	ldr	r3, [r7, #12]
 8108574:	2220      	movs	r2, #32
 8108576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810857a:	68fb      	ldr	r3, [r7, #12]
 810857c:	2200      	movs	r2, #0
 810857e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8108582:	68fb      	ldr	r3, [r7, #12]
 8108584:	2200      	movs	r2, #0
 8108586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 810858a:	2301      	movs	r3, #1
 810858c:	e007      	b.n	810859e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810858e:	68fb      	ldr	r3, [r7, #12]
 8108590:	681b      	ldr	r3, [r3, #0]
 8108592:	699b      	ldr	r3, [r3, #24]
 8108594:	f003 0302 	and.w	r3, r3, #2
 8108598:	2b02      	cmp	r3, #2
 810859a:	d1cb      	bne.n	8108534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810859c:	2300      	movs	r3, #0
}
 810859e:	4618      	mov	r0, r3
 81085a0:	3710      	adds	r7, #16
 81085a2:	46bd      	mov	sp, r7
 81085a4:	bd80      	pop	{r7, pc}

081085a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81085a6:	b580      	push	{r7, lr}
 81085a8:	b084      	sub	sp, #16
 81085aa:	af00      	add	r7, sp, #0
 81085ac:	60f8      	str	r0, [r7, #12]
 81085ae:	60b9      	str	r1, [r7, #8]
 81085b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81085b2:	e028      	b.n	8108606 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81085b4:	687a      	ldr	r2, [r7, #4]
 81085b6:	68b9      	ldr	r1, [r7, #8]
 81085b8:	68f8      	ldr	r0, [r7, #12]
 81085ba:	f000 f831 	bl	8108620 <I2C_IsAcknowledgeFailed>
 81085be:	4603      	mov	r3, r0
 81085c0:	2b00      	cmp	r3, #0
 81085c2:	d001      	beq.n	81085c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81085c4:	2301      	movs	r3, #1
 81085c6:	e026      	b.n	8108616 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81085c8:	f7fb f93e 	bl	8103848 <HAL_GetTick>
 81085cc:	4602      	mov	r2, r0
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	1ad3      	subs	r3, r2, r3
 81085d2:	68ba      	ldr	r2, [r7, #8]
 81085d4:	429a      	cmp	r2, r3
 81085d6:	d302      	bcc.n	81085de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81085d8:	68bb      	ldr	r3, [r7, #8]
 81085da:	2b00      	cmp	r3, #0
 81085dc:	d113      	bne.n	8108606 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81085de:	68fb      	ldr	r3, [r7, #12]
 81085e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81085e2:	f043 0220 	orr.w	r2, r3, #32
 81085e6:	68fb      	ldr	r3, [r7, #12]
 81085e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81085ea:	68fb      	ldr	r3, [r7, #12]
 81085ec:	2220      	movs	r2, #32
 81085ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81085f2:	68fb      	ldr	r3, [r7, #12]
 81085f4:	2200      	movs	r2, #0
 81085f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81085fa:	68fb      	ldr	r3, [r7, #12]
 81085fc:	2200      	movs	r2, #0
 81085fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8108602:	2301      	movs	r3, #1
 8108604:	e007      	b.n	8108616 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108606:	68fb      	ldr	r3, [r7, #12]
 8108608:	681b      	ldr	r3, [r3, #0]
 810860a:	699b      	ldr	r3, [r3, #24]
 810860c:	f003 0320 	and.w	r3, r3, #32
 8108610:	2b20      	cmp	r3, #32
 8108612:	d1cf      	bne.n	81085b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8108614:	2300      	movs	r3, #0
}
 8108616:	4618      	mov	r0, r3
 8108618:	3710      	adds	r7, #16
 810861a:	46bd      	mov	sp, r7
 810861c:	bd80      	pop	{r7, pc}
	...

08108620 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8108620:	b580      	push	{r7, lr}
 8108622:	b084      	sub	sp, #16
 8108624:	af00      	add	r7, sp, #0
 8108626:	60f8      	str	r0, [r7, #12]
 8108628:	60b9      	str	r1, [r7, #8]
 810862a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810862c:	68fb      	ldr	r3, [r7, #12]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	699b      	ldr	r3, [r3, #24]
 8108632:	f003 0310 	and.w	r3, r3, #16
 8108636:	2b10      	cmp	r3, #16
 8108638:	d151      	bne.n	81086de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810863a:	e022      	b.n	8108682 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810863c:	68bb      	ldr	r3, [r7, #8]
 810863e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108642:	d01e      	beq.n	8108682 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108644:	f7fb f900 	bl	8103848 <HAL_GetTick>
 8108648:	4602      	mov	r2, r0
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	1ad3      	subs	r3, r2, r3
 810864e:	68ba      	ldr	r2, [r7, #8]
 8108650:	429a      	cmp	r2, r3
 8108652:	d302      	bcc.n	810865a <I2C_IsAcknowledgeFailed+0x3a>
 8108654:	68bb      	ldr	r3, [r7, #8]
 8108656:	2b00      	cmp	r3, #0
 8108658:	d113      	bne.n	8108682 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810865a:	68fb      	ldr	r3, [r7, #12]
 810865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810865e:	f043 0220 	orr.w	r2, r3, #32
 8108662:	68fb      	ldr	r3, [r7, #12]
 8108664:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8108666:	68fb      	ldr	r3, [r7, #12]
 8108668:	2220      	movs	r2, #32
 810866a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	2200      	movs	r2, #0
 8108672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8108676:	68fb      	ldr	r3, [r7, #12]
 8108678:	2200      	movs	r2, #0
 810867a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810867e:	2301      	movs	r3, #1
 8108680:	e02e      	b.n	81086e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108682:	68fb      	ldr	r3, [r7, #12]
 8108684:	681b      	ldr	r3, [r3, #0]
 8108686:	699b      	ldr	r3, [r3, #24]
 8108688:	f003 0320 	and.w	r3, r3, #32
 810868c:	2b20      	cmp	r3, #32
 810868e:	d1d5      	bne.n	810863c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108690:	68fb      	ldr	r3, [r7, #12]
 8108692:	681b      	ldr	r3, [r3, #0]
 8108694:	2210      	movs	r2, #16
 8108696:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108698:	68fb      	ldr	r3, [r7, #12]
 810869a:	681b      	ldr	r3, [r3, #0]
 810869c:	2220      	movs	r2, #32
 810869e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81086a0:	68f8      	ldr	r0, [r7, #12]
 81086a2:	f7ff febe 	bl	8108422 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81086a6:	68fb      	ldr	r3, [r7, #12]
 81086a8:	681b      	ldr	r3, [r3, #0]
 81086aa:	6859      	ldr	r1, [r3, #4]
 81086ac:	68fb      	ldr	r3, [r7, #12]
 81086ae:	681a      	ldr	r2, [r3, #0]
 81086b0:	4b0d      	ldr	r3, [pc, #52]	; (81086e8 <I2C_IsAcknowledgeFailed+0xc8>)
 81086b2:	400b      	ands	r3, r1
 81086b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81086b6:	68fb      	ldr	r3, [r7, #12]
 81086b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81086ba:	f043 0204 	orr.w	r2, r3, #4
 81086be:	68fb      	ldr	r3, [r7, #12]
 81086c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81086c2:	68fb      	ldr	r3, [r7, #12]
 81086c4:	2220      	movs	r2, #32
 81086c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81086ca:	68fb      	ldr	r3, [r7, #12]
 81086cc:	2200      	movs	r2, #0
 81086ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81086d2:	68fb      	ldr	r3, [r7, #12]
 81086d4:	2200      	movs	r2, #0
 81086d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 81086da:	2301      	movs	r3, #1
 81086dc:	e000      	b.n	81086e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81086de:	2300      	movs	r3, #0
}
 81086e0:	4618      	mov	r0, r3
 81086e2:	3710      	adds	r7, #16
 81086e4:	46bd      	mov	sp, r7
 81086e6:	bd80      	pop	{r7, pc}
 81086e8:	fe00e800 	.word	0xfe00e800

081086ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81086ec:	b480      	push	{r7}
 81086ee:	b085      	sub	sp, #20
 81086f0:	af00      	add	r7, sp, #0
 81086f2:	60f8      	str	r0, [r7, #12]
 81086f4:	607b      	str	r3, [r7, #4]
 81086f6:	460b      	mov	r3, r1
 81086f8:	817b      	strh	r3, [r7, #10]
 81086fa:	4613      	mov	r3, r2
 81086fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81086fe:	68fb      	ldr	r3, [r7, #12]
 8108700:	681b      	ldr	r3, [r3, #0]
 8108702:	685a      	ldr	r2, [r3, #4]
 8108704:	69bb      	ldr	r3, [r7, #24]
 8108706:	0d5b      	lsrs	r3, r3, #21
 8108708:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810870c:	4b0d      	ldr	r3, [pc, #52]	; (8108744 <I2C_TransferConfig+0x58>)
 810870e:	430b      	orrs	r3, r1
 8108710:	43db      	mvns	r3, r3
 8108712:	ea02 0103 	and.w	r1, r2, r3
 8108716:	897b      	ldrh	r3, [r7, #10]
 8108718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 810871c:	7a7b      	ldrb	r3, [r7, #9]
 810871e:	041b      	lsls	r3, r3, #16
 8108720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8108724:	431a      	orrs	r2, r3
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	431a      	orrs	r2, r3
 810872a:	69bb      	ldr	r3, [r7, #24]
 810872c:	431a      	orrs	r2, r3
 810872e:	68fb      	ldr	r3, [r7, #12]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	430a      	orrs	r2, r1
 8108734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8108736:	bf00      	nop
 8108738:	3714      	adds	r7, #20
 810873a:	46bd      	mov	sp, r7
 810873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108740:	4770      	bx	lr
 8108742:	bf00      	nop
 8108744:	03ff63ff 	.word	0x03ff63ff

08108748 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108748:	b480      	push	{r7}
 810874a:	b085      	sub	sp, #20
 810874c:	af00      	add	r7, sp, #0
 810874e:	6078      	str	r0, [r7, #4]
 8108750:	460b      	mov	r3, r1
 8108752:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108754:	2300      	movs	r3, #0
 8108756:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108758:	887b      	ldrh	r3, [r7, #2]
 810875a:	f003 0301 	and.w	r3, r3, #1
 810875e:	2b00      	cmp	r3, #0
 8108760:	d00f      	beq.n	8108782 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108762:	68fb      	ldr	r3, [r7, #12]
 8108764:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108768:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810876a:	687b      	ldr	r3, [r7, #4]
 810876c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108770:	b2db      	uxtb	r3, r3
 8108772:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108776:	2b28      	cmp	r3, #40	; 0x28
 8108778:	d003      	beq.n	8108782 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 810877a:	68fb      	ldr	r3, [r7, #12]
 810877c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108780:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108782:	887b      	ldrh	r3, [r7, #2]
 8108784:	f003 0302 	and.w	r3, r3, #2
 8108788:	2b00      	cmp	r3, #0
 810878a:	d00f      	beq.n	81087ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 810878c:	68fb      	ldr	r3, [r7, #12]
 810878e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8108792:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108794:	687b      	ldr	r3, [r7, #4]
 8108796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810879a:	b2db      	uxtb	r3, r3
 810879c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81087a0:	2b28      	cmp	r3, #40	; 0x28
 81087a2:	d003      	beq.n	81087ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81087a4:	68fb      	ldr	r3, [r7, #12]
 81087a6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 81087aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 81087ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 81087b0:	2b00      	cmp	r3, #0
 81087b2:	da03      	bge.n	81087bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81087b4:	68fb      	ldr	r3, [r7, #12]
 81087b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 81087ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 81087bc:	887b      	ldrh	r3, [r7, #2]
 81087be:	2b10      	cmp	r3, #16
 81087c0:	d103      	bne.n	81087ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 81087c2:	68fb      	ldr	r3, [r7, #12]
 81087c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 81087c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 81087ca:	887b      	ldrh	r3, [r7, #2]
 81087cc:	2b20      	cmp	r3, #32
 81087ce:	d103      	bne.n	81087d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 81087d0:	68fb      	ldr	r3, [r7, #12]
 81087d2:	f043 0320 	orr.w	r3, r3, #32
 81087d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 81087d8:	887b      	ldrh	r3, [r7, #2]
 81087da:	2b40      	cmp	r3, #64	; 0x40
 81087dc:	d103      	bne.n	81087e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 81087de:	68fb      	ldr	r3, [r7, #12]
 81087e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81087e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81087e6:	687b      	ldr	r3, [r7, #4]
 81087e8:	681b      	ldr	r3, [r3, #0]
 81087ea:	6819      	ldr	r1, [r3, #0]
 81087ec:	68fb      	ldr	r3, [r7, #12]
 81087ee:	43da      	mvns	r2, r3
 81087f0:	687b      	ldr	r3, [r7, #4]
 81087f2:	681b      	ldr	r3, [r3, #0]
 81087f4:	400a      	ands	r2, r1
 81087f6:	601a      	str	r2, [r3, #0]
}
 81087f8:	bf00      	nop
 81087fa:	3714      	adds	r7, #20
 81087fc:	46bd      	mov	sp, r7
 81087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108802:	4770      	bx	lr

08108804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8108804:	b480      	push	{r7}
 8108806:	b083      	sub	sp, #12
 8108808:	af00      	add	r7, sp, #0
 810880a:	6078      	str	r0, [r7, #4]
 810880c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810880e:	687b      	ldr	r3, [r7, #4]
 8108810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108814:	b2db      	uxtb	r3, r3
 8108816:	2b20      	cmp	r3, #32
 8108818:	d138      	bne.n	810888c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108820:	2b01      	cmp	r3, #1
 8108822:	d101      	bne.n	8108828 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8108824:	2302      	movs	r3, #2
 8108826:	e032      	b.n	810888e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108828:	687b      	ldr	r3, [r7, #4]
 810882a:	2201      	movs	r2, #1
 810882c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108830:	687b      	ldr	r3, [r7, #4]
 8108832:	2224      	movs	r2, #36	; 0x24
 8108834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	681b      	ldr	r3, [r3, #0]
 810883c:	681a      	ldr	r2, [r3, #0]
 810883e:	687b      	ldr	r3, [r7, #4]
 8108840:	681b      	ldr	r3, [r3, #0]
 8108842:	f022 0201 	bic.w	r2, r2, #1
 8108846:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	681b      	ldr	r3, [r3, #0]
 810884c:	681a      	ldr	r2, [r3, #0]
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	681b      	ldr	r3, [r3, #0]
 8108852:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108856:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108858:	687b      	ldr	r3, [r7, #4]
 810885a:	681b      	ldr	r3, [r3, #0]
 810885c:	6819      	ldr	r1, [r3, #0]
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	683a      	ldr	r2, [r7, #0]
 8108864:	430a      	orrs	r2, r1
 8108866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	681a      	ldr	r2, [r3, #0]
 810886e:	687b      	ldr	r3, [r7, #4]
 8108870:	681b      	ldr	r3, [r3, #0]
 8108872:	f042 0201 	orr.w	r2, r2, #1
 8108876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108878:	687b      	ldr	r3, [r7, #4]
 810887a:	2220      	movs	r2, #32
 810887c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108880:	687b      	ldr	r3, [r7, #4]
 8108882:	2200      	movs	r2, #0
 8108884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108888:	2300      	movs	r3, #0
 810888a:	e000      	b.n	810888e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810888c:	2302      	movs	r3, #2
  }
}
 810888e:	4618      	mov	r0, r3
 8108890:	370c      	adds	r7, #12
 8108892:	46bd      	mov	sp, r7
 8108894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108898:	4770      	bx	lr

0810889a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810889a:	b480      	push	{r7}
 810889c:	b085      	sub	sp, #20
 810889e:	af00      	add	r7, sp, #0
 81088a0:	6078      	str	r0, [r7, #4]
 81088a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81088aa:	b2db      	uxtb	r3, r3
 81088ac:	2b20      	cmp	r3, #32
 81088ae:	d139      	bne.n	8108924 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81088b6:	2b01      	cmp	r3, #1
 81088b8:	d101      	bne.n	81088be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81088ba:	2302      	movs	r3, #2
 81088bc:	e033      	b.n	8108926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	2201      	movs	r2, #1
 81088c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	2224      	movs	r2, #36	; 0x24
 81088ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	681b      	ldr	r3, [r3, #0]
 81088d2:	681a      	ldr	r2, [r3, #0]
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	681b      	ldr	r3, [r3, #0]
 81088d8:	f022 0201 	bic.w	r2, r2, #1
 81088dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	681b      	ldr	r3, [r3, #0]
 81088e2:	681b      	ldr	r3, [r3, #0]
 81088e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81088e6:	68fb      	ldr	r3, [r7, #12]
 81088e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81088ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81088ee:	683b      	ldr	r3, [r7, #0]
 81088f0:	021b      	lsls	r3, r3, #8
 81088f2:	68fa      	ldr	r2, [r7, #12]
 81088f4:	4313      	orrs	r3, r2
 81088f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	681b      	ldr	r3, [r3, #0]
 81088fc:	68fa      	ldr	r2, [r7, #12]
 81088fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	681a      	ldr	r2, [r3, #0]
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	681b      	ldr	r3, [r3, #0]
 810890a:	f042 0201 	orr.w	r2, r2, #1
 810890e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	2220      	movs	r2, #32
 8108914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	2200      	movs	r2, #0
 810891c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108920:	2300      	movs	r3, #0
 8108922:	e000      	b.n	8108926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8108924:	2302      	movs	r3, #2
  }
}
 8108926:	4618      	mov	r0, r3
 8108928:	3714      	adds	r7, #20
 810892a:	46bd      	mov	sp, r7
 810892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108930:	4770      	bx	lr
	...

08108934 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108934:	b580      	push	{r7, lr}
 8108936:	b084      	sub	sp, #16
 8108938:	af00      	add	r7, sp, #0
 810893a:	60f8      	str	r0, [r7, #12]
 810893c:	460b      	mov	r3, r1
 810893e:	607a      	str	r2, [r7, #4]
 8108940:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108942:	4b37      	ldr	r3, [pc, #220]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108944:	681b      	ldr	r3, [r3, #0]
 8108946:	f023 0201 	bic.w	r2, r3, #1
 810894a:	4935      	ldr	r1, [pc, #212]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 810894c:	68fb      	ldr	r3, [r7, #12]
 810894e:	4313      	orrs	r3, r2
 8108950:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	2b00      	cmp	r3, #0
 8108956:	d123      	bne.n	81089a0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108958:	f7fb fba8 	bl	81040ac <HAL_GetCurrentCPUID>
 810895c:	4603      	mov	r3, r0
 810895e:	2b03      	cmp	r3, #3
 8108960:	d158      	bne.n	8108a14 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108962:	4b2f      	ldr	r3, [pc, #188]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108964:	691b      	ldr	r3, [r3, #16]
 8108966:	4a2e      	ldr	r2, [pc, #184]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108968:	f023 0301 	bic.w	r3, r3, #1
 810896c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810896e:	4b2d      	ldr	r3, [pc, #180]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108970:	691b      	ldr	r3, [r3, #16]
 8108972:	4a2c      	ldr	r2, [pc, #176]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108974:	f043 0304 	orr.w	r3, r3, #4
 8108978:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810897a:	f3bf 8f4f 	dsb	sy
}
 810897e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108980:	f3bf 8f6f 	isb	sy
}
 8108984:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108986:	7afb      	ldrb	r3, [r7, #11]
 8108988:	2b01      	cmp	r3, #1
 810898a:	d101      	bne.n	8108990 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810898c:	bf30      	wfi
 810898e:	e000      	b.n	8108992 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108990:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108992:	4b24      	ldr	r3, [pc, #144]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108994:	691b      	ldr	r3, [r3, #16]
 8108996:	4a23      	ldr	r2, [pc, #140]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108998:	f023 0304 	bic.w	r3, r3, #4
 810899c:	6113      	str	r3, [r2, #16]
 810899e:	e03c      	b.n	8108a1a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	2b01      	cmp	r3, #1
 81089a4:	d123      	bne.n	81089ee <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81089a6:	f7fb fb81 	bl	81040ac <HAL_GetCurrentCPUID>
 81089aa:	4603      	mov	r3, r0
 81089ac:	2b01      	cmp	r3, #1
 81089ae:	d133      	bne.n	8108a18 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81089b0:	4b1b      	ldr	r3, [pc, #108]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81089b2:	695b      	ldr	r3, [r3, #20]
 81089b4:	4a1a      	ldr	r2, [pc, #104]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81089b6:	f023 0302 	bic.w	r3, r3, #2
 81089ba:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81089bc:	4b19      	ldr	r3, [pc, #100]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81089be:	691b      	ldr	r3, [r3, #16]
 81089c0:	4a18      	ldr	r2, [pc, #96]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81089c2:	f043 0304 	orr.w	r3, r3, #4
 81089c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81089c8:	f3bf 8f4f 	dsb	sy
}
 81089cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81089ce:	f3bf 8f6f 	isb	sy
}
 81089d2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81089d4:	7afb      	ldrb	r3, [r7, #11]
 81089d6:	2b01      	cmp	r3, #1
 81089d8:	d101      	bne.n	81089de <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81089da:	bf30      	wfi
 81089dc:	e000      	b.n	81089e0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81089de:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81089e0:	4b10      	ldr	r3, [pc, #64]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81089e2:	691b      	ldr	r3, [r3, #16]
 81089e4:	4a0f      	ldr	r2, [pc, #60]	; (8108a24 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81089e6:	f023 0304 	bic.w	r3, r3, #4
 81089ea:	6113      	str	r3, [r2, #16]
 81089ec:	e015      	b.n	8108a1a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81089ee:	f7fb fb5d 	bl	81040ac <HAL_GetCurrentCPUID>
 81089f2:	4603      	mov	r3, r0
 81089f4:	2b03      	cmp	r3, #3
 81089f6:	d106      	bne.n	8108a06 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81089f8:	4b09      	ldr	r3, [pc, #36]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81089fa:	691b      	ldr	r3, [r3, #16]
 81089fc:	4a08      	ldr	r2, [pc, #32]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 81089fe:	f023 0304 	bic.w	r3, r3, #4
 8108a02:	6113      	str	r3, [r2, #16]
 8108a04:	e009      	b.n	8108a1a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8108a06:	4b06      	ldr	r3, [pc, #24]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108a08:	695b      	ldr	r3, [r3, #20]
 8108a0a:	4a05      	ldr	r2, [pc, #20]	; (8108a20 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108a0c:	f023 0304 	bic.w	r3, r3, #4
 8108a10:	6153      	str	r3, [r2, #20]
 8108a12:	e002      	b.n	8108a1a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108a14:	bf00      	nop
 8108a16:	e000      	b.n	8108a1a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108a18:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8108a1a:	3710      	adds	r7, #16
 8108a1c:	46bd      	mov	sp, r7
 8108a1e:	bd80      	pop	{r7, pc}
 8108a20:	58024800 	.word	0x58024800
 8108a24:	e000ed00 	.word	0xe000ed00

08108a28 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108a28:	b580      	push	{r7, lr}
 8108a2a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108a2c:	f7fb fb3e 	bl	81040ac <HAL_GetCurrentCPUID>
 8108a30:	4603      	mov	r3, r0
 8108a32:	2b03      	cmp	r3, #3
 8108a34:	d101      	bne.n	8108a3a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8108a36:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108a38:	e001      	b.n	8108a3e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8108a3a:	bf40      	sev
    __WFE ();
 8108a3c:	bf20      	wfe
}
 8108a3e:	bf00      	nop
 8108a40:	bd80      	pop	{r7, pc}
	...

08108a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108a44:	b480      	push	{r7}
 8108a46:	b089      	sub	sp, #36	; 0x24
 8108a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108a4a:	4bb3      	ldr	r3, [pc, #716]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a4c:	691b      	ldr	r3, [r3, #16]
 8108a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108a52:	2b18      	cmp	r3, #24
 8108a54:	f200 8155 	bhi.w	8108d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8108a58:	a201      	add	r2, pc, #4	; (adr r2, 8108a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8108a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a5e:	bf00      	nop
 8108a60:	08108ac5 	.word	0x08108ac5
 8108a64:	08108d03 	.word	0x08108d03
 8108a68:	08108d03 	.word	0x08108d03
 8108a6c:	08108d03 	.word	0x08108d03
 8108a70:	08108d03 	.word	0x08108d03
 8108a74:	08108d03 	.word	0x08108d03
 8108a78:	08108d03 	.word	0x08108d03
 8108a7c:	08108d03 	.word	0x08108d03
 8108a80:	08108aeb 	.word	0x08108aeb
 8108a84:	08108d03 	.word	0x08108d03
 8108a88:	08108d03 	.word	0x08108d03
 8108a8c:	08108d03 	.word	0x08108d03
 8108a90:	08108d03 	.word	0x08108d03
 8108a94:	08108d03 	.word	0x08108d03
 8108a98:	08108d03 	.word	0x08108d03
 8108a9c:	08108d03 	.word	0x08108d03
 8108aa0:	08108af1 	.word	0x08108af1
 8108aa4:	08108d03 	.word	0x08108d03
 8108aa8:	08108d03 	.word	0x08108d03
 8108aac:	08108d03 	.word	0x08108d03
 8108ab0:	08108d03 	.word	0x08108d03
 8108ab4:	08108d03 	.word	0x08108d03
 8108ab8:	08108d03 	.word	0x08108d03
 8108abc:	08108d03 	.word	0x08108d03
 8108ac0:	08108af7 	.word	0x08108af7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108ac4:	4b94      	ldr	r3, [pc, #592]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ac6:	681b      	ldr	r3, [r3, #0]
 8108ac8:	f003 0320 	and.w	r3, r3, #32
 8108acc:	2b00      	cmp	r3, #0
 8108ace:	d009      	beq.n	8108ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108ad0:	4b91      	ldr	r3, [pc, #580]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ad2:	681b      	ldr	r3, [r3, #0]
 8108ad4:	08db      	lsrs	r3, r3, #3
 8108ad6:	f003 0303 	and.w	r3, r3, #3
 8108ada:	4a90      	ldr	r2, [pc, #576]	; (8108d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108adc:	fa22 f303 	lsr.w	r3, r2, r3
 8108ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8108ae2:	e111      	b.n	8108d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8108ae4:	4b8d      	ldr	r3, [pc, #564]	; (8108d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108ae6:	61bb      	str	r3, [r7, #24]
    break;
 8108ae8:	e10e      	b.n	8108d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8108aea:	4b8d      	ldr	r3, [pc, #564]	; (8108d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108aec:	61bb      	str	r3, [r7, #24]
    break;
 8108aee:	e10b      	b.n	8108d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108af0:	4b8c      	ldr	r3, [pc, #560]	; (8108d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8108af2:	61bb      	str	r3, [r7, #24]
    break;
 8108af4:	e108      	b.n	8108d08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108af6:	4b88      	ldr	r3, [pc, #544]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108afa:	f003 0303 	and.w	r3, r3, #3
 8108afe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8108b00:	4b85      	ldr	r3, [pc, #532]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b04:	091b      	lsrs	r3, r3, #4
 8108b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108b0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8108b0c:	4b82      	ldr	r3, [pc, #520]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108b10:	f003 0301 	and.w	r3, r3, #1
 8108b14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8108b16:	4b80      	ldr	r3, [pc, #512]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108b1a:	08db      	lsrs	r3, r3, #3
 8108b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108b20:	68fa      	ldr	r2, [r7, #12]
 8108b22:	fb02 f303 	mul.w	r3, r2, r3
 8108b26:	ee07 3a90 	vmov	s15, r3
 8108b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8108b32:	693b      	ldr	r3, [r7, #16]
 8108b34:	2b00      	cmp	r3, #0
 8108b36:	f000 80e1 	beq.w	8108cfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8108b3a:	697b      	ldr	r3, [r7, #20]
 8108b3c:	2b02      	cmp	r3, #2
 8108b3e:	f000 8083 	beq.w	8108c48 <HAL_RCC_GetSysClockFreq+0x204>
 8108b42:	697b      	ldr	r3, [r7, #20]
 8108b44:	2b02      	cmp	r3, #2
 8108b46:	f200 80a1 	bhi.w	8108c8c <HAL_RCC_GetSysClockFreq+0x248>
 8108b4a:	697b      	ldr	r3, [r7, #20]
 8108b4c:	2b00      	cmp	r3, #0
 8108b4e:	d003      	beq.n	8108b58 <HAL_RCC_GetSysClockFreq+0x114>
 8108b50:	697b      	ldr	r3, [r7, #20]
 8108b52:	2b01      	cmp	r3, #1
 8108b54:	d056      	beq.n	8108c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8108b56:	e099      	b.n	8108c8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108b58:	4b6f      	ldr	r3, [pc, #444]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b5a:	681b      	ldr	r3, [r3, #0]
 8108b5c:	f003 0320 	and.w	r3, r3, #32
 8108b60:	2b00      	cmp	r3, #0
 8108b62:	d02d      	beq.n	8108bc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108b64:	4b6c      	ldr	r3, [pc, #432]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b66:	681b      	ldr	r3, [r3, #0]
 8108b68:	08db      	lsrs	r3, r3, #3
 8108b6a:	f003 0303 	and.w	r3, r3, #3
 8108b6e:	4a6b      	ldr	r2, [pc, #428]	; (8108d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108b70:	fa22 f303 	lsr.w	r3, r2, r3
 8108b74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108b76:	687b      	ldr	r3, [r7, #4]
 8108b78:	ee07 3a90 	vmov	s15, r3
 8108b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b80:	693b      	ldr	r3, [r7, #16]
 8108b82:	ee07 3a90 	vmov	s15, r3
 8108b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b8e:	4b62      	ldr	r3, [pc, #392]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b96:	ee07 3a90 	vmov	s15, r3
 8108b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108ba2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8108d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108bba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8108bbe:	e087      	b.n	8108cd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108bc0:	693b      	ldr	r3, [r7, #16]
 8108bc2:	ee07 3a90 	vmov	s15, r3
 8108bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8108d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8108bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108bd2:	4b51      	ldr	r3, [pc, #324]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108bda:	ee07 3a90 	vmov	s15, r3
 8108bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8108be6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8108d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c02:	e065      	b.n	8108cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108c04:	693b      	ldr	r3, [r7, #16]
 8108c06:	ee07 3a90 	vmov	s15, r3
 8108c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8108d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c16:	4b40      	ldr	r3, [pc, #256]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c1e:	ee07 3a90 	vmov	s15, r3
 8108c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8108c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8108d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c46:	e043      	b.n	8108cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108c48:	693b      	ldr	r3, [r7, #16]
 8108c4a:	ee07 3a90 	vmov	s15, r3
 8108c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8108d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8108c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c5a:	4b2f      	ldr	r3, [pc, #188]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c62:	ee07 3a90 	vmov	s15, r3
 8108c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8108c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8108d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c8a:	e021      	b.n	8108cd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108c8c:	693b      	ldr	r3, [r7, #16]
 8108c8e:	ee07 3a90 	vmov	s15, r3
 8108c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8108d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c9e:	4b1e      	ldr	r3, [pc, #120]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108ca6:	ee07 3a90 	vmov	s15, r3
 8108caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8108cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8108d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108cce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108cd0:	4b11      	ldr	r3, [pc, #68]	; (8108d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108cd4:	0a5b      	lsrs	r3, r3, #9
 8108cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108cda:	3301      	adds	r3, #1
 8108cdc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8108cde:	683b      	ldr	r3, [r7, #0]
 8108ce0:	ee07 3a90 	vmov	s15, r3
 8108ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8108cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108cf4:	ee17 3a90 	vmov	r3, s15
 8108cf8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8108cfa:	e005      	b.n	8108d08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8108cfc:	2300      	movs	r3, #0
 8108cfe:	61bb      	str	r3, [r7, #24]
    break;
 8108d00:	e002      	b.n	8108d08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8108d02:	4b07      	ldr	r3, [pc, #28]	; (8108d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108d04:	61bb      	str	r3, [r7, #24]
    break;
 8108d06:	bf00      	nop
  }

  return sysclockfreq;
 8108d08:	69bb      	ldr	r3, [r7, #24]
}
 8108d0a:	4618      	mov	r0, r3
 8108d0c:	3724      	adds	r7, #36	; 0x24
 8108d0e:	46bd      	mov	sp, r7
 8108d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d14:	4770      	bx	lr
 8108d16:	bf00      	nop
 8108d18:	58024400 	.word	0x58024400
 8108d1c:	03d09000 	.word	0x03d09000
 8108d20:	003d0900 	.word	0x003d0900
 8108d24:	00f42400 	.word	0x00f42400
 8108d28:	46000000 	.word	0x46000000
 8108d2c:	4c742400 	.word	0x4c742400
 8108d30:	4a742400 	.word	0x4a742400
 8108d34:	4b742400 	.word	0x4b742400

08108d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8108d38:	b580      	push	{r7, lr}
 8108d3a:	b082      	sub	sp, #8
 8108d3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8108d3e:	f7ff fe81 	bl	8108a44 <HAL_RCC_GetSysClockFreq>
 8108d42:	4602      	mov	r2, r0
 8108d44:	4b11      	ldr	r3, [pc, #68]	; (8108d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8108d46:	699b      	ldr	r3, [r3, #24]
 8108d48:	0a1b      	lsrs	r3, r3, #8
 8108d4a:	f003 030f 	and.w	r3, r3, #15
 8108d4e:	4910      	ldr	r1, [pc, #64]	; (8108d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8108d50:	5ccb      	ldrb	r3, [r1, r3]
 8108d52:	f003 031f 	and.w	r3, r3, #31
 8108d56:	fa22 f303 	lsr.w	r3, r2, r3
 8108d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108d5c:	4b0b      	ldr	r3, [pc, #44]	; (8108d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8108d5e:	699b      	ldr	r3, [r3, #24]
 8108d60:	f003 030f 	and.w	r3, r3, #15
 8108d64:	4a0a      	ldr	r2, [pc, #40]	; (8108d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8108d66:	5cd3      	ldrb	r3, [r2, r3]
 8108d68:	f003 031f 	and.w	r3, r3, #31
 8108d6c:	687a      	ldr	r2, [r7, #4]
 8108d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8108d72:	4a08      	ldr	r2, [pc, #32]	; (8108d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108d74:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8108d76:	4b07      	ldr	r3, [pc, #28]	; (8108d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	4a07      	ldr	r2, [pc, #28]	; (8108d98 <HAL_RCC_GetHCLKFreq+0x60>)
 8108d7c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8108d7e:	4b05      	ldr	r3, [pc, #20]	; (8108d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108d80:	681b      	ldr	r3, [r3, #0]
}
 8108d82:	4618      	mov	r0, r3
 8108d84:	3708      	adds	r7, #8
 8108d86:	46bd      	mov	sp, r7
 8108d88:	bd80      	pop	{r7, pc}
 8108d8a:	bf00      	nop
 8108d8c:	58024400 	.word	0x58024400
 8108d90:	0810dd0c 	.word	0x0810dd0c
 8108d94:	10000004 	.word	0x10000004
 8108d98:	10000000 	.word	0x10000000

08108d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8108d9c:	b580      	push	{r7, lr}
 8108d9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108da0:	f7ff ffca 	bl	8108d38 <HAL_RCC_GetHCLKFreq>
 8108da4:	4602      	mov	r2, r0
 8108da6:	4b06      	ldr	r3, [pc, #24]	; (8108dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8108da8:	69db      	ldr	r3, [r3, #28]
 8108daa:	091b      	lsrs	r3, r3, #4
 8108dac:	f003 0307 	and.w	r3, r3, #7
 8108db0:	4904      	ldr	r1, [pc, #16]	; (8108dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8108db2:	5ccb      	ldrb	r3, [r1, r3]
 8108db4:	f003 031f 	and.w	r3, r3, #31
 8108db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8108dbc:	4618      	mov	r0, r3
 8108dbe:	bd80      	pop	{r7, pc}
 8108dc0:	58024400 	.word	0x58024400
 8108dc4:	0810dd0c 	.word	0x0810dd0c

08108dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8108dc8:	b580      	push	{r7, lr}
 8108dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8108dcc:	f7ff ffb4 	bl	8108d38 <HAL_RCC_GetHCLKFreq>
 8108dd0:	4602      	mov	r2, r0
 8108dd2:	4b06      	ldr	r3, [pc, #24]	; (8108dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8108dd4:	69db      	ldr	r3, [r3, #28]
 8108dd6:	0a1b      	lsrs	r3, r3, #8
 8108dd8:	f003 0307 	and.w	r3, r3, #7
 8108ddc:	4904      	ldr	r1, [pc, #16]	; (8108df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8108dde:	5ccb      	ldrb	r3, [r1, r3]
 8108de0:	f003 031f 	and.w	r3, r3, #31
 8108de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108de8:	4618      	mov	r0, r3
 8108dea:	bd80      	pop	{r7, pc}
 8108dec:	58024400 	.word	0x58024400
 8108df0:	0810dd0c 	.word	0x0810dd0c

08108df4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8108df4:	b580      	push	{r7, lr}
 8108df6:	b086      	sub	sp, #24
 8108df8:	af00      	add	r7, sp, #0
 8108dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8108dfc:	2300      	movs	r3, #0
 8108dfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8108e00:	2300      	movs	r3, #0
 8108e02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	681b      	ldr	r3, [r3, #0]
 8108e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108e0c:	2b00      	cmp	r3, #0
 8108e0e:	d03f      	beq.n	8108e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8108e10:	687b      	ldr	r3, [r7, #4]
 8108e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108e18:	d02a      	beq.n	8108e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8108e1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108e1e:	d824      	bhi.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108e24:	d018      	beq.n	8108e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108e2a:	d81e      	bhi.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108e2c:	2b00      	cmp	r3, #0
 8108e2e:	d003      	beq.n	8108e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8108e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108e34:	d007      	beq.n	8108e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8108e36:	e018      	b.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108e38:	4bab      	ldr	r3, [pc, #684]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108e3c:	4aaa      	ldr	r2, [pc, #680]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108e44:	e015      	b.n	8108e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108e46:	687b      	ldr	r3, [r7, #4]
 8108e48:	3304      	adds	r3, #4
 8108e4a:	2102      	movs	r1, #2
 8108e4c:	4618      	mov	r0, r3
 8108e4e:	f001 f9cf 	bl	810a1f0 <RCCEx_PLL2_Config>
 8108e52:	4603      	mov	r3, r0
 8108e54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108e56:	e00c      	b.n	8108e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	3324      	adds	r3, #36	; 0x24
 8108e5c:	2102      	movs	r1, #2
 8108e5e:	4618      	mov	r0, r3
 8108e60:	f001 fa78 	bl	810a354 <RCCEx_PLL3_Config>
 8108e64:	4603      	mov	r3, r0
 8108e66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108e68:	e003      	b.n	8108e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108e6a:	2301      	movs	r3, #1
 8108e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8108e6e:	e000      	b.n	8108e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8108e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108e72:	7dfb      	ldrb	r3, [r7, #23]
 8108e74:	2b00      	cmp	r3, #0
 8108e76:	d109      	bne.n	8108e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8108e78:	4b9b      	ldr	r3, [pc, #620]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108e80:	687b      	ldr	r3, [r7, #4]
 8108e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108e84:	4998      	ldr	r1, [pc, #608]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e86:	4313      	orrs	r3, r2
 8108e88:	650b      	str	r3, [r1, #80]	; 0x50
 8108e8a:	e001      	b.n	8108e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e8c:	7dfb      	ldrb	r3, [r7, #23]
 8108e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	681b      	ldr	r3, [r3, #0]
 8108e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108e98:	2b00      	cmp	r3, #0
 8108e9a:	d03d      	beq.n	8108f18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ea0:	2b04      	cmp	r3, #4
 8108ea2:	d826      	bhi.n	8108ef2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108ea4:	a201      	add	r2, pc, #4	; (adr r2, 8108eac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8108ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108eaa:	bf00      	nop
 8108eac:	08108ec1 	.word	0x08108ec1
 8108eb0:	08108ecf 	.word	0x08108ecf
 8108eb4:	08108ee1 	.word	0x08108ee1
 8108eb8:	08108ef9 	.word	0x08108ef9
 8108ebc:	08108ef9 	.word	0x08108ef9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108ec0:	4b89      	ldr	r3, [pc, #548]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108ec4:	4a88      	ldr	r2, [pc, #544]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ecc:	e015      	b.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	3304      	adds	r3, #4
 8108ed2:	2100      	movs	r1, #0
 8108ed4:	4618      	mov	r0, r3
 8108ed6:	f001 f98b 	bl	810a1f0 <RCCEx_PLL2_Config>
 8108eda:	4603      	mov	r3, r0
 8108edc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ede:	e00c      	b.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	3324      	adds	r3, #36	; 0x24
 8108ee4:	2100      	movs	r1, #0
 8108ee6:	4618      	mov	r0, r3
 8108ee8:	f001 fa34 	bl	810a354 <RCCEx_PLL3_Config>
 8108eec:	4603      	mov	r3, r0
 8108eee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ef0:	e003      	b.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108ef2:	2301      	movs	r3, #1
 8108ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8108ef6:	e000      	b.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8108ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108efa:	7dfb      	ldrb	r3, [r7, #23]
 8108efc:	2b00      	cmp	r3, #0
 8108efe:	d109      	bne.n	8108f14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108f00:	4b79      	ldr	r3, [pc, #484]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108f04:	f023 0207 	bic.w	r2, r3, #7
 8108f08:	687b      	ldr	r3, [r7, #4]
 8108f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108f0c:	4976      	ldr	r1, [pc, #472]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f0e:	4313      	orrs	r3, r2
 8108f10:	650b      	str	r3, [r1, #80]	; 0x50
 8108f12:	e001      	b.n	8108f18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f14:	7dfb      	ldrb	r3, [r7, #23]
 8108f16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	681b      	ldr	r3, [r3, #0]
 8108f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108f20:	2b00      	cmp	r3, #0
 8108f22:	d042      	beq.n	8108faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108f2c:	d02b      	beq.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8108f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108f32:	d825      	bhi.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108f34:	2bc0      	cmp	r3, #192	; 0xc0
 8108f36:	d028      	beq.n	8108f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8108f38:	2bc0      	cmp	r3, #192	; 0xc0
 8108f3a:	d821      	bhi.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108f3c:	2b80      	cmp	r3, #128	; 0x80
 8108f3e:	d016      	beq.n	8108f6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8108f40:	2b80      	cmp	r3, #128	; 0x80
 8108f42:	d81d      	bhi.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108f44:	2b00      	cmp	r3, #0
 8108f46:	d002      	beq.n	8108f4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8108f48:	2b40      	cmp	r3, #64	; 0x40
 8108f4a:	d007      	beq.n	8108f5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8108f4c:	e018      	b.n	8108f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108f4e:	4b66      	ldr	r3, [pc, #408]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108f52:	4a65      	ldr	r2, [pc, #404]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108f5a:	e017      	b.n	8108f8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	3304      	adds	r3, #4
 8108f60:	2100      	movs	r1, #0
 8108f62:	4618      	mov	r0, r3
 8108f64:	f001 f944 	bl	810a1f0 <RCCEx_PLL2_Config>
 8108f68:	4603      	mov	r3, r0
 8108f6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108f6c:	e00e      	b.n	8108f8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108f6e:	687b      	ldr	r3, [r7, #4]
 8108f70:	3324      	adds	r3, #36	; 0x24
 8108f72:	2100      	movs	r1, #0
 8108f74:	4618      	mov	r0, r3
 8108f76:	f001 f9ed 	bl	810a354 <RCCEx_PLL3_Config>
 8108f7a:	4603      	mov	r3, r0
 8108f7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108f7e:	e005      	b.n	8108f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108f80:	2301      	movs	r3, #1
 8108f82:	75fb      	strb	r3, [r7, #23]
      break;
 8108f84:	e002      	b.n	8108f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8108f86:	bf00      	nop
 8108f88:	e000      	b.n	8108f8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8108f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f8c:	7dfb      	ldrb	r3, [r7, #23]
 8108f8e:	2b00      	cmp	r3, #0
 8108f90:	d109      	bne.n	8108fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108f92:	4b55      	ldr	r3, [pc, #340]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108f96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8108f9a:	687b      	ldr	r3, [r7, #4]
 8108f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f9e:	4952      	ldr	r1, [pc, #328]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108fa0:	4313      	orrs	r3, r2
 8108fa2:	650b      	str	r3, [r1, #80]	; 0x50
 8108fa4:	e001      	b.n	8108faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108fa6:	7dfb      	ldrb	r3, [r7, #23]
 8108fa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	681b      	ldr	r3, [r3, #0]
 8108fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108fb2:	2b00      	cmp	r3, #0
 8108fb4:	d049      	beq.n	810904a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108fc0:	d030      	beq.n	8109024 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108fc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108fc6:	d82a      	bhi.n	810901e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108fc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108fcc:	d02c      	beq.n	8109028 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8108fce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108fd2:	d824      	bhi.n	810901e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108fd8:	d018      	beq.n	810900c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8108fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108fde:	d81e      	bhi.n	810901e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108fe0:	2b00      	cmp	r3, #0
 8108fe2:	d003      	beq.n	8108fec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8108fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108fe8:	d007      	beq.n	8108ffa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8108fea:	e018      	b.n	810901e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108fec:	4b3e      	ldr	r3, [pc, #248]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108ff0:	4a3d      	ldr	r2, [pc, #244]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ff8:	e017      	b.n	810902a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	3304      	adds	r3, #4
 8108ffe:	2100      	movs	r1, #0
 8109000:	4618      	mov	r0, r3
 8109002:	f001 f8f5 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109006:	4603      	mov	r3, r0
 8109008:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810900a:	e00e      	b.n	810902a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810900c:	687b      	ldr	r3, [r7, #4]
 810900e:	3324      	adds	r3, #36	; 0x24
 8109010:	2100      	movs	r1, #0
 8109012:	4618      	mov	r0, r3
 8109014:	f001 f99e 	bl	810a354 <RCCEx_PLL3_Config>
 8109018:	4603      	mov	r3, r0
 810901a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810901c:	e005      	b.n	810902a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810901e:	2301      	movs	r3, #1
 8109020:	75fb      	strb	r3, [r7, #23]
      break;
 8109022:	e002      	b.n	810902a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8109024:	bf00      	nop
 8109026:	e000      	b.n	810902a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8109028:	bf00      	nop
    }

    if(ret == HAL_OK)
 810902a:	7dfb      	ldrb	r3, [r7, #23]
 810902c:	2b00      	cmp	r3, #0
 810902e:	d10a      	bne.n	8109046 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8109030:	4b2d      	ldr	r3, [pc, #180]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109034:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8109038:	687b      	ldr	r3, [r7, #4]
 810903a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810903e:	492a      	ldr	r1, [pc, #168]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109040:	4313      	orrs	r3, r2
 8109042:	658b      	str	r3, [r1, #88]	; 0x58
 8109044:	e001      	b.n	810904a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109046:	7dfb      	ldrb	r3, [r7, #23]
 8109048:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	681b      	ldr	r3, [r3, #0]
 810904e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109052:	2b00      	cmp	r3, #0
 8109054:	d04c      	beq.n	81090f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810905c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109060:	d030      	beq.n	81090c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8109062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109066:	d82a      	bhi.n	81090be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810906c:	d02c      	beq.n	81090c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 810906e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8109072:	d824      	bhi.n	81090be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109078:	d018      	beq.n	81090ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810907a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810907e:	d81e      	bhi.n	81090be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109080:	2b00      	cmp	r3, #0
 8109082:	d003      	beq.n	810908c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8109084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8109088:	d007      	beq.n	810909a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810908a:	e018      	b.n	81090be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810908c:	4b16      	ldr	r3, [pc, #88]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109090:	4a15      	ldr	r2, [pc, #84]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8109092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109098:	e017      	b.n	81090ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810909a:	687b      	ldr	r3, [r7, #4]
 810909c:	3304      	adds	r3, #4
 810909e:	2100      	movs	r1, #0
 81090a0:	4618      	mov	r0, r3
 81090a2:	f001 f8a5 	bl	810a1f0 <RCCEx_PLL2_Config>
 81090a6:	4603      	mov	r3, r0
 81090a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81090aa:	e00e      	b.n	81090ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81090ac:	687b      	ldr	r3, [r7, #4]
 81090ae:	3324      	adds	r3, #36	; 0x24
 81090b0:	2100      	movs	r1, #0
 81090b2:	4618      	mov	r0, r3
 81090b4:	f001 f94e 	bl	810a354 <RCCEx_PLL3_Config>
 81090b8:	4603      	mov	r3, r0
 81090ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81090bc:	e005      	b.n	81090ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81090be:	2301      	movs	r3, #1
 81090c0:	75fb      	strb	r3, [r7, #23]
      break;
 81090c2:	e002      	b.n	81090ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81090c4:	bf00      	nop
 81090c6:	e000      	b.n	81090ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81090c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81090ca:	7dfb      	ldrb	r3, [r7, #23]
 81090cc:	2b00      	cmp	r3, #0
 81090ce:	d10d      	bne.n	81090ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81090d0:	4b05      	ldr	r3, [pc, #20]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81090d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81090d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81090de:	4902      	ldr	r1, [pc, #8]	; (81090e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81090e0:	4313      	orrs	r3, r2
 81090e2:	658b      	str	r3, [r1, #88]	; 0x58
 81090e4:	e004      	b.n	81090f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81090e6:	bf00      	nop
 81090e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81090ec:	7dfb      	ldrb	r3, [r7, #23]
 81090ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	681b      	ldr	r3, [r3, #0]
 81090f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81090f8:	2b00      	cmp	r3, #0
 81090fa:	d032      	beq.n	8109162 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109100:	2b30      	cmp	r3, #48	; 0x30
 8109102:	d01c      	beq.n	810913e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8109104:	2b30      	cmp	r3, #48	; 0x30
 8109106:	d817      	bhi.n	8109138 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8109108:	2b20      	cmp	r3, #32
 810910a:	d00c      	beq.n	8109126 <HAL_RCCEx_PeriphCLKConfig+0x332>
 810910c:	2b20      	cmp	r3, #32
 810910e:	d813      	bhi.n	8109138 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8109110:	2b00      	cmp	r3, #0
 8109112:	d016      	beq.n	8109142 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8109114:	2b10      	cmp	r3, #16
 8109116:	d10f      	bne.n	8109138 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109118:	4baf      	ldr	r3, [pc, #700]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810911c:	4aae      	ldr	r2, [pc, #696]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810911e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8109124:	e00e      	b.n	8109144 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109126:	687b      	ldr	r3, [r7, #4]
 8109128:	3304      	adds	r3, #4
 810912a:	2102      	movs	r1, #2
 810912c:	4618      	mov	r0, r3
 810912e:	f001 f85f 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109132:	4603      	mov	r3, r0
 8109134:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8109136:	e005      	b.n	8109144 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109138:	2301      	movs	r3, #1
 810913a:	75fb      	strb	r3, [r7, #23]
      break;
 810913c:	e002      	b.n	8109144 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810913e:	bf00      	nop
 8109140:	e000      	b.n	8109144 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8109142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109144:	7dfb      	ldrb	r3, [r7, #23]
 8109146:	2b00      	cmp	r3, #0
 8109148:	d109      	bne.n	810915e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810914a:	4ba3      	ldr	r3, [pc, #652]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810914e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8109152:	687b      	ldr	r3, [r7, #4]
 8109154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109156:	49a0      	ldr	r1, [pc, #640]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109158:	4313      	orrs	r3, r2
 810915a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810915c:	e001      	b.n	8109162 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810915e:	7dfb      	ldrb	r3, [r7, #23]
 8109160:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	681b      	ldr	r3, [r3, #0]
 8109166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810916a:	2b00      	cmp	r3, #0
 810916c:	d047      	beq.n	81091fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109176:	d030      	beq.n	81091da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8109178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810917c:	d82a      	bhi.n	81091d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810917e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109182:	d02c      	beq.n	81091de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8109184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109188:	d824      	bhi.n	81091d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810918a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810918e:	d018      	beq.n	81091c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8109190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109194:	d81e      	bhi.n	81091d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8109196:	2b00      	cmp	r3, #0
 8109198:	d003      	beq.n	81091a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810919a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810919e:	d007      	beq.n	81091b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81091a0:	e018      	b.n	81091d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81091a2:	4b8d      	ldr	r3, [pc, #564]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81091a6:	4a8c      	ldr	r2, [pc, #560]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81091ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81091ae:	e017      	b.n	81091e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	3304      	adds	r3, #4
 81091b4:	2100      	movs	r1, #0
 81091b6:	4618      	mov	r0, r3
 81091b8:	f001 f81a 	bl	810a1f0 <RCCEx_PLL2_Config>
 81091bc:	4603      	mov	r3, r0
 81091be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81091c0:	e00e      	b.n	81091e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81091c2:	687b      	ldr	r3, [r7, #4]
 81091c4:	3324      	adds	r3, #36	; 0x24
 81091c6:	2100      	movs	r1, #0
 81091c8:	4618      	mov	r0, r3
 81091ca:	f001 f8c3 	bl	810a354 <RCCEx_PLL3_Config>
 81091ce:	4603      	mov	r3, r0
 81091d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81091d2:	e005      	b.n	81091e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81091d4:	2301      	movs	r3, #1
 81091d6:	75fb      	strb	r3, [r7, #23]
      break;
 81091d8:	e002      	b.n	81091e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81091da:	bf00      	nop
 81091dc:	e000      	b.n	81091e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81091de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81091e0:	7dfb      	ldrb	r3, [r7, #23]
 81091e2:	2b00      	cmp	r3, #0
 81091e4:	d109      	bne.n	81091fa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81091e6:	4b7c      	ldr	r3, [pc, #496]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81091ea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81091f2:	4979      	ldr	r1, [pc, #484]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091f4:	4313      	orrs	r3, r2
 81091f6:	650b      	str	r3, [r1, #80]	; 0x50
 81091f8:	e001      	b.n	81091fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81091fa:	7dfb      	ldrb	r3, [r7, #23]
 81091fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81091fe:	687b      	ldr	r3, [r7, #4]
 8109200:	681b      	ldr	r3, [r3, #0]
 8109202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8109206:	2b00      	cmp	r3, #0
 8109208:	d049      	beq.n	810929e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810920e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8109212:	d02e      	beq.n	8109272 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8109214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8109218:	d828      	bhi.n	810926c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810921a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810921e:	d02a      	beq.n	8109276 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8109220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8109224:	d822      	bhi.n	810926c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109226:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810922a:	d026      	beq.n	810927a <HAL_RCCEx_PeriphCLKConfig+0x486>
 810922c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8109230:	d81c      	bhi.n	810926c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109236:	d010      	beq.n	810925a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8109238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810923c:	d816      	bhi.n	810926c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810923e:	2b00      	cmp	r3, #0
 8109240:	d01d      	beq.n	810927e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8109242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109246:	d111      	bne.n	810926c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109248:	687b      	ldr	r3, [r7, #4]
 810924a:	3304      	adds	r3, #4
 810924c:	2101      	movs	r1, #1
 810924e:	4618      	mov	r0, r3
 8109250:	f000 ffce 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109254:	4603      	mov	r3, r0
 8109256:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109258:	e012      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	3324      	adds	r3, #36	; 0x24
 810925e:	2101      	movs	r1, #1
 8109260:	4618      	mov	r0, r3
 8109262:	f001 f877 	bl	810a354 <RCCEx_PLL3_Config>
 8109266:	4603      	mov	r3, r0
 8109268:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810926a:	e009      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810926c:	2301      	movs	r3, #1
 810926e:	75fb      	strb	r3, [r7, #23]
      break;
 8109270:	e006      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109272:	bf00      	nop
 8109274:	e004      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8109276:	bf00      	nop
 8109278:	e002      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810927a:	bf00      	nop
 810927c:	e000      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810927e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109280:	7dfb      	ldrb	r3, [r7, #23]
 8109282:	2b00      	cmp	r3, #0
 8109284:	d109      	bne.n	810929a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8109286:	4b54      	ldr	r3, [pc, #336]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810928a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109292:	4951      	ldr	r1, [pc, #324]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109294:	4313      	orrs	r3, r2
 8109296:	650b      	str	r3, [r1, #80]	; 0x50
 8109298:	e001      	b.n	810929e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810929a:	7dfb      	ldrb	r3, [r7, #23]
 810929c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	681b      	ldr	r3, [r3, #0]
 81092a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81092a6:	2b00      	cmp	r3, #0
 81092a8:	d04b      	beq.n	8109342 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81092b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81092b4:	d02e      	beq.n	8109314 <HAL_RCCEx_PeriphCLKConfig+0x520>
 81092b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81092ba:	d828      	bhi.n	810930e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81092bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81092c0:	d02a      	beq.n	8109318 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81092c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81092c6:	d822      	bhi.n	810930e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81092c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81092cc:	d026      	beq.n	810931c <HAL_RCCEx_PeriphCLKConfig+0x528>
 81092ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81092d2:	d81c      	bhi.n	810930e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81092d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81092d8:	d010      	beq.n	81092fc <HAL_RCCEx_PeriphCLKConfig+0x508>
 81092da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81092de:	d816      	bhi.n	810930e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81092e0:	2b00      	cmp	r3, #0
 81092e2:	d01d      	beq.n	8109320 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81092e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81092e8:	d111      	bne.n	810930e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	3304      	adds	r3, #4
 81092ee:	2101      	movs	r1, #1
 81092f0:	4618      	mov	r0, r3
 81092f2:	f000 ff7d 	bl	810a1f0 <RCCEx_PLL2_Config>
 81092f6:	4603      	mov	r3, r0
 81092f8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81092fa:	e012      	b.n	8109322 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	3324      	adds	r3, #36	; 0x24
 8109300:	2101      	movs	r1, #1
 8109302:	4618      	mov	r0, r3
 8109304:	f001 f826 	bl	810a354 <RCCEx_PLL3_Config>
 8109308:	4603      	mov	r3, r0
 810930a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810930c:	e009      	b.n	8109322 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810930e:	2301      	movs	r3, #1
 8109310:	75fb      	strb	r3, [r7, #23]
      break;
 8109312:	e006      	b.n	8109322 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109314:	bf00      	nop
 8109316:	e004      	b.n	8109322 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109318:	bf00      	nop
 810931a:	e002      	b.n	8109322 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810931c:	bf00      	nop
 810931e:	e000      	b.n	8109322 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109322:	7dfb      	ldrb	r3, [r7, #23]
 8109324:	2b00      	cmp	r3, #0
 8109326:	d10a      	bne.n	810933e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8109328:	4b2b      	ldr	r3, [pc, #172]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810932a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810932c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8109330:	687b      	ldr	r3, [r7, #4]
 8109332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8109336:	4928      	ldr	r1, [pc, #160]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109338:	4313      	orrs	r3, r2
 810933a:	658b      	str	r3, [r1, #88]	; 0x58
 810933c:	e001      	b.n	8109342 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810933e:	7dfb      	ldrb	r3, [r7, #23]
 8109340:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	681b      	ldr	r3, [r3, #0]
 8109346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810934a:	2b00      	cmp	r3, #0
 810934c:	d02f      	beq.n	81093ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109356:	d00e      	beq.n	8109376 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8109358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810935c:	d814      	bhi.n	8109388 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810935e:	2b00      	cmp	r3, #0
 8109360:	d015      	beq.n	810938e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8109362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109366:	d10f      	bne.n	8109388 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109368:	4b1b      	ldr	r3, [pc, #108]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810936c:	4a1a      	ldr	r2, [pc, #104]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810936e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109374:	e00c      	b.n	8109390 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	3304      	adds	r3, #4
 810937a:	2101      	movs	r1, #1
 810937c:	4618      	mov	r0, r3
 810937e:	f000 ff37 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109382:	4603      	mov	r3, r0
 8109384:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109386:	e003      	b.n	8109390 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109388:	2301      	movs	r3, #1
 810938a:	75fb      	strb	r3, [r7, #23]
      break;
 810938c:	e000      	b.n	8109390 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810938e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109390:	7dfb      	ldrb	r3, [r7, #23]
 8109392:	2b00      	cmp	r3, #0
 8109394:	d109      	bne.n	81093aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109396:	4b10      	ldr	r3, [pc, #64]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810939a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810939e:	687b      	ldr	r3, [r7, #4]
 81093a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81093a2:	490d      	ldr	r1, [pc, #52]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81093a4:	4313      	orrs	r3, r2
 81093a6:	650b      	str	r3, [r1, #80]	; 0x50
 81093a8:	e001      	b.n	81093ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81093aa:	7dfb      	ldrb	r3, [r7, #23]
 81093ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	681b      	ldr	r3, [r3, #0]
 81093b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81093b6:	2b00      	cmp	r3, #0
 81093b8:	d033      	beq.n	8109422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81093be:	2b03      	cmp	r3, #3
 81093c0:	d81c      	bhi.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 81093c2:	a201      	add	r2, pc, #4	; (adr r2, 81093c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81093c8:	08109403 	.word	0x08109403
 81093cc:	081093dd 	.word	0x081093dd
 81093d0:	081093eb 	.word	0x081093eb
 81093d4:	08109403 	.word	0x08109403
 81093d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81093dc:	4bb9      	ldr	r3, [pc, #740]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81093e0:	4ab8      	ldr	r2, [pc, #736]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81093e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81093e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81093e8:	e00c      	b.n	8109404 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	3304      	adds	r3, #4
 81093ee:	2102      	movs	r1, #2
 81093f0:	4618      	mov	r0, r3
 81093f2:	f000 fefd 	bl	810a1f0 <RCCEx_PLL2_Config>
 81093f6:	4603      	mov	r3, r0
 81093f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81093fa:	e003      	b.n	8109404 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81093fc:	2301      	movs	r3, #1
 81093fe:	75fb      	strb	r3, [r7, #23]
      break;
 8109400:	e000      	b.n	8109404 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8109402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109404:	7dfb      	ldrb	r3, [r7, #23]
 8109406:	2b00      	cmp	r3, #0
 8109408:	d109      	bne.n	810941e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810940a:	4bae      	ldr	r3, [pc, #696]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810940c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810940e:	f023 0203 	bic.w	r2, r3, #3
 8109412:	687b      	ldr	r3, [r7, #4]
 8109414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109416:	49ab      	ldr	r1, [pc, #684]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109418:	4313      	orrs	r3, r2
 810941a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810941c:	e001      	b.n	8109422 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810941e:	7dfb      	ldrb	r3, [r7, #23]
 8109420:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8109422:	687b      	ldr	r3, [r7, #4]
 8109424:	681b      	ldr	r3, [r3, #0]
 8109426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810942a:	2b00      	cmp	r3, #0
 810942c:	f000 8088 	beq.w	8109540 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8109430:	4ba5      	ldr	r3, [pc, #660]	; (81096c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109432:	681b      	ldr	r3, [r3, #0]
 8109434:	4aa4      	ldr	r2, [pc, #656]	; (81096c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810943a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810943c:	f7fa fa04 	bl	8103848 <HAL_GetTick>
 8109440:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109442:	e009      	b.n	8109458 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8109444:	f7fa fa00 	bl	8103848 <HAL_GetTick>
 8109448:	4602      	mov	r2, r0
 810944a:	693b      	ldr	r3, [r7, #16]
 810944c:	1ad3      	subs	r3, r2, r3
 810944e:	2b64      	cmp	r3, #100	; 0x64
 8109450:	d902      	bls.n	8109458 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8109452:	2303      	movs	r3, #3
 8109454:	75fb      	strb	r3, [r7, #23]
        break;
 8109456:	e005      	b.n	8109464 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109458:	4b9b      	ldr	r3, [pc, #620]	; (81096c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810945a:	681b      	ldr	r3, [r3, #0]
 810945c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109460:	2b00      	cmp	r3, #0
 8109462:	d0ef      	beq.n	8109444 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8109464:	7dfb      	ldrb	r3, [r7, #23]
 8109466:	2b00      	cmp	r3, #0
 8109468:	d168      	bne.n	810953c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810946a:	4b96      	ldr	r3, [pc, #600]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810946c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810946e:	687b      	ldr	r3, [r7, #4]
 8109470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109474:	4053      	eors	r3, r2
 8109476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810947a:	2b00      	cmp	r3, #0
 810947c:	d013      	beq.n	81094a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810947e:	4b91      	ldr	r3, [pc, #580]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109486:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109488:	4b8e      	ldr	r3, [pc, #568]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810948a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810948c:	4a8d      	ldr	r2, [pc, #564]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810948e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8109492:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109494:	4b8b      	ldr	r3, [pc, #556]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109498:	4a8a      	ldr	r2, [pc, #552]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810949a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810949e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81094a0:	4a88      	ldr	r2, [pc, #544]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094a2:	68fb      	ldr	r3, [r7, #12]
 81094a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81094a6:	687b      	ldr	r3, [r7, #4]
 81094a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81094ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81094b0:	d115      	bne.n	81094de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81094b2:	f7fa f9c9 	bl	8103848 <HAL_GetTick>
 81094b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81094b8:	e00b      	b.n	81094d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81094ba:	f7fa f9c5 	bl	8103848 <HAL_GetTick>
 81094be:	4602      	mov	r2, r0
 81094c0:	693b      	ldr	r3, [r7, #16]
 81094c2:	1ad3      	subs	r3, r2, r3
 81094c4:	f241 3288 	movw	r2, #5000	; 0x1388
 81094c8:	4293      	cmp	r3, r2
 81094ca:	d902      	bls.n	81094d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81094cc:	2303      	movs	r3, #3
 81094ce:	75fb      	strb	r3, [r7, #23]
            break;
 81094d0:	e005      	b.n	81094de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81094d2:	4b7c      	ldr	r3, [pc, #496]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81094d6:	f003 0302 	and.w	r3, r3, #2
 81094da:	2b00      	cmp	r3, #0
 81094dc:	d0ed      	beq.n	81094ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81094de:	7dfb      	ldrb	r3, [r7, #23]
 81094e0:	2b00      	cmp	r3, #0
 81094e2:	d128      	bne.n	8109536 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81094e4:	687b      	ldr	r3, [r7, #4]
 81094e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81094ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81094ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81094f2:	d10f      	bne.n	8109514 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81094f4:	4b73      	ldr	r3, [pc, #460]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094f6:	691b      	ldr	r3, [r3, #16]
 81094f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109502:	091b      	lsrs	r3, r3, #4
 8109504:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8109508:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810950c:	496d      	ldr	r1, [pc, #436]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810950e:	4313      	orrs	r3, r2
 8109510:	610b      	str	r3, [r1, #16]
 8109512:	e005      	b.n	8109520 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8109514:	4b6b      	ldr	r3, [pc, #428]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109516:	691b      	ldr	r3, [r3, #16]
 8109518:	4a6a      	ldr	r2, [pc, #424]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810951a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810951e:	6113      	str	r3, [r2, #16]
 8109520:	4b68      	ldr	r3, [pc, #416]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810952a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810952e:	4965      	ldr	r1, [pc, #404]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109530:	4313      	orrs	r3, r2
 8109532:	670b      	str	r3, [r1, #112]	; 0x70
 8109534:	e004      	b.n	8109540 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8109536:	7dfb      	ldrb	r3, [r7, #23]
 8109538:	75bb      	strb	r3, [r7, #22]
 810953a:	e001      	b.n	8109540 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810953c:	7dfb      	ldrb	r3, [r7, #23]
 810953e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	681b      	ldr	r3, [r3, #0]
 8109544:	f003 0301 	and.w	r3, r3, #1
 8109548:	2b00      	cmp	r3, #0
 810954a:	d07e      	beq.n	810964a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810954c:	687b      	ldr	r3, [r7, #4]
 810954e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109550:	2b28      	cmp	r3, #40	; 0x28
 8109552:	d867      	bhi.n	8109624 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8109554:	a201      	add	r2, pc, #4	; (adr r2, 810955c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8109556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810955a:	bf00      	nop
 810955c:	0810962b 	.word	0x0810962b
 8109560:	08109625 	.word	0x08109625
 8109564:	08109625 	.word	0x08109625
 8109568:	08109625 	.word	0x08109625
 810956c:	08109625 	.word	0x08109625
 8109570:	08109625 	.word	0x08109625
 8109574:	08109625 	.word	0x08109625
 8109578:	08109625 	.word	0x08109625
 810957c:	08109601 	.word	0x08109601
 8109580:	08109625 	.word	0x08109625
 8109584:	08109625 	.word	0x08109625
 8109588:	08109625 	.word	0x08109625
 810958c:	08109625 	.word	0x08109625
 8109590:	08109625 	.word	0x08109625
 8109594:	08109625 	.word	0x08109625
 8109598:	08109625 	.word	0x08109625
 810959c:	08109613 	.word	0x08109613
 81095a0:	08109625 	.word	0x08109625
 81095a4:	08109625 	.word	0x08109625
 81095a8:	08109625 	.word	0x08109625
 81095ac:	08109625 	.word	0x08109625
 81095b0:	08109625 	.word	0x08109625
 81095b4:	08109625 	.word	0x08109625
 81095b8:	08109625 	.word	0x08109625
 81095bc:	0810962b 	.word	0x0810962b
 81095c0:	08109625 	.word	0x08109625
 81095c4:	08109625 	.word	0x08109625
 81095c8:	08109625 	.word	0x08109625
 81095cc:	08109625 	.word	0x08109625
 81095d0:	08109625 	.word	0x08109625
 81095d4:	08109625 	.word	0x08109625
 81095d8:	08109625 	.word	0x08109625
 81095dc:	0810962b 	.word	0x0810962b
 81095e0:	08109625 	.word	0x08109625
 81095e4:	08109625 	.word	0x08109625
 81095e8:	08109625 	.word	0x08109625
 81095ec:	08109625 	.word	0x08109625
 81095f0:	08109625 	.word	0x08109625
 81095f4:	08109625 	.word	0x08109625
 81095f8:	08109625 	.word	0x08109625
 81095fc:	0810962b 	.word	0x0810962b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	3304      	adds	r3, #4
 8109604:	2101      	movs	r1, #1
 8109606:	4618      	mov	r0, r3
 8109608:	f000 fdf2 	bl	810a1f0 <RCCEx_PLL2_Config>
 810960c:	4603      	mov	r3, r0
 810960e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109610:	e00c      	b.n	810962c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	3324      	adds	r3, #36	; 0x24
 8109616:	2101      	movs	r1, #1
 8109618:	4618      	mov	r0, r3
 810961a:	f000 fe9b 	bl	810a354 <RCCEx_PLL3_Config>
 810961e:	4603      	mov	r3, r0
 8109620:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109622:	e003      	b.n	810962c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109624:	2301      	movs	r3, #1
 8109626:	75fb      	strb	r3, [r7, #23]
      break;
 8109628:	e000      	b.n	810962c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810962a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810962c:	7dfb      	ldrb	r3, [r7, #23]
 810962e:	2b00      	cmp	r3, #0
 8109630:	d109      	bne.n	8109646 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8109632:	4b24      	ldr	r3, [pc, #144]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109636:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810963e:	4921      	ldr	r1, [pc, #132]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109640:	4313      	orrs	r3, r2
 8109642:	654b      	str	r3, [r1, #84]	; 0x54
 8109644:	e001      	b.n	810964a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109646:	7dfb      	ldrb	r3, [r7, #23]
 8109648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	681b      	ldr	r3, [r3, #0]
 810964e:	f003 0302 	and.w	r3, r3, #2
 8109652:	2b00      	cmp	r3, #0
 8109654:	d03c      	beq.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810965a:	2b05      	cmp	r3, #5
 810965c:	d820      	bhi.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810965e:	a201      	add	r2, pc, #4	; (adr r2, 8109664 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8109660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109664:	081096a7 	.word	0x081096a7
 8109668:	0810967d 	.word	0x0810967d
 810966c:	0810968f 	.word	0x0810968f
 8109670:	081096a7 	.word	0x081096a7
 8109674:	081096a7 	.word	0x081096a7
 8109678:	081096a7 	.word	0x081096a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	3304      	adds	r3, #4
 8109680:	2101      	movs	r1, #1
 8109682:	4618      	mov	r0, r3
 8109684:	f000 fdb4 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109688:	4603      	mov	r3, r0
 810968a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810968c:	e00c      	b.n	81096a8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	3324      	adds	r3, #36	; 0x24
 8109692:	2101      	movs	r1, #1
 8109694:	4618      	mov	r0, r3
 8109696:	f000 fe5d 	bl	810a354 <RCCEx_PLL3_Config>
 810969a:	4603      	mov	r3, r0
 810969c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810969e:	e003      	b.n	81096a8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81096a0:	2301      	movs	r3, #1
 81096a2:	75fb      	strb	r3, [r7, #23]
      break;
 81096a4:	e000      	b.n	81096a8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81096a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81096a8:	7dfb      	ldrb	r3, [r7, #23]
 81096aa:	2b00      	cmp	r3, #0
 81096ac:	d10e      	bne.n	81096cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81096ae:	4b05      	ldr	r3, [pc, #20]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81096b2:	f023 0207 	bic.w	r2, r3, #7
 81096b6:	687b      	ldr	r3, [r7, #4]
 81096b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81096ba:	4902      	ldr	r1, [pc, #8]	; (81096c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81096bc:	4313      	orrs	r3, r2
 81096be:	654b      	str	r3, [r1, #84]	; 0x54
 81096c0:	e006      	b.n	81096d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81096c2:	bf00      	nop
 81096c4:	58024400 	.word	0x58024400
 81096c8:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81096cc:	7dfb      	ldrb	r3, [r7, #23]
 81096ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	681b      	ldr	r3, [r3, #0]
 81096d4:	f003 0304 	and.w	r3, r3, #4
 81096d8:	2b00      	cmp	r3, #0
 81096da:	d039      	beq.n	8109750 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81096e2:	2b05      	cmp	r3, #5
 81096e4:	d820      	bhi.n	8109728 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81096e6:	a201      	add	r2, pc, #4	; (adr r2, 81096ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81096ec:	0810972f 	.word	0x0810972f
 81096f0:	08109705 	.word	0x08109705
 81096f4:	08109717 	.word	0x08109717
 81096f8:	0810972f 	.word	0x0810972f
 81096fc:	0810972f 	.word	0x0810972f
 8109700:	0810972f 	.word	0x0810972f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109704:	687b      	ldr	r3, [r7, #4]
 8109706:	3304      	adds	r3, #4
 8109708:	2101      	movs	r1, #1
 810970a:	4618      	mov	r0, r3
 810970c:	f000 fd70 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109710:	4603      	mov	r3, r0
 8109712:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8109714:	e00c      	b.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	3324      	adds	r3, #36	; 0x24
 810971a:	2101      	movs	r1, #1
 810971c:	4618      	mov	r0, r3
 810971e:	f000 fe19 	bl	810a354 <RCCEx_PLL3_Config>
 8109722:	4603      	mov	r3, r0
 8109724:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8109726:	e003      	b.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109728:	2301      	movs	r3, #1
 810972a:	75fb      	strb	r3, [r7, #23]
      break;
 810972c:	e000      	b.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810972e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109730:	7dfb      	ldrb	r3, [r7, #23]
 8109732:	2b00      	cmp	r3, #0
 8109734:	d10a      	bne.n	810974c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8109736:	4bb7      	ldr	r3, [pc, #732]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810973a:	f023 0207 	bic.w	r2, r3, #7
 810973e:	687b      	ldr	r3, [r7, #4]
 8109740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109744:	49b3      	ldr	r1, [pc, #716]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109746:	4313      	orrs	r3, r2
 8109748:	658b      	str	r3, [r1, #88]	; 0x58
 810974a:	e001      	b.n	8109750 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810974c:	7dfb      	ldrb	r3, [r7, #23]
 810974e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	681b      	ldr	r3, [r3, #0]
 8109754:	f003 0320 	and.w	r3, r3, #32
 8109758:	2b00      	cmp	r3, #0
 810975a:	d04b      	beq.n	81097f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810975c:	687b      	ldr	r3, [r7, #4]
 810975e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109766:	d02e      	beq.n	81097c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8109768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810976c:	d828      	bhi.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810976e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109772:	d02a      	beq.n	81097ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8109774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109778:	d822      	bhi.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810977a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810977e:	d026      	beq.n	81097ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8109780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109784:	d81c      	bhi.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810978a:	d010      	beq.n	81097ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810978c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109790:	d816      	bhi.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109792:	2b00      	cmp	r3, #0
 8109794:	d01d      	beq.n	81097d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8109796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810979a:	d111      	bne.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	3304      	adds	r3, #4
 81097a0:	2100      	movs	r1, #0
 81097a2:	4618      	mov	r0, r3
 81097a4:	f000 fd24 	bl	810a1f0 <RCCEx_PLL2_Config>
 81097a8:	4603      	mov	r3, r0
 81097aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81097ac:	e012      	b.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81097ae:	687b      	ldr	r3, [r7, #4]
 81097b0:	3324      	adds	r3, #36	; 0x24
 81097b2:	2102      	movs	r1, #2
 81097b4:	4618      	mov	r0, r3
 81097b6:	f000 fdcd 	bl	810a354 <RCCEx_PLL3_Config>
 81097ba:	4603      	mov	r3, r0
 81097bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81097be:	e009      	b.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81097c0:	2301      	movs	r3, #1
 81097c2:	75fb      	strb	r3, [r7, #23]
      break;
 81097c4:	e006      	b.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81097c6:	bf00      	nop
 81097c8:	e004      	b.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81097ca:	bf00      	nop
 81097cc:	e002      	b.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81097ce:	bf00      	nop
 81097d0:	e000      	b.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81097d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81097d4:	7dfb      	ldrb	r3, [r7, #23]
 81097d6:	2b00      	cmp	r3, #0
 81097d8:	d10a      	bne.n	81097f0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81097da:	4b8e      	ldr	r3, [pc, #568]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81097de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81097e2:	687b      	ldr	r3, [r7, #4]
 81097e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81097e8:	498a      	ldr	r1, [pc, #552]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097ea:	4313      	orrs	r3, r2
 81097ec:	654b      	str	r3, [r1, #84]	; 0x54
 81097ee:	e001      	b.n	81097f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81097f0:	7dfb      	ldrb	r3, [r7, #23]
 81097f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81097f4:	687b      	ldr	r3, [r7, #4]
 81097f6:	681b      	ldr	r3, [r3, #0]
 81097f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81097fc:	2b00      	cmp	r3, #0
 81097fe:	d04b      	beq.n	8109898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8109800:	687b      	ldr	r3, [r7, #4]
 8109802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109806:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810980a:	d02e      	beq.n	810986a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810980c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109810:	d828      	bhi.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8109812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109816:	d02a      	beq.n	810986e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8109818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810981c:	d822      	bhi.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810981e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109822:	d026      	beq.n	8109872 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8109824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109828:	d81c      	bhi.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810982a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810982e:	d010      	beq.n	8109852 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8109830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109834:	d816      	bhi.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8109836:	2b00      	cmp	r3, #0
 8109838:	d01d      	beq.n	8109876 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810983a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810983e:	d111      	bne.n	8109864 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	3304      	adds	r3, #4
 8109844:	2100      	movs	r1, #0
 8109846:	4618      	mov	r0, r3
 8109848:	f000 fcd2 	bl	810a1f0 <RCCEx_PLL2_Config>
 810984c:	4603      	mov	r3, r0
 810984e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109850:	e012      	b.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109852:	687b      	ldr	r3, [r7, #4]
 8109854:	3324      	adds	r3, #36	; 0x24
 8109856:	2102      	movs	r1, #2
 8109858:	4618      	mov	r0, r3
 810985a:	f000 fd7b 	bl	810a354 <RCCEx_PLL3_Config>
 810985e:	4603      	mov	r3, r0
 8109860:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109862:	e009      	b.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109864:	2301      	movs	r3, #1
 8109866:	75fb      	strb	r3, [r7, #23]
      break;
 8109868:	e006      	b.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810986a:	bf00      	nop
 810986c:	e004      	b.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810986e:	bf00      	nop
 8109870:	e002      	b.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109872:	bf00      	nop
 8109874:	e000      	b.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109878:	7dfb      	ldrb	r3, [r7, #23]
 810987a:	2b00      	cmp	r3, #0
 810987c:	d10a      	bne.n	8109894 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810987e:	4b65      	ldr	r3, [pc, #404]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109882:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8109886:	687b      	ldr	r3, [r7, #4]
 8109888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810988c:	4961      	ldr	r1, [pc, #388]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810988e:	4313      	orrs	r3, r2
 8109890:	658b      	str	r3, [r1, #88]	; 0x58
 8109892:	e001      	b.n	8109898 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109894:	7dfb      	ldrb	r3, [r7, #23]
 8109896:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	681b      	ldr	r3, [r3, #0]
 810989c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81098a0:	2b00      	cmp	r3, #0
 81098a2:	d04b      	beq.n	810993c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81098aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81098ae:	d02e      	beq.n	810990e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81098b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81098b4:	d828      	bhi.n	8109908 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81098b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81098ba:	d02a      	beq.n	8109912 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81098bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81098c0:	d822      	bhi.n	8109908 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81098c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81098c6:	d026      	beq.n	8109916 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81098c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81098cc:	d81c      	bhi.n	8109908 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81098ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81098d2:	d010      	beq.n	81098f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81098d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81098d8:	d816      	bhi.n	8109908 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81098da:	2b00      	cmp	r3, #0
 81098dc:	d01d      	beq.n	810991a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81098de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81098e2:	d111      	bne.n	8109908 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	3304      	adds	r3, #4
 81098e8:	2100      	movs	r1, #0
 81098ea:	4618      	mov	r0, r3
 81098ec:	f000 fc80 	bl	810a1f0 <RCCEx_PLL2_Config>
 81098f0:	4603      	mov	r3, r0
 81098f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81098f4:	e012      	b.n	810991c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81098f6:	687b      	ldr	r3, [r7, #4]
 81098f8:	3324      	adds	r3, #36	; 0x24
 81098fa:	2102      	movs	r1, #2
 81098fc:	4618      	mov	r0, r3
 81098fe:	f000 fd29 	bl	810a354 <RCCEx_PLL3_Config>
 8109902:	4603      	mov	r3, r0
 8109904:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109906:	e009      	b.n	810991c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109908:	2301      	movs	r3, #1
 810990a:	75fb      	strb	r3, [r7, #23]
      break;
 810990c:	e006      	b.n	810991c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810990e:	bf00      	nop
 8109910:	e004      	b.n	810991c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8109912:	bf00      	nop
 8109914:	e002      	b.n	810991c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8109916:	bf00      	nop
 8109918:	e000      	b.n	810991c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810991a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810991c:	7dfb      	ldrb	r3, [r7, #23]
 810991e:	2b00      	cmp	r3, #0
 8109920:	d10a      	bne.n	8109938 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8109922:	4b3c      	ldr	r3, [pc, #240]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109930:	4938      	ldr	r1, [pc, #224]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109932:	4313      	orrs	r3, r2
 8109934:	658b      	str	r3, [r1, #88]	; 0x58
 8109936:	e001      	b.n	810993c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109938:	7dfb      	ldrb	r3, [r7, #23]
 810993a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	681b      	ldr	r3, [r3, #0]
 8109940:	f003 0308 	and.w	r3, r3, #8
 8109944:	2b00      	cmp	r3, #0
 8109946:	d01a      	beq.n	810997e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8109948:	687b      	ldr	r3, [r7, #4]
 810994a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810994e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109952:	d10a      	bne.n	810996a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	3324      	adds	r3, #36	; 0x24
 8109958:	2102      	movs	r1, #2
 810995a:	4618      	mov	r0, r3
 810995c:	f000 fcfa 	bl	810a354 <RCCEx_PLL3_Config>
 8109960:	4603      	mov	r3, r0
 8109962:	2b00      	cmp	r3, #0
 8109964:	d001      	beq.n	810996a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8109966:	2301      	movs	r3, #1
 8109968:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810996a:	4b2a      	ldr	r3, [pc, #168]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810996c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810996e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8109972:	687b      	ldr	r3, [r7, #4]
 8109974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109978:	4926      	ldr	r1, [pc, #152]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810997a:	4313      	orrs	r3, r2
 810997c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810997e:	687b      	ldr	r3, [r7, #4]
 8109980:	681b      	ldr	r3, [r3, #0]
 8109982:	f003 0310 	and.w	r3, r3, #16
 8109986:	2b00      	cmp	r3, #0
 8109988:	d01a      	beq.n	81099c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810998a:	687b      	ldr	r3, [r7, #4]
 810998c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109994:	d10a      	bne.n	81099ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	3324      	adds	r3, #36	; 0x24
 810999a:	2102      	movs	r1, #2
 810999c:	4618      	mov	r0, r3
 810999e:	f000 fcd9 	bl	810a354 <RCCEx_PLL3_Config>
 81099a2:	4603      	mov	r3, r0
 81099a4:	2b00      	cmp	r3, #0
 81099a6:	d001      	beq.n	81099ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81099a8:	2301      	movs	r3, #1
 81099aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81099ac:	4b19      	ldr	r3, [pc, #100]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81099ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81099b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81099b4:	687b      	ldr	r3, [r7, #4]
 81099b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81099ba:	4916      	ldr	r1, [pc, #88]	; (8109a14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81099bc:	4313      	orrs	r3, r2
 81099be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81099c0:	687b      	ldr	r3, [r7, #4]
 81099c2:	681b      	ldr	r3, [r3, #0]
 81099c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	d036      	beq.n	8109a3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81099d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81099d6:	d01f      	beq.n	8109a18 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81099d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81099dc:	d817      	bhi.n	8109a0e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81099de:	2b00      	cmp	r3, #0
 81099e0:	d003      	beq.n	81099ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81099e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81099e6:	d009      	beq.n	81099fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81099e8:	e011      	b.n	8109a0e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81099ea:	687b      	ldr	r3, [r7, #4]
 81099ec:	3304      	adds	r3, #4
 81099ee:	2100      	movs	r1, #0
 81099f0:	4618      	mov	r0, r3
 81099f2:	f000 fbfd 	bl	810a1f0 <RCCEx_PLL2_Config>
 81099f6:	4603      	mov	r3, r0
 81099f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81099fa:	e00e      	b.n	8109a1a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	3324      	adds	r3, #36	; 0x24
 8109a00:	2102      	movs	r1, #2
 8109a02:	4618      	mov	r0, r3
 8109a04:	f000 fca6 	bl	810a354 <RCCEx_PLL3_Config>
 8109a08:	4603      	mov	r3, r0
 8109a0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109a0c:	e005      	b.n	8109a1a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109a0e:	2301      	movs	r3, #1
 8109a10:	75fb      	strb	r3, [r7, #23]
      break;
 8109a12:	e002      	b.n	8109a1a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8109a14:	58024400 	.word	0x58024400
      break;
 8109a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109a1a:	7dfb      	ldrb	r3, [r7, #23]
 8109a1c:	2b00      	cmp	r3, #0
 8109a1e:	d10a      	bne.n	8109a36 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8109a20:	4b93      	ldr	r3, [pc, #588]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109a2e:	4990      	ldr	r1, [pc, #576]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a30:	4313      	orrs	r3, r2
 8109a32:	658b      	str	r3, [r1, #88]	; 0x58
 8109a34:	e001      	b.n	8109a3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109a36:	7dfb      	ldrb	r3, [r7, #23]
 8109a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8109a3a:	687b      	ldr	r3, [r7, #4]
 8109a3c:	681b      	ldr	r3, [r3, #0]
 8109a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109a42:	2b00      	cmp	r3, #0
 8109a44:	d033      	beq.n	8109aae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8109a46:	687b      	ldr	r3, [r7, #4]
 8109a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109a50:	d01c      	beq.n	8109a8c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8109a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109a56:	d816      	bhi.n	8109a86 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8109a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109a5c:	d003      	beq.n	8109a66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8109a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109a62:	d007      	beq.n	8109a74 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8109a64:	e00f      	b.n	8109a86 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109a66:	4b82      	ldr	r3, [pc, #520]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109a6a:	4a81      	ldr	r2, [pc, #516]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109a70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8109a72:	e00c      	b.n	8109a8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109a74:	687b      	ldr	r3, [r7, #4]
 8109a76:	3324      	adds	r3, #36	; 0x24
 8109a78:	2101      	movs	r1, #1
 8109a7a:	4618      	mov	r0, r3
 8109a7c:	f000 fc6a 	bl	810a354 <RCCEx_PLL3_Config>
 8109a80:	4603      	mov	r3, r0
 8109a82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8109a84:	e003      	b.n	8109a8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109a86:	2301      	movs	r3, #1
 8109a88:	75fb      	strb	r3, [r7, #23]
      break;
 8109a8a:	e000      	b.n	8109a8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8109a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109a8e:	7dfb      	ldrb	r3, [r7, #23]
 8109a90:	2b00      	cmp	r3, #0
 8109a92:	d10a      	bne.n	8109aaa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8109a94:	4b76      	ldr	r3, [pc, #472]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109a9c:	687b      	ldr	r3, [r7, #4]
 8109a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109aa2:	4973      	ldr	r1, [pc, #460]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109aa4:	4313      	orrs	r3, r2
 8109aa6:	654b      	str	r3, [r1, #84]	; 0x54
 8109aa8:	e001      	b.n	8109aae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109aaa:	7dfb      	ldrb	r3, [r7, #23]
 8109aac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8109aae:	687b      	ldr	r3, [r7, #4]
 8109ab0:	681b      	ldr	r3, [r3, #0]
 8109ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109ab6:	2b00      	cmp	r3, #0
 8109ab8:	d029      	beq.n	8109b0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8109aba:	687b      	ldr	r3, [r7, #4]
 8109abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109abe:	2b00      	cmp	r3, #0
 8109ac0:	d003      	beq.n	8109aca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8109ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109ac6:	d007      	beq.n	8109ad8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8109ac8:	e00f      	b.n	8109aea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109aca:	4b69      	ldr	r3, [pc, #420]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ace:	4a68      	ldr	r2, [pc, #416]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109ad6:	e00b      	b.n	8109af0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	3304      	adds	r3, #4
 8109adc:	2102      	movs	r1, #2
 8109ade:	4618      	mov	r0, r3
 8109ae0:	f000 fb86 	bl	810a1f0 <RCCEx_PLL2_Config>
 8109ae4:	4603      	mov	r3, r0
 8109ae6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109ae8:	e002      	b.n	8109af0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8109aea:	2301      	movs	r3, #1
 8109aec:	75fb      	strb	r3, [r7, #23]
      break;
 8109aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109af0:	7dfb      	ldrb	r3, [r7, #23]
 8109af2:	2b00      	cmp	r3, #0
 8109af4:	d109      	bne.n	8109b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8109af6:	4b5e      	ldr	r3, [pc, #376]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109afa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8109afe:	687b      	ldr	r3, [r7, #4]
 8109b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109b02:	495b      	ldr	r1, [pc, #364]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b04:	4313      	orrs	r3, r2
 8109b06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109b08:	e001      	b.n	8109b0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b0a:	7dfb      	ldrb	r3, [r7, #23]
 8109b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8109b0e:	687b      	ldr	r3, [r7, #4]
 8109b10:	681b      	ldr	r3, [r3, #0]
 8109b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109b16:	2b00      	cmp	r3, #0
 8109b18:	d00a      	beq.n	8109b30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8109b1a:	687b      	ldr	r3, [r7, #4]
 8109b1c:	3324      	adds	r3, #36	; 0x24
 8109b1e:	2102      	movs	r1, #2
 8109b20:	4618      	mov	r0, r3
 8109b22:	f000 fc17 	bl	810a354 <RCCEx_PLL3_Config>
 8109b26:	4603      	mov	r3, r0
 8109b28:	2b00      	cmp	r3, #0
 8109b2a:	d001      	beq.n	8109b30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8109b2c:	2301      	movs	r3, #1
 8109b2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	681b      	ldr	r3, [r3, #0]
 8109b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109b38:	2b00      	cmp	r3, #0
 8109b3a:	d030      	beq.n	8109b9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8109b3c:	687b      	ldr	r3, [r7, #4]
 8109b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109b44:	d017      	beq.n	8109b76 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8109b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109b4a:	d811      	bhi.n	8109b70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109b50:	d013      	beq.n	8109b7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8109b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109b56:	d80b      	bhi.n	8109b70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109b58:	2b00      	cmp	r3, #0
 8109b5a:	d010      	beq.n	8109b7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109b60:	d106      	bne.n	8109b70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109b62:	4b43      	ldr	r3, [pc, #268]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b66:	4a42      	ldr	r2, [pc, #264]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109b6e:	e007      	b.n	8109b80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109b70:	2301      	movs	r3, #1
 8109b72:	75fb      	strb	r3, [r7, #23]
      break;
 8109b74:	e004      	b.n	8109b80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109b76:	bf00      	nop
 8109b78:	e002      	b.n	8109b80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109b7a:	bf00      	nop
 8109b7c:	e000      	b.n	8109b80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109b80:	7dfb      	ldrb	r3, [r7, #23]
 8109b82:	2b00      	cmp	r3, #0
 8109b84:	d109      	bne.n	8109b9a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8109b86:	4b3a      	ldr	r3, [pc, #232]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109b8e:	687b      	ldr	r3, [r7, #4]
 8109b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109b92:	4937      	ldr	r1, [pc, #220]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109b94:	4313      	orrs	r3, r2
 8109b96:	654b      	str	r3, [r1, #84]	; 0x54
 8109b98:	e001      	b.n	8109b9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b9a:	7dfb      	ldrb	r3, [r7, #23]
 8109b9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	681b      	ldr	r3, [r3, #0]
 8109ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109ba6:	2b00      	cmp	r3, #0
 8109ba8:	d008      	beq.n	8109bbc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8109baa:	4b31      	ldr	r3, [pc, #196]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109bae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8109bb2:	687b      	ldr	r3, [r7, #4]
 8109bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109bb6:	492e      	ldr	r1, [pc, #184]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109bb8:	4313      	orrs	r3, r2
 8109bba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	681b      	ldr	r3, [r3, #0]
 8109bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109bc4:	2b00      	cmp	r3, #0
 8109bc6:	d009      	beq.n	8109bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8109bc8:	4b29      	ldr	r3, [pc, #164]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109bca:	691b      	ldr	r3, [r3, #16]
 8109bcc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8109bd6:	4926      	ldr	r1, [pc, #152]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109bd8:	4313      	orrs	r3, r2
 8109bda:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	681b      	ldr	r3, [r3, #0]
 8109be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109be4:	2b00      	cmp	r3, #0
 8109be6:	d008      	beq.n	8109bfa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8109be8:	4b21      	ldr	r3, [pc, #132]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109bec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109bf0:	687b      	ldr	r3, [r7, #4]
 8109bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109bf4:	491e      	ldr	r1, [pc, #120]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109bf6:	4313      	orrs	r3, r2
 8109bf8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8109bfa:	687b      	ldr	r3, [r7, #4]
 8109bfc:	681b      	ldr	r3, [r3, #0]
 8109bfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109c02:	2b00      	cmp	r3, #0
 8109c04:	d00d      	beq.n	8109c22 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8109c06:	4b1a      	ldr	r3, [pc, #104]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c08:	691b      	ldr	r3, [r3, #16]
 8109c0a:	4a19      	ldr	r2, [pc, #100]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8109c10:	6113      	str	r3, [r2, #16]
 8109c12:	4b17      	ldr	r3, [pc, #92]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c14:	691a      	ldr	r2, [r3, #16]
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8109c1c:	4914      	ldr	r1, [pc, #80]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c1e:	4313      	orrs	r3, r2
 8109c20:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	2b00      	cmp	r3, #0
 8109c28:	da08      	bge.n	8109c3c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8109c2a:	4b11      	ldr	r3, [pc, #68]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109c2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8109c32:	687b      	ldr	r3, [r7, #4]
 8109c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109c36:	490e      	ldr	r1, [pc, #56]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c38:	4313      	orrs	r3, r2
 8109c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8109c3c:	687b      	ldr	r3, [r7, #4]
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109c44:	2b00      	cmp	r3, #0
 8109c46:	d009      	beq.n	8109c5c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8109c48:	4b09      	ldr	r3, [pc, #36]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109c4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109c56:	4906      	ldr	r1, [pc, #24]	; (8109c70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109c58:	4313      	orrs	r3, r2
 8109c5a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8109c5c:	7dbb      	ldrb	r3, [r7, #22]
 8109c5e:	2b00      	cmp	r3, #0
 8109c60:	d101      	bne.n	8109c66 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8109c62:	2300      	movs	r3, #0
 8109c64:	e000      	b.n	8109c68 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8109c66:	2301      	movs	r3, #1
}
 8109c68:	4618      	mov	r0, r3
 8109c6a:	3718      	adds	r7, #24
 8109c6c:	46bd      	mov	sp, r7
 8109c6e:	bd80      	pop	{r7, pc}
 8109c70:	58024400 	.word	0x58024400

08109c74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109c74:	b580      	push	{r7, lr}
 8109c76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8109c78:	f7ff f85e 	bl	8108d38 <HAL_RCC_GetHCLKFreq>
 8109c7c:	4602      	mov	r2, r0
 8109c7e:	4b06      	ldr	r3, [pc, #24]	; (8109c98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109c80:	6a1b      	ldr	r3, [r3, #32]
 8109c82:	091b      	lsrs	r3, r3, #4
 8109c84:	f003 0307 	and.w	r3, r3, #7
 8109c88:	4904      	ldr	r1, [pc, #16]	; (8109c9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8109c8a:	5ccb      	ldrb	r3, [r1, r3]
 8109c8c:	f003 031f 	and.w	r3, r3, #31
 8109c90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109c94:	4618      	mov	r0, r3
 8109c96:	bd80      	pop	{r7, pc}
 8109c98:	58024400 	.word	0x58024400
 8109c9c:	0810dd0c 	.word	0x0810dd0c

08109ca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8109ca0:	b480      	push	{r7}
 8109ca2:	b089      	sub	sp, #36	; 0x24
 8109ca4:	af00      	add	r7, sp, #0
 8109ca6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109ca8:	4ba1      	ldr	r3, [pc, #644]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109cac:	f003 0303 	and.w	r3, r3, #3
 8109cb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8109cb2:	4b9f      	ldr	r3, [pc, #636]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109cb6:	0b1b      	lsrs	r3, r3, #12
 8109cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109cbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109cbe:	4b9c      	ldr	r3, [pc, #624]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cc2:	091b      	lsrs	r3, r3, #4
 8109cc4:	f003 0301 	and.w	r3, r3, #1
 8109cc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8109cca:	4b99      	ldr	r3, [pc, #612]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109cce:	08db      	lsrs	r3, r3, #3
 8109cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109cd4:	693a      	ldr	r2, [r7, #16]
 8109cd6:	fb02 f303 	mul.w	r3, r2, r3
 8109cda:	ee07 3a90 	vmov	s15, r3
 8109cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ce2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109ce6:	697b      	ldr	r3, [r7, #20]
 8109ce8:	2b00      	cmp	r3, #0
 8109cea:	f000 8111 	beq.w	8109f10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8109cee:	69bb      	ldr	r3, [r7, #24]
 8109cf0:	2b02      	cmp	r3, #2
 8109cf2:	f000 8083 	beq.w	8109dfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109cf6:	69bb      	ldr	r3, [r7, #24]
 8109cf8:	2b02      	cmp	r3, #2
 8109cfa:	f200 80a1 	bhi.w	8109e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8109cfe:	69bb      	ldr	r3, [r7, #24]
 8109d00:	2b00      	cmp	r3, #0
 8109d02:	d003      	beq.n	8109d0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109d04:	69bb      	ldr	r3, [r7, #24]
 8109d06:	2b01      	cmp	r3, #1
 8109d08:	d056      	beq.n	8109db8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8109d0a:	e099      	b.n	8109e40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109d0c:	4b88      	ldr	r3, [pc, #544]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d0e:	681b      	ldr	r3, [r3, #0]
 8109d10:	f003 0320 	and.w	r3, r3, #32
 8109d14:	2b00      	cmp	r3, #0
 8109d16:	d02d      	beq.n	8109d74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109d18:	4b85      	ldr	r3, [pc, #532]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d1a:	681b      	ldr	r3, [r3, #0]
 8109d1c:	08db      	lsrs	r3, r3, #3
 8109d1e:	f003 0303 	and.w	r3, r3, #3
 8109d22:	4a84      	ldr	r2, [pc, #528]	; (8109f34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109d24:	fa22 f303 	lsr.w	r3, r2, r3
 8109d28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109d2a:	68bb      	ldr	r3, [r7, #8]
 8109d2c:	ee07 3a90 	vmov	s15, r3
 8109d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109d34:	697b      	ldr	r3, [r7, #20]
 8109d36:	ee07 3a90 	vmov	s15, r3
 8109d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109d42:	4b7b      	ldr	r3, [pc, #492]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109d4a:	ee07 3a90 	vmov	s15, r3
 8109d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8109d56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109d72:	e087      	b.n	8109e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109d74:	697b      	ldr	r3, [r7, #20]
 8109d76:	ee07 3a90 	vmov	s15, r3
 8109d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109d7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109f3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109d86:	4b6a      	ldr	r3, [pc, #424]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109d8e:	ee07 3a90 	vmov	s15, r3
 8109d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8109d9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109db6:	e065      	b.n	8109e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109db8:	697b      	ldr	r3, [r7, #20]
 8109dba:	ee07 3a90 	vmov	s15, r3
 8109dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109dc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109dca:	4b59      	ldr	r3, [pc, #356]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109dd2:	ee07 3a90 	vmov	s15, r3
 8109dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8109dde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109dfa:	e043      	b.n	8109e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109dfc:	697b      	ldr	r3, [r7, #20]
 8109dfe:	ee07 3a90 	vmov	s15, r3
 8109e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8109e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109e0e:	4b48      	ldr	r3, [pc, #288]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109e16:	ee07 3a90 	vmov	s15, r3
 8109e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109e22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109e3e:	e021      	b.n	8109e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109e40:	697b      	ldr	r3, [r7, #20]
 8109e42:	ee07 3a90 	vmov	s15, r3
 8109e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109e52:	4b37      	ldr	r3, [pc, #220]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109e5a:	ee07 3a90 	vmov	s15, r3
 8109e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8109e66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109f38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109e82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8109e84:	4b2a      	ldr	r3, [pc, #168]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109e88:	0a5b      	lsrs	r3, r3, #9
 8109e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109e8e:	ee07 3a90 	vmov	s15, r3
 8109e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8109ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109eaa:	ee17 2a90 	vmov	r2, s15
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8109eb2:	4b1f      	ldr	r3, [pc, #124]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109eb6:	0c1b      	lsrs	r3, r3, #16
 8109eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109ebc:	ee07 3a90 	vmov	s15, r3
 8109ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109ecc:	edd7 6a07 	vldr	s13, [r7, #28]
 8109ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109ed8:	ee17 2a90 	vmov	r2, s15
 8109edc:	687b      	ldr	r3, [r7, #4]
 8109ede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8109ee0:	4b13      	ldr	r3, [pc, #76]	; (8109f30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109ee4:	0e1b      	lsrs	r3, r3, #24
 8109ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109eea:	ee07 3a90 	vmov	s15, r3
 8109eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8109efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109f06:	ee17 2a90 	vmov	r2, s15
 8109f0a:	687b      	ldr	r3, [r7, #4]
 8109f0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8109f0e:	e008      	b.n	8109f22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8109f10:	687b      	ldr	r3, [r7, #4]
 8109f12:	2200      	movs	r2, #0
 8109f14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	2200      	movs	r2, #0
 8109f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8109f1c:	687b      	ldr	r3, [r7, #4]
 8109f1e:	2200      	movs	r2, #0
 8109f20:	609a      	str	r2, [r3, #8]
}
 8109f22:	bf00      	nop
 8109f24:	3724      	adds	r7, #36	; 0x24
 8109f26:	46bd      	mov	sp, r7
 8109f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f2c:	4770      	bx	lr
 8109f2e:	bf00      	nop
 8109f30:	58024400 	.word	0x58024400
 8109f34:	03d09000 	.word	0x03d09000
 8109f38:	46000000 	.word	0x46000000
 8109f3c:	4c742400 	.word	0x4c742400
 8109f40:	4a742400 	.word	0x4a742400
 8109f44:	4b742400 	.word	0x4b742400

08109f48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8109f48:	b480      	push	{r7}
 8109f4a:	b089      	sub	sp, #36	; 0x24
 8109f4c:	af00      	add	r7, sp, #0
 8109f4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109f50:	4ba1      	ldr	r3, [pc, #644]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f54:	f003 0303 	and.w	r3, r3, #3
 8109f58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8109f5a:	4b9f      	ldr	r3, [pc, #636]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f5e:	0d1b      	lsrs	r3, r3, #20
 8109f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109f64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8109f66:	4b9c      	ldr	r3, [pc, #624]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f6a:	0a1b      	lsrs	r3, r3, #8
 8109f6c:	f003 0301 	and.w	r3, r3, #1
 8109f70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8109f72:	4b99      	ldr	r3, [pc, #612]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109f76:	08db      	lsrs	r3, r3, #3
 8109f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109f7c:	693a      	ldr	r2, [r7, #16]
 8109f7e:	fb02 f303 	mul.w	r3, r2, r3
 8109f82:	ee07 3a90 	vmov	s15, r3
 8109f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109f8e:	697b      	ldr	r3, [r7, #20]
 8109f90:	2b00      	cmp	r3, #0
 8109f92:	f000 8111 	beq.w	810a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8109f96:	69bb      	ldr	r3, [r7, #24]
 8109f98:	2b02      	cmp	r3, #2
 8109f9a:	f000 8083 	beq.w	810a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109f9e:	69bb      	ldr	r3, [r7, #24]
 8109fa0:	2b02      	cmp	r3, #2
 8109fa2:	f200 80a1 	bhi.w	810a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8109fa6:	69bb      	ldr	r3, [r7, #24]
 8109fa8:	2b00      	cmp	r3, #0
 8109faa:	d003      	beq.n	8109fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109fac:	69bb      	ldr	r3, [r7, #24]
 8109fae:	2b01      	cmp	r3, #1
 8109fb0:	d056      	beq.n	810a060 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109fb2:	e099      	b.n	810a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109fb4:	4b88      	ldr	r3, [pc, #544]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109fb6:	681b      	ldr	r3, [r3, #0]
 8109fb8:	f003 0320 	and.w	r3, r3, #32
 8109fbc:	2b00      	cmp	r3, #0
 8109fbe:	d02d      	beq.n	810a01c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109fc0:	4b85      	ldr	r3, [pc, #532]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109fc2:	681b      	ldr	r3, [r3, #0]
 8109fc4:	08db      	lsrs	r3, r3, #3
 8109fc6:	f003 0303 	and.w	r3, r3, #3
 8109fca:	4a84      	ldr	r2, [pc, #528]	; (810a1dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8109fd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109fd2:	68bb      	ldr	r3, [r7, #8]
 8109fd4:	ee07 3a90 	vmov	s15, r3
 8109fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fdc:	697b      	ldr	r3, [r7, #20]
 8109fde:	ee07 3a90 	vmov	s15, r3
 8109fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109fea:	4b7b      	ldr	r3, [pc, #492]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109ff2:	ee07 3a90 	vmov	s15, r3
 8109ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8109ffe:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a012:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a016:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810a01a:	e087      	b.n	810a12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a01c:	697b      	ldr	r3, [r7, #20]
 810a01e:	ee07 3a90 	vmov	s15, r3
 810a022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a026:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810a02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a02e:	4b6a      	ldr	r3, [pc, #424]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a036:	ee07 3a90 	vmov	s15, r3
 810a03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a03e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a042:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a056:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a05e:	e065      	b.n	810a12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a060:	697b      	ldr	r3, [r7, #20]
 810a062:	ee07 3a90 	vmov	s15, r3
 810a066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a06a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a072:	4b59      	ldr	r3, [pc, #356]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a07a:	ee07 3a90 	vmov	s15, r3
 810a07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a082:	ed97 6a03 	vldr	s12, [r7, #12]
 810a086:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a09e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a0a2:	e043      	b.n	810a12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a0a4:	697b      	ldr	r3, [r7, #20]
 810a0a6:	ee07 3a90 	vmov	s15, r3
 810a0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810a0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0b6:	4b48      	ldr	r3, [pc, #288]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a0be:	ee07 3a90 	vmov	s15, r3
 810a0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a0ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a0e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a0e6:	e021      	b.n	810a12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a0e8:	697b      	ldr	r3, [r7, #20]
 810a0ea:	ee07 3a90 	vmov	s15, r3
 810a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a0f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a0fa:	4b37      	ldr	r3, [pc, #220]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a102:	ee07 3a90 	vmov	s15, r3
 810a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a10a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a10e:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a12a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810a12c:	4b2a      	ldr	r3, [pc, #168]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a130:	0a5b      	lsrs	r3, r3, #9
 810a132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a136:	ee07 3a90 	vmov	s15, r3
 810a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a142:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a146:	edd7 6a07 	vldr	s13, [r7, #28]
 810a14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a152:	ee17 2a90 	vmov	r2, s15
 810a156:	687b      	ldr	r3, [r7, #4]
 810a158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810a15a:	4b1f      	ldr	r3, [pc, #124]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a15e:	0c1b      	lsrs	r3, r3, #16
 810a160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a164:	ee07 3a90 	vmov	s15, r3
 810a168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a16c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a170:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a174:	edd7 6a07 	vldr	s13, [r7, #28]
 810a178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a180:	ee17 2a90 	vmov	r2, s15
 810a184:	687b      	ldr	r3, [r7, #4]
 810a186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810a188:	4b13      	ldr	r3, [pc, #76]	; (810a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a18c:	0e1b      	lsrs	r3, r3, #24
 810a18e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a192:	ee07 3a90 	vmov	s15, r3
 810a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a19a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a19e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a1a2:	edd7 6a07 	vldr	s13, [r7, #28]
 810a1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a1ae:	ee17 2a90 	vmov	r2, s15
 810a1b2:	687b      	ldr	r3, [r7, #4]
 810a1b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a1b6:	e008      	b.n	810a1ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a1b8:	687b      	ldr	r3, [r7, #4]
 810a1ba:	2200      	movs	r2, #0
 810a1bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a1be:	687b      	ldr	r3, [r7, #4]
 810a1c0:	2200      	movs	r2, #0
 810a1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a1c4:	687b      	ldr	r3, [r7, #4]
 810a1c6:	2200      	movs	r2, #0
 810a1c8:	609a      	str	r2, [r3, #8]
}
 810a1ca:	bf00      	nop
 810a1cc:	3724      	adds	r7, #36	; 0x24
 810a1ce:	46bd      	mov	sp, r7
 810a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1d4:	4770      	bx	lr
 810a1d6:	bf00      	nop
 810a1d8:	58024400 	.word	0x58024400
 810a1dc:	03d09000 	.word	0x03d09000
 810a1e0:	46000000 	.word	0x46000000
 810a1e4:	4c742400 	.word	0x4c742400
 810a1e8:	4a742400 	.word	0x4a742400
 810a1ec:	4b742400 	.word	0x4b742400

0810a1f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a1f0:	b580      	push	{r7, lr}
 810a1f2:	b084      	sub	sp, #16
 810a1f4:	af00      	add	r7, sp, #0
 810a1f6:	6078      	str	r0, [r7, #4]
 810a1f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a1fa:	2300      	movs	r3, #0
 810a1fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a1fe:	4b54      	ldr	r3, [pc, #336]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a202:	f003 0303 	and.w	r3, r3, #3
 810a206:	2b03      	cmp	r3, #3
 810a208:	d101      	bne.n	810a20e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a20a:	2301      	movs	r3, #1
 810a20c:	e09b      	b.n	810a346 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a20e:	4b50      	ldr	r3, [pc, #320]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a210:	681b      	ldr	r3, [r3, #0]
 810a212:	4a4f      	ldr	r2, [pc, #316]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810a218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a21a:	f7f9 fb15 	bl	8103848 <HAL_GetTick>
 810a21e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a220:	e008      	b.n	810a234 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a222:	f7f9 fb11 	bl	8103848 <HAL_GetTick>
 810a226:	4602      	mov	r2, r0
 810a228:	68bb      	ldr	r3, [r7, #8]
 810a22a:	1ad3      	subs	r3, r2, r3
 810a22c:	2b02      	cmp	r3, #2
 810a22e:	d901      	bls.n	810a234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a230:	2303      	movs	r3, #3
 810a232:	e088      	b.n	810a346 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a234:	4b46      	ldr	r3, [pc, #280]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a23c:	2b00      	cmp	r3, #0
 810a23e:	d1f0      	bne.n	810a222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a240:	4b43      	ldr	r3, [pc, #268]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a244:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810a248:	687b      	ldr	r3, [r7, #4]
 810a24a:	681b      	ldr	r3, [r3, #0]
 810a24c:	031b      	lsls	r3, r3, #12
 810a24e:	4940      	ldr	r1, [pc, #256]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a250:	4313      	orrs	r3, r2
 810a252:	628b      	str	r3, [r1, #40]	; 0x28
 810a254:	687b      	ldr	r3, [r7, #4]
 810a256:	685b      	ldr	r3, [r3, #4]
 810a258:	3b01      	subs	r3, #1
 810a25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a25e:	687b      	ldr	r3, [r7, #4]
 810a260:	689b      	ldr	r3, [r3, #8]
 810a262:	3b01      	subs	r3, #1
 810a264:	025b      	lsls	r3, r3, #9
 810a266:	b29b      	uxth	r3, r3
 810a268:	431a      	orrs	r2, r3
 810a26a:	687b      	ldr	r3, [r7, #4]
 810a26c:	68db      	ldr	r3, [r3, #12]
 810a26e:	3b01      	subs	r3, #1
 810a270:	041b      	lsls	r3, r3, #16
 810a272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a276:	431a      	orrs	r2, r3
 810a278:	687b      	ldr	r3, [r7, #4]
 810a27a:	691b      	ldr	r3, [r3, #16]
 810a27c:	3b01      	subs	r3, #1
 810a27e:	061b      	lsls	r3, r3, #24
 810a280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a284:	4932      	ldr	r1, [pc, #200]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a286:	4313      	orrs	r3, r2
 810a288:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a28a:	4b31      	ldr	r3, [pc, #196]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a28e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810a292:	687b      	ldr	r3, [r7, #4]
 810a294:	695b      	ldr	r3, [r3, #20]
 810a296:	492e      	ldr	r1, [pc, #184]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a298:	4313      	orrs	r3, r2
 810a29a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a29c:	4b2c      	ldr	r3, [pc, #176]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2a0:	f023 0220 	bic.w	r2, r3, #32
 810a2a4:	687b      	ldr	r3, [r7, #4]
 810a2a6:	699b      	ldr	r3, [r3, #24]
 810a2a8:	4929      	ldr	r1, [pc, #164]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2aa:	4313      	orrs	r3, r2
 810a2ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a2ae:	4b28      	ldr	r3, [pc, #160]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2b2:	4a27      	ldr	r2, [pc, #156]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2b4:	f023 0310 	bic.w	r3, r3, #16
 810a2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a2ba:	4b25      	ldr	r3, [pc, #148]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a2be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a2c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a2c6:	687a      	ldr	r2, [r7, #4]
 810a2c8:	69d2      	ldr	r2, [r2, #28]
 810a2ca:	00d2      	lsls	r2, r2, #3
 810a2cc:	4920      	ldr	r1, [pc, #128]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2ce:	4313      	orrs	r3, r2
 810a2d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a2d2:	4b1f      	ldr	r3, [pc, #124]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2d6:	4a1e      	ldr	r2, [pc, #120]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2d8:	f043 0310 	orr.w	r3, r3, #16
 810a2dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a2de:	683b      	ldr	r3, [r7, #0]
 810a2e0:	2b00      	cmp	r3, #0
 810a2e2:	d106      	bne.n	810a2f2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a2e4:	4b1a      	ldr	r3, [pc, #104]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2e8:	4a19      	ldr	r2, [pc, #100]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a2f0:	e00f      	b.n	810a312 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a2f2:	683b      	ldr	r3, [r7, #0]
 810a2f4:	2b01      	cmp	r3, #1
 810a2f6:	d106      	bne.n	810a306 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a2f8:	4b15      	ldr	r3, [pc, #84]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2fc:	4a14      	ldr	r2, [pc, #80]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a2fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a302:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a304:	e005      	b.n	810a312 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a306:	4b12      	ldr	r3, [pc, #72]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a30a:	4a11      	ldr	r2, [pc, #68]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a30c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810a310:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a312:	4b0f      	ldr	r3, [pc, #60]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a314:	681b      	ldr	r3, [r3, #0]
 810a316:	4a0e      	ldr	r2, [pc, #56]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a318:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810a31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a31e:	f7f9 fa93 	bl	8103848 <HAL_GetTick>
 810a322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a324:	e008      	b.n	810a338 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a326:	f7f9 fa8f 	bl	8103848 <HAL_GetTick>
 810a32a:	4602      	mov	r2, r0
 810a32c:	68bb      	ldr	r3, [r7, #8]
 810a32e:	1ad3      	subs	r3, r2, r3
 810a330:	2b02      	cmp	r3, #2
 810a332:	d901      	bls.n	810a338 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a334:	2303      	movs	r3, #3
 810a336:	e006      	b.n	810a346 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a338:	4b05      	ldr	r3, [pc, #20]	; (810a350 <RCCEx_PLL2_Config+0x160>)
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a340:	2b00      	cmp	r3, #0
 810a342:	d0f0      	beq.n	810a326 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a344:	7bfb      	ldrb	r3, [r7, #15]
}
 810a346:	4618      	mov	r0, r3
 810a348:	3710      	adds	r7, #16
 810a34a:	46bd      	mov	sp, r7
 810a34c:	bd80      	pop	{r7, pc}
 810a34e:	bf00      	nop
 810a350:	58024400 	.word	0x58024400

0810a354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a354:	b580      	push	{r7, lr}
 810a356:	b084      	sub	sp, #16
 810a358:	af00      	add	r7, sp, #0
 810a35a:	6078      	str	r0, [r7, #4]
 810a35c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a35e:	2300      	movs	r3, #0
 810a360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a362:	4b54      	ldr	r3, [pc, #336]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a366:	f003 0303 	and.w	r3, r3, #3
 810a36a:	2b03      	cmp	r3, #3
 810a36c:	d101      	bne.n	810a372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a36e:	2301      	movs	r3, #1
 810a370:	e09b      	b.n	810a4aa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a372:	4b50      	ldr	r3, [pc, #320]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a374:	681b      	ldr	r3, [r3, #0]
 810a376:	4a4f      	ldr	r2, [pc, #316]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a37c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a37e:	f7f9 fa63 	bl	8103848 <HAL_GetTick>
 810a382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a384:	e008      	b.n	810a398 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a386:	f7f9 fa5f 	bl	8103848 <HAL_GetTick>
 810a38a:	4602      	mov	r2, r0
 810a38c:	68bb      	ldr	r3, [r7, #8]
 810a38e:	1ad3      	subs	r3, r2, r3
 810a390:	2b02      	cmp	r3, #2
 810a392:	d901      	bls.n	810a398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a394:	2303      	movs	r3, #3
 810a396:	e088      	b.n	810a4aa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a398:	4b46      	ldr	r3, [pc, #280]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a39a:	681b      	ldr	r3, [r3, #0]
 810a39c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a3a0:	2b00      	cmp	r3, #0
 810a3a2:	d1f0      	bne.n	810a386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a3a4:	4b43      	ldr	r3, [pc, #268]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a3a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	681b      	ldr	r3, [r3, #0]
 810a3b0:	051b      	lsls	r3, r3, #20
 810a3b2:	4940      	ldr	r1, [pc, #256]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a3b4:	4313      	orrs	r3, r2
 810a3b6:	628b      	str	r3, [r1, #40]	; 0x28
 810a3b8:	687b      	ldr	r3, [r7, #4]
 810a3ba:	685b      	ldr	r3, [r3, #4]
 810a3bc:	3b01      	subs	r3, #1
 810a3be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a3c2:	687b      	ldr	r3, [r7, #4]
 810a3c4:	689b      	ldr	r3, [r3, #8]
 810a3c6:	3b01      	subs	r3, #1
 810a3c8:	025b      	lsls	r3, r3, #9
 810a3ca:	b29b      	uxth	r3, r3
 810a3cc:	431a      	orrs	r2, r3
 810a3ce:	687b      	ldr	r3, [r7, #4]
 810a3d0:	68db      	ldr	r3, [r3, #12]
 810a3d2:	3b01      	subs	r3, #1
 810a3d4:	041b      	lsls	r3, r3, #16
 810a3d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a3da:	431a      	orrs	r2, r3
 810a3dc:	687b      	ldr	r3, [r7, #4]
 810a3de:	691b      	ldr	r3, [r3, #16]
 810a3e0:	3b01      	subs	r3, #1
 810a3e2:	061b      	lsls	r3, r3, #24
 810a3e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a3e8:	4932      	ldr	r1, [pc, #200]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a3ea:	4313      	orrs	r3, r2
 810a3ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a3ee:	4b31      	ldr	r3, [pc, #196]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a3f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810a3f6:	687b      	ldr	r3, [r7, #4]
 810a3f8:	695b      	ldr	r3, [r3, #20]
 810a3fa:	492e      	ldr	r1, [pc, #184]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a3fc:	4313      	orrs	r3, r2
 810a3fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a400:	4b2c      	ldr	r3, [pc, #176]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a404:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810a408:	687b      	ldr	r3, [r7, #4]
 810a40a:	699b      	ldr	r3, [r3, #24]
 810a40c:	4929      	ldr	r1, [pc, #164]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a40e:	4313      	orrs	r3, r2
 810a410:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a412:	4b28      	ldr	r3, [pc, #160]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a416:	4a27      	ldr	r2, [pc, #156]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a41c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a41e:	4b25      	ldr	r3, [pc, #148]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a426:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a42a:	687a      	ldr	r2, [r7, #4]
 810a42c:	69d2      	ldr	r2, [r2, #28]
 810a42e:	00d2      	lsls	r2, r2, #3
 810a430:	4920      	ldr	r1, [pc, #128]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a432:	4313      	orrs	r3, r2
 810a434:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a436:	4b1f      	ldr	r3, [pc, #124]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a43a:	4a1e      	ldr	r2, [pc, #120]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a442:	683b      	ldr	r3, [r7, #0]
 810a444:	2b00      	cmp	r3, #0
 810a446:	d106      	bne.n	810a456 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a448:	4b1a      	ldr	r3, [pc, #104]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a44c:	4a19      	ldr	r2, [pc, #100]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a44e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810a452:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a454:	e00f      	b.n	810a476 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a456:	683b      	ldr	r3, [r7, #0]
 810a458:	2b01      	cmp	r3, #1
 810a45a:	d106      	bne.n	810a46a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a45c:	4b15      	ldr	r3, [pc, #84]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a460:	4a14      	ldr	r2, [pc, #80]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a462:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810a466:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a468:	e005      	b.n	810a476 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a46a:	4b12      	ldr	r3, [pc, #72]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a46e:	4a11      	ldr	r2, [pc, #68]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810a474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a476:	4b0f      	ldr	r3, [pc, #60]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a478:	681b      	ldr	r3, [r3, #0]
 810a47a:	4a0e      	ldr	r2, [pc, #56]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810a480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a482:	f7f9 f9e1 	bl	8103848 <HAL_GetTick>
 810a486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a488:	e008      	b.n	810a49c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a48a:	f7f9 f9dd 	bl	8103848 <HAL_GetTick>
 810a48e:	4602      	mov	r2, r0
 810a490:	68bb      	ldr	r3, [r7, #8]
 810a492:	1ad3      	subs	r3, r2, r3
 810a494:	2b02      	cmp	r3, #2
 810a496:	d901      	bls.n	810a49c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a498:	2303      	movs	r3, #3
 810a49a:	e006      	b.n	810a4aa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a49c:	4b05      	ldr	r3, [pc, #20]	; (810a4b4 <RCCEx_PLL3_Config+0x160>)
 810a49e:	681b      	ldr	r3, [r3, #0]
 810a4a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a4a4:	2b00      	cmp	r3, #0
 810a4a6:	d0f0      	beq.n	810a48a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 810a4aa:	4618      	mov	r0, r3
 810a4ac:	3710      	adds	r7, #16
 810a4ae:	46bd      	mov	sp, r7
 810a4b0:	bd80      	pop	{r7, pc}
 810a4b2:	bf00      	nop
 810a4b4:	58024400 	.word	0x58024400

0810a4b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a4b8:	b580      	push	{r7, lr}
 810a4ba:	b084      	sub	sp, #16
 810a4bc:	af00      	add	r7, sp, #0
 810a4be:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810a4c0:	2300      	movs	r3, #0
 810a4c2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a4c4:	687b      	ldr	r3, [r7, #4]
 810a4c6:	2b00      	cmp	r3, #0
 810a4c8:	d101      	bne.n	810a4ce <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810a4ca:	2301      	movs	r3, #1
 810a4cc:	e0eb      	b.n	810a6a6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	2200      	movs	r2, #0
 810a4d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a4d4:	687b      	ldr	r3, [r7, #4]
 810a4d6:	681b      	ldr	r3, [r3, #0]
 810a4d8:	4a75      	ldr	r2, [pc, #468]	; (810a6b0 <HAL_SPI_Init+0x1f8>)
 810a4da:	4293      	cmp	r3, r2
 810a4dc:	d00f      	beq.n	810a4fe <HAL_SPI_Init+0x46>
 810a4de:	687b      	ldr	r3, [r7, #4]
 810a4e0:	681b      	ldr	r3, [r3, #0]
 810a4e2:	4a74      	ldr	r2, [pc, #464]	; (810a6b4 <HAL_SPI_Init+0x1fc>)
 810a4e4:	4293      	cmp	r3, r2
 810a4e6:	d00a      	beq.n	810a4fe <HAL_SPI_Init+0x46>
 810a4e8:	687b      	ldr	r3, [r7, #4]
 810a4ea:	681b      	ldr	r3, [r3, #0]
 810a4ec:	4a72      	ldr	r2, [pc, #456]	; (810a6b8 <HAL_SPI_Init+0x200>)
 810a4ee:	4293      	cmp	r3, r2
 810a4f0:	d005      	beq.n	810a4fe <HAL_SPI_Init+0x46>
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	68db      	ldr	r3, [r3, #12]
 810a4f6:	2b0f      	cmp	r3, #15
 810a4f8:	d901      	bls.n	810a4fe <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810a4fa:	2301      	movs	r3, #1
 810a4fc:	e0d3      	b.n	810a6a6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a4fe:	6878      	ldr	r0, [r7, #4]
 810a500:	f000 fdf9 	bl	810b0f6 <SPI_GetPacketSize>
 810a504:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a506:	687b      	ldr	r3, [r7, #4]
 810a508:	681b      	ldr	r3, [r3, #0]
 810a50a:	4a69      	ldr	r2, [pc, #420]	; (810a6b0 <HAL_SPI_Init+0x1f8>)
 810a50c:	4293      	cmp	r3, r2
 810a50e:	d00c      	beq.n	810a52a <HAL_SPI_Init+0x72>
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	681b      	ldr	r3, [r3, #0]
 810a514:	4a67      	ldr	r2, [pc, #412]	; (810a6b4 <HAL_SPI_Init+0x1fc>)
 810a516:	4293      	cmp	r3, r2
 810a518:	d007      	beq.n	810a52a <HAL_SPI_Init+0x72>
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	681b      	ldr	r3, [r3, #0]
 810a51e:	4a66      	ldr	r2, [pc, #408]	; (810a6b8 <HAL_SPI_Init+0x200>)
 810a520:	4293      	cmp	r3, r2
 810a522:	d002      	beq.n	810a52a <HAL_SPI_Init+0x72>
 810a524:	68bb      	ldr	r3, [r7, #8]
 810a526:	2b08      	cmp	r3, #8
 810a528:	d811      	bhi.n	810a54e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a52a:	687b      	ldr	r3, [r7, #4]
 810a52c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a52e:	4a60      	ldr	r2, [pc, #384]	; (810a6b0 <HAL_SPI_Init+0x1f8>)
 810a530:	4293      	cmp	r3, r2
 810a532:	d009      	beq.n	810a548 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a534:	687b      	ldr	r3, [r7, #4]
 810a536:	681b      	ldr	r3, [r3, #0]
 810a538:	4a5e      	ldr	r2, [pc, #376]	; (810a6b4 <HAL_SPI_Init+0x1fc>)
 810a53a:	4293      	cmp	r3, r2
 810a53c:	d004      	beq.n	810a548 <HAL_SPI_Init+0x90>
 810a53e:	687b      	ldr	r3, [r7, #4]
 810a540:	681b      	ldr	r3, [r3, #0]
 810a542:	4a5d      	ldr	r2, [pc, #372]	; (810a6b8 <HAL_SPI_Init+0x200>)
 810a544:	4293      	cmp	r3, r2
 810a546:	d104      	bne.n	810a552 <HAL_SPI_Init+0x9a>
 810a548:	68bb      	ldr	r3, [r7, #8]
 810a54a:	2b10      	cmp	r3, #16
 810a54c:	d901      	bls.n	810a552 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810a54e:	2301      	movs	r3, #1
 810a550:	e0a9      	b.n	810a6a6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a558:	b2db      	uxtb	r3, r3
 810a55a:	2b00      	cmp	r3, #0
 810a55c:	d106      	bne.n	810a56c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a55e:	687b      	ldr	r3, [r7, #4]
 810a560:	2200      	movs	r2, #0
 810a562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a566:	6878      	ldr	r0, [r7, #4]
 810a568:	f7f8 fc24 	bl	8102db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	2202      	movs	r2, #2
 810a570:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a574:	687b      	ldr	r3, [r7, #4]
 810a576:	681b      	ldr	r3, [r3, #0]
 810a578:	681a      	ldr	r2, [r3, #0]
 810a57a:	687b      	ldr	r3, [r7, #4]
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	f022 0201 	bic.w	r2, r2, #1
 810a582:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	699b      	ldr	r3, [r3, #24]
 810a588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a58c:	d119      	bne.n	810a5c2 <HAL_SPI_Init+0x10a>
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	685b      	ldr	r3, [r3, #4]
 810a592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a596:	d103      	bne.n	810a5a0 <HAL_SPI_Init+0xe8>
 810a598:	687b      	ldr	r3, [r7, #4]
 810a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a59c:	2b00      	cmp	r3, #0
 810a59e:	d008      	beq.n	810a5b2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a5a0:	687b      	ldr	r3, [r7, #4]
 810a5a2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a5a4:	2b00      	cmp	r3, #0
 810a5a6:	d10c      	bne.n	810a5c2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a5ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a5b0:	d107      	bne.n	810a5c2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810a5b2:	687b      	ldr	r3, [r7, #4]
 810a5b4:	681b      	ldr	r3, [r3, #0]
 810a5b6:	681a      	ldr	r2, [r3, #0]
 810a5b8:	687b      	ldr	r3, [r7, #4]
 810a5ba:	681b      	ldr	r3, [r3, #0]
 810a5bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810a5c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810a5c2:	687b      	ldr	r3, [r7, #4]
 810a5c4:	69da      	ldr	r2, [r3, #28]
 810a5c6:	687b      	ldr	r3, [r7, #4]
 810a5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a5ca:	431a      	orrs	r2, r3
 810a5cc:	68fb      	ldr	r3, [r7, #12]
 810a5ce:	431a      	orrs	r2, r3
 810a5d0:	687b      	ldr	r3, [r7, #4]
 810a5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a5d4:	ea42 0103 	orr.w	r1, r2, r3
 810a5d8:	687b      	ldr	r3, [r7, #4]
 810a5da:	68da      	ldr	r2, [r3, #12]
 810a5dc:	687b      	ldr	r3, [r7, #4]
 810a5de:	681b      	ldr	r3, [r3, #0]
 810a5e0:	430a      	orrs	r2, r1
 810a5e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a5e8:	687b      	ldr	r3, [r7, #4]
 810a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5ec:	431a      	orrs	r2, r3
 810a5ee:	687b      	ldr	r3, [r7, #4]
 810a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a5f2:	431a      	orrs	r2, r3
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	699b      	ldr	r3, [r3, #24]
 810a5f8:	431a      	orrs	r2, r3
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	691b      	ldr	r3, [r3, #16]
 810a5fe:	431a      	orrs	r2, r3
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	695b      	ldr	r3, [r3, #20]
 810a604:	431a      	orrs	r2, r3
 810a606:	687b      	ldr	r3, [r7, #4]
 810a608:	6a1b      	ldr	r3, [r3, #32]
 810a60a:	431a      	orrs	r2, r3
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	685b      	ldr	r3, [r3, #4]
 810a610:	431a      	orrs	r2, r3
 810a612:	687b      	ldr	r3, [r7, #4]
 810a614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a616:	431a      	orrs	r2, r3
 810a618:	687b      	ldr	r3, [r7, #4]
 810a61a:	689b      	ldr	r3, [r3, #8]
 810a61c:	431a      	orrs	r2, r3
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a622:	ea42 0103 	orr.w	r1, r2, r3
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	430a      	orrs	r2, r1
 810a630:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810a632:	687b      	ldr	r3, [r7, #4]
 810a634:	685b      	ldr	r3, [r3, #4]
 810a636:	2b00      	cmp	r3, #0
 810a638:	d113      	bne.n	810a662 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810a63a:	687b      	ldr	r3, [r7, #4]
 810a63c:	681b      	ldr	r3, [r3, #0]
 810a63e:	689b      	ldr	r3, [r3, #8]
 810a640:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	681b      	ldr	r3, [r3, #0]
 810a648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a64c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810a64e:	687b      	ldr	r3, [r7, #4]
 810a650:	681b      	ldr	r3, [r3, #0]
 810a652:	689b      	ldr	r3, [r3, #8]
 810a654:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810a658:	687b      	ldr	r3, [r7, #4]
 810a65a:	681b      	ldr	r3, [r3, #0]
 810a65c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810a660:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810a662:	687b      	ldr	r3, [r7, #4]
 810a664:	681b      	ldr	r3, [r3, #0]
 810a666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810a668:	687b      	ldr	r3, [r7, #4]
 810a66a:	681b      	ldr	r3, [r3, #0]
 810a66c:	f022 0201 	bic.w	r2, r2, #1
 810a670:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810a672:	687b      	ldr	r3, [r7, #4]
 810a674:	685b      	ldr	r3, [r3, #4]
 810a676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a67a:	2b00      	cmp	r3, #0
 810a67c:	d00a      	beq.n	810a694 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810a67e:	687b      	ldr	r3, [r7, #4]
 810a680:	681b      	ldr	r3, [r3, #0]
 810a682:	68db      	ldr	r3, [r3, #12]
 810a684:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810a688:	687b      	ldr	r3, [r7, #4]
 810a68a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a68c:	687b      	ldr	r3, [r7, #4]
 810a68e:	681b      	ldr	r3, [r3, #0]
 810a690:	430a      	orrs	r2, r1
 810a692:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	2200      	movs	r2, #0
 810a698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810a69c:	687b      	ldr	r3, [r7, #4]
 810a69e:	2201      	movs	r2, #1
 810a6a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810a6a4:	2300      	movs	r3, #0
}
 810a6a6:	4618      	mov	r0, r3
 810a6a8:	3710      	adds	r7, #16
 810a6aa:	46bd      	mov	sp, r7
 810a6ac:	bd80      	pop	{r7, pc}
 810a6ae:	bf00      	nop
 810a6b0:	40013000 	.word	0x40013000
 810a6b4:	40003800 	.word	0x40003800
 810a6b8:	40003c00 	.word	0x40003c00

0810a6bc <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 810a6bc:	b580      	push	{r7, lr}
 810a6be:	b086      	sub	sp, #24
 810a6c0:	af00      	add	r7, sp, #0
 810a6c2:	60f8      	str	r0, [r7, #12]
 810a6c4:	60b9      	str	r1, [r7, #8]
 810a6c6:	607a      	str	r2, [r7, #4]
 810a6c8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810a6ca:	2300      	movs	r3, #0
 810a6cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 810a6ce:	68fb      	ldr	r3, [r7, #12]
 810a6d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a6d4:	2b01      	cmp	r3, #1
 810a6d6:	d101      	bne.n	810a6dc <HAL_SPI_TransmitReceive_DMA+0x20>
 810a6d8:	2302      	movs	r3, #2
 810a6da:	e1ac      	b.n	810aa36 <HAL_SPI_TransmitReceive_DMA+0x37a>
 810a6dc:	68fb      	ldr	r3, [r7, #12]
 810a6de:	2201      	movs	r2, #1
 810a6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 810a6e4:	68fb      	ldr	r3, [r7, #12]
 810a6e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a6ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 810a6ec:	68fb      	ldr	r3, [r7, #12]
 810a6ee:	685b      	ldr	r3, [r3, #4]
 810a6f0:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 810a6f2:	693b      	ldr	r3, [r7, #16]
 810a6f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a6f8:	d106      	bne.n	810a708 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810a6fa:	68fb      	ldr	r3, [r7, #12]
 810a6fc:	689b      	ldr	r3, [r3, #8]
 810a6fe:	2b00      	cmp	r3, #0
 810a700:	d102      	bne.n	810a708 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810a702:	7dbb      	ldrb	r3, [r7, #22]
 810a704:	2b04      	cmp	r3, #4
 810a706:	d00a      	beq.n	810a71e <HAL_SPI_TransmitReceive_DMA+0x62>
 810a708:	7dbb      	ldrb	r3, [r7, #22]
 810a70a:	2b01      	cmp	r3, #1
 810a70c:	d007      	beq.n	810a71e <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 810a70e:	2302      	movs	r3, #2
 810a710:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810a712:	68fb      	ldr	r3, [r7, #12]
 810a714:	2200      	movs	r2, #0
 810a716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a71a:	7dfb      	ldrb	r3, [r7, #23]
 810a71c:	e18b      	b.n	810aa36 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810a71e:	68bb      	ldr	r3, [r7, #8]
 810a720:	2b00      	cmp	r3, #0
 810a722:	d005      	beq.n	810a730 <HAL_SPI_TransmitReceive_DMA+0x74>
 810a724:	687b      	ldr	r3, [r7, #4]
 810a726:	2b00      	cmp	r3, #0
 810a728:	d002      	beq.n	810a730 <HAL_SPI_TransmitReceive_DMA+0x74>
 810a72a:	887b      	ldrh	r3, [r7, #2]
 810a72c:	2b00      	cmp	r3, #0
 810a72e:	d107      	bne.n	810a740 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 810a730:	2301      	movs	r3, #1
 810a732:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810a734:	68fb      	ldr	r3, [r7, #12]
 810a736:	2200      	movs	r2, #0
 810a738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a73c:	7dfb      	ldrb	r3, [r7, #23]
 810a73e:	e17a      	b.n	810aa36 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a740:	68fb      	ldr	r3, [r7, #12]
 810a742:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a746:	b2db      	uxtb	r3, r3
 810a748:	2b04      	cmp	r3, #4
 810a74a:	d003      	beq.n	810a754 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810a74c:	68fb      	ldr	r3, [r7, #12]
 810a74e:	2205      	movs	r2, #5
 810a750:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810a754:	68fb      	ldr	r3, [r7, #12]
 810a756:	2200      	movs	r2, #0
 810a758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810a75c:	68fb      	ldr	r3, [r7, #12]
 810a75e:	68ba      	ldr	r2, [r7, #8]
 810a760:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810a762:	68fb      	ldr	r3, [r7, #12]
 810a764:	887a      	ldrh	r2, [r7, #2]
 810a766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810a76a:	68fb      	ldr	r3, [r7, #12]
 810a76c:	887a      	ldrh	r2, [r7, #2]
 810a76e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810a772:	68fb      	ldr	r3, [r7, #12]
 810a774:	687a      	ldr	r2, [r7, #4]
 810a776:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810a778:	68fb      	ldr	r3, [r7, #12]
 810a77a:	887a      	ldrh	r2, [r7, #2]
 810a77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810a780:	68fb      	ldr	r3, [r7, #12]
 810a782:	887a      	ldrh	r2, [r7, #2]
 810a784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810a788:	68fb      	ldr	r3, [r7, #12]
 810a78a:	2200      	movs	r2, #0
 810a78c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810a78e:	68fb      	ldr	r3, [r7, #12]
 810a790:	2200      	movs	r2, #0
 810a792:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a794:	68fb      	ldr	r3, [r7, #12]
 810a796:	681b      	ldr	r3, [r3, #0]
 810a798:	689a      	ldr	r2, [r3, #8]
 810a79a:	68fb      	ldr	r3, [r7, #12]
 810a79c:	681b      	ldr	r3, [r3, #0]
 810a79e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a7a2:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a7a4:	68fb      	ldr	r3, [r7, #12]
 810a7a6:	68db      	ldr	r3, [r3, #12]
 810a7a8:	2b0f      	cmp	r3, #15
 810a7aa:	d905      	bls.n	810a7b8 <HAL_SPI_TransmitReceive_DMA+0xfc>
 810a7ac:	68fb      	ldr	r3, [r7, #12]
 810a7ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a7b0:	699b      	ldr	r3, [r3, #24]
 810a7b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a7b6:	d10f      	bne.n	810a7d8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a7b8:	68fb      	ldr	r3, [r7, #12]
 810a7ba:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a7bc:	2b07      	cmp	r3, #7
 810a7be:	d913      	bls.n	810a7e8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a7c0:	68fb      	ldr	r3, [r7, #12]
 810a7c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a7c4:	699b      	ldr	r3, [r3, #24]
 810a7c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a7ca:	d00d      	beq.n	810a7e8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 810a7cc:	68fb      	ldr	r3, [r7, #12]
 810a7ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a7d0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a7d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a7d6:	d007      	beq.n	810a7e8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 810a7d8:	2301      	movs	r3, #1
 810a7da:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 810a7dc:	68fb      	ldr	r3, [r7, #12]
 810a7de:	2200      	movs	r2, #0
 810a7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a7e4:	7dfb      	ldrb	r3, [r7, #23]
 810a7e6:	e126      	b.n	810aa36 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 810a7e8:	68fb      	ldr	r3, [r7, #12]
 810a7ea:	68db      	ldr	r3, [r3, #12]
 810a7ec:	2b07      	cmp	r3, #7
 810a7ee:	d840      	bhi.n	810a872 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a7f0:	68fb      	ldr	r3, [r7, #12]
 810a7f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7f4:	699b      	ldr	r3, [r3, #24]
 810a7f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a7fa:	d109      	bne.n	810a810 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a7fc:	68fb      	ldr	r3, [r7, #12]
 810a7fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a802:	b29b      	uxth	r3, r3
 810a804:	3301      	adds	r3, #1
 810a806:	105b      	asrs	r3, r3, #1
 810a808:	b29a      	uxth	r2, r3
 810a80a:	68fb      	ldr	r3, [r7, #12]
 810a80c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a810:	68fb      	ldr	r3, [r7, #12]
 810a812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a814:	699b      	ldr	r3, [r3, #24]
 810a816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a81a:	d109      	bne.n	810a830 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 810a81c:	68fb      	ldr	r3, [r7, #12]
 810a81e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a822:	b29b      	uxth	r3, r3
 810a824:	3303      	adds	r3, #3
 810a826:	109b      	asrs	r3, r3, #2
 810a828:	b29a      	uxth	r2, r3
 810a82a:	68fb      	ldr	r3, [r7, #12]
 810a82c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a830:	68fb      	ldr	r3, [r7, #12]
 810a832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a834:	699b      	ldr	r3, [r3, #24]
 810a836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a83a:	d109      	bne.n	810a850 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a83c:	68fb      	ldr	r3, [r7, #12]
 810a83e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a842:	b29b      	uxth	r3, r3
 810a844:	3301      	adds	r3, #1
 810a846:	105b      	asrs	r3, r3, #1
 810a848:	b29a      	uxth	r2, r3
 810a84a:	68fb      	ldr	r3, [r7, #12]
 810a84c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a850:	68fb      	ldr	r3, [r7, #12]
 810a852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a854:	699b      	ldr	r3, [r3, #24]
 810a856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a85a:	d12e      	bne.n	810a8ba <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 810a85c:	68fb      	ldr	r3, [r7, #12]
 810a85e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a862:	b29b      	uxth	r3, r3
 810a864:	3303      	adds	r3, #3
 810a866:	109b      	asrs	r3, r3, #2
 810a868:	b29a      	uxth	r2, r3
 810a86a:	68fb      	ldr	r3, [r7, #12]
 810a86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810a870:	e023      	b.n	810a8ba <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 810a872:	68fb      	ldr	r3, [r7, #12]
 810a874:	68db      	ldr	r3, [r3, #12]
 810a876:	2b0f      	cmp	r3, #15
 810a878:	d81f      	bhi.n	810a8ba <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a87a:	68fb      	ldr	r3, [r7, #12]
 810a87c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a87e:	699b      	ldr	r3, [r3, #24]
 810a880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a884:	d109      	bne.n	810a89a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a886:	68fb      	ldr	r3, [r7, #12]
 810a888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a88c:	b29b      	uxth	r3, r3
 810a88e:	3301      	adds	r3, #1
 810a890:	105b      	asrs	r3, r3, #1
 810a892:	b29a      	uxth	r2, r3
 810a894:	68fb      	ldr	r3, [r7, #12]
 810a896:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a89a:	68fb      	ldr	r3, [r7, #12]
 810a89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a89e:	699b      	ldr	r3, [r3, #24]
 810a8a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a8a4:	d109      	bne.n	810a8ba <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a8a6:	68fb      	ldr	r3, [r7, #12]
 810a8a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a8ac:	b29b      	uxth	r3, r3
 810a8ae:	3301      	adds	r3, #1
 810a8b0:	105b      	asrs	r3, r3, #1
 810a8b2:	b29a      	uxth	r2, r3
 810a8b4:	68fb      	ldr	r3, [r7, #12]
 810a8b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 810a8ba:	68fb      	ldr	r3, [r7, #12]
 810a8bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a8c0:	b2db      	uxtb	r3, r3
 810a8c2:	2b04      	cmp	r3, #4
 810a8c4:	d108      	bne.n	810a8d8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 810a8c6:	68fb      	ldr	r3, [r7, #12]
 810a8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a8ca:	4a5d      	ldr	r2, [pc, #372]	; (810aa40 <HAL_SPI_TransmitReceive_DMA+0x384>)
 810a8cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 810a8ce:	68fb      	ldr	r3, [r7, #12]
 810a8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a8d2:	4a5c      	ldr	r2, [pc, #368]	; (810aa44 <HAL_SPI_TransmitReceive_DMA+0x388>)
 810a8d4:	63da      	str	r2, [r3, #60]	; 0x3c
 810a8d6:	e007      	b.n	810a8e8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 810a8d8:	68fb      	ldr	r3, [r7, #12]
 810a8da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a8dc:	4a5a      	ldr	r2, [pc, #360]	; (810aa48 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 810a8de:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 810a8e0:	68fb      	ldr	r3, [r7, #12]
 810a8e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a8e4:	4a59      	ldr	r2, [pc, #356]	; (810aa4c <HAL_SPI_TransmitReceive_DMA+0x390>)
 810a8e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 810a8e8:	68fb      	ldr	r3, [r7, #12]
 810a8ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a8ec:	4a58      	ldr	r2, [pc, #352]	; (810aa50 <HAL_SPI_TransmitReceive_DMA+0x394>)
 810a8ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 810a8f0:	68fb      	ldr	r3, [r7, #12]
 810a8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a8f4:	2200      	movs	r2, #0
 810a8f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 810a8f8:	68fb      	ldr	r3, [r7, #12]
 810a8fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810a8fc:	68fb      	ldr	r3, [r7, #12]
 810a8fe:	681b      	ldr	r3, [r3, #0]
 810a900:	3330      	adds	r3, #48	; 0x30
 810a902:	4619      	mov	r1, r3
 810a904:	68fb      	ldr	r3, [r7, #12]
 810a906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a908:	461a      	mov	r2, r3
 810a90a:	68fb      	ldr	r3, [r7, #12]
 810a90c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a910:	b29b      	uxth	r3, r3
 810a912:	f7f9 ff39 	bl	8104788 <HAL_DMA_Start_IT>
 810a916:	4603      	mov	r3, r0
 810a918:	2b00      	cmp	r3, #0
 810a91a:	d00f      	beq.n	810a93c <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a91c:	68fb      	ldr	r3, [r7, #12]
 810a91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a922:	f043 0210 	orr.w	r2, r3, #16
 810a926:	68fb      	ldr	r3, [r7, #12]
 810a928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a92c:	2301      	movs	r3, #1
 810a92e:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a930:	68fb      	ldr	r3, [r7, #12]
 810a932:	2201      	movs	r2, #1
 810a934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a938:	7dfb      	ldrb	r3, [r7, #23]
 810a93a:	e07c      	b.n	810aa36 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 810a93c:	68fb      	ldr	r3, [r7, #12]
 810a93e:	681b      	ldr	r3, [r3, #0]
 810a940:	689a      	ldr	r2, [r3, #8]
 810a942:	68fb      	ldr	r3, [r7, #12]
 810a944:	681b      	ldr	r3, [r3, #0]
 810a946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810a94a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 810a94c:	68fb      	ldr	r3, [r7, #12]
 810a94e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a950:	2200      	movs	r2, #0
 810a952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 810a954:	68fb      	ldr	r3, [r7, #12]
 810a956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a958:	2200      	movs	r2, #0
 810a95a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 810a95c:	68fb      	ldr	r3, [r7, #12]
 810a95e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a960:	2200      	movs	r2, #0
 810a962:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 810a964:	68fb      	ldr	r3, [r7, #12]
 810a966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a968:	2200      	movs	r2, #0
 810a96a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 810a96c:	68fb      	ldr	r3, [r7, #12]
 810a96e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810a970:	68fb      	ldr	r3, [r7, #12]
 810a972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a974:	4619      	mov	r1, r3
 810a976:	68fb      	ldr	r3, [r7, #12]
 810a978:	681b      	ldr	r3, [r3, #0]
 810a97a:	3320      	adds	r3, #32
 810a97c:	461a      	mov	r2, r3
 810a97e:	68fb      	ldr	r3, [r7, #12]
 810a980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a984:	b29b      	uxth	r3, r3
 810a986:	f7f9 feff 	bl	8104788 <HAL_DMA_Start_IT>
 810a98a:	4603      	mov	r3, r0
 810a98c:	2b00      	cmp	r3, #0
 810a98e:	d00f      	beq.n	810a9b0 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a990:	68fb      	ldr	r3, [r7, #12]
 810a992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a996:	f043 0210 	orr.w	r2, r3, #16
 810a99a:	68fb      	ldr	r3, [r7, #12]
 810a99c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a9a0:	2301      	movs	r3, #1
 810a9a2:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a9a4:	68fb      	ldr	r3, [r7, #12]
 810a9a6:	2201      	movs	r2, #1
 810a9a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a9ac:	7dfb      	ldrb	r3, [r7, #23]
 810a9ae:	e042      	b.n	810aa36 <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a9b0:	68fb      	ldr	r3, [r7, #12]
 810a9b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a9b4:	69db      	ldr	r3, [r3, #28]
 810a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a9ba:	d108      	bne.n	810a9ce <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 810a9bc:	68fb      	ldr	r3, [r7, #12]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	685b      	ldr	r3, [r3, #4]
 810a9c2:	68fa      	ldr	r2, [r7, #12]
 810a9c4:	6812      	ldr	r2, [r2, #0]
 810a9c6:	0c1b      	lsrs	r3, r3, #16
 810a9c8:	041b      	lsls	r3, r3, #16
 810a9ca:	6053      	str	r3, [r2, #4]
 810a9cc:	e009      	b.n	810a9e2 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810a9ce:	68fb      	ldr	r3, [r7, #12]
 810a9d0:	681b      	ldr	r3, [r3, #0]
 810a9d2:	685b      	ldr	r3, [r3, #4]
 810a9d4:	0c1b      	lsrs	r3, r3, #16
 810a9d6:	041b      	lsls	r3, r3, #16
 810a9d8:	8879      	ldrh	r1, [r7, #2]
 810a9da:	68fa      	ldr	r2, [r7, #12]
 810a9dc:	6812      	ldr	r2, [r2, #0]
 810a9de:	430b      	orrs	r3, r1
 810a9e0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 810a9e2:	68fb      	ldr	r3, [r7, #12]
 810a9e4:	681b      	ldr	r3, [r3, #0]
 810a9e6:	689a      	ldr	r2, [r3, #8]
 810a9e8:	68fb      	ldr	r3, [r7, #12]
 810a9ea:	681b      	ldr	r3, [r3, #0]
 810a9ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810a9f0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 810a9f2:	68fb      	ldr	r3, [r7, #12]
 810a9f4:	681b      	ldr	r3, [r3, #0]
 810a9f6:	691a      	ldr	r2, [r3, #16]
 810a9f8:	68fb      	ldr	r3, [r7, #12]
 810a9fa:	681b      	ldr	r3, [r3, #0]
 810a9fc:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 810aa00:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810aa02:	68fb      	ldr	r3, [r7, #12]
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	681a      	ldr	r2, [r3, #0]
 810aa08:	68fb      	ldr	r3, [r7, #12]
 810aa0a:	681b      	ldr	r3, [r3, #0]
 810aa0c:	f042 0201 	orr.w	r2, r2, #1
 810aa10:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810aa12:	68fb      	ldr	r3, [r7, #12]
 810aa14:	685b      	ldr	r3, [r3, #4]
 810aa16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810aa1a:	d107      	bne.n	810aa2c <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810aa1c:	68fb      	ldr	r3, [r7, #12]
 810aa1e:	681b      	ldr	r3, [r3, #0]
 810aa20:	681a      	ldr	r2, [r3, #0]
 810aa22:	68fb      	ldr	r3, [r7, #12]
 810aa24:	681b      	ldr	r3, [r3, #0]
 810aa26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810aa2a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810aa2c:	68fb      	ldr	r3, [r7, #12]
 810aa2e:	2200      	movs	r2, #0
 810aa30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 810aa34:	7dfb      	ldrb	r3, [r7, #23]
}
 810aa36:	4618      	mov	r0, r3
 810aa38:	3718      	adds	r7, #24
 810aa3a:	46bd      	mov	sp, r7
 810aa3c:	bd80      	pop	{r7, pc}
 810aa3e:	bf00      	nop
 810aa40:	0810af05 	.word	0x0810af05
 810aa44:	0810ae79 	.word	0x0810ae79
 810aa48:	0810af21 	.word	0x0810af21
 810aa4c:	0810aebf 	.word	0x0810aebf
 810aa50:	0810af3d 	.word	0x0810af3d

0810aa54 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810aa54:	b580      	push	{r7, lr}
 810aa56:	b08a      	sub	sp, #40	; 0x28
 810aa58:	af00      	add	r7, sp, #0
 810aa5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810aa5c:	687b      	ldr	r3, [r7, #4]
 810aa5e:	681b      	ldr	r3, [r3, #0]
 810aa60:	691b      	ldr	r3, [r3, #16]
 810aa62:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	695b      	ldr	r3, [r3, #20]
 810aa6a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810aa6c:	6a3a      	ldr	r2, [r7, #32]
 810aa6e:	69fb      	ldr	r3, [r7, #28]
 810aa70:	4013      	ands	r3, r2
 810aa72:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810aa74:	687b      	ldr	r3, [r7, #4]
 810aa76:	681b      	ldr	r3, [r3, #0]
 810aa78:	689b      	ldr	r3, [r3, #8]
 810aa7a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810aa7c:	2300      	movs	r3, #0
 810aa7e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810aa80:	687b      	ldr	r3, [r7, #4]
 810aa82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810aa86:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	681b      	ldr	r3, [r3, #0]
 810aa8c:	3330      	adds	r3, #48	; 0x30
 810aa8e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810aa90:	69bb      	ldr	r3, [r7, #24]
 810aa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aa96:	2b00      	cmp	r3, #0
 810aa98:	d113      	bne.n	810aac2 <HAL_SPI_IRQHandler+0x6e>
 810aa9a:	69bb      	ldr	r3, [r7, #24]
 810aa9c:	f003 0320 	and.w	r3, r3, #32
 810aaa0:	2b00      	cmp	r3, #0
 810aaa2:	d10e      	bne.n	810aac2 <HAL_SPI_IRQHandler+0x6e>
 810aaa4:	69bb      	ldr	r3, [r7, #24]
 810aaa6:	f003 0304 	and.w	r3, r3, #4
 810aaaa:	2b00      	cmp	r3, #0
 810aaac:	d009      	beq.n	810aac2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810aaae:	687b      	ldr	r3, [r7, #4]
 810aab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810aab2:	6878      	ldr	r0, [r7, #4]
 810aab4:	4798      	blx	r3
    hspi->RxISR(hspi);
 810aab6:	687b      	ldr	r3, [r7, #4]
 810aab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aaba:	6878      	ldr	r0, [r7, #4]
 810aabc:	4798      	blx	r3
    handled = 1UL;
 810aabe:	2301      	movs	r3, #1
 810aac0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810aac2:	69bb      	ldr	r3, [r7, #24]
 810aac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aac8:	2b00      	cmp	r3, #0
 810aaca:	d10f      	bne.n	810aaec <HAL_SPI_IRQHandler+0x98>
 810aacc:	69bb      	ldr	r3, [r7, #24]
 810aace:	f003 0301 	and.w	r3, r3, #1
 810aad2:	2b00      	cmp	r3, #0
 810aad4:	d00a      	beq.n	810aaec <HAL_SPI_IRQHandler+0x98>
 810aad6:	69bb      	ldr	r3, [r7, #24]
 810aad8:	f003 0304 	and.w	r3, r3, #4
 810aadc:	2b00      	cmp	r3, #0
 810aade:	d105      	bne.n	810aaec <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810aae0:	687b      	ldr	r3, [r7, #4]
 810aae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aae4:	6878      	ldr	r0, [r7, #4]
 810aae6:	4798      	blx	r3
    handled = 1UL;
 810aae8:	2301      	movs	r3, #1
 810aaea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810aaec:	69bb      	ldr	r3, [r7, #24]
 810aaee:	f003 0320 	and.w	r3, r3, #32
 810aaf2:	2b00      	cmp	r3, #0
 810aaf4:	d10f      	bne.n	810ab16 <HAL_SPI_IRQHandler+0xc2>
 810aaf6:	69bb      	ldr	r3, [r7, #24]
 810aaf8:	f003 0302 	and.w	r3, r3, #2
 810aafc:	2b00      	cmp	r3, #0
 810aafe:	d00a      	beq.n	810ab16 <HAL_SPI_IRQHandler+0xc2>
 810ab00:	69bb      	ldr	r3, [r7, #24]
 810ab02:	f003 0304 	and.w	r3, r3, #4
 810ab06:	2b00      	cmp	r3, #0
 810ab08:	d105      	bne.n	810ab16 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810ab0a:	687b      	ldr	r3, [r7, #4]
 810ab0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810ab0e:	6878      	ldr	r0, [r7, #4]
 810ab10:	4798      	blx	r3
    handled = 1UL;
 810ab12:	2301      	movs	r3, #1
 810ab14:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ab18:	2b00      	cmp	r3, #0
 810ab1a:	f040 8171 	bne.w	810ae00 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810ab1e:	69bb      	ldr	r3, [r7, #24]
 810ab20:	f003 0308 	and.w	r3, r3, #8
 810ab24:	2b00      	cmp	r3, #0
 810ab26:	f000 80a0 	beq.w	810ac6a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810ab2a:	687b      	ldr	r3, [r7, #4]
 810ab2c:	681b      	ldr	r3, [r3, #0]
 810ab2e:	699a      	ldr	r2, [r3, #24]
 810ab30:	687b      	ldr	r3, [r7, #4]
 810ab32:	681b      	ldr	r3, [r3, #0]
 810ab34:	f042 0208 	orr.w	r2, r2, #8
 810ab38:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	681b      	ldr	r3, [r3, #0]
 810ab3e:	699a      	ldr	r2, [r3, #24]
 810ab40:	687b      	ldr	r3, [r7, #4]
 810ab42:	681b      	ldr	r3, [r3, #0]
 810ab44:	f042 0210 	orr.w	r2, r2, #16
 810ab48:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	681b      	ldr	r3, [r3, #0]
 810ab4e:	699a      	ldr	r2, [r3, #24]
 810ab50:	687b      	ldr	r3, [r7, #4]
 810ab52:	681b      	ldr	r3, [r3, #0]
 810ab54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810ab58:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810ab5a:	687b      	ldr	r3, [r7, #4]
 810ab5c:	681b      	ldr	r3, [r3, #0]
 810ab5e:	691a      	ldr	r2, [r3, #16]
 810ab60:	687b      	ldr	r3, [r7, #4]
 810ab62:	681b      	ldr	r3, [r3, #0]
 810ab64:	f022 0208 	bic.w	r2, r2, #8
 810ab68:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810ab6a:	697b      	ldr	r3, [r7, #20]
 810ab6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ab70:	2b00      	cmp	r3, #0
 810ab72:	d00f      	beq.n	810ab94 <HAL_SPI_IRQHandler+0x140>
 810ab74:	7cfb      	ldrb	r3, [r7, #19]
 810ab76:	2b04      	cmp	r3, #4
 810ab78:	d004      	beq.n	810ab84 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ab7e:	69db      	ldr	r3, [r3, #28]
 810ab80:	2b00      	cmp	r3, #0
 810ab82:	d007      	beq.n	810ab94 <HAL_SPI_IRQHandler+0x140>
 810ab84:	7cfb      	ldrb	r3, [r7, #19]
 810ab86:	2b03      	cmp	r3, #3
 810ab88:	d059      	beq.n	810ac3e <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810ab8a:	687b      	ldr	r3, [r7, #4]
 810ab8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ab8e:	69db      	ldr	r3, [r3, #28]
 810ab90:	2b00      	cmp	r3, #0
 810ab92:	d154      	bne.n	810ac3e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810ab94:	687b      	ldr	r3, [r7, #4]
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	689b      	ldr	r3, [r3, #8]
 810ab9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ab9e:	2b00      	cmp	r3, #0
 810aba0:	d13d      	bne.n	810ac1e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810aba2:	e036      	b.n	810ac12 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810aba4:	687b      	ldr	r3, [r7, #4]
 810aba6:	68db      	ldr	r3, [r3, #12]
 810aba8:	2b0f      	cmp	r3, #15
 810abaa:	d90b      	bls.n	810abc4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	681a      	ldr	r2, [r3, #0]
 810abb0:	687b      	ldr	r3, [r7, #4]
 810abb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810abb6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810abb8:	687b      	ldr	r3, [r7, #4]
 810abba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abbc:	1d1a      	adds	r2, r3, #4
 810abbe:	687b      	ldr	r3, [r7, #4]
 810abc0:	665a      	str	r2, [r3, #100]	; 0x64
 810abc2:	e01d      	b.n	810ac00 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810abc4:	687b      	ldr	r3, [r7, #4]
 810abc6:	68db      	ldr	r3, [r3, #12]
 810abc8:	2b07      	cmp	r3, #7
 810abca:	d90b      	bls.n	810abe4 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810abcc:	687b      	ldr	r3, [r7, #4]
 810abce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abd0:	68fa      	ldr	r2, [r7, #12]
 810abd2:	8812      	ldrh	r2, [r2, #0]
 810abd4:	b292      	uxth	r2, r2
 810abd6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abdc:	1c9a      	adds	r2, r3, #2
 810abde:	687b      	ldr	r3, [r7, #4]
 810abe0:	665a      	str	r2, [r3, #100]	; 0x64
 810abe2:	e00d      	b.n	810ac00 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	681b      	ldr	r3, [r3, #0]
 810abe8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810abec:	687b      	ldr	r3, [r7, #4]
 810abee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abf0:	7812      	ldrb	r2, [r2, #0]
 810abf2:	b2d2      	uxtb	r2, r2
 810abf4:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810abf6:	687b      	ldr	r3, [r7, #4]
 810abf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abfa:	1c5a      	adds	r2, r3, #1
 810abfc:	687b      	ldr	r3, [r7, #4]
 810abfe:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ac06:	b29b      	uxth	r3, r3
 810ac08:	3b01      	subs	r3, #1
 810ac0a:	b29a      	uxth	r2, r3
 810ac0c:	687b      	ldr	r3, [r7, #4]
 810ac0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810ac12:	687b      	ldr	r3, [r7, #4]
 810ac14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ac18:	b29b      	uxth	r3, r3
 810ac1a:	2b00      	cmp	r3, #0
 810ac1c:	d1c2      	bne.n	810aba4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810ac1e:	6878      	ldr	r0, [r7, #4]
 810ac20:	f000 f9c9 	bl	810afb6 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810ac24:	687b      	ldr	r3, [r7, #4]
 810ac26:	2201      	movs	r2, #1
 810ac28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810ac2c:	687b      	ldr	r3, [r7, #4]
 810ac2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ac32:	2b00      	cmp	r3, #0
 810ac34:	d003      	beq.n	810ac3e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810ac36:	6878      	ldr	r0, [r7, #4]
 810ac38:	f000 f914 	bl	810ae64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810ac3c:	e0e5      	b.n	810ae0a <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810ac3e:	7cfb      	ldrb	r3, [r7, #19]
 810ac40:	2b05      	cmp	r3, #5
 810ac42:	d103      	bne.n	810ac4c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810ac44:	6878      	ldr	r0, [r7, #4]
 810ac46:	f7f6 ff2f 	bl	8101aa8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810ac4a:	e0db      	b.n	810ae04 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810ac4c:	7cfb      	ldrb	r3, [r7, #19]
 810ac4e:	2b04      	cmp	r3, #4
 810ac50:	d103      	bne.n	810ac5a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810ac52:	6878      	ldr	r0, [r7, #4]
 810ac54:	f000 f8e8 	bl	810ae28 <HAL_SPI_RxCpltCallback>
    return;
 810ac58:	e0d4      	b.n	810ae04 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810ac5a:	7cfb      	ldrb	r3, [r7, #19]
 810ac5c:	2b03      	cmp	r3, #3
 810ac5e:	f040 80d1 	bne.w	810ae04 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810ac62:	6878      	ldr	r0, [r7, #4]
 810ac64:	f000 f8d6 	bl	810ae14 <HAL_SPI_TxCpltCallback>
    return;
 810ac68:	e0cc      	b.n	810ae04 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810ac6a:	69fb      	ldr	r3, [r7, #28]
 810ac6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ac70:	2b00      	cmp	r3, #0
 810ac72:	d00d      	beq.n	810ac90 <HAL_SPI_IRQHandler+0x23c>
 810ac74:	6a3b      	ldr	r3, [r7, #32]
 810ac76:	f003 0308 	and.w	r3, r3, #8
 810ac7a:	2b00      	cmp	r3, #0
 810ac7c:	d008      	beq.n	810ac90 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810ac7e:	687b      	ldr	r3, [r7, #4]
 810ac80:	681b      	ldr	r3, [r3, #0]
 810ac82:	699a      	ldr	r2, [r3, #24]
 810ac84:	687b      	ldr	r3, [r7, #4]
 810ac86:	681b      	ldr	r3, [r3, #0]
 810ac88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810ac8c:	619a      	str	r2, [r3, #24]

    return;
 810ac8e:	e0bc      	b.n	810ae0a <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810ac90:	69bb      	ldr	r3, [r7, #24]
 810ac92:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810ac96:	2b00      	cmp	r3, #0
 810ac98:	f000 80b7 	beq.w	810ae0a <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810ac9c:	69bb      	ldr	r3, [r7, #24]
 810ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aca2:	2b00      	cmp	r3, #0
 810aca4:	d00f      	beq.n	810acc6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810acac:	f043 0204 	orr.w	r2, r3, #4
 810acb0:	687b      	ldr	r3, [r7, #4]
 810acb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810acb6:	687b      	ldr	r3, [r7, #4]
 810acb8:	681b      	ldr	r3, [r3, #0]
 810acba:	699a      	ldr	r2, [r3, #24]
 810acbc:	687b      	ldr	r3, [r7, #4]
 810acbe:	681b      	ldr	r3, [r3, #0]
 810acc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810acc4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810acc6:	69bb      	ldr	r3, [r7, #24]
 810acc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810accc:	2b00      	cmp	r3, #0
 810acce:	d00f      	beq.n	810acf0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810acd0:	687b      	ldr	r3, [r7, #4]
 810acd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810acd6:	f043 0201 	orr.w	r2, r3, #1
 810acda:	687b      	ldr	r3, [r7, #4]
 810acdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810ace0:	687b      	ldr	r3, [r7, #4]
 810ace2:	681b      	ldr	r3, [r3, #0]
 810ace4:	699a      	ldr	r2, [r3, #24]
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	681b      	ldr	r3, [r3, #0]
 810acea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810acee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810acf0:	69bb      	ldr	r3, [r7, #24]
 810acf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810acf6:	2b00      	cmp	r3, #0
 810acf8:	d00f      	beq.n	810ad1a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810acfa:	687b      	ldr	r3, [r7, #4]
 810acfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ad00:	f043 0208 	orr.w	r2, r3, #8
 810ad04:	687b      	ldr	r3, [r7, #4]
 810ad06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810ad0a:	687b      	ldr	r3, [r7, #4]
 810ad0c:	681b      	ldr	r3, [r3, #0]
 810ad0e:	699a      	ldr	r2, [r3, #24]
 810ad10:	687b      	ldr	r3, [r7, #4]
 810ad12:	681b      	ldr	r3, [r3, #0]
 810ad14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810ad18:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810ad1a:	69bb      	ldr	r3, [r7, #24]
 810ad1c:	f003 0320 	and.w	r3, r3, #32
 810ad20:	2b00      	cmp	r3, #0
 810ad22:	d00f      	beq.n	810ad44 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ad2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810ad2e:	687b      	ldr	r3, [r7, #4]
 810ad30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	681b      	ldr	r3, [r3, #0]
 810ad38:	699a      	ldr	r2, [r3, #24]
 810ad3a:	687b      	ldr	r3, [r7, #4]
 810ad3c:	681b      	ldr	r3, [r3, #0]
 810ad3e:	f042 0220 	orr.w	r2, r2, #32
 810ad42:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810ad44:	687b      	ldr	r3, [r7, #4]
 810ad46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ad4a:	2b00      	cmp	r3, #0
 810ad4c:	d05c      	beq.n	810ae08 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810ad4e:	687b      	ldr	r3, [r7, #4]
 810ad50:	681b      	ldr	r3, [r3, #0]
 810ad52:	681a      	ldr	r2, [r3, #0]
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	681b      	ldr	r3, [r3, #0]
 810ad58:	f022 0201 	bic.w	r2, r2, #1
 810ad5c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810ad5e:	687b      	ldr	r3, [r7, #4]
 810ad60:	681b      	ldr	r3, [r3, #0]
 810ad62:	691b      	ldr	r3, [r3, #16]
 810ad64:	687a      	ldr	r2, [r7, #4]
 810ad66:	6812      	ldr	r2, [r2, #0]
 810ad68:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810ad6c:	f023 0303 	bic.w	r3, r3, #3
 810ad70:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810ad72:	697b      	ldr	r3, [r7, #20]
 810ad74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ad78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810ad7c:	d138      	bne.n	810adf0 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810ad7e:	687b      	ldr	r3, [r7, #4]
 810ad80:	681b      	ldr	r3, [r3, #0]
 810ad82:	689a      	ldr	r2, [r3, #8]
 810ad84:	687b      	ldr	r3, [r7, #4]
 810ad86:	681b      	ldr	r3, [r3, #0]
 810ad88:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810ad8c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810ad8e:	687b      	ldr	r3, [r7, #4]
 810ad90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ad92:	2b00      	cmp	r3, #0
 810ad94:	d013      	beq.n	810adbe <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810ad96:	687b      	ldr	r3, [r7, #4]
 810ad98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ad9a:	4a1d      	ldr	r2, [pc, #116]	; (810ae10 <HAL_SPI_IRQHandler+0x3bc>)
 810ad9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810ad9e:	687b      	ldr	r3, [r7, #4]
 810ada0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ada2:	4618      	mov	r0, r3
 810ada4:	f7fa fa78 	bl	8105298 <HAL_DMA_Abort_IT>
 810ada8:	4603      	mov	r3, r0
 810adaa:	2b00      	cmp	r3, #0
 810adac:	d007      	beq.n	810adbe <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810adae:	687b      	ldr	r3, [r7, #4]
 810adb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810adb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810adb8:	687b      	ldr	r3, [r7, #4]
 810adba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810adbe:	687b      	ldr	r3, [r7, #4]
 810adc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810adc2:	2b00      	cmp	r3, #0
 810adc4:	d020      	beq.n	810ae08 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810adca:	4a11      	ldr	r2, [pc, #68]	; (810ae10 <HAL_SPI_IRQHandler+0x3bc>)
 810adcc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810adce:	687b      	ldr	r3, [r7, #4]
 810add0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810add2:	4618      	mov	r0, r3
 810add4:	f7fa fa60 	bl	8105298 <HAL_DMA_Abort_IT>
 810add8:	4603      	mov	r3, r0
 810adda:	2b00      	cmp	r3, #0
 810addc:	d014      	beq.n	810ae08 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810adde:	687b      	ldr	r3, [r7, #4]
 810ade0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ade4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810adee:	e00b      	b.n	810ae08 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810adf0:	687b      	ldr	r3, [r7, #4]
 810adf2:	2201      	movs	r2, #1
 810adf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810adf8:	6878      	ldr	r0, [r7, #4]
 810adfa:	f000 f833 	bl	810ae64 <HAL_SPI_ErrorCallback>
    return;
 810adfe:	e003      	b.n	810ae08 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810ae00:	bf00      	nop
 810ae02:	e002      	b.n	810ae0a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ae04:	bf00      	nop
 810ae06:	e000      	b.n	810ae0a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ae08:	bf00      	nop
  }
}
 810ae0a:	3728      	adds	r7, #40	; 0x28
 810ae0c:	46bd      	mov	sp, r7
 810ae0e:	bd80      	pop	{r7, pc}
 810ae10:	0810af83 	.word	0x0810af83

0810ae14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ae14:	b480      	push	{r7}
 810ae16:	b083      	sub	sp, #12
 810ae18:	af00      	add	r7, sp, #0
 810ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810ae1c:	bf00      	nop
 810ae1e:	370c      	adds	r7, #12
 810ae20:	46bd      	mov	sp, r7
 810ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae26:	4770      	bx	lr

0810ae28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ae28:	b480      	push	{r7}
 810ae2a:	b083      	sub	sp, #12
 810ae2c:	af00      	add	r7, sp, #0
 810ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810ae30:	bf00      	nop
 810ae32:	370c      	adds	r7, #12
 810ae34:	46bd      	mov	sp, r7
 810ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae3a:	4770      	bx	lr

0810ae3c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ae3c:	b480      	push	{r7}
 810ae3e:	b083      	sub	sp, #12
 810ae40:	af00      	add	r7, sp, #0
 810ae42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810ae44:	bf00      	nop
 810ae46:	370c      	adds	r7, #12
 810ae48:	46bd      	mov	sp, r7
 810ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae4e:	4770      	bx	lr

0810ae50 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ae50:	b480      	push	{r7}
 810ae52:	b083      	sub	sp, #12
 810ae54:	af00      	add	r7, sp, #0
 810ae56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810ae58:	bf00      	nop
 810ae5a:	370c      	adds	r7, #12
 810ae5c:	46bd      	mov	sp, r7
 810ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae62:	4770      	bx	lr

0810ae64 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810ae64:	b480      	push	{r7}
 810ae66:	b083      	sub	sp, #12
 810ae68:	af00      	add	r7, sp, #0
 810ae6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810ae6c:	bf00      	nop
 810ae6e:	370c      	adds	r7, #12
 810ae70:	46bd      	mov	sp, r7
 810ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae76:	4770      	bx	lr

0810ae78 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810ae78:	b580      	push	{r7, lr}
 810ae7a:	b084      	sub	sp, #16
 810ae7c:	af00      	add	r7, sp, #0
 810ae7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810ae80:	687b      	ldr	r3, [r7, #4]
 810ae82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ae84:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810ae86:	68fb      	ldr	r3, [r7, #12]
 810ae88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ae8c:	b2db      	uxtb	r3, r3
 810ae8e:	2b07      	cmp	r3, #7
 810ae90:	d011      	beq.n	810aeb6 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810ae92:	68fb      	ldr	r3, [r7, #12]
 810ae94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ae96:	69db      	ldr	r3, [r3, #28]
 810ae98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ae9c:	d103      	bne.n	810aea6 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810ae9e:	68f8      	ldr	r0, [r7, #12]
 810aea0:	f7ff ffc2 	bl	810ae28 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810aea4:	e007      	b.n	810aeb6 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810aea6:	68fb      	ldr	r3, [r7, #12]
 810aea8:	681b      	ldr	r3, [r3, #0]
 810aeaa:	691a      	ldr	r2, [r3, #16]
 810aeac:	68fb      	ldr	r3, [r7, #12]
 810aeae:	681b      	ldr	r3, [r3, #0]
 810aeb0:	f042 0208 	orr.w	r2, r2, #8
 810aeb4:	611a      	str	r2, [r3, #16]
}
 810aeb6:	bf00      	nop
 810aeb8:	3710      	adds	r7, #16
 810aeba:	46bd      	mov	sp, r7
 810aebc:	bd80      	pop	{r7, pc}

0810aebe <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810aebe:	b580      	push	{r7, lr}
 810aec0:	b084      	sub	sp, #16
 810aec2:	af00      	add	r7, sp, #0
 810aec4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810aec6:	687b      	ldr	r3, [r7, #4]
 810aec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aeca:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810aecc:	68fb      	ldr	r3, [r7, #12]
 810aece:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810aed2:	b2db      	uxtb	r3, r3
 810aed4:	2b07      	cmp	r3, #7
 810aed6:	d011      	beq.n	810aefc <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810aed8:	68fb      	ldr	r3, [r7, #12]
 810aeda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810aedc:	69db      	ldr	r3, [r3, #28]
 810aede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810aee2:	d103      	bne.n	810aeec <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810aee4:	68f8      	ldr	r0, [r7, #12]
 810aee6:	f7f6 fddf 	bl	8101aa8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810aeea:	e007      	b.n	810aefc <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810aeec:	68fb      	ldr	r3, [r7, #12]
 810aeee:	681b      	ldr	r3, [r3, #0]
 810aef0:	691a      	ldr	r2, [r3, #16]
 810aef2:	68fb      	ldr	r3, [r7, #12]
 810aef4:	681b      	ldr	r3, [r3, #0]
 810aef6:	f042 0208 	orr.w	r2, r2, #8
 810aefa:	611a      	str	r2, [r3, #16]
}
 810aefc:	bf00      	nop
 810aefe:	3710      	adds	r7, #16
 810af00:	46bd      	mov	sp, r7
 810af02:	bd80      	pop	{r7, pc}

0810af04 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810af04:	b580      	push	{r7, lr}
 810af06:	b084      	sub	sp, #16
 810af08:	af00      	add	r7, sp, #0
 810af0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810af0c:	687b      	ldr	r3, [r7, #4]
 810af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810af10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810af12:	68f8      	ldr	r0, [r7, #12]
 810af14:	f7ff ff92 	bl	810ae3c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810af18:	bf00      	nop
 810af1a:	3710      	adds	r7, #16
 810af1c:	46bd      	mov	sp, r7
 810af1e:	bd80      	pop	{r7, pc}

0810af20 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810af20:	b580      	push	{r7, lr}
 810af22:	b084      	sub	sp, #16
 810af24:	af00      	add	r7, sp, #0
 810af26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810af28:	687b      	ldr	r3, [r7, #4]
 810af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810af2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810af2e:	68f8      	ldr	r0, [r7, #12]
 810af30:	f7ff ff8e 	bl	810ae50 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810af34:	bf00      	nop
 810af36:	3710      	adds	r7, #16
 810af38:	46bd      	mov	sp, r7
 810af3a:	bd80      	pop	{r7, pc}

0810af3c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810af3c:	b580      	push	{r7, lr}
 810af3e:	b084      	sub	sp, #16
 810af40:	af00      	add	r7, sp, #0
 810af42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810af44:	687b      	ldr	r3, [r7, #4]
 810af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810af48:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810af4a:	6878      	ldr	r0, [r7, #4]
 810af4c:	f7fb fb20 	bl	8106590 <HAL_DMA_GetError>
 810af50:	4603      	mov	r3, r0
 810af52:	2b02      	cmp	r3, #2
 810af54:	d011      	beq.n	810af7a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810af56:	68f8      	ldr	r0, [r7, #12]
 810af58:	f000 f82d 	bl	810afb6 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810af62:	f043 0210 	orr.w	r2, r3, #16
 810af66:	68fb      	ldr	r3, [r7, #12]
 810af68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810af6c:	68fb      	ldr	r3, [r7, #12]
 810af6e:	2201      	movs	r2, #1
 810af70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810af74:	68f8      	ldr	r0, [r7, #12]
 810af76:	f7ff ff75 	bl	810ae64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810af7a:	bf00      	nop
 810af7c:	3710      	adds	r7, #16
 810af7e:	46bd      	mov	sp, r7
 810af80:	bd80      	pop	{r7, pc}

0810af82 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810af82:	b580      	push	{r7, lr}
 810af84:	b084      	sub	sp, #16
 810af86:	af00      	add	r7, sp, #0
 810af88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810af8a:	687b      	ldr	r3, [r7, #4]
 810af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810af8e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810af90:	68fb      	ldr	r3, [r7, #12]
 810af92:	2200      	movs	r2, #0
 810af94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810af98:	68fb      	ldr	r3, [r7, #12]
 810af9a:	2200      	movs	r2, #0
 810af9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810afa0:	68fb      	ldr	r3, [r7, #12]
 810afa2:	2201      	movs	r2, #1
 810afa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810afa8:	68f8      	ldr	r0, [r7, #12]
 810afaa:	f7ff ff5b 	bl	810ae64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810afae:	bf00      	nop
 810afb0:	3710      	adds	r7, #16
 810afb2:	46bd      	mov	sp, r7
 810afb4:	bd80      	pop	{r7, pc}

0810afb6 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810afb6:	b480      	push	{r7}
 810afb8:	b085      	sub	sp, #20
 810afba:	af00      	add	r7, sp, #0
 810afbc:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810afbe:	687b      	ldr	r3, [r7, #4]
 810afc0:	681b      	ldr	r3, [r3, #0]
 810afc2:	695b      	ldr	r3, [r3, #20]
 810afc4:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810afc6:	687b      	ldr	r3, [r7, #4]
 810afc8:	681b      	ldr	r3, [r3, #0]
 810afca:	699a      	ldr	r2, [r3, #24]
 810afcc:	687b      	ldr	r3, [r7, #4]
 810afce:	681b      	ldr	r3, [r3, #0]
 810afd0:	f042 0208 	orr.w	r2, r2, #8
 810afd4:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810afd6:	687b      	ldr	r3, [r7, #4]
 810afd8:	681b      	ldr	r3, [r3, #0]
 810afda:	699a      	ldr	r2, [r3, #24]
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	681b      	ldr	r3, [r3, #0]
 810afe0:	f042 0210 	orr.w	r2, r2, #16
 810afe4:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810afe6:	687b      	ldr	r3, [r7, #4]
 810afe8:	681b      	ldr	r3, [r3, #0]
 810afea:	681a      	ldr	r2, [r3, #0]
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	f022 0201 	bic.w	r2, r2, #1
 810aff4:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810aff6:	687b      	ldr	r3, [r7, #4]
 810aff8:	681b      	ldr	r3, [r3, #0]
 810affa:	691b      	ldr	r3, [r3, #16]
 810affc:	687a      	ldr	r2, [r7, #4]
 810affe:	6812      	ldr	r2, [r2, #0]
 810b000:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810b004:	f023 0303 	bic.w	r3, r3, #3
 810b008:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810b00a:	687b      	ldr	r3, [r7, #4]
 810b00c:	681b      	ldr	r3, [r3, #0]
 810b00e:	689a      	ldr	r2, [r3, #8]
 810b010:	687b      	ldr	r3, [r7, #4]
 810b012:	681b      	ldr	r3, [r3, #0]
 810b014:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810b018:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b020:	b2db      	uxtb	r3, r3
 810b022:	2b04      	cmp	r3, #4
 810b024:	d014      	beq.n	810b050 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810b026:	68fb      	ldr	r3, [r7, #12]
 810b028:	f003 0320 	and.w	r3, r3, #32
 810b02c:	2b00      	cmp	r3, #0
 810b02e:	d00f      	beq.n	810b050 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b036:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810b03a:	687b      	ldr	r3, [r7, #4]
 810b03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810b040:	687b      	ldr	r3, [r7, #4]
 810b042:	681b      	ldr	r3, [r3, #0]
 810b044:	699a      	ldr	r2, [r3, #24]
 810b046:	687b      	ldr	r3, [r7, #4]
 810b048:	681b      	ldr	r3, [r3, #0]
 810b04a:	f042 0220 	orr.w	r2, r2, #32
 810b04e:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810b050:	687b      	ldr	r3, [r7, #4]
 810b052:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b056:	b2db      	uxtb	r3, r3
 810b058:	2b03      	cmp	r3, #3
 810b05a:	d014      	beq.n	810b086 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810b05c:	68fb      	ldr	r3, [r7, #12]
 810b05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b062:	2b00      	cmp	r3, #0
 810b064:	d00f      	beq.n	810b086 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810b066:	687b      	ldr	r3, [r7, #4]
 810b068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b06c:	f043 0204 	orr.w	r2, r3, #4
 810b070:	687b      	ldr	r3, [r7, #4]
 810b072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810b076:	687b      	ldr	r3, [r7, #4]
 810b078:	681b      	ldr	r3, [r3, #0]
 810b07a:	699a      	ldr	r2, [r3, #24]
 810b07c:	687b      	ldr	r3, [r7, #4]
 810b07e:	681b      	ldr	r3, [r3, #0]
 810b080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810b084:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810b086:	68fb      	ldr	r3, [r7, #12]
 810b088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810b08c:	2b00      	cmp	r3, #0
 810b08e:	d00f      	beq.n	810b0b0 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810b090:	687b      	ldr	r3, [r7, #4]
 810b092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b096:	f043 0201 	orr.w	r2, r3, #1
 810b09a:	687b      	ldr	r3, [r7, #4]
 810b09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	681b      	ldr	r3, [r3, #0]
 810b0a4:	699a      	ldr	r2, [r3, #24]
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	681b      	ldr	r3, [r3, #0]
 810b0aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b0ae:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810b0b0:	68fb      	ldr	r3, [r7, #12]
 810b0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b0b6:	2b00      	cmp	r3, #0
 810b0b8:	d00f      	beq.n	810b0da <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810b0ba:	687b      	ldr	r3, [r7, #4]
 810b0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b0c0:	f043 0208 	orr.w	r2, r3, #8
 810b0c4:	687b      	ldr	r3, [r7, #4]
 810b0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810b0ca:	687b      	ldr	r3, [r7, #4]
 810b0cc:	681b      	ldr	r3, [r3, #0]
 810b0ce:	699a      	ldr	r2, [r3, #24]
 810b0d0:	687b      	ldr	r3, [r7, #4]
 810b0d2:	681b      	ldr	r3, [r3, #0]
 810b0d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810b0d8:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810b0da:	687b      	ldr	r3, [r7, #4]
 810b0dc:	2200      	movs	r2, #0
 810b0de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810b0e2:	687b      	ldr	r3, [r7, #4]
 810b0e4:	2200      	movs	r2, #0
 810b0e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810b0ea:	bf00      	nop
 810b0ec:	3714      	adds	r7, #20
 810b0ee:	46bd      	mov	sp, r7
 810b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0f4:	4770      	bx	lr

0810b0f6 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810b0f6:	b480      	push	{r7}
 810b0f8:	b085      	sub	sp, #20
 810b0fa:	af00      	add	r7, sp, #0
 810b0fc:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b102:	095b      	lsrs	r3, r3, #5
 810b104:	3301      	adds	r3, #1
 810b106:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810b108:	687b      	ldr	r3, [r7, #4]
 810b10a:	68db      	ldr	r3, [r3, #12]
 810b10c:	3301      	adds	r3, #1
 810b10e:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810b110:	68bb      	ldr	r3, [r7, #8]
 810b112:	3307      	adds	r3, #7
 810b114:	08db      	lsrs	r3, r3, #3
 810b116:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810b118:	68bb      	ldr	r3, [r7, #8]
 810b11a:	68fa      	ldr	r2, [r7, #12]
 810b11c:	fb02 f303 	mul.w	r3, r2, r3
}
 810b120:	4618      	mov	r0, r3
 810b122:	3714      	adds	r7, #20
 810b124:	46bd      	mov	sp, r7
 810b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b12a:	4770      	bx	lr

0810b12c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810b12c:	b580      	push	{r7, lr}
 810b12e:	b082      	sub	sp, #8
 810b130:	af00      	add	r7, sp, #0
 810b132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810b134:	687b      	ldr	r3, [r7, #4]
 810b136:	2b00      	cmp	r3, #0
 810b138:	d101      	bne.n	810b13e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810b13a:	2301      	movs	r3, #1
 810b13c:	e042      	b.n	810b1c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810b13e:	687b      	ldr	r3, [r7, #4]
 810b140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b144:	2b00      	cmp	r3, #0
 810b146:	d106      	bne.n	810b156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810b148:	687b      	ldr	r3, [r7, #4]
 810b14a:	2200      	movs	r2, #0
 810b14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810b150:	6878      	ldr	r0, [r7, #4]
 810b152:	f7f8 f9d5 	bl	8103500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	2224      	movs	r2, #36	; 0x24
 810b15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	681b      	ldr	r3, [r3, #0]
 810b162:	681a      	ldr	r2, [r3, #0]
 810b164:	687b      	ldr	r3, [r7, #4]
 810b166:	681b      	ldr	r3, [r3, #0]
 810b168:	f022 0201 	bic.w	r2, r2, #1
 810b16c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810b16e:	6878      	ldr	r0, [r7, #4]
 810b170:	f000 fbd6 	bl	810b920 <UART_SetConfig>
 810b174:	4603      	mov	r3, r0
 810b176:	2b01      	cmp	r3, #1
 810b178:	d101      	bne.n	810b17e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810b17a:	2301      	movs	r3, #1
 810b17c:	e022      	b.n	810b1c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810b17e:	687b      	ldr	r3, [r7, #4]
 810b180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b182:	2b00      	cmp	r3, #0
 810b184:	d002      	beq.n	810b18c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810b186:	6878      	ldr	r0, [r7, #4]
 810b188:	f001 f92a 	bl	810c3e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810b18c:	687b      	ldr	r3, [r7, #4]
 810b18e:	681b      	ldr	r3, [r3, #0]
 810b190:	685a      	ldr	r2, [r3, #4]
 810b192:	687b      	ldr	r3, [r7, #4]
 810b194:	681b      	ldr	r3, [r3, #0]
 810b196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810b19a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	681b      	ldr	r3, [r3, #0]
 810b1a0:	689a      	ldr	r2, [r3, #8]
 810b1a2:	687b      	ldr	r3, [r7, #4]
 810b1a4:	681b      	ldr	r3, [r3, #0]
 810b1a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810b1aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810b1ac:	687b      	ldr	r3, [r7, #4]
 810b1ae:	681b      	ldr	r3, [r3, #0]
 810b1b0:	681a      	ldr	r2, [r3, #0]
 810b1b2:	687b      	ldr	r3, [r7, #4]
 810b1b4:	681b      	ldr	r3, [r3, #0]
 810b1b6:	f042 0201 	orr.w	r2, r2, #1
 810b1ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810b1bc:	6878      	ldr	r0, [r7, #4]
 810b1be:	f001 f9b1 	bl	810c524 <UART_CheckIdleState>
 810b1c2:	4603      	mov	r3, r0
}
 810b1c4:	4618      	mov	r0, r3
 810b1c6:	3708      	adds	r7, #8
 810b1c8:	46bd      	mov	sp, r7
 810b1ca:	bd80      	pop	{r7, pc}

0810b1cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b1cc:	b580      	push	{r7, lr}
 810b1ce:	b084      	sub	sp, #16
 810b1d0:	af00      	add	r7, sp, #0
 810b1d2:	60f8      	str	r0, [r7, #12]
 810b1d4:	60b9      	str	r1, [r7, #8]
 810b1d6:	4613      	mov	r3, r2
 810b1d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b1da:	68fb      	ldr	r3, [r7, #12]
 810b1dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b1e0:	2b20      	cmp	r3, #32
 810b1e2:	d168      	bne.n	810b2b6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810b1e4:	68bb      	ldr	r3, [r7, #8]
 810b1e6:	2b00      	cmp	r3, #0
 810b1e8:	d002      	beq.n	810b1f0 <HAL_UART_Transmit_DMA+0x24>
 810b1ea:	88fb      	ldrh	r3, [r7, #6]
 810b1ec:	2b00      	cmp	r3, #0
 810b1ee:	d101      	bne.n	810b1f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810b1f0:	2301      	movs	r3, #1
 810b1f2:	e061      	b.n	810b2b8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810b1f4:	68fb      	ldr	r3, [r7, #12]
 810b1f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b1fa:	2b01      	cmp	r3, #1
 810b1fc:	d101      	bne.n	810b202 <HAL_UART_Transmit_DMA+0x36>
 810b1fe:	2302      	movs	r3, #2
 810b200:	e05a      	b.n	810b2b8 <HAL_UART_Transmit_DMA+0xec>
 810b202:	68fb      	ldr	r3, [r7, #12]
 810b204:	2201      	movs	r2, #1
 810b206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810b20a:	68fb      	ldr	r3, [r7, #12]
 810b20c:	68ba      	ldr	r2, [r7, #8]
 810b20e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810b210:	68fb      	ldr	r3, [r7, #12]
 810b212:	88fa      	ldrh	r2, [r7, #6]
 810b214:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810b218:	68fb      	ldr	r3, [r7, #12]
 810b21a:	88fa      	ldrh	r2, [r7, #6]
 810b21c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b220:	68fb      	ldr	r3, [r7, #12]
 810b222:	2200      	movs	r2, #0
 810b224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b228:	68fb      	ldr	r3, [r7, #12]
 810b22a:	2221      	movs	r2, #33	; 0x21
 810b22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810b230:	68fb      	ldr	r3, [r7, #12]
 810b232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b234:	2b00      	cmp	r3, #0
 810b236:	d02c      	beq.n	810b292 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810b238:	68fb      	ldr	r3, [r7, #12]
 810b23a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b23c:	4a20      	ldr	r2, [pc, #128]	; (810b2c0 <HAL_UART_Transmit_DMA+0xf4>)
 810b23e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810b240:	68fb      	ldr	r3, [r7, #12]
 810b242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b244:	4a1f      	ldr	r2, [pc, #124]	; (810b2c4 <HAL_UART_Transmit_DMA+0xf8>)
 810b246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810b248:	68fb      	ldr	r3, [r7, #12]
 810b24a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b24c:	4a1e      	ldr	r2, [pc, #120]	; (810b2c8 <HAL_UART_Transmit_DMA+0xfc>)
 810b24e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810b250:	68fb      	ldr	r3, [r7, #12]
 810b252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b254:	2200      	movs	r2, #0
 810b256:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810b258:	68fb      	ldr	r3, [r7, #12]
 810b25a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810b25c:	68fb      	ldr	r3, [r7, #12]
 810b25e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b260:	4619      	mov	r1, r3
 810b262:	68fb      	ldr	r3, [r7, #12]
 810b264:	681b      	ldr	r3, [r3, #0]
 810b266:	3328      	adds	r3, #40	; 0x28
 810b268:	461a      	mov	r2, r3
 810b26a:	88fb      	ldrh	r3, [r7, #6]
 810b26c:	f7f9 fa8c 	bl	8104788 <HAL_DMA_Start_IT>
 810b270:	4603      	mov	r3, r0
 810b272:	2b00      	cmp	r3, #0
 810b274:	d00d      	beq.n	810b292 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810b276:	68fb      	ldr	r3, [r7, #12]
 810b278:	2210      	movs	r2, #16
 810b27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810b27e:	68fb      	ldr	r3, [r7, #12]
 810b280:	2200      	movs	r2, #0
 810b282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810b286:	68fb      	ldr	r3, [r7, #12]
 810b288:	2220      	movs	r2, #32
 810b28a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810b28e:	2301      	movs	r3, #1
 810b290:	e012      	b.n	810b2b8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810b292:	68fb      	ldr	r3, [r7, #12]
 810b294:	681b      	ldr	r3, [r3, #0]
 810b296:	2240      	movs	r2, #64	; 0x40
 810b298:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810b29a:	68fb      	ldr	r3, [r7, #12]
 810b29c:	2200      	movs	r2, #0
 810b29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b2a2:	68fb      	ldr	r3, [r7, #12]
 810b2a4:	681b      	ldr	r3, [r3, #0]
 810b2a6:	689a      	ldr	r2, [r3, #8]
 810b2a8:	68fb      	ldr	r3, [r7, #12]
 810b2aa:	681b      	ldr	r3, [r3, #0]
 810b2ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810b2b0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810b2b2:	2300      	movs	r3, #0
 810b2b4:	e000      	b.n	810b2b8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810b2b6:	2302      	movs	r3, #2
  }
}
 810b2b8:	4618      	mov	r0, r3
 810b2ba:	3710      	adds	r7, #16
 810b2bc:	46bd      	mov	sp, r7
 810b2be:	bd80      	pop	{r7, pc}
 810b2c0:	0810c839 	.word	0x0810c839
 810b2c4:	0810c889 	.word	0x0810c889
 810b2c8:	0810c973 	.word	0x0810c973

0810b2cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b2cc:	b580      	push	{r7, lr}
 810b2ce:	b084      	sub	sp, #16
 810b2d0:	af00      	add	r7, sp, #0
 810b2d2:	60f8      	str	r0, [r7, #12]
 810b2d4:	60b9      	str	r1, [r7, #8]
 810b2d6:	4613      	mov	r3, r2
 810b2d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b2da:	68fb      	ldr	r3, [r7, #12]
 810b2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b2e0:	2b20      	cmp	r3, #32
 810b2e2:	d131      	bne.n	810b348 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810b2e4:	68bb      	ldr	r3, [r7, #8]
 810b2e6:	2b00      	cmp	r3, #0
 810b2e8:	d002      	beq.n	810b2f0 <HAL_UART_Receive_DMA+0x24>
 810b2ea:	88fb      	ldrh	r3, [r7, #6]
 810b2ec:	2b00      	cmp	r3, #0
 810b2ee:	d101      	bne.n	810b2f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810b2f0:	2301      	movs	r3, #1
 810b2f2:	e02a      	b.n	810b34a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810b2f4:	68fb      	ldr	r3, [r7, #12]
 810b2f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b2fa:	2b01      	cmp	r3, #1
 810b2fc:	d101      	bne.n	810b302 <HAL_UART_Receive_DMA+0x36>
 810b2fe:	2302      	movs	r3, #2
 810b300:	e023      	b.n	810b34a <HAL_UART_Receive_DMA+0x7e>
 810b302:	68fb      	ldr	r3, [r7, #12]
 810b304:	2201      	movs	r2, #1
 810b306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b30a:	68fb      	ldr	r3, [r7, #12]
 810b30c:	2200      	movs	r2, #0
 810b30e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b310:	68fb      	ldr	r3, [r7, #12]
 810b312:	681b      	ldr	r3, [r3, #0]
 810b314:	4a0f      	ldr	r2, [pc, #60]	; (810b354 <HAL_UART_Receive_DMA+0x88>)
 810b316:	4293      	cmp	r3, r2
 810b318:	d00e      	beq.n	810b338 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b31a:	68fb      	ldr	r3, [r7, #12]
 810b31c:	681b      	ldr	r3, [r3, #0]
 810b31e:	685b      	ldr	r3, [r3, #4]
 810b320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b324:	2b00      	cmp	r3, #0
 810b326:	d007      	beq.n	810b338 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b328:	68fb      	ldr	r3, [r7, #12]
 810b32a:	681b      	ldr	r3, [r3, #0]
 810b32c:	681a      	ldr	r2, [r3, #0]
 810b32e:	68fb      	ldr	r3, [r7, #12]
 810b330:	681b      	ldr	r3, [r3, #0]
 810b332:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810b336:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810b338:	88fb      	ldrh	r3, [r7, #6]
 810b33a:	461a      	mov	r2, r3
 810b33c:	68b9      	ldr	r1, [r7, #8]
 810b33e:	68f8      	ldr	r0, [r7, #12]
 810b340:	f001 f9bc 	bl	810c6bc <UART_Start_Receive_DMA>
 810b344:	4603      	mov	r3, r0
 810b346:	e000      	b.n	810b34a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810b348:	2302      	movs	r3, #2
  }
}
 810b34a:	4618      	mov	r0, r3
 810b34c:	3710      	adds	r7, #16
 810b34e:	46bd      	mov	sp, r7
 810b350:	bd80      	pop	{r7, pc}
 810b352:	bf00      	nop
 810b354:	58000c00 	.word	0x58000c00

0810b358 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810b358:	b580      	push	{r7, lr}
 810b35a:	b088      	sub	sp, #32
 810b35c:	af00      	add	r7, sp, #0
 810b35e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810b360:	687b      	ldr	r3, [r7, #4]
 810b362:	681b      	ldr	r3, [r3, #0]
 810b364:	69db      	ldr	r3, [r3, #28]
 810b366:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810b368:	687b      	ldr	r3, [r7, #4]
 810b36a:	681b      	ldr	r3, [r3, #0]
 810b36c:	681b      	ldr	r3, [r3, #0]
 810b36e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	681b      	ldr	r3, [r3, #0]
 810b374:	689b      	ldr	r3, [r3, #8]
 810b376:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810b378:	69fa      	ldr	r2, [r7, #28]
 810b37a:	f640 030f 	movw	r3, #2063	; 0x80f
 810b37e:	4013      	ands	r3, r2
 810b380:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810b382:	693b      	ldr	r3, [r7, #16]
 810b384:	2b00      	cmp	r3, #0
 810b386:	d118      	bne.n	810b3ba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810b388:	69fb      	ldr	r3, [r7, #28]
 810b38a:	f003 0320 	and.w	r3, r3, #32
 810b38e:	2b00      	cmp	r3, #0
 810b390:	d013      	beq.n	810b3ba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810b392:	69bb      	ldr	r3, [r7, #24]
 810b394:	f003 0320 	and.w	r3, r3, #32
 810b398:	2b00      	cmp	r3, #0
 810b39a:	d104      	bne.n	810b3a6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810b39c:	697b      	ldr	r3, [r7, #20]
 810b39e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810b3a2:	2b00      	cmp	r3, #0
 810b3a4:	d009      	beq.n	810b3ba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810b3a6:	687b      	ldr	r3, [r7, #4]
 810b3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b3aa:	2b00      	cmp	r3, #0
 810b3ac:	f000 8282 	beq.w	810b8b4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810b3b0:	687b      	ldr	r3, [r7, #4]
 810b3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b3b4:	6878      	ldr	r0, [r7, #4]
 810b3b6:	4798      	blx	r3
      }
      return;
 810b3b8:	e27c      	b.n	810b8b4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810b3ba:	693b      	ldr	r3, [r7, #16]
 810b3bc:	2b00      	cmp	r3, #0
 810b3be:	f000 80ef 	beq.w	810b5a0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810b3c2:	697a      	ldr	r2, [r7, #20]
 810b3c4:	4b73      	ldr	r3, [pc, #460]	; (810b594 <HAL_UART_IRQHandler+0x23c>)
 810b3c6:	4013      	ands	r3, r2
 810b3c8:	2b00      	cmp	r3, #0
 810b3ca:	d105      	bne.n	810b3d8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810b3cc:	69ba      	ldr	r2, [r7, #24]
 810b3ce:	4b72      	ldr	r3, [pc, #456]	; (810b598 <HAL_UART_IRQHandler+0x240>)
 810b3d0:	4013      	ands	r3, r2
 810b3d2:	2b00      	cmp	r3, #0
 810b3d4:	f000 80e4 	beq.w	810b5a0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b3d8:	69fb      	ldr	r3, [r7, #28]
 810b3da:	f003 0301 	and.w	r3, r3, #1
 810b3de:	2b00      	cmp	r3, #0
 810b3e0:	d010      	beq.n	810b404 <HAL_UART_IRQHandler+0xac>
 810b3e2:	69bb      	ldr	r3, [r7, #24]
 810b3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b3e8:	2b00      	cmp	r3, #0
 810b3ea:	d00b      	beq.n	810b404 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b3ec:	687b      	ldr	r3, [r7, #4]
 810b3ee:	681b      	ldr	r3, [r3, #0]
 810b3f0:	2201      	movs	r2, #1
 810b3f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b3fa:	f043 0201 	orr.w	r2, r3, #1
 810b3fe:	687b      	ldr	r3, [r7, #4]
 810b400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b404:	69fb      	ldr	r3, [r7, #28]
 810b406:	f003 0302 	and.w	r3, r3, #2
 810b40a:	2b00      	cmp	r3, #0
 810b40c:	d010      	beq.n	810b430 <HAL_UART_IRQHandler+0xd8>
 810b40e:	697b      	ldr	r3, [r7, #20]
 810b410:	f003 0301 	and.w	r3, r3, #1
 810b414:	2b00      	cmp	r3, #0
 810b416:	d00b      	beq.n	810b430 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b418:	687b      	ldr	r3, [r7, #4]
 810b41a:	681b      	ldr	r3, [r3, #0]
 810b41c:	2202      	movs	r2, #2
 810b41e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b420:	687b      	ldr	r3, [r7, #4]
 810b422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b426:	f043 0204 	orr.w	r2, r3, #4
 810b42a:	687b      	ldr	r3, [r7, #4]
 810b42c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b430:	69fb      	ldr	r3, [r7, #28]
 810b432:	f003 0304 	and.w	r3, r3, #4
 810b436:	2b00      	cmp	r3, #0
 810b438:	d010      	beq.n	810b45c <HAL_UART_IRQHandler+0x104>
 810b43a:	697b      	ldr	r3, [r7, #20]
 810b43c:	f003 0301 	and.w	r3, r3, #1
 810b440:	2b00      	cmp	r3, #0
 810b442:	d00b      	beq.n	810b45c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b444:	687b      	ldr	r3, [r7, #4]
 810b446:	681b      	ldr	r3, [r3, #0]
 810b448:	2204      	movs	r2, #4
 810b44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b44c:	687b      	ldr	r3, [r7, #4]
 810b44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b452:	f043 0202 	orr.w	r2, r3, #2
 810b456:	687b      	ldr	r3, [r7, #4]
 810b458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810b45c:	69fb      	ldr	r3, [r7, #28]
 810b45e:	f003 0308 	and.w	r3, r3, #8
 810b462:	2b00      	cmp	r3, #0
 810b464:	d015      	beq.n	810b492 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810b466:	69bb      	ldr	r3, [r7, #24]
 810b468:	f003 0320 	and.w	r3, r3, #32
 810b46c:	2b00      	cmp	r3, #0
 810b46e:	d104      	bne.n	810b47a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810b470:	697a      	ldr	r2, [r7, #20]
 810b472:	4b48      	ldr	r3, [pc, #288]	; (810b594 <HAL_UART_IRQHandler+0x23c>)
 810b474:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810b476:	2b00      	cmp	r3, #0
 810b478:	d00b      	beq.n	810b492 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b47a:	687b      	ldr	r3, [r7, #4]
 810b47c:	681b      	ldr	r3, [r3, #0]
 810b47e:	2208      	movs	r2, #8
 810b480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810b482:	687b      	ldr	r3, [r7, #4]
 810b484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b488:	f043 0208 	orr.w	r2, r3, #8
 810b48c:	687b      	ldr	r3, [r7, #4]
 810b48e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810b492:	69fb      	ldr	r3, [r7, #28]
 810b494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b498:	2b00      	cmp	r3, #0
 810b49a:	d011      	beq.n	810b4c0 <HAL_UART_IRQHandler+0x168>
 810b49c:	69bb      	ldr	r3, [r7, #24]
 810b49e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810b4a2:	2b00      	cmp	r3, #0
 810b4a4:	d00c      	beq.n	810b4c0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b4a6:	687b      	ldr	r3, [r7, #4]
 810b4a8:	681b      	ldr	r3, [r3, #0]
 810b4aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b4b6:	f043 0220 	orr.w	r2, r3, #32
 810b4ba:	687b      	ldr	r3, [r7, #4]
 810b4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b4c0:	687b      	ldr	r3, [r7, #4]
 810b4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b4c6:	2b00      	cmp	r3, #0
 810b4c8:	f000 81f6 	beq.w	810b8b8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810b4cc:	69fb      	ldr	r3, [r7, #28]
 810b4ce:	f003 0320 	and.w	r3, r3, #32
 810b4d2:	2b00      	cmp	r3, #0
 810b4d4:	d011      	beq.n	810b4fa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810b4d6:	69bb      	ldr	r3, [r7, #24]
 810b4d8:	f003 0320 	and.w	r3, r3, #32
 810b4dc:	2b00      	cmp	r3, #0
 810b4de:	d104      	bne.n	810b4ea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810b4e0:	697b      	ldr	r3, [r7, #20]
 810b4e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810b4e6:	2b00      	cmp	r3, #0
 810b4e8:	d007      	beq.n	810b4fa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810b4ea:	687b      	ldr	r3, [r7, #4]
 810b4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b4ee:	2b00      	cmp	r3, #0
 810b4f0:	d003      	beq.n	810b4fa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810b4f2:	687b      	ldr	r3, [r7, #4]
 810b4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b4f6:	6878      	ldr	r0, [r7, #4]
 810b4f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810b4fa:	687b      	ldr	r3, [r7, #4]
 810b4fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b500:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810b502:	687b      	ldr	r3, [r7, #4]
 810b504:	681b      	ldr	r3, [r3, #0]
 810b506:	689b      	ldr	r3, [r3, #8]
 810b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b50c:	2b40      	cmp	r3, #64	; 0x40
 810b50e:	d004      	beq.n	810b51a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810b510:	68fb      	ldr	r3, [r7, #12]
 810b512:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810b516:	2b00      	cmp	r3, #0
 810b518:	d031      	beq.n	810b57e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810b51a:	6878      	ldr	r0, [r7, #4]
 810b51c:	f001 f95a 	bl	810c7d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b520:	687b      	ldr	r3, [r7, #4]
 810b522:	681b      	ldr	r3, [r3, #0]
 810b524:	689b      	ldr	r3, [r3, #8]
 810b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b52a:	2b40      	cmp	r3, #64	; 0x40
 810b52c:	d123      	bne.n	810b576 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b52e:	687b      	ldr	r3, [r7, #4]
 810b530:	681b      	ldr	r3, [r3, #0]
 810b532:	689a      	ldr	r2, [r3, #8]
 810b534:	687b      	ldr	r3, [r7, #4]
 810b536:	681b      	ldr	r3, [r3, #0]
 810b538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810b53c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810b53e:	687b      	ldr	r3, [r7, #4]
 810b540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b542:	2b00      	cmp	r3, #0
 810b544:	d013      	beq.n	810b56e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810b546:	687b      	ldr	r3, [r7, #4]
 810b548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b54a:	4a14      	ldr	r2, [pc, #80]	; (810b59c <HAL_UART_IRQHandler+0x244>)
 810b54c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810b54e:	687b      	ldr	r3, [r7, #4]
 810b550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b552:	4618      	mov	r0, r3
 810b554:	f7f9 fea0 	bl	8105298 <HAL_DMA_Abort_IT>
 810b558:	4603      	mov	r3, r0
 810b55a:	2b00      	cmp	r3, #0
 810b55c:	d017      	beq.n	810b58e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810b55e:	687b      	ldr	r3, [r7, #4]
 810b560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b564:	687a      	ldr	r2, [r7, #4]
 810b566:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810b568:	4610      	mov	r0, r2
 810b56a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b56c:	e00f      	b.n	810b58e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810b56e:	6878      	ldr	r0, [r7, #4]
 810b570:	f000 f9c0 	bl	810b8f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b574:	e00b      	b.n	810b58e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b576:	6878      	ldr	r0, [r7, #4]
 810b578:	f000 f9bc 	bl	810b8f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b57c:	e007      	b.n	810b58e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810b57e:	6878      	ldr	r0, [r7, #4]
 810b580:	f000 f9b8 	bl	810b8f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b584:	687b      	ldr	r3, [r7, #4]
 810b586:	2200      	movs	r2, #0
 810b588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810b58c:	e194      	b.n	810b8b8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b58e:	bf00      	nop
    return;
 810b590:	e192      	b.n	810b8b8 <HAL_UART_IRQHandler+0x560>
 810b592:	bf00      	nop
 810b594:	10000001 	.word	0x10000001
 810b598:	04000120 	.word	0x04000120
 810b59c:	0810c9f3 	.word	0x0810c9f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b5a0:	687b      	ldr	r3, [r7, #4]
 810b5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810b5a4:	2b01      	cmp	r3, #1
 810b5a6:	f040 8111 	bne.w	810b7cc <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810b5aa:	69fb      	ldr	r3, [r7, #28]
 810b5ac:	f003 0310 	and.w	r3, r3, #16
 810b5b0:	2b00      	cmp	r3, #0
 810b5b2:	f000 810b 	beq.w	810b7cc <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810b5b6:	69bb      	ldr	r3, [r7, #24]
 810b5b8:	f003 0310 	and.w	r3, r3, #16
 810b5bc:	2b00      	cmp	r3, #0
 810b5be:	f000 8105 	beq.w	810b7cc <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	681b      	ldr	r3, [r3, #0]
 810b5c6:	2210      	movs	r2, #16
 810b5c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b5ca:	687b      	ldr	r3, [r7, #4]
 810b5cc:	681b      	ldr	r3, [r3, #0]
 810b5ce:	689b      	ldr	r3, [r3, #8]
 810b5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b5d4:	2b40      	cmp	r3, #64	; 0x40
 810b5d6:	f040 80bb 	bne.w	810b750 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810b5da:	687b      	ldr	r3, [r7, #4]
 810b5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b5de:	681b      	ldr	r3, [r3, #0]
 810b5e0:	4a97      	ldr	r2, [pc, #604]	; (810b840 <HAL_UART_IRQHandler+0x4e8>)
 810b5e2:	4293      	cmp	r3, r2
 810b5e4:	d059      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b5e6:	687b      	ldr	r3, [r7, #4]
 810b5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b5ea:	681b      	ldr	r3, [r3, #0]
 810b5ec:	4a95      	ldr	r2, [pc, #596]	; (810b844 <HAL_UART_IRQHandler+0x4ec>)
 810b5ee:	4293      	cmp	r3, r2
 810b5f0:	d053      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b5f2:	687b      	ldr	r3, [r7, #4]
 810b5f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b5f6:	681b      	ldr	r3, [r3, #0]
 810b5f8:	4a93      	ldr	r2, [pc, #588]	; (810b848 <HAL_UART_IRQHandler+0x4f0>)
 810b5fa:	4293      	cmp	r3, r2
 810b5fc:	d04d      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b5fe:	687b      	ldr	r3, [r7, #4]
 810b600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b602:	681b      	ldr	r3, [r3, #0]
 810b604:	4a91      	ldr	r2, [pc, #580]	; (810b84c <HAL_UART_IRQHandler+0x4f4>)
 810b606:	4293      	cmp	r3, r2
 810b608:	d047      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b60a:	687b      	ldr	r3, [r7, #4]
 810b60c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b60e:	681b      	ldr	r3, [r3, #0]
 810b610:	4a8f      	ldr	r2, [pc, #572]	; (810b850 <HAL_UART_IRQHandler+0x4f8>)
 810b612:	4293      	cmp	r3, r2
 810b614:	d041      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b616:	687b      	ldr	r3, [r7, #4]
 810b618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b61a:	681b      	ldr	r3, [r3, #0]
 810b61c:	4a8d      	ldr	r2, [pc, #564]	; (810b854 <HAL_UART_IRQHandler+0x4fc>)
 810b61e:	4293      	cmp	r3, r2
 810b620:	d03b      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b622:	687b      	ldr	r3, [r7, #4]
 810b624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b626:	681b      	ldr	r3, [r3, #0]
 810b628:	4a8b      	ldr	r2, [pc, #556]	; (810b858 <HAL_UART_IRQHandler+0x500>)
 810b62a:	4293      	cmp	r3, r2
 810b62c:	d035      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b62e:	687b      	ldr	r3, [r7, #4]
 810b630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b632:	681b      	ldr	r3, [r3, #0]
 810b634:	4a89      	ldr	r2, [pc, #548]	; (810b85c <HAL_UART_IRQHandler+0x504>)
 810b636:	4293      	cmp	r3, r2
 810b638:	d02f      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b63a:	687b      	ldr	r3, [r7, #4]
 810b63c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b63e:	681b      	ldr	r3, [r3, #0]
 810b640:	4a87      	ldr	r2, [pc, #540]	; (810b860 <HAL_UART_IRQHandler+0x508>)
 810b642:	4293      	cmp	r3, r2
 810b644:	d029      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b646:	687b      	ldr	r3, [r7, #4]
 810b648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b64a:	681b      	ldr	r3, [r3, #0]
 810b64c:	4a85      	ldr	r2, [pc, #532]	; (810b864 <HAL_UART_IRQHandler+0x50c>)
 810b64e:	4293      	cmp	r3, r2
 810b650:	d023      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b652:	687b      	ldr	r3, [r7, #4]
 810b654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b656:	681b      	ldr	r3, [r3, #0]
 810b658:	4a83      	ldr	r2, [pc, #524]	; (810b868 <HAL_UART_IRQHandler+0x510>)
 810b65a:	4293      	cmp	r3, r2
 810b65c:	d01d      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b65e:	687b      	ldr	r3, [r7, #4]
 810b660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b662:	681b      	ldr	r3, [r3, #0]
 810b664:	4a81      	ldr	r2, [pc, #516]	; (810b86c <HAL_UART_IRQHandler+0x514>)
 810b666:	4293      	cmp	r3, r2
 810b668:	d017      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b66a:	687b      	ldr	r3, [r7, #4]
 810b66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b66e:	681b      	ldr	r3, [r3, #0]
 810b670:	4a7f      	ldr	r2, [pc, #508]	; (810b870 <HAL_UART_IRQHandler+0x518>)
 810b672:	4293      	cmp	r3, r2
 810b674:	d011      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b676:	687b      	ldr	r3, [r7, #4]
 810b678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	4a7d      	ldr	r2, [pc, #500]	; (810b874 <HAL_UART_IRQHandler+0x51c>)
 810b67e:	4293      	cmp	r3, r2
 810b680:	d00b      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b682:	687b      	ldr	r3, [r7, #4]
 810b684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b686:	681b      	ldr	r3, [r3, #0]
 810b688:	4a7b      	ldr	r2, [pc, #492]	; (810b878 <HAL_UART_IRQHandler+0x520>)
 810b68a:	4293      	cmp	r3, r2
 810b68c:	d005      	beq.n	810b69a <HAL_UART_IRQHandler+0x342>
 810b68e:	687b      	ldr	r3, [r7, #4]
 810b690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b692:	681b      	ldr	r3, [r3, #0]
 810b694:	4a79      	ldr	r2, [pc, #484]	; (810b87c <HAL_UART_IRQHandler+0x524>)
 810b696:	4293      	cmp	r3, r2
 810b698:	d105      	bne.n	810b6a6 <HAL_UART_IRQHandler+0x34e>
 810b69a:	687b      	ldr	r3, [r7, #4]
 810b69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b69e:	681b      	ldr	r3, [r3, #0]
 810b6a0:	685b      	ldr	r3, [r3, #4]
 810b6a2:	b29b      	uxth	r3, r3
 810b6a4:	e004      	b.n	810b6b0 <HAL_UART_IRQHandler+0x358>
 810b6a6:	687b      	ldr	r3, [r7, #4]
 810b6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b6aa:	681b      	ldr	r3, [r3, #0]
 810b6ac:	685b      	ldr	r3, [r3, #4]
 810b6ae:	b29b      	uxth	r3, r3
 810b6b0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810b6b2:	893b      	ldrh	r3, [r7, #8]
 810b6b4:	2b00      	cmp	r3, #0
 810b6b6:	f000 8101 	beq.w	810b8bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810b6ba:	687b      	ldr	r3, [r7, #4]
 810b6bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810b6c0:	893a      	ldrh	r2, [r7, #8]
 810b6c2:	429a      	cmp	r2, r3
 810b6c4:	f080 80fa 	bcs.w	810b8bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810b6c8:	687b      	ldr	r3, [r7, #4]
 810b6ca:	893a      	ldrh	r2, [r7, #8]
 810b6cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810b6d0:	687b      	ldr	r3, [r7, #4]
 810b6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b6d4:	69db      	ldr	r3, [r3, #28]
 810b6d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b6da:	d02b      	beq.n	810b734 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b6dc:	687b      	ldr	r3, [r7, #4]
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	681a      	ldr	r2, [r3, #0]
 810b6e2:	687b      	ldr	r3, [r7, #4]
 810b6e4:	681b      	ldr	r3, [r3, #0]
 810b6e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810b6ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b6ec:	687b      	ldr	r3, [r7, #4]
 810b6ee:	681b      	ldr	r3, [r3, #0]
 810b6f0:	689a      	ldr	r2, [r3, #8]
 810b6f2:	687b      	ldr	r3, [r7, #4]
 810b6f4:	681b      	ldr	r3, [r3, #0]
 810b6f6:	f022 0201 	bic.w	r2, r2, #1
 810b6fa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b6fc:	687b      	ldr	r3, [r7, #4]
 810b6fe:	681b      	ldr	r3, [r3, #0]
 810b700:	689a      	ldr	r2, [r3, #8]
 810b702:	687b      	ldr	r3, [r7, #4]
 810b704:	681b      	ldr	r3, [r3, #0]
 810b706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810b70a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810b70c:	687b      	ldr	r3, [r7, #4]
 810b70e:	2220      	movs	r2, #32
 810b710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	2200      	movs	r2, #0
 810b718:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b71a:	687b      	ldr	r3, [r7, #4]
 810b71c:	681b      	ldr	r3, [r3, #0]
 810b71e:	681a      	ldr	r2, [r3, #0]
 810b720:	687b      	ldr	r3, [r7, #4]
 810b722:	681b      	ldr	r3, [r3, #0]
 810b724:	f022 0210 	bic.w	r2, r2, #16
 810b728:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810b72a:	687b      	ldr	r3, [r7, #4]
 810b72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b72e:	4618      	mov	r0, r3
 810b730:	f7f9 fa94 	bl	8104c5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810b734:	687b      	ldr	r3, [r7, #4]
 810b736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810b73a:	687b      	ldr	r3, [r7, #4]
 810b73c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b740:	b29b      	uxth	r3, r3
 810b742:	1ad3      	subs	r3, r2, r3
 810b744:	b29b      	uxth	r3, r3
 810b746:	4619      	mov	r1, r3
 810b748:	6878      	ldr	r0, [r7, #4]
 810b74a:	f000 f8dd 	bl	810b908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b74e:	e0b5      	b.n	810b8bc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810b750:	687b      	ldr	r3, [r7, #4]
 810b752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810b756:	687b      	ldr	r3, [r7, #4]
 810b758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b75c:	b29b      	uxth	r3, r3
 810b75e:	1ad3      	subs	r3, r2, r3
 810b760:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810b762:	687b      	ldr	r3, [r7, #4]
 810b764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b768:	b29b      	uxth	r3, r3
 810b76a:	2b00      	cmp	r3, #0
 810b76c:	f000 80a8 	beq.w	810b8c0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810b770:	897b      	ldrh	r3, [r7, #10]
 810b772:	2b00      	cmp	r3, #0
 810b774:	f000 80a4 	beq.w	810b8c0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b778:	687b      	ldr	r3, [r7, #4]
 810b77a:	681b      	ldr	r3, [r3, #0]
 810b77c:	681a      	ldr	r2, [r3, #0]
 810b77e:	687b      	ldr	r3, [r7, #4]
 810b780:	681b      	ldr	r3, [r3, #0]
 810b782:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810b786:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b788:	687b      	ldr	r3, [r7, #4]
 810b78a:	681b      	ldr	r3, [r3, #0]
 810b78c:	689b      	ldr	r3, [r3, #8]
 810b78e:	687a      	ldr	r2, [r7, #4]
 810b790:	6812      	ldr	r2, [r2, #0]
 810b792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b796:	f023 0301 	bic.w	r3, r3, #1
 810b79a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b79c:	687b      	ldr	r3, [r7, #4]
 810b79e:	2220      	movs	r2, #32
 810b7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b7a4:	687b      	ldr	r3, [r7, #4]
 810b7a6:	2200      	movs	r2, #0
 810b7a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b7aa:	687b      	ldr	r3, [r7, #4]
 810b7ac:	2200      	movs	r2, #0
 810b7ae:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b7b0:	687b      	ldr	r3, [r7, #4]
 810b7b2:	681b      	ldr	r3, [r3, #0]
 810b7b4:	681a      	ldr	r2, [r3, #0]
 810b7b6:	687b      	ldr	r3, [r7, #4]
 810b7b8:	681b      	ldr	r3, [r3, #0]
 810b7ba:	f022 0210 	bic.w	r2, r2, #16
 810b7be:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810b7c0:	897b      	ldrh	r3, [r7, #10]
 810b7c2:	4619      	mov	r1, r3
 810b7c4:	6878      	ldr	r0, [r7, #4]
 810b7c6:	f000 f89f 	bl	810b908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b7ca:	e079      	b.n	810b8c0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810b7cc:	69fb      	ldr	r3, [r7, #28]
 810b7ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810b7d2:	2b00      	cmp	r3, #0
 810b7d4:	d00d      	beq.n	810b7f2 <HAL_UART_IRQHandler+0x49a>
 810b7d6:	697b      	ldr	r3, [r7, #20]
 810b7d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810b7dc:	2b00      	cmp	r3, #0
 810b7de:	d008      	beq.n	810b7f2 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810b7e0:	687b      	ldr	r3, [r7, #4]
 810b7e2:	681b      	ldr	r3, [r3, #0]
 810b7e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810b7e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810b7ea:	6878      	ldr	r0, [r7, #4]
 810b7ec:	f001 f931 	bl	810ca52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b7f0:	e069      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810b7f2:	69fb      	ldr	r3, [r7, #28]
 810b7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b7f8:	2b00      	cmp	r3, #0
 810b7fa:	d012      	beq.n	810b822 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810b7fc:	69bb      	ldr	r3, [r7, #24]
 810b7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b802:	2b00      	cmp	r3, #0
 810b804:	d104      	bne.n	810b810 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810b806:	697b      	ldr	r3, [r7, #20]
 810b808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b80c:	2b00      	cmp	r3, #0
 810b80e:	d008      	beq.n	810b822 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810b810:	687b      	ldr	r3, [r7, #4]
 810b812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b814:	2b00      	cmp	r3, #0
 810b816:	d055      	beq.n	810b8c4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810b818:	687b      	ldr	r3, [r7, #4]
 810b81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b81c:	6878      	ldr	r0, [r7, #4]
 810b81e:	4798      	blx	r3
    }
    return;
 810b820:	e050      	b.n	810b8c4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810b822:	69fb      	ldr	r3, [r7, #28]
 810b824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b828:	2b00      	cmp	r3, #0
 810b82a:	d029      	beq.n	810b880 <HAL_UART_IRQHandler+0x528>
 810b82c:	69bb      	ldr	r3, [r7, #24]
 810b82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b832:	2b00      	cmp	r3, #0
 810b834:	d024      	beq.n	810b880 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810b836:	6878      	ldr	r0, [r7, #4]
 810b838:	f001 f8f1 	bl	810ca1e <UART_EndTransmit_IT>
    return;
 810b83c:	e043      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
 810b83e:	bf00      	nop
 810b840:	40020010 	.word	0x40020010
 810b844:	40020028 	.word	0x40020028
 810b848:	40020040 	.word	0x40020040
 810b84c:	40020058 	.word	0x40020058
 810b850:	40020070 	.word	0x40020070
 810b854:	40020088 	.word	0x40020088
 810b858:	400200a0 	.word	0x400200a0
 810b85c:	400200b8 	.word	0x400200b8
 810b860:	40020410 	.word	0x40020410
 810b864:	40020428 	.word	0x40020428
 810b868:	40020440 	.word	0x40020440
 810b86c:	40020458 	.word	0x40020458
 810b870:	40020470 	.word	0x40020470
 810b874:	40020488 	.word	0x40020488
 810b878:	400204a0 	.word	0x400204a0
 810b87c:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810b880:	69fb      	ldr	r3, [r7, #28]
 810b882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b886:	2b00      	cmp	r3, #0
 810b888:	d008      	beq.n	810b89c <HAL_UART_IRQHandler+0x544>
 810b88a:	69bb      	ldr	r3, [r7, #24]
 810b88c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810b890:	2b00      	cmp	r3, #0
 810b892:	d003      	beq.n	810b89c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810b894:	6878      	ldr	r0, [r7, #4]
 810b896:	f001 f8f0 	bl	810ca7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b89a:	e014      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810b89c:	69fb      	ldr	r3, [r7, #28]
 810b89e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810b8a2:	2b00      	cmp	r3, #0
 810b8a4:	d00f      	beq.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
 810b8a6:	69bb      	ldr	r3, [r7, #24]
 810b8a8:	2b00      	cmp	r3, #0
 810b8aa:	da0c      	bge.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810b8ac:	6878      	ldr	r0, [r7, #4]
 810b8ae:	f001 f8da 	bl	810ca66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b8b2:	e008      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
      return;
 810b8b4:	bf00      	nop
 810b8b6:	e006      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
    return;
 810b8b8:	bf00      	nop
 810b8ba:	e004      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
      return;
 810b8bc:	bf00      	nop
 810b8be:	e002      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
      return;
 810b8c0:	bf00      	nop
 810b8c2:	e000      	b.n	810b8c6 <HAL_UART_IRQHandler+0x56e>
    return;
 810b8c4:	bf00      	nop
  }
}
 810b8c6:	3720      	adds	r7, #32
 810b8c8:	46bd      	mov	sp, r7
 810b8ca:	bd80      	pop	{r7, pc}

0810b8cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b8cc:	b480      	push	{r7}
 810b8ce:	b083      	sub	sp, #12
 810b8d0:	af00      	add	r7, sp, #0
 810b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810b8d4:	bf00      	nop
 810b8d6:	370c      	adds	r7, #12
 810b8d8:	46bd      	mov	sp, r7
 810b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8de:	4770      	bx	lr

0810b8e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b8e0:	b480      	push	{r7}
 810b8e2:	b083      	sub	sp, #12
 810b8e4:	af00      	add	r7, sp, #0
 810b8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810b8e8:	bf00      	nop
 810b8ea:	370c      	adds	r7, #12
 810b8ec:	46bd      	mov	sp, r7
 810b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8f2:	4770      	bx	lr

0810b8f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810b8f4:	b480      	push	{r7}
 810b8f6:	b083      	sub	sp, #12
 810b8f8:	af00      	add	r7, sp, #0
 810b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810b8fc:	bf00      	nop
 810b8fe:	370c      	adds	r7, #12
 810b900:	46bd      	mov	sp, r7
 810b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b906:	4770      	bx	lr

0810b908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810b908:	b480      	push	{r7}
 810b90a:	b083      	sub	sp, #12
 810b90c:	af00      	add	r7, sp, #0
 810b90e:	6078      	str	r0, [r7, #4]
 810b910:	460b      	mov	r3, r1
 810b912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810b914:	bf00      	nop
 810b916:	370c      	adds	r7, #12
 810b918:	46bd      	mov	sp, r7
 810b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b91e:	4770      	bx	lr

0810b920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b920:	b5b0      	push	{r4, r5, r7, lr}
 810b922:	b08e      	sub	sp, #56	; 0x38
 810b924:	af00      	add	r7, sp, #0
 810b926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b928:	2300      	movs	r3, #0
 810b92a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b92e:	687b      	ldr	r3, [r7, #4]
 810b930:	689a      	ldr	r2, [r3, #8]
 810b932:	687b      	ldr	r3, [r7, #4]
 810b934:	691b      	ldr	r3, [r3, #16]
 810b936:	431a      	orrs	r2, r3
 810b938:	687b      	ldr	r3, [r7, #4]
 810b93a:	695b      	ldr	r3, [r3, #20]
 810b93c:	431a      	orrs	r2, r3
 810b93e:	687b      	ldr	r3, [r7, #4]
 810b940:	69db      	ldr	r3, [r3, #28]
 810b942:	4313      	orrs	r3, r2
 810b944:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b946:	687b      	ldr	r3, [r7, #4]
 810b948:	681b      	ldr	r3, [r3, #0]
 810b94a:	681a      	ldr	r2, [r3, #0]
 810b94c:	4bc0      	ldr	r3, [pc, #768]	; (810bc50 <UART_SetConfig+0x330>)
 810b94e:	4013      	ands	r3, r2
 810b950:	687a      	ldr	r2, [r7, #4]
 810b952:	6812      	ldr	r2, [r2, #0]
 810b954:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b956:	430b      	orrs	r3, r1
 810b958:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b95a:	687b      	ldr	r3, [r7, #4]
 810b95c:	681b      	ldr	r3, [r3, #0]
 810b95e:	685b      	ldr	r3, [r3, #4]
 810b960:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810b964:	687b      	ldr	r3, [r7, #4]
 810b966:	68da      	ldr	r2, [r3, #12]
 810b968:	687b      	ldr	r3, [r7, #4]
 810b96a:	681b      	ldr	r3, [r3, #0]
 810b96c:	430a      	orrs	r2, r1
 810b96e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	699b      	ldr	r3, [r3, #24]
 810b974:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b976:	687b      	ldr	r3, [r7, #4]
 810b978:	681b      	ldr	r3, [r3, #0]
 810b97a:	4ab6      	ldr	r2, [pc, #728]	; (810bc54 <UART_SetConfig+0x334>)
 810b97c:	4293      	cmp	r3, r2
 810b97e:	d004      	beq.n	810b98a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b980:	687b      	ldr	r3, [r7, #4]
 810b982:	6a1b      	ldr	r3, [r3, #32]
 810b984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b986:	4313      	orrs	r3, r2
 810b988:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b98a:	687b      	ldr	r3, [r7, #4]
 810b98c:	681b      	ldr	r3, [r3, #0]
 810b98e:	689b      	ldr	r3, [r3, #8]
 810b990:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810b994:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810b998:	687a      	ldr	r2, [r7, #4]
 810b99a:	6812      	ldr	r2, [r2, #0]
 810b99c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b99e:	430b      	orrs	r3, r1
 810b9a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b9a2:	687b      	ldr	r3, [r7, #4]
 810b9a4:	681b      	ldr	r3, [r3, #0]
 810b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b9a8:	f023 010f 	bic.w	r1, r3, #15
 810b9ac:	687b      	ldr	r3, [r7, #4]
 810b9ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810b9b0:	687b      	ldr	r3, [r7, #4]
 810b9b2:	681b      	ldr	r3, [r3, #0]
 810b9b4:	430a      	orrs	r2, r1
 810b9b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b9b8:	687b      	ldr	r3, [r7, #4]
 810b9ba:	681b      	ldr	r3, [r3, #0]
 810b9bc:	4aa6      	ldr	r2, [pc, #664]	; (810bc58 <UART_SetConfig+0x338>)
 810b9be:	4293      	cmp	r3, r2
 810b9c0:	d176      	bne.n	810bab0 <UART_SetConfig+0x190>
 810b9c2:	4ba6      	ldr	r3, [pc, #664]	; (810bc5c <UART_SetConfig+0x33c>)
 810b9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b9c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b9ca:	2b28      	cmp	r3, #40	; 0x28
 810b9cc:	d86c      	bhi.n	810baa8 <UART_SetConfig+0x188>
 810b9ce:	a201      	add	r2, pc, #4	; (adr r2, 810b9d4 <UART_SetConfig+0xb4>)
 810b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b9d4:	0810ba79 	.word	0x0810ba79
 810b9d8:	0810baa9 	.word	0x0810baa9
 810b9dc:	0810baa9 	.word	0x0810baa9
 810b9e0:	0810baa9 	.word	0x0810baa9
 810b9e4:	0810baa9 	.word	0x0810baa9
 810b9e8:	0810baa9 	.word	0x0810baa9
 810b9ec:	0810baa9 	.word	0x0810baa9
 810b9f0:	0810baa9 	.word	0x0810baa9
 810b9f4:	0810ba81 	.word	0x0810ba81
 810b9f8:	0810baa9 	.word	0x0810baa9
 810b9fc:	0810baa9 	.word	0x0810baa9
 810ba00:	0810baa9 	.word	0x0810baa9
 810ba04:	0810baa9 	.word	0x0810baa9
 810ba08:	0810baa9 	.word	0x0810baa9
 810ba0c:	0810baa9 	.word	0x0810baa9
 810ba10:	0810baa9 	.word	0x0810baa9
 810ba14:	0810ba89 	.word	0x0810ba89
 810ba18:	0810baa9 	.word	0x0810baa9
 810ba1c:	0810baa9 	.word	0x0810baa9
 810ba20:	0810baa9 	.word	0x0810baa9
 810ba24:	0810baa9 	.word	0x0810baa9
 810ba28:	0810baa9 	.word	0x0810baa9
 810ba2c:	0810baa9 	.word	0x0810baa9
 810ba30:	0810baa9 	.word	0x0810baa9
 810ba34:	0810ba91 	.word	0x0810ba91
 810ba38:	0810baa9 	.word	0x0810baa9
 810ba3c:	0810baa9 	.word	0x0810baa9
 810ba40:	0810baa9 	.word	0x0810baa9
 810ba44:	0810baa9 	.word	0x0810baa9
 810ba48:	0810baa9 	.word	0x0810baa9
 810ba4c:	0810baa9 	.word	0x0810baa9
 810ba50:	0810baa9 	.word	0x0810baa9
 810ba54:	0810ba99 	.word	0x0810ba99
 810ba58:	0810baa9 	.word	0x0810baa9
 810ba5c:	0810baa9 	.word	0x0810baa9
 810ba60:	0810baa9 	.word	0x0810baa9
 810ba64:	0810baa9 	.word	0x0810baa9
 810ba68:	0810baa9 	.word	0x0810baa9
 810ba6c:	0810baa9 	.word	0x0810baa9
 810ba70:	0810baa9 	.word	0x0810baa9
 810ba74:	0810baa1 	.word	0x0810baa1
 810ba78:	2301      	movs	r3, #1
 810ba7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba7e:	e220      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810ba80:	2304      	movs	r3, #4
 810ba82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba86:	e21c      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810ba88:	2308      	movs	r3, #8
 810ba8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba8e:	e218      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810ba90:	2310      	movs	r3, #16
 810ba92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba96:	e214      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810ba98:	2320      	movs	r3, #32
 810ba9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba9e:	e210      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810baa0:	2340      	movs	r3, #64	; 0x40
 810baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baa6:	e20c      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810baa8:	2380      	movs	r3, #128	; 0x80
 810baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baae:	e208      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bab0:	687b      	ldr	r3, [r7, #4]
 810bab2:	681b      	ldr	r3, [r3, #0]
 810bab4:	4a6a      	ldr	r2, [pc, #424]	; (810bc60 <UART_SetConfig+0x340>)
 810bab6:	4293      	cmp	r3, r2
 810bab8:	d130      	bne.n	810bb1c <UART_SetConfig+0x1fc>
 810baba:	4b68      	ldr	r3, [pc, #416]	; (810bc5c <UART_SetConfig+0x33c>)
 810babc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810babe:	f003 0307 	and.w	r3, r3, #7
 810bac2:	2b05      	cmp	r3, #5
 810bac4:	d826      	bhi.n	810bb14 <UART_SetConfig+0x1f4>
 810bac6:	a201      	add	r2, pc, #4	; (adr r2, 810bacc <UART_SetConfig+0x1ac>)
 810bac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bacc:	0810bae5 	.word	0x0810bae5
 810bad0:	0810baed 	.word	0x0810baed
 810bad4:	0810baf5 	.word	0x0810baf5
 810bad8:	0810bafd 	.word	0x0810bafd
 810badc:	0810bb05 	.word	0x0810bb05
 810bae0:	0810bb0d 	.word	0x0810bb0d
 810bae4:	2300      	movs	r3, #0
 810bae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baea:	e1ea      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810baec:	2304      	movs	r3, #4
 810baee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baf2:	e1e6      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810baf4:	2308      	movs	r3, #8
 810baf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bafa:	e1e2      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bafc:	2310      	movs	r3, #16
 810bafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb02:	e1de      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb04:	2320      	movs	r3, #32
 810bb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb0a:	e1da      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb0c:	2340      	movs	r3, #64	; 0x40
 810bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb12:	e1d6      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb14:	2380      	movs	r3, #128	; 0x80
 810bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb1a:	e1d2      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb1c:	687b      	ldr	r3, [r7, #4]
 810bb1e:	681b      	ldr	r3, [r3, #0]
 810bb20:	4a50      	ldr	r2, [pc, #320]	; (810bc64 <UART_SetConfig+0x344>)
 810bb22:	4293      	cmp	r3, r2
 810bb24:	d130      	bne.n	810bb88 <UART_SetConfig+0x268>
 810bb26:	4b4d      	ldr	r3, [pc, #308]	; (810bc5c <UART_SetConfig+0x33c>)
 810bb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bb2a:	f003 0307 	and.w	r3, r3, #7
 810bb2e:	2b05      	cmp	r3, #5
 810bb30:	d826      	bhi.n	810bb80 <UART_SetConfig+0x260>
 810bb32:	a201      	add	r2, pc, #4	; (adr r2, 810bb38 <UART_SetConfig+0x218>)
 810bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bb38:	0810bb51 	.word	0x0810bb51
 810bb3c:	0810bb59 	.word	0x0810bb59
 810bb40:	0810bb61 	.word	0x0810bb61
 810bb44:	0810bb69 	.word	0x0810bb69
 810bb48:	0810bb71 	.word	0x0810bb71
 810bb4c:	0810bb79 	.word	0x0810bb79
 810bb50:	2300      	movs	r3, #0
 810bb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb56:	e1b4      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb58:	2304      	movs	r3, #4
 810bb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb5e:	e1b0      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb60:	2308      	movs	r3, #8
 810bb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb66:	e1ac      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb68:	2310      	movs	r3, #16
 810bb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb6e:	e1a8      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb70:	2320      	movs	r3, #32
 810bb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb76:	e1a4      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb78:	2340      	movs	r3, #64	; 0x40
 810bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb7e:	e1a0      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb80:	2380      	movs	r3, #128	; 0x80
 810bb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb86:	e19c      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bb88:	687b      	ldr	r3, [r7, #4]
 810bb8a:	681b      	ldr	r3, [r3, #0]
 810bb8c:	4a36      	ldr	r2, [pc, #216]	; (810bc68 <UART_SetConfig+0x348>)
 810bb8e:	4293      	cmp	r3, r2
 810bb90:	d130      	bne.n	810bbf4 <UART_SetConfig+0x2d4>
 810bb92:	4b32      	ldr	r3, [pc, #200]	; (810bc5c <UART_SetConfig+0x33c>)
 810bb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bb96:	f003 0307 	and.w	r3, r3, #7
 810bb9a:	2b05      	cmp	r3, #5
 810bb9c:	d826      	bhi.n	810bbec <UART_SetConfig+0x2cc>
 810bb9e:	a201      	add	r2, pc, #4	; (adr r2, 810bba4 <UART_SetConfig+0x284>)
 810bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bba4:	0810bbbd 	.word	0x0810bbbd
 810bba8:	0810bbc5 	.word	0x0810bbc5
 810bbac:	0810bbcd 	.word	0x0810bbcd
 810bbb0:	0810bbd5 	.word	0x0810bbd5
 810bbb4:	0810bbdd 	.word	0x0810bbdd
 810bbb8:	0810bbe5 	.word	0x0810bbe5
 810bbbc:	2300      	movs	r3, #0
 810bbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbc2:	e17e      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbc4:	2304      	movs	r3, #4
 810bbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbca:	e17a      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbcc:	2308      	movs	r3, #8
 810bbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbd2:	e176      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbd4:	2310      	movs	r3, #16
 810bbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbda:	e172      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbdc:	2320      	movs	r3, #32
 810bbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbe2:	e16e      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbe4:	2340      	movs	r3, #64	; 0x40
 810bbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbea:	e16a      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbec:	2380      	movs	r3, #128	; 0x80
 810bbee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbf2:	e166      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bbf4:	687b      	ldr	r3, [r7, #4]
 810bbf6:	681b      	ldr	r3, [r3, #0]
 810bbf8:	4a1c      	ldr	r2, [pc, #112]	; (810bc6c <UART_SetConfig+0x34c>)
 810bbfa:	4293      	cmp	r3, r2
 810bbfc:	d140      	bne.n	810bc80 <UART_SetConfig+0x360>
 810bbfe:	4b17      	ldr	r3, [pc, #92]	; (810bc5c <UART_SetConfig+0x33c>)
 810bc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bc02:	f003 0307 	and.w	r3, r3, #7
 810bc06:	2b05      	cmp	r3, #5
 810bc08:	d836      	bhi.n	810bc78 <UART_SetConfig+0x358>
 810bc0a:	a201      	add	r2, pc, #4	; (adr r2, 810bc10 <UART_SetConfig+0x2f0>)
 810bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bc10:	0810bc29 	.word	0x0810bc29
 810bc14:	0810bc31 	.word	0x0810bc31
 810bc18:	0810bc39 	.word	0x0810bc39
 810bc1c:	0810bc41 	.word	0x0810bc41
 810bc20:	0810bc49 	.word	0x0810bc49
 810bc24:	0810bc71 	.word	0x0810bc71
 810bc28:	2300      	movs	r3, #0
 810bc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc2e:	e148      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc30:	2304      	movs	r3, #4
 810bc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc36:	e144      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc38:	2308      	movs	r3, #8
 810bc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc3e:	e140      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc40:	2310      	movs	r3, #16
 810bc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc46:	e13c      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc48:	2320      	movs	r3, #32
 810bc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc4e:	e138      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc50:	cfff69f3 	.word	0xcfff69f3
 810bc54:	58000c00 	.word	0x58000c00
 810bc58:	40011000 	.word	0x40011000
 810bc5c:	58024400 	.word	0x58024400
 810bc60:	40004400 	.word	0x40004400
 810bc64:	40004800 	.word	0x40004800
 810bc68:	40004c00 	.word	0x40004c00
 810bc6c:	40005000 	.word	0x40005000
 810bc70:	2340      	movs	r3, #64	; 0x40
 810bc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc76:	e124      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc78:	2380      	movs	r3, #128	; 0x80
 810bc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc7e:	e120      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	681b      	ldr	r3, [r3, #0]
 810bc84:	4acc      	ldr	r2, [pc, #816]	; (810bfb8 <UART_SetConfig+0x698>)
 810bc86:	4293      	cmp	r3, r2
 810bc88:	d176      	bne.n	810bd78 <UART_SetConfig+0x458>
 810bc8a:	4bcc      	ldr	r3, [pc, #816]	; (810bfbc <UART_SetConfig+0x69c>)
 810bc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bc8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810bc92:	2b28      	cmp	r3, #40	; 0x28
 810bc94:	d86c      	bhi.n	810bd70 <UART_SetConfig+0x450>
 810bc96:	a201      	add	r2, pc, #4	; (adr r2, 810bc9c <UART_SetConfig+0x37c>)
 810bc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bc9c:	0810bd41 	.word	0x0810bd41
 810bca0:	0810bd71 	.word	0x0810bd71
 810bca4:	0810bd71 	.word	0x0810bd71
 810bca8:	0810bd71 	.word	0x0810bd71
 810bcac:	0810bd71 	.word	0x0810bd71
 810bcb0:	0810bd71 	.word	0x0810bd71
 810bcb4:	0810bd71 	.word	0x0810bd71
 810bcb8:	0810bd71 	.word	0x0810bd71
 810bcbc:	0810bd49 	.word	0x0810bd49
 810bcc0:	0810bd71 	.word	0x0810bd71
 810bcc4:	0810bd71 	.word	0x0810bd71
 810bcc8:	0810bd71 	.word	0x0810bd71
 810bccc:	0810bd71 	.word	0x0810bd71
 810bcd0:	0810bd71 	.word	0x0810bd71
 810bcd4:	0810bd71 	.word	0x0810bd71
 810bcd8:	0810bd71 	.word	0x0810bd71
 810bcdc:	0810bd51 	.word	0x0810bd51
 810bce0:	0810bd71 	.word	0x0810bd71
 810bce4:	0810bd71 	.word	0x0810bd71
 810bce8:	0810bd71 	.word	0x0810bd71
 810bcec:	0810bd71 	.word	0x0810bd71
 810bcf0:	0810bd71 	.word	0x0810bd71
 810bcf4:	0810bd71 	.word	0x0810bd71
 810bcf8:	0810bd71 	.word	0x0810bd71
 810bcfc:	0810bd59 	.word	0x0810bd59
 810bd00:	0810bd71 	.word	0x0810bd71
 810bd04:	0810bd71 	.word	0x0810bd71
 810bd08:	0810bd71 	.word	0x0810bd71
 810bd0c:	0810bd71 	.word	0x0810bd71
 810bd10:	0810bd71 	.word	0x0810bd71
 810bd14:	0810bd71 	.word	0x0810bd71
 810bd18:	0810bd71 	.word	0x0810bd71
 810bd1c:	0810bd61 	.word	0x0810bd61
 810bd20:	0810bd71 	.word	0x0810bd71
 810bd24:	0810bd71 	.word	0x0810bd71
 810bd28:	0810bd71 	.word	0x0810bd71
 810bd2c:	0810bd71 	.word	0x0810bd71
 810bd30:	0810bd71 	.word	0x0810bd71
 810bd34:	0810bd71 	.word	0x0810bd71
 810bd38:	0810bd71 	.word	0x0810bd71
 810bd3c:	0810bd69 	.word	0x0810bd69
 810bd40:	2301      	movs	r3, #1
 810bd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd46:	e0bc      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd48:	2304      	movs	r3, #4
 810bd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd4e:	e0b8      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd50:	2308      	movs	r3, #8
 810bd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd56:	e0b4      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd58:	2310      	movs	r3, #16
 810bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd5e:	e0b0      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd60:	2320      	movs	r3, #32
 810bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd66:	e0ac      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd68:	2340      	movs	r3, #64	; 0x40
 810bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd6e:	e0a8      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd70:	2380      	movs	r3, #128	; 0x80
 810bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bd76:	e0a4      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bd78:	687b      	ldr	r3, [r7, #4]
 810bd7a:	681b      	ldr	r3, [r3, #0]
 810bd7c:	4a90      	ldr	r2, [pc, #576]	; (810bfc0 <UART_SetConfig+0x6a0>)
 810bd7e:	4293      	cmp	r3, r2
 810bd80:	d130      	bne.n	810bde4 <UART_SetConfig+0x4c4>
 810bd82:	4b8e      	ldr	r3, [pc, #568]	; (810bfbc <UART_SetConfig+0x69c>)
 810bd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bd86:	f003 0307 	and.w	r3, r3, #7
 810bd8a:	2b05      	cmp	r3, #5
 810bd8c:	d826      	bhi.n	810bddc <UART_SetConfig+0x4bc>
 810bd8e:	a201      	add	r2, pc, #4	; (adr r2, 810bd94 <UART_SetConfig+0x474>)
 810bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bd94:	0810bdad 	.word	0x0810bdad
 810bd98:	0810bdb5 	.word	0x0810bdb5
 810bd9c:	0810bdbd 	.word	0x0810bdbd
 810bda0:	0810bdc5 	.word	0x0810bdc5
 810bda4:	0810bdcd 	.word	0x0810bdcd
 810bda8:	0810bdd5 	.word	0x0810bdd5
 810bdac:	2300      	movs	r3, #0
 810bdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bdb2:	e086      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bdb4:	2304      	movs	r3, #4
 810bdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bdba:	e082      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bdbc:	2308      	movs	r3, #8
 810bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bdc2:	e07e      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bdc4:	2310      	movs	r3, #16
 810bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bdca:	e07a      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bdcc:	2320      	movs	r3, #32
 810bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bdd2:	e076      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bdd4:	2340      	movs	r3, #64	; 0x40
 810bdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bdda:	e072      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bddc:	2380      	movs	r3, #128	; 0x80
 810bdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bde2:	e06e      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bde4:	687b      	ldr	r3, [r7, #4]
 810bde6:	681b      	ldr	r3, [r3, #0]
 810bde8:	4a76      	ldr	r2, [pc, #472]	; (810bfc4 <UART_SetConfig+0x6a4>)
 810bdea:	4293      	cmp	r3, r2
 810bdec:	d130      	bne.n	810be50 <UART_SetConfig+0x530>
 810bdee:	4b73      	ldr	r3, [pc, #460]	; (810bfbc <UART_SetConfig+0x69c>)
 810bdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bdf2:	f003 0307 	and.w	r3, r3, #7
 810bdf6:	2b05      	cmp	r3, #5
 810bdf8:	d826      	bhi.n	810be48 <UART_SetConfig+0x528>
 810bdfa:	a201      	add	r2, pc, #4	; (adr r2, 810be00 <UART_SetConfig+0x4e0>)
 810bdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be00:	0810be19 	.word	0x0810be19
 810be04:	0810be21 	.word	0x0810be21
 810be08:	0810be29 	.word	0x0810be29
 810be0c:	0810be31 	.word	0x0810be31
 810be10:	0810be39 	.word	0x0810be39
 810be14:	0810be41 	.word	0x0810be41
 810be18:	2300      	movs	r3, #0
 810be1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be1e:	e050      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be20:	2304      	movs	r3, #4
 810be22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be26:	e04c      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be28:	2308      	movs	r3, #8
 810be2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be2e:	e048      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be30:	2310      	movs	r3, #16
 810be32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be36:	e044      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be38:	2320      	movs	r3, #32
 810be3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be3e:	e040      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be40:	2340      	movs	r3, #64	; 0x40
 810be42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be46:	e03c      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be48:	2380      	movs	r3, #128	; 0x80
 810be4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be4e:	e038      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be50:	687b      	ldr	r3, [r7, #4]
 810be52:	681b      	ldr	r3, [r3, #0]
 810be54:	4a5c      	ldr	r2, [pc, #368]	; (810bfc8 <UART_SetConfig+0x6a8>)
 810be56:	4293      	cmp	r3, r2
 810be58:	d130      	bne.n	810bebc <UART_SetConfig+0x59c>
 810be5a:	4b58      	ldr	r3, [pc, #352]	; (810bfbc <UART_SetConfig+0x69c>)
 810be5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810be5e:	f003 0307 	and.w	r3, r3, #7
 810be62:	2b05      	cmp	r3, #5
 810be64:	d826      	bhi.n	810beb4 <UART_SetConfig+0x594>
 810be66:	a201      	add	r2, pc, #4	; (adr r2, 810be6c <UART_SetConfig+0x54c>)
 810be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be6c:	0810be85 	.word	0x0810be85
 810be70:	0810be8d 	.word	0x0810be8d
 810be74:	0810be95 	.word	0x0810be95
 810be78:	0810be9d 	.word	0x0810be9d
 810be7c:	0810bea5 	.word	0x0810bea5
 810be80:	0810bead 	.word	0x0810bead
 810be84:	2302      	movs	r3, #2
 810be86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be8a:	e01a      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be8c:	2304      	movs	r3, #4
 810be8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be92:	e016      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be94:	2308      	movs	r3, #8
 810be96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810be9a:	e012      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810be9c:	2310      	movs	r3, #16
 810be9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bea2:	e00e      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bea4:	2320      	movs	r3, #32
 810bea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810beaa:	e00a      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810beac:	2340      	movs	r3, #64	; 0x40
 810beae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810beb2:	e006      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810beb4:	2380      	movs	r3, #128	; 0x80
 810beb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810beba:	e002      	b.n	810bec2 <UART_SetConfig+0x5a2>
 810bebc:	2380      	movs	r3, #128	; 0x80
 810bebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810bec2:	687b      	ldr	r3, [r7, #4]
 810bec4:	681b      	ldr	r3, [r3, #0]
 810bec6:	4a40      	ldr	r2, [pc, #256]	; (810bfc8 <UART_SetConfig+0x6a8>)
 810bec8:	4293      	cmp	r3, r2
 810beca:	f040 80ef 	bne.w	810c0ac <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810bece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810bed2:	2b20      	cmp	r3, #32
 810bed4:	dc46      	bgt.n	810bf64 <UART_SetConfig+0x644>
 810bed6:	2b02      	cmp	r3, #2
 810bed8:	f2c0 8081 	blt.w	810bfde <UART_SetConfig+0x6be>
 810bedc:	3b02      	subs	r3, #2
 810bede:	2b1e      	cmp	r3, #30
 810bee0:	d87d      	bhi.n	810bfde <UART_SetConfig+0x6be>
 810bee2:	a201      	add	r2, pc, #4	; (adr r2, 810bee8 <UART_SetConfig+0x5c8>)
 810bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bee8:	0810bf6b 	.word	0x0810bf6b
 810beec:	0810bfdf 	.word	0x0810bfdf
 810bef0:	0810bf73 	.word	0x0810bf73
 810bef4:	0810bfdf 	.word	0x0810bfdf
 810bef8:	0810bfdf 	.word	0x0810bfdf
 810befc:	0810bfdf 	.word	0x0810bfdf
 810bf00:	0810bf83 	.word	0x0810bf83
 810bf04:	0810bfdf 	.word	0x0810bfdf
 810bf08:	0810bfdf 	.word	0x0810bfdf
 810bf0c:	0810bfdf 	.word	0x0810bfdf
 810bf10:	0810bfdf 	.word	0x0810bfdf
 810bf14:	0810bfdf 	.word	0x0810bfdf
 810bf18:	0810bfdf 	.word	0x0810bfdf
 810bf1c:	0810bfdf 	.word	0x0810bfdf
 810bf20:	0810bf93 	.word	0x0810bf93
 810bf24:	0810bfdf 	.word	0x0810bfdf
 810bf28:	0810bfdf 	.word	0x0810bfdf
 810bf2c:	0810bfdf 	.word	0x0810bfdf
 810bf30:	0810bfdf 	.word	0x0810bfdf
 810bf34:	0810bfdf 	.word	0x0810bfdf
 810bf38:	0810bfdf 	.word	0x0810bfdf
 810bf3c:	0810bfdf 	.word	0x0810bfdf
 810bf40:	0810bfdf 	.word	0x0810bfdf
 810bf44:	0810bfdf 	.word	0x0810bfdf
 810bf48:	0810bfdf 	.word	0x0810bfdf
 810bf4c:	0810bfdf 	.word	0x0810bfdf
 810bf50:	0810bfdf 	.word	0x0810bfdf
 810bf54:	0810bfdf 	.word	0x0810bfdf
 810bf58:	0810bfdf 	.word	0x0810bfdf
 810bf5c:	0810bfdf 	.word	0x0810bfdf
 810bf60:	0810bfd1 	.word	0x0810bfd1
 810bf64:	2b40      	cmp	r3, #64	; 0x40
 810bf66:	d036      	beq.n	810bfd6 <UART_SetConfig+0x6b6>
 810bf68:	e039      	b.n	810bfde <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810bf6a:	f7fd fe83 	bl	8109c74 <HAL_RCCEx_GetD3PCLK1Freq>
 810bf6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bf70:	e03b      	b.n	810bfea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bf72:	f107 0314 	add.w	r3, r7, #20
 810bf76:	4618      	mov	r0, r3
 810bf78:	f7fd fe92 	bl	8109ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bf7c:	69bb      	ldr	r3, [r7, #24]
 810bf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf80:	e033      	b.n	810bfea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bf82:	f107 0308 	add.w	r3, r7, #8
 810bf86:	4618      	mov	r0, r3
 810bf88:	f7fd ffde 	bl	8109f48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bf8c:	68fb      	ldr	r3, [r7, #12]
 810bf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf90:	e02b      	b.n	810bfea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bf92:	4b0a      	ldr	r3, [pc, #40]	; (810bfbc <UART_SetConfig+0x69c>)
 810bf94:	681b      	ldr	r3, [r3, #0]
 810bf96:	f003 0320 	and.w	r3, r3, #32
 810bf9a:	2b00      	cmp	r3, #0
 810bf9c:	d009      	beq.n	810bfb2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bf9e:	4b07      	ldr	r3, [pc, #28]	; (810bfbc <UART_SetConfig+0x69c>)
 810bfa0:	681b      	ldr	r3, [r3, #0]
 810bfa2:	08db      	lsrs	r3, r3, #3
 810bfa4:	f003 0303 	and.w	r3, r3, #3
 810bfa8:	4a08      	ldr	r2, [pc, #32]	; (810bfcc <UART_SetConfig+0x6ac>)
 810bfaa:	fa22 f303 	lsr.w	r3, r2, r3
 810bfae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bfb0:	e01b      	b.n	810bfea <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810bfb2:	4b06      	ldr	r3, [pc, #24]	; (810bfcc <UART_SetConfig+0x6ac>)
 810bfb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bfb6:	e018      	b.n	810bfea <UART_SetConfig+0x6ca>
 810bfb8:	40011400 	.word	0x40011400
 810bfbc:	58024400 	.word	0x58024400
 810bfc0:	40007800 	.word	0x40007800
 810bfc4:	40007c00 	.word	0x40007c00
 810bfc8:	58000c00 	.word	0x58000c00
 810bfcc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bfd0:	4bc4      	ldr	r3, [pc, #784]	; (810c2e4 <UART_SetConfig+0x9c4>)
 810bfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bfd4:	e009      	b.n	810bfea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bfd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bfdc:	e005      	b.n	810bfea <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810bfde:	2300      	movs	r3, #0
 810bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bfe2:	2301      	movs	r3, #1
 810bfe4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bfe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810bfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bfec:	2b00      	cmp	r3, #0
 810bfee:	f000 81da 	beq.w	810c3a6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810bff2:	687b      	ldr	r3, [r7, #4]
 810bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bff6:	4abc      	ldr	r2, [pc, #752]	; (810c2e8 <UART_SetConfig+0x9c8>)
 810bff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bffc:	461a      	mov	r2, r3
 810bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c000:	fbb3 f3f2 	udiv	r3, r3, r2
 810c004:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	685a      	ldr	r2, [r3, #4]
 810c00a:	4613      	mov	r3, r2
 810c00c:	005b      	lsls	r3, r3, #1
 810c00e:	4413      	add	r3, r2
 810c010:	6a3a      	ldr	r2, [r7, #32]
 810c012:	429a      	cmp	r2, r3
 810c014:	d305      	bcc.n	810c022 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810c016:	687b      	ldr	r3, [r7, #4]
 810c018:	685b      	ldr	r3, [r3, #4]
 810c01a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c01c:	6a3a      	ldr	r2, [r7, #32]
 810c01e:	429a      	cmp	r2, r3
 810c020:	d903      	bls.n	810c02a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810c022:	2301      	movs	r3, #1
 810c024:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c028:	e1bd      	b.n	810c3a6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c02c:	4618      	mov	r0, r3
 810c02e:	f04f 0100 	mov.w	r1, #0
 810c032:	687b      	ldr	r3, [r7, #4]
 810c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c036:	4aac      	ldr	r2, [pc, #688]	; (810c2e8 <UART_SetConfig+0x9c8>)
 810c038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c03c:	b29a      	uxth	r2, r3
 810c03e:	f04f 0300 	mov.w	r3, #0
 810c042:	f7f4 ff63 	bl	8100f0c <__aeabi_uldivmod>
 810c046:	4602      	mov	r2, r0
 810c048:	460b      	mov	r3, r1
 810c04a:	4610      	mov	r0, r2
 810c04c:	4619      	mov	r1, r3
 810c04e:	f04f 0200 	mov.w	r2, #0
 810c052:	f04f 0300 	mov.w	r3, #0
 810c056:	020b      	lsls	r3, r1, #8
 810c058:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810c05c:	0202      	lsls	r2, r0, #8
 810c05e:	6879      	ldr	r1, [r7, #4]
 810c060:	6849      	ldr	r1, [r1, #4]
 810c062:	0849      	lsrs	r1, r1, #1
 810c064:	4608      	mov	r0, r1
 810c066:	f04f 0100 	mov.w	r1, #0
 810c06a:	1814      	adds	r4, r2, r0
 810c06c:	eb43 0501 	adc.w	r5, r3, r1
 810c070:	687b      	ldr	r3, [r7, #4]
 810c072:	685b      	ldr	r3, [r3, #4]
 810c074:	461a      	mov	r2, r3
 810c076:	f04f 0300 	mov.w	r3, #0
 810c07a:	4620      	mov	r0, r4
 810c07c:	4629      	mov	r1, r5
 810c07e:	f7f4 ff45 	bl	8100f0c <__aeabi_uldivmod>
 810c082:	4602      	mov	r2, r0
 810c084:	460b      	mov	r3, r1
 810c086:	4613      	mov	r3, r2
 810c088:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c08c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810c090:	d308      	bcc.n	810c0a4 <UART_SetConfig+0x784>
 810c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c098:	d204      	bcs.n	810c0a4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	681b      	ldr	r3, [r3, #0]
 810c09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c0a0:	60da      	str	r2, [r3, #12]
 810c0a2:	e180      	b.n	810c3a6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810c0a4:	2301      	movs	r3, #1
 810c0a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c0aa:	e17c      	b.n	810c3a6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810c0ac:	687b      	ldr	r3, [r7, #4]
 810c0ae:	69db      	ldr	r3, [r3, #28]
 810c0b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810c0b4:	f040 80bf 	bne.w	810c236 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810c0b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c0bc:	2b20      	cmp	r3, #32
 810c0be:	dc49      	bgt.n	810c154 <UART_SetConfig+0x834>
 810c0c0:	2b00      	cmp	r3, #0
 810c0c2:	db7c      	blt.n	810c1be <UART_SetConfig+0x89e>
 810c0c4:	2b20      	cmp	r3, #32
 810c0c6:	d87a      	bhi.n	810c1be <UART_SetConfig+0x89e>
 810c0c8:	a201      	add	r2, pc, #4	; (adr r2, 810c0d0 <UART_SetConfig+0x7b0>)
 810c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c0ce:	bf00      	nop
 810c0d0:	0810c15b 	.word	0x0810c15b
 810c0d4:	0810c163 	.word	0x0810c163
 810c0d8:	0810c1bf 	.word	0x0810c1bf
 810c0dc:	0810c1bf 	.word	0x0810c1bf
 810c0e0:	0810c16b 	.word	0x0810c16b
 810c0e4:	0810c1bf 	.word	0x0810c1bf
 810c0e8:	0810c1bf 	.word	0x0810c1bf
 810c0ec:	0810c1bf 	.word	0x0810c1bf
 810c0f0:	0810c17b 	.word	0x0810c17b
 810c0f4:	0810c1bf 	.word	0x0810c1bf
 810c0f8:	0810c1bf 	.word	0x0810c1bf
 810c0fc:	0810c1bf 	.word	0x0810c1bf
 810c100:	0810c1bf 	.word	0x0810c1bf
 810c104:	0810c1bf 	.word	0x0810c1bf
 810c108:	0810c1bf 	.word	0x0810c1bf
 810c10c:	0810c1bf 	.word	0x0810c1bf
 810c110:	0810c18b 	.word	0x0810c18b
 810c114:	0810c1bf 	.word	0x0810c1bf
 810c118:	0810c1bf 	.word	0x0810c1bf
 810c11c:	0810c1bf 	.word	0x0810c1bf
 810c120:	0810c1bf 	.word	0x0810c1bf
 810c124:	0810c1bf 	.word	0x0810c1bf
 810c128:	0810c1bf 	.word	0x0810c1bf
 810c12c:	0810c1bf 	.word	0x0810c1bf
 810c130:	0810c1bf 	.word	0x0810c1bf
 810c134:	0810c1bf 	.word	0x0810c1bf
 810c138:	0810c1bf 	.word	0x0810c1bf
 810c13c:	0810c1bf 	.word	0x0810c1bf
 810c140:	0810c1bf 	.word	0x0810c1bf
 810c144:	0810c1bf 	.word	0x0810c1bf
 810c148:	0810c1bf 	.word	0x0810c1bf
 810c14c:	0810c1bf 	.word	0x0810c1bf
 810c150:	0810c1b1 	.word	0x0810c1b1
 810c154:	2b40      	cmp	r3, #64	; 0x40
 810c156:	d02e      	beq.n	810c1b6 <UART_SetConfig+0x896>
 810c158:	e031      	b.n	810c1be <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c15a:	f7fc fe1f 	bl	8108d9c <HAL_RCC_GetPCLK1Freq>
 810c15e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c160:	e033      	b.n	810c1ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c162:	f7fc fe31 	bl	8108dc8 <HAL_RCC_GetPCLK2Freq>
 810c166:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c168:	e02f      	b.n	810c1ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c16a:	f107 0314 	add.w	r3, r7, #20
 810c16e:	4618      	mov	r0, r3
 810c170:	f7fd fd96 	bl	8109ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c174:	69bb      	ldr	r3, [r7, #24]
 810c176:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c178:	e027      	b.n	810c1ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c17a:	f107 0308 	add.w	r3, r7, #8
 810c17e:	4618      	mov	r0, r3
 810c180:	f7fd fee2 	bl	8109f48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c184:	68fb      	ldr	r3, [r7, #12]
 810c186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c188:	e01f      	b.n	810c1ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c18a:	4b58      	ldr	r3, [pc, #352]	; (810c2ec <UART_SetConfig+0x9cc>)
 810c18c:	681b      	ldr	r3, [r3, #0]
 810c18e:	f003 0320 	and.w	r3, r3, #32
 810c192:	2b00      	cmp	r3, #0
 810c194:	d009      	beq.n	810c1aa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c196:	4b55      	ldr	r3, [pc, #340]	; (810c2ec <UART_SetConfig+0x9cc>)
 810c198:	681b      	ldr	r3, [r3, #0]
 810c19a:	08db      	lsrs	r3, r3, #3
 810c19c:	f003 0303 	and.w	r3, r3, #3
 810c1a0:	4a53      	ldr	r2, [pc, #332]	; (810c2f0 <UART_SetConfig+0x9d0>)
 810c1a2:	fa22 f303 	lsr.w	r3, r2, r3
 810c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c1a8:	e00f      	b.n	810c1ca <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810c1aa:	4b51      	ldr	r3, [pc, #324]	; (810c2f0 <UART_SetConfig+0x9d0>)
 810c1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c1ae:	e00c      	b.n	810c1ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c1b0:	4b4c      	ldr	r3, [pc, #304]	; (810c2e4 <UART_SetConfig+0x9c4>)
 810c1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c1b4:	e009      	b.n	810c1ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c1b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c1bc:	e005      	b.n	810c1ca <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810c1be:	2300      	movs	r3, #0
 810c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c1c2:	2301      	movs	r3, #1
 810c1c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c1c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c1cc:	2b00      	cmp	r3, #0
 810c1ce:	f000 80ea 	beq.w	810c3a6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c1d2:	687b      	ldr	r3, [r7, #4]
 810c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c1d6:	4a44      	ldr	r2, [pc, #272]	; (810c2e8 <UART_SetConfig+0x9c8>)
 810c1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c1dc:	461a      	mov	r2, r3
 810c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c1e0:	fbb3 f3f2 	udiv	r3, r3, r2
 810c1e4:	005a      	lsls	r2, r3, #1
 810c1e6:	687b      	ldr	r3, [r7, #4]
 810c1e8:	685b      	ldr	r3, [r3, #4]
 810c1ea:	085b      	lsrs	r3, r3, #1
 810c1ec:	441a      	add	r2, r3
 810c1ee:	687b      	ldr	r3, [r7, #4]
 810c1f0:	685b      	ldr	r3, [r3, #4]
 810c1f2:	fbb2 f3f3 	udiv	r3, r2, r3
 810c1f6:	b29b      	uxth	r3, r3
 810c1f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c1fc:	2b0f      	cmp	r3, #15
 810c1fe:	d916      	bls.n	810c22e <UART_SetConfig+0x90e>
 810c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c206:	d212      	bcs.n	810c22e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c20a:	b29b      	uxth	r3, r3
 810c20c:	f023 030f 	bic.w	r3, r3, #15
 810c210:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c214:	085b      	lsrs	r3, r3, #1
 810c216:	b29b      	uxth	r3, r3
 810c218:	f003 0307 	and.w	r3, r3, #7
 810c21c:	b29a      	uxth	r2, r3
 810c21e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810c220:	4313      	orrs	r3, r2
 810c222:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810c224:	687b      	ldr	r3, [r7, #4]
 810c226:	681b      	ldr	r3, [r3, #0]
 810c228:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810c22a:	60da      	str	r2, [r3, #12]
 810c22c:	e0bb      	b.n	810c3a6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810c22e:	2301      	movs	r3, #1
 810c230:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c234:	e0b7      	b.n	810c3a6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810c236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c23a:	2b20      	cmp	r3, #32
 810c23c:	dc4a      	bgt.n	810c2d4 <UART_SetConfig+0x9b4>
 810c23e:	2b00      	cmp	r3, #0
 810c240:	f2c0 8086 	blt.w	810c350 <UART_SetConfig+0xa30>
 810c244:	2b20      	cmp	r3, #32
 810c246:	f200 8083 	bhi.w	810c350 <UART_SetConfig+0xa30>
 810c24a:	a201      	add	r2, pc, #4	; (adr r2, 810c250 <UART_SetConfig+0x930>)
 810c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c250:	0810c2db 	.word	0x0810c2db
 810c254:	0810c2f5 	.word	0x0810c2f5
 810c258:	0810c351 	.word	0x0810c351
 810c25c:	0810c351 	.word	0x0810c351
 810c260:	0810c2fd 	.word	0x0810c2fd
 810c264:	0810c351 	.word	0x0810c351
 810c268:	0810c351 	.word	0x0810c351
 810c26c:	0810c351 	.word	0x0810c351
 810c270:	0810c30d 	.word	0x0810c30d
 810c274:	0810c351 	.word	0x0810c351
 810c278:	0810c351 	.word	0x0810c351
 810c27c:	0810c351 	.word	0x0810c351
 810c280:	0810c351 	.word	0x0810c351
 810c284:	0810c351 	.word	0x0810c351
 810c288:	0810c351 	.word	0x0810c351
 810c28c:	0810c351 	.word	0x0810c351
 810c290:	0810c31d 	.word	0x0810c31d
 810c294:	0810c351 	.word	0x0810c351
 810c298:	0810c351 	.word	0x0810c351
 810c29c:	0810c351 	.word	0x0810c351
 810c2a0:	0810c351 	.word	0x0810c351
 810c2a4:	0810c351 	.word	0x0810c351
 810c2a8:	0810c351 	.word	0x0810c351
 810c2ac:	0810c351 	.word	0x0810c351
 810c2b0:	0810c351 	.word	0x0810c351
 810c2b4:	0810c351 	.word	0x0810c351
 810c2b8:	0810c351 	.word	0x0810c351
 810c2bc:	0810c351 	.word	0x0810c351
 810c2c0:	0810c351 	.word	0x0810c351
 810c2c4:	0810c351 	.word	0x0810c351
 810c2c8:	0810c351 	.word	0x0810c351
 810c2cc:	0810c351 	.word	0x0810c351
 810c2d0:	0810c343 	.word	0x0810c343
 810c2d4:	2b40      	cmp	r3, #64	; 0x40
 810c2d6:	d037      	beq.n	810c348 <UART_SetConfig+0xa28>
 810c2d8:	e03a      	b.n	810c350 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c2da:	f7fc fd5f 	bl	8108d9c <HAL_RCC_GetPCLK1Freq>
 810c2de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c2e0:	e03c      	b.n	810c35c <UART_SetConfig+0xa3c>
 810c2e2:	bf00      	nop
 810c2e4:	003d0900 	.word	0x003d0900
 810c2e8:	0810dd24 	.word	0x0810dd24
 810c2ec:	58024400 	.word	0x58024400
 810c2f0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c2f4:	f7fc fd68 	bl	8108dc8 <HAL_RCC_GetPCLK2Freq>
 810c2f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c2fa:	e02f      	b.n	810c35c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c2fc:	f107 0314 	add.w	r3, r7, #20
 810c300:	4618      	mov	r0, r3
 810c302:	f7fd fccd 	bl	8109ca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c306:	69bb      	ldr	r3, [r7, #24]
 810c308:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c30a:	e027      	b.n	810c35c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c30c:	f107 0308 	add.w	r3, r7, #8
 810c310:	4618      	mov	r0, r3
 810c312:	f7fd fe19 	bl	8109f48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c316:	68fb      	ldr	r3, [r7, #12]
 810c318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c31a:	e01f      	b.n	810c35c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c31c:	4b2c      	ldr	r3, [pc, #176]	; (810c3d0 <UART_SetConfig+0xab0>)
 810c31e:	681b      	ldr	r3, [r3, #0]
 810c320:	f003 0320 	and.w	r3, r3, #32
 810c324:	2b00      	cmp	r3, #0
 810c326:	d009      	beq.n	810c33c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c328:	4b29      	ldr	r3, [pc, #164]	; (810c3d0 <UART_SetConfig+0xab0>)
 810c32a:	681b      	ldr	r3, [r3, #0]
 810c32c:	08db      	lsrs	r3, r3, #3
 810c32e:	f003 0303 	and.w	r3, r3, #3
 810c332:	4a28      	ldr	r2, [pc, #160]	; (810c3d4 <UART_SetConfig+0xab4>)
 810c334:	fa22 f303 	lsr.w	r3, r2, r3
 810c338:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c33a:	e00f      	b.n	810c35c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810c33c:	4b25      	ldr	r3, [pc, #148]	; (810c3d4 <UART_SetConfig+0xab4>)
 810c33e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c340:	e00c      	b.n	810c35c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c342:	4b25      	ldr	r3, [pc, #148]	; (810c3d8 <UART_SetConfig+0xab8>)
 810c344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c346:	e009      	b.n	810c35c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c34c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c34e:	e005      	b.n	810c35c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810c350:	2300      	movs	r3, #0
 810c352:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c354:	2301      	movs	r3, #1
 810c356:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c35a:	bf00      	nop
    }

    if (pclk != 0U)
 810c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c35e:	2b00      	cmp	r3, #0
 810c360:	d021      	beq.n	810c3a6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c362:	687b      	ldr	r3, [r7, #4]
 810c364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c366:	4a1d      	ldr	r2, [pc, #116]	; (810c3dc <UART_SetConfig+0xabc>)
 810c368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c36c:	461a      	mov	r2, r3
 810c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c370:	fbb3 f2f2 	udiv	r2, r3, r2
 810c374:	687b      	ldr	r3, [r7, #4]
 810c376:	685b      	ldr	r3, [r3, #4]
 810c378:	085b      	lsrs	r3, r3, #1
 810c37a:	441a      	add	r2, r3
 810c37c:	687b      	ldr	r3, [r7, #4]
 810c37e:	685b      	ldr	r3, [r3, #4]
 810c380:	fbb2 f3f3 	udiv	r3, r2, r3
 810c384:	b29b      	uxth	r3, r3
 810c386:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c38a:	2b0f      	cmp	r3, #15
 810c38c:	d908      	bls.n	810c3a0 <UART_SetConfig+0xa80>
 810c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c394:	d204      	bcs.n	810c3a0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	681b      	ldr	r3, [r3, #0]
 810c39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c39c:	60da      	str	r2, [r3, #12]
 810c39e:	e002      	b.n	810c3a6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810c3a0:	2301      	movs	r3, #1
 810c3a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810c3a6:	687b      	ldr	r3, [r7, #4]
 810c3a8:	2201      	movs	r2, #1
 810c3aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810c3ae:	687b      	ldr	r3, [r7, #4]
 810c3b0:	2201      	movs	r2, #1
 810c3b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	2200      	movs	r2, #0
 810c3ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810c3bc:	687b      	ldr	r3, [r7, #4]
 810c3be:	2200      	movs	r2, #0
 810c3c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810c3c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810c3c6:	4618      	mov	r0, r3
 810c3c8:	3738      	adds	r7, #56	; 0x38
 810c3ca:	46bd      	mov	sp, r7
 810c3cc:	bdb0      	pop	{r4, r5, r7, pc}
 810c3ce:	bf00      	nop
 810c3d0:	58024400 	.word	0x58024400
 810c3d4:	03d09000 	.word	0x03d09000
 810c3d8:	003d0900 	.word	0x003d0900
 810c3dc:	0810dd24 	.word	0x0810dd24

0810c3e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810c3e0:	b480      	push	{r7}
 810c3e2:	b083      	sub	sp, #12
 810c3e4:	af00      	add	r7, sp, #0
 810c3e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810c3e8:	687b      	ldr	r3, [r7, #4]
 810c3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c3ec:	f003 0301 	and.w	r3, r3, #1
 810c3f0:	2b00      	cmp	r3, #0
 810c3f2:	d00a      	beq.n	810c40a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810c3f4:	687b      	ldr	r3, [r7, #4]
 810c3f6:	681b      	ldr	r3, [r3, #0]
 810c3f8:	685b      	ldr	r3, [r3, #4]
 810c3fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810c3fe:	687b      	ldr	r3, [r7, #4]
 810c400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c402:	687b      	ldr	r3, [r7, #4]
 810c404:	681b      	ldr	r3, [r3, #0]
 810c406:	430a      	orrs	r2, r1
 810c408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810c40a:	687b      	ldr	r3, [r7, #4]
 810c40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c40e:	f003 0302 	and.w	r3, r3, #2
 810c412:	2b00      	cmp	r3, #0
 810c414:	d00a      	beq.n	810c42c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810c416:	687b      	ldr	r3, [r7, #4]
 810c418:	681b      	ldr	r3, [r3, #0]
 810c41a:	685b      	ldr	r3, [r3, #4]
 810c41c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810c420:	687b      	ldr	r3, [r7, #4]
 810c422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810c424:	687b      	ldr	r3, [r7, #4]
 810c426:	681b      	ldr	r3, [r3, #0]
 810c428:	430a      	orrs	r2, r1
 810c42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810c42c:	687b      	ldr	r3, [r7, #4]
 810c42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c430:	f003 0304 	and.w	r3, r3, #4
 810c434:	2b00      	cmp	r3, #0
 810c436:	d00a      	beq.n	810c44e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810c438:	687b      	ldr	r3, [r7, #4]
 810c43a:	681b      	ldr	r3, [r3, #0]
 810c43c:	685b      	ldr	r3, [r3, #4]
 810c43e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810c442:	687b      	ldr	r3, [r7, #4]
 810c444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810c446:	687b      	ldr	r3, [r7, #4]
 810c448:	681b      	ldr	r3, [r3, #0]
 810c44a:	430a      	orrs	r2, r1
 810c44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810c44e:	687b      	ldr	r3, [r7, #4]
 810c450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c452:	f003 0308 	and.w	r3, r3, #8
 810c456:	2b00      	cmp	r3, #0
 810c458:	d00a      	beq.n	810c470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810c45a:	687b      	ldr	r3, [r7, #4]
 810c45c:	681b      	ldr	r3, [r3, #0]
 810c45e:	685b      	ldr	r3, [r3, #4]
 810c460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810c464:	687b      	ldr	r3, [r7, #4]
 810c466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c468:	687b      	ldr	r3, [r7, #4]
 810c46a:	681b      	ldr	r3, [r3, #0]
 810c46c:	430a      	orrs	r2, r1
 810c46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c474:	f003 0310 	and.w	r3, r3, #16
 810c478:	2b00      	cmp	r3, #0
 810c47a:	d00a      	beq.n	810c492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810c47c:	687b      	ldr	r3, [r7, #4]
 810c47e:	681b      	ldr	r3, [r3, #0]
 810c480:	689b      	ldr	r3, [r3, #8]
 810c482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810c486:	687b      	ldr	r3, [r7, #4]
 810c488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c48a:	687b      	ldr	r3, [r7, #4]
 810c48c:	681b      	ldr	r3, [r3, #0]
 810c48e:	430a      	orrs	r2, r1
 810c490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810c492:	687b      	ldr	r3, [r7, #4]
 810c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c496:	f003 0320 	and.w	r3, r3, #32
 810c49a:	2b00      	cmp	r3, #0
 810c49c:	d00a      	beq.n	810c4b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	681b      	ldr	r3, [r3, #0]
 810c4a2:	689b      	ldr	r3, [r3, #8]
 810c4a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810c4a8:	687b      	ldr	r3, [r7, #4]
 810c4aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810c4ac:	687b      	ldr	r3, [r7, #4]
 810c4ae:	681b      	ldr	r3, [r3, #0]
 810c4b0:	430a      	orrs	r2, r1
 810c4b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810c4b4:	687b      	ldr	r3, [r7, #4]
 810c4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c4bc:	2b00      	cmp	r3, #0
 810c4be:	d01a      	beq.n	810c4f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810c4c0:	687b      	ldr	r3, [r7, #4]
 810c4c2:	681b      	ldr	r3, [r3, #0]
 810c4c4:	685b      	ldr	r3, [r3, #4]
 810c4c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810c4ca:	687b      	ldr	r3, [r7, #4]
 810c4cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810c4ce:	687b      	ldr	r3, [r7, #4]
 810c4d0:	681b      	ldr	r3, [r3, #0]
 810c4d2:	430a      	orrs	r2, r1
 810c4d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810c4d6:	687b      	ldr	r3, [r7, #4]
 810c4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810c4da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c4de:	d10a      	bne.n	810c4f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810c4e0:	687b      	ldr	r3, [r7, #4]
 810c4e2:	681b      	ldr	r3, [r3, #0]
 810c4e4:	685b      	ldr	r3, [r3, #4]
 810c4e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810c4ea:	687b      	ldr	r3, [r7, #4]
 810c4ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810c4ee:	687b      	ldr	r3, [r7, #4]
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	430a      	orrs	r2, r1
 810c4f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810c4f6:	687b      	ldr	r3, [r7, #4]
 810c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c4fe:	2b00      	cmp	r3, #0
 810c500:	d00a      	beq.n	810c518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810c502:	687b      	ldr	r3, [r7, #4]
 810c504:	681b      	ldr	r3, [r3, #0]
 810c506:	685b      	ldr	r3, [r3, #4]
 810c508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810c50c:	687b      	ldr	r3, [r7, #4]
 810c50e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c510:	687b      	ldr	r3, [r7, #4]
 810c512:	681b      	ldr	r3, [r3, #0]
 810c514:	430a      	orrs	r2, r1
 810c516:	605a      	str	r2, [r3, #4]
  }
}
 810c518:	bf00      	nop
 810c51a:	370c      	adds	r7, #12
 810c51c:	46bd      	mov	sp, r7
 810c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c522:	4770      	bx	lr

0810c524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810c524:	b580      	push	{r7, lr}
 810c526:	b086      	sub	sp, #24
 810c528:	af02      	add	r7, sp, #8
 810c52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c52c:	687b      	ldr	r3, [r7, #4]
 810c52e:	2200      	movs	r2, #0
 810c530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810c534:	f7f7 f988 	bl	8103848 <HAL_GetTick>
 810c538:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810c53a:	687b      	ldr	r3, [r7, #4]
 810c53c:	681b      	ldr	r3, [r3, #0]
 810c53e:	681b      	ldr	r3, [r3, #0]
 810c540:	f003 0308 	and.w	r3, r3, #8
 810c544:	2b08      	cmp	r3, #8
 810c546:	d10e      	bne.n	810c566 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810c54c:	9300      	str	r3, [sp, #0]
 810c54e:	68fb      	ldr	r3, [r7, #12]
 810c550:	2200      	movs	r2, #0
 810c552:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810c556:	6878      	ldr	r0, [r7, #4]
 810c558:	f000 f82f 	bl	810c5ba <UART_WaitOnFlagUntilTimeout>
 810c55c:	4603      	mov	r3, r0
 810c55e:	2b00      	cmp	r3, #0
 810c560:	d001      	beq.n	810c566 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c562:	2303      	movs	r3, #3
 810c564:	e025      	b.n	810c5b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810c566:	687b      	ldr	r3, [r7, #4]
 810c568:	681b      	ldr	r3, [r3, #0]
 810c56a:	681b      	ldr	r3, [r3, #0]
 810c56c:	f003 0304 	and.w	r3, r3, #4
 810c570:	2b04      	cmp	r3, #4
 810c572:	d10e      	bne.n	810c592 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810c578:	9300      	str	r3, [sp, #0]
 810c57a:	68fb      	ldr	r3, [r7, #12]
 810c57c:	2200      	movs	r2, #0
 810c57e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810c582:	6878      	ldr	r0, [r7, #4]
 810c584:	f000 f819 	bl	810c5ba <UART_WaitOnFlagUntilTimeout>
 810c588:	4603      	mov	r3, r0
 810c58a:	2b00      	cmp	r3, #0
 810c58c:	d001      	beq.n	810c592 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c58e:	2303      	movs	r3, #3
 810c590:	e00f      	b.n	810c5b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810c592:	687b      	ldr	r3, [r7, #4]
 810c594:	2220      	movs	r2, #32
 810c596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810c59a:	687b      	ldr	r3, [r7, #4]
 810c59c:	2220      	movs	r2, #32
 810c59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c5a2:	687b      	ldr	r3, [r7, #4]
 810c5a4:	2200      	movs	r2, #0
 810c5a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810c5a8:	687b      	ldr	r3, [r7, #4]
 810c5aa:	2200      	movs	r2, #0
 810c5ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c5b0:	2300      	movs	r3, #0
}
 810c5b2:	4618      	mov	r0, r3
 810c5b4:	3710      	adds	r7, #16
 810c5b6:	46bd      	mov	sp, r7
 810c5b8:	bd80      	pop	{r7, pc}

0810c5ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c5ba:	b580      	push	{r7, lr}
 810c5bc:	b084      	sub	sp, #16
 810c5be:	af00      	add	r7, sp, #0
 810c5c0:	60f8      	str	r0, [r7, #12]
 810c5c2:	60b9      	str	r1, [r7, #8]
 810c5c4:	603b      	str	r3, [r7, #0]
 810c5c6:	4613      	mov	r3, r2
 810c5c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c5ca:	e062      	b.n	810c692 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c5cc:	69bb      	ldr	r3, [r7, #24]
 810c5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c5d2:	d05e      	beq.n	810c692 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c5d4:	f7f7 f938 	bl	8103848 <HAL_GetTick>
 810c5d8:	4602      	mov	r2, r0
 810c5da:	683b      	ldr	r3, [r7, #0]
 810c5dc:	1ad3      	subs	r3, r2, r3
 810c5de:	69ba      	ldr	r2, [r7, #24]
 810c5e0:	429a      	cmp	r2, r3
 810c5e2:	d302      	bcc.n	810c5ea <UART_WaitOnFlagUntilTimeout+0x30>
 810c5e4:	69bb      	ldr	r3, [r7, #24]
 810c5e6:	2b00      	cmp	r3, #0
 810c5e8:	d11d      	bne.n	810c626 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810c5ea:	68fb      	ldr	r3, [r7, #12]
 810c5ec:	681b      	ldr	r3, [r3, #0]
 810c5ee:	681a      	ldr	r2, [r3, #0]
 810c5f0:	68fb      	ldr	r3, [r7, #12]
 810c5f2:	681b      	ldr	r3, [r3, #0]
 810c5f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810c5f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c5fa:	68fb      	ldr	r3, [r7, #12]
 810c5fc:	681b      	ldr	r3, [r3, #0]
 810c5fe:	689a      	ldr	r2, [r3, #8]
 810c600:	68fb      	ldr	r3, [r7, #12]
 810c602:	681b      	ldr	r3, [r3, #0]
 810c604:	f022 0201 	bic.w	r2, r2, #1
 810c608:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810c60a:	68fb      	ldr	r3, [r7, #12]
 810c60c:	2220      	movs	r2, #32
 810c60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810c612:	68fb      	ldr	r3, [r7, #12]
 810c614:	2220      	movs	r2, #32
 810c616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810c61a:	68fb      	ldr	r3, [r7, #12]
 810c61c:	2200      	movs	r2, #0
 810c61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810c622:	2303      	movs	r3, #3
 810c624:	e045      	b.n	810c6b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810c626:	68fb      	ldr	r3, [r7, #12]
 810c628:	681b      	ldr	r3, [r3, #0]
 810c62a:	681b      	ldr	r3, [r3, #0]
 810c62c:	f003 0304 	and.w	r3, r3, #4
 810c630:	2b00      	cmp	r3, #0
 810c632:	d02e      	beq.n	810c692 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810c634:	68fb      	ldr	r3, [r7, #12]
 810c636:	681b      	ldr	r3, [r3, #0]
 810c638:	69db      	ldr	r3, [r3, #28]
 810c63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810c63e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810c642:	d126      	bne.n	810c692 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c644:	68fb      	ldr	r3, [r7, #12]
 810c646:	681b      	ldr	r3, [r3, #0]
 810c648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c64c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810c64e:	68fb      	ldr	r3, [r7, #12]
 810c650:	681b      	ldr	r3, [r3, #0]
 810c652:	681a      	ldr	r2, [r3, #0]
 810c654:	68fb      	ldr	r3, [r7, #12]
 810c656:	681b      	ldr	r3, [r3, #0]
 810c658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810c65c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c65e:	68fb      	ldr	r3, [r7, #12]
 810c660:	681b      	ldr	r3, [r3, #0]
 810c662:	689a      	ldr	r2, [r3, #8]
 810c664:	68fb      	ldr	r3, [r7, #12]
 810c666:	681b      	ldr	r3, [r3, #0]
 810c668:	f022 0201 	bic.w	r2, r2, #1
 810c66c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810c66e:	68fb      	ldr	r3, [r7, #12]
 810c670:	2220      	movs	r2, #32
 810c672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810c676:	68fb      	ldr	r3, [r7, #12]
 810c678:	2220      	movs	r2, #32
 810c67a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c67e:	68fb      	ldr	r3, [r7, #12]
 810c680:	2220      	movs	r2, #32
 810c682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c686:	68fb      	ldr	r3, [r7, #12]
 810c688:	2200      	movs	r2, #0
 810c68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810c68e:	2303      	movs	r3, #3
 810c690:	e00f      	b.n	810c6b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c692:	68fb      	ldr	r3, [r7, #12]
 810c694:	681b      	ldr	r3, [r3, #0]
 810c696:	69da      	ldr	r2, [r3, #28]
 810c698:	68bb      	ldr	r3, [r7, #8]
 810c69a:	4013      	ands	r3, r2
 810c69c:	68ba      	ldr	r2, [r7, #8]
 810c69e:	429a      	cmp	r2, r3
 810c6a0:	bf0c      	ite	eq
 810c6a2:	2301      	moveq	r3, #1
 810c6a4:	2300      	movne	r3, #0
 810c6a6:	b2db      	uxtb	r3, r3
 810c6a8:	461a      	mov	r2, r3
 810c6aa:	79fb      	ldrb	r3, [r7, #7]
 810c6ac:	429a      	cmp	r2, r3
 810c6ae:	d08d      	beq.n	810c5cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c6b0:	2300      	movs	r3, #0
}
 810c6b2:	4618      	mov	r0, r3
 810c6b4:	3710      	adds	r7, #16
 810c6b6:	46bd      	mov	sp, r7
 810c6b8:	bd80      	pop	{r7, pc}
	...

0810c6bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c6bc:	b580      	push	{r7, lr}
 810c6be:	b084      	sub	sp, #16
 810c6c0:	af00      	add	r7, sp, #0
 810c6c2:	60f8      	str	r0, [r7, #12]
 810c6c4:	60b9      	str	r1, [r7, #8]
 810c6c6:	4613      	mov	r3, r2
 810c6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810c6ca:	68fb      	ldr	r3, [r7, #12]
 810c6cc:	68ba      	ldr	r2, [r7, #8]
 810c6ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810c6d0:	68fb      	ldr	r3, [r7, #12]
 810c6d2:	88fa      	ldrh	r2, [r7, #6]
 810c6d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c6d8:	68fb      	ldr	r3, [r7, #12]
 810c6da:	2200      	movs	r2, #0
 810c6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810c6e0:	68fb      	ldr	r3, [r7, #12]
 810c6e2:	2222      	movs	r2, #34	; 0x22
 810c6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810c6e8:	68fb      	ldr	r3, [r7, #12]
 810c6ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c6ec:	2b00      	cmp	r3, #0
 810c6ee:	d02c      	beq.n	810c74a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810c6f0:	68fb      	ldr	r3, [r7, #12]
 810c6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c6f4:	4a25      	ldr	r2, [pc, #148]	; (810c78c <UART_Start_Receive_DMA+0xd0>)
 810c6f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810c6f8:	68fb      	ldr	r3, [r7, #12]
 810c6fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c6fc:	4a24      	ldr	r2, [pc, #144]	; (810c790 <UART_Start_Receive_DMA+0xd4>)
 810c6fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810c700:	68fb      	ldr	r3, [r7, #12]
 810c702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c704:	4a23      	ldr	r2, [pc, #140]	; (810c794 <UART_Start_Receive_DMA+0xd8>)
 810c706:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810c708:	68fb      	ldr	r3, [r7, #12]
 810c70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c70c:	2200      	movs	r2, #0
 810c70e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810c710:	68fb      	ldr	r3, [r7, #12]
 810c712:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810c714:	68fb      	ldr	r3, [r7, #12]
 810c716:	681b      	ldr	r3, [r3, #0]
 810c718:	3324      	adds	r3, #36	; 0x24
 810c71a:	4619      	mov	r1, r3
 810c71c:	68fb      	ldr	r3, [r7, #12]
 810c71e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810c720:	461a      	mov	r2, r3
 810c722:	88fb      	ldrh	r3, [r7, #6]
 810c724:	f7f8 f830 	bl	8104788 <HAL_DMA_Start_IT>
 810c728:	4603      	mov	r3, r0
 810c72a:	2b00      	cmp	r3, #0
 810c72c:	d00d      	beq.n	810c74a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810c72e:	68fb      	ldr	r3, [r7, #12]
 810c730:	2210      	movs	r2, #16
 810c732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810c736:	68fb      	ldr	r3, [r7, #12]
 810c738:	2200      	movs	r2, #0
 810c73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810c73e:	68fb      	ldr	r3, [r7, #12]
 810c740:	2220      	movs	r2, #32
 810c742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810c746:	2301      	movs	r3, #1
 810c748:	e01c      	b.n	810c784 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810c74a:	68fb      	ldr	r3, [r7, #12]
 810c74c:	2200      	movs	r2, #0
 810c74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c752:	68fb      	ldr	r3, [r7, #12]
 810c754:	681b      	ldr	r3, [r3, #0]
 810c756:	681a      	ldr	r2, [r3, #0]
 810c758:	68fb      	ldr	r3, [r7, #12]
 810c75a:	681b      	ldr	r3, [r3, #0]
 810c75c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810c760:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c762:	68fb      	ldr	r3, [r7, #12]
 810c764:	681b      	ldr	r3, [r3, #0]
 810c766:	689a      	ldr	r2, [r3, #8]
 810c768:	68fb      	ldr	r3, [r7, #12]
 810c76a:	681b      	ldr	r3, [r3, #0]
 810c76c:	f042 0201 	orr.w	r2, r2, #1
 810c770:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c772:	68fb      	ldr	r3, [r7, #12]
 810c774:	681b      	ldr	r3, [r3, #0]
 810c776:	689a      	ldr	r2, [r3, #8]
 810c778:	68fb      	ldr	r3, [r7, #12]
 810c77a:	681b      	ldr	r3, [r3, #0]
 810c77c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c780:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810c782:	2300      	movs	r3, #0
}
 810c784:	4618      	mov	r0, r3
 810c786:	3710      	adds	r7, #16
 810c788:	46bd      	mov	sp, r7
 810c78a:	bd80      	pop	{r7, pc}
 810c78c:	0810c8a5 	.word	0x0810c8a5
 810c790:	0810c93b 	.word	0x0810c93b
 810c794:	0810c973 	.word	0x0810c973

0810c798 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810c798:	b480      	push	{r7}
 810c79a:	b083      	sub	sp, #12
 810c79c:	af00      	add	r7, sp, #0
 810c79e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810c7a0:	687b      	ldr	r3, [r7, #4]
 810c7a2:	681b      	ldr	r3, [r3, #0]
 810c7a4:	681a      	ldr	r2, [r3, #0]
 810c7a6:	687b      	ldr	r3, [r7, #4]
 810c7a8:	681b      	ldr	r3, [r3, #0]
 810c7aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810c7ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810c7b0:	687b      	ldr	r3, [r7, #4]
 810c7b2:	681b      	ldr	r3, [r3, #0]
 810c7b4:	689a      	ldr	r2, [r3, #8]
 810c7b6:	687b      	ldr	r3, [r7, #4]
 810c7b8:	681b      	ldr	r3, [r3, #0]
 810c7ba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810c7be:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c7c0:	687b      	ldr	r3, [r7, #4]
 810c7c2:	2220      	movs	r2, #32
 810c7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810c7c8:	bf00      	nop
 810c7ca:	370c      	adds	r7, #12
 810c7cc:	46bd      	mov	sp, r7
 810c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7d2:	4770      	bx	lr

0810c7d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c7d4:	b480      	push	{r7}
 810c7d6:	b083      	sub	sp, #12
 810c7d8:	af00      	add	r7, sp, #0
 810c7da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c7dc:	687b      	ldr	r3, [r7, #4]
 810c7de:	681b      	ldr	r3, [r3, #0]
 810c7e0:	681a      	ldr	r2, [r3, #0]
 810c7e2:	687b      	ldr	r3, [r7, #4]
 810c7e4:	681b      	ldr	r3, [r3, #0]
 810c7e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810c7ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c7ec:	687b      	ldr	r3, [r7, #4]
 810c7ee:	681b      	ldr	r3, [r3, #0]
 810c7f0:	689b      	ldr	r3, [r3, #8]
 810c7f2:	687a      	ldr	r2, [r7, #4]
 810c7f4:	6812      	ldr	r2, [r2, #0]
 810c7f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c7fa:	f023 0301 	bic.w	r3, r3, #1
 810c7fe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c800:	687b      	ldr	r3, [r7, #4]
 810c802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c804:	2b01      	cmp	r3, #1
 810c806:	d107      	bne.n	810c818 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c808:	687b      	ldr	r3, [r7, #4]
 810c80a:	681b      	ldr	r3, [r3, #0]
 810c80c:	681a      	ldr	r2, [r3, #0]
 810c80e:	687b      	ldr	r3, [r7, #4]
 810c810:	681b      	ldr	r3, [r3, #0]
 810c812:	f022 0210 	bic.w	r2, r2, #16
 810c816:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c818:	687b      	ldr	r3, [r7, #4]
 810c81a:	2220      	movs	r2, #32
 810c81c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c820:	687b      	ldr	r3, [r7, #4]
 810c822:	2200      	movs	r2, #0
 810c824:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c826:	687b      	ldr	r3, [r7, #4]
 810c828:	2200      	movs	r2, #0
 810c82a:	671a      	str	r2, [r3, #112]	; 0x70
}
 810c82c:	bf00      	nop
 810c82e:	370c      	adds	r7, #12
 810c830:	46bd      	mov	sp, r7
 810c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c836:	4770      	bx	lr

0810c838 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810c838:	b580      	push	{r7, lr}
 810c83a:	b084      	sub	sp, #16
 810c83c:	af00      	add	r7, sp, #0
 810c83e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c840:	687b      	ldr	r3, [r7, #4]
 810c842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c844:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c846:	687b      	ldr	r3, [r7, #4]
 810c848:	69db      	ldr	r3, [r3, #28]
 810c84a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c84e:	d014      	beq.n	810c87a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810c850:	68fb      	ldr	r3, [r7, #12]
 810c852:	2200      	movs	r2, #0
 810c854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810c858:	68fb      	ldr	r3, [r7, #12]
 810c85a:	681b      	ldr	r3, [r3, #0]
 810c85c:	689a      	ldr	r2, [r3, #8]
 810c85e:	68fb      	ldr	r3, [r7, #12]
 810c860:	681b      	ldr	r3, [r3, #0]
 810c862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c866:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c868:	68fb      	ldr	r3, [r7, #12]
 810c86a:	681b      	ldr	r3, [r3, #0]
 810c86c:	681a      	ldr	r2, [r3, #0]
 810c86e:	68fb      	ldr	r3, [r7, #12]
 810c870:	681b      	ldr	r3, [r3, #0]
 810c872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c876:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c878:	e002      	b.n	810c880 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810c87a:	68f8      	ldr	r0, [r7, #12]
 810c87c:	f7f6 fd74 	bl	8103368 <HAL_UART_TxCpltCallback>
}
 810c880:	bf00      	nop
 810c882:	3710      	adds	r7, #16
 810c884:	46bd      	mov	sp, r7
 810c886:	bd80      	pop	{r7, pc}

0810c888 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c888:	b580      	push	{r7, lr}
 810c88a:	b084      	sub	sp, #16
 810c88c:	af00      	add	r7, sp, #0
 810c88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c890:	687b      	ldr	r3, [r7, #4]
 810c892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c894:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810c896:	68f8      	ldr	r0, [r7, #12]
 810c898:	f7ff f818 	bl	810b8cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c89c:	bf00      	nop
 810c89e:	3710      	adds	r7, #16
 810c8a0:	46bd      	mov	sp, r7
 810c8a2:	bd80      	pop	{r7, pc}

0810c8a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810c8a4:	b580      	push	{r7, lr}
 810c8a6:	b084      	sub	sp, #16
 810c8a8:	af00      	add	r7, sp, #0
 810c8aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c8ac:	687b      	ldr	r3, [r7, #4]
 810c8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c8b0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c8b2:	687b      	ldr	r3, [r7, #4]
 810c8b4:	69db      	ldr	r3, [r3, #28]
 810c8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c8ba:	d02b      	beq.n	810c914 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810c8bc:	68fb      	ldr	r3, [r7, #12]
 810c8be:	2200      	movs	r2, #0
 810c8c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c8c4:	68fb      	ldr	r3, [r7, #12]
 810c8c6:	681b      	ldr	r3, [r3, #0]
 810c8c8:	681a      	ldr	r2, [r3, #0]
 810c8ca:	68fb      	ldr	r3, [r7, #12]
 810c8cc:	681b      	ldr	r3, [r3, #0]
 810c8ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810c8d2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c8d4:	68fb      	ldr	r3, [r7, #12]
 810c8d6:	681b      	ldr	r3, [r3, #0]
 810c8d8:	689a      	ldr	r2, [r3, #8]
 810c8da:	68fb      	ldr	r3, [r7, #12]
 810c8dc:	681b      	ldr	r3, [r3, #0]
 810c8de:	f022 0201 	bic.w	r2, r2, #1
 810c8e2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c8e4:	68fb      	ldr	r3, [r7, #12]
 810c8e6:	681b      	ldr	r3, [r3, #0]
 810c8e8:	689a      	ldr	r2, [r3, #8]
 810c8ea:	68fb      	ldr	r3, [r7, #12]
 810c8ec:	681b      	ldr	r3, [r3, #0]
 810c8ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c8f2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810c8f4:	68fb      	ldr	r3, [r7, #12]
 810c8f6:	2220      	movs	r2, #32
 810c8f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c8fc:	68fb      	ldr	r3, [r7, #12]
 810c8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c900:	2b01      	cmp	r3, #1
 810c902:	d107      	bne.n	810c914 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c904:	68fb      	ldr	r3, [r7, #12]
 810c906:	681b      	ldr	r3, [r3, #0]
 810c908:	681a      	ldr	r2, [r3, #0]
 810c90a:	68fb      	ldr	r3, [r7, #12]
 810c90c:	681b      	ldr	r3, [r3, #0]
 810c90e:	f022 0210 	bic.w	r2, r2, #16
 810c912:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c914:	68fb      	ldr	r3, [r7, #12]
 810c916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c918:	2b01      	cmp	r3, #1
 810c91a:	d107      	bne.n	810c92c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810c91c:	68fb      	ldr	r3, [r7, #12]
 810c91e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c922:	4619      	mov	r1, r3
 810c924:	68f8      	ldr	r0, [r7, #12]
 810c926:	f7fe ffef 	bl	810b908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c92a:	e002      	b.n	810c932 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810c92c:	68f8      	ldr	r0, [r7, #12]
 810c92e:	f7f6 fd25 	bl	810337c <HAL_UART_RxCpltCallback>
}
 810c932:	bf00      	nop
 810c934:	3710      	adds	r7, #16
 810c936:	46bd      	mov	sp, r7
 810c938:	bd80      	pop	{r7, pc}

0810c93a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c93a:	b580      	push	{r7, lr}
 810c93c:	b084      	sub	sp, #16
 810c93e:	af00      	add	r7, sp, #0
 810c940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c942:	687b      	ldr	r3, [r7, #4]
 810c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c946:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c948:	68fb      	ldr	r3, [r7, #12]
 810c94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c94c:	2b01      	cmp	r3, #1
 810c94e:	d109      	bne.n	810c964 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810c950:	68fb      	ldr	r3, [r7, #12]
 810c952:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c956:	085b      	lsrs	r3, r3, #1
 810c958:	b29b      	uxth	r3, r3
 810c95a:	4619      	mov	r1, r3
 810c95c:	68f8      	ldr	r0, [r7, #12]
 810c95e:	f7fe ffd3 	bl	810b908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c962:	e002      	b.n	810c96a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810c964:	68f8      	ldr	r0, [r7, #12]
 810c966:	f7fe ffbb 	bl	810b8e0 <HAL_UART_RxHalfCpltCallback>
}
 810c96a:	bf00      	nop
 810c96c:	3710      	adds	r7, #16
 810c96e:	46bd      	mov	sp, r7
 810c970:	bd80      	pop	{r7, pc}

0810c972 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810c972:	b580      	push	{r7, lr}
 810c974:	b086      	sub	sp, #24
 810c976:	af00      	add	r7, sp, #0
 810c978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c97a:	687b      	ldr	r3, [r7, #4]
 810c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c97e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810c980:	697b      	ldr	r3, [r7, #20]
 810c982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810c986:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810c988:	697b      	ldr	r3, [r7, #20]
 810c98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810c98e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810c990:	697b      	ldr	r3, [r7, #20]
 810c992:	681b      	ldr	r3, [r3, #0]
 810c994:	689b      	ldr	r3, [r3, #8]
 810c996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c99a:	2b80      	cmp	r3, #128	; 0x80
 810c99c:	d109      	bne.n	810c9b2 <UART_DMAError+0x40>
 810c99e:	693b      	ldr	r3, [r7, #16]
 810c9a0:	2b21      	cmp	r3, #33	; 0x21
 810c9a2:	d106      	bne.n	810c9b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810c9a4:	697b      	ldr	r3, [r7, #20]
 810c9a6:	2200      	movs	r2, #0
 810c9a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810c9ac:	6978      	ldr	r0, [r7, #20]
 810c9ae:	f7ff fef3 	bl	810c798 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810c9b2:	697b      	ldr	r3, [r7, #20]
 810c9b4:	681b      	ldr	r3, [r3, #0]
 810c9b6:	689b      	ldr	r3, [r3, #8]
 810c9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c9bc:	2b40      	cmp	r3, #64	; 0x40
 810c9be:	d109      	bne.n	810c9d4 <UART_DMAError+0x62>
 810c9c0:	68fb      	ldr	r3, [r7, #12]
 810c9c2:	2b22      	cmp	r3, #34	; 0x22
 810c9c4:	d106      	bne.n	810c9d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810c9c6:	697b      	ldr	r3, [r7, #20]
 810c9c8:	2200      	movs	r2, #0
 810c9ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810c9ce:	6978      	ldr	r0, [r7, #20]
 810c9d0:	f7ff ff00 	bl	810c7d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810c9d4:	697b      	ldr	r3, [r7, #20]
 810c9d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c9da:	f043 0210 	orr.w	r2, r3, #16
 810c9de:	697b      	ldr	r3, [r7, #20]
 810c9e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c9e4:	6978      	ldr	r0, [r7, #20]
 810c9e6:	f7fe ff85 	bl	810b8f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c9ea:	bf00      	nop
 810c9ec:	3718      	adds	r7, #24
 810c9ee:	46bd      	mov	sp, r7
 810c9f0:	bd80      	pop	{r7, pc}

0810c9f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810c9f2:	b580      	push	{r7, lr}
 810c9f4:	b084      	sub	sp, #16
 810c9f6:	af00      	add	r7, sp, #0
 810c9f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c9fa:	687b      	ldr	r3, [r7, #4]
 810c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c9fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810ca00:	68fb      	ldr	r3, [r7, #12]
 810ca02:	2200      	movs	r2, #0
 810ca04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810ca08:	68fb      	ldr	r3, [r7, #12]
 810ca0a:	2200      	movs	r2, #0
 810ca0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810ca10:	68f8      	ldr	r0, [r7, #12]
 810ca12:	f7fe ff6f 	bl	810b8f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ca16:	bf00      	nop
 810ca18:	3710      	adds	r7, #16
 810ca1a:	46bd      	mov	sp, r7
 810ca1c:	bd80      	pop	{r7, pc}

0810ca1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810ca1e:	b580      	push	{r7, lr}
 810ca20:	b082      	sub	sp, #8
 810ca22:	af00      	add	r7, sp, #0
 810ca24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810ca26:	687b      	ldr	r3, [r7, #4]
 810ca28:	681b      	ldr	r3, [r3, #0]
 810ca2a:	681a      	ldr	r2, [r3, #0]
 810ca2c:	687b      	ldr	r3, [r7, #4]
 810ca2e:	681b      	ldr	r3, [r3, #0]
 810ca30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810ca34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810ca36:	687b      	ldr	r3, [r7, #4]
 810ca38:	2220      	movs	r2, #32
 810ca3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810ca3e:	687b      	ldr	r3, [r7, #4]
 810ca40:	2200      	movs	r2, #0
 810ca42:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810ca44:	6878      	ldr	r0, [r7, #4]
 810ca46:	f7f6 fc8f 	bl	8103368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ca4a:	bf00      	nop
 810ca4c:	3708      	adds	r7, #8
 810ca4e:	46bd      	mov	sp, r7
 810ca50:	bd80      	pop	{r7, pc}

0810ca52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810ca52:	b480      	push	{r7}
 810ca54:	b083      	sub	sp, #12
 810ca56:	af00      	add	r7, sp, #0
 810ca58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810ca5a:	bf00      	nop
 810ca5c:	370c      	adds	r7, #12
 810ca5e:	46bd      	mov	sp, r7
 810ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca64:	4770      	bx	lr

0810ca66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810ca66:	b480      	push	{r7}
 810ca68:	b083      	sub	sp, #12
 810ca6a:	af00      	add	r7, sp, #0
 810ca6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810ca6e:	bf00      	nop
 810ca70:	370c      	adds	r7, #12
 810ca72:	46bd      	mov	sp, r7
 810ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca78:	4770      	bx	lr

0810ca7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810ca7a:	b480      	push	{r7}
 810ca7c:	b083      	sub	sp, #12
 810ca7e:	af00      	add	r7, sp, #0
 810ca80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810ca82:	bf00      	nop
 810ca84:	370c      	adds	r7, #12
 810ca86:	46bd      	mov	sp, r7
 810ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca8c:	4770      	bx	lr

0810ca8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810ca8e:	b480      	push	{r7}
 810ca90:	b085      	sub	sp, #20
 810ca92:	af00      	add	r7, sp, #0
 810ca94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ca96:	687b      	ldr	r3, [r7, #4]
 810ca98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ca9c:	2b01      	cmp	r3, #1
 810ca9e:	d101      	bne.n	810caa4 <HAL_UARTEx_DisableFifoMode+0x16>
 810caa0:	2302      	movs	r3, #2
 810caa2:	e027      	b.n	810caf4 <HAL_UARTEx_DisableFifoMode+0x66>
 810caa4:	687b      	ldr	r3, [r7, #4]
 810caa6:	2201      	movs	r2, #1
 810caa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810caac:	687b      	ldr	r3, [r7, #4]
 810caae:	2224      	movs	r2, #36	; 0x24
 810cab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cab4:	687b      	ldr	r3, [r7, #4]
 810cab6:	681b      	ldr	r3, [r3, #0]
 810cab8:	681b      	ldr	r3, [r3, #0]
 810caba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cabc:	687b      	ldr	r3, [r7, #4]
 810cabe:	681b      	ldr	r3, [r3, #0]
 810cac0:	681a      	ldr	r2, [r3, #0]
 810cac2:	687b      	ldr	r3, [r7, #4]
 810cac4:	681b      	ldr	r3, [r3, #0]
 810cac6:	f022 0201 	bic.w	r2, r2, #1
 810caca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810cacc:	68fb      	ldr	r3, [r7, #12]
 810cace:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810cad2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810cad4:	687b      	ldr	r3, [r7, #4]
 810cad6:	2200      	movs	r2, #0
 810cad8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cada:	687b      	ldr	r3, [r7, #4]
 810cadc:	681b      	ldr	r3, [r3, #0]
 810cade:	68fa      	ldr	r2, [r7, #12]
 810cae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cae2:	687b      	ldr	r3, [r7, #4]
 810cae4:	2220      	movs	r2, #32
 810cae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810caea:	687b      	ldr	r3, [r7, #4]
 810caec:	2200      	movs	r2, #0
 810caee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810caf2:	2300      	movs	r3, #0
}
 810caf4:	4618      	mov	r0, r3
 810caf6:	3714      	adds	r7, #20
 810caf8:	46bd      	mov	sp, r7
 810cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cafe:	4770      	bx	lr

0810cb00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cb00:	b580      	push	{r7, lr}
 810cb02:	b084      	sub	sp, #16
 810cb04:	af00      	add	r7, sp, #0
 810cb06:	6078      	str	r0, [r7, #4]
 810cb08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cb0a:	687b      	ldr	r3, [r7, #4]
 810cb0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810cb10:	2b01      	cmp	r3, #1
 810cb12:	d101      	bne.n	810cb18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810cb14:	2302      	movs	r3, #2
 810cb16:	e02d      	b.n	810cb74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810cb18:	687b      	ldr	r3, [r7, #4]
 810cb1a:	2201      	movs	r2, #1
 810cb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810cb20:	687b      	ldr	r3, [r7, #4]
 810cb22:	2224      	movs	r2, #36	; 0x24
 810cb24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cb28:	687b      	ldr	r3, [r7, #4]
 810cb2a:	681b      	ldr	r3, [r3, #0]
 810cb2c:	681b      	ldr	r3, [r3, #0]
 810cb2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cb30:	687b      	ldr	r3, [r7, #4]
 810cb32:	681b      	ldr	r3, [r3, #0]
 810cb34:	681a      	ldr	r2, [r3, #0]
 810cb36:	687b      	ldr	r3, [r7, #4]
 810cb38:	681b      	ldr	r3, [r3, #0]
 810cb3a:	f022 0201 	bic.w	r2, r2, #1
 810cb3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810cb40:	687b      	ldr	r3, [r7, #4]
 810cb42:	681b      	ldr	r3, [r3, #0]
 810cb44:	689b      	ldr	r3, [r3, #8]
 810cb46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810cb4a:	687b      	ldr	r3, [r7, #4]
 810cb4c:	681b      	ldr	r3, [r3, #0]
 810cb4e:	683a      	ldr	r2, [r7, #0]
 810cb50:	430a      	orrs	r2, r1
 810cb52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810cb54:	6878      	ldr	r0, [r7, #4]
 810cb56:	f000 f84f 	bl	810cbf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cb5a:	687b      	ldr	r3, [r7, #4]
 810cb5c:	681b      	ldr	r3, [r3, #0]
 810cb5e:	68fa      	ldr	r2, [r7, #12]
 810cb60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cb62:	687b      	ldr	r3, [r7, #4]
 810cb64:	2220      	movs	r2, #32
 810cb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cb6a:	687b      	ldr	r3, [r7, #4]
 810cb6c:	2200      	movs	r2, #0
 810cb6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810cb72:	2300      	movs	r3, #0
}
 810cb74:	4618      	mov	r0, r3
 810cb76:	3710      	adds	r7, #16
 810cb78:	46bd      	mov	sp, r7
 810cb7a:	bd80      	pop	{r7, pc}

0810cb7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cb7c:	b580      	push	{r7, lr}
 810cb7e:	b084      	sub	sp, #16
 810cb80:	af00      	add	r7, sp, #0
 810cb82:	6078      	str	r0, [r7, #4]
 810cb84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cb86:	687b      	ldr	r3, [r7, #4]
 810cb88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810cb8c:	2b01      	cmp	r3, #1
 810cb8e:	d101      	bne.n	810cb94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810cb90:	2302      	movs	r3, #2
 810cb92:	e02d      	b.n	810cbf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810cb94:	687b      	ldr	r3, [r7, #4]
 810cb96:	2201      	movs	r2, #1
 810cb98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810cb9c:	687b      	ldr	r3, [r7, #4]
 810cb9e:	2224      	movs	r2, #36	; 0x24
 810cba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cba4:	687b      	ldr	r3, [r7, #4]
 810cba6:	681b      	ldr	r3, [r3, #0]
 810cba8:	681b      	ldr	r3, [r3, #0]
 810cbaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cbac:	687b      	ldr	r3, [r7, #4]
 810cbae:	681b      	ldr	r3, [r3, #0]
 810cbb0:	681a      	ldr	r2, [r3, #0]
 810cbb2:	687b      	ldr	r3, [r7, #4]
 810cbb4:	681b      	ldr	r3, [r3, #0]
 810cbb6:	f022 0201 	bic.w	r2, r2, #1
 810cbba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810cbbc:	687b      	ldr	r3, [r7, #4]
 810cbbe:	681b      	ldr	r3, [r3, #0]
 810cbc0:	689b      	ldr	r3, [r3, #8]
 810cbc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810cbc6:	687b      	ldr	r3, [r7, #4]
 810cbc8:	681b      	ldr	r3, [r3, #0]
 810cbca:	683a      	ldr	r2, [r7, #0]
 810cbcc:	430a      	orrs	r2, r1
 810cbce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810cbd0:	6878      	ldr	r0, [r7, #4]
 810cbd2:	f000 f811 	bl	810cbf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cbd6:	687b      	ldr	r3, [r7, #4]
 810cbd8:	681b      	ldr	r3, [r3, #0]
 810cbda:	68fa      	ldr	r2, [r7, #12]
 810cbdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cbde:	687b      	ldr	r3, [r7, #4]
 810cbe0:	2220      	movs	r2, #32
 810cbe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cbe6:	687b      	ldr	r3, [r7, #4]
 810cbe8:	2200      	movs	r2, #0
 810cbea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810cbee:	2300      	movs	r3, #0
}
 810cbf0:	4618      	mov	r0, r3
 810cbf2:	3710      	adds	r7, #16
 810cbf4:	46bd      	mov	sp, r7
 810cbf6:	bd80      	pop	{r7, pc}

0810cbf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810cbf8:	b480      	push	{r7}
 810cbfa:	b085      	sub	sp, #20
 810cbfc:	af00      	add	r7, sp, #0
 810cbfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810cc00:	687b      	ldr	r3, [r7, #4]
 810cc02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810cc04:	2b00      	cmp	r3, #0
 810cc06:	d108      	bne.n	810cc1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810cc08:	687b      	ldr	r3, [r7, #4]
 810cc0a:	2201      	movs	r2, #1
 810cc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810cc10:	687b      	ldr	r3, [r7, #4]
 810cc12:	2201      	movs	r2, #1
 810cc14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810cc18:	e031      	b.n	810cc7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810cc1a:	2310      	movs	r3, #16
 810cc1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810cc1e:	2310      	movs	r3, #16
 810cc20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810cc22:	687b      	ldr	r3, [r7, #4]
 810cc24:	681b      	ldr	r3, [r3, #0]
 810cc26:	689b      	ldr	r3, [r3, #8]
 810cc28:	0e5b      	lsrs	r3, r3, #25
 810cc2a:	b2db      	uxtb	r3, r3
 810cc2c:	f003 0307 	and.w	r3, r3, #7
 810cc30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810cc32:	687b      	ldr	r3, [r7, #4]
 810cc34:	681b      	ldr	r3, [r3, #0]
 810cc36:	689b      	ldr	r3, [r3, #8]
 810cc38:	0f5b      	lsrs	r3, r3, #29
 810cc3a:	b2db      	uxtb	r3, r3
 810cc3c:	f003 0307 	and.w	r3, r3, #7
 810cc40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810cc42:	7bbb      	ldrb	r3, [r7, #14]
 810cc44:	7b3a      	ldrb	r2, [r7, #12]
 810cc46:	4911      	ldr	r1, [pc, #68]	; (810cc8c <UARTEx_SetNbDataToProcess+0x94>)
 810cc48:	5c8a      	ldrb	r2, [r1, r2]
 810cc4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810cc4e:	7b3a      	ldrb	r2, [r7, #12]
 810cc50:	490f      	ldr	r1, [pc, #60]	; (810cc90 <UARTEx_SetNbDataToProcess+0x98>)
 810cc52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810cc54:	fb93 f3f2 	sdiv	r3, r3, r2
 810cc58:	b29a      	uxth	r2, r3
 810cc5a:	687b      	ldr	r3, [r7, #4]
 810cc5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810cc60:	7bfb      	ldrb	r3, [r7, #15]
 810cc62:	7b7a      	ldrb	r2, [r7, #13]
 810cc64:	4909      	ldr	r1, [pc, #36]	; (810cc8c <UARTEx_SetNbDataToProcess+0x94>)
 810cc66:	5c8a      	ldrb	r2, [r1, r2]
 810cc68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810cc6c:	7b7a      	ldrb	r2, [r7, #13]
 810cc6e:	4908      	ldr	r1, [pc, #32]	; (810cc90 <UARTEx_SetNbDataToProcess+0x98>)
 810cc70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810cc72:	fb93 f3f2 	sdiv	r3, r3, r2
 810cc76:	b29a      	uxth	r2, r3
 810cc78:	687b      	ldr	r3, [r7, #4]
 810cc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810cc7e:	bf00      	nop
 810cc80:	3714      	adds	r7, #20
 810cc82:	46bd      	mov	sp, r7
 810cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc88:	4770      	bx	lr
 810cc8a:	bf00      	nop
 810cc8c:	0810dd3c 	.word	0x0810dd3c
 810cc90:	0810dd44 	.word	0x0810dd44

0810cc94 <__errno>:
 810cc94:	4b01      	ldr	r3, [pc, #4]	; (810cc9c <__errno+0x8>)
 810cc96:	6818      	ldr	r0, [r3, #0]
 810cc98:	4770      	bx	lr
 810cc9a:	bf00      	nop
 810cc9c:	10000024 	.word	0x10000024

0810cca0 <__libc_init_array>:
 810cca0:	b570      	push	{r4, r5, r6, lr}
 810cca2:	4d0d      	ldr	r5, [pc, #52]	; (810ccd8 <__libc_init_array+0x38>)
 810cca4:	4c0d      	ldr	r4, [pc, #52]	; (810ccdc <__libc_init_array+0x3c>)
 810cca6:	1b64      	subs	r4, r4, r5
 810cca8:	10a4      	asrs	r4, r4, #2
 810ccaa:	2600      	movs	r6, #0
 810ccac:	42a6      	cmp	r6, r4
 810ccae:	d109      	bne.n	810ccc4 <__libc_init_array+0x24>
 810ccb0:	4d0b      	ldr	r5, [pc, #44]	; (810cce0 <__libc_init_array+0x40>)
 810ccb2:	4c0c      	ldr	r4, [pc, #48]	; (810cce4 <__libc_init_array+0x44>)
 810ccb4:	f000 ffd6 	bl	810dc64 <_init>
 810ccb8:	1b64      	subs	r4, r4, r5
 810ccba:	10a4      	asrs	r4, r4, #2
 810ccbc:	2600      	movs	r6, #0
 810ccbe:	42a6      	cmp	r6, r4
 810ccc0:	d105      	bne.n	810ccce <__libc_init_array+0x2e>
 810ccc2:	bd70      	pop	{r4, r5, r6, pc}
 810ccc4:	f855 3b04 	ldr.w	r3, [r5], #4
 810ccc8:	4798      	blx	r3
 810ccca:	3601      	adds	r6, #1
 810cccc:	e7ee      	b.n	810ccac <__libc_init_array+0xc>
 810ccce:	f855 3b04 	ldr.w	r3, [r5], #4
 810ccd2:	4798      	blx	r3
 810ccd4:	3601      	adds	r6, #1
 810ccd6:	e7f2      	b.n	810ccbe <__libc_init_array+0x1e>
 810ccd8:	0810dd98 	.word	0x0810dd98
 810ccdc:	0810dd98 	.word	0x0810dd98
 810cce0:	0810dd98 	.word	0x0810dd98
 810cce4:	0810dd9c 	.word	0x0810dd9c

0810cce8 <memset>:
 810cce8:	4402      	add	r2, r0
 810ccea:	4603      	mov	r3, r0
 810ccec:	4293      	cmp	r3, r2
 810ccee:	d100      	bne.n	810ccf2 <memset+0xa>
 810ccf0:	4770      	bx	lr
 810ccf2:	f803 1b01 	strb.w	r1, [r3], #1
 810ccf6:	e7f9      	b.n	810ccec <memset+0x4>

0810ccf8 <pow>:
 810ccf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ccfc:	ec59 8b10 	vmov	r8, r9, d0
 810cd00:	ec57 6b11 	vmov	r6, r7, d1
 810cd04:	f000 f8a8 	bl	810ce58 <__ieee754_pow>
 810cd08:	4b4e      	ldr	r3, [pc, #312]	; (810ce44 <pow+0x14c>)
 810cd0a:	f993 3000 	ldrsb.w	r3, [r3]
 810cd0e:	3301      	adds	r3, #1
 810cd10:	ec55 4b10 	vmov	r4, r5, d0
 810cd14:	d015      	beq.n	810cd42 <pow+0x4a>
 810cd16:	4632      	mov	r2, r6
 810cd18:	463b      	mov	r3, r7
 810cd1a:	4630      	mov	r0, r6
 810cd1c:	4639      	mov	r1, r7
 810cd1e:	f7f3 ff31 	bl	8100b84 <__aeabi_dcmpun>
 810cd22:	b970      	cbnz	r0, 810cd42 <pow+0x4a>
 810cd24:	4642      	mov	r2, r8
 810cd26:	464b      	mov	r3, r9
 810cd28:	4640      	mov	r0, r8
 810cd2a:	4649      	mov	r1, r9
 810cd2c:	f7f3 ff2a 	bl	8100b84 <__aeabi_dcmpun>
 810cd30:	2200      	movs	r2, #0
 810cd32:	2300      	movs	r3, #0
 810cd34:	b148      	cbz	r0, 810cd4a <pow+0x52>
 810cd36:	4630      	mov	r0, r6
 810cd38:	4639      	mov	r1, r7
 810cd3a:	f7f3 fef1 	bl	8100b20 <__aeabi_dcmpeq>
 810cd3e:	2800      	cmp	r0, #0
 810cd40:	d17d      	bne.n	810ce3e <pow+0x146>
 810cd42:	ec45 4b10 	vmov	d0, r4, r5
 810cd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810cd4a:	4640      	mov	r0, r8
 810cd4c:	4649      	mov	r1, r9
 810cd4e:	f7f3 fee7 	bl	8100b20 <__aeabi_dcmpeq>
 810cd52:	b1e0      	cbz	r0, 810cd8e <pow+0x96>
 810cd54:	2200      	movs	r2, #0
 810cd56:	2300      	movs	r3, #0
 810cd58:	4630      	mov	r0, r6
 810cd5a:	4639      	mov	r1, r7
 810cd5c:	f7f3 fee0 	bl	8100b20 <__aeabi_dcmpeq>
 810cd60:	2800      	cmp	r0, #0
 810cd62:	d16c      	bne.n	810ce3e <pow+0x146>
 810cd64:	ec47 6b10 	vmov	d0, r6, r7
 810cd68:	f000 fe55 	bl	810da16 <finite>
 810cd6c:	2800      	cmp	r0, #0
 810cd6e:	d0e8      	beq.n	810cd42 <pow+0x4a>
 810cd70:	2200      	movs	r2, #0
 810cd72:	2300      	movs	r3, #0
 810cd74:	4630      	mov	r0, r6
 810cd76:	4639      	mov	r1, r7
 810cd78:	f7f3 fedc 	bl	8100b34 <__aeabi_dcmplt>
 810cd7c:	2800      	cmp	r0, #0
 810cd7e:	d0e0      	beq.n	810cd42 <pow+0x4a>
 810cd80:	f7ff ff88 	bl	810cc94 <__errno>
 810cd84:	2321      	movs	r3, #33	; 0x21
 810cd86:	6003      	str	r3, [r0, #0]
 810cd88:	2400      	movs	r4, #0
 810cd8a:	4d2f      	ldr	r5, [pc, #188]	; (810ce48 <pow+0x150>)
 810cd8c:	e7d9      	b.n	810cd42 <pow+0x4a>
 810cd8e:	ec45 4b10 	vmov	d0, r4, r5
 810cd92:	f000 fe40 	bl	810da16 <finite>
 810cd96:	bbb8      	cbnz	r0, 810ce08 <pow+0x110>
 810cd98:	ec49 8b10 	vmov	d0, r8, r9
 810cd9c:	f000 fe3b 	bl	810da16 <finite>
 810cda0:	b390      	cbz	r0, 810ce08 <pow+0x110>
 810cda2:	ec47 6b10 	vmov	d0, r6, r7
 810cda6:	f000 fe36 	bl	810da16 <finite>
 810cdaa:	b368      	cbz	r0, 810ce08 <pow+0x110>
 810cdac:	4622      	mov	r2, r4
 810cdae:	462b      	mov	r3, r5
 810cdb0:	4620      	mov	r0, r4
 810cdb2:	4629      	mov	r1, r5
 810cdb4:	f7f3 fee6 	bl	8100b84 <__aeabi_dcmpun>
 810cdb8:	b160      	cbz	r0, 810cdd4 <pow+0xdc>
 810cdba:	f7ff ff6b 	bl	810cc94 <__errno>
 810cdbe:	2321      	movs	r3, #33	; 0x21
 810cdc0:	6003      	str	r3, [r0, #0]
 810cdc2:	2200      	movs	r2, #0
 810cdc4:	2300      	movs	r3, #0
 810cdc6:	4610      	mov	r0, r2
 810cdc8:	4619      	mov	r1, r3
 810cdca:	f7f3 fd6b 	bl	81008a4 <__aeabi_ddiv>
 810cdce:	4604      	mov	r4, r0
 810cdd0:	460d      	mov	r5, r1
 810cdd2:	e7b6      	b.n	810cd42 <pow+0x4a>
 810cdd4:	f7ff ff5e 	bl	810cc94 <__errno>
 810cdd8:	2322      	movs	r3, #34	; 0x22
 810cdda:	6003      	str	r3, [r0, #0]
 810cddc:	2200      	movs	r2, #0
 810cdde:	2300      	movs	r3, #0
 810cde0:	4640      	mov	r0, r8
 810cde2:	4649      	mov	r1, r9
 810cde4:	f7f3 fea6 	bl	8100b34 <__aeabi_dcmplt>
 810cde8:	2400      	movs	r4, #0
 810cdea:	b158      	cbz	r0, 810ce04 <pow+0x10c>
 810cdec:	ec47 6b10 	vmov	d0, r6, r7
 810cdf0:	f000 fe26 	bl	810da40 <rint>
 810cdf4:	4632      	mov	r2, r6
 810cdf6:	ec51 0b10 	vmov	r0, r1, d0
 810cdfa:	463b      	mov	r3, r7
 810cdfc:	f7f3 fe90 	bl	8100b20 <__aeabi_dcmpeq>
 810ce00:	2800      	cmp	r0, #0
 810ce02:	d0c2      	beq.n	810cd8a <pow+0x92>
 810ce04:	4d11      	ldr	r5, [pc, #68]	; (810ce4c <pow+0x154>)
 810ce06:	e79c      	b.n	810cd42 <pow+0x4a>
 810ce08:	2200      	movs	r2, #0
 810ce0a:	2300      	movs	r3, #0
 810ce0c:	4620      	mov	r0, r4
 810ce0e:	4629      	mov	r1, r5
 810ce10:	f7f3 fe86 	bl	8100b20 <__aeabi_dcmpeq>
 810ce14:	2800      	cmp	r0, #0
 810ce16:	d094      	beq.n	810cd42 <pow+0x4a>
 810ce18:	ec49 8b10 	vmov	d0, r8, r9
 810ce1c:	f000 fdfb 	bl	810da16 <finite>
 810ce20:	2800      	cmp	r0, #0
 810ce22:	d08e      	beq.n	810cd42 <pow+0x4a>
 810ce24:	ec47 6b10 	vmov	d0, r6, r7
 810ce28:	f000 fdf5 	bl	810da16 <finite>
 810ce2c:	2800      	cmp	r0, #0
 810ce2e:	d088      	beq.n	810cd42 <pow+0x4a>
 810ce30:	f7ff ff30 	bl	810cc94 <__errno>
 810ce34:	2322      	movs	r3, #34	; 0x22
 810ce36:	6003      	str	r3, [r0, #0]
 810ce38:	2400      	movs	r4, #0
 810ce3a:	2500      	movs	r5, #0
 810ce3c:	e781      	b.n	810cd42 <pow+0x4a>
 810ce3e:	4d04      	ldr	r5, [pc, #16]	; (810ce50 <pow+0x158>)
 810ce40:	2400      	movs	r4, #0
 810ce42:	e77e      	b.n	810cd42 <pow+0x4a>
 810ce44:	10000088 	.word	0x10000088
 810ce48:	fff00000 	.word	0xfff00000
 810ce4c:	7ff00000 	.word	0x7ff00000
 810ce50:	3ff00000 	.word	0x3ff00000
 810ce54:	00000000 	.word	0x00000000

0810ce58 <__ieee754_pow>:
 810ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ce5c:	ed2d 8b06 	vpush	{d8-d10}
 810ce60:	b08d      	sub	sp, #52	; 0x34
 810ce62:	ed8d 1b02 	vstr	d1, [sp, #8]
 810ce66:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810ce6a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810ce6e:	ea56 0100 	orrs.w	r1, r6, r0
 810ce72:	ec53 2b10 	vmov	r2, r3, d0
 810ce76:	f000 84d1 	beq.w	810d81c <__ieee754_pow+0x9c4>
 810ce7a:	497f      	ldr	r1, [pc, #508]	; (810d078 <__ieee754_pow+0x220>)
 810ce7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810ce80:	428c      	cmp	r4, r1
 810ce82:	ee10 8a10 	vmov	r8, s0
 810ce86:	4699      	mov	r9, r3
 810ce88:	dc09      	bgt.n	810ce9e <__ieee754_pow+0x46>
 810ce8a:	d103      	bne.n	810ce94 <__ieee754_pow+0x3c>
 810ce8c:	b97a      	cbnz	r2, 810ceae <__ieee754_pow+0x56>
 810ce8e:	42a6      	cmp	r6, r4
 810ce90:	dd02      	ble.n	810ce98 <__ieee754_pow+0x40>
 810ce92:	e00c      	b.n	810ceae <__ieee754_pow+0x56>
 810ce94:	428e      	cmp	r6, r1
 810ce96:	dc02      	bgt.n	810ce9e <__ieee754_pow+0x46>
 810ce98:	428e      	cmp	r6, r1
 810ce9a:	d110      	bne.n	810cebe <__ieee754_pow+0x66>
 810ce9c:	b178      	cbz	r0, 810cebe <__ieee754_pow+0x66>
 810ce9e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810cea2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810cea6:	ea54 0308 	orrs.w	r3, r4, r8
 810ceaa:	f000 84b7 	beq.w	810d81c <__ieee754_pow+0x9c4>
 810ceae:	4873      	ldr	r0, [pc, #460]	; (810d07c <__ieee754_pow+0x224>)
 810ceb0:	b00d      	add	sp, #52	; 0x34
 810ceb2:	ecbd 8b06 	vpop	{d8-d10}
 810ceb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ceba:	f000 bdb9 	b.w	810da30 <nan>
 810cebe:	f1b9 0f00 	cmp.w	r9, #0
 810cec2:	da36      	bge.n	810cf32 <__ieee754_pow+0xda>
 810cec4:	496e      	ldr	r1, [pc, #440]	; (810d080 <__ieee754_pow+0x228>)
 810cec6:	428e      	cmp	r6, r1
 810cec8:	dc51      	bgt.n	810cf6e <__ieee754_pow+0x116>
 810ceca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810cece:	428e      	cmp	r6, r1
 810ced0:	f340 84af 	ble.w	810d832 <__ieee754_pow+0x9da>
 810ced4:	1531      	asrs	r1, r6, #20
 810ced6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810ceda:	2914      	cmp	r1, #20
 810cedc:	dd0f      	ble.n	810cefe <__ieee754_pow+0xa6>
 810cede:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810cee2:	fa20 fc01 	lsr.w	ip, r0, r1
 810cee6:	fa0c f101 	lsl.w	r1, ip, r1
 810ceea:	4281      	cmp	r1, r0
 810ceec:	f040 84a1 	bne.w	810d832 <__ieee754_pow+0x9da>
 810cef0:	f00c 0c01 	and.w	ip, ip, #1
 810cef4:	f1cc 0102 	rsb	r1, ip, #2
 810cef8:	9100      	str	r1, [sp, #0]
 810cefa:	b180      	cbz	r0, 810cf1e <__ieee754_pow+0xc6>
 810cefc:	e059      	b.n	810cfb2 <__ieee754_pow+0x15a>
 810cefe:	2800      	cmp	r0, #0
 810cf00:	d155      	bne.n	810cfae <__ieee754_pow+0x156>
 810cf02:	f1c1 0114 	rsb	r1, r1, #20
 810cf06:	fa46 fc01 	asr.w	ip, r6, r1
 810cf0a:	fa0c f101 	lsl.w	r1, ip, r1
 810cf0e:	42b1      	cmp	r1, r6
 810cf10:	f040 848c 	bne.w	810d82c <__ieee754_pow+0x9d4>
 810cf14:	f00c 0c01 	and.w	ip, ip, #1
 810cf18:	f1cc 0102 	rsb	r1, ip, #2
 810cf1c:	9100      	str	r1, [sp, #0]
 810cf1e:	4959      	ldr	r1, [pc, #356]	; (810d084 <__ieee754_pow+0x22c>)
 810cf20:	428e      	cmp	r6, r1
 810cf22:	d12d      	bne.n	810cf80 <__ieee754_pow+0x128>
 810cf24:	2f00      	cmp	r7, #0
 810cf26:	da79      	bge.n	810d01c <__ieee754_pow+0x1c4>
 810cf28:	4956      	ldr	r1, [pc, #344]	; (810d084 <__ieee754_pow+0x22c>)
 810cf2a:	2000      	movs	r0, #0
 810cf2c:	f7f3 fcba 	bl	81008a4 <__aeabi_ddiv>
 810cf30:	e016      	b.n	810cf60 <__ieee754_pow+0x108>
 810cf32:	2100      	movs	r1, #0
 810cf34:	9100      	str	r1, [sp, #0]
 810cf36:	2800      	cmp	r0, #0
 810cf38:	d13b      	bne.n	810cfb2 <__ieee754_pow+0x15a>
 810cf3a:	494f      	ldr	r1, [pc, #316]	; (810d078 <__ieee754_pow+0x220>)
 810cf3c:	428e      	cmp	r6, r1
 810cf3e:	d1ee      	bne.n	810cf1e <__ieee754_pow+0xc6>
 810cf40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810cf44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810cf48:	ea53 0308 	orrs.w	r3, r3, r8
 810cf4c:	f000 8466 	beq.w	810d81c <__ieee754_pow+0x9c4>
 810cf50:	4b4d      	ldr	r3, [pc, #308]	; (810d088 <__ieee754_pow+0x230>)
 810cf52:	429c      	cmp	r4, r3
 810cf54:	dd0d      	ble.n	810cf72 <__ieee754_pow+0x11a>
 810cf56:	2f00      	cmp	r7, #0
 810cf58:	f280 8464 	bge.w	810d824 <__ieee754_pow+0x9cc>
 810cf5c:	2000      	movs	r0, #0
 810cf5e:	2100      	movs	r1, #0
 810cf60:	ec41 0b10 	vmov	d0, r0, r1
 810cf64:	b00d      	add	sp, #52	; 0x34
 810cf66:	ecbd 8b06 	vpop	{d8-d10}
 810cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cf6e:	2102      	movs	r1, #2
 810cf70:	e7e0      	b.n	810cf34 <__ieee754_pow+0xdc>
 810cf72:	2f00      	cmp	r7, #0
 810cf74:	daf2      	bge.n	810cf5c <__ieee754_pow+0x104>
 810cf76:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810cf7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810cf7e:	e7ef      	b.n	810cf60 <__ieee754_pow+0x108>
 810cf80:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810cf84:	d104      	bne.n	810cf90 <__ieee754_pow+0x138>
 810cf86:	4610      	mov	r0, r2
 810cf88:	4619      	mov	r1, r3
 810cf8a:	f7f3 fb61 	bl	8100650 <__aeabi_dmul>
 810cf8e:	e7e7      	b.n	810cf60 <__ieee754_pow+0x108>
 810cf90:	493e      	ldr	r1, [pc, #248]	; (810d08c <__ieee754_pow+0x234>)
 810cf92:	428f      	cmp	r7, r1
 810cf94:	d10d      	bne.n	810cfb2 <__ieee754_pow+0x15a>
 810cf96:	f1b9 0f00 	cmp.w	r9, #0
 810cf9a:	db0a      	blt.n	810cfb2 <__ieee754_pow+0x15a>
 810cf9c:	ec43 2b10 	vmov	d0, r2, r3
 810cfa0:	b00d      	add	sp, #52	; 0x34
 810cfa2:	ecbd 8b06 	vpop	{d8-d10}
 810cfa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cfaa:	f000 bc77 	b.w	810d89c <__ieee754_sqrt>
 810cfae:	2100      	movs	r1, #0
 810cfb0:	9100      	str	r1, [sp, #0]
 810cfb2:	ec43 2b10 	vmov	d0, r2, r3
 810cfb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810cfba:	f000 fd23 	bl	810da04 <fabs>
 810cfbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810cfc2:	ec51 0b10 	vmov	r0, r1, d0
 810cfc6:	f1b8 0f00 	cmp.w	r8, #0
 810cfca:	d12a      	bne.n	810d022 <__ieee754_pow+0x1ca>
 810cfcc:	b12c      	cbz	r4, 810cfda <__ieee754_pow+0x182>
 810cfce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810d084 <__ieee754_pow+0x22c>
 810cfd2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810cfd6:	45e6      	cmp	lr, ip
 810cfd8:	d123      	bne.n	810d022 <__ieee754_pow+0x1ca>
 810cfda:	2f00      	cmp	r7, #0
 810cfdc:	da05      	bge.n	810cfea <__ieee754_pow+0x192>
 810cfde:	4602      	mov	r2, r0
 810cfe0:	460b      	mov	r3, r1
 810cfe2:	2000      	movs	r0, #0
 810cfe4:	4927      	ldr	r1, [pc, #156]	; (810d084 <__ieee754_pow+0x22c>)
 810cfe6:	f7f3 fc5d 	bl	81008a4 <__aeabi_ddiv>
 810cfea:	f1b9 0f00 	cmp.w	r9, #0
 810cfee:	dab7      	bge.n	810cf60 <__ieee754_pow+0x108>
 810cff0:	9b00      	ldr	r3, [sp, #0]
 810cff2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810cff6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810cffa:	4323      	orrs	r3, r4
 810cffc:	d108      	bne.n	810d010 <__ieee754_pow+0x1b8>
 810cffe:	4602      	mov	r2, r0
 810d000:	460b      	mov	r3, r1
 810d002:	4610      	mov	r0, r2
 810d004:	4619      	mov	r1, r3
 810d006:	f7f3 f96b 	bl	81002e0 <__aeabi_dsub>
 810d00a:	4602      	mov	r2, r0
 810d00c:	460b      	mov	r3, r1
 810d00e:	e78d      	b.n	810cf2c <__ieee754_pow+0xd4>
 810d010:	9b00      	ldr	r3, [sp, #0]
 810d012:	2b01      	cmp	r3, #1
 810d014:	d1a4      	bne.n	810cf60 <__ieee754_pow+0x108>
 810d016:	4602      	mov	r2, r0
 810d018:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d01c:	4610      	mov	r0, r2
 810d01e:	4619      	mov	r1, r3
 810d020:	e79e      	b.n	810cf60 <__ieee754_pow+0x108>
 810d022:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810d026:	f10c 35ff 	add.w	r5, ip, #4294967295
 810d02a:	950a      	str	r5, [sp, #40]	; 0x28
 810d02c:	9d00      	ldr	r5, [sp, #0]
 810d02e:	46ac      	mov	ip, r5
 810d030:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810d032:	ea5c 0505 	orrs.w	r5, ip, r5
 810d036:	d0e4      	beq.n	810d002 <__ieee754_pow+0x1aa>
 810d038:	4b15      	ldr	r3, [pc, #84]	; (810d090 <__ieee754_pow+0x238>)
 810d03a:	429e      	cmp	r6, r3
 810d03c:	f340 80fc 	ble.w	810d238 <__ieee754_pow+0x3e0>
 810d040:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810d044:	429e      	cmp	r6, r3
 810d046:	4b10      	ldr	r3, [pc, #64]	; (810d088 <__ieee754_pow+0x230>)
 810d048:	dd07      	ble.n	810d05a <__ieee754_pow+0x202>
 810d04a:	429c      	cmp	r4, r3
 810d04c:	dc0a      	bgt.n	810d064 <__ieee754_pow+0x20c>
 810d04e:	2f00      	cmp	r7, #0
 810d050:	da84      	bge.n	810cf5c <__ieee754_pow+0x104>
 810d052:	a307      	add	r3, pc, #28	; (adr r3, 810d070 <__ieee754_pow+0x218>)
 810d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d058:	e795      	b.n	810cf86 <__ieee754_pow+0x12e>
 810d05a:	429c      	cmp	r4, r3
 810d05c:	dbf7      	blt.n	810d04e <__ieee754_pow+0x1f6>
 810d05e:	4b09      	ldr	r3, [pc, #36]	; (810d084 <__ieee754_pow+0x22c>)
 810d060:	429c      	cmp	r4, r3
 810d062:	dd17      	ble.n	810d094 <__ieee754_pow+0x23c>
 810d064:	2f00      	cmp	r7, #0
 810d066:	dcf4      	bgt.n	810d052 <__ieee754_pow+0x1fa>
 810d068:	e778      	b.n	810cf5c <__ieee754_pow+0x104>
 810d06a:	bf00      	nop
 810d06c:	f3af 8000 	nop.w
 810d070:	8800759c 	.word	0x8800759c
 810d074:	7e37e43c 	.word	0x7e37e43c
 810d078:	7ff00000 	.word	0x7ff00000
 810d07c:	0810dd4c 	.word	0x0810dd4c
 810d080:	433fffff 	.word	0x433fffff
 810d084:	3ff00000 	.word	0x3ff00000
 810d088:	3fefffff 	.word	0x3fefffff
 810d08c:	3fe00000 	.word	0x3fe00000
 810d090:	41e00000 	.word	0x41e00000
 810d094:	4b64      	ldr	r3, [pc, #400]	; (810d228 <__ieee754_pow+0x3d0>)
 810d096:	2200      	movs	r2, #0
 810d098:	f7f3 f922 	bl	81002e0 <__aeabi_dsub>
 810d09c:	a356      	add	r3, pc, #344	; (adr r3, 810d1f8 <__ieee754_pow+0x3a0>)
 810d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0a2:	4604      	mov	r4, r0
 810d0a4:	460d      	mov	r5, r1
 810d0a6:	f7f3 fad3 	bl	8100650 <__aeabi_dmul>
 810d0aa:	a355      	add	r3, pc, #340	; (adr r3, 810d200 <__ieee754_pow+0x3a8>)
 810d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0b0:	4606      	mov	r6, r0
 810d0b2:	460f      	mov	r7, r1
 810d0b4:	4620      	mov	r0, r4
 810d0b6:	4629      	mov	r1, r5
 810d0b8:	f7f3 faca 	bl	8100650 <__aeabi_dmul>
 810d0bc:	4b5b      	ldr	r3, [pc, #364]	; (810d22c <__ieee754_pow+0x3d4>)
 810d0be:	4682      	mov	sl, r0
 810d0c0:	468b      	mov	fp, r1
 810d0c2:	2200      	movs	r2, #0
 810d0c4:	4620      	mov	r0, r4
 810d0c6:	4629      	mov	r1, r5
 810d0c8:	f7f3 fac2 	bl	8100650 <__aeabi_dmul>
 810d0cc:	4602      	mov	r2, r0
 810d0ce:	460b      	mov	r3, r1
 810d0d0:	a14d      	add	r1, pc, #308	; (adr r1, 810d208 <__ieee754_pow+0x3b0>)
 810d0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d0d6:	f7f3 f903 	bl	81002e0 <__aeabi_dsub>
 810d0da:	4622      	mov	r2, r4
 810d0dc:	462b      	mov	r3, r5
 810d0de:	f7f3 fab7 	bl	8100650 <__aeabi_dmul>
 810d0e2:	4602      	mov	r2, r0
 810d0e4:	460b      	mov	r3, r1
 810d0e6:	2000      	movs	r0, #0
 810d0e8:	4951      	ldr	r1, [pc, #324]	; (810d230 <__ieee754_pow+0x3d8>)
 810d0ea:	f7f3 f8f9 	bl	81002e0 <__aeabi_dsub>
 810d0ee:	4622      	mov	r2, r4
 810d0f0:	4680      	mov	r8, r0
 810d0f2:	4689      	mov	r9, r1
 810d0f4:	462b      	mov	r3, r5
 810d0f6:	4620      	mov	r0, r4
 810d0f8:	4629      	mov	r1, r5
 810d0fa:	f7f3 faa9 	bl	8100650 <__aeabi_dmul>
 810d0fe:	4602      	mov	r2, r0
 810d100:	460b      	mov	r3, r1
 810d102:	4640      	mov	r0, r8
 810d104:	4649      	mov	r1, r9
 810d106:	f7f3 faa3 	bl	8100650 <__aeabi_dmul>
 810d10a:	a341      	add	r3, pc, #260	; (adr r3, 810d210 <__ieee754_pow+0x3b8>)
 810d10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d110:	f7f3 fa9e 	bl	8100650 <__aeabi_dmul>
 810d114:	4602      	mov	r2, r0
 810d116:	460b      	mov	r3, r1
 810d118:	4650      	mov	r0, sl
 810d11a:	4659      	mov	r1, fp
 810d11c:	f7f3 f8e0 	bl	81002e0 <__aeabi_dsub>
 810d120:	4602      	mov	r2, r0
 810d122:	460b      	mov	r3, r1
 810d124:	4680      	mov	r8, r0
 810d126:	4689      	mov	r9, r1
 810d128:	4630      	mov	r0, r6
 810d12a:	4639      	mov	r1, r7
 810d12c:	f7f3 f8da 	bl	81002e4 <__adddf3>
 810d130:	2400      	movs	r4, #0
 810d132:	4632      	mov	r2, r6
 810d134:	463b      	mov	r3, r7
 810d136:	4620      	mov	r0, r4
 810d138:	460d      	mov	r5, r1
 810d13a:	f7f3 f8d1 	bl	81002e0 <__aeabi_dsub>
 810d13e:	4602      	mov	r2, r0
 810d140:	460b      	mov	r3, r1
 810d142:	4640      	mov	r0, r8
 810d144:	4649      	mov	r1, r9
 810d146:	f7f3 f8cb 	bl	81002e0 <__aeabi_dsub>
 810d14a:	9b00      	ldr	r3, [sp, #0]
 810d14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810d14e:	3b01      	subs	r3, #1
 810d150:	4313      	orrs	r3, r2
 810d152:	4682      	mov	sl, r0
 810d154:	468b      	mov	fp, r1
 810d156:	f040 81f1 	bne.w	810d53c <__ieee754_pow+0x6e4>
 810d15a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810d218 <__ieee754_pow+0x3c0>
 810d15e:	eeb0 8a47 	vmov.f32	s16, s14
 810d162:	eef0 8a67 	vmov.f32	s17, s15
 810d166:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810d16a:	2600      	movs	r6, #0
 810d16c:	4632      	mov	r2, r6
 810d16e:	463b      	mov	r3, r7
 810d170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d174:	f7f3 f8b4 	bl	81002e0 <__aeabi_dsub>
 810d178:	4622      	mov	r2, r4
 810d17a:	462b      	mov	r3, r5
 810d17c:	f7f3 fa68 	bl	8100650 <__aeabi_dmul>
 810d180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810d184:	4680      	mov	r8, r0
 810d186:	4689      	mov	r9, r1
 810d188:	4650      	mov	r0, sl
 810d18a:	4659      	mov	r1, fp
 810d18c:	f7f3 fa60 	bl	8100650 <__aeabi_dmul>
 810d190:	4602      	mov	r2, r0
 810d192:	460b      	mov	r3, r1
 810d194:	4640      	mov	r0, r8
 810d196:	4649      	mov	r1, r9
 810d198:	f7f3 f8a4 	bl	81002e4 <__adddf3>
 810d19c:	4632      	mov	r2, r6
 810d19e:	463b      	mov	r3, r7
 810d1a0:	4680      	mov	r8, r0
 810d1a2:	4689      	mov	r9, r1
 810d1a4:	4620      	mov	r0, r4
 810d1a6:	4629      	mov	r1, r5
 810d1a8:	f7f3 fa52 	bl	8100650 <__aeabi_dmul>
 810d1ac:	460b      	mov	r3, r1
 810d1ae:	4604      	mov	r4, r0
 810d1b0:	460d      	mov	r5, r1
 810d1b2:	4602      	mov	r2, r0
 810d1b4:	4649      	mov	r1, r9
 810d1b6:	4640      	mov	r0, r8
 810d1b8:	f7f3 f894 	bl	81002e4 <__adddf3>
 810d1bc:	4b1d      	ldr	r3, [pc, #116]	; (810d234 <__ieee754_pow+0x3dc>)
 810d1be:	4299      	cmp	r1, r3
 810d1c0:	ec45 4b19 	vmov	d9, r4, r5
 810d1c4:	4606      	mov	r6, r0
 810d1c6:	460f      	mov	r7, r1
 810d1c8:	468b      	mov	fp, r1
 810d1ca:	f340 82fe 	ble.w	810d7ca <__ieee754_pow+0x972>
 810d1ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810d1d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810d1d6:	4303      	orrs	r3, r0
 810d1d8:	f000 81f0 	beq.w	810d5bc <__ieee754_pow+0x764>
 810d1dc:	a310      	add	r3, pc, #64	; (adr r3, 810d220 <__ieee754_pow+0x3c8>)
 810d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1e2:	ec51 0b18 	vmov	r0, r1, d8
 810d1e6:	f7f3 fa33 	bl	8100650 <__aeabi_dmul>
 810d1ea:	a30d      	add	r3, pc, #52	; (adr r3, 810d220 <__ieee754_pow+0x3c8>)
 810d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1f0:	e6cb      	b.n	810cf8a <__ieee754_pow+0x132>
 810d1f2:	bf00      	nop
 810d1f4:	f3af 8000 	nop.w
 810d1f8:	60000000 	.word	0x60000000
 810d1fc:	3ff71547 	.word	0x3ff71547
 810d200:	f85ddf44 	.word	0xf85ddf44
 810d204:	3e54ae0b 	.word	0x3e54ae0b
 810d208:	55555555 	.word	0x55555555
 810d20c:	3fd55555 	.word	0x3fd55555
 810d210:	652b82fe 	.word	0x652b82fe
 810d214:	3ff71547 	.word	0x3ff71547
 810d218:	00000000 	.word	0x00000000
 810d21c:	bff00000 	.word	0xbff00000
 810d220:	8800759c 	.word	0x8800759c
 810d224:	7e37e43c 	.word	0x7e37e43c
 810d228:	3ff00000 	.word	0x3ff00000
 810d22c:	3fd00000 	.word	0x3fd00000
 810d230:	3fe00000 	.word	0x3fe00000
 810d234:	408fffff 	.word	0x408fffff
 810d238:	4bd7      	ldr	r3, [pc, #860]	; (810d598 <__ieee754_pow+0x740>)
 810d23a:	ea03 0309 	and.w	r3, r3, r9
 810d23e:	2200      	movs	r2, #0
 810d240:	b92b      	cbnz	r3, 810d24e <__ieee754_pow+0x3f6>
 810d242:	4bd6      	ldr	r3, [pc, #856]	; (810d59c <__ieee754_pow+0x744>)
 810d244:	f7f3 fa04 	bl	8100650 <__aeabi_dmul>
 810d248:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810d24c:	460c      	mov	r4, r1
 810d24e:	1523      	asrs	r3, r4, #20
 810d250:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810d254:	4413      	add	r3, r2
 810d256:	9309      	str	r3, [sp, #36]	; 0x24
 810d258:	4bd1      	ldr	r3, [pc, #836]	; (810d5a0 <__ieee754_pow+0x748>)
 810d25a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810d25e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810d262:	429c      	cmp	r4, r3
 810d264:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810d268:	dd08      	ble.n	810d27c <__ieee754_pow+0x424>
 810d26a:	4bce      	ldr	r3, [pc, #824]	; (810d5a4 <__ieee754_pow+0x74c>)
 810d26c:	429c      	cmp	r4, r3
 810d26e:	f340 8163 	ble.w	810d538 <__ieee754_pow+0x6e0>
 810d272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d274:	3301      	adds	r3, #1
 810d276:	9309      	str	r3, [sp, #36]	; 0x24
 810d278:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810d27c:	2400      	movs	r4, #0
 810d27e:	00e3      	lsls	r3, r4, #3
 810d280:	930b      	str	r3, [sp, #44]	; 0x2c
 810d282:	4bc9      	ldr	r3, [pc, #804]	; (810d5a8 <__ieee754_pow+0x750>)
 810d284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810d288:	ed93 7b00 	vldr	d7, [r3]
 810d28c:	4629      	mov	r1, r5
 810d28e:	ec53 2b17 	vmov	r2, r3, d7
 810d292:	eeb0 8a47 	vmov.f32	s16, s14
 810d296:	eef0 8a67 	vmov.f32	s17, s15
 810d29a:	4682      	mov	sl, r0
 810d29c:	f7f3 f820 	bl	81002e0 <__aeabi_dsub>
 810d2a0:	4652      	mov	r2, sl
 810d2a2:	4606      	mov	r6, r0
 810d2a4:	460f      	mov	r7, r1
 810d2a6:	462b      	mov	r3, r5
 810d2a8:	ec51 0b18 	vmov	r0, r1, d8
 810d2ac:	f7f3 f81a 	bl	81002e4 <__adddf3>
 810d2b0:	4602      	mov	r2, r0
 810d2b2:	460b      	mov	r3, r1
 810d2b4:	2000      	movs	r0, #0
 810d2b6:	49bd      	ldr	r1, [pc, #756]	; (810d5ac <__ieee754_pow+0x754>)
 810d2b8:	f7f3 faf4 	bl	81008a4 <__aeabi_ddiv>
 810d2bc:	ec41 0b19 	vmov	d9, r0, r1
 810d2c0:	4602      	mov	r2, r0
 810d2c2:	460b      	mov	r3, r1
 810d2c4:	4630      	mov	r0, r6
 810d2c6:	4639      	mov	r1, r7
 810d2c8:	f7f3 f9c2 	bl	8100650 <__aeabi_dmul>
 810d2cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810d2d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d2d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810d2d8:	2300      	movs	r3, #0
 810d2da:	9304      	str	r3, [sp, #16]
 810d2dc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810d2e0:	46ab      	mov	fp, r5
 810d2e2:	106d      	asrs	r5, r5, #1
 810d2e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810d2e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810d2ec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810d2f0:	2200      	movs	r2, #0
 810d2f2:	4640      	mov	r0, r8
 810d2f4:	4649      	mov	r1, r9
 810d2f6:	4614      	mov	r4, r2
 810d2f8:	461d      	mov	r5, r3
 810d2fa:	f7f3 f9a9 	bl	8100650 <__aeabi_dmul>
 810d2fe:	4602      	mov	r2, r0
 810d300:	460b      	mov	r3, r1
 810d302:	4630      	mov	r0, r6
 810d304:	4639      	mov	r1, r7
 810d306:	f7f2 ffeb 	bl	81002e0 <__aeabi_dsub>
 810d30a:	ec53 2b18 	vmov	r2, r3, d8
 810d30e:	4606      	mov	r6, r0
 810d310:	460f      	mov	r7, r1
 810d312:	4620      	mov	r0, r4
 810d314:	4629      	mov	r1, r5
 810d316:	f7f2 ffe3 	bl	81002e0 <__aeabi_dsub>
 810d31a:	4602      	mov	r2, r0
 810d31c:	460b      	mov	r3, r1
 810d31e:	4650      	mov	r0, sl
 810d320:	4659      	mov	r1, fp
 810d322:	f7f2 ffdd 	bl	81002e0 <__aeabi_dsub>
 810d326:	4642      	mov	r2, r8
 810d328:	464b      	mov	r3, r9
 810d32a:	f7f3 f991 	bl	8100650 <__aeabi_dmul>
 810d32e:	4602      	mov	r2, r0
 810d330:	460b      	mov	r3, r1
 810d332:	4630      	mov	r0, r6
 810d334:	4639      	mov	r1, r7
 810d336:	f7f2 ffd3 	bl	81002e0 <__aeabi_dsub>
 810d33a:	ec53 2b19 	vmov	r2, r3, d9
 810d33e:	f7f3 f987 	bl	8100650 <__aeabi_dmul>
 810d342:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d346:	ec41 0b18 	vmov	d8, r0, r1
 810d34a:	4610      	mov	r0, r2
 810d34c:	4619      	mov	r1, r3
 810d34e:	f7f3 f97f 	bl	8100650 <__aeabi_dmul>
 810d352:	a37d      	add	r3, pc, #500	; (adr r3, 810d548 <__ieee754_pow+0x6f0>)
 810d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d358:	4604      	mov	r4, r0
 810d35a:	460d      	mov	r5, r1
 810d35c:	f7f3 f978 	bl	8100650 <__aeabi_dmul>
 810d360:	a37b      	add	r3, pc, #492	; (adr r3, 810d550 <__ieee754_pow+0x6f8>)
 810d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d366:	f7f2 ffbd 	bl	81002e4 <__adddf3>
 810d36a:	4622      	mov	r2, r4
 810d36c:	462b      	mov	r3, r5
 810d36e:	f7f3 f96f 	bl	8100650 <__aeabi_dmul>
 810d372:	a379      	add	r3, pc, #484	; (adr r3, 810d558 <__ieee754_pow+0x700>)
 810d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d378:	f7f2 ffb4 	bl	81002e4 <__adddf3>
 810d37c:	4622      	mov	r2, r4
 810d37e:	462b      	mov	r3, r5
 810d380:	f7f3 f966 	bl	8100650 <__aeabi_dmul>
 810d384:	a376      	add	r3, pc, #472	; (adr r3, 810d560 <__ieee754_pow+0x708>)
 810d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d38a:	f7f2 ffab 	bl	81002e4 <__adddf3>
 810d38e:	4622      	mov	r2, r4
 810d390:	462b      	mov	r3, r5
 810d392:	f7f3 f95d 	bl	8100650 <__aeabi_dmul>
 810d396:	a374      	add	r3, pc, #464	; (adr r3, 810d568 <__ieee754_pow+0x710>)
 810d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d39c:	f7f2 ffa2 	bl	81002e4 <__adddf3>
 810d3a0:	4622      	mov	r2, r4
 810d3a2:	462b      	mov	r3, r5
 810d3a4:	f7f3 f954 	bl	8100650 <__aeabi_dmul>
 810d3a8:	a371      	add	r3, pc, #452	; (adr r3, 810d570 <__ieee754_pow+0x718>)
 810d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3ae:	f7f2 ff99 	bl	81002e4 <__adddf3>
 810d3b2:	4622      	mov	r2, r4
 810d3b4:	4606      	mov	r6, r0
 810d3b6:	460f      	mov	r7, r1
 810d3b8:	462b      	mov	r3, r5
 810d3ba:	4620      	mov	r0, r4
 810d3bc:	4629      	mov	r1, r5
 810d3be:	f7f3 f947 	bl	8100650 <__aeabi_dmul>
 810d3c2:	4602      	mov	r2, r0
 810d3c4:	460b      	mov	r3, r1
 810d3c6:	4630      	mov	r0, r6
 810d3c8:	4639      	mov	r1, r7
 810d3ca:	f7f3 f941 	bl	8100650 <__aeabi_dmul>
 810d3ce:	4642      	mov	r2, r8
 810d3d0:	4604      	mov	r4, r0
 810d3d2:	460d      	mov	r5, r1
 810d3d4:	464b      	mov	r3, r9
 810d3d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810d3da:	f7f2 ff83 	bl	81002e4 <__adddf3>
 810d3de:	ec53 2b18 	vmov	r2, r3, d8
 810d3e2:	f7f3 f935 	bl	8100650 <__aeabi_dmul>
 810d3e6:	4622      	mov	r2, r4
 810d3e8:	462b      	mov	r3, r5
 810d3ea:	f7f2 ff7b 	bl	81002e4 <__adddf3>
 810d3ee:	4642      	mov	r2, r8
 810d3f0:	4682      	mov	sl, r0
 810d3f2:	468b      	mov	fp, r1
 810d3f4:	464b      	mov	r3, r9
 810d3f6:	4640      	mov	r0, r8
 810d3f8:	4649      	mov	r1, r9
 810d3fa:	f7f3 f929 	bl	8100650 <__aeabi_dmul>
 810d3fe:	4b6c      	ldr	r3, [pc, #432]	; (810d5b0 <__ieee754_pow+0x758>)
 810d400:	2200      	movs	r2, #0
 810d402:	4606      	mov	r6, r0
 810d404:	460f      	mov	r7, r1
 810d406:	f7f2 ff6d 	bl	81002e4 <__adddf3>
 810d40a:	4652      	mov	r2, sl
 810d40c:	465b      	mov	r3, fp
 810d40e:	f7f2 ff69 	bl	81002e4 <__adddf3>
 810d412:	9c04      	ldr	r4, [sp, #16]
 810d414:	460d      	mov	r5, r1
 810d416:	4622      	mov	r2, r4
 810d418:	460b      	mov	r3, r1
 810d41a:	4640      	mov	r0, r8
 810d41c:	4649      	mov	r1, r9
 810d41e:	f7f3 f917 	bl	8100650 <__aeabi_dmul>
 810d422:	4b63      	ldr	r3, [pc, #396]	; (810d5b0 <__ieee754_pow+0x758>)
 810d424:	4680      	mov	r8, r0
 810d426:	4689      	mov	r9, r1
 810d428:	2200      	movs	r2, #0
 810d42a:	4620      	mov	r0, r4
 810d42c:	4629      	mov	r1, r5
 810d42e:	f7f2 ff57 	bl	81002e0 <__aeabi_dsub>
 810d432:	4632      	mov	r2, r6
 810d434:	463b      	mov	r3, r7
 810d436:	f7f2 ff53 	bl	81002e0 <__aeabi_dsub>
 810d43a:	4602      	mov	r2, r0
 810d43c:	460b      	mov	r3, r1
 810d43e:	4650      	mov	r0, sl
 810d440:	4659      	mov	r1, fp
 810d442:	f7f2 ff4d 	bl	81002e0 <__aeabi_dsub>
 810d446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d44a:	f7f3 f901 	bl	8100650 <__aeabi_dmul>
 810d44e:	4622      	mov	r2, r4
 810d450:	4606      	mov	r6, r0
 810d452:	460f      	mov	r7, r1
 810d454:	462b      	mov	r3, r5
 810d456:	ec51 0b18 	vmov	r0, r1, d8
 810d45a:	f7f3 f8f9 	bl	8100650 <__aeabi_dmul>
 810d45e:	4602      	mov	r2, r0
 810d460:	460b      	mov	r3, r1
 810d462:	4630      	mov	r0, r6
 810d464:	4639      	mov	r1, r7
 810d466:	f7f2 ff3d 	bl	81002e4 <__adddf3>
 810d46a:	4606      	mov	r6, r0
 810d46c:	460f      	mov	r7, r1
 810d46e:	4602      	mov	r2, r0
 810d470:	460b      	mov	r3, r1
 810d472:	4640      	mov	r0, r8
 810d474:	4649      	mov	r1, r9
 810d476:	f7f2 ff35 	bl	81002e4 <__adddf3>
 810d47a:	9c04      	ldr	r4, [sp, #16]
 810d47c:	a33e      	add	r3, pc, #248	; (adr r3, 810d578 <__ieee754_pow+0x720>)
 810d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d482:	4620      	mov	r0, r4
 810d484:	460d      	mov	r5, r1
 810d486:	f7f3 f8e3 	bl	8100650 <__aeabi_dmul>
 810d48a:	4642      	mov	r2, r8
 810d48c:	ec41 0b18 	vmov	d8, r0, r1
 810d490:	464b      	mov	r3, r9
 810d492:	4620      	mov	r0, r4
 810d494:	4629      	mov	r1, r5
 810d496:	f7f2 ff23 	bl	81002e0 <__aeabi_dsub>
 810d49a:	4602      	mov	r2, r0
 810d49c:	460b      	mov	r3, r1
 810d49e:	4630      	mov	r0, r6
 810d4a0:	4639      	mov	r1, r7
 810d4a2:	f7f2 ff1d 	bl	81002e0 <__aeabi_dsub>
 810d4a6:	a336      	add	r3, pc, #216	; (adr r3, 810d580 <__ieee754_pow+0x728>)
 810d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d4ac:	f7f3 f8d0 	bl	8100650 <__aeabi_dmul>
 810d4b0:	a335      	add	r3, pc, #212	; (adr r3, 810d588 <__ieee754_pow+0x730>)
 810d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d4b6:	4606      	mov	r6, r0
 810d4b8:	460f      	mov	r7, r1
 810d4ba:	4620      	mov	r0, r4
 810d4bc:	4629      	mov	r1, r5
 810d4be:	f7f3 f8c7 	bl	8100650 <__aeabi_dmul>
 810d4c2:	4602      	mov	r2, r0
 810d4c4:	460b      	mov	r3, r1
 810d4c6:	4630      	mov	r0, r6
 810d4c8:	4639      	mov	r1, r7
 810d4ca:	f7f2 ff0b 	bl	81002e4 <__adddf3>
 810d4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d4d0:	4b38      	ldr	r3, [pc, #224]	; (810d5b4 <__ieee754_pow+0x75c>)
 810d4d2:	4413      	add	r3, r2
 810d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d4d8:	f7f2 ff04 	bl	81002e4 <__adddf3>
 810d4dc:	4682      	mov	sl, r0
 810d4de:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d4e0:	468b      	mov	fp, r1
 810d4e2:	f7f3 f84b 	bl	810057c <__aeabi_i2d>
 810d4e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d4e8:	4b33      	ldr	r3, [pc, #204]	; (810d5b8 <__ieee754_pow+0x760>)
 810d4ea:	4413      	add	r3, r2
 810d4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d4f0:	4606      	mov	r6, r0
 810d4f2:	460f      	mov	r7, r1
 810d4f4:	4652      	mov	r2, sl
 810d4f6:	465b      	mov	r3, fp
 810d4f8:	ec51 0b18 	vmov	r0, r1, d8
 810d4fc:	f7f2 fef2 	bl	81002e4 <__adddf3>
 810d500:	4642      	mov	r2, r8
 810d502:	464b      	mov	r3, r9
 810d504:	f7f2 feee 	bl	81002e4 <__adddf3>
 810d508:	4632      	mov	r2, r6
 810d50a:	463b      	mov	r3, r7
 810d50c:	f7f2 feea 	bl	81002e4 <__adddf3>
 810d510:	9c04      	ldr	r4, [sp, #16]
 810d512:	4632      	mov	r2, r6
 810d514:	463b      	mov	r3, r7
 810d516:	4620      	mov	r0, r4
 810d518:	460d      	mov	r5, r1
 810d51a:	f7f2 fee1 	bl	81002e0 <__aeabi_dsub>
 810d51e:	4642      	mov	r2, r8
 810d520:	464b      	mov	r3, r9
 810d522:	f7f2 fedd 	bl	81002e0 <__aeabi_dsub>
 810d526:	ec53 2b18 	vmov	r2, r3, d8
 810d52a:	f7f2 fed9 	bl	81002e0 <__aeabi_dsub>
 810d52e:	4602      	mov	r2, r0
 810d530:	460b      	mov	r3, r1
 810d532:	4650      	mov	r0, sl
 810d534:	4659      	mov	r1, fp
 810d536:	e606      	b.n	810d146 <__ieee754_pow+0x2ee>
 810d538:	2401      	movs	r4, #1
 810d53a:	e6a0      	b.n	810d27e <__ieee754_pow+0x426>
 810d53c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810d590 <__ieee754_pow+0x738>
 810d540:	e60d      	b.n	810d15e <__ieee754_pow+0x306>
 810d542:	bf00      	nop
 810d544:	f3af 8000 	nop.w
 810d548:	4a454eef 	.word	0x4a454eef
 810d54c:	3fca7e28 	.word	0x3fca7e28
 810d550:	93c9db65 	.word	0x93c9db65
 810d554:	3fcd864a 	.word	0x3fcd864a
 810d558:	a91d4101 	.word	0xa91d4101
 810d55c:	3fd17460 	.word	0x3fd17460
 810d560:	518f264d 	.word	0x518f264d
 810d564:	3fd55555 	.word	0x3fd55555
 810d568:	db6fabff 	.word	0xdb6fabff
 810d56c:	3fdb6db6 	.word	0x3fdb6db6
 810d570:	33333303 	.word	0x33333303
 810d574:	3fe33333 	.word	0x3fe33333
 810d578:	e0000000 	.word	0xe0000000
 810d57c:	3feec709 	.word	0x3feec709
 810d580:	dc3a03fd 	.word	0xdc3a03fd
 810d584:	3feec709 	.word	0x3feec709
 810d588:	145b01f5 	.word	0x145b01f5
 810d58c:	be3e2fe0 	.word	0xbe3e2fe0
 810d590:	00000000 	.word	0x00000000
 810d594:	3ff00000 	.word	0x3ff00000
 810d598:	7ff00000 	.word	0x7ff00000
 810d59c:	43400000 	.word	0x43400000
 810d5a0:	0003988e 	.word	0x0003988e
 810d5a4:	000bb679 	.word	0x000bb679
 810d5a8:	0810dd50 	.word	0x0810dd50
 810d5ac:	3ff00000 	.word	0x3ff00000
 810d5b0:	40080000 	.word	0x40080000
 810d5b4:	0810dd70 	.word	0x0810dd70
 810d5b8:	0810dd60 	.word	0x0810dd60
 810d5bc:	a3b5      	add	r3, pc, #724	; (adr r3, 810d894 <__ieee754_pow+0xa3c>)
 810d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d5c2:	4640      	mov	r0, r8
 810d5c4:	4649      	mov	r1, r9
 810d5c6:	f7f2 fe8d 	bl	81002e4 <__adddf3>
 810d5ca:	4622      	mov	r2, r4
 810d5cc:	ec41 0b1a 	vmov	d10, r0, r1
 810d5d0:	462b      	mov	r3, r5
 810d5d2:	4630      	mov	r0, r6
 810d5d4:	4639      	mov	r1, r7
 810d5d6:	f7f2 fe83 	bl	81002e0 <__aeabi_dsub>
 810d5da:	4602      	mov	r2, r0
 810d5dc:	460b      	mov	r3, r1
 810d5de:	ec51 0b1a 	vmov	r0, r1, d10
 810d5e2:	f7f3 fac5 	bl	8100b70 <__aeabi_dcmpgt>
 810d5e6:	2800      	cmp	r0, #0
 810d5e8:	f47f adf8 	bne.w	810d1dc <__ieee754_pow+0x384>
 810d5ec:	4aa4      	ldr	r2, [pc, #656]	; (810d880 <__ieee754_pow+0xa28>)
 810d5ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810d5f2:	4293      	cmp	r3, r2
 810d5f4:	f340 810b 	ble.w	810d80e <__ieee754_pow+0x9b6>
 810d5f8:	151b      	asrs	r3, r3, #20
 810d5fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810d5fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810d602:	fa4a f303 	asr.w	r3, sl, r3
 810d606:	445b      	add	r3, fp
 810d608:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810d60c:	4e9d      	ldr	r6, [pc, #628]	; (810d884 <__ieee754_pow+0xa2c>)
 810d60e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810d612:	4116      	asrs	r6, r2
 810d614:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810d618:	2000      	movs	r0, #0
 810d61a:	ea23 0106 	bic.w	r1, r3, r6
 810d61e:	f1c2 0214 	rsb	r2, r2, #20
 810d622:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810d626:	fa4a fa02 	asr.w	sl, sl, r2
 810d62a:	f1bb 0f00 	cmp.w	fp, #0
 810d62e:	4602      	mov	r2, r0
 810d630:	460b      	mov	r3, r1
 810d632:	4620      	mov	r0, r4
 810d634:	4629      	mov	r1, r5
 810d636:	bfb8      	it	lt
 810d638:	f1ca 0a00 	rsblt	sl, sl, #0
 810d63c:	f7f2 fe50 	bl	81002e0 <__aeabi_dsub>
 810d640:	ec41 0b19 	vmov	d9, r0, r1
 810d644:	4642      	mov	r2, r8
 810d646:	464b      	mov	r3, r9
 810d648:	ec51 0b19 	vmov	r0, r1, d9
 810d64c:	f7f2 fe4a 	bl	81002e4 <__adddf3>
 810d650:	2400      	movs	r4, #0
 810d652:	a379      	add	r3, pc, #484	; (adr r3, 810d838 <__ieee754_pow+0x9e0>)
 810d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d658:	4620      	mov	r0, r4
 810d65a:	460d      	mov	r5, r1
 810d65c:	f7f2 fff8 	bl	8100650 <__aeabi_dmul>
 810d660:	ec53 2b19 	vmov	r2, r3, d9
 810d664:	4606      	mov	r6, r0
 810d666:	460f      	mov	r7, r1
 810d668:	4620      	mov	r0, r4
 810d66a:	4629      	mov	r1, r5
 810d66c:	f7f2 fe38 	bl	81002e0 <__aeabi_dsub>
 810d670:	4602      	mov	r2, r0
 810d672:	460b      	mov	r3, r1
 810d674:	4640      	mov	r0, r8
 810d676:	4649      	mov	r1, r9
 810d678:	f7f2 fe32 	bl	81002e0 <__aeabi_dsub>
 810d67c:	a370      	add	r3, pc, #448	; (adr r3, 810d840 <__ieee754_pow+0x9e8>)
 810d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d682:	f7f2 ffe5 	bl	8100650 <__aeabi_dmul>
 810d686:	a370      	add	r3, pc, #448	; (adr r3, 810d848 <__ieee754_pow+0x9f0>)
 810d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d68c:	4680      	mov	r8, r0
 810d68e:	4689      	mov	r9, r1
 810d690:	4620      	mov	r0, r4
 810d692:	4629      	mov	r1, r5
 810d694:	f7f2 ffdc 	bl	8100650 <__aeabi_dmul>
 810d698:	4602      	mov	r2, r0
 810d69a:	460b      	mov	r3, r1
 810d69c:	4640      	mov	r0, r8
 810d69e:	4649      	mov	r1, r9
 810d6a0:	f7f2 fe20 	bl	81002e4 <__adddf3>
 810d6a4:	4604      	mov	r4, r0
 810d6a6:	460d      	mov	r5, r1
 810d6a8:	4602      	mov	r2, r0
 810d6aa:	460b      	mov	r3, r1
 810d6ac:	4630      	mov	r0, r6
 810d6ae:	4639      	mov	r1, r7
 810d6b0:	f7f2 fe18 	bl	81002e4 <__adddf3>
 810d6b4:	4632      	mov	r2, r6
 810d6b6:	463b      	mov	r3, r7
 810d6b8:	4680      	mov	r8, r0
 810d6ba:	4689      	mov	r9, r1
 810d6bc:	f7f2 fe10 	bl	81002e0 <__aeabi_dsub>
 810d6c0:	4602      	mov	r2, r0
 810d6c2:	460b      	mov	r3, r1
 810d6c4:	4620      	mov	r0, r4
 810d6c6:	4629      	mov	r1, r5
 810d6c8:	f7f2 fe0a 	bl	81002e0 <__aeabi_dsub>
 810d6cc:	4642      	mov	r2, r8
 810d6ce:	4606      	mov	r6, r0
 810d6d0:	460f      	mov	r7, r1
 810d6d2:	464b      	mov	r3, r9
 810d6d4:	4640      	mov	r0, r8
 810d6d6:	4649      	mov	r1, r9
 810d6d8:	f7f2 ffba 	bl	8100650 <__aeabi_dmul>
 810d6dc:	a35c      	add	r3, pc, #368	; (adr r3, 810d850 <__ieee754_pow+0x9f8>)
 810d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6e2:	4604      	mov	r4, r0
 810d6e4:	460d      	mov	r5, r1
 810d6e6:	f7f2 ffb3 	bl	8100650 <__aeabi_dmul>
 810d6ea:	a35b      	add	r3, pc, #364	; (adr r3, 810d858 <__ieee754_pow+0xa00>)
 810d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6f0:	f7f2 fdf6 	bl	81002e0 <__aeabi_dsub>
 810d6f4:	4622      	mov	r2, r4
 810d6f6:	462b      	mov	r3, r5
 810d6f8:	f7f2 ffaa 	bl	8100650 <__aeabi_dmul>
 810d6fc:	a358      	add	r3, pc, #352	; (adr r3, 810d860 <__ieee754_pow+0xa08>)
 810d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d702:	f7f2 fdef 	bl	81002e4 <__adddf3>
 810d706:	4622      	mov	r2, r4
 810d708:	462b      	mov	r3, r5
 810d70a:	f7f2 ffa1 	bl	8100650 <__aeabi_dmul>
 810d70e:	a356      	add	r3, pc, #344	; (adr r3, 810d868 <__ieee754_pow+0xa10>)
 810d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d714:	f7f2 fde4 	bl	81002e0 <__aeabi_dsub>
 810d718:	4622      	mov	r2, r4
 810d71a:	462b      	mov	r3, r5
 810d71c:	f7f2 ff98 	bl	8100650 <__aeabi_dmul>
 810d720:	a353      	add	r3, pc, #332	; (adr r3, 810d870 <__ieee754_pow+0xa18>)
 810d722:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d726:	f7f2 fddd 	bl	81002e4 <__adddf3>
 810d72a:	4622      	mov	r2, r4
 810d72c:	462b      	mov	r3, r5
 810d72e:	f7f2 ff8f 	bl	8100650 <__aeabi_dmul>
 810d732:	4602      	mov	r2, r0
 810d734:	460b      	mov	r3, r1
 810d736:	4640      	mov	r0, r8
 810d738:	4649      	mov	r1, r9
 810d73a:	f7f2 fdd1 	bl	81002e0 <__aeabi_dsub>
 810d73e:	4604      	mov	r4, r0
 810d740:	460d      	mov	r5, r1
 810d742:	4602      	mov	r2, r0
 810d744:	460b      	mov	r3, r1
 810d746:	4640      	mov	r0, r8
 810d748:	4649      	mov	r1, r9
 810d74a:	f7f2 ff81 	bl	8100650 <__aeabi_dmul>
 810d74e:	2200      	movs	r2, #0
 810d750:	ec41 0b19 	vmov	d9, r0, r1
 810d754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810d758:	4620      	mov	r0, r4
 810d75a:	4629      	mov	r1, r5
 810d75c:	f7f2 fdc0 	bl	81002e0 <__aeabi_dsub>
 810d760:	4602      	mov	r2, r0
 810d762:	460b      	mov	r3, r1
 810d764:	ec51 0b19 	vmov	r0, r1, d9
 810d768:	f7f3 f89c 	bl	81008a4 <__aeabi_ddiv>
 810d76c:	4632      	mov	r2, r6
 810d76e:	4604      	mov	r4, r0
 810d770:	460d      	mov	r5, r1
 810d772:	463b      	mov	r3, r7
 810d774:	4640      	mov	r0, r8
 810d776:	4649      	mov	r1, r9
 810d778:	f7f2 ff6a 	bl	8100650 <__aeabi_dmul>
 810d77c:	4632      	mov	r2, r6
 810d77e:	463b      	mov	r3, r7
 810d780:	f7f2 fdb0 	bl	81002e4 <__adddf3>
 810d784:	4602      	mov	r2, r0
 810d786:	460b      	mov	r3, r1
 810d788:	4620      	mov	r0, r4
 810d78a:	4629      	mov	r1, r5
 810d78c:	f7f2 fda8 	bl	81002e0 <__aeabi_dsub>
 810d790:	4642      	mov	r2, r8
 810d792:	464b      	mov	r3, r9
 810d794:	f7f2 fda4 	bl	81002e0 <__aeabi_dsub>
 810d798:	460b      	mov	r3, r1
 810d79a:	4602      	mov	r2, r0
 810d79c:	493a      	ldr	r1, [pc, #232]	; (810d888 <__ieee754_pow+0xa30>)
 810d79e:	2000      	movs	r0, #0
 810d7a0:	f7f2 fd9e 	bl	81002e0 <__aeabi_dsub>
 810d7a4:	e9cd 0100 	strd	r0, r1, [sp]
 810d7a8:	9b01      	ldr	r3, [sp, #4]
 810d7aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810d7ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d7b2:	da2f      	bge.n	810d814 <__ieee754_pow+0x9bc>
 810d7b4:	4650      	mov	r0, sl
 810d7b6:	ed9d 0b00 	vldr	d0, [sp]
 810d7ba:	f000 f9cd 	bl	810db58 <scalbn>
 810d7be:	ec51 0b10 	vmov	r0, r1, d0
 810d7c2:	ec53 2b18 	vmov	r2, r3, d8
 810d7c6:	f7ff bbe0 	b.w	810cf8a <__ieee754_pow+0x132>
 810d7ca:	4b30      	ldr	r3, [pc, #192]	; (810d88c <__ieee754_pow+0xa34>)
 810d7cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810d7d0:	429e      	cmp	r6, r3
 810d7d2:	f77f af0b 	ble.w	810d5ec <__ieee754_pow+0x794>
 810d7d6:	4b2e      	ldr	r3, [pc, #184]	; (810d890 <__ieee754_pow+0xa38>)
 810d7d8:	440b      	add	r3, r1
 810d7da:	4303      	orrs	r3, r0
 810d7dc:	d00b      	beq.n	810d7f6 <__ieee754_pow+0x99e>
 810d7de:	a326      	add	r3, pc, #152	; (adr r3, 810d878 <__ieee754_pow+0xa20>)
 810d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7e4:	ec51 0b18 	vmov	r0, r1, d8
 810d7e8:	f7f2 ff32 	bl	8100650 <__aeabi_dmul>
 810d7ec:	a322      	add	r3, pc, #136	; (adr r3, 810d878 <__ieee754_pow+0xa20>)
 810d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7f2:	f7ff bbca 	b.w	810cf8a <__ieee754_pow+0x132>
 810d7f6:	4622      	mov	r2, r4
 810d7f8:	462b      	mov	r3, r5
 810d7fa:	f7f2 fd71 	bl	81002e0 <__aeabi_dsub>
 810d7fe:	4642      	mov	r2, r8
 810d800:	464b      	mov	r3, r9
 810d802:	f7f3 f9ab 	bl	8100b5c <__aeabi_dcmpge>
 810d806:	2800      	cmp	r0, #0
 810d808:	f43f aef0 	beq.w	810d5ec <__ieee754_pow+0x794>
 810d80c:	e7e7      	b.n	810d7de <__ieee754_pow+0x986>
 810d80e:	f04f 0a00 	mov.w	sl, #0
 810d812:	e717      	b.n	810d644 <__ieee754_pow+0x7ec>
 810d814:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d818:	4619      	mov	r1, r3
 810d81a:	e7d2      	b.n	810d7c2 <__ieee754_pow+0x96a>
 810d81c:	491a      	ldr	r1, [pc, #104]	; (810d888 <__ieee754_pow+0xa30>)
 810d81e:	2000      	movs	r0, #0
 810d820:	f7ff bb9e 	b.w	810cf60 <__ieee754_pow+0x108>
 810d824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d828:	f7ff bb9a 	b.w	810cf60 <__ieee754_pow+0x108>
 810d82c:	9000      	str	r0, [sp, #0]
 810d82e:	f7ff bb76 	b.w	810cf1e <__ieee754_pow+0xc6>
 810d832:	2100      	movs	r1, #0
 810d834:	f7ff bb60 	b.w	810cef8 <__ieee754_pow+0xa0>
 810d838:	00000000 	.word	0x00000000
 810d83c:	3fe62e43 	.word	0x3fe62e43
 810d840:	fefa39ef 	.word	0xfefa39ef
 810d844:	3fe62e42 	.word	0x3fe62e42
 810d848:	0ca86c39 	.word	0x0ca86c39
 810d84c:	be205c61 	.word	0xbe205c61
 810d850:	72bea4d0 	.word	0x72bea4d0
 810d854:	3e663769 	.word	0x3e663769
 810d858:	c5d26bf1 	.word	0xc5d26bf1
 810d85c:	3ebbbd41 	.word	0x3ebbbd41
 810d860:	af25de2c 	.word	0xaf25de2c
 810d864:	3f11566a 	.word	0x3f11566a
 810d868:	16bebd93 	.word	0x16bebd93
 810d86c:	3f66c16c 	.word	0x3f66c16c
 810d870:	5555553e 	.word	0x5555553e
 810d874:	3fc55555 	.word	0x3fc55555
 810d878:	c2f8f359 	.word	0xc2f8f359
 810d87c:	01a56e1f 	.word	0x01a56e1f
 810d880:	3fe00000 	.word	0x3fe00000
 810d884:	000fffff 	.word	0x000fffff
 810d888:	3ff00000 	.word	0x3ff00000
 810d88c:	4090cbff 	.word	0x4090cbff
 810d890:	3f6f3400 	.word	0x3f6f3400
 810d894:	652b82fe 	.word	0x652b82fe
 810d898:	3c971547 	.word	0x3c971547

0810d89c <__ieee754_sqrt>:
 810d89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d8a0:	ec55 4b10 	vmov	r4, r5, d0
 810d8a4:	4e56      	ldr	r6, [pc, #344]	; (810da00 <__ieee754_sqrt+0x164>)
 810d8a6:	43ae      	bics	r6, r5
 810d8a8:	ee10 0a10 	vmov	r0, s0
 810d8ac:	ee10 3a10 	vmov	r3, s0
 810d8b0:	4629      	mov	r1, r5
 810d8b2:	462a      	mov	r2, r5
 810d8b4:	d110      	bne.n	810d8d8 <__ieee754_sqrt+0x3c>
 810d8b6:	ee10 2a10 	vmov	r2, s0
 810d8ba:	462b      	mov	r3, r5
 810d8bc:	f7f2 fec8 	bl	8100650 <__aeabi_dmul>
 810d8c0:	4602      	mov	r2, r0
 810d8c2:	460b      	mov	r3, r1
 810d8c4:	4620      	mov	r0, r4
 810d8c6:	4629      	mov	r1, r5
 810d8c8:	f7f2 fd0c 	bl	81002e4 <__adddf3>
 810d8cc:	4604      	mov	r4, r0
 810d8ce:	460d      	mov	r5, r1
 810d8d0:	ec45 4b10 	vmov	d0, r4, r5
 810d8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d8d8:	2d00      	cmp	r5, #0
 810d8da:	dc10      	bgt.n	810d8fe <__ieee754_sqrt+0x62>
 810d8dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d8e0:	4330      	orrs	r0, r6
 810d8e2:	d0f5      	beq.n	810d8d0 <__ieee754_sqrt+0x34>
 810d8e4:	b15d      	cbz	r5, 810d8fe <__ieee754_sqrt+0x62>
 810d8e6:	ee10 2a10 	vmov	r2, s0
 810d8ea:	462b      	mov	r3, r5
 810d8ec:	ee10 0a10 	vmov	r0, s0
 810d8f0:	f7f2 fcf6 	bl	81002e0 <__aeabi_dsub>
 810d8f4:	4602      	mov	r2, r0
 810d8f6:	460b      	mov	r3, r1
 810d8f8:	f7f2 ffd4 	bl	81008a4 <__aeabi_ddiv>
 810d8fc:	e7e6      	b.n	810d8cc <__ieee754_sqrt+0x30>
 810d8fe:	1509      	asrs	r1, r1, #20
 810d900:	d076      	beq.n	810d9f0 <__ieee754_sqrt+0x154>
 810d902:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810d906:	07ce      	lsls	r6, r1, #31
 810d908:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810d90c:	bf5e      	ittt	pl
 810d90e:	0fda      	lsrpl	r2, r3, #31
 810d910:	005b      	lslpl	r3, r3, #1
 810d912:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810d916:	0fda      	lsrs	r2, r3, #31
 810d918:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810d91c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810d920:	2000      	movs	r0, #0
 810d922:	106d      	asrs	r5, r5, #1
 810d924:	005b      	lsls	r3, r3, #1
 810d926:	f04f 0e16 	mov.w	lr, #22
 810d92a:	4684      	mov	ip, r0
 810d92c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d930:	eb0c 0401 	add.w	r4, ip, r1
 810d934:	4294      	cmp	r4, r2
 810d936:	bfde      	ittt	le
 810d938:	1b12      	suble	r2, r2, r4
 810d93a:	eb04 0c01 	addle.w	ip, r4, r1
 810d93e:	1840      	addle	r0, r0, r1
 810d940:	0052      	lsls	r2, r2, #1
 810d942:	f1be 0e01 	subs.w	lr, lr, #1
 810d946:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d94a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810d94e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d952:	d1ed      	bne.n	810d930 <__ieee754_sqrt+0x94>
 810d954:	4671      	mov	r1, lr
 810d956:	2720      	movs	r7, #32
 810d958:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810d95c:	4562      	cmp	r2, ip
 810d95e:	eb04 060e 	add.w	r6, r4, lr
 810d962:	dc02      	bgt.n	810d96a <__ieee754_sqrt+0xce>
 810d964:	d113      	bne.n	810d98e <__ieee754_sqrt+0xf2>
 810d966:	429e      	cmp	r6, r3
 810d968:	d811      	bhi.n	810d98e <__ieee754_sqrt+0xf2>
 810d96a:	2e00      	cmp	r6, #0
 810d96c:	eb06 0e04 	add.w	lr, r6, r4
 810d970:	da43      	bge.n	810d9fa <__ieee754_sqrt+0x15e>
 810d972:	f1be 0f00 	cmp.w	lr, #0
 810d976:	db40      	blt.n	810d9fa <__ieee754_sqrt+0x15e>
 810d978:	f10c 0801 	add.w	r8, ip, #1
 810d97c:	eba2 020c 	sub.w	r2, r2, ip
 810d980:	429e      	cmp	r6, r3
 810d982:	bf88      	it	hi
 810d984:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810d988:	1b9b      	subs	r3, r3, r6
 810d98a:	4421      	add	r1, r4
 810d98c:	46c4      	mov	ip, r8
 810d98e:	0052      	lsls	r2, r2, #1
 810d990:	3f01      	subs	r7, #1
 810d992:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d996:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810d99a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d99e:	d1dd      	bne.n	810d95c <__ieee754_sqrt+0xc0>
 810d9a0:	4313      	orrs	r3, r2
 810d9a2:	d006      	beq.n	810d9b2 <__ieee754_sqrt+0x116>
 810d9a4:	1c4c      	adds	r4, r1, #1
 810d9a6:	bf13      	iteet	ne
 810d9a8:	3101      	addne	r1, #1
 810d9aa:	3001      	addeq	r0, #1
 810d9ac:	4639      	moveq	r1, r7
 810d9ae:	f021 0101 	bicne.w	r1, r1, #1
 810d9b2:	1043      	asrs	r3, r0, #1
 810d9b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810d9b8:	0849      	lsrs	r1, r1, #1
 810d9ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810d9be:	07c2      	lsls	r2, r0, #31
 810d9c0:	bf48      	it	mi
 810d9c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810d9c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810d9ca:	460c      	mov	r4, r1
 810d9cc:	463d      	mov	r5, r7
 810d9ce:	e77f      	b.n	810d8d0 <__ieee754_sqrt+0x34>
 810d9d0:	0ada      	lsrs	r2, r3, #11
 810d9d2:	3815      	subs	r0, #21
 810d9d4:	055b      	lsls	r3, r3, #21
 810d9d6:	2a00      	cmp	r2, #0
 810d9d8:	d0fa      	beq.n	810d9d0 <__ieee754_sqrt+0x134>
 810d9da:	02d7      	lsls	r7, r2, #11
 810d9dc:	d50a      	bpl.n	810d9f4 <__ieee754_sqrt+0x158>
 810d9de:	f1c1 0420 	rsb	r4, r1, #32
 810d9e2:	fa23 f404 	lsr.w	r4, r3, r4
 810d9e6:	1e4d      	subs	r5, r1, #1
 810d9e8:	408b      	lsls	r3, r1
 810d9ea:	4322      	orrs	r2, r4
 810d9ec:	1b41      	subs	r1, r0, r5
 810d9ee:	e788      	b.n	810d902 <__ieee754_sqrt+0x66>
 810d9f0:	4608      	mov	r0, r1
 810d9f2:	e7f0      	b.n	810d9d6 <__ieee754_sqrt+0x13a>
 810d9f4:	0052      	lsls	r2, r2, #1
 810d9f6:	3101      	adds	r1, #1
 810d9f8:	e7ef      	b.n	810d9da <__ieee754_sqrt+0x13e>
 810d9fa:	46e0      	mov	r8, ip
 810d9fc:	e7be      	b.n	810d97c <__ieee754_sqrt+0xe0>
 810d9fe:	bf00      	nop
 810da00:	7ff00000 	.word	0x7ff00000

0810da04 <fabs>:
 810da04:	ec51 0b10 	vmov	r0, r1, d0
 810da08:	ee10 2a10 	vmov	r2, s0
 810da0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810da10:	ec43 2b10 	vmov	d0, r2, r3
 810da14:	4770      	bx	lr

0810da16 <finite>:
 810da16:	b082      	sub	sp, #8
 810da18:	ed8d 0b00 	vstr	d0, [sp]
 810da1c:	9801      	ldr	r0, [sp, #4]
 810da1e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810da22:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810da26:	0fc0      	lsrs	r0, r0, #31
 810da28:	b002      	add	sp, #8
 810da2a:	4770      	bx	lr
 810da2c:	0000      	movs	r0, r0
	...

0810da30 <nan>:
 810da30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810da38 <nan+0x8>
 810da34:	4770      	bx	lr
 810da36:	bf00      	nop
 810da38:	00000000 	.word	0x00000000
 810da3c:	7ff80000 	.word	0x7ff80000

0810da40 <rint>:
 810da40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810da42:	ec51 0b10 	vmov	r0, r1, d0
 810da46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810da4a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810da4e:	2e13      	cmp	r6, #19
 810da50:	ee10 4a10 	vmov	r4, s0
 810da54:	460b      	mov	r3, r1
 810da56:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810da5a:	dc58      	bgt.n	810db0e <rint+0xce>
 810da5c:	2e00      	cmp	r6, #0
 810da5e:	da2b      	bge.n	810dab8 <rint+0x78>
 810da60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810da64:	4302      	orrs	r2, r0
 810da66:	d023      	beq.n	810dab0 <rint+0x70>
 810da68:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810da6c:	4302      	orrs	r2, r0
 810da6e:	4254      	negs	r4, r2
 810da70:	4314      	orrs	r4, r2
 810da72:	0c4b      	lsrs	r3, r1, #17
 810da74:	0b24      	lsrs	r4, r4, #12
 810da76:	045b      	lsls	r3, r3, #17
 810da78:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810da7c:	ea44 0103 	orr.w	r1, r4, r3
 810da80:	4b32      	ldr	r3, [pc, #200]	; (810db4c <rint+0x10c>)
 810da82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810da86:	e9d3 6700 	ldrd	r6, r7, [r3]
 810da8a:	4602      	mov	r2, r0
 810da8c:	460b      	mov	r3, r1
 810da8e:	4630      	mov	r0, r6
 810da90:	4639      	mov	r1, r7
 810da92:	f7f2 fc27 	bl	81002e4 <__adddf3>
 810da96:	e9cd 0100 	strd	r0, r1, [sp]
 810da9a:	463b      	mov	r3, r7
 810da9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810daa0:	4632      	mov	r2, r6
 810daa2:	f7f2 fc1d 	bl	81002e0 <__aeabi_dsub>
 810daa6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810daaa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810daae:	4639      	mov	r1, r7
 810dab0:	ec41 0b10 	vmov	d0, r0, r1
 810dab4:	b003      	add	sp, #12
 810dab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810dab8:	4a25      	ldr	r2, [pc, #148]	; (810db50 <rint+0x110>)
 810daba:	4132      	asrs	r2, r6
 810dabc:	ea01 0702 	and.w	r7, r1, r2
 810dac0:	4307      	orrs	r7, r0
 810dac2:	d0f5      	beq.n	810dab0 <rint+0x70>
 810dac4:	0851      	lsrs	r1, r2, #1
 810dac6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810daca:	4314      	orrs	r4, r2
 810dacc:	d00c      	beq.n	810dae8 <rint+0xa8>
 810dace:	ea23 0201 	bic.w	r2, r3, r1
 810dad2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810dad6:	2e13      	cmp	r6, #19
 810dad8:	fa43 f606 	asr.w	r6, r3, r6
 810dadc:	bf0c      	ite	eq
 810dade:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810dae2:	2400      	movne	r4, #0
 810dae4:	ea42 0306 	orr.w	r3, r2, r6
 810dae8:	4918      	ldr	r1, [pc, #96]	; (810db4c <rint+0x10c>)
 810daea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810daee:	4622      	mov	r2, r4
 810daf0:	e9d5 4500 	ldrd	r4, r5, [r5]
 810daf4:	4620      	mov	r0, r4
 810daf6:	4629      	mov	r1, r5
 810daf8:	f7f2 fbf4 	bl	81002e4 <__adddf3>
 810dafc:	e9cd 0100 	strd	r0, r1, [sp]
 810db00:	e9dd 0100 	ldrd	r0, r1, [sp]
 810db04:	4622      	mov	r2, r4
 810db06:	462b      	mov	r3, r5
 810db08:	f7f2 fbea 	bl	81002e0 <__aeabi_dsub>
 810db0c:	e7d0      	b.n	810dab0 <rint+0x70>
 810db0e:	2e33      	cmp	r6, #51	; 0x33
 810db10:	dd07      	ble.n	810db22 <rint+0xe2>
 810db12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810db16:	d1cb      	bne.n	810dab0 <rint+0x70>
 810db18:	ee10 2a10 	vmov	r2, s0
 810db1c:	f7f2 fbe2 	bl	81002e4 <__adddf3>
 810db20:	e7c6      	b.n	810dab0 <rint+0x70>
 810db22:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810db26:	f04f 36ff 	mov.w	r6, #4294967295
 810db2a:	40d6      	lsrs	r6, r2
 810db2c:	4230      	tst	r0, r6
 810db2e:	d0bf      	beq.n	810dab0 <rint+0x70>
 810db30:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810db34:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810db38:	bf1f      	itttt	ne
 810db3a:	ea24 0101 	bicne.w	r1, r4, r1
 810db3e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810db42:	fa44 f202 	asrne.w	r2, r4, r2
 810db46:	ea41 0402 	orrne.w	r4, r1, r2
 810db4a:	e7cd      	b.n	810dae8 <rint+0xa8>
 810db4c:	0810dd80 	.word	0x0810dd80
 810db50:	000fffff 	.word	0x000fffff
 810db54:	00000000 	.word	0x00000000

0810db58 <scalbn>:
 810db58:	b570      	push	{r4, r5, r6, lr}
 810db5a:	ec55 4b10 	vmov	r4, r5, d0
 810db5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810db62:	4606      	mov	r6, r0
 810db64:	462b      	mov	r3, r5
 810db66:	b99a      	cbnz	r2, 810db90 <scalbn+0x38>
 810db68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810db6c:	4323      	orrs	r3, r4
 810db6e:	d036      	beq.n	810dbde <scalbn+0x86>
 810db70:	4b39      	ldr	r3, [pc, #228]	; (810dc58 <scalbn+0x100>)
 810db72:	4629      	mov	r1, r5
 810db74:	ee10 0a10 	vmov	r0, s0
 810db78:	2200      	movs	r2, #0
 810db7a:	f7f2 fd69 	bl	8100650 <__aeabi_dmul>
 810db7e:	4b37      	ldr	r3, [pc, #220]	; (810dc5c <scalbn+0x104>)
 810db80:	429e      	cmp	r6, r3
 810db82:	4604      	mov	r4, r0
 810db84:	460d      	mov	r5, r1
 810db86:	da10      	bge.n	810dbaa <scalbn+0x52>
 810db88:	a32b      	add	r3, pc, #172	; (adr r3, 810dc38 <scalbn+0xe0>)
 810db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db8e:	e03a      	b.n	810dc06 <scalbn+0xae>
 810db90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810db94:	428a      	cmp	r2, r1
 810db96:	d10c      	bne.n	810dbb2 <scalbn+0x5a>
 810db98:	ee10 2a10 	vmov	r2, s0
 810db9c:	4620      	mov	r0, r4
 810db9e:	4629      	mov	r1, r5
 810dba0:	f7f2 fba0 	bl	81002e4 <__adddf3>
 810dba4:	4604      	mov	r4, r0
 810dba6:	460d      	mov	r5, r1
 810dba8:	e019      	b.n	810dbde <scalbn+0x86>
 810dbaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810dbae:	460b      	mov	r3, r1
 810dbb0:	3a36      	subs	r2, #54	; 0x36
 810dbb2:	4432      	add	r2, r6
 810dbb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810dbb8:	428a      	cmp	r2, r1
 810dbba:	dd08      	ble.n	810dbce <scalbn+0x76>
 810dbbc:	2d00      	cmp	r5, #0
 810dbbe:	a120      	add	r1, pc, #128	; (adr r1, 810dc40 <scalbn+0xe8>)
 810dbc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dbc4:	da1c      	bge.n	810dc00 <scalbn+0xa8>
 810dbc6:	a120      	add	r1, pc, #128	; (adr r1, 810dc48 <scalbn+0xf0>)
 810dbc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dbcc:	e018      	b.n	810dc00 <scalbn+0xa8>
 810dbce:	2a00      	cmp	r2, #0
 810dbd0:	dd08      	ble.n	810dbe4 <scalbn+0x8c>
 810dbd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810dbd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810dbda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810dbde:	ec45 4b10 	vmov	d0, r4, r5
 810dbe2:	bd70      	pop	{r4, r5, r6, pc}
 810dbe4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810dbe8:	da19      	bge.n	810dc1e <scalbn+0xc6>
 810dbea:	f24c 3350 	movw	r3, #50000	; 0xc350
 810dbee:	429e      	cmp	r6, r3
 810dbf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810dbf4:	dd0a      	ble.n	810dc0c <scalbn+0xb4>
 810dbf6:	a112      	add	r1, pc, #72	; (adr r1, 810dc40 <scalbn+0xe8>)
 810dbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dbfc:	2b00      	cmp	r3, #0
 810dbfe:	d1e2      	bne.n	810dbc6 <scalbn+0x6e>
 810dc00:	a30f      	add	r3, pc, #60	; (adr r3, 810dc40 <scalbn+0xe8>)
 810dc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc06:	f7f2 fd23 	bl	8100650 <__aeabi_dmul>
 810dc0a:	e7cb      	b.n	810dba4 <scalbn+0x4c>
 810dc0c:	a10a      	add	r1, pc, #40	; (adr r1, 810dc38 <scalbn+0xe0>)
 810dc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dc12:	2b00      	cmp	r3, #0
 810dc14:	d0b8      	beq.n	810db88 <scalbn+0x30>
 810dc16:	a10e      	add	r1, pc, #56	; (adr r1, 810dc50 <scalbn+0xf8>)
 810dc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 810dc1c:	e7b4      	b.n	810db88 <scalbn+0x30>
 810dc1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810dc22:	3236      	adds	r2, #54	; 0x36
 810dc24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810dc28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810dc2c:	4620      	mov	r0, r4
 810dc2e:	4b0c      	ldr	r3, [pc, #48]	; (810dc60 <scalbn+0x108>)
 810dc30:	2200      	movs	r2, #0
 810dc32:	e7e8      	b.n	810dc06 <scalbn+0xae>
 810dc34:	f3af 8000 	nop.w
 810dc38:	c2f8f359 	.word	0xc2f8f359
 810dc3c:	01a56e1f 	.word	0x01a56e1f
 810dc40:	8800759c 	.word	0x8800759c
 810dc44:	7e37e43c 	.word	0x7e37e43c
 810dc48:	8800759c 	.word	0x8800759c
 810dc4c:	fe37e43c 	.word	0xfe37e43c
 810dc50:	c2f8f359 	.word	0xc2f8f359
 810dc54:	81a56e1f 	.word	0x81a56e1f
 810dc58:	43500000 	.word	0x43500000
 810dc5c:	ffff3cb0 	.word	0xffff3cb0
 810dc60:	3c900000 	.word	0x3c900000

0810dc64 <_init>:
 810dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dc66:	bf00      	nop
 810dc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810dc6a:	bc08      	pop	{r3}
 810dc6c:	469e      	mov	lr, r3
 810dc6e:	4770      	bx	lr

0810dc70 <_fini>:
 810dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dc72:	bf00      	nop
 810dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810dc76:	bc08      	pop	{r3}
 810dc78:	469e      	mov	lr, r3
 810dc7a:	4770      	bx	lr
