
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5bc  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0810d858  0810d858  0001d858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d968  0810d968  0001d968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d970  0810d970  0001d970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d974  0810d974  0001d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  10000000  0810d978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000650  1000008c  0810da04  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100006dc  0810da04  000206dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032355  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f56  00000000  00000000  00052411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001750  00000000  00000000  00057368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015b8  00000000  00000000  00058ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d3ba  00000000  00000000  0005a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020311  00000000  00000000  0009742a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018fe12  00000000  00000000  000b773b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024754d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065f4  00000000  00000000  002475a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000008c 	.word	0x1000008c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d83c 	.word	0x0810d83c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000090 	.word	0x10000090
 81002d4:	0810d83c 	.word	0x0810d83c

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <ReadComplete>:
/*
 * @brief Pulls the NCS pin of the BMP280 High
 * @returns nothing
 */
void ReadComplete()
{
 810123c:	b580      	push	{r7, lr}
 810123e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8101240:	2201      	movs	r2, #1
 8101242:	2110      	movs	r1, #16
 8101244:	4802      	ldr	r0, [pc, #8]	; (8101250 <ReadComplete+0x14>)
 8101246:	f005 fe5b 	bl	8106f00 <HAL_GPIO_WritePin>
}
 810124a:	bf00      	nop
 810124c:	bd80      	pop	{r7, pc}
 810124e:	bf00      	nop
 8101250:	58020000 	.word	0x58020000

08101254 <ResetBMP280NSS>:
/*
 * @brief Pulls the NCS pin of the BMP280 Low
 * @returns nothing
 */
void ResetBMP280NSS(void)
{
 8101254:	b580      	push	{r7, lr}
 8101256:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101258:	2200      	movs	r2, #0
 810125a:	2110      	movs	r1, #16
 810125c:	4802      	ldr	r0, [pc, #8]	; (8101268 <ResetBMP280NSS+0x14>)
 810125e:	f005 fe4f 	bl	8106f00 <HAL_GPIO_WritePin>
}
 8101262:	bf00      	nop
 8101264:	bd80      	pop	{r7, pc}
 8101266:	bf00      	nop
 8101268:	58020000 	.word	0x58020000

0810126c <ConfigBMP280>:
/*
 * @brief Initialises BMP280 Sensor
 * @retval HAL_OK if initialisation is successful
 */
uint8_t ConfigBMP280(BMP280Handle *baro)
{
 810126c:	b580      	push	{r7, lr}
 810126e:	b084      	sub	sp, #16
 8101270:	af00      	add	r7, sp, #0
 8101272:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101274:	2201      	movs	r2, #1
 8101276:	2110      	movs	r1, #16
 8101278:	4813      	ldr	r0, [pc, #76]	; (81012c8 <ConfigBMP280+0x5c>)
 810127a:	f005 fe41 	bl	8106f00 <HAL_GPIO_WritePin>
  uint8_t baro_res = CheckBMP280ChipID();
 810127e:	f000 f825 	bl	81012cc <CheckBMP280ChipID>
 8101282:	4603      	mov	r3, r0
 8101284:	73fb      	strb	r3, [r7, #15]
  if(baro_res != HAL_OK)
 8101286:	7bfb      	ldrb	r3, [r7, #15]
 8101288:	2b00      	cmp	r3, #0
 810128a:	d001      	beq.n	8101290 <ConfigBMP280+0x24>
  {
      return HAL_ERROR;
 810128c:	2301      	movs	r3, #1
 810128e:	e016      	b.n	81012be <ConfigBMP280+0x52>
  }
  if(ResetBMP280() != HAL_OK)
 8101290:	f000 fc4e 	bl	8101b30 <ResetBMP280>
 8101294:	4603      	mov	r3, r0
 8101296:	2b00      	cmp	r3, #0
 8101298:	d001      	beq.n	810129e <ConfigBMP280+0x32>
  {
    return HAL_ERROR;
 810129a:	2301      	movs	r3, #1
 810129c:	e00f      	b.n	81012be <ConfigBMP280+0x52>
  }
  HAL_Delay(500);
 810129e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81012a2:	f002 f9f1 	bl	8103688 <HAL_Delay>
  if(setConfig(baro) != HAL_OK)
 81012a6:	6878      	ldr	r0, [r7, #4]
 81012a8:	f000 fba6 	bl	81019f8 <setConfig>
 81012ac:	4603      	mov	r3, r0
 81012ae:	2b00      	cmp	r3, #0
 81012b0:	d001      	beq.n	81012b6 <ConfigBMP280+0x4a>
  {
     return HAL_ERROR;
 81012b2:	2301      	movs	r3, #1
 81012b4:	e003      	b.n	81012be <ConfigBMP280+0x52>

  }

  ReadCalibCoefficients(baro);
 81012b6:	6878      	ldr	r0, [r7, #4]
 81012b8:	f000 fb42 	bl	8101940 <ReadCalibCoefficients>

  return HAL_OK;
 81012bc:	2300      	movs	r3, #0

}
 81012be:	4618      	mov	r0, r3
 81012c0:	3710      	adds	r7, #16
 81012c2:	46bd      	mov	sp, r7
 81012c4:	bd80      	pop	{r7, pc}
 81012c6:	bf00      	nop
 81012c8:	58020000 	.word	0x58020000

081012cc <CheckBMP280ChipID>:
 * @brief Checks the WHOAMI register
 * to confirm the chip
 * @returns OK on success, Error on failure
 */
uint8_t CheckBMP280ChipID()
{
 81012cc:	b580      	push	{r7, lr}
 81012ce:	b082      	sub	sp, #8
 81012d0:	af00      	add	r7, sp, #0
  uint8_t SerialData[3] = {(BMP280_REG_ID | 0x80), 0, 0};
 81012d2:	4a17      	ldr	r2, [pc, #92]	; (8101330 <CheckBMP280ChipID+0x64>)
 81012d4:	1d3b      	adds	r3, r7, #4
 81012d6:	6812      	ldr	r2, [r2, #0]
 81012d8:	4611      	mov	r1, r2
 81012da:	8019      	strh	r1, [r3, #0]
 81012dc:	3302      	adds	r3, #2
 81012de:	0c12      	lsrs	r2, r2, #16
 81012e0:	701a      	strb	r2, [r3, #0]
  volatile uint8_t aRxBuffer[3]= {0};
 81012e2:	4b14      	ldr	r3, [pc, #80]	; (8101334 <CheckBMP280ChipID+0x68>)
 81012e4:	881b      	ldrh	r3, [r3, #0]
 81012e6:	803b      	strh	r3, [r7, #0]
 81012e8:	2300      	movs	r3, #0
 81012ea:	70bb      	strb	r3, [r7, #2]
  ResetBMP280NSS();
 81012ec:	f7ff ffb2 	bl	8101254 <ResetBMP280NSS>
  HAL_Delay(1000);
 81012f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81012f4:	f002 f9c8 	bl	8103688 <HAL_Delay>
  if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 2) == HAL_OK)
 81012f8:	463a      	mov	r2, r7
 81012fa:	1d39      	adds	r1, r7, #4
 81012fc:	2302      	movs	r3, #2
 81012fe:	480e      	ldr	r0, [pc, #56]	; (8101338 <CheckBMP280ChipID+0x6c>)
 8101300:	f009 f8f0 	bl	810a4e4 <HAL_SPI_TransmitReceive_DMA>
 8101304:	4603      	mov	r3, r0
 8101306:	2b00      	cmp	r3, #0
 8101308:	d10a      	bne.n	8101320 <CheckBMP280ChipID+0x54>
  {
   while(dma_blocking_flag == 1)
 810130a:	e005      	b.n	8101318 <CheckBMP280ChipID+0x4c>
    {
      if(aRxBuffer[1] != BMP280_CHIP_ID)
 810130c:	787b      	ldrb	r3, [r7, #1]
 810130e:	b2db      	uxtb	r3, r3
 8101310:	2b58      	cmp	r3, #88	; 0x58
 8101312:	d001      	beq.n	8101318 <CheckBMP280ChipID+0x4c>
      {
        return HAL_ERROR;
 8101314:	2301      	movs	r3, #1
 8101316:	e007      	b.n	8101328 <CheckBMP280ChipID+0x5c>
   while(dma_blocking_flag == 1)
 8101318:	4b08      	ldr	r3, [pc, #32]	; (810133c <CheckBMP280ChipID+0x70>)
 810131a:	781b      	ldrb	r3, [r3, #0]
 810131c:	2b01      	cmp	r3, #1
 810131e:	d0f5      	beq.n	810130c <CheckBMP280ChipID+0x40>
      }
    }
  }

  dma_blocking_flag = 0;
 8101320:	4b06      	ldr	r3, [pc, #24]	; (810133c <CheckBMP280ChipID+0x70>)
 8101322:	2200      	movs	r2, #0
 8101324:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 8101326:	2300      	movs	r3, #0
}
 8101328:	4618      	mov	r0, r3
 810132a:	3708      	adds	r7, #8
 810132c:	46bd      	mov	sp, r7
 810132e:	bd80      	pop	{r7, pc}
 8101330:	0810d858 	.word	0x0810d858
 8101334:	0810d85c 	.word	0x0810d85c
 8101338:	100003e0 	.word	0x100003e0
 810133c:	100000a8 	.word	0x100000a8

08101340 <Read16Bit>:
 * @brief Reads a 16 bit value from two registers
 * @param reg  register to read from
 * @returns result of 16bit read
 */
uint16_t Read16Bit(uint8_t reg)
{
 8101340:	b580      	push	{r7, lr}
 8101342:	b084      	sub	sp, #16
 8101344:	af00      	add	r7, sp, #0
 8101346:	4603      	mov	r3, r0
 8101348:	71fb      	strb	r3, [r7, #7]
   uint16_t result;
   ResetBMP280NSS();
 810134a:	f7ff ff83 	bl	8101254 <ResetBMP280NSS>
   uint8_t SerialData[3] = {(reg|BMP280_SPI_READ), 0, 0};
 810134e:	79fb      	ldrb	r3, [r7, #7]
 8101350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8101354:	b2db      	uxtb	r3, r3
 8101356:	723b      	strb	r3, [r7, #8]
 8101358:	2300      	movs	r3, #0
 810135a:	727b      	strb	r3, [r7, #9]
 810135c:	2300      	movs	r3, #0
 810135e:	72bb      	strb	r3, [r7, #10]
   static uint8_t aRxBuffer[3]= {0};
   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 3);
 8101360:	f107 0108 	add.w	r1, r7, #8
 8101364:	2303      	movs	r3, #3
 8101366:	4a0d      	ldr	r2, [pc, #52]	; (810139c <Read16Bit+0x5c>)
 8101368:	480d      	ldr	r0, [pc, #52]	; (81013a0 <Read16Bit+0x60>)
 810136a:	f009 f8bb 	bl	810a4e4 <HAL_SPI_TransmitReceive_DMA>
   while(dma_blocking_flag == 1)
 810136e:	e00c      	b.n	810138a <Read16Bit+0x4a>
   {
     result = aRxBuffer[2] << 8 | aRxBuffer [1];
 8101370:	4b0a      	ldr	r3, [pc, #40]	; (810139c <Read16Bit+0x5c>)
 8101372:	789b      	ldrb	r3, [r3, #2]
 8101374:	021b      	lsls	r3, r3, #8
 8101376:	b21a      	sxth	r2, r3
 8101378:	4b08      	ldr	r3, [pc, #32]	; (810139c <Read16Bit+0x5c>)
 810137a:	785b      	ldrb	r3, [r3, #1]
 810137c:	b21b      	sxth	r3, r3
 810137e:	4313      	orrs	r3, r2
 8101380:	b21b      	sxth	r3, r3
 8101382:	81fb      	strh	r3, [r7, #14]
     dma_blocking_flag = 0;
 8101384:	4b07      	ldr	r3, [pc, #28]	; (81013a4 <Read16Bit+0x64>)
 8101386:	2200      	movs	r2, #0
 8101388:	701a      	strb	r2, [r3, #0]
   while(dma_blocking_flag == 1)
 810138a:	4b06      	ldr	r3, [pc, #24]	; (81013a4 <Read16Bit+0x64>)
 810138c:	781b      	ldrb	r3, [r3, #0]
 810138e:	2b01      	cmp	r3, #1
 8101390:	d0ee      	beq.n	8101370 <Read16Bit+0x30>
   }
   return result;
 8101392:	89fb      	ldrh	r3, [r7, #14]
}
 8101394:	4618      	mov	r0, r3
 8101396:	3710      	adds	r7, #16
 8101398:	46bd      	mov	sp, r7
 810139a:	bd80      	pop	{r7, pc}
 810139c:	100000ac 	.word	0x100000ac
 81013a0:	100003e0 	.word	0x100003e0
 81013a4:	100000a8 	.word	0x100000a8

081013a8 <Read24Bit>:
 * @brief Reads a 24 bit value from two registers
 * @param reg  register to read from
 * @returns result of 24 bit read
 */
uint32_t Read24Bit(uint8_t reg)
{
 81013a8:	b580      	push	{r7, lr}
 81013aa:	b084      	sub	sp, #16
 81013ac:	af00      	add	r7, sp, #0
 81013ae:	4603      	mov	r3, r0
 81013b0:	71fb      	strb	r3, [r7, #7]
  uint32_t result;
  ResetBMP280NSS();
 81013b2:	f7ff ff4f 	bl	8101254 <ResetBMP280NSS>
  uint8_t SerialData[4] = {(reg|BMP280_SPI_READ), 0, 0,0};
 81013b6:	79fb      	ldrb	r3, [r7, #7]
 81013b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81013bc:	b2db      	uxtb	r3, r3
 81013be:	723b      	strb	r3, [r7, #8]
 81013c0:	2300      	movs	r3, #0
 81013c2:	727b      	strb	r3, [r7, #9]
 81013c4:	2300      	movs	r3, #0
 81013c6:	72bb      	strb	r3, [r7, #10]
 81013c8:	2300      	movs	r3, #0
 81013ca:	72fb      	strb	r3, [r7, #11]
  static uint8_t aRxBuffer[4] = {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 4);
 81013cc:	f107 0108 	add.w	r1, r7, #8
 81013d0:	2304      	movs	r3, #4
 81013d2:	4a0f      	ldr	r2, [pc, #60]	; (8101410 <Read24Bit+0x68>)
 81013d4:	480f      	ldr	r0, [pc, #60]	; (8101414 <Read24Bit+0x6c>)
 81013d6:	f009 f885 	bl	810a4e4 <HAL_SPI_TransmitReceive_DMA>
  while(dma_blocking_flag == 1)
 81013da:	e00f      	b.n	81013fc <Read24Bit+0x54>
     {
        result = aRxBuffer[1] << 16 | aRxBuffer[2] << 8 | aRxBuffer[3] >> 4;
 81013dc:	4b0c      	ldr	r3, [pc, #48]	; (8101410 <Read24Bit+0x68>)
 81013de:	785b      	ldrb	r3, [r3, #1]
 81013e0:	041a      	lsls	r2, r3, #16
 81013e2:	4b0b      	ldr	r3, [pc, #44]	; (8101410 <Read24Bit+0x68>)
 81013e4:	789b      	ldrb	r3, [r3, #2]
 81013e6:	021b      	lsls	r3, r3, #8
 81013e8:	4313      	orrs	r3, r2
 81013ea:	4a09      	ldr	r2, [pc, #36]	; (8101410 <Read24Bit+0x68>)
 81013ec:	78d2      	ldrb	r2, [r2, #3]
 81013ee:	0912      	lsrs	r2, r2, #4
 81013f0:	b2d2      	uxtb	r2, r2
 81013f2:	4313      	orrs	r3, r2
 81013f4:	60fb      	str	r3, [r7, #12]
        dma_blocking_flag = 0;
 81013f6:	4b08      	ldr	r3, [pc, #32]	; (8101418 <Read24Bit+0x70>)
 81013f8:	2200      	movs	r2, #0
 81013fa:	701a      	strb	r2, [r3, #0]
  while(dma_blocking_flag == 1)
 81013fc:	4b06      	ldr	r3, [pc, #24]	; (8101418 <Read24Bit+0x70>)
 81013fe:	781b      	ldrb	r3, [r3, #0]
 8101400:	2b01      	cmp	r3, #1
 8101402:	d0eb      	beq.n	81013dc <Read24Bit+0x34>
     }
  return result;
 8101404:	68fb      	ldr	r3, [r7, #12]
}
 8101406:	4618      	mov	r0, r3
 8101408:	3710      	adds	r7, #16
 810140a:	46bd      	mov	sp, r7
 810140c:	bd80      	pop	{r7, pc}
 810140e:	bf00      	nop
 8101410:	100000b0 	.word	0x100000b0
 8101414:	100003e0 	.word	0x100003e0
 8101418:	100000a8 	.word	0x100000a8

0810141c <ReadTemp>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void ReadTemp(BMP280Handle* baro)
{
 810141c:	b580      	push	{r7, lr}
 810141e:	b086      	sub	sp, #24
 8101420:	af00      	add	r7, sp, #0
 8101422:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;
  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 8101424:	20fa      	movs	r0, #250	; 0xfa
 8101426:	f7ff ffbf 	bl	81013a8 <Read24Bit>
 810142a:	4603      	mov	r3, r0
 810142c:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 810142e:	697b      	ldr	r3, [r7, #20]
 8101430:	111b      	asrs	r3, r3, #4
 8101432:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 8101434:	697b      	ldr	r3, [r7, #20]
 8101436:	10da      	asrs	r2, r3, #3
 8101438:	687b      	ldr	r3, [r7, #4]
 810143a:	8b1b      	ldrh	r3, [r3, #24]
 810143c:	005b      	lsls	r3, r3, #1
 810143e:	1ad3      	subs	r3, r2, r3
         ((int32_t)baro->comp_vals.dig_T2)) >> 11;
 8101440:	687a      	ldr	r2, [r7, #4]
 8101442:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 8101446:	fb02 f303 	mul.w	r3, r2, r3
 810144a:	12db      	asrs	r3, r3, #11
 810144c:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 810144e:	697b      	ldr	r3, [r7, #20]
 8101450:	111b      	asrs	r3, r3, #4
 8101452:	687a      	ldr	r2, [r7, #4]
 8101454:	8b12      	ldrh	r2, [r2, #24]
 8101456:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 8101458:	697a      	ldr	r2, [r7, #20]
 810145a:	1112      	asrs	r2, r2, #4
 810145c:	6879      	ldr	r1, [r7, #4]
 810145e:	8b09      	ldrh	r1, [r1, #24]
 8101460:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 8101462:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 8101466:	131b      	asrs	r3, r3, #12
            12) *
           ((int32_t)baro->comp_vals.dig_T3)) >>
 8101468:	687a      	ldr	r2, [r7, #4]
 810146a:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
            12) *
 810146e:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 8101472:	139b      	asrs	r3, r3, #14
 8101474:	60fb      	str	r3, [r7, #12]
          14;

  t_fine = var1 + var2;
 8101476:	693a      	ldr	r2, [r7, #16]
 8101478:	68fb      	ldr	r3, [r7, #12]
 810147a:	4413      	add	r3, r2
 810147c:	4a0d      	ldr	r2, [pc, #52]	; (81014b4 <ReadTemp+0x98>)
 810147e:	6013      	str	r3, [r2, #0]
  float T = (t_fine * 5 + 128) >> 8;
 8101480:	4b0c      	ldr	r3, [pc, #48]	; (81014b4 <ReadTemp+0x98>)
 8101482:	681a      	ldr	r2, [r3, #0]
 8101484:	4613      	mov	r3, r2
 8101486:	009b      	lsls	r3, r3, #2
 8101488:	4413      	add	r3, r2
 810148a:	3380      	adds	r3, #128	; 0x80
 810148c:	121b      	asrs	r3, r3, #8
 810148e:	ee07 3a90 	vmov	s15, r3
 8101492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101496:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T/100;
 810149a:	ed97 7a02 	vldr	s14, [r7, #8]
 810149e:	eddf 6a06 	vldr	s13, [pc, #24]	; 81014b8 <ReadTemp+0x9c>
 81014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81014a6:	687b      	ldr	r3, [r7, #4]
 81014a8:	edc3 7a00 	vstr	s15, [r3]

}
 81014ac:	bf00      	nop
 81014ae:	3718      	adds	r7, #24
 81014b0:	46bd      	mov	sp, r7
 81014b2:	bd80      	pop	{r7, pc}
 81014b4:	10000194 	.word	0x10000194
 81014b8:	42c80000 	.word	0x42c80000

081014bc <ReadPressure>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void ReadPressure(BMP280Handle* baro)
{
 81014bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81014c0:	b09c      	sub	sp, #112	; 0x70
 81014c2:	af00      	add	r7, sp, #0
 81014c4:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 81014c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 81014c8:	f7ff ffa8 	bl	810141c <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 81014cc:	20f7      	movs	r0, #247	; 0xf7
 81014ce:	f7ff ff6b 	bl	81013a8 <Read24Bit>
 81014d2:	4603      	mov	r3, r0
 81014d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>=4;
 81014d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81014d8:	111b      	asrs	r3, r3, #4
 81014da:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t)t_fine) - 128000;
 81014dc:	4b6b      	ldr	r3, [pc, #428]	; (810168c <ReadPressure+0x1d0>)
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	461a      	mov	r2, r3
 81014e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014e6:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 81014ea:	f143 35ff 	adc.w	r5, r3, #4294967295
 81014ee:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t)baro->comp_vals.dig_P6;
 81014f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81014f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81014f6:	fb03 f102 	mul.w	r1, r3, r2
 81014fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81014fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81014fe:	fb03 f302 	mul.w	r3, r3, r2
 8101502:	18ca      	adds	r2, r1, r3
 8101504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101506:	fba3 4503 	umull	r4, r5, r3, r3
 810150a:	1953      	adds	r3, r2, r5
 810150c:	461d      	mov	r5, r3
 810150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101510:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8101514:	b21a      	sxth	r2, r3
 8101516:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810151a:	fb02 f005 	mul.w	r0, r2, r5
 810151e:	fb04 f103 	mul.w	r1, r4, r3
 8101522:	4401      	add	r1, r0
 8101524:	fba4 2302 	umull	r2, r3, r4, r2
 8101528:	4419      	add	r1, r3
 810152a:	460b      	mov	r3, r1
 810152c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8101530:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t)baro->comp_vals.dig_P5) << 17);
 8101534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101536:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 810153a:	b21a      	sxth	r2, r3
 810153c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101540:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101542:	fb03 f001 	mul.w	r0, r3, r1
 8101546:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101548:	fb02 f101 	mul.w	r1, r2, r1
 810154c:	4408      	add	r0, r1
 810154e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101550:	fba1 2302 	umull	r2, r3, r1, r2
 8101554:	18c1      	adds	r1, r0, r3
 8101556:	460b      	mov	r3, r1
 8101558:	f04f 0000 	mov.w	r0, #0
 810155c:	f04f 0100 	mov.w	r1, #0
 8101560:	0459      	lsls	r1, r3, #17
 8101562:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8101566:	0450      	lsls	r0, r2, #17
 8101568:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 810156c:	eb12 0800 	adds.w	r8, r2, r0
 8101570:	eb43 0901 	adc.w	r9, r3, r1
 8101574:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t)baro->comp_vals.dig_P4) << 35);
 8101578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810157a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 810157e:	b21a      	sxth	r2, r3
 8101580:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101584:	f04f 0000 	mov.w	r0, #0
 8101588:	f04f 0100 	mov.w	r1, #0
 810158c:	00d1      	lsls	r1, r2, #3
 810158e:	2000      	movs	r0, #0
 8101590:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101594:	1814      	adds	r4, r2, r0
 8101596:	61bc      	str	r4, [r7, #24]
 8101598:	414b      	adcs	r3, r1
 810159a:	61fb      	str	r3, [r7, #28]
 810159c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 81015a0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 81015a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81015a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81015a8:	fb03 f102 	mul.w	r1, r3, r2
 81015ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 81015ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81015b0:	fb03 f302 	mul.w	r3, r3, r2
 81015b4:	18ca      	adds	r2, r1, r3
 81015b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81015b8:	fba3 4503 	umull	r4, r5, r3, r3
 81015bc:	1953      	adds	r3, r2, r5
 81015be:	461d      	mov	r5, r3
 81015c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015c2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 81015c6:	b21a      	sxth	r2, r3
 81015c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81015cc:	fb02 f005 	mul.w	r0, r2, r5
 81015d0:	fb04 f103 	mul.w	r1, r4, r3
 81015d4:	4401      	add	r1, r0
 81015d6:	fba4 2302 	umull	r2, r3, r4, r2
 81015da:	4419      	add	r1, r3
 81015dc:	460b      	mov	r3, r1
 81015de:	f04f 0800 	mov.w	r8, #0
 81015e2:	f04f 0900 	mov.w	r9, #0
 81015e6:	ea4f 2812 	mov.w	r8, r2, lsr #8
 81015ea:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 81015ee:	ea4f 2923 	mov.w	r9, r3, asr #8
           ((var1 * (int64_t)baro->comp_vals.dig_P2) << 12);
 81015f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015f4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 81015f8:	b21a      	sxth	r2, r3
 81015fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81015fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101600:	fb03 f001 	mul.w	r0, r3, r1
 8101604:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101606:	fb02 f101 	mul.w	r1, r2, r1
 810160a:	1844      	adds	r4, r0, r1
 810160c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810160e:	fba1 0102 	umull	r0, r1, r1, r2
 8101612:	1863      	adds	r3, r4, r1
 8101614:	4619      	mov	r1, r3
 8101616:	f04f 0200 	mov.w	r2, #0
 810161a:	f04f 0300 	mov.w	r3, #0
 810161e:	030b      	lsls	r3, r1, #12
 8101620:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8101624:	0302      	lsls	r2, r0, #12
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101626:	eb18 0102 	adds.w	r1, r8, r2
 810162a:	6139      	str	r1, [r7, #16]
 810162c:	eb49 0303 	adc.w	r3, r9, r3
 8101630:	617b      	str	r3, [r7, #20]
 8101632:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8101636:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 =
        (((((int64_t)1) << 47) + var1)) * ((int64_t)baro->comp_vals.dig_P1) >> 33;
 810163a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810163e:	1c11      	adds	r1, r2, #0
 8101640:	6439      	str	r1, [r7, #64]	; 0x40
 8101642:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8101646:	647b      	str	r3, [r7, #68]	; 0x44
 8101648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810164a:	8bdb      	ldrh	r3, [r3, #30]
 810164c:	b29a      	uxth	r2, r3
 810164e:	f04f 0300 	mov.w	r3, #0
 8101652:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8101656:	4629      	mov	r1, r5
 8101658:	fb02 f001 	mul.w	r0, r2, r1
 810165c:	4621      	mov	r1, r4
 810165e:	fb01 f103 	mul.w	r1, r1, r3
 8101662:	4401      	add	r1, r0
 8101664:	4620      	mov	r0, r4
 8101666:	fba0 2302 	umull	r2, r3, r0, r2
 810166a:	4419      	add	r1, r3
 810166c:	460b      	mov	r3, r1
  var1 =
 810166e:	f04f 0000 	mov.w	r0, #0
 8101672:	f04f 0100 	mov.w	r1, #0
 8101676:	1058      	asrs	r0, r3, #1
 8101678:	17d9      	asrs	r1, r3, #31
 810167a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    if (var1 == 0) {
 810167e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101682:	4313      	orrs	r3, r2
 8101684:	f000 80f5 	beq.w	8101872 <ReadPressure+0x3b6>
 8101688:	e004      	b.n	8101694 <ReadPressure+0x1d8>
 810168a:	bf00      	nop
 810168c:	10000194 	.word	0x10000194
 8101690:	43800000 	.word	0x43800000
        return; // avoid exception caused by division by zero
      }
    p = 1048576 - adc_P;
 8101694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101696:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810169a:	461a      	mov	r2, r3
 810169c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81016a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    p = (((p << 31) - var2) * 3125) / var1;
 81016a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81016a6:	105b      	asrs	r3, r3, #1
 81016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81016aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81016ac:	07db      	lsls	r3, r3, #31
 81016ae:	63bb      	str	r3, [r7, #56]	; 0x38
 81016b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81016b4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 81016b8:	4621      	mov	r1, r4
 81016ba:	ebb1 0a02 	subs.w	sl, r1, r2
 81016be:	4629      	mov	r1, r5
 81016c0:	eb61 0b03 	sbc.w	fp, r1, r3
 81016c4:	4652      	mov	r2, sl
 81016c6:	465b      	mov	r3, fp
 81016c8:	1891      	adds	r1, r2, r2
 81016ca:	60b9      	str	r1, [r7, #8]
 81016cc:	415b      	adcs	r3, r3
 81016ce:	60fb      	str	r3, [r7, #12]
 81016d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 81016d4:	eb12 020a 	adds.w	r2, r2, sl
 81016d8:	eb43 030b 	adc.w	r3, r3, fp
 81016dc:	f04f 0000 	mov.w	r0, #0
 81016e0:	f04f 0100 	mov.w	r1, #0
 81016e4:	0199      	lsls	r1, r3, #6
 81016e6:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 81016ea:	0190      	lsls	r0, r2, #6
 81016ec:	1812      	adds	r2, r2, r0
 81016ee:	eb41 0303 	adc.w	r3, r1, r3
 81016f2:	f04f 0000 	mov.w	r0, #0
 81016f6:	f04f 0100 	mov.w	r1, #0
 81016fa:	0099      	lsls	r1, r3, #2
 81016fc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101700:	0090      	lsls	r0, r2, #2
 8101702:	4602      	mov	r2, r0
 8101704:	460b      	mov	r3, r1
 8101706:	eb12 020a 	adds.w	r2, r2, sl
 810170a:	eb43 030b 	adc.w	r3, r3, fp
 810170e:	f04f 0000 	mov.w	r0, #0
 8101712:	f04f 0100 	mov.w	r1, #0
 8101716:	0099      	lsls	r1, r3, #2
 8101718:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 810171c:	0090      	lsls	r0, r2, #2
 810171e:	4602      	mov	r2, r0
 8101720:	460b      	mov	r3, r1
 8101722:	eb12 010a 	adds.w	r1, r2, sl
 8101726:	6339      	str	r1, [r7, #48]	; 0x30
 8101728:	eb43 030b 	adc.w	r3, r3, fp
 810172c:	637b      	str	r3, [r7, #52]	; 0x34
 810172e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101732:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101736:	f7ff fb99 	bl	8100e6c <__aeabi_ldivmod>
 810173a:	4602      	mov	r2, r0
 810173c:	460b      	mov	r3, r1
 810173e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    var1 = (((int64_t)baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8101742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101744:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8101748:	b218      	sxth	r0, r3
 810174a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 810174e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8101752:	f04f 0200 	mov.w	r2, #0
 8101756:	f04f 0300 	mov.w	r3, #0
 810175a:	0b62      	lsrs	r2, r4, #13
 810175c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8101760:	136b      	asrs	r3, r5, #13
 8101762:	fb02 f501 	mul.w	r5, r2, r1
 8101766:	fb00 f403 	mul.w	r4, r0, r3
 810176a:	442c      	add	r4, r5
 810176c:	fba0 0102 	umull	r0, r1, r0, r2
 8101770:	1863      	adds	r3, r4, r1
 8101772:	4619      	mov	r1, r3
 8101774:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8101778:	f04f 0200 	mov.w	r2, #0
 810177c:	f04f 0300 	mov.w	r3, #0
 8101780:	0b62      	lsrs	r2, r4, #13
 8101782:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8101786:	136b      	asrs	r3, r5, #13
 8101788:	fb02 f501 	mul.w	r5, r2, r1
 810178c:	fb00 f403 	mul.w	r4, r0, r3
 8101790:	442c      	add	r4, r5
 8101792:	fba0 0102 	umull	r0, r1, r0, r2
 8101796:	1863      	adds	r3, r4, r1
 8101798:	4619      	mov	r1, r3
 810179a:	f04f 0200 	mov.w	r2, #0
 810179e:	f04f 0300 	mov.w	r3, #0
 81017a2:	0e42      	lsrs	r2, r0, #25
 81017a4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 81017a8:	164b      	asrs	r3, r1, #25
 81017aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    var2 = (((int64_t)baro->comp_vals.dig_P8) * p) >> 19;
 81017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017b0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 81017b4:	b21a      	sxth	r2, r3
 81017b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81017ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 81017bc:	fb03 f001 	mul.w	r0, r3, r1
 81017c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 81017c2:	fb02 f101 	mul.w	r1, r2, r1
 81017c6:	1844      	adds	r4, r0, r1
 81017c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 81017ca:	fba1 0102 	umull	r0, r1, r1, r2
 81017ce:	1863      	adds	r3, r4, r1
 81017d0:	4619      	mov	r1, r3
 81017d2:	f04f 0200 	mov.w	r2, #0
 81017d6:	f04f 0300 	mov.w	r3, #0
 81017da:	0cc2      	lsrs	r2, r0, #19
 81017dc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 81017e0:	14cb      	asrs	r3, r1, #19
 81017e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    p = ((p + var1 + var2) >> 8) + (((int64_t)baro->comp_vals.dig_P7) << 4);
 81017e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81017ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81017ee:	1884      	adds	r4, r0, r2
 81017f0:	62bc      	str	r4, [r7, #40]	; 0x28
 81017f2:	eb41 0303 	adc.w	r3, r1, r3
 81017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 81017f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81017fc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101800:	4621      	mov	r1, r4
 8101802:	1889      	adds	r1, r1, r2
 8101804:	6239      	str	r1, [r7, #32]
 8101806:	4629      	mov	r1, r5
 8101808:	eb43 0101 	adc.w	r1, r3, r1
 810180c:	6279      	str	r1, [r7, #36]	; 0x24
 810180e:	f04f 0000 	mov.w	r0, #0
 8101812:	f04f 0100 	mov.w	r1, #0
 8101816:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 810181a:	4623      	mov	r3, r4
 810181c:	0a18      	lsrs	r0, r3, #8
 810181e:	462b      	mov	r3, r5
 8101820:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8101824:	462b      	mov	r3, r5
 8101826:	1219      	asrs	r1, r3, #8
 8101828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810182a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 810182e:	b21c      	sxth	r4, r3
 8101830:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8101834:	f04f 0200 	mov.w	r2, #0
 8101838:	f04f 0300 	mov.w	r3, #0
 810183c:	012b      	lsls	r3, r5, #4
 810183e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8101842:	0122      	lsls	r2, r4, #4
 8101844:	1884      	adds	r4, r0, r2
 8101846:	603c      	str	r4, [r7, #0]
 8101848:	eb41 0303 	adc.w	r3, r1, r3
 810184c:	607b      	str	r3, [r7, #4]
 810184e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8101852:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    baro->pressure = (float) p/256;
 8101856:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 810185a:	f7ff fac9 	bl	8100df0 <__aeabi_l2f>
 810185e:	ee06 0a90 	vmov	s13, r0
 8101862:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8101690 <ReadPressure+0x1d4>
 8101866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810186a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810186c:	edc3 7a01 	vstr	s15, [r3, #4]
 8101870:	e000      	b.n	8101874 <ReadPressure+0x3b8>
        return; // avoid exception caused by division by zero
 8101872:	bf00      	nop

}
 8101874:	3770      	adds	r7, #112	; 0x70
 8101876:	46bd      	mov	sp, r7
 8101878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810187c:	0000      	movs	r0, r0
	...

08101880 <ReadAltitude>:
 * sea level.
 * @param baro a pointer to the BMP280 struct
 * @returns nothing.
 */
void ReadAltitude(BMP280Handle* baro)
{
 8101880:	b580      	push	{r7, lr}
 8101882:	b084      	sub	sp, #16
 8101884:	af00      	add	r7, sp, #0
 8101886:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 8101888:	f04f 0300 	mov.w	r3, #0
 810188c:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	685b      	ldr	r3, [r3, #4]
 8101892:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure/ SEA_LEVEL_PRESSURE), (1/5.255)));
 8101894:	edd7 7a02 	vldr	s15, [r7, #8]
 8101898:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8101930 <ReadAltitude+0xb0>
 810189c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81018a0:	ee16 0a90 	vmov	r0, s13
 81018a4:	f7fe fe7c 	bl	81005a0 <__aeabi_f2d>
 81018a8:	4602      	mov	r2, r0
 81018aa:	460b      	mov	r3, r1
 81018ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8101920 <ReadAltitude+0xa0>
 81018b0:	ec43 2b10 	vmov	d0, r2, r3
 81018b4:	f00b f80e 	bl	810c8d4 <pow>
 81018b8:	ec53 2b10 	vmov	r2, r3, d0
 81018bc:	f04f 0000 	mov.w	r0, #0
 81018c0:	491c      	ldr	r1, [pc, #112]	; (8101934 <ReadAltitude+0xb4>)
 81018c2:	f7fe fd0d 	bl	81002e0 <__aeabi_dsub>
 81018c6:	4602      	mov	r2, r0
 81018c8:	460b      	mov	r3, r1
 81018ca:	4610      	mov	r0, r2
 81018cc:	4619      	mov	r1, r3
 81018ce:	a316      	add	r3, pc, #88	; (adr r3, 8101928 <ReadAltitude+0xa8>)
 81018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018d4:	f7fe febc 	bl	8100650 <__aeabi_dmul>
 81018d8:	4602      	mov	r2, r0
 81018da:	460b      	mov	r3, r1
 81018dc:	4610      	mov	r0, r2
 81018de:	4619      	mov	r1, r3
 81018e0:	f7ff f966 	bl	8100bb0 <__aeabi_d2f>
 81018e4:	4603      	mov	r3, r0
 81018e6:	60fb      	str	r3, [r7, #12]
  if((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 81018e8:	edd7 7a03 	vldr	s15, [r7, #12]
 81018ec:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8101938 <ReadAltitude+0xb8>
 81018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 81018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81018f8:	d90c      	bls.n	8101914 <ReadAltitude+0x94>
 81018fa:	edd7 7a03 	vldr	s15, [r7, #12]
 81018fe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 810193c <ReadAltitude+0xbc>
 8101902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810190a:	da03      	bge.n	8101914 <ReadAltitude+0x94>
  {
    return;
  }
  baro->altitude = altitude;
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	68fa      	ldr	r2, [r7, #12]
 8101910:	609a      	str	r2, [r3, #8]
 8101912:	e000      	b.n	8101916 <ReadAltitude+0x96>
    return;
 8101914:	bf00      	nop
}
 8101916:	3710      	adds	r7, #16
 8101918:	46bd      	mov	sp, r7
 810191a:	bd80      	pop	{r7, pc}
 810191c:	f3af 8000 	nop.w
 8101920:	ccd9456c 	.word	0xccd9456c
 8101924:	3fc85b95 	.word	0x3fc85b95
 8101928:	00000000 	.word	0x00000000
 810192c:	40e5a540 	.word	0x40e5a540
 8101930:	47c5e680 	.word	0x47c5e680
 8101934:	3ff00000 	.word	0x3ff00000
 8101938:	c3fa0000 	.word	0xc3fa0000
 810193c:	460ca000 	.word	0x460ca000

08101940 <ReadCalibCoefficients>:
 * from the registers in the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing.
 */
void ReadCalibCoefficients(BMP280Handle* baro)
{
 8101940:	b580      	push	{r7, lr}
 8101942:	b082      	sub	sp, #8
 8101944:	af00      	add	r7, sp, #0
 8101946:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16Bit(dig_T1);
 8101948:	2088      	movs	r0, #136	; 0x88
 810194a:	f7ff fcf9 	bl	8101340 <Read16Bit>
 810194e:	4603      	mov	r3, r0
 8101950:	461a      	mov	r2, r3
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_T2 = Read16Bit(dig_T2);
 8101956:	208a      	movs	r0, #138	; 0x8a
 8101958:	f7ff fcf2 	bl	8101340 <Read16Bit>
 810195c:	4603      	mov	r3, r0
 810195e:	b21a      	sxth	r2, r3
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_T3 = Read16Bit(dig_T3);
 8101964:	208c      	movs	r0, #140	; 0x8c
 8101966:	f7ff fceb 	bl	8101340 <Read16Bit>
 810196a:	4603      	mov	r3, r0
 810196c:	b21a      	sxth	r2, r3
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P1 = Read16Bit(dig_P1);
 8101972:	208e      	movs	r0, #142	; 0x8e
 8101974:	f7ff fce4 	bl	8101340 <Read16Bit>
 8101978:	4603      	mov	r3, r0
 810197a:	461a      	mov	r2, r3
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P2 = Read16Bit(dig_P2);
 8101980:	2090      	movs	r0, #144	; 0x90
 8101982:	f7ff fcdd 	bl	8101340 <Read16Bit>
 8101986:	4603      	mov	r3, r0
 8101988:	b21a      	sxth	r2, r3
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P3 = Read16Bit(dig_P3);
 810198e:	2092      	movs	r0, #146	; 0x92
 8101990:	f7ff fcd6 	bl	8101340 <Read16Bit>
 8101994:	4603      	mov	r3, r0
 8101996:	b21a      	sxth	r2, r3
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P4 = Read16Bit(dig_P4);
 810199c:	2094      	movs	r0, #148	; 0x94
 810199e:	f7ff fccf 	bl	8101340 <Read16Bit>
 81019a2:	4603      	mov	r3, r0
 81019a4:	b21a      	sxth	r2, r3
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P5 = Read16Bit(dig_P5);
 81019aa:	2096      	movs	r0, #150	; 0x96
 81019ac:	f7ff fcc8 	bl	8101340 <Read16Bit>
 81019b0:	4603      	mov	r3, r0
 81019b2:	b21a      	sxth	r2, r3
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P6 = Read16Bit(dig_P6);
 81019b8:	2098      	movs	r0, #152	; 0x98
 81019ba:	f7ff fcc1 	bl	8101340 <Read16Bit>
 81019be:	4603      	mov	r3, r0
 81019c0:	b21a      	sxth	r2, r3
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	851a      	strh	r2, [r3, #40]	; 0x28
  baro->comp_vals.dig_P7 = Read16Bit(dig_P7);
 81019c6:	209a      	movs	r0, #154	; 0x9a
 81019c8:	f7ff fcba 	bl	8101340 <Read16Bit>
 81019cc:	4603      	mov	r3, r0
 81019ce:	b21a      	sxth	r2, r3
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  baro->comp_vals.dig_P8 = Read16Bit(dig_P8);
 81019d4:	209c      	movs	r0, #156	; 0x9c
 81019d6:	f7ff fcb3 	bl	8101340 <Read16Bit>
 81019da:	4603      	mov	r3, r0
 81019dc:	b21a      	sxth	r2, r3
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  baro->comp_vals.dig_P9 = Read16Bit(dig_P9);
 81019e2:	209e      	movs	r0, #158	; 0x9e
 81019e4:	f7ff fcac 	bl	8101340 <Read16Bit>
 81019e8:	4603      	mov	r3, r0
 81019ea:	b21a      	sxth	r2, r3
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 81019f0:	bf00      	nop
 81019f2:	3708      	adds	r7, #8
 81019f4:	46bd      	mov	sp, r7
 81019f6:	bd80      	pop	{r7, pc}

081019f8 <setConfig>:
 * @param baro a pointer to the BMP280 struct
 * @returns HAL_OK if successful or HAL_ERROR
 * if configuration write fails.
 */
uint8_t setConfig(BMP280Handle* baro)
{
 81019f8:	b580      	push	{r7, lr}
 81019fa:	b084      	sub	sp, #16
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	6078      	str	r0, [r7, #4]
    // Ultra High resolution 26.3 Hz
   baro->config.mode = NORMAL;
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	2203      	movs	r2, #3
 8101a04:	749a      	strb	r2, [r3, #18]
   baro->config.pressure_oversampling =  X16;
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	2205      	movs	r2, #5
 8101a0a:	755a      	strb	r2, [r3, #21]
   baro->config.temp_oversampling =  X2;
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	2202      	movs	r2, #2
 8101a10:	759a      	strb	r2, [r3, #22]

   uint8_t SerialData[2] = {0};
 8101a12:	2300      	movs	r3, #0
 8101a14:	81bb      	strh	r3, [r7, #12]
   uint8_t aRxBuffer[3]= {0};
 8101a16:	4b38      	ldr	r3, [pc, #224]	; (8101af8 <setConfig+0x100>)
 8101a18:	881b      	ldrh	r3, [r3, #0]
 8101a1a:	813b      	strh	r3, [r7, #8]
 8101a1c:	2300      	movs	r3, #0
 8101a1e:	72bb      	strb	r3, [r7, #10]
   SerialData[0] = BMP280_REG_CTRL_MEAS & ~BMP280_SPI_READ;
 8101a20:	2374      	movs	r3, #116	; 0x74
 8101a22:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode ;
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	7d9b      	ldrb	r3, [r3, #22]
 8101a28:	015b      	lsls	r3, r3, #5
 8101a2a:	b25a      	sxtb	r2, r3
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	7d5b      	ldrb	r3, [r3, #21]
 8101a30:	009b      	lsls	r3, r3, #2
 8101a32:	b25b      	sxtb	r3, r3
 8101a34:	4313      	orrs	r3, r2
 8101a36:	b25a      	sxtb	r2, r3
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	7c9b      	ldrb	r3, [r3, #18]
 8101a3c:	b25b      	sxtb	r3, r3
 8101a3e:	4313      	orrs	r3, r2
 8101a40:	b25b      	sxtb	r3, r3
 8101a42:	b2db      	uxtb	r3, r3
 8101a44:	737b      	strb	r3, [r7, #13]

   ResetBMP280NSS();
 8101a46:	f7ff fc05 	bl	8101254 <ResetBMP280NSS>
   HAL_Delay(50);
 8101a4a:	2032      	movs	r0, #50	; 0x32
 8101a4c:	f001 fe1c 	bl	8103688 <HAL_Delay>
   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101a50:	f107 0208 	add.w	r2, r7, #8
 8101a54:	f107 010c 	add.w	r1, r7, #12
 8101a58:	2303      	movs	r3, #3
 8101a5a:	4828      	ldr	r0, [pc, #160]	; (8101afc <setConfig+0x104>)
 8101a5c:	f008 fd42 	bl	810a4e4 <HAL_SPI_TransmitReceive_DMA>
   while(dma_blocking_flag == 1)
 8101a60:	e010      	b.n	8101a84 <setConfig+0x8c>
   {
        memset(SerialData, 0, sizeof(SerialData));
 8101a62:	f107 030c 	add.w	r3, r7, #12
 8101a66:	2202      	movs	r2, #2
 8101a68:	2100      	movs	r1, #0
 8101a6a:	4618      	mov	r0, r3
 8101a6c:	f00a ff2a 	bl	810c8c4 <memset>
        memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8101a70:	f107 0308 	add.w	r3, r7, #8
 8101a74:	2203      	movs	r2, #3
 8101a76:	2100      	movs	r1, #0
 8101a78:	4618      	mov	r0, r3
 8101a7a:	f00a ff23 	bl	810c8c4 <memset>
        dma_blocking_flag  = 0;
 8101a7e:	4b20      	ldr	r3, [pc, #128]	; (8101b00 <setConfig+0x108>)
 8101a80:	2200      	movs	r2, #0
 8101a82:	701a      	strb	r2, [r3, #0]
   while(dma_blocking_flag == 1)
 8101a84:	4b1e      	ldr	r3, [pc, #120]	; (8101b00 <setConfig+0x108>)
 8101a86:	781b      	ldrb	r3, [r3, #0]
 8101a88:	2b01      	cmp	r3, #1
 8101a8a:	d0ea      	beq.n	8101a62 <setConfig+0x6a>
   }

   baro->config.IIR_Filter = FILTER_OFF;
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	2200      	movs	r2, #0
 8101a90:	74da      	strb	r2, [r3, #19]
   baro->config.standby = STANDBY_0_5;
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	2200      	movs	r2, #0
 8101a96:	751a      	strb	r2, [r3, #20]

   SerialData[0] = BMP280_REG_CONFIG & ~BMP280_SPI_READ;
 8101a98:	2375      	movs	r3, #117	; 0x75
 8101a9a:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.standby << 5 | baro->config.IIR_Filter ;
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	7d1b      	ldrb	r3, [r3, #20]
 8101aa0:	015b      	lsls	r3, r3, #5
 8101aa2:	b25a      	sxtb	r2, r3
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	7cdb      	ldrb	r3, [r3, #19]
 8101aa8:	b25b      	sxtb	r3, r3
 8101aaa:	4313      	orrs	r3, r2
 8101aac:	b25b      	sxtb	r3, r3
 8101aae:	b2db      	uxtb	r3, r3
 8101ab0:	737b      	strb	r3, [r7, #13]
   ResetBMP280NSS();
 8101ab2:	f7ff fbcf 	bl	8101254 <ResetBMP280NSS>
   uint8_t res = HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101ab6:	f107 0208 	add.w	r2, r7, #8
 8101aba:	f107 010c 	add.w	r1, r7, #12
 8101abe:	2303      	movs	r3, #3
 8101ac0:	480e      	ldr	r0, [pc, #56]	; (8101afc <setConfig+0x104>)
 8101ac2:	f008 fd0f 	bl	810a4e4 <HAL_SPI_TransmitReceive_DMA>
 8101ac6:	4603      	mov	r3, r0
 8101ac8:	73fb      	strb	r3, [r7, #15]

   while(dma_blocking_flag == 1)
 8101aca:	bf00      	nop
 8101acc:	4b0c      	ldr	r3, [pc, #48]	; (8101b00 <setConfig+0x108>)
 8101ace:	781b      	ldrb	r3, [r3, #0]
 8101ad0:	2b01      	cmp	r3, #1
 8101ad2:	d10c      	bne.n	8101aee <setConfig+0xf6>
   {
    if(res == HAL_OK)
 8101ad4:	7bfb      	ldrb	r3, [r7, #15]
 8101ad6:	2b00      	cmp	r3, #0
 8101ad8:	d104      	bne.n	8101ae4 <setConfig+0xec>
      {
        dma_blocking_flag = 0;
 8101ada:	4b09      	ldr	r3, [pc, #36]	; (8101b00 <setConfig+0x108>)
 8101adc:	2200      	movs	r2, #0
 8101ade:	701a      	strb	r2, [r3, #0]
        return HAL_OK;
 8101ae0:	2300      	movs	r3, #0
 8101ae2:	e005      	b.n	8101af0 <setConfig+0xf8>
      }
    else
      {
        dma_blocking_flag = 0;
 8101ae4:	4b06      	ldr	r3, [pc, #24]	; (8101b00 <setConfig+0x108>)
 8101ae6:	2200      	movs	r2, #0
 8101ae8:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8101aea:	2301      	movs	r3, #1
 8101aec:	e000      	b.n	8101af0 <setConfig+0xf8>
      }
   }
       return HAL_OK;
 8101aee:	2300      	movs	r3, #0
}
 8101af0:	4618      	mov	r0, r3
 8101af2:	3710      	adds	r7, #16
 8101af4:	46bd      	mov	sp, r7
 8101af6:	bd80      	pop	{r7, pc}
 8101af8:	0810d85c 	.word	0x0810d85c
 8101afc:	100003e0 	.word	0x100003e0
 8101b00:	100000a8 	.word	0x100000a8

08101b04 <HAL_SPI_TxRxCpltCallback>:

/*
 * @brief Callback Handler
 */
void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8101b04:	b580      	push	{r7, lr}
 8101b06:	b082      	sub	sp, #8
 8101b08:	af00      	add	r7, sp, #0
 8101b0a:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8101b0c:	687b      	ldr	r3, [r7, #4]
 8101b0e:	681b      	ldr	r3, [r3, #0]
 8101b10:	4a05      	ldr	r2, [pc, #20]	; (8101b28 <HAL_SPI_TxRxCpltCallback+0x24>)
 8101b12:	4293      	cmp	r3, r2
 8101b14:	d104      	bne.n	8101b20 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
      dma_blocking_flag = 1;
 8101b16:	4b05      	ldr	r3, [pc, #20]	; (8101b2c <HAL_SPI_TxRxCpltCallback+0x28>)
 8101b18:	2201      	movs	r2, #1
 8101b1a:	701a      	strb	r2, [r3, #0]
      ReadComplete();
 8101b1c:	f7ff fb8e 	bl	810123c <ReadComplete>
    }
}
 8101b20:	bf00      	nop
 8101b22:	3708      	adds	r7, #8
 8101b24:	46bd      	mov	sp, r7
 8101b26:	bd80      	pop	{r7, pc}
 8101b28:	40013000 	.word	0x40013000
 8101b2c:	100000a8 	.word	0x100000a8

08101b30 <ResetBMP280>:
/*
 * @brief Resets the BMP280 chip
 * @returns Result of the operation
 */
uint8_t ResetBMP280(void)
{
 8101b30:	b580      	push	{r7, lr}
 8101b32:	b082      	sub	sp, #8
 8101b34:	af00      	add	r7, sp, #0
   uint8_t SerialData[2] = {(BMP280_REG_RESET & ~BMP280_SPI_READ), BMP280_RESET_VALUE}; // Register address, Data,
 8101b36:	f24b 6360 	movw	r3, #46688	; 0xb660
 8101b3a:	80bb      	strh	r3, [r7, #4]
   static uint8_t aRxBuffer[3]= {0};
   ResetBMP280NSS();
 8101b3c:	f7ff fb8a 	bl	8101254 <ResetBMP280NSS>
   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101b40:	1d39      	adds	r1, r7, #4
 8101b42:	2302      	movs	r3, #2
 8101b44:	4a06      	ldr	r2, [pc, #24]	; (8101b60 <ResetBMP280+0x30>)
 8101b46:	4807      	ldr	r0, [pc, #28]	; (8101b64 <ResetBMP280+0x34>)
 8101b48:	f008 fccc 	bl	810a4e4 <HAL_SPI_TransmitReceive_DMA>
 8101b4c:	4603      	mov	r3, r0
 8101b4e:	2b00      	cmp	r3, #0
 8101b50:	d101      	bne.n	8101b56 <ResetBMP280+0x26>
   {
     return HAL_OK;
 8101b52:	2300      	movs	r3, #0
 8101b54:	e000      	b.n	8101b58 <ResetBMP280+0x28>
   }
   else
   {
     return HAL_ERROR;
 8101b56:	2301      	movs	r3, #1
   }
}
 8101b58:	4618      	mov	r0, r3
 8101b5a:	3708      	adds	r7, #8
 8101b5c:	46bd      	mov	sp, r7
 8101b5e:	bd80      	pop	{r7, pc}
 8101b60:	100000b4 	.word	0x100000b4
 8101b64:	100003e0 	.word	0x100003e0

08101b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101b68:	b580      	push	{r7, lr}
 8101b6a:	b082      	sub	sp, #8
 8101b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101b6e:	4b2d      	ldr	r3, [pc, #180]	; (8101c24 <MX_DMA_Init+0xbc>)
 8101b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b74:	4a2b      	ldr	r2, [pc, #172]	; (8101c24 <MX_DMA_Init+0xbc>)
 8101b76:	f043 0301 	orr.w	r3, r3, #1
 8101b7a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b7e:	4b29      	ldr	r3, [pc, #164]	; (8101c24 <MX_DMA_Init+0xbc>)
 8101b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b84:	f003 0301 	and.w	r3, r3, #1
 8101b88:	607b      	str	r3, [r7, #4]
 8101b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b8c:	4b25      	ldr	r3, [pc, #148]	; (8101c24 <MX_DMA_Init+0xbc>)
 8101b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b92:	4a24      	ldr	r2, [pc, #144]	; (8101c24 <MX_DMA_Init+0xbc>)
 8101b94:	f043 0302 	orr.w	r3, r3, #2
 8101b98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b9c:	4b21      	ldr	r3, [pc, #132]	; (8101c24 <MX_DMA_Init+0xbc>)
 8101b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ba2:	f003 0302 	and.w	r3, r3, #2
 8101ba6:	603b      	str	r3, [r7, #0]
 8101ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101baa:	2200      	movs	r2, #0
 8101bac:	2100      	movs	r1, #0
 8101bae:	200b      	movs	r0, #11
 8101bb0:	f002 f95b 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101bb4:	200b      	movs	r0, #11
 8101bb6:	f002 f972 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101bba:	2200      	movs	r2, #0
 8101bbc:	2100      	movs	r1, #0
 8101bbe:	200c      	movs	r0, #12
 8101bc0:	f002 f953 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101bc4:	200c      	movs	r0, #12
 8101bc6:	f002 f96a 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101bca:	2200      	movs	r2, #0
 8101bcc:	2100      	movs	r1, #0
 8101bce:	200d      	movs	r0, #13
 8101bd0:	f002 f94b 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101bd4:	200d      	movs	r0, #13
 8101bd6:	f002 f962 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101bda:	2200      	movs	r2, #0
 8101bdc:	2100      	movs	r1, #0
 8101bde:	200e      	movs	r0, #14
 8101be0:	f002 f943 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101be4:	200e      	movs	r0, #14
 8101be6:	f002 f95a 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101bea:	2200      	movs	r2, #0
 8101bec:	2100      	movs	r1, #0
 8101bee:	200f      	movs	r0, #15
 8101bf0:	f002 f93b 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101bf4:	200f      	movs	r0, #15
 8101bf6:	f002 f952 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101bfa:	2200      	movs	r2, #0
 8101bfc:	2100      	movs	r1, #0
 8101bfe:	202f      	movs	r0, #47	; 0x2f
 8101c00:	f002 f933 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101c04:	202f      	movs	r0, #47	; 0x2f
 8101c06:	f002 f94a 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101c0a:	2200      	movs	r2, #0
 8101c0c:	2100      	movs	r1, #0
 8101c0e:	2038      	movs	r0, #56	; 0x38
 8101c10:	f002 f92b 	bl	8103e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101c14:	2038      	movs	r0, #56	; 0x38
 8101c16:	f002 f942 	bl	8103e9e <HAL_NVIC_EnableIRQ>

}
 8101c1a:	bf00      	nop
 8101c1c:	3708      	adds	r7, #8
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	bd80      	pop	{r7, pc}
 8101c22:	bf00      	nop
 8101c24:	58024400 	.word	0x58024400

08101c28 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b08a      	sub	sp, #40	; 0x28
 8101c2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c2e:	f107 0314 	add.w	r3, r7, #20
 8101c32:	2200      	movs	r2, #0
 8101c34:	601a      	str	r2, [r3, #0]
 8101c36:	605a      	str	r2, [r3, #4]
 8101c38:	609a      	str	r2, [r3, #8]
 8101c3a:	60da      	str	r2, [r3, #12]
 8101c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c3e:	4b29      	ldr	r3, [pc, #164]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c44:	4a27      	ldr	r2, [pc, #156]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c46:	f043 0301 	orr.w	r3, r3, #1
 8101c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c4e:	4b25      	ldr	r3, [pc, #148]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c54:	f003 0301 	and.w	r3, r3, #1
 8101c58:	613b      	str	r3, [r7, #16]
 8101c5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101c5c:	4b21      	ldr	r3, [pc, #132]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c62:	4a20      	ldr	r2, [pc, #128]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c64:	f043 0320 	orr.w	r3, r3, #32
 8101c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c6c:	4b1d      	ldr	r3, [pc, #116]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c72:	f003 0320 	and.w	r3, r3, #32
 8101c76:	60fb      	str	r3, [r7, #12]
 8101c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c7a:	4b1a      	ldr	r3, [pc, #104]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c80:	4a18      	ldr	r2, [pc, #96]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c82:	f043 0308 	orr.w	r3, r3, #8
 8101c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c8a:	4b16      	ldr	r3, [pc, #88]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c90:	f003 0308 	and.w	r3, r3, #8
 8101c94:	60bb      	str	r3, [r7, #8]
 8101c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c98:	4b12      	ldr	r3, [pc, #72]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c9e:	4a11      	ldr	r2, [pc, #68]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101ca0:	f043 0302 	orr.w	r3, r3, #2
 8101ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ca8:	4b0e      	ldr	r3, [pc, #56]	; (8101ce4 <MX_GPIO_Init+0xbc>)
 8101caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cae:	f003 0302 	and.w	r3, r3, #2
 8101cb2:	607b      	str	r3, [r7, #4]
 8101cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101cb6:	2201      	movs	r2, #1
 8101cb8:	2110      	movs	r1, #16
 8101cba:	480b      	ldr	r0, [pc, #44]	; (8101ce8 <MX_GPIO_Init+0xc0>)
 8101cbc:	f005 f920 	bl	8106f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101cc0:	2310      	movs	r3, #16
 8101cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101cc4:	2301      	movs	r3, #1
 8101cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cc8:	2300      	movs	r3, #0
 8101cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ccc:	2300      	movs	r3, #0
 8101cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cd0:	f107 0314 	add.w	r3, r7, #20
 8101cd4:	4619      	mov	r1, r3
 8101cd6:	4804      	ldr	r0, [pc, #16]	; (8101ce8 <MX_GPIO_Init+0xc0>)
 8101cd8:	f004 ff62 	bl	8106ba0 <HAL_GPIO_Init>

}
 8101cdc:	bf00      	nop
 8101cde:	3728      	adds	r7, #40	; 0x28
 8101ce0:	46bd      	mov	sp, r7
 8101ce2:	bd80      	pop	{r7, pc}
 8101ce4:	58024400 	.word	0x58024400
 8101ce8:	58020000 	.word	0x58020000

08101cec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101cec:	b580      	push	{r7, lr}
 8101cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101cf0:	4b1b      	ldr	r3, [pc, #108]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101cf2:	4a1c      	ldr	r2, [pc, #112]	; (8101d64 <MX_I2C1_Init+0x78>)
 8101cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101cf6:	4b1a      	ldr	r3, [pc, #104]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101cf8:	4a1b      	ldr	r2, [pc, #108]	; (8101d68 <MX_I2C1_Init+0x7c>)
 8101cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101cfc:	4b18      	ldr	r3, [pc, #96]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101cfe:	2200      	movs	r2, #0
 8101d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101d02:	4b17      	ldr	r3, [pc, #92]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d04:	2201      	movs	r2, #1
 8101d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101d08:	4b15      	ldr	r3, [pc, #84]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d0a:	2200      	movs	r2, #0
 8101d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101d0e:	4b14      	ldr	r3, [pc, #80]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d10:	2200      	movs	r2, #0
 8101d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101d14:	4b12      	ldr	r3, [pc, #72]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d16:	2200      	movs	r2, #0
 8101d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101d1a:	4b11      	ldr	r3, [pc, #68]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d1c:	2200      	movs	r2, #0
 8101d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101d20:	4b0f      	ldr	r3, [pc, #60]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d22:	2200      	movs	r2, #0
 8101d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101d26:	480e      	ldr	r0, [pc, #56]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d28:	f005 f944 	bl	8106fb4 <HAL_I2C_Init>
 8101d2c:	4603      	mov	r3, r0
 8101d2e:	2b00      	cmp	r3, #0
 8101d30:	d001      	beq.n	8101d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101d32:	f000 ffa1 	bl	8102c78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101d36:	2100      	movs	r1, #0
 8101d38:	4809      	ldr	r0, [pc, #36]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d3a:	f006 fc77 	bl	810862c <HAL_I2CEx_ConfigAnalogFilter>
 8101d3e:	4603      	mov	r3, r0
 8101d40:	2b00      	cmp	r3, #0
 8101d42:	d001      	beq.n	8101d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101d44:	f000 ff98 	bl	8102c78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101d48:	2100      	movs	r1, #0
 8101d4a:	4805      	ldr	r0, [pc, #20]	; (8101d60 <MX_I2C1_Init+0x74>)
 8101d4c:	f006 fcb9 	bl	81086c2 <HAL_I2CEx_ConfigDigitalFilter>
 8101d50:	4603      	mov	r3, r0
 8101d52:	2b00      	cmp	r3, #0
 8101d54:	d001      	beq.n	8101d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101d56:	f000 ff8f 	bl	8102c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101d5a:	bf00      	nop
 8101d5c:	bd80      	pop	{r7, pc}
 8101d5e:	bf00      	nop
 8101d60:	10000210 	.word	0x10000210
 8101d64:	40005400 	.word	0x40005400
 8101d68:	307075b1 	.word	0x307075b1

08101d6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101d6c:	b580      	push	{r7, lr}
 8101d6e:	b0b8      	sub	sp, #224	; 0xe0
 8101d70:	af00      	add	r7, sp, #0
 8101d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d78:	2200      	movs	r2, #0
 8101d7a:	601a      	str	r2, [r3, #0]
 8101d7c:	605a      	str	r2, [r3, #4]
 8101d7e:	609a      	str	r2, [r3, #8]
 8101d80:	60da      	str	r2, [r3, #12]
 8101d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d84:	f107 0310 	add.w	r3, r7, #16
 8101d88:	22bc      	movs	r2, #188	; 0xbc
 8101d8a:	2100      	movs	r1, #0
 8101d8c:	4618      	mov	r0, r3
 8101d8e:	f00a fd99 	bl	810c8c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	681b      	ldr	r3, [r3, #0]
 8101d96:	4a5b      	ldr	r2, [pc, #364]	; (8101f04 <HAL_I2C_MspInit+0x198>)
 8101d98:	4293      	cmp	r3, r2
 8101d9a:	f040 80af 	bne.w	8101efc <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101d9e:	2308      	movs	r3, #8
 8101da0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101da2:	2300      	movs	r3, #0
 8101da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101da8:	f107 0310 	add.w	r3, r7, #16
 8101dac:	4618      	mov	r0, r3
 8101dae:	f006 ff35 	bl	8108c1c <HAL_RCCEx_PeriphCLKConfig>
 8101db2:	4603      	mov	r3, r0
 8101db4:	2b00      	cmp	r3, #0
 8101db6:	d001      	beq.n	8101dbc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101db8:	f000 ff5e 	bl	8102c78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101dbc:	4b52      	ldr	r3, [pc, #328]	; (8101f08 <HAL_I2C_MspInit+0x19c>)
 8101dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dc2:	4a51      	ldr	r2, [pc, #324]	; (8101f08 <HAL_I2C_MspInit+0x19c>)
 8101dc4:	f043 0302 	orr.w	r3, r3, #2
 8101dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101dcc:	4b4e      	ldr	r3, [pc, #312]	; (8101f08 <HAL_I2C_MspInit+0x19c>)
 8101dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101dd2:	f003 0302 	and.w	r3, r3, #2
 8101dd6:	60fb      	str	r3, [r7, #12]
 8101dd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101dde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101de2:	2312      	movs	r3, #18
 8101de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101de8:	2300      	movs	r3, #0
 8101dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dee:	2300      	movs	r3, #0
 8101df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101df4:	2304      	movs	r3, #4
 8101df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101dfa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101dfe:	4619      	mov	r1, r3
 8101e00:	4842      	ldr	r0, [pc, #264]	; (8101f0c <HAL_I2C_MspInit+0x1a0>)
 8101e02:	f004 fecd 	bl	8106ba0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101e06:	4b40      	ldr	r3, [pc, #256]	; (8101f08 <HAL_I2C_MspInit+0x19c>)
 8101e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e0c:	4a3e      	ldr	r2, [pc, #248]	; (8101f08 <HAL_I2C_MspInit+0x19c>)
 8101e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e16:	4b3c      	ldr	r3, [pc, #240]	; (8101f08 <HAL_I2C_MspInit+0x19c>)
 8101e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101e20:	60bb      	str	r3, [r7, #8]
 8101e22:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101e24:	4b3a      	ldr	r3, [pc, #232]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e26:	4a3b      	ldr	r2, [pc, #236]	; (8101f14 <HAL_I2C_MspInit+0x1a8>)
 8101e28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101e2a:	4b39      	ldr	r3, [pc, #228]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e2c:	2221      	movs	r2, #33	; 0x21
 8101e2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101e30:	4b37      	ldr	r3, [pc, #220]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e32:	2200      	movs	r2, #0
 8101e34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e36:	4b36      	ldr	r3, [pc, #216]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e38:	2200      	movs	r2, #0
 8101e3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101e3c:	4b34      	ldr	r3, [pc, #208]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e44:	4b32      	ldr	r3, [pc, #200]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e46:	2200      	movs	r2, #0
 8101e48:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e4a:	4b31      	ldr	r3, [pc, #196]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e4c:	2200      	movs	r2, #0
 8101e4e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101e50:	4b2f      	ldr	r3, [pc, #188]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e52:	2200      	movs	r2, #0
 8101e54:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e56:	4b2e      	ldr	r3, [pc, #184]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e5e:	4b2c      	ldr	r3, [pc, #176]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e60:	2200      	movs	r2, #0
 8101e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101e64:	482a      	ldr	r0, [pc, #168]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e66:	f002 f849 	bl	8103efc <HAL_DMA_Init>
 8101e6a:	4603      	mov	r3, r0
 8101e6c:	2b00      	cmp	r3, #0
 8101e6e:	d001      	beq.n	8101e74 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101e70:	f000 ff02 	bl	8102c78 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	4a26      	ldr	r2, [pc, #152]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e78:	63da      	str	r2, [r3, #60]	; 0x3c
 8101e7a:	4a25      	ldr	r2, [pc, #148]	; (8101f10 <HAL_I2C_MspInit+0x1a4>)
 8101e7c:	687b      	ldr	r3, [r7, #4]
 8101e7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101e80:	4b25      	ldr	r3, [pc, #148]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101e82:	4a26      	ldr	r2, [pc, #152]	; (8101f1c <HAL_I2C_MspInit+0x1b0>)
 8101e84:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101e86:	4b24      	ldr	r3, [pc, #144]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101e88:	2222      	movs	r2, #34	; 0x22
 8101e8a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101e8c:	4b22      	ldr	r3, [pc, #136]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101e8e:	2240      	movs	r2, #64	; 0x40
 8101e90:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e92:	4b21      	ldr	r3, [pc, #132]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101e94:	2200      	movs	r2, #0
 8101e96:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101e98:	4b1f      	ldr	r3, [pc, #124]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e9e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101ea0:	4b1d      	ldr	r3, [pc, #116]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101ea2:	2200      	movs	r2, #0
 8101ea4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101ea6:	4b1c      	ldr	r3, [pc, #112]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101ea8:	2200      	movs	r2, #0
 8101eaa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101eac:	4b1a      	ldr	r3, [pc, #104]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101eae:	2200      	movs	r2, #0
 8101eb0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101eb2:	4b19      	ldr	r3, [pc, #100]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101eb8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101eba:	4b17      	ldr	r3, [pc, #92]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101ebc:	2200      	movs	r2, #0
 8101ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101ec0:	4815      	ldr	r0, [pc, #84]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101ec2:	f002 f81b 	bl	8103efc <HAL_DMA_Init>
 8101ec6:	4603      	mov	r3, r0
 8101ec8:	2b00      	cmp	r3, #0
 8101eca:	d001      	beq.n	8101ed0 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101ecc:	f000 fed4 	bl	8102c78 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	4a11      	ldr	r2, [pc, #68]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8101ed6:	4a10      	ldr	r2, [pc, #64]	; (8101f18 <HAL_I2C_MspInit+0x1ac>)
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101edc:	2200      	movs	r2, #0
 8101ede:	2100      	movs	r1, #0
 8101ee0:	201f      	movs	r0, #31
 8101ee2:	f001 ffc2 	bl	8103e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101ee6:	201f      	movs	r0, #31
 8101ee8:	f001 ffd9 	bl	8103e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101eec:	2200      	movs	r2, #0
 8101eee:	2100      	movs	r1, #0
 8101ef0:	2020      	movs	r0, #32
 8101ef2:	f001 ffba 	bl	8103e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101ef6:	2020      	movs	r0, #32
 8101ef8:	f001 ffd1 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101efc:	bf00      	nop
 8101efe:	37e0      	adds	r7, #224	; 0xe0
 8101f00:	46bd      	mov	sp, r7
 8101f02:	bd80      	pop	{r7, pc}
 8101f04:	40005400 	.word	0x40005400
 8101f08:	58024400 	.word	0x58024400
 8101f0c:	58020400 	.word	0x58020400
 8101f10:	1000025c 	.word	0x1000025c
 8101f14:	40020040 	.word	0x40020040
 8101f18:	10000198 	.word	0x10000198
 8101f1c:	40020058 	.word	0x40020058

08101f20 <CheckIMUSensorID>:
 * @param address of the sensor
 * @param reg register to read
 * @returns value from the register
 */
uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8101f20:	b580      	push	{r7, lr}
 8101f22:	b088      	sub	sp, #32
 8101f24:	af04      	add	r7, sp, #16
 8101f26:	4603      	mov	r3, r0
 8101f28:	460a      	mov	r2, r1
 8101f2a:	71fb      	strb	r3, [r7, #7]
 8101f2c:	4613      	mov	r3, r2
 8101f2e:	71bb      	strb	r3, [r7, #6]
    uint8_t reg_value = 0x00;
 8101f30:	2300      	movs	r3, #0
 8101f32:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8101f34:	79fb      	ldrb	r3, [r7, #7]
 8101f36:	b29b      	uxth	r3, r3
 8101f38:	005b      	lsls	r3, r3, #1
 8101f3a:	b299      	uxth	r1, r3
 8101f3c:	79bb      	ldrb	r3, [r7, #6]
 8101f3e:	b29a      	uxth	r2, r3
 8101f40:	2364      	movs	r3, #100	; 0x64
 8101f42:	9302      	str	r3, [sp, #8]
 8101f44:	2301      	movs	r3, #1
 8101f46:	9301      	str	r3, [sp, #4]
 8101f48:	f107 030e 	add.w	r3, r7, #14
 8101f4c:	9300      	str	r3, [sp, #0]
 8101f4e:	2301      	movs	r3, #1
 8101f50:	4807      	ldr	r0, [pc, #28]	; (8101f70 <CheckIMUSensorID+0x50>)
 8101f52:	f005 f9d3 	bl	81072fc <HAL_I2C_Mem_Read>
 8101f56:	4603      	mov	r3, r0
 8101f58:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 8101f5a:	7bfb      	ldrb	r3, [r7, #15]
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d001      	beq.n	8101f64 <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8101f60:	2301      	movs	r3, #1
 8101f62:	e000      	b.n	8101f66 <CheckIMUSensorID+0x46>
    }
    return reg_value;
 8101f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8101f66:	4618      	mov	r0, r3
 8101f68:	3710      	adds	r7, #16
 8101f6a:	46bd      	mov	sp, r7
 8101f6c:	bd80      	pop	{r7, pc}
 8101f6e:	bf00      	nop
 8101f70:	10000210 	.word	0x10000210

08101f74 <init>:
/*
 * @brief Initialises IMU
 * @param imu pointer to imu struct
 */
void init(LSM9DS1Handle* imu)
{
 8101f74:	b480      	push	{r7}
 8101f76:	b083      	sub	sp, #12
 8101f78:	af00      	add	r7, sp, #0
 8101f7a:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	2201      	movs	r2, #1
 8101f80:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	2201      	movs	r2, #1
 8101f86:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	2201      	movs	r2, #1
 8101f8c:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8101f8e:	687b      	ldr	r3, [r7, #4]
 8101f90:	2201      	movs	r2, #1
 8101f92:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale 245, 500, 2000
  imu->gyro_settings.scale = 245;
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	22f5      	movs	r2, #245	; 0xf5
 8101f98:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	2206      	movs	r2, #6
 8101f9e:	711a      	strb	r2, [r3, #4]

  // set cutoff frequency
  // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	2200      	movs	r2, #0
 8101fa4:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	2200      	movs	r2, #0
 8101faa:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	2200      	movs	r2, #0
 8101fb0:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	2200      	movs	r2, #0
 8101fbc:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	2200      	movs	r2, #0
 8101fc2:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	2200      	movs	r2, #0
 8101fc8:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	2200      	movs	r2, #0
 8101fce:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	2201      	movs	r2, #1
 8101fd4:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	2201      	movs	r2, #1
 8101fda:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	2201      	movs	r2, #1
 8101fe0:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	2201      	movs	r2, #1
 8101fe6:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	2201      	movs	r2, #1
 8101fec:	75da      	strb	r2, [r3, #23]
  imu->accel_settings.scale = 2;
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	2202      	movs	r2, #2
 8101ff2:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	2206      	movs	r2, #6
 8101ff8:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	22ff      	movs	r2, #255	; 0xff
 8101ffe:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	2200      	movs	r2, #0
 8102004:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	2200      	movs	r2, #0
 810200a:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	2201      	movs	r2, #1
 8102010:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	2204      	movs	r2, #4
 8102016:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	2207      	movs	r2, #7
 810201c:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	2200      	movs	r2, #0
 8102022:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8102024:	687b      	ldr	r3, [r7, #4]
 8102026:	2203      	movs	r2, #3
 8102028:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	2203      	movs	r2, #3
 810202e:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	2200      	movs	r2, #0
 8102036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	2200      	movs	r2, #0
 810203e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  // enable temperature sensor
  imu->temp_settings.enabled = 1;
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	2201      	movs	r2, #1
 8102046:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 810204a:	bf00      	nop
 810204c:	370c      	adds	r7, #12
 810204e:	46bd      	mov	sp, r7
 8102050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102054:	4770      	bx	lr

08102056 <setup>:
 * @param imu pointer to imu struct
 * @returns response from MAG and ACC/GYRO WHOAMI
 * register
 */
uint8_t setup(LSM9DS1Handle* imu)
{
 8102056:	b580      	push	{r7, lr}
 8102058:	b084      	sub	sp, #16
 810205a:	af00      	add	r7, sp, #0
 810205c:	6078      	str	r0, [r7, #4]
  // initialise the sensors
  init(imu);
 810205e:	6878      	ldr	r0, [r7, #4]
 8102060:	f7ff ff88 	bl	8101f74 <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8102064:	6878      	ldr	r0, [r7, #4]
 8102066:	f000 f9fb 	bl	8102460 <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 810206a:	6878      	ldr	r0, [r7, #4]
 810206c:	f000 fb70 	bl	8102750 <calcGyroResolution>
  calcAccResoltuion(imu);
 8102070:	6878      	ldr	r0, [r7, #4]
 8102072:	f000 fb9b 	bl	81027ac <calcAccResoltuion>
  calcMagResolution(imu);
 8102076:	6878      	ldr	r0, [r7, #4]
 8102078:	f000 fbe4 	bl	8102844 <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check =  CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 810207c:	210f      	movs	r1, #15
 810207e:	206b      	movs	r0, #107	; 0x6b
 8102080:	f7ff ff4e 	bl	8101f20 <CheckIMUSensorID>
 8102084:	4603      	mov	r3, r0
 8102086:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 8102088:	210f      	movs	r1, #15
 810208a:	201e      	movs	r0, #30
 810208c:	f7ff ff48 	bl	8101f20 <CheckIMUSensorID>
 8102090:	4603      	mov	r3, r0
 8102092:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8102094:	7bfb      	ldrb	r3, [r7, #15]
 8102096:	021b      	lsls	r3, r3, #8
 8102098:	b21a      	sxth	r2, r3
 810209a:	7bbb      	ldrb	r3, [r7, #14]
 810209c:	b21b      	sxth	r3, r3
 810209e:	4313      	orrs	r3, r2
 81020a0:	b21b      	sxth	r3, r3
 81020a2:	81bb      	strh	r3, [r7, #12]
  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 81020a4:	89bb      	ldrh	r3, [r7, #12]
 81020a6:	f646 023d 	movw	r2, #26685	; 0x683d
 81020aa:	4293      	cmp	r3, r2
 81020ac:	d001      	beq.n	81020b2 <setup+0x5c>
  {
     return -1;
 81020ae:	23ff      	movs	r3, #255	; 0xff
 81020b0:	e009      	b.n	81020c6 <setup+0x70>
  }
  // initialise gyro
  initGyro(imu);
 81020b2:	6878      	ldr	r0, [r7, #4]
 81020b4:	f000 f81c 	bl	81020f0 <initGyro>
  // initialise accel
  initAccel(imu);
 81020b8:	6878      	ldr	r0, [r7, #4]
 81020ba:	f000 f8be 	bl	810223a <initAccel>
  // init Mag
  initMag(imu);
 81020be:	6878      	ldr	r0, [r7, #4]
 81020c0:	f000 f942 	bl	8102348 <initMag>
  return HAL_OK;;
 81020c4:	2300      	movs	r3, #0
}
 81020c6:	4618      	mov	r0, r3
 81020c8:	3710      	adds	r7, #16
 81020ca:	46bd      	mov	sp, r7
 81020cc:	bd80      	pop	{r7, pc}

081020ce <ConfigIMU>:
 * @brief Calls the setup IMU function
 * @param imu Pointer IMU struct
 * @retval none
 */
uint8_t ConfigIMU(LSM9DS1Handle* imu)
{
 81020ce:	b580      	push	{r7, lr}
 81020d0:	b082      	sub	sp, #8
 81020d2:	af00      	add	r7, sp, #0
 81020d4:	6078      	str	r0, [r7, #4]
  if(setup(imu) != HAL_OK)
 81020d6:	6878      	ldr	r0, [r7, #4]
 81020d8:	f7ff ffbd 	bl	8102056 <setup>
 81020dc:	4603      	mov	r3, r0
 81020de:	2b00      	cmp	r3, #0
 81020e0:	d001      	beq.n	81020e6 <ConfigIMU+0x18>
  {
    return HAL_ERROR;
 81020e2:	2301      	movs	r3, #1
 81020e4:	e000      	b.n	81020e8 <ConfigIMU+0x1a>
  }

  return HAL_OK;
 81020e6:	2300      	movs	r3, #0
}
 81020e8:	4618      	mov	r0, r3
 81020ea:	3708      	adds	r7, #8
 81020ec:	46bd      	mov	sp, r7
 81020ee:	bd80      	pop	{r7, pc}

081020f0 <initGyro>:
 * @brief initialises gyroscope
 * @param imu ponter to imu struct
 * @returns nothing
 */
void initGyro(LSM9DS1Handle* imu)
{
 81020f0:	b580      	push	{r7, lr}
 81020f2:	b084      	sub	sp, #16
 81020f4:	af00      	add	r7, sp, #0
 81020f6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 81020f8:	2300      	movs	r3, #0
 81020fa:	73fb      	strb	r3, [r7, #15]
  // Only set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	781b      	ldrb	r3, [r3, #0]
 8102100:	2b01      	cmp	r3, #1
 8102102:	d103      	bne.n	810210c <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	791b      	ldrb	r3, [r3, #4]
 8102108:	015b      	lsls	r3, r3, #5
 810210a:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	885b      	ldrh	r3, [r3, #2]
 8102110:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102114:	d003      	beq.n	810211e <initGyro+0x2e>
 8102116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 810211a:	d005      	beq.n	8102128 <initGyro+0x38>
 810211c:	e009      	b.n	8102132 <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 810211e:	7bfb      	ldrb	r3, [r7, #15]
 8102120:	f043 0308 	orr.w	r3, r3, #8
 8102124:	73fb      	strb	r3, [r7, #15]
      break;
 8102126:	e004      	b.n	8102132 <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 8102128:	7bfb      	ldrb	r3, [r7, #15]
 810212a:	f043 0318 	orr.w	r3, r3, #24
 810212e:	73fb      	strb	r3, [r7, #15]
      break;
 8102130:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	795b      	ldrb	r3, [r3, #5]
 8102136:	b25b      	sxtb	r3, r3
 8102138:	f003 0303 	and.w	r3, r3, #3
 810213c:	b25a      	sxtb	r2, r3
 810213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102142:	4313      	orrs	r3, r2
 8102144:	b25b      	sxtb	r3, r3
 8102146:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 8102148:	7bfb      	ldrb	r3, [r7, #15]
 810214a:	461a      	mov	r2, r3
 810214c:	2110      	movs	r1, #16
 810214e:	206b      	movs	r0, #107	; 0x6b
 8102150:	f000 fbee 	bl	8102930 <WriteByte>
   // reset tempValue
   tempRegValue = 0;
 8102154:	2300      	movs	r3, #0
 8102156:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 8102158:	7bfb      	ldrb	r3, [r7, #15]
 810215a:	461a      	mov	r2, r3
 810215c:	2111      	movs	r1, #17
 810215e:	206b      	movs	r0, #107	; 0x6b
 8102160:	f000 fbe6 	bl	8102930 <WriteByte>

   tempRegValue = 0;
 8102164:	2300      	movs	r3, #0
 8102166:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	799b      	ldrb	r3, [r3, #6]
 810216c:	2b00      	cmp	r3, #0
 810216e:	d001      	beq.n	8102174 <initGyro+0x84>
 8102170:	2380      	movs	r3, #128	; 0x80
 8102172:	e000      	b.n	8102176 <initGyro+0x86>
 8102174:	2300      	movs	r3, #0
 8102176:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	79db      	ldrb	r3, [r3, #7]
 810217c:	2b01      	cmp	r3, #1
 810217e:	d10a      	bne.n	8102196 <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	7a1b      	ldrb	r3, [r3, #8]
 8102184:	f003 030f 	and.w	r3, r3, #15
 8102188:	b2da      	uxtb	r2, r3
 810218a:	7bfb      	ldrb	r3, [r7, #15]
 810218c:	4313      	orrs	r3, r2
 810218e:	b2db      	uxtb	r3, r3
 8102190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102194:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 8102196:	7bfb      	ldrb	r3, [r7, #15]
 8102198:	461a      	mov	r2, r3
 810219a:	2112      	movs	r1, #18
 810219c:	206b      	movs	r0, #107	; 0x6b
 810219e:	f000 fbc7 	bl	8102930 <WriteByte>

   tempRegValue = 0;
 81021a2:	2300      	movs	r3, #0
 81021a4:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	7bdb      	ldrb	r3, [r3, #15]
 81021aa:	2b00      	cmp	r3, #0
 81021ac:	d003      	beq.n	81021b6 <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 81021ae:	7bfb      	ldrb	r3, [r7, #15]
 81021b0:	f043 0320 	orr.w	r3, r3, #32
 81021b4:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	7b9b      	ldrb	r3, [r3, #14]
 81021ba:	2b00      	cmp	r3, #0
 81021bc:	d003      	beq.n	81021c6 <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 81021be:	7bfb      	ldrb	r3, [r7, #15]
 81021c0:	f043 0310 	orr.w	r3, r3, #16
 81021c4:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	7b5b      	ldrb	r3, [r3, #13]
 81021ca:	2b00      	cmp	r3, #0
 81021cc:	d003      	beq.n	81021d6 <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 81021ce:	7bfb      	ldrb	r3, [r7, #15]
 81021d0:	f043 0308 	orr.w	r3, r3, #8
 81021d4:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	7c1b      	ldrb	r3, [r3, #16]
 81021da:	2b00      	cmp	r3, #0
 81021dc:	d003      	beq.n	81021e6 <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 81021de:	7bfb      	ldrb	r3, [r7, #15]
 81021e0:	f043 0302 	orr.w	r3, r3, #2
 81021e4:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 81021e6:	7bfb      	ldrb	r3, [r7, #15]
 81021e8:	461a      	mov	r2, r3
 81021ea:	211e      	movs	r1, #30
 81021ec:	206b      	movs	r0, #107	; 0x6b
 81021ee:	f000 fb9f 	bl	8102930 <WriteByte>

   tempRegValue = 0;
 81021f2:	2300      	movs	r3, #0
 81021f4:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	7a5b      	ldrb	r3, [r3, #9]
 81021fa:	2b00      	cmp	r3, #0
 81021fc:	d003      	beq.n	8102206 <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 81021fe:	7bfb      	ldrb	r3, [r7, #15]
 8102200:	f043 0320 	orr.w	r3, r3, #32
 8102204:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	7a9b      	ldrb	r3, [r3, #10]
 810220a:	2b00      	cmp	r3, #0
 810220c:	d003      	beq.n	8102216 <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 810220e:	7bfb      	ldrb	r3, [r7, #15]
 8102210:	f043 0310 	orr.w	r3, r3, #16
 8102214:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	7adb      	ldrb	r3, [r3, #11]
 810221a:	2b00      	cmp	r3, #0
 810221c:	d003      	beq.n	8102226 <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 810221e:	7bfb      	ldrb	r3, [r7, #15]
 8102220:	f043 0308 	orr.w	r3, r3, #8
 8102224:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 8102226:	7bfb      	ldrb	r3, [r7, #15]
 8102228:	461a      	mov	r2, r3
 810222a:	2113      	movs	r1, #19
 810222c:	206b      	movs	r0, #107	; 0x6b
 810222e:	f000 fb7f 	bl	8102930 <WriteByte>
}
 8102232:	bf00      	nop
 8102234:	3710      	adds	r7, #16
 8102236:	46bd      	mov	sp, r7
 8102238:	bd80      	pop	{r7, pc}

0810223a <initAccel>:
 * @brief initialises accelerometer
 * @param imu ponter to imu struct
 * @returns nothing
 */
void initAccel(LSM9DS1Handle* imu)
{
 810223a:	b580      	push	{r7, lr}
 810223c:	b084      	sub	sp, #16
 810223e:	af00      	add	r7, sp, #0
 8102240:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 8102242:	2300      	movs	r3, #0
 8102244:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	7ddb      	ldrb	r3, [r3, #23]
 810224a:	2b00      	cmp	r3, #0
 810224c:	d003      	beq.n	8102256 <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 810224e:	7bfb      	ldrb	r3, [r7, #15]
 8102250:	f043 0320 	orr.w	r3, r3, #32
 8102254:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	7d9b      	ldrb	r3, [r3, #22]
 810225a:	2b00      	cmp	r3, #0
 810225c:	d003      	beq.n	8102266 <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 810225e:	7bfb      	ldrb	r3, [r7, #15]
 8102260:	f043 0310 	orr.w	r3, r3, #16
 8102264:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	7d5b      	ldrb	r3, [r3, #21]
 810226a:	2b00      	cmp	r3, #0
 810226c:	d003      	beq.n	8102276 <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 810226e:	7bfb      	ldrb	r3, [r7, #15]
 8102270:	f043 0308 	orr.w	r3, r3, #8
 8102274:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 8102276:	7bfb      	ldrb	r3, [r7, #15]
 8102278:	461a      	mov	r2, r3
 810227a:	211f      	movs	r1, #31
 810227c:	206b      	movs	r0, #107	; 0x6b
 810227e:	f000 fb57 	bl	8102930 <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 8102282:	2300      	movs	r3, #0
 8102284:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	7c9b      	ldrb	r3, [r3, #18]
 810228a:	2b00      	cmp	r3, #0
 810228c:	d008      	beq.n	81022a0 <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	7d1b      	ldrb	r3, [r3, #20]
 8102292:	015b      	lsls	r3, r3, #5
 8102294:	b25a      	sxtb	r2, r3
 8102296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810229a:	4313      	orrs	r3, r2
 810229c:	b25b      	sxtb	r3, r3
 810229e:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	7cdb      	ldrb	r3, [r3, #19]
 81022a4:	2b10      	cmp	r3, #16
 81022a6:	d010      	beq.n	81022ca <initAccel+0x90>
 81022a8:	2b10      	cmp	r3, #16
 81022aa:	dc13      	bgt.n	81022d4 <initAccel+0x9a>
 81022ac:	2b04      	cmp	r3, #4
 81022ae:	d002      	beq.n	81022b6 <initAccel+0x7c>
 81022b0:	2b08      	cmp	r3, #8
 81022b2:	d005      	beq.n	81022c0 <initAccel+0x86>
 81022b4:	e00e      	b.n	81022d4 <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 81022b6:	7bfb      	ldrb	r3, [r7, #15]
 81022b8:	f043 0310 	orr.w	r3, r3, #16
 81022bc:	73fb      	strb	r3, [r7, #15]
      break;
 81022be:	e009      	b.n	81022d4 <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 81022c0:	7bfb      	ldrb	r3, [r7, #15]
 81022c2:	f043 0318 	orr.w	r3, r3, #24
 81022c6:	73fb      	strb	r3, [r7, #15]
      break;
 81022c8:	e004      	b.n	81022d4 <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 81022ca:	7bfb      	ldrb	r3, [r7, #15]
 81022cc:	f043 0308 	orr.w	r3, r3, #8
 81022d0:	73fb      	strb	r3, [r7, #15]
      break;
 81022d2:	bf00      	nop
  }

  if(imu->accel_settings.bandwidth >= 0)
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 81022da:	2b00      	cmp	r3, #0
 81022dc:	db0e      	blt.n	81022fc <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 81022de:	7bfb      	ldrb	r3, [r7, #15]
 81022e0:	f043 0304 	orr.w	r3, r3, #4
 81022e4:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 81022ec:	f003 0303 	and.w	r3, r3, #3
 81022f0:	b25a      	sxtb	r2, r3
 81022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022f6:	4313      	orrs	r3, r2
 81022f8:	b25b      	sxtb	r3, r3
 81022fa:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 81022fc:	7bfb      	ldrb	r3, [r7, #15]
 81022fe:	461a      	mov	r2, r3
 8102300:	2120      	movs	r1, #32
 8102302:	206b      	movs	r0, #107	; 0x6b
 8102304:	f000 fb14 	bl	8102930 <WriteByte>
  // reset tempValue
  tempRegValue = 0;
 8102308:	2300      	movs	r3, #0
 810230a:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	7e5b      	ldrb	r3, [r3, #25]
 8102310:	2b01      	cmp	r3, #1
 8102312:	d10f      	bne.n	8102334 <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 8102314:	7bfb      	ldrb	r3, [r7, #15]
 8102316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810231a:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	7e9b      	ldrb	r3, [r3, #26]
 8102320:	015b      	lsls	r3, r3, #5
 8102322:	b25b      	sxtb	r3, r3
 8102324:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102328:	b25a      	sxtb	r2, r3
 810232a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810232e:	4313      	orrs	r3, r2
 8102330:	b25b      	sxtb	r3, r3
 8102332:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 8102334:	7bfb      	ldrb	r3, [r7, #15]
 8102336:	461a      	mov	r2, r3
 8102338:	2121      	movs	r1, #33	; 0x21
 810233a:	206b      	movs	r0, #107	; 0x6b
 810233c:	f000 faf8 	bl	8102930 <WriteByte>
}
 8102340:	bf00      	nop
 8102342:	3710      	adds	r7, #16
 8102344:	46bd      	mov	sp, r7
 8102346:	bd80      	pop	{r7, pc}

08102348 <initMag>:
 * @brief initialises magnetometer
 * @param imu ponter to imu struct
 * @returns nothing
 */
void initMag(LSM9DS1Handle* imu)
{
 8102348:	b580      	push	{r7, lr}
 810234a:	b084      	sub	sp, #16
 810234c:	af00      	add	r7, sp, #0
 810234e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 8102350:	2300      	movs	r3, #0
 8102352:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	7f9b      	ldrb	r3, [r3, #30]
 8102358:	2b01      	cmp	r3, #1
 810235a:	d103      	bne.n	8102364 <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 810235c:	7bfb      	ldrb	r3, [r7, #15]
 810235e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8102362:	73fb      	strb	r3, [r7, #15]
  }
  // Make operating mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	7fdb      	ldrb	r3, [r3, #31]
 8102368:	015b      	lsls	r3, r3, #5
 810236a:	b25b      	sxtb	r3, r3
 810236c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102370:	b25a      	sxtb	r2, r3
 8102372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102376:	4313      	orrs	r3, r2
 8102378:	b25b      	sxtb	r3, r3
 810237a:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	7f5b      	ldrb	r3, [r3, #29]
 8102380:	009b      	lsls	r3, r3, #2
 8102382:	b25b      	sxtb	r3, r3
 8102384:	f003 031c 	and.w	r3, r3, #28
 8102388:	b25a      	sxtb	r2, r3
 810238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810238e:	4313      	orrs	r3, r2
 8102390:	b25b      	sxtb	r3, r3
 8102392:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 8102394:	7bfb      	ldrb	r3, [r7, #15]
 8102396:	461a      	mov	r2, r3
 8102398:	2120      	movs	r1, #32
 810239a:	201e      	movs	r0, #30
 810239c:	f000 fac8 	bl	8102930 <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 81023a0:	2300      	movs	r3, #0
 81023a2:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	7f1b      	ldrb	r3, [r3, #28]
 81023a8:	2b10      	cmp	r3, #16
 81023aa:	d010      	beq.n	81023ce <initMag+0x86>
 81023ac:	2b10      	cmp	r3, #16
 81023ae:	dc13      	bgt.n	81023d8 <initMag+0x90>
 81023b0:	2b08      	cmp	r3, #8
 81023b2:	d002      	beq.n	81023ba <initMag+0x72>
 81023b4:	2b0c      	cmp	r3, #12
 81023b6:	d005      	beq.n	81023c4 <initMag+0x7c>
 81023b8:	e00e      	b.n	81023d8 <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 81023ba:	7bfb      	ldrb	r3, [r7, #15]
 81023bc:	f043 0320 	orr.w	r3, r3, #32
 81023c0:	73fb      	strb	r3, [r7, #15]
      break;
 81023c2:	e009      	b.n	81023d8 <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 81023c4:	7bfb      	ldrb	r3, [r7, #15]
 81023c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81023ca:	73fb      	strb	r3, [r7, #15]
      break;
 81023cc:	e004      	b.n	81023d8 <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 81023ce:	7bfb      	ldrb	r3, [r7, #15]
 81023d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 81023d4:	73fb      	strb	r3, [r7, #15]
      break;
 81023d6:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 81023d8:	7bfb      	ldrb	r3, [r7, #15]
 81023da:	461a      	mov	r2, r3
 81023dc:	2121      	movs	r1, #33	; 0x21
 81023de:	201e      	movs	r0, #30
 81023e0:	f000 faa6 	bl	8102930 <WriteByte>

   tempRegValue = 0;
 81023e4:	2300      	movs	r3, #0
 81023e6:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81023ee:	2b01      	cmp	r3, #1
 81023f0:	d103      	bne.n	81023fa <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 81023f2:	7bfb      	ldrb	r3, [r7, #15]
 81023f4:	f043 0320 	orr.w	r3, r3, #32
 81023f8:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8102400:	b25b      	sxtb	r3, r3
 8102402:	f003 0303 	and.w	r3, r3, #3
 8102406:	b25a      	sxtb	r2, r3
 8102408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810240c:	4313      	orrs	r3, r2
 810240e:	b25b      	sxtb	r3, r3
 8102410:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 8102412:	7bfb      	ldrb	r3, [r7, #15]
 8102414:	461a      	mov	r2, r3
 8102416:	2122      	movs	r1, #34	; 0x22
 8102418:	201e      	movs	r0, #30
 810241a:	f000 fa89 	bl	8102930 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 810241e:	2300      	movs	r3, #0
 8102420:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102428:	009b      	lsls	r3, r3, #2
 810242a:	b25b      	sxtb	r3, r3
 810242c:	f003 030c 	and.w	r3, r3, #12
 8102430:	b25a      	sxtb	r2, r3
 8102432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102436:	4313      	orrs	r3, r2
 8102438:	b25b      	sxtb	r3, r3
 810243a:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 810243c:	7bfb      	ldrb	r3, [r7, #15]
 810243e:	461a      	mov	r2, r3
 8102440:	2123      	movs	r1, #35	; 0x23
 8102442:	201e      	movs	r0, #30
 8102444:	f000 fa74 	bl	8102930 <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 8102448:	2300      	movs	r3, #0
 810244a:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 810244c:	7bfb      	ldrb	r3, [r7, #15]
 810244e:	461a      	mov	r2, r3
 8102450:	2124      	movs	r1, #36	; 0x24
 8102452:	201e      	movs	r0, #30
 8102454:	f000 fa6c 	bl	8102930 <WriteByte>

}
 8102458:	bf00      	nop
 810245a:	3710      	adds	r7, #16
 810245c:	46bd      	mov	sp, r7
 810245e:	bd80      	pop	{r7, pc}

08102460 <clampScales>:
 * sensor to max values
 * @param pointer to imu struct
 * @returns nothing
 */
void clampScales(LSM9DS1Handle* imu)
{
 8102460:	b480      	push	{r7}
 8102462:	b083      	sub	sp, #12
 8102464:	af00      	add	r7, sp, #0
 8102466:	6078      	str	r0, [r7, #4]
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	885b      	ldrh	r3, [r3, #2]
 810246c:	2bf5      	cmp	r3, #245	; 0xf5
 810246e:	d00c      	beq.n	810248a <clampScales+0x2a>
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	885b      	ldrh	r3, [r3, #2]
 8102474:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102478:	d007      	beq.n	810248a <clampScales+0x2a>
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	885b      	ldrh	r3, [r3, #2]
 810247e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102482:	d002      	beq.n	810248a <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	22f5      	movs	r2, #245	; 0xf5
 8102488:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	7cdb      	ldrb	r3, [r3, #19]
 810248e:	2b02      	cmp	r3, #2
 8102490:	d00e      	beq.n	81024b0 <clampScales+0x50>
 8102492:	687b      	ldr	r3, [r7, #4]
 8102494:	7cdb      	ldrb	r3, [r3, #19]
 8102496:	2b04      	cmp	r3, #4
 8102498:	d00a      	beq.n	81024b0 <clampScales+0x50>
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	7cdb      	ldrb	r3, [r3, #19]
 810249e:	2b08      	cmp	r3, #8
 81024a0:	d006      	beq.n	81024b0 <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	7cdb      	ldrb	r3, [r3, #19]
 81024a6:	2b10      	cmp	r3, #16
 81024a8:	d002      	beq.n	81024b0 <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	22f5      	movs	r2, #245	; 0xf5
 81024ae:	74da      	strb	r2, [r3, #19]
  }

  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	7f1b      	ldrb	r3, [r3, #28]
 81024b4:	2b04      	cmp	r3, #4
 81024b6:	d00e      	beq.n	81024d6 <clampScales+0x76>
 81024b8:	687b      	ldr	r3, [r7, #4]
 81024ba:	7f1b      	ldrb	r3, [r3, #28]
 81024bc:	2b08      	cmp	r3, #8
 81024be:	d00a      	beq.n	81024d6 <clampScales+0x76>
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	7f1b      	ldrb	r3, [r3, #28]
 81024c4:	2b0c      	cmp	r3, #12
 81024c6:	d006      	beq.n	81024d6 <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 81024cc:	2b10      	cmp	r3, #16
 81024ce:	d002      	beq.n	81024d6 <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	2204      	movs	r2, #4
 81024d4:	771a      	strb	r2, [r3, #28]
  }
}
 81024d6:	bf00      	nop
 81024d8:	370c      	adds	r7, #12
 81024da:	46bd      	mov	sp, r7
 81024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e0:	4770      	bx	lr
	...

081024e4 <calcGyro>:
 * @param gyro raw gyro value read from
 * register
 * @returns angular rate in dps
 */
float calcGyro(float gyro)
{
 81024e4:	b480      	push	{r7}
 81024e6:	b083      	sub	sp, #12
 81024e8:	af00      	add	r7, sp, #0
 81024ea:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 81024ee:	4b07      	ldr	r3, [pc, #28]	; (810250c <calcGyro+0x28>)
 81024f0:	ed93 7a00 	vldr	s14, [r3]
 81024f4:	edd7 7a01 	vldr	s15, [r7, #4]
 81024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8102500:	370c      	adds	r7, #12
 8102502:	46bd      	mov	sp, r7
 8102504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102508:	4770      	bx	lr
 810250a:	bf00      	nop
 810250c:	100002dc 	.word	0x100002dc

08102510 <calcMag>:
 * @param mag raw mag value read from
 * register
 * @returns magnetic field strength in gauss
 */
float calcMag(float mag)
{
 8102510:	b480      	push	{r7}
 8102512:	b083      	sub	sp, #12
 8102514:	af00      	add	r7, sp, #0
 8102516:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 810251a:	4b07      	ldr	r3, [pc, #28]	; (8102538 <calcMag+0x28>)
 810251c:	ed93 7a00 	vldr	s14, [r3]
 8102520:	edd7 7a01 	vldr	s15, [r7, #4]
 8102524:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102528:	eeb0 0a67 	vmov.f32	s0, s15
 810252c:	370c      	adds	r7, #12
 810252e:	46bd      	mov	sp, r7
 8102530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102534:	4770      	bx	lr
 8102536:	bf00      	nop
 8102538:	100002d8 	.word	0x100002d8

0810253c <calcAccel>:
 * @param gyro raw acc value read from
 * register
 * @returns linear acceleration in gs
 */
float calcAccel(float accel)
{
 810253c:	b480      	push	{r7}
 810253e:	b083      	sub	sp, #12
 8102540:	af00      	add	r7, sp, #0
 8102542:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 8102546:	4b07      	ldr	r3, [pc, #28]	; (8102564 <calcAccel+0x28>)
 8102548:	ed93 7a00 	vldr	s14, [r3]
 810254c:	edd7 7a01 	vldr	s15, [r7, #4]
 8102550:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102554:	eeb0 0a67 	vmov.f32	s0, s15
 8102558:	370c      	adds	r7, #12
 810255a:	46bd      	mov	sp, r7
 810255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102560:	4770      	bx	lr
 8102562:	bf00      	nop
 8102564:	100002d4 	.word	0x100002d4

08102568 <readGyro>:
* data in dps
* @param imu struct handle
* @returns nothing
*/
void readGyro(LSM9DS1Handle* imu)
{
 8102568:	b580      	push	{r7, lr}
 810256a:	b086      	sub	sp, #24
 810256c:	af00      	add	r7, sp, #0
 810256e:	6078      	str	r0, [r7, #4]
  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 8102570:	f107 020c 	add.w	r2, r7, #12
 8102574:	2306      	movs	r3, #6
 8102576:	2118      	movs	r1, #24
 8102578:	206b      	movs	r0, #107	; 0x6b
 810257a:	f000 f9af 	bl	81028dc <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 810257e:	7b7b      	ldrb	r3, [r7, #13]
 8102580:	021b      	lsls	r3, r3, #8
 8102582:	b21a      	sxth	r2, r3
 8102584:	7b3b      	ldrb	r3, [r7, #12]
 8102586:	b21b      	sxth	r3, r3
 8102588:	4313      	orrs	r3, r2
 810258a:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 810258c:	7bfb      	ldrb	r3, [r7, #15]
 810258e:	021b      	lsls	r3, r3, #8
 8102590:	b21a      	sxth	r2, r3
 8102592:	7bbb      	ldrb	r3, [r7, #14]
 8102594:	b21b      	sxth	r3, r3
 8102596:	4313      	orrs	r3, r2
 8102598:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 810259a:	7c7b      	ldrb	r3, [r7, #17]
 810259c:	021b      	lsls	r3, r3, #8
 810259e:	b21a      	sxth	r2, r3
 81025a0:	7c3b      	ldrb	r3, [r7, #16]
 81025a2:	b21b      	sxth	r3, r3
 81025a4:	4313      	orrs	r3, r2
 81025a6:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 81025a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81025ac:	ee07 3a90 	vmov	s15, r3
 81025b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025b4:	eeb0 0a67 	vmov.f32	s0, s15
 81025b8:	f7ff ff94 	bl	81024e4 <calcGyro>
 81025bc:	eef0 7a40 	vmov.f32	s15, s0
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 81025c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81025ca:	ee07 3a90 	vmov	s15, r3
 81025ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025d2:	eeb0 0a67 	vmov.f32	s0, s15
 81025d6:	f7ff ff85 	bl	81024e4 <calcGyro>
 81025da:	eef0 7a40 	vmov.f32	s15, s0
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 81025e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81025e8:	ee07 3a90 	vmov	s15, r3
 81025ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025f0:	eeb0 0a67 	vmov.f32	s0, s15
 81025f4:	f7ff ff76 	bl	81024e4 <calcGyro>
 81025f8:	eef0 7a40 	vmov.f32	s15, s0
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 8102602:	bf00      	nop
 8102604:	3718      	adds	r7, #24
 8102606:	46bd      	mov	sp, r7
 8102608:	bd80      	pop	{r7, pc}

0810260a <readMag>:
///@brief returns the magnetometer
/// data in Gauss
///@param imu struct handle
///@returns nothing
void readMag(LSM9DS1Handle* imu)
{
 810260a:	b580      	push	{r7, lr}
 810260c:	b086      	sub	sp, #24
 810260e:	af00      	add	r7, sp, #0
 8102610:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 8102612:	f107 020c 	add.w	r2, r7, #12
 8102616:	2306      	movs	r3, #6
 8102618:	2128      	movs	r1, #40	; 0x28
 810261a:	201e      	movs	r0, #30
 810261c:	f000 f95e 	bl	81028dc <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 8102620:	7b7b      	ldrb	r3, [r7, #13]
 8102622:	021b      	lsls	r3, r3, #8
 8102624:	b21a      	sxth	r2, r3
 8102626:	7b3b      	ldrb	r3, [r7, #12]
 8102628:	b21b      	sxth	r3, r3
 810262a:	4313      	orrs	r3, r2
 810262c:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 810262e:	7bfb      	ldrb	r3, [r7, #15]
 8102630:	021b      	lsls	r3, r3, #8
 8102632:	b21a      	sxth	r2, r3
 8102634:	7bbb      	ldrb	r3, [r7, #14]
 8102636:	b21b      	sxth	r3, r3
 8102638:	4313      	orrs	r3, r2
 810263a:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 810263c:	7c7b      	ldrb	r3, [r7, #17]
 810263e:	021b      	lsls	r3, r3, #8
 8102640:	b21a      	sxth	r2, r3
 8102642:	7c3b      	ldrb	r3, [r7, #16]
 8102644:	b21b      	sxth	r3, r3
 8102646:	4313      	orrs	r3, r2
 8102648:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 810264a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810264e:	ee07 3a90 	vmov	s15, r3
 8102652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102656:	eeb0 0a67 	vmov.f32	s0, s15
 810265a:	f7ff ff59 	bl	8102510 <calcMag>
 810265e:	eef0 7a40 	vmov.f32	s15, s0
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 8102668:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 810266c:	ee07 3a90 	vmov	s15, r3
 8102670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102674:	eeb0 0a67 	vmov.f32	s0, s15
 8102678:	f7ff ff4a 	bl	8102510 <calcMag>
 810267c:	eef0 7a40 	vmov.f32	s15, s0
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 8102686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810268a:	ee07 3a90 	vmov	s15, r3
 810268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102692:	eeb0 0a67 	vmov.f32	s0, s15
 8102696:	f7ff ff3b 	bl	8102510 <calcMag>
 810269a:	eef0 7a40 	vmov.f32	s15, s0
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 81026a4:	bf00      	nop
 81026a6:	3718      	adds	r7, #24
 81026a8:	46bd      	mov	sp, r7
 81026aa:	bd80      	pop	{r7, pc}

081026ac <readAccel>:
///@brief returns the
/// accelerometer data in g's
///@param imu struct handle
///@returns nothing
void readAccel(LSM9DS1Handle* imu)
{
 81026ac:	b580      	push	{r7, lr}
 81026ae:	b086      	sub	sp, #24
 81026b0:	af00      	add	r7, sp, #0
 81026b2:	6078      	str	r0, [r7, #4]
  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 81026b4:	f107 020c 	add.w	r2, r7, #12
 81026b8:	2306      	movs	r3, #6
 81026ba:	2128      	movs	r1, #40	; 0x28
 81026bc:	206b      	movs	r0, #107	; 0x6b
 81026be:	f000 f90d 	bl	81028dc <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 81026c2:	7b7b      	ldrb	r3, [r7, #13]
 81026c4:	021b      	lsls	r3, r3, #8
 81026c6:	b21a      	sxth	r2, r3
 81026c8:	7b3b      	ldrb	r3, [r7, #12]
 81026ca:	b21b      	sxth	r3, r3
 81026cc:	4313      	orrs	r3, r2
 81026ce:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 81026d0:	7bfb      	ldrb	r3, [r7, #15]
 81026d2:	021b      	lsls	r3, r3, #8
 81026d4:	b21a      	sxth	r2, r3
 81026d6:	7bbb      	ldrb	r3, [r7, #14]
 81026d8:	b21b      	sxth	r3, r3
 81026da:	4313      	orrs	r3, r2
 81026dc:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 81026de:	7c7b      	ldrb	r3, [r7, #17]
 81026e0:	021b      	lsls	r3, r3, #8
 81026e2:	b21a      	sxth	r2, r3
 81026e4:	7c3b      	ldrb	r3, [r7, #16]
 81026e6:	b21b      	sxth	r3, r3
 81026e8:	4313      	orrs	r3, r2
 81026ea:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 81026ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81026f0:	ee07 3a90 	vmov	s15, r3
 81026f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81026f8:	eeb0 0a67 	vmov.f32	s0, s15
 81026fc:	f7ff ff1e 	bl	810253c <calcAccel>
 8102700:	eef0 7a40 	vmov.f32	s15, s0
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 810270a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 810270e:	ee07 3a90 	vmov	s15, r3
 8102712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102716:	eeb0 0a67 	vmov.f32	s0, s15
 810271a:	f7ff ff0f 	bl	810253c <calcAccel>
 810271e:	eef0 7a40 	vmov.f32	s15, s0
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 8102728:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810272c:	ee07 3a90 	vmov	s15, r3
 8102730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102734:	eeb0 0a67 	vmov.f32	s0, s15
 8102738:	f7ff ff00 	bl	810253c <calcAccel>
 810273c:	eef0 7a40 	vmov.f32	s15, s0
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

}
 8102746:	bf00      	nop
 8102748:	3718      	adds	r7, #24
 810274a:	46bd      	mov	sp, r7
 810274c:	bd80      	pop	{r7, pc}
	...

08102750 <calcGyroResolution>:
 * @brief Sets Gyroscope resolution
 * @param imu struct handle
 * @return nothing
 */
void calcGyroResolution(LSM9DS1Handle* imu)
{
 8102750:	b480      	push	{r7}
 8102752:	b083      	sub	sp, #12
 8102754:	af00      	add	r7, sp, #0
 8102756:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	885b      	ldrh	r3, [r3, #2]
 810275c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102760:	d010      	beq.n	8102784 <calcGyroResolution+0x34>
 8102762:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102766:	dc11      	bgt.n	810278c <calcGyroResolution+0x3c>
 8102768:	2bf5      	cmp	r3, #245	; 0xf5
 810276a:	d003      	beq.n	8102774 <calcGyroResolution+0x24>
 810276c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102770:	d004      	beq.n	810277c <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 8102772:	e00b      	b.n	810278c <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 8102774:	4b09      	ldr	r3, [pc, #36]	; (810279c <calcGyroResolution+0x4c>)
 8102776:	4a0a      	ldr	r2, [pc, #40]	; (81027a0 <calcGyroResolution+0x50>)
 8102778:	601a      	str	r2, [r3, #0]
      break;
 810277a:	e008      	b.n	810278e <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 810277c:	4b07      	ldr	r3, [pc, #28]	; (810279c <calcGyroResolution+0x4c>)
 810277e:	4a09      	ldr	r2, [pc, #36]	; (81027a4 <calcGyroResolution+0x54>)
 8102780:	601a      	str	r2, [r3, #0]
      break;
 8102782:	e004      	b.n	810278e <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 8102784:	4b05      	ldr	r3, [pc, #20]	; (810279c <calcGyroResolution+0x4c>)
 8102786:	4a08      	ldr	r2, [pc, #32]	; (81027a8 <calcGyroResolution+0x58>)
 8102788:	601a      	str	r2, [r3, #0]
      break;
 810278a:	e000      	b.n	810278e <calcGyroResolution+0x3e>
      break;
 810278c:	bf00      	nop
  }
}
 810278e:	bf00      	nop
 8102790:	370c      	adds	r7, #12
 8102792:	46bd      	mov	sp, r7
 8102794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102798:	4770      	bx	lr
 810279a:	bf00      	nop
 810279c:	100002dc 	.word	0x100002dc
 81027a0:	3c0f5c29 	.word	0x3c0f5c29
 81027a4:	3c8f5c29 	.word	0x3c8f5c29
 81027a8:	3d8f5c29 	.word	0x3d8f5c29

081027ac <calcAccResoltuion>:
 * @brief Sets Accelerometer resolution
 * @param imu struct handle
 * @return nothing
 */
void calcAccResoltuion(LSM9DS1Handle* imu)
{
 81027ac:	b480      	push	{r7}
 81027ae:	b083      	sub	sp, #12
 81027b0:	af00      	add	r7, sp, #0
 81027b2:	6078      	str	r0, [r7, #4]
  switch(imu->accel_settings.scale)
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	7cdb      	ldrb	r3, [r3, #19]
 81027b8:	3b02      	subs	r3, #2
 81027ba:	2b0e      	cmp	r3, #14
 81027bc:	d830      	bhi.n	8102820 <calcAccResoltuion+0x74>
 81027be:	a201      	add	r2, pc, #4	; (adr r2, 81027c4 <calcAccResoltuion+0x18>)
 81027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027c4:	08102801 	.word	0x08102801
 81027c8:	08102821 	.word	0x08102821
 81027cc:	08102809 	.word	0x08102809
 81027d0:	08102821 	.word	0x08102821
 81027d4:	08102821 	.word	0x08102821
 81027d8:	08102821 	.word	0x08102821
 81027dc:	08102811 	.word	0x08102811
 81027e0:	08102821 	.word	0x08102821
 81027e4:	08102821 	.word	0x08102821
 81027e8:	08102821 	.word	0x08102821
 81027ec:	08102821 	.word	0x08102821
 81027f0:	08102821 	.word	0x08102821
 81027f4:	08102821 	.word	0x08102821
 81027f8:	08102821 	.word	0x08102821
 81027fc:	08102819 	.word	0x08102819
  {
    case 2:
      acc_res = ACC_FS_2G;
 8102800:	4b0b      	ldr	r3, [pc, #44]	; (8102830 <calcAccResoltuion+0x84>)
 8102802:	4a0c      	ldr	r2, [pc, #48]	; (8102834 <calcAccResoltuion+0x88>)
 8102804:	601a      	str	r2, [r3, #0]
    break;
 8102806:	e00c      	b.n	8102822 <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 8102808:	4b09      	ldr	r3, [pc, #36]	; (8102830 <calcAccResoltuion+0x84>)
 810280a:	4a0b      	ldr	r2, [pc, #44]	; (8102838 <calcAccResoltuion+0x8c>)
 810280c:	601a      	str	r2, [r3, #0]
     break;
 810280e:	e008      	b.n	8102822 <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 8102810:	4b07      	ldr	r3, [pc, #28]	; (8102830 <calcAccResoltuion+0x84>)
 8102812:	4a0a      	ldr	r2, [pc, #40]	; (810283c <calcAccResoltuion+0x90>)
 8102814:	601a      	str	r2, [r3, #0]
      break;
 8102816:	e004      	b.n	8102822 <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 8102818:	4b05      	ldr	r3, [pc, #20]	; (8102830 <calcAccResoltuion+0x84>)
 810281a:	4a09      	ldr	r2, [pc, #36]	; (8102840 <calcAccResoltuion+0x94>)
 810281c:	601a      	str	r2, [r3, #0]
      break;
 810281e:	e000      	b.n	8102822 <calcAccResoltuion+0x76>

    default:
      break;
 8102820:	bf00      	nop
  }
}
 8102822:	bf00      	nop
 8102824:	370c      	adds	r7, #12
 8102826:	46bd      	mov	sp, r7
 8102828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810282c:	4770      	bx	lr
 810282e:	bf00      	nop
 8102830:	100002d4 	.word	0x100002d4
 8102834:	387fda40 	.word	0x387fda40
 8102838:	38ffda40 	.word	0x38ffda40
 810283c:	397fda40 	.word	0x397fda40
 8102840:	3a3fe3b0 	.word	0x3a3fe3b0

08102844 <calcMagResolution>:
 * @brief Sets Magnetometer resolution
 * @param imu struct handle
 * @return nothing
 */
void calcMagResolution(LSM9DS1Handle* imu)
{
 8102844:	b480      	push	{r7}
 8102846:	b083      	sub	sp, #12
 8102848:	af00      	add	r7, sp, #0
 810284a:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	7f1b      	ldrb	r3, [r3, #28]
 8102850:	3b02      	subs	r3, #2
 8102852:	2b0e      	cmp	r3, #14
 8102854:	d830      	bhi.n	81028b8 <calcMagResolution+0x74>
 8102856:	a201      	add	r2, pc, #4	; (adr r2, 810285c <calcMagResolution+0x18>)
 8102858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810285c:	08102899 	.word	0x08102899
 8102860:	081028b9 	.word	0x081028b9
 8102864:	081028a1 	.word	0x081028a1
 8102868:	081028b9 	.word	0x081028b9
 810286c:	081028b9 	.word	0x081028b9
 8102870:	081028b9 	.word	0x081028b9
 8102874:	081028a9 	.word	0x081028a9
 8102878:	081028b9 	.word	0x081028b9
 810287c:	081028b9 	.word	0x081028b9
 8102880:	081028b9 	.word	0x081028b9
 8102884:	081028b9 	.word	0x081028b9
 8102888:	081028b9 	.word	0x081028b9
 810288c:	081028b9 	.word	0x081028b9
 8102890:	081028b9 	.word	0x081028b9
 8102894:	081028b1 	.word	0x081028b1
  {
    case 2:
      mag_res = MAG_FS_4G;
 8102898:	4b0b      	ldr	r3, [pc, #44]	; (81028c8 <calcMagResolution+0x84>)
 810289a:	4a0c      	ldr	r2, [pc, #48]	; (81028cc <calcMagResolution+0x88>)
 810289c:	601a      	str	r2, [r3, #0]
    break;
 810289e:	e00c      	b.n	81028ba <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 81028a0:	4b09      	ldr	r3, [pc, #36]	; (81028c8 <calcMagResolution+0x84>)
 81028a2:	4a0b      	ldr	r2, [pc, #44]	; (81028d0 <calcMagResolution+0x8c>)
 81028a4:	601a      	str	r2, [r3, #0]
     break;
 81028a6:	e008      	b.n	81028ba <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 81028a8:	4b07      	ldr	r3, [pc, #28]	; (81028c8 <calcMagResolution+0x84>)
 81028aa:	4a0a      	ldr	r2, [pc, #40]	; (81028d4 <calcMagResolution+0x90>)
 81028ac:	601a      	str	r2, [r3, #0]
      break;
 81028ae:	e004      	b.n	81028ba <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 81028b0:	4b05      	ldr	r3, [pc, #20]	; (81028c8 <calcMagResolution+0x84>)
 81028b2:	4a09      	ldr	r2, [pc, #36]	; (81028d8 <calcMagResolution+0x94>)
 81028b4:	601a      	str	r2, [r3, #0]
      break;
 81028b6:	e000      	b.n	81028ba <calcMagResolution+0x76>

    default:
      break;
 81028b8:	bf00      	nop
  }
}
 81028ba:	bf00      	nop
 81028bc:	370c      	adds	r7, #12
 81028be:	46bd      	mov	sp, r7
 81028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028c4:	4770      	bx	lr
 81028c6:	bf00      	nop
 81028c8:	100002d8 	.word	0x100002d8
 81028cc:	3912ccf7 	.word	0x3912ccf7
 81028d0:	39980b24 	.word	0x39980b24
 81028d4:	39e1719f 	.word	0x39e1719f
 81028d8:	3a180b24 	.word	0x3a180b24

081028dc <I2CReadBytes>:
 * @param buffer stores data
 * @param number of bytes to read
 * @returns number of bytes read
 */
uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 81028dc:	b580      	push	{r7, lr}
 81028de:	b088      	sub	sp, #32
 81028e0:	af04      	add	r7, sp, #16
 81028e2:	603a      	str	r2, [r7, #0]
 81028e4:	461a      	mov	r2, r3
 81028e6:	4603      	mov	r3, r0
 81028e8:	71fb      	strb	r3, [r7, #7]
 81028ea:	460b      	mov	r3, r1
 81028ec:	71bb      	strb	r3, [r7, #6]
 81028ee:	4613      	mov	r3, r2
 81028f0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 81028f2:	79fb      	ldrb	r3, [r7, #7]
 81028f4:	b29b      	uxth	r3, r3
 81028f6:	005b      	lsls	r3, r3, #1
 81028f8:	b299      	uxth	r1, r3
 81028fa:	79bb      	ldrb	r3, [r7, #6]
 81028fc:	b29a      	uxth	r2, r3
 81028fe:	797b      	ldrb	r3, [r7, #5]
 8102900:	b29b      	uxth	r3, r3
 8102902:	2064      	movs	r0, #100	; 0x64
 8102904:	9002      	str	r0, [sp, #8]
 8102906:	9301      	str	r3, [sp, #4]
 8102908:	683b      	ldr	r3, [r7, #0]
 810290a:	9300      	str	r3, [sp, #0]
 810290c:	2301      	movs	r3, #1
 810290e:	4807      	ldr	r0, [pc, #28]	; (810292c <I2CReadBytes+0x50>)
 8102910:	f004 fcf4 	bl	81072fc <HAL_I2C_Mem_Read>
 8102914:	4603      	mov	r3, r0
 8102916:	73fb      	strb	r3, [r7, #15]
  if(status !=HAL_OK)
 8102918:	7bfb      	ldrb	r3, [r7, #15]
 810291a:	2b00      	cmp	r3, #0
 810291c:	d001      	beq.n	8102922 <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 810291e:	2301      	movs	r3, #1
 8102920:	e000      	b.n	8102924 <I2CReadBytes+0x48>
  }
  return numBytes;
 8102922:	797b      	ldrb	r3, [r7, #5]
}
 8102924:	4618      	mov	r0, r3
 8102926:	3710      	adds	r7, #16
 8102928:	46bd      	mov	sp, r7
 810292a:	bd80      	pop	{r7, pc}
 810292c:	10000210 	.word	0x10000210

08102930 <WriteByte>:
 * @param reg register to write data to
 * @param data data to write
 * @returns HAL_OK on success
 */
HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 8102930:	b580      	push	{r7, lr}
 8102932:	b088      	sub	sp, #32
 8102934:	af04      	add	r7, sp, #16
 8102936:	4603      	mov	r3, r0
 8102938:	71fb      	strb	r3, [r7, #7]
 810293a:	460b      	mov	r3, r1
 810293c:	71bb      	strb	r3, [r7, #6]
 810293e:	4613      	mov	r3, r2
 8102940:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 8102942:	79fb      	ldrb	r3, [r7, #7]
 8102944:	b29b      	uxth	r3, r3
 8102946:	005b      	lsls	r3, r3, #1
 8102948:	b299      	uxth	r1, r3
 810294a:	79bb      	ldrb	r3, [r7, #6]
 810294c:	b29a      	uxth	r2, r3
 810294e:	2364      	movs	r3, #100	; 0x64
 8102950:	9302      	str	r3, [sp, #8]
 8102952:	2301      	movs	r3, #1
 8102954:	9301      	str	r3, [sp, #4]
 8102956:	1d7b      	adds	r3, r7, #5
 8102958:	9300      	str	r3, [sp, #0]
 810295a:	2301      	movs	r3, #1
 810295c:	4807      	ldr	r0, [pc, #28]	; (810297c <WriteByte+0x4c>)
 810295e:	f004 fbb9 	bl	81070d4 <HAL_I2C_Mem_Write>
 8102962:	4603      	mov	r3, r0
 8102964:	73fb      	strb	r3, [r7, #15]
  if(status !=HAL_OK)
 8102966:	7bfb      	ldrb	r3, [r7, #15]
 8102968:	2b00      	cmp	r3, #0
 810296a:	d001      	beq.n	8102970 <WriteByte+0x40>
  {
    return HAL_ERROR;
 810296c:	2301      	movs	r3, #1
 810296e:	e000      	b.n	8102972 <WriteByte+0x42>
  }
  return HAL_OK;
 8102970:	2300      	movs	r3, #0
}
 8102972:	4618      	mov	r0, r3
 8102974:	3710      	adds	r7, #16
 8102976:	46bd      	mov	sp, r7
 8102978:	bd80      	pop	{r7, pc}
 810297a:	bf00      	nop
 810297c:	10000210 	.word	0x10000210

08102980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102980:	b580      	push	{r7, lr}
 8102982:	b082      	sub	sp, #8
 8102984:	af00      	add	r7, sp, #0
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102986:	4b21      	ldr	r3, [pc, #132]	; (8102a0c <main+0x8c>)
 8102988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810298c:	4a1f      	ldr	r2, [pc, #124]	; (8102a0c <main+0x8c>)
 810298e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102996:	4b1d      	ldr	r3, [pc, #116]	; (8102a0c <main+0x8c>)
 8102998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81029a0:	607b      	str	r3, [r7, #4]
 81029a2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81029a4:	2001      	movs	r0, #1
 81029a6:	f004 faf3 	bl	8106f90 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81029aa:	f005 ff51 	bl	8108850 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81029ae:	2201      	movs	r2, #1
 81029b0:	2102      	movs	r1, #2
 81029b2:	2000      	movs	r0, #0
 81029b4:	f005 fed2 	bl	810875c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81029b8:	4b15      	ldr	r3, [pc, #84]	; (8102a10 <main+0x90>)
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	091b      	lsrs	r3, r3, #4
 81029be:	f003 030f 	and.w	r3, r3, #15
 81029c2:	2b07      	cmp	r3, #7
 81029c4:	d108      	bne.n	81029d8 <main+0x58>
 81029c6:	4b13      	ldr	r3, [pc, #76]	; (8102a14 <main+0x94>)
 81029c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81029cc:	4a11      	ldr	r2, [pc, #68]	; (8102a14 <main+0x94>)
 81029ce:	f043 0301 	orr.w	r3, r3, #1
 81029d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81029d6:	e007      	b.n	81029e8 <main+0x68>
 81029d8:	4b0e      	ldr	r3, [pc, #56]	; (8102a14 <main+0x94>)
 81029da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81029de:	4a0d      	ldr	r2, [pc, #52]	; (8102a14 <main+0x94>)
 81029e0:	f043 0301 	orr.w	r3, r3, #1
 81029e4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81029e8:	f000 fd9a 	bl	8103520 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81029ec:	f7ff f91c 	bl	8101c28 <MX_GPIO_Init>
  MX_DMA_Init();
 81029f0:	f7ff f8ba 	bl	8101b68 <MX_DMA_Init>
  MX_SPI1_Init();
 81029f4:	f000 f946 	bl	8102c84 <MX_SPI1_Init>
  MX_I2C1_Init();
 81029f8:	f7ff f978 	bl	8101cec <MX_I2C1_Init>
  MX_USART3_UART_Init();
 81029fc:	f000 fc48 	bl	8103290 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
   ConfigSensors();
 8102a00:	f000 f91e 	bl	8102c40 <ConfigSensors>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    ReadSensors();
 8102a04:	f000 f84a 	bl	8102a9c <ReadSensors>
 8102a08:	e7fc      	b.n	8102a04 <main+0x84>
 8102a0a:	bf00      	nop
 8102a0c:	58024400 	.word	0x58024400
 8102a10:	e000ed00 	.word	0xe000ed00
 8102a14:	58026400 	.word	0x58026400

08102a18 <GpsTask>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void GpsTask(void)
{
 8102a18:	b580      	push	{r7, lr}
 8102a1a:	af00      	add	r7, sp, #0
     processGPS(&gps);
 8102a1c:	4803      	ldr	r0, [pc, #12]	; (8102a2c <GpsTask+0x14>)
 8102a1e:	f000 fb17 	bl	8103050 <processGPS>
     M4DataToM7(GPS_DATA_TYPE);
 8102a22:	2001      	movs	r0, #1
 8102a24:	f000 f848 	bl	8102ab8 <M4DataToM7>
}
 8102a28:	bf00      	nop
 8102a2a:	bd80      	pop	{r7, pc}
 8102a2c:	100002e0 	.word	0x100002e0

08102a30 <AccelTask>:
void AccelTask(void)
{
 8102a30:	b580      	push	{r7, lr}
 8102a32:	af00      	add	r7, sp, #0
    readAccel(&imu);
 8102a34:	4803      	ldr	r0, [pc, #12]	; (8102a44 <AccelTask+0x14>)
 8102a36:	f7ff fe39 	bl	81026ac <readAccel>
    M4DataToM7(ACC_DATA_TYPE);
 8102a3a:	2003      	movs	r0, #3
 8102a3c:	f000 f83c 	bl	8102ab8 <M4DataToM7>
}
 8102a40:	bf00      	nop
 8102a42:	bd80      	pop	{r7, pc}
 8102a44:	10000360 	.word	0x10000360

08102a48 <GyroTask>:
void GyroTask(void)
{
 8102a48:	b580      	push	{r7, lr}
 8102a4a:	af00      	add	r7, sp, #0
    readGyro(&imu);
 8102a4c:	4803      	ldr	r0, [pc, #12]	; (8102a5c <GyroTask+0x14>)
 8102a4e:	f7ff fd8b 	bl	8102568 <readGyro>
    M4DataToM7(GYRO_DATA_TYPE);
 8102a52:	2004      	movs	r0, #4
 8102a54:	f000 f830 	bl	8102ab8 <M4DataToM7>
}
 8102a58:	bf00      	nop
 8102a5a:	bd80      	pop	{r7, pc}
 8102a5c:	10000360 	.word	0x10000360

08102a60 <MagTask>:
void MagTask(void)
{
 8102a60:	b580      	push	{r7, lr}
 8102a62:	af00      	add	r7, sp, #0
    readMag(&imu);
 8102a64:	4803      	ldr	r0, [pc, #12]	; (8102a74 <MagTask+0x14>)
 8102a66:	f7ff fdd0 	bl	810260a <readMag>
    M4DataToM7(MAG_DATA_TYPE);
 8102a6a:	2002      	movs	r0, #2
 8102a6c:	f000 f824 	bl	8102ab8 <M4DataToM7>
}
 8102a70:	bf00      	nop
 8102a72:	bd80      	pop	{r7, pc}
 8102a74:	10000360 	.word	0x10000360

08102a78 <BaroTask>:

void BaroTask(void)
{
 8102a78:	b580      	push	{r7, lr}
 8102a7a:	af00      	add	r7, sp, #0
    ReadTemp(&baro);
 8102a7c:	4806      	ldr	r0, [pc, #24]	; (8102a98 <BaroTask+0x20>)
 8102a7e:	f7fe fccd 	bl	810141c <ReadTemp>
    ReadPressure(&baro);
 8102a82:	4805      	ldr	r0, [pc, #20]	; (8102a98 <BaroTask+0x20>)
 8102a84:	f7fe fd1a 	bl	81014bc <ReadPressure>
    ReadAltitude(&baro);
 8102a88:	4803      	ldr	r0, [pc, #12]	; (8102a98 <BaroTask+0x20>)
 8102a8a:	f7fe fef9 	bl	8101880 <ReadAltitude>

    M4DataToM7(BARO_DATA_TYPE);
 8102a8e:	2005      	movs	r0, #5
 8102a90:	f000 f812 	bl	8102ab8 <M4DataToM7>

}
 8102a94:	bf00      	nop
 8102a96:	bd80      	pop	{r7, pc}
 8102a98:	100003ac 	.word	0x100003ac

08102a9c <ReadSensors>:
  notif_rx = 1;
}


void ReadSensors(void)
{
 8102a9c:	b580      	push	{r7, lr}
 8102a9e:	af00      	add	r7, sp, #0
  GpsTask();
 8102aa0:	f7ff ffba 	bl	8102a18 <GpsTask>

  AccelTask();
 8102aa4:	f7ff ffc4 	bl	8102a30 <AccelTask>

  GyroTask();
 8102aa8:	f7ff ffce 	bl	8102a48 <GyroTask>

  MagTask();
 8102aac:	f7ff ffd8 	bl	8102a60 <MagTask>

  BaroTask();
 8102ab0:	f7ff ffe2 	bl	8102a78 <BaroTask>

}
 8102ab4:	bf00      	nop
 8102ab6:	bd80      	pop	{r7, pc}

08102ab8 <M4DataToM7>:
void M4DataToM7(uint8_t data_type)
{
 8102ab8:	b580      	push	{r7, lr}
 8102aba:	b082      	sub	sp, #8
 8102abc:	af00      	add	r7, sp, #0
 8102abe:	4603      	mov	r3, r0
 8102ac0:	71fb      	strb	r3, [r7, #7]

  switch (data_type)
 8102ac2:	79fb      	ldrb	r3, [r7, #7]
 8102ac4:	3b01      	subs	r3, #1
 8102ac6:	2b04      	cmp	r3, #4
 8102ac8:	f200 80a4 	bhi.w	8102c14 <M4DataToM7+0x15c>
 8102acc:	a201      	add	r2, pc, #4	; (adr r2, 8102ad4 <M4DataToM7+0x1c>)
 8102ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ad2:	bf00      	nop
 8102ad4:	08102ae9 	.word	0x08102ae9
 8102ad8:	08102bb7 	.word	0x08102bb7
 8102adc:	08102b4f 	.word	0x08102b4f
 8102ae0:	08102b83 	.word	0x08102b83
 8102ae4:	08102beb 	.word	0x08102beb
  {
    case GPS_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102ae8:	2000      	movs	r0, #0
 8102aea:	f004 fa23 	bl	8106f34 <HAL_HSEM_FastTake>
 8102aee:	4603      	mov	r3, r0
 8102af0:	2b00      	cmp	r3, #0
 8102af2:	d127      	bne.n	8102b44 <M4DataToM7+0x8c>
      {

        gps_values_m4->gps_latitude = gps.latitude;
 8102af4:	4b4a      	ldr	r3, [pc, #296]	; (8102c20 <M4DataToM7+0x168>)
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	4a4a      	ldr	r2, [pc, #296]	; (8102c24 <M4DataToM7+0x16c>)
 8102afa:	6812      	ldr	r2, [r2, #0]
 8102afc:	601a      	str	r2, [r3, #0]
        gps_values_m4->gps_longitude = gps.longitude;
 8102afe:	4b48      	ldr	r3, [pc, #288]	; (8102c20 <M4DataToM7+0x168>)
 8102b00:	681b      	ldr	r3, [r3, #0]
 8102b02:	4a48      	ldr	r2, [pc, #288]	; (8102c24 <M4DataToM7+0x16c>)
 8102b04:	6852      	ldr	r2, [r2, #4]
 8102b06:	605a      	str	r2, [r3, #4]
        gps_values_m4->gps_altitude = gps.altitude;
 8102b08:	4b45      	ldr	r3, [pc, #276]	; (8102c20 <M4DataToM7+0x168>)
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	4a45      	ldr	r2, [pc, #276]	; (8102c24 <M4DataToM7+0x16c>)
 8102b0e:	6892      	ldr	r2, [r2, #8]
 8102b10:	609a      	str	r2, [r3, #8]
        gps_values_m4->gps_velocity_x = gps.vel_x;
 8102b12:	4b43      	ldr	r3, [pc, #268]	; (8102c20 <M4DataToM7+0x168>)
 8102b14:	681b      	ldr	r3, [r3, #0]
 8102b16:	4a43      	ldr	r2, [pc, #268]	; (8102c24 <M4DataToM7+0x16c>)
 8102b18:	68d2      	ldr	r2, [r2, #12]
 8102b1a:	60da      	str	r2, [r3, #12]
        gps_values_m4->gps_velocity_y = gps.vel_y;
 8102b1c:	4b40      	ldr	r3, [pc, #256]	; (8102c20 <M4DataToM7+0x168>)
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	4a40      	ldr	r2, [pc, #256]	; (8102c24 <M4DataToM7+0x16c>)
 8102b22:	6912      	ldr	r2, [r2, #16]
 8102b24:	611a      	str	r2, [r3, #16]
        gps_values_m4->gps_velocity_z = gps.vel_z;
 8102b26:	4b3e      	ldr	r3, [pc, #248]	; (8102c20 <M4DataToM7+0x168>)
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a3e      	ldr	r2, [pc, #248]	; (8102c24 <M4DataToM7+0x16c>)
 8102b2c:	6952      	ldr	r2, [r2, #20]
 8102b2e:	615a      	str	r2, [r3, #20]
        gps_values_m4->gnd_speed = gps.gndSpeed;
 8102b30:	4b3b      	ldr	r3, [pc, #236]	; (8102c20 <M4DataToM7+0x168>)
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	4a3b      	ldr	r2, [pc, #236]	; (8102c24 <M4DataToM7+0x16c>)
 8102b36:	6992      	ldr	r2, [r2, #24]
 8102b38:	619a      	str	r2, [r3, #24]
        gps_values_m4->gps_satellites = gps.num_satellites;
 8102b3a:	4b39      	ldr	r3, [pc, #228]	; (8102c20 <M4DataToM7+0x168>)
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a39      	ldr	r2, [pc, #228]	; (8102c24 <M4DataToM7+0x16c>)
 8102b40:	69d2      	ldr	r2, [r2, #28]
 8102b42:	61da      	str	r2, [r3, #28]
      }
      // Release semaphore
      HAL_HSEM_Release(HSEM_ID_0, 0);
 8102b44:	2100      	movs	r1, #0
 8102b46:	2000      	movs	r0, #0
 8102b48:	f004 fa0e 	bl	8106f68 <HAL_HSEM_Release>
      break;
 8102b4c:	e063      	b.n	8102c16 <M4DataToM7+0x15e>
    }

    case ACC_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102b4e:	2000      	movs	r0, #0
 8102b50:	f004 f9f0 	bl	8106f34 <HAL_HSEM_FastTake>
 8102b54:	4603      	mov	r3, r0
 8102b56:	2b00      	cmp	r3, #0
 8102b58:	d10e      	bne.n	8102b78 <M4DataToM7+0xc0>
      {
        acc_values_m4->imu_acc_x = imu.accel_values.x;
 8102b5a:	4b33      	ldr	r3, [pc, #204]	; (8102c28 <M4DataToM7+0x170>)
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	4a33      	ldr	r2, [pc, #204]	; (8102c2c <M4DataToM7+0x174>)
 8102b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102b62:	601a      	str	r2, [r3, #0]
        acc_values_m4->imu_acc_y = imu.accel_values.y;
 8102b64:	4b30      	ldr	r3, [pc, #192]	; (8102c28 <M4DataToM7+0x170>)
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	4a30      	ldr	r2, [pc, #192]	; (8102c2c <M4DataToM7+0x174>)
 8102b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102b6c:	605a      	str	r2, [r3, #4]
        acc_values_m4->imu_acc_z = imu.accel_values.z;
 8102b6e:	4b2e      	ldr	r3, [pc, #184]	; (8102c28 <M4DataToM7+0x170>)
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	4a2e      	ldr	r2, [pc, #184]	; (8102c2c <M4DataToM7+0x174>)
 8102b74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102b76:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102b78:	2100      	movs	r1, #0
 8102b7a:	2000      	movs	r0, #0
 8102b7c:	f004 f9f4 	bl	8106f68 <HAL_HSEM_Release>

      break;
 8102b80:	e049      	b.n	8102c16 <M4DataToM7+0x15e>
    }

    case GYRO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102b82:	2000      	movs	r0, #0
 8102b84:	f004 f9d6 	bl	8106f34 <HAL_HSEM_FastTake>
 8102b88:	4603      	mov	r3, r0
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	d10e      	bne.n	8102bac <M4DataToM7+0xf4>
      {
        gyro_values_m4->imu_gyro_x = imu.gyro_values.x;
 8102b8e:	4b28      	ldr	r3, [pc, #160]	; (8102c30 <M4DataToM7+0x178>)
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	4a26      	ldr	r2, [pc, #152]	; (8102c2c <M4DataToM7+0x174>)
 8102b94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102b96:	601a      	str	r2, [r3, #0]
        gyro_values_m4->imu_gyro_y = imu.gyro_values.y;
 8102b98:	4b25      	ldr	r3, [pc, #148]	; (8102c30 <M4DataToM7+0x178>)
 8102b9a:	681b      	ldr	r3, [r3, #0]
 8102b9c:	4a23      	ldr	r2, [pc, #140]	; (8102c2c <M4DataToM7+0x174>)
 8102b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102ba0:	605a      	str	r2, [r3, #4]
        gyro_values_m4->imu_gyro_z = imu.gyro_values.z;
 8102ba2:	4b23      	ldr	r3, [pc, #140]	; (8102c30 <M4DataToM7+0x178>)
 8102ba4:	681b      	ldr	r3, [r3, #0]
 8102ba6:	4a21      	ldr	r2, [pc, #132]	; (8102c2c <M4DataToM7+0x174>)
 8102ba8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102baa:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102bac:	2100      	movs	r1, #0
 8102bae:	2000      	movs	r0, #0
 8102bb0:	f004 f9da 	bl	8106f68 <HAL_HSEM_Release>

      break;
 8102bb4:	e02f      	b.n	8102c16 <M4DataToM7+0x15e>
    }

    case MAG_DATA_TYPE:
    {

      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102bb6:	2000      	movs	r0, #0
 8102bb8:	f004 f9bc 	bl	8106f34 <HAL_HSEM_FastTake>
 8102bbc:	4603      	mov	r3, r0
 8102bbe:	2b00      	cmp	r3, #0
 8102bc0:	d10e      	bne.n	8102be0 <M4DataToM7+0x128>
        {
          mag_values_m4->imu_mag_x = imu.mag_values.x;
 8102bc2:	4b1c      	ldr	r3, [pc, #112]	; (8102c34 <M4DataToM7+0x17c>)
 8102bc4:	681b      	ldr	r3, [r3, #0]
 8102bc6:	4a19      	ldr	r2, [pc, #100]	; (8102c2c <M4DataToM7+0x174>)
 8102bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8102bca:	601a      	str	r2, [r3, #0]
          mag_values_m4->imu_mag_y = imu.mag_values.y;
 8102bcc:	4b19      	ldr	r3, [pc, #100]	; (8102c34 <M4DataToM7+0x17c>)
 8102bce:	681b      	ldr	r3, [r3, #0]
 8102bd0:	4a16      	ldr	r2, [pc, #88]	; (8102c2c <M4DataToM7+0x174>)
 8102bd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8102bd4:	605a      	str	r2, [r3, #4]
          mag_values_m4->imu_mag_z = imu.mag_values.z;
 8102bd6:	4b17      	ldr	r3, [pc, #92]	; (8102c34 <M4DataToM7+0x17c>)
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	4a14      	ldr	r2, [pc, #80]	; (8102c2c <M4DataToM7+0x174>)
 8102bdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8102bde:	609a      	str	r2, [r3, #8]
        }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102be0:	2100      	movs	r1, #0
 8102be2:	2000      	movs	r0, #0
 8102be4:	f004 f9c0 	bl	8106f68 <HAL_HSEM_Release>
      break;
 8102be8:	e015      	b.n	8102c16 <M4DataToM7+0x15e>
    }

    case BARO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102bea:	2000      	movs	r0, #0
 8102bec:	f004 f9a2 	bl	8106f34 <HAL_HSEM_FastTake>
 8102bf0:	4603      	mov	r3, r0
 8102bf2:	2b00      	cmp	r3, #0
 8102bf4:	d109      	bne.n	8102c0a <M4DataToM7+0x152>
      {
          baro_values_m4->baro_altitude = baro.altitude;
 8102bf6:	4b10      	ldr	r3, [pc, #64]	; (8102c38 <M4DataToM7+0x180>)
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a10      	ldr	r2, [pc, #64]	; (8102c3c <M4DataToM7+0x184>)
 8102bfc:	6892      	ldr	r2, [r2, #8]
 8102bfe:	605a      	str	r2, [r3, #4]
          baro_values_m4->baro_pressure = baro.pressure;
 8102c00:	4b0d      	ldr	r3, [pc, #52]	; (8102c38 <M4DataToM7+0x180>)
 8102c02:	681b      	ldr	r3, [r3, #0]
 8102c04:	4a0d      	ldr	r2, [pc, #52]	; (8102c3c <M4DataToM7+0x184>)
 8102c06:	6852      	ldr	r2, [r2, #4]
 8102c08:	601a      	str	r2, [r3, #0]
      }
             // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102c0a:	2100      	movs	r1, #0
 8102c0c:	2000      	movs	r0, #0
 8102c0e:	f004 f9ab 	bl	8106f68 <HAL_HSEM_Release>
      break;
 8102c12:	e000      	b.n	8102c16 <M4DataToM7+0x15e>
    }

    default:
      break;
 8102c14:	bf00      	nop

  }



}
 8102c16:	bf00      	nop
 8102c18:	3708      	adds	r7, #8
 8102c1a:	46bd      	mov	sp, r7
 8102c1c:	bd80      	pop	{r7, pc}
 8102c1e:	bf00      	nop
 8102c20:	10000018 	.word	0x10000018
 8102c24:	100002e0 	.word	0x100002e0
 8102c28:	10000008 	.word	0x10000008
 8102c2c:	10000360 	.word	0x10000360
 8102c30:	1000000c 	.word	0x1000000c
 8102c34:	10000010 	.word	0x10000010
 8102c38:	10000014 	.word	0x10000014
 8102c3c:	100003ac 	.word	0x100003ac

08102c40 <ConfigSensors>:
/*
 * @brief Initialises the sensors
 * @retval HAL_OK if successful
 */
uint8_t ConfigSensors(void)
{
 8102c40:	b580      	push	{r7, lr}
 8102c42:	af00      	add	r7, sp, #0

  // COnfigure GPS Sensor
  ConfigGPS();
 8102c44:	f000 fa82 	bl	810314c <ConfigGPS>

  // Configure BMP280
  if(ConfigBMP280(&baro) != HAL_OK)
 8102c48:	4809      	ldr	r0, [pc, #36]	; (8102c70 <ConfigSensors+0x30>)
 8102c4a:	f7fe fb0f 	bl	810126c <ConfigBMP280>
 8102c4e:	4603      	mov	r3, r0
 8102c50:	2b00      	cmp	r3, #0
 8102c52:	d001      	beq.n	8102c58 <ConfigSensors+0x18>
  {
      return HAL_ERROR;
 8102c54:	2301      	movs	r3, #1
 8102c56:	e008      	b.n	8102c6a <ConfigSensors+0x2a>
  }

  // Configure IMU;
 if(ConfigIMU(&imu)!= HAL_OK)
 8102c58:	4806      	ldr	r0, [pc, #24]	; (8102c74 <ConfigSensors+0x34>)
 8102c5a:	f7ff fa38 	bl	81020ce <ConfigIMU>
 8102c5e:	4603      	mov	r3, r0
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	d001      	beq.n	8102c68 <ConfigSensors+0x28>
 {
    return HAL_ERROR;
 8102c64:	2301      	movs	r3, #1
 8102c66:	e000      	b.n	8102c6a <ConfigSensors+0x2a>
 }

 return HAL_OK;
 8102c68:	2300      	movs	r3, #0


}
 8102c6a:	4618      	mov	r0, r3
 8102c6c:	bd80      	pop	{r7, pc}
 8102c6e:	bf00      	nop
 8102c70:	100003ac 	.word	0x100003ac
 8102c74:	10000360 	.word	0x10000360

08102c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102c78:	b480      	push	{r7}
 8102c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102c7c:	b672      	cpsid	i
}
 8102c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102c80:	e7fe      	b.n	8102c80 <Error_Handler+0x8>
	...

08102c84 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102c84:	b580      	push	{r7, lr}
 8102c86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102c88:	4b27      	ldr	r3, [pc, #156]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102c8a:	4a28      	ldr	r2, [pc, #160]	; (8102d2c <MX_SPI1_Init+0xa8>)
 8102c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102c8e:	4b26      	ldr	r3, [pc, #152]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102c90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102c96:	4b24      	ldr	r3, [pc, #144]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102c98:	2200      	movs	r2, #0
 8102c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102c9c:	4b22      	ldr	r3, [pc, #136]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102c9e:	2207      	movs	r2, #7
 8102ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102ca2:	4b21      	ldr	r3, [pc, #132]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102ca4:	2200      	movs	r2, #0
 8102ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102ca8:	4b1f      	ldr	r3, [pc, #124]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102caa:	2200      	movs	r2, #0
 8102cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102cae:	4b1e      	ldr	r3, [pc, #120]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102cb6:	4b1c      	ldr	r3, [pc, #112]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cb8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102cbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102cbe:	4b1a      	ldr	r3, [pc, #104]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cc0:	2200      	movs	r2, #0
 8102cc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102cc4:	4b18      	ldr	r3, [pc, #96]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cc6:	2200      	movs	r2, #0
 8102cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102cca:	4b17      	ldr	r3, [pc, #92]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102ccc:	2200      	movs	r2, #0
 8102cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102cd0:	4b15      	ldr	r3, [pc, #84]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cd2:	2200      	movs	r2, #0
 8102cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102cd6:	4b14      	ldr	r3, [pc, #80]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102cdc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102cde:	4b12      	ldr	r3, [pc, #72]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102ce0:	2200      	movs	r2, #0
 8102ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102ce4:	4b10      	ldr	r3, [pc, #64]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102ce6:	2200      	movs	r2, #0
 8102ce8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102cea:	4b0f      	ldr	r3, [pc, #60]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cec:	2200      	movs	r2, #0
 8102cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102cf0:	4b0d      	ldr	r3, [pc, #52]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cf2:	2200      	movs	r2, #0
 8102cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102cf6:	4b0c      	ldr	r3, [pc, #48]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cf8:	2200      	movs	r2, #0
 8102cfa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102cfc:	4b0a      	ldr	r3, [pc, #40]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102cfe:	2200      	movs	r2, #0
 8102d00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102d02:	4b09      	ldr	r3, [pc, #36]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102d04:	2200      	movs	r2, #0
 8102d06:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102d08:	4b07      	ldr	r3, [pc, #28]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102d0a:	2200      	movs	r2, #0
 8102d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102d0e:	4b06      	ldr	r3, [pc, #24]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102d10:	2200      	movs	r2, #0
 8102d12:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102d14:	4804      	ldr	r0, [pc, #16]	; (8102d28 <MX_SPI1_Init+0xa4>)
 8102d16:	f007 fae3 	bl	810a2e0 <HAL_SPI_Init>
 8102d1a:	4603      	mov	r3, r0
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	d001      	beq.n	8102d24 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102d20:	f7ff ffaa 	bl	8102c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102d24:	bf00      	nop
 8102d26:	bd80      	pop	{r7, pc}
 8102d28:	100003e0 	.word	0x100003e0
 8102d2c:	40013000 	.word	0x40013000

08102d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102d30:	b580      	push	{r7, lr}
 8102d32:	b0b8      	sub	sp, #224	; 0xe0
 8102d34:	af00      	add	r7, sp, #0
 8102d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102d3c:	2200      	movs	r2, #0
 8102d3e:	601a      	str	r2, [r3, #0]
 8102d40:	605a      	str	r2, [r3, #4]
 8102d42:	609a      	str	r2, [r3, #8]
 8102d44:	60da      	str	r2, [r3, #12]
 8102d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102d48:	f107 0310 	add.w	r3, r7, #16
 8102d4c:	22bc      	movs	r2, #188	; 0xbc
 8102d4e:	2100      	movs	r1, #0
 8102d50:	4618      	mov	r0, r3
 8102d52:	f009 fdb7 	bl	810c8c4 <memset>
  if(spiHandle->Instance==SPI1)
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4a57      	ldr	r2, [pc, #348]	; (8102eb8 <HAL_SPI_MspInit+0x188>)
 8102d5c:	4293      	cmp	r3, r2
 8102d5e:	f040 80a6 	bne.w	8102eae <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102d66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102d68:	2300      	movs	r3, #0
 8102d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102d6c:	f107 0310 	add.w	r3, r7, #16
 8102d70:	4618      	mov	r0, r3
 8102d72:	f005 ff53 	bl	8108c1c <HAL_RCCEx_PeriphCLKConfig>
 8102d76:	4603      	mov	r3, r0
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d001      	beq.n	8102d80 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8102d7c:	f7ff ff7c 	bl	8102c78 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102d80:	4b4e      	ldr	r3, [pc, #312]	; (8102ebc <HAL_SPI_MspInit+0x18c>)
 8102d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102d86:	4a4d      	ldr	r2, [pc, #308]	; (8102ebc <HAL_SPI_MspInit+0x18c>)
 8102d88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102d90:	4b4a      	ldr	r3, [pc, #296]	; (8102ebc <HAL_SPI_MspInit+0x18c>)
 8102d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102d9a:	60fb      	str	r3, [r7, #12]
 8102d9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102d9e:	4b47      	ldr	r3, [pc, #284]	; (8102ebc <HAL_SPI_MspInit+0x18c>)
 8102da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102da4:	4a45      	ldr	r2, [pc, #276]	; (8102ebc <HAL_SPI_MspInit+0x18c>)
 8102da6:	f043 0301 	orr.w	r3, r3, #1
 8102daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102dae:	4b43      	ldr	r3, [pc, #268]	; (8102ebc <HAL_SPI_MspInit+0x18c>)
 8102db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102db4:	f003 0301 	and.w	r3, r3, #1
 8102db8:	60bb      	str	r3, [r7, #8]
 8102dba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8102dbc:	23e0      	movs	r3, #224	; 0xe0
 8102dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102dc2:	2302      	movs	r3, #2
 8102dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102dc8:	2300      	movs	r3, #0
 8102dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102dce:	2300      	movs	r3, #0
 8102dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102dd4:	2305      	movs	r3, #5
 8102dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102dda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102dde:	4619      	mov	r1, r3
 8102de0:	4837      	ldr	r0, [pc, #220]	; (8102ec0 <HAL_SPI_MspInit+0x190>)
 8102de2:	f003 fedd 	bl	8106ba0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102de6:	4b37      	ldr	r3, [pc, #220]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102de8:	4a37      	ldr	r2, [pc, #220]	; (8102ec8 <HAL_SPI_MspInit+0x198>)
 8102dea:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102dec:	4b35      	ldr	r3, [pc, #212]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102dee:	2225      	movs	r2, #37	; 0x25
 8102df0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102df2:	4b34      	ldr	r3, [pc, #208]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102df4:	2200      	movs	r2, #0
 8102df6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102df8:	4b32      	ldr	r3, [pc, #200]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102dfa:	2200      	movs	r2, #0
 8102dfc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102dfe:	4b31      	ldr	r3, [pc, #196]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102e04:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102e06:	4b2f      	ldr	r3, [pc, #188]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e08:	2200      	movs	r2, #0
 8102e0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102e0c:	4b2d      	ldr	r3, [pc, #180]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e0e:	2200      	movs	r2, #0
 8102e10:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102e12:	4b2c      	ldr	r3, [pc, #176]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e14:	2200      	movs	r2, #0
 8102e16:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102e18:	4b2a      	ldr	r3, [pc, #168]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102e1e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102e20:	4b28      	ldr	r3, [pc, #160]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e22:	2200      	movs	r2, #0
 8102e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102e26:	4827      	ldr	r0, [pc, #156]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e28:	f001 f868 	bl	8103efc <HAL_DMA_Init>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	2b00      	cmp	r3, #0
 8102e30:	d001      	beq.n	8102e36 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102e32:	f7ff ff21 	bl	8102c78 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	4a22      	ldr	r2, [pc, #136]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e3a:	67da      	str	r2, [r3, #124]	; 0x7c
 8102e3c:	4a21      	ldr	r2, [pc, #132]	; (8102ec4 <HAL_SPI_MspInit+0x194>)
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102e42:	4b22      	ldr	r3, [pc, #136]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e44:	4a22      	ldr	r2, [pc, #136]	; (8102ed0 <HAL_SPI_MspInit+0x1a0>)
 8102e46:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102e48:	4b20      	ldr	r3, [pc, #128]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e4a:	2226      	movs	r2, #38	; 0x26
 8102e4c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102e4e:	4b1f      	ldr	r3, [pc, #124]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e50:	2240      	movs	r2, #64	; 0x40
 8102e52:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102e54:	4b1d      	ldr	r3, [pc, #116]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e56:	2200      	movs	r2, #0
 8102e58:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102e5a:	4b1c      	ldr	r3, [pc, #112]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102e60:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102e62:	4b1a      	ldr	r3, [pc, #104]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e64:	2200      	movs	r2, #0
 8102e66:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102e68:	4b18      	ldr	r3, [pc, #96]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e6a:	2200      	movs	r2, #0
 8102e6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8102e6e:	4b17      	ldr	r3, [pc, #92]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e70:	2200      	movs	r2, #0
 8102e72:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102e74:	4b15      	ldr	r3, [pc, #84]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102e7a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102e7c:	4b13      	ldr	r3, [pc, #76]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e7e:	2200      	movs	r2, #0
 8102e80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102e82:	4812      	ldr	r0, [pc, #72]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e84:	f001 f83a 	bl	8103efc <HAL_DMA_Init>
 8102e88:	4603      	mov	r3, r0
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d001      	beq.n	8102e92 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8102e8e:	f7ff fef3 	bl	8102c78 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	4a0d      	ldr	r2, [pc, #52]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e96:	679a      	str	r2, [r3, #120]	; 0x78
 8102e98:	4a0c      	ldr	r2, [pc, #48]	; (8102ecc <HAL_SPI_MspInit+0x19c>)
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102e9e:	2200      	movs	r2, #0
 8102ea0:	2100      	movs	r1, #0
 8102ea2:	2023      	movs	r0, #35	; 0x23
 8102ea4:	f000 ffe1 	bl	8103e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102ea8:	2023      	movs	r0, #35	; 0x23
 8102eaa:	f000 fff8 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8102eae:	bf00      	nop
 8102eb0:	37e0      	adds	r7, #224	; 0xe0
 8102eb2:	46bd      	mov	sp, r7
 8102eb4:	bd80      	pop	{r7, pc}
 8102eb6:	bf00      	nop
 8102eb8:	40013000 	.word	0x40013000
 8102ebc:	58024400 	.word	0x58024400
 8102ec0:	58020000 	.word	0x58020000
 8102ec4:	10000468 	.word	0x10000468
 8102ec8:	40020010 	.word	0x40020010
 8102ecc:	100004e0 	.word	0x100004e0
 8102ed0:	40020028 	.word	0x40020028

08102ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102ed4:	b480      	push	{r7}
 8102ed6:	b083      	sub	sp, #12
 8102ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102eda:	4b0a      	ldr	r3, [pc, #40]	; (8102f04 <HAL_MspInit+0x30>)
 8102edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102ee0:	4a08      	ldr	r2, [pc, #32]	; (8102f04 <HAL_MspInit+0x30>)
 8102ee2:	f043 0302 	orr.w	r3, r3, #2
 8102ee6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102eea:	4b06      	ldr	r3, [pc, #24]	; (8102f04 <HAL_MspInit+0x30>)
 8102eec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102ef0:	f003 0302 	and.w	r3, r3, #2
 8102ef4:	607b      	str	r3, [r7, #4]
 8102ef6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102ef8:	bf00      	nop
 8102efa:	370c      	adds	r7, #12
 8102efc:	46bd      	mov	sp, r7
 8102efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f02:	4770      	bx	lr
 8102f04:	58024400 	.word	0x58024400

08102f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102f08:	b480      	push	{r7}
 8102f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102f0c:	e7fe      	b.n	8102f0c <NMI_Handler+0x4>

08102f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102f0e:	b480      	push	{r7}
 8102f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102f12:	e7fe      	b.n	8102f12 <HardFault_Handler+0x4>

08102f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102f14:	b480      	push	{r7}
 8102f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102f18:	e7fe      	b.n	8102f18 <MemManage_Handler+0x4>

08102f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102f1a:	b480      	push	{r7}
 8102f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102f1e:	e7fe      	b.n	8102f1e <BusFault_Handler+0x4>

08102f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102f20:	b480      	push	{r7}
 8102f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102f24:	e7fe      	b.n	8102f24 <UsageFault_Handler+0x4>

08102f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102f26:	b480      	push	{r7}
 8102f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102f2a:	bf00      	nop
 8102f2c:	46bd      	mov	sp, r7
 8102f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f32:	4770      	bx	lr

08102f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102f34:	b480      	push	{r7}
 8102f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102f38:	bf00      	nop
 8102f3a:	46bd      	mov	sp, r7
 8102f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f40:	4770      	bx	lr

08102f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102f42:	b480      	push	{r7}
 8102f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102f46:	bf00      	nop
 8102f48:	46bd      	mov	sp, r7
 8102f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f4e:	4770      	bx	lr

08102f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102f50:	b580      	push	{r7, lr}
 8102f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102f54:	f000 fb78 	bl	8103648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102f58:	bf00      	nop
 8102f5a:	bd80      	pop	{r7, pc}

08102f5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102f5c:	b580      	push	{r7, lr}
 8102f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102f60:	4802      	ldr	r0, [pc, #8]	; (8102f6c <DMA1_Stream0_IRQHandler+0x10>)
 8102f62:	f002 faf1 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102f66:	bf00      	nop
 8102f68:	bd80      	pop	{r7, pc}
 8102f6a:	bf00      	nop
 8102f6c:	10000468 	.word	0x10000468

08102f70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102f70:	b580      	push	{r7, lr}
 8102f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102f74:	4802      	ldr	r0, [pc, #8]	; (8102f80 <DMA1_Stream1_IRQHandler+0x10>)
 8102f76:	f002 fae7 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102f7a:	bf00      	nop
 8102f7c:	bd80      	pop	{r7, pc}
 8102f7e:	bf00      	nop
 8102f80:	100004e0 	.word	0x100004e0

08102f84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8102f84:	b580      	push	{r7, lr}
 8102f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8102f88:	4802      	ldr	r0, [pc, #8]	; (8102f94 <DMA1_Stream2_IRQHandler+0x10>)
 8102f8a:	f002 fadd 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8102f8e:	bf00      	nop
 8102f90:	bd80      	pop	{r7, pc}
 8102f92:	bf00      	nop
 8102f94:	1000025c 	.word	0x1000025c

08102f98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8102f98:	b580      	push	{r7, lr}
 8102f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102f9c:	4802      	ldr	r0, [pc, #8]	; (8102fa8 <DMA1_Stream3_IRQHandler+0x10>)
 8102f9e:	f002 fad3 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8102fa2:	bf00      	nop
 8102fa4:	bd80      	pop	{r7, pc}
 8102fa6:	bf00      	nop
 8102fa8:	10000198 	.word	0x10000198

08102fac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8102fac:	b580      	push	{r7, lr}
 8102fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102fb0:	4802      	ldr	r0, [pc, #8]	; (8102fbc <DMA1_Stream4_IRQHandler+0x10>)
 8102fb2:	f002 fac9 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8102fb6:	bf00      	nop
 8102fb8:	bd80      	pop	{r7, pc}
 8102fba:	bf00      	nop
 8102fbc:	1000011c 	.word	0x1000011c

08102fc0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8102fc0:	b580      	push	{r7, lr}
 8102fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102fc4:	4802      	ldr	r0, [pc, #8]	; (8102fd0 <ADC_IRQHandler+0x10>)
 8102fc6:	f000 fbeb 	bl	81037a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8102fca:	bf00      	nop
 8102fcc:	bd80      	pop	{r7, pc}
 8102fce:	bf00      	nop
 8102fd0:	100000b8 	.word	0x100000b8

08102fd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102fd4:	b580      	push	{r7, lr}
 8102fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102fd8:	4802      	ldr	r0, [pc, #8]	; (8102fe4 <I2C1_EV_IRQHandler+0x10>)
 8102fda:	f004 faa9 	bl	8107530 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8102fde:	bf00      	nop
 8102fe0:	bd80      	pop	{r7, pc}
 8102fe2:	bf00      	nop
 8102fe4:	10000210 	.word	0x10000210

08102fe8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102fe8:	b580      	push	{r7, lr}
 8102fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8102fec:	4802      	ldr	r0, [pc, #8]	; (8102ff8 <I2C1_ER_IRQHandler+0x10>)
 8102fee:	f004 fab9 	bl	8107564 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102ff2:	bf00      	nop
 8102ff4:	bd80      	pop	{r7, pc}
 8102ff6:	bf00      	nop
 8102ff8:	10000210 	.word	0x10000210

08102ffc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8102ffc:	b580      	push	{r7, lr}
 8102ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8103000:	4802      	ldr	r0, [pc, #8]	; (810300c <SPI1_IRQHandler+0x10>)
 8103002:	f007 fc3b 	bl	810a87c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8103006:	bf00      	nop
 8103008:	bd80      	pop	{r7, pc}
 810300a:	bf00      	nop
 810300c:	100003e0 	.word	0x100003e0

08103010 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8103010:	b580      	push	{r7, lr}
 8103012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8103014:	4802      	ldr	r0, [pc, #8]	; (8103020 <USART3_IRQHandler+0x10>)
 8103016:	f008 f86d 	bl	810b0f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810301a:	bf00      	nop
 810301c:	bd80      	pop	{r7, pc}
 810301e:	bf00      	nop
 8103020:	100005d0 	.word	0x100005d0

08103024 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8103024:	b580      	push	{r7, lr}
 8103026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8103028:	4802      	ldr	r0, [pc, #8]	; (8103034 <DMA1_Stream7_IRQHandler+0x10>)
 810302a:	f002 fa8d 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810302e:	bf00      	nop
 8103030:	bd80      	pop	{r7, pc}
 8103032:	bf00      	nop
 8103034:	10000558 	.word	0x10000558

08103038 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8103038:	b580      	push	{r7, lr}
 810303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 810303c:	4802      	ldr	r0, [pc, #8]	; (8103048 <DMA2_Stream0_IRQHandler+0x10>)
 810303e:	f002 fa83 	bl	8105548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8103042:	bf00      	nop
 8103044:	bd80      	pop	{r7, pc}
 8103046:	bf00      	nop
 8103048:	10000660 	.word	0x10000660
 810304c:	00000000 	.word	0x00000000

08103050 <processGPS>:
 * @brief passes GPS info to gps handle struct
 * @param gps pointer to gps struct
 * @retval nothing
 */
 void processGPS(GPSHandle* gps)
 {
 8103050:	b580      	push	{r7, lr}
 8103052:	b082      	sub	sp, #8
 8103054:	af00      	add	r7, sp, #0
 8103056:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 8103058:	4b39      	ldr	r3, [pc, #228]	; (8103140 <processGPS+0xf0>)
 810305a:	6a1b      	ldr	r3, [r3, #32]
 810305c:	4618      	mov	r0, r3
 810305e:	f7fd fa8d 	bl	810057c <__aeabi_i2d>
 8103062:	a335      	add	r3, pc, #212	; (adr r3, 8103138 <processGPS+0xe8>)
 8103064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103068:	f7fd faf2 	bl	8100650 <__aeabi_dmul>
 810306c:	4602      	mov	r2, r0
 810306e:	460b      	mov	r3, r1
 8103070:	4610      	mov	r0, r2
 8103072:	4619      	mov	r1, r3
 8103074:	f7fd fd9c 	bl	8100bb0 <__aeabi_d2f>
 8103078:	4602      	mov	r2, r0
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 810307e:	4b30      	ldr	r3, [pc, #192]	; (8103140 <processGPS+0xf0>)
 8103080:	69db      	ldr	r3, [r3, #28]
 8103082:	4618      	mov	r0, r3
 8103084:	f7fd fa7a 	bl	810057c <__aeabi_i2d>
 8103088:	a32b      	add	r3, pc, #172	; (adr r3, 8103138 <processGPS+0xe8>)
 810308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810308e:	f7fd fadf 	bl	8100650 <__aeabi_dmul>
 8103092:	4602      	mov	r2, r0
 8103094:	460b      	mov	r3, r1
 8103096:	4610      	mov	r0, r2
 8103098:	4619      	mov	r1, r3
 810309a:	f7fd fd89 	bl	8100bb0 <__aeabi_d2f>
 810309e:	4602      	mov	r2, r0
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 81030a4:	4b26      	ldr	r3, [pc, #152]	; (8103140 <processGPS+0xf0>)
 81030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030a8:	ee07 3a90 	vmov	s15, r3
 81030ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81030b0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8103144 <processGPS+0xf4>
 81030b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 81030be:	4b20      	ldr	r3, [pc, #128]	; (8103140 <processGPS+0xf0>)
 81030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81030c2:	ee07 3a90 	vmov	s15, r3
 81030c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81030ca:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8103144 <processGPS+0xf4>
 81030ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 81030d8:	4b19      	ldr	r3, [pc, #100]	; (8103140 <processGPS+0xf0>)
 81030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81030dc:	ee07 3a90 	vmov	s15, r3
 81030e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81030e4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8103144 <processGPS+0xf4>
 81030e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 81030f2:	4b13      	ldr	r3, [pc, #76]	; (8103140 <processGPS+0xf0>)
 81030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030f6:	ee07 3a90 	vmov	s15, r3
 81030fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81030fe:	eddf 6a12 	vldr	s13, [pc, #72]	; 8103148 <processGPS+0xf8>
 8103102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 810310c:	4b0c      	ldr	r3, [pc, #48]	; (8103140 <processGPS+0xf0>)
 810310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103110:	ee07 3a90 	vmov	s15, r3
 8103114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103118:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8103144 <processGPS+0xf4>
 810311c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	edc3 7a06 	vstr	s15, [r3, #24]
     /* Retrieve number of satellites used */
     gps->num_satellites = pvt.numSV;
 8103126:	4b06      	ldr	r3, [pc, #24]	; (8103140 <processGPS+0xf0>)
 8103128:	7edb      	ldrb	r3, [r3, #27]
 810312a:	461a      	mov	r2, r3
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	61da      	str	r2, [r3, #28]
 }
 8103130:	bf00      	nop
 8103132:	3708      	adds	r7, #8
 8103134:	46bd      	mov	sp, r7
 8103136:	bd80      	pop	{r7, pc}
 8103138:	9abcaf48 	.word	0x9abcaf48
 810313c:	3e7ad7f2 	.word	0x3e7ad7f2
 8103140:	10000300 	.word	0x10000300
 8103144:	447a0000 	.word	0x447a0000
 8103148:	c47a0000 	.word	0xc47a0000

0810314c <ConfigGPS>:
 /*
  * @brief Configures GPS messages to be enabled on startup
  * @retval nothing.
  */
 void ConfigGPS(void)
 {
 810314c:	b590      	push	{r4, r7, lr}
 810314e:	b0c1      	sub	sp, #260	; 0x104
 8103150:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 8103152:	4b41      	ldr	r3, [pc, #260]	; (8103258 <ConfigGPS+0x10c>)
 8103154:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8103158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810315a:	c407      	stmia	r4!, {r0, r1, r2}
 810315c:	8023      	strh	r3, [r4, #0]
 810315e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8103162:	220e      	movs	r2, #14
 8103164:	4619      	mov	r1, r3
 8103166:	483d      	ldr	r0, [pc, #244]	; (810325c <ConfigGPS+0x110>)
 8103168:	f007 ff44 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 810316c:	2014      	movs	r0, #20
 810316e:	f000 fa8b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 8103172:	4b3b      	ldr	r3, [pc, #236]	; (8103260 <ConfigGPS+0x114>)
 8103174:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8103178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810317a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810317e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8103182:	2210      	movs	r2, #16
 8103184:	4619      	mov	r1, r3
 8103186:	4835      	ldr	r0, [pc, #212]	; (810325c <ConfigGPS+0x110>)
 8103188:	f007 ff34 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 810318c:	2014      	movs	r0, #20
 810318e:	f000 fa7b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 8103192:	4b34      	ldr	r3, [pc, #208]	; (8103264 <ConfigGPS+0x118>)
 8103194:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8103198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810319a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810319e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 81031a2:	2210      	movs	r2, #16
 81031a4:	4619      	mov	r1, r3
 81031a6:	482d      	ldr	r0, [pc, #180]	; (810325c <ConfigGPS+0x110>)
 81031a8:	f007 ff24 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 81031ac:	2014      	movs	r0, #20
 81031ae:	f000 fa6b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 81031b2:	4b2d      	ldr	r3, [pc, #180]	; (8103268 <ConfigGPS+0x11c>)
 81031b4:	f107 0490 	add.w	r4, r7, #144	; 0x90
 81031b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81031be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 81031c2:	2210      	movs	r2, #16
 81031c4:	4619      	mov	r1, r3
 81031c6:	4825      	ldr	r0, [pc, #148]	; (810325c <ConfigGPS+0x110>)
 81031c8:	f007 ff14 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 81031cc:	2014      	movs	r0, #20
 81031ce:	f000 fa5b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 81031d2:	4b26      	ldr	r3, [pc, #152]	; (810326c <ConfigGPS+0x120>)
 81031d4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 81031d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81031de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 81031e2:	2210      	movs	r2, #16
 81031e4:	4619      	mov	r1, r3
 81031e6:	481d      	ldr	r0, [pc, #116]	; (810325c <ConfigGPS+0x110>)
 81031e8:	f007 ff04 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 81031ec:	2014      	movs	r0, #20
 81031ee:	f000 fa4b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81031f2:	4b1f      	ldr	r3, [pc, #124]	; (8103270 <ConfigGPS+0x124>)
 81031f4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 81031f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81031fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8103202:	2210      	movs	r2, #16
 8103204:	4619      	mov	r1, r3
 8103206:	4815      	ldr	r0, [pc, #84]	; (810325c <ConfigGPS+0x110>)
 8103208:	f007 fef4 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 810320c:	2014      	movs	r0, #20
 810320e:	f000 fa3b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 8103212:	4b18      	ldr	r3, [pc, #96]	; (8103274 <ConfigGPS+0x128>)
 8103214:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8103218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810321a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810321e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8103222:	2210      	movs	r2, #16
 8103224:	4619      	mov	r1, r3
 8103226:	480d      	ldr	r0, [pc, #52]	; (810325c <ConfigGPS+0x110>)
 8103228:	f007 fee4 	bl	810aff4 <HAL_UART_Transmit_DMA>
   HAL_Delay(20);
 810322c:	2014      	movs	r0, #20
 810322e:	f000 fa2b 	bl	8103688 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 8103232:	4b11      	ldr	r3, [pc, #68]	; (8103278 <ConfigGPS+0x12c>)
 8103234:	f107 0410 	add.w	r4, r7, #16
 8103238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810323a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810323e:	f107 0310 	add.w	r3, r7, #16
 8103242:	2210      	movs	r2, #16
 8103244:	4619      	mov	r1, r3
 8103246:	4805      	ldr	r0, [pc, #20]	; (810325c <ConfigGPS+0x110>)
 8103248:	f007 fed4 	bl	810aff4 <HAL_UART_Transmit_DMA>
   // This is not needed
   //HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 }
 810324c:	bf00      	nop
 810324e:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8103252:	46bd      	mov	sp, r7
 8103254:	bd90      	pop	{r4, r7, pc}
 8103256:	bf00      	nop
 8103258:	0810d860 	.word	0x0810d860
 810325c:	100005d0 	.word	0x100005d0
 8103260:	0810d870 	.word	0x0810d870
 8103264:	0810d880 	.word	0x0810d880
 8103268:	0810d890 	.word	0x0810d890
 810326c:	0810d8a0 	.word	0x0810d8a0
 8103270:	0810d8b0 	.word	0x0810d8b0
 8103274:	0810d8c0 	.word	0x0810d8c0
 8103278:	0810d8d0 	.word	0x0810d8d0

0810327c <HAL_UART_TxCpltCallback>:
    }
 }


 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 810327c:	b480      	push	{r7}
 810327e:	b083      	sub	sp, #12
 8103280:	af00      	add	r7, sp, #0
 8103282:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8103284:	bf00      	nop
 8103286:	370c      	adds	r7, #12
 8103288:	46bd      	mov	sp, r7
 810328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810328e:	4770      	bx	lr

08103290 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8103290:	b580      	push	{r7, lr}
 8103292:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103294:	4b22      	ldr	r3, [pc, #136]	; (8103320 <MX_USART3_UART_Init+0x90>)
 8103296:	4a23      	ldr	r2, [pc, #140]	; (8103324 <MX_USART3_UART_Init+0x94>)
 8103298:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 810329a:	4b21      	ldr	r3, [pc, #132]	; (8103320 <MX_USART3_UART_Init+0x90>)
 810329c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 81032a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81032a2:	4b1f      	ldr	r3, [pc, #124]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032a4:	2200      	movs	r2, #0
 81032a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81032a8:	4b1d      	ldr	r3, [pc, #116]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032aa:	2200      	movs	r2, #0
 81032ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81032ae:	4b1c      	ldr	r3, [pc, #112]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032b0:	2200      	movs	r2, #0
 81032b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81032b4:	4b1a      	ldr	r3, [pc, #104]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032b6:	220c      	movs	r2, #12
 81032b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81032ba:	4b19      	ldr	r3, [pc, #100]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032bc:	2200      	movs	r2, #0
 81032be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81032c0:	4b17      	ldr	r3, [pc, #92]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032c2:	2200      	movs	r2, #0
 81032c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81032c6:	4b16      	ldr	r3, [pc, #88]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032c8:	2200      	movs	r2, #0
 81032ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81032cc:	4b14      	ldr	r3, [pc, #80]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032ce:	2200      	movs	r2, #0
 81032d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81032d2:	4b13      	ldr	r3, [pc, #76]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032d4:	2200      	movs	r2, #0
 81032d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81032d8:	4811      	ldr	r0, [pc, #68]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032da:	f007 fe3b 	bl	810af54 <HAL_UART_Init>
 81032de:	4603      	mov	r3, r0
 81032e0:	2b00      	cmp	r3, #0
 81032e2:	d001      	beq.n	81032e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81032e4:	f7ff fcc8 	bl	8102c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81032e8:	2100      	movs	r1, #0
 81032ea:	480d      	ldr	r0, [pc, #52]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032ec:	f009 f9f6 	bl	810c6dc <HAL_UARTEx_SetTxFifoThreshold>
 81032f0:	4603      	mov	r3, r0
 81032f2:	2b00      	cmp	r3, #0
 81032f4:	d001      	beq.n	81032fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81032f6:	f7ff fcbf 	bl	8102c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81032fa:	2100      	movs	r1, #0
 81032fc:	4808      	ldr	r0, [pc, #32]	; (8103320 <MX_USART3_UART_Init+0x90>)
 81032fe:	f009 fa2b 	bl	810c758 <HAL_UARTEx_SetRxFifoThreshold>
 8103302:	4603      	mov	r3, r0
 8103304:	2b00      	cmp	r3, #0
 8103306:	d001      	beq.n	810330c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103308:	f7ff fcb6 	bl	8102c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810330c:	4804      	ldr	r0, [pc, #16]	; (8103320 <MX_USART3_UART_Init+0x90>)
 810330e:	f009 f9ac 	bl	810c66a <HAL_UARTEx_DisableFifoMode>
 8103312:	4603      	mov	r3, r0
 8103314:	2b00      	cmp	r3, #0
 8103316:	d001      	beq.n	810331c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103318:	f7ff fcae 	bl	8102c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810331c:	bf00      	nop
 810331e:	bd80      	pop	{r7, pc}
 8103320:	100005d0 	.word	0x100005d0
 8103324:	40004800 	.word	0x40004800

08103328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8103328:	b580      	push	{r7, lr}
 810332a:	b0b8      	sub	sp, #224	; 0xe0
 810332c:	af00      	add	r7, sp, #0
 810332e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103330:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103334:	2200      	movs	r2, #0
 8103336:	601a      	str	r2, [r3, #0]
 8103338:	605a      	str	r2, [r3, #4]
 810333a:	609a      	str	r2, [r3, #8]
 810333c:	60da      	str	r2, [r3, #12]
 810333e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8103340:	f107 0310 	add.w	r3, r7, #16
 8103344:	22bc      	movs	r2, #188	; 0xbc
 8103346:	2100      	movs	r1, #0
 8103348:	4618      	mov	r0, r3
 810334a:	f009 fabb 	bl	810c8c4 <memset>
  if(uartHandle->Instance==USART3)
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	4a57      	ldr	r2, [pc, #348]	; (81034b0 <HAL_UART_MspInit+0x188>)
 8103354:	4293      	cmp	r3, r2
 8103356:	f040 80a7 	bne.w	81034a8 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810335a:	2302      	movs	r3, #2
 810335c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810335e:	2300      	movs	r3, #0
 8103360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103364:	f107 0310 	add.w	r3, r7, #16
 8103368:	4618      	mov	r0, r3
 810336a:	f005 fc57 	bl	8108c1c <HAL_RCCEx_PeriphCLKConfig>
 810336e:	4603      	mov	r3, r0
 8103370:	2b00      	cmp	r3, #0
 8103372:	d001      	beq.n	8103378 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8103374:	f7ff fc80 	bl	8102c78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8103378:	4b4e      	ldr	r3, [pc, #312]	; (81034b4 <HAL_UART_MspInit+0x18c>)
 810337a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810337e:	4a4d      	ldr	r2, [pc, #308]	; (81034b4 <HAL_UART_MspInit+0x18c>)
 8103380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103384:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103388:	4b4a      	ldr	r3, [pc, #296]	; (81034b4 <HAL_UART_MspInit+0x18c>)
 810338a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810338e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103392:	60fb      	str	r3, [r7, #12]
 8103394:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103396:	4b47      	ldr	r3, [pc, #284]	; (81034b4 <HAL_UART_MspInit+0x18c>)
 8103398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810339c:	4a45      	ldr	r2, [pc, #276]	; (81034b4 <HAL_UART_MspInit+0x18c>)
 810339e:	f043 0308 	orr.w	r3, r3, #8
 81033a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81033a6:	4b43      	ldr	r3, [pc, #268]	; (81034b4 <HAL_UART_MspInit+0x18c>)
 81033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81033ac:	f003 0308 	and.w	r3, r3, #8
 81033b0:	60bb      	str	r3, [r7, #8]
 81033b2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81033b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 81033b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81033bc:	2302      	movs	r3, #2
 81033be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81033c2:	2300      	movs	r3, #0
 81033c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81033c8:	2300      	movs	r3, #0
 81033ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81033ce:	2307      	movs	r3, #7
 81033d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81033d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81033d8:	4619      	mov	r1, r3
 81033da:	4837      	ldr	r0, [pc, #220]	; (81034b8 <HAL_UART_MspInit+0x190>)
 81033dc:	f003 fbe0 	bl	8106ba0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 81033e0:	4b36      	ldr	r3, [pc, #216]	; (81034bc <HAL_UART_MspInit+0x194>)
 81033e2:	4a37      	ldr	r2, [pc, #220]	; (81034c0 <HAL_UART_MspInit+0x198>)
 81033e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81033e6:	4b35      	ldr	r3, [pc, #212]	; (81034bc <HAL_UART_MspInit+0x194>)
 81033e8:	222d      	movs	r2, #45	; 0x2d
 81033ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81033ec:	4b33      	ldr	r3, [pc, #204]	; (81034bc <HAL_UART_MspInit+0x194>)
 81033ee:	2200      	movs	r2, #0
 81033f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 81033f2:	4b32      	ldr	r3, [pc, #200]	; (81034bc <HAL_UART_MspInit+0x194>)
 81033f4:	2200      	movs	r2, #0
 81033f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 81033f8:	4b30      	ldr	r3, [pc, #192]	; (81034bc <HAL_UART_MspInit+0x194>)
 81033fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81033fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103400:	4b2e      	ldr	r3, [pc, #184]	; (81034bc <HAL_UART_MspInit+0x194>)
 8103402:	2200      	movs	r2, #0
 8103404:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103406:	4b2d      	ldr	r3, [pc, #180]	; (81034bc <HAL_UART_MspInit+0x194>)
 8103408:	2200      	movs	r2, #0
 810340a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 810340c:	4b2b      	ldr	r3, [pc, #172]	; (81034bc <HAL_UART_MspInit+0x194>)
 810340e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103412:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8103414:	4b29      	ldr	r3, [pc, #164]	; (81034bc <HAL_UART_MspInit+0x194>)
 8103416:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810341a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810341c:	4b27      	ldr	r3, [pc, #156]	; (81034bc <HAL_UART_MspInit+0x194>)
 810341e:	2200      	movs	r2, #0
 8103420:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8103422:	4826      	ldr	r0, [pc, #152]	; (81034bc <HAL_UART_MspInit+0x194>)
 8103424:	f000 fd6a 	bl	8103efc <HAL_DMA_Init>
 8103428:	4603      	mov	r3, r0
 810342a:	2b00      	cmp	r3, #0
 810342c:	d001      	beq.n	8103432 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 810342e:	f7ff fc23 	bl	8102c78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	4a21      	ldr	r2, [pc, #132]	; (81034bc <HAL_UART_MspInit+0x194>)
 8103436:	67da      	str	r2, [r3, #124]	; 0x7c
 8103438:	4a20      	ldr	r2, [pc, #128]	; (81034bc <HAL_UART_MspInit+0x194>)
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 810343e:	4b21      	ldr	r3, [pc, #132]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103440:	4a21      	ldr	r2, [pc, #132]	; (81034c8 <HAL_UART_MspInit+0x1a0>)
 8103442:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8103444:	4b1f      	ldr	r3, [pc, #124]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103446:	222e      	movs	r2, #46	; 0x2e
 8103448:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810344a:	4b1e      	ldr	r3, [pc, #120]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 810344c:	2240      	movs	r2, #64	; 0x40
 810344e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103450:	4b1c      	ldr	r3, [pc, #112]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103452:	2200      	movs	r2, #0
 8103454:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8103456:	4b1b      	ldr	r3, [pc, #108]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810345c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810345e:	4b19      	ldr	r3, [pc, #100]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103460:	2200      	movs	r2, #0
 8103462:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103464:	4b17      	ldr	r3, [pc, #92]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103466:	2200      	movs	r2, #0
 8103468:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 810346a:	4b16      	ldr	r3, [pc, #88]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 810346c:	2200      	movs	r2, #0
 810346e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8103470:	4b14      	ldr	r3, [pc, #80]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103472:	2200      	movs	r2, #0
 8103474:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8103476:	4b13      	ldr	r3, [pc, #76]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103478:	2200      	movs	r2, #0
 810347a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810347c:	4811      	ldr	r0, [pc, #68]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 810347e:	f000 fd3d 	bl	8103efc <HAL_DMA_Init>
 8103482:	4603      	mov	r3, r0
 8103484:	2b00      	cmp	r3, #0
 8103486:	d001      	beq.n	810348c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8103488:	f7ff fbf6 	bl	8102c78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	4a0d      	ldr	r2, [pc, #52]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103490:	679a      	str	r2, [r3, #120]	; 0x78
 8103492:	4a0c      	ldr	r2, [pc, #48]	; (81034c4 <HAL_UART_MspInit+0x19c>)
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8103498:	2200      	movs	r2, #0
 810349a:	2105      	movs	r1, #5
 810349c:	2027      	movs	r0, #39	; 0x27
 810349e:	f000 fce4 	bl	8103e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 81034a2:	2027      	movs	r0, #39	; 0x27
 81034a4:	f000 fcfb 	bl	8103e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 81034a8:	bf00      	nop
 81034aa:	37e0      	adds	r7, #224	; 0xe0
 81034ac:	46bd      	mov	sp, r7
 81034ae:	bd80      	pop	{r7, pc}
 81034b0:	40004800 	.word	0x40004800
 81034b4:	58024400 	.word	0x58024400
 81034b8:	58020c00 	.word	0x58020c00
 81034bc:	10000558 	.word	0x10000558
 81034c0:	400200b8 	.word	0x400200b8
 81034c4:	10000660 	.word	0x10000660
 81034c8:	40020410 	.word	0x40020410

081034cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81034cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103504 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81034d0:	f7fd fe98 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81034d4:	480c      	ldr	r0, [pc, #48]	; (8103508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81034d6:	490d      	ldr	r1, [pc, #52]	; (810350c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81034d8:	4a0d      	ldr	r2, [pc, #52]	; (8103510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81034da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81034dc:	e002      	b.n	81034e4 <LoopCopyDataInit>

081034de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81034de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81034e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81034e2:	3304      	adds	r3, #4

081034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81034e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81034e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81034e8:	d3f9      	bcc.n	81034de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81034ea:	4a0a      	ldr	r2, [pc, #40]	; (8103514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81034ec:	4c0a      	ldr	r4, [pc, #40]	; (8103518 <LoopFillZerobss+0x22>)
  movs r3, #0
 81034ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81034f0:	e001      	b.n	81034f6 <LoopFillZerobss>

081034f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81034f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81034f4:	3204      	adds	r2, #4

081034f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81034f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81034f8:	d3fb      	bcc.n	81034f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81034fa:	f009 f9bf 	bl	810c87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81034fe:	f7ff fa3f 	bl	8102980 <main>
  bx  lr
 8103502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103504:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103508:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810350c:	1000008c 	.word	0x1000008c
  ldr r2, =_sidata
 8103510:	0810d978 	.word	0x0810d978
  ldr r2, =_sbss
 8103514:	1000008c 	.word	0x1000008c
  ldr r4, =_ebss
 8103518:	100006dc 	.word	0x100006dc

0810351c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810351c:	e7fe      	b.n	810351c <ADC3_IRQHandler>
	...

08103520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103520:	b580      	push	{r7, lr}
 8103522:	b082      	sub	sp, #8
 8103524:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103526:	4b28      	ldr	r3, [pc, #160]	; (81035c8 <HAL_Init+0xa8>)
 8103528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810352c:	4a26      	ldr	r2, [pc, #152]	; (81035c8 <HAL_Init+0xa8>)
 810352e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8103532:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8103536:	4b24      	ldr	r3, [pc, #144]	; (81035c8 <HAL_Init+0xa8>)
 8103538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810353c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103540:	603b      	str	r3, [r7, #0]
 8103542:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103544:	4b21      	ldr	r3, [pc, #132]	; (81035cc <HAL_Init+0xac>)
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810354c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103550:	4a1e      	ldr	r2, [pc, #120]	; (81035cc <HAL_Init+0xac>)
 8103552:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103556:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103558:	4b1c      	ldr	r3, [pc, #112]	; (81035cc <HAL_Init+0xac>)
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	4a1b      	ldr	r2, [pc, #108]	; (81035cc <HAL_Init+0xac>)
 810355e:	f043 0301 	orr.w	r3, r3, #1
 8103562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103564:	2003      	movs	r0, #3
 8103566:	f000 fc75 	bl	8103e54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810356a:	f005 f97f 	bl	810886c <HAL_RCC_GetSysClockFreq>
 810356e:	4602      	mov	r2, r0
 8103570:	4b15      	ldr	r3, [pc, #84]	; (81035c8 <HAL_Init+0xa8>)
 8103572:	699b      	ldr	r3, [r3, #24]
 8103574:	0a1b      	lsrs	r3, r3, #8
 8103576:	f003 030f 	and.w	r3, r3, #15
 810357a:	4915      	ldr	r1, [pc, #84]	; (81035d0 <HAL_Init+0xb0>)
 810357c:	5ccb      	ldrb	r3, [r1, r3]
 810357e:	f003 031f 	and.w	r3, r3, #31
 8103582:	fa22 f303 	lsr.w	r3, r2, r3
 8103586:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103588:	4b0f      	ldr	r3, [pc, #60]	; (81035c8 <HAL_Init+0xa8>)
 810358a:	699b      	ldr	r3, [r3, #24]
 810358c:	f003 030f 	and.w	r3, r3, #15
 8103590:	4a0f      	ldr	r2, [pc, #60]	; (81035d0 <HAL_Init+0xb0>)
 8103592:	5cd3      	ldrb	r3, [r2, r3]
 8103594:	f003 031f 	and.w	r3, r3, #31
 8103598:	687a      	ldr	r2, [r7, #4]
 810359a:	fa22 f303 	lsr.w	r3, r2, r3
 810359e:	4a0d      	ldr	r2, [pc, #52]	; (81035d4 <HAL_Init+0xb4>)
 81035a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81035a2:	4b0c      	ldr	r3, [pc, #48]	; (81035d4 <HAL_Init+0xb4>)
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	4a0c      	ldr	r2, [pc, #48]	; (81035d8 <HAL_Init+0xb8>)
 81035a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81035aa:	2000      	movs	r0, #0
 81035ac:	f000 f816 	bl	81035dc <HAL_InitTick>
 81035b0:	4603      	mov	r3, r0
 81035b2:	2b00      	cmp	r3, #0
 81035b4:	d001      	beq.n	81035ba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81035b6:	2301      	movs	r3, #1
 81035b8:	e002      	b.n	81035c0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81035ba:	f7ff fc8b 	bl	8102ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81035be:	2300      	movs	r3, #0
}
 81035c0:	4618      	mov	r0, r3
 81035c2:	3708      	adds	r7, #8
 81035c4:	46bd      	mov	sp, r7
 81035c6:	bd80      	pop	{r7, pc}
 81035c8:	58024400 	.word	0x58024400
 81035cc:	40024400 	.word	0x40024400
 81035d0:	0810d8e4 	.word	0x0810d8e4
 81035d4:	10000004 	.word	0x10000004
 81035d8:	10000000 	.word	0x10000000

081035dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81035dc:	b580      	push	{r7, lr}
 81035de:	b082      	sub	sp, #8
 81035e0:	af00      	add	r7, sp, #0
 81035e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81035e4:	4b15      	ldr	r3, [pc, #84]	; (810363c <HAL_InitTick+0x60>)
 81035e6:	781b      	ldrb	r3, [r3, #0]
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	d101      	bne.n	81035f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81035ec:	2301      	movs	r3, #1
 81035ee:	e021      	b.n	8103634 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81035f0:	4b13      	ldr	r3, [pc, #76]	; (8103640 <HAL_InitTick+0x64>)
 81035f2:	681a      	ldr	r2, [r3, #0]
 81035f4:	4b11      	ldr	r3, [pc, #68]	; (810363c <HAL_InitTick+0x60>)
 81035f6:	781b      	ldrb	r3, [r3, #0]
 81035f8:	4619      	mov	r1, r3
 81035fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81035fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8103602:	fbb2 f3f3 	udiv	r3, r2, r3
 8103606:	4618      	mov	r0, r3
 8103608:	f000 fc57 	bl	8103eba <HAL_SYSTICK_Config>
 810360c:	4603      	mov	r3, r0
 810360e:	2b00      	cmp	r3, #0
 8103610:	d001      	beq.n	8103616 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103612:	2301      	movs	r3, #1
 8103614:	e00e      	b.n	8103634 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	2b0f      	cmp	r3, #15
 810361a:	d80a      	bhi.n	8103632 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810361c:	2200      	movs	r2, #0
 810361e:	6879      	ldr	r1, [r7, #4]
 8103620:	f04f 30ff 	mov.w	r0, #4294967295
 8103624:	f000 fc21 	bl	8103e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103628:	4a06      	ldr	r2, [pc, #24]	; (8103644 <HAL_InitTick+0x68>)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810362e:	2300      	movs	r3, #0
 8103630:	e000      	b.n	8103634 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103632:	2301      	movs	r3, #1
}
 8103634:	4618      	mov	r0, r3
 8103636:	3708      	adds	r7, #8
 8103638:	46bd      	mov	sp, r7
 810363a:	bd80      	pop	{r7, pc}
 810363c:	10000020 	.word	0x10000020
 8103640:	10000000 	.word	0x10000000
 8103644:	1000001c 	.word	0x1000001c

08103648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103648:	b480      	push	{r7}
 810364a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810364c:	4b06      	ldr	r3, [pc, #24]	; (8103668 <HAL_IncTick+0x20>)
 810364e:	781b      	ldrb	r3, [r3, #0]
 8103650:	461a      	mov	r2, r3
 8103652:	4b06      	ldr	r3, [pc, #24]	; (810366c <HAL_IncTick+0x24>)
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4413      	add	r3, r2
 8103658:	4a04      	ldr	r2, [pc, #16]	; (810366c <HAL_IncTick+0x24>)
 810365a:	6013      	str	r3, [r2, #0]
}
 810365c:	bf00      	nop
 810365e:	46bd      	mov	sp, r7
 8103660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103664:	4770      	bx	lr
 8103666:	bf00      	nop
 8103668:	10000020 	.word	0x10000020
 810366c:	100006d8 	.word	0x100006d8

08103670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103670:	b480      	push	{r7}
 8103672:	af00      	add	r7, sp, #0
  return uwTick;
 8103674:	4b03      	ldr	r3, [pc, #12]	; (8103684 <HAL_GetTick+0x14>)
 8103676:	681b      	ldr	r3, [r3, #0]
}
 8103678:	4618      	mov	r0, r3
 810367a:	46bd      	mov	sp, r7
 810367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103680:	4770      	bx	lr
 8103682:	bf00      	nop
 8103684:	100006d8 	.word	0x100006d8

08103688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103688:	b580      	push	{r7, lr}
 810368a:	b084      	sub	sp, #16
 810368c:	af00      	add	r7, sp, #0
 810368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103690:	f7ff ffee 	bl	8103670 <HAL_GetTick>
 8103694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810369a:	68fb      	ldr	r3, [r7, #12]
 810369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036a0:	d005      	beq.n	81036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81036a2:	4b0a      	ldr	r3, [pc, #40]	; (81036cc <HAL_Delay+0x44>)
 81036a4:	781b      	ldrb	r3, [r3, #0]
 81036a6:	461a      	mov	r2, r3
 81036a8:	68fb      	ldr	r3, [r7, #12]
 81036aa:	4413      	add	r3, r2
 81036ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81036ae:	bf00      	nop
 81036b0:	f7ff ffde 	bl	8103670 <HAL_GetTick>
 81036b4:	4602      	mov	r2, r0
 81036b6:	68bb      	ldr	r3, [r7, #8]
 81036b8:	1ad3      	subs	r3, r2, r3
 81036ba:	68fa      	ldr	r2, [r7, #12]
 81036bc:	429a      	cmp	r2, r3
 81036be:	d8f7      	bhi.n	81036b0 <HAL_Delay+0x28>
  {
  }
}
 81036c0:	bf00      	nop
 81036c2:	bf00      	nop
 81036c4:	3710      	adds	r7, #16
 81036c6:	46bd      	mov	sp, r7
 81036c8:	bd80      	pop	{r7, pc}
 81036ca:	bf00      	nop
 81036cc:	10000020 	.word	0x10000020

081036d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81036d0:	b480      	push	{r7}
 81036d2:	b083      	sub	sp, #12
 81036d4:	af00      	add	r7, sp, #0
 81036d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	68db      	ldr	r3, [r3, #12]
 81036dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	d101      	bne.n	81036e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81036e4:	2301      	movs	r3, #1
 81036e6:	e000      	b.n	81036ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81036e8:	2300      	movs	r3, #0
}
 81036ea:	4618      	mov	r0, r3
 81036ec:	370c      	adds	r7, #12
 81036ee:	46bd      	mov	sp, r7
 81036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f4:	4770      	bx	lr

081036f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81036f6:	b480      	push	{r7}
 81036f8:	b083      	sub	sp, #12
 81036fa:	af00      	add	r7, sp, #0
 81036fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103702:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8103706:	2b00      	cmp	r3, #0
 8103708:	d101      	bne.n	810370e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 810370a:	2301      	movs	r3, #1
 810370c:	e000      	b.n	8103710 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 810370e:	2300      	movs	r3, #0
}
 8103710:	4618      	mov	r0, r3
 8103712:	370c      	adds	r7, #12
 8103714:	46bd      	mov	sp, r7
 8103716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810371a:	4770      	bx	lr

0810371c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810371c:	b480      	push	{r7}
 810371e:	b083      	sub	sp, #12
 8103720:	af00      	add	r7, sp, #0
 8103722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	689b      	ldr	r3, [r3, #8]
 8103728:	f003 031f 	and.w	r3, r3, #31
}
 810372c:	4618      	mov	r0, r3
 810372e:	370c      	adds	r7, #12
 8103730:	46bd      	mov	sp, r7
 8103732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103736:	4770      	bx	lr

08103738 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8103738:	b480      	push	{r7}
 810373a:	b083      	sub	sp, #12
 810373c:	af00      	add	r7, sp, #0
 810373e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	689b      	ldr	r3, [r3, #8]
 8103744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8103748:	4618      	mov	r0, r3
 810374a:	370c      	adds	r7, #12
 810374c:	46bd      	mov	sp, r7
 810374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103752:	4770      	bx	lr

08103754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8103754:	b480      	push	{r7}
 8103756:	b083      	sub	sp, #12
 8103758:	af00      	add	r7, sp, #0
 810375a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	689b      	ldr	r3, [r3, #8]
 8103760:	f003 0304 	and.w	r3, r3, #4
 8103764:	2b04      	cmp	r3, #4
 8103766:	d101      	bne.n	810376c <LL_ADC_REG_IsConversionOngoing+0x18>
 8103768:	2301      	movs	r3, #1
 810376a:	e000      	b.n	810376e <LL_ADC_REG_IsConversionOngoing+0x1a>
 810376c:	2300      	movs	r3, #0
}
 810376e:	4618      	mov	r0, r3
 8103770:	370c      	adds	r7, #12
 8103772:	46bd      	mov	sp, r7
 8103774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103778:	4770      	bx	lr

0810377a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810377a:	b480      	push	{r7}
 810377c:	b083      	sub	sp, #12
 810377e:	af00      	add	r7, sp, #0
 8103780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	689b      	ldr	r3, [r3, #8]
 8103786:	f003 0308 	and.w	r3, r3, #8
 810378a:	2b08      	cmp	r3, #8
 810378c:	d101      	bne.n	8103792 <LL_ADC_INJ_IsConversionOngoing+0x18>
 810378e:	2301      	movs	r3, #1
 8103790:	e000      	b.n	8103794 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8103792:	2300      	movs	r3, #0
}
 8103794:	4618      	mov	r0, r3
 8103796:	370c      	adds	r7, #12
 8103798:	46bd      	mov	sp, r7
 810379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810379e:	4770      	bx	lr

081037a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 81037a0:	b580      	push	{r7, lr}
 81037a2:	b08a      	sub	sp, #40	; 0x28
 81037a4:	af00      	add	r7, sp, #0
 81037a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 81037a8:	2300      	movs	r3, #0
 81037aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	685b      	ldr	r3, [r3, #4]
 81037ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	4a87      	ldr	r2, [pc, #540]	; (81039e0 <HAL_ADC_IRQHandler+0x240>)
 81037c2:	4293      	cmp	r3, r2
 81037c4:	d004      	beq.n	81037d0 <HAL_ADC_IRQHandler+0x30>
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	4a86      	ldr	r2, [pc, #536]	; (81039e4 <HAL_ADC_IRQHandler+0x244>)
 81037cc:	4293      	cmp	r3, r2
 81037ce:	d101      	bne.n	81037d4 <HAL_ADC_IRQHandler+0x34>
 81037d0:	4b85      	ldr	r3, [pc, #532]	; (81039e8 <HAL_ADC_IRQHandler+0x248>)
 81037d2:	e000      	b.n	81037d6 <HAL_ADC_IRQHandler+0x36>
 81037d4:	4b85      	ldr	r3, [pc, #532]	; (81039ec <HAL_ADC_IRQHandler+0x24c>)
 81037d6:	4618      	mov	r0, r3
 81037d8:	f7ff ffa0 	bl	810371c <LL_ADC_GetMultimode>
 81037dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 81037de:	69fb      	ldr	r3, [r7, #28]
 81037e0:	f003 0302 	and.w	r3, r3, #2
 81037e4:	2b00      	cmp	r3, #0
 81037e6:	d017      	beq.n	8103818 <HAL_ADC_IRQHandler+0x78>
 81037e8:	69bb      	ldr	r3, [r7, #24]
 81037ea:	f003 0302 	and.w	r3, r3, #2
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	d012      	beq.n	8103818 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037f6:	f003 0310 	and.w	r3, r3, #16
 81037fa:	2b00      	cmp	r3, #0
 81037fc:	d105      	bne.n	810380a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103802:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 810380a:	6878      	ldr	r0, [r7, #4]
 810380c:	f000 fa48 	bl	8103ca0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	2202      	movs	r2, #2
 8103816:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103818:	69fb      	ldr	r3, [r7, #28]
 810381a:	f003 0304 	and.w	r3, r3, #4
 810381e:	2b00      	cmp	r3, #0
 8103820:	d004      	beq.n	810382c <HAL_ADC_IRQHandler+0x8c>
 8103822:	69bb      	ldr	r3, [r7, #24]
 8103824:	f003 0304 	and.w	r3, r3, #4
 8103828:	2b00      	cmp	r3, #0
 810382a:	d10a      	bne.n	8103842 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 810382c:	69fb      	ldr	r3, [r7, #28]
 810382e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103832:	2b00      	cmp	r3, #0
 8103834:	f000 8083 	beq.w	810393e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103838:	69bb      	ldr	r3, [r7, #24]
 810383a:	f003 0308 	and.w	r3, r3, #8
 810383e:	2b00      	cmp	r3, #0
 8103840:	d07d      	beq.n	810393e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103846:	f003 0310 	and.w	r3, r3, #16
 810384a:	2b00      	cmp	r3, #0
 810384c:	d105      	bne.n	810385a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103852:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4618      	mov	r0, r3
 8103860:	f7ff ff36 	bl	81036d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103864:	4603      	mov	r3, r0
 8103866:	2b00      	cmp	r3, #0
 8103868:	d062      	beq.n	8103930 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	4a5d      	ldr	r2, [pc, #372]	; (81039e4 <HAL_ADC_IRQHandler+0x244>)
 8103870:	4293      	cmp	r3, r2
 8103872:	d002      	beq.n	810387a <HAL_ADC_IRQHandler+0xda>
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	e000      	b.n	810387c <HAL_ADC_IRQHandler+0xdc>
 810387a:	4b59      	ldr	r3, [pc, #356]	; (81039e0 <HAL_ADC_IRQHandler+0x240>)
 810387c:	687a      	ldr	r2, [r7, #4]
 810387e:	6812      	ldr	r2, [r2, #0]
 8103880:	4293      	cmp	r3, r2
 8103882:	d008      	beq.n	8103896 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103884:	697b      	ldr	r3, [r7, #20]
 8103886:	2b00      	cmp	r3, #0
 8103888:	d005      	beq.n	8103896 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810388a:	697b      	ldr	r3, [r7, #20]
 810388c:	2b05      	cmp	r3, #5
 810388e:	d002      	beq.n	8103896 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8103890:	697b      	ldr	r3, [r7, #20]
 8103892:	2b09      	cmp	r3, #9
 8103894:	d104      	bne.n	81038a0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	68db      	ldr	r3, [r3, #12]
 810389c:	623b      	str	r3, [r7, #32]
 810389e:	e00c      	b.n	81038ba <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	4a4f      	ldr	r2, [pc, #316]	; (81039e4 <HAL_ADC_IRQHandler+0x244>)
 81038a6:	4293      	cmp	r3, r2
 81038a8:	d002      	beq.n	81038b0 <HAL_ADC_IRQHandler+0x110>
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	e000      	b.n	81038b2 <HAL_ADC_IRQHandler+0x112>
 81038b0:	4b4b      	ldr	r3, [pc, #300]	; (81039e0 <HAL_ADC_IRQHandler+0x240>)
 81038b2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81038b4:	693b      	ldr	r3, [r7, #16]
 81038b6:	68db      	ldr	r3, [r3, #12]
 81038b8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 81038ba:	6a3b      	ldr	r3, [r7, #32]
 81038bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81038c0:	2b00      	cmp	r3, #0
 81038c2:	d135      	bne.n	8103930 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	f003 0308 	and.w	r3, r3, #8
 81038ce:	2b08      	cmp	r3, #8
 81038d0:	d12e      	bne.n	8103930 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	681b      	ldr	r3, [r3, #0]
 81038d6:	4618      	mov	r0, r3
 81038d8:	f7ff ff3c 	bl	8103754 <LL_ADC_REG_IsConversionOngoing>
 81038dc:	4603      	mov	r3, r0
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d11a      	bne.n	8103918 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	681b      	ldr	r3, [r3, #0]
 81038e6:	685a      	ldr	r2, [r3, #4]
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	f022 020c 	bic.w	r2, r2, #12
 81038f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103906:	2b00      	cmp	r3, #0
 8103908:	d112      	bne.n	8103930 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810390e:	f043 0201 	orr.w	r2, r3, #1
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	655a      	str	r2, [r3, #84]	; 0x54
 8103916:	e00b      	b.n	8103930 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810391c:	f043 0210 	orr.w	r2, r3, #16
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103928:	f043 0201 	orr.w	r2, r3, #1
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8103930:	6878      	ldr	r0, [r7, #4]
 8103932:	f000 f96f 	bl	8103c14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	681b      	ldr	r3, [r3, #0]
 810393a:	220c      	movs	r2, #12
 810393c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810393e:	69fb      	ldr	r3, [r7, #28]
 8103940:	f003 0320 	and.w	r3, r3, #32
 8103944:	2b00      	cmp	r3, #0
 8103946:	d004      	beq.n	8103952 <HAL_ADC_IRQHandler+0x1b2>
 8103948:	69bb      	ldr	r3, [r7, #24]
 810394a:	f003 0320 	and.w	r3, r3, #32
 810394e:	2b00      	cmp	r3, #0
 8103950:	d10b      	bne.n	810396a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8103952:	69fb      	ldr	r3, [r7, #28]
 8103954:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8103958:	2b00      	cmp	r3, #0
 810395a:	f000 80a0 	beq.w	8103a9e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 810395e:	69bb      	ldr	r3, [r7, #24]
 8103960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103964:	2b00      	cmp	r3, #0
 8103966:	f000 809a 	beq.w	8103a9e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810396e:	f003 0310 	and.w	r3, r3, #16
 8103972:	2b00      	cmp	r3, #0
 8103974:	d105      	bne.n	8103982 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810397a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	4618      	mov	r0, r3
 8103988:	f7ff feb5 	bl	81036f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 810398c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4618      	mov	r0, r3
 8103994:	f7ff fe9c 	bl	81036d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8103998:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	4a11      	ldr	r2, [pc, #68]	; (81039e4 <HAL_ADC_IRQHandler+0x244>)
 81039a0:	4293      	cmp	r3, r2
 81039a2:	d002      	beq.n	81039aa <HAL_ADC_IRQHandler+0x20a>
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	e000      	b.n	81039ac <HAL_ADC_IRQHandler+0x20c>
 81039aa:	4b0d      	ldr	r3, [pc, #52]	; (81039e0 <HAL_ADC_IRQHandler+0x240>)
 81039ac:	687a      	ldr	r2, [r7, #4]
 81039ae:	6812      	ldr	r2, [r2, #0]
 81039b0:	4293      	cmp	r3, r2
 81039b2:	d008      	beq.n	81039c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81039b4:	697b      	ldr	r3, [r7, #20]
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d005      	beq.n	81039c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 81039ba:	697b      	ldr	r3, [r7, #20]
 81039bc:	2b06      	cmp	r3, #6
 81039be:	d002      	beq.n	81039c6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 81039c0:	697b      	ldr	r3, [r7, #20]
 81039c2:	2b07      	cmp	r3, #7
 81039c4:	d104      	bne.n	81039d0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	681b      	ldr	r3, [r3, #0]
 81039ca:	68db      	ldr	r3, [r3, #12]
 81039cc:	623b      	str	r3, [r7, #32]
 81039ce:	e014      	b.n	81039fa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	4a03      	ldr	r2, [pc, #12]	; (81039e4 <HAL_ADC_IRQHandler+0x244>)
 81039d6:	4293      	cmp	r3, r2
 81039d8:	d00a      	beq.n	81039f0 <HAL_ADC_IRQHandler+0x250>
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	e008      	b.n	81039f2 <HAL_ADC_IRQHandler+0x252>
 81039e0:	40022000 	.word	0x40022000
 81039e4:	40022100 	.word	0x40022100
 81039e8:	40022300 	.word	0x40022300
 81039ec:	58026300 	.word	0x58026300
 81039f0:	4b84      	ldr	r3, [pc, #528]	; (8103c04 <HAL_ADC_IRQHandler+0x464>)
 81039f2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81039f4:	693b      	ldr	r3, [r7, #16]
 81039f6:	68db      	ldr	r3, [r3, #12]
 81039f8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81039fa:	68fb      	ldr	r3, [r7, #12]
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d10c      	bne.n	8103a1a <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103a00:	6a3b      	ldr	r3, [r7, #32]
 8103a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	d142      	bne.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103a0a:	68bb      	ldr	r3, [r7, #8]
 8103a0c:	2b00      	cmp	r3, #0
 8103a0e:	d03f      	beq.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8103a10:	6a3b      	ldr	r3, [r7, #32]
 8103a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8103a16:	2b00      	cmp	r3, #0
 8103a18:	d13a      	bne.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	681b      	ldr	r3, [r3, #0]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103a24:	2b40      	cmp	r3, #64	; 0x40
 8103a26:	d133      	bne.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103a28:	6a3b      	ldr	r3, [r7, #32]
 8103a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d12e      	bne.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4618      	mov	r0, r3
 8103a38:	f7ff fe9f 	bl	810377a <LL_ADC_INJ_IsConversionOngoing>
 8103a3c:	4603      	mov	r3, r0
 8103a3e:	2b00      	cmp	r3, #0
 8103a40:	d11a      	bne.n	8103a78 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	685a      	ldr	r2, [r3, #4]
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8103a50:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	d112      	bne.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a6e:	f043 0201 	orr.w	r2, r3, #1
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	655a      	str	r2, [r3, #84]	; 0x54
 8103a76:	e00b      	b.n	8103a90 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a7c:	f043 0210 	orr.w	r2, r3, #16
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a88:	f043 0201 	orr.w	r2, r3, #1
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8103a90:	6878      	ldr	r0, [r7, #4]
 8103a92:	f000 f8dd 	bl	8103c50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	2260      	movs	r2, #96	; 0x60
 8103a9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8103a9e:	69fb      	ldr	r3, [r7, #28]
 8103aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d011      	beq.n	8103acc <HAL_ADC_IRQHandler+0x32c>
 8103aa8:	69bb      	ldr	r3, [r7, #24]
 8103aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103aae:	2b00      	cmp	r3, #0
 8103ab0:	d00c      	beq.n	8103acc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ab6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8103abe:	6878      	ldr	r0, [r7, #4]
 8103ac0:	f000 f8b2 	bl	8103c28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	2280      	movs	r2, #128	; 0x80
 8103aca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8103acc:	69fb      	ldr	r3, [r7, #28]
 8103ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ad2:	2b00      	cmp	r3, #0
 8103ad4:	d012      	beq.n	8103afc <HAL_ADC_IRQHandler+0x35c>
 8103ad6:	69bb      	ldr	r3, [r7, #24]
 8103ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103adc:	2b00      	cmp	r3, #0
 8103ade:	d00d      	beq.n	8103afc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ae4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8103aec:	6878      	ldr	r0, [r7, #4]
 8103aee:	f000 f8c3 	bl	8103c78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103afa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8103afc:	69fb      	ldr	r3, [r7, #28]
 8103afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d012      	beq.n	8103b2c <HAL_ADC_IRQHandler+0x38c>
 8103b06:	69bb      	ldr	r3, [r7, #24]
 8103b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d00d      	beq.n	8103b2c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8103b1c:	6878      	ldr	r0, [r7, #4]
 8103b1e:	f000 f8b5 	bl	8103c8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103b2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8103b2c:	69fb      	ldr	r3, [r7, #28]
 8103b2e:	f003 0310 	and.w	r3, r3, #16
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d043      	beq.n	8103bbe <HAL_ADC_IRQHandler+0x41e>
 8103b36:	69bb      	ldr	r3, [r7, #24]
 8103b38:	f003 0310 	and.w	r3, r3, #16
 8103b3c:	2b00      	cmp	r3, #0
 8103b3e:	d03e      	beq.n	8103bbe <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103b44:	2b00      	cmp	r3, #0
 8103b46:	d102      	bne.n	8103b4e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8103b48:	2301      	movs	r3, #1
 8103b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8103b4c:	e021      	b.n	8103b92 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8103b4e:	697b      	ldr	r3, [r7, #20]
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d015      	beq.n	8103b80 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	4a2a      	ldr	r2, [pc, #168]	; (8103c04 <HAL_ADC_IRQHandler+0x464>)
 8103b5a:	4293      	cmp	r3, r2
 8103b5c:	d004      	beq.n	8103b68 <HAL_ADC_IRQHandler+0x3c8>
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	681b      	ldr	r3, [r3, #0]
 8103b62:	4a29      	ldr	r2, [pc, #164]	; (8103c08 <HAL_ADC_IRQHandler+0x468>)
 8103b64:	4293      	cmp	r3, r2
 8103b66:	d101      	bne.n	8103b6c <HAL_ADC_IRQHandler+0x3cc>
 8103b68:	4b28      	ldr	r3, [pc, #160]	; (8103c0c <HAL_ADC_IRQHandler+0x46c>)
 8103b6a:	e000      	b.n	8103b6e <HAL_ADC_IRQHandler+0x3ce>
 8103b6c:	4b28      	ldr	r3, [pc, #160]	; (8103c10 <HAL_ADC_IRQHandler+0x470>)
 8103b6e:	4618      	mov	r0, r3
 8103b70:	f7ff fde2 	bl	8103738 <LL_ADC_GetMultiDMATransfer>
 8103b74:	4603      	mov	r3, r0
 8103b76:	2b00      	cmp	r3, #0
 8103b78:	d00b      	beq.n	8103b92 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103b7a:	2301      	movs	r3, #1
 8103b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8103b7e:	e008      	b.n	8103b92 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	68db      	ldr	r3, [r3, #12]
 8103b86:	f003 0303 	and.w	r3, r3, #3
 8103b8a:	2b00      	cmp	r3, #0
 8103b8c:	d001      	beq.n	8103b92 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8103b8e:	2301      	movs	r3, #1
 8103b90:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8103b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103b94:	2b01      	cmp	r3, #1
 8103b96:	d10e      	bne.n	8103bb6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ba8:	f043 0202 	orr.w	r2, r3, #2
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103bb0:	6878      	ldr	r0, [r7, #4]
 8103bb2:	f000 f843 	bl	8103c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	2210      	movs	r2, #16
 8103bbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8103bbe:	69fb      	ldr	r3, [r7, #28]
 8103bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103bc4:	2b00      	cmp	r3, #0
 8103bc6:	d018      	beq.n	8103bfa <HAL_ADC_IRQHandler+0x45a>
 8103bc8:	69bb      	ldr	r3, [r7, #24]
 8103bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	d013      	beq.n	8103bfa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103bd6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103be2:	f043 0208 	orr.w	r2, r3, #8
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103bf2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103bf4:	6878      	ldr	r0, [r7, #4]
 8103bf6:	f000 f835 	bl	8103c64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8103bfa:	bf00      	nop
 8103bfc:	3728      	adds	r7, #40	; 0x28
 8103bfe:	46bd      	mov	sp, r7
 8103c00:	bd80      	pop	{r7, pc}
 8103c02:	bf00      	nop
 8103c04:	40022000 	.word	0x40022000
 8103c08:	40022100 	.word	0x40022100
 8103c0c:	40022300 	.word	0x40022300
 8103c10:	58026300 	.word	0x58026300

08103c14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103c14:	b480      	push	{r7}
 8103c16:	b083      	sub	sp, #12
 8103c18:	af00      	add	r7, sp, #0
 8103c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8103c1c:	bf00      	nop
 8103c1e:	370c      	adds	r7, #12
 8103c20:	46bd      	mov	sp, r7
 8103c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c26:	4770      	bx	lr

08103c28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103c28:	b480      	push	{r7}
 8103c2a:	b083      	sub	sp, #12
 8103c2c:	af00      	add	r7, sp, #0
 8103c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8103c30:	bf00      	nop
 8103c32:	370c      	adds	r7, #12
 8103c34:	46bd      	mov	sp, r7
 8103c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c3a:	4770      	bx	lr

08103c3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8103c3c:	b480      	push	{r7}
 8103c3e:	b083      	sub	sp, #12
 8103c40:	af00      	add	r7, sp, #0
 8103c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8103c44:	bf00      	nop
 8103c46:	370c      	adds	r7, #12
 8103c48:	46bd      	mov	sp, r7
 8103c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c4e:	4770      	bx	lr

08103c50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103c50:	b480      	push	{r7}
 8103c52:	b083      	sub	sp, #12
 8103c54:	af00      	add	r7, sp, #0
 8103c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103c58:	bf00      	nop
 8103c5a:	370c      	adds	r7, #12
 8103c5c:	46bd      	mov	sp, r7
 8103c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c62:	4770      	bx	lr

08103c64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103c64:	b480      	push	{r7}
 8103c66:	b083      	sub	sp, #12
 8103c68:	af00      	add	r7, sp, #0
 8103c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103c6c:	bf00      	nop
 8103c6e:	370c      	adds	r7, #12
 8103c70:	46bd      	mov	sp, r7
 8103c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c76:	4770      	bx	lr

08103c78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8103c78:	b480      	push	{r7}
 8103c7a:	b083      	sub	sp, #12
 8103c7c:	af00      	add	r7, sp, #0
 8103c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103c80:	bf00      	nop
 8103c82:	370c      	adds	r7, #12
 8103c84:	46bd      	mov	sp, r7
 8103c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c8a:	4770      	bx	lr

08103c8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103c8c:	b480      	push	{r7}
 8103c8e:	b083      	sub	sp, #12
 8103c90:	af00      	add	r7, sp, #0
 8103c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103c94:	bf00      	nop
 8103c96:	370c      	adds	r7, #12
 8103c98:	46bd      	mov	sp, r7
 8103c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9e:	4770      	bx	lr

08103ca0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103ca0:	b480      	push	{r7}
 8103ca2:	b083      	sub	sp, #12
 8103ca4:	af00      	add	r7, sp, #0
 8103ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103ca8:	bf00      	nop
 8103caa:	370c      	adds	r7, #12
 8103cac:	46bd      	mov	sp, r7
 8103cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cb2:	4770      	bx	lr

08103cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103cb4:	b480      	push	{r7}
 8103cb6:	b085      	sub	sp, #20
 8103cb8:	af00      	add	r7, sp, #0
 8103cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	f003 0307 	and.w	r3, r3, #7
 8103cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103cc4:	4b0c      	ldr	r3, [pc, #48]	; (8103cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8103cc6:	68db      	ldr	r3, [r3, #12]
 8103cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103cca:	68ba      	ldr	r2, [r7, #8]
 8103ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103cd0:	4013      	ands	r3, r2
 8103cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103cd4:	68fb      	ldr	r3, [r7, #12]
 8103cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103cd8:	68bb      	ldr	r3, [r7, #8]
 8103cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103ce6:	4a04      	ldr	r2, [pc, #16]	; (8103cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8103ce8:	68bb      	ldr	r3, [r7, #8]
 8103cea:	60d3      	str	r3, [r2, #12]
}
 8103cec:	bf00      	nop
 8103cee:	3714      	adds	r7, #20
 8103cf0:	46bd      	mov	sp, r7
 8103cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf6:	4770      	bx	lr
 8103cf8:	e000ed00 	.word	0xe000ed00

08103cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103cfc:	b480      	push	{r7}
 8103cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103d00:	4b04      	ldr	r3, [pc, #16]	; (8103d14 <__NVIC_GetPriorityGrouping+0x18>)
 8103d02:	68db      	ldr	r3, [r3, #12]
 8103d04:	0a1b      	lsrs	r3, r3, #8
 8103d06:	f003 0307 	and.w	r3, r3, #7
}
 8103d0a:	4618      	mov	r0, r3
 8103d0c:	46bd      	mov	sp, r7
 8103d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d12:	4770      	bx	lr
 8103d14:	e000ed00 	.word	0xe000ed00

08103d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103d18:	b480      	push	{r7}
 8103d1a:	b083      	sub	sp, #12
 8103d1c:	af00      	add	r7, sp, #0
 8103d1e:	4603      	mov	r3, r0
 8103d20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	db0b      	blt.n	8103d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103d2a:	88fb      	ldrh	r3, [r7, #6]
 8103d2c:	f003 021f 	and.w	r2, r3, #31
 8103d30:	4907      	ldr	r1, [pc, #28]	; (8103d50 <__NVIC_EnableIRQ+0x38>)
 8103d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103d36:	095b      	lsrs	r3, r3, #5
 8103d38:	2001      	movs	r0, #1
 8103d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8103d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103d42:	bf00      	nop
 8103d44:	370c      	adds	r7, #12
 8103d46:	46bd      	mov	sp, r7
 8103d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d4c:	4770      	bx	lr
 8103d4e:	bf00      	nop
 8103d50:	e000e100 	.word	0xe000e100

08103d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103d54:	b480      	push	{r7}
 8103d56:	b083      	sub	sp, #12
 8103d58:	af00      	add	r7, sp, #0
 8103d5a:	4603      	mov	r3, r0
 8103d5c:	6039      	str	r1, [r7, #0]
 8103d5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103d64:	2b00      	cmp	r3, #0
 8103d66:	db0a      	blt.n	8103d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103d68:	683b      	ldr	r3, [r7, #0]
 8103d6a:	b2da      	uxtb	r2, r3
 8103d6c:	490c      	ldr	r1, [pc, #48]	; (8103da0 <__NVIC_SetPriority+0x4c>)
 8103d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103d72:	0112      	lsls	r2, r2, #4
 8103d74:	b2d2      	uxtb	r2, r2
 8103d76:	440b      	add	r3, r1
 8103d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103d7c:	e00a      	b.n	8103d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103d7e:	683b      	ldr	r3, [r7, #0]
 8103d80:	b2da      	uxtb	r2, r3
 8103d82:	4908      	ldr	r1, [pc, #32]	; (8103da4 <__NVIC_SetPriority+0x50>)
 8103d84:	88fb      	ldrh	r3, [r7, #6]
 8103d86:	f003 030f 	and.w	r3, r3, #15
 8103d8a:	3b04      	subs	r3, #4
 8103d8c:	0112      	lsls	r2, r2, #4
 8103d8e:	b2d2      	uxtb	r2, r2
 8103d90:	440b      	add	r3, r1
 8103d92:	761a      	strb	r2, [r3, #24]
}
 8103d94:	bf00      	nop
 8103d96:	370c      	adds	r7, #12
 8103d98:	46bd      	mov	sp, r7
 8103d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d9e:	4770      	bx	lr
 8103da0:	e000e100 	.word	0xe000e100
 8103da4:	e000ed00 	.word	0xe000ed00

08103da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103da8:	b480      	push	{r7}
 8103daa:	b089      	sub	sp, #36	; 0x24
 8103dac:	af00      	add	r7, sp, #0
 8103dae:	60f8      	str	r0, [r7, #12]
 8103db0:	60b9      	str	r1, [r7, #8]
 8103db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	f003 0307 	and.w	r3, r3, #7
 8103dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103dbc:	69fb      	ldr	r3, [r7, #28]
 8103dbe:	f1c3 0307 	rsb	r3, r3, #7
 8103dc2:	2b04      	cmp	r3, #4
 8103dc4:	bf28      	it	cs
 8103dc6:	2304      	movcs	r3, #4
 8103dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103dca:	69fb      	ldr	r3, [r7, #28]
 8103dcc:	3304      	adds	r3, #4
 8103dce:	2b06      	cmp	r3, #6
 8103dd0:	d902      	bls.n	8103dd8 <NVIC_EncodePriority+0x30>
 8103dd2:	69fb      	ldr	r3, [r7, #28]
 8103dd4:	3b03      	subs	r3, #3
 8103dd6:	e000      	b.n	8103dda <NVIC_EncodePriority+0x32>
 8103dd8:	2300      	movs	r3, #0
 8103dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8103de0:	69bb      	ldr	r3, [r7, #24]
 8103de2:	fa02 f303 	lsl.w	r3, r2, r3
 8103de6:	43da      	mvns	r2, r3
 8103de8:	68bb      	ldr	r3, [r7, #8]
 8103dea:	401a      	ands	r2, r3
 8103dec:	697b      	ldr	r3, [r7, #20]
 8103dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103df0:	f04f 31ff 	mov.w	r1, #4294967295
 8103df4:	697b      	ldr	r3, [r7, #20]
 8103df6:	fa01 f303 	lsl.w	r3, r1, r3
 8103dfa:	43d9      	mvns	r1, r3
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103e00:	4313      	orrs	r3, r2
         );
}
 8103e02:	4618      	mov	r0, r3
 8103e04:	3724      	adds	r7, #36	; 0x24
 8103e06:	46bd      	mov	sp, r7
 8103e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e0c:	4770      	bx	lr
	...

08103e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103e10:	b580      	push	{r7, lr}
 8103e12:	b082      	sub	sp, #8
 8103e14:	af00      	add	r7, sp, #0
 8103e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	3b01      	subs	r3, #1
 8103e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103e20:	d301      	bcc.n	8103e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103e22:	2301      	movs	r3, #1
 8103e24:	e00f      	b.n	8103e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103e26:	4a0a      	ldr	r2, [pc, #40]	; (8103e50 <SysTick_Config+0x40>)
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	3b01      	subs	r3, #1
 8103e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103e2e:	210f      	movs	r1, #15
 8103e30:	f04f 30ff 	mov.w	r0, #4294967295
 8103e34:	f7ff ff8e 	bl	8103d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103e38:	4b05      	ldr	r3, [pc, #20]	; (8103e50 <SysTick_Config+0x40>)
 8103e3a:	2200      	movs	r2, #0
 8103e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103e3e:	4b04      	ldr	r3, [pc, #16]	; (8103e50 <SysTick_Config+0x40>)
 8103e40:	2207      	movs	r2, #7
 8103e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103e44:	2300      	movs	r3, #0
}
 8103e46:	4618      	mov	r0, r3
 8103e48:	3708      	adds	r7, #8
 8103e4a:	46bd      	mov	sp, r7
 8103e4c:	bd80      	pop	{r7, pc}
 8103e4e:	bf00      	nop
 8103e50:	e000e010 	.word	0xe000e010

08103e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103e54:	b580      	push	{r7, lr}
 8103e56:	b082      	sub	sp, #8
 8103e58:	af00      	add	r7, sp, #0
 8103e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103e5c:	6878      	ldr	r0, [r7, #4]
 8103e5e:	f7ff ff29 	bl	8103cb4 <__NVIC_SetPriorityGrouping>
}
 8103e62:	bf00      	nop
 8103e64:	3708      	adds	r7, #8
 8103e66:	46bd      	mov	sp, r7
 8103e68:	bd80      	pop	{r7, pc}

08103e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103e6a:	b580      	push	{r7, lr}
 8103e6c:	b086      	sub	sp, #24
 8103e6e:	af00      	add	r7, sp, #0
 8103e70:	4603      	mov	r3, r0
 8103e72:	60b9      	str	r1, [r7, #8]
 8103e74:	607a      	str	r2, [r7, #4]
 8103e76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103e78:	f7ff ff40 	bl	8103cfc <__NVIC_GetPriorityGrouping>
 8103e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103e7e:	687a      	ldr	r2, [r7, #4]
 8103e80:	68b9      	ldr	r1, [r7, #8]
 8103e82:	6978      	ldr	r0, [r7, #20]
 8103e84:	f7ff ff90 	bl	8103da8 <NVIC_EncodePriority>
 8103e88:	4602      	mov	r2, r0
 8103e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103e8e:	4611      	mov	r1, r2
 8103e90:	4618      	mov	r0, r3
 8103e92:	f7ff ff5f 	bl	8103d54 <__NVIC_SetPriority>
}
 8103e96:	bf00      	nop
 8103e98:	3718      	adds	r7, #24
 8103e9a:	46bd      	mov	sp, r7
 8103e9c:	bd80      	pop	{r7, pc}

08103e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103e9e:	b580      	push	{r7, lr}
 8103ea0:	b082      	sub	sp, #8
 8103ea2:	af00      	add	r7, sp, #0
 8103ea4:	4603      	mov	r3, r0
 8103ea6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103eac:	4618      	mov	r0, r3
 8103eae:	f7ff ff33 	bl	8103d18 <__NVIC_EnableIRQ>
}
 8103eb2:	bf00      	nop
 8103eb4:	3708      	adds	r7, #8
 8103eb6:	46bd      	mov	sp, r7
 8103eb8:	bd80      	pop	{r7, pc}

08103eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103eba:	b580      	push	{r7, lr}
 8103ebc:	b082      	sub	sp, #8
 8103ebe:	af00      	add	r7, sp, #0
 8103ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103ec2:	6878      	ldr	r0, [r7, #4]
 8103ec4:	f7ff ffa4 	bl	8103e10 <SysTick_Config>
 8103ec8:	4603      	mov	r3, r0
}
 8103eca:	4618      	mov	r0, r3
 8103ecc:	3708      	adds	r7, #8
 8103ece:	46bd      	mov	sp, r7
 8103ed0:	bd80      	pop	{r7, pc}
	...

08103ed4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103ed4:	b480      	push	{r7}
 8103ed6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103ed8:	4b07      	ldr	r3, [pc, #28]	; (8103ef8 <HAL_GetCurrentCPUID+0x24>)
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	091b      	lsrs	r3, r3, #4
 8103ede:	f003 030f 	and.w	r3, r3, #15
 8103ee2:	2b07      	cmp	r3, #7
 8103ee4:	d101      	bne.n	8103eea <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103ee6:	2303      	movs	r3, #3
 8103ee8:	e000      	b.n	8103eec <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103eea:	2301      	movs	r3, #1
  }
}
 8103eec:	4618      	mov	r0, r3
 8103eee:	46bd      	mov	sp, r7
 8103ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ef4:	4770      	bx	lr
 8103ef6:	bf00      	nop
 8103ef8:	e000ed00 	.word	0xe000ed00

08103efc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103efc:	b580      	push	{r7, lr}
 8103efe:	b086      	sub	sp, #24
 8103f00:	af00      	add	r7, sp, #0
 8103f02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103f04:	f7ff fbb4 	bl	8103670 <HAL_GetTick>
 8103f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	2b00      	cmp	r3, #0
 8103f0e:	d101      	bne.n	8103f14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103f10:	2301      	movs	r3, #1
 8103f12:	e314      	b.n	810453e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	4a66      	ldr	r2, [pc, #408]	; (81040b4 <HAL_DMA_Init+0x1b8>)
 8103f1a:	4293      	cmp	r3, r2
 8103f1c:	d04a      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	4a65      	ldr	r2, [pc, #404]	; (81040b8 <HAL_DMA_Init+0x1bc>)
 8103f24:	4293      	cmp	r3, r2
 8103f26:	d045      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	4a63      	ldr	r2, [pc, #396]	; (81040bc <HAL_DMA_Init+0x1c0>)
 8103f2e:	4293      	cmp	r3, r2
 8103f30:	d040      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	681b      	ldr	r3, [r3, #0]
 8103f36:	4a62      	ldr	r2, [pc, #392]	; (81040c0 <HAL_DMA_Init+0x1c4>)
 8103f38:	4293      	cmp	r3, r2
 8103f3a:	d03b      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	4a60      	ldr	r2, [pc, #384]	; (81040c4 <HAL_DMA_Init+0x1c8>)
 8103f42:	4293      	cmp	r3, r2
 8103f44:	d036      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	681b      	ldr	r3, [r3, #0]
 8103f4a:	4a5f      	ldr	r2, [pc, #380]	; (81040c8 <HAL_DMA_Init+0x1cc>)
 8103f4c:	4293      	cmp	r3, r2
 8103f4e:	d031      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	4a5d      	ldr	r2, [pc, #372]	; (81040cc <HAL_DMA_Init+0x1d0>)
 8103f56:	4293      	cmp	r3, r2
 8103f58:	d02c      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	4a5c      	ldr	r2, [pc, #368]	; (81040d0 <HAL_DMA_Init+0x1d4>)
 8103f60:	4293      	cmp	r3, r2
 8103f62:	d027      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	4a5a      	ldr	r2, [pc, #360]	; (81040d4 <HAL_DMA_Init+0x1d8>)
 8103f6a:	4293      	cmp	r3, r2
 8103f6c:	d022      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	4a59      	ldr	r2, [pc, #356]	; (81040d8 <HAL_DMA_Init+0x1dc>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d01d      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	4a57      	ldr	r2, [pc, #348]	; (81040dc <HAL_DMA_Init+0x1e0>)
 8103f7e:	4293      	cmp	r3, r2
 8103f80:	d018      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	4a56      	ldr	r2, [pc, #344]	; (81040e0 <HAL_DMA_Init+0x1e4>)
 8103f88:	4293      	cmp	r3, r2
 8103f8a:	d013      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	4a54      	ldr	r2, [pc, #336]	; (81040e4 <HAL_DMA_Init+0x1e8>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d00e      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a53      	ldr	r2, [pc, #332]	; (81040e8 <HAL_DMA_Init+0x1ec>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d009      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	4a51      	ldr	r2, [pc, #324]	; (81040ec <HAL_DMA_Init+0x1f0>)
 8103fa6:	4293      	cmp	r3, r2
 8103fa8:	d004      	beq.n	8103fb4 <HAL_DMA_Init+0xb8>
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	4a50      	ldr	r2, [pc, #320]	; (81040f0 <HAL_DMA_Init+0x1f4>)
 8103fb0:	4293      	cmp	r3, r2
 8103fb2:	d101      	bne.n	8103fb8 <HAL_DMA_Init+0xbc>
 8103fb4:	2301      	movs	r3, #1
 8103fb6:	e000      	b.n	8103fba <HAL_DMA_Init+0xbe>
 8103fb8:	2300      	movs	r3, #0
 8103fba:	2b00      	cmp	r3, #0
 8103fbc:	f000 813b 	beq.w	8104236 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	2200      	movs	r2, #0
 8103fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	2202      	movs	r2, #2
 8103fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	4a37      	ldr	r2, [pc, #220]	; (81040b4 <HAL_DMA_Init+0x1b8>)
 8103fd6:	4293      	cmp	r3, r2
 8103fd8:	d04a      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8103fda:	687b      	ldr	r3, [r7, #4]
 8103fdc:	681b      	ldr	r3, [r3, #0]
 8103fde:	4a36      	ldr	r2, [pc, #216]	; (81040b8 <HAL_DMA_Init+0x1bc>)
 8103fe0:	4293      	cmp	r3, r2
 8103fe2:	d045      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	4a34      	ldr	r2, [pc, #208]	; (81040bc <HAL_DMA_Init+0x1c0>)
 8103fea:	4293      	cmp	r3, r2
 8103fec:	d040      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	4a33      	ldr	r2, [pc, #204]	; (81040c0 <HAL_DMA_Init+0x1c4>)
 8103ff4:	4293      	cmp	r3, r2
 8103ff6:	d03b      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	4a31      	ldr	r2, [pc, #196]	; (81040c4 <HAL_DMA_Init+0x1c8>)
 8103ffe:	4293      	cmp	r3, r2
 8104000:	d036      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	4a30      	ldr	r2, [pc, #192]	; (81040c8 <HAL_DMA_Init+0x1cc>)
 8104008:	4293      	cmp	r3, r2
 810400a:	d031      	beq.n	8104070 <HAL_DMA_Init+0x174>
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	681b      	ldr	r3, [r3, #0]
 8104010:	4a2e      	ldr	r2, [pc, #184]	; (81040cc <HAL_DMA_Init+0x1d0>)
 8104012:	4293      	cmp	r3, r2
 8104014:	d02c      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	4a2d      	ldr	r2, [pc, #180]	; (81040d0 <HAL_DMA_Init+0x1d4>)
 810401c:	4293      	cmp	r3, r2
 810401e:	d027      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	4a2b      	ldr	r2, [pc, #172]	; (81040d4 <HAL_DMA_Init+0x1d8>)
 8104026:	4293      	cmp	r3, r2
 8104028:	d022      	beq.n	8104070 <HAL_DMA_Init+0x174>
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	4a2a      	ldr	r2, [pc, #168]	; (81040d8 <HAL_DMA_Init+0x1dc>)
 8104030:	4293      	cmp	r3, r2
 8104032:	d01d      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	4a28      	ldr	r2, [pc, #160]	; (81040dc <HAL_DMA_Init+0x1e0>)
 810403a:	4293      	cmp	r3, r2
 810403c:	d018      	beq.n	8104070 <HAL_DMA_Init+0x174>
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	4a27      	ldr	r2, [pc, #156]	; (81040e0 <HAL_DMA_Init+0x1e4>)
 8104044:	4293      	cmp	r3, r2
 8104046:	d013      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	4a25      	ldr	r2, [pc, #148]	; (81040e4 <HAL_DMA_Init+0x1e8>)
 810404e:	4293      	cmp	r3, r2
 8104050:	d00e      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4a24      	ldr	r2, [pc, #144]	; (81040e8 <HAL_DMA_Init+0x1ec>)
 8104058:	4293      	cmp	r3, r2
 810405a:	d009      	beq.n	8104070 <HAL_DMA_Init+0x174>
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	4a22      	ldr	r2, [pc, #136]	; (81040ec <HAL_DMA_Init+0x1f0>)
 8104062:	4293      	cmp	r3, r2
 8104064:	d004      	beq.n	8104070 <HAL_DMA_Init+0x174>
 8104066:	687b      	ldr	r3, [r7, #4]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	4a21      	ldr	r2, [pc, #132]	; (81040f0 <HAL_DMA_Init+0x1f4>)
 810406c:	4293      	cmp	r3, r2
 810406e:	d108      	bne.n	8104082 <HAL_DMA_Init+0x186>
 8104070:	687b      	ldr	r3, [r7, #4]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	681a      	ldr	r2, [r3, #0]
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	f022 0201 	bic.w	r2, r2, #1
 810407e:	601a      	str	r2, [r3, #0]
 8104080:	e007      	b.n	8104092 <HAL_DMA_Init+0x196>
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	681a      	ldr	r2, [r3, #0]
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	f022 0201 	bic.w	r2, r2, #1
 8104090:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104092:	e02f      	b.n	81040f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104094:	f7ff faec 	bl	8103670 <HAL_GetTick>
 8104098:	4602      	mov	r2, r0
 810409a:	693b      	ldr	r3, [r7, #16]
 810409c:	1ad3      	subs	r3, r2, r3
 810409e:	2b05      	cmp	r3, #5
 81040a0:	d928      	bls.n	81040f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81040a2:	687b      	ldr	r3, [r7, #4]
 81040a4:	2220      	movs	r2, #32
 81040a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	2203      	movs	r2, #3
 81040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81040b0:	2301      	movs	r3, #1
 81040b2:	e244      	b.n	810453e <HAL_DMA_Init+0x642>
 81040b4:	40020010 	.word	0x40020010
 81040b8:	40020028 	.word	0x40020028
 81040bc:	40020040 	.word	0x40020040
 81040c0:	40020058 	.word	0x40020058
 81040c4:	40020070 	.word	0x40020070
 81040c8:	40020088 	.word	0x40020088
 81040cc:	400200a0 	.word	0x400200a0
 81040d0:	400200b8 	.word	0x400200b8
 81040d4:	40020410 	.word	0x40020410
 81040d8:	40020428 	.word	0x40020428
 81040dc:	40020440 	.word	0x40020440
 81040e0:	40020458 	.word	0x40020458
 81040e4:	40020470 	.word	0x40020470
 81040e8:	40020488 	.word	0x40020488
 81040ec:	400204a0 	.word	0x400204a0
 81040f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81040f4:	687b      	ldr	r3, [r7, #4]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	f003 0301 	and.w	r3, r3, #1
 81040fe:	2b00      	cmp	r3, #0
 8104100:	d1c8      	bne.n	8104094 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	681b      	ldr	r3, [r3, #0]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810410a:	697a      	ldr	r2, [r7, #20]
 810410c:	4b84      	ldr	r3, [pc, #528]	; (8104320 <HAL_DMA_Init+0x424>)
 810410e:	4013      	ands	r3, r2
 8104110:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810411a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	691b      	ldr	r3, [r3, #16]
 8104120:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104126:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	699b      	ldr	r3, [r3, #24]
 810412c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104132:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	6a1b      	ldr	r3, [r3, #32]
 8104138:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810413a:	697a      	ldr	r2, [r7, #20]
 810413c:	4313      	orrs	r3, r2
 810413e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104144:	2b04      	cmp	r3, #4
 8104146:	d107      	bne.n	8104158 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104150:	4313      	orrs	r3, r2
 8104152:	697a      	ldr	r2, [r7, #20]
 8104154:	4313      	orrs	r3, r2
 8104156:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104158:	4b72      	ldr	r3, [pc, #456]	; (8104324 <HAL_DMA_Init+0x428>)
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	0c1b      	lsrs	r3, r3, #16
 810415e:	041b      	lsls	r3, r3, #16
 8104160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104164:	d328      	bcc.n	81041b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	685b      	ldr	r3, [r3, #4]
 810416a:	2b28      	cmp	r3, #40	; 0x28
 810416c:	d903      	bls.n	8104176 <HAL_DMA_Init+0x27a>
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	685b      	ldr	r3, [r3, #4]
 8104172:	2b2e      	cmp	r3, #46	; 0x2e
 8104174:	d917      	bls.n	81041a6 <HAL_DMA_Init+0x2aa>
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	685b      	ldr	r3, [r3, #4]
 810417a:	2b3e      	cmp	r3, #62	; 0x3e
 810417c:	d903      	bls.n	8104186 <HAL_DMA_Init+0x28a>
 810417e:	687b      	ldr	r3, [r7, #4]
 8104180:	685b      	ldr	r3, [r3, #4]
 8104182:	2b42      	cmp	r3, #66	; 0x42
 8104184:	d90f      	bls.n	81041a6 <HAL_DMA_Init+0x2aa>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	685b      	ldr	r3, [r3, #4]
 810418a:	2b46      	cmp	r3, #70	; 0x46
 810418c:	d903      	bls.n	8104196 <HAL_DMA_Init+0x29a>
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	685b      	ldr	r3, [r3, #4]
 8104192:	2b48      	cmp	r3, #72	; 0x48
 8104194:	d907      	bls.n	81041a6 <HAL_DMA_Init+0x2aa>
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	685b      	ldr	r3, [r3, #4]
 810419a:	2b4e      	cmp	r3, #78	; 0x4e
 810419c:	d905      	bls.n	81041aa <HAL_DMA_Init+0x2ae>
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	685b      	ldr	r3, [r3, #4]
 81041a2:	2b52      	cmp	r3, #82	; 0x52
 81041a4:	d801      	bhi.n	81041aa <HAL_DMA_Init+0x2ae>
 81041a6:	2301      	movs	r3, #1
 81041a8:	e000      	b.n	81041ac <HAL_DMA_Init+0x2b0>
 81041aa:	2300      	movs	r3, #0
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	d003      	beq.n	81041b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81041b0:	697b      	ldr	r3, [r7, #20]
 81041b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81041b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	697a      	ldr	r2, [r7, #20]
 81041be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	695b      	ldr	r3, [r3, #20]
 81041c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81041c8:	697b      	ldr	r3, [r7, #20]
 81041ca:	f023 0307 	bic.w	r3, r3, #7
 81041ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041d4:	697a      	ldr	r2, [r7, #20]
 81041d6:	4313      	orrs	r3, r2
 81041d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041de:	2b04      	cmp	r3, #4
 81041e0:	d117      	bne.n	8104212 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041e6:	697a      	ldr	r2, [r7, #20]
 81041e8:	4313      	orrs	r3, r2
 81041ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041f0:	2b00      	cmp	r3, #0
 81041f2:	d00e      	beq.n	8104212 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81041f4:	6878      	ldr	r0, [r7, #4]
 81041f6:	f002 fb49 	bl	810688c <DMA_CheckFifoParam>
 81041fa:	4603      	mov	r3, r0
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	d008      	beq.n	8104212 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	2240      	movs	r2, #64	; 0x40
 8104204:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	2201      	movs	r2, #1
 810420a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810420e:	2301      	movs	r3, #1
 8104210:	e195      	b.n	810453e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	697a      	ldr	r2, [r7, #20]
 8104218:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810421a:	6878      	ldr	r0, [r7, #4]
 810421c:	f002 fa84 	bl	8106728 <DMA_CalcBaseAndBitshift>
 8104220:	4603      	mov	r3, r0
 8104222:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104228:	f003 031f 	and.w	r3, r3, #31
 810422c:	223f      	movs	r2, #63	; 0x3f
 810422e:	409a      	lsls	r2, r3
 8104230:	68bb      	ldr	r3, [r7, #8]
 8104232:	609a      	str	r2, [r3, #8]
 8104234:	e0cb      	b.n	81043ce <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	4a3b      	ldr	r2, [pc, #236]	; (8104328 <HAL_DMA_Init+0x42c>)
 810423c:	4293      	cmp	r3, r2
 810423e:	d022      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	4a39      	ldr	r2, [pc, #228]	; (810432c <HAL_DMA_Init+0x430>)
 8104246:	4293      	cmp	r3, r2
 8104248:	d01d      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	681b      	ldr	r3, [r3, #0]
 810424e:	4a38      	ldr	r2, [pc, #224]	; (8104330 <HAL_DMA_Init+0x434>)
 8104250:	4293      	cmp	r3, r2
 8104252:	d018      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 8104254:	687b      	ldr	r3, [r7, #4]
 8104256:	681b      	ldr	r3, [r3, #0]
 8104258:	4a36      	ldr	r2, [pc, #216]	; (8104334 <HAL_DMA_Init+0x438>)
 810425a:	4293      	cmp	r3, r2
 810425c:	d013      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	4a35      	ldr	r2, [pc, #212]	; (8104338 <HAL_DMA_Init+0x43c>)
 8104264:	4293      	cmp	r3, r2
 8104266:	d00e      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	4a33      	ldr	r2, [pc, #204]	; (810433c <HAL_DMA_Init+0x440>)
 810426e:	4293      	cmp	r3, r2
 8104270:	d009      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 8104272:	687b      	ldr	r3, [r7, #4]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a32      	ldr	r2, [pc, #200]	; (8104340 <HAL_DMA_Init+0x444>)
 8104278:	4293      	cmp	r3, r2
 810427a:	d004      	beq.n	8104286 <HAL_DMA_Init+0x38a>
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a30      	ldr	r2, [pc, #192]	; (8104344 <HAL_DMA_Init+0x448>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d101      	bne.n	810428a <HAL_DMA_Init+0x38e>
 8104286:	2301      	movs	r3, #1
 8104288:	e000      	b.n	810428c <HAL_DMA_Init+0x390>
 810428a:	2300      	movs	r3, #0
 810428c:	2b00      	cmp	r3, #0
 810428e:	f000 8095 	beq.w	81043bc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a24      	ldr	r2, [pc, #144]	; (8104328 <HAL_DMA_Init+0x42c>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d021      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	4a22      	ldr	r2, [pc, #136]	; (810432c <HAL_DMA_Init+0x430>)
 81042a2:	4293      	cmp	r3, r2
 81042a4:	d01c      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	4a21      	ldr	r2, [pc, #132]	; (8104330 <HAL_DMA_Init+0x434>)
 81042ac:	4293      	cmp	r3, r2
 81042ae:	d017      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	4a1f      	ldr	r2, [pc, #124]	; (8104334 <HAL_DMA_Init+0x438>)
 81042b6:	4293      	cmp	r3, r2
 81042b8:	d012      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a1e      	ldr	r2, [pc, #120]	; (8104338 <HAL_DMA_Init+0x43c>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d00d      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	681b      	ldr	r3, [r3, #0]
 81042c8:	4a1c      	ldr	r2, [pc, #112]	; (810433c <HAL_DMA_Init+0x440>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d008      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	4a1b      	ldr	r2, [pc, #108]	; (8104340 <HAL_DMA_Init+0x444>)
 81042d4:	4293      	cmp	r3, r2
 81042d6:	d003      	beq.n	81042e0 <HAL_DMA_Init+0x3e4>
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	4a19      	ldr	r2, [pc, #100]	; (8104344 <HAL_DMA_Init+0x448>)
 81042de:	4293      	cmp	r3, r2
 81042e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	2200      	movs	r2, #0
 81042e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	2202      	movs	r2, #2
 81042ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81042fa:	697b      	ldr	r3, [r7, #20]
 81042fc:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8104300:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8104304:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	689b      	ldr	r3, [r3, #8]
 810430a:	2b40      	cmp	r3, #64	; 0x40
 810430c:	d01c      	beq.n	8104348 <HAL_DMA_Init+0x44c>
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	689b      	ldr	r3, [r3, #8]
 8104312:	2b80      	cmp	r3, #128	; 0x80
 8104314:	d102      	bne.n	810431c <HAL_DMA_Init+0x420>
 8104316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810431a:	e016      	b.n	810434a <HAL_DMA_Init+0x44e>
 810431c:	2300      	movs	r3, #0
 810431e:	e014      	b.n	810434a <HAL_DMA_Init+0x44e>
 8104320:	fe10803f 	.word	0xfe10803f
 8104324:	5c001000 	.word	0x5c001000
 8104328:	58025408 	.word	0x58025408
 810432c:	5802541c 	.word	0x5802541c
 8104330:	58025430 	.word	0x58025430
 8104334:	58025444 	.word	0x58025444
 8104338:	58025458 	.word	0x58025458
 810433c:	5802546c 	.word	0x5802546c
 8104340:	58025480 	.word	0x58025480
 8104344:	58025494 	.word	0x58025494
 8104348:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 810434a:	687a      	ldr	r2, [r7, #4]
 810434c:	68d2      	ldr	r2, [r2, #12]
 810434e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	691b      	ldr	r3, [r3, #16]
 8104356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	695b      	ldr	r3, [r3, #20]
 810435e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8104360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	699b      	ldr	r3, [r3, #24]
 8104366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	69db      	ldr	r3, [r3, #28]
 810436e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8104370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	6a1b      	ldr	r3, [r3, #32]
 8104376:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104378:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810437a:	697a      	ldr	r2, [r7, #20]
 810437c:	4313      	orrs	r3, r2
 810437e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	697a      	ldr	r2, [r7, #20]
 8104386:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	461a      	mov	r2, r3
 810438e:	4b6e      	ldr	r3, [pc, #440]	; (8104548 <HAL_DMA_Init+0x64c>)
 8104390:	4413      	add	r3, r2
 8104392:	4a6e      	ldr	r2, [pc, #440]	; (810454c <HAL_DMA_Init+0x650>)
 8104394:	fba2 2303 	umull	r2, r3, r2, r3
 8104398:	091b      	lsrs	r3, r3, #4
 810439a:	009a      	lsls	r2, r3, #2
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81043a0:	6878      	ldr	r0, [r7, #4]
 81043a2:	f002 f9c1 	bl	8106728 <DMA_CalcBaseAndBitshift>
 81043a6:	4603      	mov	r3, r0
 81043a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043ae:	f003 031f 	and.w	r3, r3, #31
 81043b2:	2201      	movs	r2, #1
 81043b4:	409a      	lsls	r2, r3
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	605a      	str	r2, [r3, #4]
 81043ba:	e008      	b.n	81043ce <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	2240      	movs	r2, #64	; 0x40
 81043c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	2203      	movs	r2, #3
 81043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81043ca:	2301      	movs	r3, #1
 81043cc:	e0b7      	b.n	810453e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	681b      	ldr	r3, [r3, #0]
 81043d2:	4a5f      	ldr	r2, [pc, #380]	; (8104550 <HAL_DMA_Init+0x654>)
 81043d4:	4293      	cmp	r3, r2
 81043d6:	d072      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	4a5d      	ldr	r2, [pc, #372]	; (8104554 <HAL_DMA_Init+0x658>)
 81043de:	4293      	cmp	r3, r2
 81043e0:	d06d      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	4a5c      	ldr	r2, [pc, #368]	; (8104558 <HAL_DMA_Init+0x65c>)
 81043e8:	4293      	cmp	r3, r2
 81043ea:	d068      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	4a5a      	ldr	r2, [pc, #360]	; (810455c <HAL_DMA_Init+0x660>)
 81043f2:	4293      	cmp	r3, r2
 81043f4:	d063      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	681b      	ldr	r3, [r3, #0]
 81043fa:	4a59      	ldr	r2, [pc, #356]	; (8104560 <HAL_DMA_Init+0x664>)
 81043fc:	4293      	cmp	r3, r2
 81043fe:	d05e      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	4a57      	ldr	r2, [pc, #348]	; (8104564 <HAL_DMA_Init+0x668>)
 8104406:	4293      	cmp	r3, r2
 8104408:	d059      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	4a56      	ldr	r2, [pc, #344]	; (8104568 <HAL_DMA_Init+0x66c>)
 8104410:	4293      	cmp	r3, r2
 8104412:	d054      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	4a54      	ldr	r2, [pc, #336]	; (810456c <HAL_DMA_Init+0x670>)
 810441a:	4293      	cmp	r3, r2
 810441c:	d04f      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	4a53      	ldr	r2, [pc, #332]	; (8104570 <HAL_DMA_Init+0x674>)
 8104424:	4293      	cmp	r3, r2
 8104426:	d04a      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	4a51      	ldr	r2, [pc, #324]	; (8104574 <HAL_DMA_Init+0x678>)
 810442e:	4293      	cmp	r3, r2
 8104430:	d045      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	681b      	ldr	r3, [r3, #0]
 8104436:	4a50      	ldr	r2, [pc, #320]	; (8104578 <HAL_DMA_Init+0x67c>)
 8104438:	4293      	cmp	r3, r2
 810443a:	d040      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	4a4e      	ldr	r2, [pc, #312]	; (810457c <HAL_DMA_Init+0x680>)
 8104442:	4293      	cmp	r3, r2
 8104444:	d03b      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	4a4d      	ldr	r2, [pc, #308]	; (8104580 <HAL_DMA_Init+0x684>)
 810444c:	4293      	cmp	r3, r2
 810444e:	d036      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	4a4b      	ldr	r2, [pc, #300]	; (8104584 <HAL_DMA_Init+0x688>)
 8104456:	4293      	cmp	r3, r2
 8104458:	d031      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	681b      	ldr	r3, [r3, #0]
 810445e:	4a4a      	ldr	r2, [pc, #296]	; (8104588 <HAL_DMA_Init+0x68c>)
 8104460:	4293      	cmp	r3, r2
 8104462:	d02c      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	4a48      	ldr	r2, [pc, #288]	; (810458c <HAL_DMA_Init+0x690>)
 810446a:	4293      	cmp	r3, r2
 810446c:	d027      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	681b      	ldr	r3, [r3, #0]
 8104472:	4a47      	ldr	r2, [pc, #284]	; (8104590 <HAL_DMA_Init+0x694>)
 8104474:	4293      	cmp	r3, r2
 8104476:	d022      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	4a45      	ldr	r2, [pc, #276]	; (8104594 <HAL_DMA_Init+0x698>)
 810447e:	4293      	cmp	r3, r2
 8104480:	d01d      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	4a44      	ldr	r2, [pc, #272]	; (8104598 <HAL_DMA_Init+0x69c>)
 8104488:	4293      	cmp	r3, r2
 810448a:	d018      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	681b      	ldr	r3, [r3, #0]
 8104490:	4a42      	ldr	r2, [pc, #264]	; (810459c <HAL_DMA_Init+0x6a0>)
 8104492:	4293      	cmp	r3, r2
 8104494:	d013      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	4a41      	ldr	r2, [pc, #260]	; (81045a0 <HAL_DMA_Init+0x6a4>)
 810449c:	4293      	cmp	r3, r2
 810449e:	d00e      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	681b      	ldr	r3, [r3, #0]
 81044a4:	4a3f      	ldr	r2, [pc, #252]	; (81045a4 <HAL_DMA_Init+0x6a8>)
 81044a6:	4293      	cmp	r3, r2
 81044a8:	d009      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	681b      	ldr	r3, [r3, #0]
 81044ae:	4a3e      	ldr	r2, [pc, #248]	; (81045a8 <HAL_DMA_Init+0x6ac>)
 81044b0:	4293      	cmp	r3, r2
 81044b2:	d004      	beq.n	81044be <HAL_DMA_Init+0x5c2>
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	681b      	ldr	r3, [r3, #0]
 81044b8:	4a3c      	ldr	r2, [pc, #240]	; (81045ac <HAL_DMA_Init+0x6b0>)
 81044ba:	4293      	cmp	r3, r2
 81044bc:	d101      	bne.n	81044c2 <HAL_DMA_Init+0x5c6>
 81044be:	2301      	movs	r3, #1
 81044c0:	e000      	b.n	81044c4 <HAL_DMA_Init+0x5c8>
 81044c2:	2300      	movs	r3, #0
 81044c4:	2b00      	cmp	r3, #0
 81044c6:	d032      	beq.n	810452e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81044c8:	6878      	ldr	r0, [r7, #4]
 81044ca:	f002 fa5b 	bl	8106984 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	689b      	ldr	r3, [r3, #8]
 81044d2:	2b80      	cmp	r3, #128	; 0x80
 81044d4:	d102      	bne.n	81044dc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	2200      	movs	r2, #0
 81044da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	685a      	ldr	r2, [r3, #4]
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044e4:	b2d2      	uxtb	r2, r2
 81044e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044ec:	687a      	ldr	r2, [r7, #4]
 81044ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81044f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	685b      	ldr	r3, [r3, #4]
 81044f6:	2b00      	cmp	r3, #0
 81044f8:	d010      	beq.n	810451c <HAL_DMA_Init+0x620>
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	685b      	ldr	r3, [r3, #4]
 81044fe:	2b08      	cmp	r3, #8
 8104500:	d80c      	bhi.n	810451c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8104502:	6878      	ldr	r0, [r7, #4]
 8104504:	f002 fad8 	bl	8106ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810450c:	2200      	movs	r2, #0
 810450e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104514:	687a      	ldr	r2, [r7, #4]
 8104516:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104518:	605a      	str	r2, [r3, #4]
 810451a:	e008      	b.n	810452e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	2200      	movs	r2, #0
 8104520:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	2200      	movs	r2, #0
 8104526:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	2200      	movs	r2, #0
 810452c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	2200      	movs	r2, #0
 8104532:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	2201      	movs	r2, #1
 8104538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 810453c:	2300      	movs	r3, #0
}
 810453e:	4618      	mov	r0, r3
 8104540:	3718      	adds	r7, #24
 8104542:	46bd      	mov	sp, r7
 8104544:	bd80      	pop	{r7, pc}
 8104546:	bf00      	nop
 8104548:	a7fdabf8 	.word	0xa7fdabf8
 810454c:	cccccccd 	.word	0xcccccccd
 8104550:	40020010 	.word	0x40020010
 8104554:	40020028 	.word	0x40020028
 8104558:	40020040 	.word	0x40020040
 810455c:	40020058 	.word	0x40020058
 8104560:	40020070 	.word	0x40020070
 8104564:	40020088 	.word	0x40020088
 8104568:	400200a0 	.word	0x400200a0
 810456c:	400200b8 	.word	0x400200b8
 8104570:	40020410 	.word	0x40020410
 8104574:	40020428 	.word	0x40020428
 8104578:	40020440 	.word	0x40020440
 810457c:	40020458 	.word	0x40020458
 8104580:	40020470 	.word	0x40020470
 8104584:	40020488 	.word	0x40020488
 8104588:	400204a0 	.word	0x400204a0
 810458c:	400204b8 	.word	0x400204b8
 8104590:	58025408 	.word	0x58025408
 8104594:	5802541c 	.word	0x5802541c
 8104598:	58025430 	.word	0x58025430
 810459c:	58025444 	.word	0x58025444
 81045a0:	58025458 	.word	0x58025458
 81045a4:	5802546c 	.word	0x5802546c
 81045a8:	58025480 	.word	0x58025480
 81045ac:	58025494 	.word	0x58025494

081045b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81045b0:	b580      	push	{r7, lr}
 81045b2:	b086      	sub	sp, #24
 81045b4:	af00      	add	r7, sp, #0
 81045b6:	60f8      	str	r0, [r7, #12]
 81045b8:	60b9      	str	r1, [r7, #8]
 81045ba:	607a      	str	r2, [r7, #4]
 81045bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81045be:	2300      	movs	r3, #0
 81045c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81045c2:	68fb      	ldr	r3, [r7, #12]
 81045c4:	2b00      	cmp	r3, #0
 81045c6:	d101      	bne.n	81045cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 81045c8:	2301      	movs	r3, #1
 81045ca:	e226      	b.n	8104a1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81045d2:	2b01      	cmp	r3, #1
 81045d4:	d101      	bne.n	81045da <HAL_DMA_Start_IT+0x2a>
 81045d6:	2302      	movs	r3, #2
 81045d8:	e21f      	b.n	8104a1a <HAL_DMA_Start_IT+0x46a>
 81045da:	68fb      	ldr	r3, [r7, #12]
 81045dc:	2201      	movs	r2, #1
 81045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81045e8:	b2db      	uxtb	r3, r3
 81045ea:	2b01      	cmp	r3, #1
 81045ec:	f040 820a 	bne.w	8104a04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81045f0:	68fb      	ldr	r3, [r7, #12]
 81045f2:	2202      	movs	r2, #2
 81045f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81045f8:	68fb      	ldr	r3, [r7, #12]
 81045fa:	2200      	movs	r2, #0
 81045fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81045fe:	68fb      	ldr	r3, [r7, #12]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	4a68      	ldr	r2, [pc, #416]	; (81047a4 <HAL_DMA_Start_IT+0x1f4>)
 8104604:	4293      	cmp	r3, r2
 8104606:	d04a      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104608:	68fb      	ldr	r3, [r7, #12]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	4a66      	ldr	r2, [pc, #408]	; (81047a8 <HAL_DMA_Start_IT+0x1f8>)
 810460e:	4293      	cmp	r3, r2
 8104610:	d045      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104612:	68fb      	ldr	r3, [r7, #12]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	4a65      	ldr	r2, [pc, #404]	; (81047ac <HAL_DMA_Start_IT+0x1fc>)
 8104618:	4293      	cmp	r3, r2
 810461a:	d040      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	4a63      	ldr	r2, [pc, #396]	; (81047b0 <HAL_DMA_Start_IT+0x200>)
 8104622:	4293      	cmp	r3, r2
 8104624:	d03b      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104626:	68fb      	ldr	r3, [r7, #12]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	4a62      	ldr	r2, [pc, #392]	; (81047b4 <HAL_DMA_Start_IT+0x204>)
 810462c:	4293      	cmp	r3, r2
 810462e:	d036      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104630:	68fb      	ldr	r3, [r7, #12]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	4a60      	ldr	r2, [pc, #384]	; (81047b8 <HAL_DMA_Start_IT+0x208>)
 8104636:	4293      	cmp	r3, r2
 8104638:	d031      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	4a5f      	ldr	r2, [pc, #380]	; (81047bc <HAL_DMA_Start_IT+0x20c>)
 8104640:	4293      	cmp	r3, r2
 8104642:	d02c      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104644:	68fb      	ldr	r3, [r7, #12]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	4a5d      	ldr	r2, [pc, #372]	; (81047c0 <HAL_DMA_Start_IT+0x210>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d027      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 810464e:	68fb      	ldr	r3, [r7, #12]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	4a5c      	ldr	r2, [pc, #368]	; (81047c4 <HAL_DMA_Start_IT+0x214>)
 8104654:	4293      	cmp	r3, r2
 8104656:	d022      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	4a5a      	ldr	r2, [pc, #360]	; (81047c8 <HAL_DMA_Start_IT+0x218>)
 810465e:	4293      	cmp	r3, r2
 8104660:	d01d      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104662:	68fb      	ldr	r3, [r7, #12]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	4a59      	ldr	r2, [pc, #356]	; (81047cc <HAL_DMA_Start_IT+0x21c>)
 8104668:	4293      	cmp	r3, r2
 810466a:	d018      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 810466c:	68fb      	ldr	r3, [r7, #12]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	4a57      	ldr	r2, [pc, #348]	; (81047d0 <HAL_DMA_Start_IT+0x220>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d013      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	4a56      	ldr	r2, [pc, #344]	; (81047d4 <HAL_DMA_Start_IT+0x224>)
 810467c:	4293      	cmp	r3, r2
 810467e:	d00e      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	4a54      	ldr	r2, [pc, #336]	; (81047d8 <HAL_DMA_Start_IT+0x228>)
 8104686:	4293      	cmp	r3, r2
 8104688:	d009      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 810468a:	68fb      	ldr	r3, [r7, #12]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	4a53      	ldr	r2, [pc, #332]	; (81047dc <HAL_DMA_Start_IT+0x22c>)
 8104690:	4293      	cmp	r3, r2
 8104692:	d004      	beq.n	810469e <HAL_DMA_Start_IT+0xee>
 8104694:	68fb      	ldr	r3, [r7, #12]
 8104696:	681b      	ldr	r3, [r3, #0]
 8104698:	4a51      	ldr	r2, [pc, #324]	; (81047e0 <HAL_DMA_Start_IT+0x230>)
 810469a:	4293      	cmp	r3, r2
 810469c:	d108      	bne.n	81046b0 <HAL_DMA_Start_IT+0x100>
 810469e:	68fb      	ldr	r3, [r7, #12]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	681a      	ldr	r2, [r3, #0]
 81046a4:	68fb      	ldr	r3, [r7, #12]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	f022 0201 	bic.w	r2, r2, #1
 81046ac:	601a      	str	r2, [r3, #0]
 81046ae:	e007      	b.n	81046c0 <HAL_DMA_Start_IT+0x110>
 81046b0:	68fb      	ldr	r3, [r7, #12]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	681a      	ldr	r2, [r3, #0]
 81046b6:	68fb      	ldr	r3, [r7, #12]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	f022 0201 	bic.w	r2, r2, #1
 81046be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81046c0:	683b      	ldr	r3, [r7, #0]
 81046c2:	687a      	ldr	r2, [r7, #4]
 81046c4:	68b9      	ldr	r1, [r7, #8]
 81046c6:	68f8      	ldr	r0, [r7, #12]
 81046c8:	f001 fe82 	bl	81063d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81046cc:	68fb      	ldr	r3, [r7, #12]
 81046ce:	681b      	ldr	r3, [r3, #0]
 81046d0:	4a34      	ldr	r2, [pc, #208]	; (81047a4 <HAL_DMA_Start_IT+0x1f4>)
 81046d2:	4293      	cmp	r3, r2
 81046d4:	d04a      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4a33      	ldr	r2, [pc, #204]	; (81047a8 <HAL_DMA_Start_IT+0x1f8>)
 81046dc:	4293      	cmp	r3, r2
 81046de:	d045      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	4a31      	ldr	r2, [pc, #196]	; (81047ac <HAL_DMA_Start_IT+0x1fc>)
 81046e6:	4293      	cmp	r3, r2
 81046e8:	d040      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	4a30      	ldr	r2, [pc, #192]	; (81047b0 <HAL_DMA_Start_IT+0x200>)
 81046f0:	4293      	cmp	r3, r2
 81046f2:	d03b      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 81046f4:	68fb      	ldr	r3, [r7, #12]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a2e      	ldr	r2, [pc, #184]	; (81047b4 <HAL_DMA_Start_IT+0x204>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d036      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 81046fe:	68fb      	ldr	r3, [r7, #12]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a2d      	ldr	r2, [pc, #180]	; (81047b8 <HAL_DMA_Start_IT+0x208>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d031      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a2b      	ldr	r2, [pc, #172]	; (81047bc <HAL_DMA_Start_IT+0x20c>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d02c      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104712:	68fb      	ldr	r3, [r7, #12]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a2a      	ldr	r2, [pc, #168]	; (81047c0 <HAL_DMA_Start_IT+0x210>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d027      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 810471c:	68fb      	ldr	r3, [r7, #12]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a28      	ldr	r2, [pc, #160]	; (81047c4 <HAL_DMA_Start_IT+0x214>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d022      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104726:	68fb      	ldr	r3, [r7, #12]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	4a27      	ldr	r2, [pc, #156]	; (81047c8 <HAL_DMA_Start_IT+0x218>)
 810472c:	4293      	cmp	r3, r2
 810472e:	d01d      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	4a25      	ldr	r2, [pc, #148]	; (81047cc <HAL_DMA_Start_IT+0x21c>)
 8104736:	4293      	cmp	r3, r2
 8104738:	d018      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 810473a:	68fb      	ldr	r3, [r7, #12]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	4a24      	ldr	r2, [pc, #144]	; (81047d0 <HAL_DMA_Start_IT+0x220>)
 8104740:	4293      	cmp	r3, r2
 8104742:	d013      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104744:	68fb      	ldr	r3, [r7, #12]
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	4a22      	ldr	r2, [pc, #136]	; (81047d4 <HAL_DMA_Start_IT+0x224>)
 810474a:	4293      	cmp	r3, r2
 810474c:	d00e      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 810474e:	68fb      	ldr	r3, [r7, #12]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	4a21      	ldr	r2, [pc, #132]	; (81047d8 <HAL_DMA_Start_IT+0x228>)
 8104754:	4293      	cmp	r3, r2
 8104756:	d009      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104758:	68fb      	ldr	r3, [r7, #12]
 810475a:	681b      	ldr	r3, [r3, #0]
 810475c:	4a1f      	ldr	r2, [pc, #124]	; (81047dc <HAL_DMA_Start_IT+0x22c>)
 810475e:	4293      	cmp	r3, r2
 8104760:	d004      	beq.n	810476c <HAL_DMA_Start_IT+0x1bc>
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	4a1e      	ldr	r2, [pc, #120]	; (81047e0 <HAL_DMA_Start_IT+0x230>)
 8104768:	4293      	cmp	r3, r2
 810476a:	d101      	bne.n	8104770 <HAL_DMA_Start_IT+0x1c0>
 810476c:	2301      	movs	r3, #1
 810476e:	e000      	b.n	8104772 <HAL_DMA_Start_IT+0x1c2>
 8104770:	2300      	movs	r3, #0
 8104772:	2b00      	cmp	r3, #0
 8104774:	d036      	beq.n	81047e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104776:	68fb      	ldr	r3, [r7, #12]
 8104778:	681b      	ldr	r3, [r3, #0]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	f023 021e 	bic.w	r2, r3, #30
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	681b      	ldr	r3, [r3, #0]
 8104784:	f042 0216 	orr.w	r2, r2, #22
 8104788:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 810478a:	68fb      	ldr	r3, [r7, #12]
 810478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810478e:	2b00      	cmp	r3, #0
 8104790:	d03e      	beq.n	8104810 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104792:	68fb      	ldr	r3, [r7, #12]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	681a      	ldr	r2, [r3, #0]
 8104798:	68fb      	ldr	r3, [r7, #12]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	f042 0208 	orr.w	r2, r2, #8
 81047a0:	601a      	str	r2, [r3, #0]
 81047a2:	e035      	b.n	8104810 <HAL_DMA_Start_IT+0x260>
 81047a4:	40020010 	.word	0x40020010
 81047a8:	40020028 	.word	0x40020028
 81047ac:	40020040 	.word	0x40020040
 81047b0:	40020058 	.word	0x40020058
 81047b4:	40020070 	.word	0x40020070
 81047b8:	40020088 	.word	0x40020088
 81047bc:	400200a0 	.word	0x400200a0
 81047c0:	400200b8 	.word	0x400200b8
 81047c4:	40020410 	.word	0x40020410
 81047c8:	40020428 	.word	0x40020428
 81047cc:	40020440 	.word	0x40020440
 81047d0:	40020458 	.word	0x40020458
 81047d4:	40020470 	.word	0x40020470
 81047d8:	40020488 	.word	0x40020488
 81047dc:	400204a0 	.word	0x400204a0
 81047e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81047e4:	68fb      	ldr	r3, [r7, #12]
 81047e6:	681b      	ldr	r3, [r3, #0]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	f023 020e 	bic.w	r2, r3, #14
 81047ee:	68fb      	ldr	r3, [r7, #12]
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	f042 020a 	orr.w	r2, r2, #10
 81047f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d007      	beq.n	8104810 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104800:	68fb      	ldr	r3, [r7, #12]
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	681a      	ldr	r2, [r3, #0]
 8104806:	68fb      	ldr	r3, [r7, #12]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	f042 0204 	orr.w	r2, r2, #4
 810480e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104810:	68fb      	ldr	r3, [r7, #12]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a83      	ldr	r2, [pc, #524]	; (8104a24 <HAL_DMA_Start_IT+0x474>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d072      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a82      	ldr	r2, [pc, #520]	; (8104a28 <HAL_DMA_Start_IT+0x478>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d06d      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104824:	68fb      	ldr	r3, [r7, #12]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a80      	ldr	r2, [pc, #512]	; (8104a2c <HAL_DMA_Start_IT+0x47c>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d068      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 810482e:	68fb      	ldr	r3, [r7, #12]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	4a7f      	ldr	r2, [pc, #508]	; (8104a30 <HAL_DMA_Start_IT+0x480>)
 8104834:	4293      	cmp	r3, r2
 8104836:	d063      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104838:	68fb      	ldr	r3, [r7, #12]
 810483a:	681b      	ldr	r3, [r3, #0]
 810483c:	4a7d      	ldr	r2, [pc, #500]	; (8104a34 <HAL_DMA_Start_IT+0x484>)
 810483e:	4293      	cmp	r3, r2
 8104840:	d05e      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104842:	68fb      	ldr	r3, [r7, #12]
 8104844:	681b      	ldr	r3, [r3, #0]
 8104846:	4a7c      	ldr	r2, [pc, #496]	; (8104a38 <HAL_DMA_Start_IT+0x488>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d059      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 810484c:	68fb      	ldr	r3, [r7, #12]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	4a7a      	ldr	r2, [pc, #488]	; (8104a3c <HAL_DMA_Start_IT+0x48c>)
 8104852:	4293      	cmp	r3, r2
 8104854:	d054      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104856:	68fb      	ldr	r3, [r7, #12]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	4a79      	ldr	r2, [pc, #484]	; (8104a40 <HAL_DMA_Start_IT+0x490>)
 810485c:	4293      	cmp	r3, r2
 810485e:	d04f      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104860:	68fb      	ldr	r3, [r7, #12]
 8104862:	681b      	ldr	r3, [r3, #0]
 8104864:	4a77      	ldr	r2, [pc, #476]	; (8104a44 <HAL_DMA_Start_IT+0x494>)
 8104866:	4293      	cmp	r3, r2
 8104868:	d04a      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 810486a:	68fb      	ldr	r3, [r7, #12]
 810486c:	681b      	ldr	r3, [r3, #0]
 810486e:	4a76      	ldr	r2, [pc, #472]	; (8104a48 <HAL_DMA_Start_IT+0x498>)
 8104870:	4293      	cmp	r3, r2
 8104872:	d045      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104874:	68fb      	ldr	r3, [r7, #12]
 8104876:	681b      	ldr	r3, [r3, #0]
 8104878:	4a74      	ldr	r2, [pc, #464]	; (8104a4c <HAL_DMA_Start_IT+0x49c>)
 810487a:	4293      	cmp	r3, r2
 810487c:	d040      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 810487e:	68fb      	ldr	r3, [r7, #12]
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	4a73      	ldr	r2, [pc, #460]	; (8104a50 <HAL_DMA_Start_IT+0x4a0>)
 8104884:	4293      	cmp	r3, r2
 8104886:	d03b      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104888:	68fb      	ldr	r3, [r7, #12]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	4a71      	ldr	r2, [pc, #452]	; (8104a54 <HAL_DMA_Start_IT+0x4a4>)
 810488e:	4293      	cmp	r3, r2
 8104890:	d036      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 8104892:	68fb      	ldr	r3, [r7, #12]
 8104894:	681b      	ldr	r3, [r3, #0]
 8104896:	4a70      	ldr	r2, [pc, #448]	; (8104a58 <HAL_DMA_Start_IT+0x4a8>)
 8104898:	4293      	cmp	r3, r2
 810489a:	d031      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 810489c:	68fb      	ldr	r3, [r7, #12]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	4a6e      	ldr	r2, [pc, #440]	; (8104a5c <HAL_DMA_Start_IT+0x4ac>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d02c      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048a6:	68fb      	ldr	r3, [r7, #12]
 81048a8:	681b      	ldr	r3, [r3, #0]
 81048aa:	4a6d      	ldr	r2, [pc, #436]	; (8104a60 <HAL_DMA_Start_IT+0x4b0>)
 81048ac:	4293      	cmp	r3, r2
 81048ae:	d027      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048b0:	68fb      	ldr	r3, [r7, #12]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	4a6b      	ldr	r2, [pc, #428]	; (8104a64 <HAL_DMA_Start_IT+0x4b4>)
 81048b6:	4293      	cmp	r3, r2
 81048b8:	d022      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048ba:	68fb      	ldr	r3, [r7, #12]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	4a6a      	ldr	r2, [pc, #424]	; (8104a68 <HAL_DMA_Start_IT+0x4b8>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d01d      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048c4:	68fb      	ldr	r3, [r7, #12]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	4a68      	ldr	r2, [pc, #416]	; (8104a6c <HAL_DMA_Start_IT+0x4bc>)
 81048ca:	4293      	cmp	r3, r2
 81048cc:	d018      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048ce:	68fb      	ldr	r3, [r7, #12]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	4a67      	ldr	r2, [pc, #412]	; (8104a70 <HAL_DMA_Start_IT+0x4c0>)
 81048d4:	4293      	cmp	r3, r2
 81048d6:	d013      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048d8:	68fb      	ldr	r3, [r7, #12]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	4a65      	ldr	r2, [pc, #404]	; (8104a74 <HAL_DMA_Start_IT+0x4c4>)
 81048de:	4293      	cmp	r3, r2
 81048e0:	d00e      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048e2:	68fb      	ldr	r3, [r7, #12]
 81048e4:	681b      	ldr	r3, [r3, #0]
 81048e6:	4a64      	ldr	r2, [pc, #400]	; (8104a78 <HAL_DMA_Start_IT+0x4c8>)
 81048e8:	4293      	cmp	r3, r2
 81048ea:	d009      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048ec:	68fb      	ldr	r3, [r7, #12]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	4a62      	ldr	r2, [pc, #392]	; (8104a7c <HAL_DMA_Start_IT+0x4cc>)
 81048f2:	4293      	cmp	r3, r2
 81048f4:	d004      	beq.n	8104900 <HAL_DMA_Start_IT+0x350>
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	4a61      	ldr	r2, [pc, #388]	; (8104a80 <HAL_DMA_Start_IT+0x4d0>)
 81048fc:	4293      	cmp	r3, r2
 81048fe:	d101      	bne.n	8104904 <HAL_DMA_Start_IT+0x354>
 8104900:	2301      	movs	r3, #1
 8104902:	e000      	b.n	8104906 <HAL_DMA_Start_IT+0x356>
 8104904:	2300      	movs	r3, #0
 8104906:	2b00      	cmp	r3, #0
 8104908:	d01a      	beq.n	8104940 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104914:	2b00      	cmp	r3, #0
 8104916:	d007      	beq.n	8104928 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810491c:	681a      	ldr	r2, [r3, #0]
 810491e:	68fb      	ldr	r3, [r7, #12]
 8104920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104926:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810492c:	2b00      	cmp	r3, #0
 810492e:	d007      	beq.n	8104940 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104934:	681a      	ldr	r2, [r3, #0]
 8104936:	68fb      	ldr	r3, [r7, #12]
 8104938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810493e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104940:	68fb      	ldr	r3, [r7, #12]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	4a37      	ldr	r2, [pc, #220]	; (8104a24 <HAL_DMA_Start_IT+0x474>)
 8104946:	4293      	cmp	r3, r2
 8104948:	d04a      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 810494a:	68fb      	ldr	r3, [r7, #12]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	4a36      	ldr	r2, [pc, #216]	; (8104a28 <HAL_DMA_Start_IT+0x478>)
 8104950:	4293      	cmp	r3, r2
 8104952:	d045      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	681b      	ldr	r3, [r3, #0]
 8104958:	4a34      	ldr	r2, [pc, #208]	; (8104a2c <HAL_DMA_Start_IT+0x47c>)
 810495a:	4293      	cmp	r3, r2
 810495c:	d040      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	4a33      	ldr	r2, [pc, #204]	; (8104a30 <HAL_DMA_Start_IT+0x480>)
 8104964:	4293      	cmp	r3, r2
 8104966:	d03b      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	4a31      	ldr	r2, [pc, #196]	; (8104a34 <HAL_DMA_Start_IT+0x484>)
 810496e:	4293      	cmp	r3, r2
 8104970:	d036      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 8104972:	68fb      	ldr	r3, [r7, #12]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	4a30      	ldr	r2, [pc, #192]	; (8104a38 <HAL_DMA_Start_IT+0x488>)
 8104978:	4293      	cmp	r3, r2
 810497a:	d031      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	4a2e      	ldr	r2, [pc, #184]	; (8104a3c <HAL_DMA_Start_IT+0x48c>)
 8104982:	4293      	cmp	r3, r2
 8104984:	d02c      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	681b      	ldr	r3, [r3, #0]
 810498a:	4a2d      	ldr	r2, [pc, #180]	; (8104a40 <HAL_DMA_Start_IT+0x490>)
 810498c:	4293      	cmp	r3, r2
 810498e:	d027      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 8104990:	68fb      	ldr	r3, [r7, #12]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	4a2b      	ldr	r2, [pc, #172]	; (8104a44 <HAL_DMA_Start_IT+0x494>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d022      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 810499a:	68fb      	ldr	r3, [r7, #12]
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	4a2a      	ldr	r2, [pc, #168]	; (8104a48 <HAL_DMA_Start_IT+0x498>)
 81049a0:	4293      	cmp	r3, r2
 81049a2:	d01d      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	681b      	ldr	r3, [r3, #0]
 81049a8:	4a28      	ldr	r2, [pc, #160]	; (8104a4c <HAL_DMA_Start_IT+0x49c>)
 81049aa:	4293      	cmp	r3, r2
 81049ac:	d018      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	4a27      	ldr	r2, [pc, #156]	; (8104a50 <HAL_DMA_Start_IT+0x4a0>)
 81049b4:	4293      	cmp	r3, r2
 81049b6:	d013      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	4a25      	ldr	r2, [pc, #148]	; (8104a54 <HAL_DMA_Start_IT+0x4a4>)
 81049be:	4293      	cmp	r3, r2
 81049c0:	d00e      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	681b      	ldr	r3, [r3, #0]
 81049c6:	4a24      	ldr	r2, [pc, #144]	; (8104a58 <HAL_DMA_Start_IT+0x4a8>)
 81049c8:	4293      	cmp	r3, r2
 81049ca:	d009      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 81049cc:	68fb      	ldr	r3, [r7, #12]
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	4a22      	ldr	r2, [pc, #136]	; (8104a5c <HAL_DMA_Start_IT+0x4ac>)
 81049d2:	4293      	cmp	r3, r2
 81049d4:	d004      	beq.n	81049e0 <HAL_DMA_Start_IT+0x430>
 81049d6:	68fb      	ldr	r3, [r7, #12]
 81049d8:	681b      	ldr	r3, [r3, #0]
 81049da:	4a21      	ldr	r2, [pc, #132]	; (8104a60 <HAL_DMA_Start_IT+0x4b0>)
 81049dc:	4293      	cmp	r3, r2
 81049de:	d108      	bne.n	81049f2 <HAL_DMA_Start_IT+0x442>
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	681a      	ldr	r2, [r3, #0]
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	f042 0201 	orr.w	r2, r2, #1
 81049ee:	601a      	str	r2, [r3, #0]
 81049f0:	e012      	b.n	8104a18 <HAL_DMA_Start_IT+0x468>
 81049f2:	68fb      	ldr	r3, [r7, #12]
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	681a      	ldr	r2, [r3, #0]
 81049f8:	68fb      	ldr	r3, [r7, #12]
 81049fa:	681b      	ldr	r3, [r3, #0]
 81049fc:	f042 0201 	orr.w	r2, r2, #1
 8104a00:	601a      	str	r2, [r3, #0]
 8104a02:	e009      	b.n	8104a18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	2200      	movs	r2, #0
 8104a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104a12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104a14:	2301      	movs	r3, #1
 8104a16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8104a1a:	4618      	mov	r0, r3
 8104a1c:	3718      	adds	r7, #24
 8104a1e:	46bd      	mov	sp, r7
 8104a20:	bd80      	pop	{r7, pc}
 8104a22:	bf00      	nop
 8104a24:	40020010 	.word	0x40020010
 8104a28:	40020028 	.word	0x40020028
 8104a2c:	40020040 	.word	0x40020040
 8104a30:	40020058 	.word	0x40020058
 8104a34:	40020070 	.word	0x40020070
 8104a38:	40020088 	.word	0x40020088
 8104a3c:	400200a0 	.word	0x400200a0
 8104a40:	400200b8 	.word	0x400200b8
 8104a44:	40020410 	.word	0x40020410
 8104a48:	40020428 	.word	0x40020428
 8104a4c:	40020440 	.word	0x40020440
 8104a50:	40020458 	.word	0x40020458
 8104a54:	40020470 	.word	0x40020470
 8104a58:	40020488 	.word	0x40020488
 8104a5c:	400204a0 	.word	0x400204a0
 8104a60:	400204b8 	.word	0x400204b8
 8104a64:	58025408 	.word	0x58025408
 8104a68:	5802541c 	.word	0x5802541c
 8104a6c:	58025430 	.word	0x58025430
 8104a70:	58025444 	.word	0x58025444
 8104a74:	58025458 	.word	0x58025458
 8104a78:	5802546c 	.word	0x5802546c
 8104a7c:	58025480 	.word	0x58025480
 8104a80:	58025494 	.word	0x58025494

08104a84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104a84:	b580      	push	{r7, lr}
 8104a86:	b086      	sub	sp, #24
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104a8c:	f7fe fdf0 	bl	8103670 <HAL_GetTick>
 8104a90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	d101      	bne.n	8104a9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104a98:	2301      	movs	r3, #1
 8104a9a:	e2dc      	b.n	8105056 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104aa2:	b2db      	uxtb	r3, r3
 8104aa4:	2b02      	cmp	r3, #2
 8104aa6:	d008      	beq.n	8104aba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	2280      	movs	r2, #128	; 0x80
 8104aac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	2200      	movs	r2, #0
 8104ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104ab6:	2301      	movs	r3, #1
 8104ab8:	e2cd      	b.n	8105056 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	4a76      	ldr	r2, [pc, #472]	; (8104c98 <HAL_DMA_Abort+0x214>)
 8104ac0:	4293      	cmp	r3, r2
 8104ac2:	d04a      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	4a74      	ldr	r2, [pc, #464]	; (8104c9c <HAL_DMA_Abort+0x218>)
 8104aca:	4293      	cmp	r3, r2
 8104acc:	d045      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	4a73      	ldr	r2, [pc, #460]	; (8104ca0 <HAL_DMA_Abort+0x21c>)
 8104ad4:	4293      	cmp	r3, r2
 8104ad6:	d040      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	4a71      	ldr	r2, [pc, #452]	; (8104ca4 <HAL_DMA_Abort+0x220>)
 8104ade:	4293      	cmp	r3, r2
 8104ae0:	d03b      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	4a70      	ldr	r2, [pc, #448]	; (8104ca8 <HAL_DMA_Abort+0x224>)
 8104ae8:	4293      	cmp	r3, r2
 8104aea:	d036      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	4a6e      	ldr	r2, [pc, #440]	; (8104cac <HAL_DMA_Abort+0x228>)
 8104af2:	4293      	cmp	r3, r2
 8104af4:	d031      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	4a6d      	ldr	r2, [pc, #436]	; (8104cb0 <HAL_DMA_Abort+0x22c>)
 8104afc:	4293      	cmp	r3, r2
 8104afe:	d02c      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	4a6b      	ldr	r2, [pc, #428]	; (8104cb4 <HAL_DMA_Abort+0x230>)
 8104b06:	4293      	cmp	r3, r2
 8104b08:	d027      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	4a6a      	ldr	r2, [pc, #424]	; (8104cb8 <HAL_DMA_Abort+0x234>)
 8104b10:	4293      	cmp	r3, r2
 8104b12:	d022      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	4a68      	ldr	r2, [pc, #416]	; (8104cbc <HAL_DMA_Abort+0x238>)
 8104b1a:	4293      	cmp	r3, r2
 8104b1c:	d01d      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	4a67      	ldr	r2, [pc, #412]	; (8104cc0 <HAL_DMA_Abort+0x23c>)
 8104b24:	4293      	cmp	r3, r2
 8104b26:	d018      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	4a65      	ldr	r2, [pc, #404]	; (8104cc4 <HAL_DMA_Abort+0x240>)
 8104b2e:	4293      	cmp	r3, r2
 8104b30:	d013      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	4a64      	ldr	r2, [pc, #400]	; (8104cc8 <HAL_DMA_Abort+0x244>)
 8104b38:	4293      	cmp	r3, r2
 8104b3a:	d00e      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	4a62      	ldr	r2, [pc, #392]	; (8104ccc <HAL_DMA_Abort+0x248>)
 8104b42:	4293      	cmp	r3, r2
 8104b44:	d009      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	4a61      	ldr	r2, [pc, #388]	; (8104cd0 <HAL_DMA_Abort+0x24c>)
 8104b4c:	4293      	cmp	r3, r2
 8104b4e:	d004      	beq.n	8104b5a <HAL_DMA_Abort+0xd6>
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	4a5f      	ldr	r2, [pc, #380]	; (8104cd4 <HAL_DMA_Abort+0x250>)
 8104b56:	4293      	cmp	r3, r2
 8104b58:	d101      	bne.n	8104b5e <HAL_DMA_Abort+0xda>
 8104b5a:	2301      	movs	r3, #1
 8104b5c:	e000      	b.n	8104b60 <HAL_DMA_Abort+0xdc>
 8104b5e:	2300      	movs	r3, #0
 8104b60:	2b00      	cmp	r3, #0
 8104b62:	d013      	beq.n	8104b8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	681a      	ldr	r2, [r3, #0]
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	f022 021e 	bic.w	r2, r2, #30
 8104b72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	695a      	ldr	r2, [r3, #20]
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	681b      	ldr	r3, [r3, #0]
 8104b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104b82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	617b      	str	r3, [r7, #20]
 8104b8a:	e00a      	b.n	8104ba2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	681a      	ldr	r2, [r3, #0]
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	681b      	ldr	r3, [r3, #0]
 8104b96:	f022 020e 	bic.w	r2, r2, #14
 8104b9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	681b      	ldr	r3, [r3, #0]
 8104ba0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	4a3c      	ldr	r2, [pc, #240]	; (8104c98 <HAL_DMA_Abort+0x214>)
 8104ba8:	4293      	cmp	r3, r2
 8104baa:	d072      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	4a3a      	ldr	r2, [pc, #232]	; (8104c9c <HAL_DMA_Abort+0x218>)
 8104bb2:	4293      	cmp	r3, r2
 8104bb4:	d06d      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	4a39      	ldr	r2, [pc, #228]	; (8104ca0 <HAL_DMA_Abort+0x21c>)
 8104bbc:	4293      	cmp	r3, r2
 8104bbe:	d068      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	4a37      	ldr	r2, [pc, #220]	; (8104ca4 <HAL_DMA_Abort+0x220>)
 8104bc6:	4293      	cmp	r3, r2
 8104bc8:	d063      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bca:	687b      	ldr	r3, [r7, #4]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	4a36      	ldr	r2, [pc, #216]	; (8104ca8 <HAL_DMA_Abort+0x224>)
 8104bd0:	4293      	cmp	r3, r2
 8104bd2:	d05e      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	4a34      	ldr	r2, [pc, #208]	; (8104cac <HAL_DMA_Abort+0x228>)
 8104bda:	4293      	cmp	r3, r2
 8104bdc:	d059      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	681b      	ldr	r3, [r3, #0]
 8104be2:	4a33      	ldr	r2, [pc, #204]	; (8104cb0 <HAL_DMA_Abort+0x22c>)
 8104be4:	4293      	cmp	r3, r2
 8104be6:	d054      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	681b      	ldr	r3, [r3, #0]
 8104bec:	4a31      	ldr	r2, [pc, #196]	; (8104cb4 <HAL_DMA_Abort+0x230>)
 8104bee:	4293      	cmp	r3, r2
 8104bf0:	d04f      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	681b      	ldr	r3, [r3, #0]
 8104bf6:	4a30      	ldr	r2, [pc, #192]	; (8104cb8 <HAL_DMA_Abort+0x234>)
 8104bf8:	4293      	cmp	r3, r2
 8104bfa:	d04a      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	4a2e      	ldr	r2, [pc, #184]	; (8104cbc <HAL_DMA_Abort+0x238>)
 8104c02:	4293      	cmp	r3, r2
 8104c04:	d045      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	681b      	ldr	r3, [r3, #0]
 8104c0a:	4a2d      	ldr	r2, [pc, #180]	; (8104cc0 <HAL_DMA_Abort+0x23c>)
 8104c0c:	4293      	cmp	r3, r2
 8104c0e:	d040      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c10:	687b      	ldr	r3, [r7, #4]
 8104c12:	681b      	ldr	r3, [r3, #0]
 8104c14:	4a2b      	ldr	r2, [pc, #172]	; (8104cc4 <HAL_DMA_Abort+0x240>)
 8104c16:	4293      	cmp	r3, r2
 8104c18:	d03b      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	681b      	ldr	r3, [r3, #0]
 8104c1e:	4a2a      	ldr	r2, [pc, #168]	; (8104cc8 <HAL_DMA_Abort+0x244>)
 8104c20:	4293      	cmp	r3, r2
 8104c22:	d036      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	681b      	ldr	r3, [r3, #0]
 8104c28:	4a28      	ldr	r2, [pc, #160]	; (8104ccc <HAL_DMA_Abort+0x248>)
 8104c2a:	4293      	cmp	r3, r2
 8104c2c:	d031      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	4a27      	ldr	r2, [pc, #156]	; (8104cd0 <HAL_DMA_Abort+0x24c>)
 8104c34:	4293      	cmp	r3, r2
 8104c36:	d02c      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c38:	687b      	ldr	r3, [r7, #4]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	4a25      	ldr	r2, [pc, #148]	; (8104cd4 <HAL_DMA_Abort+0x250>)
 8104c3e:	4293      	cmp	r3, r2
 8104c40:	d027      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c42:	687b      	ldr	r3, [r7, #4]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	4a24      	ldr	r2, [pc, #144]	; (8104cd8 <HAL_DMA_Abort+0x254>)
 8104c48:	4293      	cmp	r3, r2
 8104c4a:	d022      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	681b      	ldr	r3, [r3, #0]
 8104c50:	4a22      	ldr	r2, [pc, #136]	; (8104cdc <HAL_DMA_Abort+0x258>)
 8104c52:	4293      	cmp	r3, r2
 8104c54:	d01d      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	4a21      	ldr	r2, [pc, #132]	; (8104ce0 <HAL_DMA_Abort+0x25c>)
 8104c5c:	4293      	cmp	r3, r2
 8104c5e:	d018      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4a1f      	ldr	r2, [pc, #124]	; (8104ce4 <HAL_DMA_Abort+0x260>)
 8104c66:	4293      	cmp	r3, r2
 8104c68:	d013      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	4a1e      	ldr	r2, [pc, #120]	; (8104ce8 <HAL_DMA_Abort+0x264>)
 8104c70:	4293      	cmp	r3, r2
 8104c72:	d00e      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	4a1c      	ldr	r2, [pc, #112]	; (8104cec <HAL_DMA_Abort+0x268>)
 8104c7a:	4293      	cmp	r3, r2
 8104c7c:	d009      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	681b      	ldr	r3, [r3, #0]
 8104c82:	4a1b      	ldr	r2, [pc, #108]	; (8104cf0 <HAL_DMA_Abort+0x26c>)
 8104c84:	4293      	cmp	r3, r2
 8104c86:	d004      	beq.n	8104c92 <HAL_DMA_Abort+0x20e>
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	4a19      	ldr	r2, [pc, #100]	; (8104cf4 <HAL_DMA_Abort+0x270>)
 8104c8e:	4293      	cmp	r3, r2
 8104c90:	d132      	bne.n	8104cf8 <HAL_DMA_Abort+0x274>
 8104c92:	2301      	movs	r3, #1
 8104c94:	e031      	b.n	8104cfa <HAL_DMA_Abort+0x276>
 8104c96:	bf00      	nop
 8104c98:	40020010 	.word	0x40020010
 8104c9c:	40020028 	.word	0x40020028
 8104ca0:	40020040 	.word	0x40020040
 8104ca4:	40020058 	.word	0x40020058
 8104ca8:	40020070 	.word	0x40020070
 8104cac:	40020088 	.word	0x40020088
 8104cb0:	400200a0 	.word	0x400200a0
 8104cb4:	400200b8 	.word	0x400200b8
 8104cb8:	40020410 	.word	0x40020410
 8104cbc:	40020428 	.word	0x40020428
 8104cc0:	40020440 	.word	0x40020440
 8104cc4:	40020458 	.word	0x40020458
 8104cc8:	40020470 	.word	0x40020470
 8104ccc:	40020488 	.word	0x40020488
 8104cd0:	400204a0 	.word	0x400204a0
 8104cd4:	400204b8 	.word	0x400204b8
 8104cd8:	58025408 	.word	0x58025408
 8104cdc:	5802541c 	.word	0x5802541c
 8104ce0:	58025430 	.word	0x58025430
 8104ce4:	58025444 	.word	0x58025444
 8104ce8:	58025458 	.word	0x58025458
 8104cec:	5802546c 	.word	0x5802546c
 8104cf0:	58025480 	.word	0x58025480
 8104cf4:	58025494 	.word	0x58025494
 8104cf8:	2300      	movs	r3, #0
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d007      	beq.n	8104d0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d02:	681a      	ldr	r2, [r3, #0]
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	4a6d      	ldr	r2, [pc, #436]	; (8104ec8 <HAL_DMA_Abort+0x444>)
 8104d14:	4293      	cmp	r3, r2
 8104d16:	d04a      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	4a6b      	ldr	r2, [pc, #428]	; (8104ecc <HAL_DMA_Abort+0x448>)
 8104d1e:	4293      	cmp	r3, r2
 8104d20:	d045      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	4a6a      	ldr	r2, [pc, #424]	; (8104ed0 <HAL_DMA_Abort+0x44c>)
 8104d28:	4293      	cmp	r3, r2
 8104d2a:	d040      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	4a68      	ldr	r2, [pc, #416]	; (8104ed4 <HAL_DMA_Abort+0x450>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d03b      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	681b      	ldr	r3, [r3, #0]
 8104d3a:	4a67      	ldr	r2, [pc, #412]	; (8104ed8 <HAL_DMA_Abort+0x454>)
 8104d3c:	4293      	cmp	r3, r2
 8104d3e:	d036      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	4a65      	ldr	r2, [pc, #404]	; (8104edc <HAL_DMA_Abort+0x458>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d031      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	4a64      	ldr	r2, [pc, #400]	; (8104ee0 <HAL_DMA_Abort+0x45c>)
 8104d50:	4293      	cmp	r3, r2
 8104d52:	d02c      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	4a62      	ldr	r2, [pc, #392]	; (8104ee4 <HAL_DMA_Abort+0x460>)
 8104d5a:	4293      	cmp	r3, r2
 8104d5c:	d027      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	4a61      	ldr	r2, [pc, #388]	; (8104ee8 <HAL_DMA_Abort+0x464>)
 8104d64:	4293      	cmp	r3, r2
 8104d66:	d022      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	4a5f      	ldr	r2, [pc, #380]	; (8104eec <HAL_DMA_Abort+0x468>)
 8104d6e:	4293      	cmp	r3, r2
 8104d70:	d01d      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	4a5e      	ldr	r2, [pc, #376]	; (8104ef0 <HAL_DMA_Abort+0x46c>)
 8104d78:	4293      	cmp	r3, r2
 8104d7a:	d018      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	4a5c      	ldr	r2, [pc, #368]	; (8104ef4 <HAL_DMA_Abort+0x470>)
 8104d82:	4293      	cmp	r3, r2
 8104d84:	d013      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	4a5b      	ldr	r2, [pc, #364]	; (8104ef8 <HAL_DMA_Abort+0x474>)
 8104d8c:	4293      	cmp	r3, r2
 8104d8e:	d00e      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	4a59      	ldr	r2, [pc, #356]	; (8104efc <HAL_DMA_Abort+0x478>)
 8104d96:	4293      	cmp	r3, r2
 8104d98:	d009      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	4a58      	ldr	r2, [pc, #352]	; (8104f00 <HAL_DMA_Abort+0x47c>)
 8104da0:	4293      	cmp	r3, r2
 8104da2:	d004      	beq.n	8104dae <HAL_DMA_Abort+0x32a>
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	4a56      	ldr	r2, [pc, #344]	; (8104f04 <HAL_DMA_Abort+0x480>)
 8104daa:	4293      	cmp	r3, r2
 8104dac:	d108      	bne.n	8104dc0 <HAL_DMA_Abort+0x33c>
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	681a      	ldr	r2, [r3, #0]
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	f022 0201 	bic.w	r2, r2, #1
 8104dbc:	601a      	str	r2, [r3, #0]
 8104dbe:	e007      	b.n	8104dd0 <HAL_DMA_Abort+0x34c>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	681a      	ldr	r2, [r3, #0]
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	f022 0201 	bic.w	r2, r2, #1
 8104dce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104dd0:	e013      	b.n	8104dfa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104dd2:	f7fe fc4d 	bl	8103670 <HAL_GetTick>
 8104dd6:	4602      	mov	r2, r0
 8104dd8:	693b      	ldr	r3, [r7, #16]
 8104dda:	1ad3      	subs	r3, r2, r3
 8104ddc:	2b05      	cmp	r3, #5
 8104dde:	d90c      	bls.n	8104dfa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	2220      	movs	r2, #32
 8104de4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	2200      	movs	r2, #0
 8104dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	2203      	movs	r2, #3
 8104df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104df6:	2301      	movs	r3, #1
 8104df8:	e12d      	b.n	8105056 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104dfa:	697b      	ldr	r3, [r7, #20]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	f003 0301 	and.w	r3, r3, #1
 8104e02:	2b00      	cmp	r3, #0
 8104e04:	d1e5      	bne.n	8104dd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a2f      	ldr	r2, [pc, #188]	; (8104ec8 <HAL_DMA_Abort+0x444>)
 8104e0c:	4293      	cmp	r3, r2
 8104e0e:	d04a      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	4a2d      	ldr	r2, [pc, #180]	; (8104ecc <HAL_DMA_Abort+0x448>)
 8104e16:	4293      	cmp	r3, r2
 8104e18:	d045      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	4a2c      	ldr	r2, [pc, #176]	; (8104ed0 <HAL_DMA_Abort+0x44c>)
 8104e20:	4293      	cmp	r3, r2
 8104e22:	d040      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	4a2a      	ldr	r2, [pc, #168]	; (8104ed4 <HAL_DMA_Abort+0x450>)
 8104e2a:	4293      	cmp	r3, r2
 8104e2c:	d03b      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	4a29      	ldr	r2, [pc, #164]	; (8104ed8 <HAL_DMA_Abort+0x454>)
 8104e34:	4293      	cmp	r3, r2
 8104e36:	d036      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	4a27      	ldr	r2, [pc, #156]	; (8104edc <HAL_DMA_Abort+0x458>)
 8104e3e:	4293      	cmp	r3, r2
 8104e40:	d031      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	681b      	ldr	r3, [r3, #0]
 8104e46:	4a26      	ldr	r2, [pc, #152]	; (8104ee0 <HAL_DMA_Abort+0x45c>)
 8104e48:	4293      	cmp	r3, r2
 8104e4a:	d02c      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	4a24      	ldr	r2, [pc, #144]	; (8104ee4 <HAL_DMA_Abort+0x460>)
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d027      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	4a23      	ldr	r2, [pc, #140]	; (8104ee8 <HAL_DMA_Abort+0x464>)
 8104e5c:	4293      	cmp	r3, r2
 8104e5e:	d022      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	4a21      	ldr	r2, [pc, #132]	; (8104eec <HAL_DMA_Abort+0x468>)
 8104e66:	4293      	cmp	r3, r2
 8104e68:	d01d      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	681b      	ldr	r3, [r3, #0]
 8104e6e:	4a20      	ldr	r2, [pc, #128]	; (8104ef0 <HAL_DMA_Abort+0x46c>)
 8104e70:	4293      	cmp	r3, r2
 8104e72:	d018      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	4a1e      	ldr	r2, [pc, #120]	; (8104ef4 <HAL_DMA_Abort+0x470>)
 8104e7a:	4293      	cmp	r3, r2
 8104e7c:	d013      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	4a1d      	ldr	r2, [pc, #116]	; (8104ef8 <HAL_DMA_Abort+0x474>)
 8104e84:	4293      	cmp	r3, r2
 8104e86:	d00e      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	4a1b      	ldr	r2, [pc, #108]	; (8104efc <HAL_DMA_Abort+0x478>)
 8104e8e:	4293      	cmp	r3, r2
 8104e90:	d009      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	681b      	ldr	r3, [r3, #0]
 8104e96:	4a1a      	ldr	r2, [pc, #104]	; (8104f00 <HAL_DMA_Abort+0x47c>)
 8104e98:	4293      	cmp	r3, r2
 8104e9a:	d004      	beq.n	8104ea6 <HAL_DMA_Abort+0x422>
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	4a18      	ldr	r2, [pc, #96]	; (8104f04 <HAL_DMA_Abort+0x480>)
 8104ea2:	4293      	cmp	r3, r2
 8104ea4:	d101      	bne.n	8104eaa <HAL_DMA_Abort+0x426>
 8104ea6:	2301      	movs	r3, #1
 8104ea8:	e000      	b.n	8104eac <HAL_DMA_Abort+0x428>
 8104eaa:	2300      	movs	r3, #0
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d02b      	beq.n	8104f08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104eb4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104eba:	f003 031f 	and.w	r3, r3, #31
 8104ebe:	223f      	movs	r2, #63	; 0x3f
 8104ec0:	409a      	lsls	r2, r3
 8104ec2:	68bb      	ldr	r3, [r7, #8]
 8104ec4:	609a      	str	r2, [r3, #8]
 8104ec6:	e02a      	b.n	8104f1e <HAL_DMA_Abort+0x49a>
 8104ec8:	40020010 	.word	0x40020010
 8104ecc:	40020028 	.word	0x40020028
 8104ed0:	40020040 	.word	0x40020040
 8104ed4:	40020058 	.word	0x40020058
 8104ed8:	40020070 	.word	0x40020070
 8104edc:	40020088 	.word	0x40020088
 8104ee0:	400200a0 	.word	0x400200a0
 8104ee4:	400200b8 	.word	0x400200b8
 8104ee8:	40020410 	.word	0x40020410
 8104eec:	40020428 	.word	0x40020428
 8104ef0:	40020440 	.word	0x40020440
 8104ef4:	40020458 	.word	0x40020458
 8104ef8:	40020470 	.word	0x40020470
 8104efc:	40020488 	.word	0x40020488
 8104f00:	400204a0 	.word	0x400204a0
 8104f04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f12:	f003 031f 	and.w	r3, r3, #31
 8104f16:	2201      	movs	r2, #1
 8104f18:	409a      	lsls	r2, r3
 8104f1a:	68fb      	ldr	r3, [r7, #12]
 8104f1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104f1e:	687b      	ldr	r3, [r7, #4]
 8104f20:	681b      	ldr	r3, [r3, #0]
 8104f22:	4a4f      	ldr	r2, [pc, #316]	; (8105060 <HAL_DMA_Abort+0x5dc>)
 8104f24:	4293      	cmp	r3, r2
 8104f26:	d072      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	4a4d      	ldr	r2, [pc, #308]	; (8105064 <HAL_DMA_Abort+0x5e0>)
 8104f2e:	4293      	cmp	r3, r2
 8104f30:	d06d      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	4a4c      	ldr	r2, [pc, #304]	; (8105068 <HAL_DMA_Abort+0x5e4>)
 8104f38:	4293      	cmp	r3, r2
 8104f3a:	d068      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	4a4a      	ldr	r2, [pc, #296]	; (810506c <HAL_DMA_Abort+0x5e8>)
 8104f42:	4293      	cmp	r3, r2
 8104f44:	d063      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f46:	687b      	ldr	r3, [r7, #4]
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	4a49      	ldr	r2, [pc, #292]	; (8105070 <HAL_DMA_Abort+0x5ec>)
 8104f4c:	4293      	cmp	r3, r2
 8104f4e:	d05e      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	4a47      	ldr	r2, [pc, #284]	; (8105074 <HAL_DMA_Abort+0x5f0>)
 8104f56:	4293      	cmp	r3, r2
 8104f58:	d059      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	681b      	ldr	r3, [r3, #0]
 8104f5e:	4a46      	ldr	r2, [pc, #280]	; (8105078 <HAL_DMA_Abort+0x5f4>)
 8104f60:	4293      	cmp	r3, r2
 8104f62:	d054      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f64:	687b      	ldr	r3, [r7, #4]
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	4a44      	ldr	r2, [pc, #272]	; (810507c <HAL_DMA_Abort+0x5f8>)
 8104f6a:	4293      	cmp	r3, r2
 8104f6c:	d04f      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	4a43      	ldr	r2, [pc, #268]	; (8105080 <HAL_DMA_Abort+0x5fc>)
 8104f74:	4293      	cmp	r3, r2
 8104f76:	d04a      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	4a41      	ldr	r2, [pc, #260]	; (8105084 <HAL_DMA_Abort+0x600>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	d045      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	681b      	ldr	r3, [r3, #0]
 8104f86:	4a40      	ldr	r2, [pc, #256]	; (8105088 <HAL_DMA_Abort+0x604>)
 8104f88:	4293      	cmp	r3, r2
 8104f8a:	d040      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	681b      	ldr	r3, [r3, #0]
 8104f90:	4a3e      	ldr	r2, [pc, #248]	; (810508c <HAL_DMA_Abort+0x608>)
 8104f92:	4293      	cmp	r3, r2
 8104f94:	d03b      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	4a3d      	ldr	r2, [pc, #244]	; (8105090 <HAL_DMA_Abort+0x60c>)
 8104f9c:	4293      	cmp	r3, r2
 8104f9e:	d036      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	4a3b      	ldr	r2, [pc, #236]	; (8105094 <HAL_DMA_Abort+0x610>)
 8104fa6:	4293      	cmp	r3, r2
 8104fa8:	d031      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104faa:	687b      	ldr	r3, [r7, #4]
 8104fac:	681b      	ldr	r3, [r3, #0]
 8104fae:	4a3a      	ldr	r2, [pc, #232]	; (8105098 <HAL_DMA_Abort+0x614>)
 8104fb0:	4293      	cmp	r3, r2
 8104fb2:	d02c      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fb4:	687b      	ldr	r3, [r7, #4]
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	4a38      	ldr	r2, [pc, #224]	; (810509c <HAL_DMA_Abort+0x618>)
 8104fba:	4293      	cmp	r3, r2
 8104fbc:	d027      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	4a37      	ldr	r2, [pc, #220]	; (81050a0 <HAL_DMA_Abort+0x61c>)
 8104fc4:	4293      	cmp	r3, r2
 8104fc6:	d022      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	681b      	ldr	r3, [r3, #0]
 8104fcc:	4a35      	ldr	r2, [pc, #212]	; (81050a4 <HAL_DMA_Abort+0x620>)
 8104fce:	4293      	cmp	r3, r2
 8104fd0:	d01d      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	4a34      	ldr	r2, [pc, #208]	; (81050a8 <HAL_DMA_Abort+0x624>)
 8104fd8:	4293      	cmp	r3, r2
 8104fda:	d018      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fdc:	687b      	ldr	r3, [r7, #4]
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	4a32      	ldr	r2, [pc, #200]	; (81050ac <HAL_DMA_Abort+0x628>)
 8104fe2:	4293      	cmp	r3, r2
 8104fe4:	d013      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a31      	ldr	r2, [pc, #196]	; (81050b0 <HAL_DMA_Abort+0x62c>)
 8104fec:	4293      	cmp	r3, r2
 8104fee:	d00e      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	681b      	ldr	r3, [r3, #0]
 8104ff4:	4a2f      	ldr	r2, [pc, #188]	; (81050b4 <HAL_DMA_Abort+0x630>)
 8104ff6:	4293      	cmp	r3, r2
 8104ff8:	d009      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	4a2e      	ldr	r2, [pc, #184]	; (81050b8 <HAL_DMA_Abort+0x634>)
 8105000:	4293      	cmp	r3, r2
 8105002:	d004      	beq.n	810500e <HAL_DMA_Abort+0x58a>
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	4a2c      	ldr	r2, [pc, #176]	; (81050bc <HAL_DMA_Abort+0x638>)
 810500a:	4293      	cmp	r3, r2
 810500c:	d101      	bne.n	8105012 <HAL_DMA_Abort+0x58e>
 810500e:	2301      	movs	r3, #1
 8105010:	e000      	b.n	8105014 <HAL_DMA_Abort+0x590>
 8105012:	2300      	movs	r3, #0
 8105014:	2b00      	cmp	r3, #0
 8105016:	d015      	beq.n	8105044 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810501c:	687a      	ldr	r2, [r7, #4]
 810501e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105020:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105026:	2b00      	cmp	r3, #0
 8105028:	d00c      	beq.n	8105044 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810502e:	681a      	ldr	r2, [r3, #0]
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105038:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810503e:	687a      	ldr	r2, [r7, #4]
 8105040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105042:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	2200      	movs	r2, #0
 8105048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	2201      	movs	r2, #1
 8105050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8105054:	2300      	movs	r3, #0
}
 8105056:	4618      	mov	r0, r3
 8105058:	3718      	adds	r7, #24
 810505a:	46bd      	mov	sp, r7
 810505c:	bd80      	pop	{r7, pc}
 810505e:	bf00      	nop
 8105060:	40020010 	.word	0x40020010
 8105064:	40020028 	.word	0x40020028
 8105068:	40020040 	.word	0x40020040
 810506c:	40020058 	.word	0x40020058
 8105070:	40020070 	.word	0x40020070
 8105074:	40020088 	.word	0x40020088
 8105078:	400200a0 	.word	0x400200a0
 810507c:	400200b8 	.word	0x400200b8
 8105080:	40020410 	.word	0x40020410
 8105084:	40020428 	.word	0x40020428
 8105088:	40020440 	.word	0x40020440
 810508c:	40020458 	.word	0x40020458
 8105090:	40020470 	.word	0x40020470
 8105094:	40020488 	.word	0x40020488
 8105098:	400204a0 	.word	0x400204a0
 810509c:	400204b8 	.word	0x400204b8
 81050a0:	58025408 	.word	0x58025408
 81050a4:	5802541c 	.word	0x5802541c
 81050a8:	58025430 	.word	0x58025430
 81050ac:	58025444 	.word	0x58025444
 81050b0:	58025458 	.word	0x58025458
 81050b4:	5802546c 	.word	0x5802546c
 81050b8:	58025480 	.word	0x58025480
 81050bc:	58025494 	.word	0x58025494

081050c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81050c0:	b580      	push	{r7, lr}
 81050c2:	b084      	sub	sp, #16
 81050c4:	af00      	add	r7, sp, #0
 81050c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	d101      	bne.n	81050d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81050ce:	2301      	movs	r3, #1
 81050d0:	e205      	b.n	81054de <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81050d2:	687b      	ldr	r3, [r7, #4]
 81050d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81050d8:	b2db      	uxtb	r3, r3
 81050da:	2b02      	cmp	r3, #2
 81050dc:	d004      	beq.n	81050e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	2280      	movs	r2, #128	; 0x80
 81050e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81050e4:	2301      	movs	r3, #1
 81050e6:	e1fa      	b.n	81054de <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	4a8c      	ldr	r2, [pc, #560]	; (8105320 <HAL_DMA_Abort_IT+0x260>)
 81050ee:	4293      	cmp	r3, r2
 81050f0:	d04a      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	4a8b      	ldr	r2, [pc, #556]	; (8105324 <HAL_DMA_Abort_IT+0x264>)
 81050f8:	4293      	cmp	r3, r2
 81050fa:	d045      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	4a89      	ldr	r2, [pc, #548]	; (8105328 <HAL_DMA_Abort_IT+0x268>)
 8105102:	4293      	cmp	r3, r2
 8105104:	d040      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	681b      	ldr	r3, [r3, #0]
 810510a:	4a88      	ldr	r2, [pc, #544]	; (810532c <HAL_DMA_Abort_IT+0x26c>)
 810510c:	4293      	cmp	r3, r2
 810510e:	d03b      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	4a86      	ldr	r2, [pc, #536]	; (8105330 <HAL_DMA_Abort_IT+0x270>)
 8105116:	4293      	cmp	r3, r2
 8105118:	d036      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	4a85      	ldr	r2, [pc, #532]	; (8105334 <HAL_DMA_Abort_IT+0x274>)
 8105120:	4293      	cmp	r3, r2
 8105122:	d031      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	4a83      	ldr	r2, [pc, #524]	; (8105338 <HAL_DMA_Abort_IT+0x278>)
 810512a:	4293      	cmp	r3, r2
 810512c:	d02c      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	4a82      	ldr	r2, [pc, #520]	; (810533c <HAL_DMA_Abort_IT+0x27c>)
 8105134:	4293      	cmp	r3, r2
 8105136:	d027      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	681b      	ldr	r3, [r3, #0]
 810513c:	4a80      	ldr	r2, [pc, #512]	; (8105340 <HAL_DMA_Abort_IT+0x280>)
 810513e:	4293      	cmp	r3, r2
 8105140:	d022      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	4a7f      	ldr	r2, [pc, #508]	; (8105344 <HAL_DMA_Abort_IT+0x284>)
 8105148:	4293      	cmp	r3, r2
 810514a:	d01d      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	4a7d      	ldr	r2, [pc, #500]	; (8105348 <HAL_DMA_Abort_IT+0x288>)
 8105152:	4293      	cmp	r3, r2
 8105154:	d018      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	4a7c      	ldr	r2, [pc, #496]	; (810534c <HAL_DMA_Abort_IT+0x28c>)
 810515c:	4293      	cmp	r3, r2
 810515e:	d013      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	4a7a      	ldr	r2, [pc, #488]	; (8105350 <HAL_DMA_Abort_IT+0x290>)
 8105166:	4293      	cmp	r3, r2
 8105168:	d00e      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	4a79      	ldr	r2, [pc, #484]	; (8105354 <HAL_DMA_Abort_IT+0x294>)
 8105170:	4293      	cmp	r3, r2
 8105172:	d009      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	681b      	ldr	r3, [r3, #0]
 8105178:	4a77      	ldr	r2, [pc, #476]	; (8105358 <HAL_DMA_Abort_IT+0x298>)
 810517a:	4293      	cmp	r3, r2
 810517c:	d004      	beq.n	8105188 <HAL_DMA_Abort_IT+0xc8>
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	4a76      	ldr	r2, [pc, #472]	; (810535c <HAL_DMA_Abort_IT+0x29c>)
 8105184:	4293      	cmp	r3, r2
 8105186:	d101      	bne.n	810518c <HAL_DMA_Abort_IT+0xcc>
 8105188:	2301      	movs	r3, #1
 810518a:	e000      	b.n	810518e <HAL_DMA_Abort_IT+0xce>
 810518c:	2300      	movs	r3, #0
 810518e:	2b00      	cmp	r3, #0
 8105190:	d065      	beq.n	810525e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8105192:	687b      	ldr	r3, [r7, #4]
 8105194:	2204      	movs	r2, #4
 8105196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	4a60      	ldr	r2, [pc, #384]	; (8105320 <HAL_DMA_Abort_IT+0x260>)
 81051a0:	4293      	cmp	r3, r2
 81051a2:	d04a      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a5e      	ldr	r2, [pc, #376]	; (8105324 <HAL_DMA_Abort_IT+0x264>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d045      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a5d      	ldr	r2, [pc, #372]	; (8105328 <HAL_DMA_Abort_IT+0x268>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d040      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a5b      	ldr	r2, [pc, #364]	; (810532c <HAL_DMA_Abort_IT+0x26c>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d03b      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	4a5a      	ldr	r2, [pc, #360]	; (8105330 <HAL_DMA_Abort_IT+0x270>)
 81051c8:	4293      	cmp	r3, r2
 81051ca:	d036      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a58      	ldr	r2, [pc, #352]	; (8105334 <HAL_DMA_Abort_IT+0x274>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d031      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4a57      	ldr	r2, [pc, #348]	; (8105338 <HAL_DMA_Abort_IT+0x278>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d02c      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	4a55      	ldr	r2, [pc, #340]	; (810533c <HAL_DMA_Abort_IT+0x27c>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d027      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	4a54      	ldr	r2, [pc, #336]	; (8105340 <HAL_DMA_Abort_IT+0x280>)
 81051f0:	4293      	cmp	r3, r2
 81051f2:	d022      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	4a52      	ldr	r2, [pc, #328]	; (8105344 <HAL_DMA_Abort_IT+0x284>)
 81051fa:	4293      	cmp	r3, r2
 81051fc:	d01d      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	4a51      	ldr	r2, [pc, #324]	; (8105348 <HAL_DMA_Abort_IT+0x288>)
 8105204:	4293      	cmp	r3, r2
 8105206:	d018      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	4a4f      	ldr	r2, [pc, #316]	; (810534c <HAL_DMA_Abort_IT+0x28c>)
 810520e:	4293      	cmp	r3, r2
 8105210:	d013      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	4a4e      	ldr	r2, [pc, #312]	; (8105350 <HAL_DMA_Abort_IT+0x290>)
 8105218:	4293      	cmp	r3, r2
 810521a:	d00e      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	4a4c      	ldr	r2, [pc, #304]	; (8105354 <HAL_DMA_Abort_IT+0x294>)
 8105222:	4293      	cmp	r3, r2
 8105224:	d009      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	4a4b      	ldr	r2, [pc, #300]	; (8105358 <HAL_DMA_Abort_IT+0x298>)
 810522c:	4293      	cmp	r3, r2
 810522e:	d004      	beq.n	810523a <HAL_DMA_Abort_IT+0x17a>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	4a49      	ldr	r2, [pc, #292]	; (810535c <HAL_DMA_Abort_IT+0x29c>)
 8105236:	4293      	cmp	r3, r2
 8105238:	d108      	bne.n	810524c <HAL_DMA_Abort_IT+0x18c>
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	681b      	ldr	r3, [r3, #0]
 810523e:	681a      	ldr	r2, [r3, #0]
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	f022 0201 	bic.w	r2, r2, #1
 8105248:	601a      	str	r2, [r3, #0]
 810524a:	e147      	b.n	81054dc <HAL_DMA_Abort_IT+0x41c>
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	681a      	ldr	r2, [r3, #0]
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	f022 0201 	bic.w	r2, r2, #1
 810525a:	601a      	str	r2, [r3, #0]
 810525c:	e13e      	b.n	81054dc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	681a      	ldr	r2, [r3, #0]
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	f022 020e 	bic.w	r2, r2, #14
 810526c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	681b      	ldr	r3, [r3, #0]
 8105272:	4a2b      	ldr	r2, [pc, #172]	; (8105320 <HAL_DMA_Abort_IT+0x260>)
 8105274:	4293      	cmp	r3, r2
 8105276:	d04a      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	4a29      	ldr	r2, [pc, #164]	; (8105324 <HAL_DMA_Abort_IT+0x264>)
 810527e:	4293      	cmp	r3, r2
 8105280:	d045      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	681b      	ldr	r3, [r3, #0]
 8105286:	4a28      	ldr	r2, [pc, #160]	; (8105328 <HAL_DMA_Abort_IT+0x268>)
 8105288:	4293      	cmp	r3, r2
 810528a:	d040      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	681b      	ldr	r3, [r3, #0]
 8105290:	4a26      	ldr	r2, [pc, #152]	; (810532c <HAL_DMA_Abort_IT+0x26c>)
 8105292:	4293      	cmp	r3, r2
 8105294:	d03b      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	681b      	ldr	r3, [r3, #0]
 810529a:	4a25      	ldr	r2, [pc, #148]	; (8105330 <HAL_DMA_Abort_IT+0x270>)
 810529c:	4293      	cmp	r3, r2
 810529e:	d036      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	681b      	ldr	r3, [r3, #0]
 81052a4:	4a23      	ldr	r2, [pc, #140]	; (8105334 <HAL_DMA_Abort_IT+0x274>)
 81052a6:	4293      	cmp	r3, r2
 81052a8:	d031      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	4a22      	ldr	r2, [pc, #136]	; (8105338 <HAL_DMA_Abort_IT+0x278>)
 81052b0:	4293      	cmp	r3, r2
 81052b2:	d02c      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	4a20      	ldr	r2, [pc, #128]	; (810533c <HAL_DMA_Abort_IT+0x27c>)
 81052ba:	4293      	cmp	r3, r2
 81052bc:	d027      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	681b      	ldr	r3, [r3, #0]
 81052c2:	4a1f      	ldr	r2, [pc, #124]	; (8105340 <HAL_DMA_Abort_IT+0x280>)
 81052c4:	4293      	cmp	r3, r2
 81052c6:	d022      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	4a1d      	ldr	r2, [pc, #116]	; (8105344 <HAL_DMA_Abort_IT+0x284>)
 81052ce:	4293      	cmp	r3, r2
 81052d0:	d01d      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	681b      	ldr	r3, [r3, #0]
 81052d6:	4a1c      	ldr	r2, [pc, #112]	; (8105348 <HAL_DMA_Abort_IT+0x288>)
 81052d8:	4293      	cmp	r3, r2
 81052da:	d018      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	681b      	ldr	r3, [r3, #0]
 81052e0:	4a1a      	ldr	r2, [pc, #104]	; (810534c <HAL_DMA_Abort_IT+0x28c>)
 81052e2:	4293      	cmp	r3, r2
 81052e4:	d013      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052e6:	687b      	ldr	r3, [r7, #4]
 81052e8:	681b      	ldr	r3, [r3, #0]
 81052ea:	4a19      	ldr	r2, [pc, #100]	; (8105350 <HAL_DMA_Abort_IT+0x290>)
 81052ec:	4293      	cmp	r3, r2
 81052ee:	d00e      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	4a17      	ldr	r2, [pc, #92]	; (8105354 <HAL_DMA_Abort_IT+0x294>)
 81052f6:	4293      	cmp	r3, r2
 81052f8:	d009      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 81052fa:	687b      	ldr	r3, [r7, #4]
 81052fc:	681b      	ldr	r3, [r3, #0]
 81052fe:	4a16      	ldr	r2, [pc, #88]	; (8105358 <HAL_DMA_Abort_IT+0x298>)
 8105300:	4293      	cmp	r3, r2
 8105302:	d004      	beq.n	810530e <HAL_DMA_Abort_IT+0x24e>
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	681b      	ldr	r3, [r3, #0]
 8105308:	4a14      	ldr	r2, [pc, #80]	; (810535c <HAL_DMA_Abort_IT+0x29c>)
 810530a:	4293      	cmp	r3, r2
 810530c:	d128      	bne.n	8105360 <HAL_DMA_Abort_IT+0x2a0>
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	681a      	ldr	r2, [r3, #0]
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	681b      	ldr	r3, [r3, #0]
 8105318:	f022 0201 	bic.w	r2, r2, #1
 810531c:	601a      	str	r2, [r3, #0]
 810531e:	e027      	b.n	8105370 <HAL_DMA_Abort_IT+0x2b0>
 8105320:	40020010 	.word	0x40020010
 8105324:	40020028 	.word	0x40020028
 8105328:	40020040 	.word	0x40020040
 810532c:	40020058 	.word	0x40020058
 8105330:	40020070 	.word	0x40020070
 8105334:	40020088 	.word	0x40020088
 8105338:	400200a0 	.word	0x400200a0
 810533c:	400200b8 	.word	0x400200b8
 8105340:	40020410 	.word	0x40020410
 8105344:	40020428 	.word	0x40020428
 8105348:	40020440 	.word	0x40020440
 810534c:	40020458 	.word	0x40020458
 8105350:	40020470 	.word	0x40020470
 8105354:	40020488 	.word	0x40020488
 8105358:	400204a0 	.word	0x400204a0
 810535c:	400204b8 	.word	0x400204b8
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	681a      	ldr	r2, [r3, #0]
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	f022 0201 	bic.w	r2, r2, #1
 810536e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	4a5c      	ldr	r2, [pc, #368]	; (81054e8 <HAL_DMA_Abort_IT+0x428>)
 8105376:	4293      	cmp	r3, r2
 8105378:	d072      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	4a5b      	ldr	r2, [pc, #364]	; (81054ec <HAL_DMA_Abort_IT+0x42c>)
 8105380:	4293      	cmp	r3, r2
 8105382:	d06d      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	681b      	ldr	r3, [r3, #0]
 8105388:	4a59      	ldr	r2, [pc, #356]	; (81054f0 <HAL_DMA_Abort_IT+0x430>)
 810538a:	4293      	cmp	r3, r2
 810538c:	d068      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	4a58      	ldr	r2, [pc, #352]	; (81054f4 <HAL_DMA_Abort_IT+0x434>)
 8105394:	4293      	cmp	r3, r2
 8105396:	d063      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	4a56      	ldr	r2, [pc, #344]	; (81054f8 <HAL_DMA_Abort_IT+0x438>)
 810539e:	4293      	cmp	r3, r2
 81053a0:	d05e      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	681b      	ldr	r3, [r3, #0]
 81053a6:	4a55      	ldr	r2, [pc, #340]	; (81054fc <HAL_DMA_Abort_IT+0x43c>)
 81053a8:	4293      	cmp	r3, r2
 81053aa:	d059      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053ac:	687b      	ldr	r3, [r7, #4]
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	4a53      	ldr	r2, [pc, #332]	; (8105500 <HAL_DMA_Abort_IT+0x440>)
 81053b2:	4293      	cmp	r3, r2
 81053b4:	d054      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	4a52      	ldr	r2, [pc, #328]	; (8105504 <HAL_DMA_Abort_IT+0x444>)
 81053bc:	4293      	cmp	r3, r2
 81053be:	d04f      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	4a50      	ldr	r2, [pc, #320]	; (8105508 <HAL_DMA_Abort_IT+0x448>)
 81053c6:	4293      	cmp	r3, r2
 81053c8:	d04a      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	4a4f      	ldr	r2, [pc, #316]	; (810550c <HAL_DMA_Abort_IT+0x44c>)
 81053d0:	4293      	cmp	r3, r2
 81053d2:	d045      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	4a4d      	ldr	r2, [pc, #308]	; (8105510 <HAL_DMA_Abort_IT+0x450>)
 81053da:	4293      	cmp	r3, r2
 81053dc:	d040      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	4a4c      	ldr	r2, [pc, #304]	; (8105514 <HAL_DMA_Abort_IT+0x454>)
 81053e4:	4293      	cmp	r3, r2
 81053e6:	d03b      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	4a4a      	ldr	r2, [pc, #296]	; (8105518 <HAL_DMA_Abort_IT+0x458>)
 81053ee:	4293      	cmp	r3, r2
 81053f0:	d036      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	4a49      	ldr	r2, [pc, #292]	; (810551c <HAL_DMA_Abort_IT+0x45c>)
 81053f8:	4293      	cmp	r3, r2
 81053fa:	d031      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	4a47      	ldr	r2, [pc, #284]	; (8105520 <HAL_DMA_Abort_IT+0x460>)
 8105402:	4293      	cmp	r3, r2
 8105404:	d02c      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	681b      	ldr	r3, [r3, #0]
 810540a:	4a46      	ldr	r2, [pc, #280]	; (8105524 <HAL_DMA_Abort_IT+0x464>)
 810540c:	4293      	cmp	r3, r2
 810540e:	d027      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	4a44      	ldr	r2, [pc, #272]	; (8105528 <HAL_DMA_Abort_IT+0x468>)
 8105416:	4293      	cmp	r3, r2
 8105418:	d022      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	681b      	ldr	r3, [r3, #0]
 810541e:	4a43      	ldr	r2, [pc, #268]	; (810552c <HAL_DMA_Abort_IT+0x46c>)
 8105420:	4293      	cmp	r3, r2
 8105422:	d01d      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	4a41      	ldr	r2, [pc, #260]	; (8105530 <HAL_DMA_Abort_IT+0x470>)
 810542a:	4293      	cmp	r3, r2
 810542c:	d018      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	4a40      	ldr	r2, [pc, #256]	; (8105534 <HAL_DMA_Abort_IT+0x474>)
 8105434:	4293      	cmp	r3, r2
 8105436:	d013      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	4a3e      	ldr	r2, [pc, #248]	; (8105538 <HAL_DMA_Abort_IT+0x478>)
 810543e:	4293      	cmp	r3, r2
 8105440:	d00e      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	4a3d      	ldr	r2, [pc, #244]	; (810553c <HAL_DMA_Abort_IT+0x47c>)
 8105448:	4293      	cmp	r3, r2
 810544a:	d009      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	4a3b      	ldr	r2, [pc, #236]	; (8105540 <HAL_DMA_Abort_IT+0x480>)
 8105452:	4293      	cmp	r3, r2
 8105454:	d004      	beq.n	8105460 <HAL_DMA_Abort_IT+0x3a0>
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	681b      	ldr	r3, [r3, #0]
 810545a:	4a3a      	ldr	r2, [pc, #232]	; (8105544 <HAL_DMA_Abort_IT+0x484>)
 810545c:	4293      	cmp	r3, r2
 810545e:	d101      	bne.n	8105464 <HAL_DMA_Abort_IT+0x3a4>
 8105460:	2301      	movs	r3, #1
 8105462:	e000      	b.n	8105466 <HAL_DMA_Abort_IT+0x3a6>
 8105464:	2300      	movs	r3, #0
 8105466:	2b00      	cmp	r3, #0
 8105468:	d028      	beq.n	81054bc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810546a:	687b      	ldr	r3, [r7, #4]
 810546c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810546e:	681a      	ldr	r2, [r3, #0]
 8105470:	687b      	ldr	r3, [r7, #4]
 8105472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105478:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810547a:	687b      	ldr	r3, [r7, #4]
 810547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810547e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105484:	f003 031f 	and.w	r3, r3, #31
 8105488:	2201      	movs	r2, #1
 810548a:	409a      	lsls	r2, r3
 810548c:	68fb      	ldr	r3, [r7, #12]
 810548e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105494:	687a      	ldr	r2, [r7, #4]
 8105496:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105498:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810549e:	2b00      	cmp	r3, #0
 81054a0:	d00c      	beq.n	81054bc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054a6:	681a      	ldr	r2, [r3, #0]
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81054ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81054b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81054b6:	687a      	ldr	r2, [r7, #4]
 81054b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81054ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	2200      	movs	r2, #0
 81054c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	2201      	movs	r2, #1
 81054c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d003      	beq.n	81054dc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81054d8:	6878      	ldr	r0, [r7, #4]
 81054da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81054dc:	2300      	movs	r3, #0
}
 81054de:	4618      	mov	r0, r3
 81054e0:	3710      	adds	r7, #16
 81054e2:	46bd      	mov	sp, r7
 81054e4:	bd80      	pop	{r7, pc}
 81054e6:	bf00      	nop
 81054e8:	40020010 	.word	0x40020010
 81054ec:	40020028 	.word	0x40020028
 81054f0:	40020040 	.word	0x40020040
 81054f4:	40020058 	.word	0x40020058
 81054f8:	40020070 	.word	0x40020070
 81054fc:	40020088 	.word	0x40020088
 8105500:	400200a0 	.word	0x400200a0
 8105504:	400200b8 	.word	0x400200b8
 8105508:	40020410 	.word	0x40020410
 810550c:	40020428 	.word	0x40020428
 8105510:	40020440 	.word	0x40020440
 8105514:	40020458 	.word	0x40020458
 8105518:	40020470 	.word	0x40020470
 810551c:	40020488 	.word	0x40020488
 8105520:	400204a0 	.word	0x400204a0
 8105524:	400204b8 	.word	0x400204b8
 8105528:	58025408 	.word	0x58025408
 810552c:	5802541c 	.word	0x5802541c
 8105530:	58025430 	.word	0x58025430
 8105534:	58025444 	.word	0x58025444
 8105538:	58025458 	.word	0x58025458
 810553c:	5802546c 	.word	0x5802546c
 8105540:	58025480 	.word	0x58025480
 8105544:	58025494 	.word	0x58025494

08105548 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8105548:	b580      	push	{r7, lr}
 810554a:	b08a      	sub	sp, #40	; 0x28
 810554c:	af00      	add	r7, sp, #0
 810554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8105550:	2300      	movs	r3, #0
 8105552:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8105554:	4b67      	ldr	r3, [pc, #412]	; (81056f4 <HAL_DMA_IRQHandler+0x1ac>)
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	4a67      	ldr	r2, [pc, #412]	; (81056f8 <HAL_DMA_IRQHandler+0x1b0>)
 810555a:	fba2 2303 	umull	r2, r3, r2, r3
 810555e:	0a9b      	lsrs	r3, r3, #10
 8105560:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105566:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810556c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810556e:	6a3b      	ldr	r3, [r7, #32]
 8105570:	681b      	ldr	r3, [r3, #0]
 8105572:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105574:	69fb      	ldr	r3, [r7, #28]
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a5f      	ldr	r2, [pc, #380]	; (81056fc <HAL_DMA_IRQHandler+0x1b4>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d04a      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a5d      	ldr	r2, [pc, #372]	; (8105700 <HAL_DMA_IRQHandler+0x1b8>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d045      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a5c      	ldr	r2, [pc, #368]	; (8105704 <HAL_DMA_IRQHandler+0x1bc>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d040      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	4a5a      	ldr	r2, [pc, #360]	; (8105708 <HAL_DMA_IRQHandler+0x1c0>)
 810559e:	4293      	cmp	r3, r2
 81055a0:	d03b      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	4a59      	ldr	r2, [pc, #356]	; (810570c <HAL_DMA_IRQHandler+0x1c4>)
 81055a8:	4293      	cmp	r3, r2
 81055aa:	d036      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a57      	ldr	r2, [pc, #348]	; (8105710 <HAL_DMA_IRQHandler+0x1c8>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d031      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	4a56      	ldr	r2, [pc, #344]	; (8105714 <HAL_DMA_IRQHandler+0x1cc>)
 81055bc:	4293      	cmp	r3, r2
 81055be:	d02c      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	4a54      	ldr	r2, [pc, #336]	; (8105718 <HAL_DMA_IRQHandler+0x1d0>)
 81055c6:	4293      	cmp	r3, r2
 81055c8:	d027      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	4a53      	ldr	r2, [pc, #332]	; (810571c <HAL_DMA_IRQHandler+0x1d4>)
 81055d0:	4293      	cmp	r3, r2
 81055d2:	d022      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	4a51      	ldr	r2, [pc, #324]	; (8105720 <HAL_DMA_IRQHandler+0x1d8>)
 81055da:	4293      	cmp	r3, r2
 81055dc:	d01d      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	4a50      	ldr	r2, [pc, #320]	; (8105724 <HAL_DMA_IRQHandler+0x1dc>)
 81055e4:	4293      	cmp	r3, r2
 81055e6:	d018      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	4a4e      	ldr	r2, [pc, #312]	; (8105728 <HAL_DMA_IRQHandler+0x1e0>)
 81055ee:	4293      	cmp	r3, r2
 81055f0:	d013      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	4a4d      	ldr	r2, [pc, #308]	; (810572c <HAL_DMA_IRQHandler+0x1e4>)
 81055f8:	4293      	cmp	r3, r2
 81055fa:	d00e      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	4a4b      	ldr	r2, [pc, #300]	; (8105730 <HAL_DMA_IRQHandler+0x1e8>)
 8105602:	4293      	cmp	r3, r2
 8105604:	d009      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	4a4a      	ldr	r2, [pc, #296]	; (8105734 <HAL_DMA_IRQHandler+0x1ec>)
 810560c:	4293      	cmp	r3, r2
 810560e:	d004      	beq.n	810561a <HAL_DMA_IRQHandler+0xd2>
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	4a48      	ldr	r2, [pc, #288]	; (8105738 <HAL_DMA_IRQHandler+0x1f0>)
 8105616:	4293      	cmp	r3, r2
 8105618:	d101      	bne.n	810561e <HAL_DMA_IRQHandler+0xd6>
 810561a:	2301      	movs	r3, #1
 810561c:	e000      	b.n	8105620 <HAL_DMA_IRQHandler+0xd8>
 810561e:	2300      	movs	r3, #0
 8105620:	2b00      	cmp	r3, #0
 8105622:	f000 842b 	beq.w	8105e7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810562a:	f003 031f 	and.w	r3, r3, #31
 810562e:	2208      	movs	r2, #8
 8105630:	409a      	lsls	r2, r3
 8105632:	69bb      	ldr	r3, [r7, #24]
 8105634:	4013      	ands	r3, r2
 8105636:	2b00      	cmp	r3, #0
 8105638:	f000 80a2 	beq.w	8105780 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	4a2e      	ldr	r2, [pc, #184]	; (81056fc <HAL_DMA_IRQHandler+0x1b4>)
 8105642:	4293      	cmp	r3, r2
 8105644:	d04a      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	4a2d      	ldr	r2, [pc, #180]	; (8105700 <HAL_DMA_IRQHandler+0x1b8>)
 810564c:	4293      	cmp	r3, r2
 810564e:	d045      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	4a2b      	ldr	r2, [pc, #172]	; (8105704 <HAL_DMA_IRQHandler+0x1bc>)
 8105656:	4293      	cmp	r3, r2
 8105658:	d040      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	4a2a      	ldr	r2, [pc, #168]	; (8105708 <HAL_DMA_IRQHandler+0x1c0>)
 8105660:	4293      	cmp	r3, r2
 8105662:	d03b      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	4a28      	ldr	r2, [pc, #160]	; (810570c <HAL_DMA_IRQHandler+0x1c4>)
 810566a:	4293      	cmp	r3, r2
 810566c:	d036      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	681b      	ldr	r3, [r3, #0]
 8105672:	4a27      	ldr	r2, [pc, #156]	; (8105710 <HAL_DMA_IRQHandler+0x1c8>)
 8105674:	4293      	cmp	r3, r2
 8105676:	d031      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	4a25      	ldr	r2, [pc, #148]	; (8105714 <HAL_DMA_IRQHandler+0x1cc>)
 810567e:	4293      	cmp	r3, r2
 8105680:	d02c      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	4a24      	ldr	r2, [pc, #144]	; (8105718 <HAL_DMA_IRQHandler+0x1d0>)
 8105688:	4293      	cmp	r3, r2
 810568a:	d027      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	4a22      	ldr	r2, [pc, #136]	; (810571c <HAL_DMA_IRQHandler+0x1d4>)
 8105692:	4293      	cmp	r3, r2
 8105694:	d022      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	4a21      	ldr	r2, [pc, #132]	; (8105720 <HAL_DMA_IRQHandler+0x1d8>)
 810569c:	4293      	cmp	r3, r2
 810569e:	d01d      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	4a1f      	ldr	r2, [pc, #124]	; (8105724 <HAL_DMA_IRQHandler+0x1dc>)
 81056a6:	4293      	cmp	r3, r2
 81056a8:	d018      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	681b      	ldr	r3, [r3, #0]
 81056ae:	4a1e      	ldr	r2, [pc, #120]	; (8105728 <HAL_DMA_IRQHandler+0x1e0>)
 81056b0:	4293      	cmp	r3, r2
 81056b2:	d013      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	681b      	ldr	r3, [r3, #0]
 81056b8:	4a1c      	ldr	r2, [pc, #112]	; (810572c <HAL_DMA_IRQHandler+0x1e4>)
 81056ba:	4293      	cmp	r3, r2
 81056bc:	d00e      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	4a1b      	ldr	r2, [pc, #108]	; (8105730 <HAL_DMA_IRQHandler+0x1e8>)
 81056c4:	4293      	cmp	r3, r2
 81056c6:	d009      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	4a19      	ldr	r2, [pc, #100]	; (8105734 <HAL_DMA_IRQHandler+0x1ec>)
 81056ce:	4293      	cmp	r3, r2
 81056d0:	d004      	beq.n	81056dc <HAL_DMA_IRQHandler+0x194>
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	4a18      	ldr	r2, [pc, #96]	; (8105738 <HAL_DMA_IRQHandler+0x1f0>)
 81056d8:	4293      	cmp	r3, r2
 81056da:	d12f      	bne.n	810573c <HAL_DMA_IRQHandler+0x1f4>
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	681b      	ldr	r3, [r3, #0]
 81056e2:	f003 0304 	and.w	r3, r3, #4
 81056e6:	2b00      	cmp	r3, #0
 81056e8:	bf14      	ite	ne
 81056ea:	2301      	movne	r3, #1
 81056ec:	2300      	moveq	r3, #0
 81056ee:	b2db      	uxtb	r3, r3
 81056f0:	e02e      	b.n	8105750 <HAL_DMA_IRQHandler+0x208>
 81056f2:	bf00      	nop
 81056f4:	10000000 	.word	0x10000000
 81056f8:	1b4e81b5 	.word	0x1b4e81b5
 81056fc:	40020010 	.word	0x40020010
 8105700:	40020028 	.word	0x40020028
 8105704:	40020040 	.word	0x40020040
 8105708:	40020058 	.word	0x40020058
 810570c:	40020070 	.word	0x40020070
 8105710:	40020088 	.word	0x40020088
 8105714:	400200a0 	.word	0x400200a0
 8105718:	400200b8 	.word	0x400200b8
 810571c:	40020410 	.word	0x40020410
 8105720:	40020428 	.word	0x40020428
 8105724:	40020440 	.word	0x40020440
 8105728:	40020458 	.word	0x40020458
 810572c:	40020470 	.word	0x40020470
 8105730:	40020488 	.word	0x40020488
 8105734:	400204a0 	.word	0x400204a0
 8105738:	400204b8 	.word	0x400204b8
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	f003 0308 	and.w	r3, r3, #8
 8105746:	2b00      	cmp	r3, #0
 8105748:	bf14      	ite	ne
 810574a:	2301      	movne	r3, #1
 810574c:	2300      	moveq	r3, #0
 810574e:	b2db      	uxtb	r3, r3
 8105750:	2b00      	cmp	r3, #0
 8105752:	d015      	beq.n	8105780 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	681a      	ldr	r2, [r3, #0]
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	681b      	ldr	r3, [r3, #0]
 810575e:	f022 0204 	bic.w	r2, r2, #4
 8105762:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105768:	f003 031f 	and.w	r3, r3, #31
 810576c:	2208      	movs	r2, #8
 810576e:	409a      	lsls	r2, r3
 8105770:	6a3b      	ldr	r3, [r7, #32]
 8105772:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105778:	f043 0201 	orr.w	r2, r3, #1
 810577c:	687b      	ldr	r3, [r7, #4]
 810577e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105784:	f003 031f 	and.w	r3, r3, #31
 8105788:	69ba      	ldr	r2, [r7, #24]
 810578a:	fa22 f303 	lsr.w	r3, r2, r3
 810578e:	f003 0301 	and.w	r3, r3, #1
 8105792:	2b00      	cmp	r3, #0
 8105794:	d06e      	beq.n	8105874 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	4a69      	ldr	r2, [pc, #420]	; (8105940 <HAL_DMA_IRQHandler+0x3f8>)
 810579c:	4293      	cmp	r3, r2
 810579e:	d04a      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	4a67      	ldr	r2, [pc, #412]	; (8105944 <HAL_DMA_IRQHandler+0x3fc>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d045      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	681b      	ldr	r3, [r3, #0]
 81057ae:	4a66      	ldr	r2, [pc, #408]	; (8105948 <HAL_DMA_IRQHandler+0x400>)
 81057b0:	4293      	cmp	r3, r2
 81057b2:	d040      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	4a64      	ldr	r2, [pc, #400]	; (810594c <HAL_DMA_IRQHandler+0x404>)
 81057ba:	4293      	cmp	r3, r2
 81057bc:	d03b      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	681b      	ldr	r3, [r3, #0]
 81057c2:	4a63      	ldr	r2, [pc, #396]	; (8105950 <HAL_DMA_IRQHandler+0x408>)
 81057c4:	4293      	cmp	r3, r2
 81057c6:	d036      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057c8:	687b      	ldr	r3, [r7, #4]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	4a61      	ldr	r2, [pc, #388]	; (8105954 <HAL_DMA_IRQHandler+0x40c>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d031      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	4a60      	ldr	r2, [pc, #384]	; (8105958 <HAL_DMA_IRQHandler+0x410>)
 81057d8:	4293      	cmp	r3, r2
 81057da:	d02c      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	4a5e      	ldr	r2, [pc, #376]	; (810595c <HAL_DMA_IRQHandler+0x414>)
 81057e2:	4293      	cmp	r3, r2
 81057e4:	d027      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	4a5d      	ldr	r2, [pc, #372]	; (8105960 <HAL_DMA_IRQHandler+0x418>)
 81057ec:	4293      	cmp	r3, r2
 81057ee:	d022      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	4a5b      	ldr	r2, [pc, #364]	; (8105964 <HAL_DMA_IRQHandler+0x41c>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d01d      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a5a      	ldr	r2, [pc, #360]	; (8105968 <HAL_DMA_IRQHandler+0x420>)
 8105800:	4293      	cmp	r3, r2
 8105802:	d018      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	4a58      	ldr	r2, [pc, #352]	; (810596c <HAL_DMA_IRQHandler+0x424>)
 810580a:	4293      	cmp	r3, r2
 810580c:	d013      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	681b      	ldr	r3, [r3, #0]
 8105812:	4a57      	ldr	r2, [pc, #348]	; (8105970 <HAL_DMA_IRQHandler+0x428>)
 8105814:	4293      	cmp	r3, r2
 8105816:	d00e      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	4a55      	ldr	r2, [pc, #340]	; (8105974 <HAL_DMA_IRQHandler+0x42c>)
 810581e:	4293      	cmp	r3, r2
 8105820:	d009      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 8105822:	687b      	ldr	r3, [r7, #4]
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	4a54      	ldr	r2, [pc, #336]	; (8105978 <HAL_DMA_IRQHandler+0x430>)
 8105828:	4293      	cmp	r3, r2
 810582a:	d004      	beq.n	8105836 <HAL_DMA_IRQHandler+0x2ee>
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	4a52      	ldr	r2, [pc, #328]	; (810597c <HAL_DMA_IRQHandler+0x434>)
 8105832:	4293      	cmp	r3, r2
 8105834:	d10a      	bne.n	810584c <HAL_DMA_IRQHandler+0x304>
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	681b      	ldr	r3, [r3, #0]
 810583a:	695b      	ldr	r3, [r3, #20]
 810583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105840:	2b00      	cmp	r3, #0
 8105842:	bf14      	ite	ne
 8105844:	2301      	movne	r3, #1
 8105846:	2300      	moveq	r3, #0
 8105848:	b2db      	uxtb	r3, r3
 810584a:	e003      	b.n	8105854 <HAL_DMA_IRQHandler+0x30c>
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	2300      	movs	r3, #0
 8105854:	2b00      	cmp	r3, #0
 8105856:	d00d      	beq.n	8105874 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810585c:	f003 031f 	and.w	r3, r3, #31
 8105860:	2201      	movs	r2, #1
 8105862:	409a      	lsls	r2, r3
 8105864:	6a3b      	ldr	r3, [r7, #32]
 8105866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810586c:	f043 0202 	orr.w	r2, r3, #2
 8105870:	687b      	ldr	r3, [r7, #4]
 8105872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105874:	687b      	ldr	r3, [r7, #4]
 8105876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105878:	f003 031f 	and.w	r3, r3, #31
 810587c:	2204      	movs	r2, #4
 810587e:	409a      	lsls	r2, r3
 8105880:	69bb      	ldr	r3, [r7, #24]
 8105882:	4013      	ands	r3, r2
 8105884:	2b00      	cmp	r3, #0
 8105886:	f000 808f 	beq.w	81059a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810588a:	687b      	ldr	r3, [r7, #4]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	4a2c      	ldr	r2, [pc, #176]	; (8105940 <HAL_DMA_IRQHandler+0x3f8>)
 8105890:	4293      	cmp	r3, r2
 8105892:	d04a      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	681b      	ldr	r3, [r3, #0]
 8105898:	4a2a      	ldr	r2, [pc, #168]	; (8105944 <HAL_DMA_IRQHandler+0x3fc>)
 810589a:	4293      	cmp	r3, r2
 810589c:	d045      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	4a29      	ldr	r2, [pc, #164]	; (8105948 <HAL_DMA_IRQHandler+0x400>)
 81058a4:	4293      	cmp	r3, r2
 81058a6:	d040      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	4a27      	ldr	r2, [pc, #156]	; (810594c <HAL_DMA_IRQHandler+0x404>)
 81058ae:	4293      	cmp	r3, r2
 81058b0:	d03b      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	4a26      	ldr	r2, [pc, #152]	; (8105950 <HAL_DMA_IRQHandler+0x408>)
 81058b8:	4293      	cmp	r3, r2
 81058ba:	d036      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	4a24      	ldr	r2, [pc, #144]	; (8105954 <HAL_DMA_IRQHandler+0x40c>)
 81058c2:	4293      	cmp	r3, r2
 81058c4:	d031      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	4a23      	ldr	r2, [pc, #140]	; (8105958 <HAL_DMA_IRQHandler+0x410>)
 81058cc:	4293      	cmp	r3, r2
 81058ce:	d02c      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	4a21      	ldr	r2, [pc, #132]	; (810595c <HAL_DMA_IRQHandler+0x414>)
 81058d6:	4293      	cmp	r3, r2
 81058d8:	d027      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	4a20      	ldr	r2, [pc, #128]	; (8105960 <HAL_DMA_IRQHandler+0x418>)
 81058e0:	4293      	cmp	r3, r2
 81058e2:	d022      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	681b      	ldr	r3, [r3, #0]
 81058e8:	4a1e      	ldr	r2, [pc, #120]	; (8105964 <HAL_DMA_IRQHandler+0x41c>)
 81058ea:	4293      	cmp	r3, r2
 81058ec:	d01d      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	681b      	ldr	r3, [r3, #0]
 81058f2:	4a1d      	ldr	r2, [pc, #116]	; (8105968 <HAL_DMA_IRQHandler+0x420>)
 81058f4:	4293      	cmp	r3, r2
 81058f6:	d018      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	681b      	ldr	r3, [r3, #0]
 81058fc:	4a1b      	ldr	r2, [pc, #108]	; (810596c <HAL_DMA_IRQHandler+0x424>)
 81058fe:	4293      	cmp	r3, r2
 8105900:	d013      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	4a1a      	ldr	r2, [pc, #104]	; (8105970 <HAL_DMA_IRQHandler+0x428>)
 8105908:	4293      	cmp	r3, r2
 810590a:	d00e      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	681b      	ldr	r3, [r3, #0]
 8105910:	4a18      	ldr	r2, [pc, #96]	; (8105974 <HAL_DMA_IRQHandler+0x42c>)
 8105912:	4293      	cmp	r3, r2
 8105914:	d009      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	4a17      	ldr	r2, [pc, #92]	; (8105978 <HAL_DMA_IRQHandler+0x430>)
 810591c:	4293      	cmp	r3, r2
 810591e:	d004      	beq.n	810592a <HAL_DMA_IRQHandler+0x3e2>
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	4a15      	ldr	r2, [pc, #84]	; (810597c <HAL_DMA_IRQHandler+0x434>)
 8105926:	4293      	cmp	r3, r2
 8105928:	d12a      	bne.n	8105980 <HAL_DMA_IRQHandler+0x438>
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	f003 0302 	and.w	r3, r3, #2
 8105934:	2b00      	cmp	r3, #0
 8105936:	bf14      	ite	ne
 8105938:	2301      	movne	r3, #1
 810593a:	2300      	moveq	r3, #0
 810593c:	b2db      	uxtb	r3, r3
 810593e:	e023      	b.n	8105988 <HAL_DMA_IRQHandler+0x440>
 8105940:	40020010 	.word	0x40020010
 8105944:	40020028 	.word	0x40020028
 8105948:	40020040 	.word	0x40020040
 810594c:	40020058 	.word	0x40020058
 8105950:	40020070 	.word	0x40020070
 8105954:	40020088 	.word	0x40020088
 8105958:	400200a0 	.word	0x400200a0
 810595c:	400200b8 	.word	0x400200b8
 8105960:	40020410 	.word	0x40020410
 8105964:	40020428 	.word	0x40020428
 8105968:	40020440 	.word	0x40020440
 810596c:	40020458 	.word	0x40020458
 8105970:	40020470 	.word	0x40020470
 8105974:	40020488 	.word	0x40020488
 8105978:	400204a0 	.word	0x400204a0
 810597c:	400204b8 	.word	0x400204b8
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	681b      	ldr	r3, [r3, #0]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	2300      	movs	r3, #0
 8105988:	2b00      	cmp	r3, #0
 810598a:	d00d      	beq.n	81059a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105990:	f003 031f 	and.w	r3, r3, #31
 8105994:	2204      	movs	r2, #4
 8105996:	409a      	lsls	r2, r3
 8105998:	6a3b      	ldr	r3, [r7, #32]
 810599a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81059a0:	f043 0204 	orr.w	r2, r3, #4
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81059ac:	f003 031f 	and.w	r3, r3, #31
 81059b0:	2210      	movs	r2, #16
 81059b2:	409a      	lsls	r2, r3
 81059b4:	69bb      	ldr	r3, [r7, #24]
 81059b6:	4013      	ands	r3, r2
 81059b8:	2b00      	cmp	r3, #0
 81059ba:	f000 80a6 	beq.w	8105b0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	4a85      	ldr	r2, [pc, #532]	; (8105bd8 <HAL_DMA_IRQHandler+0x690>)
 81059c4:	4293      	cmp	r3, r2
 81059c6:	d04a      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	4a83      	ldr	r2, [pc, #524]	; (8105bdc <HAL_DMA_IRQHandler+0x694>)
 81059ce:	4293      	cmp	r3, r2
 81059d0:	d045      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	4a82      	ldr	r2, [pc, #520]	; (8105be0 <HAL_DMA_IRQHandler+0x698>)
 81059d8:	4293      	cmp	r3, r2
 81059da:	d040      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	4a80      	ldr	r2, [pc, #512]	; (8105be4 <HAL_DMA_IRQHandler+0x69c>)
 81059e2:	4293      	cmp	r3, r2
 81059e4:	d03b      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	4a7f      	ldr	r2, [pc, #508]	; (8105be8 <HAL_DMA_IRQHandler+0x6a0>)
 81059ec:	4293      	cmp	r3, r2
 81059ee:	d036      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	681b      	ldr	r3, [r3, #0]
 81059f4:	4a7d      	ldr	r2, [pc, #500]	; (8105bec <HAL_DMA_IRQHandler+0x6a4>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	d031      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4a7c      	ldr	r2, [pc, #496]	; (8105bf0 <HAL_DMA_IRQHandler+0x6a8>)
 8105a00:	4293      	cmp	r3, r2
 8105a02:	d02c      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	4a7a      	ldr	r2, [pc, #488]	; (8105bf4 <HAL_DMA_IRQHandler+0x6ac>)
 8105a0a:	4293      	cmp	r3, r2
 8105a0c:	d027      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	4a79      	ldr	r2, [pc, #484]	; (8105bf8 <HAL_DMA_IRQHandler+0x6b0>)
 8105a14:	4293      	cmp	r3, r2
 8105a16:	d022      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	4a77      	ldr	r2, [pc, #476]	; (8105bfc <HAL_DMA_IRQHandler+0x6b4>)
 8105a1e:	4293      	cmp	r3, r2
 8105a20:	d01d      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	4a76      	ldr	r2, [pc, #472]	; (8105c00 <HAL_DMA_IRQHandler+0x6b8>)
 8105a28:	4293      	cmp	r3, r2
 8105a2a:	d018      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	4a74      	ldr	r2, [pc, #464]	; (8105c04 <HAL_DMA_IRQHandler+0x6bc>)
 8105a32:	4293      	cmp	r3, r2
 8105a34:	d013      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	4a73      	ldr	r2, [pc, #460]	; (8105c08 <HAL_DMA_IRQHandler+0x6c0>)
 8105a3c:	4293      	cmp	r3, r2
 8105a3e:	d00e      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	4a71      	ldr	r2, [pc, #452]	; (8105c0c <HAL_DMA_IRQHandler+0x6c4>)
 8105a46:	4293      	cmp	r3, r2
 8105a48:	d009      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	4a70      	ldr	r2, [pc, #448]	; (8105c10 <HAL_DMA_IRQHandler+0x6c8>)
 8105a50:	4293      	cmp	r3, r2
 8105a52:	d004      	beq.n	8105a5e <HAL_DMA_IRQHandler+0x516>
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	681b      	ldr	r3, [r3, #0]
 8105a58:	4a6e      	ldr	r2, [pc, #440]	; (8105c14 <HAL_DMA_IRQHandler+0x6cc>)
 8105a5a:	4293      	cmp	r3, r2
 8105a5c:	d10a      	bne.n	8105a74 <HAL_DMA_IRQHandler+0x52c>
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	f003 0308 	and.w	r3, r3, #8
 8105a68:	2b00      	cmp	r3, #0
 8105a6a:	bf14      	ite	ne
 8105a6c:	2301      	movne	r3, #1
 8105a6e:	2300      	moveq	r3, #0
 8105a70:	b2db      	uxtb	r3, r3
 8105a72:	e009      	b.n	8105a88 <HAL_DMA_IRQHandler+0x540>
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	f003 0304 	and.w	r3, r3, #4
 8105a7e:	2b00      	cmp	r3, #0
 8105a80:	bf14      	ite	ne
 8105a82:	2301      	movne	r3, #1
 8105a84:	2300      	moveq	r3, #0
 8105a86:	b2db      	uxtb	r3, r3
 8105a88:	2b00      	cmp	r3, #0
 8105a8a:	d03e      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a90:	f003 031f 	and.w	r3, r3, #31
 8105a94:	2210      	movs	r2, #16
 8105a96:	409a      	lsls	r2, r3
 8105a98:	6a3b      	ldr	r3, [r7, #32]
 8105a9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681b      	ldr	r3, [r3, #0]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d018      	beq.n	8105adc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105ab4:	2b00      	cmp	r3, #0
 8105ab6:	d108      	bne.n	8105aca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105abc:	2b00      	cmp	r3, #0
 8105abe:	d024      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ac4:	6878      	ldr	r0, [r7, #4]
 8105ac6:	4798      	blx	r3
 8105ac8:	e01f      	b.n	8105b0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d01b      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ad6:	6878      	ldr	r0, [r7, #4]
 8105ad8:	4798      	blx	r3
 8105ada:	e016      	b.n	8105b0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	681b      	ldr	r3, [r3, #0]
 8105ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105ae6:	2b00      	cmp	r3, #0
 8105ae8:	d107      	bne.n	8105afa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	681b      	ldr	r3, [r3, #0]
 8105aee:	681a      	ldr	r2, [r3, #0]
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	f022 0208 	bic.w	r2, r2, #8
 8105af8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105afe:	2b00      	cmp	r3, #0
 8105b00:	d003      	beq.n	8105b0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105b02:	687b      	ldr	r3, [r7, #4]
 8105b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b06:	6878      	ldr	r0, [r7, #4]
 8105b08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b0e:	f003 031f 	and.w	r3, r3, #31
 8105b12:	2220      	movs	r2, #32
 8105b14:	409a      	lsls	r2, r3
 8105b16:	69bb      	ldr	r3, [r7, #24]
 8105b18:	4013      	ands	r3, r2
 8105b1a:	2b00      	cmp	r3, #0
 8105b1c:	f000 8110 	beq.w	8105d40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	4a2c      	ldr	r2, [pc, #176]	; (8105bd8 <HAL_DMA_IRQHandler+0x690>)
 8105b26:	4293      	cmp	r3, r2
 8105b28:	d04a      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	4a2b      	ldr	r2, [pc, #172]	; (8105bdc <HAL_DMA_IRQHandler+0x694>)
 8105b30:	4293      	cmp	r3, r2
 8105b32:	d045      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	681b      	ldr	r3, [r3, #0]
 8105b38:	4a29      	ldr	r2, [pc, #164]	; (8105be0 <HAL_DMA_IRQHandler+0x698>)
 8105b3a:	4293      	cmp	r3, r2
 8105b3c:	d040      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	681b      	ldr	r3, [r3, #0]
 8105b42:	4a28      	ldr	r2, [pc, #160]	; (8105be4 <HAL_DMA_IRQHandler+0x69c>)
 8105b44:	4293      	cmp	r3, r2
 8105b46:	d03b      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	681b      	ldr	r3, [r3, #0]
 8105b4c:	4a26      	ldr	r2, [pc, #152]	; (8105be8 <HAL_DMA_IRQHandler+0x6a0>)
 8105b4e:	4293      	cmp	r3, r2
 8105b50:	d036      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	4a25      	ldr	r2, [pc, #148]	; (8105bec <HAL_DMA_IRQHandler+0x6a4>)
 8105b58:	4293      	cmp	r3, r2
 8105b5a:	d031      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	681b      	ldr	r3, [r3, #0]
 8105b60:	4a23      	ldr	r2, [pc, #140]	; (8105bf0 <HAL_DMA_IRQHandler+0x6a8>)
 8105b62:	4293      	cmp	r3, r2
 8105b64:	d02c      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	681b      	ldr	r3, [r3, #0]
 8105b6a:	4a22      	ldr	r2, [pc, #136]	; (8105bf4 <HAL_DMA_IRQHandler+0x6ac>)
 8105b6c:	4293      	cmp	r3, r2
 8105b6e:	d027      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	681b      	ldr	r3, [r3, #0]
 8105b74:	4a20      	ldr	r2, [pc, #128]	; (8105bf8 <HAL_DMA_IRQHandler+0x6b0>)
 8105b76:	4293      	cmp	r3, r2
 8105b78:	d022      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	4a1f      	ldr	r2, [pc, #124]	; (8105bfc <HAL_DMA_IRQHandler+0x6b4>)
 8105b80:	4293      	cmp	r3, r2
 8105b82:	d01d      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	4a1d      	ldr	r2, [pc, #116]	; (8105c00 <HAL_DMA_IRQHandler+0x6b8>)
 8105b8a:	4293      	cmp	r3, r2
 8105b8c:	d018      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	681b      	ldr	r3, [r3, #0]
 8105b92:	4a1c      	ldr	r2, [pc, #112]	; (8105c04 <HAL_DMA_IRQHandler+0x6bc>)
 8105b94:	4293      	cmp	r3, r2
 8105b96:	d013      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	4a1a      	ldr	r2, [pc, #104]	; (8105c08 <HAL_DMA_IRQHandler+0x6c0>)
 8105b9e:	4293      	cmp	r3, r2
 8105ba0:	d00e      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	4a19      	ldr	r2, [pc, #100]	; (8105c0c <HAL_DMA_IRQHandler+0x6c4>)
 8105ba8:	4293      	cmp	r3, r2
 8105baa:	d009      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105bac:	687b      	ldr	r3, [r7, #4]
 8105bae:	681b      	ldr	r3, [r3, #0]
 8105bb0:	4a17      	ldr	r2, [pc, #92]	; (8105c10 <HAL_DMA_IRQHandler+0x6c8>)
 8105bb2:	4293      	cmp	r3, r2
 8105bb4:	d004      	beq.n	8105bc0 <HAL_DMA_IRQHandler+0x678>
 8105bb6:	687b      	ldr	r3, [r7, #4]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	4a16      	ldr	r2, [pc, #88]	; (8105c14 <HAL_DMA_IRQHandler+0x6cc>)
 8105bbc:	4293      	cmp	r3, r2
 8105bbe:	d12b      	bne.n	8105c18 <HAL_DMA_IRQHandler+0x6d0>
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	681b      	ldr	r3, [r3, #0]
 8105bc4:	681b      	ldr	r3, [r3, #0]
 8105bc6:	f003 0310 	and.w	r3, r3, #16
 8105bca:	2b00      	cmp	r3, #0
 8105bcc:	bf14      	ite	ne
 8105bce:	2301      	movne	r3, #1
 8105bd0:	2300      	moveq	r3, #0
 8105bd2:	b2db      	uxtb	r3, r3
 8105bd4:	e02a      	b.n	8105c2c <HAL_DMA_IRQHandler+0x6e4>
 8105bd6:	bf00      	nop
 8105bd8:	40020010 	.word	0x40020010
 8105bdc:	40020028 	.word	0x40020028
 8105be0:	40020040 	.word	0x40020040
 8105be4:	40020058 	.word	0x40020058
 8105be8:	40020070 	.word	0x40020070
 8105bec:	40020088 	.word	0x40020088
 8105bf0:	400200a0 	.word	0x400200a0
 8105bf4:	400200b8 	.word	0x400200b8
 8105bf8:	40020410 	.word	0x40020410
 8105bfc:	40020428 	.word	0x40020428
 8105c00:	40020440 	.word	0x40020440
 8105c04:	40020458 	.word	0x40020458
 8105c08:	40020470 	.word	0x40020470
 8105c0c:	40020488 	.word	0x40020488
 8105c10:	400204a0 	.word	0x400204a0
 8105c14:	400204b8 	.word	0x400204b8
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	681b      	ldr	r3, [r3, #0]
 8105c1c:	681b      	ldr	r3, [r3, #0]
 8105c1e:	f003 0302 	and.w	r3, r3, #2
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	bf14      	ite	ne
 8105c26:	2301      	movne	r3, #1
 8105c28:	2300      	moveq	r3, #0
 8105c2a:	b2db      	uxtb	r3, r3
 8105c2c:	2b00      	cmp	r3, #0
 8105c2e:	f000 8087 	beq.w	8105d40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c36:	f003 031f 	and.w	r3, r3, #31
 8105c3a:	2220      	movs	r2, #32
 8105c3c:	409a      	lsls	r2, r3
 8105c3e:	6a3b      	ldr	r3, [r7, #32]
 8105c40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105c48:	b2db      	uxtb	r3, r3
 8105c4a:	2b04      	cmp	r3, #4
 8105c4c:	d139      	bne.n	8105cc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	681a      	ldr	r2, [r3, #0]
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	f022 0216 	bic.w	r2, r2, #22
 8105c5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8105c5e:	687b      	ldr	r3, [r7, #4]
 8105c60:	681b      	ldr	r3, [r3, #0]
 8105c62:	695a      	ldr	r2, [r3, #20]
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105c6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c72:	2b00      	cmp	r3, #0
 8105c74:	d103      	bne.n	8105c7e <HAL_DMA_IRQHandler+0x736>
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105c7a:	2b00      	cmp	r3, #0
 8105c7c:	d007      	beq.n	8105c8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	681a      	ldr	r2, [r3, #0]
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	f022 0208 	bic.w	r2, r2, #8
 8105c8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105c8e:	687b      	ldr	r3, [r7, #4]
 8105c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c92:	f003 031f 	and.w	r3, r3, #31
 8105c96:	223f      	movs	r2, #63	; 0x3f
 8105c98:	409a      	lsls	r2, r3
 8105c9a:	6a3b      	ldr	r3, [r7, #32]
 8105c9c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	2200      	movs	r2, #0
 8105ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105ca6:	687b      	ldr	r3, [r7, #4]
 8105ca8:	2201      	movs	r2, #1
 8105caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105cb2:	2b00      	cmp	r3, #0
 8105cb4:	f000 834a 	beq.w	810634c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105cbc:	6878      	ldr	r0, [r7, #4]
 8105cbe:	4798      	blx	r3
          }
          return;
 8105cc0:	e344      	b.n	810634c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105ccc:	2b00      	cmp	r3, #0
 8105cce:	d018      	beq.n	8105d02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105cda:	2b00      	cmp	r3, #0
 8105cdc:	d108      	bne.n	8105cf0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105ce2:	2b00      	cmp	r3, #0
 8105ce4:	d02c      	beq.n	8105d40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105ce6:	687b      	ldr	r3, [r7, #4]
 8105ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105cea:	6878      	ldr	r0, [r7, #4]
 8105cec:	4798      	blx	r3
 8105cee:	e027      	b.n	8105d40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	d023      	beq.n	8105d40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105cfc:	6878      	ldr	r0, [r7, #4]
 8105cfe:	4798      	blx	r3
 8105d00:	e01e      	b.n	8105d40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	d10f      	bne.n	8105d30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	681a      	ldr	r2, [r3, #0]
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	f022 0210 	bic.w	r2, r2, #16
 8105d1e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	2200      	movs	r2, #0
 8105d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	2201      	movs	r2, #1
 8105d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	d003      	beq.n	8105d40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d3c:	6878      	ldr	r0, [r7, #4]
 8105d3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d44:	2b00      	cmp	r3, #0
 8105d46:	f000 8306 	beq.w	8106356 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d4e:	f003 0301 	and.w	r3, r3, #1
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	f000 8088 	beq.w	8105e68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	2204      	movs	r2, #4
 8105d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8105d60:	687b      	ldr	r3, [r7, #4]
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	4a7a      	ldr	r2, [pc, #488]	; (8105f50 <HAL_DMA_IRQHandler+0xa08>)
 8105d66:	4293      	cmp	r3, r2
 8105d68:	d04a      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105d6a:	687b      	ldr	r3, [r7, #4]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	4a79      	ldr	r2, [pc, #484]	; (8105f54 <HAL_DMA_IRQHandler+0xa0c>)
 8105d70:	4293      	cmp	r3, r2
 8105d72:	d045      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105d74:	687b      	ldr	r3, [r7, #4]
 8105d76:	681b      	ldr	r3, [r3, #0]
 8105d78:	4a77      	ldr	r2, [pc, #476]	; (8105f58 <HAL_DMA_IRQHandler+0xa10>)
 8105d7a:	4293      	cmp	r3, r2
 8105d7c:	d040      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	4a76      	ldr	r2, [pc, #472]	; (8105f5c <HAL_DMA_IRQHandler+0xa14>)
 8105d84:	4293      	cmp	r3, r2
 8105d86:	d03b      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	681b      	ldr	r3, [r3, #0]
 8105d8c:	4a74      	ldr	r2, [pc, #464]	; (8105f60 <HAL_DMA_IRQHandler+0xa18>)
 8105d8e:	4293      	cmp	r3, r2
 8105d90:	d036      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105d92:	687b      	ldr	r3, [r7, #4]
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	4a73      	ldr	r2, [pc, #460]	; (8105f64 <HAL_DMA_IRQHandler+0xa1c>)
 8105d98:	4293      	cmp	r3, r2
 8105d9a:	d031      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	4a71      	ldr	r2, [pc, #452]	; (8105f68 <HAL_DMA_IRQHandler+0xa20>)
 8105da2:	4293      	cmp	r3, r2
 8105da4:	d02c      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	681b      	ldr	r3, [r3, #0]
 8105daa:	4a70      	ldr	r2, [pc, #448]	; (8105f6c <HAL_DMA_IRQHandler+0xa24>)
 8105dac:	4293      	cmp	r3, r2
 8105dae:	d027      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	4a6e      	ldr	r2, [pc, #440]	; (8105f70 <HAL_DMA_IRQHandler+0xa28>)
 8105db6:	4293      	cmp	r3, r2
 8105db8:	d022      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	681b      	ldr	r3, [r3, #0]
 8105dbe:	4a6d      	ldr	r2, [pc, #436]	; (8105f74 <HAL_DMA_IRQHandler+0xa2c>)
 8105dc0:	4293      	cmp	r3, r2
 8105dc2:	d01d      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	681b      	ldr	r3, [r3, #0]
 8105dc8:	4a6b      	ldr	r2, [pc, #428]	; (8105f78 <HAL_DMA_IRQHandler+0xa30>)
 8105dca:	4293      	cmp	r3, r2
 8105dcc:	d018      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	4a6a      	ldr	r2, [pc, #424]	; (8105f7c <HAL_DMA_IRQHandler+0xa34>)
 8105dd4:	4293      	cmp	r3, r2
 8105dd6:	d013      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	4a68      	ldr	r2, [pc, #416]	; (8105f80 <HAL_DMA_IRQHandler+0xa38>)
 8105dde:	4293      	cmp	r3, r2
 8105de0:	d00e      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	681b      	ldr	r3, [r3, #0]
 8105de6:	4a67      	ldr	r2, [pc, #412]	; (8105f84 <HAL_DMA_IRQHandler+0xa3c>)
 8105de8:	4293      	cmp	r3, r2
 8105dea:	d009      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	4a65      	ldr	r2, [pc, #404]	; (8105f88 <HAL_DMA_IRQHandler+0xa40>)
 8105df2:	4293      	cmp	r3, r2
 8105df4:	d004      	beq.n	8105e00 <HAL_DMA_IRQHandler+0x8b8>
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	4a64      	ldr	r2, [pc, #400]	; (8105f8c <HAL_DMA_IRQHandler+0xa44>)
 8105dfc:	4293      	cmp	r3, r2
 8105dfe:	d108      	bne.n	8105e12 <HAL_DMA_IRQHandler+0x8ca>
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	681a      	ldr	r2, [r3, #0]
 8105e06:	687b      	ldr	r3, [r7, #4]
 8105e08:	681b      	ldr	r3, [r3, #0]
 8105e0a:	f022 0201 	bic.w	r2, r2, #1
 8105e0e:	601a      	str	r2, [r3, #0]
 8105e10:	e007      	b.n	8105e22 <HAL_DMA_IRQHandler+0x8da>
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	681a      	ldr	r2, [r3, #0]
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	681b      	ldr	r3, [r3, #0]
 8105e1c:	f022 0201 	bic.w	r2, r2, #1
 8105e20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8105e22:	68fb      	ldr	r3, [r7, #12]
 8105e24:	3301      	adds	r3, #1
 8105e26:	60fb      	str	r3, [r7, #12]
 8105e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105e2a:	429a      	cmp	r2, r3
 8105e2c:	d307      	bcc.n	8105e3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	681b      	ldr	r3, [r3, #0]
 8105e34:	f003 0301 	and.w	r3, r3, #1
 8105e38:	2b00      	cmp	r3, #0
 8105e3a:	d1f2      	bne.n	8105e22 <HAL_DMA_IRQHandler+0x8da>
 8105e3c:	e000      	b.n	8105e40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8105e3e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	2200      	movs	r2, #0
 8105e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	681b      	ldr	r3, [r3, #0]
 8105e4e:	f003 0301 	and.w	r3, r3, #1
 8105e52:	2b00      	cmp	r3, #0
 8105e54:	d004      	beq.n	8105e60 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	2203      	movs	r2, #3
 8105e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8105e5e:	e003      	b.n	8105e68 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	2201      	movs	r2, #1
 8105e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e6c:	2b00      	cmp	r3, #0
 8105e6e:	f000 8272 	beq.w	8106356 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e76:	6878      	ldr	r0, [r7, #4]
 8105e78:	4798      	blx	r3
 8105e7a:	e26c      	b.n	8106356 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	681b      	ldr	r3, [r3, #0]
 8105e80:	4a43      	ldr	r2, [pc, #268]	; (8105f90 <HAL_DMA_IRQHandler+0xa48>)
 8105e82:	4293      	cmp	r3, r2
 8105e84:	d022      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	681b      	ldr	r3, [r3, #0]
 8105e8a:	4a42      	ldr	r2, [pc, #264]	; (8105f94 <HAL_DMA_IRQHandler+0xa4c>)
 8105e8c:	4293      	cmp	r3, r2
 8105e8e:	d01d      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	681b      	ldr	r3, [r3, #0]
 8105e94:	4a40      	ldr	r2, [pc, #256]	; (8105f98 <HAL_DMA_IRQHandler+0xa50>)
 8105e96:	4293      	cmp	r3, r2
 8105e98:	d018      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105e9a:	687b      	ldr	r3, [r7, #4]
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	4a3f      	ldr	r2, [pc, #252]	; (8105f9c <HAL_DMA_IRQHandler+0xa54>)
 8105ea0:	4293      	cmp	r3, r2
 8105ea2:	d013      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	4a3d      	ldr	r2, [pc, #244]	; (8105fa0 <HAL_DMA_IRQHandler+0xa58>)
 8105eaa:	4293      	cmp	r3, r2
 8105eac:	d00e      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	4a3c      	ldr	r2, [pc, #240]	; (8105fa4 <HAL_DMA_IRQHandler+0xa5c>)
 8105eb4:	4293      	cmp	r3, r2
 8105eb6:	d009      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	4a3a      	ldr	r2, [pc, #232]	; (8105fa8 <HAL_DMA_IRQHandler+0xa60>)
 8105ebe:	4293      	cmp	r3, r2
 8105ec0:	d004      	beq.n	8105ecc <HAL_DMA_IRQHandler+0x984>
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	4a39      	ldr	r2, [pc, #228]	; (8105fac <HAL_DMA_IRQHandler+0xa64>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d101      	bne.n	8105ed0 <HAL_DMA_IRQHandler+0x988>
 8105ecc:	2301      	movs	r3, #1
 8105ece:	e000      	b.n	8105ed2 <HAL_DMA_IRQHandler+0x98a>
 8105ed0:	2300      	movs	r3, #0
 8105ed2:	2b00      	cmp	r3, #0
 8105ed4:	f000 823f 	beq.w	8106356 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8105ed8:	687b      	ldr	r3, [r7, #4]
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ee4:	f003 031f 	and.w	r3, r3, #31
 8105ee8:	2204      	movs	r2, #4
 8105eea:	409a      	lsls	r2, r3
 8105eec:	697b      	ldr	r3, [r7, #20]
 8105eee:	4013      	ands	r3, r2
 8105ef0:	2b00      	cmp	r3, #0
 8105ef2:	f000 80cd 	beq.w	8106090 <HAL_DMA_IRQHandler+0xb48>
 8105ef6:	693b      	ldr	r3, [r7, #16]
 8105ef8:	f003 0304 	and.w	r3, r3, #4
 8105efc:	2b00      	cmp	r3, #0
 8105efe:	f000 80c7 	beq.w	8106090 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f06:	f003 031f 	and.w	r3, r3, #31
 8105f0a:	2204      	movs	r2, #4
 8105f0c:	409a      	lsls	r2, r3
 8105f0e:	69fb      	ldr	r3, [r7, #28]
 8105f10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105f12:	693b      	ldr	r3, [r7, #16]
 8105f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105f18:	2b00      	cmp	r3, #0
 8105f1a:	d049      	beq.n	8105fb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105f1c:	693b      	ldr	r3, [r7, #16]
 8105f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105f22:	2b00      	cmp	r3, #0
 8105f24:	d109      	bne.n	8105f3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105f2a:	2b00      	cmp	r3, #0
 8105f2c:	f000 8210 	beq.w	8106350 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105f34:	6878      	ldr	r0, [r7, #4]
 8105f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105f38:	e20a      	b.n	8106350 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	f000 8206 	beq.w	8106350 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f48:	6878      	ldr	r0, [r7, #4]
 8105f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105f4c:	e200      	b.n	8106350 <HAL_DMA_IRQHandler+0xe08>
 8105f4e:	bf00      	nop
 8105f50:	40020010 	.word	0x40020010
 8105f54:	40020028 	.word	0x40020028
 8105f58:	40020040 	.word	0x40020040
 8105f5c:	40020058 	.word	0x40020058
 8105f60:	40020070 	.word	0x40020070
 8105f64:	40020088 	.word	0x40020088
 8105f68:	400200a0 	.word	0x400200a0
 8105f6c:	400200b8 	.word	0x400200b8
 8105f70:	40020410 	.word	0x40020410
 8105f74:	40020428 	.word	0x40020428
 8105f78:	40020440 	.word	0x40020440
 8105f7c:	40020458 	.word	0x40020458
 8105f80:	40020470 	.word	0x40020470
 8105f84:	40020488 	.word	0x40020488
 8105f88:	400204a0 	.word	0x400204a0
 8105f8c:	400204b8 	.word	0x400204b8
 8105f90:	58025408 	.word	0x58025408
 8105f94:	5802541c 	.word	0x5802541c
 8105f98:	58025430 	.word	0x58025430
 8105f9c:	58025444 	.word	0x58025444
 8105fa0:	58025458 	.word	0x58025458
 8105fa4:	5802546c 	.word	0x5802546c
 8105fa8:	58025480 	.word	0x58025480
 8105fac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105fb0:	693b      	ldr	r3, [r7, #16]
 8105fb2:	f003 0320 	and.w	r3, r3, #32
 8105fb6:	2b00      	cmp	r3, #0
 8105fb8:	d160      	bne.n	810607c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	4a8c      	ldr	r2, [pc, #560]	; (81061f0 <HAL_DMA_IRQHandler+0xca8>)
 8105fc0:	4293      	cmp	r3, r2
 8105fc2:	d04a      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	4a8a      	ldr	r2, [pc, #552]	; (81061f4 <HAL_DMA_IRQHandler+0xcac>)
 8105fca:	4293      	cmp	r3, r2
 8105fcc:	d045      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	681b      	ldr	r3, [r3, #0]
 8105fd2:	4a89      	ldr	r2, [pc, #548]	; (81061f8 <HAL_DMA_IRQHandler+0xcb0>)
 8105fd4:	4293      	cmp	r3, r2
 8105fd6:	d040      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	4a87      	ldr	r2, [pc, #540]	; (81061fc <HAL_DMA_IRQHandler+0xcb4>)
 8105fde:	4293      	cmp	r3, r2
 8105fe0:	d03b      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	4a86      	ldr	r2, [pc, #536]	; (8106200 <HAL_DMA_IRQHandler+0xcb8>)
 8105fe8:	4293      	cmp	r3, r2
 8105fea:	d036      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	4a84      	ldr	r2, [pc, #528]	; (8106204 <HAL_DMA_IRQHandler+0xcbc>)
 8105ff2:	4293      	cmp	r3, r2
 8105ff4:	d031      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	681b      	ldr	r3, [r3, #0]
 8105ffa:	4a83      	ldr	r2, [pc, #524]	; (8106208 <HAL_DMA_IRQHandler+0xcc0>)
 8105ffc:	4293      	cmp	r3, r2
 8105ffe:	d02c      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	4a81      	ldr	r2, [pc, #516]	; (810620c <HAL_DMA_IRQHandler+0xcc4>)
 8106006:	4293      	cmp	r3, r2
 8106008:	d027      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	681b      	ldr	r3, [r3, #0]
 810600e:	4a80      	ldr	r2, [pc, #512]	; (8106210 <HAL_DMA_IRQHandler+0xcc8>)
 8106010:	4293      	cmp	r3, r2
 8106012:	d022      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	681b      	ldr	r3, [r3, #0]
 8106018:	4a7e      	ldr	r2, [pc, #504]	; (8106214 <HAL_DMA_IRQHandler+0xccc>)
 810601a:	4293      	cmp	r3, r2
 810601c:	d01d      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	4a7d      	ldr	r2, [pc, #500]	; (8106218 <HAL_DMA_IRQHandler+0xcd0>)
 8106024:	4293      	cmp	r3, r2
 8106026:	d018      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	4a7b      	ldr	r2, [pc, #492]	; (810621c <HAL_DMA_IRQHandler+0xcd4>)
 810602e:	4293      	cmp	r3, r2
 8106030:	d013      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8106032:	687b      	ldr	r3, [r7, #4]
 8106034:	681b      	ldr	r3, [r3, #0]
 8106036:	4a7a      	ldr	r2, [pc, #488]	; (8106220 <HAL_DMA_IRQHandler+0xcd8>)
 8106038:	4293      	cmp	r3, r2
 810603a:	d00e      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	4a78      	ldr	r2, [pc, #480]	; (8106224 <HAL_DMA_IRQHandler+0xcdc>)
 8106042:	4293      	cmp	r3, r2
 8106044:	d009      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	681b      	ldr	r3, [r3, #0]
 810604a:	4a77      	ldr	r2, [pc, #476]	; (8106228 <HAL_DMA_IRQHandler+0xce0>)
 810604c:	4293      	cmp	r3, r2
 810604e:	d004      	beq.n	810605a <HAL_DMA_IRQHandler+0xb12>
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	681b      	ldr	r3, [r3, #0]
 8106054:	4a75      	ldr	r2, [pc, #468]	; (810622c <HAL_DMA_IRQHandler+0xce4>)
 8106056:	4293      	cmp	r3, r2
 8106058:	d108      	bne.n	810606c <HAL_DMA_IRQHandler+0xb24>
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	681b      	ldr	r3, [r3, #0]
 810605e:	681a      	ldr	r2, [r3, #0]
 8106060:	687b      	ldr	r3, [r7, #4]
 8106062:	681b      	ldr	r3, [r3, #0]
 8106064:	f022 0208 	bic.w	r2, r2, #8
 8106068:	601a      	str	r2, [r3, #0]
 810606a:	e007      	b.n	810607c <HAL_DMA_IRQHandler+0xb34>
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	681a      	ldr	r2, [r3, #0]
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	f022 0204 	bic.w	r2, r2, #4
 810607a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106080:	2b00      	cmp	r3, #0
 8106082:	f000 8165 	beq.w	8106350 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810608a:	6878      	ldr	r0, [r7, #4]
 810608c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810608e:	e15f      	b.n	8106350 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106094:	f003 031f 	and.w	r3, r3, #31
 8106098:	2202      	movs	r2, #2
 810609a:	409a      	lsls	r2, r3
 810609c:	697b      	ldr	r3, [r7, #20]
 810609e:	4013      	ands	r3, r2
 81060a0:	2b00      	cmp	r3, #0
 81060a2:	f000 80c5 	beq.w	8106230 <HAL_DMA_IRQHandler+0xce8>
 81060a6:	693b      	ldr	r3, [r7, #16]
 81060a8:	f003 0302 	and.w	r3, r3, #2
 81060ac:	2b00      	cmp	r3, #0
 81060ae:	f000 80bf 	beq.w	8106230 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81060b2:	687b      	ldr	r3, [r7, #4]
 81060b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060b6:	f003 031f 	and.w	r3, r3, #31
 81060ba:	2202      	movs	r2, #2
 81060bc:	409a      	lsls	r2, r3
 81060be:	69fb      	ldr	r3, [r7, #28]
 81060c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81060c2:	693b      	ldr	r3, [r7, #16]
 81060c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81060c8:	2b00      	cmp	r3, #0
 81060ca:	d018      	beq.n	81060fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81060cc:	693b      	ldr	r3, [r7, #16]
 81060ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81060d2:	2b00      	cmp	r3, #0
 81060d4:	d109      	bne.n	81060ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81060d6:	687b      	ldr	r3, [r7, #4]
 81060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060da:	2b00      	cmp	r3, #0
 81060dc:	f000 813a 	beq.w	8106354 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060e4:	6878      	ldr	r0, [r7, #4]
 81060e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81060e8:	e134      	b.n	8106354 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81060ea:	687b      	ldr	r3, [r7, #4]
 81060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	f000 8130 	beq.w	8106354 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81060f8:	6878      	ldr	r0, [r7, #4]
 81060fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81060fc:	e12a      	b.n	8106354 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81060fe:	693b      	ldr	r3, [r7, #16]
 8106100:	f003 0320 	and.w	r3, r3, #32
 8106104:	2b00      	cmp	r3, #0
 8106106:	d168      	bne.n	81061da <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	681b      	ldr	r3, [r3, #0]
 810610c:	4a38      	ldr	r2, [pc, #224]	; (81061f0 <HAL_DMA_IRQHandler+0xca8>)
 810610e:	4293      	cmp	r3, r2
 8106110:	d04a      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	4a37      	ldr	r2, [pc, #220]	; (81061f4 <HAL_DMA_IRQHandler+0xcac>)
 8106118:	4293      	cmp	r3, r2
 810611a:	d045      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 810611c:	687b      	ldr	r3, [r7, #4]
 810611e:	681b      	ldr	r3, [r3, #0]
 8106120:	4a35      	ldr	r2, [pc, #212]	; (81061f8 <HAL_DMA_IRQHandler+0xcb0>)
 8106122:	4293      	cmp	r3, r2
 8106124:	d040      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	681b      	ldr	r3, [r3, #0]
 810612a:	4a34      	ldr	r2, [pc, #208]	; (81061fc <HAL_DMA_IRQHandler+0xcb4>)
 810612c:	4293      	cmp	r3, r2
 810612e:	d03b      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	681b      	ldr	r3, [r3, #0]
 8106134:	4a32      	ldr	r2, [pc, #200]	; (8106200 <HAL_DMA_IRQHandler+0xcb8>)
 8106136:	4293      	cmp	r3, r2
 8106138:	d036      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 810613a:	687b      	ldr	r3, [r7, #4]
 810613c:	681b      	ldr	r3, [r3, #0]
 810613e:	4a31      	ldr	r2, [pc, #196]	; (8106204 <HAL_DMA_IRQHandler+0xcbc>)
 8106140:	4293      	cmp	r3, r2
 8106142:	d031      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	681b      	ldr	r3, [r3, #0]
 8106148:	4a2f      	ldr	r2, [pc, #188]	; (8106208 <HAL_DMA_IRQHandler+0xcc0>)
 810614a:	4293      	cmp	r3, r2
 810614c:	d02c      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	681b      	ldr	r3, [r3, #0]
 8106152:	4a2e      	ldr	r2, [pc, #184]	; (810620c <HAL_DMA_IRQHandler+0xcc4>)
 8106154:	4293      	cmp	r3, r2
 8106156:	d027      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	681b      	ldr	r3, [r3, #0]
 810615c:	4a2c      	ldr	r2, [pc, #176]	; (8106210 <HAL_DMA_IRQHandler+0xcc8>)
 810615e:	4293      	cmp	r3, r2
 8106160:	d022      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106162:	687b      	ldr	r3, [r7, #4]
 8106164:	681b      	ldr	r3, [r3, #0]
 8106166:	4a2b      	ldr	r2, [pc, #172]	; (8106214 <HAL_DMA_IRQHandler+0xccc>)
 8106168:	4293      	cmp	r3, r2
 810616a:	d01d      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	4a29      	ldr	r2, [pc, #164]	; (8106218 <HAL_DMA_IRQHandler+0xcd0>)
 8106172:	4293      	cmp	r3, r2
 8106174:	d018      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	4a28      	ldr	r2, [pc, #160]	; (810621c <HAL_DMA_IRQHandler+0xcd4>)
 810617c:	4293      	cmp	r3, r2
 810617e:	d013      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	4a26      	ldr	r2, [pc, #152]	; (8106220 <HAL_DMA_IRQHandler+0xcd8>)
 8106186:	4293      	cmp	r3, r2
 8106188:	d00e      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	4a25      	ldr	r2, [pc, #148]	; (8106224 <HAL_DMA_IRQHandler+0xcdc>)
 8106190:	4293      	cmp	r3, r2
 8106192:	d009      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	681b      	ldr	r3, [r3, #0]
 8106198:	4a23      	ldr	r2, [pc, #140]	; (8106228 <HAL_DMA_IRQHandler+0xce0>)
 810619a:	4293      	cmp	r3, r2
 810619c:	d004      	beq.n	81061a8 <HAL_DMA_IRQHandler+0xc60>
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	681b      	ldr	r3, [r3, #0]
 81061a2:	4a22      	ldr	r2, [pc, #136]	; (810622c <HAL_DMA_IRQHandler+0xce4>)
 81061a4:	4293      	cmp	r3, r2
 81061a6:	d108      	bne.n	81061ba <HAL_DMA_IRQHandler+0xc72>
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	681a      	ldr	r2, [r3, #0]
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	f022 0214 	bic.w	r2, r2, #20
 81061b6:	601a      	str	r2, [r3, #0]
 81061b8:	e007      	b.n	81061ca <HAL_DMA_IRQHandler+0xc82>
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	681a      	ldr	r2, [r3, #0]
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	681b      	ldr	r3, [r3, #0]
 81061c4:	f022 020a 	bic.w	r2, r2, #10
 81061c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	2200      	movs	r2, #0
 81061ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	2201      	movs	r2, #1
 81061d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061de:	2b00      	cmp	r3, #0
 81061e0:	f000 80b8 	beq.w	8106354 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061e8:	6878      	ldr	r0, [r7, #4]
 81061ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81061ec:	e0b2      	b.n	8106354 <HAL_DMA_IRQHandler+0xe0c>
 81061ee:	bf00      	nop
 81061f0:	40020010 	.word	0x40020010
 81061f4:	40020028 	.word	0x40020028
 81061f8:	40020040 	.word	0x40020040
 81061fc:	40020058 	.word	0x40020058
 8106200:	40020070 	.word	0x40020070
 8106204:	40020088 	.word	0x40020088
 8106208:	400200a0 	.word	0x400200a0
 810620c:	400200b8 	.word	0x400200b8
 8106210:	40020410 	.word	0x40020410
 8106214:	40020428 	.word	0x40020428
 8106218:	40020440 	.word	0x40020440
 810621c:	40020458 	.word	0x40020458
 8106220:	40020470 	.word	0x40020470
 8106224:	40020488 	.word	0x40020488
 8106228:	400204a0 	.word	0x400204a0
 810622c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106234:	f003 031f 	and.w	r3, r3, #31
 8106238:	2208      	movs	r2, #8
 810623a:	409a      	lsls	r2, r3
 810623c:	697b      	ldr	r3, [r7, #20]
 810623e:	4013      	ands	r3, r2
 8106240:	2b00      	cmp	r3, #0
 8106242:	f000 8088 	beq.w	8106356 <HAL_DMA_IRQHandler+0xe0e>
 8106246:	693b      	ldr	r3, [r7, #16]
 8106248:	f003 0308 	and.w	r3, r3, #8
 810624c:	2b00      	cmp	r3, #0
 810624e:	f000 8082 	beq.w	8106356 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	4a41      	ldr	r2, [pc, #260]	; (810635c <HAL_DMA_IRQHandler+0xe14>)
 8106258:	4293      	cmp	r3, r2
 810625a:	d04a      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	4a3f      	ldr	r2, [pc, #252]	; (8106360 <HAL_DMA_IRQHandler+0xe18>)
 8106262:	4293      	cmp	r3, r2
 8106264:	d045      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	4a3e      	ldr	r2, [pc, #248]	; (8106364 <HAL_DMA_IRQHandler+0xe1c>)
 810626c:	4293      	cmp	r3, r2
 810626e:	d040      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	4a3c      	ldr	r2, [pc, #240]	; (8106368 <HAL_DMA_IRQHandler+0xe20>)
 8106276:	4293      	cmp	r3, r2
 8106278:	d03b      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	4a3b      	ldr	r2, [pc, #236]	; (810636c <HAL_DMA_IRQHandler+0xe24>)
 8106280:	4293      	cmp	r3, r2
 8106282:	d036      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	4a39      	ldr	r2, [pc, #228]	; (8106370 <HAL_DMA_IRQHandler+0xe28>)
 810628a:	4293      	cmp	r3, r2
 810628c:	d031      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	681b      	ldr	r3, [r3, #0]
 8106292:	4a38      	ldr	r2, [pc, #224]	; (8106374 <HAL_DMA_IRQHandler+0xe2c>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d02c      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	4a36      	ldr	r2, [pc, #216]	; (8106378 <HAL_DMA_IRQHandler+0xe30>)
 810629e:	4293      	cmp	r3, r2
 81062a0:	d027      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	4a35      	ldr	r2, [pc, #212]	; (810637c <HAL_DMA_IRQHandler+0xe34>)
 81062a8:	4293      	cmp	r3, r2
 81062aa:	d022      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a33      	ldr	r2, [pc, #204]	; (8106380 <HAL_DMA_IRQHandler+0xe38>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d01d      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	681b      	ldr	r3, [r3, #0]
 81062ba:	4a32      	ldr	r2, [pc, #200]	; (8106384 <HAL_DMA_IRQHandler+0xe3c>)
 81062bc:	4293      	cmp	r3, r2
 81062be:	d018      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	681b      	ldr	r3, [r3, #0]
 81062c4:	4a30      	ldr	r2, [pc, #192]	; (8106388 <HAL_DMA_IRQHandler+0xe40>)
 81062c6:	4293      	cmp	r3, r2
 81062c8:	d013      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	4a2f      	ldr	r2, [pc, #188]	; (810638c <HAL_DMA_IRQHandler+0xe44>)
 81062d0:	4293      	cmp	r3, r2
 81062d2:	d00e      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	681b      	ldr	r3, [r3, #0]
 81062d8:	4a2d      	ldr	r2, [pc, #180]	; (8106390 <HAL_DMA_IRQHandler+0xe48>)
 81062da:	4293      	cmp	r3, r2
 81062dc:	d009      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	4a2c      	ldr	r2, [pc, #176]	; (8106394 <HAL_DMA_IRQHandler+0xe4c>)
 81062e4:	4293      	cmp	r3, r2
 81062e6:	d004      	beq.n	81062f2 <HAL_DMA_IRQHandler+0xdaa>
 81062e8:	687b      	ldr	r3, [r7, #4]
 81062ea:	681b      	ldr	r3, [r3, #0]
 81062ec:	4a2a      	ldr	r2, [pc, #168]	; (8106398 <HAL_DMA_IRQHandler+0xe50>)
 81062ee:	4293      	cmp	r3, r2
 81062f0:	d108      	bne.n	8106304 <HAL_DMA_IRQHandler+0xdbc>
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	681a      	ldr	r2, [r3, #0]
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	f022 021c 	bic.w	r2, r2, #28
 8106300:	601a      	str	r2, [r3, #0]
 8106302:	e007      	b.n	8106314 <HAL_DMA_IRQHandler+0xdcc>
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	681a      	ldr	r2, [r3, #0]
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	681b      	ldr	r3, [r3, #0]
 810630e:	f022 020e 	bic.w	r2, r2, #14
 8106312:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106318:	f003 031f 	and.w	r3, r3, #31
 810631c:	2201      	movs	r2, #1
 810631e:	409a      	lsls	r2, r3
 8106320:	69fb      	ldr	r3, [r7, #28]
 8106322:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	2201      	movs	r2, #1
 8106328:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	2200      	movs	r2, #0
 810632e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	2201      	movs	r2, #1
 8106336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810633e:	2b00      	cmp	r3, #0
 8106340:	d009      	beq.n	8106356 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106346:	6878      	ldr	r0, [r7, #4]
 8106348:	4798      	blx	r3
 810634a:	e004      	b.n	8106356 <HAL_DMA_IRQHandler+0xe0e>
          return;
 810634c:	bf00      	nop
 810634e:	e002      	b.n	8106356 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106350:	bf00      	nop
 8106352:	e000      	b.n	8106356 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106354:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106356:	3728      	adds	r7, #40	; 0x28
 8106358:	46bd      	mov	sp, r7
 810635a:	bd80      	pop	{r7, pc}
 810635c:	40020010 	.word	0x40020010
 8106360:	40020028 	.word	0x40020028
 8106364:	40020040 	.word	0x40020040
 8106368:	40020058 	.word	0x40020058
 810636c:	40020070 	.word	0x40020070
 8106370:	40020088 	.word	0x40020088
 8106374:	400200a0 	.word	0x400200a0
 8106378:	400200b8 	.word	0x400200b8
 810637c:	40020410 	.word	0x40020410
 8106380:	40020428 	.word	0x40020428
 8106384:	40020440 	.word	0x40020440
 8106388:	40020458 	.word	0x40020458
 810638c:	40020470 	.word	0x40020470
 8106390:	40020488 	.word	0x40020488
 8106394:	400204a0 	.word	0x400204a0
 8106398:	400204b8 	.word	0x400204b8

0810639c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 810639c:	b480      	push	{r7}
 810639e:	b083      	sub	sp, #12
 81063a0:	af00      	add	r7, sp, #0
 81063a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81063aa:	b2db      	uxtb	r3, r3
}
 81063ac:	4618      	mov	r0, r3
 81063ae:	370c      	adds	r7, #12
 81063b0:	46bd      	mov	sp, r7
 81063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063b6:	4770      	bx	lr

081063b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 81063b8:	b480      	push	{r7}
 81063ba:	b083      	sub	sp, #12
 81063bc:	af00      	add	r7, sp, #0
 81063be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 81063c4:	4618      	mov	r0, r3
 81063c6:	370c      	adds	r7, #12
 81063c8:	46bd      	mov	sp, r7
 81063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ce:	4770      	bx	lr

081063d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 81063d0:	b480      	push	{r7}
 81063d2:	b087      	sub	sp, #28
 81063d4:	af00      	add	r7, sp, #0
 81063d6:	60f8      	str	r0, [r7, #12]
 81063d8:	60b9      	str	r1, [r7, #8]
 81063da:	607a      	str	r2, [r7, #4]
 81063dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81063de:	68fb      	ldr	r3, [r7, #12]
 81063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81063e4:	68fb      	ldr	r3, [r7, #12]
 81063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81063ea:	68fb      	ldr	r3, [r7, #12]
 81063ec:	681b      	ldr	r3, [r3, #0]
 81063ee:	4a84      	ldr	r2, [pc, #528]	; (8106600 <DMA_SetConfig+0x230>)
 81063f0:	4293      	cmp	r3, r2
 81063f2:	d072      	beq.n	81064da <DMA_SetConfig+0x10a>
 81063f4:	68fb      	ldr	r3, [r7, #12]
 81063f6:	681b      	ldr	r3, [r3, #0]
 81063f8:	4a82      	ldr	r2, [pc, #520]	; (8106604 <DMA_SetConfig+0x234>)
 81063fa:	4293      	cmp	r3, r2
 81063fc:	d06d      	beq.n	81064da <DMA_SetConfig+0x10a>
 81063fe:	68fb      	ldr	r3, [r7, #12]
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	4a81      	ldr	r2, [pc, #516]	; (8106608 <DMA_SetConfig+0x238>)
 8106404:	4293      	cmp	r3, r2
 8106406:	d068      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106408:	68fb      	ldr	r3, [r7, #12]
 810640a:	681b      	ldr	r3, [r3, #0]
 810640c:	4a7f      	ldr	r2, [pc, #508]	; (810660c <DMA_SetConfig+0x23c>)
 810640e:	4293      	cmp	r3, r2
 8106410:	d063      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106412:	68fb      	ldr	r3, [r7, #12]
 8106414:	681b      	ldr	r3, [r3, #0]
 8106416:	4a7e      	ldr	r2, [pc, #504]	; (8106610 <DMA_SetConfig+0x240>)
 8106418:	4293      	cmp	r3, r2
 810641a:	d05e      	beq.n	81064da <DMA_SetConfig+0x10a>
 810641c:	68fb      	ldr	r3, [r7, #12]
 810641e:	681b      	ldr	r3, [r3, #0]
 8106420:	4a7c      	ldr	r2, [pc, #496]	; (8106614 <DMA_SetConfig+0x244>)
 8106422:	4293      	cmp	r3, r2
 8106424:	d059      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106426:	68fb      	ldr	r3, [r7, #12]
 8106428:	681b      	ldr	r3, [r3, #0]
 810642a:	4a7b      	ldr	r2, [pc, #492]	; (8106618 <DMA_SetConfig+0x248>)
 810642c:	4293      	cmp	r3, r2
 810642e:	d054      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106430:	68fb      	ldr	r3, [r7, #12]
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	4a79      	ldr	r2, [pc, #484]	; (810661c <DMA_SetConfig+0x24c>)
 8106436:	4293      	cmp	r3, r2
 8106438:	d04f      	beq.n	81064da <DMA_SetConfig+0x10a>
 810643a:	68fb      	ldr	r3, [r7, #12]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	4a78      	ldr	r2, [pc, #480]	; (8106620 <DMA_SetConfig+0x250>)
 8106440:	4293      	cmp	r3, r2
 8106442:	d04a      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106444:	68fb      	ldr	r3, [r7, #12]
 8106446:	681b      	ldr	r3, [r3, #0]
 8106448:	4a76      	ldr	r2, [pc, #472]	; (8106624 <DMA_SetConfig+0x254>)
 810644a:	4293      	cmp	r3, r2
 810644c:	d045      	beq.n	81064da <DMA_SetConfig+0x10a>
 810644e:	68fb      	ldr	r3, [r7, #12]
 8106450:	681b      	ldr	r3, [r3, #0]
 8106452:	4a75      	ldr	r2, [pc, #468]	; (8106628 <DMA_SetConfig+0x258>)
 8106454:	4293      	cmp	r3, r2
 8106456:	d040      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106458:	68fb      	ldr	r3, [r7, #12]
 810645a:	681b      	ldr	r3, [r3, #0]
 810645c:	4a73      	ldr	r2, [pc, #460]	; (810662c <DMA_SetConfig+0x25c>)
 810645e:	4293      	cmp	r3, r2
 8106460:	d03b      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106462:	68fb      	ldr	r3, [r7, #12]
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	4a72      	ldr	r2, [pc, #456]	; (8106630 <DMA_SetConfig+0x260>)
 8106468:	4293      	cmp	r3, r2
 810646a:	d036      	beq.n	81064da <DMA_SetConfig+0x10a>
 810646c:	68fb      	ldr	r3, [r7, #12]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	4a70      	ldr	r2, [pc, #448]	; (8106634 <DMA_SetConfig+0x264>)
 8106472:	4293      	cmp	r3, r2
 8106474:	d031      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106476:	68fb      	ldr	r3, [r7, #12]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	4a6f      	ldr	r2, [pc, #444]	; (8106638 <DMA_SetConfig+0x268>)
 810647c:	4293      	cmp	r3, r2
 810647e:	d02c      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	4a6d      	ldr	r2, [pc, #436]	; (810663c <DMA_SetConfig+0x26c>)
 8106486:	4293      	cmp	r3, r2
 8106488:	d027      	beq.n	81064da <DMA_SetConfig+0x10a>
 810648a:	68fb      	ldr	r3, [r7, #12]
 810648c:	681b      	ldr	r3, [r3, #0]
 810648e:	4a6c      	ldr	r2, [pc, #432]	; (8106640 <DMA_SetConfig+0x270>)
 8106490:	4293      	cmp	r3, r2
 8106492:	d022      	beq.n	81064da <DMA_SetConfig+0x10a>
 8106494:	68fb      	ldr	r3, [r7, #12]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	4a6a      	ldr	r2, [pc, #424]	; (8106644 <DMA_SetConfig+0x274>)
 810649a:	4293      	cmp	r3, r2
 810649c:	d01d      	beq.n	81064da <DMA_SetConfig+0x10a>
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	4a69      	ldr	r2, [pc, #420]	; (8106648 <DMA_SetConfig+0x278>)
 81064a4:	4293      	cmp	r3, r2
 81064a6:	d018      	beq.n	81064da <DMA_SetConfig+0x10a>
 81064a8:	68fb      	ldr	r3, [r7, #12]
 81064aa:	681b      	ldr	r3, [r3, #0]
 81064ac:	4a67      	ldr	r2, [pc, #412]	; (810664c <DMA_SetConfig+0x27c>)
 81064ae:	4293      	cmp	r3, r2
 81064b0:	d013      	beq.n	81064da <DMA_SetConfig+0x10a>
 81064b2:	68fb      	ldr	r3, [r7, #12]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	4a66      	ldr	r2, [pc, #408]	; (8106650 <DMA_SetConfig+0x280>)
 81064b8:	4293      	cmp	r3, r2
 81064ba:	d00e      	beq.n	81064da <DMA_SetConfig+0x10a>
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	4a64      	ldr	r2, [pc, #400]	; (8106654 <DMA_SetConfig+0x284>)
 81064c2:	4293      	cmp	r3, r2
 81064c4:	d009      	beq.n	81064da <DMA_SetConfig+0x10a>
 81064c6:	68fb      	ldr	r3, [r7, #12]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	4a63      	ldr	r2, [pc, #396]	; (8106658 <DMA_SetConfig+0x288>)
 81064cc:	4293      	cmp	r3, r2
 81064ce:	d004      	beq.n	81064da <DMA_SetConfig+0x10a>
 81064d0:	68fb      	ldr	r3, [r7, #12]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	4a61      	ldr	r2, [pc, #388]	; (810665c <DMA_SetConfig+0x28c>)
 81064d6:	4293      	cmp	r3, r2
 81064d8:	d101      	bne.n	81064de <DMA_SetConfig+0x10e>
 81064da:	2301      	movs	r3, #1
 81064dc:	e000      	b.n	81064e0 <DMA_SetConfig+0x110>
 81064de:	2300      	movs	r3, #0
 81064e0:	2b00      	cmp	r3, #0
 81064e2:	d00d      	beq.n	8106500 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81064e4:	68fb      	ldr	r3, [r7, #12]
 81064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81064e8:	68fa      	ldr	r2, [r7, #12]
 81064ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81064ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81064ee:	68fb      	ldr	r3, [r7, #12]
 81064f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81064f2:	2b00      	cmp	r3, #0
 81064f4:	d004      	beq.n	8106500 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81064f6:	68fb      	ldr	r3, [r7, #12]
 81064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81064fa:	68fa      	ldr	r2, [r7, #12]
 81064fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81064fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106500:	68fb      	ldr	r3, [r7, #12]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	4a3e      	ldr	r2, [pc, #248]	; (8106600 <DMA_SetConfig+0x230>)
 8106506:	4293      	cmp	r3, r2
 8106508:	d04a      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 810650a:	68fb      	ldr	r3, [r7, #12]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a3d      	ldr	r2, [pc, #244]	; (8106604 <DMA_SetConfig+0x234>)
 8106510:	4293      	cmp	r3, r2
 8106512:	d045      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106514:	68fb      	ldr	r3, [r7, #12]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	4a3b      	ldr	r2, [pc, #236]	; (8106608 <DMA_SetConfig+0x238>)
 810651a:	4293      	cmp	r3, r2
 810651c:	d040      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	681b      	ldr	r3, [r3, #0]
 8106522:	4a3a      	ldr	r2, [pc, #232]	; (810660c <DMA_SetConfig+0x23c>)
 8106524:	4293      	cmp	r3, r2
 8106526:	d03b      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106528:	68fb      	ldr	r3, [r7, #12]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	4a38      	ldr	r2, [pc, #224]	; (8106610 <DMA_SetConfig+0x240>)
 810652e:	4293      	cmp	r3, r2
 8106530:	d036      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106532:	68fb      	ldr	r3, [r7, #12]
 8106534:	681b      	ldr	r3, [r3, #0]
 8106536:	4a37      	ldr	r2, [pc, #220]	; (8106614 <DMA_SetConfig+0x244>)
 8106538:	4293      	cmp	r3, r2
 810653a:	d031      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 810653c:	68fb      	ldr	r3, [r7, #12]
 810653e:	681b      	ldr	r3, [r3, #0]
 8106540:	4a35      	ldr	r2, [pc, #212]	; (8106618 <DMA_SetConfig+0x248>)
 8106542:	4293      	cmp	r3, r2
 8106544:	d02c      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106546:	68fb      	ldr	r3, [r7, #12]
 8106548:	681b      	ldr	r3, [r3, #0]
 810654a:	4a34      	ldr	r2, [pc, #208]	; (810661c <DMA_SetConfig+0x24c>)
 810654c:	4293      	cmp	r3, r2
 810654e:	d027      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	681b      	ldr	r3, [r3, #0]
 8106554:	4a32      	ldr	r2, [pc, #200]	; (8106620 <DMA_SetConfig+0x250>)
 8106556:	4293      	cmp	r3, r2
 8106558:	d022      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 810655a:	68fb      	ldr	r3, [r7, #12]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	4a31      	ldr	r2, [pc, #196]	; (8106624 <DMA_SetConfig+0x254>)
 8106560:	4293      	cmp	r3, r2
 8106562:	d01d      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106564:	68fb      	ldr	r3, [r7, #12]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	4a2f      	ldr	r2, [pc, #188]	; (8106628 <DMA_SetConfig+0x258>)
 810656a:	4293      	cmp	r3, r2
 810656c:	d018      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 810656e:	68fb      	ldr	r3, [r7, #12]
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	4a2e      	ldr	r2, [pc, #184]	; (810662c <DMA_SetConfig+0x25c>)
 8106574:	4293      	cmp	r3, r2
 8106576:	d013      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106578:	68fb      	ldr	r3, [r7, #12]
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	4a2c      	ldr	r2, [pc, #176]	; (8106630 <DMA_SetConfig+0x260>)
 810657e:	4293      	cmp	r3, r2
 8106580:	d00e      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106582:	68fb      	ldr	r3, [r7, #12]
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	4a2b      	ldr	r2, [pc, #172]	; (8106634 <DMA_SetConfig+0x264>)
 8106588:	4293      	cmp	r3, r2
 810658a:	d009      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 810658c:	68fb      	ldr	r3, [r7, #12]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	4a29      	ldr	r2, [pc, #164]	; (8106638 <DMA_SetConfig+0x268>)
 8106592:	4293      	cmp	r3, r2
 8106594:	d004      	beq.n	81065a0 <DMA_SetConfig+0x1d0>
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	4a28      	ldr	r2, [pc, #160]	; (810663c <DMA_SetConfig+0x26c>)
 810659c:	4293      	cmp	r3, r2
 810659e:	d101      	bne.n	81065a4 <DMA_SetConfig+0x1d4>
 81065a0:	2301      	movs	r3, #1
 81065a2:	e000      	b.n	81065a6 <DMA_SetConfig+0x1d6>
 81065a4:	2300      	movs	r3, #0
 81065a6:	2b00      	cmp	r3, #0
 81065a8:	d05a      	beq.n	8106660 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81065aa:	68fb      	ldr	r3, [r7, #12]
 81065ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81065ae:	f003 031f 	and.w	r3, r3, #31
 81065b2:	223f      	movs	r2, #63	; 0x3f
 81065b4:	409a      	lsls	r2, r3
 81065b6:	697b      	ldr	r3, [r7, #20]
 81065b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81065ba:	68fb      	ldr	r3, [r7, #12]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	681a      	ldr	r2, [r3, #0]
 81065c0:	68fb      	ldr	r3, [r7, #12]
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81065c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81065ca:	68fb      	ldr	r3, [r7, #12]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	683a      	ldr	r2, [r7, #0]
 81065d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81065d2:	68fb      	ldr	r3, [r7, #12]
 81065d4:	689b      	ldr	r3, [r3, #8]
 81065d6:	2b40      	cmp	r3, #64	; 0x40
 81065d8:	d108      	bne.n	81065ec <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	687a      	ldr	r2, [r7, #4]
 81065e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81065e2:	68fb      	ldr	r3, [r7, #12]
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	68ba      	ldr	r2, [r7, #8]
 81065e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 81065ea:	e087      	b.n	81066fc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81065ec:	68fb      	ldr	r3, [r7, #12]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	68ba      	ldr	r2, [r7, #8]
 81065f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81065f4:	68fb      	ldr	r3, [r7, #12]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	687a      	ldr	r2, [r7, #4]
 81065fa:	60da      	str	r2, [r3, #12]
}
 81065fc:	e07e      	b.n	81066fc <DMA_SetConfig+0x32c>
 81065fe:	bf00      	nop
 8106600:	40020010 	.word	0x40020010
 8106604:	40020028 	.word	0x40020028
 8106608:	40020040 	.word	0x40020040
 810660c:	40020058 	.word	0x40020058
 8106610:	40020070 	.word	0x40020070
 8106614:	40020088 	.word	0x40020088
 8106618:	400200a0 	.word	0x400200a0
 810661c:	400200b8 	.word	0x400200b8
 8106620:	40020410 	.word	0x40020410
 8106624:	40020428 	.word	0x40020428
 8106628:	40020440 	.word	0x40020440
 810662c:	40020458 	.word	0x40020458
 8106630:	40020470 	.word	0x40020470
 8106634:	40020488 	.word	0x40020488
 8106638:	400204a0 	.word	0x400204a0
 810663c:	400204b8 	.word	0x400204b8
 8106640:	58025408 	.word	0x58025408
 8106644:	5802541c 	.word	0x5802541c
 8106648:	58025430 	.word	0x58025430
 810664c:	58025444 	.word	0x58025444
 8106650:	58025458 	.word	0x58025458
 8106654:	5802546c 	.word	0x5802546c
 8106658:	58025480 	.word	0x58025480
 810665c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8106660:	68fb      	ldr	r3, [r7, #12]
 8106662:	681b      	ldr	r3, [r3, #0]
 8106664:	4a28      	ldr	r2, [pc, #160]	; (8106708 <DMA_SetConfig+0x338>)
 8106666:	4293      	cmp	r3, r2
 8106668:	d022      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 810666a:	68fb      	ldr	r3, [r7, #12]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	4a27      	ldr	r2, [pc, #156]	; (810670c <DMA_SetConfig+0x33c>)
 8106670:	4293      	cmp	r3, r2
 8106672:	d01d      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 8106674:	68fb      	ldr	r3, [r7, #12]
 8106676:	681b      	ldr	r3, [r3, #0]
 8106678:	4a25      	ldr	r2, [pc, #148]	; (8106710 <DMA_SetConfig+0x340>)
 810667a:	4293      	cmp	r3, r2
 810667c:	d018      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 810667e:	68fb      	ldr	r3, [r7, #12]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	4a24      	ldr	r2, [pc, #144]	; (8106714 <DMA_SetConfig+0x344>)
 8106684:	4293      	cmp	r3, r2
 8106686:	d013      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 8106688:	68fb      	ldr	r3, [r7, #12]
 810668a:	681b      	ldr	r3, [r3, #0]
 810668c:	4a22      	ldr	r2, [pc, #136]	; (8106718 <DMA_SetConfig+0x348>)
 810668e:	4293      	cmp	r3, r2
 8106690:	d00e      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	681b      	ldr	r3, [r3, #0]
 8106696:	4a21      	ldr	r2, [pc, #132]	; (810671c <DMA_SetConfig+0x34c>)
 8106698:	4293      	cmp	r3, r2
 810669a:	d009      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 810669c:	68fb      	ldr	r3, [r7, #12]
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	4a1f      	ldr	r2, [pc, #124]	; (8106720 <DMA_SetConfig+0x350>)
 81066a2:	4293      	cmp	r3, r2
 81066a4:	d004      	beq.n	81066b0 <DMA_SetConfig+0x2e0>
 81066a6:	68fb      	ldr	r3, [r7, #12]
 81066a8:	681b      	ldr	r3, [r3, #0]
 81066aa:	4a1e      	ldr	r2, [pc, #120]	; (8106724 <DMA_SetConfig+0x354>)
 81066ac:	4293      	cmp	r3, r2
 81066ae:	d101      	bne.n	81066b4 <DMA_SetConfig+0x2e4>
 81066b0:	2301      	movs	r3, #1
 81066b2:	e000      	b.n	81066b6 <DMA_SetConfig+0x2e6>
 81066b4:	2300      	movs	r3, #0
 81066b6:	2b00      	cmp	r3, #0
 81066b8:	d020      	beq.n	81066fc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81066ba:	68fb      	ldr	r3, [r7, #12]
 81066bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81066be:	f003 031f 	and.w	r3, r3, #31
 81066c2:	2201      	movs	r2, #1
 81066c4:	409a      	lsls	r2, r3
 81066c6:	693b      	ldr	r3, [r7, #16]
 81066c8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 81066ca:	68fb      	ldr	r3, [r7, #12]
 81066cc:	681b      	ldr	r3, [r3, #0]
 81066ce:	683a      	ldr	r2, [r7, #0]
 81066d0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81066d2:	68fb      	ldr	r3, [r7, #12]
 81066d4:	689b      	ldr	r3, [r3, #8]
 81066d6:	2b40      	cmp	r3, #64	; 0x40
 81066d8:	d108      	bne.n	81066ec <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 81066da:	68fb      	ldr	r3, [r7, #12]
 81066dc:	681b      	ldr	r3, [r3, #0]
 81066de:	687a      	ldr	r2, [r7, #4]
 81066e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 81066e2:	68fb      	ldr	r3, [r7, #12]
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	68ba      	ldr	r2, [r7, #8]
 81066e8:	60da      	str	r2, [r3, #12]
}
 81066ea:	e007      	b.n	81066fc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 81066ec:	68fb      	ldr	r3, [r7, #12]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	68ba      	ldr	r2, [r7, #8]
 81066f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 81066f4:	68fb      	ldr	r3, [r7, #12]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	687a      	ldr	r2, [r7, #4]
 81066fa:	60da      	str	r2, [r3, #12]
}
 81066fc:	bf00      	nop
 81066fe:	371c      	adds	r7, #28
 8106700:	46bd      	mov	sp, r7
 8106702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106706:	4770      	bx	lr
 8106708:	58025408 	.word	0x58025408
 810670c:	5802541c 	.word	0x5802541c
 8106710:	58025430 	.word	0x58025430
 8106714:	58025444 	.word	0x58025444
 8106718:	58025458 	.word	0x58025458
 810671c:	5802546c 	.word	0x5802546c
 8106720:	58025480 	.word	0x58025480
 8106724:	58025494 	.word	0x58025494

08106728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106728:	b480      	push	{r7}
 810672a:	b085      	sub	sp, #20
 810672c:	af00      	add	r7, sp, #0
 810672e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	681b      	ldr	r3, [r3, #0]
 8106734:	4a43      	ldr	r2, [pc, #268]	; (8106844 <DMA_CalcBaseAndBitshift+0x11c>)
 8106736:	4293      	cmp	r3, r2
 8106738:	d04a      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 810673a:	687b      	ldr	r3, [r7, #4]
 810673c:	681b      	ldr	r3, [r3, #0]
 810673e:	4a42      	ldr	r2, [pc, #264]	; (8106848 <DMA_CalcBaseAndBitshift+0x120>)
 8106740:	4293      	cmp	r3, r2
 8106742:	d045      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	4a40      	ldr	r2, [pc, #256]	; (810684c <DMA_CalcBaseAndBitshift+0x124>)
 810674a:	4293      	cmp	r3, r2
 810674c:	d040      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 810674e:	687b      	ldr	r3, [r7, #4]
 8106750:	681b      	ldr	r3, [r3, #0]
 8106752:	4a3f      	ldr	r2, [pc, #252]	; (8106850 <DMA_CalcBaseAndBitshift+0x128>)
 8106754:	4293      	cmp	r3, r2
 8106756:	d03b      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	681b      	ldr	r3, [r3, #0]
 810675c:	4a3d      	ldr	r2, [pc, #244]	; (8106854 <DMA_CalcBaseAndBitshift+0x12c>)
 810675e:	4293      	cmp	r3, r2
 8106760:	d036      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	681b      	ldr	r3, [r3, #0]
 8106766:	4a3c      	ldr	r2, [pc, #240]	; (8106858 <DMA_CalcBaseAndBitshift+0x130>)
 8106768:	4293      	cmp	r3, r2
 810676a:	d031      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	4a3a      	ldr	r2, [pc, #232]	; (810685c <DMA_CalcBaseAndBitshift+0x134>)
 8106772:	4293      	cmp	r3, r2
 8106774:	d02c      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	4a39      	ldr	r2, [pc, #228]	; (8106860 <DMA_CalcBaseAndBitshift+0x138>)
 810677c:	4293      	cmp	r3, r2
 810677e:	d027      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	4a37      	ldr	r2, [pc, #220]	; (8106864 <DMA_CalcBaseAndBitshift+0x13c>)
 8106786:	4293      	cmp	r3, r2
 8106788:	d022      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	4a36      	ldr	r2, [pc, #216]	; (8106868 <DMA_CalcBaseAndBitshift+0x140>)
 8106790:	4293      	cmp	r3, r2
 8106792:	d01d      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	4a34      	ldr	r2, [pc, #208]	; (810686c <DMA_CalcBaseAndBitshift+0x144>)
 810679a:	4293      	cmp	r3, r2
 810679c:	d018      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	4a33      	ldr	r2, [pc, #204]	; (8106870 <DMA_CalcBaseAndBitshift+0x148>)
 81067a4:	4293      	cmp	r3, r2
 81067a6:	d013      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	681b      	ldr	r3, [r3, #0]
 81067ac:	4a31      	ldr	r2, [pc, #196]	; (8106874 <DMA_CalcBaseAndBitshift+0x14c>)
 81067ae:	4293      	cmp	r3, r2
 81067b0:	d00e      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	681b      	ldr	r3, [r3, #0]
 81067b6:	4a30      	ldr	r2, [pc, #192]	; (8106878 <DMA_CalcBaseAndBitshift+0x150>)
 81067b8:	4293      	cmp	r3, r2
 81067ba:	d009      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	4a2e      	ldr	r2, [pc, #184]	; (810687c <DMA_CalcBaseAndBitshift+0x154>)
 81067c2:	4293      	cmp	r3, r2
 81067c4:	d004      	beq.n	81067d0 <DMA_CalcBaseAndBitshift+0xa8>
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	4a2d      	ldr	r2, [pc, #180]	; (8106880 <DMA_CalcBaseAndBitshift+0x158>)
 81067cc:	4293      	cmp	r3, r2
 81067ce:	d101      	bne.n	81067d4 <DMA_CalcBaseAndBitshift+0xac>
 81067d0:	2301      	movs	r3, #1
 81067d2:	e000      	b.n	81067d6 <DMA_CalcBaseAndBitshift+0xae>
 81067d4:	2300      	movs	r3, #0
 81067d6:	2b00      	cmp	r3, #0
 81067d8:	d026      	beq.n	8106828 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	681b      	ldr	r3, [r3, #0]
 81067de:	b2db      	uxtb	r3, r3
 81067e0:	3b10      	subs	r3, #16
 81067e2:	4a28      	ldr	r2, [pc, #160]	; (8106884 <DMA_CalcBaseAndBitshift+0x15c>)
 81067e4:	fba2 2303 	umull	r2, r3, r2, r3
 81067e8:	091b      	lsrs	r3, r3, #4
 81067ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81067ec:	68fb      	ldr	r3, [r7, #12]
 81067ee:	f003 0307 	and.w	r3, r3, #7
 81067f2:	4a25      	ldr	r2, [pc, #148]	; (8106888 <DMA_CalcBaseAndBitshift+0x160>)
 81067f4:	5cd3      	ldrb	r3, [r2, r3]
 81067f6:	461a      	mov	r2, r3
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 81067fc:	68fb      	ldr	r3, [r7, #12]
 81067fe:	2b03      	cmp	r3, #3
 8106800:	d909      	bls.n	8106816 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810680a:	f023 0303 	bic.w	r3, r3, #3
 810680e:	1d1a      	adds	r2, r3, #4
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	659a      	str	r2, [r3, #88]	; 0x58
 8106814:	e00e      	b.n	8106834 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810681e:	f023 0303 	bic.w	r3, r3, #3
 8106822:	687a      	ldr	r2, [r7, #4]
 8106824:	6593      	str	r3, [r2, #88]	; 0x58
 8106826:	e005      	b.n	8106834 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106838:	4618      	mov	r0, r3
 810683a:	3714      	adds	r7, #20
 810683c:	46bd      	mov	sp, r7
 810683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106842:	4770      	bx	lr
 8106844:	40020010 	.word	0x40020010
 8106848:	40020028 	.word	0x40020028
 810684c:	40020040 	.word	0x40020040
 8106850:	40020058 	.word	0x40020058
 8106854:	40020070 	.word	0x40020070
 8106858:	40020088 	.word	0x40020088
 810685c:	400200a0 	.word	0x400200a0
 8106860:	400200b8 	.word	0x400200b8
 8106864:	40020410 	.word	0x40020410
 8106868:	40020428 	.word	0x40020428
 810686c:	40020440 	.word	0x40020440
 8106870:	40020458 	.word	0x40020458
 8106874:	40020470 	.word	0x40020470
 8106878:	40020488 	.word	0x40020488
 810687c:	400204a0 	.word	0x400204a0
 8106880:	400204b8 	.word	0x400204b8
 8106884:	aaaaaaab 	.word	0xaaaaaaab
 8106888:	0810d8f4 	.word	0x0810d8f4

0810688c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 810688c:	b480      	push	{r7}
 810688e:	b085      	sub	sp, #20
 8106890:	af00      	add	r7, sp, #0
 8106892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106894:	2300      	movs	r3, #0
 8106896:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	699b      	ldr	r3, [r3, #24]
 810689c:	2b00      	cmp	r3, #0
 810689e:	d120      	bne.n	81068e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068a4:	2b03      	cmp	r3, #3
 81068a6:	d858      	bhi.n	810695a <DMA_CheckFifoParam+0xce>
 81068a8:	a201      	add	r2, pc, #4	; (adr r2, 81068b0 <DMA_CheckFifoParam+0x24>)
 81068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068ae:	bf00      	nop
 81068b0:	081068c1 	.word	0x081068c1
 81068b4:	081068d3 	.word	0x081068d3
 81068b8:	081068c1 	.word	0x081068c1
 81068bc:	0810695b 	.word	0x0810695b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81068c8:	2b00      	cmp	r3, #0
 81068ca:	d048      	beq.n	810695e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81068cc:	2301      	movs	r3, #1
 81068ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81068d0:	e045      	b.n	810695e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81068d2:	687b      	ldr	r3, [r7, #4]
 81068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81068da:	d142      	bne.n	8106962 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81068dc:	2301      	movs	r3, #1
 81068de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81068e0:	e03f      	b.n	8106962 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	699b      	ldr	r3, [r3, #24]
 81068e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81068ea:	d123      	bne.n	8106934 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81068f0:	2b03      	cmp	r3, #3
 81068f2:	d838      	bhi.n	8106966 <DMA_CheckFifoParam+0xda>
 81068f4:	a201      	add	r2, pc, #4	; (adr r2, 81068fc <DMA_CheckFifoParam+0x70>)
 81068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068fa:	bf00      	nop
 81068fc:	0810690d 	.word	0x0810690d
 8106900:	08106913 	.word	0x08106913
 8106904:	0810690d 	.word	0x0810690d
 8106908:	08106925 	.word	0x08106925
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810690c:	2301      	movs	r3, #1
 810690e:	73fb      	strb	r3, [r7, #15]
        break;
 8106910:	e030      	b.n	8106974 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810691a:	2b00      	cmp	r3, #0
 810691c:	d025      	beq.n	810696a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810691e:	2301      	movs	r3, #1
 8106920:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106922:	e022      	b.n	810696a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810692c:	d11f      	bne.n	810696e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810692e:	2301      	movs	r3, #1
 8106930:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106932:	e01c      	b.n	810696e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106938:	2b02      	cmp	r3, #2
 810693a:	d902      	bls.n	8106942 <DMA_CheckFifoParam+0xb6>
 810693c:	2b03      	cmp	r3, #3
 810693e:	d003      	beq.n	8106948 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106940:	e018      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106942:	2301      	movs	r3, #1
 8106944:	73fb      	strb	r3, [r7, #15]
        break;
 8106946:	e015      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810694c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106950:	2b00      	cmp	r3, #0
 8106952:	d00e      	beq.n	8106972 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106954:	2301      	movs	r3, #1
 8106956:	73fb      	strb	r3, [r7, #15]
    break;
 8106958:	e00b      	b.n	8106972 <DMA_CheckFifoParam+0xe6>
        break;
 810695a:	bf00      	nop
 810695c:	e00a      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        break;
 810695e:	bf00      	nop
 8106960:	e008      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        break;
 8106962:	bf00      	nop
 8106964:	e006      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        break;
 8106966:	bf00      	nop
 8106968:	e004      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        break;
 810696a:	bf00      	nop
 810696c:	e002      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
        break;
 810696e:	bf00      	nop
 8106970:	e000      	b.n	8106974 <DMA_CheckFifoParam+0xe8>
    break;
 8106972:	bf00      	nop
    }
  }

  return status;
 8106974:	7bfb      	ldrb	r3, [r7, #15]
}
 8106976:	4618      	mov	r0, r3
 8106978:	3714      	adds	r7, #20
 810697a:	46bd      	mov	sp, r7
 810697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106980:	4770      	bx	lr
 8106982:	bf00      	nop

08106984 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106984:	b480      	push	{r7}
 8106986:	b085      	sub	sp, #20
 8106988:	af00      	add	r7, sp, #0
 810698a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	681b      	ldr	r3, [r3, #0]
 8106990:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106992:	687b      	ldr	r3, [r7, #4]
 8106994:	681b      	ldr	r3, [r3, #0]
 8106996:	4a3a      	ldr	r2, [pc, #232]	; (8106a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106998:	4293      	cmp	r3, r2
 810699a:	d022      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810699c:	687b      	ldr	r3, [r7, #4]
 810699e:	681b      	ldr	r3, [r3, #0]
 81069a0:	4a38      	ldr	r2, [pc, #224]	; (8106a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81069a2:	4293      	cmp	r3, r2
 81069a4:	d01d      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81069a6:	687b      	ldr	r3, [r7, #4]
 81069a8:	681b      	ldr	r3, [r3, #0]
 81069aa:	4a37      	ldr	r2, [pc, #220]	; (8106a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81069ac:	4293      	cmp	r3, r2
 81069ae:	d018      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	681b      	ldr	r3, [r3, #0]
 81069b4:	4a35      	ldr	r2, [pc, #212]	; (8106a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81069b6:	4293      	cmp	r3, r2
 81069b8:	d013      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	681b      	ldr	r3, [r3, #0]
 81069be:	4a34      	ldr	r2, [pc, #208]	; (8106a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81069c0:	4293      	cmp	r3, r2
 81069c2:	d00e      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	681b      	ldr	r3, [r3, #0]
 81069c8:	4a32      	ldr	r2, [pc, #200]	; (8106a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81069ca:	4293      	cmp	r3, r2
 81069cc:	d009      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81069ce:	687b      	ldr	r3, [r7, #4]
 81069d0:	681b      	ldr	r3, [r3, #0]
 81069d2:	4a31      	ldr	r2, [pc, #196]	; (8106a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81069d4:	4293      	cmp	r3, r2
 81069d6:	d004      	beq.n	81069e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	681b      	ldr	r3, [r3, #0]
 81069dc:	4a2f      	ldr	r2, [pc, #188]	; (8106a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81069de:	4293      	cmp	r3, r2
 81069e0:	d101      	bne.n	81069e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81069e2:	2301      	movs	r3, #1
 81069e4:	e000      	b.n	81069e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81069e6:	2300      	movs	r3, #0
 81069e8:	2b00      	cmp	r3, #0
 81069ea:	d01c      	beq.n	8106a26 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	b2db      	uxtb	r3, r3
 81069f2:	3b08      	subs	r3, #8
 81069f4:	4a2a      	ldr	r2, [pc, #168]	; (8106aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81069f6:	fba2 2303 	umull	r2, r3, r2, r3
 81069fa:	091b      	lsrs	r3, r3, #4
 81069fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81069fe:	68fb      	ldr	r3, [r7, #12]
 8106a00:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106a04:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8106a08:	009b      	lsls	r3, r3, #2
 8106a0a:	461a      	mov	r2, r3
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	4a24      	ldr	r2, [pc, #144]	; (8106aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106a14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106a16:	68fb      	ldr	r3, [r7, #12]
 8106a18:	f003 031f 	and.w	r3, r3, #31
 8106a1c:	2201      	movs	r2, #1
 8106a1e:	409a      	lsls	r2, r3
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106a24:	e026      	b.n	8106a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	b2db      	uxtb	r3, r3
 8106a2c:	3b10      	subs	r3, #16
 8106a2e:	4a1e      	ldr	r2, [pc, #120]	; (8106aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106a30:	fba2 2303 	umull	r2, r3, r2, r3
 8106a34:	091b      	lsrs	r3, r3, #4
 8106a36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8106a38:	68bb      	ldr	r3, [r7, #8]
 8106a3a:	4a1c      	ldr	r2, [pc, #112]	; (8106aac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106a3c:	4293      	cmp	r3, r2
 8106a3e:	d806      	bhi.n	8106a4e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106a40:	68bb      	ldr	r3, [r7, #8]
 8106a42:	4a1b      	ldr	r2, [pc, #108]	; (8106ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106a44:	4293      	cmp	r3, r2
 8106a46:	d902      	bls.n	8106a4e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8106a48:	68fb      	ldr	r3, [r7, #12]
 8106a4a:	3308      	adds	r3, #8
 8106a4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8106a4e:	68fb      	ldr	r3, [r7, #12]
 8106a50:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8106a54:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8106a58:	009b      	lsls	r3, r3, #2
 8106a5a:	461a      	mov	r2, r3
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	4a14      	ldr	r2, [pc, #80]	; (8106ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106a64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106a66:	68fb      	ldr	r3, [r7, #12]
 8106a68:	f003 031f 	and.w	r3, r3, #31
 8106a6c:	2201      	movs	r2, #1
 8106a6e:	409a      	lsls	r2, r3
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106a74:	bf00      	nop
 8106a76:	3714      	adds	r7, #20
 8106a78:	46bd      	mov	sp, r7
 8106a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a7e:	4770      	bx	lr
 8106a80:	58025408 	.word	0x58025408
 8106a84:	5802541c 	.word	0x5802541c
 8106a88:	58025430 	.word	0x58025430
 8106a8c:	58025444 	.word	0x58025444
 8106a90:	58025458 	.word	0x58025458
 8106a94:	5802546c 	.word	0x5802546c
 8106a98:	58025480 	.word	0x58025480
 8106a9c:	58025494 	.word	0x58025494
 8106aa0:	cccccccd 	.word	0xcccccccd
 8106aa4:	58025880 	.word	0x58025880
 8106aa8:	aaaaaaab 	.word	0xaaaaaaab
 8106aac:	400204b8 	.word	0x400204b8
 8106ab0:	4002040f 	.word	0x4002040f
 8106ab4:	40020880 	.word	0x40020880

08106ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106ab8:	b480      	push	{r7}
 8106aba:	b085      	sub	sp, #20
 8106abc:	af00      	add	r7, sp, #0
 8106abe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106ac0:	687b      	ldr	r3, [r7, #4]
 8106ac2:	685b      	ldr	r3, [r3, #4]
 8106ac4:	b2db      	uxtb	r3, r3
 8106ac6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106ac8:	68fb      	ldr	r3, [r7, #12]
 8106aca:	2b00      	cmp	r3, #0
 8106acc:	d04a      	beq.n	8106b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106ace:	68fb      	ldr	r3, [r7, #12]
 8106ad0:	2b08      	cmp	r3, #8
 8106ad2:	d847      	bhi.n	8106b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	681b      	ldr	r3, [r3, #0]
 8106ad8:	4a25      	ldr	r2, [pc, #148]	; (8106b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106ada:	4293      	cmp	r3, r2
 8106adc:	d022      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	681b      	ldr	r3, [r3, #0]
 8106ae2:	4a24      	ldr	r2, [pc, #144]	; (8106b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106ae4:	4293      	cmp	r3, r2
 8106ae6:	d01d      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106ae8:	687b      	ldr	r3, [r7, #4]
 8106aea:	681b      	ldr	r3, [r3, #0]
 8106aec:	4a22      	ldr	r2, [pc, #136]	; (8106b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106aee:	4293      	cmp	r3, r2
 8106af0:	d018      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	681b      	ldr	r3, [r3, #0]
 8106af6:	4a21      	ldr	r2, [pc, #132]	; (8106b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106af8:	4293      	cmp	r3, r2
 8106afa:	d013      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106afc:	687b      	ldr	r3, [r7, #4]
 8106afe:	681b      	ldr	r3, [r3, #0]
 8106b00:	4a1f      	ldr	r2, [pc, #124]	; (8106b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106b02:	4293      	cmp	r3, r2
 8106b04:	d00e      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	681b      	ldr	r3, [r3, #0]
 8106b0a:	4a1e      	ldr	r2, [pc, #120]	; (8106b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106b0c:	4293      	cmp	r3, r2
 8106b0e:	d009      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b10:	687b      	ldr	r3, [r7, #4]
 8106b12:	681b      	ldr	r3, [r3, #0]
 8106b14:	4a1c      	ldr	r2, [pc, #112]	; (8106b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8106b16:	4293      	cmp	r3, r2
 8106b18:	d004      	beq.n	8106b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106b1a:	687b      	ldr	r3, [r7, #4]
 8106b1c:	681b      	ldr	r3, [r3, #0]
 8106b1e:	4a1b      	ldr	r2, [pc, #108]	; (8106b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106b20:	4293      	cmp	r3, r2
 8106b22:	d101      	bne.n	8106b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106b24:	2301      	movs	r3, #1
 8106b26:	e000      	b.n	8106b2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8106b28:	2300      	movs	r3, #0
 8106b2a:	2b00      	cmp	r3, #0
 8106b2c:	d00a      	beq.n	8106b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106b2e:	68fa      	ldr	r2, [r7, #12]
 8106b30:	4b17      	ldr	r3, [pc, #92]	; (8106b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106b32:	4413      	add	r3, r2
 8106b34:	009b      	lsls	r3, r3, #2
 8106b36:	461a      	mov	r2, r3
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	4a15      	ldr	r2, [pc, #84]	; (8106b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106b40:	671a      	str	r2, [r3, #112]	; 0x70
 8106b42:	e009      	b.n	8106b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106b44:	68fa      	ldr	r2, [r7, #12]
 8106b46:	4b14      	ldr	r3, [pc, #80]	; (8106b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8106b48:	4413      	add	r3, r2
 8106b4a:	009b      	lsls	r3, r3, #2
 8106b4c:	461a      	mov	r2, r3
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	4a11      	ldr	r2, [pc, #68]	; (8106b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8106b56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8106b58:	68fb      	ldr	r3, [r7, #12]
 8106b5a:	3b01      	subs	r3, #1
 8106b5c:	2201      	movs	r2, #1
 8106b5e:	409a      	lsls	r2, r3
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8106b64:	bf00      	nop
 8106b66:	3714      	adds	r7, #20
 8106b68:	46bd      	mov	sp, r7
 8106b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b6e:	4770      	bx	lr
 8106b70:	58025408 	.word	0x58025408
 8106b74:	5802541c 	.word	0x5802541c
 8106b78:	58025430 	.word	0x58025430
 8106b7c:	58025444 	.word	0x58025444
 8106b80:	58025458 	.word	0x58025458
 8106b84:	5802546c 	.word	0x5802546c
 8106b88:	58025480 	.word	0x58025480
 8106b8c:	58025494 	.word	0x58025494
 8106b90:	1600963f 	.word	0x1600963f
 8106b94:	58025940 	.word	0x58025940
 8106b98:	1000823f 	.word	0x1000823f
 8106b9c:	40020940 	.word	0x40020940

08106ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106ba0:	b480      	push	{r7}
 8106ba2:	b089      	sub	sp, #36	; 0x24
 8106ba4:	af00      	add	r7, sp, #0
 8106ba6:	6078      	str	r0, [r7, #4]
 8106ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106baa:	2300      	movs	r3, #0
 8106bac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106bae:	4b89      	ldr	r3, [pc, #548]	; (8106dd4 <HAL_GPIO_Init+0x234>)
 8106bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106bb2:	e194      	b.n	8106ede <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106bb4:	683b      	ldr	r3, [r7, #0]
 8106bb6:	681a      	ldr	r2, [r3, #0]
 8106bb8:	2101      	movs	r1, #1
 8106bba:	69fb      	ldr	r3, [r7, #28]
 8106bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8106bc0:	4013      	ands	r3, r2
 8106bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106bc4:	693b      	ldr	r3, [r7, #16]
 8106bc6:	2b00      	cmp	r3, #0
 8106bc8:	f000 8186 	beq.w	8106ed8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106bcc:	683b      	ldr	r3, [r7, #0]
 8106bce:	685b      	ldr	r3, [r3, #4]
 8106bd0:	2b01      	cmp	r3, #1
 8106bd2:	d00b      	beq.n	8106bec <HAL_GPIO_Init+0x4c>
 8106bd4:	683b      	ldr	r3, [r7, #0]
 8106bd6:	685b      	ldr	r3, [r3, #4]
 8106bd8:	2b02      	cmp	r3, #2
 8106bda:	d007      	beq.n	8106bec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106bdc:	683b      	ldr	r3, [r7, #0]
 8106bde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106be0:	2b11      	cmp	r3, #17
 8106be2:	d003      	beq.n	8106bec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106be4:	683b      	ldr	r3, [r7, #0]
 8106be6:	685b      	ldr	r3, [r3, #4]
 8106be8:	2b12      	cmp	r3, #18
 8106bea:	d130      	bne.n	8106c4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	689b      	ldr	r3, [r3, #8]
 8106bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106bf2:	69fb      	ldr	r3, [r7, #28]
 8106bf4:	005b      	lsls	r3, r3, #1
 8106bf6:	2203      	movs	r2, #3
 8106bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8106bfc:	43db      	mvns	r3, r3
 8106bfe:	69ba      	ldr	r2, [r7, #24]
 8106c00:	4013      	ands	r3, r2
 8106c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106c04:	683b      	ldr	r3, [r7, #0]
 8106c06:	68da      	ldr	r2, [r3, #12]
 8106c08:	69fb      	ldr	r3, [r7, #28]
 8106c0a:	005b      	lsls	r3, r3, #1
 8106c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8106c10:	69ba      	ldr	r2, [r7, #24]
 8106c12:	4313      	orrs	r3, r2
 8106c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	69ba      	ldr	r2, [r7, #24]
 8106c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	685b      	ldr	r3, [r3, #4]
 8106c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106c22:	2201      	movs	r2, #1
 8106c24:	69fb      	ldr	r3, [r7, #28]
 8106c26:	fa02 f303 	lsl.w	r3, r2, r3
 8106c2a:	43db      	mvns	r3, r3
 8106c2c:	69ba      	ldr	r2, [r7, #24]
 8106c2e:	4013      	ands	r3, r2
 8106c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8106c32:	683b      	ldr	r3, [r7, #0]
 8106c34:	685b      	ldr	r3, [r3, #4]
 8106c36:	091b      	lsrs	r3, r3, #4
 8106c38:	f003 0201 	and.w	r2, r3, #1
 8106c3c:	69fb      	ldr	r3, [r7, #28]
 8106c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8106c42:	69ba      	ldr	r2, [r7, #24]
 8106c44:	4313      	orrs	r3, r2
 8106c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	69ba      	ldr	r2, [r7, #24]
 8106c4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	68db      	ldr	r3, [r3, #12]
 8106c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106c54:	69fb      	ldr	r3, [r7, #28]
 8106c56:	005b      	lsls	r3, r3, #1
 8106c58:	2203      	movs	r2, #3
 8106c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8106c5e:	43db      	mvns	r3, r3
 8106c60:	69ba      	ldr	r2, [r7, #24]
 8106c62:	4013      	ands	r3, r2
 8106c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106c66:	683b      	ldr	r3, [r7, #0]
 8106c68:	689a      	ldr	r2, [r3, #8]
 8106c6a:	69fb      	ldr	r3, [r7, #28]
 8106c6c:	005b      	lsls	r3, r3, #1
 8106c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8106c72:	69ba      	ldr	r2, [r7, #24]
 8106c74:	4313      	orrs	r3, r2
 8106c76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	69ba      	ldr	r2, [r7, #24]
 8106c7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106c7e:	683b      	ldr	r3, [r7, #0]
 8106c80:	685b      	ldr	r3, [r3, #4]
 8106c82:	2b02      	cmp	r3, #2
 8106c84:	d003      	beq.n	8106c8e <HAL_GPIO_Init+0xee>
 8106c86:	683b      	ldr	r3, [r7, #0]
 8106c88:	685b      	ldr	r3, [r3, #4]
 8106c8a:	2b12      	cmp	r3, #18
 8106c8c:	d123      	bne.n	8106cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106c8e:	69fb      	ldr	r3, [r7, #28]
 8106c90:	08da      	lsrs	r2, r3, #3
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	3208      	adds	r2, #8
 8106c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106c9c:	69fb      	ldr	r3, [r7, #28]
 8106c9e:	f003 0307 	and.w	r3, r3, #7
 8106ca2:	009b      	lsls	r3, r3, #2
 8106ca4:	220f      	movs	r2, #15
 8106ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8106caa:	43db      	mvns	r3, r3
 8106cac:	69ba      	ldr	r2, [r7, #24]
 8106cae:	4013      	ands	r3, r2
 8106cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106cb2:	683b      	ldr	r3, [r7, #0]
 8106cb4:	691a      	ldr	r2, [r3, #16]
 8106cb6:	69fb      	ldr	r3, [r7, #28]
 8106cb8:	f003 0307 	and.w	r3, r3, #7
 8106cbc:	009b      	lsls	r3, r3, #2
 8106cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8106cc2:	69ba      	ldr	r2, [r7, #24]
 8106cc4:	4313      	orrs	r3, r2
 8106cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106cc8:	69fb      	ldr	r3, [r7, #28]
 8106cca:	08da      	lsrs	r2, r3, #3
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	3208      	adds	r2, #8
 8106cd0:	69b9      	ldr	r1, [r7, #24]
 8106cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	681b      	ldr	r3, [r3, #0]
 8106cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106cdc:	69fb      	ldr	r3, [r7, #28]
 8106cde:	005b      	lsls	r3, r3, #1
 8106ce0:	2203      	movs	r2, #3
 8106ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8106ce6:	43db      	mvns	r3, r3
 8106ce8:	69ba      	ldr	r2, [r7, #24]
 8106cea:	4013      	ands	r3, r2
 8106cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106cee:	683b      	ldr	r3, [r7, #0]
 8106cf0:	685b      	ldr	r3, [r3, #4]
 8106cf2:	f003 0203 	and.w	r2, r3, #3
 8106cf6:	69fb      	ldr	r3, [r7, #28]
 8106cf8:	005b      	lsls	r3, r3, #1
 8106cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8106cfe:	69ba      	ldr	r2, [r7, #24]
 8106d00:	4313      	orrs	r3, r2
 8106d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	69ba      	ldr	r2, [r7, #24]
 8106d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8106d0a:	683b      	ldr	r3, [r7, #0]
 8106d0c:	685b      	ldr	r3, [r3, #4]
 8106d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106d12:	2b00      	cmp	r3, #0
 8106d14:	f000 80e0 	beq.w	8106ed8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106d18:	4b2f      	ldr	r3, [pc, #188]	; (8106dd8 <HAL_GPIO_Init+0x238>)
 8106d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106d1e:	4a2e      	ldr	r2, [pc, #184]	; (8106dd8 <HAL_GPIO_Init+0x238>)
 8106d20:	f043 0302 	orr.w	r3, r3, #2
 8106d24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8106d28:	4b2b      	ldr	r3, [pc, #172]	; (8106dd8 <HAL_GPIO_Init+0x238>)
 8106d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106d2e:	f003 0302 	and.w	r3, r3, #2
 8106d32:	60fb      	str	r3, [r7, #12]
 8106d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106d36:	4a29      	ldr	r2, [pc, #164]	; (8106ddc <HAL_GPIO_Init+0x23c>)
 8106d38:	69fb      	ldr	r3, [r7, #28]
 8106d3a:	089b      	lsrs	r3, r3, #2
 8106d3c:	3302      	adds	r3, #2
 8106d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106d44:	69fb      	ldr	r3, [r7, #28]
 8106d46:	f003 0303 	and.w	r3, r3, #3
 8106d4a:	009b      	lsls	r3, r3, #2
 8106d4c:	220f      	movs	r2, #15
 8106d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8106d52:	43db      	mvns	r3, r3
 8106d54:	69ba      	ldr	r2, [r7, #24]
 8106d56:	4013      	ands	r3, r2
 8106d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	4a20      	ldr	r2, [pc, #128]	; (8106de0 <HAL_GPIO_Init+0x240>)
 8106d5e:	4293      	cmp	r3, r2
 8106d60:	d052      	beq.n	8106e08 <HAL_GPIO_Init+0x268>
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	4a1f      	ldr	r2, [pc, #124]	; (8106de4 <HAL_GPIO_Init+0x244>)
 8106d66:	4293      	cmp	r3, r2
 8106d68:	d031      	beq.n	8106dce <HAL_GPIO_Init+0x22e>
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	4a1e      	ldr	r2, [pc, #120]	; (8106de8 <HAL_GPIO_Init+0x248>)
 8106d6e:	4293      	cmp	r3, r2
 8106d70:	d02b      	beq.n	8106dca <HAL_GPIO_Init+0x22a>
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	4a1d      	ldr	r2, [pc, #116]	; (8106dec <HAL_GPIO_Init+0x24c>)
 8106d76:	4293      	cmp	r3, r2
 8106d78:	d025      	beq.n	8106dc6 <HAL_GPIO_Init+0x226>
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	4a1c      	ldr	r2, [pc, #112]	; (8106df0 <HAL_GPIO_Init+0x250>)
 8106d7e:	4293      	cmp	r3, r2
 8106d80:	d01f      	beq.n	8106dc2 <HAL_GPIO_Init+0x222>
 8106d82:	687b      	ldr	r3, [r7, #4]
 8106d84:	4a1b      	ldr	r2, [pc, #108]	; (8106df4 <HAL_GPIO_Init+0x254>)
 8106d86:	4293      	cmp	r3, r2
 8106d88:	d019      	beq.n	8106dbe <HAL_GPIO_Init+0x21e>
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	4a1a      	ldr	r2, [pc, #104]	; (8106df8 <HAL_GPIO_Init+0x258>)
 8106d8e:	4293      	cmp	r3, r2
 8106d90:	d013      	beq.n	8106dba <HAL_GPIO_Init+0x21a>
 8106d92:	687b      	ldr	r3, [r7, #4]
 8106d94:	4a19      	ldr	r2, [pc, #100]	; (8106dfc <HAL_GPIO_Init+0x25c>)
 8106d96:	4293      	cmp	r3, r2
 8106d98:	d00d      	beq.n	8106db6 <HAL_GPIO_Init+0x216>
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	4a18      	ldr	r2, [pc, #96]	; (8106e00 <HAL_GPIO_Init+0x260>)
 8106d9e:	4293      	cmp	r3, r2
 8106da0:	d007      	beq.n	8106db2 <HAL_GPIO_Init+0x212>
 8106da2:	687b      	ldr	r3, [r7, #4]
 8106da4:	4a17      	ldr	r2, [pc, #92]	; (8106e04 <HAL_GPIO_Init+0x264>)
 8106da6:	4293      	cmp	r3, r2
 8106da8:	d101      	bne.n	8106dae <HAL_GPIO_Init+0x20e>
 8106daa:	2309      	movs	r3, #9
 8106dac:	e02d      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dae:	230a      	movs	r3, #10
 8106db0:	e02b      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106db2:	2308      	movs	r3, #8
 8106db4:	e029      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106db6:	2307      	movs	r3, #7
 8106db8:	e027      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dba:	2306      	movs	r3, #6
 8106dbc:	e025      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dbe:	2305      	movs	r3, #5
 8106dc0:	e023      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dc2:	2304      	movs	r3, #4
 8106dc4:	e021      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dc6:	2303      	movs	r3, #3
 8106dc8:	e01f      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dca:	2302      	movs	r3, #2
 8106dcc:	e01d      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dce:	2301      	movs	r3, #1
 8106dd0:	e01b      	b.n	8106e0a <HAL_GPIO_Init+0x26a>
 8106dd2:	bf00      	nop
 8106dd4:	580000c0 	.word	0x580000c0
 8106dd8:	58024400 	.word	0x58024400
 8106ddc:	58000400 	.word	0x58000400
 8106de0:	58020000 	.word	0x58020000
 8106de4:	58020400 	.word	0x58020400
 8106de8:	58020800 	.word	0x58020800
 8106dec:	58020c00 	.word	0x58020c00
 8106df0:	58021000 	.word	0x58021000
 8106df4:	58021400 	.word	0x58021400
 8106df8:	58021800 	.word	0x58021800
 8106dfc:	58021c00 	.word	0x58021c00
 8106e00:	58022000 	.word	0x58022000
 8106e04:	58022400 	.word	0x58022400
 8106e08:	2300      	movs	r3, #0
 8106e0a:	69fa      	ldr	r2, [r7, #28]
 8106e0c:	f002 0203 	and.w	r2, r2, #3
 8106e10:	0092      	lsls	r2, r2, #2
 8106e12:	4093      	lsls	r3, r2
 8106e14:	69ba      	ldr	r2, [r7, #24]
 8106e16:	4313      	orrs	r3, r2
 8106e18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106e1a:	4938      	ldr	r1, [pc, #224]	; (8106efc <HAL_GPIO_Init+0x35c>)
 8106e1c:	69fb      	ldr	r3, [r7, #28]
 8106e1e:	089b      	lsrs	r3, r3, #2
 8106e20:	3302      	adds	r3, #2
 8106e22:	69ba      	ldr	r2, [r7, #24]
 8106e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106e28:	697b      	ldr	r3, [r7, #20]
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e2e:	693b      	ldr	r3, [r7, #16]
 8106e30:	43db      	mvns	r3, r3
 8106e32:	69ba      	ldr	r2, [r7, #24]
 8106e34:	4013      	ands	r3, r2
 8106e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8106e38:	683b      	ldr	r3, [r7, #0]
 8106e3a:	685b      	ldr	r3, [r3, #4]
 8106e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106e40:	2b00      	cmp	r3, #0
 8106e42:	d003      	beq.n	8106e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8106e44:	69ba      	ldr	r2, [r7, #24]
 8106e46:	693b      	ldr	r3, [r7, #16]
 8106e48:	4313      	orrs	r3, r2
 8106e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106e4c:	697b      	ldr	r3, [r7, #20]
 8106e4e:	69ba      	ldr	r2, [r7, #24]
 8106e50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8106e52:	697b      	ldr	r3, [r7, #20]
 8106e54:	685b      	ldr	r3, [r3, #4]
 8106e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e58:	693b      	ldr	r3, [r7, #16]
 8106e5a:	43db      	mvns	r3, r3
 8106e5c:	69ba      	ldr	r2, [r7, #24]
 8106e5e:	4013      	ands	r3, r2
 8106e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8106e62:	683b      	ldr	r3, [r7, #0]
 8106e64:	685b      	ldr	r3, [r3, #4]
 8106e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d003      	beq.n	8106e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106e6e:	69ba      	ldr	r2, [r7, #24]
 8106e70:	693b      	ldr	r3, [r7, #16]
 8106e72:	4313      	orrs	r3, r2
 8106e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106e76:	697b      	ldr	r3, [r7, #20]
 8106e78:	69ba      	ldr	r2, [r7, #24]
 8106e7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e84:	693b      	ldr	r3, [r7, #16]
 8106e86:	43db      	mvns	r3, r3
 8106e88:	69ba      	ldr	r2, [r7, #24]
 8106e8a:	4013      	ands	r3, r2
 8106e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106e8e:	683b      	ldr	r3, [r7, #0]
 8106e90:	685b      	ldr	r3, [r3, #4]
 8106e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106e96:	2b00      	cmp	r3, #0
 8106e98:	d003      	beq.n	8106ea2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8106e9a:	69ba      	ldr	r2, [r7, #24]
 8106e9c:	693b      	ldr	r3, [r7, #16]
 8106e9e:	4313      	orrs	r3, r2
 8106ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106ea6:	69bb      	ldr	r3, [r7, #24]
 8106ea8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106eae:	685b      	ldr	r3, [r3, #4]
 8106eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106eb2:	693b      	ldr	r3, [r7, #16]
 8106eb4:	43db      	mvns	r3, r3
 8106eb6:	69ba      	ldr	r2, [r7, #24]
 8106eb8:	4013      	ands	r3, r2
 8106eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106ebc:	683b      	ldr	r3, [r7, #0]
 8106ebe:	685b      	ldr	r3, [r3, #4]
 8106ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106ec4:	2b00      	cmp	r3, #0
 8106ec6:	d003      	beq.n	8106ed0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8106ec8:	69ba      	ldr	r2, [r7, #24]
 8106eca:	693b      	ldr	r3, [r7, #16]
 8106ecc:	4313      	orrs	r3, r2
 8106ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106ed4:	69bb      	ldr	r3, [r7, #24]
 8106ed6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8106ed8:	69fb      	ldr	r3, [r7, #28]
 8106eda:	3301      	adds	r3, #1
 8106edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106ede:	683b      	ldr	r3, [r7, #0]
 8106ee0:	681a      	ldr	r2, [r3, #0]
 8106ee2:	69fb      	ldr	r3, [r7, #28]
 8106ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8106ee8:	2b00      	cmp	r3, #0
 8106eea:	f47f ae63 	bne.w	8106bb4 <HAL_GPIO_Init+0x14>
  }
}
 8106eee:	bf00      	nop
 8106ef0:	bf00      	nop
 8106ef2:	3724      	adds	r7, #36	; 0x24
 8106ef4:	46bd      	mov	sp, r7
 8106ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106efa:	4770      	bx	lr
 8106efc:	58000400 	.word	0x58000400

08106f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106f00:	b480      	push	{r7}
 8106f02:	b083      	sub	sp, #12
 8106f04:	af00      	add	r7, sp, #0
 8106f06:	6078      	str	r0, [r7, #4]
 8106f08:	460b      	mov	r3, r1
 8106f0a:	807b      	strh	r3, [r7, #2]
 8106f0c:	4613      	mov	r3, r2
 8106f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106f10:	787b      	ldrb	r3, [r7, #1]
 8106f12:	2b00      	cmp	r3, #0
 8106f14:	d003      	beq.n	8106f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106f16:	887a      	ldrh	r2, [r7, #2]
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106f1c:	e003      	b.n	8106f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106f1e:	887b      	ldrh	r3, [r7, #2]
 8106f20:	041a      	lsls	r2, r3, #16
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	619a      	str	r2, [r3, #24]
}
 8106f26:	bf00      	nop
 8106f28:	370c      	adds	r7, #12
 8106f2a:	46bd      	mov	sp, r7
 8106f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f30:	4770      	bx	lr
	...

08106f34 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106f34:	b480      	push	{r7}
 8106f36:	b083      	sub	sp, #12
 8106f38:	af00      	add	r7, sp, #0
 8106f3a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8106f3c:	4a08      	ldr	r2, [pc, #32]	; (8106f60 <HAL_HSEM_FastTake+0x2c>)
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	3320      	adds	r3, #32
 8106f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106f46:	4a07      	ldr	r2, [pc, #28]	; (8106f64 <HAL_HSEM_FastTake+0x30>)
 8106f48:	4293      	cmp	r3, r2
 8106f4a:	d101      	bne.n	8106f50 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8106f4c:	2300      	movs	r3, #0
 8106f4e:	e000      	b.n	8106f52 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8106f50:	2301      	movs	r3, #1
}
 8106f52:	4618      	mov	r0, r3
 8106f54:	370c      	adds	r7, #12
 8106f56:	46bd      	mov	sp, r7
 8106f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f5c:	4770      	bx	lr
 8106f5e:	bf00      	nop
 8106f60:	58026400 	.word	0x58026400
 8106f64:	80000100 	.word	0x80000100

08106f68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8106f68:	b480      	push	{r7}
 8106f6a:	b083      	sub	sp, #12
 8106f6c:	af00      	add	r7, sp, #0
 8106f6e:	6078      	str	r0, [r7, #4]
 8106f70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8106f72:	4906      	ldr	r1, [pc, #24]	; (8106f8c <HAL_HSEM_Release+0x24>)
 8106f74:	683b      	ldr	r3, [r7, #0]
 8106f76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8106f80:	bf00      	nop
 8106f82:	370c      	adds	r7, #12
 8106f84:	46bd      	mov	sp, r7
 8106f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f8a:	4770      	bx	lr
 8106f8c:	58026400 	.word	0x58026400

08106f90 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106f90:	b480      	push	{r7}
 8106f92:	b083      	sub	sp, #12
 8106f94:	af00      	add	r7, sp, #0
 8106f96:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106f98:	4b05      	ldr	r3, [pc, #20]	; (8106fb0 <HAL_HSEM_ActivateNotification+0x20>)
 8106f9a:	681a      	ldr	r2, [r3, #0]
 8106f9c:	4904      	ldr	r1, [pc, #16]	; (8106fb0 <HAL_HSEM_ActivateNotification+0x20>)
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	4313      	orrs	r3, r2
 8106fa2:	600b      	str	r3, [r1, #0]
#endif
}
 8106fa4:	bf00      	nop
 8106fa6:	370c      	adds	r7, #12
 8106fa8:	46bd      	mov	sp, r7
 8106faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fae:	4770      	bx	lr
 8106fb0:	58026510 	.word	0x58026510

08106fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106fb4:	b580      	push	{r7, lr}
 8106fb6:	b082      	sub	sp, #8
 8106fb8:	af00      	add	r7, sp, #0
 8106fba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	2b00      	cmp	r3, #0
 8106fc0:	d101      	bne.n	8106fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8106fc2:	2301      	movs	r3, #1
 8106fc4:	e081      	b.n	81070ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106fcc:	b2db      	uxtb	r3, r3
 8106fce:	2b00      	cmp	r3, #0
 8106fd0:	d106      	bne.n	8106fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	2200      	movs	r2, #0
 8106fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106fda:	6878      	ldr	r0, [r7, #4]
 8106fdc:	f7fa fec6 	bl	8101d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	2224      	movs	r2, #36	; 0x24
 8106fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	681a      	ldr	r2, [r3, #0]
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	681b      	ldr	r3, [r3, #0]
 8106ff2:	f022 0201 	bic.w	r2, r2, #1
 8106ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	685a      	ldr	r2, [r3, #4]
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	681b      	ldr	r3, [r3, #0]
 8107000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8107004:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	681b      	ldr	r3, [r3, #0]
 810700a:	689a      	ldr	r2, [r3, #8]
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	681b      	ldr	r3, [r3, #0]
 8107010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107014:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	68db      	ldr	r3, [r3, #12]
 810701a:	2b01      	cmp	r3, #1
 810701c:	d107      	bne.n	810702e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	689a      	ldr	r2, [r3, #8]
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	681b      	ldr	r3, [r3, #0]
 8107026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810702a:	609a      	str	r2, [r3, #8]
 810702c:	e006      	b.n	810703c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	689a      	ldr	r2, [r3, #8]
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810703a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	68db      	ldr	r3, [r3, #12]
 8107040:	2b02      	cmp	r3, #2
 8107042:	d104      	bne.n	810704e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8107044:	687b      	ldr	r3, [r7, #4]
 8107046:	681b      	ldr	r3, [r3, #0]
 8107048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810704c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	685b      	ldr	r3, [r3, #4]
 8107054:	687a      	ldr	r2, [r7, #4]
 8107056:	6812      	ldr	r2, [r2, #0]
 8107058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810705c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8107060:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	681b      	ldr	r3, [r3, #0]
 8107066:	68da      	ldr	r2, [r3, #12]
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107070:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8107072:	687b      	ldr	r3, [r7, #4]
 8107074:	691a      	ldr	r2, [r3, #16]
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	695b      	ldr	r3, [r3, #20]
 810707a:	ea42 0103 	orr.w	r1, r2, r3
 810707e:	687b      	ldr	r3, [r7, #4]
 8107080:	699b      	ldr	r3, [r3, #24]
 8107082:	021a      	lsls	r2, r3, #8
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	681b      	ldr	r3, [r3, #0]
 8107088:	430a      	orrs	r2, r1
 810708a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810708c:	687b      	ldr	r3, [r7, #4]
 810708e:	69d9      	ldr	r1, [r3, #28]
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	6a1a      	ldr	r2, [r3, #32]
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	681b      	ldr	r3, [r3, #0]
 8107098:	430a      	orrs	r2, r1
 810709a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	681a      	ldr	r2, [r3, #0]
 81070a2:	687b      	ldr	r3, [r7, #4]
 81070a4:	681b      	ldr	r3, [r3, #0]
 81070a6:	f042 0201 	orr.w	r2, r2, #1
 81070aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	2200      	movs	r2, #0
 81070b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	2220      	movs	r2, #32
 81070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	2200      	movs	r2, #0
 81070be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	2200      	movs	r2, #0
 81070c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 81070c8:	2300      	movs	r3, #0
}
 81070ca:	4618      	mov	r0, r3
 81070cc:	3708      	adds	r7, #8
 81070ce:	46bd      	mov	sp, r7
 81070d0:	bd80      	pop	{r7, pc}
	...

081070d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81070d4:	b580      	push	{r7, lr}
 81070d6:	b088      	sub	sp, #32
 81070d8:	af02      	add	r7, sp, #8
 81070da:	60f8      	str	r0, [r7, #12]
 81070dc:	4608      	mov	r0, r1
 81070de:	4611      	mov	r1, r2
 81070e0:	461a      	mov	r2, r3
 81070e2:	4603      	mov	r3, r0
 81070e4:	817b      	strh	r3, [r7, #10]
 81070e6:	460b      	mov	r3, r1
 81070e8:	813b      	strh	r3, [r7, #8]
 81070ea:	4613      	mov	r3, r2
 81070ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81070ee:	68fb      	ldr	r3, [r7, #12]
 81070f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81070f4:	b2db      	uxtb	r3, r3
 81070f6:	2b20      	cmp	r3, #32
 81070f8:	f040 80f9 	bne.w	81072ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81070fc:	6a3b      	ldr	r3, [r7, #32]
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d002      	beq.n	8107108 <HAL_I2C_Mem_Write+0x34>
 8107102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8107104:	2b00      	cmp	r3, #0
 8107106:	d105      	bne.n	8107114 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8107108:	68fb      	ldr	r3, [r7, #12]
 810710a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810710e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8107110:	2301      	movs	r3, #1
 8107112:	e0ed      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8107114:	68fb      	ldr	r3, [r7, #12]
 8107116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810711a:	2b01      	cmp	r3, #1
 810711c:	d101      	bne.n	8107122 <HAL_I2C_Mem_Write+0x4e>
 810711e:	2302      	movs	r3, #2
 8107120:	e0e6      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
 8107122:	68fb      	ldr	r3, [r7, #12]
 8107124:	2201      	movs	r2, #1
 8107126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810712a:	f7fc faa1 	bl	8103670 <HAL_GetTick>
 810712e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107130:	697b      	ldr	r3, [r7, #20]
 8107132:	9300      	str	r3, [sp, #0]
 8107134:	2319      	movs	r3, #25
 8107136:	2201      	movs	r2, #1
 8107138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810713c:	68f8      	ldr	r0, [r7, #12]
 810713e:	f001 f8c6 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 8107142:	4603      	mov	r3, r0
 8107144:	2b00      	cmp	r3, #0
 8107146:	d001      	beq.n	810714c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8107148:	2301      	movs	r3, #1
 810714a:	e0d1      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 810714c:	68fb      	ldr	r3, [r7, #12]
 810714e:	2221      	movs	r2, #33	; 0x21
 8107150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8107154:	68fb      	ldr	r3, [r7, #12]
 8107156:	2240      	movs	r2, #64	; 0x40
 8107158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	2200      	movs	r2, #0
 8107160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8107162:	68fb      	ldr	r3, [r7, #12]
 8107164:	6a3a      	ldr	r2, [r7, #32]
 8107166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8107168:	68fb      	ldr	r3, [r7, #12]
 810716a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810716c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810716e:	68fb      	ldr	r3, [r7, #12]
 8107170:	2200      	movs	r2, #0
 8107172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8107174:	88f8      	ldrh	r0, [r7, #6]
 8107176:	893a      	ldrh	r2, [r7, #8]
 8107178:	8979      	ldrh	r1, [r7, #10]
 810717a:	697b      	ldr	r3, [r7, #20]
 810717c:	9301      	str	r3, [sp, #4]
 810717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107180:	9300      	str	r3, [sp, #0]
 8107182:	4603      	mov	r3, r0
 8107184:	68f8      	ldr	r0, [r7, #12]
 8107186:	f000 fb91 	bl	81078ac <I2C_RequestMemoryWrite>
 810718a:	4603      	mov	r3, r0
 810718c:	2b00      	cmp	r3, #0
 810718e:	d005      	beq.n	810719c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107190:	68fb      	ldr	r3, [r7, #12]
 8107192:	2200      	movs	r2, #0
 8107194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8107198:	2301      	movs	r3, #1
 810719a:	e0a9      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81071a0:	b29b      	uxth	r3, r3
 81071a2:	2bff      	cmp	r3, #255	; 0xff
 81071a4:	d90e      	bls.n	81071c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	22ff      	movs	r2, #255	; 0xff
 81071aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81071ac:	68fb      	ldr	r3, [r7, #12]
 81071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81071b0:	b2da      	uxtb	r2, r3
 81071b2:	8979      	ldrh	r1, [r7, #10]
 81071b4:	2300      	movs	r3, #0
 81071b6:	9300      	str	r3, [sp, #0]
 81071b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81071bc:	68f8      	ldr	r0, [r7, #12]
 81071be:	f001 f9a9 	bl	8108514 <I2C_TransferConfig>
 81071c2:	e00f      	b.n	81071e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81071c4:	68fb      	ldr	r3, [r7, #12]
 81071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81071c8:	b29a      	uxth	r2, r3
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81071ce:	68fb      	ldr	r3, [r7, #12]
 81071d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81071d2:	b2da      	uxtb	r2, r3
 81071d4:	8979      	ldrh	r1, [r7, #10]
 81071d6:	2300      	movs	r3, #0
 81071d8:	9300      	str	r3, [sp, #0]
 81071da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81071de:	68f8      	ldr	r0, [r7, #12]
 81071e0:	f001 f998 	bl	8108514 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81071e4:	697a      	ldr	r2, [r7, #20]
 81071e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81071e8:	68f8      	ldr	r0, [r7, #12]
 81071ea:	f001 f8b0 	bl	810834e <I2C_WaitOnTXISFlagUntilTimeout>
 81071ee:	4603      	mov	r3, r0
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d001      	beq.n	81071f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81071f4:	2301      	movs	r3, #1
 81071f6:	e07b      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81071f8:	68fb      	ldr	r3, [r7, #12]
 81071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81071fc:	781a      	ldrb	r2, [r3, #0]
 81071fe:	68fb      	ldr	r3, [r7, #12]
 8107200:	681b      	ldr	r3, [r3, #0]
 8107202:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107204:	68fb      	ldr	r3, [r7, #12]
 8107206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107208:	1c5a      	adds	r2, r3, #1
 810720a:	68fb      	ldr	r3, [r7, #12]
 810720c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810720e:	68fb      	ldr	r3, [r7, #12]
 8107210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107212:	b29b      	uxth	r3, r3
 8107214:	3b01      	subs	r3, #1
 8107216:	b29a      	uxth	r2, r3
 8107218:	68fb      	ldr	r3, [r7, #12]
 810721a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810721c:	68fb      	ldr	r3, [r7, #12]
 810721e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107220:	3b01      	subs	r3, #1
 8107222:	b29a      	uxth	r2, r3
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8107228:	68fb      	ldr	r3, [r7, #12]
 810722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810722c:	b29b      	uxth	r3, r3
 810722e:	2b00      	cmp	r3, #0
 8107230:	d034      	beq.n	810729c <HAL_I2C_Mem_Write+0x1c8>
 8107232:	68fb      	ldr	r3, [r7, #12]
 8107234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107236:	2b00      	cmp	r3, #0
 8107238:	d130      	bne.n	810729c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810723a:	697b      	ldr	r3, [r7, #20]
 810723c:	9300      	str	r3, [sp, #0]
 810723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107240:	2200      	movs	r2, #0
 8107242:	2180      	movs	r1, #128	; 0x80
 8107244:	68f8      	ldr	r0, [r7, #12]
 8107246:	f001 f842 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 810724a:	4603      	mov	r3, r0
 810724c:	2b00      	cmp	r3, #0
 810724e:	d001      	beq.n	8107254 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8107250:	2301      	movs	r3, #1
 8107252:	e04d      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107254:	68fb      	ldr	r3, [r7, #12]
 8107256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107258:	b29b      	uxth	r3, r3
 810725a:	2bff      	cmp	r3, #255	; 0xff
 810725c:	d90e      	bls.n	810727c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	22ff      	movs	r2, #255	; 0xff
 8107262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107264:	68fb      	ldr	r3, [r7, #12]
 8107266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107268:	b2da      	uxtb	r2, r3
 810726a:	8979      	ldrh	r1, [r7, #10]
 810726c:	2300      	movs	r3, #0
 810726e:	9300      	str	r3, [sp, #0]
 8107270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107274:	68f8      	ldr	r0, [r7, #12]
 8107276:	f001 f94d 	bl	8108514 <I2C_TransferConfig>
 810727a:	e00f      	b.n	810729c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810727c:	68fb      	ldr	r3, [r7, #12]
 810727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107280:	b29a      	uxth	r2, r3
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810728a:	b2da      	uxtb	r2, r3
 810728c:	8979      	ldrh	r1, [r7, #10]
 810728e:	2300      	movs	r3, #0
 8107290:	9300      	str	r3, [sp, #0]
 8107292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8107296:	68f8      	ldr	r0, [r7, #12]
 8107298:	f001 f93c 	bl	8108514 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 810729c:	68fb      	ldr	r3, [r7, #12]
 810729e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81072a0:	b29b      	uxth	r3, r3
 81072a2:	2b00      	cmp	r3, #0
 81072a4:	d19e      	bne.n	81071e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81072a6:	697a      	ldr	r2, [r7, #20]
 81072a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81072aa:	68f8      	ldr	r0, [r7, #12]
 81072ac:	f001 f88f 	bl	81083ce <I2C_WaitOnSTOPFlagUntilTimeout>
 81072b0:	4603      	mov	r3, r0
 81072b2:	2b00      	cmp	r3, #0
 81072b4:	d001      	beq.n	81072ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81072b6:	2301      	movs	r3, #1
 81072b8:	e01a      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81072ba:	68fb      	ldr	r3, [r7, #12]
 81072bc:	681b      	ldr	r3, [r3, #0]
 81072be:	2220      	movs	r2, #32
 81072c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81072c2:	68fb      	ldr	r3, [r7, #12]
 81072c4:	681b      	ldr	r3, [r3, #0]
 81072c6:	6859      	ldr	r1, [r3, #4]
 81072c8:	68fb      	ldr	r3, [r7, #12]
 81072ca:	681a      	ldr	r2, [r3, #0]
 81072cc:	4b0a      	ldr	r3, [pc, #40]	; (81072f8 <HAL_I2C_Mem_Write+0x224>)
 81072ce:	400b      	ands	r3, r1
 81072d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81072d2:	68fb      	ldr	r3, [r7, #12]
 81072d4:	2220      	movs	r2, #32
 81072d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	2200      	movs	r2, #0
 81072de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81072e2:	68fb      	ldr	r3, [r7, #12]
 81072e4:	2200      	movs	r2, #0
 81072e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81072ea:	2300      	movs	r3, #0
 81072ec:	e000      	b.n	81072f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81072ee:	2302      	movs	r3, #2
  }
}
 81072f0:	4618      	mov	r0, r3
 81072f2:	3718      	adds	r7, #24
 81072f4:	46bd      	mov	sp, r7
 81072f6:	bd80      	pop	{r7, pc}
 81072f8:	fe00e800 	.word	0xfe00e800

081072fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81072fc:	b580      	push	{r7, lr}
 81072fe:	b088      	sub	sp, #32
 8107300:	af02      	add	r7, sp, #8
 8107302:	60f8      	str	r0, [r7, #12]
 8107304:	4608      	mov	r0, r1
 8107306:	4611      	mov	r1, r2
 8107308:	461a      	mov	r2, r3
 810730a:	4603      	mov	r3, r0
 810730c:	817b      	strh	r3, [r7, #10]
 810730e:	460b      	mov	r3, r1
 8107310:	813b      	strh	r3, [r7, #8]
 8107312:	4613      	mov	r3, r2
 8107314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8107316:	68fb      	ldr	r3, [r7, #12]
 8107318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810731c:	b2db      	uxtb	r3, r3
 810731e:	2b20      	cmp	r3, #32
 8107320:	f040 80fd 	bne.w	810751e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8107324:	6a3b      	ldr	r3, [r7, #32]
 8107326:	2b00      	cmp	r3, #0
 8107328:	d002      	beq.n	8107330 <HAL_I2C_Mem_Read+0x34>
 810732a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810732c:	2b00      	cmp	r3, #0
 810732e:	d105      	bne.n	810733c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8107330:	68fb      	ldr	r3, [r7, #12]
 8107332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8107336:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8107338:	2301      	movs	r3, #1
 810733a:	e0f1      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107342:	2b01      	cmp	r3, #1
 8107344:	d101      	bne.n	810734a <HAL_I2C_Mem_Read+0x4e>
 8107346:	2302      	movs	r3, #2
 8107348:	e0ea      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
 810734a:	68fb      	ldr	r3, [r7, #12]
 810734c:	2201      	movs	r2, #1
 810734e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8107352:	f7fc f98d 	bl	8103670 <HAL_GetTick>
 8107356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8107358:	697b      	ldr	r3, [r7, #20]
 810735a:	9300      	str	r3, [sp, #0]
 810735c:	2319      	movs	r3, #25
 810735e:	2201      	movs	r2, #1
 8107360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107364:	68f8      	ldr	r0, [r7, #12]
 8107366:	f000 ffb2 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 810736a:	4603      	mov	r3, r0
 810736c:	2b00      	cmp	r3, #0
 810736e:	d001      	beq.n	8107374 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8107370:	2301      	movs	r3, #1
 8107372:	e0d5      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8107374:	68fb      	ldr	r3, [r7, #12]
 8107376:	2222      	movs	r2, #34	; 0x22
 8107378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	2240      	movs	r2, #64	; 0x40
 8107380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	2200      	movs	r2, #0
 8107388:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	6a3a      	ldr	r2, [r7, #32]
 810738e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8107394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8107396:	68fb      	ldr	r3, [r7, #12]
 8107398:	2200      	movs	r2, #0
 810739a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810739c:	88f8      	ldrh	r0, [r7, #6]
 810739e:	893a      	ldrh	r2, [r7, #8]
 81073a0:	8979      	ldrh	r1, [r7, #10]
 81073a2:	697b      	ldr	r3, [r7, #20]
 81073a4:	9301      	str	r3, [sp, #4]
 81073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81073a8:	9300      	str	r3, [sp, #0]
 81073aa:	4603      	mov	r3, r0
 81073ac:	68f8      	ldr	r0, [r7, #12]
 81073ae:	f000 fad1 	bl	8107954 <I2C_RequestMemoryRead>
 81073b2:	4603      	mov	r3, r0
 81073b4:	2b00      	cmp	r3, #0
 81073b6:	d005      	beq.n	81073c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81073b8:	68fb      	ldr	r3, [r7, #12]
 81073ba:	2200      	movs	r2, #0
 81073bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81073c0:	2301      	movs	r3, #1
 81073c2:	e0ad      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81073c4:	68fb      	ldr	r3, [r7, #12]
 81073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073c8:	b29b      	uxth	r3, r3
 81073ca:	2bff      	cmp	r3, #255	; 0xff
 81073cc:	d90e      	bls.n	81073ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81073ce:	68fb      	ldr	r3, [r7, #12]
 81073d0:	22ff      	movs	r2, #255	; 0xff
 81073d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81073d4:	68fb      	ldr	r3, [r7, #12]
 81073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073d8:	b2da      	uxtb	r2, r3
 81073da:	8979      	ldrh	r1, [r7, #10]
 81073dc:	4b52      	ldr	r3, [pc, #328]	; (8107528 <HAL_I2C_Mem_Read+0x22c>)
 81073de:	9300      	str	r3, [sp, #0]
 81073e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81073e4:	68f8      	ldr	r0, [r7, #12]
 81073e6:	f001 f895 	bl	8108514 <I2C_TransferConfig>
 81073ea:	e00f      	b.n	810740c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81073ec:	68fb      	ldr	r3, [r7, #12]
 81073ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073f0:	b29a      	uxth	r2, r3
 81073f2:	68fb      	ldr	r3, [r7, #12]
 81073f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 81073f6:	68fb      	ldr	r3, [r7, #12]
 81073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073fa:	b2da      	uxtb	r2, r3
 81073fc:	8979      	ldrh	r1, [r7, #10]
 81073fe:	4b4a      	ldr	r3, [pc, #296]	; (8107528 <HAL_I2C_Mem_Read+0x22c>)
 8107400:	9300      	str	r3, [sp, #0]
 8107402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8107406:	68f8      	ldr	r0, [r7, #12]
 8107408:	f001 f884 	bl	8108514 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810740c:	697b      	ldr	r3, [r7, #20]
 810740e:	9300      	str	r3, [sp, #0]
 8107410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107412:	2200      	movs	r2, #0
 8107414:	2104      	movs	r1, #4
 8107416:	68f8      	ldr	r0, [r7, #12]
 8107418:	f000 ff59 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 810741c:	4603      	mov	r3, r0
 810741e:	2b00      	cmp	r3, #0
 8107420:	d001      	beq.n	8107426 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8107422:	2301      	movs	r3, #1
 8107424:	e07c      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107426:	68fb      	ldr	r3, [r7, #12]
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810742c:	68fb      	ldr	r3, [r7, #12]
 810742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107430:	b2d2      	uxtb	r2, r2
 8107432:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107438:	1c5a      	adds	r2, r3, #1
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810743e:	68fb      	ldr	r3, [r7, #12]
 8107440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107442:	3b01      	subs	r3, #1
 8107444:	b29a      	uxth	r2, r3
 8107446:	68fb      	ldr	r3, [r7, #12]
 8107448:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810744a:	68fb      	ldr	r3, [r7, #12]
 810744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810744e:	b29b      	uxth	r3, r3
 8107450:	3b01      	subs	r3, #1
 8107452:	b29a      	uxth	r2, r3
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8107458:	68fb      	ldr	r3, [r7, #12]
 810745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810745c:	b29b      	uxth	r3, r3
 810745e:	2b00      	cmp	r3, #0
 8107460:	d034      	beq.n	81074cc <HAL_I2C_Mem_Read+0x1d0>
 8107462:	68fb      	ldr	r3, [r7, #12]
 8107464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107466:	2b00      	cmp	r3, #0
 8107468:	d130      	bne.n	81074cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810746a:	697b      	ldr	r3, [r7, #20]
 810746c:	9300      	str	r3, [sp, #0]
 810746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107470:	2200      	movs	r2, #0
 8107472:	2180      	movs	r1, #128	; 0x80
 8107474:	68f8      	ldr	r0, [r7, #12]
 8107476:	f000 ff2a 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 810747a:	4603      	mov	r3, r0
 810747c:	2b00      	cmp	r3, #0
 810747e:	d001      	beq.n	8107484 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8107480:	2301      	movs	r3, #1
 8107482:	e04d      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107484:	68fb      	ldr	r3, [r7, #12]
 8107486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107488:	b29b      	uxth	r3, r3
 810748a:	2bff      	cmp	r3, #255	; 0xff
 810748c:	d90e      	bls.n	81074ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810748e:	68fb      	ldr	r3, [r7, #12]
 8107490:	22ff      	movs	r2, #255	; 0xff
 8107492:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107494:	68fb      	ldr	r3, [r7, #12]
 8107496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107498:	b2da      	uxtb	r2, r3
 810749a:	8979      	ldrh	r1, [r7, #10]
 810749c:	2300      	movs	r3, #0
 810749e:	9300      	str	r3, [sp, #0]
 81074a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81074a4:	68f8      	ldr	r0, [r7, #12]
 81074a6:	f001 f835 	bl	8108514 <I2C_TransferConfig>
 81074aa:	e00f      	b.n	81074cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81074ac:	68fb      	ldr	r3, [r7, #12]
 81074ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81074b0:	b29a      	uxth	r2, r3
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81074b6:	68fb      	ldr	r3, [r7, #12]
 81074b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81074ba:	b2da      	uxtb	r2, r3
 81074bc:	8979      	ldrh	r1, [r7, #10]
 81074be:	2300      	movs	r3, #0
 81074c0:	9300      	str	r3, [sp, #0]
 81074c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81074c6:	68f8      	ldr	r0, [r7, #12]
 81074c8:	f001 f824 	bl	8108514 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81074d0:	b29b      	uxth	r3, r3
 81074d2:	2b00      	cmp	r3, #0
 81074d4:	d19a      	bne.n	810740c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81074d6:	697a      	ldr	r2, [r7, #20]
 81074d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81074da:	68f8      	ldr	r0, [r7, #12]
 81074dc:	f000 ff77 	bl	81083ce <I2C_WaitOnSTOPFlagUntilTimeout>
 81074e0:	4603      	mov	r3, r0
 81074e2:	2b00      	cmp	r3, #0
 81074e4:	d001      	beq.n	81074ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81074e6:	2301      	movs	r3, #1
 81074e8:	e01a      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81074ea:	68fb      	ldr	r3, [r7, #12]
 81074ec:	681b      	ldr	r3, [r3, #0]
 81074ee:	2220      	movs	r2, #32
 81074f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	6859      	ldr	r1, [r3, #4]
 81074f8:	68fb      	ldr	r3, [r7, #12]
 81074fa:	681a      	ldr	r2, [r3, #0]
 81074fc:	4b0b      	ldr	r3, [pc, #44]	; (810752c <HAL_I2C_Mem_Read+0x230>)
 81074fe:	400b      	ands	r3, r1
 8107500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8107502:	68fb      	ldr	r3, [r7, #12]
 8107504:	2220      	movs	r2, #32
 8107506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810750a:	68fb      	ldr	r3, [r7, #12]
 810750c:	2200      	movs	r2, #0
 810750e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107512:	68fb      	ldr	r3, [r7, #12]
 8107514:	2200      	movs	r2, #0
 8107516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810751a:	2300      	movs	r3, #0
 810751c:	e000      	b.n	8107520 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810751e:	2302      	movs	r3, #2
  }
}
 8107520:	4618      	mov	r0, r3
 8107522:	3718      	adds	r7, #24
 8107524:	46bd      	mov	sp, r7
 8107526:	bd80      	pop	{r7, pc}
 8107528:	80002400 	.word	0x80002400
 810752c:	fe00e800 	.word	0xfe00e800

08107530 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107530:	b580      	push	{r7, lr}
 8107532:	b084      	sub	sp, #16
 8107534:	af00      	add	r7, sp, #0
 8107536:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	681b      	ldr	r3, [r3, #0]
 810753c:	699b      	ldr	r3, [r3, #24]
 810753e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	681b      	ldr	r3, [r3, #0]
 8107544:	681b      	ldr	r3, [r3, #0]
 8107546:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810754c:	2b00      	cmp	r3, #0
 810754e:	d005      	beq.n	810755c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8107550:	687b      	ldr	r3, [r7, #4]
 8107552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107554:	68ba      	ldr	r2, [r7, #8]
 8107556:	68f9      	ldr	r1, [r7, #12]
 8107558:	6878      	ldr	r0, [r7, #4]
 810755a:	4798      	blx	r3
  }
}
 810755c:	bf00      	nop
 810755e:	3710      	adds	r7, #16
 8107560:	46bd      	mov	sp, r7
 8107562:	bd80      	pop	{r7, pc}

08107564 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107564:	b580      	push	{r7, lr}
 8107566:	b086      	sub	sp, #24
 8107568:	af00      	add	r7, sp, #0
 810756a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 810756c:	687b      	ldr	r3, [r7, #4]
 810756e:	681b      	ldr	r3, [r3, #0]
 8107570:	699b      	ldr	r3, [r3, #24]
 8107572:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107574:	687b      	ldr	r3, [r7, #4]
 8107576:	681b      	ldr	r3, [r3, #0]
 8107578:	681b      	ldr	r3, [r3, #0]
 810757a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 810757c:	697b      	ldr	r3, [r7, #20]
 810757e:	0a1b      	lsrs	r3, r3, #8
 8107580:	f003 0301 	and.w	r3, r3, #1
 8107584:	2b00      	cmp	r3, #0
 8107586:	d010      	beq.n	81075aa <HAL_I2C_ER_IRQHandler+0x46>
 8107588:	693b      	ldr	r3, [r7, #16]
 810758a:	09db      	lsrs	r3, r3, #7
 810758c:	f003 0301 	and.w	r3, r3, #1
 8107590:	2b00      	cmp	r3, #0
 8107592:	d00a      	beq.n	81075aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107598:	f043 0201 	orr.w	r2, r3, #1
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 81075a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81075aa:	697b      	ldr	r3, [r7, #20]
 81075ac:	0a9b      	lsrs	r3, r3, #10
 81075ae:	f003 0301 	and.w	r3, r3, #1
 81075b2:	2b00      	cmp	r3, #0
 81075b4:	d010      	beq.n	81075d8 <HAL_I2C_ER_IRQHandler+0x74>
 81075b6:	693b      	ldr	r3, [r7, #16]
 81075b8:	09db      	lsrs	r3, r3, #7
 81075ba:	f003 0301 	and.w	r3, r3, #1
 81075be:	2b00      	cmp	r3, #0
 81075c0:	d00a      	beq.n	81075d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075c6:	f043 0208 	orr.w	r2, r3, #8
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	681b      	ldr	r3, [r3, #0]
 81075d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81075d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 81075d8:	697b      	ldr	r3, [r7, #20]
 81075da:	0a5b      	lsrs	r3, r3, #9
 81075dc:	f003 0301 	and.w	r3, r3, #1
 81075e0:	2b00      	cmp	r3, #0
 81075e2:	d010      	beq.n	8107606 <HAL_I2C_ER_IRQHandler+0xa2>
 81075e4:	693b      	ldr	r3, [r7, #16]
 81075e6:	09db      	lsrs	r3, r3, #7
 81075e8:	f003 0301 	and.w	r3, r3, #1
 81075ec:	2b00      	cmp	r3, #0
 81075ee:	d00a      	beq.n	8107606 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075f4:	f043 0202 	orr.w	r2, r3, #2
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	681b      	ldr	r3, [r3, #0]
 8107600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8107604:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810760a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 810760c:	68fb      	ldr	r3, [r7, #12]
 810760e:	f003 030b 	and.w	r3, r3, #11
 8107612:	2b00      	cmp	r3, #0
 8107614:	d003      	beq.n	810761e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8107616:	68f9      	ldr	r1, [r7, #12]
 8107618:	6878      	ldr	r0, [r7, #4]
 810761a:	f000 fd1f 	bl	810805c <I2C_ITError>
  }
}
 810761e:	bf00      	nop
 8107620:	3718      	adds	r7, #24
 8107622:	46bd      	mov	sp, r7
 8107624:	bd80      	pop	{r7, pc}

08107626 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107626:	b480      	push	{r7}
 8107628:	b083      	sub	sp, #12
 810762a:	af00      	add	r7, sp, #0
 810762c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 810762e:	bf00      	nop
 8107630:	370c      	adds	r7, #12
 8107632:	46bd      	mov	sp, r7
 8107634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107638:	4770      	bx	lr

0810763a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810763a:	b480      	push	{r7}
 810763c:	b083      	sub	sp, #12
 810763e:	af00      	add	r7, sp, #0
 8107640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8107642:	bf00      	nop
 8107644:	370c      	adds	r7, #12
 8107646:	46bd      	mov	sp, r7
 8107648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810764c:	4770      	bx	lr

0810764e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 810764e:	b480      	push	{r7}
 8107650:	b083      	sub	sp, #12
 8107652:	af00      	add	r7, sp, #0
 8107654:	6078      	str	r0, [r7, #4]
 8107656:	460b      	mov	r3, r1
 8107658:	70fb      	strb	r3, [r7, #3]
 810765a:	4613      	mov	r3, r2
 810765c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 810765e:	bf00      	nop
 8107660:	370c      	adds	r7, #12
 8107662:	46bd      	mov	sp, r7
 8107664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107668:	4770      	bx	lr

0810766a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810766a:	b480      	push	{r7}
 810766c:	b083      	sub	sp, #12
 810766e:	af00      	add	r7, sp, #0
 8107670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8107672:	bf00      	nop
 8107674:	370c      	adds	r7, #12
 8107676:	46bd      	mov	sp, r7
 8107678:	f85d 7b04 	ldr.w	r7, [sp], #4
 810767c:	4770      	bx	lr

0810767e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 810767e:	b480      	push	{r7}
 8107680:	b083      	sub	sp, #12
 8107682:	af00      	add	r7, sp, #0
 8107684:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8107686:	bf00      	nop
 8107688:	370c      	adds	r7, #12
 810768a:	46bd      	mov	sp, r7
 810768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107690:	4770      	bx	lr

08107692 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107692:	b480      	push	{r7}
 8107694:	b083      	sub	sp, #12
 8107696:	af00      	add	r7, sp, #0
 8107698:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 810769a:	bf00      	nop
 810769c:	370c      	adds	r7, #12
 810769e:	46bd      	mov	sp, r7
 81076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076a4:	4770      	bx	lr

081076a6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81076a6:	b580      	push	{r7, lr}
 81076a8:	b086      	sub	sp, #24
 81076aa:	af00      	add	r7, sp, #0
 81076ac:	60f8      	str	r0, [r7, #12]
 81076ae:	60b9      	str	r1, [r7, #8]
 81076b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81076b2:	68fb      	ldr	r3, [r7, #12]
 81076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 81076b8:	68bb      	ldr	r3, [r7, #8]
 81076ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 81076bc:	68fb      	ldr	r3, [r7, #12]
 81076be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81076c2:	2b01      	cmp	r3, #1
 81076c4:	d101      	bne.n	81076ca <I2C_Slave_ISR_IT+0x24>
 81076c6:	2302      	movs	r3, #2
 81076c8:	e0ec      	b.n	81078a4 <I2C_Slave_ISR_IT+0x1fe>
 81076ca:	68fb      	ldr	r3, [r7, #12]
 81076cc:	2201      	movs	r2, #1
 81076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81076d2:	693b      	ldr	r3, [r7, #16]
 81076d4:	095b      	lsrs	r3, r3, #5
 81076d6:	f003 0301 	and.w	r3, r3, #1
 81076da:	2b00      	cmp	r3, #0
 81076dc:	d009      	beq.n	81076f2 <I2C_Slave_ISR_IT+0x4c>
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	095b      	lsrs	r3, r3, #5
 81076e2:	f003 0301 	and.w	r3, r3, #1
 81076e6:	2b00      	cmp	r3, #0
 81076e8:	d003      	beq.n	81076f2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81076ea:	6939      	ldr	r1, [r7, #16]
 81076ec:	68f8      	ldr	r0, [r7, #12]
 81076ee:	f000 fa67 	bl	8107bc0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81076f2:	693b      	ldr	r3, [r7, #16]
 81076f4:	091b      	lsrs	r3, r3, #4
 81076f6:	f003 0301 	and.w	r3, r3, #1
 81076fa:	2b00      	cmp	r3, #0
 81076fc:	d04d      	beq.n	810779a <I2C_Slave_ISR_IT+0xf4>
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	091b      	lsrs	r3, r3, #4
 8107702:	f003 0301 	and.w	r3, r3, #1
 8107706:	2b00      	cmp	r3, #0
 8107708:	d047      	beq.n	810779a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 810770a:	68fb      	ldr	r3, [r7, #12]
 810770c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810770e:	b29b      	uxth	r3, r3
 8107710:	2b00      	cmp	r3, #0
 8107712:	d128      	bne.n	8107766 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8107714:	68fb      	ldr	r3, [r7, #12]
 8107716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810771a:	b2db      	uxtb	r3, r3
 810771c:	2b28      	cmp	r3, #40	; 0x28
 810771e:	d108      	bne.n	8107732 <I2C_Slave_ISR_IT+0x8c>
 8107720:	697b      	ldr	r3, [r7, #20]
 8107722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107726:	d104      	bne.n	8107732 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8107728:	6939      	ldr	r1, [r7, #16]
 810772a:	68f8      	ldr	r0, [r7, #12]
 810772c:	f000 fc40 	bl	8107fb0 <I2C_ITListenCplt>
 8107730:	e032      	b.n	8107798 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8107732:	68fb      	ldr	r3, [r7, #12]
 8107734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107738:	b2db      	uxtb	r3, r3
 810773a:	2b29      	cmp	r3, #41	; 0x29
 810773c:	d10e      	bne.n	810775c <I2C_Slave_ISR_IT+0xb6>
 810773e:	697b      	ldr	r3, [r7, #20]
 8107740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107744:	d00a      	beq.n	810775c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107746:	68fb      	ldr	r3, [r7, #12]
 8107748:	681b      	ldr	r3, [r3, #0]
 810774a:	2210      	movs	r2, #16
 810774c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 810774e:	68f8      	ldr	r0, [r7, #12]
 8107750:	f000 fd7b 	bl	810824a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107754:	68f8      	ldr	r0, [r7, #12]
 8107756:	f000 f9d5 	bl	8107b04 <I2C_ITSlaveSeqCplt>
 810775a:	e01d      	b.n	8107798 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810775c:	68fb      	ldr	r3, [r7, #12]
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	2210      	movs	r2, #16
 8107762:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8107764:	e096      	b.n	8107894 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107766:	68fb      	ldr	r3, [r7, #12]
 8107768:	681b      	ldr	r3, [r3, #0]
 810776a:	2210      	movs	r2, #16
 810776c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810776e:	68fb      	ldr	r3, [r7, #12]
 8107770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107772:	f043 0204 	orr.w	r2, r3, #4
 8107776:	68fb      	ldr	r3, [r7, #12]
 8107778:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810777a:	697b      	ldr	r3, [r7, #20]
 810777c:	2b00      	cmp	r3, #0
 810777e:	d004      	beq.n	810778a <I2C_Slave_ISR_IT+0xe4>
 8107780:	697b      	ldr	r3, [r7, #20]
 8107782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107786:	f040 8085 	bne.w	8107894 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 810778a:	68fb      	ldr	r3, [r7, #12]
 810778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810778e:	4619      	mov	r1, r3
 8107790:	68f8      	ldr	r0, [r7, #12]
 8107792:	f000 fc63 	bl	810805c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8107796:	e07d      	b.n	8107894 <I2C_Slave_ISR_IT+0x1ee>
 8107798:	e07c      	b.n	8107894 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 810779a:	693b      	ldr	r3, [r7, #16]
 810779c:	089b      	lsrs	r3, r3, #2
 810779e:	f003 0301 	and.w	r3, r3, #1
 81077a2:	2b00      	cmp	r3, #0
 81077a4:	d030      	beq.n	8107808 <I2C_Slave_ISR_IT+0x162>
 81077a6:	687b      	ldr	r3, [r7, #4]
 81077a8:	089b      	lsrs	r3, r3, #2
 81077aa:	f003 0301 	and.w	r3, r3, #1
 81077ae:	2b00      	cmp	r3, #0
 81077b0:	d02a      	beq.n	8107808 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077b6:	b29b      	uxth	r3, r3
 81077b8:	2b00      	cmp	r3, #0
 81077ba:	d018      	beq.n	81077ee <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81077bc:	68fb      	ldr	r3, [r7, #12]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81077c2:	68fb      	ldr	r3, [r7, #12]
 81077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81077c6:	b2d2      	uxtb	r2, r2
 81077c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81077ca:	68fb      	ldr	r3, [r7, #12]
 81077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81077ce:	1c5a      	adds	r2, r3, #1
 81077d0:	68fb      	ldr	r3, [r7, #12]
 81077d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81077d4:	68fb      	ldr	r3, [r7, #12]
 81077d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81077d8:	3b01      	subs	r3, #1
 81077da:	b29a      	uxth	r2, r3
 81077dc:	68fb      	ldr	r3, [r7, #12]
 81077de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81077e0:	68fb      	ldr	r3, [r7, #12]
 81077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077e4:	b29b      	uxth	r3, r3
 81077e6:	3b01      	subs	r3, #1
 81077e8:	b29a      	uxth	r2, r3
 81077ea:	68fb      	ldr	r3, [r7, #12]
 81077ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 81077ee:	68fb      	ldr	r3, [r7, #12]
 81077f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81077f2:	b29b      	uxth	r3, r3
 81077f4:	2b00      	cmp	r3, #0
 81077f6:	d14f      	bne.n	8107898 <I2C_Slave_ISR_IT+0x1f2>
 81077f8:	697b      	ldr	r3, [r7, #20]
 81077fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077fe:	d04b      	beq.n	8107898 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107800:	68f8      	ldr	r0, [r7, #12]
 8107802:	f000 f97f 	bl	8107b04 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8107806:	e047      	b.n	8107898 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107808:	693b      	ldr	r3, [r7, #16]
 810780a:	08db      	lsrs	r3, r3, #3
 810780c:	f003 0301 	and.w	r3, r3, #1
 8107810:	2b00      	cmp	r3, #0
 8107812:	d00a      	beq.n	810782a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	08db      	lsrs	r3, r3, #3
 8107818:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810781c:	2b00      	cmp	r3, #0
 810781e:	d004      	beq.n	810782a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8107820:	6939      	ldr	r1, [r7, #16]
 8107822:	68f8      	ldr	r0, [r7, #12]
 8107824:	f000 f8ea 	bl	81079fc <I2C_ITAddrCplt>
 8107828:	e037      	b.n	810789a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 810782a:	693b      	ldr	r3, [r7, #16]
 810782c:	085b      	lsrs	r3, r3, #1
 810782e:	f003 0301 	and.w	r3, r3, #1
 8107832:	2b00      	cmp	r3, #0
 8107834:	d031      	beq.n	810789a <I2C_Slave_ISR_IT+0x1f4>
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	085b      	lsrs	r3, r3, #1
 810783a:	f003 0301 	and.w	r3, r3, #1
 810783e:	2b00      	cmp	r3, #0
 8107840:	d02b      	beq.n	810789a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107842:	68fb      	ldr	r3, [r7, #12]
 8107844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107846:	b29b      	uxth	r3, r3
 8107848:	2b00      	cmp	r3, #0
 810784a:	d018      	beq.n	810787e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810784c:	68fb      	ldr	r3, [r7, #12]
 810784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107850:	781a      	ldrb	r2, [r3, #0]
 8107852:	68fb      	ldr	r3, [r7, #12]
 8107854:	681b      	ldr	r3, [r3, #0]
 8107856:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107858:	68fb      	ldr	r3, [r7, #12]
 810785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810785c:	1c5a      	adds	r2, r3, #1
 810785e:	68fb      	ldr	r3, [r7, #12]
 8107860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8107862:	68fb      	ldr	r3, [r7, #12]
 8107864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107866:	b29b      	uxth	r3, r3
 8107868:	3b01      	subs	r3, #1
 810786a:	b29a      	uxth	r2, r3
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8107870:	68fb      	ldr	r3, [r7, #12]
 8107872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107874:	3b01      	subs	r3, #1
 8107876:	b29a      	uxth	r2, r3
 8107878:	68fb      	ldr	r3, [r7, #12]
 810787a:	851a      	strh	r2, [r3, #40]	; 0x28
 810787c:	e00d      	b.n	810789a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 810787e:	697b      	ldr	r3, [r7, #20]
 8107880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107884:	d002      	beq.n	810788c <I2C_Slave_ISR_IT+0x1e6>
 8107886:	697b      	ldr	r3, [r7, #20]
 8107888:	2b00      	cmp	r3, #0
 810788a:	d106      	bne.n	810789a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 810788c:	68f8      	ldr	r0, [r7, #12]
 810788e:	f000 f939 	bl	8107b04 <I2C_ITSlaveSeqCplt>
 8107892:	e002      	b.n	810789a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107894:	bf00      	nop
 8107896:	e000      	b.n	810789a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8107898:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810789a:	68fb      	ldr	r3, [r7, #12]
 810789c:	2200      	movs	r2, #0
 810789e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 81078a2:	2300      	movs	r3, #0
}
 81078a4:	4618      	mov	r0, r3
 81078a6:	3718      	adds	r7, #24
 81078a8:	46bd      	mov	sp, r7
 81078aa:	bd80      	pop	{r7, pc}

081078ac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81078ac:	b580      	push	{r7, lr}
 81078ae:	b086      	sub	sp, #24
 81078b0:	af02      	add	r7, sp, #8
 81078b2:	60f8      	str	r0, [r7, #12]
 81078b4:	4608      	mov	r0, r1
 81078b6:	4611      	mov	r1, r2
 81078b8:	461a      	mov	r2, r3
 81078ba:	4603      	mov	r3, r0
 81078bc:	817b      	strh	r3, [r7, #10]
 81078be:	460b      	mov	r3, r1
 81078c0:	813b      	strh	r3, [r7, #8]
 81078c2:	4613      	mov	r3, r2
 81078c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81078c6:	88fb      	ldrh	r3, [r7, #6]
 81078c8:	b2da      	uxtb	r2, r3
 81078ca:	8979      	ldrh	r1, [r7, #10]
 81078cc:	4b20      	ldr	r3, [pc, #128]	; (8107950 <I2C_RequestMemoryWrite+0xa4>)
 81078ce:	9300      	str	r3, [sp, #0]
 81078d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81078d4:	68f8      	ldr	r0, [r7, #12]
 81078d6:	f000 fe1d 	bl	8108514 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81078da:	69fa      	ldr	r2, [r7, #28]
 81078dc:	69b9      	ldr	r1, [r7, #24]
 81078de:	68f8      	ldr	r0, [r7, #12]
 81078e0:	f000 fd35 	bl	810834e <I2C_WaitOnTXISFlagUntilTimeout>
 81078e4:	4603      	mov	r3, r0
 81078e6:	2b00      	cmp	r3, #0
 81078e8:	d001      	beq.n	81078ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81078ea:	2301      	movs	r3, #1
 81078ec:	e02c      	b.n	8107948 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81078ee:	88fb      	ldrh	r3, [r7, #6]
 81078f0:	2b01      	cmp	r3, #1
 81078f2:	d105      	bne.n	8107900 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81078f4:	893b      	ldrh	r3, [r7, #8]
 81078f6:	b2da      	uxtb	r2, r3
 81078f8:	68fb      	ldr	r3, [r7, #12]
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	629a      	str	r2, [r3, #40]	; 0x28
 81078fe:	e015      	b.n	810792c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107900:	893b      	ldrh	r3, [r7, #8]
 8107902:	0a1b      	lsrs	r3, r3, #8
 8107904:	b29b      	uxth	r3, r3
 8107906:	b2da      	uxtb	r2, r3
 8107908:	68fb      	ldr	r3, [r7, #12]
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810790e:	69fa      	ldr	r2, [r7, #28]
 8107910:	69b9      	ldr	r1, [r7, #24]
 8107912:	68f8      	ldr	r0, [r7, #12]
 8107914:	f000 fd1b 	bl	810834e <I2C_WaitOnTXISFlagUntilTimeout>
 8107918:	4603      	mov	r3, r0
 810791a:	2b00      	cmp	r3, #0
 810791c:	d001      	beq.n	8107922 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810791e:	2301      	movs	r3, #1
 8107920:	e012      	b.n	8107948 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107922:	893b      	ldrh	r3, [r7, #8]
 8107924:	b2da      	uxtb	r2, r3
 8107926:	68fb      	ldr	r3, [r7, #12]
 8107928:	681b      	ldr	r3, [r3, #0]
 810792a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 810792c:	69fb      	ldr	r3, [r7, #28]
 810792e:	9300      	str	r3, [sp, #0]
 8107930:	69bb      	ldr	r3, [r7, #24]
 8107932:	2200      	movs	r2, #0
 8107934:	2180      	movs	r1, #128	; 0x80
 8107936:	68f8      	ldr	r0, [r7, #12]
 8107938:	f000 fcc9 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 810793c:	4603      	mov	r3, r0
 810793e:	2b00      	cmp	r3, #0
 8107940:	d001      	beq.n	8107946 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8107942:	2301      	movs	r3, #1
 8107944:	e000      	b.n	8107948 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8107946:	2300      	movs	r3, #0
}
 8107948:	4618      	mov	r0, r3
 810794a:	3710      	adds	r7, #16
 810794c:	46bd      	mov	sp, r7
 810794e:	bd80      	pop	{r7, pc}
 8107950:	80002000 	.word	0x80002000

08107954 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107954:	b580      	push	{r7, lr}
 8107956:	b086      	sub	sp, #24
 8107958:	af02      	add	r7, sp, #8
 810795a:	60f8      	str	r0, [r7, #12]
 810795c:	4608      	mov	r0, r1
 810795e:	4611      	mov	r1, r2
 8107960:	461a      	mov	r2, r3
 8107962:	4603      	mov	r3, r0
 8107964:	817b      	strh	r3, [r7, #10]
 8107966:	460b      	mov	r3, r1
 8107968:	813b      	strh	r3, [r7, #8]
 810796a:	4613      	mov	r3, r2
 810796c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810796e:	88fb      	ldrh	r3, [r7, #6]
 8107970:	b2da      	uxtb	r2, r3
 8107972:	8979      	ldrh	r1, [r7, #10]
 8107974:	4b20      	ldr	r3, [pc, #128]	; (81079f8 <I2C_RequestMemoryRead+0xa4>)
 8107976:	9300      	str	r3, [sp, #0]
 8107978:	2300      	movs	r3, #0
 810797a:	68f8      	ldr	r0, [r7, #12]
 810797c:	f000 fdca 	bl	8108514 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107980:	69fa      	ldr	r2, [r7, #28]
 8107982:	69b9      	ldr	r1, [r7, #24]
 8107984:	68f8      	ldr	r0, [r7, #12]
 8107986:	f000 fce2 	bl	810834e <I2C_WaitOnTXISFlagUntilTimeout>
 810798a:	4603      	mov	r3, r0
 810798c:	2b00      	cmp	r3, #0
 810798e:	d001      	beq.n	8107994 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8107990:	2301      	movs	r3, #1
 8107992:	e02c      	b.n	81079ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107994:	88fb      	ldrh	r3, [r7, #6]
 8107996:	2b01      	cmp	r3, #1
 8107998:	d105      	bne.n	81079a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810799a:	893b      	ldrh	r3, [r7, #8]
 810799c:	b2da      	uxtb	r2, r3
 810799e:	68fb      	ldr	r3, [r7, #12]
 81079a0:	681b      	ldr	r3, [r3, #0]
 81079a2:	629a      	str	r2, [r3, #40]	; 0x28
 81079a4:	e015      	b.n	81079d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81079a6:	893b      	ldrh	r3, [r7, #8]
 81079a8:	0a1b      	lsrs	r3, r3, #8
 81079aa:	b29b      	uxth	r3, r3
 81079ac:	b2da      	uxtb	r2, r3
 81079ae:	68fb      	ldr	r3, [r7, #12]
 81079b0:	681b      	ldr	r3, [r3, #0]
 81079b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81079b4:	69fa      	ldr	r2, [r7, #28]
 81079b6:	69b9      	ldr	r1, [r7, #24]
 81079b8:	68f8      	ldr	r0, [r7, #12]
 81079ba:	f000 fcc8 	bl	810834e <I2C_WaitOnTXISFlagUntilTimeout>
 81079be:	4603      	mov	r3, r0
 81079c0:	2b00      	cmp	r3, #0
 81079c2:	d001      	beq.n	81079c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81079c4:	2301      	movs	r3, #1
 81079c6:	e012      	b.n	81079ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81079c8:	893b      	ldrh	r3, [r7, #8]
 81079ca:	b2da      	uxtb	r2, r3
 81079cc:	68fb      	ldr	r3, [r7, #12]
 81079ce:	681b      	ldr	r3, [r3, #0]
 81079d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81079d2:	69fb      	ldr	r3, [r7, #28]
 81079d4:	9300      	str	r3, [sp, #0]
 81079d6:	69bb      	ldr	r3, [r7, #24]
 81079d8:	2200      	movs	r2, #0
 81079da:	2140      	movs	r1, #64	; 0x40
 81079dc:	68f8      	ldr	r0, [r7, #12]
 81079de:	f000 fc76 	bl	81082ce <I2C_WaitOnFlagUntilTimeout>
 81079e2:	4603      	mov	r3, r0
 81079e4:	2b00      	cmp	r3, #0
 81079e6:	d001      	beq.n	81079ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81079e8:	2301      	movs	r3, #1
 81079ea:	e000      	b.n	81079ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81079ec:	2300      	movs	r3, #0
}
 81079ee:	4618      	mov	r0, r3
 81079f0:	3710      	adds	r7, #16
 81079f2:	46bd      	mov	sp, r7
 81079f4:	bd80      	pop	{r7, pc}
 81079f6:	bf00      	nop
 81079f8:	80002000 	.word	0x80002000

081079fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81079fc:	b580      	push	{r7, lr}
 81079fe:	b084      	sub	sp, #16
 8107a00:	af00      	add	r7, sp, #0
 8107a02:	6078      	str	r0, [r7, #4]
 8107a04:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107a0c:	b2db      	uxtb	r3, r3
 8107a0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8107a12:	2b28      	cmp	r3, #40	; 0x28
 8107a14:	d16a      	bne.n	8107aec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	699b      	ldr	r3, [r3, #24]
 8107a1c:	0c1b      	lsrs	r3, r3, #16
 8107a1e:	b2db      	uxtb	r3, r3
 8107a20:	f003 0301 	and.w	r3, r3, #1
 8107a24:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	699b      	ldr	r3, [r3, #24]
 8107a2c:	0c1b      	lsrs	r3, r3, #16
 8107a2e:	b29b      	uxth	r3, r3
 8107a30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107a34:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	681b      	ldr	r3, [r3, #0]
 8107a3a:	689b      	ldr	r3, [r3, #8]
 8107a3c:	b29b      	uxth	r3, r3
 8107a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107a42:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8107a44:	687b      	ldr	r3, [r7, #4]
 8107a46:	681b      	ldr	r3, [r3, #0]
 8107a48:	68db      	ldr	r3, [r3, #12]
 8107a4a:	b29b      	uxth	r3, r3
 8107a4c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107a50:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107a52:	687b      	ldr	r3, [r7, #4]
 8107a54:	68db      	ldr	r3, [r3, #12]
 8107a56:	2b02      	cmp	r3, #2
 8107a58:	d138      	bne.n	8107acc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107a5a:	897b      	ldrh	r3, [r7, #10]
 8107a5c:	09db      	lsrs	r3, r3, #7
 8107a5e:	b29a      	uxth	r2, r3
 8107a60:	89bb      	ldrh	r3, [r7, #12]
 8107a62:	4053      	eors	r3, r2
 8107a64:	b29b      	uxth	r3, r3
 8107a66:	f003 0306 	and.w	r3, r3, #6
 8107a6a:	2b00      	cmp	r3, #0
 8107a6c:	d11c      	bne.n	8107aa8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107a6e:	897b      	ldrh	r3, [r7, #10]
 8107a70:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107a72:	687b      	ldr	r3, [r7, #4]
 8107a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107a76:	1c5a      	adds	r2, r3, #1
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107a80:	2b02      	cmp	r3, #2
 8107a82:	d13b      	bne.n	8107afc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107a84:	687b      	ldr	r3, [r7, #4]
 8107a86:	2200      	movs	r2, #0
 8107a88:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	681b      	ldr	r3, [r3, #0]
 8107a8e:	2208      	movs	r2, #8
 8107a90:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	2200      	movs	r2, #0
 8107a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a9a:	89ba      	ldrh	r2, [r7, #12]
 8107a9c:	7bfb      	ldrb	r3, [r7, #15]
 8107a9e:	4619      	mov	r1, r3
 8107aa0:	6878      	ldr	r0, [r7, #4]
 8107aa2:	f7ff fdd4 	bl	810764e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107aa6:	e029      	b.n	8107afc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107aa8:	893b      	ldrh	r3, [r7, #8]
 8107aaa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107ab0:	6878      	ldr	r0, [r7, #4]
 8107ab2:	f000 fd5d 	bl	8108570 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	2200      	movs	r2, #0
 8107aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107abe:	89ba      	ldrh	r2, [r7, #12]
 8107ac0:	7bfb      	ldrb	r3, [r7, #15]
 8107ac2:	4619      	mov	r1, r3
 8107ac4:	6878      	ldr	r0, [r7, #4]
 8107ac6:	f7ff fdc2 	bl	810764e <HAL_I2C_AddrCallback>
}
 8107aca:	e017      	b.n	8107afc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107ad0:	6878      	ldr	r0, [r7, #4]
 8107ad2:	f000 fd4d 	bl	8108570 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	2200      	movs	r2, #0
 8107ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107ade:	89ba      	ldrh	r2, [r7, #12]
 8107ae0:	7bfb      	ldrb	r3, [r7, #15]
 8107ae2:	4619      	mov	r1, r3
 8107ae4:	6878      	ldr	r0, [r7, #4]
 8107ae6:	f7ff fdb2 	bl	810764e <HAL_I2C_AddrCallback>
}
 8107aea:	e007      	b.n	8107afc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	681b      	ldr	r3, [r3, #0]
 8107af0:	2208      	movs	r2, #8
 8107af2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	2200      	movs	r2, #0
 8107af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107afc:	bf00      	nop
 8107afe:	3710      	adds	r7, #16
 8107b00:	46bd      	mov	sp, r7
 8107b02:	bd80      	pop	{r7, pc}

08107b04 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107b04:	b580      	push	{r7, lr}
 8107b06:	b084      	sub	sp, #16
 8107b08:	af00      	add	r7, sp, #0
 8107b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	681b      	ldr	r3, [r3, #0]
 8107b12:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	2200      	movs	r2, #0
 8107b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107b1c:	68fb      	ldr	r3, [r7, #12]
 8107b1e:	0b9b      	lsrs	r3, r3, #14
 8107b20:	f003 0301 	and.w	r3, r3, #1
 8107b24:	2b00      	cmp	r3, #0
 8107b26:	d008      	beq.n	8107b3a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	681b      	ldr	r3, [r3, #0]
 8107b2c:	681a      	ldr	r2, [r3, #0]
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	681b      	ldr	r3, [r3, #0]
 8107b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107b36:	601a      	str	r2, [r3, #0]
 8107b38:	e00d      	b.n	8107b56 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107b3a:	68fb      	ldr	r3, [r7, #12]
 8107b3c:	0bdb      	lsrs	r3, r3, #15
 8107b3e:	f003 0301 	and.w	r3, r3, #1
 8107b42:	2b00      	cmp	r3, #0
 8107b44:	d007      	beq.n	8107b56 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	681b      	ldr	r3, [r3, #0]
 8107b4a:	681a      	ldr	r2, [r3, #0]
 8107b4c:	687b      	ldr	r3, [r7, #4]
 8107b4e:	681b      	ldr	r3, [r3, #0]
 8107b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107b54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107b5c:	b2db      	uxtb	r3, r3
 8107b5e:	2b29      	cmp	r3, #41	; 0x29
 8107b60:	d112      	bne.n	8107b88 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	2228      	movs	r2, #40	; 0x28
 8107b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	2221      	movs	r2, #33	; 0x21
 8107b6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107b70:	2101      	movs	r1, #1
 8107b72:	6878      	ldr	r0, [r7, #4]
 8107b74:	f000 fcfc 	bl	8108570 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	2200      	movs	r2, #0
 8107b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107b80:	6878      	ldr	r0, [r7, #4]
 8107b82:	f7ff fd50 	bl	8107626 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107b86:	e017      	b.n	8107bb8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107b8e:	b2db      	uxtb	r3, r3
 8107b90:	2b2a      	cmp	r3, #42	; 0x2a
 8107b92:	d111      	bne.n	8107bb8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	2228      	movs	r2, #40	; 0x28
 8107b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107b9c:	687b      	ldr	r3, [r7, #4]
 8107b9e:	2222      	movs	r2, #34	; 0x22
 8107ba0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107ba2:	2102      	movs	r1, #2
 8107ba4:	6878      	ldr	r0, [r7, #4]
 8107ba6:	f000 fce3 	bl	8108570 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	2200      	movs	r2, #0
 8107bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107bb2:	6878      	ldr	r0, [r7, #4]
 8107bb4:	f7ff fd41 	bl	810763a <HAL_I2C_SlaveRxCpltCallback>
}
 8107bb8:	bf00      	nop
 8107bba:	3710      	adds	r7, #16
 8107bbc:	46bd      	mov	sp, r7
 8107bbe:	bd80      	pop	{r7, pc}

08107bc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107bc0:	b580      	push	{r7, lr}
 8107bc2:	b086      	sub	sp, #24
 8107bc4:	af00      	add	r7, sp, #0
 8107bc6:	6078      	str	r0, [r7, #4]
 8107bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	681b      	ldr	r3, [r3, #0]
 8107bce:	681b      	ldr	r3, [r3, #0]
 8107bd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107bd2:	683b      	ldr	r3, [r7, #0]
 8107bd4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107bdc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	681b      	ldr	r3, [r3, #0]
 8107be2:	2220      	movs	r2, #32
 8107be4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107be6:	7bfb      	ldrb	r3, [r7, #15]
 8107be8:	2b21      	cmp	r3, #33	; 0x21
 8107bea:	d002      	beq.n	8107bf2 <I2C_ITSlaveCplt+0x32>
 8107bec:	7bfb      	ldrb	r3, [r7, #15]
 8107bee:	2b29      	cmp	r3, #41	; 0x29
 8107bf0:	d108      	bne.n	8107c04 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107bf2:	f248 0101 	movw	r1, #32769	; 0x8001
 8107bf6:	6878      	ldr	r0, [r7, #4]
 8107bf8:	f000 fcba 	bl	8108570 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	2221      	movs	r2, #33	; 0x21
 8107c00:	631a      	str	r2, [r3, #48]	; 0x30
 8107c02:	e00d      	b.n	8107c20 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107c04:	7bfb      	ldrb	r3, [r7, #15]
 8107c06:	2b22      	cmp	r3, #34	; 0x22
 8107c08:	d002      	beq.n	8107c10 <I2C_ITSlaveCplt+0x50>
 8107c0a:	7bfb      	ldrb	r3, [r7, #15]
 8107c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8107c0e:	d107      	bne.n	8107c20 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107c10:	f248 0102 	movw	r1, #32770	; 0x8002
 8107c14:	6878      	ldr	r0, [r7, #4]
 8107c16:	f000 fcab 	bl	8108570 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	2222      	movs	r2, #34	; 0x22
 8107c1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	681b      	ldr	r3, [r3, #0]
 8107c24:	685a      	ldr	r2, [r3, #4]
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107c2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	681b      	ldr	r3, [r3, #0]
 8107c34:	6859      	ldr	r1, [r3, #4]
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	681a      	ldr	r2, [r3, #0]
 8107c3a:	4b80      	ldr	r3, [pc, #512]	; (8107e3c <I2C_ITSlaveCplt+0x27c>)
 8107c3c:	400b      	ands	r3, r1
 8107c3e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107c40:	6878      	ldr	r0, [r7, #4]
 8107c42:	f000 fb02 	bl	810824a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107c46:	693b      	ldr	r3, [r7, #16]
 8107c48:	0b9b      	lsrs	r3, r3, #14
 8107c4a:	f003 0301 	and.w	r3, r3, #1
 8107c4e:	2b00      	cmp	r3, #0
 8107c50:	d07a      	beq.n	8107d48 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	681b      	ldr	r3, [r3, #0]
 8107c56:	681a      	ldr	r2, [r3, #0]
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	681b      	ldr	r3, [r3, #0]
 8107c5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107c60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c66:	2b00      	cmp	r3, #0
 8107c68:	f000 8111 	beq.w	8107e8e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c70:	681b      	ldr	r3, [r3, #0]
 8107c72:	4a73      	ldr	r2, [pc, #460]	; (8107e40 <I2C_ITSlaveCplt+0x280>)
 8107c74:	4293      	cmp	r3, r2
 8107c76:	d059      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c7c:	681b      	ldr	r3, [r3, #0]
 8107c7e:	4a71      	ldr	r2, [pc, #452]	; (8107e44 <I2C_ITSlaveCplt+0x284>)
 8107c80:	4293      	cmp	r3, r2
 8107c82:	d053      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107c84:	687b      	ldr	r3, [r7, #4]
 8107c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c88:	681b      	ldr	r3, [r3, #0]
 8107c8a:	4a6f      	ldr	r2, [pc, #444]	; (8107e48 <I2C_ITSlaveCplt+0x288>)
 8107c8c:	4293      	cmp	r3, r2
 8107c8e:	d04d      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	4a6d      	ldr	r2, [pc, #436]	; (8107e4c <I2C_ITSlaveCplt+0x28c>)
 8107c98:	4293      	cmp	r3, r2
 8107c9a:	d047      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	4a6b      	ldr	r2, [pc, #428]	; (8107e50 <I2C_ITSlaveCplt+0x290>)
 8107ca4:	4293      	cmp	r3, r2
 8107ca6:	d041      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cac:	681b      	ldr	r3, [r3, #0]
 8107cae:	4a69      	ldr	r2, [pc, #420]	; (8107e54 <I2C_ITSlaveCplt+0x294>)
 8107cb0:	4293      	cmp	r3, r2
 8107cb2:	d03b      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	4a67      	ldr	r2, [pc, #412]	; (8107e58 <I2C_ITSlaveCplt+0x298>)
 8107cbc:	4293      	cmp	r3, r2
 8107cbe:	d035      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	4a65      	ldr	r2, [pc, #404]	; (8107e5c <I2C_ITSlaveCplt+0x29c>)
 8107cc8:	4293      	cmp	r3, r2
 8107cca:	d02f      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107ccc:	687b      	ldr	r3, [r7, #4]
 8107cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cd0:	681b      	ldr	r3, [r3, #0]
 8107cd2:	4a63      	ldr	r2, [pc, #396]	; (8107e60 <I2C_ITSlaveCplt+0x2a0>)
 8107cd4:	4293      	cmp	r3, r2
 8107cd6:	d029      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	4a61      	ldr	r2, [pc, #388]	; (8107e64 <I2C_ITSlaveCplt+0x2a4>)
 8107ce0:	4293      	cmp	r3, r2
 8107ce2:	d023      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	4a5f      	ldr	r2, [pc, #380]	; (8107e68 <I2C_ITSlaveCplt+0x2a8>)
 8107cec:	4293      	cmp	r3, r2
 8107cee:	d01d      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cf4:	681b      	ldr	r3, [r3, #0]
 8107cf6:	4a5d      	ldr	r2, [pc, #372]	; (8107e6c <I2C_ITSlaveCplt+0x2ac>)
 8107cf8:	4293      	cmp	r3, r2
 8107cfa:	d017      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107cfc:	687b      	ldr	r3, [r7, #4]
 8107cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d00:	681b      	ldr	r3, [r3, #0]
 8107d02:	4a5b      	ldr	r2, [pc, #364]	; (8107e70 <I2C_ITSlaveCplt+0x2b0>)
 8107d04:	4293      	cmp	r3, r2
 8107d06:	d011      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d0c:	681b      	ldr	r3, [r3, #0]
 8107d0e:	4a59      	ldr	r2, [pc, #356]	; (8107e74 <I2C_ITSlaveCplt+0x2b4>)
 8107d10:	4293      	cmp	r3, r2
 8107d12:	d00b      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d18:	681b      	ldr	r3, [r3, #0]
 8107d1a:	4a57      	ldr	r2, [pc, #348]	; (8107e78 <I2C_ITSlaveCplt+0x2b8>)
 8107d1c:	4293      	cmp	r3, r2
 8107d1e:	d005      	beq.n	8107d2c <I2C_ITSlaveCplt+0x16c>
 8107d20:	687b      	ldr	r3, [r7, #4]
 8107d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d24:	681b      	ldr	r3, [r3, #0]
 8107d26:	4a55      	ldr	r2, [pc, #340]	; (8107e7c <I2C_ITSlaveCplt+0x2bc>)
 8107d28:	4293      	cmp	r3, r2
 8107d2a:	d105      	bne.n	8107d38 <I2C_ITSlaveCplt+0x178>
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d30:	681b      	ldr	r3, [r3, #0]
 8107d32:	685b      	ldr	r3, [r3, #4]
 8107d34:	b29b      	uxth	r3, r3
 8107d36:	e004      	b.n	8107d42 <I2C_ITSlaveCplt+0x182>
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	685b      	ldr	r3, [r3, #4]
 8107d40:	b29b      	uxth	r3, r3
 8107d42:	687a      	ldr	r2, [r7, #4]
 8107d44:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107d46:	e0a2      	b.n	8107e8e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107d48:	693b      	ldr	r3, [r7, #16]
 8107d4a:	0bdb      	lsrs	r3, r3, #15
 8107d4c:	f003 0301 	and.w	r3, r3, #1
 8107d50:	2b00      	cmp	r3, #0
 8107d52:	f000 809c 	beq.w	8107e8e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	681b      	ldr	r3, [r3, #0]
 8107d5a:	681a      	ldr	r2, [r3, #0]
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	681b      	ldr	r3, [r3, #0]
 8107d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107d64:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d6a:	2b00      	cmp	r3, #0
 8107d6c:	f000 808f 	beq.w	8107e8e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107d70:	687b      	ldr	r3, [r7, #4]
 8107d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d74:	681b      	ldr	r3, [r3, #0]
 8107d76:	4a32      	ldr	r2, [pc, #200]	; (8107e40 <I2C_ITSlaveCplt+0x280>)
 8107d78:	4293      	cmp	r3, r2
 8107d7a:	d059      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d80:	681b      	ldr	r3, [r3, #0]
 8107d82:	4a30      	ldr	r2, [pc, #192]	; (8107e44 <I2C_ITSlaveCplt+0x284>)
 8107d84:	4293      	cmp	r3, r2
 8107d86:	d053      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107d88:	687b      	ldr	r3, [r7, #4]
 8107d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d8c:	681b      	ldr	r3, [r3, #0]
 8107d8e:	4a2e      	ldr	r2, [pc, #184]	; (8107e48 <I2C_ITSlaveCplt+0x288>)
 8107d90:	4293      	cmp	r3, r2
 8107d92:	d04d      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d98:	681b      	ldr	r3, [r3, #0]
 8107d9a:	4a2c      	ldr	r2, [pc, #176]	; (8107e4c <I2C_ITSlaveCplt+0x28c>)
 8107d9c:	4293      	cmp	r3, r2
 8107d9e:	d047      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	4a2a      	ldr	r2, [pc, #168]	; (8107e50 <I2C_ITSlaveCplt+0x290>)
 8107da8:	4293      	cmp	r3, r2
 8107daa:	d041      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107db0:	681b      	ldr	r3, [r3, #0]
 8107db2:	4a28      	ldr	r2, [pc, #160]	; (8107e54 <I2C_ITSlaveCplt+0x294>)
 8107db4:	4293      	cmp	r3, r2
 8107db6:	d03b      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107db8:	687b      	ldr	r3, [r7, #4]
 8107dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dbc:	681b      	ldr	r3, [r3, #0]
 8107dbe:	4a26      	ldr	r2, [pc, #152]	; (8107e58 <I2C_ITSlaveCplt+0x298>)
 8107dc0:	4293      	cmp	r3, r2
 8107dc2:	d035      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dc8:	681b      	ldr	r3, [r3, #0]
 8107dca:	4a24      	ldr	r2, [pc, #144]	; (8107e5c <I2C_ITSlaveCplt+0x29c>)
 8107dcc:	4293      	cmp	r3, r2
 8107dce:	d02f      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dd4:	681b      	ldr	r3, [r3, #0]
 8107dd6:	4a22      	ldr	r2, [pc, #136]	; (8107e60 <I2C_ITSlaveCplt+0x2a0>)
 8107dd8:	4293      	cmp	r3, r2
 8107dda:	d029      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107ddc:	687b      	ldr	r3, [r7, #4]
 8107dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	4a20      	ldr	r2, [pc, #128]	; (8107e64 <I2C_ITSlaveCplt+0x2a4>)
 8107de4:	4293      	cmp	r3, r2
 8107de6:	d023      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107dec:	681b      	ldr	r3, [r3, #0]
 8107dee:	4a1e      	ldr	r2, [pc, #120]	; (8107e68 <I2C_ITSlaveCplt+0x2a8>)
 8107df0:	4293      	cmp	r3, r2
 8107df2:	d01d      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107df8:	681b      	ldr	r3, [r3, #0]
 8107dfa:	4a1c      	ldr	r2, [pc, #112]	; (8107e6c <I2C_ITSlaveCplt+0x2ac>)
 8107dfc:	4293      	cmp	r3, r2
 8107dfe:	d017      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e04:	681b      	ldr	r3, [r3, #0]
 8107e06:	4a1a      	ldr	r2, [pc, #104]	; (8107e70 <I2C_ITSlaveCplt+0x2b0>)
 8107e08:	4293      	cmp	r3, r2
 8107e0a:	d011      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e10:	681b      	ldr	r3, [r3, #0]
 8107e12:	4a18      	ldr	r2, [pc, #96]	; (8107e74 <I2C_ITSlaveCplt+0x2b4>)
 8107e14:	4293      	cmp	r3, r2
 8107e16:	d00b      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e1c:	681b      	ldr	r3, [r3, #0]
 8107e1e:	4a16      	ldr	r2, [pc, #88]	; (8107e78 <I2C_ITSlaveCplt+0x2b8>)
 8107e20:	4293      	cmp	r3, r2
 8107e22:	d005      	beq.n	8107e30 <I2C_ITSlaveCplt+0x270>
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	4a14      	ldr	r2, [pc, #80]	; (8107e7c <I2C_ITSlaveCplt+0x2bc>)
 8107e2c:	4293      	cmp	r3, r2
 8107e2e:	d127      	bne.n	8107e80 <I2C_ITSlaveCplt+0x2c0>
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	685b      	ldr	r3, [r3, #4]
 8107e38:	b29b      	uxth	r3, r3
 8107e3a:	e026      	b.n	8107e8a <I2C_ITSlaveCplt+0x2ca>
 8107e3c:	fe00e800 	.word	0xfe00e800
 8107e40:	40020010 	.word	0x40020010
 8107e44:	40020028 	.word	0x40020028
 8107e48:	40020040 	.word	0x40020040
 8107e4c:	40020058 	.word	0x40020058
 8107e50:	40020070 	.word	0x40020070
 8107e54:	40020088 	.word	0x40020088
 8107e58:	400200a0 	.word	0x400200a0
 8107e5c:	400200b8 	.word	0x400200b8
 8107e60:	40020410 	.word	0x40020410
 8107e64:	40020428 	.word	0x40020428
 8107e68:	40020440 	.word	0x40020440
 8107e6c:	40020458 	.word	0x40020458
 8107e70:	40020470 	.word	0x40020470
 8107e74:	40020488 	.word	0x40020488
 8107e78:	400204a0 	.word	0x400204a0
 8107e7c:	400204b8 	.word	0x400204b8
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	685b      	ldr	r3, [r3, #4]
 8107e88:	b29b      	uxth	r3, r3
 8107e8a:	687a      	ldr	r2, [r7, #4]
 8107e8c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8107e8e:	697b      	ldr	r3, [r7, #20]
 8107e90:	089b      	lsrs	r3, r3, #2
 8107e92:	f003 0301 	and.w	r3, r3, #1
 8107e96:	2b00      	cmp	r3, #0
 8107e98:	d020      	beq.n	8107edc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107e9a:	697b      	ldr	r3, [r7, #20]
 8107e9c:	f023 0304 	bic.w	r3, r3, #4
 8107ea0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107ea8:	687b      	ldr	r3, [r7, #4]
 8107eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107eac:	b2d2      	uxtb	r2, r2
 8107eae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107eb4:	1c5a      	adds	r2, r3, #1
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107eba:	687b      	ldr	r3, [r7, #4]
 8107ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107ebe:	2b00      	cmp	r3, #0
 8107ec0:	d00c      	beq.n	8107edc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107ec6:	3b01      	subs	r3, #1
 8107ec8:	b29a      	uxth	r2, r3
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107ece:	687b      	ldr	r3, [r7, #4]
 8107ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107ed2:	b29b      	uxth	r3, r3
 8107ed4:	3b01      	subs	r3, #1
 8107ed6:	b29a      	uxth	r2, r3
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107edc:	687b      	ldr	r3, [r7, #4]
 8107ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107ee0:	b29b      	uxth	r3, r3
 8107ee2:	2b00      	cmp	r3, #0
 8107ee4:	d005      	beq.n	8107ef2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107ee6:	687b      	ldr	r3, [r7, #4]
 8107ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107eea:	f043 0204 	orr.w	r2, r3, #4
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	2200      	movs	r2, #0
 8107ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	2200      	movs	r2, #0
 8107efe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f04:	2b00      	cmp	r3, #0
 8107f06:	d010      	beq.n	8107f2a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f0c:	4619      	mov	r1, r3
 8107f0e:	6878      	ldr	r0, [r7, #4]
 8107f10:	f000 f8a4 	bl	810805c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107f1a:	b2db      	uxtb	r3, r3
 8107f1c:	2b28      	cmp	r3, #40	; 0x28
 8107f1e:	d141      	bne.n	8107fa4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107f20:	6979      	ldr	r1, [r7, #20]
 8107f22:	6878      	ldr	r0, [r7, #4]
 8107f24:	f000 f844 	bl	8107fb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107f28:	e03c      	b.n	8107fa4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107f32:	d014      	beq.n	8107f5e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8107f34:	6878      	ldr	r0, [r7, #4]
 8107f36:	f7ff fde5 	bl	8107b04 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107f3a:	687b      	ldr	r3, [r7, #4]
 8107f3c:	4a1b      	ldr	r2, [pc, #108]	; (8107fac <I2C_ITSlaveCplt+0x3ec>)
 8107f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107f40:	687b      	ldr	r3, [r7, #4]
 8107f42:	2220      	movs	r2, #32
 8107f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	2200      	movs	r2, #0
 8107f4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	2200      	movs	r2, #0
 8107f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8107f56:	6878      	ldr	r0, [r7, #4]
 8107f58:	f7ff fb87 	bl	810766a <HAL_I2C_ListenCpltCallback>
}
 8107f5c:	e022      	b.n	8107fa4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107f64:	b2db      	uxtb	r3, r3
 8107f66:	2b22      	cmp	r3, #34	; 0x22
 8107f68:	d10e      	bne.n	8107f88 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	2220      	movs	r2, #32
 8107f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	2200      	movs	r2, #0
 8107f76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	2200      	movs	r2, #0
 8107f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107f80:	6878      	ldr	r0, [r7, #4]
 8107f82:	f7ff fb5a 	bl	810763a <HAL_I2C_SlaveRxCpltCallback>
}
 8107f86:	e00d      	b.n	8107fa4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	2220      	movs	r2, #32
 8107f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	2200      	movs	r2, #0
 8107f94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	2200      	movs	r2, #0
 8107f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107f9e:	6878      	ldr	r0, [r7, #4]
 8107fa0:	f7ff fb41 	bl	8107626 <HAL_I2C_SlaveTxCpltCallback>
}
 8107fa4:	bf00      	nop
 8107fa6:	3718      	adds	r7, #24
 8107fa8:	46bd      	mov	sp, r7
 8107faa:	bd80      	pop	{r7, pc}
 8107fac:	ffff0000 	.word	0xffff0000

08107fb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107fb0:	b580      	push	{r7, lr}
 8107fb2:	b082      	sub	sp, #8
 8107fb4:	af00      	add	r7, sp, #0
 8107fb6:	6078      	str	r0, [r7, #4]
 8107fb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107fba:	687b      	ldr	r3, [r7, #4]
 8107fbc:	4a26      	ldr	r2, [pc, #152]	; (8108058 <I2C_ITListenCplt+0xa8>)
 8107fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	2200      	movs	r2, #0
 8107fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	2220      	movs	r2, #32
 8107fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	2200      	movs	r2, #0
 8107fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	2200      	movs	r2, #0
 8107fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107fdc:	683b      	ldr	r3, [r7, #0]
 8107fde:	089b      	lsrs	r3, r3, #2
 8107fe0:	f003 0301 	and.w	r3, r3, #1
 8107fe4:	2b00      	cmp	r3, #0
 8107fe6:	d022      	beq.n	810802e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	681b      	ldr	r3, [r3, #0]
 8107fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ff2:	b2d2      	uxtb	r2, r2
 8107ff4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107ffa:	1c5a      	adds	r2, r3, #1
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8108000:	687b      	ldr	r3, [r7, #4]
 8108002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108004:	2b00      	cmp	r3, #0
 8108006:	d012      	beq.n	810802e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810800c:	3b01      	subs	r3, #1
 810800e:	b29a      	uxth	r2, r3
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108018:	b29b      	uxth	r3, r3
 810801a:	3b01      	subs	r3, #1
 810801c:	b29a      	uxth	r2, r3
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108026:	f043 0204 	orr.w	r2, r3, #4
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810802e:	f248 0103 	movw	r1, #32771	; 0x8003
 8108032:	6878      	ldr	r0, [r7, #4]
 8108034:	f000 fa9c 	bl	8108570 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	681b      	ldr	r3, [r3, #0]
 810803c:	2210      	movs	r2, #16
 810803e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	2200      	movs	r2, #0
 8108044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8108048:	6878      	ldr	r0, [r7, #4]
 810804a:	f7ff fb0e 	bl	810766a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 810804e:	bf00      	nop
 8108050:	3708      	adds	r7, #8
 8108052:	46bd      	mov	sp, r7
 8108054:	bd80      	pop	{r7, pc}
 8108056:	bf00      	nop
 8108058:	ffff0000 	.word	0xffff0000

0810805c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 810805c:	b580      	push	{r7, lr}
 810805e:	b084      	sub	sp, #16
 8108060:	af00      	add	r7, sp, #0
 8108062:	6078      	str	r0, [r7, #4]
 8108064:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810806c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	2200      	movs	r2, #0
 8108072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	4a5d      	ldr	r2, [pc, #372]	; (81081f0 <I2C_ITError+0x194>)
 810807a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	2200      	movs	r2, #0
 8108080:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108086:	683b      	ldr	r3, [r7, #0]
 8108088:	431a      	orrs	r2, r3
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 810808e:	7bfb      	ldrb	r3, [r7, #15]
 8108090:	2b28      	cmp	r3, #40	; 0x28
 8108092:	d005      	beq.n	81080a0 <I2C_ITError+0x44>
 8108094:	7bfb      	ldrb	r3, [r7, #15]
 8108096:	2b29      	cmp	r3, #41	; 0x29
 8108098:	d002      	beq.n	81080a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 810809a:	7bfb      	ldrb	r3, [r7, #15]
 810809c:	2b2a      	cmp	r3, #42	; 0x2a
 810809e:	d10b      	bne.n	81080b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81080a0:	2103      	movs	r1, #3
 81080a2:	6878      	ldr	r0, [r7, #4]
 81080a4:	f000 fa64 	bl	8108570 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	2228      	movs	r2, #40	; 0x28
 81080ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	4a50      	ldr	r2, [pc, #320]	; (81081f4 <I2C_ITError+0x198>)
 81080b4:	635a      	str	r2, [r3, #52]	; 0x34
 81080b6:	e011      	b.n	81080dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81080b8:	f248 0103 	movw	r1, #32771	; 0x8003
 81080bc:	6878      	ldr	r0, [r7, #4]
 81080be:	f000 fa57 	bl	8108570 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81080c8:	b2db      	uxtb	r3, r3
 81080ca:	2b60      	cmp	r3, #96	; 0x60
 81080cc:	d003      	beq.n	81080d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	2220      	movs	r2, #32
 81080d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 81080d6:	687b      	ldr	r3, [r7, #4]
 81080d8:	2200      	movs	r2, #0
 81080da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 81080dc:	687b      	ldr	r3, [r7, #4]
 81080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d039      	beq.n	810815e <I2C_ITError+0x102>
 81080ea:	68bb      	ldr	r3, [r7, #8]
 81080ec:	2b11      	cmp	r3, #17
 81080ee:	d002      	beq.n	81080f6 <I2C_ITError+0x9a>
 81080f0:	68bb      	ldr	r3, [r7, #8]
 81080f2:	2b21      	cmp	r3, #33	; 0x21
 81080f4:	d133      	bne.n	810815e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	681b      	ldr	r3, [r3, #0]
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108104:	d107      	bne.n	8108116 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8108106:	687b      	ldr	r3, [r7, #4]
 8108108:	681b      	ldr	r3, [r3, #0]
 810810a:	681a      	ldr	r2, [r3, #0]
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	681b      	ldr	r3, [r3, #0]
 8108110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8108114:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810811a:	4618      	mov	r0, r3
 810811c:	f7fe f93e 	bl	810639c <HAL_DMA_GetState>
 8108120:	4603      	mov	r3, r0
 8108122:	2b01      	cmp	r3, #1
 8108124:	d017      	beq.n	8108156 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810812a:	4a33      	ldr	r2, [pc, #204]	; (81081f8 <I2C_ITError+0x19c>)
 810812c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	2200      	movs	r2, #0
 8108132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810813a:	4618      	mov	r0, r3
 810813c:	f7fc ffc0 	bl	81050c0 <HAL_DMA_Abort_IT>
 8108140:	4603      	mov	r3, r0
 8108142:	2b00      	cmp	r3, #0
 8108144:	d04d      	beq.n	81081e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8108146:	687b      	ldr	r3, [r7, #4]
 8108148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810814a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810814c:	687a      	ldr	r2, [r7, #4]
 810814e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8108150:	4610      	mov	r0, r2
 8108152:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108154:	e045      	b.n	81081e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108156:	6878      	ldr	r0, [r7, #4]
 8108158:	f000 f850 	bl	81081fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 810815c:	e041      	b.n	81081e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 810815e:	687b      	ldr	r3, [r7, #4]
 8108160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108162:	2b00      	cmp	r3, #0
 8108164:	d039      	beq.n	81081da <I2C_ITError+0x17e>
 8108166:	68bb      	ldr	r3, [r7, #8]
 8108168:	2b12      	cmp	r3, #18
 810816a:	d002      	beq.n	8108172 <I2C_ITError+0x116>
 810816c:	68bb      	ldr	r3, [r7, #8]
 810816e:	2b22      	cmp	r3, #34	; 0x22
 8108170:	d133      	bne.n	81081da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	681b      	ldr	r3, [r3, #0]
 8108176:	681b      	ldr	r3, [r3, #0]
 8108178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810817c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108180:	d107      	bne.n	8108192 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108182:	687b      	ldr	r3, [r7, #4]
 8108184:	681b      	ldr	r3, [r3, #0]
 8108186:	681a      	ldr	r2, [r3, #0]
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108190:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108196:	4618      	mov	r0, r3
 8108198:	f7fe f900 	bl	810639c <HAL_DMA_GetState>
 810819c:	4603      	mov	r3, r0
 810819e:	2b01      	cmp	r3, #1
 81081a0:	d017      	beq.n	81081d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81081a6:	4a14      	ldr	r2, [pc, #80]	; (81081f8 <I2C_ITError+0x19c>)
 81081a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	2200      	movs	r2, #0
 81081ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81081b6:	4618      	mov	r0, r3
 81081b8:	f7fc ff82 	bl	81050c0 <HAL_DMA_Abort_IT>
 81081bc:	4603      	mov	r3, r0
 81081be:	2b00      	cmp	r3, #0
 81081c0:	d011      	beq.n	81081e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081c8:	687a      	ldr	r2, [r7, #4]
 81081ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81081cc:	4610      	mov	r0, r2
 81081ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81081d0:	e009      	b.n	81081e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81081d2:	6878      	ldr	r0, [r7, #4]
 81081d4:	f000 f812 	bl	81081fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81081d8:	e005      	b.n	81081e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 81081da:	6878      	ldr	r0, [r7, #4]
 81081dc:	f000 f80e 	bl	81081fc <I2C_TreatErrorCallback>
  }
}
 81081e0:	e002      	b.n	81081e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81081e2:	bf00      	nop
 81081e4:	e000      	b.n	81081e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81081e6:	bf00      	nop
}
 81081e8:	bf00      	nop
 81081ea:	3710      	adds	r7, #16
 81081ec:	46bd      	mov	sp, r7
 81081ee:	bd80      	pop	{r7, pc}
 81081f0:	ffff0000 	.word	0xffff0000
 81081f4:	081076a7 	.word	0x081076a7
 81081f8:	08108293 	.word	0x08108293

081081fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81081fc:	b580      	push	{r7, lr}
 81081fe:	b082      	sub	sp, #8
 8108200:	af00      	add	r7, sp, #0
 8108202:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810820a:	b2db      	uxtb	r3, r3
 810820c:	2b60      	cmp	r3, #96	; 0x60
 810820e:	d10e      	bne.n	810822e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	2220      	movs	r2, #32
 8108214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	2200      	movs	r2, #0
 810821c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	2200      	movs	r2, #0
 8108222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8108226:	6878      	ldr	r0, [r7, #4]
 8108228:	f7ff fa33 	bl	8107692 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 810822c:	e009      	b.n	8108242 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	2200      	movs	r2, #0
 8108232:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	2200      	movs	r2, #0
 8108238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 810823c:	6878      	ldr	r0, [r7, #4]
 810823e:	f7ff fa1e 	bl	810767e <HAL_I2C_ErrorCallback>
}
 8108242:	bf00      	nop
 8108244:	3708      	adds	r7, #8
 8108246:	46bd      	mov	sp, r7
 8108248:	bd80      	pop	{r7, pc}

0810824a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810824a:	b480      	push	{r7}
 810824c:	b083      	sub	sp, #12
 810824e:	af00      	add	r7, sp, #0
 8108250:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	699b      	ldr	r3, [r3, #24]
 8108258:	f003 0302 	and.w	r3, r3, #2
 810825c:	2b02      	cmp	r3, #2
 810825e:	d103      	bne.n	8108268 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8108260:	687b      	ldr	r3, [r7, #4]
 8108262:	681b      	ldr	r3, [r3, #0]
 8108264:	2200      	movs	r2, #0
 8108266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	681b      	ldr	r3, [r3, #0]
 810826c:	699b      	ldr	r3, [r3, #24]
 810826e:	f003 0301 	and.w	r3, r3, #1
 8108272:	2b01      	cmp	r3, #1
 8108274:	d007      	beq.n	8108286 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	681b      	ldr	r3, [r3, #0]
 810827a:	699a      	ldr	r2, [r3, #24]
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	681b      	ldr	r3, [r3, #0]
 8108280:	f042 0201 	orr.w	r2, r2, #1
 8108284:	619a      	str	r2, [r3, #24]
  }
}
 8108286:	bf00      	nop
 8108288:	370c      	adds	r7, #12
 810828a:	46bd      	mov	sp, r7
 810828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108290:	4770      	bx	lr

08108292 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108292:	b580      	push	{r7, lr}
 8108294:	b084      	sub	sp, #16
 8108296:	af00      	add	r7, sp, #0
 8108298:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 810829a:	687b      	ldr	r3, [r7, #4]
 810829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810829e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 81082a0:	68fb      	ldr	r3, [r7, #12]
 81082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082a4:	2b00      	cmp	r3, #0
 81082a6:	d003      	beq.n	81082b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 81082a8:	68fb      	ldr	r3, [r7, #12]
 81082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082ac:	2200      	movs	r2, #0
 81082ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 81082b0:	68fb      	ldr	r3, [r7, #12]
 81082b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81082b4:	2b00      	cmp	r3, #0
 81082b6:	d003      	beq.n	81082c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 81082b8:	68fb      	ldr	r3, [r7, #12]
 81082ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81082bc:	2200      	movs	r2, #0
 81082be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 81082c0:	68f8      	ldr	r0, [r7, #12]
 81082c2:	f7ff ff9b 	bl	81081fc <I2C_TreatErrorCallback>
}
 81082c6:	bf00      	nop
 81082c8:	3710      	adds	r7, #16
 81082ca:	46bd      	mov	sp, r7
 81082cc:	bd80      	pop	{r7, pc}

081082ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81082ce:	b580      	push	{r7, lr}
 81082d0:	b084      	sub	sp, #16
 81082d2:	af00      	add	r7, sp, #0
 81082d4:	60f8      	str	r0, [r7, #12]
 81082d6:	60b9      	str	r1, [r7, #8]
 81082d8:	603b      	str	r3, [r7, #0]
 81082da:	4613      	mov	r3, r2
 81082dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81082de:	e022      	b.n	8108326 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81082e0:	683b      	ldr	r3, [r7, #0]
 81082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81082e6:	d01e      	beq.n	8108326 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81082e8:	f7fb f9c2 	bl	8103670 <HAL_GetTick>
 81082ec:	4602      	mov	r2, r0
 81082ee:	69bb      	ldr	r3, [r7, #24]
 81082f0:	1ad3      	subs	r3, r2, r3
 81082f2:	683a      	ldr	r2, [r7, #0]
 81082f4:	429a      	cmp	r2, r3
 81082f6:	d302      	bcc.n	81082fe <I2C_WaitOnFlagUntilTimeout+0x30>
 81082f8:	683b      	ldr	r3, [r7, #0]
 81082fa:	2b00      	cmp	r3, #0
 81082fc:	d113      	bne.n	8108326 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81082fe:	68fb      	ldr	r3, [r7, #12]
 8108300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108302:	f043 0220 	orr.w	r2, r3, #32
 8108306:	68fb      	ldr	r3, [r7, #12]
 8108308:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810830a:	68fb      	ldr	r3, [r7, #12]
 810830c:	2220      	movs	r2, #32
 810830e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8108312:	68fb      	ldr	r3, [r7, #12]
 8108314:	2200      	movs	r2, #0
 8108316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810831a:	68fb      	ldr	r3, [r7, #12]
 810831c:	2200      	movs	r2, #0
 810831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8108322:	2301      	movs	r3, #1
 8108324:	e00f      	b.n	8108346 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8108326:	68fb      	ldr	r3, [r7, #12]
 8108328:	681b      	ldr	r3, [r3, #0]
 810832a:	699a      	ldr	r2, [r3, #24]
 810832c:	68bb      	ldr	r3, [r7, #8]
 810832e:	4013      	ands	r3, r2
 8108330:	68ba      	ldr	r2, [r7, #8]
 8108332:	429a      	cmp	r2, r3
 8108334:	bf0c      	ite	eq
 8108336:	2301      	moveq	r3, #1
 8108338:	2300      	movne	r3, #0
 810833a:	b2db      	uxtb	r3, r3
 810833c:	461a      	mov	r2, r3
 810833e:	79fb      	ldrb	r3, [r7, #7]
 8108340:	429a      	cmp	r2, r3
 8108342:	d0cd      	beq.n	81082e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8108344:	2300      	movs	r3, #0
}
 8108346:	4618      	mov	r0, r3
 8108348:	3710      	adds	r7, #16
 810834a:	46bd      	mov	sp, r7
 810834c:	bd80      	pop	{r7, pc}

0810834e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810834e:	b580      	push	{r7, lr}
 8108350:	b084      	sub	sp, #16
 8108352:	af00      	add	r7, sp, #0
 8108354:	60f8      	str	r0, [r7, #12]
 8108356:	60b9      	str	r1, [r7, #8]
 8108358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810835a:	e02c      	b.n	81083b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810835c:	687a      	ldr	r2, [r7, #4]
 810835e:	68b9      	ldr	r1, [r7, #8]
 8108360:	68f8      	ldr	r0, [r7, #12]
 8108362:	f000 f871 	bl	8108448 <I2C_IsAcknowledgeFailed>
 8108366:	4603      	mov	r3, r0
 8108368:	2b00      	cmp	r3, #0
 810836a:	d001      	beq.n	8108370 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810836c:	2301      	movs	r3, #1
 810836e:	e02a      	b.n	81083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108370:	68bb      	ldr	r3, [r7, #8]
 8108372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108376:	d01e      	beq.n	81083b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108378:	f7fb f97a 	bl	8103670 <HAL_GetTick>
 810837c:	4602      	mov	r2, r0
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	1ad3      	subs	r3, r2, r3
 8108382:	68ba      	ldr	r2, [r7, #8]
 8108384:	429a      	cmp	r2, r3
 8108386:	d302      	bcc.n	810838e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8108388:	68bb      	ldr	r3, [r7, #8]
 810838a:	2b00      	cmp	r3, #0
 810838c:	d113      	bne.n	81083b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810838e:	68fb      	ldr	r3, [r7, #12]
 8108390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108392:	f043 0220 	orr.w	r2, r3, #32
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	2220      	movs	r2, #32
 810839e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81083a2:	68fb      	ldr	r3, [r7, #12]
 81083a4:	2200      	movs	r2, #0
 81083a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81083aa:	68fb      	ldr	r3, [r7, #12]
 81083ac:	2200      	movs	r2, #0
 81083ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81083b2:	2301      	movs	r3, #1
 81083b4:	e007      	b.n	81083c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81083b6:	68fb      	ldr	r3, [r7, #12]
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	699b      	ldr	r3, [r3, #24]
 81083bc:	f003 0302 	and.w	r3, r3, #2
 81083c0:	2b02      	cmp	r3, #2
 81083c2:	d1cb      	bne.n	810835c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81083c4:	2300      	movs	r3, #0
}
 81083c6:	4618      	mov	r0, r3
 81083c8:	3710      	adds	r7, #16
 81083ca:	46bd      	mov	sp, r7
 81083cc:	bd80      	pop	{r7, pc}

081083ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81083ce:	b580      	push	{r7, lr}
 81083d0:	b084      	sub	sp, #16
 81083d2:	af00      	add	r7, sp, #0
 81083d4:	60f8      	str	r0, [r7, #12]
 81083d6:	60b9      	str	r1, [r7, #8]
 81083d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81083da:	e028      	b.n	810842e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81083dc:	687a      	ldr	r2, [r7, #4]
 81083de:	68b9      	ldr	r1, [r7, #8]
 81083e0:	68f8      	ldr	r0, [r7, #12]
 81083e2:	f000 f831 	bl	8108448 <I2C_IsAcknowledgeFailed>
 81083e6:	4603      	mov	r3, r0
 81083e8:	2b00      	cmp	r3, #0
 81083ea:	d001      	beq.n	81083f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81083ec:	2301      	movs	r3, #1
 81083ee:	e026      	b.n	810843e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81083f0:	f7fb f93e 	bl	8103670 <HAL_GetTick>
 81083f4:	4602      	mov	r2, r0
 81083f6:	687b      	ldr	r3, [r7, #4]
 81083f8:	1ad3      	subs	r3, r2, r3
 81083fa:	68ba      	ldr	r2, [r7, #8]
 81083fc:	429a      	cmp	r2, r3
 81083fe:	d302      	bcc.n	8108406 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8108400:	68bb      	ldr	r3, [r7, #8]
 8108402:	2b00      	cmp	r3, #0
 8108404:	d113      	bne.n	810842e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108406:	68fb      	ldr	r3, [r7, #12]
 8108408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810840a:	f043 0220 	orr.w	r2, r3, #32
 810840e:	68fb      	ldr	r3, [r7, #12]
 8108410:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8108412:	68fb      	ldr	r3, [r7, #12]
 8108414:	2220      	movs	r2, #32
 8108416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810841a:	68fb      	ldr	r3, [r7, #12]
 810841c:	2200      	movs	r2, #0
 810841e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108422:	68fb      	ldr	r3, [r7, #12]
 8108424:	2200      	movs	r2, #0
 8108426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 810842a:	2301      	movs	r3, #1
 810842c:	e007      	b.n	810843e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810842e:	68fb      	ldr	r3, [r7, #12]
 8108430:	681b      	ldr	r3, [r3, #0]
 8108432:	699b      	ldr	r3, [r3, #24]
 8108434:	f003 0320 	and.w	r3, r3, #32
 8108438:	2b20      	cmp	r3, #32
 810843a:	d1cf      	bne.n	81083dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810843c:	2300      	movs	r3, #0
}
 810843e:	4618      	mov	r0, r3
 8108440:	3710      	adds	r7, #16
 8108442:	46bd      	mov	sp, r7
 8108444:	bd80      	pop	{r7, pc}
	...

08108448 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8108448:	b580      	push	{r7, lr}
 810844a:	b084      	sub	sp, #16
 810844c:	af00      	add	r7, sp, #0
 810844e:	60f8      	str	r0, [r7, #12]
 8108450:	60b9      	str	r1, [r7, #8]
 8108452:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8108454:	68fb      	ldr	r3, [r7, #12]
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	699b      	ldr	r3, [r3, #24]
 810845a:	f003 0310 	and.w	r3, r3, #16
 810845e:	2b10      	cmp	r3, #16
 8108460:	d151      	bne.n	8108506 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108462:	e022      	b.n	81084aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8108464:	68bb      	ldr	r3, [r7, #8]
 8108466:	f1b3 3fff 	cmp.w	r3, #4294967295
 810846a:	d01e      	beq.n	81084aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810846c:	f7fb f900 	bl	8103670 <HAL_GetTick>
 8108470:	4602      	mov	r2, r0
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	1ad3      	subs	r3, r2, r3
 8108476:	68ba      	ldr	r2, [r7, #8]
 8108478:	429a      	cmp	r2, r3
 810847a:	d302      	bcc.n	8108482 <I2C_IsAcknowledgeFailed+0x3a>
 810847c:	68bb      	ldr	r3, [r7, #8]
 810847e:	2b00      	cmp	r3, #0
 8108480:	d113      	bne.n	81084aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108482:	68fb      	ldr	r3, [r7, #12]
 8108484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108486:	f043 0220 	orr.w	r2, r3, #32
 810848a:	68fb      	ldr	r3, [r7, #12]
 810848c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810848e:	68fb      	ldr	r3, [r7, #12]
 8108490:	2220      	movs	r2, #32
 8108492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8108496:	68fb      	ldr	r3, [r7, #12]
 8108498:	2200      	movs	r2, #0
 810849a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810849e:	68fb      	ldr	r3, [r7, #12]
 81084a0:	2200      	movs	r2, #0
 81084a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 81084a6:	2301      	movs	r3, #1
 81084a8:	e02e      	b.n	8108508 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81084aa:	68fb      	ldr	r3, [r7, #12]
 81084ac:	681b      	ldr	r3, [r3, #0]
 81084ae:	699b      	ldr	r3, [r3, #24]
 81084b0:	f003 0320 	and.w	r3, r3, #32
 81084b4:	2b20      	cmp	r3, #32
 81084b6:	d1d5      	bne.n	8108464 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81084b8:	68fb      	ldr	r3, [r7, #12]
 81084ba:	681b      	ldr	r3, [r3, #0]
 81084bc:	2210      	movs	r2, #16
 81084be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81084c0:	68fb      	ldr	r3, [r7, #12]
 81084c2:	681b      	ldr	r3, [r3, #0]
 81084c4:	2220      	movs	r2, #32
 81084c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81084c8:	68f8      	ldr	r0, [r7, #12]
 81084ca:	f7ff febe 	bl	810824a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81084ce:	68fb      	ldr	r3, [r7, #12]
 81084d0:	681b      	ldr	r3, [r3, #0]
 81084d2:	6859      	ldr	r1, [r3, #4]
 81084d4:	68fb      	ldr	r3, [r7, #12]
 81084d6:	681a      	ldr	r2, [r3, #0]
 81084d8:	4b0d      	ldr	r3, [pc, #52]	; (8108510 <I2C_IsAcknowledgeFailed+0xc8>)
 81084da:	400b      	ands	r3, r1
 81084dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81084de:	68fb      	ldr	r3, [r7, #12]
 81084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81084e2:	f043 0204 	orr.w	r2, r3, #4
 81084e6:	68fb      	ldr	r3, [r7, #12]
 81084e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	2220      	movs	r2, #32
 81084ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81084f2:	68fb      	ldr	r3, [r7, #12]
 81084f4:	2200      	movs	r2, #0
 81084f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81084fa:	68fb      	ldr	r3, [r7, #12]
 81084fc:	2200      	movs	r2, #0
 81084fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8108502:	2301      	movs	r3, #1
 8108504:	e000      	b.n	8108508 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8108506:	2300      	movs	r3, #0
}
 8108508:	4618      	mov	r0, r3
 810850a:	3710      	adds	r7, #16
 810850c:	46bd      	mov	sp, r7
 810850e:	bd80      	pop	{r7, pc}
 8108510:	fe00e800 	.word	0xfe00e800

08108514 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8108514:	b480      	push	{r7}
 8108516:	b085      	sub	sp, #20
 8108518:	af00      	add	r7, sp, #0
 810851a:	60f8      	str	r0, [r7, #12]
 810851c:	607b      	str	r3, [r7, #4]
 810851e:	460b      	mov	r3, r1
 8108520:	817b      	strh	r3, [r7, #10]
 8108522:	4613      	mov	r3, r2
 8108524:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8108526:	68fb      	ldr	r3, [r7, #12]
 8108528:	681b      	ldr	r3, [r3, #0]
 810852a:	685a      	ldr	r2, [r3, #4]
 810852c:	69bb      	ldr	r3, [r7, #24]
 810852e:	0d5b      	lsrs	r3, r3, #21
 8108530:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8108534:	4b0d      	ldr	r3, [pc, #52]	; (810856c <I2C_TransferConfig+0x58>)
 8108536:	430b      	orrs	r3, r1
 8108538:	43db      	mvns	r3, r3
 810853a:	ea02 0103 	and.w	r1, r2, r3
 810853e:	897b      	ldrh	r3, [r7, #10]
 8108540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8108544:	7a7b      	ldrb	r3, [r7, #9]
 8108546:	041b      	lsls	r3, r3, #16
 8108548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810854c:	431a      	orrs	r2, r3
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	431a      	orrs	r2, r3
 8108552:	69bb      	ldr	r3, [r7, #24]
 8108554:	431a      	orrs	r2, r3
 8108556:	68fb      	ldr	r3, [r7, #12]
 8108558:	681b      	ldr	r3, [r3, #0]
 810855a:	430a      	orrs	r2, r1
 810855c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 810855e:	bf00      	nop
 8108560:	3714      	adds	r7, #20
 8108562:	46bd      	mov	sp, r7
 8108564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108568:	4770      	bx	lr
 810856a:	bf00      	nop
 810856c:	03ff63ff 	.word	0x03ff63ff

08108570 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108570:	b480      	push	{r7}
 8108572:	b085      	sub	sp, #20
 8108574:	af00      	add	r7, sp, #0
 8108576:	6078      	str	r0, [r7, #4]
 8108578:	460b      	mov	r3, r1
 810857a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 810857c:	2300      	movs	r3, #0
 810857e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108580:	887b      	ldrh	r3, [r7, #2]
 8108582:	f003 0301 	and.w	r3, r3, #1
 8108586:	2b00      	cmp	r3, #0
 8108588:	d00f      	beq.n	81085aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 810858a:	68fb      	ldr	r3, [r7, #12]
 810858c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108590:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108598:	b2db      	uxtb	r3, r3
 810859a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810859e:	2b28      	cmp	r3, #40	; 0x28
 81085a0:	d003      	beq.n	81085aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81085a2:	68fb      	ldr	r3, [r7, #12]
 81085a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 81085a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 81085aa:	887b      	ldrh	r3, [r7, #2]
 81085ac:	f003 0302 	and.w	r3, r3, #2
 81085b0:	2b00      	cmp	r3, #0
 81085b2:	d00f      	beq.n	81085d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 81085b4:	68fb      	ldr	r3, [r7, #12]
 81085b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 81085ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81085c2:	b2db      	uxtb	r3, r3
 81085c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81085c8:	2b28      	cmp	r3, #40	; 0x28
 81085ca:	d003      	beq.n	81085d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81085cc:	68fb      	ldr	r3, [r7, #12]
 81085ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 81085d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 81085d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 81085d8:	2b00      	cmp	r3, #0
 81085da:	da03      	bge.n	81085e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 81085dc:	68fb      	ldr	r3, [r7, #12]
 81085de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 81085e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 81085e4:	887b      	ldrh	r3, [r7, #2]
 81085e6:	2b10      	cmp	r3, #16
 81085e8:	d103      	bne.n	81085f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 81085ea:	68fb      	ldr	r3, [r7, #12]
 81085ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 81085f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 81085f2:	887b      	ldrh	r3, [r7, #2]
 81085f4:	2b20      	cmp	r3, #32
 81085f6:	d103      	bne.n	8108600 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 81085f8:	68fb      	ldr	r3, [r7, #12]
 81085fa:	f043 0320 	orr.w	r3, r3, #32
 81085fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108600:	887b      	ldrh	r3, [r7, #2]
 8108602:	2b40      	cmp	r3, #64	; 0x40
 8108604:	d103      	bne.n	810860e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8108606:	68fb      	ldr	r3, [r7, #12]
 8108608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810860c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810860e:	687b      	ldr	r3, [r7, #4]
 8108610:	681b      	ldr	r3, [r3, #0]
 8108612:	6819      	ldr	r1, [r3, #0]
 8108614:	68fb      	ldr	r3, [r7, #12]
 8108616:	43da      	mvns	r2, r3
 8108618:	687b      	ldr	r3, [r7, #4]
 810861a:	681b      	ldr	r3, [r3, #0]
 810861c:	400a      	ands	r2, r1
 810861e:	601a      	str	r2, [r3, #0]
}
 8108620:	bf00      	nop
 8108622:	3714      	adds	r7, #20
 8108624:	46bd      	mov	sp, r7
 8108626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810862a:	4770      	bx	lr

0810862c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810862c:	b480      	push	{r7}
 810862e:	b083      	sub	sp, #12
 8108630:	af00      	add	r7, sp, #0
 8108632:	6078      	str	r0, [r7, #4]
 8108634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810863c:	b2db      	uxtb	r3, r3
 810863e:	2b20      	cmp	r3, #32
 8108640:	d138      	bne.n	81086b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108642:	687b      	ldr	r3, [r7, #4]
 8108644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108648:	2b01      	cmp	r3, #1
 810864a:	d101      	bne.n	8108650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810864c:	2302      	movs	r3, #2
 810864e:	e032      	b.n	81086b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	2201      	movs	r2, #1
 8108654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	2224      	movs	r2, #36	; 0x24
 810865c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	681b      	ldr	r3, [r3, #0]
 8108664:	681a      	ldr	r2, [r3, #0]
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	681b      	ldr	r3, [r3, #0]
 810866a:	f022 0201 	bic.w	r2, r2, #1
 810866e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	681b      	ldr	r3, [r3, #0]
 8108674:	681a      	ldr	r2, [r3, #0]
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	681b      	ldr	r3, [r3, #0]
 810867a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810867e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	6819      	ldr	r1, [r3, #0]
 8108686:	687b      	ldr	r3, [r7, #4]
 8108688:	681b      	ldr	r3, [r3, #0]
 810868a:	683a      	ldr	r2, [r7, #0]
 810868c:	430a      	orrs	r2, r1
 810868e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	681b      	ldr	r3, [r3, #0]
 8108694:	681a      	ldr	r2, [r3, #0]
 8108696:	687b      	ldr	r3, [r7, #4]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	f042 0201 	orr.w	r2, r2, #1
 810869e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	2220      	movs	r2, #32
 81086a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81086a8:	687b      	ldr	r3, [r7, #4]
 81086aa:	2200      	movs	r2, #0
 81086ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81086b0:	2300      	movs	r3, #0
 81086b2:	e000      	b.n	81086b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81086b4:	2302      	movs	r3, #2
  }
}
 81086b6:	4618      	mov	r0, r3
 81086b8:	370c      	adds	r7, #12
 81086ba:	46bd      	mov	sp, r7
 81086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086c0:	4770      	bx	lr

081086c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81086c2:	b480      	push	{r7}
 81086c4:	b085      	sub	sp, #20
 81086c6:	af00      	add	r7, sp, #0
 81086c8:	6078      	str	r0, [r7, #4]
 81086ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81086cc:	687b      	ldr	r3, [r7, #4]
 81086ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81086d2:	b2db      	uxtb	r3, r3
 81086d4:	2b20      	cmp	r3, #32
 81086d6:	d139      	bne.n	810874c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81086d8:	687b      	ldr	r3, [r7, #4]
 81086da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81086de:	2b01      	cmp	r3, #1
 81086e0:	d101      	bne.n	81086e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81086e2:	2302      	movs	r3, #2
 81086e4:	e033      	b.n	810874e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	2201      	movs	r2, #1
 81086ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81086ee:	687b      	ldr	r3, [r7, #4]
 81086f0:	2224      	movs	r2, #36	; 0x24
 81086f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81086f6:	687b      	ldr	r3, [r7, #4]
 81086f8:	681b      	ldr	r3, [r3, #0]
 81086fa:	681a      	ldr	r2, [r3, #0]
 81086fc:	687b      	ldr	r3, [r7, #4]
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	f022 0201 	bic.w	r2, r2, #1
 8108704:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8108706:	687b      	ldr	r3, [r7, #4]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	681b      	ldr	r3, [r3, #0]
 810870c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810870e:	68fb      	ldr	r3, [r7, #12]
 8108710:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8108714:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8108716:	683b      	ldr	r3, [r7, #0]
 8108718:	021b      	lsls	r3, r3, #8
 810871a:	68fa      	ldr	r2, [r7, #12]
 810871c:	4313      	orrs	r3, r2
 810871e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	681b      	ldr	r3, [r3, #0]
 8108724:	68fa      	ldr	r2, [r7, #12]
 8108726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108728:	687b      	ldr	r3, [r7, #4]
 810872a:	681b      	ldr	r3, [r3, #0]
 810872c:	681a      	ldr	r2, [r3, #0]
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	f042 0201 	orr.w	r2, r2, #1
 8108736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	2220      	movs	r2, #32
 810873c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	2200      	movs	r2, #0
 8108744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108748:	2300      	movs	r3, #0
 810874a:	e000      	b.n	810874e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810874c:	2302      	movs	r3, #2
  }
}
 810874e:	4618      	mov	r0, r3
 8108750:	3714      	adds	r7, #20
 8108752:	46bd      	mov	sp, r7
 8108754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108758:	4770      	bx	lr
	...

0810875c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810875c:	b580      	push	{r7, lr}
 810875e:	b084      	sub	sp, #16
 8108760:	af00      	add	r7, sp, #0
 8108762:	60f8      	str	r0, [r7, #12]
 8108764:	460b      	mov	r3, r1
 8108766:	607a      	str	r2, [r7, #4]
 8108768:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810876a:	4b37      	ldr	r3, [pc, #220]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 810876c:	681b      	ldr	r3, [r3, #0]
 810876e:	f023 0201 	bic.w	r2, r3, #1
 8108772:	4935      	ldr	r1, [pc, #212]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108774:	68fb      	ldr	r3, [r7, #12]
 8108776:	4313      	orrs	r3, r2
 8108778:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	2b00      	cmp	r3, #0
 810877e:	d123      	bne.n	81087c8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108780:	f7fb fba8 	bl	8103ed4 <HAL_GetCurrentCPUID>
 8108784:	4603      	mov	r3, r0
 8108786:	2b03      	cmp	r3, #3
 8108788:	d158      	bne.n	810883c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810878a:	4b2f      	ldr	r3, [pc, #188]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 810878c:	691b      	ldr	r3, [r3, #16]
 810878e:	4a2e      	ldr	r2, [pc, #184]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108790:	f023 0301 	bic.w	r3, r3, #1
 8108794:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108796:	4b2d      	ldr	r3, [pc, #180]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108798:	691b      	ldr	r3, [r3, #16]
 810879a:	4a2c      	ldr	r2, [pc, #176]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810879c:	f043 0304 	orr.w	r3, r3, #4
 81087a0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81087a2:	f3bf 8f4f 	dsb	sy
}
 81087a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81087a8:	f3bf 8f6f 	isb	sy
}
 81087ac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81087ae:	7afb      	ldrb	r3, [r7, #11]
 81087b0:	2b01      	cmp	r3, #1
 81087b2:	d101      	bne.n	81087b8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81087b4:	bf30      	wfi
 81087b6:	e000      	b.n	81087ba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81087b8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81087ba:	4b24      	ldr	r3, [pc, #144]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81087bc:	691b      	ldr	r3, [r3, #16]
 81087be:	4a23      	ldr	r2, [pc, #140]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81087c0:	f023 0304 	bic.w	r3, r3, #4
 81087c4:	6113      	str	r3, [r2, #16]
 81087c6:	e03c      	b.n	8108842 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81087c8:	687b      	ldr	r3, [r7, #4]
 81087ca:	2b01      	cmp	r3, #1
 81087cc:	d123      	bne.n	8108816 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81087ce:	f7fb fb81 	bl	8103ed4 <HAL_GetCurrentCPUID>
 81087d2:	4603      	mov	r3, r0
 81087d4:	2b01      	cmp	r3, #1
 81087d6:	d133      	bne.n	8108840 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81087d8:	4b1b      	ldr	r3, [pc, #108]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 81087da:	695b      	ldr	r3, [r3, #20]
 81087dc:	4a1a      	ldr	r2, [pc, #104]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 81087de:	f023 0302 	bic.w	r3, r3, #2
 81087e2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81087e4:	4b19      	ldr	r3, [pc, #100]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81087e6:	691b      	ldr	r3, [r3, #16]
 81087e8:	4a18      	ldr	r2, [pc, #96]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81087ea:	f043 0304 	orr.w	r3, r3, #4
 81087ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81087f0:	f3bf 8f4f 	dsb	sy
}
 81087f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81087f6:	f3bf 8f6f 	isb	sy
}
 81087fa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81087fc:	7afb      	ldrb	r3, [r7, #11]
 81087fe:	2b01      	cmp	r3, #1
 8108800:	d101      	bne.n	8108806 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108802:	bf30      	wfi
 8108804:	e000      	b.n	8108808 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108806:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108808:	4b10      	ldr	r3, [pc, #64]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810880a:	691b      	ldr	r3, [r3, #16]
 810880c:	4a0f      	ldr	r2, [pc, #60]	; (810884c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810880e:	f023 0304 	bic.w	r3, r3, #4
 8108812:	6113      	str	r3, [r2, #16]
 8108814:	e015      	b.n	8108842 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108816:	f7fb fb5d 	bl	8103ed4 <HAL_GetCurrentCPUID>
 810881a:	4603      	mov	r3, r0
 810881c:	2b03      	cmp	r3, #3
 810881e:	d106      	bne.n	810882e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8108820:	4b09      	ldr	r3, [pc, #36]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108822:	691b      	ldr	r3, [r3, #16]
 8108824:	4a08      	ldr	r2, [pc, #32]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108826:	f023 0304 	bic.w	r3, r3, #4
 810882a:	6113      	str	r3, [r2, #16]
 810882c:	e009      	b.n	8108842 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810882e:	4b06      	ldr	r3, [pc, #24]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108830:	695b      	ldr	r3, [r3, #20]
 8108832:	4a05      	ldr	r2, [pc, #20]	; (8108848 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108834:	f023 0304 	bic.w	r3, r3, #4
 8108838:	6153      	str	r3, [r2, #20]
 810883a:	e002      	b.n	8108842 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810883c:	bf00      	nop
 810883e:	e000      	b.n	8108842 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108840:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8108842:	3710      	adds	r7, #16
 8108844:	46bd      	mov	sp, r7
 8108846:	bd80      	pop	{r7, pc}
 8108848:	58024800 	.word	0x58024800
 810884c:	e000ed00 	.word	0xe000ed00

08108850 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108850:	b580      	push	{r7, lr}
 8108852:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108854:	f7fb fb3e 	bl	8103ed4 <HAL_GetCurrentCPUID>
 8108858:	4603      	mov	r3, r0
 810885a:	2b03      	cmp	r3, #3
 810885c:	d101      	bne.n	8108862 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810885e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108860:	e001      	b.n	8108866 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8108862:	bf40      	sev
    __WFE ();
 8108864:	bf20      	wfe
}
 8108866:	bf00      	nop
 8108868:	bd80      	pop	{r7, pc}
	...

0810886c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810886c:	b480      	push	{r7}
 810886e:	b089      	sub	sp, #36	; 0x24
 8108870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108872:	4bb3      	ldr	r3, [pc, #716]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108874:	691b      	ldr	r3, [r3, #16]
 8108876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810887a:	2b18      	cmp	r3, #24
 810887c:	f200 8155 	bhi.w	8108b2a <HAL_RCC_GetSysClockFreq+0x2be>
 8108880:	a201      	add	r2, pc, #4	; (adr r2, 8108888 <HAL_RCC_GetSysClockFreq+0x1c>)
 8108882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108886:	bf00      	nop
 8108888:	081088ed 	.word	0x081088ed
 810888c:	08108b2b 	.word	0x08108b2b
 8108890:	08108b2b 	.word	0x08108b2b
 8108894:	08108b2b 	.word	0x08108b2b
 8108898:	08108b2b 	.word	0x08108b2b
 810889c:	08108b2b 	.word	0x08108b2b
 81088a0:	08108b2b 	.word	0x08108b2b
 81088a4:	08108b2b 	.word	0x08108b2b
 81088a8:	08108913 	.word	0x08108913
 81088ac:	08108b2b 	.word	0x08108b2b
 81088b0:	08108b2b 	.word	0x08108b2b
 81088b4:	08108b2b 	.word	0x08108b2b
 81088b8:	08108b2b 	.word	0x08108b2b
 81088bc:	08108b2b 	.word	0x08108b2b
 81088c0:	08108b2b 	.word	0x08108b2b
 81088c4:	08108b2b 	.word	0x08108b2b
 81088c8:	08108919 	.word	0x08108919
 81088cc:	08108b2b 	.word	0x08108b2b
 81088d0:	08108b2b 	.word	0x08108b2b
 81088d4:	08108b2b 	.word	0x08108b2b
 81088d8:	08108b2b 	.word	0x08108b2b
 81088dc:	08108b2b 	.word	0x08108b2b
 81088e0:	08108b2b 	.word	0x08108b2b
 81088e4:	08108b2b 	.word	0x08108b2b
 81088e8:	0810891f 	.word	0x0810891f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81088ec:	4b94      	ldr	r3, [pc, #592]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81088ee:	681b      	ldr	r3, [r3, #0]
 81088f0:	f003 0320 	and.w	r3, r3, #32
 81088f4:	2b00      	cmp	r3, #0
 81088f6:	d009      	beq.n	810890c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81088f8:	4b91      	ldr	r3, [pc, #580]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81088fa:	681b      	ldr	r3, [r3, #0]
 81088fc:	08db      	lsrs	r3, r3, #3
 81088fe:	f003 0303 	and.w	r3, r3, #3
 8108902:	4a90      	ldr	r2, [pc, #576]	; (8108b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108904:	fa22 f303 	lsr.w	r3, r2, r3
 8108908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810890a:	e111      	b.n	8108b30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810890c:	4b8d      	ldr	r3, [pc, #564]	; (8108b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810890e:	61bb      	str	r3, [r7, #24]
    break;
 8108910:	e10e      	b.n	8108b30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8108912:	4b8d      	ldr	r3, [pc, #564]	; (8108b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108914:	61bb      	str	r3, [r7, #24]
    break;
 8108916:	e10b      	b.n	8108b30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108918:	4b8c      	ldr	r3, [pc, #560]	; (8108b4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810891a:	61bb      	str	r3, [r7, #24]
    break;
 810891c:	e108      	b.n	8108b30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810891e:	4b88      	ldr	r3, [pc, #544]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108922:	f003 0303 	and.w	r3, r3, #3
 8108926:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8108928:	4b85      	ldr	r3, [pc, #532]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810892c:	091b      	lsrs	r3, r3, #4
 810892e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108932:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8108934:	4b82      	ldr	r3, [pc, #520]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108938:	f003 0301 	and.w	r3, r3, #1
 810893c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810893e:	4b80      	ldr	r3, [pc, #512]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108942:	08db      	lsrs	r3, r3, #3
 8108944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108948:	68fa      	ldr	r2, [r7, #12]
 810894a:	fb02 f303 	mul.w	r3, r2, r3
 810894e:	ee07 3a90 	vmov	s15, r3
 8108952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108956:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810895a:	693b      	ldr	r3, [r7, #16]
 810895c:	2b00      	cmp	r3, #0
 810895e:	f000 80e1 	beq.w	8108b24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8108962:	697b      	ldr	r3, [r7, #20]
 8108964:	2b02      	cmp	r3, #2
 8108966:	f000 8083 	beq.w	8108a70 <HAL_RCC_GetSysClockFreq+0x204>
 810896a:	697b      	ldr	r3, [r7, #20]
 810896c:	2b02      	cmp	r3, #2
 810896e:	f200 80a1 	bhi.w	8108ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8108972:	697b      	ldr	r3, [r7, #20]
 8108974:	2b00      	cmp	r3, #0
 8108976:	d003      	beq.n	8108980 <HAL_RCC_GetSysClockFreq+0x114>
 8108978:	697b      	ldr	r3, [r7, #20]
 810897a:	2b01      	cmp	r3, #1
 810897c:	d056      	beq.n	8108a2c <HAL_RCC_GetSysClockFreq+0x1c0>
 810897e:	e099      	b.n	8108ab4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108980:	4b6f      	ldr	r3, [pc, #444]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108982:	681b      	ldr	r3, [r3, #0]
 8108984:	f003 0320 	and.w	r3, r3, #32
 8108988:	2b00      	cmp	r3, #0
 810898a:	d02d      	beq.n	81089e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810898c:	4b6c      	ldr	r3, [pc, #432]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810898e:	681b      	ldr	r3, [r3, #0]
 8108990:	08db      	lsrs	r3, r3, #3
 8108992:	f003 0303 	and.w	r3, r3, #3
 8108996:	4a6b      	ldr	r2, [pc, #428]	; (8108b44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108998:	fa22 f303 	lsr.w	r3, r2, r3
 810899c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	ee07 3a90 	vmov	s15, r3
 81089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089a8:	693b      	ldr	r3, [r7, #16]
 81089aa:	ee07 3a90 	vmov	s15, r3
 81089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089b6:	4b62      	ldr	r3, [pc, #392]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81089be:	ee07 3a90 	vmov	s15, r3
 81089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81089ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8108b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 81089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81089d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81089e6:	e087      	b.n	8108af8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81089e8:	693b      	ldr	r3, [r7, #16]
 81089ea:	ee07 3a90 	vmov	s15, r3
 81089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8108b54 <HAL_RCC_GetSysClockFreq+0x2e8>
 81089f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089fa:	4b51      	ldr	r3, [pc, #324]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81089fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a02:	ee07 3a90 	vmov	s15, r3
 8108a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8108a0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8108b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a2a:	e065      	b.n	8108af8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108a2c:	693b      	ldr	r3, [r7, #16]
 8108a2e:	ee07 3a90 	vmov	s15, r3
 8108a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8108b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a3e:	4b40      	ldr	r3, [pc, #256]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a46:	ee07 3a90 	vmov	s15, r3
 8108a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108a52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8108b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a6e:	e043      	b.n	8108af8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108a70:	693b      	ldr	r3, [r7, #16]
 8108a72:	ee07 3a90 	vmov	s15, r3
 8108a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8108b5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8108a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a82:	4b2f      	ldr	r3, [pc, #188]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a8a:	ee07 3a90 	vmov	s15, r3
 8108a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8108a96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8108b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108ab2:	e021      	b.n	8108af8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108ab4:	693b      	ldr	r3, [r7, #16]
 8108ab6:	ee07 3a90 	vmov	s15, r3
 8108aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108abe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8108b58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8108ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ac6:	4b1e      	ldr	r3, [pc, #120]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108ace:	ee07 3a90 	vmov	s15, r3
 8108ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8108ada:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8108b50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8108ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108af6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108af8:	4b11      	ldr	r3, [pc, #68]	; (8108b40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108afc:	0a5b      	lsrs	r3, r3, #9
 8108afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108b02:	3301      	adds	r3, #1
 8108b04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8108b06:	683b      	ldr	r3, [r7, #0]
 8108b08:	ee07 3a90 	vmov	s15, r3
 8108b0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8108b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8108b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108b1c:	ee17 3a90 	vmov	r3, s15
 8108b20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8108b22:	e005      	b.n	8108b30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8108b24:	2300      	movs	r3, #0
 8108b26:	61bb      	str	r3, [r7, #24]
    break;
 8108b28:	e002      	b.n	8108b30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8108b2a:	4b07      	ldr	r3, [pc, #28]	; (8108b48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108b2c:	61bb      	str	r3, [r7, #24]
    break;
 8108b2e:	bf00      	nop
  }

  return sysclockfreq;
 8108b30:	69bb      	ldr	r3, [r7, #24]
}
 8108b32:	4618      	mov	r0, r3
 8108b34:	3724      	adds	r7, #36	; 0x24
 8108b36:	46bd      	mov	sp, r7
 8108b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b3c:	4770      	bx	lr
 8108b3e:	bf00      	nop
 8108b40:	58024400 	.word	0x58024400
 8108b44:	03d09000 	.word	0x03d09000
 8108b48:	003d0900 	.word	0x003d0900
 8108b4c:	00f42400 	.word	0x00f42400
 8108b50:	46000000 	.word	0x46000000
 8108b54:	4c742400 	.word	0x4c742400
 8108b58:	4a742400 	.word	0x4a742400
 8108b5c:	4b742400 	.word	0x4b742400

08108b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8108b60:	b580      	push	{r7, lr}
 8108b62:	b082      	sub	sp, #8
 8108b64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8108b66:	f7ff fe81 	bl	810886c <HAL_RCC_GetSysClockFreq>
 8108b6a:	4602      	mov	r2, r0
 8108b6c:	4b11      	ldr	r3, [pc, #68]	; (8108bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8108b6e:	699b      	ldr	r3, [r3, #24]
 8108b70:	0a1b      	lsrs	r3, r3, #8
 8108b72:	f003 030f 	and.w	r3, r3, #15
 8108b76:	4910      	ldr	r1, [pc, #64]	; (8108bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8108b78:	5ccb      	ldrb	r3, [r1, r3]
 8108b7a:	f003 031f 	and.w	r3, r3, #31
 8108b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8108b82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108b84:	4b0b      	ldr	r3, [pc, #44]	; (8108bb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8108b86:	699b      	ldr	r3, [r3, #24]
 8108b88:	f003 030f 	and.w	r3, r3, #15
 8108b8c:	4a0a      	ldr	r2, [pc, #40]	; (8108bb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8108b8e:	5cd3      	ldrb	r3, [r2, r3]
 8108b90:	f003 031f 	and.w	r3, r3, #31
 8108b94:	687a      	ldr	r2, [r7, #4]
 8108b96:	fa22 f303 	lsr.w	r3, r2, r3
 8108b9a:	4a08      	ldr	r2, [pc, #32]	; (8108bbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8108b9c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8108b9e:	4b07      	ldr	r3, [pc, #28]	; (8108bbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8108ba0:	681b      	ldr	r3, [r3, #0]
 8108ba2:	4a07      	ldr	r2, [pc, #28]	; (8108bc0 <HAL_RCC_GetHCLKFreq+0x60>)
 8108ba4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8108ba6:	4b05      	ldr	r3, [pc, #20]	; (8108bbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8108ba8:	681b      	ldr	r3, [r3, #0]
}
 8108baa:	4618      	mov	r0, r3
 8108bac:	3708      	adds	r7, #8
 8108bae:	46bd      	mov	sp, r7
 8108bb0:	bd80      	pop	{r7, pc}
 8108bb2:	bf00      	nop
 8108bb4:	58024400 	.word	0x58024400
 8108bb8:	0810d8e4 	.word	0x0810d8e4
 8108bbc:	10000004 	.word	0x10000004
 8108bc0:	10000000 	.word	0x10000000

08108bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8108bc4:	b580      	push	{r7, lr}
 8108bc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108bc8:	f7ff ffca 	bl	8108b60 <HAL_RCC_GetHCLKFreq>
 8108bcc:	4602      	mov	r2, r0
 8108bce:	4b06      	ldr	r3, [pc, #24]	; (8108be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8108bd0:	69db      	ldr	r3, [r3, #28]
 8108bd2:	091b      	lsrs	r3, r3, #4
 8108bd4:	f003 0307 	and.w	r3, r3, #7
 8108bd8:	4904      	ldr	r1, [pc, #16]	; (8108bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8108bda:	5ccb      	ldrb	r3, [r1, r3]
 8108bdc:	f003 031f 	and.w	r3, r3, #31
 8108be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8108be4:	4618      	mov	r0, r3
 8108be6:	bd80      	pop	{r7, pc}
 8108be8:	58024400 	.word	0x58024400
 8108bec:	0810d8e4 	.word	0x0810d8e4

08108bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8108bf0:	b580      	push	{r7, lr}
 8108bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8108bf4:	f7ff ffb4 	bl	8108b60 <HAL_RCC_GetHCLKFreq>
 8108bf8:	4602      	mov	r2, r0
 8108bfa:	4b06      	ldr	r3, [pc, #24]	; (8108c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8108bfc:	69db      	ldr	r3, [r3, #28]
 8108bfe:	0a1b      	lsrs	r3, r3, #8
 8108c00:	f003 0307 	and.w	r3, r3, #7
 8108c04:	4904      	ldr	r1, [pc, #16]	; (8108c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8108c06:	5ccb      	ldrb	r3, [r1, r3]
 8108c08:	f003 031f 	and.w	r3, r3, #31
 8108c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8108c10:	4618      	mov	r0, r3
 8108c12:	bd80      	pop	{r7, pc}
 8108c14:	58024400 	.word	0x58024400
 8108c18:	0810d8e4 	.word	0x0810d8e4

08108c1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8108c1c:	b580      	push	{r7, lr}
 8108c1e:	b086      	sub	sp, #24
 8108c20:	af00      	add	r7, sp, #0
 8108c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8108c24:	2300      	movs	r3, #0
 8108c26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8108c28:	2300      	movs	r3, #0
 8108c2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	681b      	ldr	r3, [r3, #0]
 8108c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108c34:	2b00      	cmp	r3, #0
 8108c36:	d03f      	beq.n	8108cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108c40:	d02a      	beq.n	8108c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8108c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8108c46:	d824      	bhi.n	8108c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108c4c:	d018      	beq.n	8108c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8108c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108c52:	d81e      	bhi.n	8108c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8108c54:	2b00      	cmp	r3, #0
 8108c56:	d003      	beq.n	8108c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8108c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108c5c:	d007      	beq.n	8108c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8108c5e:	e018      	b.n	8108c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108c60:	4bab      	ldr	r3, [pc, #684]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c64:	4aaa      	ldr	r2, [pc, #680]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108c6c:	e015      	b.n	8108c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	3304      	adds	r3, #4
 8108c72:	2102      	movs	r1, #2
 8108c74:	4618      	mov	r0, r3
 8108c76:	f001 f9cf 	bl	810a018 <RCCEx_PLL2_Config>
 8108c7a:	4603      	mov	r3, r0
 8108c7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108c7e:	e00c      	b.n	8108c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	3324      	adds	r3, #36	; 0x24
 8108c84:	2102      	movs	r1, #2
 8108c86:	4618      	mov	r0, r3
 8108c88:	f001 fa78 	bl	810a17c <RCCEx_PLL3_Config>
 8108c8c:	4603      	mov	r3, r0
 8108c8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108c90:	e003      	b.n	8108c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108c92:	2301      	movs	r3, #1
 8108c94:	75fb      	strb	r3, [r7, #23]
      break;
 8108c96:	e000      	b.n	8108c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8108c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108c9a:	7dfb      	ldrb	r3, [r7, #23]
 8108c9c:	2b00      	cmp	r3, #0
 8108c9e:	d109      	bne.n	8108cb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8108ca0:	4b9b      	ldr	r3, [pc, #620]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108cac:	4998      	ldr	r1, [pc, #608]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108cae:	4313      	orrs	r3, r2
 8108cb0:	650b      	str	r3, [r1, #80]	; 0x50
 8108cb2:	e001      	b.n	8108cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108cb4:	7dfb      	ldrb	r3, [r7, #23]
 8108cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	681b      	ldr	r3, [r3, #0]
 8108cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108cc0:	2b00      	cmp	r3, #0
 8108cc2:	d03d      	beq.n	8108d40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108cc8:	2b04      	cmp	r3, #4
 8108cca:	d826      	bhi.n	8108d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108ccc:	a201      	add	r2, pc, #4	; (adr r2, 8108cd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8108cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108cd2:	bf00      	nop
 8108cd4:	08108ce9 	.word	0x08108ce9
 8108cd8:	08108cf7 	.word	0x08108cf7
 8108cdc:	08108d09 	.word	0x08108d09
 8108ce0:	08108d21 	.word	0x08108d21
 8108ce4:	08108d21 	.word	0x08108d21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108ce8:	4b89      	ldr	r3, [pc, #548]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108cec:	4a88      	ldr	r2, [pc, #544]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108cf4:	e015      	b.n	8108d22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	3304      	adds	r3, #4
 8108cfa:	2100      	movs	r1, #0
 8108cfc:	4618      	mov	r0, r3
 8108cfe:	f001 f98b 	bl	810a018 <RCCEx_PLL2_Config>
 8108d02:	4603      	mov	r3, r0
 8108d04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108d06:	e00c      	b.n	8108d22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	3324      	adds	r3, #36	; 0x24
 8108d0c:	2100      	movs	r1, #0
 8108d0e:	4618      	mov	r0, r3
 8108d10:	f001 fa34 	bl	810a17c <RCCEx_PLL3_Config>
 8108d14:	4603      	mov	r3, r0
 8108d16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108d18:	e003      	b.n	8108d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108d1a:	2301      	movs	r3, #1
 8108d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8108d1e:	e000      	b.n	8108d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8108d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108d22:	7dfb      	ldrb	r3, [r7, #23]
 8108d24:	2b00      	cmp	r3, #0
 8108d26:	d109      	bne.n	8108d3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8108d28:	4b79      	ldr	r3, [pc, #484]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108d2c:	f023 0207 	bic.w	r2, r3, #7
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d34:	4976      	ldr	r1, [pc, #472]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d36:	4313      	orrs	r3, r2
 8108d38:	650b      	str	r3, [r1, #80]	; 0x50
 8108d3a:	e001      	b.n	8108d40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d3c:	7dfb      	ldrb	r3, [r7, #23]
 8108d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8108d40:	687b      	ldr	r3, [r7, #4]
 8108d42:	681b      	ldr	r3, [r3, #0]
 8108d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8108d48:	2b00      	cmp	r3, #0
 8108d4a:	d042      	beq.n	8108dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8108d4c:	687b      	ldr	r3, [r7, #4]
 8108d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108d54:	d02b      	beq.n	8108dae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8108d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108d5a:	d825      	bhi.n	8108da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8108d5e:	d028      	beq.n	8108db2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8108d60:	2bc0      	cmp	r3, #192	; 0xc0
 8108d62:	d821      	bhi.n	8108da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108d64:	2b80      	cmp	r3, #128	; 0x80
 8108d66:	d016      	beq.n	8108d96 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8108d68:	2b80      	cmp	r3, #128	; 0x80
 8108d6a:	d81d      	bhi.n	8108da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108d6c:	2b00      	cmp	r3, #0
 8108d6e:	d002      	beq.n	8108d76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8108d70:	2b40      	cmp	r3, #64	; 0x40
 8108d72:	d007      	beq.n	8108d84 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8108d74:	e018      	b.n	8108da8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108d76:	4b66      	ldr	r3, [pc, #408]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108d7a:	4a65      	ldr	r2, [pc, #404]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108d80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108d82:	e017      	b.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	3304      	adds	r3, #4
 8108d88:	2100      	movs	r1, #0
 8108d8a:	4618      	mov	r0, r3
 8108d8c:	f001 f944 	bl	810a018 <RCCEx_PLL2_Config>
 8108d90:	4603      	mov	r3, r0
 8108d92:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108d94:	e00e      	b.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108d96:	687b      	ldr	r3, [r7, #4]
 8108d98:	3324      	adds	r3, #36	; 0x24
 8108d9a:	2100      	movs	r1, #0
 8108d9c:	4618      	mov	r0, r3
 8108d9e:	f001 f9ed 	bl	810a17c <RCCEx_PLL3_Config>
 8108da2:	4603      	mov	r3, r0
 8108da4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108da6:	e005      	b.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108da8:	2301      	movs	r3, #1
 8108daa:	75fb      	strb	r3, [r7, #23]
      break;
 8108dac:	e002      	b.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8108dae:	bf00      	nop
 8108db0:	e000      	b.n	8108db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8108db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108db4:	7dfb      	ldrb	r3, [r7, #23]
 8108db6:	2b00      	cmp	r3, #0
 8108db8:	d109      	bne.n	8108dce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108dba:	4b55      	ldr	r3, [pc, #340]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108dbe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8108dc2:	687b      	ldr	r3, [r7, #4]
 8108dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108dc6:	4952      	ldr	r1, [pc, #328]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108dc8:	4313      	orrs	r3, r2
 8108dca:	650b      	str	r3, [r1, #80]	; 0x50
 8108dcc:	e001      	b.n	8108dd2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108dce:	7dfb      	ldrb	r3, [r7, #23]
 8108dd0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d049      	beq.n	8108e72 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108de4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108de8:	d030      	beq.n	8108e4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108dee:	d82a      	bhi.n	8108e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108df0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108df4:	d02c      	beq.n	8108e50 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8108df6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108dfa:	d824      	bhi.n	8108e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108e00:	d018      	beq.n	8108e34 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8108e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8108e06:	d81e      	bhi.n	8108e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108e08:	2b00      	cmp	r3, #0
 8108e0a:	d003      	beq.n	8108e14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8108e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108e10:	d007      	beq.n	8108e22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8108e12:	e018      	b.n	8108e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108e14:	4b3e      	ldr	r3, [pc, #248]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108e18:	4a3d      	ldr	r2, [pc, #244]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108e20:	e017      	b.n	8108e52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	3304      	adds	r3, #4
 8108e26:	2100      	movs	r1, #0
 8108e28:	4618      	mov	r0, r3
 8108e2a:	f001 f8f5 	bl	810a018 <RCCEx_PLL2_Config>
 8108e2e:	4603      	mov	r3, r0
 8108e30:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8108e32:	e00e      	b.n	8108e52 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108e34:	687b      	ldr	r3, [r7, #4]
 8108e36:	3324      	adds	r3, #36	; 0x24
 8108e38:	2100      	movs	r1, #0
 8108e3a:	4618      	mov	r0, r3
 8108e3c:	f001 f99e 	bl	810a17c <RCCEx_PLL3_Config>
 8108e40:	4603      	mov	r3, r0
 8108e42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108e44:	e005      	b.n	8108e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8108e46:	2301      	movs	r3, #1
 8108e48:	75fb      	strb	r3, [r7, #23]
      break;
 8108e4a:	e002      	b.n	8108e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108e4c:	bf00      	nop
 8108e4e:	e000      	b.n	8108e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8108e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108e52:	7dfb      	ldrb	r3, [r7, #23]
 8108e54:	2b00      	cmp	r3, #0
 8108e56:	d10a      	bne.n	8108e6e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8108e58:	4b2d      	ldr	r3, [pc, #180]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108e5c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8108e60:	687b      	ldr	r3, [r7, #4]
 8108e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108e66:	492a      	ldr	r1, [pc, #168]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108e68:	4313      	orrs	r3, r2
 8108e6a:	658b      	str	r3, [r1, #88]	; 0x58
 8108e6c:	e001      	b.n	8108e72 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e6e:	7dfb      	ldrb	r3, [r7, #23]
 8108e70:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108e7a:	2b00      	cmp	r3, #0
 8108e7c:	d04c      	beq.n	8108f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8108e7e:	687b      	ldr	r3, [r7, #4]
 8108e80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108e88:	d030      	beq.n	8108eec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8108e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108e8e:	d82a      	bhi.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108e90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108e94:	d02c      	beq.n	8108ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8108e96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108e9a:	d824      	bhi.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108ea0:	d018      	beq.n	8108ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8108ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108ea6:	d81e      	bhi.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d003      	beq.n	8108eb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8108eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108eb0:	d007      	beq.n	8108ec2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8108eb2:	e018      	b.n	8108ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108eb4:	4b16      	ldr	r3, [pc, #88]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108eb8:	4a15      	ldr	r2, [pc, #84]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ec0:	e017      	b.n	8108ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108ec2:	687b      	ldr	r3, [r7, #4]
 8108ec4:	3304      	adds	r3, #4
 8108ec6:	2100      	movs	r1, #0
 8108ec8:	4618      	mov	r0, r3
 8108eca:	f001 f8a5 	bl	810a018 <RCCEx_PLL2_Config>
 8108ece:	4603      	mov	r3, r0
 8108ed0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8108ed2:	e00e      	b.n	8108ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108ed4:	687b      	ldr	r3, [r7, #4]
 8108ed6:	3324      	adds	r3, #36	; 0x24
 8108ed8:	2100      	movs	r1, #0
 8108eda:	4618      	mov	r0, r3
 8108edc:	f001 f94e 	bl	810a17c <RCCEx_PLL3_Config>
 8108ee0:	4603      	mov	r3, r0
 8108ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108ee4:	e005      	b.n	8108ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8108ee6:	2301      	movs	r3, #1
 8108ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8108eea:	e002      	b.n	8108ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108eec:	bf00      	nop
 8108eee:	e000      	b.n	8108ef2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ef2:	7dfb      	ldrb	r3, [r7, #23]
 8108ef4:	2b00      	cmp	r3, #0
 8108ef6:	d10d      	bne.n	8108f14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108ef8:	4b05      	ldr	r3, [pc, #20]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108efc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108f06:	4902      	ldr	r1, [pc, #8]	; (8108f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108f08:	4313      	orrs	r3, r2
 8108f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8108f0c:	e004      	b.n	8108f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8108f0e:	bf00      	nop
 8108f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f14:	7dfb      	ldrb	r3, [r7, #23]
 8108f16:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	681b      	ldr	r3, [r3, #0]
 8108f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108f20:	2b00      	cmp	r3, #0
 8108f22:	d032      	beq.n	8108f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108f28:	2b30      	cmp	r3, #48	; 0x30
 8108f2a:	d01c      	beq.n	8108f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8108f2c:	2b30      	cmp	r3, #48	; 0x30
 8108f2e:	d817      	bhi.n	8108f60 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108f30:	2b20      	cmp	r3, #32
 8108f32:	d00c      	beq.n	8108f4e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8108f34:	2b20      	cmp	r3, #32
 8108f36:	d813      	bhi.n	8108f60 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108f38:	2b00      	cmp	r3, #0
 8108f3a:	d016      	beq.n	8108f6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8108f3c:	2b10      	cmp	r3, #16
 8108f3e:	d10f      	bne.n	8108f60 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108f40:	4baf      	ldr	r3, [pc, #700]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108f44:	4aae      	ldr	r2, [pc, #696]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108f4c:	e00e      	b.n	8108f6c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108f4e:	687b      	ldr	r3, [r7, #4]
 8108f50:	3304      	adds	r3, #4
 8108f52:	2102      	movs	r1, #2
 8108f54:	4618      	mov	r0, r3
 8108f56:	f001 f85f 	bl	810a018 <RCCEx_PLL2_Config>
 8108f5a:	4603      	mov	r3, r0
 8108f5c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108f5e:	e005      	b.n	8108f6c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108f60:	2301      	movs	r3, #1
 8108f62:	75fb      	strb	r3, [r7, #23]
      break;
 8108f64:	e002      	b.n	8108f6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8108f66:	bf00      	nop
 8108f68:	e000      	b.n	8108f6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8108f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108f6c:	7dfb      	ldrb	r3, [r7, #23]
 8108f6e:	2b00      	cmp	r3, #0
 8108f70:	d109      	bne.n	8108f86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8108f72:	4ba3      	ldr	r3, [pc, #652]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108f76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8108f7a:	687b      	ldr	r3, [r7, #4]
 8108f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108f7e:	49a0      	ldr	r1, [pc, #640]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108f80:	4313      	orrs	r3, r2
 8108f82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108f84:	e001      	b.n	8108f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f86:	7dfb      	ldrb	r3, [r7, #23]
 8108f88:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	681b      	ldr	r3, [r3, #0]
 8108f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	d047      	beq.n	8109026 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108f9e:	d030      	beq.n	8109002 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8108fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108fa4:	d82a      	bhi.n	8108ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108faa:	d02c      	beq.n	8109006 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8108fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108fb0:	d824      	bhi.n	8108ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108fb6:	d018      	beq.n	8108fea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8108fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108fbc:	d81e      	bhi.n	8108ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108fbe:	2b00      	cmp	r3, #0
 8108fc0:	d003      	beq.n	8108fca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8108fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108fc6:	d007      	beq.n	8108fd8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8108fc8:	e018      	b.n	8108ffc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108fca:	4b8d      	ldr	r3, [pc, #564]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fce:	4a8c      	ldr	r2, [pc, #560]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108fd6:	e017      	b.n	8109008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	3304      	adds	r3, #4
 8108fdc:	2100      	movs	r1, #0
 8108fde:	4618      	mov	r0, r3
 8108fe0:	f001 f81a 	bl	810a018 <RCCEx_PLL2_Config>
 8108fe4:	4603      	mov	r3, r0
 8108fe6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108fe8:	e00e      	b.n	8109008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108fea:	687b      	ldr	r3, [r7, #4]
 8108fec:	3324      	adds	r3, #36	; 0x24
 8108fee:	2100      	movs	r1, #0
 8108ff0:	4618      	mov	r0, r3
 8108ff2:	f001 f8c3 	bl	810a17c <RCCEx_PLL3_Config>
 8108ff6:	4603      	mov	r3, r0
 8108ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108ffa:	e005      	b.n	8109008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108ffc:	2301      	movs	r3, #1
 8108ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8109000:	e002      	b.n	8109008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8109002:	bf00      	nop
 8109004:	e000      	b.n	8109008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8109006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109008:	7dfb      	ldrb	r3, [r7, #23]
 810900a:	2b00      	cmp	r3, #0
 810900c:	d109      	bne.n	8109022 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810900e:	4b7c      	ldr	r3, [pc, #496]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109012:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8109016:	687b      	ldr	r3, [r7, #4]
 8109018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810901a:	4979      	ldr	r1, [pc, #484]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810901c:	4313      	orrs	r3, r2
 810901e:	650b      	str	r3, [r1, #80]	; 0x50
 8109020:	e001      	b.n	8109026 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109022:	7dfb      	ldrb	r3, [r7, #23]
 8109024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8109026:	687b      	ldr	r3, [r7, #4]
 8109028:	681b      	ldr	r3, [r3, #0]
 810902a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810902e:	2b00      	cmp	r3, #0
 8109030:	d049      	beq.n	81090c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810903a:	d02e      	beq.n	810909a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 810903c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8109040:	d828      	bhi.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8109046:	d02a      	beq.n	810909e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8109048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810904c:	d822      	bhi.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810904e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8109052:	d026      	beq.n	81090a2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8109054:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8109058:	d81c      	bhi.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810905a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810905e:	d010      	beq.n	8109082 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8109060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109064:	d816      	bhi.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8109066:	2b00      	cmp	r3, #0
 8109068:	d01d      	beq.n	81090a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810906a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810906e:	d111      	bne.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109070:	687b      	ldr	r3, [r7, #4]
 8109072:	3304      	adds	r3, #4
 8109074:	2101      	movs	r1, #1
 8109076:	4618      	mov	r0, r3
 8109078:	f000 ffce 	bl	810a018 <RCCEx_PLL2_Config>
 810907c:	4603      	mov	r3, r0
 810907e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109080:	e012      	b.n	81090a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	3324      	adds	r3, #36	; 0x24
 8109086:	2101      	movs	r1, #1
 8109088:	4618      	mov	r0, r3
 810908a:	f001 f877 	bl	810a17c <RCCEx_PLL3_Config>
 810908e:	4603      	mov	r3, r0
 8109090:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8109092:	e009      	b.n	81090a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109094:	2301      	movs	r3, #1
 8109096:	75fb      	strb	r3, [r7, #23]
      break;
 8109098:	e006      	b.n	81090a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810909a:	bf00      	nop
 810909c:	e004      	b.n	81090a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810909e:	bf00      	nop
 81090a0:	e002      	b.n	81090a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81090a2:	bf00      	nop
 81090a4:	e000      	b.n	81090a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81090a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81090a8:	7dfb      	ldrb	r3, [r7, #23]
 81090aa:	2b00      	cmp	r3, #0
 81090ac:	d109      	bne.n	81090c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81090ae:	4b54      	ldr	r3, [pc, #336]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81090b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81090b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81090b6:	687b      	ldr	r3, [r7, #4]
 81090b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81090ba:	4951      	ldr	r1, [pc, #324]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81090bc:	4313      	orrs	r3, r2
 81090be:	650b      	str	r3, [r1, #80]	; 0x50
 81090c0:	e001      	b.n	81090c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81090c2:	7dfb      	ldrb	r3, [r7, #23]
 81090c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81090c6:	687b      	ldr	r3, [r7, #4]
 81090c8:	681b      	ldr	r3, [r3, #0]
 81090ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81090ce:	2b00      	cmp	r3, #0
 81090d0:	d04b      	beq.n	810916a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81090d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81090dc:	d02e      	beq.n	810913c <HAL_RCCEx_PeriphCLKConfig+0x520>
 81090de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81090e2:	d828      	bhi.n	8109136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81090e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81090e8:	d02a      	beq.n	8109140 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81090ee:	d822      	bhi.n	8109136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81090f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81090f4:	d026      	beq.n	8109144 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81090f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81090fa:	d81c      	bhi.n	8109136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81090fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109100:	d010      	beq.n	8109124 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8109102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109106:	d816      	bhi.n	8109136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8109108:	2b00      	cmp	r3, #0
 810910a:	d01d      	beq.n	8109148 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810910c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109110:	d111      	bne.n	8109136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109112:	687b      	ldr	r3, [r7, #4]
 8109114:	3304      	adds	r3, #4
 8109116:	2101      	movs	r1, #1
 8109118:	4618      	mov	r0, r3
 810911a:	f000 ff7d 	bl	810a018 <RCCEx_PLL2_Config>
 810911e:	4603      	mov	r3, r0
 8109120:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109122:	e012      	b.n	810914a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	3324      	adds	r3, #36	; 0x24
 8109128:	2101      	movs	r1, #1
 810912a:	4618      	mov	r0, r3
 810912c:	f001 f826 	bl	810a17c <RCCEx_PLL3_Config>
 8109130:	4603      	mov	r3, r0
 8109132:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109134:	e009      	b.n	810914a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8109136:	2301      	movs	r3, #1
 8109138:	75fb      	strb	r3, [r7, #23]
      break;
 810913a:	e006      	b.n	810914a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810913c:	bf00      	nop
 810913e:	e004      	b.n	810914a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109140:	bf00      	nop
 8109142:	e002      	b.n	810914a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109144:	bf00      	nop
 8109146:	e000      	b.n	810914a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8109148:	bf00      	nop
    }

    if(ret == HAL_OK)
 810914a:	7dfb      	ldrb	r3, [r7, #23]
 810914c:	2b00      	cmp	r3, #0
 810914e:	d10a      	bne.n	8109166 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8109150:	4b2b      	ldr	r3, [pc, #172]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109154:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8109158:	687b      	ldr	r3, [r7, #4]
 810915a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810915e:	4928      	ldr	r1, [pc, #160]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109160:	4313      	orrs	r3, r2
 8109162:	658b      	str	r3, [r1, #88]	; 0x58
 8109164:	e001      	b.n	810916a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109166:	7dfb      	ldrb	r3, [r7, #23]
 8109168:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810916a:	687b      	ldr	r3, [r7, #4]
 810916c:	681b      	ldr	r3, [r3, #0]
 810916e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8109172:	2b00      	cmp	r3, #0
 8109174:	d02f      	beq.n	81091d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8109176:	687b      	ldr	r3, [r7, #4]
 8109178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810917a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810917e:	d00e      	beq.n	810919e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8109180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109184:	d814      	bhi.n	81091b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8109186:	2b00      	cmp	r3, #0
 8109188:	d015      	beq.n	81091b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810918a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810918e:	d10f      	bne.n	81091b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109190:	4b1b      	ldr	r3, [pc, #108]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109194:	4a1a      	ldr	r2, [pc, #104]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8109196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810919a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810919c:	e00c      	b.n	81091b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810919e:	687b      	ldr	r3, [r7, #4]
 81091a0:	3304      	adds	r3, #4
 81091a2:	2101      	movs	r1, #1
 81091a4:	4618      	mov	r0, r3
 81091a6:	f000 ff37 	bl	810a018 <RCCEx_PLL2_Config>
 81091aa:	4603      	mov	r3, r0
 81091ac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81091ae:	e003      	b.n	81091b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81091b0:	2301      	movs	r3, #1
 81091b2:	75fb      	strb	r3, [r7, #23]
      break;
 81091b4:	e000      	b.n	81091b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81091b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81091b8:	7dfb      	ldrb	r3, [r7, #23]
 81091ba:	2b00      	cmp	r3, #0
 81091bc:	d109      	bne.n	81091d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81091be:	4b10      	ldr	r3, [pc, #64]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81091c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81091c6:	687b      	ldr	r3, [r7, #4]
 81091c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81091ca:	490d      	ldr	r1, [pc, #52]	; (8109200 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81091cc:	4313      	orrs	r3, r2
 81091ce:	650b      	str	r3, [r1, #80]	; 0x50
 81091d0:	e001      	b.n	81091d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81091d2:	7dfb      	ldrb	r3, [r7, #23]
 81091d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81091d6:	687b      	ldr	r3, [r7, #4]
 81091d8:	681b      	ldr	r3, [r3, #0]
 81091da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81091de:	2b00      	cmp	r3, #0
 81091e0:	d033      	beq.n	810924a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81091e2:	687b      	ldr	r3, [r7, #4]
 81091e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81091e6:	2b03      	cmp	r3, #3
 81091e8:	d81c      	bhi.n	8109224 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81091ea:	a201      	add	r2, pc, #4	; (adr r2, 81091f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81091f0:	0810922b 	.word	0x0810922b
 81091f4:	08109205 	.word	0x08109205
 81091f8:	08109213 	.word	0x08109213
 81091fc:	0810922b 	.word	0x0810922b
 8109200:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109204:	4bb9      	ldr	r3, [pc, #740]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109208:	4ab8      	ldr	r2, [pc, #736]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810920a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810920e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109210:	e00c      	b.n	810922c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109212:	687b      	ldr	r3, [r7, #4]
 8109214:	3304      	adds	r3, #4
 8109216:	2102      	movs	r1, #2
 8109218:	4618      	mov	r0, r3
 810921a:	f000 fefd 	bl	810a018 <RCCEx_PLL2_Config>
 810921e:	4603      	mov	r3, r0
 8109220:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109222:	e003      	b.n	810922c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109224:	2301      	movs	r3, #1
 8109226:	75fb      	strb	r3, [r7, #23]
      break;
 8109228:	e000      	b.n	810922c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810922a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810922c:	7dfb      	ldrb	r3, [r7, #23]
 810922e:	2b00      	cmp	r3, #0
 8109230:	d109      	bne.n	8109246 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8109232:	4bae      	ldr	r3, [pc, #696]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109236:	f023 0203 	bic.w	r2, r3, #3
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810923e:	49ab      	ldr	r1, [pc, #684]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109240:	4313      	orrs	r3, r2
 8109242:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109244:	e001      	b.n	810924a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109246:	7dfb      	ldrb	r3, [r7, #23]
 8109248:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	681b      	ldr	r3, [r3, #0]
 810924e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8109252:	2b00      	cmp	r3, #0
 8109254:	f000 8088 	beq.w	8109368 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8109258:	4ba5      	ldr	r3, [pc, #660]	; (81094f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	4aa4      	ldr	r2, [pc, #656]	; (81094f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810925e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8109262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8109264:	f7fa fa04 	bl	8103670 <HAL_GetTick>
 8109268:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810926a:	e009      	b.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810926c:	f7fa fa00 	bl	8103670 <HAL_GetTick>
 8109270:	4602      	mov	r2, r0
 8109272:	693b      	ldr	r3, [r7, #16]
 8109274:	1ad3      	subs	r3, r2, r3
 8109276:	2b64      	cmp	r3, #100	; 0x64
 8109278:	d902      	bls.n	8109280 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810927a:	2303      	movs	r3, #3
 810927c:	75fb      	strb	r3, [r7, #23]
        break;
 810927e:	e005      	b.n	810928c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8109280:	4b9b      	ldr	r3, [pc, #620]	; (81094f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8109282:	681b      	ldr	r3, [r3, #0]
 8109284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109288:	2b00      	cmp	r3, #0
 810928a:	d0ef      	beq.n	810926c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810928c:	7dfb      	ldrb	r3, [r7, #23]
 810928e:	2b00      	cmp	r3, #0
 8109290:	d168      	bne.n	8109364 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8109292:	4b96      	ldr	r3, [pc, #600]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109294:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8109296:	687b      	ldr	r3, [r7, #4]
 8109298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810929c:	4053      	eors	r3, r2
 810929e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81092a2:	2b00      	cmp	r3, #0
 81092a4:	d013      	beq.n	81092ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81092a6:	4b91      	ldr	r3, [pc, #580]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81092aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81092ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81092b0:	4b8e      	ldr	r3, [pc, #568]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81092b4:	4a8d      	ldr	r2, [pc, #564]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81092ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81092bc:	4b8b      	ldr	r3, [pc, #556]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81092c0:	4a8a      	ldr	r2, [pc, #552]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81092c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81092c8:	4a88      	ldr	r2, [pc, #544]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092ca:	68fb      	ldr	r3, [r7, #12]
 81092cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81092d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81092d8:	d115      	bne.n	8109306 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81092da:	f7fa f9c9 	bl	8103670 <HAL_GetTick>
 81092de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81092e0:	e00b      	b.n	81092fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81092e2:	f7fa f9c5 	bl	8103670 <HAL_GetTick>
 81092e6:	4602      	mov	r2, r0
 81092e8:	693b      	ldr	r3, [r7, #16]
 81092ea:	1ad3      	subs	r3, r2, r3
 81092ec:	f241 3288 	movw	r2, #5000	; 0x1388
 81092f0:	4293      	cmp	r3, r2
 81092f2:	d902      	bls.n	81092fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81092f4:	2303      	movs	r3, #3
 81092f6:	75fb      	strb	r3, [r7, #23]
            break;
 81092f8:	e005      	b.n	8109306 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81092fa:	4b7c      	ldr	r3, [pc, #496]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81092fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81092fe:	f003 0302 	and.w	r3, r3, #2
 8109302:	2b00      	cmp	r3, #0
 8109304:	d0ed      	beq.n	81092e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8109306:	7dfb      	ldrb	r3, [r7, #23]
 8109308:	2b00      	cmp	r3, #0
 810930a:	d128      	bne.n	810935e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810931a:	d10f      	bne.n	810933c <HAL_RCCEx_PeriphCLKConfig+0x720>
 810931c:	4b73      	ldr	r3, [pc, #460]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810931e:	691b      	ldr	r3, [r3, #16]
 8109320:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810932a:	091b      	lsrs	r3, r3, #4
 810932c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8109330:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8109334:	496d      	ldr	r1, [pc, #436]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109336:	4313      	orrs	r3, r2
 8109338:	610b      	str	r3, [r1, #16]
 810933a:	e005      	b.n	8109348 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 810933c:	4b6b      	ldr	r3, [pc, #428]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810933e:	691b      	ldr	r3, [r3, #16]
 8109340:	4a6a      	ldr	r2, [pc, #424]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109342:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8109346:	6113      	str	r3, [r2, #16]
 8109348:	4b68      	ldr	r3, [pc, #416]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810934a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8109356:	4965      	ldr	r1, [pc, #404]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109358:	4313      	orrs	r3, r2
 810935a:	670b      	str	r3, [r1, #112]	; 0x70
 810935c:	e004      	b.n	8109368 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810935e:	7dfb      	ldrb	r3, [r7, #23]
 8109360:	75bb      	strb	r3, [r7, #22]
 8109362:	e001      	b.n	8109368 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109364:	7dfb      	ldrb	r3, [r7, #23]
 8109366:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	681b      	ldr	r3, [r3, #0]
 810936c:	f003 0301 	and.w	r3, r3, #1
 8109370:	2b00      	cmp	r3, #0
 8109372:	d07e      	beq.n	8109472 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8109374:	687b      	ldr	r3, [r7, #4]
 8109376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109378:	2b28      	cmp	r3, #40	; 0x28
 810937a:	d867      	bhi.n	810944c <HAL_RCCEx_PeriphCLKConfig+0x830>
 810937c:	a201      	add	r2, pc, #4	; (adr r2, 8109384 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109382:	bf00      	nop
 8109384:	08109453 	.word	0x08109453
 8109388:	0810944d 	.word	0x0810944d
 810938c:	0810944d 	.word	0x0810944d
 8109390:	0810944d 	.word	0x0810944d
 8109394:	0810944d 	.word	0x0810944d
 8109398:	0810944d 	.word	0x0810944d
 810939c:	0810944d 	.word	0x0810944d
 81093a0:	0810944d 	.word	0x0810944d
 81093a4:	08109429 	.word	0x08109429
 81093a8:	0810944d 	.word	0x0810944d
 81093ac:	0810944d 	.word	0x0810944d
 81093b0:	0810944d 	.word	0x0810944d
 81093b4:	0810944d 	.word	0x0810944d
 81093b8:	0810944d 	.word	0x0810944d
 81093bc:	0810944d 	.word	0x0810944d
 81093c0:	0810944d 	.word	0x0810944d
 81093c4:	0810943b 	.word	0x0810943b
 81093c8:	0810944d 	.word	0x0810944d
 81093cc:	0810944d 	.word	0x0810944d
 81093d0:	0810944d 	.word	0x0810944d
 81093d4:	0810944d 	.word	0x0810944d
 81093d8:	0810944d 	.word	0x0810944d
 81093dc:	0810944d 	.word	0x0810944d
 81093e0:	0810944d 	.word	0x0810944d
 81093e4:	08109453 	.word	0x08109453
 81093e8:	0810944d 	.word	0x0810944d
 81093ec:	0810944d 	.word	0x0810944d
 81093f0:	0810944d 	.word	0x0810944d
 81093f4:	0810944d 	.word	0x0810944d
 81093f8:	0810944d 	.word	0x0810944d
 81093fc:	0810944d 	.word	0x0810944d
 8109400:	0810944d 	.word	0x0810944d
 8109404:	08109453 	.word	0x08109453
 8109408:	0810944d 	.word	0x0810944d
 810940c:	0810944d 	.word	0x0810944d
 8109410:	0810944d 	.word	0x0810944d
 8109414:	0810944d 	.word	0x0810944d
 8109418:	0810944d 	.word	0x0810944d
 810941c:	0810944d 	.word	0x0810944d
 8109420:	0810944d 	.word	0x0810944d
 8109424:	08109453 	.word	0x08109453
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	3304      	adds	r3, #4
 810942c:	2101      	movs	r1, #1
 810942e:	4618      	mov	r0, r3
 8109430:	f000 fdf2 	bl	810a018 <RCCEx_PLL2_Config>
 8109434:	4603      	mov	r3, r0
 8109436:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109438:	e00c      	b.n	8109454 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	3324      	adds	r3, #36	; 0x24
 810943e:	2101      	movs	r1, #1
 8109440:	4618      	mov	r0, r3
 8109442:	f000 fe9b 	bl	810a17c <RCCEx_PLL3_Config>
 8109446:	4603      	mov	r3, r0
 8109448:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810944a:	e003      	b.n	8109454 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810944c:	2301      	movs	r3, #1
 810944e:	75fb      	strb	r3, [r7, #23]
      break;
 8109450:	e000      	b.n	8109454 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8109452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109454:	7dfb      	ldrb	r3, [r7, #23]
 8109456:	2b00      	cmp	r3, #0
 8109458:	d109      	bne.n	810946e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810945a:	4b24      	ldr	r3, [pc, #144]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810945c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810945e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109466:	4921      	ldr	r1, [pc, #132]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109468:	4313      	orrs	r3, r2
 810946a:	654b      	str	r3, [r1, #84]	; 0x54
 810946c:	e001      	b.n	8109472 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810946e:	7dfb      	ldrb	r3, [r7, #23]
 8109470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	f003 0302 	and.w	r3, r3, #2
 810947a:	2b00      	cmp	r3, #0
 810947c:	d03c      	beq.n	81094f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109482:	2b05      	cmp	r3, #5
 8109484:	d820      	bhi.n	81094c8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8109486:	a201      	add	r2, pc, #4	; (adr r2, 810948c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8109488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810948c:	081094cf 	.word	0x081094cf
 8109490:	081094a5 	.word	0x081094a5
 8109494:	081094b7 	.word	0x081094b7
 8109498:	081094cf 	.word	0x081094cf
 810949c:	081094cf 	.word	0x081094cf
 81094a0:	081094cf 	.word	0x081094cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81094a4:	687b      	ldr	r3, [r7, #4]
 81094a6:	3304      	adds	r3, #4
 81094a8:	2101      	movs	r1, #1
 81094aa:	4618      	mov	r0, r3
 81094ac:	f000 fdb4 	bl	810a018 <RCCEx_PLL2_Config>
 81094b0:	4603      	mov	r3, r0
 81094b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81094b4:	e00c      	b.n	81094d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	3324      	adds	r3, #36	; 0x24
 81094ba:	2101      	movs	r1, #1
 81094bc:	4618      	mov	r0, r3
 81094be:	f000 fe5d 	bl	810a17c <RCCEx_PLL3_Config>
 81094c2:	4603      	mov	r3, r0
 81094c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81094c6:	e003      	b.n	81094d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81094c8:	2301      	movs	r3, #1
 81094ca:	75fb      	strb	r3, [r7, #23]
      break;
 81094cc:	e000      	b.n	81094d0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81094ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81094d0:	7dfb      	ldrb	r3, [r7, #23]
 81094d2:	2b00      	cmp	r3, #0
 81094d4:	d10e      	bne.n	81094f4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81094d6:	4b05      	ldr	r3, [pc, #20]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81094da:	f023 0207 	bic.w	r2, r3, #7
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81094e2:	4902      	ldr	r1, [pc, #8]	; (81094ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81094e4:	4313      	orrs	r3, r2
 81094e6:	654b      	str	r3, [r1, #84]	; 0x54
 81094e8:	e006      	b.n	81094f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81094ea:	bf00      	nop
 81094ec:	58024400 	.word	0x58024400
 81094f0:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81094f4:	7dfb      	ldrb	r3, [r7, #23]
 81094f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81094f8:	687b      	ldr	r3, [r7, #4]
 81094fa:	681b      	ldr	r3, [r3, #0]
 81094fc:	f003 0304 	and.w	r3, r3, #4
 8109500:	2b00      	cmp	r3, #0
 8109502:	d039      	beq.n	8109578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8109504:	687b      	ldr	r3, [r7, #4]
 8109506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810950a:	2b05      	cmp	r3, #5
 810950c:	d820      	bhi.n	8109550 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810950e:	a201      	add	r2, pc, #4	; (adr r2, 8109514 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8109510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109514:	08109557 	.word	0x08109557
 8109518:	0810952d 	.word	0x0810952d
 810951c:	0810953f 	.word	0x0810953f
 8109520:	08109557 	.word	0x08109557
 8109524:	08109557 	.word	0x08109557
 8109528:	08109557 	.word	0x08109557
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	3304      	adds	r3, #4
 8109530:	2101      	movs	r1, #1
 8109532:	4618      	mov	r0, r3
 8109534:	f000 fd70 	bl	810a018 <RCCEx_PLL2_Config>
 8109538:	4603      	mov	r3, r0
 810953a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810953c:	e00c      	b.n	8109558 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	3324      	adds	r3, #36	; 0x24
 8109542:	2101      	movs	r1, #1
 8109544:	4618      	mov	r0, r3
 8109546:	f000 fe19 	bl	810a17c <RCCEx_PLL3_Config>
 810954a:	4603      	mov	r3, r0
 810954c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810954e:	e003      	b.n	8109558 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109550:	2301      	movs	r3, #1
 8109552:	75fb      	strb	r3, [r7, #23]
      break;
 8109554:	e000      	b.n	8109558 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8109556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109558:	7dfb      	ldrb	r3, [r7, #23]
 810955a:	2b00      	cmp	r3, #0
 810955c:	d10a      	bne.n	8109574 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810955e:	4bb7      	ldr	r3, [pc, #732]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109562:	f023 0207 	bic.w	r2, r3, #7
 8109566:	687b      	ldr	r3, [r7, #4]
 8109568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810956c:	49b3      	ldr	r1, [pc, #716]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810956e:	4313      	orrs	r3, r2
 8109570:	658b      	str	r3, [r1, #88]	; 0x58
 8109572:	e001      	b.n	8109578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109574:	7dfb      	ldrb	r3, [r7, #23]
 8109576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	681b      	ldr	r3, [r3, #0]
 810957c:	f003 0320 	and.w	r3, r3, #32
 8109580:	2b00      	cmp	r3, #0
 8109582:	d04b      	beq.n	810961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810958a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810958e:	d02e      	beq.n	81095ee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8109590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109594:	d828      	bhi.n	81095e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810959a:	d02a      	beq.n	81095f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810959c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81095a0:	d822      	bhi.n	81095e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81095a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81095a6:	d026      	beq.n	81095f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81095a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81095ac:	d81c      	bhi.n	81095e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81095ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81095b2:	d010      	beq.n	81095d6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 81095b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81095b8:	d816      	bhi.n	81095e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81095ba:	2b00      	cmp	r3, #0
 81095bc:	d01d      	beq.n	81095fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81095be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81095c2:	d111      	bne.n	81095e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81095c4:	687b      	ldr	r3, [r7, #4]
 81095c6:	3304      	adds	r3, #4
 81095c8:	2100      	movs	r1, #0
 81095ca:	4618      	mov	r0, r3
 81095cc:	f000 fd24 	bl	810a018 <RCCEx_PLL2_Config>
 81095d0:	4603      	mov	r3, r0
 81095d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81095d4:	e012      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81095d6:	687b      	ldr	r3, [r7, #4]
 81095d8:	3324      	adds	r3, #36	; 0x24
 81095da:	2102      	movs	r1, #2
 81095dc:	4618      	mov	r0, r3
 81095de:	f000 fdcd 	bl	810a17c <RCCEx_PLL3_Config>
 81095e2:	4603      	mov	r3, r0
 81095e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81095e6:	e009      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81095e8:	2301      	movs	r3, #1
 81095ea:	75fb      	strb	r3, [r7, #23]
      break;
 81095ec:	e006      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81095ee:	bf00      	nop
 81095f0:	e004      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81095f2:	bf00      	nop
 81095f4:	e002      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81095f6:	bf00      	nop
 81095f8:	e000      	b.n	81095fc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81095fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81095fc:	7dfb      	ldrb	r3, [r7, #23]
 81095fe:	2b00      	cmp	r3, #0
 8109600:	d10a      	bne.n	8109618 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8109602:	4b8e      	ldr	r3, [pc, #568]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109606:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109610:	498a      	ldr	r1, [pc, #552]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109612:	4313      	orrs	r3, r2
 8109614:	654b      	str	r3, [r1, #84]	; 0x54
 8109616:	e001      	b.n	810961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109618:	7dfb      	ldrb	r3, [r7, #23]
 810961a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810961c:	687b      	ldr	r3, [r7, #4]
 810961e:	681b      	ldr	r3, [r3, #0]
 8109620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109624:	2b00      	cmp	r3, #0
 8109626:	d04b      	beq.n	81096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810962e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109632:	d02e      	beq.n	8109692 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8109634:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109638:	d828      	bhi.n	810968c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810963a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810963e:	d02a      	beq.n	8109696 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8109640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109644:	d822      	bhi.n	810968c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8109646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810964a:	d026      	beq.n	810969a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810964c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109650:	d81c      	bhi.n	810968c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8109652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109656:	d010      	beq.n	810967a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8109658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810965c:	d816      	bhi.n	810968c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810965e:	2b00      	cmp	r3, #0
 8109660:	d01d      	beq.n	810969e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8109662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109666:	d111      	bne.n	810968c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	3304      	adds	r3, #4
 810966c:	2100      	movs	r1, #0
 810966e:	4618      	mov	r0, r3
 8109670:	f000 fcd2 	bl	810a018 <RCCEx_PLL2_Config>
 8109674:	4603      	mov	r3, r0
 8109676:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109678:	e012      	b.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	3324      	adds	r3, #36	; 0x24
 810967e:	2102      	movs	r1, #2
 8109680:	4618      	mov	r0, r3
 8109682:	f000 fd7b 	bl	810a17c <RCCEx_PLL3_Config>
 8109686:	4603      	mov	r3, r0
 8109688:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810968a:	e009      	b.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810968c:	2301      	movs	r3, #1
 810968e:	75fb      	strb	r3, [r7, #23]
      break;
 8109690:	e006      	b.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109692:	bf00      	nop
 8109694:	e004      	b.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109696:	bf00      	nop
 8109698:	e002      	b.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810969a:	bf00      	nop
 810969c:	e000      	b.n	81096a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810969e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81096a0:	7dfb      	ldrb	r3, [r7, #23]
 81096a2:	2b00      	cmp	r3, #0
 81096a4:	d10a      	bne.n	81096bc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81096a6:	4b65      	ldr	r3, [pc, #404]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81096a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81096aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81096ae:	687b      	ldr	r3, [r7, #4]
 81096b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81096b4:	4961      	ldr	r1, [pc, #388]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81096b6:	4313      	orrs	r3, r2
 81096b8:	658b      	str	r3, [r1, #88]	; 0x58
 81096ba:	e001      	b.n	81096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81096bc:	7dfb      	ldrb	r3, [r7, #23]
 81096be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81096c0:	687b      	ldr	r3, [r7, #4]
 81096c2:	681b      	ldr	r3, [r3, #0]
 81096c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81096c8:	2b00      	cmp	r3, #0
 81096ca:	d04b      	beq.n	8109764 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81096d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81096d6:	d02e      	beq.n	8109736 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81096d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81096dc:	d828      	bhi.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81096de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81096e2:	d02a      	beq.n	810973a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81096e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81096e8:	d822      	bhi.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81096ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81096ee:	d026      	beq.n	810973e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81096f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81096f4:	d81c      	bhi.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81096f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81096fa:	d010      	beq.n	810971e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81096fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109700:	d816      	bhi.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109702:	2b00      	cmp	r3, #0
 8109704:	d01d      	beq.n	8109742 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8109706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810970a:	d111      	bne.n	8109730 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810970c:	687b      	ldr	r3, [r7, #4]
 810970e:	3304      	adds	r3, #4
 8109710:	2100      	movs	r1, #0
 8109712:	4618      	mov	r0, r3
 8109714:	f000 fc80 	bl	810a018 <RCCEx_PLL2_Config>
 8109718:	4603      	mov	r3, r0
 810971a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810971c:	e012      	b.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	3324      	adds	r3, #36	; 0x24
 8109722:	2102      	movs	r1, #2
 8109724:	4618      	mov	r0, r3
 8109726:	f000 fd29 	bl	810a17c <RCCEx_PLL3_Config>
 810972a:	4603      	mov	r3, r0
 810972c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810972e:	e009      	b.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109730:	2301      	movs	r3, #1
 8109732:	75fb      	strb	r3, [r7, #23]
      break;
 8109734:	e006      	b.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8109736:	bf00      	nop
 8109738:	e004      	b.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810973a:	bf00      	nop
 810973c:	e002      	b.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810973e:	bf00      	nop
 8109740:	e000      	b.n	8109744 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8109742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109744:	7dfb      	ldrb	r3, [r7, #23]
 8109746:	2b00      	cmp	r3, #0
 8109748:	d10a      	bne.n	8109760 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810974a:	4b3c      	ldr	r3, [pc, #240]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810974c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810974e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8109752:	687b      	ldr	r3, [r7, #4]
 8109754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109758:	4938      	ldr	r1, [pc, #224]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810975a:	4313      	orrs	r3, r2
 810975c:	658b      	str	r3, [r1, #88]	; 0x58
 810975e:	e001      	b.n	8109764 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109760:	7dfb      	ldrb	r3, [r7, #23]
 8109762:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	681b      	ldr	r3, [r3, #0]
 8109768:	f003 0308 	and.w	r3, r3, #8
 810976c:	2b00      	cmp	r3, #0
 810976e:	d01a      	beq.n	81097a6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8109770:	687b      	ldr	r3, [r7, #4]
 8109772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810977a:	d10a      	bne.n	8109792 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	3324      	adds	r3, #36	; 0x24
 8109780:	2102      	movs	r1, #2
 8109782:	4618      	mov	r0, r3
 8109784:	f000 fcfa 	bl	810a17c <RCCEx_PLL3_Config>
 8109788:	4603      	mov	r3, r0
 810978a:	2b00      	cmp	r3, #0
 810978c:	d001      	beq.n	8109792 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810978e:	2301      	movs	r3, #1
 8109790:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8109792:	4b2a      	ldr	r3, [pc, #168]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81097a0:	4926      	ldr	r1, [pc, #152]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097a2:	4313      	orrs	r3, r2
 81097a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81097a6:	687b      	ldr	r3, [r7, #4]
 81097a8:	681b      	ldr	r3, [r3, #0]
 81097aa:	f003 0310 	and.w	r3, r3, #16
 81097ae:	2b00      	cmp	r3, #0
 81097b0:	d01a      	beq.n	81097e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81097b2:	687b      	ldr	r3, [r7, #4]
 81097b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81097b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81097bc:	d10a      	bne.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81097be:	687b      	ldr	r3, [r7, #4]
 81097c0:	3324      	adds	r3, #36	; 0x24
 81097c2:	2102      	movs	r1, #2
 81097c4:	4618      	mov	r0, r3
 81097c6:	f000 fcd9 	bl	810a17c <RCCEx_PLL3_Config>
 81097ca:	4603      	mov	r3, r0
 81097cc:	2b00      	cmp	r3, #0
 81097ce:	d001      	beq.n	81097d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81097d0:	2301      	movs	r3, #1
 81097d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81097d4:	4b19      	ldr	r3, [pc, #100]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81097d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81097dc:	687b      	ldr	r3, [r7, #4]
 81097de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81097e2:	4916      	ldr	r1, [pc, #88]	; (810983c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81097e4:	4313      	orrs	r3, r2
 81097e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81097e8:	687b      	ldr	r3, [r7, #4]
 81097ea:	681b      	ldr	r3, [r3, #0]
 81097ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81097f0:	2b00      	cmp	r3, #0
 81097f2:	d036      	beq.n	8109862 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81097f4:	687b      	ldr	r3, [r7, #4]
 81097f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81097fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81097fe:	d01f      	beq.n	8109840 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8109800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109804:	d817      	bhi.n	8109836 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8109806:	2b00      	cmp	r3, #0
 8109808:	d003      	beq.n	8109812 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810980a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810980e:	d009      	beq.n	8109824 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8109810:	e011      	b.n	8109836 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109812:	687b      	ldr	r3, [r7, #4]
 8109814:	3304      	adds	r3, #4
 8109816:	2100      	movs	r1, #0
 8109818:	4618      	mov	r0, r3
 810981a:	f000 fbfd 	bl	810a018 <RCCEx_PLL2_Config>
 810981e:	4603      	mov	r3, r0
 8109820:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109822:	e00e      	b.n	8109842 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109824:	687b      	ldr	r3, [r7, #4]
 8109826:	3324      	adds	r3, #36	; 0x24
 8109828:	2102      	movs	r1, #2
 810982a:	4618      	mov	r0, r3
 810982c:	f000 fca6 	bl	810a17c <RCCEx_PLL3_Config>
 8109830:	4603      	mov	r3, r0
 8109832:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109834:	e005      	b.n	8109842 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109836:	2301      	movs	r3, #1
 8109838:	75fb      	strb	r3, [r7, #23]
      break;
 810983a:	e002      	b.n	8109842 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810983c:	58024400 	.word	0x58024400
      break;
 8109840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109842:	7dfb      	ldrb	r3, [r7, #23]
 8109844:	2b00      	cmp	r3, #0
 8109846:	d10a      	bne.n	810985e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8109848:	4b93      	ldr	r3, [pc, #588]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810984a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810984c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8109850:	687b      	ldr	r3, [r7, #4]
 8109852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109856:	4990      	ldr	r1, [pc, #576]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109858:	4313      	orrs	r3, r2
 810985a:	658b      	str	r3, [r1, #88]	; 0x58
 810985c:	e001      	b.n	8109862 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810985e:	7dfb      	ldrb	r3, [r7, #23]
 8109860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8109862:	687b      	ldr	r3, [r7, #4]
 8109864:	681b      	ldr	r3, [r3, #0]
 8109866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810986a:	2b00      	cmp	r3, #0
 810986c:	d033      	beq.n	81098d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109878:	d01c      	beq.n	81098b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810987a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810987e:	d816      	bhi.n	81098ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8109880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109884:	d003      	beq.n	810988e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8109886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810988a:	d007      	beq.n	810989c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810988c:	e00f      	b.n	81098ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810988e:	4b82      	ldr	r3, [pc, #520]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109892:	4a81      	ldr	r2, [pc, #516]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810989a:	e00c      	b.n	81098b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810989c:	687b      	ldr	r3, [r7, #4]
 810989e:	3324      	adds	r3, #36	; 0x24
 81098a0:	2101      	movs	r1, #1
 81098a2:	4618      	mov	r0, r3
 81098a4:	f000 fc6a 	bl	810a17c <RCCEx_PLL3_Config>
 81098a8:	4603      	mov	r3, r0
 81098aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81098ac:	e003      	b.n	81098b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81098ae:	2301      	movs	r3, #1
 81098b0:	75fb      	strb	r3, [r7, #23]
      break;
 81098b2:	e000      	b.n	81098b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81098b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81098b6:	7dfb      	ldrb	r3, [r7, #23]
 81098b8:	2b00      	cmp	r3, #0
 81098ba:	d10a      	bne.n	81098d2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81098bc:	4b76      	ldr	r3, [pc, #472]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81098be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81098c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81098ca:	4973      	ldr	r1, [pc, #460]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81098cc:	4313      	orrs	r3, r2
 81098ce:	654b      	str	r3, [r1, #84]	; 0x54
 81098d0:	e001      	b.n	81098d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81098d2:	7dfb      	ldrb	r3, [r7, #23]
 81098d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81098d6:	687b      	ldr	r3, [r7, #4]
 81098d8:	681b      	ldr	r3, [r3, #0]
 81098da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81098de:	2b00      	cmp	r3, #0
 81098e0:	d029      	beq.n	8109936 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81098e2:	687b      	ldr	r3, [r7, #4]
 81098e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81098e6:	2b00      	cmp	r3, #0
 81098e8:	d003      	beq.n	81098f2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81098ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81098ee:	d007      	beq.n	8109900 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81098f0:	e00f      	b.n	8109912 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81098f2:	4b69      	ldr	r3, [pc, #420]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81098f6:	4a68      	ldr	r2, [pc, #416]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81098f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81098fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81098fe:	e00b      	b.n	8109918 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109900:	687b      	ldr	r3, [r7, #4]
 8109902:	3304      	adds	r3, #4
 8109904:	2102      	movs	r1, #2
 8109906:	4618      	mov	r0, r3
 8109908:	f000 fb86 	bl	810a018 <RCCEx_PLL2_Config>
 810990c:	4603      	mov	r3, r0
 810990e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109910:	e002      	b.n	8109918 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8109912:	2301      	movs	r3, #1
 8109914:	75fb      	strb	r3, [r7, #23]
      break;
 8109916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109918:	7dfb      	ldrb	r3, [r7, #23]
 810991a:	2b00      	cmp	r3, #0
 810991c:	d109      	bne.n	8109932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810991e:	4b5e      	ldr	r3, [pc, #376]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109922:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8109926:	687b      	ldr	r3, [r7, #4]
 8109928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810992a:	495b      	ldr	r1, [pc, #364]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810992c:	4313      	orrs	r3, r2
 810992e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109930:	e001      	b.n	8109936 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109932:	7dfb      	ldrb	r3, [r7, #23]
 8109934:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810993e:	2b00      	cmp	r3, #0
 8109940:	d00a      	beq.n	8109958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8109942:	687b      	ldr	r3, [r7, #4]
 8109944:	3324      	adds	r3, #36	; 0x24
 8109946:	2102      	movs	r1, #2
 8109948:	4618      	mov	r0, r3
 810994a:	f000 fc17 	bl	810a17c <RCCEx_PLL3_Config>
 810994e:	4603      	mov	r3, r0
 8109950:	2b00      	cmp	r3, #0
 8109952:	d001      	beq.n	8109958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8109954:	2301      	movs	r3, #1
 8109956:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8109958:	687b      	ldr	r3, [r7, #4]
 810995a:	681b      	ldr	r3, [r3, #0]
 810995c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109960:	2b00      	cmp	r3, #0
 8109962:	d030      	beq.n	81099c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810996c:	d017      	beq.n	810999e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810996e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109972:	d811      	bhi.n	8109998 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109978:	d013      	beq.n	81099a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810997a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810997e:	d80b      	bhi.n	8109998 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109980:	2b00      	cmp	r3, #0
 8109982:	d010      	beq.n	81099a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109988:	d106      	bne.n	8109998 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810998a:	4b43      	ldr	r3, [pc, #268]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810998e:	4a42      	ldr	r2, [pc, #264]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109996:	e007      	b.n	81099a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109998:	2301      	movs	r3, #1
 810999a:	75fb      	strb	r3, [r7, #23]
      break;
 810999c:	e004      	b.n	81099a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810999e:	bf00      	nop
 81099a0:	e002      	b.n	81099a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81099a2:	bf00      	nop
 81099a4:	e000      	b.n	81099a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81099a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81099a8:	7dfb      	ldrb	r3, [r7, #23]
 81099aa:	2b00      	cmp	r3, #0
 81099ac:	d109      	bne.n	81099c2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81099ae:	4b3a      	ldr	r3, [pc, #232]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81099b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81099ba:	4937      	ldr	r1, [pc, #220]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099bc:	4313      	orrs	r3, r2
 81099be:	654b      	str	r3, [r1, #84]	; 0x54
 81099c0:	e001      	b.n	81099c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81099c2:	7dfb      	ldrb	r3, [r7, #23]
 81099c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81099c6:	687b      	ldr	r3, [r7, #4]
 81099c8:	681b      	ldr	r3, [r3, #0]
 81099ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81099ce:	2b00      	cmp	r3, #0
 81099d0:	d008      	beq.n	81099e4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81099d2:	4b31      	ldr	r3, [pc, #196]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81099d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81099da:	687b      	ldr	r3, [r7, #4]
 81099dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81099de:	492e      	ldr	r1, [pc, #184]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099e0:	4313      	orrs	r3, r2
 81099e2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81099e4:	687b      	ldr	r3, [r7, #4]
 81099e6:	681b      	ldr	r3, [r3, #0]
 81099e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81099ec:	2b00      	cmp	r3, #0
 81099ee:	d009      	beq.n	8109a04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81099f0:	4b29      	ldr	r3, [pc, #164]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81099f2:	691b      	ldr	r3, [r3, #16]
 81099f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81099fe:	4926      	ldr	r1, [pc, #152]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a00:	4313      	orrs	r3, r2
 8109a02:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8109a04:	687b      	ldr	r3, [r7, #4]
 8109a06:	681b      	ldr	r3, [r3, #0]
 8109a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109a0c:	2b00      	cmp	r3, #0
 8109a0e:	d008      	beq.n	8109a22 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8109a10:	4b21      	ldr	r3, [pc, #132]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109a14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109a1c:	491e      	ldr	r1, [pc, #120]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a1e:	4313      	orrs	r3, r2
 8109a20:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8109a22:	687b      	ldr	r3, [r7, #4]
 8109a24:	681b      	ldr	r3, [r3, #0]
 8109a26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109a2a:	2b00      	cmp	r3, #0
 8109a2c:	d00d      	beq.n	8109a4a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8109a2e:	4b1a      	ldr	r3, [pc, #104]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a30:	691b      	ldr	r3, [r3, #16]
 8109a32:	4a19      	ldr	r2, [pc, #100]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8109a38:	6113      	str	r3, [r2, #16]
 8109a3a:	4b17      	ldr	r3, [pc, #92]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a3c:	691a      	ldr	r2, [r3, #16]
 8109a3e:	687b      	ldr	r3, [r7, #4]
 8109a40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8109a44:	4914      	ldr	r1, [pc, #80]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a46:	4313      	orrs	r3, r2
 8109a48:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	681b      	ldr	r3, [r3, #0]
 8109a4e:	2b00      	cmp	r3, #0
 8109a50:	da08      	bge.n	8109a64 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8109a52:	4b11      	ldr	r3, [pc, #68]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8109a5a:	687b      	ldr	r3, [r7, #4]
 8109a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109a5e:	490e      	ldr	r1, [pc, #56]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a60:	4313      	orrs	r3, r2
 8109a62:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8109a64:	687b      	ldr	r3, [r7, #4]
 8109a66:	681b      	ldr	r3, [r3, #0]
 8109a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109a6c:	2b00      	cmp	r3, #0
 8109a6e:	d009      	beq.n	8109a84 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8109a70:	4b09      	ldr	r3, [pc, #36]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109a74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109a7e:	4906      	ldr	r1, [pc, #24]	; (8109a98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109a80:	4313      	orrs	r3, r2
 8109a82:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8109a84:	7dbb      	ldrb	r3, [r7, #22]
 8109a86:	2b00      	cmp	r3, #0
 8109a88:	d101      	bne.n	8109a8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8109a8a:	2300      	movs	r3, #0
 8109a8c:	e000      	b.n	8109a90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8109a8e:	2301      	movs	r3, #1
}
 8109a90:	4618      	mov	r0, r3
 8109a92:	3718      	adds	r7, #24
 8109a94:	46bd      	mov	sp, r7
 8109a96:	bd80      	pop	{r7, pc}
 8109a98:	58024400 	.word	0x58024400

08109a9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109a9c:	b580      	push	{r7, lr}
 8109a9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8109aa0:	f7ff f85e 	bl	8108b60 <HAL_RCC_GetHCLKFreq>
 8109aa4:	4602      	mov	r2, r0
 8109aa6:	4b06      	ldr	r3, [pc, #24]	; (8109ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109aa8:	6a1b      	ldr	r3, [r3, #32]
 8109aaa:	091b      	lsrs	r3, r3, #4
 8109aac:	f003 0307 	and.w	r3, r3, #7
 8109ab0:	4904      	ldr	r1, [pc, #16]	; (8109ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8109ab2:	5ccb      	ldrb	r3, [r1, r3]
 8109ab4:	f003 031f 	and.w	r3, r3, #31
 8109ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109abc:	4618      	mov	r0, r3
 8109abe:	bd80      	pop	{r7, pc}
 8109ac0:	58024400 	.word	0x58024400
 8109ac4:	0810d8e4 	.word	0x0810d8e4

08109ac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8109ac8:	b480      	push	{r7}
 8109aca:	b089      	sub	sp, #36	; 0x24
 8109acc:	af00      	add	r7, sp, #0
 8109ace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109ad0:	4ba1      	ldr	r3, [pc, #644]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ad4:	f003 0303 	and.w	r3, r3, #3
 8109ad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8109ada:	4b9f      	ldr	r3, [pc, #636]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ade:	0b1b      	lsrs	r3, r3, #12
 8109ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109ae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109ae6:	4b9c      	ldr	r3, [pc, #624]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109aea:	091b      	lsrs	r3, r3, #4
 8109aec:	f003 0301 	and.w	r3, r3, #1
 8109af0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8109af2:	4b99      	ldr	r3, [pc, #612]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109af6:	08db      	lsrs	r3, r3, #3
 8109af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109afc:	693a      	ldr	r2, [r7, #16]
 8109afe:	fb02 f303 	mul.w	r3, r2, r3
 8109b02:	ee07 3a90 	vmov	s15, r3
 8109b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8109b0e:	697b      	ldr	r3, [r7, #20]
 8109b10:	2b00      	cmp	r3, #0
 8109b12:	f000 8111 	beq.w	8109d38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8109b16:	69bb      	ldr	r3, [r7, #24]
 8109b18:	2b02      	cmp	r3, #2
 8109b1a:	f000 8083 	beq.w	8109c24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8109b1e:	69bb      	ldr	r3, [r7, #24]
 8109b20:	2b02      	cmp	r3, #2
 8109b22:	f200 80a1 	bhi.w	8109c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8109b26:	69bb      	ldr	r3, [r7, #24]
 8109b28:	2b00      	cmp	r3, #0
 8109b2a:	d003      	beq.n	8109b34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8109b2c:	69bb      	ldr	r3, [r7, #24]
 8109b2e:	2b01      	cmp	r3, #1
 8109b30:	d056      	beq.n	8109be0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8109b32:	e099      	b.n	8109c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109b34:	4b88      	ldr	r3, [pc, #544]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b36:	681b      	ldr	r3, [r3, #0]
 8109b38:	f003 0320 	and.w	r3, r3, #32
 8109b3c:	2b00      	cmp	r3, #0
 8109b3e:	d02d      	beq.n	8109b9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109b40:	4b85      	ldr	r3, [pc, #532]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b42:	681b      	ldr	r3, [r3, #0]
 8109b44:	08db      	lsrs	r3, r3, #3
 8109b46:	f003 0303 	and.w	r3, r3, #3
 8109b4a:	4a84      	ldr	r2, [pc, #528]	; (8109d5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8109b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8109b50:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109b52:	68bb      	ldr	r3, [r7, #8]
 8109b54:	ee07 3a90 	vmov	s15, r3
 8109b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109b5c:	697b      	ldr	r3, [r7, #20]
 8109b5e:	ee07 3a90 	vmov	s15, r3
 8109b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109b6a:	4b7b      	ldr	r3, [pc, #492]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109b72:	ee07 3a90 	vmov	s15, r3
 8109b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8109b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109b96:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109b9a:	e087      	b.n	8109cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109b9c:	697b      	ldr	r3, [r7, #20]
 8109b9e:	ee07 3a90 	vmov	s15, r3
 8109ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109d64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109bae:	4b6a      	ldr	r3, [pc, #424]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109bb6:	ee07 3a90 	vmov	s15, r3
 8109bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8109bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109bde:	e065      	b.n	8109cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109be0:	697b      	ldr	r3, [r7, #20]
 8109be2:	ee07 3a90 	vmov	s15, r3
 8109be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109bf2:	4b59      	ldr	r3, [pc, #356]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109bfa:	ee07 3a90 	vmov	s15, r3
 8109bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8109c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109c22:	e043      	b.n	8109cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109c24:	697b      	ldr	r3, [r7, #20]
 8109c26:	ee07 3a90 	vmov	s15, r3
 8109c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8109c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109c36:	4b48      	ldr	r3, [pc, #288]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109c3e:	ee07 3a90 	vmov	s15, r3
 8109c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8109c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109c66:	e021      	b.n	8109cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109c68:	697b      	ldr	r3, [r7, #20]
 8109c6a:	ee07 3a90 	vmov	s15, r3
 8109c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109c7a:	4b37      	ldr	r3, [pc, #220]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109c82:	ee07 3a90 	vmov	s15, r3
 8109c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8109c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109ca6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109caa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8109cac:	4b2a      	ldr	r3, [pc, #168]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109cb0:	0a5b      	lsrs	r3, r3, #9
 8109cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109cb6:	ee07 3a90 	vmov	s15, r3
 8109cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8109cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109cd2:	ee17 2a90 	vmov	r2, s15
 8109cd6:	687b      	ldr	r3, [r7, #4]
 8109cd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8109cda:	4b1f      	ldr	r3, [pc, #124]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109cde:	0c1b      	lsrs	r3, r3, #16
 8109ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109ce4:	ee07 3a90 	vmov	s15, r3
 8109ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8109cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109d00:	ee17 2a90 	vmov	r2, s15
 8109d04:	687b      	ldr	r3, [r7, #4]
 8109d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8109d08:	4b13      	ldr	r3, [pc, #76]	; (8109d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109d0c:	0e1b      	lsrs	r3, r3, #24
 8109d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109d12:	ee07 3a90 	vmov	s15, r3
 8109d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8109d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109d2e:	ee17 2a90 	vmov	r2, s15
 8109d32:	687b      	ldr	r3, [r7, #4]
 8109d34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8109d36:	e008      	b.n	8109d4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	2200      	movs	r2, #0
 8109d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8109d3e:	687b      	ldr	r3, [r7, #4]
 8109d40:	2200      	movs	r2, #0
 8109d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	2200      	movs	r2, #0
 8109d48:	609a      	str	r2, [r3, #8]
}
 8109d4a:	bf00      	nop
 8109d4c:	3724      	adds	r7, #36	; 0x24
 8109d4e:	46bd      	mov	sp, r7
 8109d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d54:	4770      	bx	lr
 8109d56:	bf00      	nop
 8109d58:	58024400 	.word	0x58024400
 8109d5c:	03d09000 	.word	0x03d09000
 8109d60:	46000000 	.word	0x46000000
 8109d64:	4c742400 	.word	0x4c742400
 8109d68:	4a742400 	.word	0x4a742400
 8109d6c:	4b742400 	.word	0x4b742400

08109d70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8109d70:	b480      	push	{r7}
 8109d72:	b089      	sub	sp, #36	; 0x24
 8109d74:	af00      	add	r7, sp, #0
 8109d76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109d78:	4ba1      	ldr	r3, [pc, #644]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109d7c:	f003 0303 	and.w	r3, r3, #3
 8109d80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8109d82:	4b9f      	ldr	r3, [pc, #636]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109d86:	0d1b      	lsrs	r3, r3, #20
 8109d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109d8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8109d8e:	4b9c      	ldr	r3, [pc, #624]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109d92:	0a1b      	lsrs	r3, r3, #8
 8109d94:	f003 0301 	and.w	r3, r3, #1
 8109d98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8109d9a:	4b99      	ldr	r3, [pc, #612]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109d9e:	08db      	lsrs	r3, r3, #3
 8109da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109da4:	693a      	ldr	r2, [r7, #16]
 8109da6:	fb02 f303 	mul.w	r3, r2, r3
 8109daa:	ee07 3a90 	vmov	s15, r3
 8109dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109db2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109db6:	697b      	ldr	r3, [r7, #20]
 8109db8:	2b00      	cmp	r3, #0
 8109dba:	f000 8111 	beq.w	8109fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8109dbe:	69bb      	ldr	r3, [r7, #24]
 8109dc0:	2b02      	cmp	r3, #2
 8109dc2:	f000 8083 	beq.w	8109ecc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109dc6:	69bb      	ldr	r3, [r7, #24]
 8109dc8:	2b02      	cmp	r3, #2
 8109dca:	f200 80a1 	bhi.w	8109f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8109dce:	69bb      	ldr	r3, [r7, #24]
 8109dd0:	2b00      	cmp	r3, #0
 8109dd2:	d003      	beq.n	8109ddc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109dd4:	69bb      	ldr	r3, [r7, #24]
 8109dd6:	2b01      	cmp	r3, #1
 8109dd8:	d056      	beq.n	8109e88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109dda:	e099      	b.n	8109f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109ddc:	4b88      	ldr	r3, [pc, #544]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109dde:	681b      	ldr	r3, [r3, #0]
 8109de0:	f003 0320 	and.w	r3, r3, #32
 8109de4:	2b00      	cmp	r3, #0
 8109de6:	d02d      	beq.n	8109e44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109de8:	4b85      	ldr	r3, [pc, #532]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	08db      	lsrs	r3, r3, #3
 8109dee:	f003 0303 	and.w	r3, r3, #3
 8109df2:	4a84      	ldr	r2, [pc, #528]	; (810a004 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109df4:	fa22 f303 	lsr.w	r3, r2, r3
 8109df8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109dfa:	68bb      	ldr	r3, [r7, #8]
 8109dfc:	ee07 3a90 	vmov	s15, r3
 8109e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109e04:	697b      	ldr	r3, [r7, #20]
 8109e06:	ee07 3a90 	vmov	s15, r3
 8109e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109e12:	4b7b      	ldr	r3, [pc, #492]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109e1a:	ee07 3a90 	vmov	s15, r3
 8109e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8109e26:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109e42:	e087      	b.n	8109f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109e44:	697b      	ldr	r3, [r7, #20]
 8109e46:	ee07 3a90 	vmov	s15, r3
 8109e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a00c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8109e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109e56:	4b6a      	ldr	r3, [pc, #424]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109e5e:	ee07 3a90 	vmov	s15, r3
 8109e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8109e6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109e86:	e065      	b.n	8109f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109e88:	697b      	ldr	r3, [r7, #20]
 8109e8a:	ee07 3a90 	vmov	s15, r3
 8109e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109e92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109e9a:	4b59      	ldr	r3, [pc, #356]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109ea2:	ee07 3a90 	vmov	s15, r3
 8109ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8109eae:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109eca:	e043      	b.n	8109f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109ecc:	697b      	ldr	r3, [r7, #20]
 8109ece:	ee07 3a90 	vmov	s15, r3
 8109ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8109eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109ede:	4b48      	ldr	r3, [pc, #288]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109ee6:	ee07 3a90 	vmov	s15, r3
 8109eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8109ef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109f0e:	e021      	b.n	8109f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109f10:	697b      	ldr	r3, [r7, #20]
 8109f12:	ee07 3a90 	vmov	s15, r3
 8109f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f22:	4b37      	ldr	r3, [pc, #220]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f2a:	ee07 3a90 	vmov	s15, r3
 8109f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8109f36:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109f52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8109f54:	4b2a      	ldr	r3, [pc, #168]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109f58:	0a5b      	lsrs	r3, r3, #9
 8109f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109f5e:	ee07 3a90 	vmov	s15, r3
 8109f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8109f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109f7a:	ee17 2a90 	vmov	r2, s15
 8109f7e:	687b      	ldr	r3, [r7, #4]
 8109f80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8109f82:	4b1f      	ldr	r3, [pc, #124]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109f86:	0c1b      	lsrs	r3, r3, #16
 8109f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109f8c:	ee07 3a90 	vmov	s15, r3
 8109f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109fa8:	ee17 2a90 	vmov	r2, s15
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8109fb0:	4b13      	ldr	r3, [pc, #76]	; (810a000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109fb4:	0e1b      	lsrs	r3, r3, #24
 8109fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109fba:	ee07 3a90 	vmov	s15, r3
 8109fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8109fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109fd6:	ee17 2a90 	vmov	r2, s15
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8109fde:	e008      	b.n	8109ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8109fe0:	687b      	ldr	r3, [r7, #4]
 8109fe2:	2200      	movs	r2, #0
 8109fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	2200      	movs	r2, #0
 8109fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8109fec:	687b      	ldr	r3, [r7, #4]
 8109fee:	2200      	movs	r2, #0
 8109ff0:	609a      	str	r2, [r3, #8]
}
 8109ff2:	bf00      	nop
 8109ff4:	3724      	adds	r7, #36	; 0x24
 8109ff6:	46bd      	mov	sp, r7
 8109ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ffc:	4770      	bx	lr
 8109ffe:	bf00      	nop
 810a000:	58024400 	.word	0x58024400
 810a004:	03d09000 	.word	0x03d09000
 810a008:	46000000 	.word	0x46000000
 810a00c:	4c742400 	.word	0x4c742400
 810a010:	4a742400 	.word	0x4a742400
 810a014:	4b742400 	.word	0x4b742400

0810a018 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a018:	b580      	push	{r7, lr}
 810a01a:	b084      	sub	sp, #16
 810a01c:	af00      	add	r7, sp, #0
 810a01e:	6078      	str	r0, [r7, #4]
 810a020:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a022:	2300      	movs	r3, #0
 810a024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a026:	4b54      	ldr	r3, [pc, #336]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a02a:	f003 0303 	and.w	r3, r3, #3
 810a02e:	2b03      	cmp	r3, #3
 810a030:	d101      	bne.n	810a036 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a032:	2301      	movs	r3, #1
 810a034:	e09b      	b.n	810a16e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a036:	4b50      	ldr	r3, [pc, #320]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a038:	681b      	ldr	r3, [r3, #0]
 810a03a:	4a4f      	ldr	r2, [pc, #316]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a03c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810a040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a042:	f7f9 fb15 	bl	8103670 <HAL_GetTick>
 810a046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a048:	e008      	b.n	810a05c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a04a:	f7f9 fb11 	bl	8103670 <HAL_GetTick>
 810a04e:	4602      	mov	r2, r0
 810a050:	68bb      	ldr	r3, [r7, #8]
 810a052:	1ad3      	subs	r3, r2, r3
 810a054:	2b02      	cmp	r3, #2
 810a056:	d901      	bls.n	810a05c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a058:	2303      	movs	r3, #3
 810a05a:	e088      	b.n	810a16e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a05c:	4b46      	ldr	r3, [pc, #280]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a064:	2b00      	cmp	r3, #0
 810a066:	d1f0      	bne.n	810a04a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a068:	4b43      	ldr	r3, [pc, #268]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a06c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810a070:	687b      	ldr	r3, [r7, #4]
 810a072:	681b      	ldr	r3, [r3, #0]
 810a074:	031b      	lsls	r3, r3, #12
 810a076:	4940      	ldr	r1, [pc, #256]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a078:	4313      	orrs	r3, r2
 810a07a:	628b      	str	r3, [r1, #40]	; 0x28
 810a07c:	687b      	ldr	r3, [r7, #4]
 810a07e:	685b      	ldr	r3, [r3, #4]
 810a080:	3b01      	subs	r3, #1
 810a082:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	689b      	ldr	r3, [r3, #8]
 810a08a:	3b01      	subs	r3, #1
 810a08c:	025b      	lsls	r3, r3, #9
 810a08e:	b29b      	uxth	r3, r3
 810a090:	431a      	orrs	r2, r3
 810a092:	687b      	ldr	r3, [r7, #4]
 810a094:	68db      	ldr	r3, [r3, #12]
 810a096:	3b01      	subs	r3, #1
 810a098:	041b      	lsls	r3, r3, #16
 810a09a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a09e:	431a      	orrs	r2, r3
 810a0a0:	687b      	ldr	r3, [r7, #4]
 810a0a2:	691b      	ldr	r3, [r3, #16]
 810a0a4:	3b01      	subs	r3, #1
 810a0a6:	061b      	lsls	r3, r3, #24
 810a0a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a0ac:	4932      	ldr	r1, [pc, #200]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0ae:	4313      	orrs	r3, r2
 810a0b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a0b2:	4b31      	ldr	r3, [pc, #196]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	695b      	ldr	r3, [r3, #20]
 810a0be:	492e      	ldr	r1, [pc, #184]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0c0:	4313      	orrs	r3, r2
 810a0c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a0c4:	4b2c      	ldr	r3, [pc, #176]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0c8:	f023 0220 	bic.w	r2, r3, #32
 810a0cc:	687b      	ldr	r3, [r7, #4]
 810a0ce:	699b      	ldr	r3, [r3, #24]
 810a0d0:	4929      	ldr	r1, [pc, #164]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0d2:	4313      	orrs	r3, r2
 810a0d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a0d6:	4b28      	ldr	r3, [pc, #160]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0da:	4a27      	ldr	r2, [pc, #156]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0dc:	f023 0310 	bic.w	r3, r3, #16
 810a0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a0e2:	4b25      	ldr	r3, [pc, #148]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a0e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a0ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a0ee:	687a      	ldr	r2, [r7, #4]
 810a0f0:	69d2      	ldr	r2, [r2, #28]
 810a0f2:	00d2      	lsls	r2, r2, #3
 810a0f4:	4920      	ldr	r1, [pc, #128]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0f6:	4313      	orrs	r3, r2
 810a0f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a0fa:	4b1f      	ldr	r3, [pc, #124]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a0fe:	4a1e      	ldr	r2, [pc, #120]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a100:	f043 0310 	orr.w	r3, r3, #16
 810a104:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a106:	683b      	ldr	r3, [r7, #0]
 810a108:	2b00      	cmp	r3, #0
 810a10a:	d106      	bne.n	810a11a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a10c:	4b1a      	ldr	r3, [pc, #104]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a110:	4a19      	ldr	r2, [pc, #100]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810a116:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a118:	e00f      	b.n	810a13a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a11a:	683b      	ldr	r3, [r7, #0]
 810a11c:	2b01      	cmp	r3, #1
 810a11e:	d106      	bne.n	810a12e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a120:	4b15      	ldr	r3, [pc, #84]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a124:	4a14      	ldr	r2, [pc, #80]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a12a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a12c:	e005      	b.n	810a13a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a12e:	4b12      	ldr	r3, [pc, #72]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a132:	4a11      	ldr	r2, [pc, #68]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810a138:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a13a:	4b0f      	ldr	r3, [pc, #60]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a13c:	681b      	ldr	r3, [r3, #0]
 810a13e:	4a0e      	ldr	r2, [pc, #56]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810a144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a146:	f7f9 fa93 	bl	8103670 <HAL_GetTick>
 810a14a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a14c:	e008      	b.n	810a160 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a14e:	f7f9 fa8f 	bl	8103670 <HAL_GetTick>
 810a152:	4602      	mov	r2, r0
 810a154:	68bb      	ldr	r3, [r7, #8]
 810a156:	1ad3      	subs	r3, r2, r3
 810a158:	2b02      	cmp	r3, #2
 810a15a:	d901      	bls.n	810a160 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a15c:	2303      	movs	r3, #3
 810a15e:	e006      	b.n	810a16e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a160:	4b05      	ldr	r3, [pc, #20]	; (810a178 <RCCEx_PLL2_Config+0x160>)
 810a162:	681b      	ldr	r3, [r3, #0]
 810a164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a168:	2b00      	cmp	r3, #0
 810a16a:	d0f0      	beq.n	810a14e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 810a16e:	4618      	mov	r0, r3
 810a170:	3710      	adds	r7, #16
 810a172:	46bd      	mov	sp, r7
 810a174:	bd80      	pop	{r7, pc}
 810a176:	bf00      	nop
 810a178:	58024400 	.word	0x58024400

0810a17c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a17c:	b580      	push	{r7, lr}
 810a17e:	b084      	sub	sp, #16
 810a180:	af00      	add	r7, sp, #0
 810a182:	6078      	str	r0, [r7, #4]
 810a184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a186:	2300      	movs	r3, #0
 810a188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a18a:	4b54      	ldr	r3, [pc, #336]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a18e:	f003 0303 	and.w	r3, r3, #3
 810a192:	2b03      	cmp	r3, #3
 810a194:	d101      	bne.n	810a19a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a196:	2301      	movs	r3, #1
 810a198:	e09b      	b.n	810a2d2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a19a:	4b50      	ldr	r3, [pc, #320]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a19c:	681b      	ldr	r3, [r3, #0]
 810a19e:	4a4f      	ldr	r2, [pc, #316]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a1a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a1a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a1a6:	f7f9 fa63 	bl	8103670 <HAL_GetTick>
 810a1aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a1ac:	e008      	b.n	810a1c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a1ae:	f7f9 fa5f 	bl	8103670 <HAL_GetTick>
 810a1b2:	4602      	mov	r2, r0
 810a1b4:	68bb      	ldr	r3, [r7, #8]
 810a1b6:	1ad3      	subs	r3, r2, r3
 810a1b8:	2b02      	cmp	r3, #2
 810a1ba:	d901      	bls.n	810a1c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a1bc:	2303      	movs	r3, #3
 810a1be:	e088      	b.n	810a2d2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a1c0:	4b46      	ldr	r3, [pc, #280]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a1c2:	681b      	ldr	r3, [r3, #0]
 810a1c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a1c8:	2b00      	cmp	r3, #0
 810a1ca:	d1f0      	bne.n	810a1ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a1cc:	4b43      	ldr	r3, [pc, #268]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a1d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810a1d4:	687b      	ldr	r3, [r7, #4]
 810a1d6:	681b      	ldr	r3, [r3, #0]
 810a1d8:	051b      	lsls	r3, r3, #20
 810a1da:	4940      	ldr	r1, [pc, #256]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a1dc:	4313      	orrs	r3, r2
 810a1de:	628b      	str	r3, [r1, #40]	; 0x28
 810a1e0:	687b      	ldr	r3, [r7, #4]
 810a1e2:	685b      	ldr	r3, [r3, #4]
 810a1e4:	3b01      	subs	r3, #1
 810a1e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a1ea:	687b      	ldr	r3, [r7, #4]
 810a1ec:	689b      	ldr	r3, [r3, #8]
 810a1ee:	3b01      	subs	r3, #1
 810a1f0:	025b      	lsls	r3, r3, #9
 810a1f2:	b29b      	uxth	r3, r3
 810a1f4:	431a      	orrs	r2, r3
 810a1f6:	687b      	ldr	r3, [r7, #4]
 810a1f8:	68db      	ldr	r3, [r3, #12]
 810a1fa:	3b01      	subs	r3, #1
 810a1fc:	041b      	lsls	r3, r3, #16
 810a1fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a202:	431a      	orrs	r2, r3
 810a204:	687b      	ldr	r3, [r7, #4]
 810a206:	691b      	ldr	r3, [r3, #16]
 810a208:	3b01      	subs	r3, #1
 810a20a:	061b      	lsls	r3, r3, #24
 810a20c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a210:	4932      	ldr	r1, [pc, #200]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a212:	4313      	orrs	r3, r2
 810a214:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a216:	4b31      	ldr	r3, [pc, #196]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a21a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	695b      	ldr	r3, [r3, #20]
 810a222:	492e      	ldr	r1, [pc, #184]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a224:	4313      	orrs	r3, r2
 810a226:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a228:	4b2c      	ldr	r3, [pc, #176]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a22c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810a230:	687b      	ldr	r3, [r7, #4]
 810a232:	699b      	ldr	r3, [r3, #24]
 810a234:	4929      	ldr	r1, [pc, #164]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a236:	4313      	orrs	r3, r2
 810a238:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a23a:	4b28      	ldr	r3, [pc, #160]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a23e:	4a27      	ldr	r2, [pc, #156]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a244:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a246:	4b25      	ldr	r3, [pc, #148]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a24a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a24e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a252:	687a      	ldr	r2, [r7, #4]
 810a254:	69d2      	ldr	r2, [r2, #28]
 810a256:	00d2      	lsls	r2, r2, #3
 810a258:	4920      	ldr	r1, [pc, #128]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a25a:	4313      	orrs	r3, r2
 810a25c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a25e:	4b1f      	ldr	r3, [pc, #124]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a262:	4a1e      	ldr	r2, [pc, #120]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a26a:	683b      	ldr	r3, [r7, #0]
 810a26c:	2b00      	cmp	r3, #0
 810a26e:	d106      	bne.n	810a27e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a270:	4b1a      	ldr	r3, [pc, #104]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a274:	4a19      	ldr	r2, [pc, #100]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a276:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810a27a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a27c:	e00f      	b.n	810a29e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a27e:	683b      	ldr	r3, [r7, #0]
 810a280:	2b01      	cmp	r3, #1
 810a282:	d106      	bne.n	810a292 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a284:	4b15      	ldr	r3, [pc, #84]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a288:	4a14      	ldr	r2, [pc, #80]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a28a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810a28e:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a290:	e005      	b.n	810a29e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a292:	4b12      	ldr	r3, [pc, #72]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a296:	4a11      	ldr	r2, [pc, #68]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810a29c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a29e:	4b0f      	ldr	r3, [pc, #60]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a2a0:	681b      	ldr	r3, [r3, #0]
 810a2a2:	4a0e      	ldr	r2, [pc, #56]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a2a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810a2a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a2aa:	f7f9 f9e1 	bl	8103670 <HAL_GetTick>
 810a2ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a2b0:	e008      	b.n	810a2c4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a2b2:	f7f9 f9dd 	bl	8103670 <HAL_GetTick>
 810a2b6:	4602      	mov	r2, r0
 810a2b8:	68bb      	ldr	r3, [r7, #8]
 810a2ba:	1ad3      	subs	r3, r2, r3
 810a2bc:	2b02      	cmp	r3, #2
 810a2be:	d901      	bls.n	810a2c4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a2c0:	2303      	movs	r3, #3
 810a2c2:	e006      	b.n	810a2d2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a2c4:	4b05      	ldr	r3, [pc, #20]	; (810a2dc <RCCEx_PLL3_Config+0x160>)
 810a2c6:	681b      	ldr	r3, [r3, #0]
 810a2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a2cc:	2b00      	cmp	r3, #0
 810a2ce:	d0f0      	beq.n	810a2b2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 810a2d2:	4618      	mov	r0, r3
 810a2d4:	3710      	adds	r7, #16
 810a2d6:	46bd      	mov	sp, r7
 810a2d8:	bd80      	pop	{r7, pc}
 810a2da:	bf00      	nop
 810a2dc:	58024400 	.word	0x58024400

0810a2e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a2e0:	b580      	push	{r7, lr}
 810a2e2:	b084      	sub	sp, #16
 810a2e4:	af00      	add	r7, sp, #0
 810a2e6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810a2e8:	2300      	movs	r3, #0
 810a2ea:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a2ec:	687b      	ldr	r3, [r7, #4]
 810a2ee:	2b00      	cmp	r3, #0
 810a2f0:	d101      	bne.n	810a2f6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810a2f2:	2301      	movs	r3, #1
 810a2f4:	e0eb      	b.n	810a4ce <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	2200      	movs	r2, #0
 810a2fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a2fc:	687b      	ldr	r3, [r7, #4]
 810a2fe:	681b      	ldr	r3, [r3, #0]
 810a300:	4a75      	ldr	r2, [pc, #468]	; (810a4d8 <HAL_SPI_Init+0x1f8>)
 810a302:	4293      	cmp	r3, r2
 810a304:	d00f      	beq.n	810a326 <HAL_SPI_Init+0x46>
 810a306:	687b      	ldr	r3, [r7, #4]
 810a308:	681b      	ldr	r3, [r3, #0]
 810a30a:	4a74      	ldr	r2, [pc, #464]	; (810a4dc <HAL_SPI_Init+0x1fc>)
 810a30c:	4293      	cmp	r3, r2
 810a30e:	d00a      	beq.n	810a326 <HAL_SPI_Init+0x46>
 810a310:	687b      	ldr	r3, [r7, #4]
 810a312:	681b      	ldr	r3, [r3, #0]
 810a314:	4a72      	ldr	r2, [pc, #456]	; (810a4e0 <HAL_SPI_Init+0x200>)
 810a316:	4293      	cmp	r3, r2
 810a318:	d005      	beq.n	810a326 <HAL_SPI_Init+0x46>
 810a31a:	687b      	ldr	r3, [r7, #4]
 810a31c:	68db      	ldr	r3, [r3, #12]
 810a31e:	2b0f      	cmp	r3, #15
 810a320:	d901      	bls.n	810a326 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810a322:	2301      	movs	r3, #1
 810a324:	e0d3      	b.n	810a4ce <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a326:	6878      	ldr	r0, [r7, #4]
 810a328:	f000 fdf9 	bl	810af1e <SPI_GetPacketSize>
 810a32c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	681b      	ldr	r3, [r3, #0]
 810a332:	4a69      	ldr	r2, [pc, #420]	; (810a4d8 <HAL_SPI_Init+0x1f8>)
 810a334:	4293      	cmp	r3, r2
 810a336:	d00c      	beq.n	810a352 <HAL_SPI_Init+0x72>
 810a338:	687b      	ldr	r3, [r7, #4]
 810a33a:	681b      	ldr	r3, [r3, #0]
 810a33c:	4a67      	ldr	r2, [pc, #412]	; (810a4dc <HAL_SPI_Init+0x1fc>)
 810a33e:	4293      	cmp	r3, r2
 810a340:	d007      	beq.n	810a352 <HAL_SPI_Init+0x72>
 810a342:	687b      	ldr	r3, [r7, #4]
 810a344:	681b      	ldr	r3, [r3, #0]
 810a346:	4a66      	ldr	r2, [pc, #408]	; (810a4e0 <HAL_SPI_Init+0x200>)
 810a348:	4293      	cmp	r3, r2
 810a34a:	d002      	beq.n	810a352 <HAL_SPI_Init+0x72>
 810a34c:	68bb      	ldr	r3, [r7, #8]
 810a34e:	2b08      	cmp	r3, #8
 810a350:	d811      	bhi.n	810a376 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a352:	687b      	ldr	r3, [r7, #4]
 810a354:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a356:	4a60      	ldr	r2, [pc, #384]	; (810a4d8 <HAL_SPI_Init+0x1f8>)
 810a358:	4293      	cmp	r3, r2
 810a35a:	d009      	beq.n	810a370 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a35c:	687b      	ldr	r3, [r7, #4]
 810a35e:	681b      	ldr	r3, [r3, #0]
 810a360:	4a5e      	ldr	r2, [pc, #376]	; (810a4dc <HAL_SPI_Init+0x1fc>)
 810a362:	4293      	cmp	r3, r2
 810a364:	d004      	beq.n	810a370 <HAL_SPI_Init+0x90>
 810a366:	687b      	ldr	r3, [r7, #4]
 810a368:	681b      	ldr	r3, [r3, #0]
 810a36a:	4a5d      	ldr	r2, [pc, #372]	; (810a4e0 <HAL_SPI_Init+0x200>)
 810a36c:	4293      	cmp	r3, r2
 810a36e:	d104      	bne.n	810a37a <HAL_SPI_Init+0x9a>
 810a370:	68bb      	ldr	r3, [r7, #8]
 810a372:	2b10      	cmp	r3, #16
 810a374:	d901      	bls.n	810a37a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810a376:	2301      	movs	r3, #1
 810a378:	e0a9      	b.n	810a4ce <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a37a:	687b      	ldr	r3, [r7, #4]
 810a37c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a380:	b2db      	uxtb	r3, r3
 810a382:	2b00      	cmp	r3, #0
 810a384:	d106      	bne.n	810a394 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a386:	687b      	ldr	r3, [r7, #4]
 810a388:	2200      	movs	r2, #0
 810a38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a38e:	6878      	ldr	r0, [r7, #4]
 810a390:	f7f8 fcce 	bl	8102d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	2202      	movs	r2, #2
 810a398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a39c:	687b      	ldr	r3, [r7, #4]
 810a39e:	681b      	ldr	r3, [r3, #0]
 810a3a0:	681a      	ldr	r2, [r3, #0]
 810a3a2:	687b      	ldr	r3, [r7, #4]
 810a3a4:	681b      	ldr	r3, [r3, #0]
 810a3a6:	f022 0201 	bic.w	r2, r2, #1
 810a3aa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	699b      	ldr	r3, [r3, #24]
 810a3b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a3b4:	d119      	bne.n	810a3ea <HAL_SPI_Init+0x10a>
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	685b      	ldr	r3, [r3, #4]
 810a3ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a3be:	d103      	bne.n	810a3c8 <HAL_SPI_Init+0xe8>
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a3c4:	2b00      	cmp	r3, #0
 810a3c6:	d008      	beq.n	810a3da <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a3cc:	2b00      	cmp	r3, #0
 810a3ce:	d10c      	bne.n	810a3ea <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a3d0:	687b      	ldr	r3, [r7, #4]
 810a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a3d8:	d107      	bne.n	810a3ea <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810a3da:	687b      	ldr	r3, [r7, #4]
 810a3dc:	681b      	ldr	r3, [r3, #0]
 810a3de:	681a      	ldr	r2, [r3, #0]
 810a3e0:	687b      	ldr	r3, [r7, #4]
 810a3e2:	681b      	ldr	r3, [r3, #0]
 810a3e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810a3e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810a3ea:	687b      	ldr	r3, [r7, #4]
 810a3ec:	69da      	ldr	r2, [r3, #28]
 810a3ee:	687b      	ldr	r3, [r7, #4]
 810a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a3f2:	431a      	orrs	r2, r3
 810a3f4:	68fb      	ldr	r3, [r7, #12]
 810a3f6:	431a      	orrs	r2, r3
 810a3f8:	687b      	ldr	r3, [r7, #4]
 810a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a3fc:	ea42 0103 	orr.w	r1, r2, r3
 810a400:	687b      	ldr	r3, [r7, #4]
 810a402:	68da      	ldr	r2, [r3, #12]
 810a404:	687b      	ldr	r3, [r7, #4]
 810a406:	681b      	ldr	r3, [r3, #0]
 810a408:	430a      	orrs	r2, r1
 810a40a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810a40c:	687b      	ldr	r3, [r7, #4]
 810a40e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a414:	431a      	orrs	r2, r3
 810a416:	687b      	ldr	r3, [r7, #4]
 810a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a41a:	431a      	orrs	r2, r3
 810a41c:	687b      	ldr	r3, [r7, #4]
 810a41e:	699b      	ldr	r3, [r3, #24]
 810a420:	431a      	orrs	r2, r3
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	691b      	ldr	r3, [r3, #16]
 810a426:	431a      	orrs	r2, r3
 810a428:	687b      	ldr	r3, [r7, #4]
 810a42a:	695b      	ldr	r3, [r3, #20]
 810a42c:	431a      	orrs	r2, r3
 810a42e:	687b      	ldr	r3, [r7, #4]
 810a430:	6a1b      	ldr	r3, [r3, #32]
 810a432:	431a      	orrs	r2, r3
 810a434:	687b      	ldr	r3, [r7, #4]
 810a436:	685b      	ldr	r3, [r3, #4]
 810a438:	431a      	orrs	r2, r3
 810a43a:	687b      	ldr	r3, [r7, #4]
 810a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a43e:	431a      	orrs	r2, r3
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	689b      	ldr	r3, [r3, #8]
 810a444:	431a      	orrs	r2, r3
 810a446:	687b      	ldr	r3, [r7, #4]
 810a448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a44a:	ea42 0103 	orr.w	r1, r2, r3
 810a44e:	687b      	ldr	r3, [r7, #4]
 810a450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810a452:	687b      	ldr	r3, [r7, #4]
 810a454:	681b      	ldr	r3, [r3, #0]
 810a456:	430a      	orrs	r2, r1
 810a458:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810a45a:	687b      	ldr	r3, [r7, #4]
 810a45c:	685b      	ldr	r3, [r3, #4]
 810a45e:	2b00      	cmp	r3, #0
 810a460:	d113      	bne.n	810a48a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810a462:	687b      	ldr	r3, [r7, #4]
 810a464:	681b      	ldr	r3, [r3, #0]
 810a466:	689b      	ldr	r3, [r3, #8]
 810a468:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810a46c:	687b      	ldr	r3, [r7, #4]
 810a46e:	681b      	ldr	r3, [r3, #0]
 810a470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a474:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810a476:	687b      	ldr	r3, [r7, #4]
 810a478:	681b      	ldr	r3, [r3, #0]
 810a47a:	689b      	ldr	r3, [r3, #8]
 810a47c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810a480:	687b      	ldr	r3, [r7, #4]
 810a482:	681b      	ldr	r3, [r3, #0]
 810a484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810a488:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	681b      	ldr	r3, [r3, #0]
 810a48e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810a490:	687b      	ldr	r3, [r7, #4]
 810a492:	681b      	ldr	r3, [r3, #0]
 810a494:	f022 0201 	bic.w	r2, r2, #1
 810a498:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810a49a:	687b      	ldr	r3, [r7, #4]
 810a49c:	685b      	ldr	r3, [r3, #4]
 810a49e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a4a2:	2b00      	cmp	r3, #0
 810a4a4:	d00a      	beq.n	810a4bc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810a4a6:	687b      	ldr	r3, [r7, #4]
 810a4a8:	681b      	ldr	r3, [r3, #0]
 810a4aa:	68db      	ldr	r3, [r3, #12]
 810a4ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810a4b0:	687b      	ldr	r3, [r7, #4]
 810a4b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a4b4:	687b      	ldr	r3, [r7, #4]
 810a4b6:	681b      	ldr	r3, [r3, #0]
 810a4b8:	430a      	orrs	r2, r1
 810a4ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810a4bc:	687b      	ldr	r3, [r7, #4]
 810a4be:	2200      	movs	r2, #0
 810a4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810a4c4:	687b      	ldr	r3, [r7, #4]
 810a4c6:	2201      	movs	r2, #1
 810a4c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810a4cc:	2300      	movs	r3, #0
}
 810a4ce:	4618      	mov	r0, r3
 810a4d0:	3710      	adds	r7, #16
 810a4d2:	46bd      	mov	sp, r7
 810a4d4:	bd80      	pop	{r7, pc}
 810a4d6:	bf00      	nop
 810a4d8:	40013000 	.word	0x40013000
 810a4dc:	40003800 	.word	0x40003800
 810a4e0:	40003c00 	.word	0x40003c00

0810a4e4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 810a4e4:	b580      	push	{r7, lr}
 810a4e6:	b086      	sub	sp, #24
 810a4e8:	af00      	add	r7, sp, #0
 810a4ea:	60f8      	str	r0, [r7, #12]
 810a4ec:	60b9      	str	r1, [r7, #8]
 810a4ee:	607a      	str	r2, [r7, #4]
 810a4f0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810a4f2:	2300      	movs	r3, #0
 810a4f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 810a4f6:	68fb      	ldr	r3, [r7, #12]
 810a4f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a4fc:	2b01      	cmp	r3, #1
 810a4fe:	d101      	bne.n	810a504 <HAL_SPI_TransmitReceive_DMA+0x20>
 810a500:	2302      	movs	r3, #2
 810a502:	e1ac      	b.n	810a85e <HAL_SPI_TransmitReceive_DMA+0x37a>
 810a504:	68fb      	ldr	r3, [r7, #12]
 810a506:	2201      	movs	r2, #1
 810a508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 810a50c:	68fb      	ldr	r3, [r7, #12]
 810a50e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a512:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 810a514:	68fb      	ldr	r3, [r7, #12]
 810a516:	685b      	ldr	r3, [r3, #4]
 810a518:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 810a51a:	693b      	ldr	r3, [r7, #16]
 810a51c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a520:	d106      	bne.n	810a530 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810a522:	68fb      	ldr	r3, [r7, #12]
 810a524:	689b      	ldr	r3, [r3, #8]
 810a526:	2b00      	cmp	r3, #0
 810a528:	d102      	bne.n	810a530 <HAL_SPI_TransmitReceive_DMA+0x4c>
 810a52a:	7dbb      	ldrb	r3, [r7, #22]
 810a52c:	2b04      	cmp	r3, #4
 810a52e:	d00a      	beq.n	810a546 <HAL_SPI_TransmitReceive_DMA+0x62>
 810a530:	7dbb      	ldrb	r3, [r7, #22]
 810a532:	2b01      	cmp	r3, #1
 810a534:	d007      	beq.n	810a546 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 810a536:	2302      	movs	r3, #2
 810a538:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810a53a:	68fb      	ldr	r3, [r7, #12]
 810a53c:	2200      	movs	r2, #0
 810a53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a542:	7dfb      	ldrb	r3, [r7, #23]
 810a544:	e18b      	b.n	810a85e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810a546:	68bb      	ldr	r3, [r7, #8]
 810a548:	2b00      	cmp	r3, #0
 810a54a:	d005      	beq.n	810a558 <HAL_SPI_TransmitReceive_DMA+0x74>
 810a54c:	687b      	ldr	r3, [r7, #4]
 810a54e:	2b00      	cmp	r3, #0
 810a550:	d002      	beq.n	810a558 <HAL_SPI_TransmitReceive_DMA+0x74>
 810a552:	887b      	ldrh	r3, [r7, #2]
 810a554:	2b00      	cmp	r3, #0
 810a556:	d107      	bne.n	810a568 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 810a558:	2301      	movs	r3, #1
 810a55a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810a55c:	68fb      	ldr	r3, [r7, #12]
 810a55e:	2200      	movs	r2, #0
 810a560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a564:	7dfb      	ldrb	r3, [r7, #23]
 810a566:	e17a      	b.n	810a85e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a568:	68fb      	ldr	r3, [r7, #12]
 810a56a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a56e:	b2db      	uxtb	r3, r3
 810a570:	2b04      	cmp	r3, #4
 810a572:	d003      	beq.n	810a57c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810a574:	68fb      	ldr	r3, [r7, #12]
 810a576:	2205      	movs	r2, #5
 810a578:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810a57c:	68fb      	ldr	r3, [r7, #12]
 810a57e:	2200      	movs	r2, #0
 810a580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	68ba      	ldr	r2, [r7, #8]
 810a588:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810a58a:	68fb      	ldr	r3, [r7, #12]
 810a58c:	887a      	ldrh	r2, [r7, #2]
 810a58e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810a592:	68fb      	ldr	r3, [r7, #12]
 810a594:	887a      	ldrh	r2, [r7, #2]
 810a596:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810a59a:	68fb      	ldr	r3, [r7, #12]
 810a59c:	687a      	ldr	r2, [r7, #4]
 810a59e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810a5a0:	68fb      	ldr	r3, [r7, #12]
 810a5a2:	887a      	ldrh	r2, [r7, #2]
 810a5a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810a5a8:	68fb      	ldr	r3, [r7, #12]
 810a5aa:	887a      	ldrh	r2, [r7, #2]
 810a5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810a5b0:	68fb      	ldr	r3, [r7, #12]
 810a5b2:	2200      	movs	r2, #0
 810a5b4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810a5b6:	68fb      	ldr	r3, [r7, #12]
 810a5b8:	2200      	movs	r2, #0
 810a5ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a5bc:	68fb      	ldr	r3, [r7, #12]
 810a5be:	681b      	ldr	r3, [r3, #0]
 810a5c0:	689a      	ldr	r2, [r3, #8]
 810a5c2:	68fb      	ldr	r3, [r7, #12]
 810a5c4:	681b      	ldr	r3, [r3, #0]
 810a5c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a5ca:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a5cc:	68fb      	ldr	r3, [r7, #12]
 810a5ce:	68db      	ldr	r3, [r3, #12]
 810a5d0:	2b0f      	cmp	r3, #15
 810a5d2:	d905      	bls.n	810a5e0 <HAL_SPI_TransmitReceive_DMA+0xfc>
 810a5d4:	68fb      	ldr	r3, [r7, #12]
 810a5d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a5d8:	699b      	ldr	r3, [r3, #24]
 810a5da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a5de:	d10f      	bne.n	810a600 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a5e0:	68fb      	ldr	r3, [r7, #12]
 810a5e2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a5e4:	2b07      	cmp	r3, #7
 810a5e6:	d913      	bls.n	810a610 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a5e8:	68fb      	ldr	r3, [r7, #12]
 810a5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a5ec:	699b      	ldr	r3, [r3, #24]
 810a5ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a5f2:	d00d      	beq.n	810a610 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 810a5f4:	68fb      	ldr	r3, [r7, #12]
 810a5f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a5f8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a5fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a5fe:	d007      	beq.n	810a610 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 810a600:	2301      	movs	r3, #1
 810a602:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 810a604:	68fb      	ldr	r3, [r7, #12]
 810a606:	2200      	movs	r2, #0
 810a608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a60c:	7dfb      	ldrb	r3, [r7, #23]
 810a60e:	e126      	b.n	810a85e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 810a610:	68fb      	ldr	r3, [r7, #12]
 810a612:	68db      	ldr	r3, [r3, #12]
 810a614:	2b07      	cmp	r3, #7
 810a616:	d840      	bhi.n	810a69a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a618:	68fb      	ldr	r3, [r7, #12]
 810a61a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a61c:	699b      	ldr	r3, [r3, #24]
 810a61e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a622:	d109      	bne.n	810a638 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a624:	68fb      	ldr	r3, [r7, #12]
 810a626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a62a:	b29b      	uxth	r3, r3
 810a62c:	3301      	adds	r3, #1
 810a62e:	105b      	asrs	r3, r3, #1
 810a630:	b29a      	uxth	r2, r3
 810a632:	68fb      	ldr	r3, [r7, #12]
 810a634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a638:	68fb      	ldr	r3, [r7, #12]
 810a63a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a63c:	699b      	ldr	r3, [r3, #24]
 810a63e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a642:	d109      	bne.n	810a658 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 810a644:	68fb      	ldr	r3, [r7, #12]
 810a646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a64a:	b29b      	uxth	r3, r3
 810a64c:	3303      	adds	r3, #3
 810a64e:	109b      	asrs	r3, r3, #2
 810a650:	b29a      	uxth	r2, r3
 810a652:	68fb      	ldr	r3, [r7, #12]
 810a654:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a658:	68fb      	ldr	r3, [r7, #12]
 810a65a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a65c:	699b      	ldr	r3, [r3, #24]
 810a65e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a662:	d109      	bne.n	810a678 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a664:	68fb      	ldr	r3, [r7, #12]
 810a666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a66a:	b29b      	uxth	r3, r3
 810a66c:	3301      	adds	r3, #1
 810a66e:	105b      	asrs	r3, r3, #1
 810a670:	b29a      	uxth	r2, r3
 810a672:	68fb      	ldr	r3, [r7, #12]
 810a674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a678:	68fb      	ldr	r3, [r7, #12]
 810a67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a67c:	699b      	ldr	r3, [r3, #24]
 810a67e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a682:	d12e      	bne.n	810a6e2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 810a684:	68fb      	ldr	r3, [r7, #12]
 810a686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a68a:	b29b      	uxth	r3, r3
 810a68c:	3303      	adds	r3, #3
 810a68e:	109b      	asrs	r3, r3, #2
 810a690:	b29a      	uxth	r2, r3
 810a692:	68fb      	ldr	r3, [r7, #12]
 810a694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810a698:	e023      	b.n	810a6e2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 810a69a:	68fb      	ldr	r3, [r7, #12]
 810a69c:	68db      	ldr	r3, [r3, #12]
 810a69e:	2b0f      	cmp	r3, #15
 810a6a0:	d81f      	bhi.n	810a6e2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a6a2:	68fb      	ldr	r3, [r7, #12]
 810a6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a6a6:	699b      	ldr	r3, [r3, #24]
 810a6a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a6ac:	d109      	bne.n	810a6c2 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a6ae:	68fb      	ldr	r3, [r7, #12]
 810a6b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a6b4:	b29b      	uxth	r3, r3
 810a6b6:	3301      	adds	r3, #1
 810a6b8:	105b      	asrs	r3, r3, #1
 810a6ba:	b29a      	uxth	r2, r3
 810a6bc:	68fb      	ldr	r3, [r7, #12]
 810a6be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a6c2:	68fb      	ldr	r3, [r7, #12]
 810a6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a6c6:	699b      	ldr	r3, [r3, #24]
 810a6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a6cc:	d109      	bne.n	810a6e2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a6ce:	68fb      	ldr	r3, [r7, #12]
 810a6d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a6d4:	b29b      	uxth	r3, r3
 810a6d6:	3301      	adds	r3, #1
 810a6d8:	105b      	asrs	r3, r3, #1
 810a6da:	b29a      	uxth	r2, r3
 810a6dc:	68fb      	ldr	r3, [r7, #12]
 810a6de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 810a6e2:	68fb      	ldr	r3, [r7, #12]
 810a6e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a6e8:	b2db      	uxtb	r3, r3
 810a6ea:	2b04      	cmp	r3, #4
 810a6ec:	d108      	bne.n	810a700 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 810a6ee:	68fb      	ldr	r3, [r7, #12]
 810a6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a6f2:	4a5d      	ldr	r2, [pc, #372]	; (810a868 <HAL_SPI_TransmitReceive_DMA+0x384>)
 810a6f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 810a6f6:	68fb      	ldr	r3, [r7, #12]
 810a6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a6fa:	4a5c      	ldr	r2, [pc, #368]	; (810a86c <HAL_SPI_TransmitReceive_DMA+0x388>)
 810a6fc:	63da      	str	r2, [r3, #60]	; 0x3c
 810a6fe:	e007      	b.n	810a710 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 810a700:	68fb      	ldr	r3, [r7, #12]
 810a702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a704:	4a5a      	ldr	r2, [pc, #360]	; (810a870 <HAL_SPI_TransmitReceive_DMA+0x38c>)
 810a706:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 810a708:	68fb      	ldr	r3, [r7, #12]
 810a70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a70c:	4a59      	ldr	r2, [pc, #356]	; (810a874 <HAL_SPI_TransmitReceive_DMA+0x390>)
 810a70e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 810a710:	68fb      	ldr	r3, [r7, #12]
 810a712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a714:	4a58      	ldr	r2, [pc, #352]	; (810a878 <HAL_SPI_TransmitReceive_DMA+0x394>)
 810a716:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 810a718:	68fb      	ldr	r3, [r7, #12]
 810a71a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a71c:	2200      	movs	r2, #0
 810a71e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 810a720:	68fb      	ldr	r3, [r7, #12]
 810a722:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810a724:	68fb      	ldr	r3, [r7, #12]
 810a726:	681b      	ldr	r3, [r3, #0]
 810a728:	3330      	adds	r3, #48	; 0x30
 810a72a:	4619      	mov	r1, r3
 810a72c:	68fb      	ldr	r3, [r7, #12]
 810a72e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a730:	461a      	mov	r2, r3
 810a732:	68fb      	ldr	r3, [r7, #12]
 810a734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a738:	b29b      	uxth	r3, r3
 810a73a:	f7f9 ff39 	bl	81045b0 <HAL_DMA_Start_IT>
 810a73e:	4603      	mov	r3, r0
 810a740:	2b00      	cmp	r3, #0
 810a742:	d00f      	beq.n	810a764 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a744:	68fb      	ldr	r3, [r7, #12]
 810a746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a74a:	f043 0210 	orr.w	r2, r3, #16
 810a74e:	68fb      	ldr	r3, [r7, #12]
 810a750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a754:	2301      	movs	r3, #1
 810a756:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a758:	68fb      	ldr	r3, [r7, #12]
 810a75a:	2201      	movs	r2, #1
 810a75c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a760:	7dfb      	ldrb	r3, [r7, #23]
 810a762:	e07c      	b.n	810a85e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 810a764:	68fb      	ldr	r3, [r7, #12]
 810a766:	681b      	ldr	r3, [r3, #0]
 810a768:	689a      	ldr	r2, [r3, #8]
 810a76a:	68fb      	ldr	r3, [r7, #12]
 810a76c:	681b      	ldr	r3, [r3, #0]
 810a76e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810a772:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 810a774:	68fb      	ldr	r3, [r7, #12]
 810a776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a778:	2200      	movs	r2, #0
 810a77a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 810a77c:	68fb      	ldr	r3, [r7, #12]
 810a77e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a780:	2200      	movs	r2, #0
 810a782:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 810a784:	68fb      	ldr	r3, [r7, #12]
 810a786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a788:	2200      	movs	r2, #0
 810a78a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 810a78c:	68fb      	ldr	r3, [r7, #12]
 810a78e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a790:	2200      	movs	r2, #0
 810a792:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 810a794:	68fb      	ldr	r3, [r7, #12]
 810a796:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810a798:	68fb      	ldr	r3, [r7, #12]
 810a79a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a79c:	4619      	mov	r1, r3
 810a79e:	68fb      	ldr	r3, [r7, #12]
 810a7a0:	681b      	ldr	r3, [r3, #0]
 810a7a2:	3320      	adds	r3, #32
 810a7a4:	461a      	mov	r2, r3
 810a7a6:	68fb      	ldr	r3, [r7, #12]
 810a7a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a7ac:	b29b      	uxth	r3, r3
 810a7ae:	f7f9 feff 	bl	81045b0 <HAL_DMA_Start_IT>
 810a7b2:	4603      	mov	r3, r0
 810a7b4:	2b00      	cmp	r3, #0
 810a7b6:	d00f      	beq.n	810a7d8 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a7b8:	68fb      	ldr	r3, [r7, #12]
 810a7ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a7be:	f043 0210 	orr.w	r2, r3, #16
 810a7c2:	68fb      	ldr	r3, [r7, #12]
 810a7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a7c8:	2301      	movs	r3, #1
 810a7ca:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a7cc:	68fb      	ldr	r3, [r7, #12]
 810a7ce:	2201      	movs	r2, #1
 810a7d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a7d4:	7dfb      	ldrb	r3, [r7, #23]
 810a7d6:	e042      	b.n	810a85e <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a7d8:	68fb      	ldr	r3, [r7, #12]
 810a7da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7dc:	69db      	ldr	r3, [r3, #28]
 810a7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a7e2:	d108      	bne.n	810a7f6 <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 810a7e4:	68fb      	ldr	r3, [r7, #12]
 810a7e6:	681b      	ldr	r3, [r3, #0]
 810a7e8:	685b      	ldr	r3, [r3, #4]
 810a7ea:	68fa      	ldr	r2, [r7, #12]
 810a7ec:	6812      	ldr	r2, [r2, #0]
 810a7ee:	0c1b      	lsrs	r3, r3, #16
 810a7f0:	041b      	lsls	r3, r3, #16
 810a7f2:	6053      	str	r3, [r2, #4]
 810a7f4:	e009      	b.n	810a80a <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810a7f6:	68fb      	ldr	r3, [r7, #12]
 810a7f8:	681b      	ldr	r3, [r3, #0]
 810a7fa:	685b      	ldr	r3, [r3, #4]
 810a7fc:	0c1b      	lsrs	r3, r3, #16
 810a7fe:	041b      	lsls	r3, r3, #16
 810a800:	8879      	ldrh	r1, [r7, #2]
 810a802:	68fa      	ldr	r2, [r7, #12]
 810a804:	6812      	ldr	r2, [r2, #0]
 810a806:	430b      	orrs	r3, r1
 810a808:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 810a80a:	68fb      	ldr	r3, [r7, #12]
 810a80c:	681b      	ldr	r3, [r3, #0]
 810a80e:	689a      	ldr	r2, [r3, #8]
 810a810:	68fb      	ldr	r3, [r7, #12]
 810a812:	681b      	ldr	r3, [r3, #0]
 810a814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810a818:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 810a81a:	68fb      	ldr	r3, [r7, #12]
 810a81c:	681b      	ldr	r3, [r3, #0]
 810a81e:	691a      	ldr	r2, [r3, #16]
 810a820:	68fb      	ldr	r3, [r7, #12]
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 810a828:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810a82a:	68fb      	ldr	r3, [r7, #12]
 810a82c:	681b      	ldr	r3, [r3, #0]
 810a82e:	681a      	ldr	r2, [r3, #0]
 810a830:	68fb      	ldr	r3, [r7, #12]
 810a832:	681b      	ldr	r3, [r3, #0]
 810a834:	f042 0201 	orr.w	r2, r2, #1
 810a838:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810a83a:	68fb      	ldr	r3, [r7, #12]
 810a83c:	685b      	ldr	r3, [r3, #4]
 810a83e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a842:	d107      	bne.n	810a854 <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810a844:	68fb      	ldr	r3, [r7, #12]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	681a      	ldr	r2, [r3, #0]
 810a84a:	68fb      	ldr	r3, [r7, #12]
 810a84c:	681b      	ldr	r3, [r3, #0]
 810a84e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a852:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810a854:	68fb      	ldr	r3, [r7, #12]
 810a856:	2200      	movs	r2, #0
 810a858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 810a85c:	7dfb      	ldrb	r3, [r7, #23]
}
 810a85e:	4618      	mov	r0, r3
 810a860:	3718      	adds	r7, #24
 810a862:	46bd      	mov	sp, r7
 810a864:	bd80      	pop	{r7, pc}
 810a866:	bf00      	nop
 810a868:	0810ad2d 	.word	0x0810ad2d
 810a86c:	0810aca1 	.word	0x0810aca1
 810a870:	0810ad49 	.word	0x0810ad49
 810a874:	0810ace7 	.word	0x0810ace7
 810a878:	0810ad65 	.word	0x0810ad65

0810a87c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810a87c:	b580      	push	{r7, lr}
 810a87e:	b08a      	sub	sp, #40	; 0x28
 810a880:	af00      	add	r7, sp, #0
 810a882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810a884:	687b      	ldr	r3, [r7, #4]
 810a886:	681b      	ldr	r3, [r3, #0]
 810a888:	691b      	ldr	r3, [r3, #16]
 810a88a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810a88c:	687b      	ldr	r3, [r7, #4]
 810a88e:	681b      	ldr	r3, [r3, #0]
 810a890:	695b      	ldr	r3, [r3, #20]
 810a892:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810a894:	6a3a      	ldr	r2, [r7, #32]
 810a896:	69fb      	ldr	r3, [r7, #28]
 810a898:	4013      	ands	r3, r2
 810a89a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810a89c:	687b      	ldr	r3, [r7, #4]
 810a89e:	681b      	ldr	r3, [r3, #0]
 810a8a0:	689b      	ldr	r3, [r3, #8]
 810a8a2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810a8a4:	2300      	movs	r3, #0
 810a8a6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810a8a8:	687b      	ldr	r3, [r7, #4]
 810a8aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a8ae:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810a8b0:	687b      	ldr	r3, [r7, #4]
 810a8b2:	681b      	ldr	r3, [r3, #0]
 810a8b4:	3330      	adds	r3, #48	; 0x30
 810a8b6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810a8b8:	69bb      	ldr	r3, [r7, #24]
 810a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a8be:	2b00      	cmp	r3, #0
 810a8c0:	d113      	bne.n	810a8ea <HAL_SPI_IRQHandler+0x6e>
 810a8c2:	69bb      	ldr	r3, [r7, #24]
 810a8c4:	f003 0320 	and.w	r3, r3, #32
 810a8c8:	2b00      	cmp	r3, #0
 810a8ca:	d10e      	bne.n	810a8ea <HAL_SPI_IRQHandler+0x6e>
 810a8cc:	69bb      	ldr	r3, [r7, #24]
 810a8ce:	f003 0304 	and.w	r3, r3, #4
 810a8d2:	2b00      	cmp	r3, #0
 810a8d4:	d009      	beq.n	810a8ea <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810a8d6:	687b      	ldr	r3, [r7, #4]
 810a8d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a8da:	6878      	ldr	r0, [r7, #4]
 810a8dc:	4798      	blx	r3
    hspi->RxISR(hspi);
 810a8de:	687b      	ldr	r3, [r7, #4]
 810a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a8e2:	6878      	ldr	r0, [r7, #4]
 810a8e4:	4798      	blx	r3
    handled = 1UL;
 810a8e6:	2301      	movs	r3, #1
 810a8e8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a8ea:	69bb      	ldr	r3, [r7, #24]
 810a8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a8f0:	2b00      	cmp	r3, #0
 810a8f2:	d10f      	bne.n	810a914 <HAL_SPI_IRQHandler+0x98>
 810a8f4:	69bb      	ldr	r3, [r7, #24]
 810a8f6:	f003 0301 	and.w	r3, r3, #1
 810a8fa:	2b00      	cmp	r3, #0
 810a8fc:	d00a      	beq.n	810a914 <HAL_SPI_IRQHandler+0x98>
 810a8fe:	69bb      	ldr	r3, [r7, #24]
 810a900:	f003 0304 	and.w	r3, r3, #4
 810a904:	2b00      	cmp	r3, #0
 810a906:	d105      	bne.n	810a914 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a90c:	6878      	ldr	r0, [r7, #4]
 810a90e:	4798      	blx	r3
    handled = 1UL;
 810a910:	2301      	movs	r3, #1
 810a912:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a914:	69bb      	ldr	r3, [r7, #24]
 810a916:	f003 0320 	and.w	r3, r3, #32
 810a91a:	2b00      	cmp	r3, #0
 810a91c:	d10f      	bne.n	810a93e <HAL_SPI_IRQHandler+0xc2>
 810a91e:	69bb      	ldr	r3, [r7, #24]
 810a920:	f003 0302 	and.w	r3, r3, #2
 810a924:	2b00      	cmp	r3, #0
 810a926:	d00a      	beq.n	810a93e <HAL_SPI_IRQHandler+0xc2>
 810a928:	69bb      	ldr	r3, [r7, #24]
 810a92a:	f003 0304 	and.w	r3, r3, #4
 810a92e:	2b00      	cmp	r3, #0
 810a930:	d105      	bne.n	810a93e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810a932:	687b      	ldr	r3, [r7, #4]
 810a934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a936:	6878      	ldr	r0, [r7, #4]
 810a938:	4798      	blx	r3
    handled = 1UL;
 810a93a:	2301      	movs	r3, #1
 810a93c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a940:	2b00      	cmp	r3, #0
 810a942:	f040 8171 	bne.w	810ac28 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810a946:	69bb      	ldr	r3, [r7, #24]
 810a948:	f003 0308 	and.w	r3, r3, #8
 810a94c:	2b00      	cmp	r3, #0
 810a94e:	f000 80a0 	beq.w	810aa92 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a952:	687b      	ldr	r3, [r7, #4]
 810a954:	681b      	ldr	r3, [r3, #0]
 810a956:	699a      	ldr	r2, [r3, #24]
 810a958:	687b      	ldr	r3, [r7, #4]
 810a95a:	681b      	ldr	r3, [r3, #0]
 810a95c:	f042 0208 	orr.w	r2, r2, #8
 810a960:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a962:	687b      	ldr	r3, [r7, #4]
 810a964:	681b      	ldr	r3, [r3, #0]
 810a966:	699a      	ldr	r2, [r3, #24]
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	681b      	ldr	r3, [r3, #0]
 810a96c:	f042 0210 	orr.w	r2, r2, #16
 810a970:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a972:	687b      	ldr	r3, [r7, #4]
 810a974:	681b      	ldr	r3, [r3, #0]
 810a976:	699a      	ldr	r2, [r3, #24]
 810a978:	687b      	ldr	r3, [r7, #4]
 810a97a:	681b      	ldr	r3, [r3, #0]
 810a97c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a980:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810a982:	687b      	ldr	r3, [r7, #4]
 810a984:	681b      	ldr	r3, [r3, #0]
 810a986:	691a      	ldr	r2, [r3, #16]
 810a988:	687b      	ldr	r3, [r7, #4]
 810a98a:	681b      	ldr	r3, [r3, #0]
 810a98c:	f022 0208 	bic.w	r2, r2, #8
 810a990:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810a992:	697b      	ldr	r3, [r7, #20]
 810a994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a998:	2b00      	cmp	r3, #0
 810a99a:	d00f      	beq.n	810a9bc <HAL_SPI_IRQHandler+0x140>
 810a99c:	7cfb      	ldrb	r3, [r7, #19]
 810a99e:	2b04      	cmp	r3, #4
 810a9a0:	d004      	beq.n	810a9ac <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a9a6:	69db      	ldr	r3, [r3, #28]
 810a9a8:	2b00      	cmp	r3, #0
 810a9aa:	d007      	beq.n	810a9bc <HAL_SPI_IRQHandler+0x140>
 810a9ac:	7cfb      	ldrb	r3, [r7, #19]
 810a9ae:	2b03      	cmp	r3, #3
 810a9b0:	d059      	beq.n	810aa66 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810a9b2:	687b      	ldr	r3, [r7, #4]
 810a9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a9b6:	69db      	ldr	r3, [r3, #28]
 810a9b8:	2b00      	cmp	r3, #0
 810a9ba:	d154      	bne.n	810aa66 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a9bc:	687b      	ldr	r3, [r7, #4]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	689b      	ldr	r3, [r3, #8]
 810a9c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a9c6:	2b00      	cmp	r3, #0
 810a9c8:	d13d      	bne.n	810aa46 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810a9ca:	e036      	b.n	810aa3a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810a9cc:	687b      	ldr	r3, [r7, #4]
 810a9ce:	68db      	ldr	r3, [r3, #12]
 810a9d0:	2b0f      	cmp	r3, #15
 810a9d2:	d90b      	bls.n	810a9ec <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	681a      	ldr	r2, [r3, #0]
 810a9d8:	687b      	ldr	r3, [r7, #4]
 810a9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a9dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810a9de:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810a9e0:	687b      	ldr	r3, [r7, #4]
 810a9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a9e4:	1d1a      	adds	r2, r3, #4
 810a9e6:	687b      	ldr	r3, [r7, #4]
 810a9e8:	665a      	str	r2, [r3, #100]	; 0x64
 810a9ea:	e01d      	b.n	810aa28 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	68db      	ldr	r3, [r3, #12]
 810a9f0:	2b07      	cmp	r3, #7
 810a9f2:	d90b      	bls.n	810aa0c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a9f8:	68fa      	ldr	r2, [r7, #12]
 810a9fa:	8812      	ldrh	r2, [r2, #0]
 810a9fc:	b292      	uxth	r2, r2
 810a9fe:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810aa00:	687b      	ldr	r3, [r7, #4]
 810aa02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aa04:	1c9a      	adds	r2, r3, #2
 810aa06:	687b      	ldr	r3, [r7, #4]
 810aa08:	665a      	str	r2, [r3, #100]	; 0x64
 810aa0a:	e00d      	b.n	810aa28 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810aa0c:	687b      	ldr	r3, [r7, #4]
 810aa0e:	681b      	ldr	r3, [r3, #0]
 810aa10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aa18:	7812      	ldrb	r2, [r2, #0]
 810aa1a:	b2d2      	uxtb	r2, r2
 810aa1c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810aa1e:	687b      	ldr	r3, [r7, #4]
 810aa20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810aa22:	1c5a      	adds	r2, r3, #1
 810aa24:	687b      	ldr	r3, [r7, #4]
 810aa26:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810aa28:	687b      	ldr	r3, [r7, #4]
 810aa2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810aa2e:	b29b      	uxth	r3, r3
 810aa30:	3b01      	subs	r3, #1
 810aa32:	b29a      	uxth	r2, r3
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810aa3a:	687b      	ldr	r3, [r7, #4]
 810aa3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810aa40:	b29b      	uxth	r3, r3
 810aa42:	2b00      	cmp	r3, #0
 810aa44:	d1c2      	bne.n	810a9cc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810aa46:	6878      	ldr	r0, [r7, #4]
 810aa48:	f000 f9c9 	bl	810adde <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810aa4c:	687b      	ldr	r3, [r7, #4]
 810aa4e:	2201      	movs	r2, #1
 810aa50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aa5a:	2b00      	cmp	r3, #0
 810aa5c:	d003      	beq.n	810aa66 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810aa5e:	6878      	ldr	r0, [r7, #4]
 810aa60:	f000 f914 	bl	810ac8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810aa64:	e0e5      	b.n	810ac32 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810aa66:	7cfb      	ldrb	r3, [r7, #19]
 810aa68:	2b05      	cmp	r3, #5
 810aa6a:	d103      	bne.n	810aa74 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810aa6c:	6878      	ldr	r0, [r7, #4]
 810aa6e:	f7f7 f849 	bl	8101b04 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810aa72:	e0db      	b.n	810ac2c <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810aa74:	7cfb      	ldrb	r3, [r7, #19]
 810aa76:	2b04      	cmp	r3, #4
 810aa78:	d103      	bne.n	810aa82 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810aa7a:	6878      	ldr	r0, [r7, #4]
 810aa7c:	f000 f8e8 	bl	810ac50 <HAL_SPI_RxCpltCallback>
    return;
 810aa80:	e0d4      	b.n	810ac2c <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810aa82:	7cfb      	ldrb	r3, [r7, #19]
 810aa84:	2b03      	cmp	r3, #3
 810aa86:	f040 80d1 	bne.w	810ac2c <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810aa8a:	6878      	ldr	r0, [r7, #4]
 810aa8c:	f000 f8d6 	bl	810ac3c <HAL_SPI_TxCpltCallback>
    return;
 810aa90:	e0cc      	b.n	810ac2c <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810aa92:	69fb      	ldr	r3, [r7, #28]
 810aa94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810aa98:	2b00      	cmp	r3, #0
 810aa9a:	d00d      	beq.n	810aab8 <HAL_SPI_IRQHandler+0x23c>
 810aa9c:	6a3b      	ldr	r3, [r7, #32]
 810aa9e:	f003 0308 	and.w	r3, r3, #8
 810aaa2:	2b00      	cmp	r3, #0
 810aaa4:	d008      	beq.n	810aab8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	681b      	ldr	r3, [r3, #0]
 810aaaa:	699a      	ldr	r2, [r3, #24]
 810aaac:	687b      	ldr	r3, [r7, #4]
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810aab4:	619a      	str	r2, [r3, #24]

    return;
 810aab6:	e0bc      	b.n	810ac32 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810aab8:	69bb      	ldr	r3, [r7, #24]
 810aaba:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810aabe:	2b00      	cmp	r3, #0
 810aac0:	f000 80b7 	beq.w	810ac32 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810aac4:	69bb      	ldr	r3, [r7, #24]
 810aac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aaca:	2b00      	cmp	r3, #0
 810aacc:	d00f      	beq.n	810aaee <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810aace:	687b      	ldr	r3, [r7, #4]
 810aad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aad4:	f043 0204 	orr.w	r2, r3, #4
 810aad8:	687b      	ldr	r3, [r7, #4]
 810aada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810aade:	687b      	ldr	r3, [r7, #4]
 810aae0:	681b      	ldr	r3, [r3, #0]
 810aae2:	699a      	ldr	r2, [r3, #24]
 810aae4:	687b      	ldr	r3, [r7, #4]
 810aae6:	681b      	ldr	r3, [r3, #0]
 810aae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810aaec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810aaee:	69bb      	ldr	r3, [r7, #24]
 810aaf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810aaf4:	2b00      	cmp	r3, #0
 810aaf6:	d00f      	beq.n	810ab18 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810aaf8:	687b      	ldr	r3, [r7, #4]
 810aafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aafe:	f043 0201 	orr.w	r2, r3, #1
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810ab08:	687b      	ldr	r3, [r7, #4]
 810ab0a:	681b      	ldr	r3, [r3, #0]
 810ab0c:	699a      	ldr	r2, [r3, #24]
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	681b      	ldr	r3, [r3, #0]
 810ab12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810ab16:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810ab18:	69bb      	ldr	r3, [r7, #24]
 810ab1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ab1e:	2b00      	cmp	r3, #0
 810ab20:	d00f      	beq.n	810ab42 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810ab22:	687b      	ldr	r3, [r7, #4]
 810ab24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ab28:	f043 0208 	orr.w	r2, r3, #8
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810ab32:	687b      	ldr	r3, [r7, #4]
 810ab34:	681b      	ldr	r3, [r3, #0]
 810ab36:	699a      	ldr	r2, [r3, #24]
 810ab38:	687b      	ldr	r3, [r7, #4]
 810ab3a:	681b      	ldr	r3, [r3, #0]
 810ab3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810ab40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810ab42:	69bb      	ldr	r3, [r7, #24]
 810ab44:	f003 0320 	and.w	r3, r3, #32
 810ab48:	2b00      	cmp	r3, #0
 810ab4a:	d00f      	beq.n	810ab6c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810ab4c:	687b      	ldr	r3, [r7, #4]
 810ab4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ab52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810ab5c:	687b      	ldr	r3, [r7, #4]
 810ab5e:	681b      	ldr	r3, [r3, #0]
 810ab60:	699a      	ldr	r2, [r3, #24]
 810ab62:	687b      	ldr	r3, [r7, #4]
 810ab64:	681b      	ldr	r3, [r3, #0]
 810ab66:	f042 0220 	orr.w	r2, r2, #32
 810ab6a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810ab6c:	687b      	ldr	r3, [r7, #4]
 810ab6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ab72:	2b00      	cmp	r3, #0
 810ab74:	d05c      	beq.n	810ac30 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	681b      	ldr	r3, [r3, #0]
 810ab7a:	681a      	ldr	r2, [r3, #0]
 810ab7c:	687b      	ldr	r3, [r7, #4]
 810ab7e:	681b      	ldr	r3, [r3, #0]
 810ab80:	f022 0201 	bic.w	r2, r2, #1
 810ab84:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810ab86:	687b      	ldr	r3, [r7, #4]
 810ab88:	681b      	ldr	r3, [r3, #0]
 810ab8a:	691b      	ldr	r3, [r3, #16]
 810ab8c:	687a      	ldr	r2, [r7, #4]
 810ab8e:	6812      	ldr	r2, [r2, #0]
 810ab90:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810ab94:	f023 0303 	bic.w	r3, r3, #3
 810ab98:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810ab9a:	697b      	ldr	r3, [r7, #20]
 810ab9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810aba0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810aba4:	d138      	bne.n	810ac18 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810aba6:	687b      	ldr	r3, [r7, #4]
 810aba8:	681b      	ldr	r3, [r3, #0]
 810abaa:	689a      	ldr	r2, [r3, #8]
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810abb4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810abb6:	687b      	ldr	r3, [r7, #4]
 810abb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abba:	2b00      	cmp	r3, #0
 810abbc:	d013      	beq.n	810abe6 <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810abbe:	687b      	ldr	r3, [r7, #4]
 810abc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abc2:	4a1d      	ldr	r2, [pc, #116]	; (810ac38 <HAL_SPI_IRQHandler+0x3bc>)
 810abc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810abca:	4618      	mov	r0, r3
 810abcc:	f7fa fa78 	bl	81050c0 <HAL_DMA_Abort_IT>
 810abd0:	4603      	mov	r3, r0
 810abd2:	2b00      	cmp	r3, #0
 810abd4:	d007      	beq.n	810abe6 <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810abd6:	687b      	ldr	r3, [r7, #4]
 810abd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810abdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810abe6:	687b      	ldr	r3, [r7, #4]
 810abe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810abea:	2b00      	cmp	r3, #0
 810abec:	d020      	beq.n	810ac30 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810abee:	687b      	ldr	r3, [r7, #4]
 810abf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810abf2:	4a11      	ldr	r2, [pc, #68]	; (810ac38 <HAL_SPI_IRQHandler+0x3bc>)
 810abf4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810abf6:	687b      	ldr	r3, [r7, #4]
 810abf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810abfa:	4618      	mov	r0, r3
 810abfc:	f7fa fa60 	bl	81050c0 <HAL_DMA_Abort_IT>
 810ac00:	4603      	mov	r3, r0
 810ac02:	2b00      	cmp	r3, #0
 810ac04:	d014      	beq.n	810ac30 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810ac06:	687b      	ldr	r3, [r7, #4]
 810ac08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ac0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810ac16:	e00b      	b.n	810ac30 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	2201      	movs	r2, #1
 810ac1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810ac20:	6878      	ldr	r0, [r7, #4]
 810ac22:	f000 f833 	bl	810ac8c <HAL_SPI_ErrorCallback>
    return;
 810ac26:	e003      	b.n	810ac30 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810ac28:	bf00      	nop
 810ac2a:	e002      	b.n	810ac32 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ac2c:	bf00      	nop
 810ac2e:	e000      	b.n	810ac32 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810ac30:	bf00      	nop
  }
}
 810ac32:	3728      	adds	r7, #40	; 0x28
 810ac34:	46bd      	mov	sp, r7
 810ac36:	bd80      	pop	{r7, pc}
 810ac38:	0810adab 	.word	0x0810adab

0810ac3c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ac3c:	b480      	push	{r7}
 810ac3e:	b083      	sub	sp, #12
 810ac40:	af00      	add	r7, sp, #0
 810ac42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810ac44:	bf00      	nop
 810ac46:	370c      	adds	r7, #12
 810ac48:	46bd      	mov	sp, r7
 810ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac4e:	4770      	bx	lr

0810ac50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ac50:	b480      	push	{r7}
 810ac52:	b083      	sub	sp, #12
 810ac54:	af00      	add	r7, sp, #0
 810ac56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810ac58:	bf00      	nop
 810ac5a:	370c      	adds	r7, #12
 810ac5c:	46bd      	mov	sp, r7
 810ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac62:	4770      	bx	lr

0810ac64 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ac64:	b480      	push	{r7}
 810ac66:	b083      	sub	sp, #12
 810ac68:	af00      	add	r7, sp, #0
 810ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810ac6c:	bf00      	nop
 810ac6e:	370c      	adds	r7, #12
 810ac70:	46bd      	mov	sp, r7
 810ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac76:	4770      	bx	lr

0810ac78 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810ac78:	b480      	push	{r7}
 810ac7a:	b083      	sub	sp, #12
 810ac7c:	af00      	add	r7, sp, #0
 810ac7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810ac80:	bf00      	nop
 810ac82:	370c      	adds	r7, #12
 810ac84:	46bd      	mov	sp, r7
 810ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac8a:	4770      	bx	lr

0810ac8c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810ac8c:	b480      	push	{r7}
 810ac8e:	b083      	sub	sp, #12
 810ac90:	af00      	add	r7, sp, #0
 810ac92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810ac94:	bf00      	nop
 810ac96:	370c      	adds	r7, #12
 810ac98:	46bd      	mov	sp, r7
 810ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac9e:	4770      	bx	lr

0810aca0 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810aca0:	b580      	push	{r7, lr}
 810aca2:	b084      	sub	sp, #16
 810aca4:	af00      	add	r7, sp, #0
 810aca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810aca8:	687b      	ldr	r3, [r7, #4]
 810acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810acac:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810acae:	68fb      	ldr	r3, [r7, #12]
 810acb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810acb4:	b2db      	uxtb	r3, r3
 810acb6:	2b07      	cmp	r3, #7
 810acb8:	d011      	beq.n	810acde <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810acba:	68fb      	ldr	r3, [r7, #12]
 810acbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810acbe:	69db      	ldr	r3, [r3, #28]
 810acc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810acc4:	d103      	bne.n	810acce <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810acc6:	68f8      	ldr	r0, [r7, #12]
 810acc8:	f7ff ffc2 	bl	810ac50 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810accc:	e007      	b.n	810acde <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810acce:	68fb      	ldr	r3, [r7, #12]
 810acd0:	681b      	ldr	r3, [r3, #0]
 810acd2:	691a      	ldr	r2, [r3, #16]
 810acd4:	68fb      	ldr	r3, [r7, #12]
 810acd6:	681b      	ldr	r3, [r3, #0]
 810acd8:	f042 0208 	orr.w	r2, r2, #8
 810acdc:	611a      	str	r2, [r3, #16]
}
 810acde:	bf00      	nop
 810ace0:	3710      	adds	r7, #16
 810ace2:	46bd      	mov	sp, r7
 810ace4:	bd80      	pop	{r7, pc}

0810ace6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810ace6:	b580      	push	{r7, lr}
 810ace8:	b084      	sub	sp, #16
 810acea:	af00      	add	r7, sp, #0
 810acec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810acee:	687b      	ldr	r3, [r7, #4]
 810acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810acf2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810acf4:	68fb      	ldr	r3, [r7, #12]
 810acf6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810acfa:	b2db      	uxtb	r3, r3
 810acfc:	2b07      	cmp	r3, #7
 810acfe:	d011      	beq.n	810ad24 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810ad00:	68fb      	ldr	r3, [r7, #12]
 810ad02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ad04:	69db      	ldr	r3, [r3, #28]
 810ad06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ad0a:	d103      	bne.n	810ad14 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810ad0c:	68f8      	ldr	r0, [r7, #12]
 810ad0e:	f7f6 fef9 	bl	8101b04 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810ad12:	e007      	b.n	810ad24 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810ad14:	68fb      	ldr	r3, [r7, #12]
 810ad16:	681b      	ldr	r3, [r3, #0]
 810ad18:	691a      	ldr	r2, [r3, #16]
 810ad1a:	68fb      	ldr	r3, [r7, #12]
 810ad1c:	681b      	ldr	r3, [r3, #0]
 810ad1e:	f042 0208 	orr.w	r2, r2, #8
 810ad22:	611a      	str	r2, [r3, #16]
}
 810ad24:	bf00      	nop
 810ad26:	3710      	adds	r7, #16
 810ad28:	46bd      	mov	sp, r7
 810ad2a:	bd80      	pop	{r7, pc}

0810ad2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810ad2c:	b580      	push	{r7, lr}
 810ad2e:	b084      	sub	sp, #16
 810ad30:	af00      	add	r7, sp, #0
 810ad32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ad38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810ad3a:	68f8      	ldr	r0, [r7, #12]
 810ad3c:	f7ff ff92 	bl	810ac64 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810ad40:	bf00      	nop
 810ad42:	3710      	adds	r7, #16
 810ad44:	46bd      	mov	sp, r7
 810ad46:	bd80      	pop	{r7, pc}

0810ad48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810ad48:	b580      	push	{r7, lr}
 810ad4a:	b084      	sub	sp, #16
 810ad4c:	af00      	add	r7, sp, #0
 810ad4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ad54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810ad56:	68f8      	ldr	r0, [r7, #12]
 810ad58:	f7ff ff8e 	bl	810ac78 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810ad5c:	bf00      	nop
 810ad5e:	3710      	adds	r7, #16
 810ad60:	46bd      	mov	sp, r7
 810ad62:	bd80      	pop	{r7, pc}

0810ad64 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810ad64:	b580      	push	{r7, lr}
 810ad66:	b084      	sub	sp, #16
 810ad68:	af00      	add	r7, sp, #0
 810ad6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ad70:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810ad72:	6878      	ldr	r0, [r7, #4]
 810ad74:	f7fb fb20 	bl	81063b8 <HAL_DMA_GetError>
 810ad78:	4603      	mov	r3, r0
 810ad7a:	2b02      	cmp	r3, #2
 810ad7c:	d011      	beq.n	810ada2 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810ad7e:	68f8      	ldr	r0, [r7, #12]
 810ad80:	f000 f82d 	bl	810adde <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810ad84:	68fb      	ldr	r3, [r7, #12]
 810ad86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ad8a:	f043 0210 	orr.w	r2, r3, #16
 810ad8e:	68fb      	ldr	r3, [r7, #12]
 810ad90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810ad94:	68fb      	ldr	r3, [r7, #12]
 810ad96:	2201      	movs	r2, #1
 810ad98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810ad9c:	68f8      	ldr	r0, [r7, #12]
 810ad9e:	f7ff ff75 	bl	810ac8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810ada2:	bf00      	nop
 810ada4:	3710      	adds	r7, #16
 810ada6:	46bd      	mov	sp, r7
 810ada8:	bd80      	pop	{r7, pc}

0810adaa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810adaa:	b580      	push	{r7, lr}
 810adac:	b084      	sub	sp, #16
 810adae:	af00      	add	r7, sp, #0
 810adb0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810adb2:	687b      	ldr	r3, [r7, #4]
 810adb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810adb6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810adb8:	68fb      	ldr	r3, [r7, #12]
 810adba:	2200      	movs	r2, #0
 810adbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810adc0:	68fb      	ldr	r3, [r7, #12]
 810adc2:	2200      	movs	r2, #0
 810adc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810adc8:	68fb      	ldr	r3, [r7, #12]
 810adca:	2201      	movs	r2, #1
 810adcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810add0:	68f8      	ldr	r0, [r7, #12]
 810add2:	f7ff ff5b 	bl	810ac8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810add6:	bf00      	nop
 810add8:	3710      	adds	r7, #16
 810adda:	46bd      	mov	sp, r7
 810addc:	bd80      	pop	{r7, pc}

0810adde <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810adde:	b480      	push	{r7}
 810ade0:	b085      	sub	sp, #20
 810ade2:	af00      	add	r7, sp, #0
 810ade4:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810ade6:	687b      	ldr	r3, [r7, #4]
 810ade8:	681b      	ldr	r3, [r3, #0]
 810adea:	695b      	ldr	r3, [r3, #20]
 810adec:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810adee:	687b      	ldr	r3, [r7, #4]
 810adf0:	681b      	ldr	r3, [r3, #0]
 810adf2:	699a      	ldr	r2, [r3, #24]
 810adf4:	687b      	ldr	r3, [r7, #4]
 810adf6:	681b      	ldr	r3, [r3, #0]
 810adf8:	f042 0208 	orr.w	r2, r2, #8
 810adfc:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810adfe:	687b      	ldr	r3, [r7, #4]
 810ae00:	681b      	ldr	r3, [r3, #0]
 810ae02:	699a      	ldr	r2, [r3, #24]
 810ae04:	687b      	ldr	r3, [r7, #4]
 810ae06:	681b      	ldr	r3, [r3, #0]
 810ae08:	f042 0210 	orr.w	r2, r2, #16
 810ae0c:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810ae0e:	687b      	ldr	r3, [r7, #4]
 810ae10:	681b      	ldr	r3, [r3, #0]
 810ae12:	681a      	ldr	r2, [r3, #0]
 810ae14:	687b      	ldr	r3, [r7, #4]
 810ae16:	681b      	ldr	r3, [r3, #0]
 810ae18:	f022 0201 	bic.w	r2, r2, #1
 810ae1c:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810ae1e:	687b      	ldr	r3, [r7, #4]
 810ae20:	681b      	ldr	r3, [r3, #0]
 810ae22:	691b      	ldr	r3, [r3, #16]
 810ae24:	687a      	ldr	r2, [r7, #4]
 810ae26:	6812      	ldr	r2, [r2, #0]
 810ae28:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810ae2c:	f023 0303 	bic.w	r3, r3, #3
 810ae30:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810ae32:	687b      	ldr	r3, [r7, #4]
 810ae34:	681b      	ldr	r3, [r3, #0]
 810ae36:	689a      	ldr	r2, [r3, #8]
 810ae38:	687b      	ldr	r3, [r7, #4]
 810ae3a:	681b      	ldr	r3, [r3, #0]
 810ae3c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810ae40:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810ae42:	687b      	ldr	r3, [r7, #4]
 810ae44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ae48:	b2db      	uxtb	r3, r3
 810ae4a:	2b04      	cmp	r3, #4
 810ae4c:	d014      	beq.n	810ae78 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810ae4e:	68fb      	ldr	r3, [r7, #12]
 810ae50:	f003 0320 	and.w	r3, r3, #32
 810ae54:	2b00      	cmp	r3, #0
 810ae56:	d00f      	beq.n	810ae78 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810ae58:	687b      	ldr	r3, [r7, #4]
 810ae5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ae5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810ae68:	687b      	ldr	r3, [r7, #4]
 810ae6a:	681b      	ldr	r3, [r3, #0]
 810ae6c:	699a      	ldr	r2, [r3, #24]
 810ae6e:	687b      	ldr	r3, [r7, #4]
 810ae70:	681b      	ldr	r3, [r3, #0]
 810ae72:	f042 0220 	orr.w	r2, r2, #32
 810ae76:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810ae78:	687b      	ldr	r3, [r7, #4]
 810ae7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ae7e:	b2db      	uxtb	r3, r3
 810ae80:	2b03      	cmp	r3, #3
 810ae82:	d014      	beq.n	810aeae <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810ae84:	68fb      	ldr	r3, [r7, #12]
 810ae86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ae8a:	2b00      	cmp	r3, #0
 810ae8c:	d00f      	beq.n	810aeae <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810ae8e:	687b      	ldr	r3, [r7, #4]
 810ae90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ae94:	f043 0204 	orr.w	r2, r3, #4
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810ae9e:	687b      	ldr	r3, [r7, #4]
 810aea0:	681b      	ldr	r3, [r3, #0]
 810aea2:	699a      	ldr	r2, [r3, #24]
 810aea4:	687b      	ldr	r3, [r7, #4]
 810aea6:	681b      	ldr	r3, [r3, #0]
 810aea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810aeac:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810aeae:	68fb      	ldr	r3, [r7, #12]
 810aeb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810aeb4:	2b00      	cmp	r3, #0
 810aeb6:	d00f      	beq.n	810aed8 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810aeb8:	687b      	ldr	r3, [r7, #4]
 810aeba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aebe:	f043 0201 	orr.w	r2, r3, #1
 810aec2:	687b      	ldr	r3, [r7, #4]
 810aec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810aec8:	687b      	ldr	r3, [r7, #4]
 810aeca:	681b      	ldr	r3, [r3, #0]
 810aecc:	699a      	ldr	r2, [r3, #24]
 810aece:	687b      	ldr	r3, [r7, #4]
 810aed0:	681b      	ldr	r3, [r3, #0]
 810aed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810aed6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810aed8:	68fb      	ldr	r3, [r7, #12]
 810aeda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810aede:	2b00      	cmp	r3, #0
 810aee0:	d00f      	beq.n	810af02 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810aee2:	687b      	ldr	r3, [r7, #4]
 810aee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aee8:	f043 0208 	orr.w	r2, r3, #8
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810aef2:	687b      	ldr	r3, [r7, #4]
 810aef4:	681b      	ldr	r3, [r3, #0]
 810aef6:	699a      	ldr	r2, [r3, #24]
 810aef8:	687b      	ldr	r3, [r7, #4]
 810aefa:	681b      	ldr	r3, [r3, #0]
 810aefc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810af00:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810af02:	687b      	ldr	r3, [r7, #4]
 810af04:	2200      	movs	r2, #0
 810af06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810af0a:	687b      	ldr	r3, [r7, #4]
 810af0c:	2200      	movs	r2, #0
 810af0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810af12:	bf00      	nop
 810af14:	3714      	adds	r7, #20
 810af16:	46bd      	mov	sp, r7
 810af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af1c:	4770      	bx	lr

0810af1e <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810af1e:	b480      	push	{r7}
 810af20:	b085      	sub	sp, #20
 810af22:	af00      	add	r7, sp, #0
 810af24:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810af26:	687b      	ldr	r3, [r7, #4]
 810af28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810af2a:	095b      	lsrs	r3, r3, #5
 810af2c:	3301      	adds	r3, #1
 810af2e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810af30:	687b      	ldr	r3, [r7, #4]
 810af32:	68db      	ldr	r3, [r3, #12]
 810af34:	3301      	adds	r3, #1
 810af36:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810af38:	68bb      	ldr	r3, [r7, #8]
 810af3a:	3307      	adds	r3, #7
 810af3c:	08db      	lsrs	r3, r3, #3
 810af3e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810af40:	68bb      	ldr	r3, [r7, #8]
 810af42:	68fa      	ldr	r2, [r7, #12]
 810af44:	fb02 f303 	mul.w	r3, r2, r3
}
 810af48:	4618      	mov	r0, r3
 810af4a:	3714      	adds	r7, #20
 810af4c:	46bd      	mov	sp, r7
 810af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af52:	4770      	bx	lr

0810af54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810af54:	b580      	push	{r7, lr}
 810af56:	b082      	sub	sp, #8
 810af58:	af00      	add	r7, sp, #0
 810af5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	2b00      	cmp	r3, #0
 810af60:	d101      	bne.n	810af66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810af62:	2301      	movs	r3, #1
 810af64:	e042      	b.n	810afec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810af6c:	2b00      	cmp	r3, #0
 810af6e:	d106      	bne.n	810af7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810af70:	687b      	ldr	r3, [r7, #4]
 810af72:	2200      	movs	r2, #0
 810af74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810af78:	6878      	ldr	r0, [r7, #4]
 810af7a:	f7f8 f9d5 	bl	8103328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810af7e:	687b      	ldr	r3, [r7, #4]
 810af80:	2224      	movs	r2, #36	; 0x24
 810af82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810af86:	687b      	ldr	r3, [r7, #4]
 810af88:	681b      	ldr	r3, [r3, #0]
 810af8a:	681a      	ldr	r2, [r3, #0]
 810af8c:	687b      	ldr	r3, [r7, #4]
 810af8e:	681b      	ldr	r3, [r3, #0]
 810af90:	f022 0201 	bic.w	r2, r2, #1
 810af94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810af96:	6878      	ldr	r0, [r7, #4]
 810af98:	f000 fb86 	bl	810b6a8 <UART_SetConfig>
 810af9c:	4603      	mov	r3, r0
 810af9e:	2b01      	cmp	r3, #1
 810afa0:	d101      	bne.n	810afa6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810afa2:	2301      	movs	r3, #1
 810afa4:	e022      	b.n	810afec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810afa6:	687b      	ldr	r3, [r7, #4]
 810afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810afaa:	2b00      	cmp	r3, #0
 810afac:	d002      	beq.n	810afb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810afae:	6878      	ldr	r0, [r7, #4]
 810afb0:	f001 f8da 	bl	810c168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810afb4:	687b      	ldr	r3, [r7, #4]
 810afb6:	681b      	ldr	r3, [r3, #0]
 810afb8:	685a      	ldr	r2, [r3, #4]
 810afba:	687b      	ldr	r3, [r7, #4]
 810afbc:	681b      	ldr	r3, [r3, #0]
 810afbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810afc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810afc4:	687b      	ldr	r3, [r7, #4]
 810afc6:	681b      	ldr	r3, [r3, #0]
 810afc8:	689a      	ldr	r2, [r3, #8]
 810afca:	687b      	ldr	r3, [r7, #4]
 810afcc:	681b      	ldr	r3, [r3, #0]
 810afce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810afd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810afd4:	687b      	ldr	r3, [r7, #4]
 810afd6:	681b      	ldr	r3, [r3, #0]
 810afd8:	681a      	ldr	r2, [r3, #0]
 810afda:	687b      	ldr	r3, [r7, #4]
 810afdc:	681b      	ldr	r3, [r3, #0]
 810afde:	f042 0201 	orr.w	r2, r2, #1
 810afe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810afe4:	6878      	ldr	r0, [r7, #4]
 810afe6:	f001 f961 	bl	810c2ac <UART_CheckIdleState>
 810afea:	4603      	mov	r3, r0
}
 810afec:	4618      	mov	r0, r3
 810afee:	3708      	adds	r7, #8
 810aff0:	46bd      	mov	sp, r7
 810aff2:	bd80      	pop	{r7, pc}

0810aff4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810aff4:	b580      	push	{r7, lr}
 810aff6:	b084      	sub	sp, #16
 810aff8:	af00      	add	r7, sp, #0
 810affa:	60f8      	str	r0, [r7, #12]
 810affc:	60b9      	str	r1, [r7, #8]
 810affe:	4613      	mov	r3, r2
 810b000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b002:	68fb      	ldr	r3, [r7, #12]
 810b004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b008:	2b20      	cmp	r3, #32
 810b00a:	d168      	bne.n	810b0de <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810b00c:	68bb      	ldr	r3, [r7, #8]
 810b00e:	2b00      	cmp	r3, #0
 810b010:	d002      	beq.n	810b018 <HAL_UART_Transmit_DMA+0x24>
 810b012:	88fb      	ldrh	r3, [r7, #6]
 810b014:	2b00      	cmp	r3, #0
 810b016:	d101      	bne.n	810b01c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810b018:	2301      	movs	r3, #1
 810b01a:	e061      	b.n	810b0e0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810b01c:	68fb      	ldr	r3, [r7, #12]
 810b01e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b022:	2b01      	cmp	r3, #1
 810b024:	d101      	bne.n	810b02a <HAL_UART_Transmit_DMA+0x36>
 810b026:	2302      	movs	r3, #2
 810b028:	e05a      	b.n	810b0e0 <HAL_UART_Transmit_DMA+0xec>
 810b02a:	68fb      	ldr	r3, [r7, #12]
 810b02c:	2201      	movs	r2, #1
 810b02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810b032:	68fb      	ldr	r3, [r7, #12]
 810b034:	68ba      	ldr	r2, [r7, #8]
 810b036:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810b038:	68fb      	ldr	r3, [r7, #12]
 810b03a:	88fa      	ldrh	r2, [r7, #6]
 810b03c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810b040:	68fb      	ldr	r3, [r7, #12]
 810b042:	88fa      	ldrh	r2, [r7, #6]
 810b044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b048:	68fb      	ldr	r3, [r7, #12]
 810b04a:	2200      	movs	r2, #0
 810b04c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b050:	68fb      	ldr	r3, [r7, #12]
 810b052:	2221      	movs	r2, #33	; 0x21
 810b054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810b058:	68fb      	ldr	r3, [r7, #12]
 810b05a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b05c:	2b00      	cmp	r3, #0
 810b05e:	d02c      	beq.n	810b0ba <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810b060:	68fb      	ldr	r3, [r7, #12]
 810b062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b064:	4a20      	ldr	r2, [pc, #128]	; (810b0e8 <HAL_UART_Transmit_DMA+0xf4>)
 810b066:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810b068:	68fb      	ldr	r3, [r7, #12]
 810b06a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b06c:	4a1f      	ldr	r2, [pc, #124]	; (810b0ec <HAL_UART_Transmit_DMA+0xf8>)
 810b06e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810b070:	68fb      	ldr	r3, [r7, #12]
 810b072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b074:	4a1e      	ldr	r2, [pc, #120]	; (810b0f0 <HAL_UART_Transmit_DMA+0xfc>)
 810b076:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810b078:	68fb      	ldr	r3, [r7, #12]
 810b07a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b07c:	2200      	movs	r2, #0
 810b07e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810b080:	68fb      	ldr	r3, [r7, #12]
 810b082:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810b084:	68fb      	ldr	r3, [r7, #12]
 810b086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b088:	4619      	mov	r1, r3
 810b08a:	68fb      	ldr	r3, [r7, #12]
 810b08c:	681b      	ldr	r3, [r3, #0]
 810b08e:	3328      	adds	r3, #40	; 0x28
 810b090:	461a      	mov	r2, r3
 810b092:	88fb      	ldrh	r3, [r7, #6]
 810b094:	f7f9 fa8c 	bl	81045b0 <HAL_DMA_Start_IT>
 810b098:	4603      	mov	r3, r0
 810b09a:	2b00      	cmp	r3, #0
 810b09c:	d00d      	beq.n	810b0ba <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810b09e:	68fb      	ldr	r3, [r7, #12]
 810b0a0:	2210      	movs	r2, #16
 810b0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810b0a6:	68fb      	ldr	r3, [r7, #12]
 810b0a8:	2200      	movs	r2, #0
 810b0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810b0ae:	68fb      	ldr	r3, [r7, #12]
 810b0b0:	2220      	movs	r2, #32
 810b0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810b0b6:	2301      	movs	r3, #1
 810b0b8:	e012      	b.n	810b0e0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810b0ba:	68fb      	ldr	r3, [r7, #12]
 810b0bc:	681b      	ldr	r3, [r3, #0]
 810b0be:	2240      	movs	r2, #64	; 0x40
 810b0c0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810b0c2:	68fb      	ldr	r3, [r7, #12]
 810b0c4:	2200      	movs	r2, #0
 810b0c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b0ca:	68fb      	ldr	r3, [r7, #12]
 810b0cc:	681b      	ldr	r3, [r3, #0]
 810b0ce:	689a      	ldr	r2, [r3, #8]
 810b0d0:	68fb      	ldr	r3, [r7, #12]
 810b0d2:	681b      	ldr	r3, [r3, #0]
 810b0d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810b0d8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810b0da:	2300      	movs	r3, #0
 810b0dc:	e000      	b.n	810b0e0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810b0de:	2302      	movs	r3, #2
  }
}
 810b0e0:	4618      	mov	r0, r3
 810b0e2:	3710      	adds	r7, #16
 810b0e4:	46bd      	mov	sp, r7
 810b0e6:	bd80      	pop	{r7, pc}
 810b0e8:	0810c4e3 	.word	0x0810c4e3
 810b0ec:	0810c533 	.word	0x0810c533
 810b0f0:	0810c54f 	.word	0x0810c54f

0810b0f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810b0f4:	b580      	push	{r7, lr}
 810b0f6:	b088      	sub	sp, #32
 810b0f8:	af00      	add	r7, sp, #0
 810b0fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810b0fc:	687b      	ldr	r3, [r7, #4]
 810b0fe:	681b      	ldr	r3, [r3, #0]
 810b100:	69db      	ldr	r3, [r3, #28]
 810b102:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810b104:	687b      	ldr	r3, [r7, #4]
 810b106:	681b      	ldr	r3, [r3, #0]
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810b10c:	687b      	ldr	r3, [r7, #4]
 810b10e:	681b      	ldr	r3, [r3, #0]
 810b110:	689b      	ldr	r3, [r3, #8]
 810b112:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810b114:	69fa      	ldr	r2, [r7, #28]
 810b116:	f640 030f 	movw	r3, #2063	; 0x80f
 810b11a:	4013      	ands	r3, r2
 810b11c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810b11e:	693b      	ldr	r3, [r7, #16]
 810b120:	2b00      	cmp	r3, #0
 810b122:	d118      	bne.n	810b156 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810b124:	69fb      	ldr	r3, [r7, #28]
 810b126:	f003 0320 	and.w	r3, r3, #32
 810b12a:	2b00      	cmp	r3, #0
 810b12c:	d013      	beq.n	810b156 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810b12e:	69bb      	ldr	r3, [r7, #24]
 810b130:	f003 0320 	and.w	r3, r3, #32
 810b134:	2b00      	cmp	r3, #0
 810b136:	d104      	bne.n	810b142 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810b138:	697b      	ldr	r3, [r7, #20]
 810b13a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810b13e:	2b00      	cmp	r3, #0
 810b140:	d009      	beq.n	810b156 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810b142:	687b      	ldr	r3, [r7, #4]
 810b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b146:	2b00      	cmp	r3, #0
 810b148:	f000 8282 	beq.w	810b650 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810b14c:	687b      	ldr	r3, [r7, #4]
 810b14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b150:	6878      	ldr	r0, [r7, #4]
 810b152:	4798      	blx	r3
      }
      return;
 810b154:	e27c      	b.n	810b650 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810b156:	693b      	ldr	r3, [r7, #16]
 810b158:	2b00      	cmp	r3, #0
 810b15a:	f000 80ef 	beq.w	810b33c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810b15e:	697a      	ldr	r2, [r7, #20]
 810b160:	4b73      	ldr	r3, [pc, #460]	; (810b330 <HAL_UART_IRQHandler+0x23c>)
 810b162:	4013      	ands	r3, r2
 810b164:	2b00      	cmp	r3, #0
 810b166:	d105      	bne.n	810b174 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810b168:	69ba      	ldr	r2, [r7, #24]
 810b16a:	4b72      	ldr	r3, [pc, #456]	; (810b334 <HAL_UART_IRQHandler+0x240>)
 810b16c:	4013      	ands	r3, r2
 810b16e:	2b00      	cmp	r3, #0
 810b170:	f000 80e4 	beq.w	810b33c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b174:	69fb      	ldr	r3, [r7, #28]
 810b176:	f003 0301 	and.w	r3, r3, #1
 810b17a:	2b00      	cmp	r3, #0
 810b17c:	d010      	beq.n	810b1a0 <HAL_UART_IRQHandler+0xac>
 810b17e:	69bb      	ldr	r3, [r7, #24]
 810b180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b184:	2b00      	cmp	r3, #0
 810b186:	d00b      	beq.n	810b1a0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b188:	687b      	ldr	r3, [r7, #4]
 810b18a:	681b      	ldr	r3, [r3, #0]
 810b18c:	2201      	movs	r2, #1
 810b18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b190:	687b      	ldr	r3, [r7, #4]
 810b192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b196:	f043 0201 	orr.w	r2, r3, #1
 810b19a:	687b      	ldr	r3, [r7, #4]
 810b19c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b1a0:	69fb      	ldr	r3, [r7, #28]
 810b1a2:	f003 0302 	and.w	r3, r3, #2
 810b1a6:	2b00      	cmp	r3, #0
 810b1a8:	d010      	beq.n	810b1cc <HAL_UART_IRQHandler+0xd8>
 810b1aa:	697b      	ldr	r3, [r7, #20]
 810b1ac:	f003 0301 	and.w	r3, r3, #1
 810b1b0:	2b00      	cmp	r3, #0
 810b1b2:	d00b      	beq.n	810b1cc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b1b4:	687b      	ldr	r3, [r7, #4]
 810b1b6:	681b      	ldr	r3, [r3, #0]
 810b1b8:	2202      	movs	r2, #2
 810b1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b1bc:	687b      	ldr	r3, [r7, #4]
 810b1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b1c2:	f043 0204 	orr.w	r2, r3, #4
 810b1c6:	687b      	ldr	r3, [r7, #4]
 810b1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b1cc:	69fb      	ldr	r3, [r7, #28]
 810b1ce:	f003 0304 	and.w	r3, r3, #4
 810b1d2:	2b00      	cmp	r3, #0
 810b1d4:	d010      	beq.n	810b1f8 <HAL_UART_IRQHandler+0x104>
 810b1d6:	697b      	ldr	r3, [r7, #20]
 810b1d8:	f003 0301 	and.w	r3, r3, #1
 810b1dc:	2b00      	cmp	r3, #0
 810b1de:	d00b      	beq.n	810b1f8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b1e0:	687b      	ldr	r3, [r7, #4]
 810b1e2:	681b      	ldr	r3, [r3, #0]
 810b1e4:	2204      	movs	r2, #4
 810b1e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b1e8:	687b      	ldr	r3, [r7, #4]
 810b1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b1ee:	f043 0202 	orr.w	r2, r3, #2
 810b1f2:	687b      	ldr	r3, [r7, #4]
 810b1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810b1f8:	69fb      	ldr	r3, [r7, #28]
 810b1fa:	f003 0308 	and.w	r3, r3, #8
 810b1fe:	2b00      	cmp	r3, #0
 810b200:	d015      	beq.n	810b22e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810b202:	69bb      	ldr	r3, [r7, #24]
 810b204:	f003 0320 	and.w	r3, r3, #32
 810b208:	2b00      	cmp	r3, #0
 810b20a:	d104      	bne.n	810b216 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810b20c:	697a      	ldr	r2, [r7, #20]
 810b20e:	4b48      	ldr	r3, [pc, #288]	; (810b330 <HAL_UART_IRQHandler+0x23c>)
 810b210:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810b212:	2b00      	cmp	r3, #0
 810b214:	d00b      	beq.n	810b22e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b216:	687b      	ldr	r3, [r7, #4]
 810b218:	681b      	ldr	r3, [r3, #0]
 810b21a:	2208      	movs	r2, #8
 810b21c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b224:	f043 0208 	orr.w	r2, r3, #8
 810b228:	687b      	ldr	r3, [r7, #4]
 810b22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810b22e:	69fb      	ldr	r3, [r7, #28]
 810b230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b234:	2b00      	cmp	r3, #0
 810b236:	d011      	beq.n	810b25c <HAL_UART_IRQHandler+0x168>
 810b238:	69bb      	ldr	r3, [r7, #24]
 810b23a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810b23e:	2b00      	cmp	r3, #0
 810b240:	d00c      	beq.n	810b25c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b242:	687b      	ldr	r3, [r7, #4]
 810b244:	681b      	ldr	r3, [r3, #0]
 810b246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b24a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810b24c:	687b      	ldr	r3, [r7, #4]
 810b24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b252:	f043 0220 	orr.w	r2, r3, #32
 810b256:	687b      	ldr	r3, [r7, #4]
 810b258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b25c:	687b      	ldr	r3, [r7, #4]
 810b25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b262:	2b00      	cmp	r3, #0
 810b264:	f000 81f6 	beq.w	810b654 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810b268:	69fb      	ldr	r3, [r7, #28]
 810b26a:	f003 0320 	and.w	r3, r3, #32
 810b26e:	2b00      	cmp	r3, #0
 810b270:	d011      	beq.n	810b296 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810b272:	69bb      	ldr	r3, [r7, #24]
 810b274:	f003 0320 	and.w	r3, r3, #32
 810b278:	2b00      	cmp	r3, #0
 810b27a:	d104      	bne.n	810b286 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810b27c:	697b      	ldr	r3, [r7, #20]
 810b27e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810b282:	2b00      	cmp	r3, #0
 810b284:	d007      	beq.n	810b296 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810b286:	687b      	ldr	r3, [r7, #4]
 810b288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b28a:	2b00      	cmp	r3, #0
 810b28c:	d003      	beq.n	810b296 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810b28e:	687b      	ldr	r3, [r7, #4]
 810b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b292:	6878      	ldr	r0, [r7, #4]
 810b294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810b296:	687b      	ldr	r3, [r7, #4]
 810b298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b29c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810b29e:	687b      	ldr	r3, [r7, #4]
 810b2a0:	681b      	ldr	r3, [r3, #0]
 810b2a2:	689b      	ldr	r3, [r3, #8]
 810b2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b2a8:	2b40      	cmp	r3, #64	; 0x40
 810b2aa:	d004      	beq.n	810b2b6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810b2ac:	68fb      	ldr	r3, [r7, #12]
 810b2ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810b2b2:	2b00      	cmp	r3, #0
 810b2b4:	d031      	beq.n	810b31a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810b2b6:	6878      	ldr	r0, [r7, #4]
 810b2b8:	f001 f8e1 	bl	810c47e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b2bc:	687b      	ldr	r3, [r7, #4]
 810b2be:	681b      	ldr	r3, [r3, #0]
 810b2c0:	689b      	ldr	r3, [r3, #8]
 810b2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b2c6:	2b40      	cmp	r3, #64	; 0x40
 810b2c8:	d123      	bne.n	810b312 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b2ca:	687b      	ldr	r3, [r7, #4]
 810b2cc:	681b      	ldr	r3, [r3, #0]
 810b2ce:	689a      	ldr	r2, [r3, #8]
 810b2d0:	687b      	ldr	r3, [r7, #4]
 810b2d2:	681b      	ldr	r3, [r3, #0]
 810b2d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810b2d8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810b2da:	687b      	ldr	r3, [r7, #4]
 810b2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b2de:	2b00      	cmp	r3, #0
 810b2e0:	d013      	beq.n	810b30a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810b2e2:	687b      	ldr	r3, [r7, #4]
 810b2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b2e6:	4a14      	ldr	r2, [pc, #80]	; (810b338 <HAL_UART_IRQHandler+0x244>)
 810b2e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810b2ea:	687b      	ldr	r3, [r7, #4]
 810b2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b2ee:	4618      	mov	r0, r3
 810b2f0:	f7f9 fee6 	bl	81050c0 <HAL_DMA_Abort_IT>
 810b2f4:	4603      	mov	r3, r0
 810b2f6:	2b00      	cmp	r3, #0
 810b2f8:	d017      	beq.n	810b32a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810b2fa:	687b      	ldr	r3, [r7, #4]
 810b2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b300:	687a      	ldr	r2, [r7, #4]
 810b302:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810b304:	4610      	mov	r0, r2
 810b306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b308:	e00f      	b.n	810b32a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810b30a:	6878      	ldr	r0, [r7, #4]
 810b30c:	f000 f9b6 	bl	810b67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b310:	e00b      	b.n	810b32a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b312:	6878      	ldr	r0, [r7, #4]
 810b314:	f000 f9b2 	bl	810b67c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b318:	e007      	b.n	810b32a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810b31a:	6878      	ldr	r0, [r7, #4]
 810b31c:	f000 f9ae 	bl	810b67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b320:	687b      	ldr	r3, [r7, #4]
 810b322:	2200      	movs	r2, #0
 810b324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810b328:	e194      	b.n	810b654 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b32a:	bf00      	nop
    return;
 810b32c:	e192      	b.n	810b654 <HAL_UART_IRQHandler+0x560>
 810b32e:	bf00      	nop
 810b330:	10000001 	.word	0x10000001
 810b334:	04000120 	.word	0x04000120
 810b338:	0810c5cf 	.word	0x0810c5cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b33c:	687b      	ldr	r3, [r7, #4]
 810b33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810b340:	2b01      	cmp	r3, #1
 810b342:	f040 8111 	bne.w	810b568 <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810b346:	69fb      	ldr	r3, [r7, #28]
 810b348:	f003 0310 	and.w	r3, r3, #16
 810b34c:	2b00      	cmp	r3, #0
 810b34e:	f000 810b 	beq.w	810b568 <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810b352:	69bb      	ldr	r3, [r7, #24]
 810b354:	f003 0310 	and.w	r3, r3, #16
 810b358:	2b00      	cmp	r3, #0
 810b35a:	f000 8105 	beq.w	810b568 <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b35e:	687b      	ldr	r3, [r7, #4]
 810b360:	681b      	ldr	r3, [r3, #0]
 810b362:	2210      	movs	r2, #16
 810b364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810b366:	687b      	ldr	r3, [r7, #4]
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	689b      	ldr	r3, [r3, #8]
 810b36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b370:	2b40      	cmp	r3, #64	; 0x40
 810b372:	f040 80bb 	bne.w	810b4ec <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810b376:	687b      	ldr	r3, [r7, #4]
 810b378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b37a:	681b      	ldr	r3, [r3, #0]
 810b37c:	4a97      	ldr	r2, [pc, #604]	; (810b5dc <HAL_UART_IRQHandler+0x4e8>)
 810b37e:	4293      	cmp	r3, r2
 810b380:	d059      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b382:	687b      	ldr	r3, [r7, #4]
 810b384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b386:	681b      	ldr	r3, [r3, #0]
 810b388:	4a95      	ldr	r2, [pc, #596]	; (810b5e0 <HAL_UART_IRQHandler+0x4ec>)
 810b38a:	4293      	cmp	r3, r2
 810b38c:	d053      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b38e:	687b      	ldr	r3, [r7, #4]
 810b390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b392:	681b      	ldr	r3, [r3, #0]
 810b394:	4a93      	ldr	r2, [pc, #588]	; (810b5e4 <HAL_UART_IRQHandler+0x4f0>)
 810b396:	4293      	cmp	r3, r2
 810b398:	d04d      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b39a:	687b      	ldr	r3, [r7, #4]
 810b39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b39e:	681b      	ldr	r3, [r3, #0]
 810b3a0:	4a91      	ldr	r2, [pc, #580]	; (810b5e8 <HAL_UART_IRQHandler+0x4f4>)
 810b3a2:	4293      	cmp	r3, r2
 810b3a4:	d047      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3a6:	687b      	ldr	r3, [r7, #4]
 810b3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3aa:	681b      	ldr	r3, [r3, #0]
 810b3ac:	4a8f      	ldr	r2, [pc, #572]	; (810b5ec <HAL_UART_IRQHandler+0x4f8>)
 810b3ae:	4293      	cmp	r3, r2
 810b3b0:	d041      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3b2:	687b      	ldr	r3, [r7, #4]
 810b3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3b6:	681b      	ldr	r3, [r3, #0]
 810b3b8:	4a8d      	ldr	r2, [pc, #564]	; (810b5f0 <HAL_UART_IRQHandler+0x4fc>)
 810b3ba:	4293      	cmp	r3, r2
 810b3bc:	d03b      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3be:	687b      	ldr	r3, [r7, #4]
 810b3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3c2:	681b      	ldr	r3, [r3, #0]
 810b3c4:	4a8b      	ldr	r2, [pc, #556]	; (810b5f4 <HAL_UART_IRQHandler+0x500>)
 810b3c6:	4293      	cmp	r3, r2
 810b3c8:	d035      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3ca:	687b      	ldr	r3, [r7, #4]
 810b3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3ce:	681b      	ldr	r3, [r3, #0]
 810b3d0:	4a89      	ldr	r2, [pc, #548]	; (810b5f8 <HAL_UART_IRQHandler+0x504>)
 810b3d2:	4293      	cmp	r3, r2
 810b3d4:	d02f      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3d6:	687b      	ldr	r3, [r7, #4]
 810b3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3da:	681b      	ldr	r3, [r3, #0]
 810b3dc:	4a87      	ldr	r2, [pc, #540]	; (810b5fc <HAL_UART_IRQHandler+0x508>)
 810b3de:	4293      	cmp	r3, r2
 810b3e0:	d029      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3e2:	687b      	ldr	r3, [r7, #4]
 810b3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3e6:	681b      	ldr	r3, [r3, #0]
 810b3e8:	4a85      	ldr	r2, [pc, #532]	; (810b600 <HAL_UART_IRQHandler+0x50c>)
 810b3ea:	4293      	cmp	r3, r2
 810b3ec:	d023      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3ee:	687b      	ldr	r3, [r7, #4]
 810b3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3f2:	681b      	ldr	r3, [r3, #0]
 810b3f4:	4a83      	ldr	r2, [pc, #524]	; (810b604 <HAL_UART_IRQHandler+0x510>)
 810b3f6:	4293      	cmp	r3, r2
 810b3f8:	d01d      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b3fa:	687b      	ldr	r3, [r7, #4]
 810b3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b3fe:	681b      	ldr	r3, [r3, #0]
 810b400:	4a81      	ldr	r2, [pc, #516]	; (810b608 <HAL_UART_IRQHandler+0x514>)
 810b402:	4293      	cmp	r3, r2
 810b404:	d017      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b406:	687b      	ldr	r3, [r7, #4]
 810b408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b40a:	681b      	ldr	r3, [r3, #0]
 810b40c:	4a7f      	ldr	r2, [pc, #508]	; (810b60c <HAL_UART_IRQHandler+0x518>)
 810b40e:	4293      	cmp	r3, r2
 810b410:	d011      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b412:	687b      	ldr	r3, [r7, #4]
 810b414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b416:	681b      	ldr	r3, [r3, #0]
 810b418:	4a7d      	ldr	r2, [pc, #500]	; (810b610 <HAL_UART_IRQHandler+0x51c>)
 810b41a:	4293      	cmp	r3, r2
 810b41c:	d00b      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b41e:	687b      	ldr	r3, [r7, #4]
 810b420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b422:	681b      	ldr	r3, [r3, #0]
 810b424:	4a7b      	ldr	r2, [pc, #492]	; (810b614 <HAL_UART_IRQHandler+0x520>)
 810b426:	4293      	cmp	r3, r2
 810b428:	d005      	beq.n	810b436 <HAL_UART_IRQHandler+0x342>
 810b42a:	687b      	ldr	r3, [r7, #4]
 810b42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b42e:	681b      	ldr	r3, [r3, #0]
 810b430:	4a79      	ldr	r2, [pc, #484]	; (810b618 <HAL_UART_IRQHandler+0x524>)
 810b432:	4293      	cmp	r3, r2
 810b434:	d105      	bne.n	810b442 <HAL_UART_IRQHandler+0x34e>
 810b436:	687b      	ldr	r3, [r7, #4]
 810b438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b43a:	681b      	ldr	r3, [r3, #0]
 810b43c:	685b      	ldr	r3, [r3, #4]
 810b43e:	b29b      	uxth	r3, r3
 810b440:	e004      	b.n	810b44c <HAL_UART_IRQHandler+0x358>
 810b442:	687b      	ldr	r3, [r7, #4]
 810b444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b446:	681b      	ldr	r3, [r3, #0]
 810b448:	685b      	ldr	r3, [r3, #4]
 810b44a:	b29b      	uxth	r3, r3
 810b44c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810b44e:	893b      	ldrh	r3, [r7, #8]
 810b450:	2b00      	cmp	r3, #0
 810b452:	f000 8101 	beq.w	810b658 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810b456:	687b      	ldr	r3, [r7, #4]
 810b458:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810b45c:	893a      	ldrh	r2, [r7, #8]
 810b45e:	429a      	cmp	r2, r3
 810b460:	f080 80fa 	bcs.w	810b658 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810b464:	687b      	ldr	r3, [r7, #4]
 810b466:	893a      	ldrh	r2, [r7, #8]
 810b468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810b46c:	687b      	ldr	r3, [r7, #4]
 810b46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b470:	69db      	ldr	r3, [r3, #28]
 810b472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b476:	d02b      	beq.n	810b4d0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b478:	687b      	ldr	r3, [r7, #4]
 810b47a:	681b      	ldr	r3, [r3, #0]
 810b47c:	681a      	ldr	r2, [r3, #0]
 810b47e:	687b      	ldr	r3, [r7, #4]
 810b480:	681b      	ldr	r3, [r3, #0]
 810b482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810b486:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b488:	687b      	ldr	r3, [r7, #4]
 810b48a:	681b      	ldr	r3, [r3, #0]
 810b48c:	689a      	ldr	r2, [r3, #8]
 810b48e:	687b      	ldr	r3, [r7, #4]
 810b490:	681b      	ldr	r3, [r3, #0]
 810b492:	f022 0201 	bic.w	r2, r2, #1
 810b496:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	681b      	ldr	r3, [r3, #0]
 810b49c:	689a      	ldr	r2, [r3, #8]
 810b49e:	687b      	ldr	r3, [r7, #4]
 810b4a0:	681b      	ldr	r3, [r3, #0]
 810b4a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810b4a6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810b4a8:	687b      	ldr	r3, [r7, #4]
 810b4aa:	2220      	movs	r2, #32
 810b4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	2200      	movs	r2, #0
 810b4b4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	681b      	ldr	r3, [r3, #0]
 810b4ba:	681a      	ldr	r2, [r3, #0]
 810b4bc:	687b      	ldr	r3, [r7, #4]
 810b4be:	681b      	ldr	r3, [r3, #0]
 810b4c0:	f022 0210 	bic.w	r2, r2, #16
 810b4c4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810b4c6:	687b      	ldr	r3, [r7, #4]
 810b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b4ca:	4618      	mov	r0, r3
 810b4cc:	f7f9 fada 	bl	8104a84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810b4d0:	687b      	ldr	r3, [r7, #4]
 810b4d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810b4d6:	687b      	ldr	r3, [r7, #4]
 810b4d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b4dc:	b29b      	uxth	r3, r3
 810b4de:	1ad3      	subs	r3, r2, r3
 810b4e0:	b29b      	uxth	r3, r3
 810b4e2:	4619      	mov	r1, r3
 810b4e4:	6878      	ldr	r0, [r7, #4]
 810b4e6:	f000 f8d3 	bl	810b690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b4ea:	e0b5      	b.n	810b658 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810b4ec:	687b      	ldr	r3, [r7, #4]
 810b4ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810b4f2:	687b      	ldr	r3, [r7, #4]
 810b4f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b4f8:	b29b      	uxth	r3, r3
 810b4fa:	1ad3      	subs	r3, r2, r3
 810b4fc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810b4fe:	687b      	ldr	r3, [r7, #4]
 810b500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b504:	b29b      	uxth	r3, r3
 810b506:	2b00      	cmp	r3, #0
 810b508:	f000 80a8 	beq.w	810b65c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810b50c:	897b      	ldrh	r3, [r7, #10]
 810b50e:	2b00      	cmp	r3, #0
 810b510:	f000 80a4 	beq.w	810b65c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b514:	687b      	ldr	r3, [r7, #4]
 810b516:	681b      	ldr	r3, [r3, #0]
 810b518:	681a      	ldr	r2, [r3, #0]
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	681b      	ldr	r3, [r3, #0]
 810b51e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810b522:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b524:	687b      	ldr	r3, [r7, #4]
 810b526:	681b      	ldr	r3, [r3, #0]
 810b528:	689b      	ldr	r3, [r3, #8]
 810b52a:	687a      	ldr	r2, [r7, #4]
 810b52c:	6812      	ldr	r2, [r2, #0]
 810b52e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b532:	f023 0301 	bic.w	r3, r3, #1
 810b536:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b538:	687b      	ldr	r3, [r7, #4]
 810b53a:	2220      	movs	r2, #32
 810b53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b540:	687b      	ldr	r3, [r7, #4]
 810b542:	2200      	movs	r2, #0
 810b544:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b546:	687b      	ldr	r3, [r7, #4]
 810b548:	2200      	movs	r2, #0
 810b54a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b54c:	687b      	ldr	r3, [r7, #4]
 810b54e:	681b      	ldr	r3, [r3, #0]
 810b550:	681a      	ldr	r2, [r3, #0]
 810b552:	687b      	ldr	r3, [r7, #4]
 810b554:	681b      	ldr	r3, [r3, #0]
 810b556:	f022 0210 	bic.w	r2, r2, #16
 810b55a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810b55c:	897b      	ldrh	r3, [r7, #10]
 810b55e:	4619      	mov	r1, r3
 810b560:	6878      	ldr	r0, [r7, #4]
 810b562:	f000 f895 	bl	810b690 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b566:	e079      	b.n	810b65c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810b568:	69fb      	ldr	r3, [r7, #28]
 810b56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810b56e:	2b00      	cmp	r3, #0
 810b570:	d00d      	beq.n	810b58e <HAL_UART_IRQHandler+0x49a>
 810b572:	697b      	ldr	r3, [r7, #20]
 810b574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810b578:	2b00      	cmp	r3, #0
 810b57a:	d008      	beq.n	810b58e <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810b57c:	687b      	ldr	r3, [r7, #4]
 810b57e:	681b      	ldr	r3, [r3, #0]
 810b580:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810b584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810b586:	6878      	ldr	r0, [r7, #4]
 810b588:	f001 f851 	bl	810c62e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b58c:	e069      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810b58e:	69fb      	ldr	r3, [r7, #28]
 810b590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b594:	2b00      	cmp	r3, #0
 810b596:	d012      	beq.n	810b5be <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810b598:	69bb      	ldr	r3, [r7, #24]
 810b59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b59e:	2b00      	cmp	r3, #0
 810b5a0:	d104      	bne.n	810b5ac <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810b5a2:	697b      	ldr	r3, [r7, #20]
 810b5a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b5a8:	2b00      	cmp	r3, #0
 810b5aa:	d008      	beq.n	810b5be <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810b5ac:	687b      	ldr	r3, [r7, #4]
 810b5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b5b0:	2b00      	cmp	r3, #0
 810b5b2:	d055      	beq.n	810b660 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810b5b4:	687b      	ldr	r3, [r7, #4]
 810b5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b5b8:	6878      	ldr	r0, [r7, #4]
 810b5ba:	4798      	blx	r3
    }
    return;
 810b5bc:	e050      	b.n	810b660 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810b5be:	69fb      	ldr	r3, [r7, #28]
 810b5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b5c4:	2b00      	cmp	r3, #0
 810b5c6:	d029      	beq.n	810b61c <HAL_UART_IRQHandler+0x528>
 810b5c8:	69bb      	ldr	r3, [r7, #24]
 810b5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b5ce:	2b00      	cmp	r3, #0
 810b5d0:	d024      	beq.n	810b61c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810b5d2:	6878      	ldr	r0, [r7, #4]
 810b5d4:	f001 f811 	bl	810c5fa <UART_EndTransmit_IT>
    return;
 810b5d8:	e043      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
 810b5da:	bf00      	nop
 810b5dc:	40020010 	.word	0x40020010
 810b5e0:	40020028 	.word	0x40020028
 810b5e4:	40020040 	.word	0x40020040
 810b5e8:	40020058 	.word	0x40020058
 810b5ec:	40020070 	.word	0x40020070
 810b5f0:	40020088 	.word	0x40020088
 810b5f4:	400200a0 	.word	0x400200a0
 810b5f8:	400200b8 	.word	0x400200b8
 810b5fc:	40020410 	.word	0x40020410
 810b600:	40020428 	.word	0x40020428
 810b604:	40020440 	.word	0x40020440
 810b608:	40020458 	.word	0x40020458
 810b60c:	40020470 	.word	0x40020470
 810b610:	40020488 	.word	0x40020488
 810b614:	400204a0 	.word	0x400204a0
 810b618:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810b61c:	69fb      	ldr	r3, [r7, #28]
 810b61e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b622:	2b00      	cmp	r3, #0
 810b624:	d008      	beq.n	810b638 <HAL_UART_IRQHandler+0x544>
 810b626:	69bb      	ldr	r3, [r7, #24]
 810b628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810b62c:	2b00      	cmp	r3, #0
 810b62e:	d003      	beq.n	810b638 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810b630:	6878      	ldr	r0, [r7, #4]
 810b632:	f001 f810 	bl	810c656 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b636:	e014      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810b638:	69fb      	ldr	r3, [r7, #28]
 810b63a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810b63e:	2b00      	cmp	r3, #0
 810b640:	d00f      	beq.n	810b662 <HAL_UART_IRQHandler+0x56e>
 810b642:	69bb      	ldr	r3, [r7, #24]
 810b644:	2b00      	cmp	r3, #0
 810b646:	da0c      	bge.n	810b662 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810b648:	6878      	ldr	r0, [r7, #4]
 810b64a:	f000 fffa 	bl	810c642 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b64e:	e008      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
      return;
 810b650:	bf00      	nop
 810b652:	e006      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
    return;
 810b654:	bf00      	nop
 810b656:	e004      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
      return;
 810b658:	bf00      	nop
 810b65a:	e002      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
      return;
 810b65c:	bf00      	nop
 810b65e:	e000      	b.n	810b662 <HAL_UART_IRQHandler+0x56e>
    return;
 810b660:	bf00      	nop
  }
}
 810b662:	3720      	adds	r7, #32
 810b664:	46bd      	mov	sp, r7
 810b666:	bd80      	pop	{r7, pc}

0810b668 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b668:	b480      	push	{r7}
 810b66a:	b083      	sub	sp, #12
 810b66c:	af00      	add	r7, sp, #0
 810b66e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810b670:	bf00      	nop
 810b672:	370c      	adds	r7, #12
 810b674:	46bd      	mov	sp, r7
 810b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b67a:	4770      	bx	lr

0810b67c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810b67c:	b480      	push	{r7}
 810b67e:	b083      	sub	sp, #12
 810b680:	af00      	add	r7, sp, #0
 810b682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810b684:	bf00      	nop
 810b686:	370c      	adds	r7, #12
 810b688:	46bd      	mov	sp, r7
 810b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b68e:	4770      	bx	lr

0810b690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810b690:	b480      	push	{r7}
 810b692:	b083      	sub	sp, #12
 810b694:	af00      	add	r7, sp, #0
 810b696:	6078      	str	r0, [r7, #4]
 810b698:	460b      	mov	r3, r1
 810b69a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810b69c:	bf00      	nop
 810b69e:	370c      	adds	r7, #12
 810b6a0:	46bd      	mov	sp, r7
 810b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6a6:	4770      	bx	lr

0810b6a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b6a8:	b5b0      	push	{r4, r5, r7, lr}
 810b6aa:	b08e      	sub	sp, #56	; 0x38
 810b6ac:	af00      	add	r7, sp, #0
 810b6ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b6b0:	2300      	movs	r3, #0
 810b6b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b6b6:	687b      	ldr	r3, [r7, #4]
 810b6b8:	689a      	ldr	r2, [r3, #8]
 810b6ba:	687b      	ldr	r3, [r7, #4]
 810b6bc:	691b      	ldr	r3, [r3, #16]
 810b6be:	431a      	orrs	r2, r3
 810b6c0:	687b      	ldr	r3, [r7, #4]
 810b6c2:	695b      	ldr	r3, [r3, #20]
 810b6c4:	431a      	orrs	r2, r3
 810b6c6:	687b      	ldr	r3, [r7, #4]
 810b6c8:	69db      	ldr	r3, [r3, #28]
 810b6ca:	4313      	orrs	r3, r2
 810b6cc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b6ce:	687b      	ldr	r3, [r7, #4]
 810b6d0:	681b      	ldr	r3, [r3, #0]
 810b6d2:	681a      	ldr	r2, [r3, #0]
 810b6d4:	4bc0      	ldr	r3, [pc, #768]	; (810b9d8 <UART_SetConfig+0x330>)
 810b6d6:	4013      	ands	r3, r2
 810b6d8:	687a      	ldr	r2, [r7, #4]
 810b6da:	6812      	ldr	r2, [r2, #0]
 810b6dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b6de:	430b      	orrs	r3, r1
 810b6e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b6e2:	687b      	ldr	r3, [r7, #4]
 810b6e4:	681b      	ldr	r3, [r3, #0]
 810b6e6:	685b      	ldr	r3, [r3, #4]
 810b6e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810b6ec:	687b      	ldr	r3, [r7, #4]
 810b6ee:	68da      	ldr	r2, [r3, #12]
 810b6f0:	687b      	ldr	r3, [r7, #4]
 810b6f2:	681b      	ldr	r3, [r3, #0]
 810b6f4:	430a      	orrs	r2, r1
 810b6f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b6f8:	687b      	ldr	r3, [r7, #4]
 810b6fa:	699b      	ldr	r3, [r3, #24]
 810b6fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	681b      	ldr	r3, [r3, #0]
 810b702:	4ab6      	ldr	r2, [pc, #728]	; (810b9dc <UART_SetConfig+0x334>)
 810b704:	4293      	cmp	r3, r2
 810b706:	d004      	beq.n	810b712 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b708:	687b      	ldr	r3, [r7, #4]
 810b70a:	6a1b      	ldr	r3, [r3, #32]
 810b70c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b70e:	4313      	orrs	r3, r2
 810b710:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b712:	687b      	ldr	r3, [r7, #4]
 810b714:	681b      	ldr	r3, [r3, #0]
 810b716:	689b      	ldr	r3, [r3, #8]
 810b718:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810b71c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810b720:	687a      	ldr	r2, [r7, #4]
 810b722:	6812      	ldr	r2, [r2, #0]
 810b724:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b726:	430b      	orrs	r3, r1
 810b728:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b72a:	687b      	ldr	r3, [r7, #4]
 810b72c:	681b      	ldr	r3, [r3, #0]
 810b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b730:	f023 010f 	bic.w	r1, r3, #15
 810b734:	687b      	ldr	r3, [r7, #4]
 810b736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810b738:	687b      	ldr	r3, [r7, #4]
 810b73a:	681b      	ldr	r3, [r3, #0]
 810b73c:	430a      	orrs	r2, r1
 810b73e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b740:	687b      	ldr	r3, [r7, #4]
 810b742:	681b      	ldr	r3, [r3, #0]
 810b744:	4aa6      	ldr	r2, [pc, #664]	; (810b9e0 <UART_SetConfig+0x338>)
 810b746:	4293      	cmp	r3, r2
 810b748:	d176      	bne.n	810b838 <UART_SetConfig+0x190>
 810b74a:	4ba6      	ldr	r3, [pc, #664]	; (810b9e4 <UART_SetConfig+0x33c>)
 810b74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b74e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b752:	2b28      	cmp	r3, #40	; 0x28
 810b754:	d86c      	bhi.n	810b830 <UART_SetConfig+0x188>
 810b756:	a201      	add	r2, pc, #4	; (adr r2, 810b75c <UART_SetConfig+0xb4>)
 810b758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b75c:	0810b801 	.word	0x0810b801
 810b760:	0810b831 	.word	0x0810b831
 810b764:	0810b831 	.word	0x0810b831
 810b768:	0810b831 	.word	0x0810b831
 810b76c:	0810b831 	.word	0x0810b831
 810b770:	0810b831 	.word	0x0810b831
 810b774:	0810b831 	.word	0x0810b831
 810b778:	0810b831 	.word	0x0810b831
 810b77c:	0810b809 	.word	0x0810b809
 810b780:	0810b831 	.word	0x0810b831
 810b784:	0810b831 	.word	0x0810b831
 810b788:	0810b831 	.word	0x0810b831
 810b78c:	0810b831 	.word	0x0810b831
 810b790:	0810b831 	.word	0x0810b831
 810b794:	0810b831 	.word	0x0810b831
 810b798:	0810b831 	.word	0x0810b831
 810b79c:	0810b811 	.word	0x0810b811
 810b7a0:	0810b831 	.word	0x0810b831
 810b7a4:	0810b831 	.word	0x0810b831
 810b7a8:	0810b831 	.word	0x0810b831
 810b7ac:	0810b831 	.word	0x0810b831
 810b7b0:	0810b831 	.word	0x0810b831
 810b7b4:	0810b831 	.word	0x0810b831
 810b7b8:	0810b831 	.word	0x0810b831
 810b7bc:	0810b819 	.word	0x0810b819
 810b7c0:	0810b831 	.word	0x0810b831
 810b7c4:	0810b831 	.word	0x0810b831
 810b7c8:	0810b831 	.word	0x0810b831
 810b7cc:	0810b831 	.word	0x0810b831
 810b7d0:	0810b831 	.word	0x0810b831
 810b7d4:	0810b831 	.word	0x0810b831
 810b7d8:	0810b831 	.word	0x0810b831
 810b7dc:	0810b821 	.word	0x0810b821
 810b7e0:	0810b831 	.word	0x0810b831
 810b7e4:	0810b831 	.word	0x0810b831
 810b7e8:	0810b831 	.word	0x0810b831
 810b7ec:	0810b831 	.word	0x0810b831
 810b7f0:	0810b831 	.word	0x0810b831
 810b7f4:	0810b831 	.word	0x0810b831
 810b7f8:	0810b831 	.word	0x0810b831
 810b7fc:	0810b829 	.word	0x0810b829
 810b800:	2301      	movs	r3, #1
 810b802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b806:	e220      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b808:	2304      	movs	r3, #4
 810b80a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b80e:	e21c      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b810:	2308      	movs	r3, #8
 810b812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b816:	e218      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b818:	2310      	movs	r3, #16
 810b81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b81e:	e214      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b820:	2320      	movs	r3, #32
 810b822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b826:	e210      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b828:	2340      	movs	r3, #64	; 0x40
 810b82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b82e:	e20c      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b830:	2380      	movs	r3, #128	; 0x80
 810b832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b836:	e208      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b838:	687b      	ldr	r3, [r7, #4]
 810b83a:	681b      	ldr	r3, [r3, #0]
 810b83c:	4a6a      	ldr	r2, [pc, #424]	; (810b9e8 <UART_SetConfig+0x340>)
 810b83e:	4293      	cmp	r3, r2
 810b840:	d130      	bne.n	810b8a4 <UART_SetConfig+0x1fc>
 810b842:	4b68      	ldr	r3, [pc, #416]	; (810b9e4 <UART_SetConfig+0x33c>)
 810b844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b846:	f003 0307 	and.w	r3, r3, #7
 810b84a:	2b05      	cmp	r3, #5
 810b84c:	d826      	bhi.n	810b89c <UART_SetConfig+0x1f4>
 810b84e:	a201      	add	r2, pc, #4	; (adr r2, 810b854 <UART_SetConfig+0x1ac>)
 810b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b854:	0810b86d 	.word	0x0810b86d
 810b858:	0810b875 	.word	0x0810b875
 810b85c:	0810b87d 	.word	0x0810b87d
 810b860:	0810b885 	.word	0x0810b885
 810b864:	0810b88d 	.word	0x0810b88d
 810b868:	0810b895 	.word	0x0810b895
 810b86c:	2300      	movs	r3, #0
 810b86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b872:	e1ea      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b874:	2304      	movs	r3, #4
 810b876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b87a:	e1e6      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b87c:	2308      	movs	r3, #8
 810b87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b882:	e1e2      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b884:	2310      	movs	r3, #16
 810b886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b88a:	e1de      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b88c:	2320      	movs	r3, #32
 810b88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b892:	e1da      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b894:	2340      	movs	r3, #64	; 0x40
 810b896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b89a:	e1d6      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b89c:	2380      	movs	r3, #128	; 0x80
 810b89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b8a2:	e1d2      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b8a4:	687b      	ldr	r3, [r7, #4]
 810b8a6:	681b      	ldr	r3, [r3, #0]
 810b8a8:	4a50      	ldr	r2, [pc, #320]	; (810b9ec <UART_SetConfig+0x344>)
 810b8aa:	4293      	cmp	r3, r2
 810b8ac:	d130      	bne.n	810b910 <UART_SetConfig+0x268>
 810b8ae:	4b4d      	ldr	r3, [pc, #308]	; (810b9e4 <UART_SetConfig+0x33c>)
 810b8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b8b2:	f003 0307 	and.w	r3, r3, #7
 810b8b6:	2b05      	cmp	r3, #5
 810b8b8:	d826      	bhi.n	810b908 <UART_SetConfig+0x260>
 810b8ba:	a201      	add	r2, pc, #4	; (adr r2, 810b8c0 <UART_SetConfig+0x218>)
 810b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b8c0:	0810b8d9 	.word	0x0810b8d9
 810b8c4:	0810b8e1 	.word	0x0810b8e1
 810b8c8:	0810b8e9 	.word	0x0810b8e9
 810b8cc:	0810b8f1 	.word	0x0810b8f1
 810b8d0:	0810b8f9 	.word	0x0810b8f9
 810b8d4:	0810b901 	.word	0x0810b901
 810b8d8:	2300      	movs	r3, #0
 810b8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b8de:	e1b4      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b8e0:	2304      	movs	r3, #4
 810b8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b8e6:	e1b0      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b8e8:	2308      	movs	r3, #8
 810b8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b8ee:	e1ac      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b8f0:	2310      	movs	r3, #16
 810b8f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b8f6:	e1a8      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b8f8:	2320      	movs	r3, #32
 810b8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b8fe:	e1a4      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b900:	2340      	movs	r3, #64	; 0x40
 810b902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b906:	e1a0      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b908:	2380      	movs	r3, #128	; 0x80
 810b90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b90e:	e19c      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b910:	687b      	ldr	r3, [r7, #4]
 810b912:	681b      	ldr	r3, [r3, #0]
 810b914:	4a36      	ldr	r2, [pc, #216]	; (810b9f0 <UART_SetConfig+0x348>)
 810b916:	4293      	cmp	r3, r2
 810b918:	d130      	bne.n	810b97c <UART_SetConfig+0x2d4>
 810b91a:	4b32      	ldr	r3, [pc, #200]	; (810b9e4 <UART_SetConfig+0x33c>)
 810b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b91e:	f003 0307 	and.w	r3, r3, #7
 810b922:	2b05      	cmp	r3, #5
 810b924:	d826      	bhi.n	810b974 <UART_SetConfig+0x2cc>
 810b926:	a201      	add	r2, pc, #4	; (adr r2, 810b92c <UART_SetConfig+0x284>)
 810b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b92c:	0810b945 	.word	0x0810b945
 810b930:	0810b94d 	.word	0x0810b94d
 810b934:	0810b955 	.word	0x0810b955
 810b938:	0810b95d 	.word	0x0810b95d
 810b93c:	0810b965 	.word	0x0810b965
 810b940:	0810b96d 	.word	0x0810b96d
 810b944:	2300      	movs	r3, #0
 810b946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b94a:	e17e      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b94c:	2304      	movs	r3, #4
 810b94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b952:	e17a      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b954:	2308      	movs	r3, #8
 810b956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b95a:	e176      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b95c:	2310      	movs	r3, #16
 810b95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b962:	e172      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b964:	2320      	movs	r3, #32
 810b966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b96a:	e16e      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b96c:	2340      	movs	r3, #64	; 0x40
 810b96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b972:	e16a      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b974:	2380      	movs	r3, #128	; 0x80
 810b976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b97a:	e166      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b97c:	687b      	ldr	r3, [r7, #4]
 810b97e:	681b      	ldr	r3, [r3, #0]
 810b980:	4a1c      	ldr	r2, [pc, #112]	; (810b9f4 <UART_SetConfig+0x34c>)
 810b982:	4293      	cmp	r3, r2
 810b984:	d140      	bne.n	810ba08 <UART_SetConfig+0x360>
 810b986:	4b17      	ldr	r3, [pc, #92]	; (810b9e4 <UART_SetConfig+0x33c>)
 810b988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b98a:	f003 0307 	and.w	r3, r3, #7
 810b98e:	2b05      	cmp	r3, #5
 810b990:	d836      	bhi.n	810ba00 <UART_SetConfig+0x358>
 810b992:	a201      	add	r2, pc, #4	; (adr r2, 810b998 <UART_SetConfig+0x2f0>)
 810b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b998:	0810b9b1 	.word	0x0810b9b1
 810b99c:	0810b9b9 	.word	0x0810b9b9
 810b9a0:	0810b9c1 	.word	0x0810b9c1
 810b9a4:	0810b9c9 	.word	0x0810b9c9
 810b9a8:	0810b9d1 	.word	0x0810b9d1
 810b9ac:	0810b9f9 	.word	0x0810b9f9
 810b9b0:	2300      	movs	r3, #0
 810b9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9b6:	e148      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b9b8:	2304      	movs	r3, #4
 810b9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9be:	e144      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b9c0:	2308      	movs	r3, #8
 810b9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9c6:	e140      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b9c8:	2310      	movs	r3, #16
 810b9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9ce:	e13c      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b9d0:	2320      	movs	r3, #32
 810b9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9d6:	e138      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810b9d8:	cfff69f3 	.word	0xcfff69f3
 810b9dc:	58000c00 	.word	0x58000c00
 810b9e0:	40011000 	.word	0x40011000
 810b9e4:	58024400 	.word	0x58024400
 810b9e8:	40004400 	.word	0x40004400
 810b9ec:	40004800 	.word	0x40004800
 810b9f0:	40004c00 	.word	0x40004c00
 810b9f4:	40005000 	.word	0x40005000
 810b9f8:	2340      	movs	r3, #64	; 0x40
 810b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b9fe:	e124      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810ba00:	2380      	movs	r3, #128	; 0x80
 810ba02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810ba06:	e120      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	681b      	ldr	r3, [r3, #0]
 810ba0c:	4acc      	ldr	r2, [pc, #816]	; (810bd40 <UART_SetConfig+0x698>)
 810ba0e:	4293      	cmp	r3, r2
 810ba10:	d176      	bne.n	810bb00 <UART_SetConfig+0x458>
 810ba12:	4bcc      	ldr	r3, [pc, #816]	; (810bd44 <UART_SetConfig+0x69c>)
 810ba14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ba16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810ba1a:	2b28      	cmp	r3, #40	; 0x28
 810ba1c:	d86c      	bhi.n	810baf8 <UART_SetConfig+0x450>
 810ba1e:	a201      	add	r2, pc, #4	; (adr r2, 810ba24 <UART_SetConfig+0x37c>)
 810ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ba24:	0810bac9 	.word	0x0810bac9
 810ba28:	0810baf9 	.word	0x0810baf9
 810ba2c:	0810baf9 	.word	0x0810baf9
 810ba30:	0810baf9 	.word	0x0810baf9
 810ba34:	0810baf9 	.word	0x0810baf9
 810ba38:	0810baf9 	.word	0x0810baf9
 810ba3c:	0810baf9 	.word	0x0810baf9
 810ba40:	0810baf9 	.word	0x0810baf9
 810ba44:	0810bad1 	.word	0x0810bad1
 810ba48:	0810baf9 	.word	0x0810baf9
 810ba4c:	0810baf9 	.word	0x0810baf9
 810ba50:	0810baf9 	.word	0x0810baf9
 810ba54:	0810baf9 	.word	0x0810baf9
 810ba58:	0810baf9 	.word	0x0810baf9
 810ba5c:	0810baf9 	.word	0x0810baf9
 810ba60:	0810baf9 	.word	0x0810baf9
 810ba64:	0810bad9 	.word	0x0810bad9
 810ba68:	0810baf9 	.word	0x0810baf9
 810ba6c:	0810baf9 	.word	0x0810baf9
 810ba70:	0810baf9 	.word	0x0810baf9
 810ba74:	0810baf9 	.word	0x0810baf9
 810ba78:	0810baf9 	.word	0x0810baf9
 810ba7c:	0810baf9 	.word	0x0810baf9
 810ba80:	0810baf9 	.word	0x0810baf9
 810ba84:	0810bae1 	.word	0x0810bae1
 810ba88:	0810baf9 	.word	0x0810baf9
 810ba8c:	0810baf9 	.word	0x0810baf9
 810ba90:	0810baf9 	.word	0x0810baf9
 810ba94:	0810baf9 	.word	0x0810baf9
 810ba98:	0810baf9 	.word	0x0810baf9
 810ba9c:	0810baf9 	.word	0x0810baf9
 810baa0:	0810baf9 	.word	0x0810baf9
 810baa4:	0810bae9 	.word	0x0810bae9
 810baa8:	0810baf9 	.word	0x0810baf9
 810baac:	0810baf9 	.word	0x0810baf9
 810bab0:	0810baf9 	.word	0x0810baf9
 810bab4:	0810baf9 	.word	0x0810baf9
 810bab8:	0810baf9 	.word	0x0810baf9
 810babc:	0810baf9 	.word	0x0810baf9
 810bac0:	0810baf9 	.word	0x0810baf9
 810bac4:	0810baf1 	.word	0x0810baf1
 810bac8:	2301      	movs	r3, #1
 810baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bace:	e0bc      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bad0:	2304      	movs	r3, #4
 810bad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bad6:	e0b8      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bad8:	2308      	movs	r3, #8
 810bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bade:	e0b4      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bae0:	2310      	movs	r3, #16
 810bae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bae6:	e0b0      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bae8:	2320      	movs	r3, #32
 810baea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baee:	e0ac      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810baf0:	2340      	movs	r3, #64	; 0x40
 810baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810baf6:	e0a8      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810baf8:	2380      	movs	r3, #128	; 0x80
 810bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bafe:	e0a4      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb00:	687b      	ldr	r3, [r7, #4]
 810bb02:	681b      	ldr	r3, [r3, #0]
 810bb04:	4a90      	ldr	r2, [pc, #576]	; (810bd48 <UART_SetConfig+0x6a0>)
 810bb06:	4293      	cmp	r3, r2
 810bb08:	d130      	bne.n	810bb6c <UART_SetConfig+0x4c4>
 810bb0a:	4b8e      	ldr	r3, [pc, #568]	; (810bd44 <UART_SetConfig+0x69c>)
 810bb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bb0e:	f003 0307 	and.w	r3, r3, #7
 810bb12:	2b05      	cmp	r3, #5
 810bb14:	d826      	bhi.n	810bb64 <UART_SetConfig+0x4bc>
 810bb16:	a201      	add	r2, pc, #4	; (adr r2, 810bb1c <UART_SetConfig+0x474>)
 810bb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bb1c:	0810bb35 	.word	0x0810bb35
 810bb20:	0810bb3d 	.word	0x0810bb3d
 810bb24:	0810bb45 	.word	0x0810bb45
 810bb28:	0810bb4d 	.word	0x0810bb4d
 810bb2c:	0810bb55 	.word	0x0810bb55
 810bb30:	0810bb5d 	.word	0x0810bb5d
 810bb34:	2300      	movs	r3, #0
 810bb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb3a:	e086      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb3c:	2304      	movs	r3, #4
 810bb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb42:	e082      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb44:	2308      	movs	r3, #8
 810bb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb4a:	e07e      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb4c:	2310      	movs	r3, #16
 810bb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb52:	e07a      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb54:	2320      	movs	r3, #32
 810bb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb5a:	e076      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb5c:	2340      	movs	r3, #64	; 0x40
 810bb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb62:	e072      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb64:	2380      	movs	r3, #128	; 0x80
 810bb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bb6a:	e06e      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	681b      	ldr	r3, [r3, #0]
 810bb70:	4a76      	ldr	r2, [pc, #472]	; (810bd4c <UART_SetConfig+0x6a4>)
 810bb72:	4293      	cmp	r3, r2
 810bb74:	d130      	bne.n	810bbd8 <UART_SetConfig+0x530>
 810bb76:	4b73      	ldr	r3, [pc, #460]	; (810bd44 <UART_SetConfig+0x69c>)
 810bb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bb7a:	f003 0307 	and.w	r3, r3, #7
 810bb7e:	2b05      	cmp	r3, #5
 810bb80:	d826      	bhi.n	810bbd0 <UART_SetConfig+0x528>
 810bb82:	a201      	add	r2, pc, #4	; (adr r2, 810bb88 <UART_SetConfig+0x4e0>)
 810bb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bb88:	0810bba1 	.word	0x0810bba1
 810bb8c:	0810bba9 	.word	0x0810bba9
 810bb90:	0810bbb1 	.word	0x0810bbb1
 810bb94:	0810bbb9 	.word	0x0810bbb9
 810bb98:	0810bbc1 	.word	0x0810bbc1
 810bb9c:	0810bbc9 	.word	0x0810bbc9
 810bba0:	2300      	movs	r3, #0
 810bba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bba6:	e050      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bba8:	2304      	movs	r3, #4
 810bbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbae:	e04c      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bbb0:	2308      	movs	r3, #8
 810bbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbb6:	e048      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bbb8:	2310      	movs	r3, #16
 810bbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbbe:	e044      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bbc0:	2320      	movs	r3, #32
 810bbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbc6:	e040      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bbc8:	2340      	movs	r3, #64	; 0x40
 810bbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbce:	e03c      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bbd0:	2380      	movs	r3, #128	; 0x80
 810bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bbd6:	e038      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bbd8:	687b      	ldr	r3, [r7, #4]
 810bbda:	681b      	ldr	r3, [r3, #0]
 810bbdc:	4a5c      	ldr	r2, [pc, #368]	; (810bd50 <UART_SetConfig+0x6a8>)
 810bbde:	4293      	cmp	r3, r2
 810bbe0:	d130      	bne.n	810bc44 <UART_SetConfig+0x59c>
 810bbe2:	4b58      	ldr	r3, [pc, #352]	; (810bd44 <UART_SetConfig+0x69c>)
 810bbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810bbe6:	f003 0307 	and.w	r3, r3, #7
 810bbea:	2b05      	cmp	r3, #5
 810bbec:	d826      	bhi.n	810bc3c <UART_SetConfig+0x594>
 810bbee:	a201      	add	r2, pc, #4	; (adr r2, 810bbf4 <UART_SetConfig+0x54c>)
 810bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bbf4:	0810bc0d 	.word	0x0810bc0d
 810bbf8:	0810bc15 	.word	0x0810bc15
 810bbfc:	0810bc1d 	.word	0x0810bc1d
 810bc00:	0810bc25 	.word	0x0810bc25
 810bc04:	0810bc2d 	.word	0x0810bc2d
 810bc08:	0810bc35 	.word	0x0810bc35
 810bc0c:	2302      	movs	r3, #2
 810bc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc12:	e01a      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc14:	2304      	movs	r3, #4
 810bc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc1a:	e016      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc1c:	2308      	movs	r3, #8
 810bc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc22:	e012      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc24:	2310      	movs	r3, #16
 810bc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc2a:	e00e      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc2c:	2320      	movs	r3, #32
 810bc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc32:	e00a      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc34:	2340      	movs	r3, #64	; 0x40
 810bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc3a:	e006      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc3c:	2380      	movs	r3, #128	; 0x80
 810bc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bc42:	e002      	b.n	810bc4a <UART_SetConfig+0x5a2>
 810bc44:	2380      	movs	r3, #128	; 0x80
 810bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810bc4a:	687b      	ldr	r3, [r7, #4]
 810bc4c:	681b      	ldr	r3, [r3, #0]
 810bc4e:	4a40      	ldr	r2, [pc, #256]	; (810bd50 <UART_SetConfig+0x6a8>)
 810bc50:	4293      	cmp	r3, r2
 810bc52:	f040 80ef 	bne.w	810be34 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810bc56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810bc5a:	2b20      	cmp	r3, #32
 810bc5c:	dc46      	bgt.n	810bcec <UART_SetConfig+0x644>
 810bc5e:	2b02      	cmp	r3, #2
 810bc60:	f2c0 8081 	blt.w	810bd66 <UART_SetConfig+0x6be>
 810bc64:	3b02      	subs	r3, #2
 810bc66:	2b1e      	cmp	r3, #30
 810bc68:	d87d      	bhi.n	810bd66 <UART_SetConfig+0x6be>
 810bc6a:	a201      	add	r2, pc, #4	; (adr r2, 810bc70 <UART_SetConfig+0x5c8>)
 810bc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bc70:	0810bcf3 	.word	0x0810bcf3
 810bc74:	0810bd67 	.word	0x0810bd67
 810bc78:	0810bcfb 	.word	0x0810bcfb
 810bc7c:	0810bd67 	.word	0x0810bd67
 810bc80:	0810bd67 	.word	0x0810bd67
 810bc84:	0810bd67 	.word	0x0810bd67
 810bc88:	0810bd0b 	.word	0x0810bd0b
 810bc8c:	0810bd67 	.word	0x0810bd67
 810bc90:	0810bd67 	.word	0x0810bd67
 810bc94:	0810bd67 	.word	0x0810bd67
 810bc98:	0810bd67 	.word	0x0810bd67
 810bc9c:	0810bd67 	.word	0x0810bd67
 810bca0:	0810bd67 	.word	0x0810bd67
 810bca4:	0810bd67 	.word	0x0810bd67
 810bca8:	0810bd1b 	.word	0x0810bd1b
 810bcac:	0810bd67 	.word	0x0810bd67
 810bcb0:	0810bd67 	.word	0x0810bd67
 810bcb4:	0810bd67 	.word	0x0810bd67
 810bcb8:	0810bd67 	.word	0x0810bd67
 810bcbc:	0810bd67 	.word	0x0810bd67
 810bcc0:	0810bd67 	.word	0x0810bd67
 810bcc4:	0810bd67 	.word	0x0810bd67
 810bcc8:	0810bd67 	.word	0x0810bd67
 810bccc:	0810bd67 	.word	0x0810bd67
 810bcd0:	0810bd67 	.word	0x0810bd67
 810bcd4:	0810bd67 	.word	0x0810bd67
 810bcd8:	0810bd67 	.word	0x0810bd67
 810bcdc:	0810bd67 	.word	0x0810bd67
 810bce0:	0810bd67 	.word	0x0810bd67
 810bce4:	0810bd67 	.word	0x0810bd67
 810bce8:	0810bd59 	.word	0x0810bd59
 810bcec:	2b40      	cmp	r3, #64	; 0x40
 810bcee:	d036      	beq.n	810bd5e <UART_SetConfig+0x6b6>
 810bcf0:	e039      	b.n	810bd66 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810bcf2:	f7fd fed3 	bl	8109a9c <HAL_RCCEx_GetD3PCLK1Freq>
 810bcf6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bcf8:	e03b      	b.n	810bd72 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bcfa:	f107 0314 	add.w	r3, r7, #20
 810bcfe:	4618      	mov	r0, r3
 810bd00:	f7fd fee2 	bl	8109ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bd04:	69bb      	ldr	r3, [r7, #24]
 810bd06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd08:	e033      	b.n	810bd72 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bd0a:	f107 0308 	add.w	r3, r7, #8
 810bd0e:	4618      	mov	r0, r3
 810bd10:	f7fe f82e 	bl	8109d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bd14:	68fb      	ldr	r3, [r7, #12]
 810bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd18:	e02b      	b.n	810bd72 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bd1a:	4b0a      	ldr	r3, [pc, #40]	; (810bd44 <UART_SetConfig+0x69c>)
 810bd1c:	681b      	ldr	r3, [r3, #0]
 810bd1e:	f003 0320 	and.w	r3, r3, #32
 810bd22:	2b00      	cmp	r3, #0
 810bd24:	d009      	beq.n	810bd3a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bd26:	4b07      	ldr	r3, [pc, #28]	; (810bd44 <UART_SetConfig+0x69c>)
 810bd28:	681b      	ldr	r3, [r3, #0]
 810bd2a:	08db      	lsrs	r3, r3, #3
 810bd2c:	f003 0303 	and.w	r3, r3, #3
 810bd30:	4a08      	ldr	r2, [pc, #32]	; (810bd54 <UART_SetConfig+0x6ac>)
 810bd32:	fa22 f303 	lsr.w	r3, r2, r3
 810bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bd38:	e01b      	b.n	810bd72 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810bd3a:	4b06      	ldr	r3, [pc, #24]	; (810bd54 <UART_SetConfig+0x6ac>)
 810bd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd3e:	e018      	b.n	810bd72 <UART_SetConfig+0x6ca>
 810bd40:	40011400 	.word	0x40011400
 810bd44:	58024400 	.word	0x58024400
 810bd48:	40007800 	.word	0x40007800
 810bd4c:	40007c00 	.word	0x40007c00
 810bd50:	58000c00 	.word	0x58000c00
 810bd54:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bd58:	4bc4      	ldr	r3, [pc, #784]	; (810c06c <UART_SetConfig+0x9c4>)
 810bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd5c:	e009      	b.n	810bd72 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bd5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bd62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd64:	e005      	b.n	810bd72 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810bd66:	2300      	movs	r3, #0
 810bd68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bd6a:	2301      	movs	r3, #1
 810bd6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bd70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bd74:	2b00      	cmp	r3, #0
 810bd76:	f000 81da 	beq.w	810c12e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810bd7a:	687b      	ldr	r3, [r7, #4]
 810bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bd7e:	4abc      	ldr	r2, [pc, #752]	; (810c070 <UART_SetConfig+0x9c8>)
 810bd80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bd84:	461a      	mov	r2, r3
 810bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bd88:	fbb3 f3f2 	udiv	r3, r3, r2
 810bd8c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810bd8e:	687b      	ldr	r3, [r7, #4]
 810bd90:	685a      	ldr	r2, [r3, #4]
 810bd92:	4613      	mov	r3, r2
 810bd94:	005b      	lsls	r3, r3, #1
 810bd96:	4413      	add	r3, r2
 810bd98:	6a3a      	ldr	r2, [r7, #32]
 810bd9a:	429a      	cmp	r2, r3
 810bd9c:	d305      	bcc.n	810bdaa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810bd9e:	687b      	ldr	r3, [r7, #4]
 810bda0:	685b      	ldr	r3, [r3, #4]
 810bda2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810bda4:	6a3a      	ldr	r2, [r7, #32]
 810bda6:	429a      	cmp	r2, r3
 810bda8:	d903      	bls.n	810bdb2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810bdaa:	2301      	movs	r3, #1
 810bdac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810bdb0:	e1bd      	b.n	810c12e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bdb4:	4618      	mov	r0, r3
 810bdb6:	f04f 0100 	mov.w	r1, #0
 810bdba:	687b      	ldr	r3, [r7, #4]
 810bdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bdbe:	4aac      	ldr	r2, [pc, #688]	; (810c070 <UART_SetConfig+0x9c8>)
 810bdc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bdc4:	b29a      	uxth	r2, r3
 810bdc6:	f04f 0300 	mov.w	r3, #0
 810bdca:	f7f5 f89f 	bl	8100f0c <__aeabi_uldivmod>
 810bdce:	4602      	mov	r2, r0
 810bdd0:	460b      	mov	r3, r1
 810bdd2:	4610      	mov	r0, r2
 810bdd4:	4619      	mov	r1, r3
 810bdd6:	f04f 0200 	mov.w	r2, #0
 810bdda:	f04f 0300 	mov.w	r3, #0
 810bdde:	020b      	lsls	r3, r1, #8
 810bde0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810bde4:	0202      	lsls	r2, r0, #8
 810bde6:	6879      	ldr	r1, [r7, #4]
 810bde8:	6849      	ldr	r1, [r1, #4]
 810bdea:	0849      	lsrs	r1, r1, #1
 810bdec:	4608      	mov	r0, r1
 810bdee:	f04f 0100 	mov.w	r1, #0
 810bdf2:	1814      	adds	r4, r2, r0
 810bdf4:	eb43 0501 	adc.w	r5, r3, r1
 810bdf8:	687b      	ldr	r3, [r7, #4]
 810bdfa:	685b      	ldr	r3, [r3, #4]
 810bdfc:	461a      	mov	r2, r3
 810bdfe:	f04f 0300 	mov.w	r3, #0
 810be02:	4620      	mov	r0, r4
 810be04:	4629      	mov	r1, r5
 810be06:	f7f5 f881 	bl	8100f0c <__aeabi_uldivmod>
 810be0a:	4602      	mov	r2, r0
 810be0c:	460b      	mov	r3, r1
 810be0e:	4613      	mov	r3, r2
 810be10:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810be18:	d308      	bcc.n	810be2c <UART_SetConfig+0x784>
 810be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810be20:	d204      	bcs.n	810be2c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	681b      	ldr	r3, [r3, #0]
 810be26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810be28:	60da      	str	r2, [r3, #12]
 810be2a:	e180      	b.n	810c12e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810be2c:	2301      	movs	r3, #1
 810be2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810be32:	e17c      	b.n	810c12e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810be34:	687b      	ldr	r3, [r7, #4]
 810be36:	69db      	ldr	r3, [r3, #28]
 810be38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810be3c:	f040 80bf 	bne.w	810bfbe <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810be40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810be44:	2b20      	cmp	r3, #32
 810be46:	dc49      	bgt.n	810bedc <UART_SetConfig+0x834>
 810be48:	2b00      	cmp	r3, #0
 810be4a:	db7c      	blt.n	810bf46 <UART_SetConfig+0x89e>
 810be4c:	2b20      	cmp	r3, #32
 810be4e:	d87a      	bhi.n	810bf46 <UART_SetConfig+0x89e>
 810be50:	a201      	add	r2, pc, #4	; (adr r2, 810be58 <UART_SetConfig+0x7b0>)
 810be52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810be56:	bf00      	nop
 810be58:	0810bee3 	.word	0x0810bee3
 810be5c:	0810beeb 	.word	0x0810beeb
 810be60:	0810bf47 	.word	0x0810bf47
 810be64:	0810bf47 	.word	0x0810bf47
 810be68:	0810bef3 	.word	0x0810bef3
 810be6c:	0810bf47 	.word	0x0810bf47
 810be70:	0810bf47 	.word	0x0810bf47
 810be74:	0810bf47 	.word	0x0810bf47
 810be78:	0810bf03 	.word	0x0810bf03
 810be7c:	0810bf47 	.word	0x0810bf47
 810be80:	0810bf47 	.word	0x0810bf47
 810be84:	0810bf47 	.word	0x0810bf47
 810be88:	0810bf47 	.word	0x0810bf47
 810be8c:	0810bf47 	.word	0x0810bf47
 810be90:	0810bf47 	.word	0x0810bf47
 810be94:	0810bf47 	.word	0x0810bf47
 810be98:	0810bf13 	.word	0x0810bf13
 810be9c:	0810bf47 	.word	0x0810bf47
 810bea0:	0810bf47 	.word	0x0810bf47
 810bea4:	0810bf47 	.word	0x0810bf47
 810bea8:	0810bf47 	.word	0x0810bf47
 810beac:	0810bf47 	.word	0x0810bf47
 810beb0:	0810bf47 	.word	0x0810bf47
 810beb4:	0810bf47 	.word	0x0810bf47
 810beb8:	0810bf47 	.word	0x0810bf47
 810bebc:	0810bf47 	.word	0x0810bf47
 810bec0:	0810bf47 	.word	0x0810bf47
 810bec4:	0810bf47 	.word	0x0810bf47
 810bec8:	0810bf47 	.word	0x0810bf47
 810becc:	0810bf47 	.word	0x0810bf47
 810bed0:	0810bf47 	.word	0x0810bf47
 810bed4:	0810bf47 	.word	0x0810bf47
 810bed8:	0810bf39 	.word	0x0810bf39
 810bedc:	2b40      	cmp	r3, #64	; 0x40
 810bede:	d02e      	beq.n	810bf3e <UART_SetConfig+0x896>
 810bee0:	e031      	b.n	810bf46 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bee2:	f7fc fe6f 	bl	8108bc4 <HAL_RCC_GetPCLK1Freq>
 810bee6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bee8:	e033      	b.n	810bf52 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810beea:	f7fc fe81 	bl	8108bf0 <HAL_RCC_GetPCLK2Freq>
 810beee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bef0:	e02f      	b.n	810bf52 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bef2:	f107 0314 	add.w	r3, r7, #20
 810bef6:	4618      	mov	r0, r3
 810bef8:	f7fd fde6 	bl	8109ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810befc:	69bb      	ldr	r3, [r7, #24]
 810befe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf00:	e027      	b.n	810bf52 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bf02:	f107 0308 	add.w	r3, r7, #8
 810bf06:	4618      	mov	r0, r3
 810bf08:	f7fd ff32 	bl	8109d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bf0c:	68fb      	ldr	r3, [r7, #12]
 810bf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf10:	e01f      	b.n	810bf52 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bf12:	4b58      	ldr	r3, [pc, #352]	; (810c074 <UART_SetConfig+0x9cc>)
 810bf14:	681b      	ldr	r3, [r3, #0]
 810bf16:	f003 0320 	and.w	r3, r3, #32
 810bf1a:	2b00      	cmp	r3, #0
 810bf1c:	d009      	beq.n	810bf32 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bf1e:	4b55      	ldr	r3, [pc, #340]	; (810c074 <UART_SetConfig+0x9cc>)
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	08db      	lsrs	r3, r3, #3
 810bf24:	f003 0303 	and.w	r3, r3, #3
 810bf28:	4a53      	ldr	r2, [pc, #332]	; (810c078 <UART_SetConfig+0x9d0>)
 810bf2a:	fa22 f303 	lsr.w	r3, r2, r3
 810bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bf30:	e00f      	b.n	810bf52 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810bf32:	4b51      	ldr	r3, [pc, #324]	; (810c078 <UART_SetConfig+0x9d0>)
 810bf34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf36:	e00c      	b.n	810bf52 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bf38:	4b4c      	ldr	r3, [pc, #304]	; (810c06c <UART_SetConfig+0x9c4>)
 810bf3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf3c:	e009      	b.n	810bf52 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bf3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bf42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bf44:	e005      	b.n	810bf52 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810bf46:	2300      	movs	r3, #0
 810bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bf4a:	2301      	movs	r3, #1
 810bf4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bf50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bf54:	2b00      	cmp	r3, #0
 810bf56:	f000 80ea 	beq.w	810c12e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bf5e:	4a44      	ldr	r2, [pc, #272]	; (810c070 <UART_SetConfig+0x9c8>)
 810bf60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bf64:	461a      	mov	r2, r3
 810bf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bf68:	fbb3 f3f2 	udiv	r3, r3, r2
 810bf6c:	005a      	lsls	r2, r3, #1
 810bf6e:	687b      	ldr	r3, [r7, #4]
 810bf70:	685b      	ldr	r3, [r3, #4]
 810bf72:	085b      	lsrs	r3, r3, #1
 810bf74:	441a      	add	r2, r3
 810bf76:	687b      	ldr	r3, [r7, #4]
 810bf78:	685b      	ldr	r3, [r3, #4]
 810bf7a:	fbb2 f3f3 	udiv	r3, r2, r3
 810bf7e:	b29b      	uxth	r3, r3
 810bf80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf84:	2b0f      	cmp	r3, #15
 810bf86:	d916      	bls.n	810bfb6 <UART_SetConfig+0x90e>
 810bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bf8e:	d212      	bcs.n	810bfb6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf92:	b29b      	uxth	r3, r3
 810bf94:	f023 030f 	bic.w	r3, r3, #15
 810bf98:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf9c:	085b      	lsrs	r3, r3, #1
 810bf9e:	b29b      	uxth	r3, r3
 810bfa0:	f003 0307 	and.w	r3, r3, #7
 810bfa4:	b29a      	uxth	r2, r3
 810bfa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810bfa8:	4313      	orrs	r3, r2
 810bfaa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810bfac:	687b      	ldr	r3, [r7, #4]
 810bfae:	681b      	ldr	r3, [r3, #0]
 810bfb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810bfb2:	60da      	str	r2, [r3, #12]
 810bfb4:	e0bb      	b.n	810c12e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810bfb6:	2301      	movs	r3, #1
 810bfb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810bfbc:	e0b7      	b.n	810c12e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810bfbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810bfc2:	2b20      	cmp	r3, #32
 810bfc4:	dc4a      	bgt.n	810c05c <UART_SetConfig+0x9b4>
 810bfc6:	2b00      	cmp	r3, #0
 810bfc8:	f2c0 8086 	blt.w	810c0d8 <UART_SetConfig+0xa30>
 810bfcc:	2b20      	cmp	r3, #32
 810bfce:	f200 8083 	bhi.w	810c0d8 <UART_SetConfig+0xa30>
 810bfd2:	a201      	add	r2, pc, #4	; (adr r2, 810bfd8 <UART_SetConfig+0x930>)
 810bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bfd8:	0810c063 	.word	0x0810c063
 810bfdc:	0810c07d 	.word	0x0810c07d
 810bfe0:	0810c0d9 	.word	0x0810c0d9
 810bfe4:	0810c0d9 	.word	0x0810c0d9
 810bfe8:	0810c085 	.word	0x0810c085
 810bfec:	0810c0d9 	.word	0x0810c0d9
 810bff0:	0810c0d9 	.word	0x0810c0d9
 810bff4:	0810c0d9 	.word	0x0810c0d9
 810bff8:	0810c095 	.word	0x0810c095
 810bffc:	0810c0d9 	.word	0x0810c0d9
 810c000:	0810c0d9 	.word	0x0810c0d9
 810c004:	0810c0d9 	.word	0x0810c0d9
 810c008:	0810c0d9 	.word	0x0810c0d9
 810c00c:	0810c0d9 	.word	0x0810c0d9
 810c010:	0810c0d9 	.word	0x0810c0d9
 810c014:	0810c0d9 	.word	0x0810c0d9
 810c018:	0810c0a5 	.word	0x0810c0a5
 810c01c:	0810c0d9 	.word	0x0810c0d9
 810c020:	0810c0d9 	.word	0x0810c0d9
 810c024:	0810c0d9 	.word	0x0810c0d9
 810c028:	0810c0d9 	.word	0x0810c0d9
 810c02c:	0810c0d9 	.word	0x0810c0d9
 810c030:	0810c0d9 	.word	0x0810c0d9
 810c034:	0810c0d9 	.word	0x0810c0d9
 810c038:	0810c0d9 	.word	0x0810c0d9
 810c03c:	0810c0d9 	.word	0x0810c0d9
 810c040:	0810c0d9 	.word	0x0810c0d9
 810c044:	0810c0d9 	.word	0x0810c0d9
 810c048:	0810c0d9 	.word	0x0810c0d9
 810c04c:	0810c0d9 	.word	0x0810c0d9
 810c050:	0810c0d9 	.word	0x0810c0d9
 810c054:	0810c0d9 	.word	0x0810c0d9
 810c058:	0810c0cb 	.word	0x0810c0cb
 810c05c:	2b40      	cmp	r3, #64	; 0x40
 810c05e:	d037      	beq.n	810c0d0 <UART_SetConfig+0xa28>
 810c060:	e03a      	b.n	810c0d8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c062:	f7fc fdaf 	bl	8108bc4 <HAL_RCC_GetPCLK1Freq>
 810c066:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c068:	e03c      	b.n	810c0e4 <UART_SetConfig+0xa3c>
 810c06a:	bf00      	nop
 810c06c:	003d0900 	.word	0x003d0900
 810c070:	0810d8fc 	.word	0x0810d8fc
 810c074:	58024400 	.word	0x58024400
 810c078:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c07c:	f7fc fdb8 	bl	8108bf0 <HAL_RCC_GetPCLK2Freq>
 810c080:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c082:	e02f      	b.n	810c0e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c084:	f107 0314 	add.w	r3, r7, #20
 810c088:	4618      	mov	r0, r3
 810c08a:	f7fd fd1d 	bl	8109ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c08e:	69bb      	ldr	r3, [r7, #24]
 810c090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c092:	e027      	b.n	810c0e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c094:	f107 0308 	add.w	r3, r7, #8
 810c098:	4618      	mov	r0, r3
 810c09a:	f7fd fe69 	bl	8109d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c09e:	68fb      	ldr	r3, [r7, #12]
 810c0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c0a2:	e01f      	b.n	810c0e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c0a4:	4b2c      	ldr	r3, [pc, #176]	; (810c158 <UART_SetConfig+0xab0>)
 810c0a6:	681b      	ldr	r3, [r3, #0]
 810c0a8:	f003 0320 	and.w	r3, r3, #32
 810c0ac:	2b00      	cmp	r3, #0
 810c0ae:	d009      	beq.n	810c0c4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c0b0:	4b29      	ldr	r3, [pc, #164]	; (810c158 <UART_SetConfig+0xab0>)
 810c0b2:	681b      	ldr	r3, [r3, #0]
 810c0b4:	08db      	lsrs	r3, r3, #3
 810c0b6:	f003 0303 	and.w	r3, r3, #3
 810c0ba:	4a28      	ldr	r2, [pc, #160]	; (810c15c <UART_SetConfig+0xab4>)
 810c0bc:	fa22 f303 	lsr.w	r3, r2, r3
 810c0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c0c2:	e00f      	b.n	810c0e4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810c0c4:	4b25      	ldr	r3, [pc, #148]	; (810c15c <UART_SetConfig+0xab4>)
 810c0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c0c8:	e00c      	b.n	810c0e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c0ca:	4b25      	ldr	r3, [pc, #148]	; (810c160 <UART_SetConfig+0xab8>)
 810c0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c0ce:	e009      	b.n	810c0e4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c0d6:	e005      	b.n	810c0e4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810c0d8:	2300      	movs	r3, #0
 810c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c0dc:	2301      	movs	r3, #1
 810c0de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c0e2:	bf00      	nop
    }

    if (pclk != 0U)
 810c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c0e6:	2b00      	cmp	r3, #0
 810c0e8:	d021      	beq.n	810c12e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c0ea:	687b      	ldr	r3, [r7, #4]
 810c0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c0ee:	4a1d      	ldr	r2, [pc, #116]	; (810c164 <UART_SetConfig+0xabc>)
 810c0f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c0f4:	461a      	mov	r2, r3
 810c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c0f8:	fbb3 f2f2 	udiv	r2, r3, r2
 810c0fc:	687b      	ldr	r3, [r7, #4]
 810c0fe:	685b      	ldr	r3, [r3, #4]
 810c100:	085b      	lsrs	r3, r3, #1
 810c102:	441a      	add	r2, r3
 810c104:	687b      	ldr	r3, [r7, #4]
 810c106:	685b      	ldr	r3, [r3, #4]
 810c108:	fbb2 f3f3 	udiv	r3, r2, r3
 810c10c:	b29b      	uxth	r3, r3
 810c10e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c112:	2b0f      	cmp	r3, #15
 810c114:	d908      	bls.n	810c128 <UART_SetConfig+0xa80>
 810c116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c11c:	d204      	bcs.n	810c128 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810c11e:	687b      	ldr	r3, [r7, #4]
 810c120:	681b      	ldr	r3, [r3, #0]
 810c122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c124:	60da      	str	r2, [r3, #12]
 810c126:	e002      	b.n	810c12e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810c128:	2301      	movs	r3, #1
 810c12a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810c12e:	687b      	ldr	r3, [r7, #4]
 810c130:	2201      	movs	r2, #1
 810c132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810c136:	687b      	ldr	r3, [r7, #4]
 810c138:	2201      	movs	r2, #1
 810c13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810c13e:	687b      	ldr	r3, [r7, #4]
 810c140:	2200      	movs	r2, #0
 810c142:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810c144:	687b      	ldr	r3, [r7, #4]
 810c146:	2200      	movs	r2, #0
 810c148:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810c14a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810c14e:	4618      	mov	r0, r3
 810c150:	3738      	adds	r7, #56	; 0x38
 810c152:	46bd      	mov	sp, r7
 810c154:	bdb0      	pop	{r4, r5, r7, pc}
 810c156:	bf00      	nop
 810c158:	58024400 	.word	0x58024400
 810c15c:	03d09000 	.word	0x03d09000
 810c160:	003d0900 	.word	0x003d0900
 810c164:	0810d8fc 	.word	0x0810d8fc

0810c168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810c168:	b480      	push	{r7}
 810c16a:	b083      	sub	sp, #12
 810c16c:	af00      	add	r7, sp, #0
 810c16e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810c170:	687b      	ldr	r3, [r7, #4]
 810c172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c174:	f003 0301 	and.w	r3, r3, #1
 810c178:	2b00      	cmp	r3, #0
 810c17a:	d00a      	beq.n	810c192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810c17c:	687b      	ldr	r3, [r7, #4]
 810c17e:	681b      	ldr	r3, [r3, #0]
 810c180:	685b      	ldr	r3, [r3, #4]
 810c182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810c186:	687b      	ldr	r3, [r7, #4]
 810c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c18a:	687b      	ldr	r3, [r7, #4]
 810c18c:	681b      	ldr	r3, [r3, #0]
 810c18e:	430a      	orrs	r2, r1
 810c190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810c192:	687b      	ldr	r3, [r7, #4]
 810c194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c196:	f003 0302 	and.w	r3, r3, #2
 810c19a:	2b00      	cmp	r3, #0
 810c19c:	d00a      	beq.n	810c1b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810c19e:	687b      	ldr	r3, [r7, #4]
 810c1a0:	681b      	ldr	r3, [r3, #0]
 810c1a2:	685b      	ldr	r3, [r3, #4]
 810c1a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810c1a8:	687b      	ldr	r3, [r7, #4]
 810c1aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810c1ac:	687b      	ldr	r3, [r7, #4]
 810c1ae:	681b      	ldr	r3, [r3, #0]
 810c1b0:	430a      	orrs	r2, r1
 810c1b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810c1b4:	687b      	ldr	r3, [r7, #4]
 810c1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c1b8:	f003 0304 	and.w	r3, r3, #4
 810c1bc:	2b00      	cmp	r3, #0
 810c1be:	d00a      	beq.n	810c1d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810c1c0:	687b      	ldr	r3, [r7, #4]
 810c1c2:	681b      	ldr	r3, [r3, #0]
 810c1c4:	685b      	ldr	r3, [r3, #4]
 810c1c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810c1ca:	687b      	ldr	r3, [r7, #4]
 810c1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810c1ce:	687b      	ldr	r3, [r7, #4]
 810c1d0:	681b      	ldr	r3, [r3, #0]
 810c1d2:	430a      	orrs	r2, r1
 810c1d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810c1d6:	687b      	ldr	r3, [r7, #4]
 810c1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c1da:	f003 0308 	and.w	r3, r3, #8
 810c1de:	2b00      	cmp	r3, #0
 810c1e0:	d00a      	beq.n	810c1f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810c1e2:	687b      	ldr	r3, [r7, #4]
 810c1e4:	681b      	ldr	r3, [r3, #0]
 810c1e6:	685b      	ldr	r3, [r3, #4]
 810c1e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810c1ec:	687b      	ldr	r3, [r7, #4]
 810c1ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c1f0:	687b      	ldr	r3, [r7, #4]
 810c1f2:	681b      	ldr	r3, [r3, #0]
 810c1f4:	430a      	orrs	r2, r1
 810c1f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810c1f8:	687b      	ldr	r3, [r7, #4]
 810c1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c1fc:	f003 0310 	and.w	r3, r3, #16
 810c200:	2b00      	cmp	r3, #0
 810c202:	d00a      	beq.n	810c21a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810c204:	687b      	ldr	r3, [r7, #4]
 810c206:	681b      	ldr	r3, [r3, #0]
 810c208:	689b      	ldr	r3, [r3, #8]
 810c20a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810c20e:	687b      	ldr	r3, [r7, #4]
 810c210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c212:	687b      	ldr	r3, [r7, #4]
 810c214:	681b      	ldr	r3, [r3, #0]
 810c216:	430a      	orrs	r2, r1
 810c218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810c21a:	687b      	ldr	r3, [r7, #4]
 810c21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c21e:	f003 0320 	and.w	r3, r3, #32
 810c222:	2b00      	cmp	r3, #0
 810c224:	d00a      	beq.n	810c23c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	681b      	ldr	r3, [r3, #0]
 810c22a:	689b      	ldr	r3, [r3, #8]
 810c22c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810c230:	687b      	ldr	r3, [r7, #4]
 810c232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810c234:	687b      	ldr	r3, [r7, #4]
 810c236:	681b      	ldr	r3, [r3, #0]
 810c238:	430a      	orrs	r2, r1
 810c23a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810c23c:	687b      	ldr	r3, [r7, #4]
 810c23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c244:	2b00      	cmp	r3, #0
 810c246:	d01a      	beq.n	810c27e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810c248:	687b      	ldr	r3, [r7, #4]
 810c24a:	681b      	ldr	r3, [r3, #0]
 810c24c:	685b      	ldr	r3, [r3, #4]
 810c24e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810c252:	687b      	ldr	r3, [r7, #4]
 810c254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810c256:	687b      	ldr	r3, [r7, #4]
 810c258:	681b      	ldr	r3, [r3, #0]
 810c25a:	430a      	orrs	r2, r1
 810c25c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810c25e:	687b      	ldr	r3, [r7, #4]
 810c260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810c262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c266:	d10a      	bne.n	810c27e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810c268:	687b      	ldr	r3, [r7, #4]
 810c26a:	681b      	ldr	r3, [r3, #0]
 810c26c:	685b      	ldr	r3, [r3, #4]
 810c26e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810c272:	687b      	ldr	r3, [r7, #4]
 810c274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810c276:	687b      	ldr	r3, [r7, #4]
 810c278:	681b      	ldr	r3, [r3, #0]
 810c27a:	430a      	orrs	r2, r1
 810c27c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810c27e:	687b      	ldr	r3, [r7, #4]
 810c280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c286:	2b00      	cmp	r3, #0
 810c288:	d00a      	beq.n	810c2a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810c28a:	687b      	ldr	r3, [r7, #4]
 810c28c:	681b      	ldr	r3, [r3, #0]
 810c28e:	685b      	ldr	r3, [r3, #4]
 810c290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810c294:	687b      	ldr	r3, [r7, #4]
 810c296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c298:	687b      	ldr	r3, [r7, #4]
 810c29a:	681b      	ldr	r3, [r3, #0]
 810c29c:	430a      	orrs	r2, r1
 810c29e:	605a      	str	r2, [r3, #4]
  }
}
 810c2a0:	bf00      	nop
 810c2a2:	370c      	adds	r7, #12
 810c2a4:	46bd      	mov	sp, r7
 810c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2aa:	4770      	bx	lr

0810c2ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810c2ac:	b580      	push	{r7, lr}
 810c2ae:	b086      	sub	sp, #24
 810c2b0:	af02      	add	r7, sp, #8
 810c2b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c2b4:	687b      	ldr	r3, [r7, #4]
 810c2b6:	2200      	movs	r2, #0
 810c2b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810c2bc:	f7f7 f9d8 	bl	8103670 <HAL_GetTick>
 810c2c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810c2c2:	687b      	ldr	r3, [r7, #4]
 810c2c4:	681b      	ldr	r3, [r3, #0]
 810c2c6:	681b      	ldr	r3, [r3, #0]
 810c2c8:	f003 0308 	and.w	r3, r3, #8
 810c2cc:	2b08      	cmp	r3, #8
 810c2ce:	d10e      	bne.n	810c2ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c2d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810c2d4:	9300      	str	r3, [sp, #0]
 810c2d6:	68fb      	ldr	r3, [r7, #12]
 810c2d8:	2200      	movs	r2, #0
 810c2da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810c2de:	6878      	ldr	r0, [r7, #4]
 810c2e0:	f000 f82f 	bl	810c342 <UART_WaitOnFlagUntilTimeout>
 810c2e4:	4603      	mov	r3, r0
 810c2e6:	2b00      	cmp	r3, #0
 810c2e8:	d001      	beq.n	810c2ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c2ea:	2303      	movs	r3, #3
 810c2ec:	e025      	b.n	810c33a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810c2ee:	687b      	ldr	r3, [r7, #4]
 810c2f0:	681b      	ldr	r3, [r3, #0]
 810c2f2:	681b      	ldr	r3, [r3, #0]
 810c2f4:	f003 0304 	and.w	r3, r3, #4
 810c2f8:	2b04      	cmp	r3, #4
 810c2fa:	d10e      	bne.n	810c31a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810c2fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810c300:	9300      	str	r3, [sp, #0]
 810c302:	68fb      	ldr	r3, [r7, #12]
 810c304:	2200      	movs	r2, #0
 810c306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810c30a:	6878      	ldr	r0, [r7, #4]
 810c30c:	f000 f819 	bl	810c342 <UART_WaitOnFlagUntilTimeout>
 810c310:	4603      	mov	r3, r0
 810c312:	2b00      	cmp	r3, #0
 810c314:	d001      	beq.n	810c31a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c316:	2303      	movs	r3, #3
 810c318:	e00f      	b.n	810c33a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810c31a:	687b      	ldr	r3, [r7, #4]
 810c31c:	2220      	movs	r2, #32
 810c31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810c322:	687b      	ldr	r3, [r7, #4]
 810c324:	2220      	movs	r2, #32
 810c326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c32a:	687b      	ldr	r3, [r7, #4]
 810c32c:	2200      	movs	r2, #0
 810c32e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810c330:	687b      	ldr	r3, [r7, #4]
 810c332:	2200      	movs	r2, #0
 810c334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c338:	2300      	movs	r3, #0
}
 810c33a:	4618      	mov	r0, r3
 810c33c:	3710      	adds	r7, #16
 810c33e:	46bd      	mov	sp, r7
 810c340:	bd80      	pop	{r7, pc}

0810c342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c342:	b580      	push	{r7, lr}
 810c344:	b084      	sub	sp, #16
 810c346:	af00      	add	r7, sp, #0
 810c348:	60f8      	str	r0, [r7, #12]
 810c34a:	60b9      	str	r1, [r7, #8]
 810c34c:	603b      	str	r3, [r7, #0]
 810c34e:	4613      	mov	r3, r2
 810c350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c352:	e062      	b.n	810c41a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c354:	69bb      	ldr	r3, [r7, #24]
 810c356:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c35a:	d05e      	beq.n	810c41a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c35c:	f7f7 f988 	bl	8103670 <HAL_GetTick>
 810c360:	4602      	mov	r2, r0
 810c362:	683b      	ldr	r3, [r7, #0]
 810c364:	1ad3      	subs	r3, r2, r3
 810c366:	69ba      	ldr	r2, [r7, #24]
 810c368:	429a      	cmp	r2, r3
 810c36a:	d302      	bcc.n	810c372 <UART_WaitOnFlagUntilTimeout+0x30>
 810c36c:	69bb      	ldr	r3, [r7, #24]
 810c36e:	2b00      	cmp	r3, #0
 810c370:	d11d      	bne.n	810c3ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810c372:	68fb      	ldr	r3, [r7, #12]
 810c374:	681b      	ldr	r3, [r3, #0]
 810c376:	681a      	ldr	r2, [r3, #0]
 810c378:	68fb      	ldr	r3, [r7, #12]
 810c37a:	681b      	ldr	r3, [r3, #0]
 810c37c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810c380:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c382:	68fb      	ldr	r3, [r7, #12]
 810c384:	681b      	ldr	r3, [r3, #0]
 810c386:	689a      	ldr	r2, [r3, #8]
 810c388:	68fb      	ldr	r3, [r7, #12]
 810c38a:	681b      	ldr	r3, [r3, #0]
 810c38c:	f022 0201 	bic.w	r2, r2, #1
 810c390:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810c392:	68fb      	ldr	r3, [r7, #12]
 810c394:	2220      	movs	r2, #32
 810c396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810c39a:	68fb      	ldr	r3, [r7, #12]
 810c39c:	2220      	movs	r2, #32
 810c39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810c3a2:	68fb      	ldr	r3, [r7, #12]
 810c3a4:	2200      	movs	r2, #0
 810c3a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810c3aa:	2303      	movs	r3, #3
 810c3ac:	e045      	b.n	810c43a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810c3ae:	68fb      	ldr	r3, [r7, #12]
 810c3b0:	681b      	ldr	r3, [r3, #0]
 810c3b2:	681b      	ldr	r3, [r3, #0]
 810c3b4:	f003 0304 	and.w	r3, r3, #4
 810c3b8:	2b00      	cmp	r3, #0
 810c3ba:	d02e      	beq.n	810c41a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810c3bc:	68fb      	ldr	r3, [r7, #12]
 810c3be:	681b      	ldr	r3, [r3, #0]
 810c3c0:	69db      	ldr	r3, [r3, #28]
 810c3c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810c3c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810c3ca:	d126      	bne.n	810c41a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c3cc:	68fb      	ldr	r3, [r7, #12]
 810c3ce:	681b      	ldr	r3, [r3, #0]
 810c3d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c3d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810c3d6:	68fb      	ldr	r3, [r7, #12]
 810c3d8:	681b      	ldr	r3, [r3, #0]
 810c3da:	681a      	ldr	r2, [r3, #0]
 810c3dc:	68fb      	ldr	r3, [r7, #12]
 810c3de:	681b      	ldr	r3, [r3, #0]
 810c3e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810c3e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c3e6:	68fb      	ldr	r3, [r7, #12]
 810c3e8:	681b      	ldr	r3, [r3, #0]
 810c3ea:	689a      	ldr	r2, [r3, #8]
 810c3ec:	68fb      	ldr	r3, [r7, #12]
 810c3ee:	681b      	ldr	r3, [r3, #0]
 810c3f0:	f022 0201 	bic.w	r2, r2, #1
 810c3f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810c3f6:	68fb      	ldr	r3, [r7, #12]
 810c3f8:	2220      	movs	r2, #32
 810c3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810c3fe:	68fb      	ldr	r3, [r7, #12]
 810c400:	2220      	movs	r2, #32
 810c402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c406:	68fb      	ldr	r3, [r7, #12]
 810c408:	2220      	movs	r2, #32
 810c40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c40e:	68fb      	ldr	r3, [r7, #12]
 810c410:	2200      	movs	r2, #0
 810c412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810c416:	2303      	movs	r3, #3
 810c418:	e00f      	b.n	810c43a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c41a:	68fb      	ldr	r3, [r7, #12]
 810c41c:	681b      	ldr	r3, [r3, #0]
 810c41e:	69da      	ldr	r2, [r3, #28]
 810c420:	68bb      	ldr	r3, [r7, #8]
 810c422:	4013      	ands	r3, r2
 810c424:	68ba      	ldr	r2, [r7, #8]
 810c426:	429a      	cmp	r2, r3
 810c428:	bf0c      	ite	eq
 810c42a:	2301      	moveq	r3, #1
 810c42c:	2300      	movne	r3, #0
 810c42e:	b2db      	uxtb	r3, r3
 810c430:	461a      	mov	r2, r3
 810c432:	79fb      	ldrb	r3, [r7, #7]
 810c434:	429a      	cmp	r2, r3
 810c436:	d08d      	beq.n	810c354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c438:	2300      	movs	r3, #0
}
 810c43a:	4618      	mov	r0, r3
 810c43c:	3710      	adds	r7, #16
 810c43e:	46bd      	mov	sp, r7
 810c440:	bd80      	pop	{r7, pc}

0810c442 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810c442:	b480      	push	{r7}
 810c444:	b083      	sub	sp, #12
 810c446:	af00      	add	r7, sp, #0
 810c448:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810c44a:	687b      	ldr	r3, [r7, #4]
 810c44c:	681b      	ldr	r3, [r3, #0]
 810c44e:	681a      	ldr	r2, [r3, #0]
 810c450:	687b      	ldr	r3, [r7, #4]
 810c452:	681b      	ldr	r3, [r3, #0]
 810c454:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810c458:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810c45a:	687b      	ldr	r3, [r7, #4]
 810c45c:	681b      	ldr	r3, [r3, #0]
 810c45e:	689a      	ldr	r2, [r3, #8]
 810c460:	687b      	ldr	r3, [r7, #4]
 810c462:	681b      	ldr	r3, [r3, #0]
 810c464:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810c468:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c46a:	687b      	ldr	r3, [r7, #4]
 810c46c:	2220      	movs	r2, #32
 810c46e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810c472:	bf00      	nop
 810c474:	370c      	adds	r7, #12
 810c476:	46bd      	mov	sp, r7
 810c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c47c:	4770      	bx	lr

0810c47e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c47e:	b480      	push	{r7}
 810c480:	b083      	sub	sp, #12
 810c482:	af00      	add	r7, sp, #0
 810c484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c486:	687b      	ldr	r3, [r7, #4]
 810c488:	681b      	ldr	r3, [r3, #0]
 810c48a:	681a      	ldr	r2, [r3, #0]
 810c48c:	687b      	ldr	r3, [r7, #4]
 810c48e:	681b      	ldr	r3, [r3, #0]
 810c490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810c494:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c496:	687b      	ldr	r3, [r7, #4]
 810c498:	681b      	ldr	r3, [r3, #0]
 810c49a:	689b      	ldr	r3, [r3, #8]
 810c49c:	687a      	ldr	r2, [r7, #4]
 810c49e:	6812      	ldr	r2, [r2, #0]
 810c4a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c4a4:	f023 0301 	bic.w	r3, r3, #1
 810c4a8:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c4aa:	687b      	ldr	r3, [r7, #4]
 810c4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c4ae:	2b01      	cmp	r3, #1
 810c4b0:	d107      	bne.n	810c4c2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c4b2:	687b      	ldr	r3, [r7, #4]
 810c4b4:	681b      	ldr	r3, [r3, #0]
 810c4b6:	681a      	ldr	r2, [r3, #0]
 810c4b8:	687b      	ldr	r3, [r7, #4]
 810c4ba:	681b      	ldr	r3, [r3, #0]
 810c4bc:	f022 0210 	bic.w	r2, r2, #16
 810c4c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c4c2:	687b      	ldr	r3, [r7, #4]
 810c4c4:	2220      	movs	r2, #32
 810c4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c4ca:	687b      	ldr	r3, [r7, #4]
 810c4cc:	2200      	movs	r2, #0
 810c4ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c4d0:	687b      	ldr	r3, [r7, #4]
 810c4d2:	2200      	movs	r2, #0
 810c4d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 810c4d6:	bf00      	nop
 810c4d8:	370c      	adds	r7, #12
 810c4da:	46bd      	mov	sp, r7
 810c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4e0:	4770      	bx	lr

0810c4e2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810c4e2:	b580      	push	{r7, lr}
 810c4e4:	b084      	sub	sp, #16
 810c4e6:	af00      	add	r7, sp, #0
 810c4e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c4ea:	687b      	ldr	r3, [r7, #4]
 810c4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c4ee:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c4f0:	687b      	ldr	r3, [r7, #4]
 810c4f2:	69db      	ldr	r3, [r3, #28]
 810c4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c4f8:	d014      	beq.n	810c524 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810c4fa:	68fb      	ldr	r3, [r7, #12]
 810c4fc:	2200      	movs	r2, #0
 810c4fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810c502:	68fb      	ldr	r3, [r7, #12]
 810c504:	681b      	ldr	r3, [r3, #0]
 810c506:	689a      	ldr	r2, [r3, #8]
 810c508:	68fb      	ldr	r3, [r7, #12]
 810c50a:	681b      	ldr	r3, [r3, #0]
 810c50c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c510:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c512:	68fb      	ldr	r3, [r7, #12]
 810c514:	681b      	ldr	r3, [r3, #0]
 810c516:	681a      	ldr	r2, [r3, #0]
 810c518:	68fb      	ldr	r3, [r7, #12]
 810c51a:	681b      	ldr	r3, [r3, #0]
 810c51c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c520:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c522:	e002      	b.n	810c52a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810c524:	68f8      	ldr	r0, [r7, #12]
 810c526:	f7f6 fea9 	bl	810327c <HAL_UART_TxCpltCallback>
}
 810c52a:	bf00      	nop
 810c52c:	3710      	adds	r7, #16
 810c52e:	46bd      	mov	sp, r7
 810c530:	bd80      	pop	{r7, pc}

0810c532 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c532:	b580      	push	{r7, lr}
 810c534:	b084      	sub	sp, #16
 810c536:	af00      	add	r7, sp, #0
 810c538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c53a:	687b      	ldr	r3, [r7, #4]
 810c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c53e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810c540:	68f8      	ldr	r0, [r7, #12]
 810c542:	f7ff f891 	bl	810b668 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c546:	bf00      	nop
 810c548:	3710      	adds	r7, #16
 810c54a:	46bd      	mov	sp, r7
 810c54c:	bd80      	pop	{r7, pc}

0810c54e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810c54e:	b580      	push	{r7, lr}
 810c550:	b086      	sub	sp, #24
 810c552:	af00      	add	r7, sp, #0
 810c554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c556:	687b      	ldr	r3, [r7, #4]
 810c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c55a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810c55c:	697b      	ldr	r3, [r7, #20]
 810c55e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810c562:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810c564:	697b      	ldr	r3, [r7, #20]
 810c566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810c56a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810c56c:	697b      	ldr	r3, [r7, #20]
 810c56e:	681b      	ldr	r3, [r3, #0]
 810c570:	689b      	ldr	r3, [r3, #8]
 810c572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c576:	2b80      	cmp	r3, #128	; 0x80
 810c578:	d109      	bne.n	810c58e <UART_DMAError+0x40>
 810c57a:	693b      	ldr	r3, [r7, #16]
 810c57c:	2b21      	cmp	r3, #33	; 0x21
 810c57e:	d106      	bne.n	810c58e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810c580:	697b      	ldr	r3, [r7, #20]
 810c582:	2200      	movs	r2, #0
 810c584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810c588:	6978      	ldr	r0, [r7, #20]
 810c58a:	f7ff ff5a 	bl	810c442 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810c58e:	697b      	ldr	r3, [r7, #20]
 810c590:	681b      	ldr	r3, [r3, #0]
 810c592:	689b      	ldr	r3, [r3, #8]
 810c594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c598:	2b40      	cmp	r3, #64	; 0x40
 810c59a:	d109      	bne.n	810c5b0 <UART_DMAError+0x62>
 810c59c:	68fb      	ldr	r3, [r7, #12]
 810c59e:	2b22      	cmp	r3, #34	; 0x22
 810c5a0:	d106      	bne.n	810c5b0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810c5a2:	697b      	ldr	r3, [r7, #20]
 810c5a4:	2200      	movs	r2, #0
 810c5a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810c5aa:	6978      	ldr	r0, [r7, #20]
 810c5ac:	f7ff ff67 	bl	810c47e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810c5b0:	697b      	ldr	r3, [r7, #20]
 810c5b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c5b6:	f043 0210 	orr.w	r2, r3, #16
 810c5ba:	697b      	ldr	r3, [r7, #20]
 810c5bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c5c0:	6978      	ldr	r0, [r7, #20]
 810c5c2:	f7ff f85b 	bl	810b67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c5c6:	bf00      	nop
 810c5c8:	3718      	adds	r7, #24
 810c5ca:	46bd      	mov	sp, r7
 810c5cc:	bd80      	pop	{r7, pc}

0810c5ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810c5ce:	b580      	push	{r7, lr}
 810c5d0:	b084      	sub	sp, #16
 810c5d2:	af00      	add	r7, sp, #0
 810c5d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c5d6:	687b      	ldr	r3, [r7, #4]
 810c5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c5da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810c5dc:	68fb      	ldr	r3, [r7, #12]
 810c5de:	2200      	movs	r2, #0
 810c5e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810c5e4:	68fb      	ldr	r3, [r7, #12]
 810c5e6:	2200      	movs	r2, #0
 810c5e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c5ec:	68f8      	ldr	r0, [r7, #12]
 810c5ee:	f7ff f845 	bl	810b67c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c5f2:	bf00      	nop
 810c5f4:	3710      	adds	r7, #16
 810c5f6:	46bd      	mov	sp, r7
 810c5f8:	bd80      	pop	{r7, pc}

0810c5fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810c5fa:	b580      	push	{r7, lr}
 810c5fc:	b082      	sub	sp, #8
 810c5fe:	af00      	add	r7, sp, #0
 810c600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c602:	687b      	ldr	r3, [r7, #4]
 810c604:	681b      	ldr	r3, [r3, #0]
 810c606:	681a      	ldr	r2, [r3, #0]
 810c608:	687b      	ldr	r3, [r7, #4]
 810c60a:	681b      	ldr	r3, [r3, #0]
 810c60c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c610:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c612:	687b      	ldr	r3, [r7, #4]
 810c614:	2220      	movs	r2, #32
 810c616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810c61a:	687b      	ldr	r3, [r7, #4]
 810c61c:	2200      	movs	r2, #0
 810c61e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810c620:	6878      	ldr	r0, [r7, #4]
 810c622:	f7f6 fe2b 	bl	810327c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c626:	bf00      	nop
 810c628:	3708      	adds	r7, #8
 810c62a:	46bd      	mov	sp, r7
 810c62c:	bd80      	pop	{r7, pc}

0810c62e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810c62e:	b480      	push	{r7}
 810c630:	b083      	sub	sp, #12
 810c632:	af00      	add	r7, sp, #0
 810c634:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810c636:	bf00      	nop
 810c638:	370c      	adds	r7, #12
 810c63a:	46bd      	mov	sp, r7
 810c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c640:	4770      	bx	lr

0810c642 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810c642:	b480      	push	{r7}
 810c644:	b083      	sub	sp, #12
 810c646:	af00      	add	r7, sp, #0
 810c648:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810c64a:	bf00      	nop
 810c64c:	370c      	adds	r7, #12
 810c64e:	46bd      	mov	sp, r7
 810c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c654:	4770      	bx	lr

0810c656 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810c656:	b480      	push	{r7}
 810c658:	b083      	sub	sp, #12
 810c65a:	af00      	add	r7, sp, #0
 810c65c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810c65e:	bf00      	nop
 810c660:	370c      	adds	r7, #12
 810c662:	46bd      	mov	sp, r7
 810c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c668:	4770      	bx	lr

0810c66a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c66a:	b480      	push	{r7}
 810c66c:	b085      	sub	sp, #20
 810c66e:	af00      	add	r7, sp, #0
 810c670:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c672:	687b      	ldr	r3, [r7, #4]
 810c674:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c678:	2b01      	cmp	r3, #1
 810c67a:	d101      	bne.n	810c680 <HAL_UARTEx_DisableFifoMode+0x16>
 810c67c:	2302      	movs	r3, #2
 810c67e:	e027      	b.n	810c6d0 <HAL_UARTEx_DisableFifoMode+0x66>
 810c680:	687b      	ldr	r3, [r7, #4]
 810c682:	2201      	movs	r2, #1
 810c684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c688:	687b      	ldr	r3, [r7, #4]
 810c68a:	2224      	movs	r2, #36	; 0x24
 810c68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c690:	687b      	ldr	r3, [r7, #4]
 810c692:	681b      	ldr	r3, [r3, #0]
 810c694:	681b      	ldr	r3, [r3, #0]
 810c696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c698:	687b      	ldr	r3, [r7, #4]
 810c69a:	681b      	ldr	r3, [r3, #0]
 810c69c:	681a      	ldr	r2, [r3, #0]
 810c69e:	687b      	ldr	r3, [r7, #4]
 810c6a0:	681b      	ldr	r3, [r3, #0]
 810c6a2:	f022 0201 	bic.w	r2, r2, #1
 810c6a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c6a8:	68fb      	ldr	r3, [r7, #12]
 810c6aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810c6ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c6b0:	687b      	ldr	r3, [r7, #4]
 810c6b2:	2200      	movs	r2, #0
 810c6b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c6b6:	687b      	ldr	r3, [r7, #4]
 810c6b8:	681b      	ldr	r3, [r3, #0]
 810c6ba:	68fa      	ldr	r2, [r7, #12]
 810c6bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c6be:	687b      	ldr	r3, [r7, #4]
 810c6c0:	2220      	movs	r2, #32
 810c6c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c6c6:	687b      	ldr	r3, [r7, #4]
 810c6c8:	2200      	movs	r2, #0
 810c6ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c6ce:	2300      	movs	r3, #0
}
 810c6d0:	4618      	mov	r0, r3
 810c6d2:	3714      	adds	r7, #20
 810c6d4:	46bd      	mov	sp, r7
 810c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6da:	4770      	bx	lr

0810c6dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c6dc:	b580      	push	{r7, lr}
 810c6de:	b084      	sub	sp, #16
 810c6e0:	af00      	add	r7, sp, #0
 810c6e2:	6078      	str	r0, [r7, #4]
 810c6e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c6e6:	687b      	ldr	r3, [r7, #4]
 810c6e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c6ec:	2b01      	cmp	r3, #1
 810c6ee:	d101      	bne.n	810c6f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c6f0:	2302      	movs	r3, #2
 810c6f2:	e02d      	b.n	810c750 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c6f4:	687b      	ldr	r3, [r7, #4]
 810c6f6:	2201      	movs	r2, #1
 810c6f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c6fc:	687b      	ldr	r3, [r7, #4]
 810c6fe:	2224      	movs	r2, #36	; 0x24
 810c700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c704:	687b      	ldr	r3, [r7, #4]
 810c706:	681b      	ldr	r3, [r3, #0]
 810c708:	681b      	ldr	r3, [r3, #0]
 810c70a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c70c:	687b      	ldr	r3, [r7, #4]
 810c70e:	681b      	ldr	r3, [r3, #0]
 810c710:	681a      	ldr	r2, [r3, #0]
 810c712:	687b      	ldr	r3, [r7, #4]
 810c714:	681b      	ldr	r3, [r3, #0]
 810c716:	f022 0201 	bic.w	r2, r2, #1
 810c71a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c71c:	687b      	ldr	r3, [r7, #4]
 810c71e:	681b      	ldr	r3, [r3, #0]
 810c720:	689b      	ldr	r3, [r3, #8]
 810c722:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810c726:	687b      	ldr	r3, [r7, #4]
 810c728:	681b      	ldr	r3, [r3, #0]
 810c72a:	683a      	ldr	r2, [r7, #0]
 810c72c:	430a      	orrs	r2, r1
 810c72e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c730:	6878      	ldr	r0, [r7, #4]
 810c732:	f000 f84f 	bl	810c7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c736:	687b      	ldr	r3, [r7, #4]
 810c738:	681b      	ldr	r3, [r3, #0]
 810c73a:	68fa      	ldr	r2, [r7, #12]
 810c73c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c73e:	687b      	ldr	r3, [r7, #4]
 810c740:	2220      	movs	r2, #32
 810c742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c746:	687b      	ldr	r3, [r7, #4]
 810c748:	2200      	movs	r2, #0
 810c74a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c74e:	2300      	movs	r3, #0
}
 810c750:	4618      	mov	r0, r3
 810c752:	3710      	adds	r7, #16
 810c754:	46bd      	mov	sp, r7
 810c756:	bd80      	pop	{r7, pc}

0810c758 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c758:	b580      	push	{r7, lr}
 810c75a:	b084      	sub	sp, #16
 810c75c:	af00      	add	r7, sp, #0
 810c75e:	6078      	str	r0, [r7, #4]
 810c760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c762:	687b      	ldr	r3, [r7, #4]
 810c764:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c768:	2b01      	cmp	r3, #1
 810c76a:	d101      	bne.n	810c770 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c76c:	2302      	movs	r3, #2
 810c76e:	e02d      	b.n	810c7cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c770:	687b      	ldr	r3, [r7, #4]
 810c772:	2201      	movs	r2, #1
 810c774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c778:	687b      	ldr	r3, [r7, #4]
 810c77a:	2224      	movs	r2, #36	; 0x24
 810c77c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c780:	687b      	ldr	r3, [r7, #4]
 810c782:	681b      	ldr	r3, [r3, #0]
 810c784:	681b      	ldr	r3, [r3, #0]
 810c786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c788:	687b      	ldr	r3, [r7, #4]
 810c78a:	681b      	ldr	r3, [r3, #0]
 810c78c:	681a      	ldr	r2, [r3, #0]
 810c78e:	687b      	ldr	r3, [r7, #4]
 810c790:	681b      	ldr	r3, [r3, #0]
 810c792:	f022 0201 	bic.w	r2, r2, #1
 810c796:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c798:	687b      	ldr	r3, [r7, #4]
 810c79a:	681b      	ldr	r3, [r3, #0]
 810c79c:	689b      	ldr	r3, [r3, #8]
 810c79e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810c7a2:	687b      	ldr	r3, [r7, #4]
 810c7a4:	681b      	ldr	r3, [r3, #0]
 810c7a6:	683a      	ldr	r2, [r7, #0]
 810c7a8:	430a      	orrs	r2, r1
 810c7aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c7ac:	6878      	ldr	r0, [r7, #4]
 810c7ae:	f000 f811 	bl	810c7d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c7b2:	687b      	ldr	r3, [r7, #4]
 810c7b4:	681b      	ldr	r3, [r3, #0]
 810c7b6:	68fa      	ldr	r2, [r7, #12]
 810c7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c7ba:	687b      	ldr	r3, [r7, #4]
 810c7bc:	2220      	movs	r2, #32
 810c7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c7c2:	687b      	ldr	r3, [r7, #4]
 810c7c4:	2200      	movs	r2, #0
 810c7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c7ca:	2300      	movs	r3, #0
}
 810c7cc:	4618      	mov	r0, r3
 810c7ce:	3710      	adds	r7, #16
 810c7d0:	46bd      	mov	sp, r7
 810c7d2:	bd80      	pop	{r7, pc}

0810c7d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c7d4:	b480      	push	{r7}
 810c7d6:	b085      	sub	sp, #20
 810c7d8:	af00      	add	r7, sp, #0
 810c7da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c7dc:	687b      	ldr	r3, [r7, #4]
 810c7de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c7e0:	2b00      	cmp	r3, #0
 810c7e2:	d108      	bne.n	810c7f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c7e4:	687b      	ldr	r3, [r7, #4]
 810c7e6:	2201      	movs	r2, #1
 810c7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810c7ec:	687b      	ldr	r3, [r7, #4]
 810c7ee:	2201      	movs	r2, #1
 810c7f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c7f4:	e031      	b.n	810c85a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c7f6:	2310      	movs	r3, #16
 810c7f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c7fa:	2310      	movs	r3, #16
 810c7fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c7fe:	687b      	ldr	r3, [r7, #4]
 810c800:	681b      	ldr	r3, [r3, #0]
 810c802:	689b      	ldr	r3, [r3, #8]
 810c804:	0e5b      	lsrs	r3, r3, #25
 810c806:	b2db      	uxtb	r3, r3
 810c808:	f003 0307 	and.w	r3, r3, #7
 810c80c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c80e:	687b      	ldr	r3, [r7, #4]
 810c810:	681b      	ldr	r3, [r3, #0]
 810c812:	689b      	ldr	r3, [r3, #8]
 810c814:	0f5b      	lsrs	r3, r3, #29
 810c816:	b2db      	uxtb	r3, r3
 810c818:	f003 0307 	and.w	r3, r3, #7
 810c81c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c81e:	7bbb      	ldrb	r3, [r7, #14]
 810c820:	7b3a      	ldrb	r2, [r7, #12]
 810c822:	4911      	ldr	r1, [pc, #68]	; (810c868 <UARTEx_SetNbDataToProcess+0x94>)
 810c824:	5c8a      	ldrb	r2, [r1, r2]
 810c826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c82a:	7b3a      	ldrb	r2, [r7, #12]
 810c82c:	490f      	ldr	r1, [pc, #60]	; (810c86c <UARTEx_SetNbDataToProcess+0x98>)
 810c82e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c830:	fb93 f3f2 	sdiv	r3, r3, r2
 810c834:	b29a      	uxth	r2, r3
 810c836:	687b      	ldr	r3, [r7, #4]
 810c838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c83c:	7bfb      	ldrb	r3, [r7, #15]
 810c83e:	7b7a      	ldrb	r2, [r7, #13]
 810c840:	4909      	ldr	r1, [pc, #36]	; (810c868 <UARTEx_SetNbDataToProcess+0x94>)
 810c842:	5c8a      	ldrb	r2, [r1, r2]
 810c844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c848:	7b7a      	ldrb	r2, [r7, #13]
 810c84a:	4908      	ldr	r1, [pc, #32]	; (810c86c <UARTEx_SetNbDataToProcess+0x98>)
 810c84c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c84e:	fb93 f3f2 	sdiv	r3, r3, r2
 810c852:	b29a      	uxth	r2, r3
 810c854:	687b      	ldr	r3, [r7, #4]
 810c856:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810c85a:	bf00      	nop
 810c85c:	3714      	adds	r7, #20
 810c85e:	46bd      	mov	sp, r7
 810c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c864:	4770      	bx	lr
 810c866:	bf00      	nop
 810c868:	0810d914 	.word	0x0810d914
 810c86c:	0810d91c 	.word	0x0810d91c

0810c870 <__errno>:
 810c870:	4b01      	ldr	r3, [pc, #4]	; (810c878 <__errno+0x8>)
 810c872:	6818      	ldr	r0, [r3, #0]
 810c874:	4770      	bx	lr
 810c876:	bf00      	nop
 810c878:	10000024 	.word	0x10000024

0810c87c <__libc_init_array>:
 810c87c:	b570      	push	{r4, r5, r6, lr}
 810c87e:	4d0d      	ldr	r5, [pc, #52]	; (810c8b4 <__libc_init_array+0x38>)
 810c880:	4c0d      	ldr	r4, [pc, #52]	; (810c8b8 <__libc_init_array+0x3c>)
 810c882:	1b64      	subs	r4, r4, r5
 810c884:	10a4      	asrs	r4, r4, #2
 810c886:	2600      	movs	r6, #0
 810c888:	42a6      	cmp	r6, r4
 810c88a:	d109      	bne.n	810c8a0 <__libc_init_array+0x24>
 810c88c:	4d0b      	ldr	r5, [pc, #44]	; (810c8bc <__libc_init_array+0x40>)
 810c88e:	4c0c      	ldr	r4, [pc, #48]	; (810c8c0 <__libc_init_array+0x44>)
 810c890:	f000 ffd4 	bl	810d83c <_init>
 810c894:	1b64      	subs	r4, r4, r5
 810c896:	10a4      	asrs	r4, r4, #2
 810c898:	2600      	movs	r6, #0
 810c89a:	42a6      	cmp	r6, r4
 810c89c:	d105      	bne.n	810c8aa <__libc_init_array+0x2e>
 810c89e:	bd70      	pop	{r4, r5, r6, pc}
 810c8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 810c8a4:	4798      	blx	r3
 810c8a6:	3601      	adds	r6, #1
 810c8a8:	e7ee      	b.n	810c888 <__libc_init_array+0xc>
 810c8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 810c8ae:	4798      	blx	r3
 810c8b0:	3601      	adds	r6, #1
 810c8b2:	e7f2      	b.n	810c89a <__libc_init_array+0x1e>
 810c8b4:	0810d970 	.word	0x0810d970
 810c8b8:	0810d970 	.word	0x0810d970
 810c8bc:	0810d970 	.word	0x0810d970
 810c8c0:	0810d974 	.word	0x0810d974

0810c8c4 <memset>:
 810c8c4:	4402      	add	r2, r0
 810c8c6:	4603      	mov	r3, r0
 810c8c8:	4293      	cmp	r3, r2
 810c8ca:	d100      	bne.n	810c8ce <memset+0xa>
 810c8cc:	4770      	bx	lr
 810c8ce:	f803 1b01 	strb.w	r1, [r3], #1
 810c8d2:	e7f9      	b.n	810c8c8 <memset+0x4>

0810c8d4 <pow>:
 810c8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c8d8:	ec59 8b10 	vmov	r8, r9, d0
 810c8dc:	ec57 6b11 	vmov	r6, r7, d1
 810c8e0:	f000 f8a6 	bl	810ca30 <__ieee754_pow>
 810c8e4:	4b4e      	ldr	r3, [pc, #312]	; (810ca20 <pow+0x14c>)
 810c8e6:	f993 3000 	ldrsb.w	r3, [r3]
 810c8ea:	3301      	adds	r3, #1
 810c8ec:	ec55 4b10 	vmov	r4, r5, d0
 810c8f0:	d015      	beq.n	810c91e <pow+0x4a>
 810c8f2:	4632      	mov	r2, r6
 810c8f4:	463b      	mov	r3, r7
 810c8f6:	4630      	mov	r0, r6
 810c8f8:	4639      	mov	r1, r7
 810c8fa:	f7f4 f943 	bl	8100b84 <__aeabi_dcmpun>
 810c8fe:	b970      	cbnz	r0, 810c91e <pow+0x4a>
 810c900:	4642      	mov	r2, r8
 810c902:	464b      	mov	r3, r9
 810c904:	4640      	mov	r0, r8
 810c906:	4649      	mov	r1, r9
 810c908:	f7f4 f93c 	bl	8100b84 <__aeabi_dcmpun>
 810c90c:	2200      	movs	r2, #0
 810c90e:	2300      	movs	r3, #0
 810c910:	b148      	cbz	r0, 810c926 <pow+0x52>
 810c912:	4630      	mov	r0, r6
 810c914:	4639      	mov	r1, r7
 810c916:	f7f4 f903 	bl	8100b20 <__aeabi_dcmpeq>
 810c91a:	2800      	cmp	r0, #0
 810c91c:	d17d      	bne.n	810ca1a <pow+0x146>
 810c91e:	ec45 4b10 	vmov	d0, r4, r5
 810c922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c926:	4640      	mov	r0, r8
 810c928:	4649      	mov	r1, r9
 810c92a:	f7f4 f8f9 	bl	8100b20 <__aeabi_dcmpeq>
 810c92e:	b1e0      	cbz	r0, 810c96a <pow+0x96>
 810c930:	2200      	movs	r2, #0
 810c932:	2300      	movs	r3, #0
 810c934:	4630      	mov	r0, r6
 810c936:	4639      	mov	r1, r7
 810c938:	f7f4 f8f2 	bl	8100b20 <__aeabi_dcmpeq>
 810c93c:	2800      	cmp	r0, #0
 810c93e:	d16c      	bne.n	810ca1a <pow+0x146>
 810c940:	ec47 6b10 	vmov	d0, r6, r7
 810c944:	f000 fe53 	bl	810d5ee <finite>
 810c948:	2800      	cmp	r0, #0
 810c94a:	d0e8      	beq.n	810c91e <pow+0x4a>
 810c94c:	2200      	movs	r2, #0
 810c94e:	2300      	movs	r3, #0
 810c950:	4630      	mov	r0, r6
 810c952:	4639      	mov	r1, r7
 810c954:	f7f4 f8ee 	bl	8100b34 <__aeabi_dcmplt>
 810c958:	2800      	cmp	r0, #0
 810c95a:	d0e0      	beq.n	810c91e <pow+0x4a>
 810c95c:	f7ff ff88 	bl	810c870 <__errno>
 810c960:	2321      	movs	r3, #33	; 0x21
 810c962:	6003      	str	r3, [r0, #0]
 810c964:	2400      	movs	r4, #0
 810c966:	4d2f      	ldr	r5, [pc, #188]	; (810ca24 <pow+0x150>)
 810c968:	e7d9      	b.n	810c91e <pow+0x4a>
 810c96a:	ec45 4b10 	vmov	d0, r4, r5
 810c96e:	f000 fe3e 	bl	810d5ee <finite>
 810c972:	bbb8      	cbnz	r0, 810c9e4 <pow+0x110>
 810c974:	ec49 8b10 	vmov	d0, r8, r9
 810c978:	f000 fe39 	bl	810d5ee <finite>
 810c97c:	b390      	cbz	r0, 810c9e4 <pow+0x110>
 810c97e:	ec47 6b10 	vmov	d0, r6, r7
 810c982:	f000 fe34 	bl	810d5ee <finite>
 810c986:	b368      	cbz	r0, 810c9e4 <pow+0x110>
 810c988:	4622      	mov	r2, r4
 810c98a:	462b      	mov	r3, r5
 810c98c:	4620      	mov	r0, r4
 810c98e:	4629      	mov	r1, r5
 810c990:	f7f4 f8f8 	bl	8100b84 <__aeabi_dcmpun>
 810c994:	b160      	cbz	r0, 810c9b0 <pow+0xdc>
 810c996:	f7ff ff6b 	bl	810c870 <__errno>
 810c99a:	2321      	movs	r3, #33	; 0x21
 810c99c:	6003      	str	r3, [r0, #0]
 810c99e:	2200      	movs	r2, #0
 810c9a0:	2300      	movs	r3, #0
 810c9a2:	4610      	mov	r0, r2
 810c9a4:	4619      	mov	r1, r3
 810c9a6:	f7f3 ff7d 	bl	81008a4 <__aeabi_ddiv>
 810c9aa:	4604      	mov	r4, r0
 810c9ac:	460d      	mov	r5, r1
 810c9ae:	e7b6      	b.n	810c91e <pow+0x4a>
 810c9b0:	f7ff ff5e 	bl	810c870 <__errno>
 810c9b4:	2322      	movs	r3, #34	; 0x22
 810c9b6:	6003      	str	r3, [r0, #0]
 810c9b8:	2200      	movs	r2, #0
 810c9ba:	2300      	movs	r3, #0
 810c9bc:	4640      	mov	r0, r8
 810c9be:	4649      	mov	r1, r9
 810c9c0:	f7f4 f8b8 	bl	8100b34 <__aeabi_dcmplt>
 810c9c4:	2400      	movs	r4, #0
 810c9c6:	b158      	cbz	r0, 810c9e0 <pow+0x10c>
 810c9c8:	ec47 6b10 	vmov	d0, r6, r7
 810c9cc:	f000 fe24 	bl	810d618 <rint>
 810c9d0:	4632      	mov	r2, r6
 810c9d2:	ec51 0b10 	vmov	r0, r1, d0
 810c9d6:	463b      	mov	r3, r7
 810c9d8:	f7f4 f8a2 	bl	8100b20 <__aeabi_dcmpeq>
 810c9dc:	2800      	cmp	r0, #0
 810c9de:	d0c2      	beq.n	810c966 <pow+0x92>
 810c9e0:	4d11      	ldr	r5, [pc, #68]	; (810ca28 <pow+0x154>)
 810c9e2:	e79c      	b.n	810c91e <pow+0x4a>
 810c9e4:	2200      	movs	r2, #0
 810c9e6:	2300      	movs	r3, #0
 810c9e8:	4620      	mov	r0, r4
 810c9ea:	4629      	mov	r1, r5
 810c9ec:	f7f4 f898 	bl	8100b20 <__aeabi_dcmpeq>
 810c9f0:	2800      	cmp	r0, #0
 810c9f2:	d094      	beq.n	810c91e <pow+0x4a>
 810c9f4:	ec49 8b10 	vmov	d0, r8, r9
 810c9f8:	f000 fdf9 	bl	810d5ee <finite>
 810c9fc:	2800      	cmp	r0, #0
 810c9fe:	d08e      	beq.n	810c91e <pow+0x4a>
 810ca00:	ec47 6b10 	vmov	d0, r6, r7
 810ca04:	f000 fdf3 	bl	810d5ee <finite>
 810ca08:	2800      	cmp	r0, #0
 810ca0a:	d088      	beq.n	810c91e <pow+0x4a>
 810ca0c:	f7ff ff30 	bl	810c870 <__errno>
 810ca10:	2322      	movs	r3, #34	; 0x22
 810ca12:	6003      	str	r3, [r0, #0]
 810ca14:	2400      	movs	r4, #0
 810ca16:	2500      	movs	r5, #0
 810ca18:	e781      	b.n	810c91e <pow+0x4a>
 810ca1a:	4d04      	ldr	r5, [pc, #16]	; (810ca2c <pow+0x158>)
 810ca1c:	2400      	movs	r4, #0
 810ca1e:	e77e      	b.n	810c91e <pow+0x4a>
 810ca20:	10000088 	.word	0x10000088
 810ca24:	fff00000 	.word	0xfff00000
 810ca28:	7ff00000 	.word	0x7ff00000
 810ca2c:	3ff00000 	.word	0x3ff00000

0810ca30 <__ieee754_pow>:
 810ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ca34:	ed2d 8b06 	vpush	{d8-d10}
 810ca38:	b08d      	sub	sp, #52	; 0x34
 810ca3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 810ca3e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810ca42:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810ca46:	ea56 0100 	orrs.w	r1, r6, r0
 810ca4a:	ec53 2b10 	vmov	r2, r3, d0
 810ca4e:	f000 84d1 	beq.w	810d3f4 <__ieee754_pow+0x9c4>
 810ca52:	497f      	ldr	r1, [pc, #508]	; (810cc50 <__ieee754_pow+0x220>)
 810ca54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810ca58:	428c      	cmp	r4, r1
 810ca5a:	ee10 8a10 	vmov	r8, s0
 810ca5e:	4699      	mov	r9, r3
 810ca60:	dc09      	bgt.n	810ca76 <__ieee754_pow+0x46>
 810ca62:	d103      	bne.n	810ca6c <__ieee754_pow+0x3c>
 810ca64:	b97a      	cbnz	r2, 810ca86 <__ieee754_pow+0x56>
 810ca66:	42a6      	cmp	r6, r4
 810ca68:	dd02      	ble.n	810ca70 <__ieee754_pow+0x40>
 810ca6a:	e00c      	b.n	810ca86 <__ieee754_pow+0x56>
 810ca6c:	428e      	cmp	r6, r1
 810ca6e:	dc02      	bgt.n	810ca76 <__ieee754_pow+0x46>
 810ca70:	428e      	cmp	r6, r1
 810ca72:	d110      	bne.n	810ca96 <__ieee754_pow+0x66>
 810ca74:	b178      	cbz	r0, 810ca96 <__ieee754_pow+0x66>
 810ca76:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810ca7a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810ca7e:	ea54 0308 	orrs.w	r3, r4, r8
 810ca82:	f000 84b7 	beq.w	810d3f4 <__ieee754_pow+0x9c4>
 810ca86:	4873      	ldr	r0, [pc, #460]	; (810cc54 <__ieee754_pow+0x224>)
 810ca88:	b00d      	add	sp, #52	; 0x34
 810ca8a:	ecbd 8b06 	vpop	{d8-d10}
 810ca8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ca92:	f000 bdb9 	b.w	810d608 <nan>
 810ca96:	f1b9 0f00 	cmp.w	r9, #0
 810ca9a:	da36      	bge.n	810cb0a <__ieee754_pow+0xda>
 810ca9c:	496e      	ldr	r1, [pc, #440]	; (810cc58 <__ieee754_pow+0x228>)
 810ca9e:	428e      	cmp	r6, r1
 810caa0:	dc51      	bgt.n	810cb46 <__ieee754_pow+0x116>
 810caa2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810caa6:	428e      	cmp	r6, r1
 810caa8:	f340 84af 	ble.w	810d40a <__ieee754_pow+0x9da>
 810caac:	1531      	asrs	r1, r6, #20
 810caae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810cab2:	2914      	cmp	r1, #20
 810cab4:	dd0f      	ble.n	810cad6 <__ieee754_pow+0xa6>
 810cab6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810caba:	fa20 fc01 	lsr.w	ip, r0, r1
 810cabe:	fa0c f101 	lsl.w	r1, ip, r1
 810cac2:	4281      	cmp	r1, r0
 810cac4:	f040 84a1 	bne.w	810d40a <__ieee754_pow+0x9da>
 810cac8:	f00c 0c01 	and.w	ip, ip, #1
 810cacc:	f1cc 0102 	rsb	r1, ip, #2
 810cad0:	9100      	str	r1, [sp, #0]
 810cad2:	b180      	cbz	r0, 810caf6 <__ieee754_pow+0xc6>
 810cad4:	e059      	b.n	810cb8a <__ieee754_pow+0x15a>
 810cad6:	2800      	cmp	r0, #0
 810cad8:	d155      	bne.n	810cb86 <__ieee754_pow+0x156>
 810cada:	f1c1 0114 	rsb	r1, r1, #20
 810cade:	fa46 fc01 	asr.w	ip, r6, r1
 810cae2:	fa0c f101 	lsl.w	r1, ip, r1
 810cae6:	42b1      	cmp	r1, r6
 810cae8:	f040 848c 	bne.w	810d404 <__ieee754_pow+0x9d4>
 810caec:	f00c 0c01 	and.w	ip, ip, #1
 810caf0:	f1cc 0102 	rsb	r1, ip, #2
 810caf4:	9100      	str	r1, [sp, #0]
 810caf6:	4959      	ldr	r1, [pc, #356]	; (810cc5c <__ieee754_pow+0x22c>)
 810caf8:	428e      	cmp	r6, r1
 810cafa:	d12d      	bne.n	810cb58 <__ieee754_pow+0x128>
 810cafc:	2f00      	cmp	r7, #0
 810cafe:	da79      	bge.n	810cbf4 <__ieee754_pow+0x1c4>
 810cb00:	4956      	ldr	r1, [pc, #344]	; (810cc5c <__ieee754_pow+0x22c>)
 810cb02:	2000      	movs	r0, #0
 810cb04:	f7f3 fece 	bl	81008a4 <__aeabi_ddiv>
 810cb08:	e016      	b.n	810cb38 <__ieee754_pow+0x108>
 810cb0a:	2100      	movs	r1, #0
 810cb0c:	9100      	str	r1, [sp, #0]
 810cb0e:	2800      	cmp	r0, #0
 810cb10:	d13b      	bne.n	810cb8a <__ieee754_pow+0x15a>
 810cb12:	494f      	ldr	r1, [pc, #316]	; (810cc50 <__ieee754_pow+0x220>)
 810cb14:	428e      	cmp	r6, r1
 810cb16:	d1ee      	bne.n	810caf6 <__ieee754_pow+0xc6>
 810cb18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810cb1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810cb20:	ea53 0308 	orrs.w	r3, r3, r8
 810cb24:	f000 8466 	beq.w	810d3f4 <__ieee754_pow+0x9c4>
 810cb28:	4b4d      	ldr	r3, [pc, #308]	; (810cc60 <__ieee754_pow+0x230>)
 810cb2a:	429c      	cmp	r4, r3
 810cb2c:	dd0d      	ble.n	810cb4a <__ieee754_pow+0x11a>
 810cb2e:	2f00      	cmp	r7, #0
 810cb30:	f280 8464 	bge.w	810d3fc <__ieee754_pow+0x9cc>
 810cb34:	2000      	movs	r0, #0
 810cb36:	2100      	movs	r1, #0
 810cb38:	ec41 0b10 	vmov	d0, r0, r1
 810cb3c:	b00d      	add	sp, #52	; 0x34
 810cb3e:	ecbd 8b06 	vpop	{d8-d10}
 810cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cb46:	2102      	movs	r1, #2
 810cb48:	e7e0      	b.n	810cb0c <__ieee754_pow+0xdc>
 810cb4a:	2f00      	cmp	r7, #0
 810cb4c:	daf2      	bge.n	810cb34 <__ieee754_pow+0x104>
 810cb4e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810cb52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810cb56:	e7ef      	b.n	810cb38 <__ieee754_pow+0x108>
 810cb58:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810cb5c:	d104      	bne.n	810cb68 <__ieee754_pow+0x138>
 810cb5e:	4610      	mov	r0, r2
 810cb60:	4619      	mov	r1, r3
 810cb62:	f7f3 fd75 	bl	8100650 <__aeabi_dmul>
 810cb66:	e7e7      	b.n	810cb38 <__ieee754_pow+0x108>
 810cb68:	493e      	ldr	r1, [pc, #248]	; (810cc64 <__ieee754_pow+0x234>)
 810cb6a:	428f      	cmp	r7, r1
 810cb6c:	d10d      	bne.n	810cb8a <__ieee754_pow+0x15a>
 810cb6e:	f1b9 0f00 	cmp.w	r9, #0
 810cb72:	db0a      	blt.n	810cb8a <__ieee754_pow+0x15a>
 810cb74:	ec43 2b10 	vmov	d0, r2, r3
 810cb78:	b00d      	add	sp, #52	; 0x34
 810cb7a:	ecbd 8b06 	vpop	{d8-d10}
 810cb7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cb82:	f000 bc77 	b.w	810d474 <__ieee754_sqrt>
 810cb86:	2100      	movs	r1, #0
 810cb88:	9100      	str	r1, [sp, #0]
 810cb8a:	ec43 2b10 	vmov	d0, r2, r3
 810cb8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810cb92:	f000 fd23 	bl	810d5dc <fabs>
 810cb96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810cb9a:	ec51 0b10 	vmov	r0, r1, d0
 810cb9e:	f1b8 0f00 	cmp.w	r8, #0
 810cba2:	d12a      	bne.n	810cbfa <__ieee754_pow+0x1ca>
 810cba4:	b12c      	cbz	r4, 810cbb2 <__ieee754_pow+0x182>
 810cba6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810cc5c <__ieee754_pow+0x22c>
 810cbaa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810cbae:	45e6      	cmp	lr, ip
 810cbb0:	d123      	bne.n	810cbfa <__ieee754_pow+0x1ca>
 810cbb2:	2f00      	cmp	r7, #0
 810cbb4:	da05      	bge.n	810cbc2 <__ieee754_pow+0x192>
 810cbb6:	4602      	mov	r2, r0
 810cbb8:	460b      	mov	r3, r1
 810cbba:	2000      	movs	r0, #0
 810cbbc:	4927      	ldr	r1, [pc, #156]	; (810cc5c <__ieee754_pow+0x22c>)
 810cbbe:	f7f3 fe71 	bl	81008a4 <__aeabi_ddiv>
 810cbc2:	f1b9 0f00 	cmp.w	r9, #0
 810cbc6:	dab7      	bge.n	810cb38 <__ieee754_pow+0x108>
 810cbc8:	9b00      	ldr	r3, [sp, #0]
 810cbca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810cbce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810cbd2:	4323      	orrs	r3, r4
 810cbd4:	d108      	bne.n	810cbe8 <__ieee754_pow+0x1b8>
 810cbd6:	4602      	mov	r2, r0
 810cbd8:	460b      	mov	r3, r1
 810cbda:	4610      	mov	r0, r2
 810cbdc:	4619      	mov	r1, r3
 810cbde:	f7f3 fb7f 	bl	81002e0 <__aeabi_dsub>
 810cbe2:	4602      	mov	r2, r0
 810cbe4:	460b      	mov	r3, r1
 810cbe6:	e78d      	b.n	810cb04 <__ieee754_pow+0xd4>
 810cbe8:	9b00      	ldr	r3, [sp, #0]
 810cbea:	2b01      	cmp	r3, #1
 810cbec:	d1a4      	bne.n	810cb38 <__ieee754_pow+0x108>
 810cbee:	4602      	mov	r2, r0
 810cbf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810cbf4:	4610      	mov	r0, r2
 810cbf6:	4619      	mov	r1, r3
 810cbf8:	e79e      	b.n	810cb38 <__ieee754_pow+0x108>
 810cbfa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810cbfe:	f10c 35ff 	add.w	r5, ip, #4294967295
 810cc02:	950a      	str	r5, [sp, #40]	; 0x28
 810cc04:	9d00      	ldr	r5, [sp, #0]
 810cc06:	46ac      	mov	ip, r5
 810cc08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810cc0a:	ea5c 0505 	orrs.w	r5, ip, r5
 810cc0e:	d0e4      	beq.n	810cbda <__ieee754_pow+0x1aa>
 810cc10:	4b15      	ldr	r3, [pc, #84]	; (810cc68 <__ieee754_pow+0x238>)
 810cc12:	429e      	cmp	r6, r3
 810cc14:	f340 80fc 	ble.w	810ce10 <__ieee754_pow+0x3e0>
 810cc18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810cc1c:	429e      	cmp	r6, r3
 810cc1e:	4b10      	ldr	r3, [pc, #64]	; (810cc60 <__ieee754_pow+0x230>)
 810cc20:	dd07      	ble.n	810cc32 <__ieee754_pow+0x202>
 810cc22:	429c      	cmp	r4, r3
 810cc24:	dc0a      	bgt.n	810cc3c <__ieee754_pow+0x20c>
 810cc26:	2f00      	cmp	r7, #0
 810cc28:	da84      	bge.n	810cb34 <__ieee754_pow+0x104>
 810cc2a:	a307      	add	r3, pc, #28	; (adr r3, 810cc48 <__ieee754_pow+0x218>)
 810cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc30:	e795      	b.n	810cb5e <__ieee754_pow+0x12e>
 810cc32:	429c      	cmp	r4, r3
 810cc34:	dbf7      	blt.n	810cc26 <__ieee754_pow+0x1f6>
 810cc36:	4b09      	ldr	r3, [pc, #36]	; (810cc5c <__ieee754_pow+0x22c>)
 810cc38:	429c      	cmp	r4, r3
 810cc3a:	dd17      	ble.n	810cc6c <__ieee754_pow+0x23c>
 810cc3c:	2f00      	cmp	r7, #0
 810cc3e:	dcf4      	bgt.n	810cc2a <__ieee754_pow+0x1fa>
 810cc40:	e778      	b.n	810cb34 <__ieee754_pow+0x104>
 810cc42:	bf00      	nop
 810cc44:	f3af 8000 	nop.w
 810cc48:	8800759c 	.word	0x8800759c
 810cc4c:	7e37e43c 	.word	0x7e37e43c
 810cc50:	7ff00000 	.word	0x7ff00000
 810cc54:	0810d924 	.word	0x0810d924
 810cc58:	433fffff 	.word	0x433fffff
 810cc5c:	3ff00000 	.word	0x3ff00000
 810cc60:	3fefffff 	.word	0x3fefffff
 810cc64:	3fe00000 	.word	0x3fe00000
 810cc68:	41e00000 	.word	0x41e00000
 810cc6c:	4b64      	ldr	r3, [pc, #400]	; (810ce00 <__ieee754_pow+0x3d0>)
 810cc6e:	2200      	movs	r2, #0
 810cc70:	f7f3 fb36 	bl	81002e0 <__aeabi_dsub>
 810cc74:	a356      	add	r3, pc, #344	; (adr r3, 810cdd0 <__ieee754_pow+0x3a0>)
 810cc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc7a:	4604      	mov	r4, r0
 810cc7c:	460d      	mov	r5, r1
 810cc7e:	f7f3 fce7 	bl	8100650 <__aeabi_dmul>
 810cc82:	a355      	add	r3, pc, #340	; (adr r3, 810cdd8 <__ieee754_pow+0x3a8>)
 810cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc88:	4606      	mov	r6, r0
 810cc8a:	460f      	mov	r7, r1
 810cc8c:	4620      	mov	r0, r4
 810cc8e:	4629      	mov	r1, r5
 810cc90:	f7f3 fcde 	bl	8100650 <__aeabi_dmul>
 810cc94:	4b5b      	ldr	r3, [pc, #364]	; (810ce04 <__ieee754_pow+0x3d4>)
 810cc96:	4682      	mov	sl, r0
 810cc98:	468b      	mov	fp, r1
 810cc9a:	2200      	movs	r2, #0
 810cc9c:	4620      	mov	r0, r4
 810cc9e:	4629      	mov	r1, r5
 810cca0:	f7f3 fcd6 	bl	8100650 <__aeabi_dmul>
 810cca4:	4602      	mov	r2, r0
 810cca6:	460b      	mov	r3, r1
 810cca8:	a14d      	add	r1, pc, #308	; (adr r1, 810cde0 <__ieee754_pow+0x3b0>)
 810ccaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ccae:	f7f3 fb17 	bl	81002e0 <__aeabi_dsub>
 810ccb2:	4622      	mov	r2, r4
 810ccb4:	462b      	mov	r3, r5
 810ccb6:	f7f3 fccb 	bl	8100650 <__aeabi_dmul>
 810ccba:	4602      	mov	r2, r0
 810ccbc:	460b      	mov	r3, r1
 810ccbe:	2000      	movs	r0, #0
 810ccc0:	4951      	ldr	r1, [pc, #324]	; (810ce08 <__ieee754_pow+0x3d8>)
 810ccc2:	f7f3 fb0d 	bl	81002e0 <__aeabi_dsub>
 810ccc6:	4622      	mov	r2, r4
 810ccc8:	4680      	mov	r8, r0
 810ccca:	4689      	mov	r9, r1
 810cccc:	462b      	mov	r3, r5
 810ccce:	4620      	mov	r0, r4
 810ccd0:	4629      	mov	r1, r5
 810ccd2:	f7f3 fcbd 	bl	8100650 <__aeabi_dmul>
 810ccd6:	4602      	mov	r2, r0
 810ccd8:	460b      	mov	r3, r1
 810ccda:	4640      	mov	r0, r8
 810ccdc:	4649      	mov	r1, r9
 810ccde:	f7f3 fcb7 	bl	8100650 <__aeabi_dmul>
 810cce2:	a341      	add	r3, pc, #260	; (adr r3, 810cde8 <__ieee754_pow+0x3b8>)
 810cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cce8:	f7f3 fcb2 	bl	8100650 <__aeabi_dmul>
 810ccec:	4602      	mov	r2, r0
 810ccee:	460b      	mov	r3, r1
 810ccf0:	4650      	mov	r0, sl
 810ccf2:	4659      	mov	r1, fp
 810ccf4:	f7f3 faf4 	bl	81002e0 <__aeabi_dsub>
 810ccf8:	4602      	mov	r2, r0
 810ccfa:	460b      	mov	r3, r1
 810ccfc:	4680      	mov	r8, r0
 810ccfe:	4689      	mov	r9, r1
 810cd00:	4630      	mov	r0, r6
 810cd02:	4639      	mov	r1, r7
 810cd04:	f7f3 faee 	bl	81002e4 <__adddf3>
 810cd08:	2400      	movs	r4, #0
 810cd0a:	4632      	mov	r2, r6
 810cd0c:	463b      	mov	r3, r7
 810cd0e:	4620      	mov	r0, r4
 810cd10:	460d      	mov	r5, r1
 810cd12:	f7f3 fae5 	bl	81002e0 <__aeabi_dsub>
 810cd16:	4602      	mov	r2, r0
 810cd18:	460b      	mov	r3, r1
 810cd1a:	4640      	mov	r0, r8
 810cd1c:	4649      	mov	r1, r9
 810cd1e:	f7f3 fadf 	bl	81002e0 <__aeabi_dsub>
 810cd22:	9b00      	ldr	r3, [sp, #0]
 810cd24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810cd26:	3b01      	subs	r3, #1
 810cd28:	4313      	orrs	r3, r2
 810cd2a:	4682      	mov	sl, r0
 810cd2c:	468b      	mov	fp, r1
 810cd2e:	f040 81f1 	bne.w	810d114 <__ieee754_pow+0x6e4>
 810cd32:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810cdf0 <__ieee754_pow+0x3c0>
 810cd36:	eeb0 8a47 	vmov.f32	s16, s14
 810cd3a:	eef0 8a67 	vmov.f32	s17, s15
 810cd3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810cd42:	2600      	movs	r6, #0
 810cd44:	4632      	mov	r2, r6
 810cd46:	463b      	mov	r3, r7
 810cd48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810cd4c:	f7f3 fac8 	bl	81002e0 <__aeabi_dsub>
 810cd50:	4622      	mov	r2, r4
 810cd52:	462b      	mov	r3, r5
 810cd54:	f7f3 fc7c 	bl	8100650 <__aeabi_dmul>
 810cd58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810cd5c:	4680      	mov	r8, r0
 810cd5e:	4689      	mov	r9, r1
 810cd60:	4650      	mov	r0, sl
 810cd62:	4659      	mov	r1, fp
 810cd64:	f7f3 fc74 	bl	8100650 <__aeabi_dmul>
 810cd68:	4602      	mov	r2, r0
 810cd6a:	460b      	mov	r3, r1
 810cd6c:	4640      	mov	r0, r8
 810cd6e:	4649      	mov	r1, r9
 810cd70:	f7f3 fab8 	bl	81002e4 <__adddf3>
 810cd74:	4632      	mov	r2, r6
 810cd76:	463b      	mov	r3, r7
 810cd78:	4680      	mov	r8, r0
 810cd7a:	4689      	mov	r9, r1
 810cd7c:	4620      	mov	r0, r4
 810cd7e:	4629      	mov	r1, r5
 810cd80:	f7f3 fc66 	bl	8100650 <__aeabi_dmul>
 810cd84:	460b      	mov	r3, r1
 810cd86:	4604      	mov	r4, r0
 810cd88:	460d      	mov	r5, r1
 810cd8a:	4602      	mov	r2, r0
 810cd8c:	4649      	mov	r1, r9
 810cd8e:	4640      	mov	r0, r8
 810cd90:	f7f3 faa8 	bl	81002e4 <__adddf3>
 810cd94:	4b1d      	ldr	r3, [pc, #116]	; (810ce0c <__ieee754_pow+0x3dc>)
 810cd96:	4299      	cmp	r1, r3
 810cd98:	ec45 4b19 	vmov	d9, r4, r5
 810cd9c:	4606      	mov	r6, r0
 810cd9e:	460f      	mov	r7, r1
 810cda0:	468b      	mov	fp, r1
 810cda2:	f340 82fe 	ble.w	810d3a2 <__ieee754_pow+0x972>
 810cda6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810cdaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810cdae:	4303      	orrs	r3, r0
 810cdb0:	f000 81f0 	beq.w	810d194 <__ieee754_pow+0x764>
 810cdb4:	a310      	add	r3, pc, #64	; (adr r3, 810cdf8 <__ieee754_pow+0x3c8>)
 810cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdba:	ec51 0b18 	vmov	r0, r1, d8
 810cdbe:	f7f3 fc47 	bl	8100650 <__aeabi_dmul>
 810cdc2:	a30d      	add	r3, pc, #52	; (adr r3, 810cdf8 <__ieee754_pow+0x3c8>)
 810cdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdc8:	e6cb      	b.n	810cb62 <__ieee754_pow+0x132>
 810cdca:	bf00      	nop
 810cdcc:	f3af 8000 	nop.w
 810cdd0:	60000000 	.word	0x60000000
 810cdd4:	3ff71547 	.word	0x3ff71547
 810cdd8:	f85ddf44 	.word	0xf85ddf44
 810cddc:	3e54ae0b 	.word	0x3e54ae0b
 810cde0:	55555555 	.word	0x55555555
 810cde4:	3fd55555 	.word	0x3fd55555
 810cde8:	652b82fe 	.word	0x652b82fe
 810cdec:	3ff71547 	.word	0x3ff71547
 810cdf0:	00000000 	.word	0x00000000
 810cdf4:	bff00000 	.word	0xbff00000
 810cdf8:	8800759c 	.word	0x8800759c
 810cdfc:	7e37e43c 	.word	0x7e37e43c
 810ce00:	3ff00000 	.word	0x3ff00000
 810ce04:	3fd00000 	.word	0x3fd00000
 810ce08:	3fe00000 	.word	0x3fe00000
 810ce0c:	408fffff 	.word	0x408fffff
 810ce10:	4bd7      	ldr	r3, [pc, #860]	; (810d170 <__ieee754_pow+0x740>)
 810ce12:	ea03 0309 	and.w	r3, r3, r9
 810ce16:	2200      	movs	r2, #0
 810ce18:	b92b      	cbnz	r3, 810ce26 <__ieee754_pow+0x3f6>
 810ce1a:	4bd6      	ldr	r3, [pc, #856]	; (810d174 <__ieee754_pow+0x744>)
 810ce1c:	f7f3 fc18 	bl	8100650 <__aeabi_dmul>
 810ce20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810ce24:	460c      	mov	r4, r1
 810ce26:	1523      	asrs	r3, r4, #20
 810ce28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810ce2c:	4413      	add	r3, r2
 810ce2e:	9309      	str	r3, [sp, #36]	; 0x24
 810ce30:	4bd1      	ldr	r3, [pc, #836]	; (810d178 <__ieee754_pow+0x748>)
 810ce32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810ce36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810ce3a:	429c      	cmp	r4, r3
 810ce3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810ce40:	dd08      	ble.n	810ce54 <__ieee754_pow+0x424>
 810ce42:	4bce      	ldr	r3, [pc, #824]	; (810d17c <__ieee754_pow+0x74c>)
 810ce44:	429c      	cmp	r4, r3
 810ce46:	f340 8163 	ble.w	810d110 <__ieee754_pow+0x6e0>
 810ce4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ce4c:	3301      	adds	r3, #1
 810ce4e:	9309      	str	r3, [sp, #36]	; 0x24
 810ce50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810ce54:	2400      	movs	r4, #0
 810ce56:	00e3      	lsls	r3, r4, #3
 810ce58:	930b      	str	r3, [sp, #44]	; 0x2c
 810ce5a:	4bc9      	ldr	r3, [pc, #804]	; (810d180 <__ieee754_pow+0x750>)
 810ce5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810ce60:	ed93 7b00 	vldr	d7, [r3]
 810ce64:	4629      	mov	r1, r5
 810ce66:	ec53 2b17 	vmov	r2, r3, d7
 810ce6a:	eeb0 8a47 	vmov.f32	s16, s14
 810ce6e:	eef0 8a67 	vmov.f32	s17, s15
 810ce72:	4682      	mov	sl, r0
 810ce74:	f7f3 fa34 	bl	81002e0 <__aeabi_dsub>
 810ce78:	4652      	mov	r2, sl
 810ce7a:	4606      	mov	r6, r0
 810ce7c:	460f      	mov	r7, r1
 810ce7e:	462b      	mov	r3, r5
 810ce80:	ec51 0b18 	vmov	r0, r1, d8
 810ce84:	f7f3 fa2e 	bl	81002e4 <__adddf3>
 810ce88:	4602      	mov	r2, r0
 810ce8a:	460b      	mov	r3, r1
 810ce8c:	2000      	movs	r0, #0
 810ce8e:	49bd      	ldr	r1, [pc, #756]	; (810d184 <__ieee754_pow+0x754>)
 810ce90:	f7f3 fd08 	bl	81008a4 <__aeabi_ddiv>
 810ce94:	ec41 0b19 	vmov	d9, r0, r1
 810ce98:	4602      	mov	r2, r0
 810ce9a:	460b      	mov	r3, r1
 810ce9c:	4630      	mov	r0, r6
 810ce9e:	4639      	mov	r1, r7
 810cea0:	f7f3 fbd6 	bl	8100650 <__aeabi_dmul>
 810cea4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810cea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ceac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810ceb0:	2300      	movs	r3, #0
 810ceb2:	9304      	str	r3, [sp, #16]
 810ceb4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810ceb8:	46ab      	mov	fp, r5
 810ceba:	106d      	asrs	r5, r5, #1
 810cebc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810cec0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810cec4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810cec8:	2200      	movs	r2, #0
 810ceca:	4640      	mov	r0, r8
 810cecc:	4649      	mov	r1, r9
 810cece:	4614      	mov	r4, r2
 810ced0:	461d      	mov	r5, r3
 810ced2:	f7f3 fbbd 	bl	8100650 <__aeabi_dmul>
 810ced6:	4602      	mov	r2, r0
 810ced8:	460b      	mov	r3, r1
 810ceda:	4630      	mov	r0, r6
 810cedc:	4639      	mov	r1, r7
 810cede:	f7f3 f9ff 	bl	81002e0 <__aeabi_dsub>
 810cee2:	ec53 2b18 	vmov	r2, r3, d8
 810cee6:	4606      	mov	r6, r0
 810cee8:	460f      	mov	r7, r1
 810ceea:	4620      	mov	r0, r4
 810ceec:	4629      	mov	r1, r5
 810ceee:	f7f3 f9f7 	bl	81002e0 <__aeabi_dsub>
 810cef2:	4602      	mov	r2, r0
 810cef4:	460b      	mov	r3, r1
 810cef6:	4650      	mov	r0, sl
 810cef8:	4659      	mov	r1, fp
 810cefa:	f7f3 f9f1 	bl	81002e0 <__aeabi_dsub>
 810cefe:	4642      	mov	r2, r8
 810cf00:	464b      	mov	r3, r9
 810cf02:	f7f3 fba5 	bl	8100650 <__aeabi_dmul>
 810cf06:	4602      	mov	r2, r0
 810cf08:	460b      	mov	r3, r1
 810cf0a:	4630      	mov	r0, r6
 810cf0c:	4639      	mov	r1, r7
 810cf0e:	f7f3 f9e7 	bl	81002e0 <__aeabi_dsub>
 810cf12:	ec53 2b19 	vmov	r2, r3, d9
 810cf16:	f7f3 fb9b 	bl	8100650 <__aeabi_dmul>
 810cf1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cf1e:	ec41 0b18 	vmov	d8, r0, r1
 810cf22:	4610      	mov	r0, r2
 810cf24:	4619      	mov	r1, r3
 810cf26:	f7f3 fb93 	bl	8100650 <__aeabi_dmul>
 810cf2a:	a37d      	add	r3, pc, #500	; (adr r3, 810d120 <__ieee754_pow+0x6f0>)
 810cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf30:	4604      	mov	r4, r0
 810cf32:	460d      	mov	r5, r1
 810cf34:	f7f3 fb8c 	bl	8100650 <__aeabi_dmul>
 810cf38:	a37b      	add	r3, pc, #492	; (adr r3, 810d128 <__ieee754_pow+0x6f8>)
 810cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf3e:	f7f3 f9d1 	bl	81002e4 <__adddf3>
 810cf42:	4622      	mov	r2, r4
 810cf44:	462b      	mov	r3, r5
 810cf46:	f7f3 fb83 	bl	8100650 <__aeabi_dmul>
 810cf4a:	a379      	add	r3, pc, #484	; (adr r3, 810d130 <__ieee754_pow+0x700>)
 810cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf50:	f7f3 f9c8 	bl	81002e4 <__adddf3>
 810cf54:	4622      	mov	r2, r4
 810cf56:	462b      	mov	r3, r5
 810cf58:	f7f3 fb7a 	bl	8100650 <__aeabi_dmul>
 810cf5c:	a376      	add	r3, pc, #472	; (adr r3, 810d138 <__ieee754_pow+0x708>)
 810cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf62:	f7f3 f9bf 	bl	81002e4 <__adddf3>
 810cf66:	4622      	mov	r2, r4
 810cf68:	462b      	mov	r3, r5
 810cf6a:	f7f3 fb71 	bl	8100650 <__aeabi_dmul>
 810cf6e:	a374      	add	r3, pc, #464	; (adr r3, 810d140 <__ieee754_pow+0x710>)
 810cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf74:	f7f3 f9b6 	bl	81002e4 <__adddf3>
 810cf78:	4622      	mov	r2, r4
 810cf7a:	462b      	mov	r3, r5
 810cf7c:	f7f3 fb68 	bl	8100650 <__aeabi_dmul>
 810cf80:	a371      	add	r3, pc, #452	; (adr r3, 810d148 <__ieee754_pow+0x718>)
 810cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf86:	f7f3 f9ad 	bl	81002e4 <__adddf3>
 810cf8a:	4622      	mov	r2, r4
 810cf8c:	4606      	mov	r6, r0
 810cf8e:	460f      	mov	r7, r1
 810cf90:	462b      	mov	r3, r5
 810cf92:	4620      	mov	r0, r4
 810cf94:	4629      	mov	r1, r5
 810cf96:	f7f3 fb5b 	bl	8100650 <__aeabi_dmul>
 810cf9a:	4602      	mov	r2, r0
 810cf9c:	460b      	mov	r3, r1
 810cf9e:	4630      	mov	r0, r6
 810cfa0:	4639      	mov	r1, r7
 810cfa2:	f7f3 fb55 	bl	8100650 <__aeabi_dmul>
 810cfa6:	4642      	mov	r2, r8
 810cfa8:	4604      	mov	r4, r0
 810cfaa:	460d      	mov	r5, r1
 810cfac:	464b      	mov	r3, r9
 810cfae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810cfb2:	f7f3 f997 	bl	81002e4 <__adddf3>
 810cfb6:	ec53 2b18 	vmov	r2, r3, d8
 810cfba:	f7f3 fb49 	bl	8100650 <__aeabi_dmul>
 810cfbe:	4622      	mov	r2, r4
 810cfc0:	462b      	mov	r3, r5
 810cfc2:	f7f3 f98f 	bl	81002e4 <__adddf3>
 810cfc6:	4642      	mov	r2, r8
 810cfc8:	4682      	mov	sl, r0
 810cfca:	468b      	mov	fp, r1
 810cfcc:	464b      	mov	r3, r9
 810cfce:	4640      	mov	r0, r8
 810cfd0:	4649      	mov	r1, r9
 810cfd2:	f7f3 fb3d 	bl	8100650 <__aeabi_dmul>
 810cfd6:	4b6c      	ldr	r3, [pc, #432]	; (810d188 <__ieee754_pow+0x758>)
 810cfd8:	2200      	movs	r2, #0
 810cfda:	4606      	mov	r6, r0
 810cfdc:	460f      	mov	r7, r1
 810cfde:	f7f3 f981 	bl	81002e4 <__adddf3>
 810cfe2:	4652      	mov	r2, sl
 810cfe4:	465b      	mov	r3, fp
 810cfe6:	f7f3 f97d 	bl	81002e4 <__adddf3>
 810cfea:	9c04      	ldr	r4, [sp, #16]
 810cfec:	460d      	mov	r5, r1
 810cfee:	4622      	mov	r2, r4
 810cff0:	460b      	mov	r3, r1
 810cff2:	4640      	mov	r0, r8
 810cff4:	4649      	mov	r1, r9
 810cff6:	f7f3 fb2b 	bl	8100650 <__aeabi_dmul>
 810cffa:	4b63      	ldr	r3, [pc, #396]	; (810d188 <__ieee754_pow+0x758>)
 810cffc:	4680      	mov	r8, r0
 810cffe:	4689      	mov	r9, r1
 810d000:	2200      	movs	r2, #0
 810d002:	4620      	mov	r0, r4
 810d004:	4629      	mov	r1, r5
 810d006:	f7f3 f96b 	bl	81002e0 <__aeabi_dsub>
 810d00a:	4632      	mov	r2, r6
 810d00c:	463b      	mov	r3, r7
 810d00e:	f7f3 f967 	bl	81002e0 <__aeabi_dsub>
 810d012:	4602      	mov	r2, r0
 810d014:	460b      	mov	r3, r1
 810d016:	4650      	mov	r0, sl
 810d018:	4659      	mov	r1, fp
 810d01a:	f7f3 f961 	bl	81002e0 <__aeabi_dsub>
 810d01e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d022:	f7f3 fb15 	bl	8100650 <__aeabi_dmul>
 810d026:	4622      	mov	r2, r4
 810d028:	4606      	mov	r6, r0
 810d02a:	460f      	mov	r7, r1
 810d02c:	462b      	mov	r3, r5
 810d02e:	ec51 0b18 	vmov	r0, r1, d8
 810d032:	f7f3 fb0d 	bl	8100650 <__aeabi_dmul>
 810d036:	4602      	mov	r2, r0
 810d038:	460b      	mov	r3, r1
 810d03a:	4630      	mov	r0, r6
 810d03c:	4639      	mov	r1, r7
 810d03e:	f7f3 f951 	bl	81002e4 <__adddf3>
 810d042:	4606      	mov	r6, r0
 810d044:	460f      	mov	r7, r1
 810d046:	4602      	mov	r2, r0
 810d048:	460b      	mov	r3, r1
 810d04a:	4640      	mov	r0, r8
 810d04c:	4649      	mov	r1, r9
 810d04e:	f7f3 f949 	bl	81002e4 <__adddf3>
 810d052:	9c04      	ldr	r4, [sp, #16]
 810d054:	a33e      	add	r3, pc, #248	; (adr r3, 810d150 <__ieee754_pow+0x720>)
 810d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d05a:	4620      	mov	r0, r4
 810d05c:	460d      	mov	r5, r1
 810d05e:	f7f3 faf7 	bl	8100650 <__aeabi_dmul>
 810d062:	4642      	mov	r2, r8
 810d064:	ec41 0b18 	vmov	d8, r0, r1
 810d068:	464b      	mov	r3, r9
 810d06a:	4620      	mov	r0, r4
 810d06c:	4629      	mov	r1, r5
 810d06e:	f7f3 f937 	bl	81002e0 <__aeabi_dsub>
 810d072:	4602      	mov	r2, r0
 810d074:	460b      	mov	r3, r1
 810d076:	4630      	mov	r0, r6
 810d078:	4639      	mov	r1, r7
 810d07a:	f7f3 f931 	bl	81002e0 <__aeabi_dsub>
 810d07e:	a336      	add	r3, pc, #216	; (adr r3, 810d158 <__ieee754_pow+0x728>)
 810d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d084:	f7f3 fae4 	bl	8100650 <__aeabi_dmul>
 810d088:	a335      	add	r3, pc, #212	; (adr r3, 810d160 <__ieee754_pow+0x730>)
 810d08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d08e:	4606      	mov	r6, r0
 810d090:	460f      	mov	r7, r1
 810d092:	4620      	mov	r0, r4
 810d094:	4629      	mov	r1, r5
 810d096:	f7f3 fadb 	bl	8100650 <__aeabi_dmul>
 810d09a:	4602      	mov	r2, r0
 810d09c:	460b      	mov	r3, r1
 810d09e:	4630      	mov	r0, r6
 810d0a0:	4639      	mov	r1, r7
 810d0a2:	f7f3 f91f 	bl	81002e4 <__adddf3>
 810d0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d0a8:	4b38      	ldr	r3, [pc, #224]	; (810d18c <__ieee754_pow+0x75c>)
 810d0aa:	4413      	add	r3, r2
 810d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0b0:	f7f3 f918 	bl	81002e4 <__adddf3>
 810d0b4:	4682      	mov	sl, r0
 810d0b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d0b8:	468b      	mov	fp, r1
 810d0ba:	f7f3 fa5f 	bl	810057c <__aeabi_i2d>
 810d0be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d0c0:	4b33      	ldr	r3, [pc, #204]	; (810d190 <__ieee754_pow+0x760>)
 810d0c2:	4413      	add	r3, r2
 810d0c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 810d0c8:	4606      	mov	r6, r0
 810d0ca:	460f      	mov	r7, r1
 810d0cc:	4652      	mov	r2, sl
 810d0ce:	465b      	mov	r3, fp
 810d0d0:	ec51 0b18 	vmov	r0, r1, d8
 810d0d4:	f7f3 f906 	bl	81002e4 <__adddf3>
 810d0d8:	4642      	mov	r2, r8
 810d0da:	464b      	mov	r3, r9
 810d0dc:	f7f3 f902 	bl	81002e4 <__adddf3>
 810d0e0:	4632      	mov	r2, r6
 810d0e2:	463b      	mov	r3, r7
 810d0e4:	f7f3 f8fe 	bl	81002e4 <__adddf3>
 810d0e8:	9c04      	ldr	r4, [sp, #16]
 810d0ea:	4632      	mov	r2, r6
 810d0ec:	463b      	mov	r3, r7
 810d0ee:	4620      	mov	r0, r4
 810d0f0:	460d      	mov	r5, r1
 810d0f2:	f7f3 f8f5 	bl	81002e0 <__aeabi_dsub>
 810d0f6:	4642      	mov	r2, r8
 810d0f8:	464b      	mov	r3, r9
 810d0fa:	f7f3 f8f1 	bl	81002e0 <__aeabi_dsub>
 810d0fe:	ec53 2b18 	vmov	r2, r3, d8
 810d102:	f7f3 f8ed 	bl	81002e0 <__aeabi_dsub>
 810d106:	4602      	mov	r2, r0
 810d108:	460b      	mov	r3, r1
 810d10a:	4650      	mov	r0, sl
 810d10c:	4659      	mov	r1, fp
 810d10e:	e606      	b.n	810cd1e <__ieee754_pow+0x2ee>
 810d110:	2401      	movs	r4, #1
 810d112:	e6a0      	b.n	810ce56 <__ieee754_pow+0x426>
 810d114:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810d168 <__ieee754_pow+0x738>
 810d118:	e60d      	b.n	810cd36 <__ieee754_pow+0x306>
 810d11a:	bf00      	nop
 810d11c:	f3af 8000 	nop.w
 810d120:	4a454eef 	.word	0x4a454eef
 810d124:	3fca7e28 	.word	0x3fca7e28
 810d128:	93c9db65 	.word	0x93c9db65
 810d12c:	3fcd864a 	.word	0x3fcd864a
 810d130:	a91d4101 	.word	0xa91d4101
 810d134:	3fd17460 	.word	0x3fd17460
 810d138:	518f264d 	.word	0x518f264d
 810d13c:	3fd55555 	.word	0x3fd55555
 810d140:	db6fabff 	.word	0xdb6fabff
 810d144:	3fdb6db6 	.word	0x3fdb6db6
 810d148:	33333303 	.word	0x33333303
 810d14c:	3fe33333 	.word	0x3fe33333
 810d150:	e0000000 	.word	0xe0000000
 810d154:	3feec709 	.word	0x3feec709
 810d158:	dc3a03fd 	.word	0xdc3a03fd
 810d15c:	3feec709 	.word	0x3feec709
 810d160:	145b01f5 	.word	0x145b01f5
 810d164:	be3e2fe0 	.word	0xbe3e2fe0
 810d168:	00000000 	.word	0x00000000
 810d16c:	3ff00000 	.word	0x3ff00000
 810d170:	7ff00000 	.word	0x7ff00000
 810d174:	43400000 	.word	0x43400000
 810d178:	0003988e 	.word	0x0003988e
 810d17c:	000bb679 	.word	0x000bb679
 810d180:	0810d928 	.word	0x0810d928
 810d184:	3ff00000 	.word	0x3ff00000
 810d188:	40080000 	.word	0x40080000
 810d18c:	0810d948 	.word	0x0810d948
 810d190:	0810d938 	.word	0x0810d938
 810d194:	a3b5      	add	r3, pc, #724	; (adr r3, 810d46c <__ieee754_pow+0xa3c>)
 810d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d19a:	4640      	mov	r0, r8
 810d19c:	4649      	mov	r1, r9
 810d19e:	f7f3 f8a1 	bl	81002e4 <__adddf3>
 810d1a2:	4622      	mov	r2, r4
 810d1a4:	ec41 0b1a 	vmov	d10, r0, r1
 810d1a8:	462b      	mov	r3, r5
 810d1aa:	4630      	mov	r0, r6
 810d1ac:	4639      	mov	r1, r7
 810d1ae:	f7f3 f897 	bl	81002e0 <__aeabi_dsub>
 810d1b2:	4602      	mov	r2, r0
 810d1b4:	460b      	mov	r3, r1
 810d1b6:	ec51 0b1a 	vmov	r0, r1, d10
 810d1ba:	f7f3 fcd9 	bl	8100b70 <__aeabi_dcmpgt>
 810d1be:	2800      	cmp	r0, #0
 810d1c0:	f47f adf8 	bne.w	810cdb4 <__ieee754_pow+0x384>
 810d1c4:	4aa4      	ldr	r2, [pc, #656]	; (810d458 <__ieee754_pow+0xa28>)
 810d1c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810d1ca:	4293      	cmp	r3, r2
 810d1cc:	f340 810b 	ble.w	810d3e6 <__ieee754_pow+0x9b6>
 810d1d0:	151b      	asrs	r3, r3, #20
 810d1d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810d1d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810d1da:	fa4a f303 	asr.w	r3, sl, r3
 810d1de:	445b      	add	r3, fp
 810d1e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810d1e4:	4e9d      	ldr	r6, [pc, #628]	; (810d45c <__ieee754_pow+0xa2c>)
 810d1e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810d1ea:	4116      	asrs	r6, r2
 810d1ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810d1f0:	2000      	movs	r0, #0
 810d1f2:	ea23 0106 	bic.w	r1, r3, r6
 810d1f6:	f1c2 0214 	rsb	r2, r2, #20
 810d1fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810d1fe:	fa4a fa02 	asr.w	sl, sl, r2
 810d202:	f1bb 0f00 	cmp.w	fp, #0
 810d206:	4602      	mov	r2, r0
 810d208:	460b      	mov	r3, r1
 810d20a:	4620      	mov	r0, r4
 810d20c:	4629      	mov	r1, r5
 810d20e:	bfb8      	it	lt
 810d210:	f1ca 0a00 	rsblt	sl, sl, #0
 810d214:	f7f3 f864 	bl	81002e0 <__aeabi_dsub>
 810d218:	ec41 0b19 	vmov	d9, r0, r1
 810d21c:	4642      	mov	r2, r8
 810d21e:	464b      	mov	r3, r9
 810d220:	ec51 0b19 	vmov	r0, r1, d9
 810d224:	f7f3 f85e 	bl	81002e4 <__adddf3>
 810d228:	2400      	movs	r4, #0
 810d22a:	a379      	add	r3, pc, #484	; (adr r3, 810d410 <__ieee754_pow+0x9e0>)
 810d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d230:	4620      	mov	r0, r4
 810d232:	460d      	mov	r5, r1
 810d234:	f7f3 fa0c 	bl	8100650 <__aeabi_dmul>
 810d238:	ec53 2b19 	vmov	r2, r3, d9
 810d23c:	4606      	mov	r6, r0
 810d23e:	460f      	mov	r7, r1
 810d240:	4620      	mov	r0, r4
 810d242:	4629      	mov	r1, r5
 810d244:	f7f3 f84c 	bl	81002e0 <__aeabi_dsub>
 810d248:	4602      	mov	r2, r0
 810d24a:	460b      	mov	r3, r1
 810d24c:	4640      	mov	r0, r8
 810d24e:	4649      	mov	r1, r9
 810d250:	f7f3 f846 	bl	81002e0 <__aeabi_dsub>
 810d254:	a370      	add	r3, pc, #448	; (adr r3, 810d418 <__ieee754_pow+0x9e8>)
 810d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d25a:	f7f3 f9f9 	bl	8100650 <__aeabi_dmul>
 810d25e:	a370      	add	r3, pc, #448	; (adr r3, 810d420 <__ieee754_pow+0x9f0>)
 810d260:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d264:	4680      	mov	r8, r0
 810d266:	4689      	mov	r9, r1
 810d268:	4620      	mov	r0, r4
 810d26a:	4629      	mov	r1, r5
 810d26c:	f7f3 f9f0 	bl	8100650 <__aeabi_dmul>
 810d270:	4602      	mov	r2, r0
 810d272:	460b      	mov	r3, r1
 810d274:	4640      	mov	r0, r8
 810d276:	4649      	mov	r1, r9
 810d278:	f7f3 f834 	bl	81002e4 <__adddf3>
 810d27c:	4604      	mov	r4, r0
 810d27e:	460d      	mov	r5, r1
 810d280:	4602      	mov	r2, r0
 810d282:	460b      	mov	r3, r1
 810d284:	4630      	mov	r0, r6
 810d286:	4639      	mov	r1, r7
 810d288:	f7f3 f82c 	bl	81002e4 <__adddf3>
 810d28c:	4632      	mov	r2, r6
 810d28e:	463b      	mov	r3, r7
 810d290:	4680      	mov	r8, r0
 810d292:	4689      	mov	r9, r1
 810d294:	f7f3 f824 	bl	81002e0 <__aeabi_dsub>
 810d298:	4602      	mov	r2, r0
 810d29a:	460b      	mov	r3, r1
 810d29c:	4620      	mov	r0, r4
 810d29e:	4629      	mov	r1, r5
 810d2a0:	f7f3 f81e 	bl	81002e0 <__aeabi_dsub>
 810d2a4:	4642      	mov	r2, r8
 810d2a6:	4606      	mov	r6, r0
 810d2a8:	460f      	mov	r7, r1
 810d2aa:	464b      	mov	r3, r9
 810d2ac:	4640      	mov	r0, r8
 810d2ae:	4649      	mov	r1, r9
 810d2b0:	f7f3 f9ce 	bl	8100650 <__aeabi_dmul>
 810d2b4:	a35c      	add	r3, pc, #368	; (adr r3, 810d428 <__ieee754_pow+0x9f8>)
 810d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2ba:	4604      	mov	r4, r0
 810d2bc:	460d      	mov	r5, r1
 810d2be:	f7f3 f9c7 	bl	8100650 <__aeabi_dmul>
 810d2c2:	a35b      	add	r3, pc, #364	; (adr r3, 810d430 <__ieee754_pow+0xa00>)
 810d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2c8:	f7f3 f80a 	bl	81002e0 <__aeabi_dsub>
 810d2cc:	4622      	mov	r2, r4
 810d2ce:	462b      	mov	r3, r5
 810d2d0:	f7f3 f9be 	bl	8100650 <__aeabi_dmul>
 810d2d4:	a358      	add	r3, pc, #352	; (adr r3, 810d438 <__ieee754_pow+0xa08>)
 810d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2da:	f7f3 f803 	bl	81002e4 <__adddf3>
 810d2de:	4622      	mov	r2, r4
 810d2e0:	462b      	mov	r3, r5
 810d2e2:	f7f3 f9b5 	bl	8100650 <__aeabi_dmul>
 810d2e6:	a356      	add	r3, pc, #344	; (adr r3, 810d440 <__ieee754_pow+0xa10>)
 810d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2ec:	f7f2 fff8 	bl	81002e0 <__aeabi_dsub>
 810d2f0:	4622      	mov	r2, r4
 810d2f2:	462b      	mov	r3, r5
 810d2f4:	f7f3 f9ac 	bl	8100650 <__aeabi_dmul>
 810d2f8:	a353      	add	r3, pc, #332	; (adr r3, 810d448 <__ieee754_pow+0xa18>)
 810d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d2fe:	f7f2 fff1 	bl	81002e4 <__adddf3>
 810d302:	4622      	mov	r2, r4
 810d304:	462b      	mov	r3, r5
 810d306:	f7f3 f9a3 	bl	8100650 <__aeabi_dmul>
 810d30a:	4602      	mov	r2, r0
 810d30c:	460b      	mov	r3, r1
 810d30e:	4640      	mov	r0, r8
 810d310:	4649      	mov	r1, r9
 810d312:	f7f2 ffe5 	bl	81002e0 <__aeabi_dsub>
 810d316:	4604      	mov	r4, r0
 810d318:	460d      	mov	r5, r1
 810d31a:	4602      	mov	r2, r0
 810d31c:	460b      	mov	r3, r1
 810d31e:	4640      	mov	r0, r8
 810d320:	4649      	mov	r1, r9
 810d322:	f7f3 f995 	bl	8100650 <__aeabi_dmul>
 810d326:	2200      	movs	r2, #0
 810d328:	ec41 0b19 	vmov	d9, r0, r1
 810d32c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810d330:	4620      	mov	r0, r4
 810d332:	4629      	mov	r1, r5
 810d334:	f7f2 ffd4 	bl	81002e0 <__aeabi_dsub>
 810d338:	4602      	mov	r2, r0
 810d33a:	460b      	mov	r3, r1
 810d33c:	ec51 0b19 	vmov	r0, r1, d9
 810d340:	f7f3 fab0 	bl	81008a4 <__aeabi_ddiv>
 810d344:	4632      	mov	r2, r6
 810d346:	4604      	mov	r4, r0
 810d348:	460d      	mov	r5, r1
 810d34a:	463b      	mov	r3, r7
 810d34c:	4640      	mov	r0, r8
 810d34e:	4649      	mov	r1, r9
 810d350:	f7f3 f97e 	bl	8100650 <__aeabi_dmul>
 810d354:	4632      	mov	r2, r6
 810d356:	463b      	mov	r3, r7
 810d358:	f7f2 ffc4 	bl	81002e4 <__adddf3>
 810d35c:	4602      	mov	r2, r0
 810d35e:	460b      	mov	r3, r1
 810d360:	4620      	mov	r0, r4
 810d362:	4629      	mov	r1, r5
 810d364:	f7f2 ffbc 	bl	81002e0 <__aeabi_dsub>
 810d368:	4642      	mov	r2, r8
 810d36a:	464b      	mov	r3, r9
 810d36c:	f7f2 ffb8 	bl	81002e0 <__aeabi_dsub>
 810d370:	460b      	mov	r3, r1
 810d372:	4602      	mov	r2, r0
 810d374:	493a      	ldr	r1, [pc, #232]	; (810d460 <__ieee754_pow+0xa30>)
 810d376:	2000      	movs	r0, #0
 810d378:	f7f2 ffb2 	bl	81002e0 <__aeabi_dsub>
 810d37c:	e9cd 0100 	strd	r0, r1, [sp]
 810d380:	9b01      	ldr	r3, [sp, #4]
 810d382:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810d386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d38a:	da2f      	bge.n	810d3ec <__ieee754_pow+0x9bc>
 810d38c:	4650      	mov	r0, sl
 810d38e:	ed9d 0b00 	vldr	d0, [sp]
 810d392:	f000 f9cd 	bl	810d730 <scalbn>
 810d396:	ec51 0b10 	vmov	r0, r1, d0
 810d39a:	ec53 2b18 	vmov	r2, r3, d8
 810d39e:	f7ff bbe0 	b.w	810cb62 <__ieee754_pow+0x132>
 810d3a2:	4b30      	ldr	r3, [pc, #192]	; (810d464 <__ieee754_pow+0xa34>)
 810d3a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810d3a8:	429e      	cmp	r6, r3
 810d3aa:	f77f af0b 	ble.w	810d1c4 <__ieee754_pow+0x794>
 810d3ae:	4b2e      	ldr	r3, [pc, #184]	; (810d468 <__ieee754_pow+0xa38>)
 810d3b0:	440b      	add	r3, r1
 810d3b2:	4303      	orrs	r3, r0
 810d3b4:	d00b      	beq.n	810d3ce <__ieee754_pow+0x99e>
 810d3b6:	a326      	add	r3, pc, #152	; (adr r3, 810d450 <__ieee754_pow+0xa20>)
 810d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3bc:	ec51 0b18 	vmov	r0, r1, d8
 810d3c0:	f7f3 f946 	bl	8100650 <__aeabi_dmul>
 810d3c4:	a322      	add	r3, pc, #136	; (adr r3, 810d450 <__ieee754_pow+0xa20>)
 810d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3ca:	f7ff bbca 	b.w	810cb62 <__ieee754_pow+0x132>
 810d3ce:	4622      	mov	r2, r4
 810d3d0:	462b      	mov	r3, r5
 810d3d2:	f7f2 ff85 	bl	81002e0 <__aeabi_dsub>
 810d3d6:	4642      	mov	r2, r8
 810d3d8:	464b      	mov	r3, r9
 810d3da:	f7f3 fbbf 	bl	8100b5c <__aeabi_dcmpge>
 810d3de:	2800      	cmp	r0, #0
 810d3e0:	f43f aef0 	beq.w	810d1c4 <__ieee754_pow+0x794>
 810d3e4:	e7e7      	b.n	810d3b6 <__ieee754_pow+0x986>
 810d3e6:	f04f 0a00 	mov.w	sl, #0
 810d3ea:	e717      	b.n	810d21c <__ieee754_pow+0x7ec>
 810d3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d3f0:	4619      	mov	r1, r3
 810d3f2:	e7d2      	b.n	810d39a <__ieee754_pow+0x96a>
 810d3f4:	491a      	ldr	r1, [pc, #104]	; (810d460 <__ieee754_pow+0xa30>)
 810d3f6:	2000      	movs	r0, #0
 810d3f8:	f7ff bb9e 	b.w	810cb38 <__ieee754_pow+0x108>
 810d3fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d400:	f7ff bb9a 	b.w	810cb38 <__ieee754_pow+0x108>
 810d404:	9000      	str	r0, [sp, #0]
 810d406:	f7ff bb76 	b.w	810caf6 <__ieee754_pow+0xc6>
 810d40a:	2100      	movs	r1, #0
 810d40c:	f7ff bb60 	b.w	810cad0 <__ieee754_pow+0xa0>
 810d410:	00000000 	.word	0x00000000
 810d414:	3fe62e43 	.word	0x3fe62e43
 810d418:	fefa39ef 	.word	0xfefa39ef
 810d41c:	3fe62e42 	.word	0x3fe62e42
 810d420:	0ca86c39 	.word	0x0ca86c39
 810d424:	be205c61 	.word	0xbe205c61
 810d428:	72bea4d0 	.word	0x72bea4d0
 810d42c:	3e663769 	.word	0x3e663769
 810d430:	c5d26bf1 	.word	0xc5d26bf1
 810d434:	3ebbbd41 	.word	0x3ebbbd41
 810d438:	af25de2c 	.word	0xaf25de2c
 810d43c:	3f11566a 	.word	0x3f11566a
 810d440:	16bebd93 	.word	0x16bebd93
 810d444:	3f66c16c 	.word	0x3f66c16c
 810d448:	5555553e 	.word	0x5555553e
 810d44c:	3fc55555 	.word	0x3fc55555
 810d450:	c2f8f359 	.word	0xc2f8f359
 810d454:	01a56e1f 	.word	0x01a56e1f
 810d458:	3fe00000 	.word	0x3fe00000
 810d45c:	000fffff 	.word	0x000fffff
 810d460:	3ff00000 	.word	0x3ff00000
 810d464:	4090cbff 	.word	0x4090cbff
 810d468:	3f6f3400 	.word	0x3f6f3400
 810d46c:	652b82fe 	.word	0x652b82fe
 810d470:	3c971547 	.word	0x3c971547

0810d474 <__ieee754_sqrt>:
 810d474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d478:	ec55 4b10 	vmov	r4, r5, d0
 810d47c:	4e56      	ldr	r6, [pc, #344]	; (810d5d8 <__ieee754_sqrt+0x164>)
 810d47e:	43ae      	bics	r6, r5
 810d480:	ee10 0a10 	vmov	r0, s0
 810d484:	ee10 3a10 	vmov	r3, s0
 810d488:	4629      	mov	r1, r5
 810d48a:	462a      	mov	r2, r5
 810d48c:	d110      	bne.n	810d4b0 <__ieee754_sqrt+0x3c>
 810d48e:	ee10 2a10 	vmov	r2, s0
 810d492:	462b      	mov	r3, r5
 810d494:	f7f3 f8dc 	bl	8100650 <__aeabi_dmul>
 810d498:	4602      	mov	r2, r0
 810d49a:	460b      	mov	r3, r1
 810d49c:	4620      	mov	r0, r4
 810d49e:	4629      	mov	r1, r5
 810d4a0:	f7f2 ff20 	bl	81002e4 <__adddf3>
 810d4a4:	4604      	mov	r4, r0
 810d4a6:	460d      	mov	r5, r1
 810d4a8:	ec45 4b10 	vmov	d0, r4, r5
 810d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d4b0:	2d00      	cmp	r5, #0
 810d4b2:	dc10      	bgt.n	810d4d6 <__ieee754_sqrt+0x62>
 810d4b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d4b8:	4330      	orrs	r0, r6
 810d4ba:	d0f5      	beq.n	810d4a8 <__ieee754_sqrt+0x34>
 810d4bc:	b15d      	cbz	r5, 810d4d6 <__ieee754_sqrt+0x62>
 810d4be:	ee10 2a10 	vmov	r2, s0
 810d4c2:	462b      	mov	r3, r5
 810d4c4:	ee10 0a10 	vmov	r0, s0
 810d4c8:	f7f2 ff0a 	bl	81002e0 <__aeabi_dsub>
 810d4cc:	4602      	mov	r2, r0
 810d4ce:	460b      	mov	r3, r1
 810d4d0:	f7f3 f9e8 	bl	81008a4 <__aeabi_ddiv>
 810d4d4:	e7e6      	b.n	810d4a4 <__ieee754_sqrt+0x30>
 810d4d6:	1509      	asrs	r1, r1, #20
 810d4d8:	d076      	beq.n	810d5c8 <__ieee754_sqrt+0x154>
 810d4da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810d4de:	07ce      	lsls	r6, r1, #31
 810d4e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810d4e4:	bf5e      	ittt	pl
 810d4e6:	0fda      	lsrpl	r2, r3, #31
 810d4e8:	005b      	lslpl	r3, r3, #1
 810d4ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810d4ee:	0fda      	lsrs	r2, r3, #31
 810d4f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810d4f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810d4f8:	2000      	movs	r0, #0
 810d4fa:	106d      	asrs	r5, r5, #1
 810d4fc:	005b      	lsls	r3, r3, #1
 810d4fe:	f04f 0e16 	mov.w	lr, #22
 810d502:	4684      	mov	ip, r0
 810d504:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d508:	eb0c 0401 	add.w	r4, ip, r1
 810d50c:	4294      	cmp	r4, r2
 810d50e:	bfde      	ittt	le
 810d510:	1b12      	suble	r2, r2, r4
 810d512:	eb04 0c01 	addle.w	ip, r4, r1
 810d516:	1840      	addle	r0, r0, r1
 810d518:	0052      	lsls	r2, r2, #1
 810d51a:	f1be 0e01 	subs.w	lr, lr, #1
 810d51e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d522:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810d526:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d52a:	d1ed      	bne.n	810d508 <__ieee754_sqrt+0x94>
 810d52c:	4671      	mov	r1, lr
 810d52e:	2720      	movs	r7, #32
 810d530:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810d534:	4562      	cmp	r2, ip
 810d536:	eb04 060e 	add.w	r6, r4, lr
 810d53a:	dc02      	bgt.n	810d542 <__ieee754_sqrt+0xce>
 810d53c:	d113      	bne.n	810d566 <__ieee754_sqrt+0xf2>
 810d53e:	429e      	cmp	r6, r3
 810d540:	d811      	bhi.n	810d566 <__ieee754_sqrt+0xf2>
 810d542:	2e00      	cmp	r6, #0
 810d544:	eb06 0e04 	add.w	lr, r6, r4
 810d548:	da43      	bge.n	810d5d2 <__ieee754_sqrt+0x15e>
 810d54a:	f1be 0f00 	cmp.w	lr, #0
 810d54e:	db40      	blt.n	810d5d2 <__ieee754_sqrt+0x15e>
 810d550:	f10c 0801 	add.w	r8, ip, #1
 810d554:	eba2 020c 	sub.w	r2, r2, ip
 810d558:	429e      	cmp	r6, r3
 810d55a:	bf88      	it	hi
 810d55c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810d560:	1b9b      	subs	r3, r3, r6
 810d562:	4421      	add	r1, r4
 810d564:	46c4      	mov	ip, r8
 810d566:	0052      	lsls	r2, r2, #1
 810d568:	3f01      	subs	r7, #1
 810d56a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d56e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810d572:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d576:	d1dd      	bne.n	810d534 <__ieee754_sqrt+0xc0>
 810d578:	4313      	orrs	r3, r2
 810d57a:	d006      	beq.n	810d58a <__ieee754_sqrt+0x116>
 810d57c:	1c4c      	adds	r4, r1, #1
 810d57e:	bf13      	iteet	ne
 810d580:	3101      	addne	r1, #1
 810d582:	3001      	addeq	r0, #1
 810d584:	4639      	moveq	r1, r7
 810d586:	f021 0101 	bicne.w	r1, r1, #1
 810d58a:	1043      	asrs	r3, r0, #1
 810d58c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810d590:	0849      	lsrs	r1, r1, #1
 810d592:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810d596:	07c2      	lsls	r2, r0, #31
 810d598:	bf48      	it	mi
 810d59a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810d59e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810d5a2:	460c      	mov	r4, r1
 810d5a4:	463d      	mov	r5, r7
 810d5a6:	e77f      	b.n	810d4a8 <__ieee754_sqrt+0x34>
 810d5a8:	0ada      	lsrs	r2, r3, #11
 810d5aa:	3815      	subs	r0, #21
 810d5ac:	055b      	lsls	r3, r3, #21
 810d5ae:	2a00      	cmp	r2, #0
 810d5b0:	d0fa      	beq.n	810d5a8 <__ieee754_sqrt+0x134>
 810d5b2:	02d7      	lsls	r7, r2, #11
 810d5b4:	d50a      	bpl.n	810d5cc <__ieee754_sqrt+0x158>
 810d5b6:	f1c1 0420 	rsb	r4, r1, #32
 810d5ba:	fa23 f404 	lsr.w	r4, r3, r4
 810d5be:	1e4d      	subs	r5, r1, #1
 810d5c0:	408b      	lsls	r3, r1
 810d5c2:	4322      	orrs	r2, r4
 810d5c4:	1b41      	subs	r1, r0, r5
 810d5c6:	e788      	b.n	810d4da <__ieee754_sqrt+0x66>
 810d5c8:	4608      	mov	r0, r1
 810d5ca:	e7f0      	b.n	810d5ae <__ieee754_sqrt+0x13a>
 810d5cc:	0052      	lsls	r2, r2, #1
 810d5ce:	3101      	adds	r1, #1
 810d5d0:	e7ef      	b.n	810d5b2 <__ieee754_sqrt+0x13e>
 810d5d2:	46e0      	mov	r8, ip
 810d5d4:	e7be      	b.n	810d554 <__ieee754_sqrt+0xe0>
 810d5d6:	bf00      	nop
 810d5d8:	7ff00000 	.word	0x7ff00000

0810d5dc <fabs>:
 810d5dc:	ec51 0b10 	vmov	r0, r1, d0
 810d5e0:	ee10 2a10 	vmov	r2, s0
 810d5e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d5e8:	ec43 2b10 	vmov	d0, r2, r3
 810d5ec:	4770      	bx	lr

0810d5ee <finite>:
 810d5ee:	b082      	sub	sp, #8
 810d5f0:	ed8d 0b00 	vstr	d0, [sp]
 810d5f4:	9801      	ldr	r0, [sp, #4]
 810d5f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810d5fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810d5fe:	0fc0      	lsrs	r0, r0, #31
 810d600:	b002      	add	sp, #8
 810d602:	4770      	bx	lr
 810d604:	0000      	movs	r0, r0
	...

0810d608 <nan>:
 810d608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810d610 <nan+0x8>
 810d60c:	4770      	bx	lr
 810d60e:	bf00      	nop
 810d610:	00000000 	.word	0x00000000
 810d614:	7ff80000 	.word	0x7ff80000

0810d618 <rint>:
 810d618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d61a:	ec51 0b10 	vmov	r0, r1, d0
 810d61e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d622:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810d626:	2e13      	cmp	r6, #19
 810d628:	ee10 4a10 	vmov	r4, s0
 810d62c:	460b      	mov	r3, r1
 810d62e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810d632:	dc58      	bgt.n	810d6e6 <rint+0xce>
 810d634:	2e00      	cmp	r6, #0
 810d636:	da2b      	bge.n	810d690 <rint+0x78>
 810d638:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810d63c:	4302      	orrs	r2, r0
 810d63e:	d023      	beq.n	810d688 <rint+0x70>
 810d640:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810d644:	4302      	orrs	r2, r0
 810d646:	4254      	negs	r4, r2
 810d648:	4314      	orrs	r4, r2
 810d64a:	0c4b      	lsrs	r3, r1, #17
 810d64c:	0b24      	lsrs	r4, r4, #12
 810d64e:	045b      	lsls	r3, r3, #17
 810d650:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810d654:	ea44 0103 	orr.w	r1, r4, r3
 810d658:	4b32      	ldr	r3, [pc, #200]	; (810d724 <rint+0x10c>)
 810d65a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d65e:	e9d3 6700 	ldrd	r6, r7, [r3]
 810d662:	4602      	mov	r2, r0
 810d664:	460b      	mov	r3, r1
 810d666:	4630      	mov	r0, r6
 810d668:	4639      	mov	r1, r7
 810d66a:	f7f2 fe3b 	bl	81002e4 <__adddf3>
 810d66e:	e9cd 0100 	strd	r0, r1, [sp]
 810d672:	463b      	mov	r3, r7
 810d674:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d678:	4632      	mov	r2, r6
 810d67a:	f7f2 fe31 	bl	81002e0 <__aeabi_dsub>
 810d67e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d682:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810d686:	4639      	mov	r1, r7
 810d688:	ec41 0b10 	vmov	d0, r0, r1
 810d68c:	b003      	add	sp, #12
 810d68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d690:	4a25      	ldr	r2, [pc, #148]	; (810d728 <rint+0x110>)
 810d692:	4132      	asrs	r2, r6
 810d694:	ea01 0702 	and.w	r7, r1, r2
 810d698:	4307      	orrs	r7, r0
 810d69a:	d0f5      	beq.n	810d688 <rint+0x70>
 810d69c:	0851      	lsrs	r1, r2, #1
 810d69e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810d6a2:	4314      	orrs	r4, r2
 810d6a4:	d00c      	beq.n	810d6c0 <rint+0xa8>
 810d6a6:	ea23 0201 	bic.w	r2, r3, r1
 810d6aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810d6ae:	2e13      	cmp	r6, #19
 810d6b0:	fa43 f606 	asr.w	r6, r3, r6
 810d6b4:	bf0c      	ite	eq
 810d6b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810d6ba:	2400      	movne	r4, #0
 810d6bc:	ea42 0306 	orr.w	r3, r2, r6
 810d6c0:	4918      	ldr	r1, [pc, #96]	; (810d724 <rint+0x10c>)
 810d6c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810d6c6:	4622      	mov	r2, r4
 810d6c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 810d6cc:	4620      	mov	r0, r4
 810d6ce:	4629      	mov	r1, r5
 810d6d0:	f7f2 fe08 	bl	81002e4 <__adddf3>
 810d6d4:	e9cd 0100 	strd	r0, r1, [sp]
 810d6d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d6dc:	4622      	mov	r2, r4
 810d6de:	462b      	mov	r3, r5
 810d6e0:	f7f2 fdfe 	bl	81002e0 <__aeabi_dsub>
 810d6e4:	e7d0      	b.n	810d688 <rint+0x70>
 810d6e6:	2e33      	cmp	r6, #51	; 0x33
 810d6e8:	dd07      	ble.n	810d6fa <rint+0xe2>
 810d6ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810d6ee:	d1cb      	bne.n	810d688 <rint+0x70>
 810d6f0:	ee10 2a10 	vmov	r2, s0
 810d6f4:	f7f2 fdf6 	bl	81002e4 <__adddf3>
 810d6f8:	e7c6      	b.n	810d688 <rint+0x70>
 810d6fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810d6fe:	f04f 36ff 	mov.w	r6, #4294967295
 810d702:	40d6      	lsrs	r6, r2
 810d704:	4230      	tst	r0, r6
 810d706:	d0bf      	beq.n	810d688 <rint+0x70>
 810d708:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810d70c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810d710:	bf1f      	itttt	ne
 810d712:	ea24 0101 	bicne.w	r1, r4, r1
 810d716:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810d71a:	fa44 f202 	asrne.w	r2, r4, r2
 810d71e:	ea41 0402 	orrne.w	r4, r1, r2
 810d722:	e7cd      	b.n	810d6c0 <rint+0xa8>
 810d724:	0810d958 	.word	0x0810d958
 810d728:	000fffff 	.word	0x000fffff
 810d72c:	00000000 	.word	0x00000000

0810d730 <scalbn>:
 810d730:	b570      	push	{r4, r5, r6, lr}
 810d732:	ec55 4b10 	vmov	r4, r5, d0
 810d736:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810d73a:	4606      	mov	r6, r0
 810d73c:	462b      	mov	r3, r5
 810d73e:	b99a      	cbnz	r2, 810d768 <scalbn+0x38>
 810d740:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810d744:	4323      	orrs	r3, r4
 810d746:	d036      	beq.n	810d7b6 <scalbn+0x86>
 810d748:	4b39      	ldr	r3, [pc, #228]	; (810d830 <scalbn+0x100>)
 810d74a:	4629      	mov	r1, r5
 810d74c:	ee10 0a10 	vmov	r0, s0
 810d750:	2200      	movs	r2, #0
 810d752:	f7f2 ff7d 	bl	8100650 <__aeabi_dmul>
 810d756:	4b37      	ldr	r3, [pc, #220]	; (810d834 <scalbn+0x104>)
 810d758:	429e      	cmp	r6, r3
 810d75a:	4604      	mov	r4, r0
 810d75c:	460d      	mov	r5, r1
 810d75e:	da10      	bge.n	810d782 <scalbn+0x52>
 810d760:	a32b      	add	r3, pc, #172	; (adr r3, 810d810 <scalbn+0xe0>)
 810d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d766:	e03a      	b.n	810d7de <scalbn+0xae>
 810d768:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810d76c:	428a      	cmp	r2, r1
 810d76e:	d10c      	bne.n	810d78a <scalbn+0x5a>
 810d770:	ee10 2a10 	vmov	r2, s0
 810d774:	4620      	mov	r0, r4
 810d776:	4629      	mov	r1, r5
 810d778:	f7f2 fdb4 	bl	81002e4 <__adddf3>
 810d77c:	4604      	mov	r4, r0
 810d77e:	460d      	mov	r5, r1
 810d780:	e019      	b.n	810d7b6 <scalbn+0x86>
 810d782:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d786:	460b      	mov	r3, r1
 810d788:	3a36      	subs	r2, #54	; 0x36
 810d78a:	4432      	add	r2, r6
 810d78c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810d790:	428a      	cmp	r2, r1
 810d792:	dd08      	ble.n	810d7a6 <scalbn+0x76>
 810d794:	2d00      	cmp	r5, #0
 810d796:	a120      	add	r1, pc, #128	; (adr r1, 810d818 <scalbn+0xe8>)
 810d798:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d79c:	da1c      	bge.n	810d7d8 <scalbn+0xa8>
 810d79e:	a120      	add	r1, pc, #128	; (adr r1, 810d820 <scalbn+0xf0>)
 810d7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d7a4:	e018      	b.n	810d7d8 <scalbn+0xa8>
 810d7a6:	2a00      	cmp	r2, #0
 810d7a8:	dd08      	ble.n	810d7bc <scalbn+0x8c>
 810d7aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d7ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d7b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810d7b6:	ec45 4b10 	vmov	d0, r4, r5
 810d7ba:	bd70      	pop	{r4, r5, r6, pc}
 810d7bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810d7c0:	da19      	bge.n	810d7f6 <scalbn+0xc6>
 810d7c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 810d7c6:	429e      	cmp	r6, r3
 810d7c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810d7cc:	dd0a      	ble.n	810d7e4 <scalbn+0xb4>
 810d7ce:	a112      	add	r1, pc, #72	; (adr r1, 810d818 <scalbn+0xe8>)
 810d7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d7d4:	2b00      	cmp	r3, #0
 810d7d6:	d1e2      	bne.n	810d79e <scalbn+0x6e>
 810d7d8:	a30f      	add	r3, pc, #60	; (adr r3, 810d818 <scalbn+0xe8>)
 810d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7de:	f7f2 ff37 	bl	8100650 <__aeabi_dmul>
 810d7e2:	e7cb      	b.n	810d77c <scalbn+0x4c>
 810d7e4:	a10a      	add	r1, pc, #40	; (adr r1, 810d810 <scalbn+0xe0>)
 810d7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d7ea:	2b00      	cmp	r3, #0
 810d7ec:	d0b8      	beq.n	810d760 <scalbn+0x30>
 810d7ee:	a10e      	add	r1, pc, #56	; (adr r1, 810d828 <scalbn+0xf8>)
 810d7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d7f4:	e7b4      	b.n	810d760 <scalbn+0x30>
 810d7f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d7fa:	3236      	adds	r2, #54	; 0x36
 810d7fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d800:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810d804:	4620      	mov	r0, r4
 810d806:	4b0c      	ldr	r3, [pc, #48]	; (810d838 <scalbn+0x108>)
 810d808:	2200      	movs	r2, #0
 810d80a:	e7e8      	b.n	810d7de <scalbn+0xae>
 810d80c:	f3af 8000 	nop.w
 810d810:	c2f8f359 	.word	0xc2f8f359
 810d814:	01a56e1f 	.word	0x01a56e1f
 810d818:	8800759c 	.word	0x8800759c
 810d81c:	7e37e43c 	.word	0x7e37e43c
 810d820:	8800759c 	.word	0x8800759c
 810d824:	fe37e43c 	.word	0xfe37e43c
 810d828:	c2f8f359 	.word	0xc2f8f359
 810d82c:	81a56e1f 	.word	0x81a56e1f
 810d830:	43500000 	.word	0x43500000
 810d834:	ffff3cb0 	.word	0xffff3cb0
 810d838:	3c900000 	.word	0x3c900000

0810d83c <_init>:
 810d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d83e:	bf00      	nop
 810d840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d842:	bc08      	pop	{r3}
 810d844:	469e      	mov	lr, r3
 810d846:	4770      	bx	lr

0810d848 <_fini>:
 810d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d84a:	bf00      	nop
 810d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d84e:	bc08      	pop	{r3}
 810d850:	469e      	mov	lr, r3
 810d852:	4770      	bx	lr
