
baremetal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3a4  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0810d640  0810d640  0001d640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d750  0810d750  0001d750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d758  0810d758  0001d758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d75c  0810d75c  0001d75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  10000000  0810d760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000588  1000008c  0810d7ec  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000614  0810d7ec  00020614  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002abdd  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004626  00000000  00000000  0004ac99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  0004f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011a0  00000000  00000000  000505c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003acb1  00000000  00000000  00051768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aea5  00000000  00000000  0008c419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b240  00000000  00000000  000a72be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002224fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005284  00000000  00000000  00222554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000008c 	.word	0x1000008c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d624 	.word	0x0810d624

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000090 	.word	0x10000090
 81002d4:	0810d624 	.word	0x0810d624

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9b9 	b.w	8101200 <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b96e 	b.w	8101200 <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468c      	mov	ip, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	f040 8083 	bne.w	8101052 <__udivmoddi4+0x116>
 8100f4c:	428a      	cmp	r2, r1
 8100f4e:	4617      	mov	r7, r2
 8100f50:	d947      	bls.n	8100fe2 <__udivmoddi4+0xa6>
 8100f52:	fab2 f282 	clz	r2, r2
 8100f56:	b142      	cbz	r2, 8100f6a <__udivmoddi4+0x2e>
 8100f58:	f1c2 0020 	rsb	r0, r2, #32
 8100f5c:	fa24 f000 	lsr.w	r0, r4, r0
 8100f60:	4091      	lsls	r1, r2
 8100f62:	4097      	lsls	r7, r2
 8100f64:	ea40 0c01 	orr.w	ip, r0, r1
 8100f68:	4094      	lsls	r4, r2
 8100f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100f6e:	0c23      	lsrs	r3, r4, #16
 8100f70:	fbbc f6f8 	udiv	r6, ip, r8
 8100f74:	fa1f fe87 	uxth.w	lr, r7
 8100f78:	fb08 c116 	mls	r1, r8, r6, ip
 8100f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f80:	fb06 f10e 	mul.w	r1, r6, lr
 8100f84:	4299      	cmp	r1, r3
 8100f86:	d909      	bls.n	8100f9c <__udivmoddi4+0x60>
 8100f88:	18fb      	adds	r3, r7, r3
 8100f8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f8e:	f080 8119 	bcs.w	81011c4 <__udivmoddi4+0x288>
 8100f92:	4299      	cmp	r1, r3
 8100f94:	f240 8116 	bls.w	81011c4 <__udivmoddi4+0x288>
 8100f98:	3e02      	subs	r6, #2
 8100f9a:	443b      	add	r3, r7
 8100f9c:	1a5b      	subs	r3, r3, r1
 8100f9e:	b2a4      	uxth	r4, r4
 8100fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa4:	fb08 3310 	mls	r3, r8, r0, r3
 8100fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8100fb0:	45a6      	cmp	lr, r4
 8100fb2:	d909      	bls.n	8100fc8 <__udivmoddi4+0x8c>
 8100fb4:	193c      	adds	r4, r7, r4
 8100fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fba:	f080 8105 	bcs.w	81011c8 <__udivmoddi4+0x28c>
 8100fbe:	45a6      	cmp	lr, r4
 8100fc0:	f240 8102 	bls.w	81011c8 <__udivmoddi4+0x28c>
 8100fc4:	3802      	subs	r0, #2
 8100fc6:	443c      	add	r4, r7
 8100fc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fcc:	eba4 040e 	sub.w	r4, r4, lr
 8100fd0:	2600      	movs	r6, #0
 8100fd2:	b11d      	cbz	r5, 8100fdc <__udivmoddi4+0xa0>
 8100fd4:	40d4      	lsrs	r4, r2
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	e9c5 4300 	strd	r4, r3, [r5]
 8100fdc:	4631      	mov	r1, r6
 8100fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe2:	b902      	cbnz	r2, 8100fe6 <__udivmoddi4+0xaa>
 8100fe4:	deff      	udf	#255	; 0xff
 8100fe6:	fab2 f282 	clz	r2, r2
 8100fea:	2a00      	cmp	r2, #0
 8100fec:	d150      	bne.n	8101090 <__udivmoddi4+0x154>
 8100fee:	1bcb      	subs	r3, r1, r7
 8100ff0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100ff4:	fa1f f887 	uxth.w	r8, r7
 8100ff8:	2601      	movs	r6, #1
 8100ffa:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ffe:	0c21      	lsrs	r1, r4, #16
 8101000:	fb0e 331c 	mls	r3, lr, ip, r3
 8101004:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101008:	fb08 f30c 	mul.w	r3, r8, ip
 810100c:	428b      	cmp	r3, r1
 810100e:	d907      	bls.n	8101020 <__udivmoddi4+0xe4>
 8101010:	1879      	adds	r1, r7, r1
 8101012:	f10c 30ff 	add.w	r0, ip, #4294967295
 8101016:	d202      	bcs.n	810101e <__udivmoddi4+0xe2>
 8101018:	428b      	cmp	r3, r1
 810101a:	f200 80e9 	bhi.w	81011f0 <__udivmoddi4+0x2b4>
 810101e:	4684      	mov	ip, r0
 8101020:	1ac9      	subs	r1, r1, r3
 8101022:	b2a3      	uxth	r3, r4
 8101024:	fbb1 f0fe 	udiv	r0, r1, lr
 8101028:	fb0e 1110 	mls	r1, lr, r0, r1
 810102c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8101030:	fb08 f800 	mul.w	r8, r8, r0
 8101034:	45a0      	cmp	r8, r4
 8101036:	d907      	bls.n	8101048 <__udivmoddi4+0x10c>
 8101038:	193c      	adds	r4, r7, r4
 810103a:	f100 33ff 	add.w	r3, r0, #4294967295
 810103e:	d202      	bcs.n	8101046 <__udivmoddi4+0x10a>
 8101040:	45a0      	cmp	r8, r4
 8101042:	f200 80d9 	bhi.w	81011f8 <__udivmoddi4+0x2bc>
 8101046:	4618      	mov	r0, r3
 8101048:	eba4 0408 	sub.w	r4, r4, r8
 810104c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8101050:	e7bf      	b.n	8100fd2 <__udivmoddi4+0x96>
 8101052:	428b      	cmp	r3, r1
 8101054:	d909      	bls.n	810106a <__udivmoddi4+0x12e>
 8101056:	2d00      	cmp	r5, #0
 8101058:	f000 80b1 	beq.w	81011be <__udivmoddi4+0x282>
 810105c:	2600      	movs	r6, #0
 810105e:	e9c5 0100 	strd	r0, r1, [r5]
 8101062:	4630      	mov	r0, r6
 8101064:	4631      	mov	r1, r6
 8101066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810106a:	fab3 f683 	clz	r6, r3
 810106e:	2e00      	cmp	r6, #0
 8101070:	d14a      	bne.n	8101108 <__udivmoddi4+0x1cc>
 8101072:	428b      	cmp	r3, r1
 8101074:	d302      	bcc.n	810107c <__udivmoddi4+0x140>
 8101076:	4282      	cmp	r2, r0
 8101078:	f200 80b8 	bhi.w	81011ec <__udivmoddi4+0x2b0>
 810107c:	1a84      	subs	r4, r0, r2
 810107e:	eb61 0103 	sbc.w	r1, r1, r3
 8101082:	2001      	movs	r0, #1
 8101084:	468c      	mov	ip, r1
 8101086:	2d00      	cmp	r5, #0
 8101088:	d0a8      	beq.n	8100fdc <__udivmoddi4+0xa0>
 810108a:	e9c5 4c00 	strd	r4, ip, [r5]
 810108e:	e7a5      	b.n	8100fdc <__udivmoddi4+0xa0>
 8101090:	f1c2 0320 	rsb	r3, r2, #32
 8101094:	fa20 f603 	lsr.w	r6, r0, r3
 8101098:	4097      	lsls	r7, r2
 810109a:	fa01 f002 	lsl.w	r0, r1, r2
 810109e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81010a2:	40d9      	lsrs	r1, r3
 81010a4:	4330      	orrs	r0, r6
 81010a6:	0c03      	lsrs	r3, r0, #16
 81010a8:	fbb1 f6fe 	udiv	r6, r1, lr
 81010ac:	fa1f f887 	uxth.w	r8, r7
 81010b0:	fb0e 1116 	mls	r1, lr, r6, r1
 81010b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81010b8:	fb06 f108 	mul.w	r1, r6, r8
 81010bc:	4299      	cmp	r1, r3
 81010be:	fa04 f402 	lsl.w	r4, r4, r2
 81010c2:	d909      	bls.n	81010d8 <__udivmoddi4+0x19c>
 81010c4:	18fb      	adds	r3, r7, r3
 81010c6:	f106 3cff 	add.w	ip, r6, #4294967295
 81010ca:	f080 808d 	bcs.w	81011e8 <__udivmoddi4+0x2ac>
 81010ce:	4299      	cmp	r1, r3
 81010d0:	f240 808a 	bls.w	81011e8 <__udivmoddi4+0x2ac>
 81010d4:	3e02      	subs	r6, #2
 81010d6:	443b      	add	r3, r7
 81010d8:	1a5b      	subs	r3, r3, r1
 81010da:	b281      	uxth	r1, r0
 81010dc:	fbb3 f0fe 	udiv	r0, r3, lr
 81010e0:	fb0e 3310 	mls	r3, lr, r0, r3
 81010e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010e8:	fb00 f308 	mul.w	r3, r0, r8
 81010ec:	428b      	cmp	r3, r1
 81010ee:	d907      	bls.n	8101100 <__udivmoddi4+0x1c4>
 81010f0:	1879      	adds	r1, r7, r1
 81010f2:	f100 3cff 	add.w	ip, r0, #4294967295
 81010f6:	d273      	bcs.n	81011e0 <__udivmoddi4+0x2a4>
 81010f8:	428b      	cmp	r3, r1
 81010fa:	d971      	bls.n	81011e0 <__udivmoddi4+0x2a4>
 81010fc:	3802      	subs	r0, #2
 81010fe:	4439      	add	r1, r7
 8101100:	1acb      	subs	r3, r1, r3
 8101102:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8101106:	e778      	b.n	8100ffa <__udivmoddi4+0xbe>
 8101108:	f1c6 0c20 	rsb	ip, r6, #32
 810110c:	fa03 f406 	lsl.w	r4, r3, r6
 8101110:	fa22 f30c 	lsr.w	r3, r2, ip
 8101114:	431c      	orrs	r4, r3
 8101116:	fa20 f70c 	lsr.w	r7, r0, ip
 810111a:	fa01 f306 	lsl.w	r3, r1, r6
 810111e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8101122:	fa21 f10c 	lsr.w	r1, r1, ip
 8101126:	431f      	orrs	r7, r3
 8101128:	0c3b      	lsrs	r3, r7, #16
 810112a:	fbb1 f9fe 	udiv	r9, r1, lr
 810112e:	fa1f f884 	uxth.w	r8, r4
 8101132:	fb0e 1119 	mls	r1, lr, r9, r1
 8101136:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 810113a:	fb09 fa08 	mul.w	sl, r9, r8
 810113e:	458a      	cmp	sl, r1
 8101140:	fa02 f206 	lsl.w	r2, r2, r6
 8101144:	fa00 f306 	lsl.w	r3, r0, r6
 8101148:	d908      	bls.n	810115c <__udivmoddi4+0x220>
 810114a:	1861      	adds	r1, r4, r1
 810114c:	f109 30ff 	add.w	r0, r9, #4294967295
 8101150:	d248      	bcs.n	81011e4 <__udivmoddi4+0x2a8>
 8101152:	458a      	cmp	sl, r1
 8101154:	d946      	bls.n	81011e4 <__udivmoddi4+0x2a8>
 8101156:	f1a9 0902 	sub.w	r9, r9, #2
 810115a:	4421      	add	r1, r4
 810115c:	eba1 010a 	sub.w	r1, r1, sl
 8101160:	b2bf      	uxth	r7, r7
 8101162:	fbb1 f0fe 	udiv	r0, r1, lr
 8101166:	fb0e 1110 	mls	r1, lr, r0, r1
 810116a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810116e:	fb00 f808 	mul.w	r8, r0, r8
 8101172:	45b8      	cmp	r8, r7
 8101174:	d907      	bls.n	8101186 <__udivmoddi4+0x24a>
 8101176:	19e7      	adds	r7, r4, r7
 8101178:	f100 31ff 	add.w	r1, r0, #4294967295
 810117c:	d22e      	bcs.n	81011dc <__udivmoddi4+0x2a0>
 810117e:	45b8      	cmp	r8, r7
 8101180:	d92c      	bls.n	81011dc <__udivmoddi4+0x2a0>
 8101182:	3802      	subs	r0, #2
 8101184:	4427      	add	r7, r4
 8101186:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810118a:	eba7 0708 	sub.w	r7, r7, r8
 810118e:	fba0 8902 	umull	r8, r9, r0, r2
 8101192:	454f      	cmp	r7, r9
 8101194:	46c6      	mov	lr, r8
 8101196:	4649      	mov	r1, r9
 8101198:	d31a      	bcc.n	81011d0 <__udivmoddi4+0x294>
 810119a:	d017      	beq.n	81011cc <__udivmoddi4+0x290>
 810119c:	b15d      	cbz	r5, 81011b6 <__udivmoddi4+0x27a>
 810119e:	ebb3 020e 	subs.w	r2, r3, lr
 81011a2:	eb67 0701 	sbc.w	r7, r7, r1
 81011a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 81011aa:	40f2      	lsrs	r2, r6
 81011ac:	ea4c 0202 	orr.w	r2, ip, r2
 81011b0:	40f7      	lsrs	r7, r6
 81011b2:	e9c5 2700 	strd	r2, r7, [r5]
 81011b6:	2600      	movs	r6, #0
 81011b8:	4631      	mov	r1, r6
 81011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81011be:	462e      	mov	r6, r5
 81011c0:	4628      	mov	r0, r5
 81011c2:	e70b      	b.n	8100fdc <__udivmoddi4+0xa0>
 81011c4:	4606      	mov	r6, r0
 81011c6:	e6e9      	b.n	8100f9c <__udivmoddi4+0x60>
 81011c8:	4618      	mov	r0, r3
 81011ca:	e6fd      	b.n	8100fc8 <__udivmoddi4+0x8c>
 81011cc:	4543      	cmp	r3, r8
 81011ce:	d2e5      	bcs.n	810119c <__udivmoddi4+0x260>
 81011d0:	ebb8 0e02 	subs.w	lr, r8, r2
 81011d4:	eb69 0104 	sbc.w	r1, r9, r4
 81011d8:	3801      	subs	r0, #1
 81011da:	e7df      	b.n	810119c <__udivmoddi4+0x260>
 81011dc:	4608      	mov	r0, r1
 81011de:	e7d2      	b.n	8101186 <__udivmoddi4+0x24a>
 81011e0:	4660      	mov	r0, ip
 81011e2:	e78d      	b.n	8101100 <__udivmoddi4+0x1c4>
 81011e4:	4681      	mov	r9, r0
 81011e6:	e7b9      	b.n	810115c <__udivmoddi4+0x220>
 81011e8:	4666      	mov	r6, ip
 81011ea:	e775      	b.n	81010d8 <__udivmoddi4+0x19c>
 81011ec:	4630      	mov	r0, r6
 81011ee:	e74a      	b.n	8101086 <__udivmoddi4+0x14a>
 81011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 81011f4:	4439      	add	r1, r7
 81011f6:	e713      	b.n	8101020 <__udivmoddi4+0xe4>
 81011f8:	3802      	subs	r0, #2
 81011fa:	443c      	add	r4, r7
 81011fc:	e724      	b.n	8101048 <__udivmoddi4+0x10c>
 81011fe:	bf00      	nop

08101200 <__aeabi_idiv0>:
 8101200:	4770      	bx	lr
 8101202:	bf00      	nop

08101204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101204:	b480      	push	{r7}
 8101206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101208:	4b0b      	ldr	r3, [pc, #44]	; (8101238 <SystemInit+0x34>)
 810120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810120e:	4a0a      	ldr	r2, [pc, #40]	; (8101238 <SystemInit+0x34>)
 8101210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101218:	4b07      	ldr	r3, [pc, #28]	; (8101238 <SystemInit+0x34>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a06      	ldr	r2, [pc, #24]	; (8101238 <SystemInit+0x34>)
 810121e:	f043 0310 	orr.w	r3, r3, #16
 8101222:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101224:	4b04      	ldr	r3, [pc, #16]	; (8101238 <SystemInit+0x34>)
 8101226:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810122a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810122c:	bf00      	nop
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop
 8101238:	e000ed00 	.word	0xe000ed00

0810123c <CheckBMP280ChipID>:

int flag = 0;


uint8_t CheckBMP280ChipID()
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b082      	sub	sp, #8
 8101240:	af00      	add	r7, sp, #0
  uint8_t SerialData[3] = {(BMP280_REG_ID | 0x80), 0, 0};
 8101242:	4a19      	ldr	r2, [pc, #100]	; (81012a8 <CheckBMP280ChipID+0x6c>)
 8101244:	1d3b      	adds	r3, r7, #4
 8101246:	6812      	ldr	r2, [r2, #0]
 8101248:	4611      	mov	r1, r2
 810124a:	8019      	strh	r1, [r3, #0]
 810124c:	3302      	adds	r3, #2
 810124e:	0c12      	lsrs	r2, r2, #16
 8101250:	701a      	strb	r2, [r3, #0]
  volatile uint8_t aRxBuffer[3]= {0};
 8101252:	4b16      	ldr	r3, [pc, #88]	; (81012ac <CheckBMP280ChipID+0x70>)
 8101254:	881b      	ldrh	r3, [r3, #0]
 8101256:	803b      	strh	r3, [r7, #0]
 8101258:	2300      	movs	r3, #0
 810125a:	70bb      	strb	r3, [r7, #2]

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 810125c:	2200      	movs	r2, #0
 810125e:	2110      	movs	r1, #16
 8101260:	4813      	ldr	r0, [pc, #76]	; (81012b0 <CheckBMP280ChipID+0x74>)
 8101262:	f005 fc1b 	bl	8106a9c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8101266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810126a:	f002 facd 	bl	8103808 <HAL_Delay>
  if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 2) == HAL_OK)
 810126e:	463a      	mov	r2, r7
 8101270:	1d39      	adds	r1, r7, #4
 8101272:	2302      	movs	r3, #2
 8101274:	480f      	ldr	r0, [pc, #60]	; (81012b4 <CheckBMP280ChipID+0x78>)
 8101276:	f008 ff03 	bl	810a080 <HAL_SPI_TransmitReceive_DMA>
 810127a:	4603      	mov	r3, r0
 810127c:	2b00      	cmp	r3, #0
 810127e:	d10a      	bne.n	8101296 <CheckBMP280ChipID+0x5a>
  {
   while(flag == 1)
 8101280:	e005      	b.n	810128e <CheckBMP280ChipID+0x52>
    {
      if(aRxBuffer[1] != BMP280_CHIP_ID)
 8101282:	787b      	ldrb	r3, [r7, #1]
 8101284:	b2db      	uxtb	r3, r3
 8101286:	2b58      	cmp	r3, #88	; 0x58
 8101288:	d001      	beq.n	810128e <CheckBMP280ChipID+0x52>
      {
        return HAL_ERROR;
 810128a:	2301      	movs	r3, #1
 810128c:	e007      	b.n	810129e <CheckBMP280ChipID+0x62>
   while(flag == 1)
 810128e:	4b0a      	ldr	r3, [pc, #40]	; (81012b8 <CheckBMP280ChipID+0x7c>)
 8101290:	681b      	ldr	r3, [r3, #0]
 8101292:	2b01      	cmp	r3, #1
 8101294:	d0f5      	beq.n	8101282 <CheckBMP280ChipID+0x46>
      }
    }

  }

  flag = 0;
 8101296:	4b08      	ldr	r3, [pc, #32]	; (81012b8 <CheckBMP280ChipID+0x7c>)
 8101298:	2200      	movs	r2, #0
 810129a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 810129c:	2300      	movs	r3, #0

}
 810129e:	4618      	mov	r0, r3
 81012a0:	3708      	adds	r7, #8
 81012a2:	46bd      	mov	sp, r7
 81012a4:	bd80      	pop	{r7, pc}
 81012a6:	bf00      	nop
 81012a8:	0810d640 	.word	0x0810d640
 81012ac:	0810d644 	.word	0x0810d644
 81012b0:	58020000 	.word	0x58020000
 81012b4:	10000318 	.word	0x10000318
 81012b8:	100000a8 	.word	0x100000a8

081012bc <Read16Bit>:
{
  return HAL_OK;
}

uint16_t Read16Bit(uint8_t reg)
{
 81012bc:	b580      	push	{r7, lr}
 81012be:	b084      	sub	sp, #16
 81012c0:	af00      	add	r7, sp, #0
 81012c2:	4603      	mov	r3, r0
 81012c4:	71fb      	strb	r3, [r7, #7]
   uint16_t result;
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81012c6:	2200      	movs	r2, #0
 81012c8:	2110      	movs	r1, #16
 81012ca:	4815      	ldr	r0, [pc, #84]	; (8101320 <Read16Bit+0x64>)
 81012cc:	f005 fbe6 	bl	8106a9c <HAL_GPIO_WritePin>
   uint8_t SerialData[3] = {(reg|0x80), 0, 0};
 81012d0:	79fb      	ldrb	r3, [r7, #7]
 81012d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81012d6:	b2db      	uxtb	r3, r3
 81012d8:	723b      	strb	r3, [r7, #8]
 81012da:	2300      	movs	r3, #0
 81012dc:	727b      	strb	r3, [r7, #9]
 81012de:	2300      	movs	r3, #0
 81012e0:	72bb      	strb	r3, [r7, #10]
   static uint8_t aRxBuffer[3]= {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 3);
 81012e2:	f107 0108 	add.w	r1, r7, #8
 81012e6:	2303      	movs	r3, #3
 81012e8:	4a0e      	ldr	r2, [pc, #56]	; (8101324 <Read16Bit+0x68>)
 81012ea:	480f      	ldr	r0, [pc, #60]	; (8101328 <Read16Bit+0x6c>)
 81012ec:	f008 fec8 	bl	810a080 <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 81012f0:	e00c      	b.n	810130c <Read16Bit+0x50>
   {
     result = aRxBuffer[2] << 8 | aRxBuffer [1];
 81012f2:	4b0c      	ldr	r3, [pc, #48]	; (8101324 <Read16Bit+0x68>)
 81012f4:	789b      	ldrb	r3, [r3, #2]
 81012f6:	021b      	lsls	r3, r3, #8
 81012f8:	b21a      	sxth	r2, r3
 81012fa:	4b0a      	ldr	r3, [pc, #40]	; (8101324 <Read16Bit+0x68>)
 81012fc:	785b      	ldrb	r3, [r3, #1]
 81012fe:	b21b      	sxth	r3, r3
 8101300:	4313      	orrs	r3, r2
 8101302:	b21b      	sxth	r3, r3
 8101304:	81fb      	strh	r3, [r7, #14]
     flag = 0;
 8101306:	4b09      	ldr	r3, [pc, #36]	; (810132c <Read16Bit+0x70>)
 8101308:	2200      	movs	r2, #0
 810130a:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 810130c:	4b07      	ldr	r3, [pc, #28]	; (810132c <Read16Bit+0x70>)
 810130e:	681b      	ldr	r3, [r3, #0]
 8101310:	2b01      	cmp	r3, #1
 8101312:	d0ee      	beq.n	81012f2 <Read16Bit+0x36>

   }


   return result;
 8101314:	89fb      	ldrh	r3, [r7, #14]
}
 8101316:	4618      	mov	r0, r3
 8101318:	3710      	adds	r7, #16
 810131a:	46bd      	mov	sp, r7
 810131c:	bd80      	pop	{r7, pc}
 810131e:	bf00      	nop
 8101320:	58020000 	.word	0x58020000
 8101324:	100000ac 	.word	0x100000ac
 8101328:	10000318 	.word	0x10000318
 810132c:	100000a8 	.word	0x100000a8

08101330 <Read24Bit>:


uint32_t Read24Bit(uint8_t reg)
{
 8101330:	b580      	push	{r7, lr}
 8101332:	b084      	sub	sp, #16
 8101334:	af00      	add	r7, sp, #0
 8101336:	4603      	mov	r3, r0
 8101338:	71fb      	strb	r3, [r7, #7]
  uint32_t result;
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810133a:	2200      	movs	r2, #0
 810133c:	2110      	movs	r1, #16
 810133e:	4817      	ldr	r0, [pc, #92]	; (810139c <Read24Bit+0x6c>)
 8101340:	f005 fbac 	bl	8106a9c <HAL_GPIO_WritePin>
  uint8_t SerialData[4] = {(reg|0x80), 0, 0,0};
 8101344:	79fb      	ldrb	r3, [r7, #7]
 8101346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810134a:	b2db      	uxtb	r3, r3
 810134c:	723b      	strb	r3, [r7, #8]
 810134e:	2300      	movs	r3, #0
 8101350:	727b      	strb	r3, [r7, #9]
 8101352:	2300      	movs	r3, #0
 8101354:	72bb      	strb	r3, [r7, #10]
 8101356:	2300      	movs	r3, #0
 8101358:	72fb      	strb	r3, [r7, #11]
  static uint8_t aRxBuffer[4] = {0};
  HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData,  (uint8_t*)aRxBuffer, 4);
 810135a:	f107 0108 	add.w	r1, r7, #8
 810135e:	2304      	movs	r3, #4
 8101360:	4a0f      	ldr	r2, [pc, #60]	; (81013a0 <Read24Bit+0x70>)
 8101362:	4810      	ldr	r0, [pc, #64]	; (81013a4 <Read24Bit+0x74>)
 8101364:	f008 fe8c 	bl	810a080 <HAL_SPI_TransmitReceive_DMA>
  while(flag == 1)
 8101368:	e00f      	b.n	810138a <Read24Bit+0x5a>
     {
        result = aRxBuffer[1] << 16 | aRxBuffer[2] << 8 | aRxBuffer[3] >> 4;
 810136a:	4b0d      	ldr	r3, [pc, #52]	; (81013a0 <Read24Bit+0x70>)
 810136c:	785b      	ldrb	r3, [r3, #1]
 810136e:	041a      	lsls	r2, r3, #16
 8101370:	4b0b      	ldr	r3, [pc, #44]	; (81013a0 <Read24Bit+0x70>)
 8101372:	789b      	ldrb	r3, [r3, #2]
 8101374:	021b      	lsls	r3, r3, #8
 8101376:	4313      	orrs	r3, r2
 8101378:	4a09      	ldr	r2, [pc, #36]	; (81013a0 <Read24Bit+0x70>)
 810137a:	78d2      	ldrb	r2, [r2, #3]
 810137c:	0912      	lsrs	r2, r2, #4
 810137e:	b2d2      	uxtb	r2, r2
 8101380:	4313      	orrs	r3, r2
 8101382:	60fb      	str	r3, [r7, #12]
        flag = 0;
 8101384:	4b08      	ldr	r3, [pc, #32]	; (81013a8 <Read24Bit+0x78>)
 8101386:	2200      	movs	r2, #0
 8101388:	601a      	str	r2, [r3, #0]
  while(flag == 1)
 810138a:	4b07      	ldr	r3, [pc, #28]	; (81013a8 <Read24Bit+0x78>)
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	2b01      	cmp	r3, #1
 8101390:	d0eb      	beq.n	810136a <Read24Bit+0x3a>
     }


  return result;
 8101392:	68fb      	ldr	r3, [r7, #12]
}
 8101394:	4618      	mov	r0, r3
 8101396:	3710      	adds	r7, #16
 8101398:	46bd      	mov	sp, r7
 810139a:	bd80      	pop	{r7, pc}
 810139c:	58020000 	.word	0x58020000
 81013a0:	100000b0 	.word	0x100000b0
 81013a4:	10000318 	.word	0x10000318
 81013a8:	100000a8 	.word	0x100000a8

081013ac <ReadTemp>:

void ReadTemp(BMP280Handle* baro)
{
 81013ac:	b580      	push	{r7, lr}
 81013ae:	b086      	sub	sp, #24
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	6078      	str	r0, [r7, #4]
  int32_t var1, var2;

  int32_t adc_T = Read24Bit(BMP280_REG_TEMP_MSB);
 81013b4:	20fa      	movs	r0, #250	; 0xfa
 81013b6:	f7ff ffbb 	bl	8101330 <Read24Bit>
 81013ba:	4603      	mov	r3, r0
 81013bc:	617b      	str	r3, [r7, #20]
  adc_T >>= 4;
 81013be:	697b      	ldr	r3, [r7, #20]
 81013c0:	111b      	asrs	r3, r3, #4
 81013c2:	617b      	str	r3, [r7, #20]

  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013c4:	697b      	ldr	r3, [r7, #20]
 81013c6:	10da      	asrs	r2, r3, #3
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	8b1b      	ldrh	r3, [r3, #24]
 81013cc:	005b      	lsls	r3, r3, #1
 81013ce:	1ad3      	subs	r3, r2, r3
         ((int32_t)baro->comp_vals.dig_T2)) >> 11;
 81013d0:	687a      	ldr	r2, [r7, #4]
 81013d2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
  var1 = ((((adc_T>> 3) - ((int32_t)baro->comp_vals.dig_T1 <<1)))*
 81013d6:	fb02 f303 	mul.w	r3, r2, r3
 81013da:	12db      	asrs	r3, r3, #11
 81013dc:	613b      	str	r3, [r7, #16]

  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013de:	697b      	ldr	r3, [r7, #20]
 81013e0:	111b      	asrs	r3, r3, #4
 81013e2:	687a      	ldr	r2, [r7, #4]
 81013e4:	8b12      	ldrh	r2, [r2, #24]
 81013e6:	1a9b      	subs	r3, r3, r2
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013e8:	697a      	ldr	r2, [r7, #20]
 81013ea:	1112      	asrs	r2, r2, #4
 81013ec:	6879      	ldr	r1, [r7, #4]
 81013ee:	8b09      	ldrh	r1, [r1, #24]
 81013f0:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 81013f2:	fb02 f303 	mul.w	r3, r2, r3
             ((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1))) >>
 81013f6:	131b      	asrs	r3, r3, #12
            12) *
           ((int32_t)baro->comp_vals.dig_T3)) >>
 81013f8:	687a      	ldr	r2, [r7, #4]
 81013fa:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
            12) *
 81013fe:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)baro->comp_vals.dig_T1)) *
 8101402:	139b      	asrs	r3, r3, #14
 8101404:	60fb      	str	r3, [r7, #12]
          14;

  t_fine = var1 + var2;
 8101406:	693a      	ldr	r2, [r7, #16]
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	4413      	add	r3, r2
 810140c:	4a0d      	ldr	r2, [pc, #52]	; (8101444 <ReadTemp+0x98>)
 810140e:	6013      	str	r3, [r2, #0]

  float T = (t_fine * 5 + 128) >> 8;
 8101410:	4b0c      	ldr	r3, [pc, #48]	; (8101444 <ReadTemp+0x98>)
 8101412:	681a      	ldr	r2, [r3, #0]
 8101414:	4613      	mov	r3, r2
 8101416:	009b      	lsls	r3, r3, #2
 8101418:	4413      	add	r3, r2
 810141a:	3380      	adds	r3, #128	; 0x80
 810141c:	121b      	asrs	r3, r3, #8
 810141e:	ee07 3a90 	vmov	s15, r3
 8101422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101426:	edc7 7a02 	vstr	s15, [r7, #8]
  baro->temperature = T/100;
 810142a:	ed97 7a02 	vldr	s14, [r7, #8]
 810142e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8101448 <ReadTemp+0x9c>
 8101432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	edc3 7a00 	vstr	s15, [r3]

}
 810143c:	bf00      	nop
 810143e:	3718      	adds	r7, #24
 8101440:	46bd      	mov	sp, r7
 8101442:	bd80      	pop	{r7, pc}
 8101444:	100000cc 	.word	0x100000cc
 8101448:	42c80000 	.word	0x42c80000

0810144c <ReadPressure>:

void ReadPressure(BMP280Handle* baro)
{
 810144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101450:	b09c      	sub	sp, #112	; 0x70
 8101452:	af00      	add	r7, sp, #0
 8101454:	64f8      	str	r0, [r7, #76]	; 0x4c

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp(baro);
 8101456:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8101458:	f7ff ffa8 	bl	81013ac <ReadTemp>

  int32_t adc_P = Read24Bit(BMP280_REG_PRESS_MSB);
 810145c:	20f7      	movs	r0, #247	; 0xf7
 810145e:	f7ff ff67 	bl	8101330 <Read24Bit>
 8101462:	4603      	mov	r3, r0
 8101464:	66fb      	str	r3, [r7, #108]	; 0x6c
  adc_P >>=4;
 8101466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101468:	111b      	asrs	r3, r3, #4
 810146a:	66fb      	str	r3, [r7, #108]	; 0x6c

  var1 = ((int64_t)t_fine) - 128000;
 810146c:	4b6b      	ldr	r3, [pc, #428]	; (810161c <ReadPressure+0x1d0>)
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	461a      	mov	r2, r3
 8101472:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101476:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 810147a:	f143 35ff 	adc.w	r5, r3, #4294967295
 810147e:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
  var2 = var1 * var1 * (int64_t)baro->comp_vals.dig_P6;
 8101482:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101486:	fb03 f102 	mul.w	r1, r3, r2
 810148a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810148c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810148e:	fb03 f302 	mul.w	r3, r3, r2
 8101492:	18ca      	adds	r2, r1, r3
 8101494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101496:	fba3 4503 	umull	r4, r5, r3, r3
 810149a:	1953      	adds	r3, r2, r5
 810149c:	461d      	mov	r5, r3
 810149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014a0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 81014a4:	b21a      	sxth	r2, r3
 81014a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014aa:	fb02 f005 	mul.w	r0, r2, r5
 81014ae:	fb04 f103 	mul.w	r1, r4, r3
 81014b2:	4401      	add	r1, r0
 81014b4:	fba4 2302 	umull	r2, r3, r4, r2
 81014b8:	4419      	add	r1, r3
 81014ba:	460b      	mov	r3, r1
 81014bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 81014c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  var2 = var2 + ((var1 * (int64_t)baro->comp_vals.dig_P5) << 17);
 81014c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014c6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 81014ca:	b21a      	sxth	r2, r3
 81014cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 81014d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014d2:	fb03 f001 	mul.w	r0, r3, r1
 81014d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 81014d8:	fb02 f101 	mul.w	r1, r2, r1
 81014dc:	4408      	add	r0, r1
 81014de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81014e0:	fba1 2302 	umull	r2, r3, r1, r2
 81014e4:	18c1      	adds	r1, r0, r3
 81014e6:	460b      	mov	r3, r1
 81014e8:	f04f 0000 	mov.w	r0, #0
 81014ec:	f04f 0100 	mov.w	r1, #0
 81014f0:	0459      	lsls	r1, r3, #17
 81014f2:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 81014f6:	0450      	lsls	r0, r2, #17
 81014f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 81014fc:	eb12 0800 	adds.w	r8, r2, r0
 8101500:	eb43 0901 	adc.w	r9, r3, r1
 8101504:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
  var2 = var2 + (((int64_t)baro->comp_vals.dig_P4) << 35);
 8101508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810150a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 810150e:	b21a      	sxth	r2, r3
 8101510:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101514:	f04f 0000 	mov.w	r0, #0
 8101518:	f04f 0100 	mov.w	r1, #0
 810151c:	00d1      	lsls	r1, r2, #3
 810151e:	2000      	movs	r0, #0
 8101520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101524:	1814      	adds	r4, r2, r0
 8101526:	61bc      	str	r4, [r7, #24]
 8101528:	414b      	adcs	r3, r1
 810152a:	61fb      	str	r3, [r7, #28]
 810152c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8101530:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 8101534:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101538:	fb03 f102 	mul.w	r1, r3, r2
 810153c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 810153e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101540:	fb03 f302 	mul.w	r3, r3, r2
 8101544:	18ca      	adds	r2, r1, r3
 8101546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101548:	fba3 4503 	umull	r4, r5, r3, r3
 810154c:	1953      	adds	r3, r2, r5
 810154e:	461d      	mov	r5, r3
 8101550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101552:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8101556:	b21a      	sxth	r2, r3
 8101558:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810155c:	fb02 f005 	mul.w	r0, r2, r5
 8101560:	fb04 f103 	mul.w	r1, r4, r3
 8101564:	4401      	add	r1, r0
 8101566:	fba4 2302 	umull	r2, r3, r4, r2
 810156a:	4419      	add	r1, r3
 810156c:	460b      	mov	r3, r1
 810156e:	f04f 0800 	mov.w	r8, #0
 8101572:	f04f 0900 	mov.w	r9, #0
 8101576:	ea4f 2812 	mov.w	r8, r2, lsr #8
 810157a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 810157e:	ea4f 2923 	mov.w	r9, r3, asr #8
           ((var1 * (int64_t)baro->comp_vals.dig_P2) << 12);
 8101582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101584:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8101588:	b21a      	sxth	r2, r3
 810158a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810158e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8101590:	fb03 f001 	mul.w	r0, r3, r1
 8101594:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8101596:	fb02 f101 	mul.w	r1, r2, r1
 810159a:	1844      	adds	r4, r0, r1
 810159c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810159e:	fba1 0102 	umull	r0, r1, r1, r2
 81015a2:	1863      	adds	r3, r4, r1
 81015a4:	4619      	mov	r1, r3
 81015a6:	f04f 0200 	mov.w	r2, #0
 81015aa:	f04f 0300 	mov.w	r3, #0
 81015ae:	030b      	lsls	r3, r1, #12
 81015b0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 81015b4:	0302      	lsls	r2, r0, #12
  var1 = ((var1 * var1 * (int64_t)baro->comp_vals.dig_P3) >> 8) +
 81015b6:	eb18 0102 	adds.w	r1, r8, r2
 81015ba:	6139      	str	r1, [r7, #16]
 81015bc:	eb49 0303 	adc.w	r3, r9, r3
 81015c0:	617b      	str	r3, [r7, #20]
 81015c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 81015c6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
  var1 =
        (((((int64_t)1) << 47) + var1)) * ((int64_t)baro->comp_vals.dig_P1) >> 33;
 81015ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81015ce:	1c11      	adds	r1, r2, #0
 81015d0:	6439      	str	r1, [r7, #64]	; 0x40
 81015d2:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 81015d6:	647b      	str	r3, [r7, #68]	; 0x44
 81015d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015da:	8bdb      	ldrh	r3, [r3, #30]
 81015dc:	b29a      	uxth	r2, r3
 81015de:	f04f 0300 	mov.w	r3, #0
 81015e2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 81015e6:	4629      	mov	r1, r5
 81015e8:	fb02 f001 	mul.w	r0, r2, r1
 81015ec:	4621      	mov	r1, r4
 81015ee:	fb01 f103 	mul.w	r1, r1, r3
 81015f2:	4401      	add	r1, r0
 81015f4:	4620      	mov	r0, r4
 81015f6:	fba0 2302 	umull	r2, r3, r0, r2
 81015fa:	4419      	add	r1, r3
 81015fc:	460b      	mov	r3, r1
  var1 =
 81015fe:	f04f 0000 	mov.w	r0, #0
 8101602:	f04f 0100 	mov.w	r1, #0
 8101606:	1058      	asrs	r0, r3, #1
 8101608:	17d9      	asrs	r1, r3, #31
 810160a:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    if (var1 == 0) {
 810160e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8101612:	4313      	orrs	r3, r2
 8101614:	f000 80f5 	beq.w	8101802 <ReadPressure+0x3b6>
 8101618:	e004      	b.n	8101624 <ReadPressure+0x1d8>
 810161a:	bf00      	nop
 810161c:	100000cc 	.word	0x100000cc
 8101620:	43800000 	.word	0x43800000
        return; // avoid exception caused by division by zero
      }
    p = 1048576 - adc_P;
 8101624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101626:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 810162a:	461a      	mov	r2, r3
 810162c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8101630:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    p = (((p << 31) - var2) * 3125) / var1;
 8101634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101636:	105b      	asrs	r3, r3, #1
 8101638:	63fb      	str	r3, [r7, #60]	; 0x3c
 810163a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810163c:	07db      	lsls	r3, r3, #31
 810163e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8101644:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8101648:	4621      	mov	r1, r4
 810164a:	ebb1 0a02 	subs.w	sl, r1, r2
 810164e:	4629      	mov	r1, r5
 8101650:	eb61 0b03 	sbc.w	fp, r1, r3
 8101654:	4652      	mov	r2, sl
 8101656:	465b      	mov	r3, fp
 8101658:	1891      	adds	r1, r2, r2
 810165a:	60b9      	str	r1, [r7, #8]
 810165c:	415b      	adcs	r3, r3
 810165e:	60fb      	str	r3, [r7, #12]
 8101660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101664:	eb12 020a 	adds.w	r2, r2, sl
 8101668:	eb43 030b 	adc.w	r3, r3, fp
 810166c:	f04f 0000 	mov.w	r0, #0
 8101670:	f04f 0100 	mov.w	r1, #0
 8101674:	0199      	lsls	r1, r3, #6
 8101676:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 810167a:	0190      	lsls	r0, r2, #6
 810167c:	1812      	adds	r2, r2, r0
 810167e:	eb41 0303 	adc.w	r3, r1, r3
 8101682:	f04f 0000 	mov.w	r0, #0
 8101686:	f04f 0100 	mov.w	r1, #0
 810168a:	0099      	lsls	r1, r3, #2
 810168c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8101690:	0090      	lsls	r0, r2, #2
 8101692:	4602      	mov	r2, r0
 8101694:	460b      	mov	r3, r1
 8101696:	eb12 020a 	adds.w	r2, r2, sl
 810169a:	eb43 030b 	adc.w	r3, r3, fp
 810169e:	f04f 0000 	mov.w	r0, #0
 81016a2:	f04f 0100 	mov.w	r1, #0
 81016a6:	0099      	lsls	r1, r3, #2
 81016a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 81016ac:	0090      	lsls	r0, r2, #2
 81016ae:	4602      	mov	r2, r0
 81016b0:	460b      	mov	r3, r1
 81016b2:	eb12 010a 	adds.w	r1, r2, sl
 81016b6:	6339      	str	r1, [r7, #48]	; 0x30
 81016b8:	eb43 030b 	adc.w	r3, r3, fp
 81016bc:	637b      	str	r3, [r7, #52]	; 0x34
 81016be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 81016c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 81016c6:	f7ff fbd1 	bl	8100e6c <__aeabi_ldivmod>
 81016ca:	4602      	mov	r2, r0
 81016cc:	460b      	mov	r3, r1
 81016ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    var1 = (((int64_t)baro->comp_vals.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 81016d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016d4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 81016d8:	b218      	sxth	r0, r3
 81016da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 81016de:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 81016e2:	f04f 0200 	mov.w	r2, #0
 81016e6:	f04f 0300 	mov.w	r3, #0
 81016ea:	0b62      	lsrs	r2, r4, #13
 81016ec:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 81016f0:	136b      	asrs	r3, r5, #13
 81016f2:	fb02 f501 	mul.w	r5, r2, r1
 81016f6:	fb00 f403 	mul.w	r4, r0, r3
 81016fa:	442c      	add	r4, r5
 81016fc:	fba0 0102 	umull	r0, r1, r0, r2
 8101700:	1863      	adds	r3, r4, r1
 8101702:	4619      	mov	r1, r3
 8101704:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8101708:	f04f 0200 	mov.w	r2, #0
 810170c:	f04f 0300 	mov.w	r3, #0
 8101710:	0b62      	lsrs	r2, r4, #13
 8101712:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8101716:	136b      	asrs	r3, r5, #13
 8101718:	fb02 f501 	mul.w	r5, r2, r1
 810171c:	fb00 f403 	mul.w	r4, r0, r3
 8101720:	442c      	add	r4, r5
 8101722:	fba0 0102 	umull	r0, r1, r0, r2
 8101726:	1863      	adds	r3, r4, r1
 8101728:	4619      	mov	r1, r3
 810172a:	f04f 0200 	mov.w	r2, #0
 810172e:	f04f 0300 	mov.w	r3, #0
 8101732:	0e42      	lsrs	r2, r0, #25
 8101734:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8101738:	164b      	asrs	r3, r1, #25
 810173a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    var2 = (((int64_t)baro->comp_vals.dig_P8) * p) >> 19;
 810173e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101740:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8101744:	b21a      	sxth	r2, r3
 8101746:	ea4f 73e2 	mov.w	r3, r2, asr #31
 810174a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810174c:	fb03 f001 	mul.w	r0, r3, r1
 8101750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8101752:	fb02 f101 	mul.w	r1, r2, r1
 8101756:	1844      	adds	r4, r0, r1
 8101758:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810175a:	fba1 0102 	umull	r0, r1, r1, r2
 810175e:	1863      	adds	r3, r4, r1
 8101760:	4619      	mov	r1, r3
 8101762:	f04f 0200 	mov.w	r2, #0
 8101766:	f04f 0300 	mov.w	r3, #0
 810176a:	0cc2      	lsrs	r2, r0, #19
 810176c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8101770:	14cb      	asrs	r3, r1, #19
 8101772:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

    p = ((p + var1 + var2) >> 8) + (((int64_t)baro->comp_vals.dig_P7) << 4);
 8101776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 810177a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 810177e:	1884      	adds	r4, r0, r2
 8101780:	62bc      	str	r4, [r7, #40]	; 0x28
 8101782:	eb41 0303 	adc.w	r3, r1, r3
 8101786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101788:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 810178c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8101790:	4621      	mov	r1, r4
 8101792:	1889      	adds	r1, r1, r2
 8101794:	6239      	str	r1, [r7, #32]
 8101796:	4629      	mov	r1, r5
 8101798:	eb43 0101 	adc.w	r1, r3, r1
 810179c:	6279      	str	r1, [r7, #36]	; 0x24
 810179e:	f04f 0000 	mov.w	r0, #0
 81017a2:	f04f 0100 	mov.w	r1, #0
 81017a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 81017aa:	4623      	mov	r3, r4
 81017ac:	0a18      	lsrs	r0, r3, #8
 81017ae:	462b      	mov	r3, r5
 81017b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 81017b4:	462b      	mov	r3, r5
 81017b6:	1219      	asrs	r1, r3, #8
 81017b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017ba:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 81017be:	b21c      	sxth	r4, r3
 81017c0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 81017c4:	f04f 0200 	mov.w	r2, #0
 81017c8:	f04f 0300 	mov.w	r3, #0
 81017cc:	012b      	lsls	r3, r5, #4
 81017ce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 81017d2:	0122      	lsls	r2, r4, #4
 81017d4:	1884      	adds	r4, r0, r2
 81017d6:	603c      	str	r4, [r7, #0]
 81017d8:	eb41 0303 	adc.w	r3, r1, r3
 81017dc:	607b      	str	r3, [r7, #4]
 81017de:	e9d7 3400 	ldrd	r3, r4, [r7]
 81017e2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    baro->pressure = (float) p/256;
 81017e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 81017ea:	f7ff fb01 	bl	8100df0 <__aeabi_l2f>
 81017ee:	ee06 0a90 	vmov	s13, r0
 81017f2:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8101620 <ReadPressure+0x1d4>
 81017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81017fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81017fc:	edc3 7a01 	vstr	s15, [r3, #4]
 8101800:	e000      	b.n	8101804 <ReadPressure+0x3b8>
        return; // avoid exception caused by division by zero
 8101802:	bf00      	nop

}
 8101804:	3770      	adds	r7, #112	; 0x70
 8101806:	46bd      	mov	sp, r7
 8101808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810180c:	0000      	movs	r0, r0
	...

08101810 <ReadAltitude>:

void ReadAltitude(BMP280Handle* baro)
{
 8101810:	b580      	push	{r7, lr}
 8101812:	b084      	sub	sp, #16
 8101814:	af00      	add	r7, sp, #0
 8101816:	6078      	str	r0, [r7, #4]
  float altitude = 0;
 8101818:	f04f 0300 	mov.w	r3, #0
 810181c:	60fb      	str	r3, [r7, #12]
  float pressure = baro->pressure;
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	685b      	ldr	r3, [r3, #4]
 8101822:	60bb      	str	r3, [r7, #8]
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure/ SEA_LEVEL_PRESSURE), (1/5.255)));
 8101824:	edd7 7a02 	vldr	s15, [r7, #8]
 8101828:	ed9f 7a25 	vldr	s14, [pc, #148]	; 81018c0 <ReadAltitude+0xb0>
 810182c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101830:	ee16 0a90 	vmov	r0, s13
 8101834:	f7fe feb4 	bl	81005a0 <__aeabi_f2d>
 8101838:	4602      	mov	r2, r0
 810183a:	460b      	mov	r3, r1
 810183c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 81018b0 <ReadAltitude+0xa0>
 8101840:	ec43 2b10 	vmov	d0, r2, r3
 8101844:	f00a ff3a 	bl	810c6bc <pow>
 8101848:	ec53 2b10 	vmov	r2, r3, d0
 810184c:	f04f 0000 	mov.w	r0, #0
 8101850:	491c      	ldr	r1, [pc, #112]	; (81018c4 <ReadAltitude+0xb4>)
 8101852:	f7fe fd45 	bl	81002e0 <__aeabi_dsub>
 8101856:	4602      	mov	r2, r0
 8101858:	460b      	mov	r3, r1
 810185a:	4610      	mov	r0, r2
 810185c:	4619      	mov	r1, r3
 810185e:	a316      	add	r3, pc, #88	; (adr r3, 81018b8 <ReadAltitude+0xa8>)
 8101860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101864:	f7fe fef4 	bl	8100650 <__aeabi_dmul>
 8101868:	4602      	mov	r2, r0
 810186a:	460b      	mov	r3, r1
 810186c:	4610      	mov	r0, r2
 810186e:	4619      	mov	r1, r3
 8101870:	f7ff f99e 	bl	8100bb0 <__aeabi_d2f>
 8101874:	4603      	mov	r3, r0
 8101876:	60fb      	str	r3, [r7, #12]

  if((altitude <= MIN_ALTITUDE) || altitude >= MAX_ALTITUDE)
 8101878:	edd7 7a03 	vldr	s15, [r7, #12]
 810187c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 81018c8 <ReadAltitude+0xb8>
 8101880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101888:	d90c      	bls.n	81018a4 <ReadAltitude+0x94>
 810188a:	edd7 7a03 	vldr	s15, [r7, #12]
 810188e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 81018cc <ReadAltitude+0xbc>
 8101892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810189a:	da03      	bge.n	81018a4 <ReadAltitude+0x94>
  {
    return;
  }

  baro->altitude = altitude;
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	68fa      	ldr	r2, [r7, #12]
 81018a0:	609a      	str	r2, [r3, #8]
 81018a2:	e000      	b.n	81018a6 <ReadAltitude+0x96>
    return;
 81018a4:	bf00      	nop

}
 81018a6:	3710      	adds	r7, #16
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}
 81018ac:	f3af 8000 	nop.w
 81018b0:	ccd9456c 	.word	0xccd9456c
 81018b4:	3fc85b95 	.word	0x3fc85b95
 81018b8:	00000000 	.word	0x00000000
 81018bc:	40e5a540 	.word	0x40e5a540
 81018c0:	47c5e680 	.word	0x47c5e680
 81018c4:	3ff00000 	.word	0x3ff00000
 81018c8:	c3fa0000 	.word	0xc3fa0000
 81018cc:	460ca000 	.word	0x460ca000

081018d0 <ReadCalibCoefficients>:



void ReadCalibCoefficients(BMP280Handle* baro)
{
 81018d0:	b580      	push	{r7, lr}
 81018d2:	b082      	sub	sp, #8
 81018d4:	af00      	add	r7, sp, #0
 81018d6:	6078      	str	r0, [r7, #4]
  baro->comp_vals.dig_T1 = Read16Bit(dig_T1);
 81018d8:	2088      	movs	r0, #136	; 0x88
 81018da:	f7ff fcef 	bl	81012bc <Read16Bit>
 81018de:	4603      	mov	r3, r0
 81018e0:	461a      	mov	r2, r3
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	831a      	strh	r2, [r3, #24]
  baro->comp_vals.dig_T2 = Read16Bit(dig_T2);
 81018e6:	208a      	movs	r0, #138	; 0x8a
 81018e8:	f7ff fce8 	bl	81012bc <Read16Bit>
 81018ec:	4603      	mov	r3, r0
 81018ee:	b21a      	sxth	r2, r3
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	835a      	strh	r2, [r3, #26]
  baro->comp_vals.dig_T3 = Read16Bit(dig_T3);
 81018f4:	208c      	movs	r0, #140	; 0x8c
 81018f6:	f7ff fce1 	bl	81012bc <Read16Bit>
 81018fa:	4603      	mov	r3, r0
 81018fc:	b21a      	sxth	r2, r3
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	839a      	strh	r2, [r3, #28]
  baro->comp_vals.dig_P1 = Read16Bit(dig_P1);
 8101902:	208e      	movs	r0, #142	; 0x8e
 8101904:	f7ff fcda 	bl	81012bc <Read16Bit>
 8101908:	4603      	mov	r3, r0
 810190a:	461a      	mov	r2, r3
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	83da      	strh	r2, [r3, #30]
  baro->comp_vals.dig_P2 = Read16Bit(dig_P2);
 8101910:	2090      	movs	r0, #144	; 0x90
 8101912:	f7ff fcd3 	bl	81012bc <Read16Bit>
 8101916:	4603      	mov	r3, r0
 8101918:	b21a      	sxth	r2, r3
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	841a      	strh	r2, [r3, #32]
  baro->comp_vals.dig_P3 = Read16Bit(dig_P3);
 810191e:	2092      	movs	r0, #146	; 0x92
 8101920:	f7ff fccc 	bl	81012bc <Read16Bit>
 8101924:	4603      	mov	r3, r0
 8101926:	b21a      	sxth	r2, r3
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	845a      	strh	r2, [r3, #34]	; 0x22
  baro->comp_vals.dig_P4 = Read16Bit(dig_P4);
 810192c:	2094      	movs	r0, #148	; 0x94
 810192e:	f7ff fcc5 	bl	81012bc <Read16Bit>
 8101932:	4603      	mov	r3, r0
 8101934:	b21a      	sxth	r2, r3
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	849a      	strh	r2, [r3, #36]	; 0x24
  baro->comp_vals.dig_P5 = Read16Bit(dig_P5);
 810193a:	2096      	movs	r0, #150	; 0x96
 810193c:	f7ff fcbe 	bl	81012bc <Read16Bit>
 8101940:	4603      	mov	r3, r0
 8101942:	b21a      	sxth	r2, r3
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	84da      	strh	r2, [r3, #38]	; 0x26
  baro->comp_vals.dig_P6 = Read16Bit(dig_P6);
 8101948:	2098      	movs	r0, #152	; 0x98
 810194a:	f7ff fcb7 	bl	81012bc <Read16Bit>
 810194e:	4603      	mov	r3, r0
 8101950:	b21a      	sxth	r2, r3
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	851a      	strh	r2, [r3, #40]	; 0x28
  baro->comp_vals.dig_P7 = Read16Bit(dig_P7);
 8101956:	209a      	movs	r0, #154	; 0x9a
 8101958:	f7ff fcb0 	bl	81012bc <Read16Bit>
 810195c:	4603      	mov	r3, r0
 810195e:	b21a      	sxth	r2, r3
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	855a      	strh	r2, [r3, #42]	; 0x2a
  baro->comp_vals.dig_P8 = Read16Bit(dig_P8);
 8101964:	209c      	movs	r0, #156	; 0x9c
 8101966:	f7ff fca9 	bl	81012bc <Read16Bit>
 810196a:	4603      	mov	r3, r0
 810196c:	b21a      	sxth	r2, r3
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	859a      	strh	r2, [r3, #44]	; 0x2c
  baro->comp_vals.dig_P9 = Read16Bit(dig_P9);
 8101972:	209e      	movs	r0, #158	; 0x9e
 8101974:	f7ff fca2 	bl	81012bc <Read16Bit>
 8101978:	4603      	mov	r3, r0
 810197a:	b21a      	sxth	r2, r3
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	85da      	strh	r2, [r3, #46]	; 0x2e

}
 8101980:	bf00      	nop
 8101982:	3708      	adds	r7, #8
 8101984:	46bd      	mov	sp, r7
 8101986:	bd80      	pop	{r7, pc}

08101988 <setConfig>:
void WriteRegister(uint8_t reg, uint8_t data)
{

}
uint8_t setConfig(BMP280Handle* baro)
{
 8101988:	b580      	push	{r7, lr}
 810198a:	b084      	sub	sp, #16
 810198c:	af00      	add	r7, sp, #0
 810198e:	6078      	str	r0, [r7, #4]


    // Ultra High resolution 26.3 Hz
   baro->config.mode = NORMAL;
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	2203      	movs	r2, #3
 8101994:	749a      	strb	r2, [r3, #18]
   baro->config.pressure_oversampling =  X16; // X16;
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	2205      	movs	r2, #5
 810199a:	755a      	strb	r2, [r3, #21]
   baro->config.temp_oversampling =  X2; //X2;
 810199c:	687b      	ldr	r3, [r7, #4]
 810199e:	2202      	movs	r2, #2
 81019a0:	759a      	strb	r2, [r3, #22]

   uint8_t SerialData[2] = {0};
 81019a2:	2300      	movs	r3, #0
 81019a4:	81bb      	strh	r3, [r7, #12]
   uint8_t aRxBuffer[3]= {0};
 81019a6:	4b3c      	ldr	r3, [pc, #240]	; (8101a98 <setConfig+0x110>)
 81019a8:	881b      	ldrh	r3, [r3, #0]
 81019aa:	813b      	strh	r3, [r7, #8]
 81019ac:	2300      	movs	r3, #0
 81019ae:	72bb      	strb	r3, [r7, #10]
   SerialData[0] = BMP280_REG_CTRL_MEAS & ~0x80;
 81019b0:	2374      	movs	r3, #116	; 0x74
 81019b2:	733b      	strb	r3, [r7, #12]
   SerialData[1] = baro->config.temp_oversampling << 5 | baro->config.pressure_oversampling << 2 | baro->config.mode ;
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	7d9b      	ldrb	r3, [r3, #22]
 81019b8:	015b      	lsls	r3, r3, #5
 81019ba:	b25a      	sxtb	r2, r3
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	7d5b      	ldrb	r3, [r3, #21]
 81019c0:	009b      	lsls	r3, r3, #2
 81019c2:	b25b      	sxtb	r3, r3
 81019c4:	4313      	orrs	r3, r2
 81019c6:	b25a      	sxtb	r2, r3
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	7c9b      	ldrb	r3, [r3, #18]
 81019cc:	b25b      	sxtb	r3, r3
 81019ce:	4313      	orrs	r3, r2
 81019d0:	b25b      	sxtb	r3, r3
 81019d2:	b2db      	uxtb	r3, r3
 81019d4:	737b      	strb	r3, [r7, #13]
   //SerialData[1] = 0x27;

   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 81019d6:	2200      	movs	r2, #0
 81019d8:	2110      	movs	r1, #16
 81019da:	4830      	ldr	r0, [pc, #192]	; (8101a9c <setConfig+0x114>)
 81019dc:	f005 f85e 	bl	8106a9c <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 81019e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81019e4:	f001 ff10 	bl	8103808 <HAL_Delay>

   HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 81019e8:	f107 0208 	add.w	r2, r7, #8
 81019ec:	f107 010c 	add.w	r1, r7, #12
 81019f0:	2303      	movs	r3, #3
 81019f2:	482b      	ldr	r0, [pc, #172]	; (8101aa0 <setConfig+0x118>)
 81019f4:	f008 fb44 	bl	810a080 <HAL_SPI_TransmitReceive_DMA>

   while(flag == 1)
 81019f8:	e010      	b.n	8101a1c <setConfig+0x94>
   {
        memset(SerialData, 0, sizeof(SerialData));
 81019fa:	f107 030c 	add.w	r3, r7, #12
 81019fe:	2202      	movs	r2, #2
 8101a00:	2100      	movs	r1, #0
 8101a02:	4618      	mov	r0, r3
 8101a04:	f00a fe52 	bl	810c6ac <memset>
        memset(aRxBuffer, 0, sizeof(aRxBuffer));
 8101a08:	f107 0308 	add.w	r3, r7, #8
 8101a0c:	2203      	movs	r2, #3
 8101a0e:	2100      	movs	r1, #0
 8101a10:	4618      	mov	r0, r3
 8101a12:	f00a fe4b 	bl	810c6ac <memset>
        flag  = 0;
 8101a16:	4b23      	ldr	r3, [pc, #140]	; (8101aa4 <setConfig+0x11c>)
 8101a18:	2200      	movs	r2, #0
 8101a1a:	601a      	str	r2, [r3, #0]
   while(flag == 1)
 8101a1c:	4b21      	ldr	r3, [pc, #132]	; (8101aa4 <setConfig+0x11c>)
 8101a1e:	681b      	ldr	r3, [r3, #0]
 8101a20:	2b01      	cmp	r3, #1
 8101a22:	d0ea      	beq.n	81019fa <setConfig+0x72>
   }


       baro->config.IIR_Filter = FILTER_OFF;
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	2200      	movs	r2, #0
 8101a28:	74da      	strb	r2, [r3, #19]
       baro->config.standby = STANDBY_0_5;
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	2200      	movs	r2, #0
 8101a2e:	751a      	strb	r2, [r3, #20]

       SerialData[0] = BMP280_REG_CONFIG & ~0x80;
 8101a30:	2375      	movs	r3, #117	; 0x75
 8101a32:	733b      	strb	r3, [r7, #12]
       SerialData[1] = baro->config.standby << 5 | baro->config.IIR_Filter ;
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	7d1b      	ldrb	r3, [r3, #20]
 8101a38:	015b      	lsls	r3, r3, #5
 8101a3a:	b25a      	sxtb	r2, r3
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	7cdb      	ldrb	r3, [r3, #19]
 8101a40:	b25b      	sxtb	r3, r3
 8101a42:	4313      	orrs	r3, r2
 8101a44:	b25b      	sxtb	r3, r3
 8101a46:	b2db      	uxtb	r3, r3
 8101a48:	737b      	strb	r3, [r7, #13]
       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	2110      	movs	r1, #16
 8101a4e:	4813      	ldr	r0, [pc, #76]	; (8101a9c <setConfig+0x114>)
 8101a50:	f005 f824 	bl	8106a9c <HAL_GPIO_WritePin>

       uint8_t res = HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 3);
 8101a54:	f107 0208 	add.w	r2, r7, #8
 8101a58:	f107 010c 	add.w	r1, r7, #12
 8101a5c:	2303      	movs	r3, #3
 8101a5e:	4810      	ldr	r0, [pc, #64]	; (8101aa0 <setConfig+0x118>)
 8101a60:	f008 fb0e 	bl	810a080 <HAL_SPI_TransmitReceive_DMA>
 8101a64:	4603      	mov	r3, r0
 8101a66:	73fb      	strb	r3, [r7, #15]

       while(flag == 1)
 8101a68:	bf00      	nop
 8101a6a:	4b0e      	ldr	r3, [pc, #56]	; (8101aa4 <setConfig+0x11c>)
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	2b01      	cmp	r3, #1
 8101a70:	d10c      	bne.n	8101a8c <setConfig+0x104>
       {
          if(res == HAL_OK)
 8101a72:	7bfb      	ldrb	r3, [r7, #15]
 8101a74:	2b00      	cmp	r3, #0
 8101a76:	d104      	bne.n	8101a82 <setConfig+0xfa>
          {
            flag = 0;
 8101a78:	4b0a      	ldr	r3, [pc, #40]	; (8101aa4 <setConfig+0x11c>)
 8101a7a:	2200      	movs	r2, #0
 8101a7c:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8101a7e:	2300      	movs	r3, #0
 8101a80:	e005      	b.n	8101a8e <setConfig+0x106>
          }

          else
          {
            flag = 0;
 8101a82:	4b08      	ldr	r3, [pc, #32]	; (8101aa4 <setConfig+0x11c>)
 8101a84:	2200      	movs	r2, #0
 8101a86:	601a      	str	r2, [r3, #0]
              return HAL_ERROR;
 8101a88:	2301      	movs	r3, #1
 8101a8a:	e000      	b.n	8101a8e <setConfig+0x106>
          }

       }


       return HAL_OK;
 8101a8c:	2300      	movs	r3, #0


}
 8101a8e:	4618      	mov	r0, r3
 8101a90:	3710      	adds	r7, #16
 8101a92:	46bd      	mov	sp, r7
 8101a94:	bd80      	pop	{r7, pc}
 8101a96:	bf00      	nop
 8101a98:	0810d644 	.word	0x0810d644
 8101a9c:	58020000 	.word	0x58020000
 8101aa0:	10000318 	.word	0x10000318
 8101aa4:	100000a8 	.word	0x100000a8

08101aa8 <HAL_SPI_TxRxCpltCallback>:

void  HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8101aa8:	b580      	push	{r7, lr}
 8101aaa:	b082      	sub	sp, #8
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	6078      	str	r0, [r7, #4]
    if(hspi->Instance == SPI1)
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	4a07      	ldr	r2, [pc, #28]	; (8101ad4 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8101ab6:	4293      	cmp	r3, r2
 8101ab8:	d107      	bne.n	8101aca <HAL_SPI_TxRxCpltCallback+0x22>
    {
      flag = 1;
 8101aba:	4b07      	ldr	r3, [pc, #28]	; (8101ad8 <HAL_SPI_TxRxCpltCallback+0x30>)
 8101abc:	2201      	movs	r2, #1
 8101abe:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8101ac0:	2201      	movs	r2, #1
 8101ac2:	2110      	movs	r1, #16
 8101ac4:	4805      	ldr	r0, [pc, #20]	; (8101adc <HAL_SPI_TxRxCpltCallback+0x34>)
 8101ac6:	f004 ffe9 	bl	8106a9c <HAL_GPIO_WritePin>
    }
}
 8101aca:	bf00      	nop
 8101acc:	3708      	adds	r7, #8
 8101ace:	46bd      	mov	sp, r7
 8101ad0:	bd80      	pop	{r7, pc}
 8101ad2:	bf00      	nop
 8101ad4:	40013000 	.word	0x40013000
 8101ad8:	100000a8 	.word	0x100000a8
 8101adc:	58020000 	.word	0x58020000

08101ae0 <ResetBMP280>:
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);

}

uint8_t ResetBMP280(void)
{
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	b082      	sub	sp, #8
 8101ae4:	af00      	add	r7, sp, #0
   uint8_t SerialData[2] = {(BMP280_REG_RESET & ~0x80), BMP280_RESET_VALUE}; // Register address, Data,
 8101ae6:	f24b 6360 	movw	r3, #46688	; 0xb660
 8101aea:	80bb      	strh	r3, [r7, #4]
   static uint8_t aRxBuffer[3]= {0};
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8101aec:	2200      	movs	r2, #0
 8101aee:	2110      	movs	r1, #16
 8101af0:	4809      	ldr	r0, [pc, #36]	; (8101b18 <ResetBMP280+0x38>)
 8101af2:	f004 ffd3 	bl	8106a9c <HAL_GPIO_WritePin>

   if(HAL_SPI_TransmitReceive_DMA(&hspi1, SerialData, (uint8_t*)aRxBuffer, 2) == HAL_OK)
 8101af6:	1d39      	adds	r1, r7, #4
 8101af8:	2302      	movs	r3, #2
 8101afa:	4a08      	ldr	r2, [pc, #32]	; (8101b1c <ResetBMP280+0x3c>)
 8101afc:	4808      	ldr	r0, [pc, #32]	; (8101b20 <ResetBMP280+0x40>)
 8101afe:	f008 fabf 	bl	810a080 <HAL_SPI_TransmitReceive_DMA>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d101      	bne.n	8101b0c <ResetBMP280+0x2c>
   {
     return HAL_OK;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	e000      	b.n	8101b0e <ResetBMP280+0x2e>
//     return HAL_OK;
//   }

   else
   {
     return HAL_ERROR;
 8101b0c:	2301      	movs	r3, #1
   }



}
 8101b0e:	4618      	mov	r0, r3
 8101b10:	3708      	adds	r7, #8
 8101b12:	46bd      	mov	sp, r7
 8101b14:	bd80      	pop	{r7, pc}
 8101b16:	bf00      	nop
 8101b18:	58020000 	.word	0x58020000
 8101b1c:	100000b4 	.word	0x100000b4
 8101b20:	10000318 	.word	0x10000318

08101b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101b24:	b580      	push	{r7, lr}
 8101b26:	b082      	sub	sp, #8
 8101b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101b2a:	4b29      	ldr	r3, [pc, #164]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b30:	4a27      	ldr	r2, [pc, #156]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b32:	f043 0301 	orr.w	r3, r3, #1
 8101b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b3a:	4b25      	ldr	r3, [pc, #148]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b40:	f003 0301 	and.w	r3, r3, #1
 8101b44:	607b      	str	r3, [r7, #4]
 8101b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b48:	4b21      	ldr	r3, [pc, #132]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b4e:	4a20      	ldr	r2, [pc, #128]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b50:	f043 0302 	orr.w	r3, r3, #2
 8101b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101b58:	4b1d      	ldr	r3, [pc, #116]	; (8101bd0 <MX_DMA_Init+0xac>)
 8101b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b5e:	f003 0302 	and.w	r3, r3, #2
 8101b62:	603b      	str	r3, [r7, #0]
 8101b64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b66:	2200      	movs	r2, #0
 8101b68:	2100      	movs	r1, #0
 8101b6a:	200b      	movs	r0, #11
 8101b6c:	f001 ff4b 	bl	8103a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101b70:	200b      	movs	r0, #11
 8101b72:	f001 ff62 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101b76:	2200      	movs	r2, #0
 8101b78:	2100      	movs	r1, #0
 8101b7a:	200c      	movs	r0, #12
 8101b7c:	f001 ff43 	bl	8103a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101b80:	200c      	movs	r0, #12
 8101b82:	f001 ff5a 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101b86:	2200      	movs	r2, #0
 8101b88:	2100      	movs	r1, #0
 8101b8a:	200d      	movs	r0, #13
 8101b8c:	f001 ff3b 	bl	8103a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101b90:	200d      	movs	r0, #13
 8101b92:	f001 ff52 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101b96:	2200      	movs	r2, #0
 8101b98:	2100      	movs	r1, #0
 8101b9a:	200e      	movs	r0, #14
 8101b9c:	f001 ff33 	bl	8103a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101ba0:	200e      	movs	r0, #14
 8101ba2:	f001 ff4a 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101ba6:	2200      	movs	r2, #0
 8101ba8:	2100      	movs	r1, #0
 8101baa:	202f      	movs	r0, #47	; 0x2f
 8101bac:	f001 ff2b 	bl	8103a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101bb0:	202f      	movs	r0, #47	; 0x2f
 8101bb2:	f001 ff42 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101bb6:	2200      	movs	r2, #0
 8101bb8:	2100      	movs	r1, #0
 8101bba:	2038      	movs	r0, #56	; 0x38
 8101bbc:	f001 ff23 	bl	8103a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101bc0:	2038      	movs	r0, #56	; 0x38
 8101bc2:	f001 ff3a 	bl	8103a3a <HAL_NVIC_EnableIRQ>

}
 8101bc6:	bf00      	nop
 8101bc8:	3708      	adds	r7, #8
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	bd80      	pop	{r7, pc}
 8101bce:	bf00      	nop
 8101bd0:	58024400 	.word	0x58024400

08101bd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b088      	sub	sp, #32
 8101bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bda:	f107 030c 	add.w	r3, r7, #12
 8101bde:	2200      	movs	r2, #0
 8101be0:	601a      	str	r2, [r3, #0]
 8101be2:	605a      	str	r2, [r3, #4]
 8101be4:	609a      	str	r2, [r3, #8]
 8101be6:	60da      	str	r2, [r3, #12]
 8101be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bea:	4b22      	ldr	r3, [pc, #136]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf0:	4a20      	ldr	r2, [pc, #128]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101bf2:	f043 0301 	orr.w	r3, r3, #1
 8101bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bfa:	4b1e      	ldr	r3, [pc, #120]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c00:	f003 0301 	and.w	r3, r3, #1
 8101c04:	60bb      	str	r3, [r7, #8]
 8101c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c08:	4b1a      	ldr	r3, [pc, #104]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c0e:	4a19      	ldr	r2, [pc, #100]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c10:	f043 0308 	orr.w	r3, r3, #8
 8101c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c18:	4b16      	ldr	r3, [pc, #88]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c1e:	f003 0308 	and.w	r3, r3, #8
 8101c22:	607b      	str	r3, [r7, #4]
 8101c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c26:	4b13      	ldr	r3, [pc, #76]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c2c:	4a11      	ldr	r2, [pc, #68]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c2e:	f043 0302 	orr.w	r3, r3, #2
 8101c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c36:	4b0f      	ldr	r3, [pc, #60]	; (8101c74 <MX_GPIO_Init+0xa0>)
 8101c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c3c:	f003 0302 	and.w	r3, r3, #2
 8101c40:	603b      	str	r3, [r7, #0]
 8101c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101c44:	2200      	movs	r2, #0
 8101c46:	2110      	movs	r1, #16
 8101c48:	480b      	ldr	r0, [pc, #44]	; (8101c78 <MX_GPIO_Init+0xa4>)
 8101c4a:	f004 ff27 	bl	8106a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c4e:	2310      	movs	r3, #16
 8101c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101c52:	2301      	movs	r3, #1
 8101c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c56:	2300      	movs	r3, #0
 8101c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c5a:	2300      	movs	r3, #0
 8101c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c5e:	f107 030c 	add.w	r3, r7, #12
 8101c62:	4619      	mov	r1, r3
 8101c64:	4804      	ldr	r0, [pc, #16]	; (8101c78 <MX_GPIO_Init+0xa4>)
 8101c66:	f004 fd69 	bl	810673c <HAL_GPIO_Init>

}
 8101c6a:	bf00      	nop
 8101c6c:	3720      	adds	r7, #32
 8101c6e:	46bd      	mov	sp, r7
 8101c70:	bd80      	pop	{r7, pc}
 8101c72:	bf00      	nop
 8101c74:	58024400 	.word	0x58024400
 8101c78:	58020000 	.word	0x58020000

08101c7c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101c7c:	b580      	push	{r7, lr}
 8101c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101c80:	4b1b      	ldr	r3, [pc, #108]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c82:	4a1c      	ldr	r2, [pc, #112]	; (8101cf4 <MX_I2C1_Init+0x78>)
 8101c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101c86:	4b1a      	ldr	r3, [pc, #104]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c88:	4a1b      	ldr	r2, [pc, #108]	; (8101cf8 <MX_I2C1_Init+0x7c>)
 8101c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101c8c:	4b18      	ldr	r3, [pc, #96]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c8e:	2200      	movs	r2, #0
 8101c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101c92:	4b17      	ldr	r3, [pc, #92]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c94:	2201      	movs	r2, #1
 8101c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101c98:	4b15      	ldr	r3, [pc, #84]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101c9a:	2200      	movs	r2, #0
 8101c9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101c9e:	4b14      	ldr	r3, [pc, #80]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101ca0:	2200      	movs	r2, #0
 8101ca2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101ca4:	4b12      	ldr	r3, [pc, #72]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101ca6:	2200      	movs	r2, #0
 8101ca8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101caa:	4b11      	ldr	r3, [pc, #68]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cac:	2200      	movs	r2, #0
 8101cae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101cb0:	4b0f      	ldr	r3, [pc, #60]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cb2:	2200      	movs	r2, #0
 8101cb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101cb6:	480e      	ldr	r0, [pc, #56]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cb8:	f004 ff4a 	bl	8106b50 <HAL_I2C_Init>
 8101cbc:	4603      	mov	r3, r0
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d001      	beq.n	8101cc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101cc2:	f001 f805 	bl	8102cd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101cc6:	2100      	movs	r1, #0
 8101cc8:	4809      	ldr	r0, [pc, #36]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cca:	f006 fa7d 	bl	81081c8 <HAL_I2CEx_ConfigAnalogFilter>
 8101cce:	4603      	mov	r3, r0
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d001      	beq.n	8101cd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101cd4:	f000 fffc 	bl	8102cd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101cd8:	2100      	movs	r1, #0
 8101cda:	4805      	ldr	r0, [pc, #20]	; (8101cf0 <MX_I2C1_Init+0x74>)
 8101cdc:	f006 fabf 	bl	810825e <HAL_I2CEx_ConfigDigitalFilter>
 8101ce0:	4603      	mov	r3, r0
 8101ce2:	2b00      	cmp	r3, #0
 8101ce4:	d001      	beq.n	8101cea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101ce6:	f000 fff3 	bl	8102cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101cea:	bf00      	nop
 8101cec:	bd80      	pop	{r7, pc}
 8101cee:	bf00      	nop
 8101cf0:	10000148 	.word	0x10000148
 8101cf4:	40005400 	.word	0x40005400
 8101cf8:	307075b1 	.word	0x307075b1

08101cfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101cfc:	b580      	push	{r7, lr}
 8101cfe:	b0b8      	sub	sp, #224	; 0xe0
 8101d00:	af00      	add	r7, sp, #0
 8101d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d08:	2200      	movs	r2, #0
 8101d0a:	601a      	str	r2, [r3, #0]
 8101d0c:	605a      	str	r2, [r3, #4]
 8101d0e:	609a      	str	r2, [r3, #8]
 8101d10:	60da      	str	r2, [r3, #12]
 8101d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d14:	f107 0310 	add.w	r3, r7, #16
 8101d18:	22bc      	movs	r2, #188	; 0xbc
 8101d1a:	2100      	movs	r1, #0
 8101d1c:	4618      	mov	r0, r3
 8101d1e:	f00a fcc5 	bl	810c6ac <memset>
  if(i2cHandle->Instance==I2C1)
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	681b      	ldr	r3, [r3, #0]
 8101d26:	4a5b      	ldr	r2, [pc, #364]	; (8101e94 <HAL_I2C_MspInit+0x198>)
 8101d28:	4293      	cmp	r3, r2
 8101d2a:	f040 80af 	bne.w	8101e8c <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101d2e:	2308      	movs	r3, #8
 8101d30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101d32:	2300      	movs	r3, #0
 8101d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d38:	f107 0310 	add.w	r3, r7, #16
 8101d3c:	4618      	mov	r0, r3
 8101d3e:	f006 fd3b 	bl	81087b8 <HAL_RCCEx_PeriphCLKConfig>
 8101d42:	4603      	mov	r3, r0
 8101d44:	2b00      	cmp	r3, #0
 8101d46:	d001      	beq.n	8101d4c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101d48:	f000 ffc2 	bl	8102cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d4c:	4b52      	ldr	r3, [pc, #328]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d52:	4a51      	ldr	r2, [pc, #324]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d54:	f043 0302 	orr.w	r3, r3, #2
 8101d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d5c:	4b4e      	ldr	r3, [pc, #312]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d62:	f003 0302 	and.w	r3, r3, #2
 8101d66:	60fb      	str	r3, [r7, #12]
 8101d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101d72:	2312      	movs	r3, #18
 8101d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d78:	2300      	movs	r3, #0
 8101d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d7e:	2300      	movs	r3, #0
 8101d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101d84:	2304      	movs	r3, #4
 8101d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d8e:	4619      	mov	r1, r3
 8101d90:	4842      	ldr	r0, [pc, #264]	; (8101e9c <HAL_I2C_MspInit+0x1a0>)
 8101d92:	f004 fcd3 	bl	810673c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d96:	4b40      	ldr	r3, [pc, #256]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d9c:	4a3e      	ldr	r2, [pc, #248]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101da6:	4b3c      	ldr	r3, [pc, #240]	; (8101e98 <HAL_I2C_MspInit+0x19c>)
 8101da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101db0:	60bb      	str	r3, [r7, #8]
 8101db2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101db4:	4b3a      	ldr	r3, [pc, #232]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101db6:	4a3b      	ldr	r2, [pc, #236]	; (8101ea4 <HAL_I2C_MspInit+0x1a8>)
 8101db8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101dba:	4b39      	ldr	r3, [pc, #228]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dbc:	2221      	movs	r2, #33	; 0x21
 8101dbe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101dc0:	4b37      	ldr	r3, [pc, #220]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dc2:	2200      	movs	r2, #0
 8101dc4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101dc6:	4b36      	ldr	r3, [pc, #216]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dc8:	2200      	movs	r2, #0
 8101dca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101dcc:	4b34      	ldr	r3, [pc, #208]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101dd2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101dd4:	4b32      	ldr	r3, [pc, #200]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101dd6:	2200      	movs	r2, #0
 8101dd8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101dda:	4b31      	ldr	r3, [pc, #196]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101ddc:	2200      	movs	r2, #0
 8101dde:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101de0:	4b2f      	ldr	r3, [pc, #188]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101de2:	2200      	movs	r2, #0
 8101de4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101de6:	4b2e      	ldr	r3, [pc, #184]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101dec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101dee:	4b2c      	ldr	r3, [pc, #176]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101df0:	2200      	movs	r2, #0
 8101df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101df4:	482a      	ldr	r0, [pc, #168]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101df6:	f001 fe4f 	bl	8103a98 <HAL_DMA_Init>
 8101dfa:	4603      	mov	r3, r0
 8101dfc:	2b00      	cmp	r3, #0
 8101dfe:	d001      	beq.n	8101e04 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101e00:	f000 ff66 	bl	8102cd0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	4a26      	ldr	r2, [pc, #152]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101e08:	63da      	str	r2, [r3, #60]	; 0x3c
 8101e0a:	4a25      	ldr	r2, [pc, #148]	; (8101ea0 <HAL_I2C_MspInit+0x1a4>)
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101e10:	4b25      	ldr	r3, [pc, #148]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e12:	4a26      	ldr	r2, [pc, #152]	; (8101eac <HAL_I2C_MspInit+0x1b0>)
 8101e14:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101e16:	4b24      	ldr	r3, [pc, #144]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e18:	2222      	movs	r2, #34	; 0x22
 8101e1a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101e1c:	4b22      	ldr	r3, [pc, #136]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e1e:	2240      	movs	r2, #64	; 0x40
 8101e20:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101e22:	4b21      	ldr	r3, [pc, #132]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e24:	2200      	movs	r2, #0
 8101e26:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101e28:	4b1f      	ldr	r3, [pc, #124]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101e2e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101e30:	4b1d      	ldr	r3, [pc, #116]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e32:	2200      	movs	r2, #0
 8101e34:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101e36:	4b1c      	ldr	r3, [pc, #112]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e38:	2200      	movs	r2, #0
 8101e3a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101e3c:	4b1a      	ldr	r3, [pc, #104]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e3e:	2200      	movs	r2, #0
 8101e40:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101e42:	4b19      	ldr	r3, [pc, #100]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101e48:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101e4a:	4b17      	ldr	r3, [pc, #92]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e4c:	2200      	movs	r2, #0
 8101e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101e50:	4815      	ldr	r0, [pc, #84]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e52:	f001 fe21 	bl	8103a98 <HAL_DMA_Init>
 8101e56:	4603      	mov	r3, r0
 8101e58:	2b00      	cmp	r3, #0
 8101e5a:	d001      	beq.n	8101e60 <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101e5c:	f000 ff38 	bl	8102cd0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	4a11      	ldr	r2, [pc, #68]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e64:	639a      	str	r2, [r3, #56]	; 0x38
 8101e66:	4a10      	ldr	r2, [pc, #64]	; (8101ea8 <HAL_I2C_MspInit+0x1ac>)
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101e6c:	2200      	movs	r2, #0
 8101e6e:	2100      	movs	r1, #0
 8101e70:	201f      	movs	r0, #31
 8101e72:	f001 fdc8 	bl	8103a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101e76:	201f      	movs	r0, #31
 8101e78:	f001 fddf 	bl	8103a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	2100      	movs	r1, #0
 8101e80:	2020      	movs	r0, #32
 8101e82:	f001 fdc0 	bl	8103a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101e86:	2020      	movs	r0, #32
 8101e88:	f001 fdd7 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101e8c:	bf00      	nop
 8101e8e:	37e0      	adds	r7, #224	; 0xe0
 8101e90:	46bd      	mov	sp, r7
 8101e92:	bd80      	pop	{r7, pc}
 8101e94:	40005400 	.word	0x40005400
 8101e98:	58024400 	.word	0x58024400
 8101e9c:	58020400 	.word	0x58020400
 8101ea0:	10000194 	.word	0x10000194
 8101ea4:	40020040 	.word	0x40020040
 8101ea8:	100000d0 	.word	0x100000d0
 8101eac:	40020058 	.word	0x40020058

08101eb0 <CheckIMUSensorID>:
#include "lsm9ds1.h"
#include <stm32h7xx_hal.h>


uint8_t CheckIMUSensorID(uint8_t address, uint8_t reg)
{
 8101eb0:	b580      	push	{r7, lr}
 8101eb2:	b088      	sub	sp, #32
 8101eb4:	af04      	add	r7, sp, #16
 8101eb6:	4603      	mov	r3, r0
 8101eb8:	460a      	mov	r2, r1
 8101eba:	71fb      	strb	r3, [r7, #7]
 8101ebc:	4613      	mov	r3, r2
 8101ebe:	71bb      	strb	r3, [r7, #6]

//  HAL_Delay(100);
//   uint8_t result = I2CReadByte(address, reg);
//

    uint8_t value = 0x00;
 8101ec0:	2300      	movs	r3, #0
 8101ec2:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;
//    status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1);
    status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1,100);
 8101ec4:	79fb      	ldrb	r3, [r7, #7]
 8101ec6:	b29b      	uxth	r3, r3
 8101ec8:	005b      	lsls	r3, r3, #1
 8101eca:	b299      	uxth	r1, r3
 8101ecc:	79bb      	ldrb	r3, [r7, #6]
 8101ece:	b29a      	uxth	r2, r3
 8101ed0:	2364      	movs	r3, #100	; 0x64
 8101ed2:	9302      	str	r3, [sp, #8]
 8101ed4:	2301      	movs	r3, #1
 8101ed6:	9301      	str	r3, [sp, #4]
 8101ed8:	f107 030e 	add.w	r3, r7, #14
 8101edc:	9300      	str	r3, [sp, #0]
 8101ede:	2301      	movs	r3, #1
 8101ee0:	4807      	ldr	r0, [pc, #28]	; (8101f00 <CheckIMUSensorID+0x50>)
 8101ee2:	f004 ffd9 	bl	8106e98 <HAL_I2C_Mem_Read>
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK)
 8101eea:	7bfb      	ldrb	r3, [r7, #15]
 8101eec:	2b00      	cmp	r3, #0
 8101eee:	d001      	beq.n	8101ef4 <CheckIMUSensorID+0x44>
    {
       return HAL_ERROR;
 8101ef0:	2301      	movs	r3, #1
 8101ef2:	e000      	b.n	8101ef6 <CheckIMUSensorID+0x46>
    }
    return value;
 8101ef4:	7bbb      	ldrb	r3, [r7, #14]
   //return result;


}
 8101ef6:	4618      	mov	r0, r3
 8101ef8:	3710      	adds	r7, #16
 8101efa:	46bd      	mov	sp, r7
 8101efc:	bd80      	pop	{r7, pc}
 8101efe:	bf00      	nop
 8101f00:	10000148 	.word	0x10000148

08101f04 <init>:

void init(LSM9DS1Handle* imu)
{
 8101f04:	b480      	push	{r7}
 8101f06:	b083      	sub	sp, #12
 8101f08:	af00      	add	r7, sp, #0
 8101f0a:	6078      	str	r0, [r7, #4]
  // Setup Gyroscope
  imu->gyro_settings.enabled = 1;
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	2201      	movs	r2, #1
 8101f10:	701a      	strb	r2, [r3, #0]
  imu->gyro_settings.enableX = 1;
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	2201      	movs	r2, #1
 8101f16:	735a      	strb	r2, [r3, #13]
  imu->gyro_settings.enableY = 1;
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	2201      	movs	r2, #1
 8101f1c:	739a      	strb	r2, [r3, #14]
  imu->gyro_settings.enableZ = 1;
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	2201      	movs	r2, #1
 8101f22:	73da      	strb	r2, [r3, #15]

  // Set GyroScope Scale  245, 500, 2000
  imu->gyro_settings.scale = 245;
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	22f5      	movs	r2, #245	; 0xf5
 8101f28:	805a      	strh	r2, [r3, #2]
  imu->gyro_settings.sampleRate = ODR_952HZ;
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	2206      	movs	r2, #6
 8101f2e:	711a      	strb	r2, [r3, #4]
  // set cutoff frequency // set this all to zero
  // and do filtering in software
  imu->gyro_settings.bandwidth = 0;
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	2200      	movs	r2, #0
 8101f34:	715a      	strb	r2, [r3, #5]
  imu->gyro_settings.lowPowerEnable = 0;
 8101f36:	687b      	ldr	r3, [r7, #4]
 8101f38:	2200      	movs	r2, #0
 8101f3a:	719a      	strb	r2, [r3, #6]
  imu->gyro_settings.HPFEnable = 0;
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	2200      	movs	r2, #0
 8101f40:	71da      	strb	r2, [r3, #7]
  imu->gyro_settings.HPFCutoff = 0;
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	2200      	movs	r2, #0
 8101f46:	721a      	strb	r2, [r3, #8]
  imu->gyro_settings.flipX = 0;
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	2200      	movs	r2, #0
 8101f4c:	725a      	strb	r2, [r3, #9]
  imu->gyro_settings.flipY = 0;
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	2200      	movs	r2, #0
 8101f52:	729a      	strb	r2, [r3, #10]
  imu->gyro_settings.flipZ = 0;
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	2200      	movs	r2, #0
 8101f58:	72da      	strb	r2, [r3, #11]
  imu->gyro_settings.orientation = 0;
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	2200      	movs	r2, #0
 8101f5e:	731a      	strb	r2, [r3, #12]
  imu->gyro_settings.latchInterrupt = 1;
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	2201      	movs	r2, #1
 8101f64:	741a      	strb	r2, [r3, #16]

  //************Setup Accelerometer***************//
  imu->accel_settings.enabled = 1;
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	2201      	movs	r2, #1
 8101f6a:	749a      	strb	r2, [r3, #18]
  imu->accel_settings.enableX = 1;
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	2201      	movs	r2, #1
 8101f70:	755a      	strb	r2, [r3, #21]
  imu->accel_settings.enableY = 1;
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	2201      	movs	r2, #1
 8101f76:	759a      	strb	r2, [r3, #22]
  imu->accel_settings.enableZ = 1;
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	2201      	movs	r2, #1
 8101f7c:	75da      	strb	r2, [r3, #23]

  // 2,4, 8,16
  imu->accel_settings.scale = 2;
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	2202      	movs	r2, #2
 8101f82:	74da      	strb	r2, [r3, #19]
  imu->accel_settings.sampleRate = ODR_952HZ;
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	2206      	movs	r2, #6
 8101f88:	751a      	strb	r2, [r3, #20]
  imu->accel_settings.bandwidth = -1;  // bandwidth determined by sample rate
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	22ff      	movs	r2, #255	; 0xff
 8101f8e:	761a      	strb	r2, [r3, #24]
  imu->accel_settings.highResEnable = 0;
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	2200      	movs	r2, #0
 8101f94:	765a      	strb	r2, [r3, #25]
  imu->accel_settings.highResBandwidth = 0;
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	2200      	movs	r2, #0
 8101f9a:	769a      	strb	r2, [r3, #26]

  //**********************Magnetometer******************//

  imu->mag_settings.enabled = 1;
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	2201      	movs	r2, #1
 8101fa0:	76da      	strb	r2, [r3, #27]
  imu->mag_settings.scale = 4;
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	2204      	movs	r2, #4
 8101fa6:	771a      	strb	r2, [r3, #28]
  imu->mag_settings.sampleRate = MAG_ODR_80HZ;
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	2207      	movs	r2, #7
 8101fac:	775a      	strb	r2, [r3, #29]
  imu->mag_settings.tempCompensationEnable = 0;
 8101fae:	687b      	ldr	r3, [r7, #4]
 8101fb0:	2200      	movs	r2, #0
 8101fb2:	779a      	strb	r2, [r3, #30]
  imu->mag_settings.XYPerformance = MAG_UHP_MODE;  // ultra high performance
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2203      	movs	r2, #3
 8101fb8:	77da      	strb	r2, [r3, #31]
  imu->mag_settings.ZPerformance = MAG_UHP_MODE;
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	2203      	movs	r2, #3
 8101fbe:	f883 2020 	strb.w	r2, [r3, #32]
  imu->mag_settings.lowPowerEnable = 0;
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	2200      	movs	r2, #0
 8101fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  imu->mag_settings.operatingMode = 0 ; // continuous
 8101fca:	687b      	ldr	r3, [r7, #4]
 8101fcc:	2200      	movs	r2, #0
 8101fce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  imu->temp_settings.enabled = 1;
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	2201      	movs	r2, #1
 8101fd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

}
 8101fda:	bf00      	nop
 8101fdc:	370c      	adds	r7, #12
 8101fde:	46bd      	mov	sp, r7
 8101fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe4:	4770      	bx	lr

08101fe6 <setup>:

uint16_t setup(LSM9DS1Handle* imu)
{
 8101fe6:	b580      	push	{r7, lr}
 8101fe8:	b084      	sub	sp, #16
 8101fea:	af00      	add	r7, sp, #0
 8101fec:	6078      	str	r0, [r7, #4]

  // initialise the sensors
  init(imu);
 8101fee:	6878      	ldr	r0, [r7, #4]
 8101ff0:	f7ff ff88 	bl	8101f04 <init>

  // constrain the limits of each sensor
  clampScales(imu);
 8101ff4:	6878      	ldr	r0, [r7, #4]
 8101ff6:	f000 f9ea 	bl	81023ce <clampScales>

  // Calculate the resolution of each sensor
  calcGyroResolution(imu);
 8101ffa:	6878      	ldr	r0, [r7, #4]
 8101ffc:	f000 fb5e 	bl	81026bc <calcGyroResolution>
  calcAccResoltuion(imu);
 8102000:	6878      	ldr	r0, [r7, #4]
 8102002:	f000 fb89 	bl	8102718 <calcAccResoltuion>
  calcMagResolution(imu);
 8102006:	6878      	ldr	r0, [r7, #4]
 8102008:	f000 fbd2 	bl	81027b0 <calcMagResolution>

  // check that sensors are detected
  uint8_t ag_check = CheckIMUSensorID(LSM9DS1_AG_ADDR, WHO_AM_I_XG);
 810200c:	210f      	movs	r1, #15
 810200e:	206b      	movs	r0, #107	; 0x6b
 8102010:	f7ff ff4e 	bl	8101eb0 <CheckIMUSensorID>
 8102014:	4603      	mov	r3, r0
 8102016:	73fb      	strb	r3, [r7, #15]
  uint8_t mag_check = CheckIMUSensorID(LSM9DS1_M_ADDR, WHO_AM_I_M);
 8102018:	210f      	movs	r1, #15
 810201a:	201e      	movs	r0, #30
 810201c:	f7ff ff48 	bl	8101eb0 <CheckIMUSensorID>
 8102020:	4603      	mov	r3, r0
 8102022:	73bb      	strb	r3, [r7, #14]

  uint16_t imu_response = (ag_check << 8) | mag_check;
 8102024:	7bfb      	ldrb	r3, [r7, #15]
 8102026:	021b      	lsls	r3, r3, #8
 8102028:	b21a      	sxth	r2, r3
 810202a:	7bbb      	ldrb	r3, [r7, #14]
 810202c:	b21b      	sxth	r3, r3
 810202e:	4313      	orrs	r3, r2
 8102030:	b21b      	sxth	r3, r3
 8102032:	81bb      	strh	r3, [r7, #12]

  if(imu_response != ((WHO_AM_I_AG_RSP << 8 ) | WHO_AM_I_M_RSP))
 8102034:	89bb      	ldrh	r3, [r7, #12]
 8102036:	f646 023d 	movw	r2, #26685	; 0x683d
 810203a:	4293      	cmp	r3, r2
 810203c:	d001      	beq.n	8102042 <setup+0x5c>
  {
          return 0;
 810203e:	2300      	movs	r3, #0
 8102040:	e009      	b.n	8102056 <setup+0x70>
  }

  // initialise gyro
  initGyro(imu);
 8102042:	6878      	ldr	r0, [r7, #4]
 8102044:	f000 f80b 	bl	810205e <initGyro>
  // initialise accel
  initAccel(imu);
 8102048:	6878      	ldr	r0, [r7, #4]
 810204a:	f000 f8ad 	bl	81021a8 <initAccel>
  // init Mag
 initMag(imu);
 810204e:	6878      	ldr	r0, [r7, #4]
 8102050:	f000 f931 	bl	81022b6 <initMag>
  return imu_response;
 8102054:	89bb      	ldrh	r3, [r7, #12]
}
 8102056:	4618      	mov	r0, r3
 8102058:	3710      	adds	r7, #16
 810205a:	46bd      	mov	sp, r7
 810205c:	bd80      	pop	{r7, pc}

0810205e <initGyro>:


void initGyro(LSM9DS1Handle* imu)
{
 810205e:	b580      	push	{r7, lr}
 8102060:	b084      	sub	sp, #16
 8102062:	af00      	add	r7, sp, #0
 8102064:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 8102066:	2300      	movs	r3, #0
 8102068:	73fb      	strb	r3, [r7, #15]
  // ONly set sampleRate if gyro is enabled
  if(imu->gyro_settings.enabled == 1)
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	781b      	ldrb	r3, [r3, #0]
 810206e:	2b01      	cmp	r3, #1
 8102070:	d103      	bne.n	810207a <initGyro+0x1c>
  {
    tempRegValue = (imu->gyro_settings.sampleRate & 0x07) << 5;
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	791b      	ldrb	r3, [r3, #4]
 8102076:	015b      	lsls	r3, r3, #5
 8102078:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->gyro_settings.scale)
 810207a:	687b      	ldr	r3, [r7, #4]
 810207c:	885b      	ldrh	r3, [r3, #2]
 810207e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8102082:	d003      	beq.n	810208c <initGyro+0x2e>
 8102084:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8102088:	d005      	beq.n	8102096 <initGyro+0x38>
 810208a:	e009      	b.n	81020a0 <initGyro+0x42>
  {
    case 500:
      tempRegValue |= (0x1 << 3);
 810208c:	7bfb      	ldrb	r3, [r7, #15]
 810208e:	f043 0308 	orr.w	r3, r3, #8
 8102092:	73fb      	strb	r3, [r7, #15]
      break;
 8102094:	e004      	b.n	81020a0 <initGyro+0x42>
    case 2000:
      tempRegValue |= (0x3 << 3);
 8102096:	7bfb      	ldrb	r3, [r7, #15]
 8102098:	f043 0318 	orr.w	r3, r3, #24
 810209c:	73fb      	strb	r3, [r7, #15]
      break;
 810209e:	bf00      	nop
      // defaults to 0x0 << 4 245 dps
  }
  tempRegValue |= (imu->gyro_settings.bandwidth & 0x3);
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	795b      	ldrb	r3, [r3, #5]
 81020a4:	b25b      	sxtb	r3, r3
 81020a6:	f003 0303 	and.w	r3, r3, #3
 81020aa:	b25a      	sxtb	r2, r3
 81020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81020b0:	4313      	orrs	r3, r2
 81020b2:	b25b      	sxtb	r3, r3
 81020b4:	73fb      	strb	r3, [r7, #15]
  // Write settings to the register
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG1_G, tempRegValue);
 81020b6:	7bfb      	ldrb	r3, [r7, #15]
 81020b8:	461a      	mov	r2, r3
 81020ba:	2110      	movs	r1, #16
 81020bc:	206b      	movs	r0, #107	; 0x6b
 81020be:	f000 fbed 	bl	810289c <WriteByte>

   // reset tempValue
   tempRegValue = 0;
 81020c2:	2300      	movs	r3, #0
 81020c4:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG2_G, tempRegValue);
 81020c6:	7bfb      	ldrb	r3, [r7, #15]
 81020c8:	461a      	mov	r2, r3
 81020ca:	2111      	movs	r1, #17
 81020cc:	206b      	movs	r0, #107	; 0x6b
 81020ce:	f000 fbe5 	bl	810289c <WriteByte>

   tempRegValue = 0;
 81020d2:	2300      	movs	r3, #0
 81020d4:	73fb      	strb	r3, [r7, #15]
   tempRegValue = imu->gyro_settings.lowPowerEnable ? (1<<7) : 0;
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	799b      	ldrb	r3, [r3, #6]
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d001      	beq.n	81020e2 <initGyro+0x84>
 81020de:	2380      	movs	r3, #128	; 0x80
 81020e0:	e000      	b.n	81020e4 <initGyro+0x86>
 81020e2:	2300      	movs	r3, #0
 81020e4:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.HPFEnable == 0x01)
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	79db      	ldrb	r3, [r3, #7]
 81020ea:	2b01      	cmp	r3, #1
 81020ec:	d10a      	bne.n	8102104 <initGyro+0xa6>
   {
     tempRegValue |= (1 << 6) | (imu->gyro_settings.HPFCutoff & 0x0F);
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	7a1b      	ldrb	r3, [r3, #8]
 81020f2:	f003 030f 	and.w	r3, r3, #15
 81020f6:	b2da      	uxtb	r2, r3
 81020f8:	7bfb      	ldrb	r3, [r7, #15]
 81020fa:	4313      	orrs	r3, r2
 81020fc:	b2db      	uxtb	r3, r3
 81020fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102102:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG3_G, tempRegValue);
 8102104:	7bfb      	ldrb	r3, [r7, #15]
 8102106:	461a      	mov	r2, r3
 8102108:	2112      	movs	r1, #18
 810210a:	206b      	movs	r0, #107	; 0x6b
 810210c:	f000 fbc6 	bl	810289c <WriteByte>


   tempRegValue = 0;
 8102110:	2300      	movs	r3, #0
 8102112:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.enableZ)
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	7bdb      	ldrb	r3, [r3, #15]
 8102118:	2b00      	cmp	r3, #0
 810211a:	d003      	beq.n	8102124 <initGyro+0xc6>
   {
     tempRegValue |= 1 << 5;
 810211c:	7bfb      	ldrb	r3, [r7, #15]
 810211e:	f043 0320 	orr.w	r3, r3, #32
 8102122:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableY)
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	7b9b      	ldrb	r3, [r3, #14]
 8102128:	2b00      	cmp	r3, #0
 810212a:	d003      	beq.n	8102134 <initGyro+0xd6>
   {
     tempRegValue |= 1 << 4;
 810212c:	7bfb      	ldrb	r3, [r7, #15]
 810212e:	f043 0310 	orr.w	r3, r3, #16
 8102132:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.enableX)
 8102134:	687b      	ldr	r3, [r7, #4]
 8102136:	7b5b      	ldrb	r3, [r3, #13]
 8102138:	2b00      	cmp	r3, #0
 810213a:	d003      	beq.n	8102144 <initGyro+0xe6>
   {
     tempRegValue |= 1 << 3;
 810213c:	7bfb      	ldrb	r3, [r7, #15]
 810213e:	f043 0308 	orr.w	r3, r3, #8
 8102142:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.latchInterrupt)
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	7c1b      	ldrb	r3, [r3, #16]
 8102148:	2b00      	cmp	r3, #0
 810214a:	d003      	beq.n	8102154 <initGyro+0xf6>
   {
     tempRegValue |= 1 << 1;
 810214c:	7bfb      	ldrb	r3, [r7, #15]
 810214e:	f043 0302 	orr.w	r3, r3, #2
 8102152:	73fb      	strb	r3, [r7, #15]
   }
   WriteByte(LSM9DS1_AG_ADDR, CTRL_REG4, tempRegValue);
 8102154:	7bfb      	ldrb	r3, [r7, #15]
 8102156:	461a      	mov	r2, r3
 8102158:	211e      	movs	r1, #30
 810215a:	206b      	movs	r0, #107	; 0x6b
 810215c:	f000 fb9e 	bl	810289c <WriteByte>

   tempRegValue = 0;
 8102160:	2300      	movs	r3, #0
 8102162:	73fb      	strb	r3, [r7, #15]
   if(imu->gyro_settings.flipX)
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	7a5b      	ldrb	r3, [r3, #9]
 8102168:	2b00      	cmp	r3, #0
 810216a:	d003      	beq.n	8102174 <initGyro+0x116>
   {
      tempRegValue |= 1 << 5;
 810216c:	7bfb      	ldrb	r3, [r7, #15]
 810216e:	f043 0320 	orr.w	r3, r3, #32
 8102172:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipY)
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	7a9b      	ldrb	r3, [r3, #10]
 8102178:	2b00      	cmp	r3, #0
 810217a:	d003      	beq.n	8102184 <initGyro+0x126>
   {
      tempRegValue |= 1 << 4;
 810217c:	7bfb      	ldrb	r3, [r7, #15]
 810217e:	f043 0310 	orr.w	r3, r3, #16
 8102182:	73fb      	strb	r3, [r7, #15]
   }

   if(imu->gyro_settings.flipZ)
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	7adb      	ldrb	r3, [r3, #11]
 8102188:	2b00      	cmp	r3, #0
 810218a:	d003      	beq.n	8102194 <initGyro+0x136>
   {
      tempRegValue |= 1 << 3;
 810218c:	7bfb      	ldrb	r3, [r7, #15]
 810218e:	f043 0308 	orr.w	r3, r3, #8
 8102192:	73fb      	strb	r3, [r7, #15]
   }

   WriteByte(LSM9DS1_AG_ADDR, ORIENT_CFG_G, tempRegValue);
 8102194:	7bfb      	ldrb	r3, [r7, #15]
 8102196:	461a      	mov	r2, r3
 8102198:	2113      	movs	r1, #19
 810219a:	206b      	movs	r0, #107	; 0x6b
 810219c:	f000 fb7e 	bl	810289c <WriteByte>
}
 81021a0:	bf00      	nop
 81021a2:	3710      	adds	r7, #16
 81021a4:	46bd      	mov	sp, r7
 81021a6:	bd80      	pop	{r7, pc}

081021a8 <initAccel>:

void initAccel(LSM9DS1Handle* imu)
{
 81021a8:	b580      	push	{r7, lr}
 81021aa:	b084      	sub	sp, #16
 81021ac:	af00      	add	r7, sp, #0
 81021ae:	6078      	str	r0, [r7, #4]

  uint8_t tempRegValue = 0;
 81021b0:	2300      	movs	r3, #0
 81021b2:	73fb      	strb	r3, [r7, #15]

  if(imu->accel_settings.enableZ)
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	7ddb      	ldrb	r3, [r3, #23]
 81021b8:	2b00      	cmp	r3, #0
 81021ba:	d003      	beq.n	81021c4 <initAccel+0x1c>
  {
    tempRegValue |= 1 << 5;
 81021bc:	7bfb      	ldrb	r3, [r7, #15]
 81021be:	f043 0320 	orr.w	r3, r3, #32
 81021c2:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableY)
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	7d9b      	ldrb	r3, [r3, #22]
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d003      	beq.n	81021d4 <initAccel+0x2c>
  {
    tempRegValue |= 1 << 4;
 81021cc:	7bfb      	ldrb	r3, [r7, #15]
 81021ce:	f043 0310 	orr.w	r3, r3, #16
 81021d2:	73fb      	strb	r3, [r7, #15]
  }

  if(imu->accel_settings.enableX)
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	7d5b      	ldrb	r3, [r3, #21]
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d003      	beq.n	81021e4 <initAccel+0x3c>
  {
    tempRegValue |= 1 << 3;
 81021dc:	7bfb      	ldrb	r3, [r7, #15]
 81021de:	f043 0308 	orr.w	r3, r3, #8
 81021e2:	73fb      	strb	r3, [r7, #15]
  }

  // Write settings to the register
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG5_XL, tempRegValue);
 81021e4:	7bfb      	ldrb	r3, [r7, #15]
 81021e6:	461a      	mov	r2, r3
 81021e8:	211f      	movs	r1, #31
 81021ea:	206b      	movs	r0, #107	; 0x6b
 81021ec:	f000 fb56 	bl	810289c <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 81021f0:	2300      	movs	r3, #0
 81021f2:	73fb      	strb	r3, [r7, #15]
  // to disable accelerometer, set sampleRate bitfield to 0
  if(imu->accel_settings.enabled)
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	7c9b      	ldrb	r3, [r3, #18]
 81021f8:	2b00      	cmp	r3, #0
 81021fa:	d008      	beq.n	810220e <initAccel+0x66>
  {
    tempRegValue |= (imu->accel_settings.sampleRate & 0x07) << 5;
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	7d1b      	ldrb	r3, [r3, #20]
 8102200:	015b      	lsls	r3, r3, #5
 8102202:	b25a      	sxtb	r2, r3
 8102204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102208:	4313      	orrs	r3, r2
 810220a:	b25b      	sxtb	r3, r3
 810220c:	73fb      	strb	r3, [r7, #15]
  }

  switch(imu->accel_settings.scale)
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	7cdb      	ldrb	r3, [r3, #19]
 8102212:	2b10      	cmp	r3, #16
 8102214:	d010      	beq.n	8102238 <initAccel+0x90>
 8102216:	2b10      	cmp	r3, #16
 8102218:	dc13      	bgt.n	8102242 <initAccel+0x9a>
 810221a:	2b04      	cmp	r3, #4
 810221c:	d002      	beq.n	8102224 <initAccel+0x7c>
 810221e:	2b08      	cmp	r3, #8
 8102220:	d005      	beq.n	810222e <initAccel+0x86>
 8102222:	e00e      	b.n	8102242 <initAccel+0x9a>
  {
    case 4:
      tempRegValue |= (0x2 << 3);
 8102224:	7bfb      	ldrb	r3, [r7, #15]
 8102226:	f043 0310 	orr.w	r3, r3, #16
 810222a:	73fb      	strb	r3, [r7, #15]
      break;
 810222c:	e009      	b.n	8102242 <initAccel+0x9a>
    case 8:
      tempRegValue |= (0x3 << 3);
 810222e:	7bfb      	ldrb	r3, [r7, #15]
 8102230:	f043 0318 	orr.w	r3, r3, #24
 8102234:	73fb      	strb	r3, [r7, #15]
      break;
 8102236:	e004      	b.n	8102242 <initAccel+0x9a>
    case 16:
      tempRegValue |= (0x1 << 3);
 8102238:	7bfb      	ldrb	r3, [r7, #15]
 810223a:	f043 0308 	orr.w	r3, r3, #8
 810223e:	73fb      	strb	r3, [r7, #15]
      break;
 8102240:	bf00      	nop

  }

  if(imu->accel_settings.bandwidth >= 0)
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8102248:	2b00      	cmp	r3, #0
 810224a:	db0e      	blt.n	810226a <initAccel+0xc2>
  {
     // Set BW Scale ODR
    tempRegValue |= (1 << 2);
 810224c:	7bfb      	ldrb	r3, [r7, #15]
 810224e:	f043 0304 	orr.w	r3, r3, #4
 8102252:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.bandwidth & 0x03);
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	f993 3018 	ldrsb.w	r3, [r3, #24]
 810225a:	f003 0303 	and.w	r3, r3, #3
 810225e:	b25a      	sxtb	r2, r3
 8102260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102264:	4313      	orrs	r3, r2
 8102266:	b25b      	sxtb	r3, r3
 8102268:	73fb      	strb	r3, [r7, #15]
  }

  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG6_XL, tempRegValue);
 810226a:	7bfb      	ldrb	r3, [r7, #15]
 810226c:	461a      	mov	r2, r3
 810226e:	2120      	movs	r1, #32
 8102270:	206b      	movs	r0, #107	; 0x6b
 8102272:	f000 fb13 	bl	810289c <WriteByte>

  // reset tempValue
  tempRegValue = 0;
 8102276:	2300      	movs	r3, #0
 8102278:	73fb      	strb	r3, [r7, #15]
  if(imu->accel_settings.highResEnable == 0x1)
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	7e5b      	ldrb	r3, [r3, #25]
 810227e:	2b01      	cmp	r3, #1
 8102280:	d10f      	bne.n	81022a2 <initAccel+0xfa>
  {
    tempRegValue |= (1 << 7);
 8102282:	7bfb      	ldrb	r3, [r7, #15]
 8102284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8102288:	73fb      	strb	r3, [r7, #15]
    tempRegValue |= (imu->accel_settings.highResBandwidth & 0x3) << 5;
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	7e9b      	ldrb	r3, [r3, #26]
 810228e:	015b      	lsls	r3, r3, #5
 8102290:	b25b      	sxtb	r3, r3
 8102292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102296:	b25a      	sxtb	r2, r3
 8102298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810229c:	4313      	orrs	r3, r2
 810229e:	b25b      	sxtb	r3, r3
 81022a0:	73fb      	strb	r3, [r7, #15]
  }
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG7_XL, tempRegValue);
 81022a2:	7bfb      	ldrb	r3, [r7, #15]
 81022a4:	461a      	mov	r2, r3
 81022a6:	2121      	movs	r1, #33	; 0x21
 81022a8:	206b      	movs	r0, #107	; 0x6b
 81022aa:	f000 faf7 	bl	810289c <WriteByte>
}
 81022ae:	bf00      	nop
 81022b0:	3710      	adds	r7, #16
 81022b2:	46bd      	mov	sp, r7
 81022b4:	bd80      	pop	{r7, pc}

081022b6 <initMag>:



void initMag(LSM9DS1Handle* imu)
{
 81022b6:	b580      	push	{r7, lr}
 81022b8:	b084      	sub	sp, #16
 81022ba:	af00      	add	r7, sp, #0
 81022bc:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0;
 81022be:	2300      	movs	r3, #0
 81022c0:	73fb      	strb	r3, [r7, #15]

  // check if temperature compensation is enabled
  if(imu->mag_settings.tempCompensationEnable == 0x01)
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	7f9b      	ldrb	r3, [r3, #30]
 81022c6:	2b01      	cmp	r3, #1
 81022c8:	d103      	bne.n	81022d2 <initMag+0x1c>
  {
    // Add 1 to the 7th bit of CTRL_REG_1_M
    tempRegValue |= 1 << 7;
 81022ca:	7bfb      	ldrb	r3, [r7, #15]
 81022cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 81022d0:	73fb      	strb	r3, [r7, #15]
  }
  // Make Operative mode Ultra High Performance
  tempRegValue |= (imu->mag_settings.XYPerformance & 0x3) << 5;
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	7fdb      	ldrb	r3, [r3, #31]
 81022d6:	015b      	lsls	r3, r3, #5
 81022d8:	b25b      	sxtb	r3, r3
 81022da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81022de:	b25a      	sxtb	r2, r3
 81022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022e4:	4313      	orrs	r3, r2
 81022e6:	b25b      	sxtb	r3, r3
 81022e8:	73fb      	strb	r3, [r7, #15]
  // Output Data rate set to 80Hz
  tempRegValue |= (imu->mag_settings.sampleRate & 0x7) << 2;
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	7f5b      	ldrb	r3, [r3, #29]
 81022ee:	009b      	lsls	r3, r3, #2
 81022f0:	b25b      	sxtb	r3, r3
 81022f2:	f003 031c 	and.w	r3, r3, #28
 81022f6:	b25a      	sxtb	r2, r3
 81022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81022fc:	4313      	orrs	r3, r2
 81022fe:	b25b      	sxtb	r3, r3
 8102300:	73fb      	strb	r3, [r7, #15]
  // Write to Register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG1_M, tempRegValue);
 8102302:	7bfb      	ldrb	r3, [r7, #15]
 8102304:	461a      	mov	r2, r3
 8102306:	2120      	movs	r1, #32
 8102308:	201e      	movs	r0, #30
 810230a:	f000 fac7 	bl	810289c <WriteByte>

   // reset regTempValue
   tempRegValue = 0;
 810230e:	2300      	movs	r3, #0
 8102310:	73fb      	strb	r3, [r7, #15]

   switch(imu->mag_settings.scale)
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	7f1b      	ldrb	r3, [r3, #28]
 8102316:	2b10      	cmp	r3, #16
 8102318:	d010      	beq.n	810233c <initMag+0x86>
 810231a:	2b10      	cmp	r3, #16
 810231c:	dc13      	bgt.n	8102346 <initMag+0x90>
 810231e:	2b08      	cmp	r3, #8
 8102320:	d002      	beq.n	8102328 <initMag+0x72>
 8102322:	2b0c      	cmp	r3, #12
 8102324:	d005      	beq.n	8102332 <initMag+0x7c>
 8102326:	e00e      	b.n	8102346 <initMag+0x90>
   {
     case 8:
      tempRegValue |= (0x1 << 5);
 8102328:	7bfb      	ldrb	r3, [r7, #15]
 810232a:	f043 0320 	orr.w	r3, r3, #32
 810232e:	73fb      	strb	r3, [r7, #15]
      break;
 8102330:	e009      	b.n	8102346 <initMag+0x90>
     case 12:
      tempRegValue |= (0x2 << 5);
 8102332:	7bfb      	ldrb	r3, [r7, #15]
 8102334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102338:	73fb      	strb	r3, [r7, #15]
      break;
 810233a:	e004      	b.n	8102346 <initMag+0x90>
     case 16:
      tempRegValue |= (0x3 << 5);
 810233c:	7bfb      	ldrb	r3, [r7, #15]
 810233e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8102342:	73fb      	strb	r3, [r7, #15]
      break;
 8102344:	bf00      	nop
   }
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG2_M, tempRegValue);
 8102346:	7bfb      	ldrb	r3, [r7, #15]
 8102348:	461a      	mov	r2, r3
 810234a:	2121      	movs	r1, #33	; 0x21
 810234c:	201e      	movs	r0, #30
 810234e:	f000 faa5 	bl	810289c <WriteByte>

   tempRegValue = 0;
 8102352:	2300      	movs	r3, #0
 8102354:	73fb      	strb	r3, [r7, #15]
   if(imu->mag_settings.lowPowerEnable == 0x01)
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 810235c:	2b01      	cmp	r3, #1
 810235e:	d103      	bne.n	8102368 <initMag+0xb2>
   {
     // set LP bit in CTRL_REG3_M
     tempRegValue |= 0x1 << 5;
 8102360:	7bfb      	ldrb	r3, [r7, #15]
 8102362:	f043 0320 	orr.w	r3, r3, #32
 8102366:	73fb      	strb	r3, [r7, #15]
   }
   // Set Operating Mode to continuous conversion mode
   tempRegValue |= imu->mag_settings.operatingMode & 0x3;
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 810236e:	b25b      	sxtb	r3, r3
 8102370:	f003 0303 	and.w	r3, r3, #3
 8102374:	b25a      	sxtb	r2, r3
 8102376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810237a:	4313      	orrs	r3, r2
 810237c:	b25b      	sxtb	r3, r3
 810237e:	73fb      	strb	r3, [r7, #15]
   // Write value to register
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG3_M, tempRegValue);
 8102380:	7bfb      	ldrb	r3, [r7, #15]
 8102382:	461a      	mov	r2, r3
 8102384:	2122      	movs	r1, #34	; 0x22
 8102386:	201e      	movs	r0, #30
 8102388:	f000 fa88 	bl	810289c <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 810238c:	2300      	movs	r3, #0
 810238e:	73fb      	strb	r3, [r7, #15]
   // set Z performance
   tempRegValue |= (imu->mag_settings.ZPerformance & 0x3) << 2;
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8102396:	009b      	lsls	r3, r3, #2
 8102398:	b25b      	sxtb	r3, r3
 810239a:	f003 030c 	and.w	r3, r3, #12
 810239e:	b25a      	sxtb	r2, r3
 81023a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81023a4:	4313      	orrs	r3, r2
 81023a6:	b25b      	sxtb	r3, r3
 81023a8:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG4_M, tempRegValue);
 81023aa:	7bfb      	ldrb	r3, [r7, #15]
 81023ac:	461a      	mov	r2, r3
 81023ae:	2123      	movs	r1, #35	; 0x23
 81023b0:	201e      	movs	r0, #30
 81023b2:	f000 fa73 	bl	810289c <WriteByte>

   // reset tempRegValue
   tempRegValue = 0;
 81023b6:	2300      	movs	r3, #0
 81023b8:	73fb      	strb	r3, [r7, #15]
   WriteByte(LSM9DS1_M_ADDR, CTRL_REG5_M, tempRegValue);
 81023ba:	7bfb      	ldrb	r3, [r7, #15]
 81023bc:	461a      	mov	r2, r3
 81023be:	2124      	movs	r1, #36	; 0x24
 81023c0:	201e      	movs	r0, #30
 81023c2:	f000 fa6b 	bl	810289c <WriteByte>

}
 81023c6:	bf00      	nop
 81023c8:	3710      	adds	r7, #16
 81023ca:	46bd      	mov	sp, r7
 81023cc:	bd80      	pop	{r7, pc}

081023ce <clampScales>:


void clampScales(LSM9DS1Handle* imu)
{
 81023ce:	b480      	push	{r7}
 81023d0:	b083      	sub	sp, #12
 81023d2:	af00      	add	r7, sp, #0
 81023d4:	6078      	str	r0, [r7, #4]

  // clamp gyro scales
  if((imu->gyro_settings.scale != 245) && (imu->gyro_settings.scale!= 500) && (imu->gyro_settings.scale!= 2000))
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	885b      	ldrh	r3, [r3, #2]
 81023da:	2bf5      	cmp	r3, #245	; 0xf5
 81023dc:	d00c      	beq.n	81023f8 <clampScales+0x2a>
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	885b      	ldrh	r3, [r3, #2]
 81023e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81023e6:	d007      	beq.n	81023f8 <clampScales+0x2a>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	885b      	ldrh	r3, [r3, #2]
 81023ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81023f0:	d002      	beq.n	81023f8 <clampScales+0x2a>
  {
     imu->gyro_settings.scale = 245;
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	22f5      	movs	r2, #245	; 0xf5
 81023f6:	805a      	strh	r2, [r3, #2]
  }

  if((imu->accel_settings.scale != 2) && (imu->accel_settings.scale!= 4) && (imu->accel_settings.scale!= 8)
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	7cdb      	ldrb	r3, [r3, #19]
 81023fc:	2b02      	cmp	r3, #2
 81023fe:	d00e      	beq.n	810241e <clampScales+0x50>
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	7cdb      	ldrb	r3, [r3, #19]
 8102404:	2b04      	cmp	r3, #4
 8102406:	d00a      	beq.n	810241e <clampScales+0x50>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	7cdb      	ldrb	r3, [r3, #19]
 810240c:	2b08      	cmp	r3, #8
 810240e:	d006      	beq.n	810241e <clampScales+0x50>
      && (imu->accel_settings.scale != 16))
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	7cdb      	ldrb	r3, [r3, #19]
 8102414:	2b10      	cmp	r3, #16
 8102416:	d002      	beq.n	810241e <clampScales+0x50>
  {
     imu->accel_settings.scale = 245;
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	22f5      	movs	r2, #245	; 0xf5
 810241c:	74da      	strb	r2, [r3, #19]
  }


  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	7f1b      	ldrb	r3, [r3, #28]
 8102422:	2b04      	cmp	r3, #4
 8102424:	d00e      	beq.n	8102444 <clampScales+0x76>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	7f1b      	ldrb	r3, [r3, #28]
 810242a:	2b08      	cmp	r3, #8
 810242c:	d00a      	beq.n	8102444 <clampScales+0x76>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	7f1b      	ldrb	r3, [r3, #28]
 8102432:	2b0c      	cmp	r3, #12
 8102434:	d006      	beq.n	8102444 <clampScales+0x76>
      (imu->mag_settings.scale != 16))
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	7f1b      	ldrb	r3, [r3, #28]
  if((imu->mag_settings.scale != 4) && (imu->mag_settings.scale!= 8) && (imu->mag_settings.scale!= 12) &&
 810243a:	2b10      	cmp	r3, #16
 810243c:	d002      	beq.n	8102444 <clampScales+0x76>
  {
     imu->mag_settings.scale = 4;
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	2204      	movs	r2, #4
 8102442:	771a      	strb	r2, [r3, #28]
  }

}
 8102444:	bf00      	nop
 8102446:	370c      	adds	r7, #12
 8102448:	46bd      	mov	sp, r7
 810244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244e:	4770      	bx	lr

08102450 <calcGyro>:

float calcGyro(float gyro)
{
 8102450:	b480      	push	{r7}
 8102452:	b083      	sub	sp, #12
 8102454:	af00      	add	r7, sp, #0
 8102456:	ed87 0a01 	vstr	s0, [r7, #4]
  return gyro * gyro_res;
 810245a:	4b07      	ldr	r3, [pc, #28]	; (8102478 <calcGyro+0x28>)
 810245c:	ed93 7a00 	vldr	s14, [r3]
 8102460:	edd7 7a01 	vldr	s15, [r7, #4]
 8102464:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102468:	eeb0 0a67 	vmov.f32	s0, s15
 810246c:	370c      	adds	r7, #12
 810246e:	46bd      	mov	sp, r7
 8102470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102474:	4770      	bx	lr
 8102476:	bf00      	nop
 8102478:	10000214 	.word	0x10000214

0810247c <calcMag>:
float calcMag(float mag)
{
 810247c:	b480      	push	{r7}
 810247e:	b083      	sub	sp, #12
 8102480:	af00      	add	r7, sp, #0
 8102482:	ed87 0a01 	vstr	s0, [r7, #4]
  return mag * mag_res;
 8102486:	4b07      	ldr	r3, [pc, #28]	; (81024a4 <calcMag+0x28>)
 8102488:	ed93 7a00 	vldr	s14, [r3]
 810248c:	edd7 7a01 	vldr	s15, [r7, #4]
 8102490:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8102494:	eeb0 0a67 	vmov.f32	s0, s15
 8102498:	370c      	adds	r7, #12
 810249a:	46bd      	mov	sp, r7
 810249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024a0:	4770      	bx	lr
 81024a2:	bf00      	nop
 81024a4:	10000210 	.word	0x10000210

081024a8 <calcAccel>:
float calcAccel(float accel)
{
 81024a8:	b480      	push	{r7}
 81024aa:	b083      	sub	sp, #12
 81024ac:	af00      	add	r7, sp, #0
 81024ae:	ed87 0a01 	vstr	s0, [r7, #4]
  return accel * acc_res;
 81024b2:	4b07      	ldr	r3, [pc, #28]	; (81024d0 <calcAccel+0x28>)
 81024b4:	ed93 7a00 	vldr	s14, [r3]
 81024b8:	edd7 7a01 	vldr	s15, [r7, #4]
 81024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 81024c0:	eeb0 0a67 	vmov.f32	s0, s15
 81024c4:	370c      	adds	r7, #12
 81024c6:	46bd      	mov	sp, r7
 81024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024cc:	4770      	bx	lr
 81024ce:	bf00      	nop
 81024d0:	1000020c 	.word	0x1000020c

081024d4 <readGyro>:
///@brief returns the gyroscope
/// data in dps
///@param imu struct handle
///@returns nothing
void readGyro(LSM9DS1Handle* imu)
{
 81024d4:	b580      	push	{r7, lr}
 81024d6:	b086      	sub	sp, #24
 81024d8:	af00      	add	r7, sp, #0
 81024da:	6078      	str	r0, [r7, #4]

  int16_t gx, gy, gz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_G_L, buffer, 6);
 81024dc:	f107 020c 	add.w	r2, r7, #12
 81024e0:	2306      	movs	r3, #6
 81024e2:	2118      	movs	r1, #24
 81024e4:	206b      	movs	r0, #107	; 0x6b
 81024e6:	f000 f9af 	bl	8102848 <I2CReadBytes>

  gx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 81024ea:	7b7b      	ldrb	r3, [r7, #13]
 81024ec:	021b      	lsls	r3, r3, #8
 81024ee:	b21a      	sxth	r2, r3
 81024f0:	7b3b      	ldrb	r3, [r7, #12]
 81024f2:	b21b      	sxth	r3, r3
 81024f4:	4313      	orrs	r3, r2
 81024f6:	82fb      	strh	r3, [r7, #22]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 81024f8:	7bfb      	ldrb	r3, [r7, #15]
 81024fa:	021b      	lsls	r3, r3, #8
 81024fc:	b21a      	sxth	r2, r3
 81024fe:	7bbb      	ldrb	r3, [r7, #14]
 8102500:	b21b      	sxth	r3, r3
 8102502:	4313      	orrs	r3, r2
 8102504:	82bb      	strh	r3, [r7, #20]
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8102506:	7c7b      	ldrb	r3, [r7, #17]
 8102508:	021b      	lsls	r3, r3, #8
 810250a:	b21a      	sxth	r2, r3
 810250c:	7c3b      	ldrb	r3, [r7, #16]
 810250e:	b21b      	sxth	r3, r3
 8102510:	4313      	orrs	r3, r2
 8102512:	827b      	strh	r3, [r7, #18]

  imu->gyro_values.x = calcGyro(gx);
 8102514:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8102518:	ee07 3a90 	vmov	s15, r3
 810251c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102520:	eeb0 0a67 	vmov.f32	s0, s15
 8102524:	f7ff ff94 	bl	8102450 <calcGyro>
 8102528:	eef0 7a40 	vmov.f32	s15, s0
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
  imu->gyro_values.y = calcGyro(gy);
 8102532:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8102536:	ee07 3a90 	vmov	s15, r3
 810253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810253e:	eeb0 0a67 	vmov.f32	s0, s15
 8102542:	f7ff ff85 	bl	8102450 <calcGyro>
 8102546:	eef0 7a40 	vmov.f32	s15, s0
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
  imu->gyro_values.z = calcGyro(gz);
 8102550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102554:	ee07 3a90 	vmov	s15, r3
 8102558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810255c:	eeb0 0a67 	vmov.f32	s0, s15
 8102560:	f7ff ff76 	bl	8102450 <calcGyro>
 8102564:	eef0 7a40 	vmov.f32	s15, s0
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

}
 810256e:	bf00      	nop
 8102570:	3718      	adds	r7, #24
 8102572:	46bd      	mov	sp, r7
 8102574:	bd80      	pop	{r7, pc}

08102576 <readMag>:
///@brief returns the magnetometer
/// data in Gauss
///@param imu struct handle
///@returns nothing
void readMag(LSM9DS1Handle* imu)
{
 8102576:	b580      	push	{r7, lr}
 8102578:	b086      	sub	sp, #24
 810257a:	af00      	add	r7, sp, #0
 810257c:	6078      	str	r0, [r7, #4]

  int16_t mx, my, mz;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_M_ADDR, OUT_X_M_L, buffer, 6);
 810257e:	f107 020c 	add.w	r2, r7, #12
 8102582:	2306      	movs	r3, #6
 8102584:	2128      	movs	r1, #40	; 0x28
 8102586:	201e      	movs	r0, #30
 8102588:	f000 f95e 	bl	8102848 <I2CReadBytes>

  mx = (buffer[1] << 8) | buffer[0]; // Store x-axis values into mx
 810258c:	7b7b      	ldrb	r3, [r7, #13]
 810258e:	021b      	lsls	r3, r3, #8
 8102590:	b21a      	sxth	r2, r3
 8102592:	7b3b      	ldrb	r3, [r7, #12]
 8102594:	b21b      	sxth	r3, r3
 8102596:	4313      	orrs	r3, r2
 8102598:	82fb      	strh	r3, [r7, #22]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 810259a:	7bfb      	ldrb	r3, [r7, #15]
 810259c:	021b      	lsls	r3, r3, #8
 810259e:	b21a      	sxth	r2, r3
 81025a0:	7bbb      	ldrb	r3, [r7, #14]
 81025a2:	b21b      	sxth	r3, r3
 81025a4:	4313      	orrs	r3, r2
 81025a6:	82bb      	strh	r3, [r7, #20]
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 81025a8:	7c7b      	ldrb	r3, [r7, #17]
 81025aa:	021b      	lsls	r3, r3, #8
 81025ac:	b21a      	sxth	r2, r3
 81025ae:	7c3b      	ldrb	r3, [r7, #16]
 81025b0:	b21b      	sxth	r3, r3
 81025b2:	4313      	orrs	r3, r2
 81025b4:	827b      	strh	r3, [r7, #18]

    imu->mag_values.x = calcMag(mx);
 81025b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 81025ba:	ee07 3a90 	vmov	s15, r3
 81025be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025c2:	eeb0 0a67 	vmov.f32	s0, s15
 81025c6:	f7ff ff59 	bl	810247c <calcMag>
 81025ca:	eef0 7a40 	vmov.f32	s15, s0
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->mag_values.y = calcMag(my);
 81025d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 81025d8:	ee07 3a90 	vmov	s15, r3
 81025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025e0:	eeb0 0a67 	vmov.f32	s0, s15
 81025e4:	f7ff ff4a 	bl	810247c <calcMag>
 81025e8:	eef0 7a40 	vmov.f32	s15, s0
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    imu->mag_values.z = calcMag(mz);
 81025f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 81025f6:	ee07 3a90 	vmov	s15, r3
 81025fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8102602:	f7ff ff3b 	bl	810247c <calcMag>
 8102606:	eef0 7a40 	vmov.f32	s15, s0
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8102610:	bf00      	nop
 8102612:	3718      	adds	r7, #24
 8102614:	46bd      	mov	sp, r7
 8102616:	bd80      	pop	{r7, pc}

08102618 <readAccel>:
///@brief returns the
/// accelerometer data in g's
///@param imu struct handle
///@returns nothing
void readAccel(LSM9DS1Handle* imu)
{
 8102618:	b580      	push	{r7, lr}
 810261a:	b086      	sub	sp, #24
 810261c:	af00      	add	r7, sp, #0
 810261e:	6078      	str	r0, [r7, #4]

  int16_t ax, ay, az;
  uint8_t buffer[6];

  I2CReadBytes(LSM9DS1_AG_ADDR, OUT_X_XL_L, buffer, 6);
 8102620:	f107 020c 	add.w	r2, r7, #12
 8102624:	2306      	movs	r3, #6
 8102626:	2128      	movs	r1, #40	; 0x28
 8102628:	206b      	movs	r0, #107	; 0x6b
 810262a:	f000 f90d 	bl	8102848 <I2CReadBytes>

  ax = (buffer[1] << 8) | buffer[0]; // Store x-axis values into gx
 810262e:	7b7b      	ldrb	r3, [r7, #13]
 8102630:	021b      	lsls	r3, r3, #8
 8102632:	b21a      	sxth	r2, r3
 8102634:	7b3b      	ldrb	r3, [r7, #12]
 8102636:	b21b      	sxth	r3, r3
 8102638:	4313      	orrs	r3, r2
 810263a:	82fb      	strh	r3, [r7, #22]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 810263c:	7bfb      	ldrb	r3, [r7, #15]
 810263e:	021b      	lsls	r3, r3, #8
 8102640:	b21a      	sxth	r2, r3
 8102642:	7bbb      	ldrb	r3, [r7, #14]
 8102644:	b21b      	sxth	r3, r3
 8102646:	4313      	orrs	r3, r2
 8102648:	82bb      	strh	r3, [r7, #20]
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 810264a:	7c7b      	ldrb	r3, [r7, #17]
 810264c:	021b      	lsls	r3, r3, #8
 810264e:	b21a      	sxth	r2, r3
 8102650:	7c3b      	ldrb	r3, [r7, #16]
 8102652:	b21b      	sxth	r3, r3
 8102654:	4313      	orrs	r3, r2
 8102656:	827b      	strh	r3, [r7, #18]

  imu->accel_values.x = calcAccel(ax);
 8102658:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 810265c:	ee07 3a90 	vmov	s15, r3
 8102660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102664:	eeb0 0a67 	vmov.f32	s0, s15
 8102668:	f7ff ff1e 	bl	81024a8 <calcAccel>
 810266c:	eef0 7a40 	vmov.f32	s15, s0
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  imu->accel_values.y = calcAccel(ay);
 8102676:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 810267a:	ee07 3a90 	vmov	s15, r3
 810267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102682:	eeb0 0a67 	vmov.f32	s0, s15
 8102686:	f7ff ff0f 	bl	81024a8 <calcAccel>
 810268a:	eef0 7a40 	vmov.f32	s15, s0
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  imu->accel_values.z = calcAccel(az);
 8102694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8102698:	ee07 3a90 	vmov	s15, r3
 810269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81026a0:	eeb0 0a67 	vmov.f32	s0, s15
 81026a4:	f7ff ff00 	bl	81024a8 <calcAccel>
 81026a8:	eef0 7a40 	vmov.f32	s15, s0
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38


}
 81026b2:	bf00      	nop
 81026b4:	3718      	adds	r7, #24
 81026b6:	46bd      	mov	sp, r7
 81026b8:	bd80      	pop	{r7, pc}
	...

081026bc <calcGyroResolution>:
  WriteByte(LSM9DS1_AG_ADDR, CTRL_REG9, temp);
}


void calcGyroResolution(LSM9DS1Handle* imu)
{
 81026bc:	b480      	push	{r7}
 81026be:	b083      	sub	sp, #12
 81026c0:	af00      	add	r7, sp, #0
 81026c2:	6078      	str	r0, [r7, #4]

  switch(imu->gyro_settings.scale)
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	885b      	ldrh	r3, [r3, #2]
 81026c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026cc:	d010      	beq.n	81026f0 <calcGyroResolution+0x34>
 81026ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 81026d2:	dc11      	bgt.n	81026f8 <calcGyroResolution+0x3c>
 81026d4:	2bf5      	cmp	r3, #245	; 0xf5
 81026d6:	d003      	beq.n	81026e0 <calcGyroResolution+0x24>
 81026d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81026dc:	d004      	beq.n	81026e8 <calcGyroResolution+0x2c>
    case 2000:
      gyro_res = GYRO_FS_2000;
      break;

    default:
      break;
 81026de:	e00b      	b.n	81026f8 <calcGyroResolution+0x3c>
      gyro_res =  GYRO_FS_245;
 81026e0:	4b09      	ldr	r3, [pc, #36]	; (8102708 <calcGyroResolution+0x4c>)
 81026e2:	4a0a      	ldr	r2, [pc, #40]	; (810270c <calcGyroResolution+0x50>)
 81026e4:	601a      	str	r2, [r3, #0]
      break;
 81026e6:	e008      	b.n	81026fa <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_500;
 81026e8:	4b07      	ldr	r3, [pc, #28]	; (8102708 <calcGyroResolution+0x4c>)
 81026ea:	4a09      	ldr	r2, [pc, #36]	; (8102710 <calcGyroResolution+0x54>)
 81026ec:	601a      	str	r2, [r3, #0]
      break;
 81026ee:	e004      	b.n	81026fa <calcGyroResolution+0x3e>
      gyro_res = GYRO_FS_2000;
 81026f0:	4b05      	ldr	r3, [pc, #20]	; (8102708 <calcGyroResolution+0x4c>)
 81026f2:	4a08      	ldr	r2, [pc, #32]	; (8102714 <calcGyroResolution+0x58>)
 81026f4:	601a      	str	r2, [r3, #0]
      break;
 81026f6:	e000      	b.n	81026fa <calcGyroResolution+0x3e>
      break;
 81026f8:	bf00      	nop
  }
}
 81026fa:	bf00      	nop
 81026fc:	370c      	adds	r7, #12
 81026fe:	46bd      	mov	sp, r7
 8102700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102704:	4770      	bx	lr
 8102706:	bf00      	nop
 8102708:	10000214 	.word	0x10000214
 810270c:	3c0f5c29 	.word	0x3c0f5c29
 8102710:	3c8f5c29 	.word	0x3c8f5c29
 8102714:	3d8f5c29 	.word	0x3d8f5c29

08102718 <calcAccResoltuion>:

void calcAccResoltuion(LSM9DS1Handle* imu)
{
 8102718:	b480      	push	{r7}
 810271a:	b083      	sub	sp, #12
 810271c:	af00      	add	r7, sp, #0
 810271e:	6078      	str	r0, [r7, #4]

  switch(imu->accel_settings.scale)
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	7cdb      	ldrb	r3, [r3, #19]
 8102724:	3b02      	subs	r3, #2
 8102726:	2b0e      	cmp	r3, #14
 8102728:	d830      	bhi.n	810278c <calcAccResoltuion+0x74>
 810272a:	a201      	add	r2, pc, #4	; (adr r2, 8102730 <calcAccResoltuion+0x18>)
 810272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102730:	0810276d 	.word	0x0810276d
 8102734:	0810278d 	.word	0x0810278d
 8102738:	08102775 	.word	0x08102775
 810273c:	0810278d 	.word	0x0810278d
 8102740:	0810278d 	.word	0x0810278d
 8102744:	0810278d 	.word	0x0810278d
 8102748:	0810277d 	.word	0x0810277d
 810274c:	0810278d 	.word	0x0810278d
 8102750:	0810278d 	.word	0x0810278d
 8102754:	0810278d 	.word	0x0810278d
 8102758:	0810278d 	.word	0x0810278d
 810275c:	0810278d 	.word	0x0810278d
 8102760:	0810278d 	.word	0x0810278d
 8102764:	0810278d 	.word	0x0810278d
 8102768:	08102785 	.word	0x08102785
  {
    case 2:
      acc_res = ACC_FS_2G;
 810276c:	4b0b      	ldr	r3, [pc, #44]	; (810279c <calcAccResoltuion+0x84>)
 810276e:	4a0c      	ldr	r2, [pc, #48]	; (81027a0 <calcAccResoltuion+0x88>)
 8102770:	601a      	str	r2, [r3, #0]
    break;
 8102772:	e00c      	b.n	810278e <calcAccResoltuion+0x76>

    case 4:
      acc_res = ACC_FS_4G;
 8102774:	4b09      	ldr	r3, [pc, #36]	; (810279c <calcAccResoltuion+0x84>)
 8102776:	4a0b      	ldr	r2, [pc, #44]	; (81027a4 <calcAccResoltuion+0x8c>)
 8102778:	601a      	str	r2, [r3, #0]
     break;
 810277a:	e008      	b.n	810278e <calcAccResoltuion+0x76>

    case 8:
      acc_res = ACC_FS_8G;
 810277c:	4b07      	ldr	r3, [pc, #28]	; (810279c <calcAccResoltuion+0x84>)
 810277e:	4a0a      	ldr	r2, [pc, #40]	; (81027a8 <calcAccResoltuion+0x90>)
 8102780:	601a      	str	r2, [r3, #0]
      break;
 8102782:	e004      	b.n	810278e <calcAccResoltuion+0x76>

    case 16:
      acc_res = ACC_FS_16G;
 8102784:	4b05      	ldr	r3, [pc, #20]	; (810279c <calcAccResoltuion+0x84>)
 8102786:	4a09      	ldr	r2, [pc, #36]	; (81027ac <calcAccResoltuion+0x94>)
 8102788:	601a      	str	r2, [r3, #0]
      break;
 810278a:	e000      	b.n	810278e <calcAccResoltuion+0x76>

    default:
      break;
 810278c:	bf00      	nop

  }

}
 810278e:	bf00      	nop
 8102790:	370c      	adds	r7, #12
 8102792:	46bd      	mov	sp, r7
 8102794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102798:	4770      	bx	lr
 810279a:	bf00      	nop
 810279c:	1000020c 	.word	0x1000020c
 81027a0:	387fda40 	.word	0x387fda40
 81027a4:	38ffda40 	.word	0x38ffda40
 81027a8:	397fda40 	.word	0x397fda40
 81027ac:	3a3fe3b0 	.word	0x3a3fe3b0

081027b0 <calcMagResolution>:
void calcMagResolution(LSM9DS1Handle* imu)
{
 81027b0:	b480      	push	{r7}
 81027b2:	b083      	sub	sp, #12
 81027b4:	af00      	add	r7, sp, #0
 81027b6:	6078      	str	r0, [r7, #4]

  switch(imu->mag_settings.scale)
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	7f1b      	ldrb	r3, [r3, #28]
 81027bc:	3b02      	subs	r3, #2
 81027be:	2b0e      	cmp	r3, #14
 81027c0:	d830      	bhi.n	8102824 <calcMagResolution+0x74>
 81027c2:	a201      	add	r2, pc, #4	; (adr r2, 81027c8 <calcMagResolution+0x18>)
 81027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81027c8:	08102805 	.word	0x08102805
 81027cc:	08102825 	.word	0x08102825
 81027d0:	0810280d 	.word	0x0810280d
 81027d4:	08102825 	.word	0x08102825
 81027d8:	08102825 	.word	0x08102825
 81027dc:	08102825 	.word	0x08102825
 81027e0:	08102815 	.word	0x08102815
 81027e4:	08102825 	.word	0x08102825
 81027e8:	08102825 	.word	0x08102825
 81027ec:	08102825 	.word	0x08102825
 81027f0:	08102825 	.word	0x08102825
 81027f4:	08102825 	.word	0x08102825
 81027f8:	08102825 	.word	0x08102825
 81027fc:	08102825 	.word	0x08102825
 8102800:	0810281d 	.word	0x0810281d
  {
    case 2:
      mag_res = MAG_FS_4G;
 8102804:	4b0b      	ldr	r3, [pc, #44]	; (8102834 <calcMagResolution+0x84>)
 8102806:	4a0c      	ldr	r2, [pc, #48]	; (8102838 <calcMagResolution+0x88>)
 8102808:	601a      	str	r2, [r3, #0]
    break;
 810280a:	e00c      	b.n	8102826 <calcMagResolution+0x76>

    case 4:
      mag_res = MAG_FS_8G;
 810280c:	4b09      	ldr	r3, [pc, #36]	; (8102834 <calcMagResolution+0x84>)
 810280e:	4a0b      	ldr	r2, [pc, #44]	; (810283c <calcMagResolution+0x8c>)
 8102810:	601a      	str	r2, [r3, #0]
     break;
 8102812:	e008      	b.n	8102826 <calcMagResolution+0x76>

    case 8:
      mag_res = MAG_FS_12G;
 8102814:	4b07      	ldr	r3, [pc, #28]	; (8102834 <calcMagResolution+0x84>)
 8102816:	4a0a      	ldr	r2, [pc, #40]	; (8102840 <calcMagResolution+0x90>)
 8102818:	601a      	str	r2, [r3, #0]
      break;
 810281a:	e004      	b.n	8102826 <calcMagResolution+0x76>

    case 16:
      mag_res = MAG_FS_16G;
 810281c:	4b05      	ldr	r3, [pc, #20]	; (8102834 <calcMagResolution+0x84>)
 810281e:	4a09      	ldr	r2, [pc, #36]	; (8102844 <calcMagResolution+0x94>)
 8102820:	601a      	str	r2, [r3, #0]
      break;
 8102822:	e000      	b.n	8102826 <calcMagResolution+0x76>

    default:
      break;
 8102824:	bf00      	nop

  }

}
 8102826:	bf00      	nop
 8102828:	370c      	adds	r7, #12
 810282a:	46bd      	mov	sp, r7
 810282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102830:	4770      	bx	lr
 8102832:	bf00      	nop
 8102834:	10000210 	.word	0x10000210
 8102838:	3912ccf7 	.word	0x3912ccf7
 810283c:	39980b24 	.word	0x39980b24
 8102840:	39e1719f 	.word	0x39e1719f
 8102844:	3a180b24 	.word	0x3a180b24

08102848 <I2CReadBytes>:
   }
   return value;
}

uint8_t I2CReadBytes(uint8_t address, uint8_t reg, uint8_t* buffer, uint8_t numBytes)
{
 8102848:	b580      	push	{r7, lr}
 810284a:	b088      	sub	sp, #32
 810284c:	af04      	add	r7, sp, #16
 810284e:	603a      	str	r2, [r7, #0]
 8102850:	461a      	mov	r2, r3
 8102852:	4603      	mov	r3, r0
 8102854:	71fb      	strb	r3, [r7, #7]
 8102856:	460b      	mov	r3, r1
 8102858:	71bb      	strb	r3, [r7, #6]
 810285a:	4613      	mov	r3, r2
 810285c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;

  //status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes,100);
 810285e:	79fb      	ldrb	r3, [r7, #7]
 8102860:	b29b      	uxth	r3, r3
 8102862:	005b      	lsls	r3, r3, #1
 8102864:	b299      	uxth	r1, r3
 8102866:	79bb      	ldrb	r3, [r7, #6]
 8102868:	b29a      	uxth	r2, r3
 810286a:	797b      	ldrb	r3, [r7, #5]
 810286c:	b29b      	uxth	r3, r3
 810286e:	2064      	movs	r0, #100	; 0x64
 8102870:	9002      	str	r0, [sp, #8]
 8102872:	9301      	str	r3, [sp, #4]
 8102874:	683b      	ldr	r3, [r7, #0]
 8102876:	9300      	str	r3, [sp, #0]
 8102878:	2301      	movs	r3, #1
 810287a:	4807      	ldr	r0, [pc, #28]	; (8102898 <I2CReadBytes+0x50>)
 810287c:	f004 fb0c 	bl	8106e98 <HAL_I2C_Mem_Read>
 8102880:	4603      	mov	r3, r0
 8102882:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 8102884:	7bfb      	ldrb	r3, [r7, #15]
 8102886:	2b00      	cmp	r3, #0
 8102888:	d001      	beq.n	810288e <I2CReadBytes+0x46>
  {
    return HAL_ERROR;
 810288a:	2301      	movs	r3, #1
 810288c:	e000      	b.n	8102890 <I2CReadBytes+0x48>
  }

  return numBytes;
 810288e:	797b      	ldrb	r3, [r7, #5]

}
 8102890:	4618      	mov	r0, r3
 8102892:	3710      	adds	r7, #16
 8102894:	46bd      	mov	sp, r7
 8102896:	bd80      	pop	{r7, pc}
 8102898:	10000148 	.word	0x10000148

0810289c <WriteByte>:

HAL_StatusTypeDef WriteByte(uint8_t address, uint8_t reg, uint8_t data)
{
 810289c:	b580      	push	{r7, lr}
 810289e:	b088      	sub	sp, #32
 81028a0:	af04      	add	r7, sp, #16
 81028a2:	4603      	mov	r3, r0
 81028a4:	71fb      	strb	r3, [r7, #7]
 81028a6:	460b      	mov	r3, r1
 81028a8:	71bb      	strb	r3, [r7, #6]
 81028aa:	4613      	mov	r3, r2
 81028ac:	717b      	strb	r3, [r7, #5]

  HAL_StatusTypeDef status;

//  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
 81028ae:	79fb      	ldrb	r3, [r7, #7]
 81028b0:	b29b      	uxth	r3, r3
 81028b2:	005b      	lsls	r3, r3, #1
 81028b4:	b299      	uxth	r1, r3
 81028b6:	79bb      	ldrb	r3, [r7, #6]
 81028b8:	b29a      	uxth	r2, r3
 81028ba:	2364      	movs	r3, #100	; 0x64
 81028bc:	9302      	str	r3, [sp, #8]
 81028be:	2301      	movs	r3, #1
 81028c0:	9301      	str	r3, [sp, #4]
 81028c2:	1d7b      	adds	r3, r7, #5
 81028c4:	9300      	str	r3, [sp, #0]
 81028c6:	2301      	movs	r3, #1
 81028c8:	4807      	ldr	r0, [pc, #28]	; (81028e8 <WriteByte+0x4c>)
 81028ca:	f004 f9d1 	bl	8106c70 <HAL_I2C_Mem_Write>
 81028ce:	4603      	mov	r3, r0
 81028d0:	73fb      	strb	r3, [r7, #15]

  if(status !=HAL_OK)
 81028d2:	7bfb      	ldrb	r3, [r7, #15]
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d001      	beq.n	81028dc <WriteByte+0x40>
  {
    return HAL_ERROR;
 81028d8:	2301      	movs	r3, #1
 81028da:	e000      	b.n	81028de <WriteByte+0x42>
  }

  return HAL_OK;
 81028dc:	2300      	movs	r3, #0

}
 81028de:	4618      	mov	r0, r3
 81028e0:	3710      	adds	r7, #16
 81028e2:	46bd      	mov	sp, r7
 81028e4:	bd80      	pop	{r7, pc}
 81028e6:	bf00      	nop
 81028e8:	10000148 	.word	0x10000148

081028ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81028ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81028f0:	b082      	sub	sp, #8
 81028f2:	af00      	add	r7, sp, #0
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81028f4:	4b4b      	ldr	r3, [pc, #300]	; (8102a24 <main+0x138>)
 81028f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028fa:	4a4a      	ldr	r2, [pc, #296]	; (8102a24 <main+0x138>)
 81028fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102904:	4b47      	ldr	r3, [pc, #284]	; (8102a24 <main+0x138>)
 8102906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810290e:	607b      	str	r3, [r7, #4]
 8102910:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102912:	2001      	movs	r0, #1
 8102914:	f004 f90a 	bl	8106b2c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8102918:	f005 fd68 	bl	81083ec <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810291c:	2201      	movs	r2, #1
 810291e:	2102      	movs	r1, #2
 8102920:	2000      	movs	r0, #0
 8102922:	f005 fce9 	bl	81082f8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102926:	4b40      	ldr	r3, [pc, #256]	; (8102a28 <main+0x13c>)
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	091b      	lsrs	r3, r3, #4
 810292c:	f003 030f 	and.w	r3, r3, #15
 8102930:	2b07      	cmp	r3, #7
 8102932:	d108      	bne.n	8102946 <main+0x5a>
 8102934:	4b3d      	ldr	r3, [pc, #244]	; (8102a2c <main+0x140>)
 8102936:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810293a:	4a3c      	ldr	r2, [pc, #240]	; (8102a2c <main+0x140>)
 810293c:	f043 0301 	orr.w	r3, r3, #1
 8102940:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102944:	e007      	b.n	8102956 <main+0x6a>
 8102946:	4b39      	ldr	r3, [pc, #228]	; (8102a2c <main+0x140>)
 8102948:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810294c:	4a37      	ldr	r2, [pc, #220]	; (8102a2c <main+0x140>)
 810294e:	f043 0301 	orr.w	r3, r3, #1
 8102952:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102956:	f000 fea3 	bl	81036a0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810295a:	f7ff f93b 	bl	8101bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 810295e:	f7ff f8e1 	bl	8101b24 <MX_DMA_Init>
  MX_SPI1_Init();
 8102962:	f000 f9bb 	bl	8102cdc <MX_SPI1_Init>
  MX_I2C1_Init();
 8102966:	f7ff f989 	bl	8101c7c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 810296a:	f000 fd51 	bl	8103410 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
   ConfigSensors();
 810296e:	f000 f97b 	bl	8102c68 <ConfigSensors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    TimerCount_Start();
 8102972:	4b2f      	ldr	r3, [pc, #188]	; (8102a30 <main+0x144>)
 8102974:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8102978:	605a      	str	r2, [r3, #4]
 810297a:	4b2d      	ldr	r3, [pc, #180]	; (8102a30 <main+0x144>)
 810297c:	2200      	movs	r2, #0
 810297e:	609a      	str	r2, [r3, #8]
 8102980:	4b2b      	ldr	r3, [pc, #172]	; (8102a30 <main+0x144>)
 8102982:	2205      	movs	r2, #5
 8102984:	601a      	str	r2, [r3, #0]
    ReadSensors();
 8102986:	f000 f89d 	bl	8102ac4 <ReadSensors>
    TimerCount_Stop(nb_cycles);
 810298a:	4b29      	ldr	r3, [pc, #164]	; (8102a30 <main+0x144>)
 810298c:	2200      	movs	r2, #0
 810298e:	601a      	str	r2, [r3, #0]
 8102990:	4b27      	ldr	r3, [pc, #156]	; (8102a30 <main+0x144>)
 8102992:	689b      	ldr	r3, [r3, #8]
 8102994:	4a27      	ldr	r2, [pc, #156]	; (8102a34 <main+0x148>)
 8102996:	6013      	str	r3, [r2, #0]
 8102998:	4b26      	ldr	r3, [pc, #152]	; (8102a34 <main+0x148>)
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 81029a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 81029a4:	4a23      	ldr	r2, [pc, #140]	; (8102a34 <main+0x148>)
 81029a6:	6013      	str	r3, [r2, #0]
    duration_us = (uint32_t)(((uint64_t)US_IN_SECOND * (nb_cycles)) / SystemCoreClock);
 81029a8:	4b22      	ldr	r3, [pc, #136]	; (8102a34 <main+0x148>)
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	461c      	mov	r4, r3
 81029ae:	f04f 0500 	mov.w	r5, #0
 81029b2:	4622      	mov	r2, r4
 81029b4:	462b      	mov	r3, r5
 81029b6:	f04f 0000 	mov.w	r0, #0
 81029ba:	f04f 0100 	mov.w	r1, #0
 81029be:	0159      	lsls	r1, r3, #5
 81029c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 81029c4:	0150      	lsls	r0, r2, #5
 81029c6:	4602      	mov	r2, r0
 81029c8:	460b      	mov	r3, r1
 81029ca:	1b12      	subs	r2, r2, r4
 81029cc:	eb63 0305 	sbc.w	r3, r3, r5
 81029d0:	f04f 0000 	mov.w	r0, #0
 81029d4:	f04f 0100 	mov.w	r1, #0
 81029d8:	0259      	lsls	r1, r3, #9
 81029da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 81029de:	0250      	lsls	r0, r2, #9
 81029e0:	4602      	mov	r2, r0
 81029e2:	460b      	mov	r3, r1
 81029e4:	1912      	adds	r2, r2, r4
 81029e6:	eb45 0303 	adc.w	r3, r5, r3
 81029ea:	f04f 0000 	mov.w	r0, #0
 81029ee:	f04f 0100 	mov.w	r1, #0
 81029f2:	0199      	lsls	r1, r3, #6
 81029f4:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 81029f8:	0190      	lsls	r0, r2, #6
 81029fa:	1a80      	subs	r0, r0, r2
 81029fc:	eb61 0103 	sbc.w	r1, r1, r3
 8102a00:	eb10 0804 	adds.w	r8, r0, r4
 8102a04:	eb41 0905 	adc.w	r9, r1, r5
 8102a08:	4b0b      	ldr	r3, [pc, #44]	; (8102a38 <main+0x14c>)
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	461a      	mov	r2, r3
 8102a0e:	f04f 0300 	mov.w	r3, #0
 8102a12:	4640      	mov	r0, r8
 8102a14:	4649      	mov	r1, r9
 8102a16:	f7fe fa79 	bl	8100f0c <__aeabi_uldivmod>
 8102a1a:	4602      	mov	r2, r0
 8102a1c:	460b      	mov	r3, r1
 8102a1e:	4b07      	ldr	r3, [pc, #28]	; (8102a3c <main+0x150>)
 8102a20:	601a      	str	r2, [r3, #0]
    TimerCount_Start();
 8102a22:	e7a6      	b.n	8102972 <main+0x86>
 8102a24:	58024400 	.word	0x58024400
 8102a28:	e000ed00 	.word	0xe000ed00
 8102a2c:	58026400 	.word	0x58026400
 8102a30:	e000e010 	.word	0xe000e010
 8102a34:	100000bc 	.word	0x100000bc
 8102a38:	10000000 	.word	0x10000000
 8102a3c:	100000b8 	.word	0x100000b8

08102a40 <GpsTask>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void GpsTask(void)
{
 8102a40:	b580      	push	{r7, lr}
 8102a42:	af00      	add	r7, sp, #0
     processGPS(&gps);
 8102a44:	4803      	ldr	r0, [pc, #12]	; (8102a54 <GpsTask+0x14>)
 8102a46:	f000 fb47 	bl	81030d8 <processGPS>
     M4DataToM7(GPS_DATA_TYPE);
 8102a4a:	2001      	movs	r0, #1
 8102a4c:	f000 f848 	bl	8102ae0 <M4DataToM7>
}
 8102a50:	bf00      	nop
 8102a52:	bd80      	pop	{r7, pc}
 8102a54:	10000218 	.word	0x10000218

08102a58 <AccelTask>:
void AccelTask(void)
{
 8102a58:	b580      	push	{r7, lr}
 8102a5a:	af00      	add	r7, sp, #0
    readAccel(&imu);
 8102a5c:	4803      	ldr	r0, [pc, #12]	; (8102a6c <AccelTask+0x14>)
 8102a5e:	f7ff fddb 	bl	8102618 <readAccel>
    M4DataToM7(ACC_DATA_TYPE);
 8102a62:	2003      	movs	r0, #3
 8102a64:	f000 f83c 	bl	8102ae0 <M4DataToM7>
}
 8102a68:	bf00      	nop
 8102a6a:	bd80      	pop	{r7, pc}
 8102a6c:	10000298 	.word	0x10000298

08102a70 <GyroTask>:
void GyroTask(void)
{
 8102a70:	b580      	push	{r7, lr}
 8102a72:	af00      	add	r7, sp, #0
    readGyro(&imu);
 8102a74:	4803      	ldr	r0, [pc, #12]	; (8102a84 <GyroTask+0x14>)
 8102a76:	f7ff fd2d 	bl	81024d4 <readGyro>
    //readTemp(&imu);
    M4DataToM7(GYRO_DATA_TYPE);
 8102a7a:	2004      	movs	r0, #4
 8102a7c:	f000 f830 	bl	8102ae0 <M4DataToM7>
}
 8102a80:	bf00      	nop
 8102a82:	bd80      	pop	{r7, pc}
 8102a84:	10000298 	.word	0x10000298

08102a88 <MagTask>:
void MagTask(void)
{
 8102a88:	b580      	push	{r7, lr}
 8102a8a:	af00      	add	r7, sp, #0
    readMag(&imu);
 8102a8c:	4803      	ldr	r0, [pc, #12]	; (8102a9c <MagTask+0x14>)
 8102a8e:	f7ff fd72 	bl	8102576 <readMag>
    M4DataToM7(MAG_DATA_TYPE);
 8102a92:	2002      	movs	r0, #2
 8102a94:	f000 f824 	bl	8102ae0 <M4DataToM7>
}
 8102a98:	bf00      	nop
 8102a9a:	bd80      	pop	{r7, pc}
 8102a9c:	10000298 	.word	0x10000298

08102aa0 <BaroTask>:

void BaroTask(void)
{
 8102aa0:	b580      	push	{r7, lr}
 8102aa2:	af00      	add	r7, sp, #0
    ReadTemp(&baro);
 8102aa4:	4806      	ldr	r0, [pc, #24]	; (8102ac0 <BaroTask+0x20>)
 8102aa6:	f7fe fc81 	bl	81013ac <ReadTemp>
    ReadPressure(&baro);
 8102aaa:	4805      	ldr	r0, [pc, #20]	; (8102ac0 <BaroTask+0x20>)
 8102aac:	f7fe fcce 	bl	810144c <ReadPressure>
    ReadAltitude(&baro);
 8102ab0:	4803      	ldr	r0, [pc, #12]	; (8102ac0 <BaroTask+0x20>)
 8102ab2:	f7fe fead 	bl	8101810 <ReadAltitude>

    M4DataToM7(BARO_DATA_TYPE);
 8102ab6:	2005      	movs	r0, #5
 8102ab8:	f000 f812 	bl	8102ae0 <M4DataToM7>

}
 8102abc:	bf00      	nop
 8102abe:	bd80      	pop	{r7, pc}
 8102ac0:	100002e4 	.word	0x100002e4

08102ac4 <ReadSensors>:
  notif_rx = 1;
}


void ReadSensors(void)
{
 8102ac4:	b580      	push	{r7, lr}
 8102ac6:	af00      	add	r7, sp, #0
  GpsTask();
 8102ac8:	f7ff ffba 	bl	8102a40 <GpsTask>

  AccelTask();
 8102acc:	f7ff ffc4 	bl	8102a58 <AccelTask>

  GyroTask();
 8102ad0:	f7ff ffce 	bl	8102a70 <GyroTask>

  MagTask();
 8102ad4:	f7ff ffd8 	bl	8102a88 <MagTask>

  BaroTask();
 8102ad8:	f7ff ffe2 	bl	8102aa0 <BaroTask>

}
 8102adc:	bf00      	nop
 8102ade:	bd80      	pop	{r7, pc}

08102ae0 <M4DataToM7>:
void M4DataToM7(uint8_t data_type)
{
 8102ae0:	b580      	push	{r7, lr}
 8102ae2:	b082      	sub	sp, #8
 8102ae4:	af00      	add	r7, sp, #0
 8102ae6:	4603      	mov	r3, r0
 8102ae8:	71fb      	strb	r3, [r7, #7]

  switch (data_type)
 8102aea:	79fb      	ldrb	r3, [r7, #7]
 8102aec:	3b01      	subs	r3, #1
 8102aee:	2b04      	cmp	r3, #4
 8102af0:	f200 80a4 	bhi.w	8102c3c <M4DataToM7+0x15c>
 8102af4:	a201      	add	r2, pc, #4	; (adr r2, 8102afc <M4DataToM7+0x1c>)
 8102af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102afa:	bf00      	nop
 8102afc:	08102b11 	.word	0x08102b11
 8102b00:	08102bdf 	.word	0x08102bdf
 8102b04:	08102b77 	.word	0x08102b77
 8102b08:	08102bab 	.word	0x08102bab
 8102b0c:	08102c13 	.word	0x08102c13
  {
    case GPS_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102b10:	2000      	movs	r0, #0
 8102b12:	f003 ffdd 	bl	8106ad0 <HAL_HSEM_FastTake>
 8102b16:	4603      	mov	r3, r0
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	d127      	bne.n	8102b6c <M4DataToM7+0x8c>
      {

        gps_values_m4->gps_latitude = gps.latitude;
 8102b1c:	4b4a      	ldr	r3, [pc, #296]	; (8102c48 <M4DataToM7+0x168>)
 8102b1e:	681b      	ldr	r3, [r3, #0]
 8102b20:	4a4a      	ldr	r2, [pc, #296]	; (8102c4c <M4DataToM7+0x16c>)
 8102b22:	6812      	ldr	r2, [r2, #0]
 8102b24:	601a      	str	r2, [r3, #0]
        gps_values_m4->gps_longitude = gps.longitude;
 8102b26:	4b48      	ldr	r3, [pc, #288]	; (8102c48 <M4DataToM7+0x168>)
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a48      	ldr	r2, [pc, #288]	; (8102c4c <M4DataToM7+0x16c>)
 8102b2c:	6852      	ldr	r2, [r2, #4]
 8102b2e:	605a      	str	r2, [r3, #4]
        gps_values_m4->gps_altitude = gps.altitude;
 8102b30:	4b45      	ldr	r3, [pc, #276]	; (8102c48 <M4DataToM7+0x168>)
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	4a45      	ldr	r2, [pc, #276]	; (8102c4c <M4DataToM7+0x16c>)
 8102b36:	6892      	ldr	r2, [r2, #8]
 8102b38:	609a      	str	r2, [r3, #8]
        gps_values_m4->gps_velocity_x = gps.vel_x;
 8102b3a:	4b43      	ldr	r3, [pc, #268]	; (8102c48 <M4DataToM7+0x168>)
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a43      	ldr	r2, [pc, #268]	; (8102c4c <M4DataToM7+0x16c>)
 8102b40:	68d2      	ldr	r2, [r2, #12]
 8102b42:	60da      	str	r2, [r3, #12]
        gps_values_m4->gps_velocity_y = gps.vel_y;
 8102b44:	4b40      	ldr	r3, [pc, #256]	; (8102c48 <M4DataToM7+0x168>)
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	4a40      	ldr	r2, [pc, #256]	; (8102c4c <M4DataToM7+0x16c>)
 8102b4a:	6912      	ldr	r2, [r2, #16]
 8102b4c:	611a      	str	r2, [r3, #16]
        gps_values_m4->gps_velocity_z = gps.vel_z;
 8102b4e:	4b3e      	ldr	r3, [pc, #248]	; (8102c48 <M4DataToM7+0x168>)
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	4a3e      	ldr	r2, [pc, #248]	; (8102c4c <M4DataToM7+0x16c>)
 8102b54:	6952      	ldr	r2, [r2, #20]
 8102b56:	615a      	str	r2, [r3, #20]
        gps_values_m4->gnd_speed = gps.gndSpeed;
 8102b58:	4b3b      	ldr	r3, [pc, #236]	; (8102c48 <M4DataToM7+0x168>)
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	4a3b      	ldr	r2, [pc, #236]	; (8102c4c <M4DataToM7+0x16c>)
 8102b5e:	6992      	ldr	r2, [r2, #24]
 8102b60:	619a      	str	r2, [r3, #24]
        gps_values_m4->gps_satellites = gps.num_satellites;
 8102b62:	4b39      	ldr	r3, [pc, #228]	; (8102c48 <M4DataToM7+0x168>)
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	4a39      	ldr	r2, [pc, #228]	; (8102c4c <M4DataToM7+0x16c>)
 8102b68:	69d2      	ldr	r2, [r2, #28]
 8102b6a:	61da      	str	r2, [r3, #28]
      }
      // Release semaphore
      HAL_HSEM_Release(HSEM_ID_0, 0);
 8102b6c:	2100      	movs	r1, #0
 8102b6e:	2000      	movs	r0, #0
 8102b70:	f003 ffc8 	bl	8106b04 <HAL_HSEM_Release>
      break;
 8102b74:	e063      	b.n	8102c3e <M4DataToM7+0x15e>
    }

    case ACC_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102b76:	2000      	movs	r0, #0
 8102b78:	f003 ffaa 	bl	8106ad0 <HAL_HSEM_FastTake>
 8102b7c:	4603      	mov	r3, r0
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d10e      	bne.n	8102ba0 <M4DataToM7+0xc0>
      {
        acc_values_m4->imu_acc_x = imu.accel_values.x;
 8102b82:	4b33      	ldr	r3, [pc, #204]	; (8102c50 <M4DataToM7+0x170>)
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	4a33      	ldr	r2, [pc, #204]	; (8102c54 <M4DataToM7+0x174>)
 8102b88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8102b8a:	601a      	str	r2, [r3, #0]
        acc_values_m4->imu_acc_y = imu.accel_values.y;
 8102b8c:	4b30      	ldr	r3, [pc, #192]	; (8102c50 <M4DataToM7+0x170>)
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	4a30      	ldr	r2, [pc, #192]	; (8102c54 <M4DataToM7+0x174>)
 8102b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8102b94:	605a      	str	r2, [r3, #4]
        acc_values_m4->imu_acc_z = imu.accel_values.z;
 8102b96:	4b2e      	ldr	r3, [pc, #184]	; (8102c50 <M4DataToM7+0x170>)
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	4a2e      	ldr	r2, [pc, #184]	; (8102c54 <M4DataToM7+0x174>)
 8102b9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8102b9e:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102ba0:	2100      	movs	r1, #0
 8102ba2:	2000      	movs	r0, #0
 8102ba4:	f003 ffae 	bl	8106b04 <HAL_HSEM_Release>

      break;
 8102ba8:	e049      	b.n	8102c3e <M4DataToM7+0x15e>
    }

    case GYRO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102baa:	2000      	movs	r0, #0
 8102bac:	f003 ff90 	bl	8106ad0 <HAL_HSEM_FastTake>
 8102bb0:	4603      	mov	r3, r0
 8102bb2:	2b00      	cmp	r3, #0
 8102bb4:	d10e      	bne.n	8102bd4 <M4DataToM7+0xf4>
      {
        gyro_values_m4->imu_gyro_x = imu.gyro_values.x;
 8102bb6:	4b28      	ldr	r3, [pc, #160]	; (8102c58 <M4DataToM7+0x178>)
 8102bb8:	681b      	ldr	r3, [r3, #0]
 8102bba:	4a26      	ldr	r2, [pc, #152]	; (8102c54 <M4DataToM7+0x174>)
 8102bbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102bbe:	601a      	str	r2, [r3, #0]
        gyro_values_m4->imu_gyro_y = imu.gyro_values.y;
 8102bc0:	4b25      	ldr	r3, [pc, #148]	; (8102c58 <M4DataToM7+0x178>)
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	4a23      	ldr	r2, [pc, #140]	; (8102c54 <M4DataToM7+0x174>)
 8102bc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102bc8:	605a      	str	r2, [r3, #4]
        gyro_values_m4->imu_gyro_z = imu.gyro_values.z;
 8102bca:	4b23      	ldr	r3, [pc, #140]	; (8102c58 <M4DataToM7+0x178>)
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4a21      	ldr	r2, [pc, #132]	; (8102c54 <M4DataToM7+0x174>)
 8102bd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102bd2:	609a      	str	r2, [r3, #8]
      }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102bd4:	2100      	movs	r1, #0
 8102bd6:	2000      	movs	r0, #0
 8102bd8:	f003 ff94 	bl	8106b04 <HAL_HSEM_Release>

      break;
 8102bdc:	e02f      	b.n	8102c3e <M4DataToM7+0x15e>
    }

    case MAG_DATA_TYPE:
    {

      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102bde:	2000      	movs	r0, #0
 8102be0:	f003 ff76 	bl	8106ad0 <HAL_HSEM_FastTake>
 8102be4:	4603      	mov	r3, r0
 8102be6:	2b00      	cmp	r3, #0
 8102be8:	d10e      	bne.n	8102c08 <M4DataToM7+0x128>
        {
          mag_values_m4->imu_mag_x = imu.mag_values.x;
 8102bea:	4b1c      	ldr	r3, [pc, #112]	; (8102c5c <M4DataToM7+0x17c>)
 8102bec:	681b      	ldr	r3, [r3, #0]
 8102bee:	4a19      	ldr	r2, [pc, #100]	; (8102c54 <M4DataToM7+0x174>)
 8102bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8102bf2:	601a      	str	r2, [r3, #0]
          mag_values_m4->imu_mag_y = imu.mag_values.y;
 8102bf4:	4b19      	ldr	r3, [pc, #100]	; (8102c5c <M4DataToM7+0x17c>)
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	4a16      	ldr	r2, [pc, #88]	; (8102c54 <M4DataToM7+0x174>)
 8102bfa:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8102bfc:	605a      	str	r2, [r3, #4]
          mag_values_m4->imu_mag_z = imu.mag_values.z;
 8102bfe:	4b17      	ldr	r3, [pc, #92]	; (8102c5c <M4DataToM7+0x17c>)
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	4a14      	ldr	r2, [pc, #80]	; (8102c54 <M4DataToM7+0x174>)
 8102c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8102c06:	609a      	str	r2, [r3, #8]
        }
       // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102c08:	2100      	movs	r1, #0
 8102c0a:	2000      	movs	r0, #0
 8102c0c:	f003 ff7a 	bl	8106b04 <HAL_HSEM_Release>
      break;
 8102c10:	e015      	b.n	8102c3e <M4DataToM7+0x15e>
    }

    case BARO_DATA_TYPE:
    {
      if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8102c12:	2000      	movs	r0, #0
 8102c14:	f003 ff5c 	bl	8106ad0 <HAL_HSEM_FastTake>
 8102c18:	4603      	mov	r3, r0
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d109      	bne.n	8102c32 <M4DataToM7+0x152>
      {
          baro_values_m4->baro_altitude = baro.altitude;
 8102c1e:	4b10      	ldr	r3, [pc, #64]	; (8102c60 <M4DataToM7+0x180>)
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	4a10      	ldr	r2, [pc, #64]	; (8102c64 <M4DataToM7+0x184>)
 8102c24:	6892      	ldr	r2, [r2, #8]
 8102c26:	605a      	str	r2, [r3, #4]
          baro_values_m4->baro_pressure = baro.pressure;
 8102c28:	4b0d      	ldr	r3, [pc, #52]	; (8102c60 <M4DataToM7+0x180>)
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a0d      	ldr	r2, [pc, #52]	; (8102c64 <M4DataToM7+0x184>)
 8102c2e:	6852      	ldr	r2, [r2, #4]
 8102c30:	601a      	str	r2, [r3, #0]
      }
             // Release semaphore
       HAL_HSEM_Release(HSEM_ID_0, 0);
 8102c32:	2100      	movs	r1, #0
 8102c34:	2000      	movs	r0, #0
 8102c36:	f003 ff65 	bl	8106b04 <HAL_HSEM_Release>
      break;
 8102c3a:	e000      	b.n	8102c3e <M4DataToM7+0x15e>
    }

    default:
      break;
 8102c3c:	bf00      	nop

  }



}
 8102c3e:	bf00      	nop
 8102c40:	3708      	adds	r7, #8
 8102c42:	46bd      	mov	sp, r7
 8102c44:	bd80      	pop	{r7, pc}
 8102c46:	bf00      	nop
 8102c48:	10000018 	.word	0x10000018
 8102c4c:	10000218 	.word	0x10000218
 8102c50:	10000008 	.word	0x10000008
 8102c54:	10000298 	.word	0x10000298
 8102c58:	1000000c 	.word	0x1000000c
 8102c5c:	10000010 	.word	0x10000010
 8102c60:	10000014 	.word	0x10000014
 8102c64:	100002e4 	.word	0x100002e4

08102c68 <ConfigSensors>:




void ConfigSensors(void)
{
 8102c68:	b580      	push	{r7, lr}
 8102c6a:	b082      	sub	sp, #8
 8102c6c:	af00      	add	r7, sp, #0

  // COnfigure GPS Sensor
  ConfigGPS();
 8102c6e:	f000 fab1 	bl	81031d4 <ConfigGPS>

  // Configure BMP280
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8102c72:	2201      	movs	r2, #1
 8102c74:	2110      	movs	r1, #16
 8102c76:	4813      	ldr	r0, [pc, #76]	; (8102cc4 <ConfigSensors+0x5c>)
 8102c78:	f003 ff10 	bl	8106a9c <HAL_GPIO_WritePin>
  uint8_t baro_res = CheckBMP280ChipID();
 8102c7c:	f7fe fade 	bl	810123c <CheckBMP280ChipID>
 8102c80:	4603      	mov	r3, r0
 8102c82:	71fb      	strb	r3, [r7, #7]
  if(baro_res == HAL_OK)
 8102c84:	79fb      	ldrb	r3, [r7, #7]
 8102c86:	2b00      	cmp	r3, #0
 8102c88:	d10f      	bne.n	8102caa <ConfigSensors+0x42>
  {
    uint8_t reset_chip_ok = ResetBMP280();
 8102c8a:	f7fe ff29 	bl	8101ae0 <ResetBMP280>
 8102c8e:	4603      	mov	r3, r0
 8102c90:	71bb      	strb	r3, [r7, #6]
    HAL_Delay(1000);
 8102c92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102c96:	f000 fdb7 	bl	8103808 <HAL_Delay>
    uint8_t set_config_ok = setConfig(&baro);
 8102c9a:	480b      	ldr	r0, [pc, #44]	; (8102cc8 <ConfigSensors+0x60>)
 8102c9c:	f7fe fe74 	bl	8101988 <setConfig>
 8102ca0:	4603      	mov	r3, r0
 8102ca2:	717b      	strb	r3, [r7, #5]
    ReadCalibCoefficients(&baro);
 8102ca4:	4808      	ldr	r0, [pc, #32]	; (8102cc8 <ConfigSensors+0x60>)
 8102ca6:	f7fe fe13 	bl	81018d0 <ReadCalibCoefficients>
  }

  HAL_Delay(1000);
 8102caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8102cae:	f000 fdab 	bl	8103808 <HAL_Delay>

  // Configure IMU;
  uint16_t imu_res = setup(&imu);
 8102cb2:	4806      	ldr	r0, [pc, #24]	; (8102ccc <ConfigSensors+0x64>)
 8102cb4:	f7ff f997 	bl	8101fe6 <setup>
 8102cb8:	4603      	mov	r3, r0
 8102cba:	807b      	strh	r3, [r7, #2]


}
 8102cbc:	bf00      	nop
 8102cbe:	3708      	adds	r7, #8
 8102cc0:	46bd      	mov	sp, r7
 8102cc2:	bd80      	pop	{r7, pc}
 8102cc4:	58020000 	.word	0x58020000
 8102cc8:	100002e4 	.word	0x100002e4
 8102ccc:	10000298 	.word	0x10000298

08102cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102cd0:	b480      	push	{r7}
 8102cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102cd4:	b672      	cpsid	i
}
 8102cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102cd8:	e7fe      	b.n	8102cd8 <Error_Handler+0x8>
	...

08102cdc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8102cdc:	b580      	push	{r7, lr}
 8102cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102ce0:	4b27      	ldr	r3, [pc, #156]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102ce2:	4a28      	ldr	r2, [pc, #160]	; (8102d84 <MX_SPI1_Init+0xa8>)
 8102ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102ce6:	4b26      	ldr	r3, [pc, #152]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102ce8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8102cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102cee:	4b24      	ldr	r3, [pc, #144]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102cf0:	2200      	movs	r2, #0
 8102cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102cf4:	4b22      	ldr	r3, [pc, #136]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102cf6:	2207      	movs	r2, #7
 8102cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102cfa:	4b21      	ldr	r3, [pc, #132]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102cfc:	2200      	movs	r2, #0
 8102cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102d00:	4b1f      	ldr	r3, [pc, #124]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d02:	2200      	movs	r2, #0
 8102d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102d06:	4b1e      	ldr	r3, [pc, #120]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102d0e:	4b1c      	ldr	r3, [pc, #112]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d10:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8102d14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8102d16:	4b1a      	ldr	r3, [pc, #104]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d18:	2200      	movs	r2, #0
 8102d1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102d1c:	4b18      	ldr	r3, [pc, #96]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d1e:	2200      	movs	r2, #0
 8102d20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102d22:	4b17      	ldr	r3, [pc, #92]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d24:	2200      	movs	r2, #0
 8102d26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102d28:	4b15      	ldr	r3, [pc, #84]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d2a:	2200      	movs	r2, #0
 8102d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102d2e:	4b14      	ldr	r3, [pc, #80]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102d34:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102d36:	4b12      	ldr	r3, [pc, #72]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d38:	2200      	movs	r2, #0
 8102d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102d3c:	4b10      	ldr	r3, [pc, #64]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d3e:	2200      	movs	r2, #0
 8102d40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102d42:	4b0f      	ldr	r3, [pc, #60]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d44:	2200      	movs	r2, #0
 8102d46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102d48:	4b0d      	ldr	r3, [pc, #52]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d4a:	2200      	movs	r2, #0
 8102d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102d4e:	4b0c      	ldr	r3, [pc, #48]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d50:	2200      	movs	r2, #0
 8102d52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102d54:	4b0a      	ldr	r3, [pc, #40]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d56:	2200      	movs	r2, #0
 8102d58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102d5a:	4b09      	ldr	r3, [pc, #36]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d5c:	2200      	movs	r2, #0
 8102d5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102d60:	4b07      	ldr	r3, [pc, #28]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d62:	2200      	movs	r2, #0
 8102d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102d66:	4b06      	ldr	r3, [pc, #24]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d68:	2200      	movs	r2, #0
 8102d6a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102d6c:	4804      	ldr	r0, [pc, #16]	; (8102d80 <MX_SPI1_Init+0xa4>)
 8102d6e:	f007 f885 	bl	8109e7c <HAL_SPI_Init>
 8102d72:	4603      	mov	r3, r0
 8102d74:	2b00      	cmp	r3, #0
 8102d76:	d001      	beq.n	8102d7c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102d78:	f7ff ffaa 	bl	8102cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102d7c:	bf00      	nop
 8102d7e:	bd80      	pop	{r7, pc}
 8102d80:	10000318 	.word	0x10000318
 8102d84:	40013000 	.word	0x40013000

08102d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102d88:	b580      	push	{r7, lr}
 8102d8a:	b0b8      	sub	sp, #224	; 0xe0
 8102d8c:	af00      	add	r7, sp, #0
 8102d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102d94:	2200      	movs	r2, #0
 8102d96:	601a      	str	r2, [r3, #0]
 8102d98:	605a      	str	r2, [r3, #4]
 8102d9a:	609a      	str	r2, [r3, #8]
 8102d9c:	60da      	str	r2, [r3, #12]
 8102d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102da0:	f107 0310 	add.w	r3, r7, #16
 8102da4:	22bc      	movs	r2, #188	; 0xbc
 8102da6:	2100      	movs	r1, #0
 8102da8:	4618      	mov	r0, r3
 8102daa:	f009 fc7f 	bl	810c6ac <memset>
  if(spiHandle->Instance==SPI1)
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a57      	ldr	r2, [pc, #348]	; (8102f10 <HAL_SPI_MspInit+0x188>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	f040 80a6 	bne.w	8102f06 <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8102dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8102dc0:	2300      	movs	r3, #0
 8102dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102dc4:	f107 0310 	add.w	r3, r7, #16
 8102dc8:	4618      	mov	r0, r3
 8102dca:	f005 fcf5 	bl	81087b8 <HAL_RCCEx_PeriphCLKConfig>
 8102dce:	4603      	mov	r3, r0
 8102dd0:	2b00      	cmp	r3, #0
 8102dd2:	d001      	beq.n	8102dd8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8102dd4:	f7ff ff7c 	bl	8102cd0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102dd8:	4b4e      	ldr	r3, [pc, #312]	; (8102f14 <HAL_SPI_MspInit+0x18c>)
 8102dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102dde:	4a4d      	ldr	r2, [pc, #308]	; (8102f14 <HAL_SPI_MspInit+0x18c>)
 8102de0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102de4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102de8:	4b4a      	ldr	r3, [pc, #296]	; (8102f14 <HAL_SPI_MspInit+0x18c>)
 8102dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102df2:	60fb      	str	r3, [r7, #12]
 8102df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102df6:	4b47      	ldr	r3, [pc, #284]	; (8102f14 <HAL_SPI_MspInit+0x18c>)
 8102df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102dfc:	4a45      	ldr	r2, [pc, #276]	; (8102f14 <HAL_SPI_MspInit+0x18c>)
 8102dfe:	f043 0301 	orr.w	r3, r3, #1
 8102e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102e06:	4b43      	ldr	r3, [pc, #268]	; (8102f14 <HAL_SPI_MspInit+0x18c>)
 8102e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102e0c:	f003 0301 	and.w	r3, r3, #1
 8102e10:	60bb      	str	r3, [r7, #8]
 8102e12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8102e14:	23e0      	movs	r3, #224	; 0xe0
 8102e16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102e1a:	2302      	movs	r3, #2
 8102e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e20:	2300      	movs	r3, #0
 8102e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e26:	2300      	movs	r3, #0
 8102e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102e2c:	2305      	movs	r3, #5
 8102e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102e32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102e36:	4619      	mov	r1, r3
 8102e38:	4837      	ldr	r0, [pc, #220]	; (8102f18 <HAL_SPI_MspInit+0x190>)
 8102e3a:	f003 fc7f 	bl	810673c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102e3e:	4b37      	ldr	r3, [pc, #220]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e40:	4a37      	ldr	r2, [pc, #220]	; (8102f20 <HAL_SPI_MspInit+0x198>)
 8102e42:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102e44:	4b35      	ldr	r3, [pc, #212]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e46:	2225      	movs	r2, #37	; 0x25
 8102e48:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102e4a:	4b34      	ldr	r3, [pc, #208]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e4c:	2200      	movs	r2, #0
 8102e4e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102e50:	4b32      	ldr	r3, [pc, #200]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e52:	2200      	movs	r2, #0
 8102e54:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102e56:	4b31      	ldr	r3, [pc, #196]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102e5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102e5e:	4b2f      	ldr	r3, [pc, #188]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e60:	2200      	movs	r2, #0
 8102e62:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102e64:	4b2d      	ldr	r3, [pc, #180]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e66:	2200      	movs	r2, #0
 8102e68:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102e6a:	4b2c      	ldr	r3, [pc, #176]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e6c:	2200      	movs	r2, #0
 8102e6e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102e70:	4b2a      	ldr	r3, [pc, #168]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102e76:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102e78:	4b28      	ldr	r3, [pc, #160]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e7a:	2200      	movs	r2, #0
 8102e7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102e7e:	4827      	ldr	r0, [pc, #156]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e80:	f000 fe0a 	bl	8103a98 <HAL_DMA_Init>
 8102e84:	4603      	mov	r3, r0
 8102e86:	2b00      	cmp	r3, #0
 8102e88:	d001      	beq.n	8102e8e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102e8a:	f7ff ff21 	bl	8102cd0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	4a22      	ldr	r2, [pc, #136]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e92:	67da      	str	r2, [r3, #124]	; 0x7c
 8102e94:	4a21      	ldr	r2, [pc, #132]	; (8102f1c <HAL_SPI_MspInit+0x194>)
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102e9a:	4b22      	ldr	r3, [pc, #136]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102e9c:	4a22      	ldr	r2, [pc, #136]	; (8102f28 <HAL_SPI_MspInit+0x1a0>)
 8102e9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102ea0:	4b20      	ldr	r3, [pc, #128]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ea2:	2226      	movs	r2, #38	; 0x26
 8102ea4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102ea6:	4b1f      	ldr	r3, [pc, #124]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ea8:	2240      	movs	r2, #64	; 0x40
 8102eaa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102eac:	4b1d      	ldr	r3, [pc, #116]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102eae:	2200      	movs	r2, #0
 8102eb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102eb2:	4b1c      	ldr	r3, [pc, #112]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102eb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102eba:	4b1a      	ldr	r3, [pc, #104]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ebc:	2200      	movs	r2, #0
 8102ebe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102ec0:	4b18      	ldr	r3, [pc, #96]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ec2:	2200      	movs	r2, #0
 8102ec4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8102ec6:	4b17      	ldr	r3, [pc, #92]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ec8:	2200      	movs	r2, #0
 8102eca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102ecc:	4b15      	ldr	r3, [pc, #84]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ece:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102ed2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102ed4:	4b13      	ldr	r3, [pc, #76]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ed6:	2200      	movs	r2, #0
 8102ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102eda:	4812      	ldr	r0, [pc, #72]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102edc:	f000 fddc 	bl	8103a98 <HAL_DMA_Init>
 8102ee0:	4603      	mov	r3, r0
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d001      	beq.n	8102eea <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 8102ee6:	f7ff fef3 	bl	8102cd0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	4a0d      	ldr	r2, [pc, #52]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102eee:	679a      	str	r2, [r3, #120]	; 0x78
 8102ef0:	4a0c      	ldr	r2, [pc, #48]	; (8102f24 <HAL_SPI_MspInit+0x19c>)
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102ef6:	2200      	movs	r2, #0
 8102ef8:	2100      	movs	r1, #0
 8102efa:	2023      	movs	r0, #35	; 0x23
 8102efc:	f000 fd83 	bl	8103a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102f00:	2023      	movs	r0, #35	; 0x23
 8102f02:	f000 fd9a 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8102f06:	bf00      	nop
 8102f08:	37e0      	adds	r7, #224	; 0xe0
 8102f0a:	46bd      	mov	sp, r7
 8102f0c:	bd80      	pop	{r7, pc}
 8102f0e:	bf00      	nop
 8102f10:	40013000 	.word	0x40013000
 8102f14:	58024400 	.word	0x58024400
 8102f18:	58020000 	.word	0x58020000
 8102f1c:	100003a0 	.word	0x100003a0
 8102f20:	40020010 	.word	0x40020010
 8102f24:	10000418 	.word	0x10000418
 8102f28:	40020028 	.word	0x40020028

08102f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102f2c:	b480      	push	{r7}
 8102f2e:	b083      	sub	sp, #12
 8102f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102f32:	4b0a      	ldr	r3, [pc, #40]	; (8102f5c <HAL_MspInit+0x30>)
 8102f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102f38:	4a08      	ldr	r2, [pc, #32]	; (8102f5c <HAL_MspInit+0x30>)
 8102f3a:	f043 0302 	orr.w	r3, r3, #2
 8102f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102f42:	4b06      	ldr	r3, [pc, #24]	; (8102f5c <HAL_MspInit+0x30>)
 8102f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102f48:	f003 0302 	and.w	r3, r3, #2
 8102f4c:	607b      	str	r3, [r7, #4]
 8102f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102f50:	bf00      	nop
 8102f52:	370c      	adds	r7, #12
 8102f54:	46bd      	mov	sp, r7
 8102f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f5a:	4770      	bx	lr
 8102f5c:	58024400 	.word	0x58024400

08102f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102f60:	b480      	push	{r7}
 8102f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102f64:	e7fe      	b.n	8102f64 <NMI_Handler+0x4>

08102f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102f66:	b480      	push	{r7}
 8102f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102f6a:	e7fe      	b.n	8102f6a <HardFault_Handler+0x4>

08102f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102f6c:	b480      	push	{r7}
 8102f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102f70:	e7fe      	b.n	8102f70 <MemManage_Handler+0x4>

08102f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102f72:	b480      	push	{r7}
 8102f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102f76:	e7fe      	b.n	8102f76 <BusFault_Handler+0x4>

08102f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102f78:	b480      	push	{r7}
 8102f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102f7c:	e7fe      	b.n	8102f7c <UsageFault_Handler+0x4>

08102f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102f7e:	b480      	push	{r7}
 8102f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102f82:	bf00      	nop
 8102f84:	46bd      	mov	sp, r7
 8102f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f8a:	4770      	bx	lr

08102f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102f8c:	b480      	push	{r7}
 8102f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102f90:	bf00      	nop
 8102f92:	46bd      	mov	sp, r7
 8102f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f98:	4770      	bx	lr

08102f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102f9a:	b480      	push	{r7}
 8102f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102f9e:	bf00      	nop
 8102fa0:	46bd      	mov	sp, r7
 8102fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa6:	4770      	bx	lr

08102fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102fa8:	b580      	push	{r7, lr}
 8102faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102fac:	f000 fc0c 	bl	81037c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102fb0:	bf00      	nop
 8102fb2:	bd80      	pop	{r7, pc}

08102fb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8102fb4:	b580      	push	{r7, lr}
 8102fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102fb8:	4802      	ldr	r0, [pc, #8]	; (8102fc4 <DMA1_Stream0_IRQHandler+0x10>)
 8102fba:	f002 f893 	bl	81050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8102fbe:	bf00      	nop
 8102fc0:	bd80      	pop	{r7, pc}
 8102fc2:	bf00      	nop
 8102fc4:	100003a0 	.word	0x100003a0

08102fc8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102fc8:	b580      	push	{r7, lr}
 8102fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102fcc:	4802      	ldr	r0, [pc, #8]	; (8102fd8 <DMA1_Stream1_IRQHandler+0x10>)
 8102fce:	f002 f889 	bl	81050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8102fd2:	bf00      	nop
 8102fd4:	bd80      	pop	{r7, pc}
 8102fd6:	bf00      	nop
 8102fd8:	10000418 	.word	0x10000418

08102fdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8102fdc:	b580      	push	{r7, lr}
 8102fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8102fe0:	4802      	ldr	r0, [pc, #8]	; (8102fec <DMA1_Stream2_IRQHandler+0x10>)
 8102fe2:	f002 f87f 	bl	81050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8102fe6:	bf00      	nop
 8102fe8:	bd80      	pop	{r7, pc}
 8102fea:	bf00      	nop
 8102fec:	10000194 	.word	0x10000194

08102ff0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8102ff0:	b580      	push	{r7, lr}
 8102ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102ff4:	4802      	ldr	r0, [pc, #8]	; (8103000 <DMA1_Stream3_IRQHandler+0x10>)
 8102ff6:	f002 f875 	bl	81050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8102ffa:	bf00      	nop
 8102ffc:	bd80      	pop	{r7, pc}
 8102ffe:	bf00      	nop
 8103000:	100000d0 	.word	0x100000d0

08103004 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8103004:	b580      	push	{r7, lr}
 8103006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8103008:	4802      	ldr	r0, [pc, #8]	; (8103014 <I2C1_EV_IRQHandler+0x10>)
 810300a:	f004 f85f 	bl	81070cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 810300e:	bf00      	nop
 8103010:	bd80      	pop	{r7, pc}
 8103012:	bf00      	nop
 8103014:	10000148 	.word	0x10000148

08103018 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8103018:	b580      	push	{r7, lr}
 810301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 810301c:	4802      	ldr	r0, [pc, #8]	; (8103028 <I2C1_ER_IRQHandler+0x10>)
 810301e:	f004 f86f 	bl	8107100 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8103022:	bf00      	nop
 8103024:	bd80      	pop	{r7, pc}
 8103026:	bf00      	nop
 8103028:	10000148 	.word	0x10000148

0810302c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 810302c:	b580      	push	{r7, lr}
 810302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8103030:	4802      	ldr	r0, [pc, #8]	; (810303c <SPI1_IRQHandler+0x10>)
 8103032:	f007 f9f1 	bl	810a418 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8103036:	bf00      	nop
 8103038:	bd80      	pop	{r7, pc}
 810303a:	bf00      	nop
 810303c:	10000318 	.word	0x10000318

08103040 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8103040:	b580      	push	{r7, lr}
 8103042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8103044:	4802      	ldr	r0, [pc, #8]	; (8103050 <USART3_IRQHandler+0x10>)
 8103046:	f007 fe69 	bl	810ad1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810304a:	bf00      	nop
 810304c:	bd80      	pop	{r7, pc}
 810304e:	bf00      	nop
 8103050:	10000508 	.word	0x10000508

08103054 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8103054:	b580      	push	{r7, lr}
 8103056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8103058:	4802      	ldr	r0, [pc, #8]	; (8103064 <DMA1_Stream7_IRQHandler+0x10>)
 810305a:	f002 f843 	bl	81050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810305e:	bf00      	nop
 8103060:	bd80      	pop	{r7, pc}
 8103062:	bf00      	nop
 8103064:	10000490 	.word	0x10000490

08103068 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8103068:	b580      	push	{r7, lr}
 810306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 810306c:	4802      	ldr	r0, [pc, #8]	; (8103078 <DMA2_Stream0_IRQHandler+0x10>)
 810306e:	f002 f839 	bl	81050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8103072:	bf00      	nop
 8103074:	bd80      	pop	{r7, pc}
 8103076:	bf00      	nop
 8103078:	10000598 	.word	0x10000598

0810307c <calcChecksum>:
//      }
//
// }

 void calcChecksum(unsigned char* ck)
 {
 810307c:	b580      	push	{r7, lr}
 810307e:	b084      	sub	sp, #16
 8103080:	af00      	add	r7, sp, #0
 8103082:	6078      	str	r0, [r7, #4]
     memset(ck, 0, 2);
 8103084:	2202      	movs	r2, #2
 8103086:	2100      	movs	r1, #0
 8103088:	6878      	ldr	r0, [r7, #4]
 810308a:	f009 fb0f 	bl	810c6ac <memset>
     for (int i = 0; i < (int)sizeof(pvt); i++)
 810308e:	2300      	movs	r3, #0
 8103090:	60fb      	str	r3, [r7, #12]
 8103092:	e016      	b.n	81030c2 <calcChecksum+0x46>
      {
        ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	781a      	ldrb	r2, [r3, #0]
 8103098:	68fb      	ldr	r3, [r7, #12]
 810309a:	490e      	ldr	r1, [pc, #56]	; (81030d4 <calcChecksum+0x58>)
 810309c:	440b      	add	r3, r1
 810309e:	781b      	ldrb	r3, [r3, #0]
 81030a0:	4413      	add	r3, r2
 81030a2:	b2da      	uxtb	r2, r3
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	701a      	strb	r2, [r3, #0]
        ck[1] = ck[1] + ck[0];
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	3301      	adds	r3, #1
 81030ac:	7819      	ldrb	r1, [r3, #0]
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	781a      	ldrb	r2, [r3, #0]
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	3301      	adds	r3, #1
 81030b6:	440a      	add	r2, r1
 81030b8:	b2d2      	uxtb	r2, r2
 81030ba:	701a      	strb	r2, [r3, #0]
     for (int i = 0; i < (int)sizeof(pvt); i++)
 81030bc:	68fb      	ldr	r3, [r7, #12]
 81030be:	3301      	adds	r3, #1
 81030c0:	60fb      	str	r3, [r7, #12]
 81030c2:	68fb      	ldr	r3, [r7, #12]
 81030c4:	2b5f      	cmp	r3, #95	; 0x5f
 81030c6:	dde5      	ble.n	8103094 <calcChecksum+0x18>
      }

 }
 81030c8:	bf00      	nop
 81030ca:	bf00      	nop
 81030cc:	3710      	adds	r7, #16
 81030ce:	46bd      	mov	sp, r7
 81030d0:	bd80      	pop	{r7, pc}
 81030d2:	bf00      	nop
 81030d4:	10000238 	.word	0x10000238

081030d8 <processGPS>:


 void processGPS(GPSHandle* gps)
 {
 81030d8:	b580      	push	{r7, lr}
 81030da:	b082      	sub	sp, #8
 81030dc:	af00      	add	r7, sp, #0
 81030de:	6078      	str	r0, [r7, #4]
     gps->latitude = pvt.latitude * 1.0e-7;
 81030e0:	4b39      	ldr	r3, [pc, #228]	; (81031c8 <processGPS+0xf0>)
 81030e2:	6a1b      	ldr	r3, [r3, #32]
 81030e4:	4618      	mov	r0, r3
 81030e6:	f7fd fa49 	bl	810057c <__aeabi_i2d>
 81030ea:	a335      	add	r3, pc, #212	; (adr r3, 81031c0 <processGPS+0xe8>)
 81030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030f0:	f7fd faae 	bl	8100650 <__aeabi_dmul>
 81030f4:	4602      	mov	r2, r0
 81030f6:	460b      	mov	r3, r1
 81030f8:	4610      	mov	r0, r2
 81030fa:	4619      	mov	r1, r3
 81030fc:	f7fd fd58 	bl	8100bb0 <__aeabi_d2f>
 8103100:	4602      	mov	r2, r0
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	601a      	str	r2, [r3, #0]
     gps->longitude = pvt.longitude * 1.0e-7;
 8103106:	4b30      	ldr	r3, [pc, #192]	; (81031c8 <processGPS+0xf0>)
 8103108:	69db      	ldr	r3, [r3, #28]
 810310a:	4618      	mov	r0, r3
 810310c:	f7fd fa36 	bl	810057c <__aeabi_i2d>
 8103110:	a32b      	add	r3, pc, #172	; (adr r3, 81031c0 <processGPS+0xe8>)
 8103112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103116:	f7fd fa9b 	bl	8100650 <__aeabi_dmul>
 810311a:	4602      	mov	r2, r0
 810311c:	460b      	mov	r3, r1
 810311e:	4610      	mov	r0, r2
 8103120:	4619      	mov	r1, r3
 8103122:	f7fd fd45 	bl	8100bb0 <__aeabi_d2f>
 8103126:	4602      	mov	r2, r0
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	605a      	str	r2, [r3, #4]
     gps->altitude = pvt.hMSL / 1000.0f;  // use Mean sea level instead
 810312c:	4b26      	ldr	r3, [pc, #152]	; (81031c8 <processGPS+0xf0>)
 810312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103130:	ee07 3a90 	vmov	s15, r3
 8103134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103138:	eddf 6a24 	vldr	s13, [pc, #144]	; 81031cc <processGPS+0xf4>
 810313c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	edc3 7a02 	vstr	s15, [r3, #8]

     // format to ENU
     gps->vel_x = pvt.velE / 1000.0f;
 8103146:	4b20      	ldr	r3, [pc, #128]	; (81031c8 <processGPS+0xf0>)
 8103148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810314a:	ee07 3a90 	vmov	s15, r3
 810314e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103152:	eddf 6a1e 	vldr	s13, [pc, #120]	; 81031cc <processGPS+0xf4>
 8103156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	edc3 7a03 	vstr	s15, [r3, #12]
     gps->vel_y = pvt.velN / 1000.0f;
 8103160:	4b19      	ldr	r3, [pc, #100]	; (81031c8 <processGPS+0xf0>)
 8103162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103164:	ee07 3a90 	vmov	s15, r3
 8103168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810316c:	eddf 6a17 	vldr	s13, [pc, #92]	; 81031cc <processGPS+0xf4>
 8103170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	edc3 7a04 	vstr	s15, [r3, #16]
     gps->vel_z = pvt.velD / -1000.0f;
 810317a:	4b13      	ldr	r3, [pc, #76]	; (81031c8 <processGPS+0xf0>)
 810317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810317e:	ee07 3a90 	vmov	s15, r3
 8103182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8103186:	eddf 6a12 	vldr	s13, [pc, #72]	; 81031d0 <processGPS+0xf8>
 810318a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	edc3 7a05 	vstr	s15, [r3, #20]
     gps->gndSpeed = pvt.gSpeed / 1000.0f;
 8103194:	4b0c      	ldr	r3, [pc, #48]	; (81031c8 <processGPS+0xf0>)
 8103196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103198:	ee07 3a90 	vmov	s15, r3
 810319c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81031a0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 81031cc <processGPS+0xf4>
 81031a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	edc3 7a06 	vstr	s15, [r3, #24]
     gps->num_satellites = pvt.numSV;
 81031ae:	4b06      	ldr	r3, [pc, #24]	; (81031c8 <processGPS+0xf0>)
 81031b0:	7edb      	ldrb	r3, [r3, #27]
 81031b2:	461a      	mov	r2, r3
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	61da      	str	r2, [r3, #28]


 }
 81031b8:	bf00      	nop
 81031ba:	3708      	adds	r7, #8
 81031bc:	46bd      	mov	sp, r7
 81031be:	bd80      	pop	{r7, pc}
 81031c0:	9abcaf48 	.word	0x9abcaf48
 81031c4:	3e7ad7f2 	.word	0x3e7ad7f2
 81031c8:	10000238 	.word	0x10000238
 81031cc:	447a0000 	.word	0x447a0000
 81031d0:	c47a0000 	.word	0xc47a0000

081031d4 <ConfigGPS>:
//     return *gps;
// }


 void ConfigGPS(void)
 {
 81031d4:	b590      	push	{r4, r7, lr}
 81031d6:	b0c1      	sub	sp, #260	; 0x104
 81031d8:	af00      	add	r7, sp, #0
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 81031da:	4b43      	ldr	r3, [pc, #268]	; (81032e8 <ConfigGPS+0x114>)
 81031dc:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 81031e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81031e2:	c407      	stmia	r4!, {r0, r1, r2}
 81031e4:	8023      	strh	r3, [r4, #0]
 81031e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 81031ea:	220e      	movs	r2, #14
 81031ec:	4619      	mov	r1, r3
 81031ee:	483f      	ldr	r0, [pc, #252]	; (81032ec <ConfigGPS+0x118>)
 81031f0:	f007 fcce 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81031f4:	2032      	movs	r0, #50	; 0x32
 81031f6:	f000 fb07 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 81031fa:	4b3d      	ldr	r3, [pc, #244]	; (81032f0 <ConfigGPS+0x11c>)
 81031fc:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8103200:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103206:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 810320a:	2210      	movs	r2, #16
 810320c:	4619      	mov	r1, r3
 810320e:	4837      	ldr	r0, [pc, #220]	; (81032ec <ConfigGPS+0x118>)
 8103210:	f007 fcbe 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103214:	2032      	movs	r0, #50	; 0x32
 8103216:	f000 faf7 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 810321a:	4b36      	ldr	r3, [pc, #216]	; (81032f4 <ConfigGPS+0x120>)
 810321c:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8103220:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103226:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 810322a:	2210      	movs	r2, #16
 810322c:	4619      	mov	r1, r3
 810322e:	482f      	ldr	r0, [pc, #188]	; (81032ec <ConfigGPS+0x118>)
 8103230:	f007 fcae 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103234:	2032      	movs	r0, #50	; 0x32
 8103236:	f000 fae7 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 810323a:	4b2f      	ldr	r3, [pc, #188]	; (81032f8 <ConfigGPS+0x124>)
 810323c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8103240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103246:	f107 0390 	add.w	r3, r7, #144	; 0x90
 810324a:	2210      	movs	r2, #16
 810324c:	4619      	mov	r1, r3
 810324e:	4827      	ldr	r0, [pc, #156]	; (81032ec <ConfigGPS+0x118>)
 8103250:	f007 fc9e 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103254:	2032      	movs	r0, #50	; 0x32
 8103256:	f000 fad7 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 810325a:	4b28      	ldr	r3, [pc, #160]	; (81032fc <ConfigGPS+0x128>)
 810325c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8103260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 810326a:	2210      	movs	r2, #16
 810326c:	4619      	mov	r1, r3
 810326e:	481f      	ldr	r0, [pc, #124]	; (81032ec <ConfigGPS+0x118>)
 8103270:	f007 fc8e 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103274:	2032      	movs	r0, #50	; 0x32
 8103276:	f000 fac7 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 810327a:	4b21      	ldr	r3, [pc, #132]	; (8103300 <ConfigGPS+0x12c>)
 810327c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8103280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8103282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 810328a:	2210      	movs	r2, #16
 810328c:	4619      	mov	r1, r3
 810328e:	4817      	ldr	r0, [pc, #92]	; (81032ec <ConfigGPS+0x118>)
 8103290:	f007 fc7e 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 8103294:	2032      	movs	r0, #50	; 0x32
 8103296:	f000 fab7 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 810329a:	4b1a      	ldr	r3, [pc, #104]	; (8103304 <ConfigGPS+0x130>)
 810329c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 81032a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81032a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81032a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81032aa:	2210      	movs	r2, #16
 81032ac:	4619      	mov	r1, r3
 81032ae:	480f      	ldr	r0, [pc, #60]	; (81032ec <ConfigGPS+0x118>)
 81032b0:	f007 fc6e 	bl	810ab90 <HAL_UART_Transmit_DMA>
   HAL_Delay(50);
 81032b4:	2032      	movs	r0, #50	; 0x32
 81032b6:	f000 faa7 	bl	8103808 <HAL_Delay>
   HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 81032ba:	4b13      	ldr	r3, [pc, #76]	; (8103308 <ConfigGPS+0x134>)
 81032bc:	f107 0410 	add.w	r4, r7, #16
 81032c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81032c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81032c6:	f107 0310 	add.w	r3, r7, #16
 81032ca:	2210      	movs	r2, #16
 81032cc:	4619      	mov	r1, r3
 81032ce:	4807      	ldr	r0, [pc, #28]	; (81032ec <ConfigGPS+0x118>)
 81032d0:	f007 fc5e 	bl	810ab90 <HAL_UART_Transmit_DMA>

   HAL_UART_Receive_DMA(&huart3, (uint8_t *)data_byte, 1);
 81032d4:	2201      	movs	r2, #1
 81032d6:	490d      	ldr	r1, [pc, #52]	; (810330c <ConfigGPS+0x138>)
 81032d8:	4804      	ldr	r0, [pc, #16]	; (81032ec <ConfigGPS+0x118>)
 81032da:	f007 fcd9 	bl	810ac90 <HAL_UART_Receive_DMA>
 }
 81032de:	bf00      	nop
 81032e0:	f507 7782 	add.w	r7, r7, #260	; 0x104
 81032e4:	46bd      	mov	sp, r7
 81032e6:	bd90      	pop	{r4, r7, pc}
 81032e8:	0810d648 	.word	0x0810d648
 81032ec:	10000508 	.word	0x10000508
 81032f0:	0810d658 	.word	0x0810d658
 81032f4:	0810d668 	.word	0x0810d668
 81032f8:	0810d678 	.word	0x0810d678
 81032fc:	0810d688 	.word	0x0810d688
 8103300:	0810d698 	.word	0x0810d698
 8103304:	0810d6a8 	.word	0x0810d6a8
 8103308:	0810d6b8 	.word	0x0810d6b8
 810330c:	100000c0 	.word	0x100000c0

08103310 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103310:	b480      	push	{r7}
 8103312:	b083      	sub	sp, #12
 8103314:	af00      	add	r7, sp, #0
 8103316:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART3)
    {

    }
 }
 8103318:	bf00      	nop
 810331a:	370c      	adds	r7, #12
 810331c:	46bd      	mov	sp, r7
 810331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103322:	4770      	bx	lr

08103324 <HAL_UART_RxCpltCallback>:


 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8103324:	b580      	push	{r7, lr}
 8103326:	b084      	sub	sp, #16
 8103328:	af00      	add	r7, sp, #0
 810332a:	6078      	str	r0, [r7, #4]
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	4a31      	ldr	r2, [pc, #196]	; (81033f8 <HAL_UART_RxCpltCallback+0xd4>)
 8103332:	4293      	cmp	r3, r2
 8103334:	d15b      	bne.n	81033ee <HAL_UART_RxCpltCallback+0xca>
    {
      if(byte_pos < 2)
 8103336:	4b31      	ldr	r3, [pc, #196]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	2b01      	cmp	r3, #1
 810333c:	dc17      	bgt.n	810336e <HAL_UART_RxCpltCallback+0x4a>
      {
        if(data_byte[0] == UBX_HEADER[byte_pos])
 810333e:	4b30      	ldr	r3, [pc, #192]	; (8103400 <HAL_UART_RxCpltCallback+0xdc>)
 8103340:	781a      	ldrb	r2, [r3, #0]
 8103342:	4b30      	ldr	r3, [pc, #192]	; (8103404 <HAL_UART_RxCpltCallback+0xe0>)
 8103344:	881b      	ldrh	r3, [r3, #0]
 8103346:	81bb      	strh	r3, [r7, #12]
 8103348:	4b2c      	ldr	r3, [pc, #176]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 810334a:	681b      	ldr	r3, [r3, #0]
 810334c:	f107 0110 	add.w	r1, r7, #16
 8103350:	440b      	add	r3, r1
 8103352:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8103356:	429a      	cmp	r2, r3
 8103358:	d105      	bne.n	8103366 <HAL_UART_RxCpltCallback+0x42>
        {
          byte_pos++;
 810335a:	4b28      	ldr	r3, [pc, #160]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 810335c:	681b      	ldr	r3, [r3, #0]
 810335e:	3301      	adds	r3, #1
 8103360:	4a26      	ldr	r2, [pc, #152]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 8103362:	6013      	str	r3, [r2, #0]
        }
      }
    }

    //processGPS(&gps);
 }
 8103364:	e043      	b.n	81033ee <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 8103366:	4b25      	ldr	r3, [pc, #148]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 8103368:	2200      	movs	r2, #0
 810336a:	601a      	str	r2, [r3, #0]
 }
 810336c:	e03f      	b.n	81033ee <HAL_UART_RxCpltCallback+0xca>
        if((byte_pos -2) < data_size)
 810336e:	4b23      	ldr	r3, [pc, #140]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 8103370:	681b      	ldr	r3, [r3, #0]
 8103372:	3b01      	subs	r3, #1
 8103374:	2260      	movs	r2, #96	; 0x60
 8103376:	4293      	cmp	r3, r2
 8103378:	dc07      	bgt.n	810338a <HAL_UART_RxCpltCallback+0x66>
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 810337a:	4b20      	ldr	r3, [pc, #128]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	3b02      	subs	r3, #2
 8103380:	4a21      	ldr	r2, [pc, #132]	; (8103408 <HAL_UART_RxCpltCallback+0xe4>)
 8103382:	4413      	add	r3, r2
 8103384:	4a1e      	ldr	r2, [pc, #120]	; (8103400 <HAL_UART_RxCpltCallback+0xdc>)
 8103386:	7812      	ldrb	r2, [r2, #0]
 8103388:	701a      	strb	r2, [r3, #0]
        byte_pos++;
 810338a:	4b1c      	ldr	r3, [pc, #112]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	3301      	adds	r3, #1
 8103390:	4a1a      	ldr	r2, [pc, #104]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 8103392:	6013      	str	r3, [r2, #0]
        if (byte_pos == (data_size+2))
 8103394:	2360      	movs	r3, #96	; 0x60
 8103396:	1c9a      	adds	r2, r3, #2
 8103398:	4b18      	ldr	r3, [pc, #96]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	429a      	cmp	r2, r3
 810339e:	d103      	bne.n	81033a8 <HAL_UART_RxCpltCallback+0x84>
          calcChecksum(checksum);
 81033a0:	481a      	ldr	r0, [pc, #104]	; (810340c <HAL_UART_RxCpltCallback+0xe8>)
 81033a2:	f7ff fe6b 	bl	810307c <calcChecksum>
 }
 81033a6:	e022      	b.n	81033ee <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+3) )
 81033a8:	2360      	movs	r3, #96	; 0x60
 81033aa:	1cda      	adds	r2, r3, #3
 81033ac:	4b13      	ldr	r3, [pc, #76]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	429a      	cmp	r2, r3
 81033b2:	d109      	bne.n	81033c8 <HAL_UART_RxCpltCallback+0xa4>
          if (data_byte[0] != checksum[0])
 81033b4:	4b12      	ldr	r3, [pc, #72]	; (8103400 <HAL_UART_RxCpltCallback+0xdc>)
 81033b6:	781a      	ldrb	r2, [r3, #0]
 81033b8:	4b14      	ldr	r3, [pc, #80]	; (810340c <HAL_UART_RxCpltCallback+0xe8>)
 81033ba:	781b      	ldrb	r3, [r3, #0]
 81033bc:	429a      	cmp	r2, r3
 81033be:	d016      	beq.n	81033ee <HAL_UART_RxCpltCallback+0xca>
            byte_pos = 0;
 81033c0:	4b0e      	ldr	r3, [pc, #56]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 81033c2:	2200      	movs	r2, #0
 81033c4:	601a      	str	r2, [r3, #0]
 }
 81033c6:	e012      	b.n	81033ee <HAL_UART_RxCpltCallback+0xca>
        else if (byte_pos == (data_size+4) )
 81033c8:	2360      	movs	r3, #96	; 0x60
 81033ca:	1d1a      	adds	r2, r3, #4
 81033cc:	4b0b      	ldr	r3, [pc, #44]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	429a      	cmp	r2, r3
 81033d2:	d103      	bne.n	81033dc <HAL_UART_RxCpltCallback+0xb8>
          byte_pos = 0;
 81033d4:	4b09      	ldr	r3, [pc, #36]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 81033d6:	2200      	movs	r2, #0
 81033d8:	601a      	str	r2, [r3, #0]
 }
 81033da:	e008      	b.n	81033ee <HAL_UART_RxCpltCallback+0xca>
        else if ( byte_pos > (data_size+4) )
 81033dc:	2360      	movs	r3, #96	; 0x60
 81033de:	1d1a      	adds	r2, r3, #4
 81033e0:	4b06      	ldr	r3, [pc, #24]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	429a      	cmp	r2, r3
 81033e6:	da02      	bge.n	81033ee <HAL_UART_RxCpltCallback+0xca>
          byte_pos = 0;
 81033e8:	4b04      	ldr	r3, [pc, #16]	; (81033fc <HAL_UART_RxCpltCallback+0xd8>)
 81033ea:	2200      	movs	r2, #0
 81033ec:	601a      	str	r2, [r3, #0]
 }
 81033ee:	bf00      	nop
 81033f0:	3710      	adds	r7, #16
 81033f2:	46bd      	mov	sp, r7
 81033f4:	bd80      	pop	{r7, pc}
 81033f6:	bf00      	nop
 81033f8:	40004800 	.word	0x40004800
 81033fc:	100000c4 	.word	0x100000c4
 8103400:	100000c0 	.word	0x100000c0
 8103404:	0810d6c8 	.word	0x0810d6c8
 8103408:	10000238 	.word	0x10000238
 810340c:	100000c8 	.word	0x100000c8

08103410 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8103410:	b580      	push	{r7, lr}
 8103412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103414:	4b22      	ldr	r3, [pc, #136]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103416:	4a23      	ldr	r2, [pc, #140]	; (81034a4 <MX_USART3_UART_Init+0x94>)
 8103418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 810341a:	4b21      	ldr	r3, [pc, #132]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810341c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8103420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103422:	4b1f      	ldr	r3, [pc, #124]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103424:	2200      	movs	r2, #0
 8103426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103428:	4b1d      	ldr	r3, [pc, #116]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810342a:	2200      	movs	r2, #0
 810342c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810342e:	4b1c      	ldr	r3, [pc, #112]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103430:	2200      	movs	r2, #0
 8103432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103434:	4b1a      	ldr	r3, [pc, #104]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103436:	220c      	movs	r2, #12
 8103438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810343a:	4b19      	ldr	r3, [pc, #100]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810343c:	2200      	movs	r2, #0
 810343e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103440:	4b17      	ldr	r3, [pc, #92]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103442:	2200      	movs	r2, #0
 8103444:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103446:	4b16      	ldr	r3, [pc, #88]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103448:	2200      	movs	r2, #0
 810344a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810344c:	4b14      	ldr	r3, [pc, #80]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810344e:	2200      	movs	r2, #0
 8103450:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103452:	4b13      	ldr	r3, [pc, #76]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 8103454:	2200      	movs	r2, #0
 8103456:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103458:	4811      	ldr	r0, [pc, #68]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810345a:	f007 fb49 	bl	810aaf0 <HAL_UART_Init>
 810345e:	4603      	mov	r3, r0
 8103460:	2b00      	cmp	r3, #0
 8103462:	d001      	beq.n	8103468 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8103464:	f7ff fc34 	bl	8102cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103468:	2100      	movs	r1, #0
 810346a:	480d      	ldr	r0, [pc, #52]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810346c:	f009 f82a 	bl	810c4c4 <HAL_UARTEx_SetTxFifoThreshold>
 8103470:	4603      	mov	r3, r0
 8103472:	2b00      	cmp	r3, #0
 8103474:	d001      	beq.n	810347a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8103476:	f7ff fc2b 	bl	8102cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810347a:	2100      	movs	r1, #0
 810347c:	4808      	ldr	r0, [pc, #32]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810347e:	f009 f85f 	bl	810c540 <HAL_UARTEx_SetRxFifoThreshold>
 8103482:	4603      	mov	r3, r0
 8103484:	2b00      	cmp	r3, #0
 8103486:	d001      	beq.n	810348c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8103488:	f7ff fc22 	bl	8102cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810348c:	4804      	ldr	r0, [pc, #16]	; (81034a0 <MX_USART3_UART_Init+0x90>)
 810348e:	f008 ffe0 	bl	810c452 <HAL_UARTEx_DisableFifoMode>
 8103492:	4603      	mov	r3, r0
 8103494:	2b00      	cmp	r3, #0
 8103496:	d001      	beq.n	810349c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8103498:	f7ff fc1a 	bl	8102cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810349c:	bf00      	nop
 810349e:	bd80      	pop	{r7, pc}
 81034a0:	10000508 	.word	0x10000508
 81034a4:	40004800 	.word	0x40004800

081034a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81034a8:	b580      	push	{r7, lr}
 81034aa:	b0b8      	sub	sp, #224	; 0xe0
 81034ac:	af00      	add	r7, sp, #0
 81034ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81034b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81034b4:	2200      	movs	r2, #0
 81034b6:	601a      	str	r2, [r3, #0]
 81034b8:	605a      	str	r2, [r3, #4]
 81034ba:	609a      	str	r2, [r3, #8]
 81034bc:	60da      	str	r2, [r3, #12]
 81034be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81034c0:	f107 0310 	add.w	r3, r7, #16
 81034c4:	22bc      	movs	r2, #188	; 0xbc
 81034c6:	2100      	movs	r1, #0
 81034c8:	4618      	mov	r0, r3
 81034ca:	f009 f8ef 	bl	810c6ac <memset>
  if(uartHandle->Instance==USART3)
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	681b      	ldr	r3, [r3, #0]
 81034d2:	4a57      	ldr	r2, [pc, #348]	; (8103630 <HAL_UART_MspInit+0x188>)
 81034d4:	4293      	cmp	r3, r2
 81034d6:	f040 80a7 	bne.w	8103628 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81034da:	2302      	movs	r3, #2
 81034dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81034de:	2300      	movs	r3, #0
 81034e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81034e4:	f107 0310 	add.w	r3, r7, #16
 81034e8:	4618      	mov	r0, r3
 81034ea:	f005 f965 	bl	81087b8 <HAL_RCCEx_PeriphCLKConfig>
 81034ee:	4603      	mov	r3, r0
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d001      	beq.n	81034f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 81034f4:	f7ff fbec 	bl	8102cd0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81034f8:	4b4e      	ldr	r3, [pc, #312]	; (8103634 <HAL_UART_MspInit+0x18c>)
 81034fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81034fe:	4a4d      	ldr	r2, [pc, #308]	; (8103634 <HAL_UART_MspInit+0x18c>)
 8103500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103504:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103508:	4b4a      	ldr	r3, [pc, #296]	; (8103634 <HAL_UART_MspInit+0x18c>)
 810350a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810350e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103512:	60fb      	str	r3, [r7, #12]
 8103514:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103516:	4b47      	ldr	r3, [pc, #284]	; (8103634 <HAL_UART_MspInit+0x18c>)
 8103518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810351c:	4a45      	ldr	r2, [pc, #276]	; (8103634 <HAL_UART_MspInit+0x18c>)
 810351e:	f043 0308 	orr.w	r3, r3, #8
 8103522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103526:	4b43      	ldr	r3, [pc, #268]	; (8103634 <HAL_UART_MspInit+0x18c>)
 8103528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810352c:	f003 0308 	and.w	r3, r3, #8
 8103530:	60bb      	str	r3, [r7, #8]
 8103532:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8103534:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810353c:	2302      	movs	r3, #2
 810353e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103542:	2300      	movs	r3, #0
 8103544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103548:	2300      	movs	r3, #0
 810354a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810354e:	2307      	movs	r3, #7
 8103550:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8103558:	4619      	mov	r1, r3
 810355a:	4837      	ldr	r0, [pc, #220]	; (8103638 <HAL_UART_MspInit+0x190>)
 810355c:	f003 f8ee 	bl	810673c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8103560:	4b36      	ldr	r3, [pc, #216]	; (810363c <HAL_UART_MspInit+0x194>)
 8103562:	4a37      	ldr	r2, [pc, #220]	; (8103640 <HAL_UART_MspInit+0x198>)
 8103564:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8103566:	4b35      	ldr	r3, [pc, #212]	; (810363c <HAL_UART_MspInit+0x194>)
 8103568:	222d      	movs	r2, #45	; 0x2d
 810356a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810356c:	4b33      	ldr	r3, [pc, #204]	; (810363c <HAL_UART_MspInit+0x194>)
 810356e:	2200      	movs	r2, #0
 8103570:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8103572:	4b32      	ldr	r3, [pc, #200]	; (810363c <HAL_UART_MspInit+0x194>)
 8103574:	2200      	movs	r2, #0
 8103576:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8103578:	4b30      	ldr	r3, [pc, #192]	; (810363c <HAL_UART_MspInit+0x194>)
 810357a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810357e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8103580:	4b2e      	ldr	r3, [pc, #184]	; (810363c <HAL_UART_MspInit+0x194>)
 8103582:	2200      	movs	r2, #0
 8103584:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8103586:	4b2d      	ldr	r3, [pc, #180]	; (810363c <HAL_UART_MspInit+0x194>)
 8103588:	2200      	movs	r2, #0
 810358a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 810358c:	4b2b      	ldr	r3, [pc, #172]	; (810363c <HAL_UART_MspInit+0x194>)
 810358e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103592:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8103594:	4b29      	ldr	r3, [pc, #164]	; (810363c <HAL_UART_MspInit+0x194>)
 8103596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810359a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810359c:	4b27      	ldr	r3, [pc, #156]	; (810363c <HAL_UART_MspInit+0x194>)
 810359e:	2200      	movs	r2, #0
 81035a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 81035a2:	4826      	ldr	r0, [pc, #152]	; (810363c <HAL_UART_MspInit+0x194>)
 81035a4:	f000 fa78 	bl	8103a98 <HAL_DMA_Init>
 81035a8:	4603      	mov	r3, r0
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d001      	beq.n	81035b2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 81035ae:	f7ff fb8f 	bl	8102cd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	4a21      	ldr	r2, [pc, #132]	; (810363c <HAL_UART_MspInit+0x194>)
 81035b6:	67da      	str	r2, [r3, #124]	; 0x7c
 81035b8:	4a20      	ldr	r2, [pc, #128]	; (810363c <HAL_UART_MspInit+0x194>)
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 81035be:	4b21      	ldr	r3, [pc, #132]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035c0:	4a21      	ldr	r2, [pc, #132]	; (8103648 <HAL_UART_MspInit+0x1a0>)
 81035c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81035c4:	4b1f      	ldr	r3, [pc, #124]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035c6:	222e      	movs	r2, #46	; 0x2e
 81035c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81035ca:	4b1e      	ldr	r3, [pc, #120]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035cc:	2240      	movs	r2, #64	; 0x40
 81035ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81035d0:	4b1c      	ldr	r3, [pc, #112]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035d2:	2200      	movs	r2, #0
 81035d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81035d6:	4b1b      	ldr	r3, [pc, #108]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81035dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81035de:	4b19      	ldr	r3, [pc, #100]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035e0:	2200      	movs	r2, #0
 81035e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81035e4:	4b17      	ldr	r3, [pc, #92]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035e6:	2200      	movs	r2, #0
 81035e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81035ea:	4b16      	ldr	r3, [pc, #88]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035ec:	2200      	movs	r2, #0
 81035ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 81035f0:	4b14      	ldr	r3, [pc, #80]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035f2:	2200      	movs	r2, #0
 81035f4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81035f6:	4b13      	ldr	r3, [pc, #76]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035f8:	2200      	movs	r2, #0
 81035fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81035fc:	4811      	ldr	r0, [pc, #68]	; (8103644 <HAL_UART_MspInit+0x19c>)
 81035fe:	f000 fa4b 	bl	8103a98 <HAL_DMA_Init>
 8103602:	4603      	mov	r3, r0
 8103604:	2b00      	cmp	r3, #0
 8103606:	d001      	beq.n	810360c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8103608:	f7ff fb62 	bl	8102cd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	4a0d      	ldr	r2, [pc, #52]	; (8103644 <HAL_UART_MspInit+0x19c>)
 8103610:	679a      	str	r2, [r3, #120]	; 0x78
 8103612:	4a0c      	ldr	r2, [pc, #48]	; (8103644 <HAL_UART_MspInit+0x19c>)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8103618:	2200      	movs	r2, #0
 810361a:	2105      	movs	r1, #5
 810361c:	2027      	movs	r0, #39	; 0x27
 810361e:	f000 f9f2 	bl	8103a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8103622:	2027      	movs	r0, #39	; 0x27
 8103624:	f000 fa09 	bl	8103a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8103628:	bf00      	nop
 810362a:	37e0      	adds	r7, #224	; 0xe0
 810362c:	46bd      	mov	sp, r7
 810362e:	bd80      	pop	{r7, pc}
 8103630:	40004800 	.word	0x40004800
 8103634:	58024400 	.word	0x58024400
 8103638:	58020c00 	.word	0x58020c00
 810363c:	10000490 	.word	0x10000490
 8103640:	400200b8 	.word	0x400200b8
 8103644:	10000598 	.word	0x10000598
 8103648:	40020410 	.word	0x40020410

0810364c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810364c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103684 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103650:	f7fd fdd8 	bl	8101204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103654:	480c      	ldr	r0, [pc, #48]	; (8103688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8103656:	490d      	ldr	r1, [pc, #52]	; (810368c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103658:	4a0d      	ldr	r2, [pc, #52]	; (8103690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810365a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810365c:	e002      	b.n	8103664 <LoopCopyDataInit>

0810365e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810365e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103662:	3304      	adds	r3, #4

08103664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103668:	d3f9      	bcc.n	810365e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810366a:	4a0a      	ldr	r2, [pc, #40]	; (8103694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810366c:	4c0a      	ldr	r4, [pc, #40]	; (8103698 <LoopFillZerobss+0x22>)
  movs r3, #0
 810366e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103670:	e001      	b.n	8103676 <LoopFillZerobss>

08103672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103674:	3204      	adds	r2, #4

08103676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103678:	d3fb      	bcc.n	8103672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810367a:	f008 fff3 	bl	810c664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810367e:	f7ff f935 	bl	81028ec <main>
  bx  lr
 8103682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103684:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103688:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810368c:	1000008c 	.word	0x1000008c
  ldr r2, =_sidata
 8103690:	0810d760 	.word	0x0810d760
  ldr r2, =_sbss
 8103694:	1000008c 	.word	0x1000008c
  ldr r4, =_ebss
 8103698:	10000614 	.word	0x10000614

0810369c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810369c:	e7fe      	b.n	810369c <ADC3_IRQHandler>
	...

081036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81036a0:	b580      	push	{r7, lr}
 81036a2:	b082      	sub	sp, #8
 81036a4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81036a6:	4b28      	ldr	r3, [pc, #160]	; (8103748 <HAL_Init+0xa8>)
 81036a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81036ac:	4a26      	ldr	r2, [pc, #152]	; (8103748 <HAL_Init+0xa8>)
 81036ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81036b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81036b6:	4b24      	ldr	r3, [pc, #144]	; (8103748 <HAL_Init+0xa8>)
 81036b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81036bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81036c0:	603b      	str	r3, [r7, #0]
 81036c2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81036c4:	4b21      	ldr	r3, [pc, #132]	; (810374c <HAL_Init+0xac>)
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81036cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81036d0:	4a1e      	ldr	r2, [pc, #120]	; (810374c <HAL_Init+0xac>)
 81036d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81036d6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81036d8:	4b1c      	ldr	r3, [pc, #112]	; (810374c <HAL_Init+0xac>)
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	4a1b      	ldr	r2, [pc, #108]	; (810374c <HAL_Init+0xac>)
 81036de:	f043 0301 	orr.w	r3, r3, #1
 81036e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81036e4:	2003      	movs	r0, #3
 81036e6:	f000 f983 	bl	81039f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81036ea:	f004 fe8d 	bl	8108408 <HAL_RCC_GetSysClockFreq>
 81036ee:	4602      	mov	r2, r0
 81036f0:	4b15      	ldr	r3, [pc, #84]	; (8103748 <HAL_Init+0xa8>)
 81036f2:	699b      	ldr	r3, [r3, #24]
 81036f4:	0a1b      	lsrs	r3, r3, #8
 81036f6:	f003 030f 	and.w	r3, r3, #15
 81036fa:	4915      	ldr	r1, [pc, #84]	; (8103750 <HAL_Init+0xb0>)
 81036fc:	5ccb      	ldrb	r3, [r1, r3]
 81036fe:	f003 031f 	and.w	r3, r3, #31
 8103702:	fa22 f303 	lsr.w	r3, r2, r3
 8103706:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103708:	4b0f      	ldr	r3, [pc, #60]	; (8103748 <HAL_Init+0xa8>)
 810370a:	699b      	ldr	r3, [r3, #24]
 810370c:	f003 030f 	and.w	r3, r3, #15
 8103710:	4a0f      	ldr	r2, [pc, #60]	; (8103750 <HAL_Init+0xb0>)
 8103712:	5cd3      	ldrb	r3, [r2, r3]
 8103714:	f003 031f 	and.w	r3, r3, #31
 8103718:	687a      	ldr	r2, [r7, #4]
 810371a:	fa22 f303 	lsr.w	r3, r2, r3
 810371e:	4a0d      	ldr	r2, [pc, #52]	; (8103754 <HAL_Init+0xb4>)
 8103720:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103722:	4b0c      	ldr	r3, [pc, #48]	; (8103754 <HAL_Init+0xb4>)
 8103724:	681b      	ldr	r3, [r3, #0]
 8103726:	4a0c      	ldr	r2, [pc, #48]	; (8103758 <HAL_Init+0xb8>)
 8103728:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810372a:	2000      	movs	r0, #0
 810372c:	f000 f816 	bl	810375c <HAL_InitTick>
 8103730:	4603      	mov	r3, r0
 8103732:	2b00      	cmp	r3, #0
 8103734:	d001      	beq.n	810373a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103736:	2301      	movs	r3, #1
 8103738:	e002      	b.n	8103740 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810373a:	f7ff fbf7 	bl	8102f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810373e:	2300      	movs	r3, #0
}
 8103740:	4618      	mov	r0, r3
 8103742:	3708      	adds	r7, #8
 8103744:	46bd      	mov	sp, r7
 8103746:	bd80      	pop	{r7, pc}
 8103748:	58024400 	.word	0x58024400
 810374c:	40024400 	.word	0x40024400
 8103750:	0810d6cc 	.word	0x0810d6cc
 8103754:	10000004 	.word	0x10000004
 8103758:	10000000 	.word	0x10000000

0810375c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810375c:	b580      	push	{r7, lr}
 810375e:	b082      	sub	sp, #8
 8103760:	af00      	add	r7, sp, #0
 8103762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103764:	4b15      	ldr	r3, [pc, #84]	; (81037bc <HAL_InitTick+0x60>)
 8103766:	781b      	ldrb	r3, [r3, #0]
 8103768:	2b00      	cmp	r3, #0
 810376a:	d101      	bne.n	8103770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810376c:	2301      	movs	r3, #1
 810376e:	e021      	b.n	81037b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103770:	4b13      	ldr	r3, [pc, #76]	; (81037c0 <HAL_InitTick+0x64>)
 8103772:	681a      	ldr	r2, [r3, #0]
 8103774:	4b11      	ldr	r3, [pc, #68]	; (81037bc <HAL_InitTick+0x60>)
 8103776:	781b      	ldrb	r3, [r3, #0]
 8103778:	4619      	mov	r1, r3
 810377a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810377e:	fbb3 f3f1 	udiv	r3, r3, r1
 8103782:	fbb2 f3f3 	udiv	r3, r2, r3
 8103786:	4618      	mov	r0, r3
 8103788:	f000 f965 	bl	8103a56 <HAL_SYSTICK_Config>
 810378c:	4603      	mov	r3, r0
 810378e:	2b00      	cmp	r3, #0
 8103790:	d001      	beq.n	8103796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103792:	2301      	movs	r3, #1
 8103794:	e00e      	b.n	81037b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	2b0f      	cmp	r3, #15
 810379a:	d80a      	bhi.n	81037b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810379c:	2200      	movs	r2, #0
 810379e:	6879      	ldr	r1, [r7, #4]
 81037a0:	f04f 30ff 	mov.w	r0, #4294967295
 81037a4:	f000 f92f 	bl	8103a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81037a8:	4a06      	ldr	r2, [pc, #24]	; (81037c4 <HAL_InitTick+0x68>)
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81037ae:	2300      	movs	r3, #0
 81037b0:	e000      	b.n	81037b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81037b2:	2301      	movs	r3, #1
}
 81037b4:	4618      	mov	r0, r3
 81037b6:	3708      	adds	r7, #8
 81037b8:	46bd      	mov	sp, r7
 81037ba:	bd80      	pop	{r7, pc}
 81037bc:	10000020 	.word	0x10000020
 81037c0:	10000000 	.word	0x10000000
 81037c4:	1000001c 	.word	0x1000001c

081037c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81037c8:	b480      	push	{r7}
 81037ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81037cc:	4b06      	ldr	r3, [pc, #24]	; (81037e8 <HAL_IncTick+0x20>)
 81037ce:	781b      	ldrb	r3, [r3, #0]
 81037d0:	461a      	mov	r2, r3
 81037d2:	4b06      	ldr	r3, [pc, #24]	; (81037ec <HAL_IncTick+0x24>)
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	4413      	add	r3, r2
 81037d8:	4a04      	ldr	r2, [pc, #16]	; (81037ec <HAL_IncTick+0x24>)
 81037da:	6013      	str	r3, [r2, #0]
}
 81037dc:	bf00      	nop
 81037de:	46bd      	mov	sp, r7
 81037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e4:	4770      	bx	lr
 81037e6:	bf00      	nop
 81037e8:	10000020 	.word	0x10000020
 81037ec:	10000610 	.word	0x10000610

081037f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81037f0:	b480      	push	{r7}
 81037f2:	af00      	add	r7, sp, #0
  return uwTick;
 81037f4:	4b03      	ldr	r3, [pc, #12]	; (8103804 <HAL_GetTick+0x14>)
 81037f6:	681b      	ldr	r3, [r3, #0]
}
 81037f8:	4618      	mov	r0, r3
 81037fa:	46bd      	mov	sp, r7
 81037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103800:	4770      	bx	lr
 8103802:	bf00      	nop
 8103804:	10000610 	.word	0x10000610

08103808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103808:	b580      	push	{r7, lr}
 810380a:	b084      	sub	sp, #16
 810380c:	af00      	add	r7, sp, #0
 810380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103810:	f7ff ffee 	bl	81037f0 <HAL_GetTick>
 8103814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810381a:	68fb      	ldr	r3, [r7, #12]
 810381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103820:	d005      	beq.n	810382e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103822:	4b0a      	ldr	r3, [pc, #40]	; (810384c <HAL_Delay+0x44>)
 8103824:	781b      	ldrb	r3, [r3, #0]
 8103826:	461a      	mov	r2, r3
 8103828:	68fb      	ldr	r3, [r7, #12]
 810382a:	4413      	add	r3, r2
 810382c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810382e:	bf00      	nop
 8103830:	f7ff ffde 	bl	81037f0 <HAL_GetTick>
 8103834:	4602      	mov	r2, r0
 8103836:	68bb      	ldr	r3, [r7, #8]
 8103838:	1ad3      	subs	r3, r2, r3
 810383a:	68fa      	ldr	r2, [r7, #12]
 810383c:	429a      	cmp	r2, r3
 810383e:	d8f7      	bhi.n	8103830 <HAL_Delay+0x28>
  {
  }
}
 8103840:	bf00      	nop
 8103842:	bf00      	nop
 8103844:	3710      	adds	r7, #16
 8103846:	46bd      	mov	sp, r7
 8103848:	bd80      	pop	{r7, pc}
 810384a:	bf00      	nop
 810384c:	10000020 	.word	0x10000020

08103850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103850:	b480      	push	{r7}
 8103852:	b085      	sub	sp, #20
 8103854:	af00      	add	r7, sp, #0
 8103856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	f003 0307 	and.w	r3, r3, #7
 810385e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103860:	4b0c      	ldr	r3, [pc, #48]	; (8103894 <__NVIC_SetPriorityGrouping+0x44>)
 8103862:	68db      	ldr	r3, [r3, #12]
 8103864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103866:	68ba      	ldr	r2, [r7, #8]
 8103868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810386c:	4013      	ands	r3, r2
 810386e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103870:	68fb      	ldr	r3, [r7, #12]
 8103872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103874:	68bb      	ldr	r3, [r7, #8]
 8103876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103882:	4a04      	ldr	r2, [pc, #16]	; (8103894 <__NVIC_SetPriorityGrouping+0x44>)
 8103884:	68bb      	ldr	r3, [r7, #8]
 8103886:	60d3      	str	r3, [r2, #12]
}
 8103888:	bf00      	nop
 810388a:	3714      	adds	r7, #20
 810388c:	46bd      	mov	sp, r7
 810388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103892:	4770      	bx	lr
 8103894:	e000ed00 	.word	0xe000ed00

08103898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103898:	b480      	push	{r7}
 810389a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810389c:	4b04      	ldr	r3, [pc, #16]	; (81038b0 <__NVIC_GetPriorityGrouping+0x18>)
 810389e:	68db      	ldr	r3, [r3, #12]
 81038a0:	0a1b      	lsrs	r3, r3, #8
 81038a2:	f003 0307 	and.w	r3, r3, #7
}
 81038a6:	4618      	mov	r0, r3
 81038a8:	46bd      	mov	sp, r7
 81038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ae:	4770      	bx	lr
 81038b0:	e000ed00 	.word	0xe000ed00

081038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81038b4:	b480      	push	{r7}
 81038b6:	b083      	sub	sp, #12
 81038b8:	af00      	add	r7, sp, #0
 81038ba:	4603      	mov	r3, r0
 81038bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81038be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038c2:	2b00      	cmp	r3, #0
 81038c4:	db0b      	blt.n	81038de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81038c6:	88fb      	ldrh	r3, [r7, #6]
 81038c8:	f003 021f 	and.w	r2, r3, #31
 81038cc:	4907      	ldr	r1, [pc, #28]	; (81038ec <__NVIC_EnableIRQ+0x38>)
 81038ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81038d2:	095b      	lsrs	r3, r3, #5
 81038d4:	2001      	movs	r0, #1
 81038d6:	fa00 f202 	lsl.w	r2, r0, r2
 81038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81038de:	bf00      	nop
 81038e0:	370c      	adds	r7, #12
 81038e2:	46bd      	mov	sp, r7
 81038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e8:	4770      	bx	lr
 81038ea:	bf00      	nop
 81038ec:	e000e100 	.word	0xe000e100

081038f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81038f0:	b480      	push	{r7}
 81038f2:	b083      	sub	sp, #12
 81038f4:	af00      	add	r7, sp, #0
 81038f6:	4603      	mov	r3, r0
 81038f8:	6039      	str	r1, [r7, #0]
 81038fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81038fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103900:	2b00      	cmp	r3, #0
 8103902:	db0a      	blt.n	810391a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103904:	683b      	ldr	r3, [r7, #0]
 8103906:	b2da      	uxtb	r2, r3
 8103908:	490c      	ldr	r1, [pc, #48]	; (810393c <__NVIC_SetPriority+0x4c>)
 810390a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810390e:	0112      	lsls	r2, r2, #4
 8103910:	b2d2      	uxtb	r2, r2
 8103912:	440b      	add	r3, r1
 8103914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103918:	e00a      	b.n	8103930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810391a:	683b      	ldr	r3, [r7, #0]
 810391c:	b2da      	uxtb	r2, r3
 810391e:	4908      	ldr	r1, [pc, #32]	; (8103940 <__NVIC_SetPriority+0x50>)
 8103920:	88fb      	ldrh	r3, [r7, #6]
 8103922:	f003 030f 	and.w	r3, r3, #15
 8103926:	3b04      	subs	r3, #4
 8103928:	0112      	lsls	r2, r2, #4
 810392a:	b2d2      	uxtb	r2, r2
 810392c:	440b      	add	r3, r1
 810392e:	761a      	strb	r2, [r3, #24]
}
 8103930:	bf00      	nop
 8103932:	370c      	adds	r7, #12
 8103934:	46bd      	mov	sp, r7
 8103936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810393a:	4770      	bx	lr
 810393c:	e000e100 	.word	0xe000e100
 8103940:	e000ed00 	.word	0xe000ed00

08103944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103944:	b480      	push	{r7}
 8103946:	b089      	sub	sp, #36	; 0x24
 8103948:	af00      	add	r7, sp, #0
 810394a:	60f8      	str	r0, [r7, #12]
 810394c:	60b9      	str	r1, [r7, #8]
 810394e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103950:	68fb      	ldr	r3, [r7, #12]
 8103952:	f003 0307 	and.w	r3, r3, #7
 8103956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103958:	69fb      	ldr	r3, [r7, #28]
 810395a:	f1c3 0307 	rsb	r3, r3, #7
 810395e:	2b04      	cmp	r3, #4
 8103960:	bf28      	it	cs
 8103962:	2304      	movcs	r3, #4
 8103964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103966:	69fb      	ldr	r3, [r7, #28]
 8103968:	3304      	adds	r3, #4
 810396a:	2b06      	cmp	r3, #6
 810396c:	d902      	bls.n	8103974 <NVIC_EncodePriority+0x30>
 810396e:	69fb      	ldr	r3, [r7, #28]
 8103970:	3b03      	subs	r3, #3
 8103972:	e000      	b.n	8103976 <NVIC_EncodePriority+0x32>
 8103974:	2300      	movs	r3, #0
 8103976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103978:	f04f 32ff 	mov.w	r2, #4294967295
 810397c:	69bb      	ldr	r3, [r7, #24]
 810397e:	fa02 f303 	lsl.w	r3, r2, r3
 8103982:	43da      	mvns	r2, r3
 8103984:	68bb      	ldr	r3, [r7, #8]
 8103986:	401a      	ands	r2, r3
 8103988:	697b      	ldr	r3, [r7, #20]
 810398a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810398c:	f04f 31ff 	mov.w	r1, #4294967295
 8103990:	697b      	ldr	r3, [r7, #20]
 8103992:	fa01 f303 	lsl.w	r3, r1, r3
 8103996:	43d9      	mvns	r1, r3
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810399c:	4313      	orrs	r3, r2
         );
}
 810399e:	4618      	mov	r0, r3
 81039a0:	3724      	adds	r7, #36	; 0x24
 81039a2:	46bd      	mov	sp, r7
 81039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039a8:	4770      	bx	lr
	...

081039ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81039ac:	b580      	push	{r7, lr}
 81039ae:	b082      	sub	sp, #8
 81039b0:	af00      	add	r7, sp, #0
 81039b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	3b01      	subs	r3, #1
 81039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81039bc:	d301      	bcc.n	81039c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81039be:	2301      	movs	r3, #1
 81039c0:	e00f      	b.n	81039e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81039c2:	4a0a      	ldr	r2, [pc, #40]	; (81039ec <SysTick_Config+0x40>)
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	3b01      	subs	r3, #1
 81039c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81039ca:	210f      	movs	r1, #15
 81039cc:	f04f 30ff 	mov.w	r0, #4294967295
 81039d0:	f7ff ff8e 	bl	81038f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81039d4:	4b05      	ldr	r3, [pc, #20]	; (81039ec <SysTick_Config+0x40>)
 81039d6:	2200      	movs	r2, #0
 81039d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81039da:	4b04      	ldr	r3, [pc, #16]	; (81039ec <SysTick_Config+0x40>)
 81039dc:	2207      	movs	r2, #7
 81039de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81039e0:	2300      	movs	r3, #0
}
 81039e2:	4618      	mov	r0, r3
 81039e4:	3708      	adds	r7, #8
 81039e6:	46bd      	mov	sp, r7
 81039e8:	bd80      	pop	{r7, pc}
 81039ea:	bf00      	nop
 81039ec:	e000e010 	.word	0xe000e010

081039f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81039f0:	b580      	push	{r7, lr}
 81039f2:	b082      	sub	sp, #8
 81039f4:	af00      	add	r7, sp, #0
 81039f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81039f8:	6878      	ldr	r0, [r7, #4]
 81039fa:	f7ff ff29 	bl	8103850 <__NVIC_SetPriorityGrouping>
}
 81039fe:	bf00      	nop
 8103a00:	3708      	adds	r7, #8
 8103a02:	46bd      	mov	sp, r7
 8103a04:	bd80      	pop	{r7, pc}

08103a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103a06:	b580      	push	{r7, lr}
 8103a08:	b086      	sub	sp, #24
 8103a0a:	af00      	add	r7, sp, #0
 8103a0c:	4603      	mov	r3, r0
 8103a0e:	60b9      	str	r1, [r7, #8]
 8103a10:	607a      	str	r2, [r7, #4]
 8103a12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103a14:	f7ff ff40 	bl	8103898 <__NVIC_GetPriorityGrouping>
 8103a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103a1a:	687a      	ldr	r2, [r7, #4]
 8103a1c:	68b9      	ldr	r1, [r7, #8]
 8103a1e:	6978      	ldr	r0, [r7, #20]
 8103a20:	f7ff ff90 	bl	8103944 <NVIC_EncodePriority>
 8103a24:	4602      	mov	r2, r0
 8103a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103a2a:	4611      	mov	r1, r2
 8103a2c:	4618      	mov	r0, r3
 8103a2e:	f7ff ff5f 	bl	81038f0 <__NVIC_SetPriority>
}
 8103a32:	bf00      	nop
 8103a34:	3718      	adds	r7, #24
 8103a36:	46bd      	mov	sp, r7
 8103a38:	bd80      	pop	{r7, pc}

08103a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103a3a:	b580      	push	{r7, lr}
 8103a3c:	b082      	sub	sp, #8
 8103a3e:	af00      	add	r7, sp, #0
 8103a40:	4603      	mov	r3, r0
 8103a42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103a48:	4618      	mov	r0, r3
 8103a4a:	f7ff ff33 	bl	81038b4 <__NVIC_EnableIRQ>
}
 8103a4e:	bf00      	nop
 8103a50:	3708      	adds	r7, #8
 8103a52:	46bd      	mov	sp, r7
 8103a54:	bd80      	pop	{r7, pc}

08103a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103a56:	b580      	push	{r7, lr}
 8103a58:	b082      	sub	sp, #8
 8103a5a:	af00      	add	r7, sp, #0
 8103a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103a5e:	6878      	ldr	r0, [r7, #4]
 8103a60:	f7ff ffa4 	bl	81039ac <SysTick_Config>
 8103a64:	4603      	mov	r3, r0
}
 8103a66:	4618      	mov	r0, r3
 8103a68:	3708      	adds	r7, #8
 8103a6a:	46bd      	mov	sp, r7
 8103a6c:	bd80      	pop	{r7, pc}
	...

08103a70 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103a70:	b480      	push	{r7}
 8103a72:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103a74:	4b07      	ldr	r3, [pc, #28]	; (8103a94 <HAL_GetCurrentCPUID+0x24>)
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	091b      	lsrs	r3, r3, #4
 8103a7a:	f003 030f 	and.w	r3, r3, #15
 8103a7e:	2b07      	cmp	r3, #7
 8103a80:	d101      	bne.n	8103a86 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103a82:	2303      	movs	r3, #3
 8103a84:	e000      	b.n	8103a88 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103a86:	2301      	movs	r3, #1
  }
}
 8103a88:	4618      	mov	r0, r3
 8103a8a:	46bd      	mov	sp, r7
 8103a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a90:	4770      	bx	lr
 8103a92:	bf00      	nop
 8103a94:	e000ed00 	.word	0xe000ed00

08103a98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103a98:	b580      	push	{r7, lr}
 8103a9a:	b086      	sub	sp, #24
 8103a9c:	af00      	add	r7, sp, #0
 8103a9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103aa0:	f7ff fea6 	bl	81037f0 <HAL_GetTick>
 8103aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d101      	bne.n	8103ab0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103aac:	2301      	movs	r3, #1
 8103aae:	e314      	b.n	81040da <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103ab0:	687b      	ldr	r3, [r7, #4]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	4a66      	ldr	r2, [pc, #408]	; (8103c50 <HAL_DMA_Init+0x1b8>)
 8103ab6:	4293      	cmp	r3, r2
 8103ab8:	d04a      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	681b      	ldr	r3, [r3, #0]
 8103abe:	4a65      	ldr	r2, [pc, #404]	; (8103c54 <HAL_DMA_Init+0x1bc>)
 8103ac0:	4293      	cmp	r3, r2
 8103ac2:	d045      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	4a63      	ldr	r2, [pc, #396]	; (8103c58 <HAL_DMA_Init+0x1c0>)
 8103aca:	4293      	cmp	r3, r2
 8103acc:	d040      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103ace:	687b      	ldr	r3, [r7, #4]
 8103ad0:	681b      	ldr	r3, [r3, #0]
 8103ad2:	4a62      	ldr	r2, [pc, #392]	; (8103c5c <HAL_DMA_Init+0x1c4>)
 8103ad4:	4293      	cmp	r3, r2
 8103ad6:	d03b      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	4a60      	ldr	r2, [pc, #384]	; (8103c60 <HAL_DMA_Init+0x1c8>)
 8103ade:	4293      	cmp	r3, r2
 8103ae0:	d036      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	4a5f      	ldr	r2, [pc, #380]	; (8103c64 <HAL_DMA_Init+0x1cc>)
 8103ae8:	4293      	cmp	r3, r2
 8103aea:	d031      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	681b      	ldr	r3, [r3, #0]
 8103af0:	4a5d      	ldr	r2, [pc, #372]	; (8103c68 <HAL_DMA_Init+0x1d0>)
 8103af2:	4293      	cmp	r3, r2
 8103af4:	d02c      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	4a5c      	ldr	r2, [pc, #368]	; (8103c6c <HAL_DMA_Init+0x1d4>)
 8103afc:	4293      	cmp	r3, r2
 8103afe:	d027      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	4a5a      	ldr	r2, [pc, #360]	; (8103c70 <HAL_DMA_Init+0x1d8>)
 8103b06:	4293      	cmp	r3, r2
 8103b08:	d022      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	4a59      	ldr	r2, [pc, #356]	; (8103c74 <HAL_DMA_Init+0x1dc>)
 8103b10:	4293      	cmp	r3, r2
 8103b12:	d01d      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	4a57      	ldr	r2, [pc, #348]	; (8103c78 <HAL_DMA_Init+0x1e0>)
 8103b1a:	4293      	cmp	r3, r2
 8103b1c:	d018      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	4a56      	ldr	r2, [pc, #344]	; (8103c7c <HAL_DMA_Init+0x1e4>)
 8103b24:	4293      	cmp	r3, r2
 8103b26:	d013      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	4a54      	ldr	r2, [pc, #336]	; (8103c80 <HAL_DMA_Init+0x1e8>)
 8103b2e:	4293      	cmp	r3, r2
 8103b30:	d00e      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	681b      	ldr	r3, [r3, #0]
 8103b36:	4a53      	ldr	r2, [pc, #332]	; (8103c84 <HAL_DMA_Init+0x1ec>)
 8103b38:	4293      	cmp	r3, r2
 8103b3a:	d009      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	4a51      	ldr	r2, [pc, #324]	; (8103c88 <HAL_DMA_Init+0x1f0>)
 8103b42:	4293      	cmp	r3, r2
 8103b44:	d004      	beq.n	8103b50 <HAL_DMA_Init+0xb8>
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	4a50      	ldr	r2, [pc, #320]	; (8103c8c <HAL_DMA_Init+0x1f4>)
 8103b4c:	4293      	cmp	r3, r2
 8103b4e:	d101      	bne.n	8103b54 <HAL_DMA_Init+0xbc>
 8103b50:	2301      	movs	r3, #1
 8103b52:	e000      	b.n	8103b56 <HAL_DMA_Init+0xbe>
 8103b54:	2300      	movs	r3, #0
 8103b56:	2b00      	cmp	r3, #0
 8103b58:	f000 813b 	beq.w	8103dd2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	2200      	movs	r2, #0
 8103b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	2202      	movs	r2, #2
 8103b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	4a37      	ldr	r2, [pc, #220]	; (8103c50 <HAL_DMA_Init+0x1b8>)
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d04a      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	4a36      	ldr	r2, [pc, #216]	; (8103c54 <HAL_DMA_Init+0x1bc>)
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	d045      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	4a34      	ldr	r2, [pc, #208]	; (8103c58 <HAL_DMA_Init+0x1c0>)
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d040      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	681b      	ldr	r3, [r3, #0]
 8103b8e:	4a33      	ldr	r2, [pc, #204]	; (8103c5c <HAL_DMA_Init+0x1c4>)
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d03b      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	4a31      	ldr	r2, [pc, #196]	; (8103c60 <HAL_DMA_Init+0x1c8>)
 8103b9a:	4293      	cmp	r3, r2
 8103b9c:	d036      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	4a30      	ldr	r2, [pc, #192]	; (8103c64 <HAL_DMA_Init+0x1cc>)
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d031      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	4a2e      	ldr	r2, [pc, #184]	; (8103c68 <HAL_DMA_Init+0x1d0>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d02c      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	4a2d      	ldr	r2, [pc, #180]	; (8103c6c <HAL_DMA_Init+0x1d4>)
 8103bb8:	4293      	cmp	r3, r2
 8103bba:	d027      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	4a2b      	ldr	r2, [pc, #172]	; (8103c70 <HAL_DMA_Init+0x1d8>)
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d022      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4a2a      	ldr	r2, [pc, #168]	; (8103c74 <HAL_DMA_Init+0x1dc>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d01d      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	4a28      	ldr	r2, [pc, #160]	; (8103c78 <HAL_DMA_Init+0x1e0>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d018      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	681b      	ldr	r3, [r3, #0]
 8103bde:	4a27      	ldr	r2, [pc, #156]	; (8103c7c <HAL_DMA_Init+0x1e4>)
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d013      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	4a25      	ldr	r2, [pc, #148]	; (8103c80 <HAL_DMA_Init+0x1e8>)
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d00e      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	681b      	ldr	r3, [r3, #0]
 8103bf2:	4a24      	ldr	r2, [pc, #144]	; (8103c84 <HAL_DMA_Init+0x1ec>)
 8103bf4:	4293      	cmp	r3, r2
 8103bf6:	d009      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	681b      	ldr	r3, [r3, #0]
 8103bfc:	4a22      	ldr	r2, [pc, #136]	; (8103c88 <HAL_DMA_Init+0x1f0>)
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d004      	beq.n	8103c0c <HAL_DMA_Init+0x174>
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	4a21      	ldr	r2, [pc, #132]	; (8103c8c <HAL_DMA_Init+0x1f4>)
 8103c08:	4293      	cmp	r3, r2
 8103c0a:	d108      	bne.n	8103c1e <HAL_DMA_Init+0x186>
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	681a      	ldr	r2, [r3, #0]
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	681b      	ldr	r3, [r3, #0]
 8103c16:	f022 0201 	bic.w	r2, r2, #1
 8103c1a:	601a      	str	r2, [r3, #0]
 8103c1c:	e007      	b.n	8103c2e <HAL_DMA_Init+0x196>
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	681a      	ldr	r2, [r3, #0]
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	f022 0201 	bic.w	r2, r2, #1
 8103c2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103c2e:	e02f      	b.n	8103c90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103c30:	f7ff fdde 	bl	81037f0 <HAL_GetTick>
 8103c34:	4602      	mov	r2, r0
 8103c36:	693b      	ldr	r3, [r7, #16]
 8103c38:	1ad3      	subs	r3, r2, r3
 8103c3a:	2b05      	cmp	r3, #5
 8103c3c:	d928      	bls.n	8103c90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	2220      	movs	r2, #32
 8103c42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	2203      	movs	r2, #3
 8103c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103c4c:	2301      	movs	r3, #1
 8103c4e:	e244      	b.n	81040da <HAL_DMA_Init+0x642>
 8103c50:	40020010 	.word	0x40020010
 8103c54:	40020028 	.word	0x40020028
 8103c58:	40020040 	.word	0x40020040
 8103c5c:	40020058 	.word	0x40020058
 8103c60:	40020070 	.word	0x40020070
 8103c64:	40020088 	.word	0x40020088
 8103c68:	400200a0 	.word	0x400200a0
 8103c6c:	400200b8 	.word	0x400200b8
 8103c70:	40020410 	.word	0x40020410
 8103c74:	40020428 	.word	0x40020428
 8103c78:	40020440 	.word	0x40020440
 8103c7c:	40020458 	.word	0x40020458
 8103c80:	40020470 	.word	0x40020470
 8103c84:	40020488 	.word	0x40020488
 8103c88:	400204a0 	.word	0x400204a0
 8103c8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	f003 0301 	and.w	r3, r3, #1
 8103c9a:	2b00      	cmp	r3, #0
 8103c9c:	d1c8      	bne.n	8103c30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103ca6:	697a      	ldr	r2, [r7, #20]
 8103ca8:	4b84      	ldr	r3, [pc, #528]	; (8103ebc <HAL_DMA_Init+0x424>)
 8103caa:	4013      	ands	r3, r2
 8103cac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8103cb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	691b      	ldr	r3, [r3, #16]
 8103cbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	699b      	ldr	r3, [r3, #24]
 8103cc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103cce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	6a1b      	ldr	r3, [r3, #32]
 8103cd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103cd6:	697a      	ldr	r2, [r7, #20]
 8103cd8:	4313      	orrs	r3, r2
 8103cda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ce0:	2b04      	cmp	r3, #4
 8103ce2:	d107      	bne.n	8103cf4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103cec:	4313      	orrs	r3, r2
 8103cee:	697a      	ldr	r2, [r7, #20]
 8103cf0:	4313      	orrs	r3, r2
 8103cf2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103cf4:	4b72      	ldr	r3, [pc, #456]	; (8103ec0 <HAL_DMA_Init+0x428>)
 8103cf6:	681b      	ldr	r3, [r3, #0]
 8103cf8:	0c1b      	lsrs	r3, r3, #16
 8103cfa:	041b      	lsls	r3, r3, #16
 8103cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d00:	d328      	bcc.n	8103d54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103d02:	687b      	ldr	r3, [r7, #4]
 8103d04:	685b      	ldr	r3, [r3, #4]
 8103d06:	2b28      	cmp	r3, #40	; 0x28
 8103d08:	d903      	bls.n	8103d12 <HAL_DMA_Init+0x27a>
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	685b      	ldr	r3, [r3, #4]
 8103d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8103d10:	d917      	bls.n	8103d42 <HAL_DMA_Init+0x2aa>
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	685b      	ldr	r3, [r3, #4]
 8103d16:	2b3e      	cmp	r3, #62	; 0x3e
 8103d18:	d903      	bls.n	8103d22 <HAL_DMA_Init+0x28a>
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	685b      	ldr	r3, [r3, #4]
 8103d1e:	2b42      	cmp	r3, #66	; 0x42
 8103d20:	d90f      	bls.n	8103d42 <HAL_DMA_Init+0x2aa>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	685b      	ldr	r3, [r3, #4]
 8103d26:	2b46      	cmp	r3, #70	; 0x46
 8103d28:	d903      	bls.n	8103d32 <HAL_DMA_Init+0x29a>
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	685b      	ldr	r3, [r3, #4]
 8103d2e:	2b48      	cmp	r3, #72	; 0x48
 8103d30:	d907      	bls.n	8103d42 <HAL_DMA_Init+0x2aa>
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	685b      	ldr	r3, [r3, #4]
 8103d36:	2b4e      	cmp	r3, #78	; 0x4e
 8103d38:	d905      	bls.n	8103d46 <HAL_DMA_Init+0x2ae>
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	685b      	ldr	r3, [r3, #4]
 8103d3e:	2b52      	cmp	r3, #82	; 0x52
 8103d40:	d801      	bhi.n	8103d46 <HAL_DMA_Init+0x2ae>
 8103d42:	2301      	movs	r3, #1
 8103d44:	e000      	b.n	8103d48 <HAL_DMA_Init+0x2b0>
 8103d46:	2300      	movs	r3, #0
 8103d48:	2b00      	cmp	r3, #0
 8103d4a:	d003      	beq.n	8103d54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103d4c:	697b      	ldr	r3, [r7, #20]
 8103d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103d52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	681b      	ldr	r3, [r3, #0]
 8103d58:	697a      	ldr	r2, [r7, #20]
 8103d5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	695b      	ldr	r3, [r3, #20]
 8103d62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103d64:	697b      	ldr	r3, [r7, #20]
 8103d66:	f023 0307 	bic.w	r3, r3, #7
 8103d6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d70:	697a      	ldr	r2, [r7, #20]
 8103d72:	4313      	orrs	r3, r2
 8103d74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d7a:	2b04      	cmp	r3, #4
 8103d7c:	d117      	bne.n	8103dae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103d82:	697a      	ldr	r2, [r7, #20]
 8103d84:	4313      	orrs	r3, r2
 8103d86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d8c:	2b00      	cmp	r3, #0
 8103d8e:	d00e      	beq.n	8103dae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103d90:	6878      	ldr	r0, [r7, #4]
 8103d92:	f002 fb49 	bl	8106428 <DMA_CheckFifoParam>
 8103d96:	4603      	mov	r3, r0
 8103d98:	2b00      	cmp	r3, #0
 8103d9a:	d008      	beq.n	8103dae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	2240      	movs	r2, #64	; 0x40
 8103da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	2201      	movs	r2, #1
 8103da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8103daa:	2301      	movs	r3, #1
 8103dac:	e195      	b.n	81040da <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	697a      	ldr	r2, [r7, #20]
 8103db4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103db6:	6878      	ldr	r0, [r7, #4]
 8103db8:	f002 fa84 	bl	81062c4 <DMA_CalcBaseAndBitshift>
 8103dbc:	4603      	mov	r3, r0
 8103dbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dc4:	f003 031f 	and.w	r3, r3, #31
 8103dc8:	223f      	movs	r2, #63	; 0x3f
 8103dca:	409a      	lsls	r2, r3
 8103dcc:	68bb      	ldr	r3, [r7, #8]
 8103dce:	609a      	str	r2, [r3, #8]
 8103dd0:	e0cb      	b.n	8103f6a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	4a3b      	ldr	r2, [pc, #236]	; (8103ec4 <HAL_DMA_Init+0x42c>)
 8103dd8:	4293      	cmp	r3, r2
 8103dda:	d022      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	4a39      	ldr	r2, [pc, #228]	; (8103ec8 <HAL_DMA_Init+0x430>)
 8103de2:	4293      	cmp	r3, r2
 8103de4:	d01d      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	681b      	ldr	r3, [r3, #0]
 8103dea:	4a38      	ldr	r2, [pc, #224]	; (8103ecc <HAL_DMA_Init+0x434>)
 8103dec:	4293      	cmp	r3, r2
 8103dee:	d018      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	4a36      	ldr	r2, [pc, #216]	; (8103ed0 <HAL_DMA_Init+0x438>)
 8103df6:	4293      	cmp	r3, r2
 8103df8:	d013      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103dfa:	687b      	ldr	r3, [r7, #4]
 8103dfc:	681b      	ldr	r3, [r3, #0]
 8103dfe:	4a35      	ldr	r2, [pc, #212]	; (8103ed4 <HAL_DMA_Init+0x43c>)
 8103e00:	4293      	cmp	r3, r2
 8103e02:	d00e      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	4a33      	ldr	r2, [pc, #204]	; (8103ed8 <HAL_DMA_Init+0x440>)
 8103e0a:	4293      	cmp	r3, r2
 8103e0c:	d009      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	4a32      	ldr	r2, [pc, #200]	; (8103edc <HAL_DMA_Init+0x444>)
 8103e14:	4293      	cmp	r3, r2
 8103e16:	d004      	beq.n	8103e22 <HAL_DMA_Init+0x38a>
 8103e18:	687b      	ldr	r3, [r7, #4]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	4a30      	ldr	r2, [pc, #192]	; (8103ee0 <HAL_DMA_Init+0x448>)
 8103e1e:	4293      	cmp	r3, r2
 8103e20:	d101      	bne.n	8103e26 <HAL_DMA_Init+0x38e>
 8103e22:	2301      	movs	r3, #1
 8103e24:	e000      	b.n	8103e28 <HAL_DMA_Init+0x390>
 8103e26:	2300      	movs	r3, #0
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	f000 8095 	beq.w	8103f58 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a24      	ldr	r2, [pc, #144]	; (8103ec4 <HAL_DMA_Init+0x42c>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d021      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a22      	ldr	r2, [pc, #136]	; (8103ec8 <HAL_DMA_Init+0x430>)
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d01c      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a21      	ldr	r2, [pc, #132]	; (8103ecc <HAL_DMA_Init+0x434>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d017      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	4a1f      	ldr	r2, [pc, #124]	; (8103ed0 <HAL_DMA_Init+0x438>)
 8103e52:	4293      	cmp	r3, r2
 8103e54:	d012      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	4a1e      	ldr	r2, [pc, #120]	; (8103ed4 <HAL_DMA_Init+0x43c>)
 8103e5c:	4293      	cmp	r3, r2
 8103e5e:	d00d      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	4a1c      	ldr	r2, [pc, #112]	; (8103ed8 <HAL_DMA_Init+0x440>)
 8103e66:	4293      	cmp	r3, r2
 8103e68:	d008      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	4a1b      	ldr	r2, [pc, #108]	; (8103edc <HAL_DMA_Init+0x444>)
 8103e70:	4293      	cmp	r3, r2
 8103e72:	d003      	beq.n	8103e7c <HAL_DMA_Init+0x3e4>
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	681b      	ldr	r3, [r3, #0]
 8103e78:	4a19      	ldr	r2, [pc, #100]	; (8103ee0 <HAL_DMA_Init+0x448>)
 8103e7a:	4293      	cmp	r3, r2
 8103e7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	2200      	movs	r2, #0
 8103e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	2202      	movs	r2, #2
 8103e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103e96:	697b      	ldr	r3, [r7, #20]
 8103e98:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103e9c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103ea0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	689b      	ldr	r3, [r3, #8]
 8103ea6:	2b40      	cmp	r3, #64	; 0x40
 8103ea8:	d01c      	beq.n	8103ee4 <HAL_DMA_Init+0x44c>
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	689b      	ldr	r3, [r3, #8]
 8103eae:	2b80      	cmp	r3, #128	; 0x80
 8103eb0:	d102      	bne.n	8103eb8 <HAL_DMA_Init+0x420>
 8103eb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103eb6:	e016      	b.n	8103ee6 <HAL_DMA_Init+0x44e>
 8103eb8:	2300      	movs	r3, #0
 8103eba:	e014      	b.n	8103ee6 <HAL_DMA_Init+0x44e>
 8103ebc:	fe10803f 	.word	0xfe10803f
 8103ec0:	5c001000 	.word	0x5c001000
 8103ec4:	58025408 	.word	0x58025408
 8103ec8:	5802541c 	.word	0x5802541c
 8103ecc:	58025430 	.word	0x58025430
 8103ed0:	58025444 	.word	0x58025444
 8103ed4:	58025458 	.word	0x58025458
 8103ed8:	5802546c 	.word	0x5802546c
 8103edc:	58025480 	.word	0x58025480
 8103ee0:	58025494 	.word	0x58025494
 8103ee4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103ee6:	687a      	ldr	r2, [r7, #4]
 8103ee8:	68d2      	ldr	r2, [r2, #12]
 8103eea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	691b      	ldr	r3, [r3, #16]
 8103ef2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103ef4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	695b      	ldr	r3, [r3, #20]
 8103efa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	699b      	ldr	r3, [r3, #24]
 8103f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	69db      	ldr	r3, [r3, #28]
 8103f0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103f0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	6a1b      	ldr	r3, [r3, #32]
 8103f12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103f14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103f16:	697a      	ldr	r2, [r7, #20]
 8103f18:	4313      	orrs	r3, r2
 8103f1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	697a      	ldr	r2, [r7, #20]
 8103f22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	461a      	mov	r2, r3
 8103f2a:	4b6e      	ldr	r3, [pc, #440]	; (81040e4 <HAL_DMA_Init+0x64c>)
 8103f2c:	4413      	add	r3, r2
 8103f2e:	4a6e      	ldr	r2, [pc, #440]	; (81040e8 <HAL_DMA_Init+0x650>)
 8103f30:	fba2 2303 	umull	r2, r3, r2, r3
 8103f34:	091b      	lsrs	r3, r3, #4
 8103f36:	009a      	lsls	r2, r3, #2
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103f3c:	6878      	ldr	r0, [r7, #4]
 8103f3e:	f002 f9c1 	bl	81062c4 <DMA_CalcBaseAndBitshift>
 8103f42:	4603      	mov	r3, r0
 8103f44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f4a:	f003 031f 	and.w	r3, r3, #31
 8103f4e:	2201      	movs	r2, #1
 8103f50:	409a      	lsls	r2, r3
 8103f52:	68fb      	ldr	r3, [r7, #12]
 8103f54:	605a      	str	r2, [r3, #4]
 8103f56:	e008      	b.n	8103f6a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	2240      	movs	r2, #64	; 0x40
 8103f5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	2203      	movs	r2, #3
 8103f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103f66:	2301      	movs	r3, #1
 8103f68:	e0b7      	b.n	81040da <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	4a5f      	ldr	r2, [pc, #380]	; (81040ec <HAL_DMA_Init+0x654>)
 8103f70:	4293      	cmp	r3, r2
 8103f72:	d072      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	4a5d      	ldr	r2, [pc, #372]	; (81040f0 <HAL_DMA_Init+0x658>)
 8103f7a:	4293      	cmp	r3, r2
 8103f7c:	d06d      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	4a5c      	ldr	r2, [pc, #368]	; (81040f4 <HAL_DMA_Init+0x65c>)
 8103f84:	4293      	cmp	r3, r2
 8103f86:	d068      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	4a5a      	ldr	r2, [pc, #360]	; (81040f8 <HAL_DMA_Init+0x660>)
 8103f8e:	4293      	cmp	r3, r2
 8103f90:	d063      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	4a59      	ldr	r2, [pc, #356]	; (81040fc <HAL_DMA_Init+0x664>)
 8103f98:	4293      	cmp	r3, r2
 8103f9a:	d05e      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	4a57      	ldr	r2, [pc, #348]	; (8104100 <HAL_DMA_Init+0x668>)
 8103fa2:	4293      	cmp	r3, r2
 8103fa4:	d059      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	681b      	ldr	r3, [r3, #0]
 8103faa:	4a56      	ldr	r2, [pc, #344]	; (8104104 <HAL_DMA_Init+0x66c>)
 8103fac:	4293      	cmp	r3, r2
 8103fae:	d054      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	681b      	ldr	r3, [r3, #0]
 8103fb4:	4a54      	ldr	r2, [pc, #336]	; (8104108 <HAL_DMA_Init+0x670>)
 8103fb6:	4293      	cmp	r3, r2
 8103fb8:	d04f      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	681b      	ldr	r3, [r3, #0]
 8103fbe:	4a53      	ldr	r2, [pc, #332]	; (810410c <HAL_DMA_Init+0x674>)
 8103fc0:	4293      	cmp	r3, r2
 8103fc2:	d04a      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	681b      	ldr	r3, [r3, #0]
 8103fc8:	4a51      	ldr	r2, [pc, #324]	; (8104110 <HAL_DMA_Init+0x678>)
 8103fca:	4293      	cmp	r3, r2
 8103fcc:	d045      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	4a50      	ldr	r2, [pc, #320]	; (8104114 <HAL_DMA_Init+0x67c>)
 8103fd4:	4293      	cmp	r3, r2
 8103fd6:	d040      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	4a4e      	ldr	r2, [pc, #312]	; (8104118 <HAL_DMA_Init+0x680>)
 8103fde:	4293      	cmp	r3, r2
 8103fe0:	d03b      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a4d      	ldr	r2, [pc, #308]	; (810411c <HAL_DMA_Init+0x684>)
 8103fe8:	4293      	cmp	r3, r2
 8103fea:	d036      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	4a4b      	ldr	r2, [pc, #300]	; (8104120 <HAL_DMA_Init+0x688>)
 8103ff2:	4293      	cmp	r3, r2
 8103ff4:	d031      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	4a4a      	ldr	r2, [pc, #296]	; (8104124 <HAL_DMA_Init+0x68c>)
 8103ffc:	4293      	cmp	r3, r2
 8103ffe:	d02c      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4a48      	ldr	r2, [pc, #288]	; (8104128 <HAL_DMA_Init+0x690>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d027      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a47      	ldr	r2, [pc, #284]	; (810412c <HAL_DMA_Init+0x694>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d022      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a45      	ldr	r2, [pc, #276]	; (8104130 <HAL_DMA_Init+0x698>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d01d      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a44      	ldr	r2, [pc, #272]	; (8104134 <HAL_DMA_Init+0x69c>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d018      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a42      	ldr	r2, [pc, #264]	; (8104138 <HAL_DMA_Init+0x6a0>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d013      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a41      	ldr	r2, [pc, #260]	; (810413c <HAL_DMA_Init+0x6a4>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d00e      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	4a3f      	ldr	r2, [pc, #252]	; (8104140 <HAL_DMA_Init+0x6a8>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d009      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a3e      	ldr	r2, [pc, #248]	; (8104144 <HAL_DMA_Init+0x6ac>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d004      	beq.n	810405a <HAL_DMA_Init+0x5c2>
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4a3c      	ldr	r2, [pc, #240]	; (8104148 <HAL_DMA_Init+0x6b0>)
 8104056:	4293      	cmp	r3, r2
 8104058:	d101      	bne.n	810405e <HAL_DMA_Init+0x5c6>
 810405a:	2301      	movs	r3, #1
 810405c:	e000      	b.n	8104060 <HAL_DMA_Init+0x5c8>
 810405e:	2300      	movs	r3, #0
 8104060:	2b00      	cmp	r3, #0
 8104062:	d032      	beq.n	81040ca <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8104064:	6878      	ldr	r0, [r7, #4]
 8104066:	f002 fa5b 	bl	8106520 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	689b      	ldr	r3, [r3, #8]
 810406e:	2b80      	cmp	r3, #128	; 0x80
 8104070:	d102      	bne.n	8104078 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	2200      	movs	r2, #0
 8104076:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	685a      	ldr	r2, [r3, #4]
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104080:	b2d2      	uxtb	r2, r2
 8104082:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104088:	687a      	ldr	r2, [r7, #4]
 810408a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810408c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	685b      	ldr	r3, [r3, #4]
 8104092:	2b00      	cmp	r3, #0
 8104094:	d010      	beq.n	81040b8 <HAL_DMA_Init+0x620>
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	685b      	ldr	r3, [r3, #4]
 810409a:	2b08      	cmp	r3, #8
 810409c:	d80c      	bhi.n	81040b8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810409e:	6878      	ldr	r0, [r7, #4]
 81040a0:	f002 fad8 	bl	8106654 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81040a8:	2200      	movs	r2, #0
 81040aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040b0:	687a      	ldr	r2, [r7, #4]
 81040b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81040b4:	605a      	str	r2, [r3, #4]
 81040b6:	e008      	b.n	81040ca <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	2200      	movs	r2, #0
 81040bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	2200      	movs	r2, #0
 81040c2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	2200      	movs	r2, #0
 81040c8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81040ca:	687b      	ldr	r3, [r7, #4]
 81040cc:	2200      	movs	r2, #0
 81040ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	2201      	movs	r2, #1
 81040d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81040d8:	2300      	movs	r3, #0
}
 81040da:	4618      	mov	r0, r3
 81040dc:	3718      	adds	r7, #24
 81040de:	46bd      	mov	sp, r7
 81040e0:	bd80      	pop	{r7, pc}
 81040e2:	bf00      	nop
 81040e4:	a7fdabf8 	.word	0xa7fdabf8
 81040e8:	cccccccd 	.word	0xcccccccd
 81040ec:	40020010 	.word	0x40020010
 81040f0:	40020028 	.word	0x40020028
 81040f4:	40020040 	.word	0x40020040
 81040f8:	40020058 	.word	0x40020058
 81040fc:	40020070 	.word	0x40020070
 8104100:	40020088 	.word	0x40020088
 8104104:	400200a0 	.word	0x400200a0
 8104108:	400200b8 	.word	0x400200b8
 810410c:	40020410 	.word	0x40020410
 8104110:	40020428 	.word	0x40020428
 8104114:	40020440 	.word	0x40020440
 8104118:	40020458 	.word	0x40020458
 810411c:	40020470 	.word	0x40020470
 8104120:	40020488 	.word	0x40020488
 8104124:	400204a0 	.word	0x400204a0
 8104128:	400204b8 	.word	0x400204b8
 810412c:	58025408 	.word	0x58025408
 8104130:	5802541c 	.word	0x5802541c
 8104134:	58025430 	.word	0x58025430
 8104138:	58025444 	.word	0x58025444
 810413c:	58025458 	.word	0x58025458
 8104140:	5802546c 	.word	0x5802546c
 8104144:	58025480 	.word	0x58025480
 8104148:	58025494 	.word	0x58025494

0810414c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810414c:	b580      	push	{r7, lr}
 810414e:	b086      	sub	sp, #24
 8104150:	af00      	add	r7, sp, #0
 8104152:	60f8      	str	r0, [r7, #12]
 8104154:	60b9      	str	r1, [r7, #8]
 8104156:	607a      	str	r2, [r7, #4]
 8104158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810415a:	2300      	movs	r3, #0
 810415c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	2b00      	cmp	r3, #0
 8104162:	d101      	bne.n	8104168 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8104164:	2301      	movs	r3, #1
 8104166:	e226      	b.n	81045b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8104168:	68fb      	ldr	r3, [r7, #12]
 810416a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 810416e:	2b01      	cmp	r3, #1
 8104170:	d101      	bne.n	8104176 <HAL_DMA_Start_IT+0x2a>
 8104172:	2302      	movs	r3, #2
 8104174:	e21f      	b.n	81045b6 <HAL_DMA_Start_IT+0x46a>
 8104176:	68fb      	ldr	r3, [r7, #12]
 8104178:	2201      	movs	r2, #1
 810417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104184:	b2db      	uxtb	r3, r3
 8104186:	2b01      	cmp	r3, #1
 8104188:	f040 820a 	bne.w	81045a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810418c:	68fb      	ldr	r3, [r7, #12]
 810418e:	2202      	movs	r2, #2
 8104190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8104194:	68fb      	ldr	r3, [r7, #12]
 8104196:	2200      	movs	r2, #0
 8104198:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	4a68      	ldr	r2, [pc, #416]	; (8104340 <HAL_DMA_Start_IT+0x1f4>)
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d04a      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	4a66      	ldr	r2, [pc, #408]	; (8104344 <HAL_DMA_Start_IT+0x1f8>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d045      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	4a65      	ldr	r2, [pc, #404]	; (8104348 <HAL_DMA_Start_IT+0x1fc>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d040      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	4a63      	ldr	r2, [pc, #396]	; (810434c <HAL_DMA_Start_IT+0x200>)
 81041be:	4293      	cmp	r3, r2
 81041c0:	d03b      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041c2:	68fb      	ldr	r3, [r7, #12]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	4a62      	ldr	r2, [pc, #392]	; (8104350 <HAL_DMA_Start_IT+0x204>)
 81041c8:	4293      	cmp	r3, r2
 81041ca:	d036      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041cc:	68fb      	ldr	r3, [r7, #12]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	4a60      	ldr	r2, [pc, #384]	; (8104354 <HAL_DMA_Start_IT+0x208>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d031      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041d6:	68fb      	ldr	r3, [r7, #12]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	4a5f      	ldr	r2, [pc, #380]	; (8104358 <HAL_DMA_Start_IT+0x20c>)
 81041dc:	4293      	cmp	r3, r2
 81041de:	d02c      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a5d      	ldr	r2, [pc, #372]	; (810435c <HAL_DMA_Start_IT+0x210>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d027      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a5c      	ldr	r2, [pc, #368]	; (8104360 <HAL_DMA_Start_IT+0x214>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d022      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	4a5a      	ldr	r2, [pc, #360]	; (8104364 <HAL_DMA_Start_IT+0x218>)
 81041fa:	4293      	cmp	r3, r2
 81041fc:	d01d      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	4a59      	ldr	r2, [pc, #356]	; (8104368 <HAL_DMA_Start_IT+0x21c>)
 8104204:	4293      	cmp	r3, r2
 8104206:	d018      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 8104208:	68fb      	ldr	r3, [r7, #12]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a57      	ldr	r2, [pc, #348]	; (810436c <HAL_DMA_Start_IT+0x220>)
 810420e:	4293      	cmp	r3, r2
 8104210:	d013      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 8104212:	68fb      	ldr	r3, [r7, #12]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	4a56      	ldr	r2, [pc, #344]	; (8104370 <HAL_DMA_Start_IT+0x224>)
 8104218:	4293      	cmp	r3, r2
 810421a:	d00e      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 810421c:	68fb      	ldr	r3, [r7, #12]
 810421e:	681b      	ldr	r3, [r3, #0]
 8104220:	4a54      	ldr	r2, [pc, #336]	; (8104374 <HAL_DMA_Start_IT+0x228>)
 8104222:	4293      	cmp	r3, r2
 8104224:	d009      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	4a53      	ldr	r2, [pc, #332]	; (8104378 <HAL_DMA_Start_IT+0x22c>)
 810422c:	4293      	cmp	r3, r2
 810422e:	d004      	beq.n	810423a <HAL_DMA_Start_IT+0xee>
 8104230:	68fb      	ldr	r3, [r7, #12]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	4a51      	ldr	r2, [pc, #324]	; (810437c <HAL_DMA_Start_IT+0x230>)
 8104236:	4293      	cmp	r3, r2
 8104238:	d108      	bne.n	810424c <HAL_DMA_Start_IT+0x100>
 810423a:	68fb      	ldr	r3, [r7, #12]
 810423c:	681b      	ldr	r3, [r3, #0]
 810423e:	681a      	ldr	r2, [r3, #0]
 8104240:	68fb      	ldr	r3, [r7, #12]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	f022 0201 	bic.w	r2, r2, #1
 8104248:	601a      	str	r2, [r3, #0]
 810424a:	e007      	b.n	810425c <HAL_DMA_Start_IT+0x110>
 810424c:	68fb      	ldr	r3, [r7, #12]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	681a      	ldr	r2, [r3, #0]
 8104252:	68fb      	ldr	r3, [r7, #12]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	f022 0201 	bic.w	r2, r2, #1
 810425a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810425c:	683b      	ldr	r3, [r7, #0]
 810425e:	687a      	ldr	r2, [r7, #4]
 8104260:	68b9      	ldr	r1, [r7, #8]
 8104262:	68f8      	ldr	r0, [r7, #12]
 8104264:	f001 fe82 	bl	8105f6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	4a34      	ldr	r2, [pc, #208]	; (8104340 <HAL_DMA_Start_IT+0x1f4>)
 810426e:	4293      	cmp	r3, r2
 8104270:	d04a      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	4a33      	ldr	r2, [pc, #204]	; (8104344 <HAL_DMA_Start_IT+0x1f8>)
 8104278:	4293      	cmp	r3, r2
 810427a:	d045      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 810427c:	68fb      	ldr	r3, [r7, #12]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	4a31      	ldr	r2, [pc, #196]	; (8104348 <HAL_DMA_Start_IT+0x1fc>)
 8104282:	4293      	cmp	r3, r2
 8104284:	d040      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 8104286:	68fb      	ldr	r3, [r7, #12]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	4a30      	ldr	r2, [pc, #192]	; (810434c <HAL_DMA_Start_IT+0x200>)
 810428c:	4293      	cmp	r3, r2
 810428e:	d03b      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	4a2e      	ldr	r2, [pc, #184]	; (8104350 <HAL_DMA_Start_IT+0x204>)
 8104296:	4293      	cmp	r3, r2
 8104298:	d036      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	4a2d      	ldr	r2, [pc, #180]	; (8104354 <HAL_DMA_Start_IT+0x208>)
 81042a0:	4293      	cmp	r3, r2
 81042a2:	d031      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	681b      	ldr	r3, [r3, #0]
 81042a8:	4a2b      	ldr	r2, [pc, #172]	; (8104358 <HAL_DMA_Start_IT+0x20c>)
 81042aa:	4293      	cmp	r3, r2
 81042ac:	d02c      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042ae:	68fb      	ldr	r3, [r7, #12]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	4a2a      	ldr	r2, [pc, #168]	; (810435c <HAL_DMA_Start_IT+0x210>)
 81042b4:	4293      	cmp	r3, r2
 81042b6:	d027      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	4a28      	ldr	r2, [pc, #160]	; (8104360 <HAL_DMA_Start_IT+0x214>)
 81042be:	4293      	cmp	r3, r2
 81042c0:	d022      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	4a27      	ldr	r2, [pc, #156]	; (8104364 <HAL_DMA_Start_IT+0x218>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d01d      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042cc:	68fb      	ldr	r3, [r7, #12]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	4a25      	ldr	r2, [pc, #148]	; (8104368 <HAL_DMA_Start_IT+0x21c>)
 81042d2:	4293      	cmp	r3, r2
 81042d4:	d018      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042d6:	68fb      	ldr	r3, [r7, #12]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	4a24      	ldr	r2, [pc, #144]	; (810436c <HAL_DMA_Start_IT+0x220>)
 81042dc:	4293      	cmp	r3, r2
 81042de:	d013      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	4a22      	ldr	r2, [pc, #136]	; (8104370 <HAL_DMA_Start_IT+0x224>)
 81042e6:	4293      	cmp	r3, r2
 81042e8:	d00e      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	4a21      	ldr	r2, [pc, #132]	; (8104374 <HAL_DMA_Start_IT+0x228>)
 81042f0:	4293      	cmp	r3, r2
 81042f2:	d009      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	4a1f      	ldr	r2, [pc, #124]	; (8104378 <HAL_DMA_Start_IT+0x22c>)
 81042fa:	4293      	cmp	r3, r2
 81042fc:	d004      	beq.n	8104308 <HAL_DMA_Start_IT+0x1bc>
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	4a1e      	ldr	r2, [pc, #120]	; (810437c <HAL_DMA_Start_IT+0x230>)
 8104304:	4293      	cmp	r3, r2
 8104306:	d101      	bne.n	810430c <HAL_DMA_Start_IT+0x1c0>
 8104308:	2301      	movs	r3, #1
 810430a:	e000      	b.n	810430e <HAL_DMA_Start_IT+0x1c2>
 810430c:	2300      	movs	r3, #0
 810430e:	2b00      	cmp	r3, #0
 8104310:	d036      	beq.n	8104380 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	f023 021e 	bic.w	r2, r3, #30
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	f042 0216 	orr.w	r2, r2, #22
 8104324:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104326:	68fb      	ldr	r3, [r7, #12]
 8104328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810432a:	2b00      	cmp	r3, #0
 810432c:	d03e      	beq.n	81043ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810432e:	68fb      	ldr	r3, [r7, #12]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	681a      	ldr	r2, [r3, #0]
 8104334:	68fb      	ldr	r3, [r7, #12]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	f042 0208 	orr.w	r2, r2, #8
 810433c:	601a      	str	r2, [r3, #0]
 810433e:	e035      	b.n	81043ac <HAL_DMA_Start_IT+0x260>
 8104340:	40020010 	.word	0x40020010
 8104344:	40020028 	.word	0x40020028
 8104348:	40020040 	.word	0x40020040
 810434c:	40020058 	.word	0x40020058
 8104350:	40020070 	.word	0x40020070
 8104354:	40020088 	.word	0x40020088
 8104358:	400200a0 	.word	0x400200a0
 810435c:	400200b8 	.word	0x400200b8
 8104360:	40020410 	.word	0x40020410
 8104364:	40020428 	.word	0x40020428
 8104368:	40020440 	.word	0x40020440
 810436c:	40020458 	.word	0x40020458
 8104370:	40020470 	.word	0x40020470
 8104374:	40020488 	.word	0x40020488
 8104378:	400204a0 	.word	0x400204a0
 810437c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104380:	68fb      	ldr	r3, [r7, #12]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	f023 020e 	bic.w	r2, r3, #14
 810438a:	68fb      	ldr	r3, [r7, #12]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	f042 020a 	orr.w	r2, r2, #10
 8104392:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104394:	68fb      	ldr	r3, [r7, #12]
 8104396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104398:	2b00      	cmp	r3, #0
 810439a:	d007      	beq.n	81043ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	681a      	ldr	r2, [r3, #0]
 81043a2:	68fb      	ldr	r3, [r7, #12]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	f042 0204 	orr.w	r2, r2, #4
 81043aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81043ac:	68fb      	ldr	r3, [r7, #12]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	4a83      	ldr	r2, [pc, #524]	; (81045c0 <HAL_DMA_Start_IT+0x474>)
 81043b2:	4293      	cmp	r3, r2
 81043b4:	d072      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a82      	ldr	r2, [pc, #520]	; (81045c4 <HAL_DMA_Start_IT+0x478>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d06d      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043c0:	68fb      	ldr	r3, [r7, #12]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a80      	ldr	r2, [pc, #512]	; (81045c8 <HAL_DMA_Start_IT+0x47c>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d068      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a7f      	ldr	r2, [pc, #508]	; (81045cc <HAL_DMA_Start_IT+0x480>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d063      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a7d      	ldr	r2, [pc, #500]	; (81045d0 <HAL_DMA_Start_IT+0x484>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d05e      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043de:	68fb      	ldr	r3, [r7, #12]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	4a7c      	ldr	r2, [pc, #496]	; (81045d4 <HAL_DMA_Start_IT+0x488>)
 81043e4:	4293      	cmp	r3, r2
 81043e6:	d059      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043e8:	68fb      	ldr	r3, [r7, #12]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a7a      	ldr	r2, [pc, #488]	; (81045d8 <HAL_DMA_Start_IT+0x48c>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d054      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a79      	ldr	r2, [pc, #484]	; (81045dc <HAL_DMA_Start_IT+0x490>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d04f      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a77      	ldr	r2, [pc, #476]	; (81045e0 <HAL_DMA_Start_IT+0x494>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d04a      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104406:	68fb      	ldr	r3, [r7, #12]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a76      	ldr	r2, [pc, #472]	; (81045e4 <HAL_DMA_Start_IT+0x498>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d045      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a74      	ldr	r2, [pc, #464]	; (81045e8 <HAL_DMA_Start_IT+0x49c>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d040      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a73      	ldr	r2, [pc, #460]	; (81045ec <HAL_DMA_Start_IT+0x4a0>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d03b      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	4a71      	ldr	r2, [pc, #452]	; (81045f0 <HAL_DMA_Start_IT+0x4a4>)
 810442a:	4293      	cmp	r3, r2
 810442c:	d036      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	4a70      	ldr	r2, [pc, #448]	; (81045f4 <HAL_DMA_Start_IT+0x4a8>)
 8104434:	4293      	cmp	r3, r2
 8104436:	d031      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	4a6e      	ldr	r2, [pc, #440]	; (81045f8 <HAL_DMA_Start_IT+0x4ac>)
 810443e:	4293      	cmp	r3, r2
 8104440:	d02c      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	4a6d      	ldr	r2, [pc, #436]	; (81045fc <HAL_DMA_Start_IT+0x4b0>)
 8104448:	4293      	cmp	r3, r2
 810444a:	d027      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 810444c:	68fb      	ldr	r3, [r7, #12]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	4a6b      	ldr	r2, [pc, #428]	; (8104600 <HAL_DMA_Start_IT+0x4b4>)
 8104452:	4293      	cmp	r3, r2
 8104454:	d022      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104456:	68fb      	ldr	r3, [r7, #12]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	4a6a      	ldr	r2, [pc, #424]	; (8104604 <HAL_DMA_Start_IT+0x4b8>)
 810445c:	4293      	cmp	r3, r2
 810445e:	d01d      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104460:	68fb      	ldr	r3, [r7, #12]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a68      	ldr	r2, [pc, #416]	; (8104608 <HAL_DMA_Start_IT+0x4bc>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d018      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 810446a:	68fb      	ldr	r3, [r7, #12]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a67      	ldr	r2, [pc, #412]	; (810460c <HAL_DMA_Start_IT+0x4c0>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d013      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a65      	ldr	r2, [pc, #404]	; (8104610 <HAL_DMA_Start_IT+0x4c4>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d00e      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 810447e:	68fb      	ldr	r3, [r7, #12]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a64      	ldr	r2, [pc, #400]	; (8104614 <HAL_DMA_Start_IT+0x4c8>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d009      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	4a62      	ldr	r2, [pc, #392]	; (8104618 <HAL_DMA_Start_IT+0x4cc>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d004      	beq.n	810449c <HAL_DMA_Start_IT+0x350>
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	4a61      	ldr	r2, [pc, #388]	; (810461c <HAL_DMA_Start_IT+0x4d0>)
 8104498:	4293      	cmp	r3, r2
 810449a:	d101      	bne.n	81044a0 <HAL_DMA_Start_IT+0x354>
 810449c:	2301      	movs	r3, #1
 810449e:	e000      	b.n	81044a2 <HAL_DMA_Start_IT+0x356>
 81044a0:	2300      	movs	r3, #0
 81044a2:	2b00      	cmp	r3, #0
 81044a4:	d01a      	beq.n	81044dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81044a6:	68fb      	ldr	r3, [r7, #12]
 81044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81044b0:	2b00      	cmp	r3, #0
 81044b2:	d007      	beq.n	81044c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81044b4:	68fb      	ldr	r3, [r7, #12]
 81044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044b8:	681a      	ldr	r2, [r3, #0]
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81044be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81044c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d007      	beq.n	81044dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81044cc:	68fb      	ldr	r3, [r7, #12]
 81044ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81044d0:	681a      	ldr	r2, [r3, #0]
 81044d2:	68fb      	ldr	r3, [r7, #12]
 81044d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81044d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81044da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	4a37      	ldr	r2, [pc, #220]	; (81045c0 <HAL_DMA_Start_IT+0x474>)
 81044e2:	4293      	cmp	r3, r2
 81044e4:	d04a      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 81044e6:	68fb      	ldr	r3, [r7, #12]
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	4a36      	ldr	r2, [pc, #216]	; (81045c4 <HAL_DMA_Start_IT+0x478>)
 81044ec:	4293      	cmp	r3, r2
 81044ee:	d045      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 81044f0:	68fb      	ldr	r3, [r7, #12]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	4a34      	ldr	r2, [pc, #208]	; (81045c8 <HAL_DMA_Start_IT+0x47c>)
 81044f6:	4293      	cmp	r3, r2
 81044f8:	d040      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 81044fa:	68fb      	ldr	r3, [r7, #12]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	4a33      	ldr	r2, [pc, #204]	; (81045cc <HAL_DMA_Start_IT+0x480>)
 8104500:	4293      	cmp	r3, r2
 8104502:	d03b      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104504:	68fb      	ldr	r3, [r7, #12]
 8104506:	681b      	ldr	r3, [r3, #0]
 8104508:	4a31      	ldr	r2, [pc, #196]	; (81045d0 <HAL_DMA_Start_IT+0x484>)
 810450a:	4293      	cmp	r3, r2
 810450c:	d036      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 810450e:	68fb      	ldr	r3, [r7, #12]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	4a30      	ldr	r2, [pc, #192]	; (81045d4 <HAL_DMA_Start_IT+0x488>)
 8104514:	4293      	cmp	r3, r2
 8104516:	d031      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	4a2e      	ldr	r2, [pc, #184]	; (81045d8 <HAL_DMA_Start_IT+0x48c>)
 810451e:	4293      	cmp	r3, r2
 8104520:	d02c      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104522:	68fb      	ldr	r3, [r7, #12]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	4a2d      	ldr	r2, [pc, #180]	; (81045dc <HAL_DMA_Start_IT+0x490>)
 8104528:	4293      	cmp	r3, r2
 810452a:	d027      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 810452c:	68fb      	ldr	r3, [r7, #12]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	4a2b      	ldr	r2, [pc, #172]	; (81045e0 <HAL_DMA_Start_IT+0x494>)
 8104532:	4293      	cmp	r3, r2
 8104534:	d022      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104536:	68fb      	ldr	r3, [r7, #12]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	4a2a      	ldr	r2, [pc, #168]	; (81045e4 <HAL_DMA_Start_IT+0x498>)
 810453c:	4293      	cmp	r3, r2
 810453e:	d01d      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	681b      	ldr	r3, [r3, #0]
 8104544:	4a28      	ldr	r2, [pc, #160]	; (81045e8 <HAL_DMA_Start_IT+0x49c>)
 8104546:	4293      	cmp	r3, r2
 8104548:	d018      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 810454a:	68fb      	ldr	r3, [r7, #12]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	4a27      	ldr	r2, [pc, #156]	; (81045ec <HAL_DMA_Start_IT+0x4a0>)
 8104550:	4293      	cmp	r3, r2
 8104552:	d013      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	4a25      	ldr	r2, [pc, #148]	; (81045f0 <HAL_DMA_Start_IT+0x4a4>)
 810455a:	4293      	cmp	r3, r2
 810455c:	d00e      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	4a24      	ldr	r2, [pc, #144]	; (81045f4 <HAL_DMA_Start_IT+0x4a8>)
 8104564:	4293      	cmp	r3, r2
 8104566:	d009      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	4a22      	ldr	r2, [pc, #136]	; (81045f8 <HAL_DMA_Start_IT+0x4ac>)
 810456e:	4293      	cmp	r3, r2
 8104570:	d004      	beq.n	810457c <HAL_DMA_Start_IT+0x430>
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4a21      	ldr	r2, [pc, #132]	; (81045fc <HAL_DMA_Start_IT+0x4b0>)
 8104578:	4293      	cmp	r3, r2
 810457a:	d108      	bne.n	810458e <HAL_DMA_Start_IT+0x442>
 810457c:	68fb      	ldr	r3, [r7, #12]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	681a      	ldr	r2, [r3, #0]
 8104582:	68fb      	ldr	r3, [r7, #12]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	f042 0201 	orr.w	r2, r2, #1
 810458a:	601a      	str	r2, [r3, #0]
 810458c:	e012      	b.n	81045b4 <HAL_DMA_Start_IT+0x468>
 810458e:	68fb      	ldr	r3, [r7, #12]
 8104590:	681b      	ldr	r3, [r3, #0]
 8104592:	681a      	ldr	r2, [r3, #0]
 8104594:	68fb      	ldr	r3, [r7, #12]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	f042 0201 	orr.w	r2, r2, #1
 810459c:	601a      	str	r2, [r3, #0]
 810459e:	e009      	b.n	81045b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 81045a0:	68fb      	ldr	r3, [r7, #12]
 81045a2:	2200      	movs	r2, #0
 81045a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 81045a8:	68fb      	ldr	r3, [r7, #12]
 81045aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81045ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 81045b0:	2301      	movs	r3, #1
 81045b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 81045b4:	7dfb      	ldrb	r3, [r7, #23]
}
 81045b6:	4618      	mov	r0, r3
 81045b8:	3718      	adds	r7, #24
 81045ba:	46bd      	mov	sp, r7
 81045bc:	bd80      	pop	{r7, pc}
 81045be:	bf00      	nop
 81045c0:	40020010 	.word	0x40020010
 81045c4:	40020028 	.word	0x40020028
 81045c8:	40020040 	.word	0x40020040
 81045cc:	40020058 	.word	0x40020058
 81045d0:	40020070 	.word	0x40020070
 81045d4:	40020088 	.word	0x40020088
 81045d8:	400200a0 	.word	0x400200a0
 81045dc:	400200b8 	.word	0x400200b8
 81045e0:	40020410 	.word	0x40020410
 81045e4:	40020428 	.word	0x40020428
 81045e8:	40020440 	.word	0x40020440
 81045ec:	40020458 	.word	0x40020458
 81045f0:	40020470 	.word	0x40020470
 81045f4:	40020488 	.word	0x40020488
 81045f8:	400204a0 	.word	0x400204a0
 81045fc:	400204b8 	.word	0x400204b8
 8104600:	58025408 	.word	0x58025408
 8104604:	5802541c 	.word	0x5802541c
 8104608:	58025430 	.word	0x58025430
 810460c:	58025444 	.word	0x58025444
 8104610:	58025458 	.word	0x58025458
 8104614:	5802546c 	.word	0x5802546c
 8104618:	58025480 	.word	0x58025480
 810461c:	58025494 	.word	0x58025494

08104620 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8104620:	b580      	push	{r7, lr}
 8104622:	b086      	sub	sp, #24
 8104624:	af00      	add	r7, sp, #0
 8104626:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8104628:	f7ff f8e2 	bl	81037f0 <HAL_GetTick>
 810462c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	2b00      	cmp	r3, #0
 8104632:	d101      	bne.n	8104638 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8104634:	2301      	movs	r3, #1
 8104636:	e2dc      	b.n	8104bf2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104638:	687b      	ldr	r3, [r7, #4]
 810463a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810463e:	b2db      	uxtb	r3, r3
 8104640:	2b02      	cmp	r3, #2
 8104642:	d008      	beq.n	8104656 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	2280      	movs	r2, #128	; 0x80
 8104648:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	2200      	movs	r2, #0
 810464e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104652:	2301      	movs	r3, #1
 8104654:	e2cd      	b.n	8104bf2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	4a76      	ldr	r2, [pc, #472]	; (8104834 <HAL_DMA_Abort+0x214>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d04a      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	4a74      	ldr	r2, [pc, #464]	; (8104838 <HAL_DMA_Abort+0x218>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d045      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a73      	ldr	r2, [pc, #460]	; (810483c <HAL_DMA_Abort+0x21c>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d040      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a71      	ldr	r2, [pc, #452]	; (8104840 <HAL_DMA_Abort+0x220>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d03b      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	4a70      	ldr	r2, [pc, #448]	; (8104844 <HAL_DMA_Abort+0x224>)
 8104684:	4293      	cmp	r3, r2
 8104686:	d036      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	4a6e      	ldr	r2, [pc, #440]	; (8104848 <HAL_DMA_Abort+0x228>)
 810468e:	4293      	cmp	r3, r2
 8104690:	d031      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	4a6d      	ldr	r2, [pc, #436]	; (810484c <HAL_DMA_Abort+0x22c>)
 8104698:	4293      	cmp	r3, r2
 810469a:	d02c      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	4a6b      	ldr	r2, [pc, #428]	; (8104850 <HAL_DMA_Abort+0x230>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d027      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4a6a      	ldr	r2, [pc, #424]	; (8104854 <HAL_DMA_Abort+0x234>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d022      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	4a68      	ldr	r2, [pc, #416]	; (8104858 <HAL_DMA_Abort+0x238>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d01d      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	4a67      	ldr	r2, [pc, #412]	; (810485c <HAL_DMA_Abort+0x23c>)
 81046c0:	4293      	cmp	r3, r2
 81046c2:	d018      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	4a65      	ldr	r2, [pc, #404]	; (8104860 <HAL_DMA_Abort+0x240>)
 81046ca:	4293      	cmp	r3, r2
 81046cc:	d013      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	681b      	ldr	r3, [r3, #0]
 81046d2:	4a64      	ldr	r2, [pc, #400]	; (8104864 <HAL_DMA_Abort+0x244>)
 81046d4:	4293      	cmp	r3, r2
 81046d6:	d00e      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	4a62      	ldr	r2, [pc, #392]	; (8104868 <HAL_DMA_Abort+0x248>)
 81046de:	4293      	cmp	r3, r2
 81046e0:	d009      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	4a61      	ldr	r2, [pc, #388]	; (810486c <HAL_DMA_Abort+0x24c>)
 81046e8:	4293      	cmp	r3, r2
 81046ea:	d004      	beq.n	81046f6 <HAL_DMA_Abort+0xd6>
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	681b      	ldr	r3, [r3, #0]
 81046f0:	4a5f      	ldr	r2, [pc, #380]	; (8104870 <HAL_DMA_Abort+0x250>)
 81046f2:	4293      	cmp	r3, r2
 81046f4:	d101      	bne.n	81046fa <HAL_DMA_Abort+0xda>
 81046f6:	2301      	movs	r3, #1
 81046f8:	e000      	b.n	81046fc <HAL_DMA_Abort+0xdc>
 81046fa:	2300      	movs	r3, #0
 81046fc:	2b00      	cmp	r3, #0
 81046fe:	d013      	beq.n	8104728 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	681a      	ldr	r2, [r3, #0]
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	f022 021e 	bic.w	r2, r2, #30
 810470e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	695a      	ldr	r2, [r3, #20]
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810471e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	617b      	str	r3, [r7, #20]
 8104726:	e00a      	b.n	810473e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	681a      	ldr	r2, [r3, #0]
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	f022 020e 	bic.w	r2, r2, #14
 8104736:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	4a3c      	ldr	r2, [pc, #240]	; (8104834 <HAL_DMA_Abort+0x214>)
 8104744:	4293      	cmp	r3, r2
 8104746:	d072      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	4a3a      	ldr	r2, [pc, #232]	; (8104838 <HAL_DMA_Abort+0x218>)
 810474e:	4293      	cmp	r3, r2
 8104750:	d06d      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104752:	687b      	ldr	r3, [r7, #4]
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	4a39      	ldr	r2, [pc, #228]	; (810483c <HAL_DMA_Abort+0x21c>)
 8104758:	4293      	cmp	r3, r2
 810475a:	d068      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	4a37      	ldr	r2, [pc, #220]	; (8104840 <HAL_DMA_Abort+0x220>)
 8104762:	4293      	cmp	r3, r2
 8104764:	d063      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	4a36      	ldr	r2, [pc, #216]	; (8104844 <HAL_DMA_Abort+0x224>)
 810476c:	4293      	cmp	r3, r2
 810476e:	d05e      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	4a34      	ldr	r2, [pc, #208]	; (8104848 <HAL_DMA_Abort+0x228>)
 8104776:	4293      	cmp	r3, r2
 8104778:	d059      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	4a33      	ldr	r2, [pc, #204]	; (810484c <HAL_DMA_Abort+0x22c>)
 8104780:	4293      	cmp	r3, r2
 8104782:	d054      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	681b      	ldr	r3, [r3, #0]
 8104788:	4a31      	ldr	r2, [pc, #196]	; (8104850 <HAL_DMA_Abort+0x230>)
 810478a:	4293      	cmp	r3, r2
 810478c:	d04f      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	681b      	ldr	r3, [r3, #0]
 8104792:	4a30      	ldr	r2, [pc, #192]	; (8104854 <HAL_DMA_Abort+0x234>)
 8104794:	4293      	cmp	r3, r2
 8104796:	d04a      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	4a2e      	ldr	r2, [pc, #184]	; (8104858 <HAL_DMA_Abort+0x238>)
 810479e:	4293      	cmp	r3, r2
 81047a0:	d045      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	681b      	ldr	r3, [r3, #0]
 81047a6:	4a2d      	ldr	r2, [pc, #180]	; (810485c <HAL_DMA_Abort+0x23c>)
 81047a8:	4293      	cmp	r3, r2
 81047aa:	d040      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	681b      	ldr	r3, [r3, #0]
 81047b0:	4a2b      	ldr	r2, [pc, #172]	; (8104860 <HAL_DMA_Abort+0x240>)
 81047b2:	4293      	cmp	r3, r2
 81047b4:	d03b      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	681b      	ldr	r3, [r3, #0]
 81047ba:	4a2a      	ldr	r2, [pc, #168]	; (8104864 <HAL_DMA_Abort+0x244>)
 81047bc:	4293      	cmp	r3, r2
 81047be:	d036      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047c0:	687b      	ldr	r3, [r7, #4]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	4a28      	ldr	r2, [pc, #160]	; (8104868 <HAL_DMA_Abort+0x248>)
 81047c6:	4293      	cmp	r3, r2
 81047c8:	d031      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	4a27      	ldr	r2, [pc, #156]	; (810486c <HAL_DMA_Abort+0x24c>)
 81047d0:	4293      	cmp	r3, r2
 81047d2:	d02c      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	4a25      	ldr	r2, [pc, #148]	; (8104870 <HAL_DMA_Abort+0x250>)
 81047da:	4293      	cmp	r3, r2
 81047dc:	d027      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	4a24      	ldr	r2, [pc, #144]	; (8104874 <HAL_DMA_Abort+0x254>)
 81047e4:	4293      	cmp	r3, r2
 81047e6:	d022      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	4a22      	ldr	r2, [pc, #136]	; (8104878 <HAL_DMA_Abort+0x258>)
 81047ee:	4293      	cmp	r3, r2
 81047f0:	d01d      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	4a21      	ldr	r2, [pc, #132]	; (810487c <HAL_DMA_Abort+0x25c>)
 81047f8:	4293      	cmp	r3, r2
 81047fa:	d018      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	4a1f      	ldr	r2, [pc, #124]	; (8104880 <HAL_DMA_Abort+0x260>)
 8104802:	4293      	cmp	r3, r2
 8104804:	d013      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a1e      	ldr	r2, [pc, #120]	; (8104884 <HAL_DMA_Abort+0x264>)
 810480c:	4293      	cmp	r3, r2
 810480e:	d00e      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104810:	687b      	ldr	r3, [r7, #4]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	4a1c      	ldr	r2, [pc, #112]	; (8104888 <HAL_DMA_Abort+0x268>)
 8104816:	4293      	cmp	r3, r2
 8104818:	d009      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4a1b      	ldr	r2, [pc, #108]	; (810488c <HAL_DMA_Abort+0x26c>)
 8104820:	4293      	cmp	r3, r2
 8104822:	d004      	beq.n	810482e <HAL_DMA_Abort+0x20e>
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	4a19      	ldr	r2, [pc, #100]	; (8104890 <HAL_DMA_Abort+0x270>)
 810482a:	4293      	cmp	r3, r2
 810482c:	d132      	bne.n	8104894 <HAL_DMA_Abort+0x274>
 810482e:	2301      	movs	r3, #1
 8104830:	e031      	b.n	8104896 <HAL_DMA_Abort+0x276>
 8104832:	bf00      	nop
 8104834:	40020010 	.word	0x40020010
 8104838:	40020028 	.word	0x40020028
 810483c:	40020040 	.word	0x40020040
 8104840:	40020058 	.word	0x40020058
 8104844:	40020070 	.word	0x40020070
 8104848:	40020088 	.word	0x40020088
 810484c:	400200a0 	.word	0x400200a0
 8104850:	400200b8 	.word	0x400200b8
 8104854:	40020410 	.word	0x40020410
 8104858:	40020428 	.word	0x40020428
 810485c:	40020440 	.word	0x40020440
 8104860:	40020458 	.word	0x40020458
 8104864:	40020470 	.word	0x40020470
 8104868:	40020488 	.word	0x40020488
 810486c:	400204a0 	.word	0x400204a0
 8104870:	400204b8 	.word	0x400204b8
 8104874:	58025408 	.word	0x58025408
 8104878:	5802541c 	.word	0x5802541c
 810487c:	58025430 	.word	0x58025430
 8104880:	58025444 	.word	0x58025444
 8104884:	58025458 	.word	0x58025458
 8104888:	5802546c 	.word	0x5802546c
 810488c:	58025480 	.word	0x58025480
 8104890:	58025494 	.word	0x58025494
 8104894:	2300      	movs	r3, #0
 8104896:	2b00      	cmp	r3, #0
 8104898:	d007      	beq.n	81048aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810489e:	681a      	ldr	r2, [r3, #0]
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81048a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81048a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	4a6d      	ldr	r2, [pc, #436]	; (8104a64 <HAL_DMA_Abort+0x444>)
 81048b0:	4293      	cmp	r3, r2
 81048b2:	d04a      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	4a6b      	ldr	r2, [pc, #428]	; (8104a68 <HAL_DMA_Abort+0x448>)
 81048ba:	4293      	cmp	r3, r2
 81048bc:	d045      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048be:	687b      	ldr	r3, [r7, #4]
 81048c0:	681b      	ldr	r3, [r3, #0]
 81048c2:	4a6a      	ldr	r2, [pc, #424]	; (8104a6c <HAL_DMA_Abort+0x44c>)
 81048c4:	4293      	cmp	r3, r2
 81048c6:	d040      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	4a68      	ldr	r2, [pc, #416]	; (8104a70 <HAL_DMA_Abort+0x450>)
 81048ce:	4293      	cmp	r3, r2
 81048d0:	d03b      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	4a67      	ldr	r2, [pc, #412]	; (8104a74 <HAL_DMA_Abort+0x454>)
 81048d8:	4293      	cmp	r3, r2
 81048da:	d036      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	681b      	ldr	r3, [r3, #0]
 81048e0:	4a65      	ldr	r2, [pc, #404]	; (8104a78 <HAL_DMA_Abort+0x458>)
 81048e2:	4293      	cmp	r3, r2
 81048e4:	d031      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	4a64      	ldr	r2, [pc, #400]	; (8104a7c <HAL_DMA_Abort+0x45c>)
 81048ec:	4293      	cmp	r3, r2
 81048ee:	d02c      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	4a62      	ldr	r2, [pc, #392]	; (8104a80 <HAL_DMA_Abort+0x460>)
 81048f6:	4293      	cmp	r3, r2
 81048f8:	d027      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	4a61      	ldr	r2, [pc, #388]	; (8104a84 <HAL_DMA_Abort+0x464>)
 8104900:	4293      	cmp	r3, r2
 8104902:	d022      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	4a5f      	ldr	r2, [pc, #380]	; (8104a88 <HAL_DMA_Abort+0x468>)
 810490a:	4293      	cmp	r3, r2
 810490c:	d01d      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	681b      	ldr	r3, [r3, #0]
 8104912:	4a5e      	ldr	r2, [pc, #376]	; (8104a8c <HAL_DMA_Abort+0x46c>)
 8104914:	4293      	cmp	r3, r2
 8104916:	d018      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	4a5c      	ldr	r2, [pc, #368]	; (8104a90 <HAL_DMA_Abort+0x470>)
 810491e:	4293      	cmp	r3, r2
 8104920:	d013      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	681b      	ldr	r3, [r3, #0]
 8104926:	4a5b      	ldr	r2, [pc, #364]	; (8104a94 <HAL_DMA_Abort+0x474>)
 8104928:	4293      	cmp	r3, r2
 810492a:	d00e      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	4a59      	ldr	r2, [pc, #356]	; (8104a98 <HAL_DMA_Abort+0x478>)
 8104932:	4293      	cmp	r3, r2
 8104934:	d009      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	4a58      	ldr	r2, [pc, #352]	; (8104a9c <HAL_DMA_Abort+0x47c>)
 810493c:	4293      	cmp	r3, r2
 810493e:	d004      	beq.n	810494a <HAL_DMA_Abort+0x32a>
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	4a56      	ldr	r2, [pc, #344]	; (8104aa0 <HAL_DMA_Abort+0x480>)
 8104946:	4293      	cmp	r3, r2
 8104948:	d108      	bne.n	810495c <HAL_DMA_Abort+0x33c>
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	681a      	ldr	r2, [r3, #0]
 8104950:	687b      	ldr	r3, [r7, #4]
 8104952:	681b      	ldr	r3, [r3, #0]
 8104954:	f022 0201 	bic.w	r2, r2, #1
 8104958:	601a      	str	r2, [r3, #0]
 810495a:	e007      	b.n	810496c <HAL_DMA_Abort+0x34c>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	681a      	ldr	r2, [r3, #0]
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	f022 0201 	bic.w	r2, r2, #1
 810496a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810496c:	e013      	b.n	8104996 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810496e:	f7fe ff3f 	bl	81037f0 <HAL_GetTick>
 8104972:	4602      	mov	r2, r0
 8104974:	693b      	ldr	r3, [r7, #16]
 8104976:	1ad3      	subs	r3, r2, r3
 8104978:	2b05      	cmp	r3, #5
 810497a:	d90c      	bls.n	8104996 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	2220      	movs	r2, #32
 8104980:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	2200      	movs	r2, #0
 8104986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	2203      	movs	r2, #3
 810498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104992:	2301      	movs	r3, #1
 8104994:	e12d      	b.n	8104bf2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104996:	697b      	ldr	r3, [r7, #20]
 8104998:	681b      	ldr	r3, [r3, #0]
 810499a:	f003 0301 	and.w	r3, r3, #1
 810499e:	2b00      	cmp	r3, #0
 81049a0:	d1e5      	bne.n	810496e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	4a2f      	ldr	r2, [pc, #188]	; (8104a64 <HAL_DMA_Abort+0x444>)
 81049a8:	4293      	cmp	r3, r2
 81049aa:	d04a      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	4a2d      	ldr	r2, [pc, #180]	; (8104a68 <HAL_DMA_Abort+0x448>)
 81049b2:	4293      	cmp	r3, r2
 81049b4:	d045      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	4a2c      	ldr	r2, [pc, #176]	; (8104a6c <HAL_DMA_Abort+0x44c>)
 81049bc:	4293      	cmp	r3, r2
 81049be:	d040      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	4a2a      	ldr	r2, [pc, #168]	; (8104a70 <HAL_DMA_Abort+0x450>)
 81049c6:	4293      	cmp	r3, r2
 81049c8:	d03b      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	681b      	ldr	r3, [r3, #0]
 81049ce:	4a29      	ldr	r2, [pc, #164]	; (8104a74 <HAL_DMA_Abort+0x454>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d036      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	4a27      	ldr	r2, [pc, #156]	; (8104a78 <HAL_DMA_Abort+0x458>)
 81049da:	4293      	cmp	r3, r2
 81049dc:	d031      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	4a26      	ldr	r2, [pc, #152]	; (8104a7c <HAL_DMA_Abort+0x45c>)
 81049e4:	4293      	cmp	r3, r2
 81049e6:	d02c      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	4a24      	ldr	r2, [pc, #144]	; (8104a80 <HAL_DMA_Abort+0x460>)
 81049ee:	4293      	cmp	r3, r2
 81049f0:	d027      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049f2:	687b      	ldr	r3, [r7, #4]
 81049f4:	681b      	ldr	r3, [r3, #0]
 81049f6:	4a23      	ldr	r2, [pc, #140]	; (8104a84 <HAL_DMA_Abort+0x464>)
 81049f8:	4293      	cmp	r3, r2
 81049fa:	d022      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	4a21      	ldr	r2, [pc, #132]	; (8104a88 <HAL_DMA_Abort+0x468>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d01d      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	4a20      	ldr	r2, [pc, #128]	; (8104a8c <HAL_DMA_Abort+0x46c>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d018      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	4a1e      	ldr	r2, [pc, #120]	; (8104a90 <HAL_DMA_Abort+0x470>)
 8104a16:	4293      	cmp	r3, r2
 8104a18:	d013      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	4a1d      	ldr	r2, [pc, #116]	; (8104a94 <HAL_DMA_Abort+0x474>)
 8104a20:	4293      	cmp	r3, r2
 8104a22:	d00e      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	4a1b      	ldr	r2, [pc, #108]	; (8104a98 <HAL_DMA_Abort+0x478>)
 8104a2a:	4293      	cmp	r3, r2
 8104a2c:	d009      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	4a1a      	ldr	r2, [pc, #104]	; (8104a9c <HAL_DMA_Abort+0x47c>)
 8104a34:	4293      	cmp	r3, r2
 8104a36:	d004      	beq.n	8104a42 <HAL_DMA_Abort+0x422>
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a18      	ldr	r2, [pc, #96]	; (8104aa0 <HAL_DMA_Abort+0x480>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d101      	bne.n	8104a46 <HAL_DMA_Abort+0x426>
 8104a42:	2301      	movs	r3, #1
 8104a44:	e000      	b.n	8104a48 <HAL_DMA_Abort+0x428>
 8104a46:	2300      	movs	r3, #0
 8104a48:	2b00      	cmp	r3, #0
 8104a4a:	d02b      	beq.n	8104aa4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104a4c:	687b      	ldr	r3, [r7, #4]
 8104a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a56:	f003 031f 	and.w	r3, r3, #31
 8104a5a:	223f      	movs	r2, #63	; 0x3f
 8104a5c:	409a      	lsls	r2, r3
 8104a5e:	68bb      	ldr	r3, [r7, #8]
 8104a60:	609a      	str	r2, [r3, #8]
 8104a62:	e02a      	b.n	8104aba <HAL_DMA_Abort+0x49a>
 8104a64:	40020010 	.word	0x40020010
 8104a68:	40020028 	.word	0x40020028
 8104a6c:	40020040 	.word	0x40020040
 8104a70:	40020058 	.word	0x40020058
 8104a74:	40020070 	.word	0x40020070
 8104a78:	40020088 	.word	0x40020088
 8104a7c:	400200a0 	.word	0x400200a0
 8104a80:	400200b8 	.word	0x400200b8
 8104a84:	40020410 	.word	0x40020410
 8104a88:	40020428 	.word	0x40020428
 8104a8c:	40020440 	.word	0x40020440
 8104a90:	40020458 	.word	0x40020458
 8104a94:	40020470 	.word	0x40020470
 8104a98:	40020488 	.word	0x40020488
 8104a9c:	400204a0 	.word	0x400204a0
 8104aa0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104aa8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104aae:	f003 031f 	and.w	r3, r3, #31
 8104ab2:	2201      	movs	r2, #1
 8104ab4:	409a      	lsls	r2, r3
 8104ab6:	68fb      	ldr	r3, [r7, #12]
 8104ab8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	4a4f      	ldr	r2, [pc, #316]	; (8104bfc <HAL_DMA_Abort+0x5dc>)
 8104ac0:	4293      	cmp	r3, r2
 8104ac2:	d072      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	4a4d      	ldr	r2, [pc, #308]	; (8104c00 <HAL_DMA_Abort+0x5e0>)
 8104aca:	4293      	cmp	r3, r2
 8104acc:	d06d      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	4a4c      	ldr	r2, [pc, #304]	; (8104c04 <HAL_DMA_Abort+0x5e4>)
 8104ad4:	4293      	cmp	r3, r2
 8104ad6:	d068      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	4a4a      	ldr	r2, [pc, #296]	; (8104c08 <HAL_DMA_Abort+0x5e8>)
 8104ade:	4293      	cmp	r3, r2
 8104ae0:	d063      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	4a49      	ldr	r2, [pc, #292]	; (8104c0c <HAL_DMA_Abort+0x5ec>)
 8104ae8:	4293      	cmp	r3, r2
 8104aea:	d05e      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	4a47      	ldr	r2, [pc, #284]	; (8104c10 <HAL_DMA_Abort+0x5f0>)
 8104af2:	4293      	cmp	r3, r2
 8104af4:	d059      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	4a46      	ldr	r2, [pc, #280]	; (8104c14 <HAL_DMA_Abort+0x5f4>)
 8104afc:	4293      	cmp	r3, r2
 8104afe:	d054      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	4a44      	ldr	r2, [pc, #272]	; (8104c18 <HAL_DMA_Abort+0x5f8>)
 8104b06:	4293      	cmp	r3, r2
 8104b08:	d04f      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	4a43      	ldr	r2, [pc, #268]	; (8104c1c <HAL_DMA_Abort+0x5fc>)
 8104b10:	4293      	cmp	r3, r2
 8104b12:	d04a      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	4a41      	ldr	r2, [pc, #260]	; (8104c20 <HAL_DMA_Abort+0x600>)
 8104b1a:	4293      	cmp	r3, r2
 8104b1c:	d045      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	4a40      	ldr	r2, [pc, #256]	; (8104c24 <HAL_DMA_Abort+0x604>)
 8104b24:	4293      	cmp	r3, r2
 8104b26:	d040      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	4a3e      	ldr	r2, [pc, #248]	; (8104c28 <HAL_DMA_Abort+0x608>)
 8104b2e:	4293      	cmp	r3, r2
 8104b30:	d03b      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	4a3d      	ldr	r2, [pc, #244]	; (8104c2c <HAL_DMA_Abort+0x60c>)
 8104b38:	4293      	cmp	r3, r2
 8104b3a:	d036      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	4a3b      	ldr	r2, [pc, #236]	; (8104c30 <HAL_DMA_Abort+0x610>)
 8104b42:	4293      	cmp	r3, r2
 8104b44:	d031      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	4a3a      	ldr	r2, [pc, #232]	; (8104c34 <HAL_DMA_Abort+0x614>)
 8104b4c:	4293      	cmp	r3, r2
 8104b4e:	d02c      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	4a38      	ldr	r2, [pc, #224]	; (8104c38 <HAL_DMA_Abort+0x618>)
 8104b56:	4293      	cmp	r3, r2
 8104b58:	d027      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	4a37      	ldr	r2, [pc, #220]	; (8104c3c <HAL_DMA_Abort+0x61c>)
 8104b60:	4293      	cmp	r3, r2
 8104b62:	d022      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	4a35      	ldr	r2, [pc, #212]	; (8104c40 <HAL_DMA_Abort+0x620>)
 8104b6a:	4293      	cmp	r3, r2
 8104b6c:	d01d      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	681b      	ldr	r3, [r3, #0]
 8104b72:	4a34      	ldr	r2, [pc, #208]	; (8104c44 <HAL_DMA_Abort+0x624>)
 8104b74:	4293      	cmp	r3, r2
 8104b76:	d018      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	681b      	ldr	r3, [r3, #0]
 8104b7c:	4a32      	ldr	r2, [pc, #200]	; (8104c48 <HAL_DMA_Abort+0x628>)
 8104b7e:	4293      	cmp	r3, r2
 8104b80:	d013      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	4a31      	ldr	r2, [pc, #196]	; (8104c4c <HAL_DMA_Abort+0x62c>)
 8104b88:	4293      	cmp	r3, r2
 8104b8a:	d00e      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	4a2f      	ldr	r2, [pc, #188]	; (8104c50 <HAL_DMA_Abort+0x630>)
 8104b92:	4293      	cmp	r3, r2
 8104b94:	d009      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104b96:	687b      	ldr	r3, [r7, #4]
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	4a2e      	ldr	r2, [pc, #184]	; (8104c54 <HAL_DMA_Abort+0x634>)
 8104b9c:	4293      	cmp	r3, r2
 8104b9e:	d004      	beq.n	8104baa <HAL_DMA_Abort+0x58a>
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	4a2c      	ldr	r2, [pc, #176]	; (8104c58 <HAL_DMA_Abort+0x638>)
 8104ba6:	4293      	cmp	r3, r2
 8104ba8:	d101      	bne.n	8104bae <HAL_DMA_Abort+0x58e>
 8104baa:	2301      	movs	r3, #1
 8104bac:	e000      	b.n	8104bb0 <HAL_DMA_Abort+0x590>
 8104bae:	2300      	movs	r3, #0
 8104bb0:	2b00      	cmp	r3, #0
 8104bb2:	d015      	beq.n	8104be0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bb8:	687a      	ldr	r2, [r7, #4]
 8104bba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104bbc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8104bbe:	687b      	ldr	r3, [r7, #4]
 8104bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104bc2:	2b00      	cmp	r3, #0
 8104bc4:	d00c      	beq.n	8104be0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104bca:	681a      	ldr	r2, [r3, #0]
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104bd4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104bda:	687a      	ldr	r2, [r7, #4]
 8104bdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104bde:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	2200      	movs	r2, #0
 8104be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8104be8:	687b      	ldr	r3, [r7, #4]
 8104bea:	2201      	movs	r2, #1
 8104bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8104bf0:	2300      	movs	r3, #0
}
 8104bf2:	4618      	mov	r0, r3
 8104bf4:	3718      	adds	r7, #24
 8104bf6:	46bd      	mov	sp, r7
 8104bf8:	bd80      	pop	{r7, pc}
 8104bfa:	bf00      	nop
 8104bfc:	40020010 	.word	0x40020010
 8104c00:	40020028 	.word	0x40020028
 8104c04:	40020040 	.word	0x40020040
 8104c08:	40020058 	.word	0x40020058
 8104c0c:	40020070 	.word	0x40020070
 8104c10:	40020088 	.word	0x40020088
 8104c14:	400200a0 	.word	0x400200a0
 8104c18:	400200b8 	.word	0x400200b8
 8104c1c:	40020410 	.word	0x40020410
 8104c20:	40020428 	.word	0x40020428
 8104c24:	40020440 	.word	0x40020440
 8104c28:	40020458 	.word	0x40020458
 8104c2c:	40020470 	.word	0x40020470
 8104c30:	40020488 	.word	0x40020488
 8104c34:	400204a0 	.word	0x400204a0
 8104c38:	400204b8 	.word	0x400204b8
 8104c3c:	58025408 	.word	0x58025408
 8104c40:	5802541c 	.word	0x5802541c
 8104c44:	58025430 	.word	0x58025430
 8104c48:	58025444 	.word	0x58025444
 8104c4c:	58025458 	.word	0x58025458
 8104c50:	5802546c 	.word	0x5802546c
 8104c54:	58025480 	.word	0x58025480
 8104c58:	58025494 	.word	0x58025494

08104c5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8104c5c:	b580      	push	{r7, lr}
 8104c5e:	b084      	sub	sp, #16
 8104c60:	af00      	add	r7, sp, #0
 8104c62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	2b00      	cmp	r3, #0
 8104c68:	d101      	bne.n	8104c6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8104c6a:	2301      	movs	r3, #1
 8104c6c:	e205      	b.n	810507a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104c74:	b2db      	uxtb	r3, r3
 8104c76:	2b02      	cmp	r3, #2
 8104c78:	d004      	beq.n	8104c84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	2280      	movs	r2, #128	; 0x80
 8104c7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8104c80:	2301      	movs	r3, #1
 8104c82:	e1fa      	b.n	810507a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	4a8c      	ldr	r2, [pc, #560]	; (8104ebc <HAL_DMA_Abort_IT+0x260>)
 8104c8a:	4293      	cmp	r3, r2
 8104c8c:	d04a      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	4a8b      	ldr	r2, [pc, #556]	; (8104ec0 <HAL_DMA_Abort_IT+0x264>)
 8104c94:	4293      	cmp	r3, r2
 8104c96:	d045      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	4a89      	ldr	r2, [pc, #548]	; (8104ec4 <HAL_DMA_Abort_IT+0x268>)
 8104c9e:	4293      	cmp	r3, r2
 8104ca0:	d040      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	681b      	ldr	r3, [r3, #0]
 8104ca6:	4a88      	ldr	r2, [pc, #544]	; (8104ec8 <HAL_DMA_Abort_IT+0x26c>)
 8104ca8:	4293      	cmp	r3, r2
 8104caa:	d03b      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	681b      	ldr	r3, [r3, #0]
 8104cb0:	4a86      	ldr	r2, [pc, #536]	; (8104ecc <HAL_DMA_Abort_IT+0x270>)
 8104cb2:	4293      	cmp	r3, r2
 8104cb4:	d036      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	4a85      	ldr	r2, [pc, #532]	; (8104ed0 <HAL_DMA_Abort_IT+0x274>)
 8104cbc:	4293      	cmp	r3, r2
 8104cbe:	d031      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	681b      	ldr	r3, [r3, #0]
 8104cc4:	4a83      	ldr	r2, [pc, #524]	; (8104ed4 <HAL_DMA_Abort_IT+0x278>)
 8104cc6:	4293      	cmp	r3, r2
 8104cc8:	d02c      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	681b      	ldr	r3, [r3, #0]
 8104cce:	4a82      	ldr	r2, [pc, #520]	; (8104ed8 <HAL_DMA_Abort_IT+0x27c>)
 8104cd0:	4293      	cmp	r3, r2
 8104cd2:	d027      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	4a80      	ldr	r2, [pc, #512]	; (8104edc <HAL_DMA_Abort_IT+0x280>)
 8104cda:	4293      	cmp	r3, r2
 8104cdc:	d022      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	4a7f      	ldr	r2, [pc, #508]	; (8104ee0 <HAL_DMA_Abort_IT+0x284>)
 8104ce4:	4293      	cmp	r3, r2
 8104ce6:	d01d      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	4a7d      	ldr	r2, [pc, #500]	; (8104ee4 <HAL_DMA_Abort_IT+0x288>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d018      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	4a7c      	ldr	r2, [pc, #496]	; (8104ee8 <HAL_DMA_Abort_IT+0x28c>)
 8104cf8:	4293      	cmp	r3, r2
 8104cfa:	d013      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104cfc:	687b      	ldr	r3, [r7, #4]
 8104cfe:	681b      	ldr	r3, [r3, #0]
 8104d00:	4a7a      	ldr	r2, [pc, #488]	; (8104eec <HAL_DMA_Abort_IT+0x290>)
 8104d02:	4293      	cmp	r3, r2
 8104d04:	d00e      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	4a79      	ldr	r2, [pc, #484]	; (8104ef0 <HAL_DMA_Abort_IT+0x294>)
 8104d0c:	4293      	cmp	r3, r2
 8104d0e:	d009      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	4a77      	ldr	r2, [pc, #476]	; (8104ef4 <HAL_DMA_Abort_IT+0x298>)
 8104d16:	4293      	cmp	r3, r2
 8104d18:	d004      	beq.n	8104d24 <HAL_DMA_Abort_IT+0xc8>
 8104d1a:	687b      	ldr	r3, [r7, #4]
 8104d1c:	681b      	ldr	r3, [r3, #0]
 8104d1e:	4a76      	ldr	r2, [pc, #472]	; (8104ef8 <HAL_DMA_Abort_IT+0x29c>)
 8104d20:	4293      	cmp	r3, r2
 8104d22:	d101      	bne.n	8104d28 <HAL_DMA_Abort_IT+0xcc>
 8104d24:	2301      	movs	r3, #1
 8104d26:	e000      	b.n	8104d2a <HAL_DMA_Abort_IT+0xce>
 8104d28:	2300      	movs	r3, #0
 8104d2a:	2b00      	cmp	r3, #0
 8104d2c:	d065      	beq.n	8104dfa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	2204      	movs	r2, #4
 8104d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	681b      	ldr	r3, [r3, #0]
 8104d3a:	4a60      	ldr	r2, [pc, #384]	; (8104ebc <HAL_DMA_Abort_IT+0x260>)
 8104d3c:	4293      	cmp	r3, r2
 8104d3e:	d04a      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	681b      	ldr	r3, [r3, #0]
 8104d44:	4a5e      	ldr	r2, [pc, #376]	; (8104ec0 <HAL_DMA_Abort_IT+0x264>)
 8104d46:	4293      	cmp	r3, r2
 8104d48:	d045      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	681b      	ldr	r3, [r3, #0]
 8104d4e:	4a5d      	ldr	r2, [pc, #372]	; (8104ec4 <HAL_DMA_Abort_IT+0x268>)
 8104d50:	4293      	cmp	r3, r2
 8104d52:	d040      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	4a5b      	ldr	r2, [pc, #364]	; (8104ec8 <HAL_DMA_Abort_IT+0x26c>)
 8104d5a:	4293      	cmp	r3, r2
 8104d5c:	d03b      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	4a5a      	ldr	r2, [pc, #360]	; (8104ecc <HAL_DMA_Abort_IT+0x270>)
 8104d64:	4293      	cmp	r3, r2
 8104d66:	d036      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	4a58      	ldr	r2, [pc, #352]	; (8104ed0 <HAL_DMA_Abort_IT+0x274>)
 8104d6e:	4293      	cmp	r3, r2
 8104d70:	d031      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	4a57      	ldr	r2, [pc, #348]	; (8104ed4 <HAL_DMA_Abort_IT+0x278>)
 8104d78:	4293      	cmp	r3, r2
 8104d7a:	d02c      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	4a55      	ldr	r2, [pc, #340]	; (8104ed8 <HAL_DMA_Abort_IT+0x27c>)
 8104d82:	4293      	cmp	r3, r2
 8104d84:	d027      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	4a54      	ldr	r2, [pc, #336]	; (8104edc <HAL_DMA_Abort_IT+0x280>)
 8104d8c:	4293      	cmp	r3, r2
 8104d8e:	d022      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	4a52      	ldr	r2, [pc, #328]	; (8104ee0 <HAL_DMA_Abort_IT+0x284>)
 8104d96:	4293      	cmp	r3, r2
 8104d98:	d01d      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	4a51      	ldr	r2, [pc, #324]	; (8104ee4 <HAL_DMA_Abort_IT+0x288>)
 8104da0:	4293      	cmp	r3, r2
 8104da2:	d018      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	4a4f      	ldr	r2, [pc, #316]	; (8104ee8 <HAL_DMA_Abort_IT+0x28c>)
 8104daa:	4293      	cmp	r3, r2
 8104dac:	d013      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	4a4e      	ldr	r2, [pc, #312]	; (8104eec <HAL_DMA_Abort_IT+0x290>)
 8104db4:	4293      	cmp	r3, r2
 8104db6:	d00e      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	4a4c      	ldr	r2, [pc, #304]	; (8104ef0 <HAL_DMA_Abort_IT+0x294>)
 8104dbe:	4293      	cmp	r3, r2
 8104dc0:	d009      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	4a4b      	ldr	r2, [pc, #300]	; (8104ef4 <HAL_DMA_Abort_IT+0x298>)
 8104dc8:	4293      	cmp	r3, r2
 8104dca:	d004      	beq.n	8104dd6 <HAL_DMA_Abort_IT+0x17a>
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	681b      	ldr	r3, [r3, #0]
 8104dd0:	4a49      	ldr	r2, [pc, #292]	; (8104ef8 <HAL_DMA_Abort_IT+0x29c>)
 8104dd2:	4293      	cmp	r3, r2
 8104dd4:	d108      	bne.n	8104de8 <HAL_DMA_Abort_IT+0x18c>
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	681b      	ldr	r3, [r3, #0]
 8104dda:	681a      	ldr	r2, [r3, #0]
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	681b      	ldr	r3, [r3, #0]
 8104de0:	f022 0201 	bic.w	r2, r2, #1
 8104de4:	601a      	str	r2, [r3, #0]
 8104de6:	e147      	b.n	8105078 <HAL_DMA_Abort_IT+0x41c>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	681a      	ldr	r2, [r3, #0]
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	681b      	ldr	r3, [r3, #0]
 8104df2:	f022 0201 	bic.w	r2, r2, #1
 8104df6:	601a      	str	r2, [r3, #0]
 8104df8:	e13e      	b.n	8105078 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	681a      	ldr	r2, [r3, #0]
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	f022 020e 	bic.w	r2, r2, #14
 8104e08:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	4a2b      	ldr	r2, [pc, #172]	; (8104ebc <HAL_DMA_Abort_IT+0x260>)
 8104e10:	4293      	cmp	r3, r2
 8104e12:	d04a      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	4a29      	ldr	r2, [pc, #164]	; (8104ec0 <HAL_DMA_Abort_IT+0x264>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d045      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a28      	ldr	r2, [pc, #160]	; (8104ec4 <HAL_DMA_Abort_IT+0x268>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d040      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a26      	ldr	r2, [pc, #152]	; (8104ec8 <HAL_DMA_Abort_IT+0x26c>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d03b      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a25      	ldr	r2, [pc, #148]	; (8104ecc <HAL_DMA_Abort_IT+0x270>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d036      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	4a23      	ldr	r2, [pc, #140]	; (8104ed0 <HAL_DMA_Abort_IT+0x274>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d031      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	4a22      	ldr	r2, [pc, #136]	; (8104ed4 <HAL_DMA_Abort_IT+0x278>)
 8104e4c:	4293      	cmp	r3, r2
 8104e4e:	d02c      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	4a20      	ldr	r2, [pc, #128]	; (8104ed8 <HAL_DMA_Abort_IT+0x27c>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d027      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	4a1f      	ldr	r2, [pc, #124]	; (8104edc <HAL_DMA_Abort_IT+0x280>)
 8104e60:	4293      	cmp	r3, r2
 8104e62:	d022      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	4a1d      	ldr	r2, [pc, #116]	; (8104ee0 <HAL_DMA_Abort_IT+0x284>)
 8104e6a:	4293      	cmp	r3, r2
 8104e6c:	d01d      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	4a1c      	ldr	r2, [pc, #112]	; (8104ee4 <HAL_DMA_Abort_IT+0x288>)
 8104e74:	4293      	cmp	r3, r2
 8104e76:	d018      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	681b      	ldr	r3, [r3, #0]
 8104e7c:	4a1a      	ldr	r2, [pc, #104]	; (8104ee8 <HAL_DMA_Abort_IT+0x28c>)
 8104e7e:	4293      	cmp	r3, r2
 8104e80:	d013      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	4a19      	ldr	r2, [pc, #100]	; (8104eec <HAL_DMA_Abort_IT+0x290>)
 8104e88:	4293      	cmp	r3, r2
 8104e8a:	d00e      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e8c:	687b      	ldr	r3, [r7, #4]
 8104e8e:	681b      	ldr	r3, [r3, #0]
 8104e90:	4a17      	ldr	r2, [pc, #92]	; (8104ef0 <HAL_DMA_Abort_IT+0x294>)
 8104e92:	4293      	cmp	r3, r2
 8104e94:	d009      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	4a16      	ldr	r2, [pc, #88]	; (8104ef4 <HAL_DMA_Abort_IT+0x298>)
 8104e9c:	4293      	cmp	r3, r2
 8104e9e:	d004      	beq.n	8104eaa <HAL_DMA_Abort_IT+0x24e>
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	4a14      	ldr	r2, [pc, #80]	; (8104ef8 <HAL_DMA_Abort_IT+0x29c>)
 8104ea6:	4293      	cmp	r3, r2
 8104ea8:	d128      	bne.n	8104efc <HAL_DMA_Abort_IT+0x2a0>
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	681a      	ldr	r2, [r3, #0]
 8104eb0:	687b      	ldr	r3, [r7, #4]
 8104eb2:	681b      	ldr	r3, [r3, #0]
 8104eb4:	f022 0201 	bic.w	r2, r2, #1
 8104eb8:	601a      	str	r2, [r3, #0]
 8104eba:	e027      	b.n	8104f0c <HAL_DMA_Abort_IT+0x2b0>
 8104ebc:	40020010 	.word	0x40020010
 8104ec0:	40020028 	.word	0x40020028
 8104ec4:	40020040 	.word	0x40020040
 8104ec8:	40020058 	.word	0x40020058
 8104ecc:	40020070 	.word	0x40020070
 8104ed0:	40020088 	.word	0x40020088
 8104ed4:	400200a0 	.word	0x400200a0
 8104ed8:	400200b8 	.word	0x400200b8
 8104edc:	40020410 	.word	0x40020410
 8104ee0:	40020428 	.word	0x40020428
 8104ee4:	40020440 	.word	0x40020440
 8104ee8:	40020458 	.word	0x40020458
 8104eec:	40020470 	.word	0x40020470
 8104ef0:	40020488 	.word	0x40020488
 8104ef4:	400204a0 	.word	0x400204a0
 8104ef8:	400204b8 	.word	0x400204b8
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	681b      	ldr	r3, [r3, #0]
 8104f00:	681a      	ldr	r2, [r3, #0]
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	f022 0201 	bic.w	r2, r2, #1
 8104f0a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	681b      	ldr	r3, [r3, #0]
 8104f10:	4a5c      	ldr	r2, [pc, #368]	; (8105084 <HAL_DMA_Abort_IT+0x428>)
 8104f12:	4293      	cmp	r3, r2
 8104f14:	d072      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	4a5b      	ldr	r2, [pc, #364]	; (8105088 <HAL_DMA_Abort_IT+0x42c>)
 8104f1c:	4293      	cmp	r3, r2
 8104f1e:	d06d      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	4a59      	ldr	r2, [pc, #356]	; (810508c <HAL_DMA_Abort_IT+0x430>)
 8104f26:	4293      	cmp	r3, r2
 8104f28:	d068      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	4a58      	ldr	r2, [pc, #352]	; (8105090 <HAL_DMA_Abort_IT+0x434>)
 8104f30:	4293      	cmp	r3, r2
 8104f32:	d063      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	4a56      	ldr	r2, [pc, #344]	; (8105094 <HAL_DMA_Abort_IT+0x438>)
 8104f3a:	4293      	cmp	r3, r2
 8104f3c:	d05e      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f3e:	687b      	ldr	r3, [r7, #4]
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	4a55      	ldr	r2, [pc, #340]	; (8105098 <HAL_DMA_Abort_IT+0x43c>)
 8104f44:	4293      	cmp	r3, r2
 8104f46:	d059      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f48:	687b      	ldr	r3, [r7, #4]
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	4a53      	ldr	r2, [pc, #332]	; (810509c <HAL_DMA_Abort_IT+0x440>)
 8104f4e:	4293      	cmp	r3, r2
 8104f50:	d054      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	4a52      	ldr	r2, [pc, #328]	; (81050a0 <HAL_DMA_Abort_IT+0x444>)
 8104f58:	4293      	cmp	r3, r2
 8104f5a:	d04f      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	4a50      	ldr	r2, [pc, #320]	; (81050a4 <HAL_DMA_Abort_IT+0x448>)
 8104f62:	4293      	cmp	r3, r2
 8104f64:	d04a      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	4a4f      	ldr	r2, [pc, #316]	; (81050a8 <HAL_DMA_Abort_IT+0x44c>)
 8104f6c:	4293      	cmp	r3, r2
 8104f6e:	d045      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	4a4d      	ldr	r2, [pc, #308]	; (81050ac <HAL_DMA_Abort_IT+0x450>)
 8104f76:	4293      	cmp	r3, r2
 8104f78:	d040      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	681b      	ldr	r3, [r3, #0]
 8104f7e:	4a4c      	ldr	r2, [pc, #304]	; (81050b0 <HAL_DMA_Abort_IT+0x454>)
 8104f80:	4293      	cmp	r3, r2
 8104f82:	d03b      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	4a4a      	ldr	r2, [pc, #296]	; (81050b4 <HAL_DMA_Abort_IT+0x458>)
 8104f8a:	4293      	cmp	r3, r2
 8104f8c:	d036      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	681b      	ldr	r3, [r3, #0]
 8104f92:	4a49      	ldr	r2, [pc, #292]	; (81050b8 <HAL_DMA_Abort_IT+0x45c>)
 8104f94:	4293      	cmp	r3, r2
 8104f96:	d031      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104f98:	687b      	ldr	r3, [r7, #4]
 8104f9a:	681b      	ldr	r3, [r3, #0]
 8104f9c:	4a47      	ldr	r2, [pc, #284]	; (81050bc <HAL_DMA_Abort_IT+0x460>)
 8104f9e:	4293      	cmp	r3, r2
 8104fa0:	d02c      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	4a46      	ldr	r2, [pc, #280]	; (81050c0 <HAL_DMA_Abort_IT+0x464>)
 8104fa8:	4293      	cmp	r3, r2
 8104faa:	d027      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	681b      	ldr	r3, [r3, #0]
 8104fb0:	4a44      	ldr	r2, [pc, #272]	; (81050c4 <HAL_DMA_Abort_IT+0x468>)
 8104fb2:	4293      	cmp	r3, r2
 8104fb4:	d022      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fb6:	687b      	ldr	r3, [r7, #4]
 8104fb8:	681b      	ldr	r3, [r3, #0]
 8104fba:	4a43      	ldr	r2, [pc, #268]	; (81050c8 <HAL_DMA_Abort_IT+0x46c>)
 8104fbc:	4293      	cmp	r3, r2
 8104fbe:	d01d      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	681b      	ldr	r3, [r3, #0]
 8104fc4:	4a41      	ldr	r2, [pc, #260]	; (81050cc <HAL_DMA_Abort_IT+0x470>)
 8104fc6:	4293      	cmp	r3, r2
 8104fc8:	d018      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	681b      	ldr	r3, [r3, #0]
 8104fce:	4a40      	ldr	r2, [pc, #256]	; (81050d0 <HAL_DMA_Abort_IT+0x474>)
 8104fd0:	4293      	cmp	r3, r2
 8104fd2:	d013      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	4a3e      	ldr	r2, [pc, #248]	; (81050d4 <HAL_DMA_Abort_IT+0x478>)
 8104fda:	4293      	cmp	r3, r2
 8104fdc:	d00e      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	4a3d      	ldr	r2, [pc, #244]	; (81050d8 <HAL_DMA_Abort_IT+0x47c>)
 8104fe4:	4293      	cmp	r3, r2
 8104fe6:	d009      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	4a3b      	ldr	r2, [pc, #236]	; (81050dc <HAL_DMA_Abort_IT+0x480>)
 8104fee:	4293      	cmp	r3, r2
 8104ff0:	d004      	beq.n	8104ffc <HAL_DMA_Abort_IT+0x3a0>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	4a3a      	ldr	r2, [pc, #232]	; (81050e0 <HAL_DMA_Abort_IT+0x484>)
 8104ff8:	4293      	cmp	r3, r2
 8104ffa:	d101      	bne.n	8105000 <HAL_DMA_Abort_IT+0x3a4>
 8104ffc:	2301      	movs	r3, #1
 8104ffe:	e000      	b.n	8105002 <HAL_DMA_Abort_IT+0x3a6>
 8105000:	2300      	movs	r3, #0
 8105002:	2b00      	cmp	r3, #0
 8105004:	d028      	beq.n	8105058 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105006:	687b      	ldr	r3, [r7, #4]
 8105008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810500a:	681a      	ldr	r2, [r3, #0]
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105014:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810501a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105020:	f003 031f 	and.w	r3, r3, #31
 8105024:	2201      	movs	r2, #1
 8105026:	409a      	lsls	r2, r3
 8105028:	68fb      	ldr	r3, [r7, #12]
 810502a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105030:	687a      	ldr	r2, [r7, #4]
 8105032:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105034:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810503a:	2b00      	cmp	r3, #0
 810503c:	d00c      	beq.n	8105058 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105042:	681a      	ldr	r2, [r3, #0]
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810504c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105052:	687a      	ldr	r2, [r7, #4]
 8105054:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105056:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105058:	687b      	ldr	r3, [r7, #4]
 810505a:	2200      	movs	r2, #0
 810505c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105060:	687b      	ldr	r3, [r7, #4]
 8105062:	2201      	movs	r2, #1
 8105064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810506c:	2b00      	cmp	r3, #0
 810506e:	d003      	beq.n	8105078 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105074:	6878      	ldr	r0, [r7, #4]
 8105076:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8105078:	2300      	movs	r3, #0
}
 810507a:	4618      	mov	r0, r3
 810507c:	3710      	adds	r7, #16
 810507e:	46bd      	mov	sp, r7
 8105080:	bd80      	pop	{r7, pc}
 8105082:	bf00      	nop
 8105084:	40020010 	.word	0x40020010
 8105088:	40020028 	.word	0x40020028
 810508c:	40020040 	.word	0x40020040
 8105090:	40020058 	.word	0x40020058
 8105094:	40020070 	.word	0x40020070
 8105098:	40020088 	.word	0x40020088
 810509c:	400200a0 	.word	0x400200a0
 81050a0:	400200b8 	.word	0x400200b8
 81050a4:	40020410 	.word	0x40020410
 81050a8:	40020428 	.word	0x40020428
 81050ac:	40020440 	.word	0x40020440
 81050b0:	40020458 	.word	0x40020458
 81050b4:	40020470 	.word	0x40020470
 81050b8:	40020488 	.word	0x40020488
 81050bc:	400204a0 	.word	0x400204a0
 81050c0:	400204b8 	.word	0x400204b8
 81050c4:	58025408 	.word	0x58025408
 81050c8:	5802541c 	.word	0x5802541c
 81050cc:	58025430 	.word	0x58025430
 81050d0:	58025444 	.word	0x58025444
 81050d4:	58025458 	.word	0x58025458
 81050d8:	5802546c 	.word	0x5802546c
 81050dc:	58025480 	.word	0x58025480
 81050e0:	58025494 	.word	0x58025494

081050e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81050e4:	b580      	push	{r7, lr}
 81050e6:	b08a      	sub	sp, #40	; 0x28
 81050e8:	af00      	add	r7, sp, #0
 81050ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81050ec:	2300      	movs	r3, #0
 81050ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81050f0:	4b67      	ldr	r3, [pc, #412]	; (8105290 <HAL_DMA_IRQHandler+0x1ac>)
 81050f2:	681b      	ldr	r3, [r3, #0]
 81050f4:	4a67      	ldr	r2, [pc, #412]	; (8105294 <HAL_DMA_IRQHandler+0x1b0>)
 81050f6:	fba2 2303 	umull	r2, r3, r2, r3
 81050fa:	0a9b      	lsrs	r3, r3, #10
 81050fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105102:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105108:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810510a:	6a3b      	ldr	r3, [r7, #32]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105110:	69fb      	ldr	r3, [r7, #28]
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	4a5f      	ldr	r2, [pc, #380]	; (8105298 <HAL_DMA_IRQHandler+0x1b4>)
 810511c:	4293      	cmp	r3, r2
 810511e:	d04a      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	4a5d      	ldr	r2, [pc, #372]	; (810529c <HAL_DMA_IRQHandler+0x1b8>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d045      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	4a5c      	ldr	r2, [pc, #368]	; (81052a0 <HAL_DMA_IRQHandler+0x1bc>)
 8105130:	4293      	cmp	r3, r2
 8105132:	d040      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	4a5a      	ldr	r2, [pc, #360]	; (81052a4 <HAL_DMA_IRQHandler+0x1c0>)
 810513a:	4293      	cmp	r3, r2
 810513c:	d03b      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	4a59      	ldr	r2, [pc, #356]	; (81052a8 <HAL_DMA_IRQHandler+0x1c4>)
 8105144:	4293      	cmp	r3, r2
 8105146:	d036      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	681b      	ldr	r3, [r3, #0]
 810514c:	4a57      	ldr	r2, [pc, #348]	; (81052ac <HAL_DMA_IRQHandler+0x1c8>)
 810514e:	4293      	cmp	r3, r2
 8105150:	d031      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	681b      	ldr	r3, [r3, #0]
 8105156:	4a56      	ldr	r2, [pc, #344]	; (81052b0 <HAL_DMA_IRQHandler+0x1cc>)
 8105158:	4293      	cmp	r3, r2
 810515a:	d02c      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	4a54      	ldr	r2, [pc, #336]	; (81052b4 <HAL_DMA_IRQHandler+0x1d0>)
 8105162:	4293      	cmp	r3, r2
 8105164:	d027      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	4a53      	ldr	r2, [pc, #332]	; (81052b8 <HAL_DMA_IRQHandler+0x1d4>)
 810516c:	4293      	cmp	r3, r2
 810516e:	d022      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	4a51      	ldr	r2, [pc, #324]	; (81052bc <HAL_DMA_IRQHandler+0x1d8>)
 8105176:	4293      	cmp	r3, r2
 8105178:	d01d      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	4a50      	ldr	r2, [pc, #320]	; (81052c0 <HAL_DMA_IRQHandler+0x1dc>)
 8105180:	4293      	cmp	r3, r2
 8105182:	d018      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	4a4e      	ldr	r2, [pc, #312]	; (81052c4 <HAL_DMA_IRQHandler+0x1e0>)
 810518a:	4293      	cmp	r3, r2
 810518c:	d013      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	4a4d      	ldr	r2, [pc, #308]	; (81052c8 <HAL_DMA_IRQHandler+0x1e4>)
 8105194:	4293      	cmp	r3, r2
 8105196:	d00e      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 8105198:	687b      	ldr	r3, [r7, #4]
 810519a:	681b      	ldr	r3, [r3, #0]
 810519c:	4a4b      	ldr	r2, [pc, #300]	; (81052cc <HAL_DMA_IRQHandler+0x1e8>)
 810519e:	4293      	cmp	r3, r2
 81051a0:	d009      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	681b      	ldr	r3, [r3, #0]
 81051a6:	4a4a      	ldr	r2, [pc, #296]	; (81052d0 <HAL_DMA_IRQHandler+0x1ec>)
 81051a8:	4293      	cmp	r3, r2
 81051aa:	d004      	beq.n	81051b6 <HAL_DMA_IRQHandler+0xd2>
 81051ac:	687b      	ldr	r3, [r7, #4]
 81051ae:	681b      	ldr	r3, [r3, #0]
 81051b0:	4a48      	ldr	r2, [pc, #288]	; (81052d4 <HAL_DMA_IRQHandler+0x1f0>)
 81051b2:	4293      	cmp	r3, r2
 81051b4:	d101      	bne.n	81051ba <HAL_DMA_IRQHandler+0xd6>
 81051b6:	2301      	movs	r3, #1
 81051b8:	e000      	b.n	81051bc <HAL_DMA_IRQHandler+0xd8>
 81051ba:	2300      	movs	r3, #0
 81051bc:	2b00      	cmp	r3, #0
 81051be:	f000 842b 	beq.w	8105a18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051c6:	f003 031f 	and.w	r3, r3, #31
 81051ca:	2208      	movs	r2, #8
 81051cc:	409a      	lsls	r2, r3
 81051ce:	69bb      	ldr	r3, [r7, #24]
 81051d0:	4013      	ands	r3, r2
 81051d2:	2b00      	cmp	r3, #0
 81051d4:	f000 80a2 	beq.w	810531c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	681b      	ldr	r3, [r3, #0]
 81051dc:	4a2e      	ldr	r2, [pc, #184]	; (8105298 <HAL_DMA_IRQHandler+0x1b4>)
 81051de:	4293      	cmp	r3, r2
 81051e0:	d04a      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	681b      	ldr	r3, [r3, #0]
 81051e6:	4a2d      	ldr	r2, [pc, #180]	; (810529c <HAL_DMA_IRQHandler+0x1b8>)
 81051e8:	4293      	cmp	r3, r2
 81051ea:	d045      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	681b      	ldr	r3, [r3, #0]
 81051f0:	4a2b      	ldr	r2, [pc, #172]	; (81052a0 <HAL_DMA_IRQHandler+0x1bc>)
 81051f2:	4293      	cmp	r3, r2
 81051f4:	d040      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	681b      	ldr	r3, [r3, #0]
 81051fa:	4a2a      	ldr	r2, [pc, #168]	; (81052a4 <HAL_DMA_IRQHandler+0x1c0>)
 81051fc:	4293      	cmp	r3, r2
 81051fe:	d03b      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	681b      	ldr	r3, [r3, #0]
 8105204:	4a28      	ldr	r2, [pc, #160]	; (81052a8 <HAL_DMA_IRQHandler+0x1c4>)
 8105206:	4293      	cmp	r3, r2
 8105208:	d036      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	681b      	ldr	r3, [r3, #0]
 810520e:	4a27      	ldr	r2, [pc, #156]	; (81052ac <HAL_DMA_IRQHandler+0x1c8>)
 8105210:	4293      	cmp	r3, r2
 8105212:	d031      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	4a25      	ldr	r2, [pc, #148]	; (81052b0 <HAL_DMA_IRQHandler+0x1cc>)
 810521a:	4293      	cmp	r3, r2
 810521c:	d02c      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	681b      	ldr	r3, [r3, #0]
 8105222:	4a24      	ldr	r2, [pc, #144]	; (81052b4 <HAL_DMA_IRQHandler+0x1d0>)
 8105224:	4293      	cmp	r3, r2
 8105226:	d027      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	681b      	ldr	r3, [r3, #0]
 810522c:	4a22      	ldr	r2, [pc, #136]	; (81052b8 <HAL_DMA_IRQHandler+0x1d4>)
 810522e:	4293      	cmp	r3, r2
 8105230:	d022      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	681b      	ldr	r3, [r3, #0]
 8105236:	4a21      	ldr	r2, [pc, #132]	; (81052bc <HAL_DMA_IRQHandler+0x1d8>)
 8105238:	4293      	cmp	r3, r2
 810523a:	d01d      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	4a1f      	ldr	r2, [pc, #124]	; (81052c0 <HAL_DMA_IRQHandler+0x1dc>)
 8105242:	4293      	cmp	r3, r2
 8105244:	d018      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	681b      	ldr	r3, [r3, #0]
 810524a:	4a1e      	ldr	r2, [pc, #120]	; (81052c4 <HAL_DMA_IRQHandler+0x1e0>)
 810524c:	4293      	cmp	r3, r2
 810524e:	d013      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	681b      	ldr	r3, [r3, #0]
 8105254:	4a1c      	ldr	r2, [pc, #112]	; (81052c8 <HAL_DMA_IRQHandler+0x1e4>)
 8105256:	4293      	cmp	r3, r2
 8105258:	d00e      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 810525a:	687b      	ldr	r3, [r7, #4]
 810525c:	681b      	ldr	r3, [r3, #0]
 810525e:	4a1b      	ldr	r2, [pc, #108]	; (81052cc <HAL_DMA_IRQHandler+0x1e8>)
 8105260:	4293      	cmp	r3, r2
 8105262:	d009      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	4a19      	ldr	r2, [pc, #100]	; (81052d0 <HAL_DMA_IRQHandler+0x1ec>)
 810526a:	4293      	cmp	r3, r2
 810526c:	d004      	beq.n	8105278 <HAL_DMA_IRQHandler+0x194>
 810526e:	687b      	ldr	r3, [r7, #4]
 8105270:	681b      	ldr	r3, [r3, #0]
 8105272:	4a18      	ldr	r2, [pc, #96]	; (81052d4 <HAL_DMA_IRQHandler+0x1f0>)
 8105274:	4293      	cmp	r3, r2
 8105276:	d12f      	bne.n	81052d8 <HAL_DMA_IRQHandler+0x1f4>
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	f003 0304 	and.w	r3, r3, #4
 8105282:	2b00      	cmp	r3, #0
 8105284:	bf14      	ite	ne
 8105286:	2301      	movne	r3, #1
 8105288:	2300      	moveq	r3, #0
 810528a:	b2db      	uxtb	r3, r3
 810528c:	e02e      	b.n	81052ec <HAL_DMA_IRQHandler+0x208>
 810528e:	bf00      	nop
 8105290:	10000000 	.word	0x10000000
 8105294:	1b4e81b5 	.word	0x1b4e81b5
 8105298:	40020010 	.word	0x40020010
 810529c:	40020028 	.word	0x40020028
 81052a0:	40020040 	.word	0x40020040
 81052a4:	40020058 	.word	0x40020058
 81052a8:	40020070 	.word	0x40020070
 81052ac:	40020088 	.word	0x40020088
 81052b0:	400200a0 	.word	0x400200a0
 81052b4:	400200b8 	.word	0x400200b8
 81052b8:	40020410 	.word	0x40020410
 81052bc:	40020428 	.word	0x40020428
 81052c0:	40020440 	.word	0x40020440
 81052c4:	40020458 	.word	0x40020458
 81052c8:	40020470 	.word	0x40020470
 81052cc:	40020488 	.word	0x40020488
 81052d0:	400204a0 	.word	0x400204a0
 81052d4:	400204b8 	.word	0x400204b8
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	681b      	ldr	r3, [r3, #0]
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	f003 0308 	and.w	r3, r3, #8
 81052e2:	2b00      	cmp	r3, #0
 81052e4:	bf14      	ite	ne
 81052e6:	2301      	movne	r3, #1
 81052e8:	2300      	moveq	r3, #0
 81052ea:	b2db      	uxtb	r3, r3
 81052ec:	2b00      	cmp	r3, #0
 81052ee:	d015      	beq.n	810531c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	681a      	ldr	r2, [r3, #0]
 81052f6:	687b      	ldr	r3, [r7, #4]
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	f022 0204 	bic.w	r2, r2, #4
 81052fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105304:	f003 031f 	and.w	r3, r3, #31
 8105308:	2208      	movs	r2, #8
 810530a:	409a      	lsls	r2, r3
 810530c:	6a3b      	ldr	r3, [r7, #32]
 810530e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105314:	f043 0201 	orr.w	r2, r3, #1
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105320:	f003 031f 	and.w	r3, r3, #31
 8105324:	69ba      	ldr	r2, [r7, #24]
 8105326:	fa22 f303 	lsr.w	r3, r2, r3
 810532a:	f003 0301 	and.w	r3, r3, #1
 810532e:	2b00      	cmp	r3, #0
 8105330:	d06e      	beq.n	8105410 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	4a69      	ldr	r2, [pc, #420]	; (81054dc <HAL_DMA_IRQHandler+0x3f8>)
 8105338:	4293      	cmp	r3, r2
 810533a:	d04a      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	4a67      	ldr	r2, [pc, #412]	; (81054e0 <HAL_DMA_IRQHandler+0x3fc>)
 8105342:	4293      	cmp	r3, r2
 8105344:	d045      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	681b      	ldr	r3, [r3, #0]
 810534a:	4a66      	ldr	r2, [pc, #408]	; (81054e4 <HAL_DMA_IRQHandler+0x400>)
 810534c:	4293      	cmp	r3, r2
 810534e:	d040      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	4a64      	ldr	r2, [pc, #400]	; (81054e8 <HAL_DMA_IRQHandler+0x404>)
 8105356:	4293      	cmp	r3, r2
 8105358:	d03b      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	4a63      	ldr	r2, [pc, #396]	; (81054ec <HAL_DMA_IRQHandler+0x408>)
 8105360:	4293      	cmp	r3, r2
 8105362:	d036      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	681b      	ldr	r3, [r3, #0]
 8105368:	4a61      	ldr	r2, [pc, #388]	; (81054f0 <HAL_DMA_IRQHandler+0x40c>)
 810536a:	4293      	cmp	r3, r2
 810536c:	d031      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	681b      	ldr	r3, [r3, #0]
 8105372:	4a60      	ldr	r2, [pc, #384]	; (81054f4 <HAL_DMA_IRQHandler+0x410>)
 8105374:	4293      	cmp	r3, r2
 8105376:	d02c      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	4a5e      	ldr	r2, [pc, #376]	; (81054f8 <HAL_DMA_IRQHandler+0x414>)
 810537e:	4293      	cmp	r3, r2
 8105380:	d027      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	4a5d      	ldr	r2, [pc, #372]	; (81054fc <HAL_DMA_IRQHandler+0x418>)
 8105388:	4293      	cmp	r3, r2
 810538a:	d022      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	4a5b      	ldr	r2, [pc, #364]	; (8105500 <HAL_DMA_IRQHandler+0x41c>)
 8105392:	4293      	cmp	r3, r2
 8105394:	d01d      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	4a5a      	ldr	r2, [pc, #360]	; (8105504 <HAL_DMA_IRQHandler+0x420>)
 810539c:	4293      	cmp	r3, r2
 810539e:	d018      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	681b      	ldr	r3, [r3, #0]
 81053a4:	4a58      	ldr	r2, [pc, #352]	; (8105508 <HAL_DMA_IRQHandler+0x424>)
 81053a6:	4293      	cmp	r3, r2
 81053a8:	d013      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	4a57      	ldr	r2, [pc, #348]	; (810550c <HAL_DMA_IRQHandler+0x428>)
 81053b0:	4293      	cmp	r3, r2
 81053b2:	d00e      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	681b      	ldr	r3, [r3, #0]
 81053b8:	4a55      	ldr	r2, [pc, #340]	; (8105510 <HAL_DMA_IRQHandler+0x42c>)
 81053ba:	4293      	cmp	r3, r2
 81053bc:	d009      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	4a54      	ldr	r2, [pc, #336]	; (8105514 <HAL_DMA_IRQHandler+0x430>)
 81053c4:	4293      	cmp	r3, r2
 81053c6:	d004      	beq.n	81053d2 <HAL_DMA_IRQHandler+0x2ee>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	4a52      	ldr	r2, [pc, #328]	; (8105518 <HAL_DMA_IRQHandler+0x434>)
 81053ce:	4293      	cmp	r3, r2
 81053d0:	d10a      	bne.n	81053e8 <HAL_DMA_IRQHandler+0x304>
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	695b      	ldr	r3, [r3, #20]
 81053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81053dc:	2b00      	cmp	r3, #0
 81053de:	bf14      	ite	ne
 81053e0:	2301      	movne	r3, #1
 81053e2:	2300      	moveq	r3, #0
 81053e4:	b2db      	uxtb	r3, r3
 81053e6:	e003      	b.n	81053f0 <HAL_DMA_IRQHandler+0x30c>
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	681b      	ldr	r3, [r3, #0]
 81053ee:	2300      	movs	r3, #0
 81053f0:	2b00      	cmp	r3, #0
 81053f2:	d00d      	beq.n	8105410 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053f8:	f003 031f 	and.w	r3, r3, #31
 81053fc:	2201      	movs	r2, #1
 81053fe:	409a      	lsls	r2, r3
 8105400:	6a3b      	ldr	r3, [r7, #32]
 8105402:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8105404:	687b      	ldr	r3, [r7, #4]
 8105406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105408:	f043 0202 	orr.w	r2, r3, #2
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105414:	f003 031f 	and.w	r3, r3, #31
 8105418:	2204      	movs	r2, #4
 810541a:	409a      	lsls	r2, r3
 810541c:	69bb      	ldr	r3, [r7, #24]
 810541e:	4013      	ands	r3, r2
 8105420:	2b00      	cmp	r3, #0
 8105422:	f000 808f 	beq.w	8105544 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8105426:	687b      	ldr	r3, [r7, #4]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	4a2c      	ldr	r2, [pc, #176]	; (81054dc <HAL_DMA_IRQHandler+0x3f8>)
 810542c:	4293      	cmp	r3, r2
 810542e:	d04a      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	4a2a      	ldr	r2, [pc, #168]	; (81054e0 <HAL_DMA_IRQHandler+0x3fc>)
 8105436:	4293      	cmp	r3, r2
 8105438:	d045      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	4a29      	ldr	r2, [pc, #164]	; (81054e4 <HAL_DMA_IRQHandler+0x400>)
 8105440:	4293      	cmp	r3, r2
 8105442:	d040      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	4a27      	ldr	r2, [pc, #156]	; (81054e8 <HAL_DMA_IRQHandler+0x404>)
 810544a:	4293      	cmp	r3, r2
 810544c:	d03b      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	4a26      	ldr	r2, [pc, #152]	; (81054ec <HAL_DMA_IRQHandler+0x408>)
 8105454:	4293      	cmp	r3, r2
 8105456:	d036      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	681b      	ldr	r3, [r3, #0]
 810545c:	4a24      	ldr	r2, [pc, #144]	; (81054f0 <HAL_DMA_IRQHandler+0x40c>)
 810545e:	4293      	cmp	r3, r2
 8105460:	d031      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	4a23      	ldr	r2, [pc, #140]	; (81054f4 <HAL_DMA_IRQHandler+0x410>)
 8105468:	4293      	cmp	r3, r2
 810546a:	d02c      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	4a21      	ldr	r2, [pc, #132]	; (81054f8 <HAL_DMA_IRQHandler+0x414>)
 8105472:	4293      	cmp	r3, r2
 8105474:	d027      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	681b      	ldr	r3, [r3, #0]
 810547a:	4a20      	ldr	r2, [pc, #128]	; (81054fc <HAL_DMA_IRQHandler+0x418>)
 810547c:	4293      	cmp	r3, r2
 810547e:	d022      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105480:	687b      	ldr	r3, [r7, #4]
 8105482:	681b      	ldr	r3, [r3, #0]
 8105484:	4a1e      	ldr	r2, [pc, #120]	; (8105500 <HAL_DMA_IRQHandler+0x41c>)
 8105486:	4293      	cmp	r3, r2
 8105488:	d01d      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	681b      	ldr	r3, [r3, #0]
 810548e:	4a1d      	ldr	r2, [pc, #116]	; (8105504 <HAL_DMA_IRQHandler+0x420>)
 8105490:	4293      	cmp	r3, r2
 8105492:	d018      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	4a1b      	ldr	r2, [pc, #108]	; (8105508 <HAL_DMA_IRQHandler+0x424>)
 810549a:	4293      	cmp	r3, r2
 810549c:	d013      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 810549e:	687b      	ldr	r3, [r7, #4]
 81054a0:	681b      	ldr	r3, [r3, #0]
 81054a2:	4a1a      	ldr	r2, [pc, #104]	; (810550c <HAL_DMA_IRQHandler+0x428>)
 81054a4:	4293      	cmp	r3, r2
 81054a6:	d00e      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	4a18      	ldr	r2, [pc, #96]	; (8105510 <HAL_DMA_IRQHandler+0x42c>)
 81054ae:	4293      	cmp	r3, r2
 81054b0:	d009      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	4a17      	ldr	r2, [pc, #92]	; (8105514 <HAL_DMA_IRQHandler+0x430>)
 81054b8:	4293      	cmp	r3, r2
 81054ba:	d004      	beq.n	81054c6 <HAL_DMA_IRQHandler+0x3e2>
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	4a15      	ldr	r2, [pc, #84]	; (8105518 <HAL_DMA_IRQHandler+0x434>)
 81054c2:	4293      	cmp	r3, r2
 81054c4:	d12a      	bne.n	810551c <HAL_DMA_IRQHandler+0x438>
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	f003 0302 	and.w	r3, r3, #2
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	bf14      	ite	ne
 81054d4:	2301      	movne	r3, #1
 81054d6:	2300      	moveq	r3, #0
 81054d8:	b2db      	uxtb	r3, r3
 81054da:	e023      	b.n	8105524 <HAL_DMA_IRQHandler+0x440>
 81054dc:	40020010 	.word	0x40020010
 81054e0:	40020028 	.word	0x40020028
 81054e4:	40020040 	.word	0x40020040
 81054e8:	40020058 	.word	0x40020058
 81054ec:	40020070 	.word	0x40020070
 81054f0:	40020088 	.word	0x40020088
 81054f4:	400200a0 	.word	0x400200a0
 81054f8:	400200b8 	.word	0x400200b8
 81054fc:	40020410 	.word	0x40020410
 8105500:	40020428 	.word	0x40020428
 8105504:	40020440 	.word	0x40020440
 8105508:	40020458 	.word	0x40020458
 810550c:	40020470 	.word	0x40020470
 8105510:	40020488 	.word	0x40020488
 8105514:	400204a0 	.word	0x400204a0
 8105518:	400204b8 	.word	0x400204b8
 810551c:	687b      	ldr	r3, [r7, #4]
 810551e:	681b      	ldr	r3, [r3, #0]
 8105520:	681b      	ldr	r3, [r3, #0]
 8105522:	2300      	movs	r3, #0
 8105524:	2b00      	cmp	r3, #0
 8105526:	d00d      	beq.n	8105544 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810552c:	f003 031f 	and.w	r3, r3, #31
 8105530:	2204      	movs	r2, #4
 8105532:	409a      	lsls	r2, r3
 8105534:	6a3b      	ldr	r3, [r7, #32]
 8105536:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810553c:	f043 0204 	orr.w	r2, r3, #4
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105548:	f003 031f 	and.w	r3, r3, #31
 810554c:	2210      	movs	r2, #16
 810554e:	409a      	lsls	r2, r3
 8105550:	69bb      	ldr	r3, [r7, #24]
 8105552:	4013      	ands	r3, r2
 8105554:	2b00      	cmp	r3, #0
 8105556:	f000 80a6 	beq.w	81056a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810555a:	687b      	ldr	r3, [r7, #4]
 810555c:	681b      	ldr	r3, [r3, #0]
 810555e:	4a85      	ldr	r2, [pc, #532]	; (8105774 <HAL_DMA_IRQHandler+0x690>)
 8105560:	4293      	cmp	r3, r2
 8105562:	d04a      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	4a83      	ldr	r2, [pc, #524]	; (8105778 <HAL_DMA_IRQHandler+0x694>)
 810556a:	4293      	cmp	r3, r2
 810556c:	d045      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	681b      	ldr	r3, [r3, #0]
 8105572:	4a82      	ldr	r2, [pc, #520]	; (810577c <HAL_DMA_IRQHandler+0x698>)
 8105574:	4293      	cmp	r3, r2
 8105576:	d040      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	681b      	ldr	r3, [r3, #0]
 810557c:	4a80      	ldr	r2, [pc, #512]	; (8105780 <HAL_DMA_IRQHandler+0x69c>)
 810557e:	4293      	cmp	r3, r2
 8105580:	d03b      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	681b      	ldr	r3, [r3, #0]
 8105586:	4a7f      	ldr	r2, [pc, #508]	; (8105784 <HAL_DMA_IRQHandler+0x6a0>)
 8105588:	4293      	cmp	r3, r2
 810558a:	d036      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	681b      	ldr	r3, [r3, #0]
 8105590:	4a7d      	ldr	r2, [pc, #500]	; (8105788 <HAL_DMA_IRQHandler+0x6a4>)
 8105592:	4293      	cmp	r3, r2
 8105594:	d031      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	681b      	ldr	r3, [r3, #0]
 810559a:	4a7c      	ldr	r2, [pc, #496]	; (810578c <HAL_DMA_IRQHandler+0x6a8>)
 810559c:	4293      	cmp	r3, r2
 810559e:	d02c      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055a0:	687b      	ldr	r3, [r7, #4]
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	4a7a      	ldr	r2, [pc, #488]	; (8105790 <HAL_DMA_IRQHandler+0x6ac>)
 81055a6:	4293      	cmp	r3, r2
 81055a8:	d027      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	4a79      	ldr	r2, [pc, #484]	; (8105794 <HAL_DMA_IRQHandler+0x6b0>)
 81055b0:	4293      	cmp	r3, r2
 81055b2:	d022      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	4a77      	ldr	r2, [pc, #476]	; (8105798 <HAL_DMA_IRQHandler+0x6b4>)
 81055ba:	4293      	cmp	r3, r2
 81055bc:	d01d      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	4a76      	ldr	r2, [pc, #472]	; (810579c <HAL_DMA_IRQHandler+0x6b8>)
 81055c4:	4293      	cmp	r3, r2
 81055c6:	d018      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	4a74      	ldr	r2, [pc, #464]	; (81057a0 <HAL_DMA_IRQHandler+0x6bc>)
 81055ce:	4293      	cmp	r3, r2
 81055d0:	d013      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	4a73      	ldr	r2, [pc, #460]	; (81057a4 <HAL_DMA_IRQHandler+0x6c0>)
 81055d8:	4293      	cmp	r3, r2
 81055da:	d00e      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	4a71      	ldr	r2, [pc, #452]	; (81057a8 <HAL_DMA_IRQHandler+0x6c4>)
 81055e2:	4293      	cmp	r3, r2
 81055e4:	d009      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	4a70      	ldr	r2, [pc, #448]	; (81057ac <HAL_DMA_IRQHandler+0x6c8>)
 81055ec:	4293      	cmp	r3, r2
 81055ee:	d004      	beq.n	81055fa <HAL_DMA_IRQHandler+0x516>
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	4a6e      	ldr	r2, [pc, #440]	; (81057b0 <HAL_DMA_IRQHandler+0x6cc>)
 81055f6:	4293      	cmp	r3, r2
 81055f8:	d10a      	bne.n	8105610 <HAL_DMA_IRQHandler+0x52c>
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	f003 0308 	and.w	r3, r3, #8
 8105604:	2b00      	cmp	r3, #0
 8105606:	bf14      	ite	ne
 8105608:	2301      	movne	r3, #1
 810560a:	2300      	moveq	r3, #0
 810560c:	b2db      	uxtb	r3, r3
 810560e:	e009      	b.n	8105624 <HAL_DMA_IRQHandler+0x540>
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	f003 0304 	and.w	r3, r3, #4
 810561a:	2b00      	cmp	r3, #0
 810561c:	bf14      	ite	ne
 810561e:	2301      	movne	r3, #1
 8105620:	2300      	moveq	r3, #0
 8105622:	b2db      	uxtb	r3, r3
 8105624:	2b00      	cmp	r3, #0
 8105626:	d03e      	beq.n	81056a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810562c:	f003 031f 	and.w	r3, r3, #31
 8105630:	2210      	movs	r2, #16
 8105632:	409a      	lsls	r2, r3
 8105634:	6a3b      	ldr	r3, [r7, #32]
 8105636:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	681b      	ldr	r3, [r3, #0]
 810563c:	681b      	ldr	r3, [r3, #0]
 810563e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105642:	2b00      	cmp	r3, #0
 8105644:	d018      	beq.n	8105678 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	681b      	ldr	r3, [r3, #0]
 810564c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105650:	2b00      	cmp	r3, #0
 8105652:	d108      	bne.n	8105666 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105658:	2b00      	cmp	r3, #0
 810565a:	d024      	beq.n	81056a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105660:	6878      	ldr	r0, [r7, #4]
 8105662:	4798      	blx	r3
 8105664:	e01f      	b.n	81056a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810566a:	2b00      	cmp	r3, #0
 810566c:	d01b      	beq.n	81056a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810566e:	687b      	ldr	r3, [r7, #4]
 8105670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105672:	6878      	ldr	r0, [r7, #4]
 8105674:	4798      	blx	r3
 8105676:	e016      	b.n	81056a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105682:	2b00      	cmp	r3, #0
 8105684:	d107      	bne.n	8105696 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	681b      	ldr	r3, [r3, #0]
 810568a:	681a      	ldr	r2, [r3, #0]
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	f022 0208 	bic.w	r2, r2, #8
 8105694:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810569a:	2b00      	cmp	r3, #0
 810569c:	d003      	beq.n	81056a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810569e:	687b      	ldr	r3, [r7, #4]
 81056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056a2:	6878      	ldr	r0, [r7, #4]
 81056a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056aa:	f003 031f 	and.w	r3, r3, #31
 81056ae:	2220      	movs	r2, #32
 81056b0:	409a      	lsls	r2, r3
 81056b2:	69bb      	ldr	r3, [r7, #24]
 81056b4:	4013      	ands	r3, r2
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	f000 8110 	beq.w	81058dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	4a2c      	ldr	r2, [pc, #176]	; (8105774 <HAL_DMA_IRQHandler+0x690>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d04a      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	681b      	ldr	r3, [r3, #0]
 81056ca:	4a2b      	ldr	r2, [pc, #172]	; (8105778 <HAL_DMA_IRQHandler+0x694>)
 81056cc:	4293      	cmp	r3, r2
 81056ce:	d045      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	4a29      	ldr	r2, [pc, #164]	; (810577c <HAL_DMA_IRQHandler+0x698>)
 81056d6:	4293      	cmp	r3, r2
 81056d8:	d040      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	4a28      	ldr	r2, [pc, #160]	; (8105780 <HAL_DMA_IRQHandler+0x69c>)
 81056e0:	4293      	cmp	r3, r2
 81056e2:	d03b      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	681b      	ldr	r3, [r3, #0]
 81056e8:	4a26      	ldr	r2, [pc, #152]	; (8105784 <HAL_DMA_IRQHandler+0x6a0>)
 81056ea:	4293      	cmp	r3, r2
 81056ec:	d036      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	681b      	ldr	r3, [r3, #0]
 81056f2:	4a25      	ldr	r2, [pc, #148]	; (8105788 <HAL_DMA_IRQHandler+0x6a4>)
 81056f4:	4293      	cmp	r3, r2
 81056f6:	d031      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	4a23      	ldr	r2, [pc, #140]	; (810578c <HAL_DMA_IRQHandler+0x6a8>)
 81056fe:	4293      	cmp	r3, r2
 8105700:	d02c      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	681b      	ldr	r3, [r3, #0]
 8105706:	4a22      	ldr	r2, [pc, #136]	; (8105790 <HAL_DMA_IRQHandler+0x6ac>)
 8105708:	4293      	cmp	r3, r2
 810570a:	d027      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	4a20      	ldr	r2, [pc, #128]	; (8105794 <HAL_DMA_IRQHandler+0x6b0>)
 8105712:	4293      	cmp	r3, r2
 8105714:	d022      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	681b      	ldr	r3, [r3, #0]
 810571a:	4a1f      	ldr	r2, [pc, #124]	; (8105798 <HAL_DMA_IRQHandler+0x6b4>)
 810571c:	4293      	cmp	r3, r2
 810571e:	d01d      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	681b      	ldr	r3, [r3, #0]
 8105724:	4a1d      	ldr	r2, [pc, #116]	; (810579c <HAL_DMA_IRQHandler+0x6b8>)
 8105726:	4293      	cmp	r3, r2
 8105728:	d018      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	681b      	ldr	r3, [r3, #0]
 810572e:	4a1c      	ldr	r2, [pc, #112]	; (81057a0 <HAL_DMA_IRQHandler+0x6bc>)
 8105730:	4293      	cmp	r3, r2
 8105732:	d013      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	681b      	ldr	r3, [r3, #0]
 8105738:	4a1a      	ldr	r2, [pc, #104]	; (81057a4 <HAL_DMA_IRQHandler+0x6c0>)
 810573a:	4293      	cmp	r3, r2
 810573c:	d00e      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	4a19      	ldr	r2, [pc, #100]	; (81057a8 <HAL_DMA_IRQHandler+0x6c4>)
 8105744:	4293      	cmp	r3, r2
 8105746:	d009      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	4a17      	ldr	r2, [pc, #92]	; (81057ac <HAL_DMA_IRQHandler+0x6c8>)
 810574e:	4293      	cmp	r3, r2
 8105750:	d004      	beq.n	810575c <HAL_DMA_IRQHandler+0x678>
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	681b      	ldr	r3, [r3, #0]
 8105756:	4a16      	ldr	r2, [pc, #88]	; (81057b0 <HAL_DMA_IRQHandler+0x6cc>)
 8105758:	4293      	cmp	r3, r2
 810575a:	d12b      	bne.n	81057b4 <HAL_DMA_IRQHandler+0x6d0>
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	681b      	ldr	r3, [r3, #0]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	f003 0310 	and.w	r3, r3, #16
 8105766:	2b00      	cmp	r3, #0
 8105768:	bf14      	ite	ne
 810576a:	2301      	movne	r3, #1
 810576c:	2300      	moveq	r3, #0
 810576e:	b2db      	uxtb	r3, r3
 8105770:	e02a      	b.n	81057c8 <HAL_DMA_IRQHandler+0x6e4>
 8105772:	bf00      	nop
 8105774:	40020010 	.word	0x40020010
 8105778:	40020028 	.word	0x40020028
 810577c:	40020040 	.word	0x40020040
 8105780:	40020058 	.word	0x40020058
 8105784:	40020070 	.word	0x40020070
 8105788:	40020088 	.word	0x40020088
 810578c:	400200a0 	.word	0x400200a0
 8105790:	400200b8 	.word	0x400200b8
 8105794:	40020410 	.word	0x40020410
 8105798:	40020428 	.word	0x40020428
 810579c:	40020440 	.word	0x40020440
 81057a0:	40020458 	.word	0x40020458
 81057a4:	40020470 	.word	0x40020470
 81057a8:	40020488 	.word	0x40020488
 81057ac:	400204a0 	.word	0x400204a0
 81057b0:	400204b8 	.word	0x400204b8
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	f003 0302 	and.w	r3, r3, #2
 81057be:	2b00      	cmp	r3, #0
 81057c0:	bf14      	ite	ne
 81057c2:	2301      	movne	r3, #1
 81057c4:	2300      	moveq	r3, #0
 81057c6:	b2db      	uxtb	r3, r3
 81057c8:	2b00      	cmp	r3, #0
 81057ca:	f000 8087 	beq.w	81058dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81057d2:	f003 031f 	and.w	r3, r3, #31
 81057d6:	2220      	movs	r2, #32
 81057d8:	409a      	lsls	r2, r3
 81057da:	6a3b      	ldr	r3, [r7, #32]
 81057dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81057e4:	b2db      	uxtb	r3, r3
 81057e6:	2b04      	cmp	r3, #4
 81057e8:	d139      	bne.n	810585e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	681a      	ldr	r2, [r3, #0]
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	f022 0216 	bic.w	r2, r2, #22
 81057f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	695a      	ldr	r2, [r3, #20]
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	681b      	ldr	r3, [r3, #0]
 8105804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8105808:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810580e:	2b00      	cmp	r3, #0
 8105810:	d103      	bne.n	810581a <HAL_DMA_IRQHandler+0x736>
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105816:	2b00      	cmp	r3, #0
 8105818:	d007      	beq.n	810582a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	681a      	ldr	r2, [r3, #0]
 8105820:	687b      	ldr	r3, [r7, #4]
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	f022 0208 	bic.w	r2, r2, #8
 8105828:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810582e:	f003 031f 	and.w	r3, r3, #31
 8105832:	223f      	movs	r2, #63	; 0x3f
 8105834:	409a      	lsls	r2, r3
 8105836:	6a3b      	ldr	r3, [r7, #32]
 8105838:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	2200      	movs	r2, #0
 810583e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105842:	687b      	ldr	r3, [r7, #4]
 8105844:	2201      	movs	r2, #1
 8105846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810584e:	2b00      	cmp	r3, #0
 8105850:	f000 834a 	beq.w	8105ee8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105858:	6878      	ldr	r0, [r7, #4]
 810585a:	4798      	blx	r3
          }
          return;
 810585c:	e344      	b.n	8105ee8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105868:	2b00      	cmp	r3, #0
 810586a:	d018      	beq.n	810589e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105876:	2b00      	cmp	r3, #0
 8105878:	d108      	bne.n	810588c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810587a:	687b      	ldr	r3, [r7, #4]
 810587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810587e:	2b00      	cmp	r3, #0
 8105880:	d02c      	beq.n	81058dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105886:	6878      	ldr	r0, [r7, #4]
 8105888:	4798      	blx	r3
 810588a:	e027      	b.n	81058dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105890:	2b00      	cmp	r3, #0
 8105892:	d023      	beq.n	81058dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8105894:	687b      	ldr	r3, [r7, #4]
 8105896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105898:	6878      	ldr	r0, [r7, #4]
 810589a:	4798      	blx	r3
 810589c:	e01e      	b.n	81058dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	681b      	ldr	r3, [r3, #0]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d10f      	bne.n	81058cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81058ac:	687b      	ldr	r3, [r7, #4]
 81058ae:	681b      	ldr	r3, [r3, #0]
 81058b0:	681a      	ldr	r2, [r3, #0]
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	f022 0210 	bic.w	r2, r2, #16
 81058ba:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	2200      	movs	r2, #0
 81058c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	2201      	movs	r2, #1
 81058c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81058d0:	2b00      	cmp	r3, #0
 81058d2:	d003      	beq.n	81058dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81058d8:	6878      	ldr	r0, [r7, #4]
 81058da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	f000 8306 	beq.w	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81058ea:	f003 0301 	and.w	r3, r3, #1
 81058ee:	2b00      	cmp	r3, #0
 81058f0:	f000 8088 	beq.w	8105a04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	2204      	movs	r2, #4
 81058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	4a7a      	ldr	r2, [pc, #488]	; (8105aec <HAL_DMA_IRQHandler+0xa08>)
 8105902:	4293      	cmp	r3, r2
 8105904:	d04a      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	681b      	ldr	r3, [r3, #0]
 810590a:	4a79      	ldr	r2, [pc, #484]	; (8105af0 <HAL_DMA_IRQHandler+0xa0c>)
 810590c:	4293      	cmp	r3, r2
 810590e:	d045      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	4a77      	ldr	r2, [pc, #476]	; (8105af4 <HAL_DMA_IRQHandler+0xa10>)
 8105916:	4293      	cmp	r3, r2
 8105918:	d040      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	681b      	ldr	r3, [r3, #0]
 810591e:	4a76      	ldr	r2, [pc, #472]	; (8105af8 <HAL_DMA_IRQHandler+0xa14>)
 8105920:	4293      	cmp	r3, r2
 8105922:	d03b      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	4a74      	ldr	r2, [pc, #464]	; (8105afc <HAL_DMA_IRQHandler+0xa18>)
 810592a:	4293      	cmp	r3, r2
 810592c:	d036      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 810592e:	687b      	ldr	r3, [r7, #4]
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	4a73      	ldr	r2, [pc, #460]	; (8105b00 <HAL_DMA_IRQHandler+0xa1c>)
 8105934:	4293      	cmp	r3, r2
 8105936:	d031      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	4a71      	ldr	r2, [pc, #452]	; (8105b04 <HAL_DMA_IRQHandler+0xa20>)
 810593e:	4293      	cmp	r3, r2
 8105940:	d02c      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	4a70      	ldr	r2, [pc, #448]	; (8105b08 <HAL_DMA_IRQHandler+0xa24>)
 8105948:	4293      	cmp	r3, r2
 810594a:	d027      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	681b      	ldr	r3, [r3, #0]
 8105950:	4a6e      	ldr	r2, [pc, #440]	; (8105b0c <HAL_DMA_IRQHandler+0xa28>)
 8105952:	4293      	cmp	r3, r2
 8105954:	d022      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	4a6d      	ldr	r2, [pc, #436]	; (8105b10 <HAL_DMA_IRQHandler+0xa2c>)
 810595c:	4293      	cmp	r3, r2
 810595e:	d01d      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	681b      	ldr	r3, [r3, #0]
 8105964:	4a6b      	ldr	r2, [pc, #428]	; (8105b14 <HAL_DMA_IRQHandler+0xa30>)
 8105966:	4293      	cmp	r3, r2
 8105968:	d018      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	681b      	ldr	r3, [r3, #0]
 810596e:	4a6a      	ldr	r2, [pc, #424]	; (8105b18 <HAL_DMA_IRQHandler+0xa34>)
 8105970:	4293      	cmp	r3, r2
 8105972:	d013      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	681b      	ldr	r3, [r3, #0]
 8105978:	4a68      	ldr	r2, [pc, #416]	; (8105b1c <HAL_DMA_IRQHandler+0xa38>)
 810597a:	4293      	cmp	r3, r2
 810597c:	d00e      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 810597e:	687b      	ldr	r3, [r7, #4]
 8105980:	681b      	ldr	r3, [r3, #0]
 8105982:	4a67      	ldr	r2, [pc, #412]	; (8105b20 <HAL_DMA_IRQHandler+0xa3c>)
 8105984:	4293      	cmp	r3, r2
 8105986:	d009      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105988:	687b      	ldr	r3, [r7, #4]
 810598a:	681b      	ldr	r3, [r3, #0]
 810598c:	4a65      	ldr	r2, [pc, #404]	; (8105b24 <HAL_DMA_IRQHandler+0xa40>)
 810598e:	4293      	cmp	r3, r2
 8105990:	d004      	beq.n	810599c <HAL_DMA_IRQHandler+0x8b8>
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	681b      	ldr	r3, [r3, #0]
 8105996:	4a64      	ldr	r2, [pc, #400]	; (8105b28 <HAL_DMA_IRQHandler+0xa44>)
 8105998:	4293      	cmp	r3, r2
 810599a:	d108      	bne.n	81059ae <HAL_DMA_IRQHandler+0x8ca>
 810599c:	687b      	ldr	r3, [r7, #4]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	681a      	ldr	r2, [r3, #0]
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	f022 0201 	bic.w	r2, r2, #1
 81059aa:	601a      	str	r2, [r3, #0]
 81059ac:	e007      	b.n	81059be <HAL_DMA_IRQHandler+0x8da>
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	681a      	ldr	r2, [r3, #0]
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	f022 0201 	bic.w	r2, r2, #1
 81059bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81059be:	68fb      	ldr	r3, [r7, #12]
 81059c0:	3301      	adds	r3, #1
 81059c2:	60fb      	str	r3, [r7, #12]
 81059c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81059c6:	429a      	cmp	r2, r3
 81059c8:	d307      	bcc.n	81059da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	681b      	ldr	r3, [r3, #0]
 81059ce:	681b      	ldr	r3, [r3, #0]
 81059d0:	f003 0301 	and.w	r3, r3, #1
 81059d4:	2b00      	cmp	r3, #0
 81059d6:	d1f2      	bne.n	81059be <HAL_DMA_IRQHandler+0x8da>
 81059d8:	e000      	b.n	81059dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 81059da:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	2200      	movs	r2, #0
 81059e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681b      	ldr	r3, [r3, #0]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	f003 0301 	and.w	r3, r3, #1
 81059ee:	2b00      	cmp	r3, #0
 81059f0:	d004      	beq.n	81059fc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	2203      	movs	r2, #3
 81059f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81059fa:	e003      	b.n	8105a04 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	2201      	movs	r2, #1
 8105a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a08:	2b00      	cmp	r3, #0
 8105a0a:	f000 8272 	beq.w	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a12:	6878      	ldr	r0, [r7, #4]
 8105a14:	4798      	blx	r3
 8105a16:	e26c      	b.n	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	4a43      	ldr	r2, [pc, #268]	; (8105b2c <HAL_DMA_IRQHandler+0xa48>)
 8105a1e:	4293      	cmp	r3, r2
 8105a20:	d022      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	4a42      	ldr	r2, [pc, #264]	; (8105b30 <HAL_DMA_IRQHandler+0xa4c>)
 8105a28:	4293      	cmp	r3, r2
 8105a2a:	d01d      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	681b      	ldr	r3, [r3, #0]
 8105a30:	4a40      	ldr	r2, [pc, #256]	; (8105b34 <HAL_DMA_IRQHandler+0xa50>)
 8105a32:	4293      	cmp	r3, r2
 8105a34:	d018      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	4a3f      	ldr	r2, [pc, #252]	; (8105b38 <HAL_DMA_IRQHandler+0xa54>)
 8105a3c:	4293      	cmp	r3, r2
 8105a3e:	d013      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	4a3d      	ldr	r2, [pc, #244]	; (8105b3c <HAL_DMA_IRQHandler+0xa58>)
 8105a46:	4293      	cmp	r3, r2
 8105a48:	d00e      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	681b      	ldr	r3, [r3, #0]
 8105a4e:	4a3c      	ldr	r2, [pc, #240]	; (8105b40 <HAL_DMA_IRQHandler+0xa5c>)
 8105a50:	4293      	cmp	r3, r2
 8105a52:	d009      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	681b      	ldr	r3, [r3, #0]
 8105a58:	4a3a      	ldr	r2, [pc, #232]	; (8105b44 <HAL_DMA_IRQHandler+0xa60>)
 8105a5a:	4293      	cmp	r3, r2
 8105a5c:	d004      	beq.n	8105a68 <HAL_DMA_IRQHandler+0x984>
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	681b      	ldr	r3, [r3, #0]
 8105a62:	4a39      	ldr	r2, [pc, #228]	; (8105b48 <HAL_DMA_IRQHandler+0xa64>)
 8105a64:	4293      	cmp	r3, r2
 8105a66:	d101      	bne.n	8105a6c <HAL_DMA_IRQHandler+0x988>
 8105a68:	2301      	movs	r3, #1
 8105a6a:	e000      	b.n	8105a6e <HAL_DMA_IRQHandler+0x98a>
 8105a6c:	2300      	movs	r3, #0
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	f000 823f 	beq.w	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a80:	f003 031f 	and.w	r3, r3, #31
 8105a84:	2204      	movs	r2, #4
 8105a86:	409a      	lsls	r2, r3
 8105a88:	697b      	ldr	r3, [r7, #20]
 8105a8a:	4013      	ands	r3, r2
 8105a8c:	2b00      	cmp	r3, #0
 8105a8e:	f000 80cd 	beq.w	8105c2c <HAL_DMA_IRQHandler+0xb48>
 8105a92:	693b      	ldr	r3, [r7, #16]
 8105a94:	f003 0304 	and.w	r3, r3, #4
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	f000 80c7 	beq.w	8105c2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105aa2:	f003 031f 	and.w	r3, r3, #31
 8105aa6:	2204      	movs	r2, #4
 8105aa8:	409a      	lsls	r2, r3
 8105aaa:	69fb      	ldr	r3, [r7, #28]
 8105aac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105aae:	693b      	ldr	r3, [r7, #16]
 8105ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105ab4:	2b00      	cmp	r3, #0
 8105ab6:	d049      	beq.n	8105b4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105ab8:	693b      	ldr	r3, [r7, #16]
 8105aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105abe:	2b00      	cmp	r3, #0
 8105ac0:	d109      	bne.n	8105ad6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	f000 8210 	beq.w	8105eec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105ad0:	6878      	ldr	r0, [r7, #4]
 8105ad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105ad4:	e20a      	b.n	8105eec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ada:	2b00      	cmp	r3, #0
 8105adc:	f000 8206 	beq.w	8105eec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ae4:	6878      	ldr	r0, [r7, #4]
 8105ae6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105ae8:	e200      	b.n	8105eec <HAL_DMA_IRQHandler+0xe08>
 8105aea:	bf00      	nop
 8105aec:	40020010 	.word	0x40020010
 8105af0:	40020028 	.word	0x40020028
 8105af4:	40020040 	.word	0x40020040
 8105af8:	40020058 	.word	0x40020058
 8105afc:	40020070 	.word	0x40020070
 8105b00:	40020088 	.word	0x40020088
 8105b04:	400200a0 	.word	0x400200a0
 8105b08:	400200b8 	.word	0x400200b8
 8105b0c:	40020410 	.word	0x40020410
 8105b10:	40020428 	.word	0x40020428
 8105b14:	40020440 	.word	0x40020440
 8105b18:	40020458 	.word	0x40020458
 8105b1c:	40020470 	.word	0x40020470
 8105b20:	40020488 	.word	0x40020488
 8105b24:	400204a0 	.word	0x400204a0
 8105b28:	400204b8 	.word	0x400204b8
 8105b2c:	58025408 	.word	0x58025408
 8105b30:	5802541c 	.word	0x5802541c
 8105b34:	58025430 	.word	0x58025430
 8105b38:	58025444 	.word	0x58025444
 8105b3c:	58025458 	.word	0x58025458
 8105b40:	5802546c 	.word	0x5802546c
 8105b44:	58025480 	.word	0x58025480
 8105b48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105b4c:	693b      	ldr	r3, [r7, #16]
 8105b4e:	f003 0320 	and.w	r3, r3, #32
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	d160      	bne.n	8105c18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	4a8c      	ldr	r2, [pc, #560]	; (8105d8c <HAL_DMA_IRQHandler+0xca8>)
 8105b5c:	4293      	cmp	r3, r2
 8105b5e:	d04a      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	4a8a      	ldr	r2, [pc, #552]	; (8105d90 <HAL_DMA_IRQHandler+0xcac>)
 8105b66:	4293      	cmp	r3, r2
 8105b68:	d045      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	4a89      	ldr	r2, [pc, #548]	; (8105d94 <HAL_DMA_IRQHandler+0xcb0>)
 8105b70:	4293      	cmp	r3, r2
 8105b72:	d040      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	4a87      	ldr	r2, [pc, #540]	; (8105d98 <HAL_DMA_IRQHandler+0xcb4>)
 8105b7a:	4293      	cmp	r3, r2
 8105b7c:	d03b      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	681b      	ldr	r3, [r3, #0]
 8105b82:	4a86      	ldr	r2, [pc, #536]	; (8105d9c <HAL_DMA_IRQHandler+0xcb8>)
 8105b84:	4293      	cmp	r3, r2
 8105b86:	d036      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	4a84      	ldr	r2, [pc, #528]	; (8105da0 <HAL_DMA_IRQHandler+0xcbc>)
 8105b8e:	4293      	cmp	r3, r2
 8105b90:	d031      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	4a83      	ldr	r2, [pc, #524]	; (8105da4 <HAL_DMA_IRQHandler+0xcc0>)
 8105b98:	4293      	cmp	r3, r2
 8105b9a:	d02c      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	681b      	ldr	r3, [r3, #0]
 8105ba0:	4a81      	ldr	r2, [pc, #516]	; (8105da8 <HAL_DMA_IRQHandler+0xcc4>)
 8105ba2:	4293      	cmp	r3, r2
 8105ba4:	d027      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	4a80      	ldr	r2, [pc, #512]	; (8105dac <HAL_DMA_IRQHandler+0xcc8>)
 8105bac:	4293      	cmp	r3, r2
 8105bae:	d022      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	4a7e      	ldr	r2, [pc, #504]	; (8105db0 <HAL_DMA_IRQHandler+0xccc>)
 8105bb6:	4293      	cmp	r3, r2
 8105bb8:	d01d      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	4a7d      	ldr	r2, [pc, #500]	; (8105db4 <HAL_DMA_IRQHandler+0xcd0>)
 8105bc0:	4293      	cmp	r3, r2
 8105bc2:	d018      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	681b      	ldr	r3, [r3, #0]
 8105bc8:	4a7b      	ldr	r2, [pc, #492]	; (8105db8 <HAL_DMA_IRQHandler+0xcd4>)
 8105bca:	4293      	cmp	r3, r2
 8105bcc:	d013      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	681b      	ldr	r3, [r3, #0]
 8105bd2:	4a7a      	ldr	r2, [pc, #488]	; (8105dbc <HAL_DMA_IRQHandler+0xcd8>)
 8105bd4:	4293      	cmp	r3, r2
 8105bd6:	d00e      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	681b      	ldr	r3, [r3, #0]
 8105bdc:	4a78      	ldr	r2, [pc, #480]	; (8105dc0 <HAL_DMA_IRQHandler+0xcdc>)
 8105bde:	4293      	cmp	r3, r2
 8105be0:	d009      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	681b      	ldr	r3, [r3, #0]
 8105be6:	4a77      	ldr	r2, [pc, #476]	; (8105dc4 <HAL_DMA_IRQHandler+0xce0>)
 8105be8:	4293      	cmp	r3, r2
 8105bea:	d004      	beq.n	8105bf6 <HAL_DMA_IRQHandler+0xb12>
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	4a75      	ldr	r2, [pc, #468]	; (8105dc8 <HAL_DMA_IRQHandler+0xce4>)
 8105bf2:	4293      	cmp	r3, r2
 8105bf4:	d108      	bne.n	8105c08 <HAL_DMA_IRQHandler+0xb24>
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	681a      	ldr	r2, [r3, #0]
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	681b      	ldr	r3, [r3, #0]
 8105c00:	f022 0208 	bic.w	r2, r2, #8
 8105c04:	601a      	str	r2, [r3, #0]
 8105c06:	e007      	b.n	8105c18 <HAL_DMA_IRQHandler+0xb34>
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	681a      	ldr	r2, [r3, #0]
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	f022 0204 	bic.w	r2, r2, #4
 8105c16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8105c18:	687b      	ldr	r3, [r7, #4]
 8105c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c1c:	2b00      	cmp	r3, #0
 8105c1e:	f000 8165 	beq.w	8105eec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105c26:	6878      	ldr	r0, [r7, #4]
 8105c28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105c2a:	e15f      	b.n	8105eec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c30:	f003 031f 	and.w	r3, r3, #31
 8105c34:	2202      	movs	r2, #2
 8105c36:	409a      	lsls	r2, r3
 8105c38:	697b      	ldr	r3, [r7, #20]
 8105c3a:	4013      	ands	r3, r2
 8105c3c:	2b00      	cmp	r3, #0
 8105c3e:	f000 80c5 	beq.w	8105dcc <HAL_DMA_IRQHandler+0xce8>
 8105c42:	693b      	ldr	r3, [r7, #16]
 8105c44:	f003 0302 	and.w	r3, r3, #2
 8105c48:	2b00      	cmp	r3, #0
 8105c4a:	f000 80bf 	beq.w	8105dcc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c52:	f003 031f 	and.w	r3, r3, #31
 8105c56:	2202      	movs	r2, #2
 8105c58:	409a      	lsls	r2, r3
 8105c5a:	69fb      	ldr	r3, [r7, #28]
 8105c5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105c5e:	693b      	ldr	r3, [r7, #16]
 8105c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105c64:	2b00      	cmp	r3, #0
 8105c66:	d018      	beq.n	8105c9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105c68:	693b      	ldr	r3, [r7, #16]
 8105c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d109      	bne.n	8105c86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c76:	2b00      	cmp	r3, #0
 8105c78:	f000 813a 	beq.w	8105ef0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c80:	6878      	ldr	r0, [r7, #4]
 8105c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105c84:	e134      	b.n	8105ef0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8105c86:	687b      	ldr	r3, [r7, #4]
 8105c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c8a:	2b00      	cmp	r3, #0
 8105c8c:	f000 8130 	beq.w	8105ef0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c94:	6878      	ldr	r0, [r7, #4]
 8105c96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105c98:	e12a      	b.n	8105ef0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105c9a:	693b      	ldr	r3, [r7, #16]
 8105c9c:	f003 0320 	and.w	r3, r3, #32
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d168      	bne.n	8105d76 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	681b      	ldr	r3, [r3, #0]
 8105ca8:	4a38      	ldr	r2, [pc, #224]	; (8105d8c <HAL_DMA_IRQHandler+0xca8>)
 8105caa:	4293      	cmp	r3, r2
 8105cac:	d04a      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	681b      	ldr	r3, [r3, #0]
 8105cb2:	4a37      	ldr	r2, [pc, #220]	; (8105d90 <HAL_DMA_IRQHandler+0xcac>)
 8105cb4:	4293      	cmp	r3, r2
 8105cb6:	d045      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cb8:	687b      	ldr	r3, [r7, #4]
 8105cba:	681b      	ldr	r3, [r3, #0]
 8105cbc:	4a35      	ldr	r2, [pc, #212]	; (8105d94 <HAL_DMA_IRQHandler+0xcb0>)
 8105cbe:	4293      	cmp	r3, r2
 8105cc0:	d040      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	4a34      	ldr	r2, [pc, #208]	; (8105d98 <HAL_DMA_IRQHandler+0xcb4>)
 8105cc8:	4293      	cmp	r3, r2
 8105cca:	d03b      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	681b      	ldr	r3, [r3, #0]
 8105cd0:	4a32      	ldr	r2, [pc, #200]	; (8105d9c <HAL_DMA_IRQHandler+0xcb8>)
 8105cd2:	4293      	cmp	r3, r2
 8105cd4:	d036      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cd6:	687b      	ldr	r3, [r7, #4]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	4a31      	ldr	r2, [pc, #196]	; (8105da0 <HAL_DMA_IRQHandler+0xcbc>)
 8105cdc:	4293      	cmp	r3, r2
 8105cde:	d031      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	681b      	ldr	r3, [r3, #0]
 8105ce4:	4a2f      	ldr	r2, [pc, #188]	; (8105da4 <HAL_DMA_IRQHandler+0xcc0>)
 8105ce6:	4293      	cmp	r3, r2
 8105ce8:	d02c      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	4a2e      	ldr	r2, [pc, #184]	; (8105da8 <HAL_DMA_IRQHandler+0xcc4>)
 8105cf0:	4293      	cmp	r3, r2
 8105cf2:	d027      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	4a2c      	ldr	r2, [pc, #176]	; (8105dac <HAL_DMA_IRQHandler+0xcc8>)
 8105cfa:	4293      	cmp	r3, r2
 8105cfc:	d022      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	681b      	ldr	r3, [r3, #0]
 8105d02:	4a2b      	ldr	r2, [pc, #172]	; (8105db0 <HAL_DMA_IRQHandler+0xccc>)
 8105d04:	4293      	cmp	r3, r2
 8105d06:	d01d      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105d08:	687b      	ldr	r3, [r7, #4]
 8105d0a:	681b      	ldr	r3, [r3, #0]
 8105d0c:	4a29      	ldr	r2, [pc, #164]	; (8105db4 <HAL_DMA_IRQHandler+0xcd0>)
 8105d0e:	4293      	cmp	r3, r2
 8105d10:	d018      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	681b      	ldr	r3, [r3, #0]
 8105d16:	4a28      	ldr	r2, [pc, #160]	; (8105db8 <HAL_DMA_IRQHandler+0xcd4>)
 8105d18:	4293      	cmp	r3, r2
 8105d1a:	d013      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	4a26      	ldr	r2, [pc, #152]	; (8105dbc <HAL_DMA_IRQHandler+0xcd8>)
 8105d22:	4293      	cmp	r3, r2
 8105d24:	d00e      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105d26:	687b      	ldr	r3, [r7, #4]
 8105d28:	681b      	ldr	r3, [r3, #0]
 8105d2a:	4a25      	ldr	r2, [pc, #148]	; (8105dc0 <HAL_DMA_IRQHandler+0xcdc>)
 8105d2c:	4293      	cmp	r3, r2
 8105d2e:	d009      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	4a23      	ldr	r2, [pc, #140]	; (8105dc4 <HAL_DMA_IRQHandler+0xce0>)
 8105d36:	4293      	cmp	r3, r2
 8105d38:	d004      	beq.n	8105d44 <HAL_DMA_IRQHandler+0xc60>
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	4a22      	ldr	r2, [pc, #136]	; (8105dc8 <HAL_DMA_IRQHandler+0xce4>)
 8105d40:	4293      	cmp	r3, r2
 8105d42:	d108      	bne.n	8105d56 <HAL_DMA_IRQHandler+0xc72>
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	681a      	ldr	r2, [r3, #0]
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	f022 0214 	bic.w	r2, r2, #20
 8105d52:	601a      	str	r2, [r3, #0]
 8105d54:	e007      	b.n	8105d66 <HAL_DMA_IRQHandler+0xc82>
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	681a      	ldr	r2, [r3, #0]
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	f022 020a 	bic.w	r2, r2, #10
 8105d64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	2200      	movs	r2, #0
 8105d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105d6e:	687b      	ldr	r3, [r7, #4]
 8105d70:	2201      	movs	r2, #1
 8105d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d7a:	2b00      	cmp	r3, #0
 8105d7c:	f000 80b8 	beq.w	8105ef0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105d80:	687b      	ldr	r3, [r7, #4]
 8105d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d84:	6878      	ldr	r0, [r7, #4]
 8105d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105d88:	e0b2      	b.n	8105ef0 <HAL_DMA_IRQHandler+0xe0c>
 8105d8a:	bf00      	nop
 8105d8c:	40020010 	.word	0x40020010
 8105d90:	40020028 	.word	0x40020028
 8105d94:	40020040 	.word	0x40020040
 8105d98:	40020058 	.word	0x40020058
 8105d9c:	40020070 	.word	0x40020070
 8105da0:	40020088 	.word	0x40020088
 8105da4:	400200a0 	.word	0x400200a0
 8105da8:	400200b8 	.word	0x400200b8
 8105dac:	40020410 	.word	0x40020410
 8105db0:	40020428 	.word	0x40020428
 8105db4:	40020440 	.word	0x40020440
 8105db8:	40020458 	.word	0x40020458
 8105dbc:	40020470 	.word	0x40020470
 8105dc0:	40020488 	.word	0x40020488
 8105dc4:	400204a0 	.word	0x400204a0
 8105dc8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105dd0:	f003 031f 	and.w	r3, r3, #31
 8105dd4:	2208      	movs	r2, #8
 8105dd6:	409a      	lsls	r2, r3
 8105dd8:	697b      	ldr	r3, [r7, #20]
 8105dda:	4013      	ands	r3, r2
 8105ddc:	2b00      	cmp	r3, #0
 8105dde:	f000 8088 	beq.w	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
 8105de2:	693b      	ldr	r3, [r7, #16]
 8105de4:	f003 0308 	and.w	r3, r3, #8
 8105de8:	2b00      	cmp	r3, #0
 8105dea:	f000 8082 	beq.w	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8105dee:	687b      	ldr	r3, [r7, #4]
 8105df0:	681b      	ldr	r3, [r3, #0]
 8105df2:	4a41      	ldr	r2, [pc, #260]	; (8105ef8 <HAL_DMA_IRQHandler+0xe14>)
 8105df4:	4293      	cmp	r3, r2
 8105df6:	d04a      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105df8:	687b      	ldr	r3, [r7, #4]
 8105dfa:	681b      	ldr	r3, [r3, #0]
 8105dfc:	4a3f      	ldr	r2, [pc, #252]	; (8105efc <HAL_DMA_IRQHandler+0xe18>)
 8105dfe:	4293      	cmp	r3, r2
 8105e00:	d045      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	681b      	ldr	r3, [r3, #0]
 8105e06:	4a3e      	ldr	r2, [pc, #248]	; (8105f00 <HAL_DMA_IRQHandler+0xe1c>)
 8105e08:	4293      	cmp	r3, r2
 8105e0a:	d040      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	681b      	ldr	r3, [r3, #0]
 8105e10:	4a3c      	ldr	r2, [pc, #240]	; (8105f04 <HAL_DMA_IRQHandler+0xe20>)
 8105e12:	4293      	cmp	r3, r2
 8105e14:	d03b      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e16:	687b      	ldr	r3, [r7, #4]
 8105e18:	681b      	ldr	r3, [r3, #0]
 8105e1a:	4a3b      	ldr	r2, [pc, #236]	; (8105f08 <HAL_DMA_IRQHandler+0xe24>)
 8105e1c:	4293      	cmp	r3, r2
 8105e1e:	d036      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	4a39      	ldr	r2, [pc, #228]	; (8105f0c <HAL_DMA_IRQHandler+0xe28>)
 8105e26:	4293      	cmp	r3, r2
 8105e28:	d031      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	4a38      	ldr	r2, [pc, #224]	; (8105f10 <HAL_DMA_IRQHandler+0xe2c>)
 8105e30:	4293      	cmp	r3, r2
 8105e32:	d02c      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	681b      	ldr	r3, [r3, #0]
 8105e38:	4a36      	ldr	r2, [pc, #216]	; (8105f14 <HAL_DMA_IRQHandler+0xe30>)
 8105e3a:	4293      	cmp	r3, r2
 8105e3c:	d027      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	4a35      	ldr	r2, [pc, #212]	; (8105f18 <HAL_DMA_IRQHandler+0xe34>)
 8105e44:	4293      	cmp	r3, r2
 8105e46:	d022      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	4a33      	ldr	r2, [pc, #204]	; (8105f1c <HAL_DMA_IRQHandler+0xe38>)
 8105e4e:	4293      	cmp	r3, r2
 8105e50:	d01d      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e52:	687b      	ldr	r3, [r7, #4]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	4a32      	ldr	r2, [pc, #200]	; (8105f20 <HAL_DMA_IRQHandler+0xe3c>)
 8105e58:	4293      	cmp	r3, r2
 8105e5a:	d018      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	4a30      	ldr	r2, [pc, #192]	; (8105f24 <HAL_DMA_IRQHandler+0xe40>)
 8105e62:	4293      	cmp	r3, r2
 8105e64:	d013      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	4a2f      	ldr	r2, [pc, #188]	; (8105f28 <HAL_DMA_IRQHandler+0xe44>)
 8105e6c:	4293      	cmp	r3, r2
 8105e6e:	d00e      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	4a2d      	ldr	r2, [pc, #180]	; (8105f2c <HAL_DMA_IRQHandler+0xe48>)
 8105e76:	4293      	cmp	r3, r2
 8105e78:	d009      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	4a2c      	ldr	r2, [pc, #176]	; (8105f30 <HAL_DMA_IRQHandler+0xe4c>)
 8105e80:	4293      	cmp	r3, r2
 8105e82:	d004      	beq.n	8105e8e <HAL_DMA_IRQHandler+0xdaa>
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	4a2a      	ldr	r2, [pc, #168]	; (8105f34 <HAL_DMA_IRQHandler+0xe50>)
 8105e8a:	4293      	cmp	r3, r2
 8105e8c:	d108      	bne.n	8105ea0 <HAL_DMA_IRQHandler+0xdbc>
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	681a      	ldr	r2, [r3, #0]
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	681b      	ldr	r3, [r3, #0]
 8105e98:	f022 021c 	bic.w	r2, r2, #28
 8105e9c:	601a      	str	r2, [r3, #0]
 8105e9e:	e007      	b.n	8105eb0 <HAL_DMA_IRQHandler+0xdcc>
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	681b      	ldr	r3, [r3, #0]
 8105ea4:	681a      	ldr	r2, [r3, #0]
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	f022 020e 	bic.w	r2, r2, #14
 8105eae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105eb4:	f003 031f 	and.w	r3, r3, #31
 8105eb8:	2201      	movs	r2, #1
 8105eba:	409a      	lsls	r2, r3
 8105ebc:	69fb      	ldr	r3, [r7, #28]
 8105ebe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	2201      	movs	r2, #1
 8105ec4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	2200      	movs	r2, #0
 8105eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	2201      	movs	r2, #1
 8105ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105eda:	2b00      	cmp	r3, #0
 8105edc:	d009      	beq.n	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ee2:	6878      	ldr	r0, [r7, #4]
 8105ee4:	4798      	blx	r3
 8105ee6:	e004      	b.n	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105ee8:	bf00      	nop
 8105eea:	e002      	b.n	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105eec:	bf00      	nop
 8105eee:	e000      	b.n	8105ef2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105ef0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105ef2:	3728      	adds	r7, #40	; 0x28
 8105ef4:	46bd      	mov	sp, r7
 8105ef6:	bd80      	pop	{r7, pc}
 8105ef8:	40020010 	.word	0x40020010
 8105efc:	40020028 	.word	0x40020028
 8105f00:	40020040 	.word	0x40020040
 8105f04:	40020058 	.word	0x40020058
 8105f08:	40020070 	.word	0x40020070
 8105f0c:	40020088 	.word	0x40020088
 8105f10:	400200a0 	.word	0x400200a0
 8105f14:	400200b8 	.word	0x400200b8
 8105f18:	40020410 	.word	0x40020410
 8105f1c:	40020428 	.word	0x40020428
 8105f20:	40020440 	.word	0x40020440
 8105f24:	40020458 	.word	0x40020458
 8105f28:	40020470 	.word	0x40020470
 8105f2c:	40020488 	.word	0x40020488
 8105f30:	400204a0 	.word	0x400204a0
 8105f34:	400204b8 	.word	0x400204b8

08105f38 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8105f38:	b480      	push	{r7}
 8105f3a:	b083      	sub	sp, #12
 8105f3c:	af00      	add	r7, sp, #0
 8105f3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105f46:	b2db      	uxtb	r3, r3
}
 8105f48:	4618      	mov	r0, r3
 8105f4a:	370c      	adds	r7, #12
 8105f4c:	46bd      	mov	sp, r7
 8105f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f52:	4770      	bx	lr

08105f54 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8105f54:	b480      	push	{r7}
 8105f56:	b083      	sub	sp, #12
 8105f58:	af00      	add	r7, sp, #0
 8105f5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8105f60:	4618      	mov	r0, r3
 8105f62:	370c      	adds	r7, #12
 8105f64:	46bd      	mov	sp, r7
 8105f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f6a:	4770      	bx	lr

08105f6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105f6c:	b480      	push	{r7}
 8105f6e:	b087      	sub	sp, #28
 8105f70:	af00      	add	r7, sp, #0
 8105f72:	60f8      	str	r0, [r7, #12]
 8105f74:	60b9      	str	r1, [r7, #8]
 8105f76:	607a      	str	r2, [r7, #4]
 8105f78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105f7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105f80:	68fb      	ldr	r3, [r7, #12]
 8105f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105f84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105f86:	68fb      	ldr	r3, [r7, #12]
 8105f88:	681b      	ldr	r3, [r3, #0]
 8105f8a:	4a84      	ldr	r2, [pc, #528]	; (810619c <DMA_SetConfig+0x230>)
 8105f8c:	4293      	cmp	r3, r2
 8105f8e:	d072      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	4a82      	ldr	r2, [pc, #520]	; (81061a0 <DMA_SetConfig+0x234>)
 8105f96:	4293      	cmp	r3, r2
 8105f98:	d06d      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105f9a:	68fb      	ldr	r3, [r7, #12]
 8105f9c:	681b      	ldr	r3, [r3, #0]
 8105f9e:	4a81      	ldr	r2, [pc, #516]	; (81061a4 <DMA_SetConfig+0x238>)
 8105fa0:	4293      	cmp	r3, r2
 8105fa2:	d068      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	4a7f      	ldr	r2, [pc, #508]	; (81061a8 <DMA_SetConfig+0x23c>)
 8105faa:	4293      	cmp	r3, r2
 8105fac:	d063      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fae:	68fb      	ldr	r3, [r7, #12]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	4a7e      	ldr	r2, [pc, #504]	; (81061ac <DMA_SetConfig+0x240>)
 8105fb4:	4293      	cmp	r3, r2
 8105fb6:	d05e      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fb8:	68fb      	ldr	r3, [r7, #12]
 8105fba:	681b      	ldr	r3, [r3, #0]
 8105fbc:	4a7c      	ldr	r2, [pc, #496]	; (81061b0 <DMA_SetConfig+0x244>)
 8105fbe:	4293      	cmp	r3, r2
 8105fc0:	d059      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fc2:	68fb      	ldr	r3, [r7, #12]
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	4a7b      	ldr	r2, [pc, #492]	; (81061b4 <DMA_SetConfig+0x248>)
 8105fc8:	4293      	cmp	r3, r2
 8105fca:	d054      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fcc:	68fb      	ldr	r3, [r7, #12]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	4a79      	ldr	r2, [pc, #484]	; (81061b8 <DMA_SetConfig+0x24c>)
 8105fd2:	4293      	cmp	r3, r2
 8105fd4:	d04f      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fd6:	68fb      	ldr	r3, [r7, #12]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	4a78      	ldr	r2, [pc, #480]	; (81061bc <DMA_SetConfig+0x250>)
 8105fdc:	4293      	cmp	r3, r2
 8105fde:	d04a      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fe0:	68fb      	ldr	r3, [r7, #12]
 8105fe2:	681b      	ldr	r3, [r3, #0]
 8105fe4:	4a76      	ldr	r2, [pc, #472]	; (81061c0 <DMA_SetConfig+0x254>)
 8105fe6:	4293      	cmp	r3, r2
 8105fe8:	d045      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105fea:	68fb      	ldr	r3, [r7, #12]
 8105fec:	681b      	ldr	r3, [r3, #0]
 8105fee:	4a75      	ldr	r2, [pc, #468]	; (81061c4 <DMA_SetConfig+0x258>)
 8105ff0:	4293      	cmp	r3, r2
 8105ff2:	d040      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105ff4:	68fb      	ldr	r3, [r7, #12]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	4a73      	ldr	r2, [pc, #460]	; (81061c8 <DMA_SetConfig+0x25c>)
 8105ffa:	4293      	cmp	r3, r2
 8105ffc:	d03b      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8105ffe:	68fb      	ldr	r3, [r7, #12]
 8106000:	681b      	ldr	r3, [r3, #0]
 8106002:	4a72      	ldr	r2, [pc, #456]	; (81061cc <DMA_SetConfig+0x260>)
 8106004:	4293      	cmp	r3, r2
 8106006:	d036      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106008:	68fb      	ldr	r3, [r7, #12]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	4a70      	ldr	r2, [pc, #448]	; (81061d0 <DMA_SetConfig+0x264>)
 810600e:	4293      	cmp	r3, r2
 8106010:	d031      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106012:	68fb      	ldr	r3, [r7, #12]
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	4a6f      	ldr	r2, [pc, #444]	; (81061d4 <DMA_SetConfig+0x268>)
 8106018:	4293      	cmp	r3, r2
 810601a:	d02c      	beq.n	8106076 <DMA_SetConfig+0x10a>
 810601c:	68fb      	ldr	r3, [r7, #12]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	4a6d      	ldr	r2, [pc, #436]	; (81061d8 <DMA_SetConfig+0x26c>)
 8106022:	4293      	cmp	r3, r2
 8106024:	d027      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106026:	68fb      	ldr	r3, [r7, #12]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	4a6c      	ldr	r2, [pc, #432]	; (81061dc <DMA_SetConfig+0x270>)
 810602c:	4293      	cmp	r3, r2
 810602e:	d022      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106030:	68fb      	ldr	r3, [r7, #12]
 8106032:	681b      	ldr	r3, [r3, #0]
 8106034:	4a6a      	ldr	r2, [pc, #424]	; (81061e0 <DMA_SetConfig+0x274>)
 8106036:	4293      	cmp	r3, r2
 8106038:	d01d      	beq.n	8106076 <DMA_SetConfig+0x10a>
 810603a:	68fb      	ldr	r3, [r7, #12]
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	4a69      	ldr	r2, [pc, #420]	; (81061e4 <DMA_SetConfig+0x278>)
 8106040:	4293      	cmp	r3, r2
 8106042:	d018      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106044:	68fb      	ldr	r3, [r7, #12]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	4a67      	ldr	r2, [pc, #412]	; (81061e8 <DMA_SetConfig+0x27c>)
 810604a:	4293      	cmp	r3, r2
 810604c:	d013      	beq.n	8106076 <DMA_SetConfig+0x10a>
 810604e:	68fb      	ldr	r3, [r7, #12]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	4a66      	ldr	r2, [pc, #408]	; (81061ec <DMA_SetConfig+0x280>)
 8106054:	4293      	cmp	r3, r2
 8106056:	d00e      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106058:	68fb      	ldr	r3, [r7, #12]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	4a64      	ldr	r2, [pc, #400]	; (81061f0 <DMA_SetConfig+0x284>)
 810605e:	4293      	cmp	r3, r2
 8106060:	d009      	beq.n	8106076 <DMA_SetConfig+0x10a>
 8106062:	68fb      	ldr	r3, [r7, #12]
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	4a63      	ldr	r2, [pc, #396]	; (81061f4 <DMA_SetConfig+0x288>)
 8106068:	4293      	cmp	r3, r2
 810606a:	d004      	beq.n	8106076 <DMA_SetConfig+0x10a>
 810606c:	68fb      	ldr	r3, [r7, #12]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	4a61      	ldr	r2, [pc, #388]	; (81061f8 <DMA_SetConfig+0x28c>)
 8106072:	4293      	cmp	r3, r2
 8106074:	d101      	bne.n	810607a <DMA_SetConfig+0x10e>
 8106076:	2301      	movs	r3, #1
 8106078:	e000      	b.n	810607c <DMA_SetConfig+0x110>
 810607a:	2300      	movs	r3, #0
 810607c:	2b00      	cmp	r3, #0
 810607e:	d00d      	beq.n	810609c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106080:	68fb      	ldr	r3, [r7, #12]
 8106082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106084:	68fa      	ldr	r2, [r7, #12]
 8106086:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8106088:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810608a:	68fb      	ldr	r3, [r7, #12]
 810608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810608e:	2b00      	cmp	r3, #0
 8106090:	d004      	beq.n	810609c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106092:	68fb      	ldr	r3, [r7, #12]
 8106094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106096:	68fa      	ldr	r2, [r7, #12]
 8106098:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810609a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810609c:	68fb      	ldr	r3, [r7, #12]
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	4a3e      	ldr	r2, [pc, #248]	; (810619c <DMA_SetConfig+0x230>)
 81060a2:	4293      	cmp	r3, r2
 81060a4:	d04a      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060a6:	68fb      	ldr	r3, [r7, #12]
 81060a8:	681b      	ldr	r3, [r3, #0]
 81060aa:	4a3d      	ldr	r2, [pc, #244]	; (81061a0 <DMA_SetConfig+0x234>)
 81060ac:	4293      	cmp	r3, r2
 81060ae:	d045      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060b0:	68fb      	ldr	r3, [r7, #12]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	4a3b      	ldr	r2, [pc, #236]	; (81061a4 <DMA_SetConfig+0x238>)
 81060b6:	4293      	cmp	r3, r2
 81060b8:	d040      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060ba:	68fb      	ldr	r3, [r7, #12]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	4a3a      	ldr	r2, [pc, #232]	; (81061a8 <DMA_SetConfig+0x23c>)
 81060c0:	4293      	cmp	r3, r2
 81060c2:	d03b      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060c4:	68fb      	ldr	r3, [r7, #12]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	4a38      	ldr	r2, [pc, #224]	; (81061ac <DMA_SetConfig+0x240>)
 81060ca:	4293      	cmp	r3, r2
 81060cc:	d036      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060ce:	68fb      	ldr	r3, [r7, #12]
 81060d0:	681b      	ldr	r3, [r3, #0]
 81060d2:	4a37      	ldr	r2, [pc, #220]	; (81061b0 <DMA_SetConfig+0x244>)
 81060d4:	4293      	cmp	r3, r2
 81060d6:	d031      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060d8:	68fb      	ldr	r3, [r7, #12]
 81060da:	681b      	ldr	r3, [r3, #0]
 81060dc:	4a35      	ldr	r2, [pc, #212]	; (81061b4 <DMA_SetConfig+0x248>)
 81060de:	4293      	cmp	r3, r2
 81060e0:	d02c      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060e2:	68fb      	ldr	r3, [r7, #12]
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	4a34      	ldr	r2, [pc, #208]	; (81061b8 <DMA_SetConfig+0x24c>)
 81060e8:	4293      	cmp	r3, r2
 81060ea:	d027      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060ec:	68fb      	ldr	r3, [r7, #12]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	4a32      	ldr	r2, [pc, #200]	; (81061bc <DMA_SetConfig+0x250>)
 81060f2:	4293      	cmp	r3, r2
 81060f4:	d022      	beq.n	810613c <DMA_SetConfig+0x1d0>
 81060f6:	68fb      	ldr	r3, [r7, #12]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	4a31      	ldr	r2, [pc, #196]	; (81061c0 <DMA_SetConfig+0x254>)
 81060fc:	4293      	cmp	r3, r2
 81060fe:	d01d      	beq.n	810613c <DMA_SetConfig+0x1d0>
 8106100:	68fb      	ldr	r3, [r7, #12]
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	4a2f      	ldr	r2, [pc, #188]	; (81061c4 <DMA_SetConfig+0x258>)
 8106106:	4293      	cmp	r3, r2
 8106108:	d018      	beq.n	810613c <DMA_SetConfig+0x1d0>
 810610a:	68fb      	ldr	r3, [r7, #12]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	4a2e      	ldr	r2, [pc, #184]	; (81061c8 <DMA_SetConfig+0x25c>)
 8106110:	4293      	cmp	r3, r2
 8106112:	d013      	beq.n	810613c <DMA_SetConfig+0x1d0>
 8106114:	68fb      	ldr	r3, [r7, #12]
 8106116:	681b      	ldr	r3, [r3, #0]
 8106118:	4a2c      	ldr	r2, [pc, #176]	; (81061cc <DMA_SetConfig+0x260>)
 810611a:	4293      	cmp	r3, r2
 810611c:	d00e      	beq.n	810613c <DMA_SetConfig+0x1d0>
 810611e:	68fb      	ldr	r3, [r7, #12]
 8106120:	681b      	ldr	r3, [r3, #0]
 8106122:	4a2b      	ldr	r2, [pc, #172]	; (81061d0 <DMA_SetConfig+0x264>)
 8106124:	4293      	cmp	r3, r2
 8106126:	d009      	beq.n	810613c <DMA_SetConfig+0x1d0>
 8106128:	68fb      	ldr	r3, [r7, #12]
 810612a:	681b      	ldr	r3, [r3, #0]
 810612c:	4a29      	ldr	r2, [pc, #164]	; (81061d4 <DMA_SetConfig+0x268>)
 810612e:	4293      	cmp	r3, r2
 8106130:	d004      	beq.n	810613c <DMA_SetConfig+0x1d0>
 8106132:	68fb      	ldr	r3, [r7, #12]
 8106134:	681b      	ldr	r3, [r3, #0]
 8106136:	4a28      	ldr	r2, [pc, #160]	; (81061d8 <DMA_SetConfig+0x26c>)
 8106138:	4293      	cmp	r3, r2
 810613a:	d101      	bne.n	8106140 <DMA_SetConfig+0x1d4>
 810613c:	2301      	movs	r3, #1
 810613e:	e000      	b.n	8106142 <DMA_SetConfig+0x1d6>
 8106140:	2300      	movs	r3, #0
 8106142:	2b00      	cmp	r3, #0
 8106144:	d05a      	beq.n	81061fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8106146:	68fb      	ldr	r3, [r7, #12]
 8106148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810614a:	f003 031f 	and.w	r3, r3, #31
 810614e:	223f      	movs	r2, #63	; 0x3f
 8106150:	409a      	lsls	r2, r3
 8106152:	697b      	ldr	r3, [r7, #20]
 8106154:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8106156:	68fb      	ldr	r3, [r7, #12]
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	681a      	ldr	r2, [r3, #0]
 810615c:	68fb      	ldr	r3, [r7, #12]
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8106164:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8106166:	68fb      	ldr	r3, [r7, #12]
 8106168:	681b      	ldr	r3, [r3, #0]
 810616a:	683a      	ldr	r2, [r7, #0]
 810616c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810616e:	68fb      	ldr	r3, [r7, #12]
 8106170:	689b      	ldr	r3, [r3, #8]
 8106172:	2b40      	cmp	r3, #64	; 0x40
 8106174:	d108      	bne.n	8106188 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8106176:	68fb      	ldr	r3, [r7, #12]
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	687a      	ldr	r2, [r7, #4]
 810617c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810617e:	68fb      	ldr	r3, [r7, #12]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	68ba      	ldr	r2, [r7, #8]
 8106184:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106186:	e087      	b.n	8106298 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8106188:	68fb      	ldr	r3, [r7, #12]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	68ba      	ldr	r2, [r7, #8]
 810618e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8106190:	68fb      	ldr	r3, [r7, #12]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	687a      	ldr	r2, [r7, #4]
 8106196:	60da      	str	r2, [r3, #12]
}
 8106198:	e07e      	b.n	8106298 <DMA_SetConfig+0x32c>
 810619a:	bf00      	nop
 810619c:	40020010 	.word	0x40020010
 81061a0:	40020028 	.word	0x40020028
 81061a4:	40020040 	.word	0x40020040
 81061a8:	40020058 	.word	0x40020058
 81061ac:	40020070 	.word	0x40020070
 81061b0:	40020088 	.word	0x40020088
 81061b4:	400200a0 	.word	0x400200a0
 81061b8:	400200b8 	.word	0x400200b8
 81061bc:	40020410 	.word	0x40020410
 81061c0:	40020428 	.word	0x40020428
 81061c4:	40020440 	.word	0x40020440
 81061c8:	40020458 	.word	0x40020458
 81061cc:	40020470 	.word	0x40020470
 81061d0:	40020488 	.word	0x40020488
 81061d4:	400204a0 	.word	0x400204a0
 81061d8:	400204b8 	.word	0x400204b8
 81061dc:	58025408 	.word	0x58025408
 81061e0:	5802541c 	.word	0x5802541c
 81061e4:	58025430 	.word	0x58025430
 81061e8:	58025444 	.word	0x58025444
 81061ec:	58025458 	.word	0x58025458
 81061f0:	5802546c 	.word	0x5802546c
 81061f4:	58025480 	.word	0x58025480
 81061f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81061fc:	68fb      	ldr	r3, [r7, #12]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	4a28      	ldr	r2, [pc, #160]	; (81062a4 <DMA_SetConfig+0x338>)
 8106202:	4293      	cmp	r3, r2
 8106204:	d022      	beq.n	810624c <DMA_SetConfig+0x2e0>
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	4a27      	ldr	r2, [pc, #156]	; (81062a8 <DMA_SetConfig+0x33c>)
 810620c:	4293      	cmp	r3, r2
 810620e:	d01d      	beq.n	810624c <DMA_SetConfig+0x2e0>
 8106210:	68fb      	ldr	r3, [r7, #12]
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	4a25      	ldr	r2, [pc, #148]	; (81062ac <DMA_SetConfig+0x340>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d018      	beq.n	810624c <DMA_SetConfig+0x2e0>
 810621a:	68fb      	ldr	r3, [r7, #12]
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	4a24      	ldr	r2, [pc, #144]	; (81062b0 <DMA_SetConfig+0x344>)
 8106220:	4293      	cmp	r3, r2
 8106222:	d013      	beq.n	810624c <DMA_SetConfig+0x2e0>
 8106224:	68fb      	ldr	r3, [r7, #12]
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	4a22      	ldr	r2, [pc, #136]	; (81062b4 <DMA_SetConfig+0x348>)
 810622a:	4293      	cmp	r3, r2
 810622c:	d00e      	beq.n	810624c <DMA_SetConfig+0x2e0>
 810622e:	68fb      	ldr	r3, [r7, #12]
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	4a21      	ldr	r2, [pc, #132]	; (81062b8 <DMA_SetConfig+0x34c>)
 8106234:	4293      	cmp	r3, r2
 8106236:	d009      	beq.n	810624c <DMA_SetConfig+0x2e0>
 8106238:	68fb      	ldr	r3, [r7, #12]
 810623a:	681b      	ldr	r3, [r3, #0]
 810623c:	4a1f      	ldr	r2, [pc, #124]	; (81062bc <DMA_SetConfig+0x350>)
 810623e:	4293      	cmp	r3, r2
 8106240:	d004      	beq.n	810624c <DMA_SetConfig+0x2e0>
 8106242:	68fb      	ldr	r3, [r7, #12]
 8106244:	681b      	ldr	r3, [r3, #0]
 8106246:	4a1e      	ldr	r2, [pc, #120]	; (81062c0 <DMA_SetConfig+0x354>)
 8106248:	4293      	cmp	r3, r2
 810624a:	d101      	bne.n	8106250 <DMA_SetConfig+0x2e4>
 810624c:	2301      	movs	r3, #1
 810624e:	e000      	b.n	8106252 <DMA_SetConfig+0x2e6>
 8106250:	2300      	movs	r3, #0
 8106252:	2b00      	cmp	r3, #0
 8106254:	d020      	beq.n	8106298 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106256:	68fb      	ldr	r3, [r7, #12]
 8106258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810625a:	f003 031f 	and.w	r3, r3, #31
 810625e:	2201      	movs	r2, #1
 8106260:	409a      	lsls	r2, r3
 8106262:	693b      	ldr	r3, [r7, #16]
 8106264:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8106266:	68fb      	ldr	r3, [r7, #12]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	683a      	ldr	r2, [r7, #0]
 810626c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810626e:	68fb      	ldr	r3, [r7, #12]
 8106270:	689b      	ldr	r3, [r3, #8]
 8106272:	2b40      	cmp	r3, #64	; 0x40
 8106274:	d108      	bne.n	8106288 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8106276:	68fb      	ldr	r3, [r7, #12]
 8106278:	681b      	ldr	r3, [r3, #0]
 810627a:	687a      	ldr	r2, [r7, #4]
 810627c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810627e:	68fb      	ldr	r3, [r7, #12]
 8106280:	681b      	ldr	r3, [r3, #0]
 8106282:	68ba      	ldr	r2, [r7, #8]
 8106284:	60da      	str	r2, [r3, #12]
}
 8106286:	e007      	b.n	8106298 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8106288:	68fb      	ldr	r3, [r7, #12]
 810628a:	681b      	ldr	r3, [r3, #0]
 810628c:	68ba      	ldr	r2, [r7, #8]
 810628e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8106290:	68fb      	ldr	r3, [r7, #12]
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	687a      	ldr	r2, [r7, #4]
 8106296:	60da      	str	r2, [r3, #12]
}
 8106298:	bf00      	nop
 810629a:	371c      	adds	r7, #28
 810629c:	46bd      	mov	sp, r7
 810629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062a2:	4770      	bx	lr
 81062a4:	58025408 	.word	0x58025408
 81062a8:	5802541c 	.word	0x5802541c
 81062ac:	58025430 	.word	0x58025430
 81062b0:	58025444 	.word	0x58025444
 81062b4:	58025458 	.word	0x58025458
 81062b8:	5802546c 	.word	0x5802546c
 81062bc:	58025480 	.word	0x58025480
 81062c0:	58025494 	.word	0x58025494

081062c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81062c4:	b480      	push	{r7}
 81062c6:	b085      	sub	sp, #20
 81062c8:	af00      	add	r7, sp, #0
 81062ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	681b      	ldr	r3, [r3, #0]
 81062d0:	4a43      	ldr	r2, [pc, #268]	; (81063e0 <DMA_CalcBaseAndBitshift+0x11c>)
 81062d2:	4293      	cmp	r3, r2
 81062d4:	d04a      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 81062d6:	687b      	ldr	r3, [r7, #4]
 81062d8:	681b      	ldr	r3, [r3, #0]
 81062da:	4a42      	ldr	r2, [pc, #264]	; (81063e4 <DMA_CalcBaseAndBitshift+0x120>)
 81062dc:	4293      	cmp	r3, r2
 81062de:	d045      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	4a40      	ldr	r2, [pc, #256]	; (81063e8 <DMA_CalcBaseAndBitshift+0x124>)
 81062e6:	4293      	cmp	r3, r2
 81062e8:	d040      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	681b      	ldr	r3, [r3, #0]
 81062ee:	4a3f      	ldr	r2, [pc, #252]	; (81063ec <DMA_CalcBaseAndBitshift+0x128>)
 81062f0:	4293      	cmp	r3, r2
 81062f2:	d03b      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	681b      	ldr	r3, [r3, #0]
 81062f8:	4a3d      	ldr	r2, [pc, #244]	; (81063f0 <DMA_CalcBaseAndBitshift+0x12c>)
 81062fa:	4293      	cmp	r3, r2
 81062fc:	d036      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	4a3c      	ldr	r2, [pc, #240]	; (81063f4 <DMA_CalcBaseAndBitshift+0x130>)
 8106304:	4293      	cmp	r3, r2
 8106306:	d031      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	4a3a      	ldr	r2, [pc, #232]	; (81063f8 <DMA_CalcBaseAndBitshift+0x134>)
 810630e:	4293      	cmp	r3, r2
 8106310:	d02c      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	681b      	ldr	r3, [r3, #0]
 8106316:	4a39      	ldr	r2, [pc, #228]	; (81063fc <DMA_CalcBaseAndBitshift+0x138>)
 8106318:	4293      	cmp	r3, r2
 810631a:	d027      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	4a37      	ldr	r2, [pc, #220]	; (8106400 <DMA_CalcBaseAndBitshift+0x13c>)
 8106322:	4293      	cmp	r3, r2
 8106324:	d022      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106326:	687b      	ldr	r3, [r7, #4]
 8106328:	681b      	ldr	r3, [r3, #0]
 810632a:	4a36      	ldr	r2, [pc, #216]	; (8106404 <DMA_CalcBaseAndBitshift+0x140>)
 810632c:	4293      	cmp	r3, r2
 810632e:	d01d      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	4a34      	ldr	r2, [pc, #208]	; (8106408 <DMA_CalcBaseAndBitshift+0x144>)
 8106336:	4293      	cmp	r3, r2
 8106338:	d018      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	4a33      	ldr	r2, [pc, #204]	; (810640c <DMA_CalcBaseAndBitshift+0x148>)
 8106340:	4293      	cmp	r3, r2
 8106342:	d013      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106344:	687b      	ldr	r3, [r7, #4]
 8106346:	681b      	ldr	r3, [r3, #0]
 8106348:	4a31      	ldr	r2, [pc, #196]	; (8106410 <DMA_CalcBaseAndBitshift+0x14c>)
 810634a:	4293      	cmp	r3, r2
 810634c:	d00e      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	4a30      	ldr	r2, [pc, #192]	; (8106414 <DMA_CalcBaseAndBitshift+0x150>)
 8106354:	4293      	cmp	r3, r2
 8106356:	d009      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	4a2e      	ldr	r2, [pc, #184]	; (8106418 <DMA_CalcBaseAndBitshift+0x154>)
 810635e:	4293      	cmp	r3, r2
 8106360:	d004      	beq.n	810636c <DMA_CalcBaseAndBitshift+0xa8>
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	4a2d      	ldr	r2, [pc, #180]	; (810641c <DMA_CalcBaseAndBitshift+0x158>)
 8106368:	4293      	cmp	r3, r2
 810636a:	d101      	bne.n	8106370 <DMA_CalcBaseAndBitshift+0xac>
 810636c:	2301      	movs	r3, #1
 810636e:	e000      	b.n	8106372 <DMA_CalcBaseAndBitshift+0xae>
 8106370:	2300      	movs	r3, #0
 8106372:	2b00      	cmp	r3, #0
 8106374:	d026      	beq.n	81063c4 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	b2db      	uxtb	r3, r3
 810637c:	3b10      	subs	r3, #16
 810637e:	4a28      	ldr	r2, [pc, #160]	; (8106420 <DMA_CalcBaseAndBitshift+0x15c>)
 8106380:	fba2 2303 	umull	r2, r3, r2, r3
 8106384:	091b      	lsrs	r3, r3, #4
 8106386:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106388:	68fb      	ldr	r3, [r7, #12]
 810638a:	f003 0307 	and.w	r3, r3, #7
 810638e:	4a25      	ldr	r2, [pc, #148]	; (8106424 <DMA_CalcBaseAndBitshift+0x160>)
 8106390:	5cd3      	ldrb	r3, [r2, r3]
 8106392:	461a      	mov	r2, r3
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106398:	68fb      	ldr	r3, [r7, #12]
 810639a:	2b03      	cmp	r3, #3
 810639c:	d909      	bls.n	81063b2 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810639e:	687b      	ldr	r3, [r7, #4]
 81063a0:	681b      	ldr	r3, [r3, #0]
 81063a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81063a6:	f023 0303 	bic.w	r3, r3, #3
 81063aa:	1d1a      	adds	r2, r3, #4
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	659a      	str	r2, [r3, #88]	; 0x58
 81063b0:	e00e      	b.n	81063d0 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	681b      	ldr	r3, [r3, #0]
 81063b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81063ba:	f023 0303 	bic.w	r3, r3, #3
 81063be:	687a      	ldr	r2, [r7, #4]
 81063c0:	6593      	str	r3, [r2, #88]	; 0x58
 81063c2:	e005      	b.n	81063d0 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	681b      	ldr	r3, [r3, #0]
 81063c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81063d4:	4618      	mov	r0, r3
 81063d6:	3714      	adds	r7, #20
 81063d8:	46bd      	mov	sp, r7
 81063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063de:	4770      	bx	lr
 81063e0:	40020010 	.word	0x40020010
 81063e4:	40020028 	.word	0x40020028
 81063e8:	40020040 	.word	0x40020040
 81063ec:	40020058 	.word	0x40020058
 81063f0:	40020070 	.word	0x40020070
 81063f4:	40020088 	.word	0x40020088
 81063f8:	400200a0 	.word	0x400200a0
 81063fc:	400200b8 	.word	0x400200b8
 8106400:	40020410 	.word	0x40020410
 8106404:	40020428 	.word	0x40020428
 8106408:	40020440 	.word	0x40020440
 810640c:	40020458 	.word	0x40020458
 8106410:	40020470 	.word	0x40020470
 8106414:	40020488 	.word	0x40020488
 8106418:	400204a0 	.word	0x400204a0
 810641c:	400204b8 	.word	0x400204b8
 8106420:	aaaaaaab 	.word	0xaaaaaaab
 8106424:	0810d6dc 	.word	0x0810d6dc

08106428 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106428:	b480      	push	{r7}
 810642a:	b085      	sub	sp, #20
 810642c:	af00      	add	r7, sp, #0
 810642e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106430:	2300      	movs	r3, #0
 8106432:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	699b      	ldr	r3, [r3, #24]
 8106438:	2b00      	cmp	r3, #0
 810643a:	d120      	bne.n	810647e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106440:	2b03      	cmp	r3, #3
 8106442:	d858      	bhi.n	81064f6 <DMA_CheckFifoParam+0xce>
 8106444:	a201      	add	r2, pc, #4	; (adr r2, 810644c <DMA_CheckFifoParam+0x24>)
 8106446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810644a:	bf00      	nop
 810644c:	0810645d 	.word	0x0810645d
 8106450:	0810646f 	.word	0x0810646f
 8106454:	0810645d 	.word	0x0810645d
 8106458:	081064f7 	.word	0x081064f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106464:	2b00      	cmp	r3, #0
 8106466:	d048      	beq.n	81064fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106468:	2301      	movs	r3, #1
 810646a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810646c:	e045      	b.n	81064fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106472:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106476:	d142      	bne.n	81064fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106478:	2301      	movs	r3, #1
 810647a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810647c:	e03f      	b.n	81064fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	699b      	ldr	r3, [r3, #24]
 8106482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106486:	d123      	bne.n	81064d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810648c:	2b03      	cmp	r3, #3
 810648e:	d838      	bhi.n	8106502 <DMA_CheckFifoParam+0xda>
 8106490:	a201      	add	r2, pc, #4	; (adr r2, 8106498 <DMA_CheckFifoParam+0x70>)
 8106492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106496:	bf00      	nop
 8106498:	081064a9 	.word	0x081064a9
 810649c:	081064af 	.word	0x081064af
 81064a0:	081064a9 	.word	0x081064a9
 81064a4:	081064c1 	.word	0x081064c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81064a8:	2301      	movs	r3, #1
 81064aa:	73fb      	strb	r3, [r7, #15]
        break;
 81064ac:	e030      	b.n	8106510 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81064b6:	2b00      	cmp	r3, #0
 81064b8:	d025      	beq.n	8106506 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81064ba:	2301      	movs	r3, #1
 81064bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81064be:	e022      	b.n	8106506 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81064c8:	d11f      	bne.n	810650a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81064ca:	2301      	movs	r3, #1
 81064cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81064ce:	e01c      	b.n	810650a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064d4:	2b02      	cmp	r3, #2
 81064d6:	d902      	bls.n	81064de <DMA_CheckFifoParam+0xb6>
 81064d8:	2b03      	cmp	r3, #3
 81064da:	d003      	beq.n	81064e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81064dc:	e018      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81064de:	2301      	movs	r3, #1
 81064e0:	73fb      	strb	r3, [r7, #15]
        break;
 81064e2:	e015      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81064ec:	2b00      	cmp	r3, #0
 81064ee:	d00e      	beq.n	810650e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81064f0:	2301      	movs	r3, #1
 81064f2:	73fb      	strb	r3, [r7, #15]
    break;
 81064f4:	e00b      	b.n	810650e <DMA_CheckFifoParam+0xe6>
        break;
 81064f6:	bf00      	nop
 81064f8:	e00a      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        break;
 81064fa:	bf00      	nop
 81064fc:	e008      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        break;
 81064fe:	bf00      	nop
 8106500:	e006      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        break;
 8106502:	bf00      	nop
 8106504:	e004      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        break;
 8106506:	bf00      	nop
 8106508:	e002      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
        break;
 810650a:	bf00      	nop
 810650c:	e000      	b.n	8106510 <DMA_CheckFifoParam+0xe8>
    break;
 810650e:	bf00      	nop
    }
  }

  return status;
 8106510:	7bfb      	ldrb	r3, [r7, #15]
}
 8106512:	4618      	mov	r0, r3
 8106514:	3714      	adds	r7, #20
 8106516:	46bd      	mov	sp, r7
 8106518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810651c:	4770      	bx	lr
 810651e:	bf00      	nop

08106520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106520:	b480      	push	{r7}
 8106522:	b085      	sub	sp, #20
 8106524:	af00      	add	r7, sp, #0
 8106526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	4a3a      	ldr	r2, [pc, #232]	; (810661c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106534:	4293      	cmp	r3, r2
 8106536:	d022      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	4a38      	ldr	r2, [pc, #224]	; (8106620 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 810653e:	4293      	cmp	r3, r2
 8106540:	d01d      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	681b      	ldr	r3, [r3, #0]
 8106546:	4a37      	ldr	r2, [pc, #220]	; (8106624 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106548:	4293      	cmp	r3, r2
 810654a:	d018      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	4a35      	ldr	r2, [pc, #212]	; (8106628 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106552:	4293      	cmp	r3, r2
 8106554:	d013      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	681b      	ldr	r3, [r3, #0]
 810655a:	4a34      	ldr	r2, [pc, #208]	; (810662c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 810655c:	4293      	cmp	r3, r2
 810655e:	d00e      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	681b      	ldr	r3, [r3, #0]
 8106564:	4a32      	ldr	r2, [pc, #200]	; (8106630 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106566:	4293      	cmp	r3, r2
 8106568:	d009      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	681b      	ldr	r3, [r3, #0]
 810656e:	4a31      	ldr	r2, [pc, #196]	; (8106634 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106570:	4293      	cmp	r3, r2
 8106572:	d004      	beq.n	810657e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	681b      	ldr	r3, [r3, #0]
 8106578:	4a2f      	ldr	r2, [pc, #188]	; (8106638 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810657a:	4293      	cmp	r3, r2
 810657c:	d101      	bne.n	8106582 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 810657e:	2301      	movs	r3, #1
 8106580:	e000      	b.n	8106584 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106582:	2300      	movs	r3, #0
 8106584:	2b00      	cmp	r3, #0
 8106586:	d01c      	beq.n	81065c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	681b      	ldr	r3, [r3, #0]
 810658c:	b2db      	uxtb	r3, r3
 810658e:	3b08      	subs	r3, #8
 8106590:	4a2a      	ldr	r2, [pc, #168]	; (810663c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106592:	fba2 2303 	umull	r2, r3, r2, r3
 8106596:	091b      	lsrs	r3, r3, #4
 8106598:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810659a:	68fb      	ldr	r3, [r7, #12]
 810659c:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81065a0:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81065a4:	009b      	lsls	r3, r3, #2
 81065a6:	461a      	mov	r2, r3
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	4a24      	ldr	r2, [pc, #144]	; (8106640 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81065b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	f003 031f 	and.w	r3, r3, #31
 81065b8:	2201      	movs	r2, #1
 81065ba:	409a      	lsls	r2, r3
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81065c0:	e026      	b.n	8106610 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	b2db      	uxtb	r3, r3
 81065c8:	3b10      	subs	r3, #16
 81065ca:	4a1e      	ldr	r2, [pc, #120]	; (8106644 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81065cc:	fba2 2303 	umull	r2, r3, r2, r3
 81065d0:	091b      	lsrs	r3, r3, #4
 81065d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81065d4:	68bb      	ldr	r3, [r7, #8]
 81065d6:	4a1c      	ldr	r2, [pc, #112]	; (8106648 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81065d8:	4293      	cmp	r3, r2
 81065da:	d806      	bhi.n	81065ea <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81065dc:	68bb      	ldr	r3, [r7, #8]
 81065de:	4a1b      	ldr	r2, [pc, #108]	; (810664c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81065e0:	4293      	cmp	r3, r2
 81065e2:	d902      	bls.n	81065ea <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81065e4:	68fb      	ldr	r3, [r7, #12]
 81065e6:	3308      	adds	r3, #8
 81065e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81065ea:	68fb      	ldr	r3, [r7, #12]
 81065ec:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81065f0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81065f4:	009b      	lsls	r3, r3, #2
 81065f6:	461a      	mov	r2, r3
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	4a14      	ldr	r2, [pc, #80]	; (8106650 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8106600:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8106602:	68fb      	ldr	r3, [r7, #12]
 8106604:	f003 031f 	and.w	r3, r3, #31
 8106608:	2201      	movs	r2, #1
 810660a:	409a      	lsls	r2, r3
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8106610:	bf00      	nop
 8106612:	3714      	adds	r7, #20
 8106614:	46bd      	mov	sp, r7
 8106616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810661a:	4770      	bx	lr
 810661c:	58025408 	.word	0x58025408
 8106620:	5802541c 	.word	0x5802541c
 8106624:	58025430 	.word	0x58025430
 8106628:	58025444 	.word	0x58025444
 810662c:	58025458 	.word	0x58025458
 8106630:	5802546c 	.word	0x5802546c
 8106634:	58025480 	.word	0x58025480
 8106638:	58025494 	.word	0x58025494
 810663c:	cccccccd 	.word	0xcccccccd
 8106640:	58025880 	.word	0x58025880
 8106644:	aaaaaaab 	.word	0xaaaaaaab
 8106648:	400204b8 	.word	0x400204b8
 810664c:	4002040f 	.word	0x4002040f
 8106650:	40020880 	.word	0x40020880

08106654 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106654:	b480      	push	{r7}
 8106656:	b085      	sub	sp, #20
 8106658:	af00      	add	r7, sp, #0
 810665a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	685b      	ldr	r3, [r3, #4]
 8106660:	b2db      	uxtb	r3, r3
 8106662:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8106664:	68fb      	ldr	r3, [r7, #12]
 8106666:	2b00      	cmp	r3, #0
 8106668:	d04a      	beq.n	8106700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810666a:	68fb      	ldr	r3, [r7, #12]
 810666c:	2b08      	cmp	r3, #8
 810666e:	d847      	bhi.n	8106700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	681b      	ldr	r3, [r3, #0]
 8106674:	4a25      	ldr	r2, [pc, #148]	; (810670c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8106676:	4293      	cmp	r3, r2
 8106678:	d022      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	681b      	ldr	r3, [r3, #0]
 810667e:	4a24      	ldr	r2, [pc, #144]	; (8106710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106680:	4293      	cmp	r3, r2
 8106682:	d01d      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	681b      	ldr	r3, [r3, #0]
 8106688:	4a22      	ldr	r2, [pc, #136]	; (8106714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810668a:	4293      	cmp	r3, r2
 810668c:	d018      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	681b      	ldr	r3, [r3, #0]
 8106692:	4a21      	ldr	r2, [pc, #132]	; (8106718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8106694:	4293      	cmp	r3, r2
 8106696:	d013      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	4a1f      	ldr	r2, [pc, #124]	; (810671c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810669e:	4293      	cmp	r3, r2
 81066a0:	d00e      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	4a1e      	ldr	r2, [pc, #120]	; (8106720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 81066a8:	4293      	cmp	r3, r2
 81066aa:	d009      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	681b      	ldr	r3, [r3, #0]
 81066b0:	4a1c      	ldr	r2, [pc, #112]	; (8106724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 81066b2:	4293      	cmp	r3, r2
 81066b4:	d004      	beq.n	81066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	4a1b      	ldr	r2, [pc, #108]	; (8106728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 81066bc:	4293      	cmp	r3, r2
 81066be:	d101      	bne.n	81066c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 81066c0:	2301      	movs	r3, #1
 81066c2:	e000      	b.n	81066c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 81066c4:	2300      	movs	r3, #0
 81066c6:	2b00      	cmp	r3, #0
 81066c8:	d00a      	beq.n	81066e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81066ca:	68fa      	ldr	r2, [r7, #12]
 81066cc:	4b17      	ldr	r3, [pc, #92]	; (810672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 81066ce:	4413      	add	r3, r2
 81066d0:	009b      	lsls	r3, r3, #2
 81066d2:	461a      	mov	r2, r3
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	4a15      	ldr	r2, [pc, #84]	; (8106730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81066dc:	671a      	str	r2, [r3, #112]	; 0x70
 81066de:	e009      	b.n	81066f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81066e0:	68fa      	ldr	r2, [r7, #12]
 81066e2:	4b14      	ldr	r3, [pc, #80]	; (8106734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81066e4:	4413      	add	r3, r2
 81066e6:	009b      	lsls	r3, r3, #2
 81066e8:	461a      	mov	r2, r3
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	4a11      	ldr	r2, [pc, #68]	; (8106738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81066f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81066f4:	68fb      	ldr	r3, [r7, #12]
 81066f6:	3b01      	subs	r3, #1
 81066f8:	2201      	movs	r2, #1
 81066fa:	409a      	lsls	r2, r3
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8106700:	bf00      	nop
 8106702:	3714      	adds	r7, #20
 8106704:	46bd      	mov	sp, r7
 8106706:	f85d 7b04 	ldr.w	r7, [sp], #4
 810670a:	4770      	bx	lr
 810670c:	58025408 	.word	0x58025408
 8106710:	5802541c 	.word	0x5802541c
 8106714:	58025430 	.word	0x58025430
 8106718:	58025444 	.word	0x58025444
 810671c:	58025458 	.word	0x58025458
 8106720:	5802546c 	.word	0x5802546c
 8106724:	58025480 	.word	0x58025480
 8106728:	58025494 	.word	0x58025494
 810672c:	1600963f 	.word	0x1600963f
 8106730:	58025940 	.word	0x58025940
 8106734:	1000823f 	.word	0x1000823f
 8106738:	40020940 	.word	0x40020940

0810673c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810673c:	b480      	push	{r7}
 810673e:	b089      	sub	sp, #36	; 0x24
 8106740:	af00      	add	r7, sp, #0
 8106742:	6078      	str	r0, [r7, #4]
 8106744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106746:	2300      	movs	r3, #0
 8106748:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810674a:	4b89      	ldr	r3, [pc, #548]	; (8106970 <HAL_GPIO_Init+0x234>)
 810674c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810674e:	e194      	b.n	8106a7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106750:	683b      	ldr	r3, [r7, #0]
 8106752:	681a      	ldr	r2, [r3, #0]
 8106754:	2101      	movs	r1, #1
 8106756:	69fb      	ldr	r3, [r7, #28]
 8106758:	fa01 f303 	lsl.w	r3, r1, r3
 810675c:	4013      	ands	r3, r2
 810675e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106760:	693b      	ldr	r3, [r7, #16]
 8106762:	2b00      	cmp	r3, #0
 8106764:	f000 8186 	beq.w	8106a74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106768:	683b      	ldr	r3, [r7, #0]
 810676a:	685b      	ldr	r3, [r3, #4]
 810676c:	2b01      	cmp	r3, #1
 810676e:	d00b      	beq.n	8106788 <HAL_GPIO_Init+0x4c>
 8106770:	683b      	ldr	r3, [r7, #0]
 8106772:	685b      	ldr	r3, [r3, #4]
 8106774:	2b02      	cmp	r3, #2
 8106776:	d007      	beq.n	8106788 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106778:	683b      	ldr	r3, [r7, #0]
 810677a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810677c:	2b11      	cmp	r3, #17
 810677e:	d003      	beq.n	8106788 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106780:	683b      	ldr	r3, [r7, #0]
 8106782:	685b      	ldr	r3, [r3, #4]
 8106784:	2b12      	cmp	r3, #18
 8106786:	d130      	bne.n	81067ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	689b      	ldr	r3, [r3, #8]
 810678c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810678e:	69fb      	ldr	r3, [r7, #28]
 8106790:	005b      	lsls	r3, r3, #1
 8106792:	2203      	movs	r2, #3
 8106794:	fa02 f303 	lsl.w	r3, r2, r3
 8106798:	43db      	mvns	r3, r3
 810679a:	69ba      	ldr	r2, [r7, #24]
 810679c:	4013      	ands	r3, r2
 810679e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81067a0:	683b      	ldr	r3, [r7, #0]
 81067a2:	68da      	ldr	r2, [r3, #12]
 81067a4:	69fb      	ldr	r3, [r7, #28]
 81067a6:	005b      	lsls	r3, r3, #1
 81067a8:	fa02 f303 	lsl.w	r3, r2, r3
 81067ac:	69ba      	ldr	r2, [r7, #24]
 81067ae:	4313      	orrs	r3, r2
 81067b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	69ba      	ldr	r2, [r7, #24]
 81067b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	685b      	ldr	r3, [r3, #4]
 81067bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81067be:	2201      	movs	r2, #1
 81067c0:	69fb      	ldr	r3, [r7, #28]
 81067c2:	fa02 f303 	lsl.w	r3, r2, r3
 81067c6:	43db      	mvns	r3, r3
 81067c8:	69ba      	ldr	r2, [r7, #24]
 81067ca:	4013      	ands	r3, r2
 81067cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81067ce:	683b      	ldr	r3, [r7, #0]
 81067d0:	685b      	ldr	r3, [r3, #4]
 81067d2:	091b      	lsrs	r3, r3, #4
 81067d4:	f003 0201 	and.w	r2, r3, #1
 81067d8:	69fb      	ldr	r3, [r7, #28]
 81067da:	fa02 f303 	lsl.w	r3, r2, r3
 81067de:	69ba      	ldr	r2, [r7, #24]
 81067e0:	4313      	orrs	r3, r2
 81067e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	69ba      	ldr	r2, [r7, #24]
 81067e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81067ea:	687b      	ldr	r3, [r7, #4]
 81067ec:	68db      	ldr	r3, [r3, #12]
 81067ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81067f0:	69fb      	ldr	r3, [r7, #28]
 81067f2:	005b      	lsls	r3, r3, #1
 81067f4:	2203      	movs	r2, #3
 81067f6:	fa02 f303 	lsl.w	r3, r2, r3
 81067fa:	43db      	mvns	r3, r3
 81067fc:	69ba      	ldr	r2, [r7, #24]
 81067fe:	4013      	ands	r3, r2
 8106800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106802:	683b      	ldr	r3, [r7, #0]
 8106804:	689a      	ldr	r2, [r3, #8]
 8106806:	69fb      	ldr	r3, [r7, #28]
 8106808:	005b      	lsls	r3, r3, #1
 810680a:	fa02 f303 	lsl.w	r3, r2, r3
 810680e:	69ba      	ldr	r2, [r7, #24]
 8106810:	4313      	orrs	r3, r2
 8106812:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	69ba      	ldr	r2, [r7, #24]
 8106818:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810681a:	683b      	ldr	r3, [r7, #0]
 810681c:	685b      	ldr	r3, [r3, #4]
 810681e:	2b02      	cmp	r3, #2
 8106820:	d003      	beq.n	810682a <HAL_GPIO_Init+0xee>
 8106822:	683b      	ldr	r3, [r7, #0]
 8106824:	685b      	ldr	r3, [r3, #4]
 8106826:	2b12      	cmp	r3, #18
 8106828:	d123      	bne.n	8106872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810682a:	69fb      	ldr	r3, [r7, #28]
 810682c:	08da      	lsrs	r2, r3, #3
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	3208      	adds	r2, #8
 8106832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106838:	69fb      	ldr	r3, [r7, #28]
 810683a:	f003 0307 	and.w	r3, r3, #7
 810683e:	009b      	lsls	r3, r3, #2
 8106840:	220f      	movs	r2, #15
 8106842:	fa02 f303 	lsl.w	r3, r2, r3
 8106846:	43db      	mvns	r3, r3
 8106848:	69ba      	ldr	r2, [r7, #24]
 810684a:	4013      	ands	r3, r2
 810684c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810684e:	683b      	ldr	r3, [r7, #0]
 8106850:	691a      	ldr	r2, [r3, #16]
 8106852:	69fb      	ldr	r3, [r7, #28]
 8106854:	f003 0307 	and.w	r3, r3, #7
 8106858:	009b      	lsls	r3, r3, #2
 810685a:	fa02 f303 	lsl.w	r3, r2, r3
 810685e:	69ba      	ldr	r2, [r7, #24]
 8106860:	4313      	orrs	r3, r2
 8106862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106864:	69fb      	ldr	r3, [r7, #28]
 8106866:	08da      	lsrs	r2, r3, #3
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	3208      	adds	r2, #8
 810686c:	69b9      	ldr	r1, [r7, #24]
 810686e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106878:	69fb      	ldr	r3, [r7, #28]
 810687a:	005b      	lsls	r3, r3, #1
 810687c:	2203      	movs	r2, #3
 810687e:	fa02 f303 	lsl.w	r3, r2, r3
 8106882:	43db      	mvns	r3, r3
 8106884:	69ba      	ldr	r2, [r7, #24]
 8106886:	4013      	ands	r3, r2
 8106888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810688a:	683b      	ldr	r3, [r7, #0]
 810688c:	685b      	ldr	r3, [r3, #4]
 810688e:	f003 0203 	and.w	r2, r3, #3
 8106892:	69fb      	ldr	r3, [r7, #28]
 8106894:	005b      	lsls	r3, r3, #1
 8106896:	fa02 f303 	lsl.w	r3, r2, r3
 810689a:	69ba      	ldr	r2, [r7, #24]
 810689c:	4313      	orrs	r3, r2
 810689e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	69ba      	ldr	r2, [r7, #24]
 81068a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81068a6:	683b      	ldr	r3, [r7, #0]
 81068a8:	685b      	ldr	r3, [r3, #4]
 81068aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81068ae:	2b00      	cmp	r3, #0
 81068b0:	f000 80e0 	beq.w	8106a74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81068b4:	4b2f      	ldr	r3, [pc, #188]	; (8106974 <HAL_GPIO_Init+0x238>)
 81068b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81068ba:	4a2e      	ldr	r2, [pc, #184]	; (8106974 <HAL_GPIO_Init+0x238>)
 81068bc:	f043 0302 	orr.w	r3, r3, #2
 81068c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81068c4:	4b2b      	ldr	r3, [pc, #172]	; (8106974 <HAL_GPIO_Init+0x238>)
 81068c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81068ca:	f003 0302 	and.w	r3, r3, #2
 81068ce:	60fb      	str	r3, [r7, #12]
 81068d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81068d2:	4a29      	ldr	r2, [pc, #164]	; (8106978 <HAL_GPIO_Init+0x23c>)
 81068d4:	69fb      	ldr	r3, [r7, #28]
 81068d6:	089b      	lsrs	r3, r3, #2
 81068d8:	3302      	adds	r3, #2
 81068da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81068de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81068e0:	69fb      	ldr	r3, [r7, #28]
 81068e2:	f003 0303 	and.w	r3, r3, #3
 81068e6:	009b      	lsls	r3, r3, #2
 81068e8:	220f      	movs	r2, #15
 81068ea:	fa02 f303 	lsl.w	r3, r2, r3
 81068ee:	43db      	mvns	r3, r3
 81068f0:	69ba      	ldr	r2, [r7, #24]
 81068f2:	4013      	ands	r3, r2
 81068f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	4a20      	ldr	r2, [pc, #128]	; (810697c <HAL_GPIO_Init+0x240>)
 81068fa:	4293      	cmp	r3, r2
 81068fc:	d052      	beq.n	81069a4 <HAL_GPIO_Init+0x268>
 81068fe:	687b      	ldr	r3, [r7, #4]
 8106900:	4a1f      	ldr	r2, [pc, #124]	; (8106980 <HAL_GPIO_Init+0x244>)
 8106902:	4293      	cmp	r3, r2
 8106904:	d031      	beq.n	810696a <HAL_GPIO_Init+0x22e>
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	4a1e      	ldr	r2, [pc, #120]	; (8106984 <HAL_GPIO_Init+0x248>)
 810690a:	4293      	cmp	r3, r2
 810690c:	d02b      	beq.n	8106966 <HAL_GPIO_Init+0x22a>
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	4a1d      	ldr	r2, [pc, #116]	; (8106988 <HAL_GPIO_Init+0x24c>)
 8106912:	4293      	cmp	r3, r2
 8106914:	d025      	beq.n	8106962 <HAL_GPIO_Init+0x226>
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	4a1c      	ldr	r2, [pc, #112]	; (810698c <HAL_GPIO_Init+0x250>)
 810691a:	4293      	cmp	r3, r2
 810691c:	d01f      	beq.n	810695e <HAL_GPIO_Init+0x222>
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	4a1b      	ldr	r2, [pc, #108]	; (8106990 <HAL_GPIO_Init+0x254>)
 8106922:	4293      	cmp	r3, r2
 8106924:	d019      	beq.n	810695a <HAL_GPIO_Init+0x21e>
 8106926:	687b      	ldr	r3, [r7, #4]
 8106928:	4a1a      	ldr	r2, [pc, #104]	; (8106994 <HAL_GPIO_Init+0x258>)
 810692a:	4293      	cmp	r3, r2
 810692c:	d013      	beq.n	8106956 <HAL_GPIO_Init+0x21a>
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	4a19      	ldr	r2, [pc, #100]	; (8106998 <HAL_GPIO_Init+0x25c>)
 8106932:	4293      	cmp	r3, r2
 8106934:	d00d      	beq.n	8106952 <HAL_GPIO_Init+0x216>
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	4a18      	ldr	r2, [pc, #96]	; (810699c <HAL_GPIO_Init+0x260>)
 810693a:	4293      	cmp	r3, r2
 810693c:	d007      	beq.n	810694e <HAL_GPIO_Init+0x212>
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	4a17      	ldr	r2, [pc, #92]	; (81069a0 <HAL_GPIO_Init+0x264>)
 8106942:	4293      	cmp	r3, r2
 8106944:	d101      	bne.n	810694a <HAL_GPIO_Init+0x20e>
 8106946:	2309      	movs	r3, #9
 8106948:	e02d      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 810694a:	230a      	movs	r3, #10
 810694c:	e02b      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 810694e:	2308      	movs	r3, #8
 8106950:	e029      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 8106952:	2307      	movs	r3, #7
 8106954:	e027      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 8106956:	2306      	movs	r3, #6
 8106958:	e025      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 810695a:	2305      	movs	r3, #5
 810695c:	e023      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 810695e:	2304      	movs	r3, #4
 8106960:	e021      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 8106962:	2303      	movs	r3, #3
 8106964:	e01f      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 8106966:	2302      	movs	r3, #2
 8106968:	e01d      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 810696a:	2301      	movs	r3, #1
 810696c:	e01b      	b.n	81069a6 <HAL_GPIO_Init+0x26a>
 810696e:	bf00      	nop
 8106970:	580000c0 	.word	0x580000c0
 8106974:	58024400 	.word	0x58024400
 8106978:	58000400 	.word	0x58000400
 810697c:	58020000 	.word	0x58020000
 8106980:	58020400 	.word	0x58020400
 8106984:	58020800 	.word	0x58020800
 8106988:	58020c00 	.word	0x58020c00
 810698c:	58021000 	.word	0x58021000
 8106990:	58021400 	.word	0x58021400
 8106994:	58021800 	.word	0x58021800
 8106998:	58021c00 	.word	0x58021c00
 810699c:	58022000 	.word	0x58022000
 81069a0:	58022400 	.word	0x58022400
 81069a4:	2300      	movs	r3, #0
 81069a6:	69fa      	ldr	r2, [r7, #28]
 81069a8:	f002 0203 	and.w	r2, r2, #3
 81069ac:	0092      	lsls	r2, r2, #2
 81069ae:	4093      	lsls	r3, r2
 81069b0:	69ba      	ldr	r2, [r7, #24]
 81069b2:	4313      	orrs	r3, r2
 81069b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81069b6:	4938      	ldr	r1, [pc, #224]	; (8106a98 <HAL_GPIO_Init+0x35c>)
 81069b8:	69fb      	ldr	r3, [r7, #28]
 81069ba:	089b      	lsrs	r3, r3, #2
 81069bc:	3302      	adds	r3, #2
 81069be:	69ba      	ldr	r2, [r7, #24]
 81069c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81069c4:	697b      	ldr	r3, [r7, #20]
 81069c6:	681b      	ldr	r3, [r3, #0]
 81069c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81069ca:	693b      	ldr	r3, [r7, #16]
 81069cc:	43db      	mvns	r3, r3
 81069ce:	69ba      	ldr	r2, [r7, #24]
 81069d0:	4013      	ands	r3, r2
 81069d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81069d4:	683b      	ldr	r3, [r7, #0]
 81069d6:	685b      	ldr	r3, [r3, #4]
 81069d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81069dc:	2b00      	cmp	r3, #0
 81069de:	d003      	beq.n	81069e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81069e0:	69ba      	ldr	r2, [r7, #24]
 81069e2:	693b      	ldr	r3, [r7, #16]
 81069e4:	4313      	orrs	r3, r2
 81069e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81069e8:	697b      	ldr	r3, [r7, #20]
 81069ea:	69ba      	ldr	r2, [r7, #24]
 81069ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81069ee:	697b      	ldr	r3, [r7, #20]
 81069f0:	685b      	ldr	r3, [r3, #4]
 81069f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81069f4:	693b      	ldr	r3, [r7, #16]
 81069f6:	43db      	mvns	r3, r3
 81069f8:	69ba      	ldr	r2, [r7, #24]
 81069fa:	4013      	ands	r3, r2
 81069fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81069fe:	683b      	ldr	r3, [r7, #0]
 8106a00:	685b      	ldr	r3, [r3, #4]
 8106a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106a06:	2b00      	cmp	r3, #0
 8106a08:	d003      	beq.n	8106a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8106a0a:	69ba      	ldr	r2, [r7, #24]
 8106a0c:	693b      	ldr	r3, [r7, #16]
 8106a0e:	4313      	orrs	r3, r2
 8106a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106a12:	697b      	ldr	r3, [r7, #20]
 8106a14:	69ba      	ldr	r2, [r7, #24]
 8106a16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106a1c:	681b      	ldr	r3, [r3, #0]
 8106a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a20:	693b      	ldr	r3, [r7, #16]
 8106a22:	43db      	mvns	r3, r3
 8106a24:	69ba      	ldr	r2, [r7, #24]
 8106a26:	4013      	ands	r3, r2
 8106a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8106a2a:	683b      	ldr	r3, [r7, #0]
 8106a2c:	685b      	ldr	r3, [r3, #4]
 8106a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	d003      	beq.n	8106a3e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8106a36:	69ba      	ldr	r2, [r7, #24]
 8106a38:	693b      	ldr	r3, [r7, #16]
 8106a3a:	4313      	orrs	r3, r2
 8106a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106a42:	69bb      	ldr	r3, [r7, #24]
 8106a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106a4a:	685b      	ldr	r3, [r3, #4]
 8106a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106a4e:	693b      	ldr	r3, [r7, #16]
 8106a50:	43db      	mvns	r3, r3
 8106a52:	69ba      	ldr	r2, [r7, #24]
 8106a54:	4013      	ands	r3, r2
 8106a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106a58:	683b      	ldr	r3, [r7, #0]
 8106a5a:	685b      	ldr	r3, [r3, #4]
 8106a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106a60:	2b00      	cmp	r3, #0
 8106a62:	d003      	beq.n	8106a6c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8106a64:	69ba      	ldr	r2, [r7, #24]
 8106a66:	693b      	ldr	r3, [r7, #16]
 8106a68:	4313      	orrs	r3, r2
 8106a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106a70:	69bb      	ldr	r3, [r7, #24]
 8106a72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8106a74:	69fb      	ldr	r3, [r7, #28]
 8106a76:	3301      	adds	r3, #1
 8106a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106a7a:	683b      	ldr	r3, [r7, #0]
 8106a7c:	681a      	ldr	r2, [r3, #0]
 8106a7e:	69fb      	ldr	r3, [r7, #28]
 8106a80:	fa22 f303 	lsr.w	r3, r2, r3
 8106a84:	2b00      	cmp	r3, #0
 8106a86:	f47f ae63 	bne.w	8106750 <HAL_GPIO_Init+0x14>
  }
}
 8106a8a:	bf00      	nop
 8106a8c:	bf00      	nop
 8106a8e:	3724      	adds	r7, #36	; 0x24
 8106a90:	46bd      	mov	sp, r7
 8106a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a96:	4770      	bx	lr
 8106a98:	58000400 	.word	0x58000400

08106a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106a9c:	b480      	push	{r7}
 8106a9e:	b083      	sub	sp, #12
 8106aa0:	af00      	add	r7, sp, #0
 8106aa2:	6078      	str	r0, [r7, #4]
 8106aa4:	460b      	mov	r3, r1
 8106aa6:	807b      	strh	r3, [r7, #2]
 8106aa8:	4613      	mov	r3, r2
 8106aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106aac:	787b      	ldrb	r3, [r7, #1]
 8106aae:	2b00      	cmp	r3, #0
 8106ab0:	d003      	beq.n	8106aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8106ab2:	887a      	ldrh	r2, [r7, #2]
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106ab8:	e003      	b.n	8106ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106aba:	887b      	ldrh	r3, [r7, #2]
 8106abc:	041a      	lsls	r2, r3, #16
 8106abe:	687b      	ldr	r3, [r7, #4]
 8106ac0:	619a      	str	r2, [r3, #24]
}
 8106ac2:	bf00      	nop
 8106ac4:	370c      	adds	r7, #12
 8106ac6:	46bd      	mov	sp, r7
 8106ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106acc:	4770      	bx	lr
	...

08106ad0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106ad0:	b480      	push	{r7}
 8106ad2:	b083      	sub	sp, #12
 8106ad4:	af00      	add	r7, sp, #0
 8106ad6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8106ad8:	4a08      	ldr	r2, [pc, #32]	; (8106afc <HAL_HSEM_FastTake+0x2c>)
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	3320      	adds	r3, #32
 8106ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106ae2:	4a07      	ldr	r2, [pc, #28]	; (8106b00 <HAL_HSEM_FastTake+0x30>)
 8106ae4:	4293      	cmp	r3, r2
 8106ae6:	d101      	bne.n	8106aec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8106ae8:	2300      	movs	r3, #0
 8106aea:	e000      	b.n	8106aee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8106aec:	2301      	movs	r3, #1
}
 8106aee:	4618      	mov	r0, r3
 8106af0:	370c      	adds	r7, #12
 8106af2:	46bd      	mov	sp, r7
 8106af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106af8:	4770      	bx	lr
 8106afa:	bf00      	nop
 8106afc:	58026400 	.word	0x58026400
 8106b00:	80000100 	.word	0x80000100

08106b04 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8106b04:	b480      	push	{r7}
 8106b06:	b083      	sub	sp, #12
 8106b08:	af00      	add	r7, sp, #0
 8106b0a:	6078      	str	r0, [r7, #4]
 8106b0c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8106b0e:	4906      	ldr	r1, [pc, #24]	; (8106b28 <HAL_HSEM_Release+0x24>)
 8106b10:	683b      	ldr	r3, [r7, #0]
 8106b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8106b1c:	bf00      	nop
 8106b1e:	370c      	adds	r7, #12
 8106b20:	46bd      	mov	sp, r7
 8106b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b26:	4770      	bx	lr
 8106b28:	58026400 	.word	0x58026400

08106b2c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106b2c:	b480      	push	{r7}
 8106b2e:	b083      	sub	sp, #12
 8106b30:	af00      	add	r7, sp, #0
 8106b32:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106b34:	4b05      	ldr	r3, [pc, #20]	; (8106b4c <HAL_HSEM_ActivateNotification+0x20>)
 8106b36:	681a      	ldr	r2, [r3, #0]
 8106b38:	4904      	ldr	r1, [pc, #16]	; (8106b4c <HAL_HSEM_ActivateNotification+0x20>)
 8106b3a:	687b      	ldr	r3, [r7, #4]
 8106b3c:	4313      	orrs	r3, r2
 8106b3e:	600b      	str	r3, [r1, #0]
#endif
}
 8106b40:	bf00      	nop
 8106b42:	370c      	adds	r7, #12
 8106b44:	46bd      	mov	sp, r7
 8106b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b4a:	4770      	bx	lr
 8106b4c:	58026510 	.word	0x58026510

08106b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106b50:	b580      	push	{r7, lr}
 8106b52:	b082      	sub	sp, #8
 8106b54:	af00      	add	r7, sp, #0
 8106b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	2b00      	cmp	r3, #0
 8106b5c:	d101      	bne.n	8106b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8106b5e:	2301      	movs	r3, #1
 8106b60:	e081      	b.n	8106c66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106b68:	b2db      	uxtb	r3, r3
 8106b6a:	2b00      	cmp	r3, #0
 8106b6c:	d106      	bne.n	8106b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	2200      	movs	r2, #0
 8106b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8106b76:	6878      	ldr	r0, [r7, #4]
 8106b78:	f7fb f8c0 	bl	8101cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	2224      	movs	r2, #36	; 0x24
 8106b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	681b      	ldr	r3, [r3, #0]
 8106b88:	681a      	ldr	r2, [r3, #0]
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	681b      	ldr	r3, [r3, #0]
 8106b8e:	f022 0201 	bic.w	r2, r2, #1
 8106b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	685a      	ldr	r2, [r3, #4]
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	681b      	ldr	r3, [r3, #0]
 8106b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8106ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	681b      	ldr	r3, [r3, #0]
 8106ba6:	689a      	ldr	r2, [r3, #8]
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	681b      	ldr	r3, [r3, #0]
 8106bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	68db      	ldr	r3, [r3, #12]
 8106bb6:	2b01      	cmp	r3, #1
 8106bb8:	d107      	bne.n	8106bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	689a      	ldr	r2, [r3, #8]
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	681b      	ldr	r3, [r3, #0]
 8106bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106bc6:	609a      	str	r2, [r3, #8]
 8106bc8:	e006      	b.n	8106bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	689a      	ldr	r2, [r3, #8]
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	681b      	ldr	r3, [r3, #0]
 8106bd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8106bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	68db      	ldr	r3, [r3, #12]
 8106bdc:	2b02      	cmp	r3, #2
 8106bde:	d104      	bne.n	8106bea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8106be0:	687b      	ldr	r3, [r7, #4]
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	681b      	ldr	r3, [r3, #0]
 8106bee:	685b      	ldr	r3, [r3, #4]
 8106bf0:	687a      	ldr	r2, [r7, #4]
 8106bf2:	6812      	ldr	r2, [r2, #0]
 8106bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8106bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8106bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	68da      	ldr	r2, [r3, #12]
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	691a      	ldr	r2, [r3, #16]
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	695b      	ldr	r3, [r3, #20]
 8106c16:	ea42 0103 	orr.w	r1, r2, r3
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	699b      	ldr	r3, [r3, #24]
 8106c1e:	021a      	lsls	r2, r3, #8
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	430a      	orrs	r2, r1
 8106c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	69d9      	ldr	r1, [r3, #28]
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	6a1a      	ldr	r2, [r3, #32]
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	681b      	ldr	r3, [r3, #0]
 8106c34:	430a      	orrs	r2, r1
 8106c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	681b      	ldr	r3, [r3, #0]
 8106c3c:	681a      	ldr	r2, [r3, #0]
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	f042 0201 	orr.w	r2, r2, #1
 8106c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	2200      	movs	r2, #0
 8106c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	2220      	movs	r2, #32
 8106c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	2200      	movs	r2, #0
 8106c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	2200      	movs	r2, #0
 8106c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8106c64:	2300      	movs	r3, #0
}
 8106c66:	4618      	mov	r0, r3
 8106c68:	3708      	adds	r7, #8
 8106c6a:	46bd      	mov	sp, r7
 8106c6c:	bd80      	pop	{r7, pc}
	...

08106c70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106c70:	b580      	push	{r7, lr}
 8106c72:	b088      	sub	sp, #32
 8106c74:	af02      	add	r7, sp, #8
 8106c76:	60f8      	str	r0, [r7, #12]
 8106c78:	4608      	mov	r0, r1
 8106c7a:	4611      	mov	r1, r2
 8106c7c:	461a      	mov	r2, r3
 8106c7e:	4603      	mov	r3, r0
 8106c80:	817b      	strh	r3, [r7, #10]
 8106c82:	460b      	mov	r3, r1
 8106c84:	813b      	strh	r3, [r7, #8]
 8106c86:	4613      	mov	r3, r2
 8106c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106c8a:	68fb      	ldr	r3, [r7, #12]
 8106c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106c90:	b2db      	uxtb	r3, r3
 8106c92:	2b20      	cmp	r3, #32
 8106c94:	f040 80f9 	bne.w	8106e8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8106c98:	6a3b      	ldr	r3, [r7, #32]
 8106c9a:	2b00      	cmp	r3, #0
 8106c9c:	d002      	beq.n	8106ca4 <HAL_I2C_Mem_Write+0x34>
 8106c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106ca0:	2b00      	cmp	r3, #0
 8106ca2:	d105      	bne.n	8106cb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106ca4:	68fb      	ldr	r3, [r7, #12]
 8106ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106caa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106cac:	2301      	movs	r3, #1
 8106cae:	e0ed      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106cb6:	2b01      	cmp	r3, #1
 8106cb8:	d101      	bne.n	8106cbe <HAL_I2C_Mem_Write+0x4e>
 8106cba:	2302      	movs	r3, #2
 8106cbc:	e0e6      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
 8106cbe:	68fb      	ldr	r3, [r7, #12]
 8106cc0:	2201      	movs	r2, #1
 8106cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106cc6:	f7fc fd93 	bl	81037f0 <HAL_GetTick>
 8106cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106ccc:	697b      	ldr	r3, [r7, #20]
 8106cce:	9300      	str	r3, [sp, #0]
 8106cd0:	2319      	movs	r3, #25
 8106cd2:	2201      	movs	r2, #1
 8106cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8106cd8:	68f8      	ldr	r0, [r7, #12]
 8106cda:	f001 f8c6 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 8106cde:	4603      	mov	r3, r0
 8106ce0:	2b00      	cmp	r3, #0
 8106ce2:	d001      	beq.n	8106ce8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8106ce4:	2301      	movs	r3, #1
 8106ce6:	e0d1      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8106ce8:	68fb      	ldr	r3, [r7, #12]
 8106cea:	2221      	movs	r2, #33	; 0x21
 8106cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106cf0:	68fb      	ldr	r3, [r7, #12]
 8106cf2:	2240      	movs	r2, #64	; 0x40
 8106cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106cf8:	68fb      	ldr	r3, [r7, #12]
 8106cfa:	2200      	movs	r2, #0
 8106cfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106cfe:	68fb      	ldr	r3, [r7, #12]
 8106d00:	6a3a      	ldr	r2, [r7, #32]
 8106d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8106d04:	68fb      	ldr	r3, [r7, #12]
 8106d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8106d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8106d0a:	68fb      	ldr	r3, [r7, #12]
 8106d0c:	2200      	movs	r2, #0
 8106d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106d10:	88f8      	ldrh	r0, [r7, #6]
 8106d12:	893a      	ldrh	r2, [r7, #8]
 8106d14:	8979      	ldrh	r1, [r7, #10]
 8106d16:	697b      	ldr	r3, [r7, #20]
 8106d18:	9301      	str	r3, [sp, #4]
 8106d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d1c:	9300      	str	r3, [sp, #0]
 8106d1e:	4603      	mov	r3, r0
 8106d20:	68f8      	ldr	r0, [r7, #12]
 8106d22:	f000 fb91 	bl	8107448 <I2C_RequestMemoryWrite>
 8106d26:	4603      	mov	r3, r0
 8106d28:	2b00      	cmp	r3, #0
 8106d2a:	d005      	beq.n	8106d38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106d2c:	68fb      	ldr	r3, [r7, #12]
 8106d2e:	2200      	movs	r2, #0
 8106d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106d34:	2301      	movs	r3, #1
 8106d36:	e0a9      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106d38:	68fb      	ldr	r3, [r7, #12]
 8106d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106d3c:	b29b      	uxth	r3, r3
 8106d3e:	2bff      	cmp	r3, #255	; 0xff
 8106d40:	d90e      	bls.n	8106d60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106d42:	68fb      	ldr	r3, [r7, #12]
 8106d44:	22ff      	movs	r2, #255	; 0xff
 8106d46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106d48:	68fb      	ldr	r3, [r7, #12]
 8106d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106d4c:	b2da      	uxtb	r2, r3
 8106d4e:	8979      	ldrh	r1, [r7, #10]
 8106d50:	2300      	movs	r3, #0
 8106d52:	9300      	str	r3, [sp, #0]
 8106d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106d58:	68f8      	ldr	r0, [r7, #12]
 8106d5a:	f001 f9a9 	bl	81080b0 <I2C_TransferConfig>
 8106d5e:	e00f      	b.n	8106d80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106d60:	68fb      	ldr	r3, [r7, #12]
 8106d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106d64:	b29a      	uxth	r2, r3
 8106d66:	68fb      	ldr	r3, [r7, #12]
 8106d68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106d6a:	68fb      	ldr	r3, [r7, #12]
 8106d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106d6e:	b2da      	uxtb	r2, r3
 8106d70:	8979      	ldrh	r1, [r7, #10]
 8106d72:	2300      	movs	r3, #0
 8106d74:	9300      	str	r3, [sp, #0]
 8106d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106d7a:	68f8      	ldr	r0, [r7, #12]
 8106d7c:	f001 f998 	bl	81080b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106d80:	697a      	ldr	r2, [r7, #20]
 8106d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106d84:	68f8      	ldr	r0, [r7, #12]
 8106d86:	f001 f8b0 	bl	8107eea <I2C_WaitOnTXISFlagUntilTimeout>
 8106d8a:	4603      	mov	r3, r0
 8106d8c:	2b00      	cmp	r3, #0
 8106d8e:	d001      	beq.n	8106d94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8106d90:	2301      	movs	r3, #1
 8106d92:	e07b      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8106d94:	68fb      	ldr	r3, [r7, #12]
 8106d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d98:	781a      	ldrb	r2, [r3, #0]
 8106d9a:	68fb      	ldr	r3, [r7, #12]
 8106d9c:	681b      	ldr	r3, [r3, #0]
 8106d9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106da0:	68fb      	ldr	r3, [r7, #12]
 8106da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106da4:	1c5a      	adds	r2, r3, #1
 8106da6:	68fb      	ldr	r3, [r7, #12]
 8106da8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8106daa:	68fb      	ldr	r3, [r7, #12]
 8106dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106dae:	b29b      	uxth	r3, r3
 8106db0:	3b01      	subs	r3, #1
 8106db2:	b29a      	uxth	r2, r3
 8106db4:	68fb      	ldr	r3, [r7, #12]
 8106db6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8106db8:	68fb      	ldr	r3, [r7, #12]
 8106dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106dbc:	3b01      	subs	r3, #1
 8106dbe:	b29a      	uxth	r2, r3
 8106dc0:	68fb      	ldr	r3, [r7, #12]
 8106dc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106dc4:	68fb      	ldr	r3, [r7, #12]
 8106dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106dc8:	b29b      	uxth	r3, r3
 8106dca:	2b00      	cmp	r3, #0
 8106dcc:	d034      	beq.n	8106e38 <HAL_I2C_Mem_Write+0x1c8>
 8106dce:	68fb      	ldr	r3, [r7, #12]
 8106dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106dd2:	2b00      	cmp	r3, #0
 8106dd4:	d130      	bne.n	8106e38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106dd6:	697b      	ldr	r3, [r7, #20]
 8106dd8:	9300      	str	r3, [sp, #0]
 8106dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ddc:	2200      	movs	r2, #0
 8106dde:	2180      	movs	r1, #128	; 0x80
 8106de0:	68f8      	ldr	r0, [r7, #12]
 8106de2:	f001 f842 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 8106de6:	4603      	mov	r3, r0
 8106de8:	2b00      	cmp	r3, #0
 8106dea:	d001      	beq.n	8106df0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8106dec:	2301      	movs	r3, #1
 8106dee:	e04d      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106df4:	b29b      	uxth	r3, r3
 8106df6:	2bff      	cmp	r3, #255	; 0xff
 8106df8:	d90e      	bls.n	8106e18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106dfa:	68fb      	ldr	r3, [r7, #12]
 8106dfc:	22ff      	movs	r2, #255	; 0xff
 8106dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106e00:	68fb      	ldr	r3, [r7, #12]
 8106e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e04:	b2da      	uxtb	r2, r3
 8106e06:	8979      	ldrh	r1, [r7, #10]
 8106e08:	2300      	movs	r3, #0
 8106e0a:	9300      	str	r3, [sp, #0]
 8106e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106e10:	68f8      	ldr	r0, [r7, #12]
 8106e12:	f001 f94d 	bl	81080b0 <I2C_TransferConfig>
 8106e16:	e00f      	b.n	8106e38 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106e18:	68fb      	ldr	r3, [r7, #12]
 8106e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e1c:	b29a      	uxth	r2, r3
 8106e1e:	68fb      	ldr	r3, [r7, #12]
 8106e20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106e22:	68fb      	ldr	r3, [r7, #12]
 8106e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e26:	b2da      	uxtb	r2, r3
 8106e28:	8979      	ldrh	r1, [r7, #10]
 8106e2a:	2300      	movs	r3, #0
 8106e2c:	9300      	str	r3, [sp, #0]
 8106e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106e32:	68f8      	ldr	r0, [r7, #12]
 8106e34:	f001 f93c 	bl	81080b0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8106e38:	68fb      	ldr	r3, [r7, #12]
 8106e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e3c:	b29b      	uxth	r3, r3
 8106e3e:	2b00      	cmp	r3, #0
 8106e40:	d19e      	bne.n	8106d80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106e42:	697a      	ldr	r2, [r7, #20]
 8106e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106e46:	68f8      	ldr	r0, [r7, #12]
 8106e48:	f001 f88f 	bl	8107f6a <I2C_WaitOnSTOPFlagUntilTimeout>
 8106e4c:	4603      	mov	r3, r0
 8106e4e:	2b00      	cmp	r3, #0
 8106e50:	d001      	beq.n	8106e56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8106e52:	2301      	movs	r3, #1
 8106e54:	e01a      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106e56:	68fb      	ldr	r3, [r7, #12]
 8106e58:	681b      	ldr	r3, [r3, #0]
 8106e5a:	2220      	movs	r2, #32
 8106e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	6859      	ldr	r1, [r3, #4]
 8106e64:	68fb      	ldr	r3, [r7, #12]
 8106e66:	681a      	ldr	r2, [r3, #0]
 8106e68:	4b0a      	ldr	r3, [pc, #40]	; (8106e94 <HAL_I2C_Mem_Write+0x224>)
 8106e6a:	400b      	ands	r3, r1
 8106e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106e6e:	68fb      	ldr	r3, [r7, #12]
 8106e70:	2220      	movs	r2, #32
 8106e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106e76:	68fb      	ldr	r3, [r7, #12]
 8106e78:	2200      	movs	r2, #0
 8106e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106e7e:	68fb      	ldr	r3, [r7, #12]
 8106e80:	2200      	movs	r2, #0
 8106e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106e86:	2300      	movs	r3, #0
 8106e88:	e000      	b.n	8106e8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8106e8a:	2302      	movs	r3, #2
  }
}
 8106e8c:	4618      	mov	r0, r3
 8106e8e:	3718      	adds	r7, #24
 8106e90:	46bd      	mov	sp, r7
 8106e92:	bd80      	pop	{r7, pc}
 8106e94:	fe00e800 	.word	0xfe00e800

08106e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106e98:	b580      	push	{r7, lr}
 8106e9a:	b088      	sub	sp, #32
 8106e9c:	af02      	add	r7, sp, #8
 8106e9e:	60f8      	str	r0, [r7, #12]
 8106ea0:	4608      	mov	r0, r1
 8106ea2:	4611      	mov	r1, r2
 8106ea4:	461a      	mov	r2, r3
 8106ea6:	4603      	mov	r3, r0
 8106ea8:	817b      	strh	r3, [r7, #10]
 8106eaa:	460b      	mov	r3, r1
 8106eac:	813b      	strh	r3, [r7, #8]
 8106eae:	4613      	mov	r3, r2
 8106eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106eb2:	68fb      	ldr	r3, [r7, #12]
 8106eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106eb8:	b2db      	uxtb	r3, r3
 8106eba:	2b20      	cmp	r3, #32
 8106ebc:	f040 80fd 	bne.w	81070ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8106ec0:	6a3b      	ldr	r3, [r7, #32]
 8106ec2:	2b00      	cmp	r3, #0
 8106ec4:	d002      	beq.n	8106ecc <HAL_I2C_Mem_Read+0x34>
 8106ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106ec8:	2b00      	cmp	r3, #0
 8106eca:	d105      	bne.n	8106ed8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106ecc:	68fb      	ldr	r3, [r7, #12]
 8106ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106ed2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106ed4:	2301      	movs	r3, #1
 8106ed6:	e0f1      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106ed8:	68fb      	ldr	r3, [r7, #12]
 8106eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106ede:	2b01      	cmp	r3, #1
 8106ee0:	d101      	bne.n	8106ee6 <HAL_I2C_Mem_Read+0x4e>
 8106ee2:	2302      	movs	r3, #2
 8106ee4:	e0ea      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
 8106ee6:	68fb      	ldr	r3, [r7, #12]
 8106ee8:	2201      	movs	r2, #1
 8106eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106eee:	f7fc fc7f 	bl	81037f0 <HAL_GetTick>
 8106ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106ef4:	697b      	ldr	r3, [r7, #20]
 8106ef6:	9300      	str	r3, [sp, #0]
 8106ef8:	2319      	movs	r3, #25
 8106efa:	2201      	movs	r2, #1
 8106efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8106f00:	68f8      	ldr	r0, [r7, #12]
 8106f02:	f000 ffb2 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 8106f06:	4603      	mov	r3, r0
 8106f08:	2b00      	cmp	r3, #0
 8106f0a:	d001      	beq.n	8106f10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8106f0c:	2301      	movs	r3, #1
 8106f0e:	e0d5      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8106f10:	68fb      	ldr	r3, [r7, #12]
 8106f12:	2222      	movs	r2, #34	; 0x22
 8106f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8106f18:	68fb      	ldr	r3, [r7, #12]
 8106f1a:	2240      	movs	r2, #64	; 0x40
 8106f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106f20:	68fb      	ldr	r3, [r7, #12]
 8106f22:	2200      	movs	r2, #0
 8106f24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8106f26:	68fb      	ldr	r3, [r7, #12]
 8106f28:	6a3a      	ldr	r2, [r7, #32]
 8106f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8106f2c:	68fb      	ldr	r3, [r7, #12]
 8106f2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8106f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8106f32:	68fb      	ldr	r3, [r7, #12]
 8106f34:	2200      	movs	r2, #0
 8106f36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8106f38:	88f8      	ldrh	r0, [r7, #6]
 8106f3a:	893a      	ldrh	r2, [r7, #8]
 8106f3c:	8979      	ldrh	r1, [r7, #10]
 8106f3e:	697b      	ldr	r3, [r7, #20]
 8106f40:	9301      	str	r3, [sp, #4]
 8106f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f44:	9300      	str	r3, [sp, #0]
 8106f46:	4603      	mov	r3, r0
 8106f48:	68f8      	ldr	r0, [r7, #12]
 8106f4a:	f000 fad1 	bl	81074f0 <I2C_RequestMemoryRead>
 8106f4e:	4603      	mov	r3, r0
 8106f50:	2b00      	cmp	r3, #0
 8106f52:	d005      	beq.n	8106f60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106f54:	68fb      	ldr	r3, [r7, #12]
 8106f56:	2200      	movs	r2, #0
 8106f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106f5c:	2301      	movs	r3, #1
 8106f5e:	e0ad      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106f60:	68fb      	ldr	r3, [r7, #12]
 8106f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106f64:	b29b      	uxth	r3, r3
 8106f66:	2bff      	cmp	r3, #255	; 0xff
 8106f68:	d90e      	bls.n	8106f88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106f6a:	68fb      	ldr	r3, [r7, #12]
 8106f6c:	22ff      	movs	r2, #255	; 0xff
 8106f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8106f70:	68fb      	ldr	r3, [r7, #12]
 8106f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106f74:	b2da      	uxtb	r2, r3
 8106f76:	8979      	ldrh	r1, [r7, #10]
 8106f78:	4b52      	ldr	r3, [pc, #328]	; (81070c4 <HAL_I2C_Mem_Read+0x22c>)
 8106f7a:	9300      	str	r3, [sp, #0]
 8106f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106f80:	68f8      	ldr	r0, [r7, #12]
 8106f82:	f001 f895 	bl	81080b0 <I2C_TransferConfig>
 8106f86:	e00f      	b.n	8106fa8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106f88:	68fb      	ldr	r3, [r7, #12]
 8106f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106f8c:	b29a      	uxth	r2, r3
 8106f8e:	68fb      	ldr	r3, [r7, #12]
 8106f90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8106f92:	68fb      	ldr	r3, [r7, #12]
 8106f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106f96:	b2da      	uxtb	r2, r3
 8106f98:	8979      	ldrh	r1, [r7, #10]
 8106f9a:	4b4a      	ldr	r3, [pc, #296]	; (81070c4 <HAL_I2C_Mem_Read+0x22c>)
 8106f9c:	9300      	str	r3, [sp, #0]
 8106f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106fa2:	68f8      	ldr	r0, [r7, #12]
 8106fa4:	f001 f884 	bl	81080b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8106fa8:	697b      	ldr	r3, [r7, #20]
 8106faa:	9300      	str	r3, [sp, #0]
 8106fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fae:	2200      	movs	r2, #0
 8106fb0:	2104      	movs	r1, #4
 8106fb2:	68f8      	ldr	r0, [r7, #12]
 8106fb4:	f000 ff59 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 8106fb8:	4603      	mov	r3, r0
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d001      	beq.n	8106fc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8106fbe:	2301      	movs	r3, #1
 8106fc0:	e07c      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106fc2:	68fb      	ldr	r3, [r7, #12]
 8106fc4:	681b      	ldr	r3, [r3, #0]
 8106fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106fc8:	68fb      	ldr	r3, [r7, #12]
 8106fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106fcc:	b2d2      	uxtb	r2, r2
 8106fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106fd0:	68fb      	ldr	r3, [r7, #12]
 8106fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106fd4:	1c5a      	adds	r2, r3, #1
 8106fd6:	68fb      	ldr	r3, [r7, #12]
 8106fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8106fda:	68fb      	ldr	r3, [r7, #12]
 8106fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106fde:	3b01      	subs	r3, #1
 8106fe0:	b29a      	uxth	r2, r3
 8106fe2:	68fb      	ldr	r3, [r7, #12]
 8106fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8106fe6:	68fb      	ldr	r3, [r7, #12]
 8106fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106fea:	b29b      	uxth	r3, r3
 8106fec:	3b01      	subs	r3, #1
 8106fee:	b29a      	uxth	r2, r3
 8106ff0:	68fb      	ldr	r3, [r7, #12]
 8106ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106ff4:	68fb      	ldr	r3, [r7, #12]
 8106ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ff8:	b29b      	uxth	r3, r3
 8106ffa:	2b00      	cmp	r3, #0
 8106ffc:	d034      	beq.n	8107068 <HAL_I2C_Mem_Read+0x1d0>
 8106ffe:	68fb      	ldr	r3, [r7, #12]
 8107000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107002:	2b00      	cmp	r3, #0
 8107004:	d130      	bne.n	8107068 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8107006:	697b      	ldr	r3, [r7, #20]
 8107008:	9300      	str	r3, [sp, #0]
 810700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810700c:	2200      	movs	r2, #0
 810700e:	2180      	movs	r1, #128	; 0x80
 8107010:	68f8      	ldr	r0, [r7, #12]
 8107012:	f000 ff2a 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 8107016:	4603      	mov	r3, r0
 8107018:	2b00      	cmp	r3, #0
 810701a:	d001      	beq.n	8107020 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810701c:	2301      	movs	r3, #1
 810701e:	e04d      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8107020:	68fb      	ldr	r3, [r7, #12]
 8107022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107024:	b29b      	uxth	r3, r3
 8107026:	2bff      	cmp	r3, #255	; 0xff
 8107028:	d90e      	bls.n	8107048 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810702a:	68fb      	ldr	r3, [r7, #12]
 810702c:	22ff      	movs	r2, #255	; 0xff
 810702e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8107030:	68fb      	ldr	r3, [r7, #12]
 8107032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107034:	b2da      	uxtb	r2, r3
 8107036:	8979      	ldrh	r1, [r7, #10]
 8107038:	2300      	movs	r3, #0
 810703a:	9300      	str	r3, [sp, #0]
 810703c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107040:	68f8      	ldr	r0, [r7, #12]
 8107042:	f001 f835 	bl	81080b0 <I2C_TransferConfig>
 8107046:	e00f      	b.n	8107068 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810704c:	b29a      	uxth	r2, r3
 810704e:	68fb      	ldr	r3, [r7, #12]
 8107050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8107052:	68fb      	ldr	r3, [r7, #12]
 8107054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107056:	b2da      	uxtb	r2, r3
 8107058:	8979      	ldrh	r1, [r7, #10]
 810705a:	2300      	movs	r3, #0
 810705c:	9300      	str	r3, [sp, #0]
 810705e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8107062:	68f8      	ldr	r0, [r7, #12]
 8107064:	f001 f824 	bl	81080b0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8107068:	68fb      	ldr	r3, [r7, #12]
 810706a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810706c:	b29b      	uxth	r3, r3
 810706e:	2b00      	cmp	r3, #0
 8107070:	d19a      	bne.n	8106fa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8107072:	697a      	ldr	r2, [r7, #20]
 8107074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8107076:	68f8      	ldr	r0, [r7, #12]
 8107078:	f000 ff77 	bl	8107f6a <I2C_WaitOnSTOPFlagUntilTimeout>
 810707c:	4603      	mov	r3, r0
 810707e:	2b00      	cmp	r3, #0
 8107080:	d001      	beq.n	8107086 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8107082:	2301      	movs	r3, #1
 8107084:	e01a      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107086:	68fb      	ldr	r3, [r7, #12]
 8107088:	681b      	ldr	r3, [r3, #0]
 810708a:	2220      	movs	r2, #32
 810708c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810708e:	68fb      	ldr	r3, [r7, #12]
 8107090:	681b      	ldr	r3, [r3, #0]
 8107092:	6859      	ldr	r1, [r3, #4]
 8107094:	68fb      	ldr	r3, [r7, #12]
 8107096:	681a      	ldr	r2, [r3, #0]
 8107098:	4b0b      	ldr	r3, [pc, #44]	; (81070c8 <HAL_I2C_Mem_Read+0x230>)
 810709a:	400b      	ands	r3, r1
 810709c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810709e:	68fb      	ldr	r3, [r7, #12]
 81070a0:	2220      	movs	r2, #32
 81070a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81070a6:	68fb      	ldr	r3, [r7, #12]
 81070a8:	2200      	movs	r2, #0
 81070aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81070ae:	68fb      	ldr	r3, [r7, #12]
 81070b0:	2200      	movs	r2, #0
 81070b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81070b6:	2300      	movs	r3, #0
 81070b8:	e000      	b.n	81070bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81070ba:	2302      	movs	r3, #2
  }
}
 81070bc:	4618      	mov	r0, r3
 81070be:	3718      	adds	r7, #24
 81070c0:	46bd      	mov	sp, r7
 81070c2:	bd80      	pop	{r7, pc}
 81070c4:	80002400 	.word	0x80002400
 81070c8:	fe00e800 	.word	0xfe00e800

081070cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 81070cc:	b580      	push	{r7, lr}
 81070ce:	b084      	sub	sp, #16
 81070d0:	af00      	add	r7, sp, #0
 81070d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	681b      	ldr	r3, [r3, #0]
 81070d8:	699b      	ldr	r3, [r3, #24]
 81070da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	681b      	ldr	r3, [r3, #0]
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 81070e4:	687b      	ldr	r3, [r7, #4]
 81070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81070e8:	2b00      	cmp	r3, #0
 81070ea:	d005      	beq.n	81070f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81070f0:	68ba      	ldr	r2, [r7, #8]
 81070f2:	68f9      	ldr	r1, [r7, #12]
 81070f4:	6878      	ldr	r0, [r7, #4]
 81070f6:	4798      	blx	r3
  }
}
 81070f8:	bf00      	nop
 81070fa:	3710      	adds	r7, #16
 81070fc:	46bd      	mov	sp, r7
 81070fe:	bd80      	pop	{r7, pc}

08107100 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8107100:	b580      	push	{r7, lr}
 8107102:	b086      	sub	sp, #24
 8107104:	af00      	add	r7, sp, #0
 8107106:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	699b      	ldr	r3, [r3, #24]
 810710e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	681b      	ldr	r3, [r3, #0]
 8107116:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107118:	697b      	ldr	r3, [r7, #20]
 810711a:	0a1b      	lsrs	r3, r3, #8
 810711c:	f003 0301 	and.w	r3, r3, #1
 8107120:	2b00      	cmp	r3, #0
 8107122:	d010      	beq.n	8107146 <HAL_I2C_ER_IRQHandler+0x46>
 8107124:	693b      	ldr	r3, [r7, #16]
 8107126:	09db      	lsrs	r3, r3, #7
 8107128:	f003 0301 	and.w	r3, r3, #1
 810712c:	2b00      	cmp	r3, #0
 810712e:	d00a      	beq.n	8107146 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107134:	f043 0201 	orr.w	r2, r3, #1
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	681b      	ldr	r3, [r3, #0]
 8107140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8107144:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107146:	697b      	ldr	r3, [r7, #20]
 8107148:	0a9b      	lsrs	r3, r3, #10
 810714a:	f003 0301 	and.w	r3, r3, #1
 810714e:	2b00      	cmp	r3, #0
 8107150:	d010      	beq.n	8107174 <HAL_I2C_ER_IRQHandler+0x74>
 8107152:	693b      	ldr	r3, [r7, #16]
 8107154:	09db      	lsrs	r3, r3, #7
 8107156:	f003 0301 	and.w	r3, r3, #1
 810715a:	2b00      	cmp	r3, #0
 810715c:	d00a      	beq.n	8107174 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107162:	f043 0208 	orr.w	r2, r3, #8
 8107166:	687b      	ldr	r3, [r7, #4]
 8107168:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	681b      	ldr	r3, [r3, #0]
 810716e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8107172:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8107174:	697b      	ldr	r3, [r7, #20]
 8107176:	0a5b      	lsrs	r3, r3, #9
 8107178:	f003 0301 	and.w	r3, r3, #1
 810717c:	2b00      	cmp	r3, #0
 810717e:	d010      	beq.n	81071a2 <HAL_I2C_ER_IRQHandler+0xa2>
 8107180:	693b      	ldr	r3, [r7, #16]
 8107182:	09db      	lsrs	r3, r3, #7
 8107184:	f003 0301 	and.w	r3, r3, #1
 8107188:	2b00      	cmp	r3, #0
 810718a:	d00a      	beq.n	81071a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 810718c:	687b      	ldr	r3, [r7, #4]
 810718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107190:	f043 0202 	orr.w	r2, r3, #2
 8107194:	687b      	ldr	r3, [r7, #4]
 8107196:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	681b      	ldr	r3, [r3, #0]
 810719c:	f44f 7200 	mov.w	r2, #512	; 0x200
 81071a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 81071a8:	68fb      	ldr	r3, [r7, #12]
 81071aa:	f003 030b 	and.w	r3, r3, #11
 81071ae:	2b00      	cmp	r3, #0
 81071b0:	d003      	beq.n	81071ba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 81071b2:	68f9      	ldr	r1, [r7, #12]
 81071b4:	6878      	ldr	r0, [r7, #4]
 81071b6:	f000 fd1f 	bl	8107bf8 <I2C_ITError>
  }
}
 81071ba:	bf00      	nop
 81071bc:	3718      	adds	r7, #24
 81071be:	46bd      	mov	sp, r7
 81071c0:	bd80      	pop	{r7, pc}

081071c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81071c2:	b480      	push	{r7}
 81071c4:	b083      	sub	sp, #12
 81071c6:	af00      	add	r7, sp, #0
 81071c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 81071ca:	bf00      	nop
 81071cc:	370c      	adds	r7, #12
 81071ce:	46bd      	mov	sp, r7
 81071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071d4:	4770      	bx	lr

081071d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81071d6:	b480      	push	{r7}
 81071d8:	b083      	sub	sp, #12
 81071da:	af00      	add	r7, sp, #0
 81071dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 81071de:	bf00      	nop
 81071e0:	370c      	adds	r7, #12
 81071e2:	46bd      	mov	sp, r7
 81071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071e8:	4770      	bx	lr

081071ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 81071ea:	b480      	push	{r7}
 81071ec:	b083      	sub	sp, #12
 81071ee:	af00      	add	r7, sp, #0
 81071f0:	6078      	str	r0, [r7, #4]
 81071f2:	460b      	mov	r3, r1
 81071f4:	70fb      	strb	r3, [r7, #3]
 81071f6:	4613      	mov	r3, r2
 81071f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 81071fa:	bf00      	nop
 81071fc:	370c      	adds	r7, #12
 81071fe:	46bd      	mov	sp, r7
 8107200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107204:	4770      	bx	lr

08107206 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107206:	b480      	push	{r7}
 8107208:	b083      	sub	sp, #12
 810720a:	af00      	add	r7, sp, #0
 810720c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 810720e:	bf00      	nop
 8107210:	370c      	adds	r7, #12
 8107212:	46bd      	mov	sp, r7
 8107214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107218:	4770      	bx	lr

0810721a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 810721a:	b480      	push	{r7}
 810721c:	b083      	sub	sp, #12
 810721e:	af00      	add	r7, sp, #0
 8107220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8107222:	bf00      	nop
 8107224:	370c      	adds	r7, #12
 8107226:	46bd      	mov	sp, r7
 8107228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810722c:	4770      	bx	lr

0810722e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810722e:	b480      	push	{r7}
 8107230:	b083      	sub	sp, #12
 8107232:	af00      	add	r7, sp, #0
 8107234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8107236:	bf00      	nop
 8107238:	370c      	adds	r7, #12
 810723a:	46bd      	mov	sp, r7
 810723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107240:	4770      	bx	lr

08107242 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8107242:	b580      	push	{r7, lr}
 8107244:	b086      	sub	sp, #24
 8107246:	af00      	add	r7, sp, #0
 8107248:	60f8      	str	r0, [r7, #12]
 810724a:	60b9      	str	r1, [r7, #8]
 810724c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 810724e:	68fb      	ldr	r3, [r7, #12]
 8107250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107252:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8107254:	68bb      	ldr	r3, [r7, #8]
 8107256:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810725e:	2b01      	cmp	r3, #1
 8107260:	d101      	bne.n	8107266 <I2C_Slave_ISR_IT+0x24>
 8107262:	2302      	movs	r3, #2
 8107264:	e0ec      	b.n	8107440 <I2C_Slave_ISR_IT+0x1fe>
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	2201      	movs	r2, #1
 810726a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 810726e:	693b      	ldr	r3, [r7, #16]
 8107270:	095b      	lsrs	r3, r3, #5
 8107272:	f003 0301 	and.w	r3, r3, #1
 8107276:	2b00      	cmp	r3, #0
 8107278:	d009      	beq.n	810728e <I2C_Slave_ISR_IT+0x4c>
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	095b      	lsrs	r3, r3, #5
 810727e:	f003 0301 	and.w	r3, r3, #1
 8107282:	2b00      	cmp	r3, #0
 8107284:	d003      	beq.n	810728e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8107286:	6939      	ldr	r1, [r7, #16]
 8107288:	68f8      	ldr	r0, [r7, #12]
 810728a:	f000 fa67 	bl	810775c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810728e:	693b      	ldr	r3, [r7, #16]
 8107290:	091b      	lsrs	r3, r3, #4
 8107292:	f003 0301 	and.w	r3, r3, #1
 8107296:	2b00      	cmp	r3, #0
 8107298:	d04d      	beq.n	8107336 <I2C_Slave_ISR_IT+0xf4>
 810729a:	687b      	ldr	r3, [r7, #4]
 810729c:	091b      	lsrs	r3, r3, #4
 810729e:	f003 0301 	and.w	r3, r3, #1
 81072a2:	2b00      	cmp	r3, #0
 81072a4:	d047      	beq.n	8107336 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 81072a6:	68fb      	ldr	r3, [r7, #12]
 81072a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81072aa:	b29b      	uxth	r3, r3
 81072ac:	2b00      	cmp	r3, #0
 81072ae:	d128      	bne.n	8107302 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81072b0:	68fb      	ldr	r3, [r7, #12]
 81072b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81072b6:	b2db      	uxtb	r3, r3
 81072b8:	2b28      	cmp	r3, #40	; 0x28
 81072ba:	d108      	bne.n	81072ce <I2C_Slave_ISR_IT+0x8c>
 81072bc:	697b      	ldr	r3, [r7, #20]
 81072be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072c2:	d104      	bne.n	81072ce <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 81072c4:	6939      	ldr	r1, [r7, #16]
 81072c6:	68f8      	ldr	r0, [r7, #12]
 81072c8:	f000 fc40 	bl	8107b4c <I2C_ITListenCplt>
 81072cc:	e032      	b.n	8107334 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81072ce:	68fb      	ldr	r3, [r7, #12]
 81072d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81072d4:	b2db      	uxtb	r3, r3
 81072d6:	2b29      	cmp	r3, #41	; 0x29
 81072d8:	d10e      	bne.n	81072f8 <I2C_Slave_ISR_IT+0xb6>
 81072da:	697b      	ldr	r3, [r7, #20]
 81072dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81072e0:	d00a      	beq.n	81072f8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81072e2:	68fb      	ldr	r3, [r7, #12]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	2210      	movs	r2, #16
 81072e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 81072ea:	68f8      	ldr	r0, [r7, #12]
 81072ec:	f000 fd7b 	bl	8107de6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81072f0:	68f8      	ldr	r0, [r7, #12]
 81072f2:	f000 f9d5 	bl	81076a0 <I2C_ITSlaveSeqCplt>
 81072f6:	e01d      	b.n	8107334 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81072f8:	68fb      	ldr	r3, [r7, #12]
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	2210      	movs	r2, #16
 81072fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8107300:	e096      	b.n	8107430 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107302:	68fb      	ldr	r3, [r7, #12]
 8107304:	681b      	ldr	r3, [r3, #0]
 8107306:	2210      	movs	r2, #16
 8107308:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810730a:	68fb      	ldr	r3, [r7, #12]
 810730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810730e:	f043 0204 	orr.w	r2, r3, #4
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8107316:	697b      	ldr	r3, [r7, #20]
 8107318:	2b00      	cmp	r3, #0
 810731a:	d004      	beq.n	8107326 <I2C_Slave_ISR_IT+0xe4>
 810731c:	697b      	ldr	r3, [r7, #20]
 810731e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107322:	f040 8085 	bne.w	8107430 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8107326:	68fb      	ldr	r3, [r7, #12]
 8107328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810732a:	4619      	mov	r1, r3
 810732c:	68f8      	ldr	r0, [r7, #12]
 810732e:	f000 fc63 	bl	8107bf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8107332:	e07d      	b.n	8107430 <I2C_Slave_ISR_IT+0x1ee>
 8107334:	e07c      	b.n	8107430 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8107336:	693b      	ldr	r3, [r7, #16]
 8107338:	089b      	lsrs	r3, r3, #2
 810733a:	f003 0301 	and.w	r3, r3, #1
 810733e:	2b00      	cmp	r3, #0
 8107340:	d030      	beq.n	81073a4 <I2C_Slave_ISR_IT+0x162>
 8107342:	687b      	ldr	r3, [r7, #4]
 8107344:	089b      	lsrs	r3, r3, #2
 8107346:	f003 0301 	and.w	r3, r3, #1
 810734a:	2b00      	cmp	r3, #0
 810734c:	d02a      	beq.n	81073a4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 810734e:	68fb      	ldr	r3, [r7, #12]
 8107350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107352:	b29b      	uxth	r3, r3
 8107354:	2b00      	cmp	r3, #0
 8107356:	d018      	beq.n	810738a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107358:	68fb      	ldr	r3, [r7, #12]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810735e:	68fb      	ldr	r3, [r7, #12]
 8107360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107362:	b2d2      	uxtb	r2, r2
 8107364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810736a:	1c5a      	adds	r2, r3, #1
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8107370:	68fb      	ldr	r3, [r7, #12]
 8107372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107374:	3b01      	subs	r3, #1
 8107376:	b29a      	uxth	r2, r3
 8107378:	68fb      	ldr	r3, [r7, #12]
 810737a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107380:	b29b      	uxth	r3, r3
 8107382:	3b01      	subs	r3, #1
 8107384:	b29a      	uxth	r2, r3
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810738e:	b29b      	uxth	r3, r3
 8107390:	2b00      	cmp	r3, #0
 8107392:	d14f      	bne.n	8107434 <I2C_Slave_ISR_IT+0x1f2>
 8107394:	697b      	ldr	r3, [r7, #20]
 8107396:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810739a:	d04b      	beq.n	8107434 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 810739c:	68f8      	ldr	r0, [r7, #12]
 810739e:	f000 f97f 	bl	81076a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 81073a2:	e047      	b.n	8107434 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81073a4:	693b      	ldr	r3, [r7, #16]
 81073a6:	08db      	lsrs	r3, r3, #3
 81073a8:	f003 0301 	and.w	r3, r3, #1
 81073ac:	2b00      	cmp	r3, #0
 81073ae:	d00a      	beq.n	81073c6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	08db      	lsrs	r3, r3, #3
 81073b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 81073b8:	2b00      	cmp	r3, #0
 81073ba:	d004      	beq.n	81073c6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 81073bc:	6939      	ldr	r1, [r7, #16]
 81073be:	68f8      	ldr	r0, [r7, #12]
 81073c0:	f000 f8ea 	bl	8107598 <I2C_ITAddrCplt>
 81073c4:	e037      	b.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81073c6:	693b      	ldr	r3, [r7, #16]
 81073c8:	085b      	lsrs	r3, r3, #1
 81073ca:	f003 0301 	and.w	r3, r3, #1
 81073ce:	2b00      	cmp	r3, #0
 81073d0:	d031      	beq.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	085b      	lsrs	r3, r3, #1
 81073d6:	f003 0301 	and.w	r3, r3, #1
 81073da:	2b00      	cmp	r3, #0
 81073dc:	d02b      	beq.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073e2:	b29b      	uxth	r3, r3
 81073e4:	2b00      	cmp	r3, #0
 81073e6:	d018      	beq.n	810741a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81073e8:	68fb      	ldr	r3, [r7, #12]
 81073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81073ec:	781a      	ldrb	r2, [r3, #0]
 81073ee:	68fb      	ldr	r3, [r7, #12]
 81073f0:	681b      	ldr	r3, [r3, #0]
 81073f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81073f8:	1c5a      	adds	r2, r3, #1
 81073fa:	68fb      	ldr	r3, [r7, #12]
 81073fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107402:	b29b      	uxth	r3, r3
 8107404:	3b01      	subs	r3, #1
 8107406:	b29a      	uxth	r2, r3
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810740c:	68fb      	ldr	r3, [r7, #12]
 810740e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107410:	3b01      	subs	r3, #1
 8107412:	b29a      	uxth	r2, r3
 8107414:	68fb      	ldr	r3, [r7, #12]
 8107416:	851a      	strh	r2, [r3, #40]	; 0x28
 8107418:	e00d      	b.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 810741a:	697b      	ldr	r3, [r7, #20]
 810741c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107420:	d002      	beq.n	8107428 <I2C_Slave_ISR_IT+0x1e6>
 8107422:	697b      	ldr	r3, [r7, #20]
 8107424:	2b00      	cmp	r3, #0
 8107426:	d106      	bne.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107428:	68f8      	ldr	r0, [r7, #12]
 810742a:	f000 f939 	bl	81076a0 <I2C_ITSlaveSeqCplt>
 810742e:	e002      	b.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8107430:	bf00      	nop
 8107432:	e000      	b.n	8107436 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8107434:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107436:	68fb      	ldr	r3, [r7, #12]
 8107438:	2200      	movs	r2, #0
 810743a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810743e:	2300      	movs	r3, #0
}
 8107440:	4618      	mov	r0, r3
 8107442:	3718      	adds	r7, #24
 8107444:	46bd      	mov	sp, r7
 8107446:	bd80      	pop	{r7, pc}

08107448 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107448:	b580      	push	{r7, lr}
 810744a:	b086      	sub	sp, #24
 810744c:	af02      	add	r7, sp, #8
 810744e:	60f8      	str	r0, [r7, #12]
 8107450:	4608      	mov	r0, r1
 8107452:	4611      	mov	r1, r2
 8107454:	461a      	mov	r2, r3
 8107456:	4603      	mov	r3, r0
 8107458:	817b      	strh	r3, [r7, #10]
 810745a:	460b      	mov	r3, r1
 810745c:	813b      	strh	r3, [r7, #8]
 810745e:	4613      	mov	r3, r2
 8107460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8107462:	88fb      	ldrh	r3, [r7, #6]
 8107464:	b2da      	uxtb	r2, r3
 8107466:	8979      	ldrh	r1, [r7, #10]
 8107468:	4b20      	ldr	r3, [pc, #128]	; (81074ec <I2C_RequestMemoryWrite+0xa4>)
 810746a:	9300      	str	r3, [sp, #0]
 810746c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8107470:	68f8      	ldr	r0, [r7, #12]
 8107472:	f000 fe1d 	bl	81080b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107476:	69fa      	ldr	r2, [r7, #28]
 8107478:	69b9      	ldr	r1, [r7, #24]
 810747a:	68f8      	ldr	r0, [r7, #12]
 810747c:	f000 fd35 	bl	8107eea <I2C_WaitOnTXISFlagUntilTimeout>
 8107480:	4603      	mov	r3, r0
 8107482:	2b00      	cmp	r3, #0
 8107484:	d001      	beq.n	810748a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8107486:	2301      	movs	r3, #1
 8107488:	e02c      	b.n	81074e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810748a:	88fb      	ldrh	r3, [r7, #6]
 810748c:	2b01      	cmp	r3, #1
 810748e:	d105      	bne.n	810749c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107490:	893b      	ldrh	r3, [r7, #8]
 8107492:	b2da      	uxtb	r2, r3
 8107494:	68fb      	ldr	r3, [r7, #12]
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	629a      	str	r2, [r3, #40]	; 0x28
 810749a:	e015      	b.n	81074c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810749c:	893b      	ldrh	r3, [r7, #8]
 810749e:	0a1b      	lsrs	r3, r3, #8
 81074a0:	b29b      	uxth	r3, r3
 81074a2:	b2da      	uxtb	r2, r3
 81074a4:	68fb      	ldr	r3, [r7, #12]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81074aa:	69fa      	ldr	r2, [r7, #28]
 81074ac:	69b9      	ldr	r1, [r7, #24]
 81074ae:	68f8      	ldr	r0, [r7, #12]
 81074b0:	f000 fd1b 	bl	8107eea <I2C_WaitOnTXISFlagUntilTimeout>
 81074b4:	4603      	mov	r3, r0
 81074b6:	2b00      	cmp	r3, #0
 81074b8:	d001      	beq.n	81074be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81074ba:	2301      	movs	r3, #1
 81074bc:	e012      	b.n	81074e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81074be:	893b      	ldrh	r3, [r7, #8]
 81074c0:	b2da      	uxtb	r2, r3
 81074c2:	68fb      	ldr	r3, [r7, #12]
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81074c8:	69fb      	ldr	r3, [r7, #28]
 81074ca:	9300      	str	r3, [sp, #0]
 81074cc:	69bb      	ldr	r3, [r7, #24]
 81074ce:	2200      	movs	r2, #0
 81074d0:	2180      	movs	r1, #128	; 0x80
 81074d2:	68f8      	ldr	r0, [r7, #12]
 81074d4:	f000 fcc9 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 81074d8:	4603      	mov	r3, r0
 81074da:	2b00      	cmp	r3, #0
 81074dc:	d001      	beq.n	81074e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81074de:	2301      	movs	r3, #1
 81074e0:	e000      	b.n	81074e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81074e2:	2300      	movs	r3, #0
}
 81074e4:	4618      	mov	r0, r3
 81074e6:	3710      	adds	r7, #16
 81074e8:	46bd      	mov	sp, r7
 81074ea:	bd80      	pop	{r7, pc}
 81074ec:	80002000 	.word	0x80002000

081074f0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81074f0:	b580      	push	{r7, lr}
 81074f2:	b086      	sub	sp, #24
 81074f4:	af02      	add	r7, sp, #8
 81074f6:	60f8      	str	r0, [r7, #12]
 81074f8:	4608      	mov	r0, r1
 81074fa:	4611      	mov	r1, r2
 81074fc:	461a      	mov	r2, r3
 81074fe:	4603      	mov	r3, r0
 8107500:	817b      	strh	r3, [r7, #10]
 8107502:	460b      	mov	r3, r1
 8107504:	813b      	strh	r3, [r7, #8]
 8107506:	4613      	mov	r3, r2
 8107508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810750a:	88fb      	ldrh	r3, [r7, #6]
 810750c:	b2da      	uxtb	r2, r3
 810750e:	8979      	ldrh	r1, [r7, #10]
 8107510:	4b20      	ldr	r3, [pc, #128]	; (8107594 <I2C_RequestMemoryRead+0xa4>)
 8107512:	9300      	str	r3, [sp, #0]
 8107514:	2300      	movs	r3, #0
 8107516:	68f8      	ldr	r0, [r7, #12]
 8107518:	f000 fdca 	bl	81080b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810751c:	69fa      	ldr	r2, [r7, #28]
 810751e:	69b9      	ldr	r1, [r7, #24]
 8107520:	68f8      	ldr	r0, [r7, #12]
 8107522:	f000 fce2 	bl	8107eea <I2C_WaitOnTXISFlagUntilTimeout>
 8107526:	4603      	mov	r3, r0
 8107528:	2b00      	cmp	r3, #0
 810752a:	d001      	beq.n	8107530 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810752c:	2301      	movs	r3, #1
 810752e:	e02c      	b.n	810758a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107530:	88fb      	ldrh	r3, [r7, #6]
 8107532:	2b01      	cmp	r3, #1
 8107534:	d105      	bne.n	8107542 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107536:	893b      	ldrh	r3, [r7, #8]
 8107538:	b2da      	uxtb	r2, r3
 810753a:	68fb      	ldr	r3, [r7, #12]
 810753c:	681b      	ldr	r3, [r3, #0]
 810753e:	629a      	str	r2, [r3, #40]	; 0x28
 8107540:	e015      	b.n	810756e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107542:	893b      	ldrh	r3, [r7, #8]
 8107544:	0a1b      	lsrs	r3, r3, #8
 8107546:	b29b      	uxth	r3, r3
 8107548:	b2da      	uxtb	r2, r3
 810754a:	68fb      	ldr	r3, [r7, #12]
 810754c:	681b      	ldr	r3, [r3, #0]
 810754e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107550:	69fa      	ldr	r2, [r7, #28]
 8107552:	69b9      	ldr	r1, [r7, #24]
 8107554:	68f8      	ldr	r0, [r7, #12]
 8107556:	f000 fcc8 	bl	8107eea <I2C_WaitOnTXISFlagUntilTimeout>
 810755a:	4603      	mov	r3, r0
 810755c:	2b00      	cmp	r3, #0
 810755e:	d001      	beq.n	8107564 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8107560:	2301      	movs	r3, #1
 8107562:	e012      	b.n	810758a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107564:	893b      	ldrh	r3, [r7, #8]
 8107566:	b2da      	uxtb	r2, r3
 8107568:	68fb      	ldr	r3, [r7, #12]
 810756a:	681b      	ldr	r3, [r3, #0]
 810756c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810756e:	69fb      	ldr	r3, [r7, #28]
 8107570:	9300      	str	r3, [sp, #0]
 8107572:	69bb      	ldr	r3, [r7, #24]
 8107574:	2200      	movs	r2, #0
 8107576:	2140      	movs	r1, #64	; 0x40
 8107578:	68f8      	ldr	r0, [r7, #12]
 810757a:	f000 fc76 	bl	8107e6a <I2C_WaitOnFlagUntilTimeout>
 810757e:	4603      	mov	r3, r0
 8107580:	2b00      	cmp	r3, #0
 8107582:	d001      	beq.n	8107588 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8107584:	2301      	movs	r3, #1
 8107586:	e000      	b.n	810758a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8107588:	2300      	movs	r3, #0
}
 810758a:	4618      	mov	r0, r3
 810758c:	3710      	adds	r7, #16
 810758e:	46bd      	mov	sp, r7
 8107590:	bd80      	pop	{r7, pc}
 8107592:	bf00      	nop
 8107594:	80002000 	.word	0x80002000

08107598 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107598:	b580      	push	{r7, lr}
 810759a:	b084      	sub	sp, #16
 810759c:	af00      	add	r7, sp, #0
 810759e:	6078      	str	r0, [r7, #4]
 81075a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81075a8:	b2db      	uxtb	r3, r3
 81075aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81075ae:	2b28      	cmp	r3, #40	; 0x28
 81075b0:	d16a      	bne.n	8107688 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	681b      	ldr	r3, [r3, #0]
 81075b6:	699b      	ldr	r3, [r3, #24]
 81075b8:	0c1b      	lsrs	r3, r3, #16
 81075ba:	b2db      	uxtb	r3, r3
 81075bc:	f003 0301 	and.w	r3, r3, #1
 81075c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	681b      	ldr	r3, [r3, #0]
 81075c6:	699b      	ldr	r3, [r3, #24]
 81075c8:	0c1b      	lsrs	r3, r3, #16
 81075ca:	b29b      	uxth	r3, r3
 81075cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81075d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	689b      	ldr	r3, [r3, #8]
 81075d8:	b29b      	uxth	r3, r3
 81075da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 81075de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 81075e0:	687b      	ldr	r3, [r7, #4]
 81075e2:	681b      	ldr	r3, [r3, #0]
 81075e4:	68db      	ldr	r3, [r3, #12]
 81075e6:	b29b      	uxth	r3, r3
 81075e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 81075ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81075ee:	687b      	ldr	r3, [r7, #4]
 81075f0:	68db      	ldr	r3, [r3, #12]
 81075f2:	2b02      	cmp	r3, #2
 81075f4:	d138      	bne.n	8107668 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 81075f6:	897b      	ldrh	r3, [r7, #10]
 81075f8:	09db      	lsrs	r3, r3, #7
 81075fa:	b29a      	uxth	r2, r3
 81075fc:	89bb      	ldrh	r3, [r7, #12]
 81075fe:	4053      	eors	r3, r2
 8107600:	b29b      	uxth	r3, r3
 8107602:	f003 0306 	and.w	r3, r3, #6
 8107606:	2b00      	cmp	r3, #0
 8107608:	d11c      	bne.n	8107644 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 810760a:	897b      	ldrh	r3, [r7, #10]
 810760c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 810760e:	687b      	ldr	r3, [r7, #4]
 8107610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107612:	1c5a      	adds	r2, r3, #1
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810761c:	2b02      	cmp	r3, #2
 810761e:	d13b      	bne.n	8107698 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107620:	687b      	ldr	r3, [r7, #4]
 8107622:	2200      	movs	r2, #0
 8107624:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	681b      	ldr	r3, [r3, #0]
 810762a:	2208      	movs	r2, #8
 810762c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	2200      	movs	r2, #0
 8107632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107636:	89ba      	ldrh	r2, [r7, #12]
 8107638:	7bfb      	ldrb	r3, [r7, #15]
 810763a:	4619      	mov	r1, r3
 810763c:	6878      	ldr	r0, [r7, #4]
 810763e:	f7ff fdd4 	bl	81071ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107642:	e029      	b.n	8107698 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107644:	893b      	ldrh	r3, [r7, #8]
 8107646:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810764c:	6878      	ldr	r0, [r7, #4]
 810764e:	f000 fd5d 	bl	810810c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	2200      	movs	r2, #0
 8107656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810765a:	89ba      	ldrh	r2, [r7, #12]
 810765c:	7bfb      	ldrb	r3, [r7, #15]
 810765e:	4619      	mov	r1, r3
 8107660:	6878      	ldr	r0, [r7, #4]
 8107662:	f7ff fdc2 	bl	81071ea <HAL_I2C_AddrCallback>
}
 8107666:	e017      	b.n	8107698 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107668:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810766c:	6878      	ldr	r0, [r7, #4]
 810766e:	f000 fd4d 	bl	810810c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	2200      	movs	r2, #0
 8107676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810767a:	89ba      	ldrh	r2, [r7, #12]
 810767c:	7bfb      	ldrb	r3, [r7, #15]
 810767e:	4619      	mov	r1, r3
 8107680:	6878      	ldr	r0, [r7, #4]
 8107682:	f7ff fdb2 	bl	81071ea <HAL_I2C_AddrCallback>
}
 8107686:	e007      	b.n	8107698 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	2208      	movs	r2, #8
 810768e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	2200      	movs	r2, #0
 8107694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107698:	bf00      	nop
 810769a:	3710      	adds	r7, #16
 810769c:	46bd      	mov	sp, r7
 810769e:	bd80      	pop	{r7, pc}

081076a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 81076a0:	b580      	push	{r7, lr}
 81076a2:	b084      	sub	sp, #16
 81076a4:	af00      	add	r7, sp, #0
 81076a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 81076a8:	687b      	ldr	r3, [r7, #4]
 81076aa:	681b      	ldr	r3, [r3, #0]
 81076ac:	681b      	ldr	r3, [r3, #0]
 81076ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	2200      	movs	r2, #0
 81076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81076b8:	68fb      	ldr	r3, [r7, #12]
 81076ba:	0b9b      	lsrs	r3, r3, #14
 81076bc:	f003 0301 	and.w	r3, r3, #1
 81076c0:	2b00      	cmp	r3, #0
 81076c2:	d008      	beq.n	81076d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	681a      	ldr	r2, [r3, #0]
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81076d2:	601a      	str	r2, [r3, #0]
 81076d4:	e00d      	b.n	81076f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81076d6:	68fb      	ldr	r3, [r7, #12]
 81076d8:	0bdb      	lsrs	r3, r3, #15
 81076da:	f003 0301 	and.w	r3, r3, #1
 81076de:	2b00      	cmp	r3, #0
 81076e0:	d007      	beq.n	81076f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81076e2:	687b      	ldr	r3, [r7, #4]
 81076e4:	681b      	ldr	r3, [r3, #0]
 81076e6:	681a      	ldr	r2, [r3, #0]
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	681b      	ldr	r3, [r3, #0]
 81076ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81076f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81076f8:	b2db      	uxtb	r3, r3
 81076fa:	2b29      	cmp	r3, #41	; 0x29
 81076fc:	d112      	bne.n	8107724 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	2228      	movs	r2, #40	; 0x28
 8107702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	2221      	movs	r2, #33	; 0x21
 810770a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 810770c:	2101      	movs	r1, #1
 810770e:	6878      	ldr	r0, [r7, #4]
 8107710:	f000 fcfc 	bl	810810c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107714:	687b      	ldr	r3, [r7, #4]
 8107716:	2200      	movs	r2, #0
 8107718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810771c:	6878      	ldr	r0, [r7, #4]
 810771e:	f7ff fd50 	bl	81071c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107722:	e017      	b.n	8107754 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810772a:	b2db      	uxtb	r3, r3
 810772c:	2b2a      	cmp	r3, #42	; 0x2a
 810772e:	d111      	bne.n	8107754 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	2228      	movs	r2, #40	; 0x28
 8107734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107738:	687b      	ldr	r3, [r7, #4]
 810773a:	2222      	movs	r2, #34	; 0x22
 810773c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 810773e:	2102      	movs	r1, #2
 8107740:	6878      	ldr	r0, [r7, #4]
 8107742:	f000 fce3 	bl	810810c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	2200      	movs	r2, #0
 810774a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 810774e:	6878      	ldr	r0, [r7, #4]
 8107750:	f7ff fd41 	bl	81071d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8107754:	bf00      	nop
 8107756:	3710      	adds	r7, #16
 8107758:	46bd      	mov	sp, r7
 810775a:	bd80      	pop	{r7, pc}

0810775c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810775c:	b580      	push	{r7, lr}
 810775e:	b086      	sub	sp, #24
 8107760:	af00      	add	r7, sp, #0
 8107762:	6078      	str	r0, [r7, #4]
 8107764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107766:	687b      	ldr	r3, [r7, #4]
 8107768:	681b      	ldr	r3, [r3, #0]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 810776e:	683b      	ldr	r3, [r7, #0]
 8107770:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107772:	687b      	ldr	r3, [r7, #4]
 8107774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107778:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	2220      	movs	r2, #32
 8107780:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107782:	7bfb      	ldrb	r3, [r7, #15]
 8107784:	2b21      	cmp	r3, #33	; 0x21
 8107786:	d002      	beq.n	810778e <I2C_ITSlaveCplt+0x32>
 8107788:	7bfb      	ldrb	r3, [r7, #15]
 810778a:	2b29      	cmp	r3, #41	; 0x29
 810778c:	d108      	bne.n	81077a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 810778e:	f248 0101 	movw	r1, #32769	; 0x8001
 8107792:	6878      	ldr	r0, [r7, #4]
 8107794:	f000 fcba 	bl	810810c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	2221      	movs	r2, #33	; 0x21
 810779c:	631a      	str	r2, [r3, #48]	; 0x30
 810779e:	e00d      	b.n	81077bc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 81077a0:	7bfb      	ldrb	r3, [r7, #15]
 81077a2:	2b22      	cmp	r3, #34	; 0x22
 81077a4:	d002      	beq.n	81077ac <I2C_ITSlaveCplt+0x50>
 81077a6:	7bfb      	ldrb	r3, [r7, #15]
 81077a8:	2b2a      	cmp	r3, #42	; 0x2a
 81077aa:	d107      	bne.n	81077bc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 81077ac:	f248 0102 	movw	r1, #32770	; 0x8002
 81077b0:	6878      	ldr	r0, [r7, #4]
 81077b2:	f000 fcab 	bl	810810c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 81077b6:	687b      	ldr	r3, [r7, #4]
 81077b8:	2222      	movs	r2, #34	; 0x22
 81077ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	685a      	ldr	r2, [r3, #4]
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	681b      	ldr	r3, [r3, #0]
 81077c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81077ca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	681b      	ldr	r3, [r3, #0]
 81077d0:	6859      	ldr	r1, [r3, #4]
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	681a      	ldr	r2, [r3, #0]
 81077d6:	4b80      	ldr	r3, [pc, #512]	; (81079d8 <I2C_ITSlaveCplt+0x27c>)
 81077d8:	400b      	ands	r3, r1
 81077da:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 81077dc:	6878      	ldr	r0, [r7, #4]
 81077de:	f000 fb02 	bl	8107de6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 81077e2:	693b      	ldr	r3, [r7, #16]
 81077e4:	0b9b      	lsrs	r3, r3, #14
 81077e6:	f003 0301 	and.w	r3, r3, #1
 81077ea:	2b00      	cmp	r3, #0
 81077ec:	d07a      	beq.n	81078e4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81077ee:	687b      	ldr	r3, [r7, #4]
 81077f0:	681b      	ldr	r3, [r3, #0]
 81077f2:	681a      	ldr	r2, [r3, #0]
 81077f4:	687b      	ldr	r3, [r7, #4]
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81077fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 81077fe:	687b      	ldr	r3, [r7, #4]
 8107800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107802:	2b00      	cmp	r3, #0
 8107804:	f000 8111 	beq.w	8107a2a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810780c:	681b      	ldr	r3, [r3, #0]
 810780e:	4a73      	ldr	r2, [pc, #460]	; (81079dc <I2C_ITSlaveCplt+0x280>)
 8107810:	4293      	cmp	r3, r2
 8107812:	d059      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107814:	687b      	ldr	r3, [r7, #4]
 8107816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	4a71      	ldr	r2, [pc, #452]	; (81079e0 <I2C_ITSlaveCplt+0x284>)
 810781c:	4293      	cmp	r3, r2
 810781e:	d053      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107824:	681b      	ldr	r3, [r3, #0]
 8107826:	4a6f      	ldr	r2, [pc, #444]	; (81079e4 <I2C_ITSlaveCplt+0x288>)
 8107828:	4293      	cmp	r3, r2
 810782a:	d04d      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107830:	681b      	ldr	r3, [r3, #0]
 8107832:	4a6d      	ldr	r2, [pc, #436]	; (81079e8 <I2C_ITSlaveCplt+0x28c>)
 8107834:	4293      	cmp	r3, r2
 8107836:	d047      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810783c:	681b      	ldr	r3, [r3, #0]
 810783e:	4a6b      	ldr	r2, [pc, #428]	; (81079ec <I2C_ITSlaveCplt+0x290>)
 8107840:	4293      	cmp	r3, r2
 8107842:	d041      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	4a69      	ldr	r2, [pc, #420]	; (81079f0 <I2C_ITSlaveCplt+0x294>)
 810784c:	4293      	cmp	r3, r2
 810784e:	d03b      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107854:	681b      	ldr	r3, [r3, #0]
 8107856:	4a67      	ldr	r2, [pc, #412]	; (81079f4 <I2C_ITSlaveCplt+0x298>)
 8107858:	4293      	cmp	r3, r2
 810785a:	d035      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107860:	681b      	ldr	r3, [r3, #0]
 8107862:	4a65      	ldr	r2, [pc, #404]	; (81079f8 <I2C_ITSlaveCplt+0x29c>)
 8107864:	4293      	cmp	r3, r2
 8107866:	d02f      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107868:	687b      	ldr	r3, [r7, #4]
 810786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810786c:	681b      	ldr	r3, [r3, #0]
 810786e:	4a63      	ldr	r2, [pc, #396]	; (81079fc <I2C_ITSlaveCplt+0x2a0>)
 8107870:	4293      	cmp	r3, r2
 8107872:	d029      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	4a61      	ldr	r2, [pc, #388]	; (8107a00 <I2C_ITSlaveCplt+0x2a4>)
 810787c:	4293      	cmp	r3, r2
 810787e:	d023      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107884:	681b      	ldr	r3, [r3, #0]
 8107886:	4a5f      	ldr	r2, [pc, #380]	; (8107a04 <I2C_ITSlaveCplt+0x2a8>)
 8107888:	4293      	cmp	r3, r2
 810788a:	d01d      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107890:	681b      	ldr	r3, [r3, #0]
 8107892:	4a5d      	ldr	r2, [pc, #372]	; (8107a08 <I2C_ITSlaveCplt+0x2ac>)
 8107894:	4293      	cmp	r3, r2
 8107896:	d017      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810789c:	681b      	ldr	r3, [r3, #0]
 810789e:	4a5b      	ldr	r2, [pc, #364]	; (8107a0c <I2C_ITSlaveCplt+0x2b0>)
 81078a0:	4293      	cmp	r3, r2
 81078a2:	d011      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078a8:	681b      	ldr	r3, [r3, #0]
 81078aa:	4a59      	ldr	r2, [pc, #356]	; (8107a10 <I2C_ITSlaveCplt+0x2b4>)
 81078ac:	4293      	cmp	r3, r2
 81078ae:	d00b      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 81078b0:	687b      	ldr	r3, [r7, #4]
 81078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078b4:	681b      	ldr	r3, [r3, #0]
 81078b6:	4a57      	ldr	r2, [pc, #348]	; (8107a14 <I2C_ITSlaveCplt+0x2b8>)
 81078b8:	4293      	cmp	r3, r2
 81078ba:	d005      	beq.n	81078c8 <I2C_ITSlaveCplt+0x16c>
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078c0:	681b      	ldr	r3, [r3, #0]
 81078c2:	4a55      	ldr	r2, [pc, #340]	; (8107a18 <I2C_ITSlaveCplt+0x2bc>)
 81078c4:	4293      	cmp	r3, r2
 81078c6:	d105      	bne.n	81078d4 <I2C_ITSlaveCplt+0x178>
 81078c8:	687b      	ldr	r3, [r7, #4]
 81078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078cc:	681b      	ldr	r3, [r3, #0]
 81078ce:	685b      	ldr	r3, [r3, #4]
 81078d0:	b29b      	uxth	r3, r3
 81078d2:	e004      	b.n	81078de <I2C_ITSlaveCplt+0x182>
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81078d8:	681b      	ldr	r3, [r3, #0]
 81078da:	685b      	ldr	r3, [r3, #4]
 81078dc:	b29b      	uxth	r3, r3
 81078de:	687a      	ldr	r2, [r7, #4]
 81078e0:	8553      	strh	r3, [r2, #42]	; 0x2a
 81078e2:	e0a2      	b.n	8107a2a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 81078e4:	693b      	ldr	r3, [r7, #16]
 81078e6:	0bdb      	lsrs	r3, r3, #15
 81078e8:	f003 0301 	and.w	r3, r3, #1
 81078ec:	2b00      	cmp	r3, #0
 81078ee:	f000 809c 	beq.w	8107a2a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	681b      	ldr	r3, [r3, #0]
 81078f6:	681a      	ldr	r2, [r3, #0]
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107900:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107906:	2b00      	cmp	r3, #0
 8107908:	f000 808f 	beq.w	8107a2a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 810790c:	687b      	ldr	r3, [r7, #4]
 810790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107910:	681b      	ldr	r3, [r3, #0]
 8107912:	4a32      	ldr	r2, [pc, #200]	; (81079dc <I2C_ITSlaveCplt+0x280>)
 8107914:	4293      	cmp	r3, r2
 8107916:	d059      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810791c:	681b      	ldr	r3, [r3, #0]
 810791e:	4a30      	ldr	r2, [pc, #192]	; (81079e0 <I2C_ITSlaveCplt+0x284>)
 8107920:	4293      	cmp	r3, r2
 8107922:	d053      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107928:	681b      	ldr	r3, [r3, #0]
 810792a:	4a2e      	ldr	r2, [pc, #184]	; (81079e4 <I2C_ITSlaveCplt+0x288>)
 810792c:	4293      	cmp	r3, r2
 810792e:	d04d      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	4a2c      	ldr	r2, [pc, #176]	; (81079e8 <I2C_ITSlaveCplt+0x28c>)
 8107938:	4293      	cmp	r3, r2
 810793a:	d047      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 810793c:	687b      	ldr	r3, [r7, #4]
 810793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107940:	681b      	ldr	r3, [r3, #0]
 8107942:	4a2a      	ldr	r2, [pc, #168]	; (81079ec <I2C_ITSlaveCplt+0x290>)
 8107944:	4293      	cmp	r3, r2
 8107946:	d041      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107948:	687b      	ldr	r3, [r7, #4]
 810794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810794c:	681b      	ldr	r3, [r3, #0]
 810794e:	4a28      	ldr	r2, [pc, #160]	; (81079f0 <I2C_ITSlaveCplt+0x294>)
 8107950:	4293      	cmp	r3, r2
 8107952:	d03b      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107958:	681b      	ldr	r3, [r3, #0]
 810795a:	4a26      	ldr	r2, [pc, #152]	; (81079f4 <I2C_ITSlaveCplt+0x298>)
 810795c:	4293      	cmp	r3, r2
 810795e:	d035      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107964:	681b      	ldr	r3, [r3, #0]
 8107966:	4a24      	ldr	r2, [pc, #144]	; (81079f8 <I2C_ITSlaveCplt+0x29c>)
 8107968:	4293      	cmp	r3, r2
 810796a:	d02f      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107970:	681b      	ldr	r3, [r3, #0]
 8107972:	4a22      	ldr	r2, [pc, #136]	; (81079fc <I2C_ITSlaveCplt+0x2a0>)
 8107974:	4293      	cmp	r3, r2
 8107976:	d029      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810797c:	681b      	ldr	r3, [r3, #0]
 810797e:	4a20      	ldr	r2, [pc, #128]	; (8107a00 <I2C_ITSlaveCplt+0x2a4>)
 8107980:	4293      	cmp	r3, r2
 8107982:	d023      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107988:	681b      	ldr	r3, [r3, #0]
 810798a:	4a1e      	ldr	r2, [pc, #120]	; (8107a04 <I2C_ITSlaveCplt+0x2a8>)
 810798c:	4293      	cmp	r3, r2
 810798e:	d01d      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107994:	681b      	ldr	r3, [r3, #0]
 8107996:	4a1c      	ldr	r2, [pc, #112]	; (8107a08 <I2C_ITSlaveCplt+0x2ac>)
 8107998:	4293      	cmp	r3, r2
 810799a:	d017      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079a0:	681b      	ldr	r3, [r3, #0]
 81079a2:	4a1a      	ldr	r2, [pc, #104]	; (8107a0c <I2C_ITSlaveCplt+0x2b0>)
 81079a4:	4293      	cmp	r3, r2
 81079a6:	d011      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	4a18      	ldr	r2, [pc, #96]	; (8107a10 <I2C_ITSlaveCplt+0x2b4>)
 81079b0:	4293      	cmp	r3, r2
 81079b2:	d00b      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 81079b4:	687b      	ldr	r3, [r7, #4]
 81079b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079b8:	681b      	ldr	r3, [r3, #0]
 81079ba:	4a16      	ldr	r2, [pc, #88]	; (8107a14 <I2C_ITSlaveCplt+0x2b8>)
 81079bc:	4293      	cmp	r3, r2
 81079be:	d005      	beq.n	81079cc <I2C_ITSlaveCplt+0x270>
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079c4:	681b      	ldr	r3, [r3, #0]
 81079c6:	4a14      	ldr	r2, [pc, #80]	; (8107a18 <I2C_ITSlaveCplt+0x2bc>)
 81079c8:	4293      	cmp	r3, r2
 81079ca:	d127      	bne.n	8107a1c <I2C_ITSlaveCplt+0x2c0>
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	685b      	ldr	r3, [r3, #4]
 81079d4:	b29b      	uxth	r3, r3
 81079d6:	e026      	b.n	8107a26 <I2C_ITSlaveCplt+0x2ca>
 81079d8:	fe00e800 	.word	0xfe00e800
 81079dc:	40020010 	.word	0x40020010
 81079e0:	40020028 	.word	0x40020028
 81079e4:	40020040 	.word	0x40020040
 81079e8:	40020058 	.word	0x40020058
 81079ec:	40020070 	.word	0x40020070
 81079f0:	40020088 	.word	0x40020088
 81079f4:	400200a0 	.word	0x400200a0
 81079f8:	400200b8 	.word	0x400200b8
 81079fc:	40020410 	.word	0x40020410
 8107a00:	40020428 	.word	0x40020428
 8107a04:	40020440 	.word	0x40020440
 8107a08:	40020458 	.word	0x40020458
 8107a0c:	40020470 	.word	0x40020470
 8107a10:	40020488 	.word	0x40020488
 8107a14:	400204a0 	.word	0x400204a0
 8107a18:	400204b8 	.word	0x400204b8
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	685b      	ldr	r3, [r3, #4]
 8107a24:	b29b      	uxth	r3, r3
 8107a26:	687a      	ldr	r2, [r7, #4]
 8107a28:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8107a2a:	697b      	ldr	r3, [r7, #20]
 8107a2c:	089b      	lsrs	r3, r3, #2
 8107a2e:	f003 0301 	and.w	r3, r3, #1
 8107a32:	2b00      	cmp	r3, #0
 8107a34:	d020      	beq.n	8107a78 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8107a36:	697b      	ldr	r3, [r7, #20]
 8107a38:	f023 0304 	bic.w	r3, r3, #4
 8107a3c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	681b      	ldr	r3, [r3, #0]
 8107a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107a44:	687b      	ldr	r3, [r7, #4]
 8107a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a48:	b2d2      	uxtb	r2, r2
 8107a4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a50:	1c5a      	adds	r2, r3, #1
 8107a52:	687b      	ldr	r3, [r7, #4]
 8107a54:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107a5a:	2b00      	cmp	r3, #0
 8107a5c:	d00c      	beq.n	8107a78 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107a62:	3b01      	subs	r3, #1
 8107a64:	b29a      	uxth	r2, r3
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107a6e:	b29b      	uxth	r3, r3
 8107a70:	3b01      	subs	r3, #1
 8107a72:	b29a      	uxth	r2, r3
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107a7c:	b29b      	uxth	r3, r3
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	d005      	beq.n	8107a8e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107a86:	f043 0204 	orr.w	r2, r3, #4
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107a8e:	687b      	ldr	r3, [r7, #4]
 8107a90:	2200      	movs	r2, #0
 8107a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	2200      	movs	r2, #0
 8107a9a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107aa0:	2b00      	cmp	r3, #0
 8107aa2:	d010      	beq.n	8107ac6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107aa8:	4619      	mov	r1, r3
 8107aaa:	6878      	ldr	r0, [r7, #4]
 8107aac:	f000 f8a4 	bl	8107bf8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ab6:	b2db      	uxtb	r3, r3
 8107ab8:	2b28      	cmp	r3, #40	; 0x28
 8107aba:	d141      	bne.n	8107b40 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8107abc:	6979      	ldr	r1, [r7, #20]
 8107abe:	6878      	ldr	r0, [r7, #4]
 8107ac0:	f000 f844 	bl	8107b4c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107ac4:	e03c      	b.n	8107b40 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8107ac6:	687b      	ldr	r3, [r7, #4]
 8107ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107ace:	d014      	beq.n	8107afa <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8107ad0:	6878      	ldr	r0, [r7, #4]
 8107ad2:	f7ff fde5 	bl	81076a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	4a1b      	ldr	r2, [pc, #108]	; (8107b48 <I2C_ITSlaveCplt+0x3ec>)
 8107ada:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	2220      	movs	r2, #32
 8107ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	2200      	movs	r2, #0
 8107ae8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	2200      	movs	r2, #0
 8107aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8107af2:	6878      	ldr	r0, [r7, #4]
 8107af4:	f7ff fb87 	bl	8107206 <HAL_I2C_ListenCpltCallback>
}
 8107af8:	e022      	b.n	8107b40 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107b00:	b2db      	uxtb	r3, r3
 8107b02:	2b22      	cmp	r3, #34	; 0x22
 8107b04:	d10e      	bne.n	8107b24 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	2220      	movs	r2, #32
 8107b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107b0e:	687b      	ldr	r3, [r7, #4]
 8107b10:	2200      	movs	r2, #0
 8107b12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	2200      	movs	r2, #0
 8107b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107b1c:	6878      	ldr	r0, [r7, #4]
 8107b1e:	f7ff fb5a 	bl	81071d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8107b22:	e00d      	b.n	8107b40 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	2220      	movs	r2, #32
 8107b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107b2c:	687b      	ldr	r3, [r7, #4]
 8107b2e:	2200      	movs	r2, #0
 8107b30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107b32:	687b      	ldr	r3, [r7, #4]
 8107b34:	2200      	movs	r2, #0
 8107b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107b3a:	6878      	ldr	r0, [r7, #4]
 8107b3c:	f7ff fb41 	bl	81071c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8107b40:	bf00      	nop
 8107b42:	3718      	adds	r7, #24
 8107b44:	46bd      	mov	sp, r7
 8107b46:	bd80      	pop	{r7, pc}
 8107b48:	ffff0000 	.word	0xffff0000

08107b4c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107b4c:	b580      	push	{r7, lr}
 8107b4e:	b082      	sub	sp, #8
 8107b50:	af00      	add	r7, sp, #0
 8107b52:	6078      	str	r0, [r7, #4]
 8107b54:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8107b56:	687b      	ldr	r3, [r7, #4]
 8107b58:	4a26      	ldr	r2, [pc, #152]	; (8107bf4 <I2C_ITListenCplt+0xa8>)
 8107b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	2200      	movs	r2, #0
 8107b60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	2220      	movs	r2, #32
 8107b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	2200      	movs	r2, #0
 8107b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	2200      	movs	r2, #0
 8107b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8107b78:	683b      	ldr	r3, [r7, #0]
 8107b7a:	089b      	lsrs	r3, r3, #2
 8107b7c:	f003 0301 	and.w	r3, r3, #1
 8107b80:	2b00      	cmp	r3, #0
 8107b82:	d022      	beq.n	8107bca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	681b      	ldr	r3, [r3, #0]
 8107b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107b8e:	b2d2      	uxtb	r2, r2
 8107b90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107b96:	1c5a      	adds	r2, r3, #1
 8107b98:	687b      	ldr	r3, [r7, #4]
 8107b9a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8107b9c:	687b      	ldr	r3, [r7, #4]
 8107b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107ba0:	2b00      	cmp	r3, #0
 8107ba2:	d012      	beq.n	8107bca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107ba8:	3b01      	subs	r3, #1
 8107baa:	b29a      	uxth	r2, r3
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107bb4:	b29b      	uxth	r3, r3
 8107bb6:	3b01      	subs	r3, #1
 8107bb8:	b29a      	uxth	r2, r3
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107bbe:	687b      	ldr	r3, [r7, #4]
 8107bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107bc2:	f043 0204 	orr.w	r2, r3, #4
 8107bc6:	687b      	ldr	r3, [r7, #4]
 8107bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107bca:	f248 0103 	movw	r1, #32771	; 0x8003
 8107bce:	6878      	ldr	r0, [r7, #4]
 8107bd0:	f000 fa9c 	bl	810810c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	681b      	ldr	r3, [r3, #0]
 8107bd8:	2210      	movs	r2, #16
 8107bda:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	2200      	movs	r2, #0
 8107be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8107be4:	6878      	ldr	r0, [r7, #4]
 8107be6:	f7ff fb0e 	bl	8107206 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8107bea:	bf00      	nop
 8107bec:	3708      	adds	r7, #8
 8107bee:	46bd      	mov	sp, r7
 8107bf0:	bd80      	pop	{r7, pc}
 8107bf2:	bf00      	nop
 8107bf4:	ffff0000 	.word	0xffff0000

08107bf8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8107bf8:	b580      	push	{r7, lr}
 8107bfa:	b084      	sub	sp, #16
 8107bfc:	af00      	add	r7, sp, #0
 8107bfe:	6078      	str	r0, [r7, #4]
 8107c00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107c02:	687b      	ldr	r3, [r7, #4]
 8107c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8107c0a:	687b      	ldr	r3, [r7, #4]
 8107c0c:	2200      	movs	r2, #0
 8107c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107c12:	687b      	ldr	r3, [r7, #4]
 8107c14:	4a5d      	ldr	r2, [pc, #372]	; (8107d8c <I2C_ITError+0x194>)
 8107c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	2200      	movs	r2, #0
 8107c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107c22:	683b      	ldr	r3, [r7, #0]
 8107c24:	431a      	orrs	r2, r3
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8107c2a:	7bfb      	ldrb	r3, [r7, #15]
 8107c2c:	2b28      	cmp	r3, #40	; 0x28
 8107c2e:	d005      	beq.n	8107c3c <I2C_ITError+0x44>
 8107c30:	7bfb      	ldrb	r3, [r7, #15]
 8107c32:	2b29      	cmp	r3, #41	; 0x29
 8107c34:	d002      	beq.n	8107c3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8107c36:	7bfb      	ldrb	r3, [r7, #15]
 8107c38:	2b2a      	cmp	r3, #42	; 0x2a
 8107c3a:	d10b      	bne.n	8107c54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107c3c:	2103      	movs	r1, #3
 8107c3e:	6878      	ldr	r0, [r7, #4]
 8107c40:	f000 fa64 	bl	810810c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	2228      	movs	r2, #40	; 0x28
 8107c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	4a50      	ldr	r2, [pc, #320]	; (8107d90 <I2C_ITError+0x198>)
 8107c50:	635a      	str	r2, [r3, #52]	; 0x34
 8107c52:	e011      	b.n	8107c78 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8107c54:	f248 0103 	movw	r1, #32771	; 0x8003
 8107c58:	6878      	ldr	r0, [r7, #4]
 8107c5a:	f000 fa57 	bl	810810c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c64:	b2db      	uxtb	r3, r3
 8107c66:	2b60      	cmp	r3, #96	; 0x60
 8107c68:	d003      	beq.n	8107c72 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8107c6a:	687b      	ldr	r3, [r7, #4]
 8107c6c:	2220      	movs	r2, #32
 8107c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	2200      	movs	r2, #0
 8107c76:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107c7c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107c82:	2b00      	cmp	r3, #0
 8107c84:	d039      	beq.n	8107cfa <I2C_ITError+0x102>
 8107c86:	68bb      	ldr	r3, [r7, #8]
 8107c88:	2b11      	cmp	r3, #17
 8107c8a:	d002      	beq.n	8107c92 <I2C_ITError+0x9a>
 8107c8c:	68bb      	ldr	r3, [r7, #8]
 8107c8e:	2b21      	cmp	r3, #33	; 0x21
 8107c90:	d133      	bne.n	8107cfa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	681b      	ldr	r3, [r3, #0]
 8107c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107ca0:	d107      	bne.n	8107cb2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	681b      	ldr	r3, [r3, #0]
 8107ca6:	681a      	ldr	r2, [r3, #0]
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	681b      	ldr	r3, [r3, #0]
 8107cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107cb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107cb2:	687b      	ldr	r3, [r7, #4]
 8107cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cb6:	4618      	mov	r0, r3
 8107cb8:	f7fe f93e 	bl	8105f38 <HAL_DMA_GetState>
 8107cbc:	4603      	mov	r3, r0
 8107cbe:	2b01      	cmp	r3, #1
 8107cc0:	d017      	beq.n	8107cf2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cc6:	4a33      	ldr	r2, [pc, #204]	; (8107d94 <I2C_ITError+0x19c>)
 8107cc8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	2200      	movs	r2, #0
 8107cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107cd6:	4618      	mov	r0, r3
 8107cd8:	f7fc ffc0 	bl	8104c5c <HAL_DMA_Abort_IT>
 8107cdc:	4603      	mov	r3, r0
 8107cde:	2b00      	cmp	r3, #0
 8107ce0:	d04d      	beq.n	8107d7e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107ce8:	687a      	ldr	r2, [r7, #4]
 8107cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8107cec:	4610      	mov	r0, r2
 8107cee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107cf0:	e045      	b.n	8107d7e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8107cf2:	6878      	ldr	r0, [r7, #4]
 8107cf4:	f000 f850 	bl	8107d98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107cf8:	e041      	b.n	8107d7e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d039      	beq.n	8107d76 <I2C_ITError+0x17e>
 8107d02:	68bb      	ldr	r3, [r7, #8]
 8107d04:	2b12      	cmp	r3, #18
 8107d06:	d002      	beq.n	8107d0e <I2C_ITError+0x116>
 8107d08:	68bb      	ldr	r3, [r7, #8]
 8107d0a:	2b22      	cmp	r3, #34	; 0x22
 8107d0c:	d133      	bne.n	8107d76 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107d1c:	d107      	bne.n	8107d2e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	681b      	ldr	r3, [r3, #0]
 8107d22:	681a      	ldr	r2, [r3, #0]
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	681b      	ldr	r3, [r3, #0]
 8107d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107d2c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d32:	4618      	mov	r0, r3
 8107d34:	f7fe f900 	bl	8105f38 <HAL_DMA_GetState>
 8107d38:	4603      	mov	r3, r0
 8107d3a:	2b01      	cmp	r3, #1
 8107d3c:	d017      	beq.n	8107d6e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8107d3e:	687b      	ldr	r3, [r7, #4]
 8107d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d42:	4a14      	ldr	r2, [pc, #80]	; (8107d94 <I2C_ITError+0x19c>)
 8107d44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	2200      	movs	r2, #0
 8107d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8107d4e:	687b      	ldr	r3, [r7, #4]
 8107d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d52:	4618      	mov	r0, r3
 8107d54:	f7fc ff82 	bl	8104c5c <HAL_DMA_Abort_IT>
 8107d58:	4603      	mov	r3, r0
 8107d5a:	2b00      	cmp	r3, #0
 8107d5c:	d011      	beq.n	8107d82 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107d64:	687a      	ldr	r2, [r7, #4]
 8107d66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8107d68:	4610      	mov	r0, r2
 8107d6a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107d6c:	e009      	b.n	8107d82 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8107d6e:	6878      	ldr	r0, [r7, #4]
 8107d70:	f000 f812 	bl	8107d98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107d74:	e005      	b.n	8107d82 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8107d76:	6878      	ldr	r0, [r7, #4]
 8107d78:	f000 f80e 	bl	8107d98 <I2C_TreatErrorCallback>
  }
}
 8107d7c:	e002      	b.n	8107d84 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8107d7e:	bf00      	nop
 8107d80:	e000      	b.n	8107d84 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8107d82:	bf00      	nop
}
 8107d84:	bf00      	nop
 8107d86:	3710      	adds	r7, #16
 8107d88:	46bd      	mov	sp, r7
 8107d8a:	bd80      	pop	{r7, pc}
 8107d8c:	ffff0000 	.word	0xffff0000
 8107d90:	08107243 	.word	0x08107243
 8107d94:	08107e2f 	.word	0x08107e2f

08107d98 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8107d98:	b580      	push	{r7, lr}
 8107d9a:	b082      	sub	sp, #8
 8107d9c:	af00      	add	r7, sp, #0
 8107d9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107da6:	b2db      	uxtb	r3, r3
 8107da8:	2b60      	cmp	r3, #96	; 0x60
 8107daa:	d10e      	bne.n	8107dca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	2220      	movs	r2, #32
 8107db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	2200      	movs	r2, #0
 8107db8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	2200      	movs	r2, #0
 8107dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8107dc2:	6878      	ldr	r0, [r7, #4]
 8107dc4:	f7ff fa33 	bl	810722e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107dc8:	e009      	b.n	8107dde <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8107dca:	687b      	ldr	r3, [r7, #4]
 8107dcc:	2200      	movs	r2, #0
 8107dce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	2200      	movs	r2, #0
 8107dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8107dd8:	6878      	ldr	r0, [r7, #4]
 8107dda:	f7ff fa1e 	bl	810721a <HAL_I2C_ErrorCallback>
}
 8107dde:	bf00      	nop
 8107de0:	3708      	adds	r7, #8
 8107de2:	46bd      	mov	sp, r7
 8107de4:	bd80      	pop	{r7, pc}

08107de6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8107de6:	b480      	push	{r7}
 8107de8:	b083      	sub	sp, #12
 8107dea:	af00      	add	r7, sp, #0
 8107dec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8107dee:	687b      	ldr	r3, [r7, #4]
 8107df0:	681b      	ldr	r3, [r3, #0]
 8107df2:	699b      	ldr	r3, [r3, #24]
 8107df4:	f003 0302 	and.w	r3, r3, #2
 8107df8:	2b02      	cmp	r3, #2
 8107dfa:	d103      	bne.n	8107e04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8107dfc:	687b      	ldr	r3, [r7, #4]
 8107dfe:	681b      	ldr	r3, [r3, #0]
 8107e00:	2200      	movs	r2, #0
 8107e02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8107e04:	687b      	ldr	r3, [r7, #4]
 8107e06:	681b      	ldr	r3, [r3, #0]
 8107e08:	699b      	ldr	r3, [r3, #24]
 8107e0a:	f003 0301 	and.w	r3, r3, #1
 8107e0e:	2b01      	cmp	r3, #1
 8107e10:	d007      	beq.n	8107e22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	699a      	ldr	r2, [r3, #24]
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	681b      	ldr	r3, [r3, #0]
 8107e1c:	f042 0201 	orr.w	r2, r2, #1
 8107e20:	619a      	str	r2, [r3, #24]
  }
}
 8107e22:	bf00      	nop
 8107e24:	370c      	adds	r7, #12
 8107e26:	46bd      	mov	sp, r7
 8107e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e2c:	4770      	bx	lr

08107e2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8107e2e:	b580      	push	{r7, lr}
 8107e30:	b084      	sub	sp, #16
 8107e32:	af00      	add	r7, sp, #0
 8107e34:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8107e36:	687b      	ldr	r3, [r7, #4]
 8107e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8107e3c:	68fb      	ldr	r3, [r7, #12]
 8107e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e40:	2b00      	cmp	r3, #0
 8107e42:	d003      	beq.n	8107e4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8107e44:	68fb      	ldr	r3, [r7, #12]
 8107e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e48:	2200      	movs	r2, #0
 8107e4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8107e4c:	68fb      	ldr	r3, [r7, #12]
 8107e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e50:	2b00      	cmp	r3, #0
 8107e52:	d003      	beq.n	8107e5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8107e54:	68fb      	ldr	r3, [r7, #12]
 8107e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e58:	2200      	movs	r2, #0
 8107e5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8107e5c:	68f8      	ldr	r0, [r7, #12]
 8107e5e:	f7ff ff9b 	bl	8107d98 <I2C_TreatErrorCallback>
}
 8107e62:	bf00      	nop
 8107e64:	3710      	adds	r7, #16
 8107e66:	46bd      	mov	sp, r7
 8107e68:	bd80      	pop	{r7, pc}

08107e6a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8107e6a:	b580      	push	{r7, lr}
 8107e6c:	b084      	sub	sp, #16
 8107e6e:	af00      	add	r7, sp, #0
 8107e70:	60f8      	str	r0, [r7, #12]
 8107e72:	60b9      	str	r1, [r7, #8]
 8107e74:	603b      	str	r3, [r7, #0]
 8107e76:	4613      	mov	r3, r2
 8107e78:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107e7a:	e022      	b.n	8107ec2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107e7c:	683b      	ldr	r3, [r7, #0]
 8107e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107e82:	d01e      	beq.n	8107ec2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107e84:	f7fb fcb4 	bl	81037f0 <HAL_GetTick>
 8107e88:	4602      	mov	r2, r0
 8107e8a:	69bb      	ldr	r3, [r7, #24]
 8107e8c:	1ad3      	subs	r3, r2, r3
 8107e8e:	683a      	ldr	r2, [r7, #0]
 8107e90:	429a      	cmp	r2, r3
 8107e92:	d302      	bcc.n	8107e9a <I2C_WaitOnFlagUntilTimeout+0x30>
 8107e94:	683b      	ldr	r3, [r7, #0]
 8107e96:	2b00      	cmp	r3, #0
 8107e98:	d113      	bne.n	8107ec2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107e9a:	68fb      	ldr	r3, [r7, #12]
 8107e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107e9e:	f043 0220 	orr.w	r2, r3, #32
 8107ea2:	68fb      	ldr	r3, [r7, #12]
 8107ea4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107ea6:	68fb      	ldr	r3, [r7, #12]
 8107ea8:	2220      	movs	r2, #32
 8107eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107eae:	68fb      	ldr	r3, [r7, #12]
 8107eb0:	2200      	movs	r2, #0
 8107eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107eb6:	68fb      	ldr	r3, [r7, #12]
 8107eb8:	2200      	movs	r2, #0
 8107eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8107ebe:	2301      	movs	r3, #1
 8107ec0:	e00f      	b.n	8107ee2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8107ec2:	68fb      	ldr	r3, [r7, #12]
 8107ec4:	681b      	ldr	r3, [r3, #0]
 8107ec6:	699a      	ldr	r2, [r3, #24]
 8107ec8:	68bb      	ldr	r3, [r7, #8]
 8107eca:	4013      	ands	r3, r2
 8107ecc:	68ba      	ldr	r2, [r7, #8]
 8107ece:	429a      	cmp	r2, r3
 8107ed0:	bf0c      	ite	eq
 8107ed2:	2301      	moveq	r3, #1
 8107ed4:	2300      	movne	r3, #0
 8107ed6:	b2db      	uxtb	r3, r3
 8107ed8:	461a      	mov	r2, r3
 8107eda:	79fb      	ldrb	r3, [r7, #7]
 8107edc:	429a      	cmp	r2, r3
 8107ede:	d0cd      	beq.n	8107e7c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8107ee0:	2300      	movs	r3, #0
}
 8107ee2:	4618      	mov	r0, r3
 8107ee4:	3710      	adds	r7, #16
 8107ee6:	46bd      	mov	sp, r7
 8107ee8:	bd80      	pop	{r7, pc}

08107eea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107eea:	b580      	push	{r7, lr}
 8107eec:	b084      	sub	sp, #16
 8107eee:	af00      	add	r7, sp, #0
 8107ef0:	60f8      	str	r0, [r7, #12]
 8107ef2:	60b9      	str	r1, [r7, #8]
 8107ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107ef6:	e02c      	b.n	8107f52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8107ef8:	687a      	ldr	r2, [r7, #4]
 8107efa:	68b9      	ldr	r1, [r7, #8]
 8107efc:	68f8      	ldr	r0, [r7, #12]
 8107efe:	f000 f871 	bl	8107fe4 <I2C_IsAcknowledgeFailed>
 8107f02:	4603      	mov	r3, r0
 8107f04:	2b00      	cmp	r3, #0
 8107f06:	d001      	beq.n	8107f0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107f08:	2301      	movs	r3, #1
 8107f0a:	e02a      	b.n	8107f62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107f0c:	68bb      	ldr	r3, [r7, #8]
 8107f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107f12:	d01e      	beq.n	8107f52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107f14:	f7fb fc6c 	bl	81037f0 <HAL_GetTick>
 8107f18:	4602      	mov	r2, r0
 8107f1a:	687b      	ldr	r3, [r7, #4]
 8107f1c:	1ad3      	subs	r3, r2, r3
 8107f1e:	68ba      	ldr	r2, [r7, #8]
 8107f20:	429a      	cmp	r2, r3
 8107f22:	d302      	bcc.n	8107f2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8107f24:	68bb      	ldr	r3, [r7, #8]
 8107f26:	2b00      	cmp	r3, #0
 8107f28:	d113      	bne.n	8107f52 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107f2a:	68fb      	ldr	r3, [r7, #12]
 8107f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f2e:	f043 0220 	orr.w	r2, r3, #32
 8107f32:	68fb      	ldr	r3, [r7, #12]
 8107f34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8107f36:	68fb      	ldr	r3, [r7, #12]
 8107f38:	2220      	movs	r2, #32
 8107f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8107f3e:	68fb      	ldr	r3, [r7, #12]
 8107f40:	2200      	movs	r2, #0
 8107f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8107f46:	68fb      	ldr	r3, [r7, #12]
 8107f48:	2200      	movs	r2, #0
 8107f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8107f4e:	2301      	movs	r3, #1
 8107f50:	e007      	b.n	8107f62 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8107f52:	68fb      	ldr	r3, [r7, #12]
 8107f54:	681b      	ldr	r3, [r3, #0]
 8107f56:	699b      	ldr	r3, [r3, #24]
 8107f58:	f003 0302 	and.w	r3, r3, #2
 8107f5c:	2b02      	cmp	r3, #2
 8107f5e:	d1cb      	bne.n	8107ef8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8107f60:	2300      	movs	r3, #0
}
 8107f62:	4618      	mov	r0, r3
 8107f64:	3710      	adds	r7, #16
 8107f66:	46bd      	mov	sp, r7
 8107f68:	bd80      	pop	{r7, pc}

08107f6a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107f6a:	b580      	push	{r7, lr}
 8107f6c:	b084      	sub	sp, #16
 8107f6e:	af00      	add	r7, sp, #0
 8107f70:	60f8      	str	r0, [r7, #12]
 8107f72:	60b9      	str	r1, [r7, #8]
 8107f74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107f76:	e028      	b.n	8107fca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8107f78:	687a      	ldr	r2, [r7, #4]
 8107f7a:	68b9      	ldr	r1, [r7, #8]
 8107f7c:	68f8      	ldr	r0, [r7, #12]
 8107f7e:	f000 f831 	bl	8107fe4 <I2C_IsAcknowledgeFailed>
 8107f82:	4603      	mov	r3, r0
 8107f84:	2b00      	cmp	r3, #0
 8107f86:	d001      	beq.n	8107f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8107f88:	2301      	movs	r3, #1
 8107f8a:	e026      	b.n	8107fda <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107f8c:	f7fb fc30 	bl	81037f0 <HAL_GetTick>
 8107f90:	4602      	mov	r2, r0
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	1ad3      	subs	r3, r2, r3
 8107f96:	68ba      	ldr	r2, [r7, #8]
 8107f98:	429a      	cmp	r2, r3
 8107f9a:	d302      	bcc.n	8107fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8107f9c:	68bb      	ldr	r3, [r7, #8]
 8107f9e:	2b00      	cmp	r3, #0
 8107fa0:	d113      	bne.n	8107fca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8107fa2:	68fb      	ldr	r3, [r7, #12]
 8107fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107fa6:	f043 0220 	orr.w	r2, r3, #32
 8107faa:	68fb      	ldr	r3, [r7, #12]
 8107fac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8107fae:	68fb      	ldr	r3, [r7, #12]
 8107fb0:	2220      	movs	r2, #32
 8107fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107fb6:	68fb      	ldr	r3, [r7, #12]
 8107fb8:	2200      	movs	r2, #0
 8107fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8107fbe:	68fb      	ldr	r3, [r7, #12]
 8107fc0:	2200      	movs	r2, #0
 8107fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8107fc6:	2301      	movs	r3, #1
 8107fc8:	e007      	b.n	8107fda <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107fca:	68fb      	ldr	r3, [r7, #12]
 8107fcc:	681b      	ldr	r3, [r3, #0]
 8107fce:	699b      	ldr	r3, [r3, #24]
 8107fd0:	f003 0320 	and.w	r3, r3, #32
 8107fd4:	2b20      	cmp	r3, #32
 8107fd6:	d1cf      	bne.n	8107f78 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8107fd8:	2300      	movs	r3, #0
}
 8107fda:	4618      	mov	r0, r3
 8107fdc:	3710      	adds	r7, #16
 8107fde:	46bd      	mov	sp, r7
 8107fe0:	bd80      	pop	{r7, pc}
	...

08107fe4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8107fe4:	b580      	push	{r7, lr}
 8107fe6:	b084      	sub	sp, #16
 8107fe8:	af00      	add	r7, sp, #0
 8107fea:	60f8      	str	r0, [r7, #12]
 8107fec:	60b9      	str	r1, [r7, #8]
 8107fee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8107ff0:	68fb      	ldr	r3, [r7, #12]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	699b      	ldr	r3, [r3, #24]
 8107ff6:	f003 0310 	and.w	r3, r3, #16
 8107ffa:	2b10      	cmp	r3, #16
 8107ffc:	d151      	bne.n	81080a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8107ffe:	e022      	b.n	8108046 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8108000:	68bb      	ldr	r3, [r7, #8]
 8108002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108006:	d01e      	beq.n	8108046 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108008:	f7fb fbf2 	bl	81037f0 <HAL_GetTick>
 810800c:	4602      	mov	r2, r0
 810800e:	687b      	ldr	r3, [r7, #4]
 8108010:	1ad3      	subs	r3, r2, r3
 8108012:	68ba      	ldr	r2, [r7, #8]
 8108014:	429a      	cmp	r2, r3
 8108016:	d302      	bcc.n	810801e <I2C_IsAcknowledgeFailed+0x3a>
 8108018:	68bb      	ldr	r3, [r7, #8]
 810801a:	2b00      	cmp	r3, #0
 810801c:	d113      	bne.n	8108046 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810801e:	68fb      	ldr	r3, [r7, #12]
 8108020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108022:	f043 0220 	orr.w	r2, r3, #32
 8108026:	68fb      	ldr	r3, [r7, #12]
 8108028:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810802a:	68fb      	ldr	r3, [r7, #12]
 810802c:	2220      	movs	r2, #32
 810802e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8108032:	68fb      	ldr	r3, [r7, #12]
 8108034:	2200      	movs	r2, #0
 8108036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810803a:	68fb      	ldr	r3, [r7, #12]
 810803c:	2200      	movs	r2, #0
 810803e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8108042:	2301      	movs	r3, #1
 8108044:	e02e      	b.n	81080a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108046:	68fb      	ldr	r3, [r7, #12]
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	699b      	ldr	r3, [r3, #24]
 810804c:	f003 0320 	and.w	r3, r3, #32
 8108050:	2b20      	cmp	r3, #32
 8108052:	d1d5      	bne.n	8108000 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108054:	68fb      	ldr	r3, [r7, #12]
 8108056:	681b      	ldr	r3, [r3, #0]
 8108058:	2210      	movs	r2, #16
 810805a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810805c:	68fb      	ldr	r3, [r7, #12]
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	2220      	movs	r2, #32
 8108062:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108064:	68f8      	ldr	r0, [r7, #12]
 8108066:	f7ff febe 	bl	8107de6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810806a:	68fb      	ldr	r3, [r7, #12]
 810806c:	681b      	ldr	r3, [r3, #0]
 810806e:	6859      	ldr	r1, [r3, #4]
 8108070:	68fb      	ldr	r3, [r7, #12]
 8108072:	681a      	ldr	r2, [r3, #0]
 8108074:	4b0d      	ldr	r3, [pc, #52]	; (81080ac <I2C_IsAcknowledgeFailed+0xc8>)
 8108076:	400b      	ands	r3, r1
 8108078:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810807a:	68fb      	ldr	r3, [r7, #12]
 810807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810807e:	f043 0204 	orr.w	r2, r3, #4
 8108082:	68fb      	ldr	r3, [r7, #12]
 8108084:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8108086:	68fb      	ldr	r3, [r7, #12]
 8108088:	2220      	movs	r2, #32
 810808a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810808e:	68fb      	ldr	r3, [r7, #12]
 8108090:	2200      	movs	r2, #0
 8108092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108096:	68fb      	ldr	r3, [r7, #12]
 8108098:	2200      	movs	r2, #0
 810809a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 810809e:	2301      	movs	r3, #1
 81080a0:	e000      	b.n	81080a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 81080a2:	2300      	movs	r3, #0
}
 81080a4:	4618      	mov	r0, r3
 81080a6:	3710      	adds	r7, #16
 81080a8:	46bd      	mov	sp, r7
 81080aa:	bd80      	pop	{r7, pc}
 81080ac:	fe00e800 	.word	0xfe00e800

081080b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81080b0:	b480      	push	{r7}
 81080b2:	b085      	sub	sp, #20
 81080b4:	af00      	add	r7, sp, #0
 81080b6:	60f8      	str	r0, [r7, #12]
 81080b8:	607b      	str	r3, [r7, #4]
 81080ba:	460b      	mov	r3, r1
 81080bc:	817b      	strh	r3, [r7, #10]
 81080be:	4613      	mov	r3, r2
 81080c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81080c2:	68fb      	ldr	r3, [r7, #12]
 81080c4:	681b      	ldr	r3, [r3, #0]
 81080c6:	685a      	ldr	r2, [r3, #4]
 81080c8:	69bb      	ldr	r3, [r7, #24]
 81080ca:	0d5b      	lsrs	r3, r3, #21
 81080cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81080d0:	4b0d      	ldr	r3, [pc, #52]	; (8108108 <I2C_TransferConfig+0x58>)
 81080d2:	430b      	orrs	r3, r1
 81080d4:	43db      	mvns	r3, r3
 81080d6:	ea02 0103 	and.w	r1, r2, r3
 81080da:	897b      	ldrh	r3, [r7, #10]
 81080dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81080e0:	7a7b      	ldrb	r3, [r7, #9]
 81080e2:	041b      	lsls	r3, r3, #16
 81080e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81080e8:	431a      	orrs	r2, r3
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	431a      	orrs	r2, r3
 81080ee:	69bb      	ldr	r3, [r7, #24]
 81080f0:	431a      	orrs	r2, r3
 81080f2:	68fb      	ldr	r3, [r7, #12]
 81080f4:	681b      	ldr	r3, [r3, #0]
 81080f6:	430a      	orrs	r2, r1
 81080f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81080fa:	bf00      	nop
 81080fc:	3714      	adds	r7, #20
 81080fe:	46bd      	mov	sp, r7
 8108100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108104:	4770      	bx	lr
 8108106:	bf00      	nop
 8108108:	03ff63ff 	.word	0x03ff63ff

0810810c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 810810c:	b480      	push	{r7}
 810810e:	b085      	sub	sp, #20
 8108110:	af00      	add	r7, sp, #0
 8108112:	6078      	str	r0, [r7, #4]
 8108114:	460b      	mov	r3, r1
 8108116:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108118:	2300      	movs	r3, #0
 810811a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 810811c:	887b      	ldrh	r3, [r7, #2]
 810811e:	f003 0301 	and.w	r3, r3, #1
 8108122:	2b00      	cmp	r3, #0
 8108124:	d00f      	beq.n	8108146 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108126:	68fb      	ldr	r3, [r7, #12]
 8108128:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 810812c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108134:	b2db      	uxtb	r3, r3
 8108136:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810813a:	2b28      	cmp	r3, #40	; 0x28
 810813c:	d003      	beq.n	8108146 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 810813e:	68fb      	ldr	r3, [r7, #12]
 8108140:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108144:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108146:	887b      	ldrh	r3, [r7, #2]
 8108148:	f003 0302 	and.w	r3, r3, #2
 810814c:	2b00      	cmp	r3, #0
 810814e:	d00f      	beq.n	8108170 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108150:	68fb      	ldr	r3, [r7, #12]
 8108152:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8108156:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108158:	687b      	ldr	r3, [r7, #4]
 810815a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810815e:	b2db      	uxtb	r3, r3
 8108160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108164:	2b28      	cmp	r3, #40	; 0x28
 8108166:	d003      	beq.n	8108170 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108168:	68fb      	ldr	r3, [r7, #12]
 810816a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 810816e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108170:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108174:	2b00      	cmp	r3, #0
 8108176:	da03      	bge.n	8108180 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108178:	68fb      	ldr	r3, [r7, #12]
 810817a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 810817e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108180:	887b      	ldrh	r3, [r7, #2]
 8108182:	2b10      	cmp	r3, #16
 8108184:	d103      	bne.n	810818e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108186:	68fb      	ldr	r3, [r7, #12]
 8108188:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 810818c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 810818e:	887b      	ldrh	r3, [r7, #2]
 8108190:	2b20      	cmp	r3, #32
 8108192:	d103      	bne.n	810819c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8108194:	68fb      	ldr	r3, [r7, #12]
 8108196:	f043 0320 	orr.w	r3, r3, #32
 810819a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 810819c:	887b      	ldrh	r3, [r7, #2]
 810819e:	2b40      	cmp	r3, #64	; 0x40
 81081a0:	d103      	bne.n	81081aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 81081a2:	68fb      	ldr	r3, [r7, #12]
 81081a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81081a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	681b      	ldr	r3, [r3, #0]
 81081ae:	6819      	ldr	r1, [r3, #0]
 81081b0:	68fb      	ldr	r3, [r7, #12]
 81081b2:	43da      	mvns	r2, r3
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	681b      	ldr	r3, [r3, #0]
 81081b8:	400a      	ands	r2, r1
 81081ba:	601a      	str	r2, [r3, #0]
}
 81081bc:	bf00      	nop
 81081be:	3714      	adds	r7, #20
 81081c0:	46bd      	mov	sp, r7
 81081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081c6:	4770      	bx	lr

081081c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81081c8:	b480      	push	{r7}
 81081ca:	b083      	sub	sp, #12
 81081cc:	af00      	add	r7, sp, #0
 81081ce:	6078      	str	r0, [r7, #4]
 81081d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81081d8:	b2db      	uxtb	r3, r3
 81081da:	2b20      	cmp	r3, #32
 81081dc:	d138      	bne.n	8108250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81081de:	687b      	ldr	r3, [r7, #4]
 81081e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81081e4:	2b01      	cmp	r3, #1
 81081e6:	d101      	bne.n	81081ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81081e8:	2302      	movs	r3, #2
 81081ea:	e032      	b.n	8108252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	2201      	movs	r2, #1
 81081f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	2224      	movs	r2, #36	; 0x24
 81081f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	681b      	ldr	r3, [r3, #0]
 8108200:	681a      	ldr	r2, [r3, #0]
 8108202:	687b      	ldr	r3, [r7, #4]
 8108204:	681b      	ldr	r3, [r3, #0]
 8108206:	f022 0201 	bic.w	r2, r2, #1
 810820a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	681b      	ldr	r3, [r3, #0]
 8108210:	681a      	ldr	r2, [r3, #0]
 8108212:	687b      	ldr	r3, [r7, #4]
 8108214:	681b      	ldr	r3, [r3, #0]
 8108216:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810821a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810821c:	687b      	ldr	r3, [r7, #4]
 810821e:	681b      	ldr	r3, [r3, #0]
 8108220:	6819      	ldr	r1, [r3, #0]
 8108222:	687b      	ldr	r3, [r7, #4]
 8108224:	681b      	ldr	r3, [r3, #0]
 8108226:	683a      	ldr	r2, [r7, #0]
 8108228:	430a      	orrs	r2, r1
 810822a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810822c:	687b      	ldr	r3, [r7, #4]
 810822e:	681b      	ldr	r3, [r3, #0]
 8108230:	681a      	ldr	r2, [r3, #0]
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	681b      	ldr	r3, [r3, #0]
 8108236:	f042 0201 	orr.w	r2, r2, #1
 810823a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810823c:	687b      	ldr	r3, [r7, #4]
 810823e:	2220      	movs	r2, #32
 8108240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108244:	687b      	ldr	r3, [r7, #4]
 8108246:	2200      	movs	r2, #0
 8108248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810824c:	2300      	movs	r3, #0
 810824e:	e000      	b.n	8108252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108250:	2302      	movs	r3, #2
  }
}
 8108252:	4618      	mov	r0, r3
 8108254:	370c      	adds	r7, #12
 8108256:	46bd      	mov	sp, r7
 8108258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810825c:	4770      	bx	lr

0810825e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810825e:	b480      	push	{r7}
 8108260:	b085      	sub	sp, #20
 8108262:	af00      	add	r7, sp, #0
 8108264:	6078      	str	r0, [r7, #4]
 8108266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810826e:	b2db      	uxtb	r3, r3
 8108270:	2b20      	cmp	r3, #32
 8108272:	d139      	bne.n	81082e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108274:	687b      	ldr	r3, [r7, #4]
 8108276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810827a:	2b01      	cmp	r3, #1
 810827c:	d101      	bne.n	8108282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810827e:	2302      	movs	r3, #2
 8108280:	e033      	b.n	81082ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8108282:	687b      	ldr	r3, [r7, #4]
 8108284:	2201      	movs	r2, #1
 8108286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810828a:	687b      	ldr	r3, [r7, #4]
 810828c:	2224      	movs	r2, #36	; 0x24
 810828e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108292:	687b      	ldr	r3, [r7, #4]
 8108294:	681b      	ldr	r3, [r3, #0]
 8108296:	681a      	ldr	r2, [r3, #0]
 8108298:	687b      	ldr	r3, [r7, #4]
 810829a:	681b      	ldr	r3, [r3, #0]
 810829c:	f022 0201 	bic.w	r2, r2, #1
 81082a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81082a2:	687b      	ldr	r3, [r7, #4]
 81082a4:	681b      	ldr	r3, [r3, #0]
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81082aa:	68fb      	ldr	r3, [r7, #12]
 81082ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81082b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81082b2:	683b      	ldr	r3, [r7, #0]
 81082b4:	021b      	lsls	r3, r3, #8
 81082b6:	68fa      	ldr	r2, [r7, #12]
 81082b8:	4313      	orrs	r3, r2
 81082ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81082bc:	687b      	ldr	r3, [r7, #4]
 81082be:	681b      	ldr	r3, [r3, #0]
 81082c0:	68fa      	ldr	r2, [r7, #12]
 81082c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81082c4:	687b      	ldr	r3, [r7, #4]
 81082c6:	681b      	ldr	r3, [r3, #0]
 81082c8:	681a      	ldr	r2, [r3, #0]
 81082ca:	687b      	ldr	r3, [r7, #4]
 81082cc:	681b      	ldr	r3, [r3, #0]
 81082ce:	f042 0201 	orr.w	r2, r2, #1
 81082d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81082d4:	687b      	ldr	r3, [r7, #4]
 81082d6:	2220      	movs	r2, #32
 81082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	2200      	movs	r2, #0
 81082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81082e4:	2300      	movs	r3, #0
 81082e6:	e000      	b.n	81082ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81082e8:	2302      	movs	r3, #2
  }
}
 81082ea:	4618      	mov	r0, r3
 81082ec:	3714      	adds	r7, #20
 81082ee:	46bd      	mov	sp, r7
 81082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082f4:	4770      	bx	lr
	...

081082f8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81082f8:	b580      	push	{r7, lr}
 81082fa:	b084      	sub	sp, #16
 81082fc:	af00      	add	r7, sp, #0
 81082fe:	60f8      	str	r0, [r7, #12]
 8108300:	460b      	mov	r3, r1
 8108302:	607a      	str	r2, [r7, #4]
 8108304:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108306:	4b37      	ldr	r3, [pc, #220]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108308:	681b      	ldr	r3, [r3, #0]
 810830a:	f023 0201 	bic.w	r2, r3, #1
 810830e:	4935      	ldr	r1, [pc, #212]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108310:	68fb      	ldr	r3, [r7, #12]
 8108312:	4313      	orrs	r3, r2
 8108314:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108316:	687b      	ldr	r3, [r7, #4]
 8108318:	2b00      	cmp	r3, #0
 810831a:	d123      	bne.n	8108364 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810831c:	f7fb fba8 	bl	8103a70 <HAL_GetCurrentCPUID>
 8108320:	4603      	mov	r3, r0
 8108322:	2b03      	cmp	r3, #3
 8108324:	d158      	bne.n	81083d8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108326:	4b2f      	ldr	r3, [pc, #188]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108328:	691b      	ldr	r3, [r3, #16]
 810832a:	4a2e      	ldr	r2, [pc, #184]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810832c:	f023 0301 	bic.w	r3, r3, #1
 8108330:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108332:	4b2d      	ldr	r3, [pc, #180]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108334:	691b      	ldr	r3, [r3, #16]
 8108336:	4a2c      	ldr	r2, [pc, #176]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108338:	f043 0304 	orr.w	r3, r3, #4
 810833c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810833e:	f3bf 8f4f 	dsb	sy
}
 8108342:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108344:	f3bf 8f6f 	isb	sy
}
 8108348:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810834a:	7afb      	ldrb	r3, [r7, #11]
 810834c:	2b01      	cmp	r3, #1
 810834e:	d101      	bne.n	8108354 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108350:	bf30      	wfi
 8108352:	e000      	b.n	8108356 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108354:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108356:	4b24      	ldr	r3, [pc, #144]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108358:	691b      	ldr	r3, [r3, #16]
 810835a:	4a23      	ldr	r2, [pc, #140]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810835c:	f023 0304 	bic.w	r3, r3, #4
 8108360:	6113      	str	r3, [r2, #16]
 8108362:	e03c      	b.n	81083de <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108364:	687b      	ldr	r3, [r7, #4]
 8108366:	2b01      	cmp	r3, #1
 8108368:	d123      	bne.n	81083b2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810836a:	f7fb fb81 	bl	8103a70 <HAL_GetCurrentCPUID>
 810836e:	4603      	mov	r3, r0
 8108370:	2b01      	cmp	r3, #1
 8108372:	d133      	bne.n	81083dc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108374:	4b1b      	ldr	r3, [pc, #108]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8108376:	695b      	ldr	r3, [r3, #20]
 8108378:	4a1a      	ldr	r2, [pc, #104]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810837a:	f023 0302 	bic.w	r3, r3, #2
 810837e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108380:	4b19      	ldr	r3, [pc, #100]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108382:	691b      	ldr	r3, [r3, #16]
 8108384:	4a18      	ldr	r2, [pc, #96]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108386:	f043 0304 	orr.w	r3, r3, #4
 810838a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810838c:	f3bf 8f4f 	dsb	sy
}
 8108390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108392:	f3bf 8f6f 	isb	sy
}
 8108396:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108398:	7afb      	ldrb	r3, [r7, #11]
 810839a:	2b01      	cmp	r3, #1
 810839c:	d101      	bne.n	81083a2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810839e:	bf30      	wfi
 81083a0:	e000      	b.n	81083a4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81083a2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81083a4:	4b10      	ldr	r3, [pc, #64]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81083a6:	691b      	ldr	r3, [r3, #16]
 81083a8:	4a0f      	ldr	r2, [pc, #60]	; (81083e8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81083aa:	f023 0304 	bic.w	r3, r3, #4
 81083ae:	6113      	str	r3, [r2, #16]
 81083b0:	e015      	b.n	81083de <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81083b2:	f7fb fb5d 	bl	8103a70 <HAL_GetCurrentCPUID>
 81083b6:	4603      	mov	r3, r0
 81083b8:	2b03      	cmp	r3, #3
 81083ba:	d106      	bne.n	81083ca <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81083bc:	4b09      	ldr	r3, [pc, #36]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81083be:	691b      	ldr	r3, [r3, #16]
 81083c0:	4a08      	ldr	r2, [pc, #32]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81083c2:	f023 0304 	bic.w	r3, r3, #4
 81083c6:	6113      	str	r3, [r2, #16]
 81083c8:	e009      	b.n	81083de <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81083ca:	4b06      	ldr	r3, [pc, #24]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81083cc:	695b      	ldr	r3, [r3, #20]
 81083ce:	4a05      	ldr	r2, [pc, #20]	; (81083e4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81083d0:	f023 0304 	bic.w	r3, r3, #4
 81083d4:	6153      	str	r3, [r2, #20]
 81083d6:	e002      	b.n	81083de <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81083d8:	bf00      	nop
 81083da:	e000      	b.n	81083de <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81083dc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81083de:	3710      	adds	r7, #16
 81083e0:	46bd      	mov	sp, r7
 81083e2:	bd80      	pop	{r7, pc}
 81083e4:	58024800 	.word	0x58024800
 81083e8:	e000ed00 	.word	0xe000ed00

081083ec <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81083ec:	b580      	push	{r7, lr}
 81083ee:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81083f0:	f7fb fb3e 	bl	8103a70 <HAL_GetCurrentCPUID>
 81083f4:	4603      	mov	r3, r0
 81083f6:	2b03      	cmp	r3, #3
 81083f8:	d101      	bne.n	81083fe <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81083fa:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81083fc:	e001      	b.n	8108402 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81083fe:	bf40      	sev
    __WFE ();
 8108400:	bf20      	wfe
}
 8108402:	bf00      	nop
 8108404:	bd80      	pop	{r7, pc}
	...

08108408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108408:	b480      	push	{r7}
 810840a:	b089      	sub	sp, #36	; 0x24
 810840c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810840e:	4bb3      	ldr	r3, [pc, #716]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108410:	691b      	ldr	r3, [r3, #16]
 8108412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108416:	2b18      	cmp	r3, #24
 8108418:	f200 8155 	bhi.w	81086c6 <HAL_RCC_GetSysClockFreq+0x2be>
 810841c:	a201      	add	r2, pc, #4	; (adr r2, 8108424 <HAL_RCC_GetSysClockFreq+0x1c>)
 810841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108422:	bf00      	nop
 8108424:	08108489 	.word	0x08108489
 8108428:	081086c7 	.word	0x081086c7
 810842c:	081086c7 	.word	0x081086c7
 8108430:	081086c7 	.word	0x081086c7
 8108434:	081086c7 	.word	0x081086c7
 8108438:	081086c7 	.word	0x081086c7
 810843c:	081086c7 	.word	0x081086c7
 8108440:	081086c7 	.word	0x081086c7
 8108444:	081084af 	.word	0x081084af
 8108448:	081086c7 	.word	0x081086c7
 810844c:	081086c7 	.word	0x081086c7
 8108450:	081086c7 	.word	0x081086c7
 8108454:	081086c7 	.word	0x081086c7
 8108458:	081086c7 	.word	0x081086c7
 810845c:	081086c7 	.word	0x081086c7
 8108460:	081086c7 	.word	0x081086c7
 8108464:	081084b5 	.word	0x081084b5
 8108468:	081086c7 	.word	0x081086c7
 810846c:	081086c7 	.word	0x081086c7
 8108470:	081086c7 	.word	0x081086c7
 8108474:	081086c7 	.word	0x081086c7
 8108478:	081086c7 	.word	0x081086c7
 810847c:	081086c7 	.word	0x081086c7
 8108480:	081086c7 	.word	0x081086c7
 8108484:	081084bb 	.word	0x081084bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108488:	4b94      	ldr	r3, [pc, #592]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810848a:	681b      	ldr	r3, [r3, #0]
 810848c:	f003 0320 	and.w	r3, r3, #32
 8108490:	2b00      	cmp	r3, #0
 8108492:	d009      	beq.n	81084a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108494:	4b91      	ldr	r3, [pc, #580]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108496:	681b      	ldr	r3, [r3, #0]
 8108498:	08db      	lsrs	r3, r3, #3
 810849a:	f003 0303 	and.w	r3, r3, #3
 810849e:	4a90      	ldr	r2, [pc, #576]	; (81086e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81084a0:	fa22 f303 	lsr.w	r3, r2, r3
 81084a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81084a6:	e111      	b.n	81086cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81084a8:	4b8d      	ldr	r3, [pc, #564]	; (81086e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81084aa:	61bb      	str	r3, [r7, #24]
    break;
 81084ac:	e10e      	b.n	81086cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81084ae:	4b8d      	ldr	r3, [pc, #564]	; (81086e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81084b0:	61bb      	str	r3, [r7, #24]
    break;
 81084b2:	e10b      	b.n	81086cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81084b4:	4b8c      	ldr	r3, [pc, #560]	; (81086e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81084b6:	61bb      	str	r3, [r7, #24]
    break;
 81084b8:	e108      	b.n	81086cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81084ba:	4b88      	ldr	r3, [pc, #544]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81084bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084be:	f003 0303 	and.w	r3, r3, #3
 81084c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81084c4:	4b85      	ldr	r3, [pc, #532]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084c8:	091b      	lsrs	r3, r3, #4
 81084ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81084ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81084d0:	4b82      	ldr	r3, [pc, #520]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81084d4:	f003 0301 	and.w	r3, r3, #1
 81084d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81084da:	4b80      	ldr	r3, [pc, #512]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81084dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81084de:	08db      	lsrs	r3, r3, #3
 81084e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81084e4:	68fa      	ldr	r2, [r7, #12]
 81084e6:	fb02 f303 	mul.w	r3, r2, r3
 81084ea:	ee07 3a90 	vmov	s15, r3
 81084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81084f6:	693b      	ldr	r3, [r7, #16]
 81084f8:	2b00      	cmp	r3, #0
 81084fa:	f000 80e1 	beq.w	81086c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81084fe:	697b      	ldr	r3, [r7, #20]
 8108500:	2b02      	cmp	r3, #2
 8108502:	f000 8083 	beq.w	810860c <HAL_RCC_GetSysClockFreq+0x204>
 8108506:	697b      	ldr	r3, [r7, #20]
 8108508:	2b02      	cmp	r3, #2
 810850a:	f200 80a1 	bhi.w	8108650 <HAL_RCC_GetSysClockFreq+0x248>
 810850e:	697b      	ldr	r3, [r7, #20]
 8108510:	2b00      	cmp	r3, #0
 8108512:	d003      	beq.n	810851c <HAL_RCC_GetSysClockFreq+0x114>
 8108514:	697b      	ldr	r3, [r7, #20]
 8108516:	2b01      	cmp	r3, #1
 8108518:	d056      	beq.n	81085c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810851a:	e099      	b.n	8108650 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810851c:	4b6f      	ldr	r3, [pc, #444]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810851e:	681b      	ldr	r3, [r3, #0]
 8108520:	f003 0320 	and.w	r3, r3, #32
 8108524:	2b00      	cmp	r3, #0
 8108526:	d02d      	beq.n	8108584 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108528:	4b6c      	ldr	r3, [pc, #432]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810852a:	681b      	ldr	r3, [r3, #0]
 810852c:	08db      	lsrs	r3, r3, #3
 810852e:	f003 0303 	and.w	r3, r3, #3
 8108532:	4a6b      	ldr	r2, [pc, #428]	; (81086e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108534:	fa22 f303 	lsr.w	r3, r2, r3
 8108538:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810853a:	687b      	ldr	r3, [r7, #4]
 810853c:	ee07 3a90 	vmov	s15, r3
 8108540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108544:	693b      	ldr	r3, [r7, #16]
 8108546:	ee07 3a90 	vmov	s15, r3
 810854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108552:	4b62      	ldr	r3, [pc, #392]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810855a:	ee07 3a90 	vmov	s15, r3
 810855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108562:	ed97 6a02 	vldr	s12, [r7, #8]
 8108566:	eddf 5a61 	vldr	s11, [pc, #388]	; 81086ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810857e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8108582:	e087      	b.n	8108694 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108584:	693b      	ldr	r3, [r7, #16]
 8108586:	ee07 3a90 	vmov	s15, r3
 810858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810858e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81086f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8108592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108596:	4b51      	ldr	r3, [pc, #324]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810859e:	ee07 3a90 	vmov	s15, r3
 81085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81085aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 81086ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81085c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81085c6:	e065      	b.n	8108694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81085c8:	693b      	ldr	r3, [r7, #16]
 81085ca:	ee07 3a90 	vmov	s15, r3
 81085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81085d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 81086f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81085da:	4b40      	ldr	r3, [pc, #256]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81085e2:	ee07 3a90 	vmov	s15, r3
 81085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81085ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81085ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81086ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81085fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810860a:	e043      	b.n	8108694 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810860c:	693b      	ldr	r3, [r7, #16]
 810860e:	ee07 3a90 	vmov	s15, r3
 8108612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108616:	eddf 6a38 	vldr	s13, [pc, #224]	; 81086f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 810861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810861e:	4b2f      	ldr	r3, [pc, #188]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108626:	ee07 3a90 	vmov	s15, r3
 810862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810862e:	ed97 6a02 	vldr	s12, [r7, #8]
 8108632:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81086ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8108636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810863e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108646:	ee67 7a27 	vmul.f32	s15, s14, s15
 810864a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810864e:	e021      	b.n	8108694 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108650:	693b      	ldr	r3, [r7, #16]
 8108652:	ee07 3a90 	vmov	s15, r3
 8108656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810865a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81086f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108662:	4b1e      	ldr	r3, [pc, #120]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810866a:	ee07 3a90 	vmov	s15, r3
 810866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108672:	ed97 6a02 	vldr	s12, [r7, #8]
 8108676:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81086ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810868e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108692:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8108694:	4b11      	ldr	r3, [pc, #68]	; (81086dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108698:	0a5b      	lsrs	r3, r3, #9
 810869a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810869e:	3301      	adds	r3, #1
 81086a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81086a2:	683b      	ldr	r3, [r7, #0]
 81086a4:	ee07 3a90 	vmov	s15, r3
 81086a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81086ac:	edd7 6a07 	vldr	s13, [r7, #28]
 81086b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81086b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81086b8:	ee17 3a90 	vmov	r3, s15
 81086bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81086be:	e005      	b.n	81086cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81086c0:	2300      	movs	r3, #0
 81086c2:	61bb      	str	r3, [r7, #24]
    break;
 81086c4:	e002      	b.n	81086cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81086c6:	4b07      	ldr	r3, [pc, #28]	; (81086e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81086c8:	61bb      	str	r3, [r7, #24]
    break;
 81086ca:	bf00      	nop
  }

  return sysclockfreq;
 81086cc:	69bb      	ldr	r3, [r7, #24]
}
 81086ce:	4618      	mov	r0, r3
 81086d0:	3724      	adds	r7, #36	; 0x24
 81086d2:	46bd      	mov	sp, r7
 81086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086d8:	4770      	bx	lr
 81086da:	bf00      	nop
 81086dc:	58024400 	.word	0x58024400
 81086e0:	03d09000 	.word	0x03d09000
 81086e4:	003d0900 	.word	0x003d0900
 81086e8:	00f42400 	.word	0x00f42400
 81086ec:	46000000 	.word	0x46000000
 81086f0:	4c742400 	.word	0x4c742400
 81086f4:	4a742400 	.word	0x4a742400
 81086f8:	4b742400 	.word	0x4b742400

081086fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81086fc:	b580      	push	{r7, lr}
 81086fe:	b082      	sub	sp, #8
 8108700:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8108702:	f7ff fe81 	bl	8108408 <HAL_RCC_GetSysClockFreq>
 8108706:	4602      	mov	r2, r0
 8108708:	4b11      	ldr	r3, [pc, #68]	; (8108750 <HAL_RCC_GetHCLKFreq+0x54>)
 810870a:	699b      	ldr	r3, [r3, #24]
 810870c:	0a1b      	lsrs	r3, r3, #8
 810870e:	f003 030f 	and.w	r3, r3, #15
 8108712:	4910      	ldr	r1, [pc, #64]	; (8108754 <HAL_RCC_GetHCLKFreq+0x58>)
 8108714:	5ccb      	ldrb	r3, [r1, r3]
 8108716:	f003 031f 	and.w	r3, r3, #31
 810871a:	fa22 f303 	lsr.w	r3, r2, r3
 810871e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8108720:	4b0b      	ldr	r3, [pc, #44]	; (8108750 <HAL_RCC_GetHCLKFreq+0x54>)
 8108722:	699b      	ldr	r3, [r3, #24]
 8108724:	f003 030f 	and.w	r3, r3, #15
 8108728:	4a0a      	ldr	r2, [pc, #40]	; (8108754 <HAL_RCC_GetHCLKFreq+0x58>)
 810872a:	5cd3      	ldrb	r3, [r2, r3]
 810872c:	f003 031f 	and.w	r3, r3, #31
 8108730:	687a      	ldr	r2, [r7, #4]
 8108732:	fa22 f303 	lsr.w	r3, r2, r3
 8108736:	4a08      	ldr	r2, [pc, #32]	; (8108758 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108738:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810873a:	4b07      	ldr	r3, [pc, #28]	; (8108758 <HAL_RCC_GetHCLKFreq+0x5c>)
 810873c:	681b      	ldr	r3, [r3, #0]
 810873e:	4a07      	ldr	r2, [pc, #28]	; (810875c <HAL_RCC_GetHCLKFreq+0x60>)
 8108740:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8108742:	4b05      	ldr	r3, [pc, #20]	; (8108758 <HAL_RCC_GetHCLKFreq+0x5c>)
 8108744:	681b      	ldr	r3, [r3, #0]
}
 8108746:	4618      	mov	r0, r3
 8108748:	3708      	adds	r7, #8
 810874a:	46bd      	mov	sp, r7
 810874c:	bd80      	pop	{r7, pc}
 810874e:	bf00      	nop
 8108750:	58024400 	.word	0x58024400
 8108754:	0810d6cc 	.word	0x0810d6cc
 8108758:	10000004 	.word	0x10000004
 810875c:	10000000 	.word	0x10000000

08108760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8108760:	b580      	push	{r7, lr}
 8108762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8108764:	f7ff ffca 	bl	81086fc <HAL_RCC_GetHCLKFreq>
 8108768:	4602      	mov	r2, r0
 810876a:	4b06      	ldr	r3, [pc, #24]	; (8108784 <HAL_RCC_GetPCLK1Freq+0x24>)
 810876c:	69db      	ldr	r3, [r3, #28]
 810876e:	091b      	lsrs	r3, r3, #4
 8108770:	f003 0307 	and.w	r3, r3, #7
 8108774:	4904      	ldr	r1, [pc, #16]	; (8108788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8108776:	5ccb      	ldrb	r3, [r1, r3]
 8108778:	f003 031f 	and.w	r3, r3, #31
 810877c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8108780:	4618      	mov	r0, r3
 8108782:	bd80      	pop	{r7, pc}
 8108784:	58024400 	.word	0x58024400
 8108788:	0810d6cc 	.word	0x0810d6cc

0810878c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810878c:	b580      	push	{r7, lr}
 810878e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8108790:	f7ff ffb4 	bl	81086fc <HAL_RCC_GetHCLKFreq>
 8108794:	4602      	mov	r2, r0
 8108796:	4b06      	ldr	r3, [pc, #24]	; (81087b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8108798:	69db      	ldr	r3, [r3, #28]
 810879a:	0a1b      	lsrs	r3, r3, #8
 810879c:	f003 0307 	and.w	r3, r3, #7
 81087a0:	4904      	ldr	r1, [pc, #16]	; (81087b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81087a2:	5ccb      	ldrb	r3, [r1, r3]
 81087a4:	f003 031f 	and.w	r3, r3, #31
 81087a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81087ac:	4618      	mov	r0, r3
 81087ae:	bd80      	pop	{r7, pc}
 81087b0:	58024400 	.word	0x58024400
 81087b4:	0810d6cc 	.word	0x0810d6cc

081087b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81087b8:	b580      	push	{r7, lr}
 81087ba:	b086      	sub	sp, #24
 81087bc:	af00      	add	r7, sp, #0
 81087be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81087c0:	2300      	movs	r3, #0
 81087c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81087c4:	2300      	movs	r3, #0
 81087c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81087c8:	687b      	ldr	r3, [r7, #4]
 81087ca:	681b      	ldr	r3, [r3, #0]
 81087cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81087d0:	2b00      	cmp	r3, #0
 81087d2:	d03f      	beq.n	8108854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81087d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81087dc:	d02a      	beq.n	8108834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81087de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81087e2:	d824      	bhi.n	810882e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81087e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81087e8:	d018      	beq.n	810881c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81087ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81087ee:	d81e      	bhi.n	810882e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81087f0:	2b00      	cmp	r3, #0
 81087f2:	d003      	beq.n	81087fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 81087f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81087f8:	d007      	beq.n	810880a <HAL_RCCEx_PeriphCLKConfig+0x52>
 81087fa:	e018      	b.n	810882e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81087fc:	4bab      	ldr	r3, [pc, #684]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108800:	4aaa      	ldr	r2, [pc, #680]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8108808:	e015      	b.n	8108836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810880a:	687b      	ldr	r3, [r7, #4]
 810880c:	3304      	adds	r3, #4
 810880e:	2102      	movs	r1, #2
 8108810:	4618      	mov	r0, r3
 8108812:	f001 f9cf 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108816:	4603      	mov	r3, r0
 8108818:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810881a:	e00c      	b.n	8108836 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810881c:	687b      	ldr	r3, [r7, #4]
 810881e:	3324      	adds	r3, #36	; 0x24
 8108820:	2102      	movs	r1, #2
 8108822:	4618      	mov	r0, r3
 8108824:	f001 fa78 	bl	8109d18 <RCCEx_PLL3_Config>
 8108828:	4603      	mov	r3, r0
 810882a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810882c:	e003      	b.n	8108836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810882e:	2301      	movs	r3, #1
 8108830:	75fb      	strb	r3, [r7, #23]
      break;
 8108832:	e000      	b.n	8108836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8108834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108836:	7dfb      	ldrb	r3, [r7, #23]
 8108838:	2b00      	cmp	r3, #0
 810883a:	d109      	bne.n	8108850 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810883c:	4b9b      	ldr	r3, [pc, #620]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810883e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108848:	4998      	ldr	r1, [pc, #608]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810884a:	4313      	orrs	r3, r2
 810884c:	650b      	str	r3, [r1, #80]	; 0x50
 810884e:	e001      	b.n	8108854 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108850:	7dfb      	ldrb	r3, [r7, #23]
 8108852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	681b      	ldr	r3, [r3, #0]
 8108858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810885c:	2b00      	cmp	r3, #0
 810885e:	d03d      	beq.n	81088dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8108860:	687b      	ldr	r3, [r7, #4]
 8108862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108864:	2b04      	cmp	r3, #4
 8108866:	d826      	bhi.n	81088b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8108868:	a201      	add	r2, pc, #4	; (adr r2, 8108870 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810886e:	bf00      	nop
 8108870:	08108885 	.word	0x08108885
 8108874:	08108893 	.word	0x08108893
 8108878:	081088a5 	.word	0x081088a5
 810887c:	081088bd 	.word	0x081088bd
 8108880:	081088bd 	.word	0x081088bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108884:	4b89      	ldr	r3, [pc, #548]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108888:	4a88      	ldr	r2, [pc, #544]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810888a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810888e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108890:	e015      	b.n	81088be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108892:	687b      	ldr	r3, [r7, #4]
 8108894:	3304      	adds	r3, #4
 8108896:	2100      	movs	r1, #0
 8108898:	4618      	mov	r0, r3
 810889a:	f001 f98b 	bl	8109bb4 <RCCEx_PLL2_Config>
 810889e:	4603      	mov	r3, r0
 81088a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81088a2:	e00c      	b.n	81088be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	3324      	adds	r3, #36	; 0x24
 81088a8:	2100      	movs	r1, #0
 81088aa:	4618      	mov	r0, r3
 81088ac:	f001 fa34 	bl	8109d18 <RCCEx_PLL3_Config>
 81088b0:	4603      	mov	r3, r0
 81088b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81088b4:	e003      	b.n	81088be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81088b6:	2301      	movs	r3, #1
 81088b8:	75fb      	strb	r3, [r7, #23]
      break;
 81088ba:	e000      	b.n	81088be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81088bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81088be:	7dfb      	ldrb	r3, [r7, #23]
 81088c0:	2b00      	cmp	r3, #0
 81088c2:	d109      	bne.n	81088d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81088c4:	4b79      	ldr	r3, [pc, #484]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81088c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81088c8:	f023 0207 	bic.w	r2, r3, #7
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088d0:	4976      	ldr	r1, [pc, #472]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81088d2:	4313      	orrs	r3, r2
 81088d4:	650b      	str	r3, [r1, #80]	; 0x50
 81088d6:	e001      	b.n	81088dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81088d8:	7dfb      	ldrb	r3, [r7, #23]
 81088da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81088dc:	687b      	ldr	r3, [r7, #4]
 81088de:	681b      	ldr	r3, [r3, #0]
 81088e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81088e4:	2b00      	cmp	r3, #0
 81088e6:	d042      	beq.n	810896e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81088e8:	687b      	ldr	r3, [r7, #4]
 81088ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81088ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81088f0:	d02b      	beq.n	810894a <HAL_RCCEx_PeriphCLKConfig+0x192>
 81088f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81088f6:	d825      	bhi.n	8108944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81088f8:	2bc0      	cmp	r3, #192	; 0xc0
 81088fa:	d028      	beq.n	810894e <HAL_RCCEx_PeriphCLKConfig+0x196>
 81088fc:	2bc0      	cmp	r3, #192	; 0xc0
 81088fe:	d821      	bhi.n	8108944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108900:	2b80      	cmp	r3, #128	; 0x80
 8108902:	d016      	beq.n	8108932 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8108904:	2b80      	cmp	r3, #128	; 0x80
 8108906:	d81d      	bhi.n	8108944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8108908:	2b00      	cmp	r3, #0
 810890a:	d002      	beq.n	8108912 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810890c:	2b40      	cmp	r3, #64	; 0x40
 810890e:	d007      	beq.n	8108920 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8108910:	e018      	b.n	8108944 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108912:	4b66      	ldr	r3, [pc, #408]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108916:	4a65      	ldr	r2, [pc, #404]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810891c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810891e:	e017      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108920:	687b      	ldr	r3, [r7, #4]
 8108922:	3304      	adds	r3, #4
 8108924:	2100      	movs	r1, #0
 8108926:	4618      	mov	r0, r3
 8108928:	f001 f944 	bl	8109bb4 <RCCEx_PLL2_Config>
 810892c:	4603      	mov	r3, r0
 810892e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108930:	e00e      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108932:	687b      	ldr	r3, [r7, #4]
 8108934:	3324      	adds	r3, #36	; 0x24
 8108936:	2100      	movs	r1, #0
 8108938:	4618      	mov	r0, r3
 810893a:	f001 f9ed 	bl	8109d18 <RCCEx_PLL3_Config>
 810893e:	4603      	mov	r3, r0
 8108940:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8108942:	e005      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108944:	2301      	movs	r3, #1
 8108946:	75fb      	strb	r3, [r7, #23]
      break;
 8108948:	e002      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810894a:	bf00      	nop
 810894c:	e000      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810894e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108950:	7dfb      	ldrb	r3, [r7, #23]
 8108952:	2b00      	cmp	r3, #0
 8108954:	d109      	bne.n	810896a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8108956:	4b55      	ldr	r3, [pc, #340]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810895a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108962:	4952      	ldr	r1, [pc, #328]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108964:	4313      	orrs	r3, r2
 8108966:	650b      	str	r3, [r1, #80]	; 0x50
 8108968:	e001      	b.n	810896e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810896a:	7dfb      	ldrb	r3, [r7, #23]
 810896c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810896e:	687b      	ldr	r3, [r7, #4]
 8108970:	681b      	ldr	r3, [r3, #0]
 8108972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8108976:	2b00      	cmp	r3, #0
 8108978:	d049      	beq.n	8108a0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810897a:	687b      	ldr	r3, [r7, #4]
 810897c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8108984:	d030      	beq.n	81089e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8108986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810898a:	d82a      	bhi.n	81089e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810898c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108990:	d02c      	beq.n	81089ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8108992:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8108996:	d824      	bhi.n	81089e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8108998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810899c:	d018      	beq.n	81089d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810899e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81089a2:	d81e      	bhi.n	81089e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81089a4:	2b00      	cmp	r3, #0
 81089a6:	d003      	beq.n	81089b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81089a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81089ac:	d007      	beq.n	81089be <HAL_RCCEx_PeriphCLKConfig+0x206>
 81089ae:	e018      	b.n	81089e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81089b0:	4b3e      	ldr	r3, [pc, #248]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089b4:	4a3d      	ldr	r2, [pc, #244]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81089b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81089ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81089bc:	e017      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	3304      	adds	r3, #4
 81089c2:	2100      	movs	r1, #0
 81089c4:	4618      	mov	r0, r3
 81089c6:	f001 f8f5 	bl	8109bb4 <RCCEx_PLL2_Config>
 81089ca:	4603      	mov	r3, r0
 81089cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81089ce:	e00e      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81089d0:	687b      	ldr	r3, [r7, #4]
 81089d2:	3324      	adds	r3, #36	; 0x24
 81089d4:	2100      	movs	r1, #0
 81089d6:	4618      	mov	r0, r3
 81089d8:	f001 f99e 	bl	8109d18 <RCCEx_PLL3_Config>
 81089dc:	4603      	mov	r3, r0
 81089de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81089e0:	e005      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81089e2:	2301      	movs	r3, #1
 81089e4:	75fb      	strb	r3, [r7, #23]
      break;
 81089e6:	e002      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81089e8:	bf00      	nop
 81089ea:	e000      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81089ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81089ee:	7dfb      	ldrb	r3, [r7, #23]
 81089f0:	2b00      	cmp	r3, #0
 81089f2:	d10a      	bne.n	8108a0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81089f4:	4b2d      	ldr	r3, [pc, #180]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81089f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81089f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81089fc:	687b      	ldr	r3, [r7, #4]
 81089fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108a02:	492a      	ldr	r1, [pc, #168]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108a04:	4313      	orrs	r3, r2
 8108a06:	658b      	str	r3, [r1, #88]	; 0x58
 8108a08:	e001      	b.n	8108a0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a0a:	7dfb      	ldrb	r3, [r7, #23]
 8108a0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	681b      	ldr	r3, [r3, #0]
 8108a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108a16:	2b00      	cmp	r3, #0
 8108a18:	d04c      	beq.n	8108ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108a24:	d030      	beq.n	8108a88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8108a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8108a2a:	d82a      	bhi.n	8108a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108a30:	d02c      	beq.n	8108a8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8108a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108a36:	d824      	bhi.n	8108a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108a3c:	d018      	beq.n	8108a70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8108a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108a42:	d81e      	bhi.n	8108a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8108a44:	2b00      	cmp	r3, #0
 8108a46:	d003      	beq.n	8108a50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8108a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108a4c:	d007      	beq.n	8108a5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8108a4e:	e018      	b.n	8108a82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108a50:	4b16      	ldr	r3, [pc, #88]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108a54:	4a15      	ldr	r2, [pc, #84]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108a5c:	e017      	b.n	8108a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108a5e:	687b      	ldr	r3, [r7, #4]
 8108a60:	3304      	adds	r3, #4
 8108a62:	2100      	movs	r1, #0
 8108a64:	4618      	mov	r0, r3
 8108a66:	f001 f8a5 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108a6a:	4603      	mov	r3, r0
 8108a6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8108a6e:	e00e      	b.n	8108a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	3324      	adds	r3, #36	; 0x24
 8108a74:	2100      	movs	r1, #0
 8108a76:	4618      	mov	r0, r3
 8108a78:	f001 f94e 	bl	8109d18 <RCCEx_PLL3_Config>
 8108a7c:	4603      	mov	r3, r0
 8108a7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8108a80:	e005      	b.n	8108a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8108a82:	2301      	movs	r3, #1
 8108a84:	75fb      	strb	r3, [r7, #23]
      break;
 8108a86:	e002      	b.n	8108a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108a88:	bf00      	nop
 8108a8a:	e000      	b.n	8108a8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8108a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108a8e:	7dfb      	ldrb	r3, [r7, #23]
 8108a90:	2b00      	cmp	r3, #0
 8108a92:	d10d      	bne.n	8108ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8108a94:	4b05      	ldr	r3, [pc, #20]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108a98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8108a9c:	687b      	ldr	r3, [r7, #4]
 8108a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8108aa2:	4902      	ldr	r1, [pc, #8]	; (8108aac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8108aa4:	4313      	orrs	r3, r2
 8108aa6:	658b      	str	r3, [r1, #88]	; 0x58
 8108aa8:	e004      	b.n	8108ab4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8108aaa:	bf00      	nop
 8108aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108ab0:	7dfb      	ldrb	r3, [r7, #23]
 8108ab2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	681b      	ldr	r3, [r3, #0]
 8108ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108abc:	2b00      	cmp	r3, #0
 8108abe:	d032      	beq.n	8108b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8108ac0:	687b      	ldr	r3, [r7, #4]
 8108ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108ac4:	2b30      	cmp	r3, #48	; 0x30
 8108ac6:	d01c      	beq.n	8108b02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8108ac8:	2b30      	cmp	r3, #48	; 0x30
 8108aca:	d817      	bhi.n	8108afc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108acc:	2b20      	cmp	r3, #32
 8108ace:	d00c      	beq.n	8108aea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8108ad0:	2b20      	cmp	r3, #32
 8108ad2:	d813      	bhi.n	8108afc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8108ad4:	2b00      	cmp	r3, #0
 8108ad6:	d016      	beq.n	8108b06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8108ad8:	2b10      	cmp	r3, #16
 8108ada:	d10f      	bne.n	8108afc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108adc:	4baf      	ldr	r3, [pc, #700]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108ae0:	4aae      	ldr	r2, [pc, #696]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108ae8:	e00e      	b.n	8108b08 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	3304      	adds	r3, #4
 8108aee:	2102      	movs	r1, #2
 8108af0:	4618      	mov	r0, r3
 8108af2:	f001 f85f 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108af6:	4603      	mov	r3, r0
 8108af8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8108afa:	e005      	b.n	8108b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108afc:	2301      	movs	r3, #1
 8108afe:	75fb      	strb	r3, [r7, #23]
      break;
 8108b00:	e002      	b.n	8108b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8108b02:	bf00      	nop
 8108b04:	e000      	b.n	8108b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8108b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108b08:	7dfb      	ldrb	r3, [r7, #23]
 8108b0a:	2b00      	cmp	r3, #0
 8108b0c:	d109      	bne.n	8108b22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8108b0e:	4ba3      	ldr	r3, [pc, #652]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108b12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108b1a:	49a0      	ldr	r1, [pc, #640]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108b1c:	4313      	orrs	r3, r2
 8108b1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108b20:	e001      	b.n	8108b26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b22:	7dfb      	ldrb	r3, [r7, #23]
 8108b24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	681b      	ldr	r3, [r3, #0]
 8108b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8108b2e:	2b00      	cmp	r3, #0
 8108b30:	d047      	beq.n	8108bc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108b3a:	d030      	beq.n	8108b9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8108b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108b40:	d82a      	bhi.n	8108b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108b46:	d02c      	beq.n	8108ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8108b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108b4c:	d824      	bhi.n	8108b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108b52:	d018      	beq.n	8108b86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8108b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108b58:	d81e      	bhi.n	8108b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8108b5a:	2b00      	cmp	r3, #0
 8108b5c:	d003      	beq.n	8108b66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8108b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108b62:	d007      	beq.n	8108b74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8108b64:	e018      	b.n	8108b98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108b66:	4b8d      	ldr	r3, [pc, #564]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108b6a:	4a8c      	ldr	r2, [pc, #560]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108b72:	e017      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	3304      	adds	r3, #4
 8108b78:	2100      	movs	r1, #0
 8108b7a:	4618      	mov	r0, r3
 8108b7c:	f001 f81a 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108b80:	4603      	mov	r3, r0
 8108b82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108b84:	e00e      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8108b86:	687b      	ldr	r3, [r7, #4]
 8108b88:	3324      	adds	r3, #36	; 0x24
 8108b8a:	2100      	movs	r1, #0
 8108b8c:	4618      	mov	r0, r3
 8108b8e:	f001 f8c3 	bl	8109d18 <RCCEx_PLL3_Config>
 8108b92:	4603      	mov	r3, r0
 8108b94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8108b96:	e005      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108b98:	2301      	movs	r3, #1
 8108b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8108b9c:	e002      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8108b9e:	bf00      	nop
 8108ba0:	e000      	b.n	8108ba4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8108ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ba4:	7dfb      	ldrb	r3, [r7, #23]
 8108ba6:	2b00      	cmp	r3, #0
 8108ba8:	d109      	bne.n	8108bbe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8108baa:	4b7c      	ldr	r3, [pc, #496]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108bae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108bb6:	4979      	ldr	r1, [pc, #484]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108bb8:	4313      	orrs	r3, r2
 8108bba:	650b      	str	r3, [r1, #80]	; 0x50
 8108bbc:	e001      	b.n	8108bc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108bbe:	7dfb      	ldrb	r3, [r7, #23]
 8108bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	681b      	ldr	r3, [r3, #0]
 8108bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8108bca:	2b00      	cmp	r3, #0
 8108bcc:	d049      	beq.n	8108c62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108bd6:	d02e      	beq.n	8108c36 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8108bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108bdc:	d828      	bhi.n	8108c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108be2:	d02a      	beq.n	8108c3a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8108be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8108be8:	d822      	bhi.n	8108c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8108bee:	d026      	beq.n	8108c3e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8108bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8108bf4:	d81c      	bhi.n	8108c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108bfa:	d010      	beq.n	8108c1e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8108bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108c00:	d816      	bhi.n	8108c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8108c02:	2b00      	cmp	r3, #0
 8108c04:	d01d      	beq.n	8108c42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8108c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108c0a:	d111      	bne.n	8108c30 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108c0c:	687b      	ldr	r3, [r7, #4]
 8108c0e:	3304      	adds	r3, #4
 8108c10:	2101      	movs	r1, #1
 8108c12:	4618      	mov	r0, r3
 8108c14:	f000 ffce 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108c18:	4603      	mov	r3, r0
 8108c1a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8108c1c:	e012      	b.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108c1e:	687b      	ldr	r3, [r7, #4]
 8108c20:	3324      	adds	r3, #36	; 0x24
 8108c22:	2101      	movs	r1, #1
 8108c24:	4618      	mov	r0, r3
 8108c26:	f001 f877 	bl	8109d18 <RCCEx_PLL3_Config>
 8108c2a:	4603      	mov	r3, r0
 8108c2c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8108c2e:	e009      	b.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108c30:	2301      	movs	r3, #1
 8108c32:	75fb      	strb	r3, [r7, #23]
      break;
 8108c34:	e006      	b.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108c36:	bf00      	nop
 8108c38:	e004      	b.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108c3a:	bf00      	nop
 8108c3c:	e002      	b.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108c3e:	bf00      	nop
 8108c40:	e000      	b.n	8108c44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8108c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108c44:	7dfb      	ldrb	r3, [r7, #23]
 8108c46:	2b00      	cmp	r3, #0
 8108c48:	d109      	bne.n	8108c5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8108c4a:	4b54      	ldr	r3, [pc, #336]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108c4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8108c52:	687b      	ldr	r3, [r7, #4]
 8108c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108c56:	4951      	ldr	r1, [pc, #324]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108c58:	4313      	orrs	r3, r2
 8108c5a:	650b      	str	r3, [r1, #80]	; 0x50
 8108c5c:	e001      	b.n	8108c62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108c5e:	7dfb      	ldrb	r3, [r7, #23]
 8108c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	681b      	ldr	r3, [r3, #0]
 8108c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108c6a:	2b00      	cmp	r3, #0
 8108c6c:	d04b      	beq.n	8108d06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8108c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108c78:	d02e      	beq.n	8108cd8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8108c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108c7e:	d828      	bhi.n	8108cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108c84:	d02a      	beq.n	8108cdc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8108c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108c8a:	d822      	bhi.n	8108cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108c8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108c90:	d026      	beq.n	8108ce0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8108c92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108c96:	d81c      	bhi.n	8108cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108c9c:	d010      	beq.n	8108cc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8108c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108ca2:	d816      	bhi.n	8108cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8108ca4:	2b00      	cmp	r3, #0
 8108ca6:	d01d      	beq.n	8108ce4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8108ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108cac:	d111      	bne.n	8108cd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108cae:	687b      	ldr	r3, [r7, #4]
 8108cb0:	3304      	adds	r3, #4
 8108cb2:	2101      	movs	r1, #1
 8108cb4:	4618      	mov	r0, r3
 8108cb6:	f000 ff7d 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108cba:	4603      	mov	r3, r0
 8108cbc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8108cbe:	e012      	b.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	3324      	adds	r3, #36	; 0x24
 8108cc4:	2101      	movs	r1, #1
 8108cc6:	4618      	mov	r0, r3
 8108cc8:	f001 f826 	bl	8109d18 <RCCEx_PLL3_Config>
 8108ccc:	4603      	mov	r3, r0
 8108cce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8108cd0:	e009      	b.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8108cd2:	2301      	movs	r3, #1
 8108cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8108cd6:	e006      	b.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108cd8:	bf00      	nop
 8108cda:	e004      	b.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108cdc:	bf00      	nop
 8108cde:	e002      	b.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108ce0:	bf00      	nop
 8108ce2:	e000      	b.n	8108ce6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8108ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ce6:	7dfb      	ldrb	r3, [r7, #23]
 8108ce8:	2b00      	cmp	r3, #0
 8108cea:	d10a      	bne.n	8108d02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8108cec:	4b2b      	ldr	r3, [pc, #172]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108cf0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8108cfa:	4928      	ldr	r1, [pc, #160]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108cfc:	4313      	orrs	r3, r2
 8108cfe:	658b      	str	r3, [r1, #88]	; 0x58
 8108d00:	e001      	b.n	8108d06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d02:	7dfb      	ldrb	r3, [r7, #23]
 8108d04:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8108d06:	687b      	ldr	r3, [r7, #4]
 8108d08:	681b      	ldr	r3, [r3, #0]
 8108d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108d0e:	2b00      	cmp	r3, #0
 8108d10:	d02f      	beq.n	8108d72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8108d12:	687b      	ldr	r3, [r7, #4]
 8108d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108d1a:	d00e      	beq.n	8108d3a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8108d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108d20:	d814      	bhi.n	8108d4c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8108d22:	2b00      	cmp	r3, #0
 8108d24:	d015      	beq.n	8108d52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8108d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108d2a:	d10f      	bne.n	8108d4c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108d2c:	4b1b      	ldr	r3, [pc, #108]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108d30:	4a1a      	ldr	r2, [pc, #104]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8108d38:	e00c      	b.n	8108d54 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	3304      	adds	r3, #4
 8108d3e:	2101      	movs	r1, #1
 8108d40:	4618      	mov	r0, r3
 8108d42:	f000 ff37 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108d46:	4603      	mov	r3, r0
 8108d48:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8108d4a:	e003      	b.n	8108d54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108d4c:	2301      	movs	r3, #1
 8108d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8108d50:	e000      	b.n	8108d54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8108d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108d54:	7dfb      	ldrb	r3, [r7, #23]
 8108d56:	2b00      	cmp	r3, #0
 8108d58:	d109      	bne.n	8108d6e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8108d5a:	4b10      	ldr	r3, [pc, #64]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108d5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8108d62:	687b      	ldr	r3, [r7, #4]
 8108d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108d66:	490d      	ldr	r1, [pc, #52]	; (8108d9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8108d68:	4313      	orrs	r3, r2
 8108d6a:	650b      	str	r3, [r1, #80]	; 0x50
 8108d6c:	e001      	b.n	8108d72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d6e:	7dfb      	ldrb	r3, [r7, #23]
 8108d70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108d72:	687b      	ldr	r3, [r7, #4]
 8108d74:	681b      	ldr	r3, [r3, #0]
 8108d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108d7a:	2b00      	cmp	r3, #0
 8108d7c:	d033      	beq.n	8108de6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108d82:	2b03      	cmp	r3, #3
 8108d84:	d81c      	bhi.n	8108dc0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8108d86:	a201      	add	r2, pc, #4	; (adr r2, 8108d8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8108d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d8c:	08108dc7 	.word	0x08108dc7
 8108d90:	08108da1 	.word	0x08108da1
 8108d94:	08108daf 	.word	0x08108daf
 8108d98:	08108dc7 	.word	0x08108dc7
 8108d9c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108da0:	4bb9      	ldr	r3, [pc, #740]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108da4:	4ab8      	ldr	r2, [pc, #736]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108dac:	e00c      	b.n	8108dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8108dae:	687b      	ldr	r3, [r7, #4]
 8108db0:	3304      	adds	r3, #4
 8108db2:	2102      	movs	r1, #2
 8108db4:	4618      	mov	r0, r3
 8108db6:	f000 fefd 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108dba:	4603      	mov	r3, r0
 8108dbc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8108dbe:	e003      	b.n	8108dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8108dc0:	2301      	movs	r3, #1
 8108dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8108dc4:	e000      	b.n	8108dc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8108dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108dc8:	7dfb      	ldrb	r3, [r7, #23]
 8108dca:	2b00      	cmp	r3, #0
 8108dcc:	d109      	bne.n	8108de2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8108dce:	4bae      	ldr	r3, [pc, #696]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108dd2:	f023 0203 	bic.w	r2, r3, #3
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108dda:	49ab      	ldr	r1, [pc, #684]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ddc:	4313      	orrs	r3, r2
 8108dde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8108de0:	e001      	b.n	8108de6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108de2:	7dfb      	ldrb	r3, [r7, #23]
 8108de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8108de6:	687b      	ldr	r3, [r7, #4]
 8108de8:	681b      	ldr	r3, [r3, #0]
 8108dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8108dee:	2b00      	cmp	r3, #0
 8108df0:	f000 8088 	beq.w	8108f04 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8108df4:	4ba5      	ldr	r3, [pc, #660]	; (810908c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	4aa4      	ldr	r2, [pc, #656]	; (810908c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8108dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8108dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8108e00:	f7fa fcf6 	bl	81037f0 <HAL_GetTick>
 8108e04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108e06:	e009      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8108e08:	f7fa fcf2 	bl	81037f0 <HAL_GetTick>
 8108e0c:	4602      	mov	r2, r0
 8108e0e:	693b      	ldr	r3, [r7, #16]
 8108e10:	1ad3      	subs	r3, r2, r3
 8108e12:	2b64      	cmp	r3, #100	; 0x64
 8108e14:	d902      	bls.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8108e16:	2303      	movs	r3, #3
 8108e18:	75fb      	strb	r3, [r7, #23]
        break;
 8108e1a:	e005      	b.n	8108e28 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108e1c:	4b9b      	ldr	r3, [pc, #620]	; (810908c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8108e1e:	681b      	ldr	r3, [r3, #0]
 8108e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108e24:	2b00      	cmp	r3, #0
 8108e26:	d0ef      	beq.n	8108e08 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8108e28:	7dfb      	ldrb	r3, [r7, #23]
 8108e2a:	2b00      	cmp	r3, #0
 8108e2c:	d168      	bne.n	8108f00 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8108e2e:	4b96      	ldr	r3, [pc, #600]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108e32:	687b      	ldr	r3, [r7, #4]
 8108e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108e38:	4053      	eors	r3, r2
 8108e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108e3e:	2b00      	cmp	r3, #0
 8108e40:	d013      	beq.n	8108e6a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108e42:	4b91      	ldr	r3, [pc, #580]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108e4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108e4c:	4b8e      	ldr	r3, [pc, #568]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108e50:	4a8d      	ldr	r2, [pc, #564]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8108e56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8108e58:	4b8b      	ldr	r3, [pc, #556]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108e5c:	4a8a      	ldr	r2, [pc, #552]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108e62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8108e64:	4a88      	ldr	r2, [pc, #544]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e66:	68fb      	ldr	r3, [r7, #12]
 8108e68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108e74:	d115      	bne.n	8108ea2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108e76:	f7fa fcbb 	bl	81037f0 <HAL_GetTick>
 8108e7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108e7c:	e00b      	b.n	8108e96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8108e7e:	f7fa fcb7 	bl	81037f0 <HAL_GetTick>
 8108e82:	4602      	mov	r2, r0
 8108e84:	693b      	ldr	r3, [r7, #16]
 8108e86:	1ad3      	subs	r3, r2, r3
 8108e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8108e8c:	4293      	cmp	r3, r2
 8108e8e:	d902      	bls.n	8108e96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8108e90:	2303      	movs	r3, #3
 8108e92:	75fb      	strb	r3, [r7, #23]
            break;
 8108e94:	e005      	b.n	8108ea2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108e96:	4b7c      	ldr	r3, [pc, #496]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108e9a:	f003 0302 	and.w	r3, r3, #2
 8108e9e:	2b00      	cmp	r3, #0
 8108ea0:	d0ed      	beq.n	8108e7e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8108ea2:	7dfb      	ldrb	r3, [r7, #23]
 8108ea4:	2b00      	cmp	r3, #0
 8108ea6:	d128      	bne.n	8108efa <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8108ea8:	687b      	ldr	r3, [r7, #4]
 8108eaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108eb6:	d10f      	bne.n	8108ed8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8108eb8:	4b73      	ldr	r3, [pc, #460]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108eba:	691b      	ldr	r3, [r3, #16]
 8108ebc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108ec6:	091b      	lsrs	r3, r3, #4
 8108ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8108ecc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8108ed0:	496d      	ldr	r1, [pc, #436]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ed2:	4313      	orrs	r3, r2
 8108ed4:	610b      	str	r3, [r1, #16]
 8108ed6:	e005      	b.n	8108ee4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8108ed8:	4b6b      	ldr	r3, [pc, #428]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108eda:	691b      	ldr	r3, [r3, #16]
 8108edc:	4a6a      	ldr	r2, [pc, #424]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ede:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8108ee2:	6113      	str	r3, [r2, #16]
 8108ee4:	4b68      	ldr	r3, [pc, #416]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ee6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8108ef2:	4965      	ldr	r1, [pc, #404]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ef4:	4313      	orrs	r3, r2
 8108ef6:	670b      	str	r3, [r1, #112]	; 0x70
 8108ef8:	e004      	b.n	8108f04 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8108efa:	7dfb      	ldrb	r3, [r7, #23]
 8108efc:	75bb      	strb	r3, [r7, #22]
 8108efe:	e001      	b.n	8108f04 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108f00:	7dfb      	ldrb	r3, [r7, #23]
 8108f02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	681b      	ldr	r3, [r3, #0]
 8108f08:	f003 0301 	and.w	r3, r3, #1
 8108f0c:	2b00      	cmp	r3, #0
 8108f0e:	d07e      	beq.n	810900e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8108f10:	687b      	ldr	r3, [r7, #4]
 8108f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108f14:	2b28      	cmp	r3, #40	; 0x28
 8108f16:	d867      	bhi.n	8108fe8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8108f18:	a201      	add	r2, pc, #4	; (adr r2, 8108f20 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8108f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f1e:	bf00      	nop
 8108f20:	08108fef 	.word	0x08108fef
 8108f24:	08108fe9 	.word	0x08108fe9
 8108f28:	08108fe9 	.word	0x08108fe9
 8108f2c:	08108fe9 	.word	0x08108fe9
 8108f30:	08108fe9 	.word	0x08108fe9
 8108f34:	08108fe9 	.word	0x08108fe9
 8108f38:	08108fe9 	.word	0x08108fe9
 8108f3c:	08108fe9 	.word	0x08108fe9
 8108f40:	08108fc5 	.word	0x08108fc5
 8108f44:	08108fe9 	.word	0x08108fe9
 8108f48:	08108fe9 	.word	0x08108fe9
 8108f4c:	08108fe9 	.word	0x08108fe9
 8108f50:	08108fe9 	.word	0x08108fe9
 8108f54:	08108fe9 	.word	0x08108fe9
 8108f58:	08108fe9 	.word	0x08108fe9
 8108f5c:	08108fe9 	.word	0x08108fe9
 8108f60:	08108fd7 	.word	0x08108fd7
 8108f64:	08108fe9 	.word	0x08108fe9
 8108f68:	08108fe9 	.word	0x08108fe9
 8108f6c:	08108fe9 	.word	0x08108fe9
 8108f70:	08108fe9 	.word	0x08108fe9
 8108f74:	08108fe9 	.word	0x08108fe9
 8108f78:	08108fe9 	.word	0x08108fe9
 8108f7c:	08108fe9 	.word	0x08108fe9
 8108f80:	08108fef 	.word	0x08108fef
 8108f84:	08108fe9 	.word	0x08108fe9
 8108f88:	08108fe9 	.word	0x08108fe9
 8108f8c:	08108fe9 	.word	0x08108fe9
 8108f90:	08108fe9 	.word	0x08108fe9
 8108f94:	08108fe9 	.word	0x08108fe9
 8108f98:	08108fe9 	.word	0x08108fe9
 8108f9c:	08108fe9 	.word	0x08108fe9
 8108fa0:	08108fef 	.word	0x08108fef
 8108fa4:	08108fe9 	.word	0x08108fe9
 8108fa8:	08108fe9 	.word	0x08108fe9
 8108fac:	08108fe9 	.word	0x08108fe9
 8108fb0:	08108fe9 	.word	0x08108fe9
 8108fb4:	08108fe9 	.word	0x08108fe9
 8108fb8:	08108fe9 	.word	0x08108fe9
 8108fbc:	08108fe9 	.word	0x08108fe9
 8108fc0:	08108fef 	.word	0x08108fef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8108fc4:	687b      	ldr	r3, [r7, #4]
 8108fc6:	3304      	adds	r3, #4
 8108fc8:	2101      	movs	r1, #1
 8108fca:	4618      	mov	r0, r3
 8108fcc:	f000 fdf2 	bl	8109bb4 <RCCEx_PLL2_Config>
 8108fd0:	4603      	mov	r3, r0
 8108fd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108fd4:	e00c      	b.n	8108ff0 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	3324      	adds	r3, #36	; 0x24
 8108fda:	2101      	movs	r1, #1
 8108fdc:	4618      	mov	r0, r3
 8108fde:	f000 fe9b 	bl	8109d18 <RCCEx_PLL3_Config>
 8108fe2:	4603      	mov	r3, r0
 8108fe4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8108fe6:	e003      	b.n	8108ff0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8108fe8:	2301      	movs	r3, #1
 8108fea:	75fb      	strb	r3, [r7, #23]
      break;
 8108fec:	e000      	b.n	8108ff0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8108fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8108ff0:	7dfb      	ldrb	r3, [r7, #23]
 8108ff2:	2b00      	cmp	r3, #0
 8108ff4:	d109      	bne.n	810900a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108ff6:	4b24      	ldr	r3, [pc, #144]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8108ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ffa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8108ffe:	687b      	ldr	r3, [r7, #4]
 8109000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109002:	4921      	ldr	r1, [pc, #132]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109004:	4313      	orrs	r3, r2
 8109006:	654b      	str	r3, [r1, #84]	; 0x54
 8109008:	e001      	b.n	810900e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810900a:	7dfb      	ldrb	r3, [r7, #23]
 810900c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	681b      	ldr	r3, [r3, #0]
 8109012:	f003 0302 	and.w	r3, r3, #2
 8109016:	2b00      	cmp	r3, #0
 8109018:	d03c      	beq.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810901a:	687b      	ldr	r3, [r7, #4]
 810901c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810901e:	2b05      	cmp	r3, #5
 8109020:	d820      	bhi.n	8109064 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8109022:	a201      	add	r2, pc, #4	; (adr r2, 8109028 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8109024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109028:	0810906b 	.word	0x0810906b
 810902c:	08109041 	.word	0x08109041
 8109030:	08109053 	.word	0x08109053
 8109034:	0810906b 	.word	0x0810906b
 8109038:	0810906b 	.word	0x0810906b
 810903c:	0810906b 	.word	0x0810906b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	3304      	adds	r3, #4
 8109044:	2101      	movs	r1, #1
 8109046:	4618      	mov	r0, r3
 8109048:	f000 fdb4 	bl	8109bb4 <RCCEx_PLL2_Config>
 810904c:	4603      	mov	r3, r0
 810904e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109050:	e00c      	b.n	810906c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	3324      	adds	r3, #36	; 0x24
 8109056:	2101      	movs	r1, #1
 8109058:	4618      	mov	r0, r3
 810905a:	f000 fe5d 	bl	8109d18 <RCCEx_PLL3_Config>
 810905e:	4603      	mov	r3, r0
 8109060:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109062:	e003      	b.n	810906c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109064:	2301      	movs	r3, #1
 8109066:	75fb      	strb	r3, [r7, #23]
      break;
 8109068:	e000      	b.n	810906c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810906a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810906c:	7dfb      	ldrb	r3, [r7, #23]
 810906e:	2b00      	cmp	r3, #0
 8109070:	d10e      	bne.n	8109090 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8109072:	4b05      	ldr	r3, [pc, #20]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109076:	f023 0207 	bic.w	r2, r3, #7
 810907a:	687b      	ldr	r3, [r7, #4]
 810907c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810907e:	4902      	ldr	r1, [pc, #8]	; (8109088 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8109080:	4313      	orrs	r3, r2
 8109082:	654b      	str	r3, [r1, #84]	; 0x54
 8109084:	e006      	b.n	8109094 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8109086:	bf00      	nop
 8109088:	58024400 	.word	0x58024400
 810908c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109090:	7dfb      	ldrb	r3, [r7, #23]
 8109092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	f003 0304 	and.w	r3, r3, #4
 810909c:	2b00      	cmp	r3, #0
 810909e:	d039      	beq.n	8109114 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81090a0:	687b      	ldr	r3, [r7, #4]
 81090a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81090a6:	2b05      	cmp	r3, #5
 81090a8:	d820      	bhi.n	81090ec <HAL_RCCEx_PeriphCLKConfig+0x934>
 81090aa:	a201      	add	r2, pc, #4	; (adr r2, 81090b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090b0:	081090f3 	.word	0x081090f3
 81090b4:	081090c9 	.word	0x081090c9
 81090b8:	081090db 	.word	0x081090db
 81090bc:	081090f3 	.word	0x081090f3
 81090c0:	081090f3 	.word	0x081090f3
 81090c4:	081090f3 	.word	0x081090f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	3304      	adds	r3, #4
 81090cc:	2101      	movs	r1, #1
 81090ce:	4618      	mov	r0, r3
 81090d0:	f000 fd70 	bl	8109bb4 <RCCEx_PLL2_Config>
 81090d4:	4603      	mov	r3, r0
 81090d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81090d8:	e00c      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	3324      	adds	r3, #36	; 0x24
 81090de:	2101      	movs	r1, #1
 81090e0:	4618      	mov	r0, r3
 81090e2:	f000 fe19 	bl	8109d18 <RCCEx_PLL3_Config>
 81090e6:	4603      	mov	r3, r0
 81090e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81090ea:	e003      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81090ec:	2301      	movs	r3, #1
 81090ee:	75fb      	strb	r3, [r7, #23]
      break;
 81090f0:	e000      	b.n	81090f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81090f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81090f4:	7dfb      	ldrb	r3, [r7, #23]
 81090f6:	2b00      	cmp	r3, #0
 81090f8:	d10a      	bne.n	8109110 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81090fa:	4bb7      	ldr	r3, [pc, #732]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81090fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81090fe:	f023 0207 	bic.w	r2, r3, #7
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109108:	49b3      	ldr	r1, [pc, #716]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810910a:	4313      	orrs	r3, r2
 810910c:	658b      	str	r3, [r1, #88]	; 0x58
 810910e:	e001      	b.n	8109114 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109110:	7dfb      	ldrb	r3, [r7, #23]
 8109112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	681b      	ldr	r3, [r3, #0]
 8109118:	f003 0320 	and.w	r3, r3, #32
 810911c:	2b00      	cmp	r3, #0
 810911e:	d04b      	beq.n	81091b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810912a:	d02e      	beq.n	810918a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 810912c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109130:	d828      	bhi.n	8109184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109136:	d02a      	beq.n	810918e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8109138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810913c:	d822      	bhi.n	8109184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810913e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109142:	d026      	beq.n	8109192 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8109144:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109148:	d81c      	bhi.n	8109184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810914a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810914e:	d010      	beq.n	8109172 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8109150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109154:	d816      	bhi.n	8109184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8109156:	2b00      	cmp	r3, #0
 8109158:	d01d      	beq.n	8109196 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810915a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810915e:	d111      	bne.n	8109184 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	3304      	adds	r3, #4
 8109164:	2100      	movs	r1, #0
 8109166:	4618      	mov	r0, r3
 8109168:	f000 fd24 	bl	8109bb4 <RCCEx_PLL2_Config>
 810916c:	4603      	mov	r3, r0
 810916e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109170:	e012      	b.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109172:	687b      	ldr	r3, [r7, #4]
 8109174:	3324      	adds	r3, #36	; 0x24
 8109176:	2102      	movs	r1, #2
 8109178:	4618      	mov	r0, r3
 810917a:	f000 fdcd 	bl	8109d18 <RCCEx_PLL3_Config>
 810917e:	4603      	mov	r3, r0
 8109180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109182:	e009      	b.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109184:	2301      	movs	r3, #1
 8109186:	75fb      	strb	r3, [r7, #23]
      break;
 8109188:	e006      	b.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810918a:	bf00      	nop
 810918c:	e004      	b.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810918e:	bf00      	nop
 8109190:	e002      	b.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8109192:	bf00      	nop
 8109194:	e000      	b.n	8109198 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8109196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109198:	7dfb      	ldrb	r3, [r7, #23]
 810919a:	2b00      	cmp	r3, #0
 810919c:	d10a      	bne.n	81091b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810919e:	4b8e      	ldr	r3, [pc, #568]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81091a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81091a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81091a6:	687b      	ldr	r3, [r7, #4]
 81091a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81091ac:	498a      	ldr	r1, [pc, #552]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81091ae:	4313      	orrs	r3, r2
 81091b0:	654b      	str	r3, [r1, #84]	; 0x54
 81091b2:	e001      	b.n	81091b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81091b4:	7dfb      	ldrb	r3, [r7, #23]
 81091b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81091b8:	687b      	ldr	r3, [r7, #4]
 81091ba:	681b      	ldr	r3, [r3, #0]
 81091bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81091c0:	2b00      	cmp	r3, #0
 81091c2:	d04b      	beq.n	810925c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81091c4:	687b      	ldr	r3, [r7, #4]
 81091c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81091ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81091ce:	d02e      	beq.n	810922e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81091d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81091d4:	d828      	bhi.n	8109228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81091d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81091da:	d02a      	beq.n	8109232 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81091dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81091e0:	d822      	bhi.n	8109228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81091e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81091e6:	d026      	beq.n	8109236 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81091e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81091ec:	d81c      	bhi.n	8109228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81091ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81091f2:	d010      	beq.n	8109216 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81091f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81091f8:	d816      	bhi.n	8109228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81091fa:	2b00      	cmp	r3, #0
 81091fc:	d01d      	beq.n	810923a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81091fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109202:	d111      	bne.n	8109228 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	3304      	adds	r3, #4
 8109208:	2100      	movs	r1, #0
 810920a:	4618      	mov	r0, r3
 810920c:	f000 fcd2 	bl	8109bb4 <RCCEx_PLL2_Config>
 8109210:	4603      	mov	r3, r0
 8109212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109214:	e012      	b.n	810923c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109216:	687b      	ldr	r3, [r7, #4]
 8109218:	3324      	adds	r3, #36	; 0x24
 810921a:	2102      	movs	r1, #2
 810921c:	4618      	mov	r0, r3
 810921e:	f000 fd7b 	bl	8109d18 <RCCEx_PLL3_Config>
 8109222:	4603      	mov	r3, r0
 8109224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109226:	e009      	b.n	810923c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109228:	2301      	movs	r3, #1
 810922a:	75fb      	strb	r3, [r7, #23]
      break;
 810922c:	e006      	b.n	810923c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810922e:	bf00      	nop
 8109230:	e004      	b.n	810923c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109232:	bf00      	nop
 8109234:	e002      	b.n	810923c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8109236:	bf00      	nop
 8109238:	e000      	b.n	810923c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810923a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810923c:	7dfb      	ldrb	r3, [r7, #23]
 810923e:	2b00      	cmp	r3, #0
 8109240:	d10a      	bne.n	8109258 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8109242:	4b65      	ldr	r3, [pc, #404]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109246:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109250:	4961      	ldr	r1, [pc, #388]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109252:	4313      	orrs	r3, r2
 8109254:	658b      	str	r3, [r1, #88]	; 0x58
 8109256:	e001      	b.n	810925c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109258:	7dfb      	ldrb	r3, [r7, #23]
 810925a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	681b      	ldr	r3, [r3, #0]
 8109260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109264:	2b00      	cmp	r3, #0
 8109266:	d04b      	beq.n	8109300 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810926e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109272:	d02e      	beq.n	81092d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8109274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109278:	d828      	bhi.n	81092cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810927a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810927e:	d02a      	beq.n	81092d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8109280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109284:	d822      	bhi.n	81092cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109286:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810928a:	d026      	beq.n	81092da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810928c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109290:	d81c      	bhi.n	81092cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8109292:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109296:	d010      	beq.n	81092ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8109298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810929c:	d816      	bhi.n	81092cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810929e:	2b00      	cmp	r3, #0
 81092a0:	d01d      	beq.n	81092de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81092a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81092a6:	d111      	bne.n	81092cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	3304      	adds	r3, #4
 81092ac:	2100      	movs	r1, #0
 81092ae:	4618      	mov	r0, r3
 81092b0:	f000 fc80 	bl	8109bb4 <RCCEx_PLL2_Config>
 81092b4:	4603      	mov	r3, r0
 81092b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81092b8:	e012      	b.n	81092e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81092ba:	687b      	ldr	r3, [r7, #4]
 81092bc:	3324      	adds	r3, #36	; 0x24
 81092be:	2102      	movs	r1, #2
 81092c0:	4618      	mov	r0, r3
 81092c2:	f000 fd29 	bl	8109d18 <RCCEx_PLL3_Config>
 81092c6:	4603      	mov	r3, r0
 81092c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81092ca:	e009      	b.n	81092e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81092cc:	2301      	movs	r3, #1
 81092ce:	75fb      	strb	r3, [r7, #23]
      break;
 81092d0:	e006      	b.n	81092e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81092d2:	bf00      	nop
 81092d4:	e004      	b.n	81092e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81092d6:	bf00      	nop
 81092d8:	e002      	b.n	81092e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81092da:	bf00      	nop
 81092dc:	e000      	b.n	81092e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81092de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81092e0:	7dfb      	ldrb	r3, [r7, #23]
 81092e2:	2b00      	cmp	r3, #0
 81092e4:	d10a      	bne.n	81092fc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81092e6:	4b3c      	ldr	r3, [pc, #240]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81092e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81092ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81092f4:	4938      	ldr	r1, [pc, #224]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81092f6:	4313      	orrs	r3, r2
 81092f8:	658b      	str	r3, [r1, #88]	; 0x58
 81092fa:	e001      	b.n	8109300 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81092fc:	7dfb      	ldrb	r3, [r7, #23]
 81092fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	681b      	ldr	r3, [r3, #0]
 8109304:	f003 0308 	and.w	r3, r3, #8
 8109308:	2b00      	cmp	r3, #0
 810930a:	d01a      	beq.n	8109342 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109316:	d10a      	bne.n	810932e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109318:	687b      	ldr	r3, [r7, #4]
 810931a:	3324      	adds	r3, #36	; 0x24
 810931c:	2102      	movs	r1, #2
 810931e:	4618      	mov	r0, r3
 8109320:	f000 fcfa 	bl	8109d18 <RCCEx_PLL3_Config>
 8109324:	4603      	mov	r3, r0
 8109326:	2b00      	cmp	r3, #0
 8109328:	d001      	beq.n	810932e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810932a:	2301      	movs	r3, #1
 810932c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810932e:	4b2a      	ldr	r3, [pc, #168]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8109336:	687b      	ldr	r3, [r7, #4]
 8109338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810933c:	4926      	ldr	r1, [pc, #152]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810933e:	4313      	orrs	r3, r2
 8109340:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	681b      	ldr	r3, [r3, #0]
 8109346:	f003 0310 	and.w	r3, r3, #16
 810934a:	2b00      	cmp	r3, #0
 810934c:	d01a      	beq.n	8109384 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109358:	d10a      	bne.n	8109370 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	3324      	adds	r3, #36	; 0x24
 810935e:	2102      	movs	r1, #2
 8109360:	4618      	mov	r0, r3
 8109362:	f000 fcd9 	bl	8109d18 <RCCEx_PLL3_Config>
 8109366:	4603      	mov	r3, r0
 8109368:	2b00      	cmp	r3, #0
 810936a:	d001      	beq.n	8109370 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810936c:	2301      	movs	r3, #1
 810936e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8109370:	4b19      	ldr	r3, [pc, #100]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109378:	687b      	ldr	r3, [r7, #4]
 810937a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810937e:	4916      	ldr	r1, [pc, #88]	; (81093d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8109380:	4313      	orrs	r3, r2
 8109382:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	681b      	ldr	r3, [r3, #0]
 8109388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810938c:	2b00      	cmp	r3, #0
 810938e:	d036      	beq.n	81093fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810939a:	d01f      	beq.n	81093dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810939c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81093a0:	d817      	bhi.n	81093d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81093a2:	2b00      	cmp	r3, #0
 81093a4:	d003      	beq.n	81093ae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81093a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81093aa:	d009      	beq.n	81093c0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81093ac:	e011      	b.n	81093d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	3304      	adds	r3, #4
 81093b2:	2100      	movs	r1, #0
 81093b4:	4618      	mov	r0, r3
 81093b6:	f000 fbfd 	bl	8109bb4 <RCCEx_PLL2_Config>
 81093ba:	4603      	mov	r3, r0
 81093bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81093be:	e00e      	b.n	81093de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	3324      	adds	r3, #36	; 0x24
 81093c4:	2102      	movs	r1, #2
 81093c6:	4618      	mov	r0, r3
 81093c8:	f000 fca6 	bl	8109d18 <RCCEx_PLL3_Config>
 81093cc:	4603      	mov	r3, r0
 81093ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81093d0:	e005      	b.n	81093de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81093d2:	2301      	movs	r3, #1
 81093d4:	75fb      	strb	r3, [r7, #23]
      break;
 81093d6:	e002      	b.n	81093de <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81093d8:	58024400 	.word	0x58024400
      break;
 81093dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81093de:	7dfb      	ldrb	r3, [r7, #23]
 81093e0:	2b00      	cmp	r3, #0
 81093e2:	d10a      	bne.n	81093fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81093e4:	4b93      	ldr	r3, [pc, #588]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81093e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81093e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81093f2:	4990      	ldr	r1, [pc, #576]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81093f4:	4313      	orrs	r3, r2
 81093f6:	658b      	str	r3, [r1, #88]	; 0x58
 81093f8:	e001      	b.n	81093fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81093fa:	7dfb      	ldrb	r3, [r7, #23]
 81093fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	681b      	ldr	r3, [r3, #0]
 8109402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109406:	2b00      	cmp	r3, #0
 8109408:	d033      	beq.n	8109472 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109410:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109414:	d01c      	beq.n	8109450 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8109416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810941a:	d816      	bhi.n	810944a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 810941c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109420:	d003      	beq.n	810942a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8109422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109426:	d007      	beq.n	8109438 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8109428:	e00f      	b.n	810944a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810942a:	4b82      	ldr	r3, [pc, #520]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810942e:	4a81      	ldr	r2, [pc, #516]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109434:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8109436:	e00c      	b.n	8109452 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109438:	687b      	ldr	r3, [r7, #4]
 810943a:	3324      	adds	r3, #36	; 0x24
 810943c:	2101      	movs	r1, #1
 810943e:	4618      	mov	r0, r3
 8109440:	f000 fc6a 	bl	8109d18 <RCCEx_PLL3_Config>
 8109444:	4603      	mov	r3, r0
 8109446:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8109448:	e003      	b.n	8109452 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810944a:	2301      	movs	r3, #1
 810944c:	75fb      	strb	r3, [r7, #23]
      break;
 810944e:	e000      	b.n	8109452 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8109450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109452:	7dfb      	ldrb	r3, [r7, #23]
 8109454:	2b00      	cmp	r3, #0
 8109456:	d10a      	bne.n	810946e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8109458:	4b76      	ldr	r3, [pc, #472]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810945a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810945c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109466:	4973      	ldr	r1, [pc, #460]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109468:	4313      	orrs	r3, r2
 810946a:	654b      	str	r3, [r1, #84]	; 0x54
 810946c:	e001      	b.n	8109472 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810946e:	7dfb      	ldrb	r3, [r7, #23]
 8109470:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810947a:	2b00      	cmp	r3, #0
 810947c:	d029      	beq.n	81094d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109482:	2b00      	cmp	r3, #0
 8109484:	d003      	beq.n	810948e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8109486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810948a:	d007      	beq.n	810949c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810948c:	e00f      	b.n	81094ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810948e:	4b69      	ldr	r3, [pc, #420]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109492:	4a68      	ldr	r2, [pc, #416]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810949a:	e00b      	b.n	81094b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	3304      	adds	r3, #4
 81094a0:	2102      	movs	r1, #2
 81094a2:	4618      	mov	r0, r3
 81094a4:	f000 fb86 	bl	8109bb4 <RCCEx_PLL2_Config>
 81094a8:	4603      	mov	r3, r0
 81094aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81094ac:	e002      	b.n	81094b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81094ae:	2301      	movs	r3, #1
 81094b0:	75fb      	strb	r3, [r7, #23]
      break;
 81094b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81094b4:	7dfb      	ldrb	r3, [r7, #23]
 81094b6:	2b00      	cmp	r3, #0
 81094b8:	d109      	bne.n	81094ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81094ba:	4b5e      	ldr	r3, [pc, #376]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81094bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81094be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81094c2:	687b      	ldr	r3, [r7, #4]
 81094c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81094c6:	495b      	ldr	r1, [pc, #364]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81094c8:	4313      	orrs	r3, r2
 81094ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 81094cc:	e001      	b.n	81094d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81094ce:	7dfb      	ldrb	r3, [r7, #23]
 81094d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	681b      	ldr	r3, [r3, #0]
 81094d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81094da:	2b00      	cmp	r3, #0
 81094dc:	d00a      	beq.n	81094f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	3324      	adds	r3, #36	; 0x24
 81094e2:	2102      	movs	r1, #2
 81094e4:	4618      	mov	r0, r3
 81094e6:	f000 fc17 	bl	8109d18 <RCCEx_PLL3_Config>
 81094ea:	4603      	mov	r3, r0
 81094ec:	2b00      	cmp	r3, #0
 81094ee:	d001      	beq.n	81094f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81094f0:	2301      	movs	r3, #1
 81094f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81094f4:	687b      	ldr	r3, [r7, #4]
 81094f6:	681b      	ldr	r3, [r3, #0]
 81094f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81094fc:	2b00      	cmp	r3, #0
 81094fe:	d030      	beq.n	8109562 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109508:	d017      	beq.n	810953a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810950a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810950e:	d811      	bhi.n	8109534 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8109510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109514:	d013      	beq.n	810953e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8109516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810951a:	d80b      	bhi.n	8109534 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810951c:	2b00      	cmp	r3, #0
 810951e:	d010      	beq.n	8109542 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109524:	d106      	bne.n	8109534 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109526:	4b43      	ldr	r3, [pc, #268]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810952a:	4a42      	ldr	r2, [pc, #264]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810952c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109532:	e007      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109534:	2301      	movs	r3, #1
 8109536:	75fb      	strb	r3, [r7, #23]
      break;
 8109538:	e004      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810953a:	bf00      	nop
 810953c:	e002      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810953e:	bf00      	nop
 8109540:	e000      	b.n	8109544 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8109542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109544:	7dfb      	ldrb	r3, [r7, #23]
 8109546:	2b00      	cmp	r3, #0
 8109548:	d109      	bne.n	810955e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810954a:	4b3a      	ldr	r3, [pc, #232]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810954c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810954e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109556:	4937      	ldr	r1, [pc, #220]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109558:	4313      	orrs	r3, r2
 810955a:	654b      	str	r3, [r1, #84]	; 0x54
 810955c:	e001      	b.n	8109562 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810955e:	7dfb      	ldrb	r3, [r7, #23]
 8109560:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810956a:	2b00      	cmp	r3, #0
 810956c:	d008      	beq.n	8109580 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810956e:	4b31      	ldr	r3, [pc, #196]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8109570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8109576:	687b      	ldr	r3, [r7, #4]
 8109578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810957a:	492e      	ldr	r1, [pc, #184]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810957c:	4313      	orrs	r3, r2
 810957e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8109580:	687b      	ldr	r3, [r7, #4]
 8109582:	681b      	ldr	r3, [r3, #0]
 8109584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109588:	2b00      	cmp	r3, #0
 810958a:	d009      	beq.n	81095a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810958c:	4b29      	ldr	r3, [pc, #164]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810958e:	691b      	ldr	r3, [r3, #16]
 8109590:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810959a:	4926      	ldr	r1, [pc, #152]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810959c:	4313      	orrs	r3, r2
 810959e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	681b      	ldr	r3, [r3, #0]
 81095a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81095a8:	2b00      	cmp	r3, #0
 81095aa:	d008      	beq.n	81095be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81095ac:	4b21      	ldr	r3, [pc, #132]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81095b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81095b4:	687b      	ldr	r3, [r7, #4]
 81095b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81095b8:	491e      	ldr	r1, [pc, #120]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095ba:	4313      	orrs	r3, r2
 81095bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	681b      	ldr	r3, [r3, #0]
 81095c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81095c6:	2b00      	cmp	r3, #0
 81095c8:	d00d      	beq.n	81095e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81095ca:	4b1a      	ldr	r3, [pc, #104]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095cc:	691b      	ldr	r3, [r3, #16]
 81095ce:	4a19      	ldr	r2, [pc, #100]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81095d4:	6113      	str	r3, [r2, #16]
 81095d6:	4b17      	ldr	r3, [pc, #92]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095d8:	691a      	ldr	r2, [r3, #16]
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81095e0:	4914      	ldr	r1, [pc, #80]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095e2:	4313      	orrs	r3, r2
 81095e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81095e6:	687b      	ldr	r3, [r7, #4]
 81095e8:	681b      	ldr	r3, [r3, #0]
 81095ea:	2b00      	cmp	r3, #0
 81095ec:	da08      	bge.n	8109600 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81095ee:	4b11      	ldr	r3, [pc, #68]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81095f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81095f6:	687b      	ldr	r3, [r7, #4]
 81095f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81095fa:	490e      	ldr	r1, [pc, #56]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81095fc:	4313      	orrs	r3, r2
 81095fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	681b      	ldr	r3, [r3, #0]
 8109604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109608:	2b00      	cmp	r3, #0
 810960a:	d009      	beq.n	8109620 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810960c:	4b09      	ldr	r3, [pc, #36]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810960e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109610:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8109614:	687b      	ldr	r3, [r7, #4]
 8109616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810961a:	4906      	ldr	r1, [pc, #24]	; (8109634 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810961c:	4313      	orrs	r3, r2
 810961e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8109620:	7dbb      	ldrb	r3, [r7, #22]
 8109622:	2b00      	cmp	r3, #0
 8109624:	d101      	bne.n	810962a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8109626:	2300      	movs	r3, #0
 8109628:	e000      	b.n	810962c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810962a:	2301      	movs	r3, #1
}
 810962c:	4618      	mov	r0, r3
 810962e:	3718      	adds	r7, #24
 8109630:	46bd      	mov	sp, r7
 8109632:	bd80      	pop	{r7, pc}
 8109634:	58024400 	.word	0x58024400

08109638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8109638:	b580      	push	{r7, lr}
 810963a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810963c:	f7ff f85e 	bl	81086fc <HAL_RCC_GetHCLKFreq>
 8109640:	4602      	mov	r2, r0
 8109642:	4b06      	ldr	r3, [pc, #24]	; (810965c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8109644:	6a1b      	ldr	r3, [r3, #32]
 8109646:	091b      	lsrs	r3, r3, #4
 8109648:	f003 0307 	and.w	r3, r3, #7
 810964c:	4904      	ldr	r1, [pc, #16]	; (8109660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810964e:	5ccb      	ldrb	r3, [r1, r3]
 8109650:	f003 031f 	and.w	r3, r3, #31
 8109654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8109658:	4618      	mov	r0, r3
 810965a:	bd80      	pop	{r7, pc}
 810965c:	58024400 	.word	0x58024400
 8109660:	0810d6cc 	.word	0x0810d6cc

08109664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8109664:	b480      	push	{r7}
 8109666:	b089      	sub	sp, #36	; 0x24
 8109668:	af00      	add	r7, sp, #0
 810966a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810966c:	4ba1      	ldr	r3, [pc, #644]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810966e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109670:	f003 0303 	and.w	r3, r3, #3
 8109674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8109676:	4b9f      	ldr	r3, [pc, #636]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810967a:	0b1b      	lsrs	r3, r3, #12
 810967c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8109682:	4b9c      	ldr	r3, [pc, #624]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109686:	091b      	lsrs	r3, r3, #4
 8109688:	f003 0301 	and.w	r3, r3, #1
 810968c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810968e:	4b99      	ldr	r3, [pc, #612]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109692:	08db      	lsrs	r3, r3, #3
 8109694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109698:	693a      	ldr	r2, [r7, #16]
 810969a:	fb02 f303 	mul.w	r3, r2, r3
 810969e:	ee07 3a90 	vmov	s15, r3
 81096a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81096a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81096aa:	697b      	ldr	r3, [r7, #20]
 81096ac:	2b00      	cmp	r3, #0
 81096ae:	f000 8111 	beq.w	81098d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81096b2:	69bb      	ldr	r3, [r7, #24]
 81096b4:	2b02      	cmp	r3, #2
 81096b6:	f000 8083 	beq.w	81097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81096ba:	69bb      	ldr	r3, [r7, #24]
 81096bc:	2b02      	cmp	r3, #2
 81096be:	f200 80a1 	bhi.w	8109804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81096c2:	69bb      	ldr	r3, [r7, #24]
 81096c4:	2b00      	cmp	r3, #0
 81096c6:	d003      	beq.n	81096d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81096c8:	69bb      	ldr	r3, [r7, #24]
 81096ca:	2b01      	cmp	r3, #1
 81096cc:	d056      	beq.n	810977c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81096ce:	e099      	b.n	8109804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81096d0:	4b88      	ldr	r3, [pc, #544]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81096d2:	681b      	ldr	r3, [r3, #0]
 81096d4:	f003 0320 	and.w	r3, r3, #32
 81096d8:	2b00      	cmp	r3, #0
 81096da:	d02d      	beq.n	8109738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81096dc:	4b85      	ldr	r3, [pc, #532]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81096de:	681b      	ldr	r3, [r3, #0]
 81096e0:	08db      	lsrs	r3, r3, #3
 81096e2:	f003 0303 	and.w	r3, r3, #3
 81096e6:	4a84      	ldr	r2, [pc, #528]	; (81098f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81096e8:	fa22 f303 	lsr.w	r3, r2, r3
 81096ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81096ee:	68bb      	ldr	r3, [r7, #8]
 81096f0:	ee07 3a90 	vmov	s15, r3
 81096f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81096f8:	697b      	ldr	r3, [r7, #20]
 81096fa:	ee07 3a90 	vmov	s15, r3
 81096fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109706:	4b7b      	ldr	r3, [pc, #492]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810970e:	ee07 3a90 	vmov	s15, r3
 8109712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109716:	ed97 6a03 	vldr	s12, [r7, #12]
 810971a:	eddf 5a78 	vldr	s11, [pc, #480]	; 81098fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810971e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810972a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109732:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8109736:	e087      	b.n	8109848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109738:	697b      	ldr	r3, [r7, #20]
 810973a:	ee07 3a90 	vmov	s15, r3
 810973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109742:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8109746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810974a:	4b6a      	ldr	r3, [pc, #424]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109752:	ee07 3a90 	vmov	s15, r3
 8109756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810975a:	ed97 6a03 	vldr	s12, [r7, #12]
 810975e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81098fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810976a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810977a:	e065      	b.n	8109848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810977c:	697b      	ldr	r3, [r7, #20]
 810977e:	ee07 3a90 	vmov	s15, r3
 8109782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109786:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810978a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810978e:	4b59      	ldr	r3, [pc, #356]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109796:	ee07 3a90 	vmov	s15, r3
 810979a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810979e:	ed97 6a03 	vldr	s12, [r7, #12]
 81097a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 81098fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81097a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81097aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81097ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81097b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81097b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81097ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81097be:	e043      	b.n	8109848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81097c0:	697b      	ldr	r3, [r7, #20]
 81097c2:	ee07 3a90 	vmov	s15, r3
 81097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81097ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81097ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81097d2:	4b48      	ldr	r3, [pc, #288]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81097d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81097da:	ee07 3a90 	vmov	s15, r3
 81097de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81097e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81097e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81098fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81097ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81097ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81097f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81097f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81097fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81097fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109802:	e021      	b.n	8109848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8109804:	697b      	ldr	r3, [r7, #20]
 8109806:	ee07 3a90 	vmov	s15, r3
 810980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810980e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109816:	4b37      	ldr	r3, [pc, #220]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810981a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810981e:	ee07 3a90 	vmov	s15, r3
 8109822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109826:	ed97 6a03 	vldr	s12, [r7, #12]
 810982a:	eddf 5a34 	vldr	s11, [pc, #208]	; 81098fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810982e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810983a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810983e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8109848:	4b2a      	ldr	r3, [pc, #168]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810984c:	0a5b      	lsrs	r3, r3, #9
 810984e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109852:	ee07 3a90 	vmov	s15, r3
 8109856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810985a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810985e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109862:	edd7 6a07 	vldr	s13, [r7, #28]
 8109866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810986a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810986e:	ee17 2a90 	vmov	r2, s15
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8109876:	4b1f      	ldr	r3, [pc, #124]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8109878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810987a:	0c1b      	lsrs	r3, r3, #16
 810987c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109880:	ee07 3a90 	vmov	s15, r3
 8109884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810988c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109890:	edd7 6a07 	vldr	s13, [r7, #28]
 8109894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810989c:	ee17 2a90 	vmov	r2, s15
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81098a4:	4b13      	ldr	r3, [pc, #76]	; (81098f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81098a8:	0e1b      	lsrs	r3, r3, #24
 81098aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81098ae:	ee07 3a90 	vmov	s15, r3
 81098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81098b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81098ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 81098be:	edd7 6a07 	vldr	s13, [r7, #28]
 81098c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81098c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81098ca:	ee17 2a90 	vmov	r2, s15
 81098ce:	687b      	ldr	r3, [r7, #4]
 81098d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81098d2:	e008      	b.n	81098e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81098d4:	687b      	ldr	r3, [r7, #4]
 81098d6:	2200      	movs	r2, #0
 81098d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81098da:	687b      	ldr	r3, [r7, #4]
 81098dc:	2200      	movs	r2, #0
 81098de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81098e0:	687b      	ldr	r3, [r7, #4]
 81098e2:	2200      	movs	r2, #0
 81098e4:	609a      	str	r2, [r3, #8]
}
 81098e6:	bf00      	nop
 81098e8:	3724      	adds	r7, #36	; 0x24
 81098ea:	46bd      	mov	sp, r7
 81098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098f0:	4770      	bx	lr
 81098f2:	bf00      	nop
 81098f4:	58024400 	.word	0x58024400
 81098f8:	03d09000 	.word	0x03d09000
 81098fc:	46000000 	.word	0x46000000
 8109900:	4c742400 	.word	0x4c742400
 8109904:	4a742400 	.word	0x4a742400
 8109908:	4b742400 	.word	0x4b742400

0810990c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810990c:	b480      	push	{r7}
 810990e:	b089      	sub	sp, #36	; 0x24
 8109910:	af00      	add	r7, sp, #0
 8109912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109914:	4ba1      	ldr	r3, [pc, #644]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109918:	f003 0303 	and.w	r3, r3, #3
 810991c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810991e:	4b9f      	ldr	r3, [pc, #636]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109922:	0d1b      	lsrs	r3, r3, #20
 8109924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810992a:	4b9c      	ldr	r3, [pc, #624]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810992e:	0a1b      	lsrs	r3, r3, #8
 8109930:	f003 0301 	and.w	r3, r3, #1
 8109934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8109936:	4b99      	ldr	r3, [pc, #612]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810993a:	08db      	lsrs	r3, r3, #3
 810993c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109940:	693a      	ldr	r2, [r7, #16]
 8109942:	fb02 f303 	mul.w	r3, r2, r3
 8109946:	ee07 3a90 	vmov	s15, r3
 810994a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810994e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109952:	697b      	ldr	r3, [r7, #20]
 8109954:	2b00      	cmp	r3, #0
 8109956:	f000 8111 	beq.w	8109b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810995a:	69bb      	ldr	r3, [r7, #24]
 810995c:	2b02      	cmp	r3, #2
 810995e:	f000 8083 	beq.w	8109a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109962:	69bb      	ldr	r3, [r7, #24]
 8109964:	2b02      	cmp	r3, #2
 8109966:	f200 80a1 	bhi.w	8109aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810996a:	69bb      	ldr	r3, [r7, #24]
 810996c:	2b00      	cmp	r3, #0
 810996e:	d003      	beq.n	8109978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109970:	69bb      	ldr	r3, [r7, #24]
 8109972:	2b01      	cmp	r3, #1
 8109974:	d056      	beq.n	8109a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8109976:	e099      	b.n	8109aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109978:	4b88      	ldr	r3, [pc, #544]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810997a:	681b      	ldr	r3, [r3, #0]
 810997c:	f003 0320 	and.w	r3, r3, #32
 8109980:	2b00      	cmp	r3, #0
 8109982:	d02d      	beq.n	81099e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8109984:	4b85      	ldr	r3, [pc, #532]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109986:	681b      	ldr	r3, [r3, #0]
 8109988:	08db      	lsrs	r3, r3, #3
 810998a:	f003 0303 	and.w	r3, r3, #3
 810998e:	4a84      	ldr	r2, [pc, #528]	; (8109ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109990:	fa22 f303 	lsr.w	r3, r2, r3
 8109994:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109996:	68bb      	ldr	r3, [r7, #8]
 8109998:	ee07 3a90 	vmov	s15, r3
 810999c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81099a0:	697b      	ldr	r3, [r7, #20]
 81099a2:	ee07 3a90 	vmov	s15, r3
 81099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81099ae:	4b7b      	ldr	r3, [pc, #492]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81099b6:	ee07 3a90 	vmov	s15, r3
 81099ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81099be:	ed97 6a03 	vldr	s12, [r7, #12]
 81099c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81099c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81099ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81099ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81099d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81099d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81099da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81099de:	e087      	b.n	8109af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81099e0:	697b      	ldr	r3, [r7, #20]
 81099e2:	ee07 3a90 	vmov	s15, r3
 81099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81099ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8109ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81099f2:	4b6a      	ldr	r3, [pc, #424]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81099fa:	ee07 3a90 	vmov	s15, r3
 81099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8109a06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109a22:	e065      	b.n	8109af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109a24:	697b      	ldr	r3, [r7, #20]
 8109a26:	ee07 3a90 	vmov	s15, r3
 8109a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8109bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a36:	4b59      	ldr	r3, [pc, #356]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109a3e:	ee07 3a90 	vmov	s15, r3
 8109a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8109a4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109a66:	e043      	b.n	8109af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109a68:	697b      	ldr	r3, [r7, #20]
 8109a6a:	ee07 3a90 	vmov	s15, r3
 8109a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109a72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8109bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8109a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109a7a:	4b48      	ldr	r3, [pc, #288]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109a82:	ee07 3a90 	vmov	s15, r3
 8109a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8109a8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109aaa:	e021      	b.n	8109af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8109aac:	697b      	ldr	r3, [r7, #20]
 8109aae:	ee07 3a90 	vmov	s15, r3
 8109ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8109bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109abe:	4b37      	ldr	r3, [pc, #220]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109ac6:	ee07 3a90 	vmov	s15, r3
 8109aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8109ad2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8109aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8109af0:	4b2a      	ldr	r3, [pc, #168]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109af4:	0a5b      	lsrs	r3, r3, #9
 8109af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109afa:	ee07 3a90 	vmov	s15, r3
 8109afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8109b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109b16:	ee17 2a90 	vmov	r2, s15
 8109b1a:	687b      	ldr	r3, [r7, #4]
 8109b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8109b1e:	4b1f      	ldr	r3, [pc, #124]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109b22:	0c1b      	lsrs	r3, r3, #16
 8109b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109b28:	ee07 3a90 	vmov	s15, r3
 8109b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8109b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109b44:	ee17 2a90 	vmov	r2, s15
 8109b48:	687b      	ldr	r3, [r7, #4]
 8109b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8109b4c:	4b13      	ldr	r3, [pc, #76]	; (8109b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109b50:	0e1b      	lsrs	r3, r3, #24
 8109b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109b56:	ee07 3a90 	vmov	s15, r3
 8109b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8109b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109b72:	ee17 2a90 	vmov	r2, s15
 8109b76:	687b      	ldr	r3, [r7, #4]
 8109b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8109b7a:	e008      	b.n	8109b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8109b7c:	687b      	ldr	r3, [r7, #4]
 8109b7e:	2200      	movs	r2, #0
 8109b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8109b82:	687b      	ldr	r3, [r7, #4]
 8109b84:	2200      	movs	r2, #0
 8109b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	2200      	movs	r2, #0
 8109b8c:	609a      	str	r2, [r3, #8]
}
 8109b8e:	bf00      	nop
 8109b90:	3724      	adds	r7, #36	; 0x24
 8109b92:	46bd      	mov	sp, r7
 8109b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b98:	4770      	bx	lr
 8109b9a:	bf00      	nop
 8109b9c:	58024400 	.word	0x58024400
 8109ba0:	03d09000 	.word	0x03d09000
 8109ba4:	46000000 	.word	0x46000000
 8109ba8:	4c742400 	.word	0x4c742400
 8109bac:	4a742400 	.word	0x4a742400
 8109bb0:	4b742400 	.word	0x4b742400

08109bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8109bb4:	b580      	push	{r7, lr}
 8109bb6:	b084      	sub	sp, #16
 8109bb8:	af00      	add	r7, sp, #0
 8109bba:	6078      	str	r0, [r7, #4]
 8109bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109bbe:	2300      	movs	r3, #0
 8109bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109bc2:	4b54      	ldr	r3, [pc, #336]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109bc6:	f003 0303 	and.w	r3, r3, #3
 8109bca:	2b03      	cmp	r3, #3
 8109bcc:	d101      	bne.n	8109bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8109bce:	2301      	movs	r3, #1
 8109bd0:	e09b      	b.n	8109d0a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8109bd2:	4b50      	ldr	r3, [pc, #320]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109bd4:	681b      	ldr	r3, [r3, #0]
 8109bd6:	4a4f      	ldr	r2, [pc, #316]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109bd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8109bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109bde:	f7f9 fe07 	bl	81037f0 <HAL_GetTick>
 8109be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109be4:	e008      	b.n	8109bf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109be6:	f7f9 fe03 	bl	81037f0 <HAL_GetTick>
 8109bea:	4602      	mov	r2, r0
 8109bec:	68bb      	ldr	r3, [r7, #8]
 8109bee:	1ad3      	subs	r3, r2, r3
 8109bf0:	2b02      	cmp	r3, #2
 8109bf2:	d901      	bls.n	8109bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109bf4:	2303      	movs	r3, #3
 8109bf6:	e088      	b.n	8109d0a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8109bf8:	4b46      	ldr	r3, [pc, #280]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109bfa:	681b      	ldr	r3, [r3, #0]
 8109bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109c00:	2b00      	cmp	r3, #0
 8109c02:	d1f0      	bne.n	8109be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8109c04:	4b43      	ldr	r3, [pc, #268]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	681b      	ldr	r3, [r3, #0]
 8109c10:	031b      	lsls	r3, r3, #12
 8109c12:	4940      	ldr	r1, [pc, #256]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c14:	4313      	orrs	r3, r2
 8109c16:	628b      	str	r3, [r1, #40]	; 0x28
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	685b      	ldr	r3, [r3, #4]
 8109c1c:	3b01      	subs	r3, #1
 8109c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	689b      	ldr	r3, [r3, #8]
 8109c26:	3b01      	subs	r3, #1
 8109c28:	025b      	lsls	r3, r3, #9
 8109c2a:	b29b      	uxth	r3, r3
 8109c2c:	431a      	orrs	r2, r3
 8109c2e:	687b      	ldr	r3, [r7, #4]
 8109c30:	68db      	ldr	r3, [r3, #12]
 8109c32:	3b01      	subs	r3, #1
 8109c34:	041b      	lsls	r3, r3, #16
 8109c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109c3a:	431a      	orrs	r2, r3
 8109c3c:	687b      	ldr	r3, [r7, #4]
 8109c3e:	691b      	ldr	r3, [r3, #16]
 8109c40:	3b01      	subs	r3, #1
 8109c42:	061b      	lsls	r3, r3, #24
 8109c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109c48:	4932      	ldr	r1, [pc, #200]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c4a:	4313      	orrs	r3, r2
 8109c4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8109c4e:	4b31      	ldr	r3, [pc, #196]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8109c56:	687b      	ldr	r3, [r7, #4]
 8109c58:	695b      	ldr	r3, [r3, #20]
 8109c5a:	492e      	ldr	r1, [pc, #184]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c5c:	4313      	orrs	r3, r2
 8109c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109c60:	4b2c      	ldr	r3, [pc, #176]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c64:	f023 0220 	bic.w	r2, r3, #32
 8109c68:	687b      	ldr	r3, [r7, #4]
 8109c6a:	699b      	ldr	r3, [r3, #24]
 8109c6c:	4929      	ldr	r1, [pc, #164]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c6e:	4313      	orrs	r3, r2
 8109c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8109c72:	4b28      	ldr	r3, [pc, #160]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c76:	4a27      	ldr	r2, [pc, #156]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c78:	f023 0310 	bic.w	r3, r3, #16
 8109c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109c7e:	4b25      	ldr	r3, [pc, #148]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109c86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109c8a:	687a      	ldr	r2, [r7, #4]
 8109c8c:	69d2      	ldr	r2, [r2, #28]
 8109c8e:	00d2      	lsls	r2, r2, #3
 8109c90:	4920      	ldr	r1, [pc, #128]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c92:	4313      	orrs	r3, r2
 8109c94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8109c96:	4b1f      	ldr	r3, [pc, #124]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109c9a:	4a1e      	ldr	r2, [pc, #120]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109c9c:	f043 0310 	orr.w	r3, r3, #16
 8109ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109ca2:	683b      	ldr	r3, [r7, #0]
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d106      	bne.n	8109cb6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8109ca8:	4b1a      	ldr	r3, [pc, #104]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cac:	4a19      	ldr	r2, [pc, #100]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8109cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109cb4:	e00f      	b.n	8109cd6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109cb6:	683b      	ldr	r3, [r7, #0]
 8109cb8:	2b01      	cmp	r3, #1
 8109cba:	d106      	bne.n	8109cca <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109cbc:	4b15      	ldr	r3, [pc, #84]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cc0:	4a14      	ldr	r2, [pc, #80]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109cc8:	e005      	b.n	8109cd6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8109cca:	4b12      	ldr	r3, [pc, #72]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109cce:	4a11      	ldr	r2, [pc, #68]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8109cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8109cd6:	4b0f      	ldr	r3, [pc, #60]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cd8:	681b      	ldr	r3, [r3, #0]
 8109cda:	4a0e      	ldr	r2, [pc, #56]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109ce2:	f7f9 fd85 	bl	81037f0 <HAL_GetTick>
 8109ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109ce8:	e008      	b.n	8109cfc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8109cea:	f7f9 fd81 	bl	81037f0 <HAL_GetTick>
 8109cee:	4602      	mov	r2, r0
 8109cf0:	68bb      	ldr	r3, [r7, #8]
 8109cf2:	1ad3      	subs	r3, r2, r3
 8109cf4:	2b02      	cmp	r3, #2
 8109cf6:	d901      	bls.n	8109cfc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109cf8:	2303      	movs	r3, #3
 8109cfa:	e006      	b.n	8109d0a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109cfc:	4b05      	ldr	r3, [pc, #20]	; (8109d14 <RCCEx_PLL2_Config+0x160>)
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109d04:	2b00      	cmp	r3, #0
 8109d06:	d0f0      	beq.n	8109cea <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8109d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8109d0a:	4618      	mov	r0, r3
 8109d0c:	3710      	adds	r7, #16
 8109d0e:	46bd      	mov	sp, r7
 8109d10:	bd80      	pop	{r7, pc}
 8109d12:	bf00      	nop
 8109d14:	58024400 	.word	0x58024400

08109d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8109d18:	b580      	push	{r7, lr}
 8109d1a:	b084      	sub	sp, #16
 8109d1c:	af00      	add	r7, sp, #0
 8109d1e:	6078      	str	r0, [r7, #4]
 8109d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109d22:	2300      	movs	r3, #0
 8109d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8109d26:	4b54      	ldr	r3, [pc, #336]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109d2a:	f003 0303 	and.w	r3, r3, #3
 8109d2e:	2b03      	cmp	r3, #3
 8109d30:	d101      	bne.n	8109d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8109d32:	2301      	movs	r3, #1
 8109d34:	e09b      	b.n	8109e6e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8109d36:	4b50      	ldr	r3, [pc, #320]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109d38:	681b      	ldr	r3, [r3, #0]
 8109d3a:	4a4f      	ldr	r2, [pc, #316]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109d42:	f7f9 fd55 	bl	81037f0 <HAL_GetTick>
 8109d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109d48:	e008      	b.n	8109d5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109d4a:	f7f9 fd51 	bl	81037f0 <HAL_GetTick>
 8109d4e:	4602      	mov	r2, r0
 8109d50:	68bb      	ldr	r3, [r7, #8]
 8109d52:	1ad3      	subs	r3, r2, r3
 8109d54:	2b02      	cmp	r3, #2
 8109d56:	d901      	bls.n	8109d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8109d58:	2303      	movs	r3, #3
 8109d5a:	e088      	b.n	8109e6e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109d5c:	4b46      	ldr	r3, [pc, #280]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109d5e:	681b      	ldr	r3, [r3, #0]
 8109d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109d64:	2b00      	cmp	r3, #0
 8109d66:	d1f0      	bne.n	8109d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8109d68:	4b43      	ldr	r3, [pc, #268]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109d6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8109d70:	687b      	ldr	r3, [r7, #4]
 8109d72:	681b      	ldr	r3, [r3, #0]
 8109d74:	051b      	lsls	r3, r3, #20
 8109d76:	4940      	ldr	r1, [pc, #256]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109d78:	4313      	orrs	r3, r2
 8109d7a:	628b      	str	r3, [r1, #40]	; 0x28
 8109d7c:	687b      	ldr	r3, [r7, #4]
 8109d7e:	685b      	ldr	r3, [r3, #4]
 8109d80:	3b01      	subs	r3, #1
 8109d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109d86:	687b      	ldr	r3, [r7, #4]
 8109d88:	689b      	ldr	r3, [r3, #8]
 8109d8a:	3b01      	subs	r3, #1
 8109d8c:	025b      	lsls	r3, r3, #9
 8109d8e:	b29b      	uxth	r3, r3
 8109d90:	431a      	orrs	r2, r3
 8109d92:	687b      	ldr	r3, [r7, #4]
 8109d94:	68db      	ldr	r3, [r3, #12]
 8109d96:	3b01      	subs	r3, #1
 8109d98:	041b      	lsls	r3, r3, #16
 8109d9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109d9e:	431a      	orrs	r2, r3
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	691b      	ldr	r3, [r3, #16]
 8109da4:	3b01      	subs	r3, #1
 8109da6:	061b      	lsls	r3, r3, #24
 8109da8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109dac:	4932      	ldr	r1, [pc, #200]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109dae:	4313      	orrs	r3, r2
 8109db0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109db2:	4b31      	ldr	r3, [pc, #196]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8109dba:	687b      	ldr	r3, [r7, #4]
 8109dbc:	695b      	ldr	r3, [r3, #20]
 8109dbe:	492e      	ldr	r1, [pc, #184]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109dc0:	4313      	orrs	r3, r2
 8109dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8109dc4:	4b2c      	ldr	r3, [pc, #176]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	699b      	ldr	r3, [r3, #24]
 8109dd0:	4929      	ldr	r1, [pc, #164]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109dd2:	4313      	orrs	r3, r2
 8109dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8109dd6:	4b28      	ldr	r3, [pc, #160]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109dda:	4a27      	ldr	r2, [pc, #156]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109de2:	4b25      	ldr	r3, [pc, #148]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8109dea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109dee:	687a      	ldr	r2, [r7, #4]
 8109df0:	69d2      	ldr	r2, [r2, #28]
 8109df2:	00d2      	lsls	r2, r2, #3
 8109df4:	4920      	ldr	r1, [pc, #128]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109df6:	4313      	orrs	r3, r2
 8109df8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8109dfa:	4b1f      	ldr	r3, [pc, #124]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109dfe:	4a1e      	ldr	r2, [pc, #120]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8109e04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8109e06:	683b      	ldr	r3, [r7, #0]
 8109e08:	2b00      	cmp	r3, #0
 8109e0a:	d106      	bne.n	8109e1a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109e0c:	4b1a      	ldr	r3, [pc, #104]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e10:	4a19      	ldr	r2, [pc, #100]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8109e16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109e18:	e00f      	b.n	8109e3a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8109e1a:	683b      	ldr	r3, [r7, #0]
 8109e1c:	2b01      	cmp	r3, #1
 8109e1e:	d106      	bne.n	8109e2e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109e20:	4b15      	ldr	r3, [pc, #84]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e24:	4a14      	ldr	r2, [pc, #80]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8109e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109e2c:	e005      	b.n	8109e3a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109e2e:	4b12      	ldr	r3, [pc, #72]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e32:	4a11      	ldr	r2, [pc, #68]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8109e38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8109e3a:	4b0f      	ldr	r3, [pc, #60]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e3c:	681b      	ldr	r3, [r3, #0]
 8109e3e:	4a0e      	ldr	r2, [pc, #56]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109e46:	f7f9 fcd3 	bl	81037f0 <HAL_GetTick>
 8109e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109e4c:	e008      	b.n	8109e60 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8109e4e:	f7f9 fccf 	bl	81037f0 <HAL_GetTick>
 8109e52:	4602      	mov	r2, r0
 8109e54:	68bb      	ldr	r3, [r7, #8]
 8109e56:	1ad3      	subs	r3, r2, r3
 8109e58:	2b02      	cmp	r3, #2
 8109e5a:	d901      	bls.n	8109e60 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109e5c:	2303      	movs	r3, #3
 8109e5e:	e006      	b.n	8109e6e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109e60:	4b05      	ldr	r3, [pc, #20]	; (8109e78 <RCCEx_PLL3_Config+0x160>)
 8109e62:	681b      	ldr	r3, [r3, #0]
 8109e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109e68:	2b00      	cmp	r3, #0
 8109e6a:	d0f0      	beq.n	8109e4e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8109e6e:	4618      	mov	r0, r3
 8109e70:	3710      	adds	r7, #16
 8109e72:	46bd      	mov	sp, r7
 8109e74:	bd80      	pop	{r7, pc}
 8109e76:	bf00      	nop
 8109e78:	58024400 	.word	0x58024400

08109e7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109e7c:	b580      	push	{r7, lr}
 8109e7e:	b084      	sub	sp, #16
 8109e80:	af00      	add	r7, sp, #0
 8109e82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8109e84:	2300      	movs	r3, #0
 8109e86:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8109e88:	687b      	ldr	r3, [r7, #4]
 8109e8a:	2b00      	cmp	r3, #0
 8109e8c:	d101      	bne.n	8109e92 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8109e8e:	2301      	movs	r3, #1
 8109e90:	e0eb      	b.n	810a06a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109e92:	687b      	ldr	r3, [r7, #4]
 8109e94:	2200      	movs	r2, #0
 8109e96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8109e98:	687b      	ldr	r3, [r7, #4]
 8109e9a:	681b      	ldr	r3, [r3, #0]
 8109e9c:	4a75      	ldr	r2, [pc, #468]	; (810a074 <HAL_SPI_Init+0x1f8>)
 8109e9e:	4293      	cmp	r3, r2
 8109ea0:	d00f      	beq.n	8109ec2 <HAL_SPI_Init+0x46>
 8109ea2:	687b      	ldr	r3, [r7, #4]
 8109ea4:	681b      	ldr	r3, [r3, #0]
 8109ea6:	4a74      	ldr	r2, [pc, #464]	; (810a078 <HAL_SPI_Init+0x1fc>)
 8109ea8:	4293      	cmp	r3, r2
 8109eaa:	d00a      	beq.n	8109ec2 <HAL_SPI_Init+0x46>
 8109eac:	687b      	ldr	r3, [r7, #4]
 8109eae:	681b      	ldr	r3, [r3, #0]
 8109eb0:	4a72      	ldr	r2, [pc, #456]	; (810a07c <HAL_SPI_Init+0x200>)
 8109eb2:	4293      	cmp	r3, r2
 8109eb4:	d005      	beq.n	8109ec2 <HAL_SPI_Init+0x46>
 8109eb6:	687b      	ldr	r3, [r7, #4]
 8109eb8:	68db      	ldr	r3, [r3, #12]
 8109eba:	2b0f      	cmp	r3, #15
 8109ebc:	d901      	bls.n	8109ec2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8109ebe:	2301      	movs	r3, #1
 8109ec0:	e0d3      	b.n	810a06a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109ec2:	6878      	ldr	r0, [r7, #4]
 8109ec4:	f000 fdf9 	bl	810aaba <SPI_GetPacketSize>
 8109ec8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109eca:	687b      	ldr	r3, [r7, #4]
 8109ecc:	681b      	ldr	r3, [r3, #0]
 8109ece:	4a69      	ldr	r2, [pc, #420]	; (810a074 <HAL_SPI_Init+0x1f8>)
 8109ed0:	4293      	cmp	r3, r2
 8109ed2:	d00c      	beq.n	8109eee <HAL_SPI_Init+0x72>
 8109ed4:	687b      	ldr	r3, [r7, #4]
 8109ed6:	681b      	ldr	r3, [r3, #0]
 8109ed8:	4a67      	ldr	r2, [pc, #412]	; (810a078 <HAL_SPI_Init+0x1fc>)
 8109eda:	4293      	cmp	r3, r2
 8109edc:	d007      	beq.n	8109eee <HAL_SPI_Init+0x72>
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	681b      	ldr	r3, [r3, #0]
 8109ee2:	4a66      	ldr	r2, [pc, #408]	; (810a07c <HAL_SPI_Init+0x200>)
 8109ee4:	4293      	cmp	r3, r2
 8109ee6:	d002      	beq.n	8109eee <HAL_SPI_Init+0x72>
 8109ee8:	68bb      	ldr	r3, [r7, #8]
 8109eea:	2b08      	cmp	r3, #8
 8109eec:	d811      	bhi.n	8109f12 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8109ef2:	4a60      	ldr	r2, [pc, #384]	; (810a074 <HAL_SPI_Init+0x1f8>)
 8109ef4:	4293      	cmp	r3, r2
 8109ef6:	d009      	beq.n	8109f0c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109ef8:	687b      	ldr	r3, [r7, #4]
 8109efa:	681b      	ldr	r3, [r3, #0]
 8109efc:	4a5e      	ldr	r2, [pc, #376]	; (810a078 <HAL_SPI_Init+0x1fc>)
 8109efe:	4293      	cmp	r3, r2
 8109f00:	d004      	beq.n	8109f0c <HAL_SPI_Init+0x90>
 8109f02:	687b      	ldr	r3, [r7, #4]
 8109f04:	681b      	ldr	r3, [r3, #0]
 8109f06:	4a5d      	ldr	r2, [pc, #372]	; (810a07c <HAL_SPI_Init+0x200>)
 8109f08:	4293      	cmp	r3, r2
 8109f0a:	d104      	bne.n	8109f16 <HAL_SPI_Init+0x9a>
 8109f0c:	68bb      	ldr	r3, [r7, #8]
 8109f0e:	2b10      	cmp	r3, #16
 8109f10:	d901      	bls.n	8109f16 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8109f12:	2301      	movs	r3, #1
 8109f14:	e0a9      	b.n	810a06a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8109f1c:	b2db      	uxtb	r3, r3
 8109f1e:	2b00      	cmp	r3, #0
 8109f20:	d106      	bne.n	8109f30 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8109f22:	687b      	ldr	r3, [r7, #4]
 8109f24:	2200      	movs	r2, #0
 8109f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8109f2a:	6878      	ldr	r0, [r7, #4]
 8109f2c:	f7f8 ff2c 	bl	8102d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109f30:	687b      	ldr	r3, [r7, #4]
 8109f32:	2202      	movs	r2, #2
 8109f34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109f38:	687b      	ldr	r3, [r7, #4]
 8109f3a:	681b      	ldr	r3, [r3, #0]
 8109f3c:	681a      	ldr	r2, [r3, #0]
 8109f3e:	687b      	ldr	r3, [r7, #4]
 8109f40:	681b      	ldr	r3, [r3, #0]
 8109f42:	f022 0201 	bic.w	r2, r2, #1
 8109f46:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109f48:	687b      	ldr	r3, [r7, #4]
 8109f4a:	699b      	ldr	r3, [r3, #24]
 8109f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109f50:	d119      	bne.n	8109f86 <HAL_SPI_Init+0x10a>
 8109f52:	687b      	ldr	r3, [r7, #4]
 8109f54:	685b      	ldr	r3, [r3, #4]
 8109f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109f5a:	d103      	bne.n	8109f64 <HAL_SPI_Init+0xe8>
 8109f5c:	687b      	ldr	r3, [r7, #4]
 8109f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109f60:	2b00      	cmp	r3, #0
 8109f62:	d008      	beq.n	8109f76 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109f64:	687b      	ldr	r3, [r7, #4]
 8109f66:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109f68:	2b00      	cmp	r3, #0
 8109f6a:	d10c      	bne.n	8109f86 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109f6c:	687b      	ldr	r3, [r7, #4]
 8109f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109f74:	d107      	bne.n	8109f86 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109f76:	687b      	ldr	r3, [r7, #4]
 8109f78:	681b      	ldr	r3, [r3, #0]
 8109f7a:	681a      	ldr	r2, [r3, #0]
 8109f7c:	687b      	ldr	r3, [r7, #4]
 8109f7e:	681b      	ldr	r3, [r3, #0]
 8109f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8109f84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109f86:	687b      	ldr	r3, [r7, #4]
 8109f88:	69da      	ldr	r2, [r3, #28]
 8109f8a:	687b      	ldr	r3, [r7, #4]
 8109f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109f8e:	431a      	orrs	r2, r3
 8109f90:	68fb      	ldr	r3, [r7, #12]
 8109f92:	431a      	orrs	r2, r3
 8109f94:	687b      	ldr	r3, [r7, #4]
 8109f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109f98:	ea42 0103 	orr.w	r1, r2, r3
 8109f9c:	687b      	ldr	r3, [r7, #4]
 8109f9e:	68da      	ldr	r2, [r3, #12]
 8109fa0:	687b      	ldr	r3, [r7, #4]
 8109fa2:	681b      	ldr	r3, [r3, #0]
 8109fa4:	430a      	orrs	r2, r1
 8109fa6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8109fa8:	687b      	ldr	r3, [r7, #4]
 8109faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109fb0:	431a      	orrs	r2, r3
 8109fb2:	687b      	ldr	r3, [r7, #4]
 8109fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109fb6:	431a      	orrs	r2, r3
 8109fb8:	687b      	ldr	r3, [r7, #4]
 8109fba:	699b      	ldr	r3, [r3, #24]
 8109fbc:	431a      	orrs	r2, r3
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	691b      	ldr	r3, [r3, #16]
 8109fc2:	431a      	orrs	r2, r3
 8109fc4:	687b      	ldr	r3, [r7, #4]
 8109fc6:	695b      	ldr	r3, [r3, #20]
 8109fc8:	431a      	orrs	r2, r3
 8109fca:	687b      	ldr	r3, [r7, #4]
 8109fcc:	6a1b      	ldr	r3, [r3, #32]
 8109fce:	431a      	orrs	r2, r3
 8109fd0:	687b      	ldr	r3, [r7, #4]
 8109fd2:	685b      	ldr	r3, [r3, #4]
 8109fd4:	431a      	orrs	r2, r3
 8109fd6:	687b      	ldr	r3, [r7, #4]
 8109fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109fda:	431a      	orrs	r2, r3
 8109fdc:	687b      	ldr	r3, [r7, #4]
 8109fde:	689b      	ldr	r3, [r3, #8]
 8109fe0:	431a      	orrs	r2, r3
 8109fe2:	687b      	ldr	r3, [r7, #4]
 8109fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109fe6:	ea42 0103 	orr.w	r1, r2, r3
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8109fee:	687b      	ldr	r3, [r7, #4]
 8109ff0:	681b      	ldr	r3, [r3, #0]
 8109ff2:	430a      	orrs	r2, r1
 8109ff4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	685b      	ldr	r3, [r3, #4]
 8109ffa:	2b00      	cmp	r3, #0
 8109ffc:	d113      	bne.n	810a026 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8109ffe:	687b      	ldr	r3, [r7, #4]
 810a000:	681b      	ldr	r3, [r3, #0]
 810a002:	689b      	ldr	r3, [r3, #8]
 810a004:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	681b      	ldr	r3, [r3, #0]
 810a00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a010:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	681b      	ldr	r3, [r3, #0]
 810a016:	689b      	ldr	r3, [r3, #8]
 810a018:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810a01c:	687b      	ldr	r3, [r7, #4]
 810a01e:	681b      	ldr	r3, [r3, #0]
 810a020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810a024:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	681b      	ldr	r3, [r3, #0]
 810a02a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	681b      	ldr	r3, [r3, #0]
 810a030:	f022 0201 	bic.w	r2, r2, #1
 810a034:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810a036:	687b      	ldr	r3, [r7, #4]
 810a038:	685b      	ldr	r3, [r3, #4]
 810a03a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a03e:	2b00      	cmp	r3, #0
 810a040:	d00a      	beq.n	810a058 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810a042:	687b      	ldr	r3, [r7, #4]
 810a044:	681b      	ldr	r3, [r3, #0]
 810a046:	68db      	ldr	r3, [r3, #12]
 810a048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810a04c:	687b      	ldr	r3, [r7, #4]
 810a04e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	681b      	ldr	r3, [r3, #0]
 810a054:	430a      	orrs	r2, r1
 810a056:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	2200      	movs	r2, #0
 810a05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810a060:	687b      	ldr	r3, [r7, #4]
 810a062:	2201      	movs	r2, #1
 810a064:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810a068:	2300      	movs	r3, #0
}
 810a06a:	4618      	mov	r0, r3
 810a06c:	3710      	adds	r7, #16
 810a06e:	46bd      	mov	sp, r7
 810a070:	bd80      	pop	{r7, pc}
 810a072:	bf00      	nop
 810a074:	40013000 	.word	0x40013000
 810a078:	40003800 	.word	0x40003800
 810a07c:	40003c00 	.word	0x40003c00

0810a080 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 810a080:	b580      	push	{r7, lr}
 810a082:	b086      	sub	sp, #24
 810a084:	af00      	add	r7, sp, #0
 810a086:	60f8      	str	r0, [r7, #12]
 810a088:	60b9      	str	r1, [r7, #8]
 810a08a:	607a      	str	r2, [r7, #4]
 810a08c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810a08e:	2300      	movs	r3, #0
 810a090:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 810a092:	68fb      	ldr	r3, [r7, #12]
 810a094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810a098:	2b01      	cmp	r3, #1
 810a09a:	d101      	bne.n	810a0a0 <HAL_SPI_TransmitReceive_DMA+0x20>
 810a09c:	2302      	movs	r3, #2
 810a09e:	e1ac      	b.n	810a3fa <HAL_SPI_TransmitReceive_DMA+0x37a>
 810a0a0:	68fb      	ldr	r3, [r7, #12]
 810a0a2:	2201      	movs	r2, #1
 810a0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 810a0a8:	68fb      	ldr	r3, [r7, #12]
 810a0aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a0ae:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 810a0b0:	68fb      	ldr	r3, [r7, #12]
 810a0b2:	685b      	ldr	r3, [r3, #4]
 810a0b4:	613b      	str	r3, [r7, #16]

  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 810a0b6:	693b      	ldr	r3, [r7, #16]
 810a0b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a0bc:	d106      	bne.n	810a0cc <HAL_SPI_TransmitReceive_DMA+0x4c>
 810a0be:	68fb      	ldr	r3, [r7, #12]
 810a0c0:	689b      	ldr	r3, [r3, #8]
 810a0c2:	2b00      	cmp	r3, #0
 810a0c4:	d102      	bne.n	810a0cc <HAL_SPI_TransmitReceive_DMA+0x4c>
 810a0c6:	7dbb      	ldrb	r3, [r7, #22]
 810a0c8:	2b04      	cmp	r3, #4
 810a0ca:	d00a      	beq.n	810a0e2 <HAL_SPI_TransmitReceive_DMA+0x62>
 810a0cc:	7dbb      	ldrb	r3, [r7, #22]
 810a0ce:	2b01      	cmp	r3, #1
 810a0d0:	d007      	beq.n	810a0e2 <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 810a0d2:	2302      	movs	r3, #2
 810a0d4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810a0d6:	68fb      	ldr	r3, [r7, #12]
 810a0d8:	2200      	movs	r2, #0
 810a0da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a0de:	7dfb      	ldrb	r3, [r7, #23]
 810a0e0:	e18b      	b.n	810a3fa <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810a0e2:	68bb      	ldr	r3, [r7, #8]
 810a0e4:	2b00      	cmp	r3, #0
 810a0e6:	d005      	beq.n	810a0f4 <HAL_SPI_TransmitReceive_DMA+0x74>
 810a0e8:	687b      	ldr	r3, [r7, #4]
 810a0ea:	2b00      	cmp	r3, #0
 810a0ec:	d002      	beq.n	810a0f4 <HAL_SPI_TransmitReceive_DMA+0x74>
 810a0ee:	887b      	ldrh	r3, [r7, #2]
 810a0f0:	2b00      	cmp	r3, #0
 810a0f2:	d107      	bne.n	810a104 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 810a0f4:	2301      	movs	r3, #1
 810a0f6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 810a0f8:	68fb      	ldr	r3, [r7, #12]
 810a0fa:	2200      	movs	r2, #0
 810a0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a100:	7dfb      	ldrb	r3, [r7, #23]
 810a102:	e17a      	b.n	810a3fa <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a104:	68fb      	ldr	r3, [r7, #12]
 810a106:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a10a:	b2db      	uxtb	r3, r3
 810a10c:	2b04      	cmp	r3, #4
 810a10e:	d003      	beq.n	810a118 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810a110:	68fb      	ldr	r3, [r7, #12]
 810a112:	2205      	movs	r2, #5
 810a114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810a118:	68fb      	ldr	r3, [r7, #12]
 810a11a:	2200      	movs	r2, #0
 810a11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810a120:	68fb      	ldr	r3, [r7, #12]
 810a122:	68ba      	ldr	r2, [r7, #8]
 810a124:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810a126:	68fb      	ldr	r3, [r7, #12]
 810a128:	887a      	ldrh	r2, [r7, #2]
 810a12a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810a12e:	68fb      	ldr	r3, [r7, #12]
 810a130:	887a      	ldrh	r2, [r7, #2]
 810a132:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810a136:	68fb      	ldr	r3, [r7, #12]
 810a138:	687a      	ldr	r2, [r7, #4]
 810a13a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810a13c:	68fb      	ldr	r3, [r7, #12]
 810a13e:	887a      	ldrh	r2, [r7, #2]
 810a140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810a144:	68fb      	ldr	r3, [r7, #12]
 810a146:	887a      	ldrh	r2, [r7, #2]
 810a148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810a14c:	68fb      	ldr	r3, [r7, #12]
 810a14e:	2200      	movs	r2, #0
 810a150:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810a152:	68fb      	ldr	r3, [r7, #12]
 810a154:	2200      	movs	r2, #0
 810a156:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a158:	68fb      	ldr	r3, [r7, #12]
 810a15a:	681b      	ldr	r3, [r3, #0]
 810a15c:	689a      	ldr	r2, [r3, #8]
 810a15e:	68fb      	ldr	r3, [r7, #12]
 810a160:	681b      	ldr	r3, [r3, #0]
 810a162:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a166:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a168:	68fb      	ldr	r3, [r7, #12]
 810a16a:	68db      	ldr	r3, [r3, #12]
 810a16c:	2b0f      	cmp	r3, #15
 810a16e:	d905      	bls.n	810a17c <HAL_SPI_TransmitReceive_DMA+0xfc>
 810a170:	68fb      	ldr	r3, [r7, #12]
 810a172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a174:	699b      	ldr	r3, [r3, #24]
 810a176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a17a:	d10f      	bne.n	810a19c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a17c:	68fb      	ldr	r3, [r7, #12]
 810a17e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 810a180:	2b07      	cmp	r3, #7
 810a182:	d913      	bls.n	810a1ac <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a184:	68fb      	ldr	r3, [r7, #12]
 810a186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a188:	699b      	ldr	r3, [r3, #24]
 810a18a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a18e:	d00d      	beq.n	810a1ac <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 810a190:	68fb      	ldr	r3, [r7, #12]
 810a192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a194:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 810a196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a19a:	d007      	beq.n	810a1ac <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 810a19c:	2301      	movs	r3, #1
 810a19e:	75fb      	strb	r3, [r7, #23]
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 810a1a0:	68fb      	ldr	r3, [r7, #12]
 810a1a2:	2200      	movs	r2, #0
 810a1a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810a1a8:	7dfb      	ldrb	r3, [r7, #23]
 810a1aa:	e126      	b.n	810a3fa <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 810a1ac:	68fb      	ldr	r3, [r7, #12]
 810a1ae:	68db      	ldr	r3, [r3, #12]
 810a1b0:	2b07      	cmp	r3, #7
 810a1b2:	d840      	bhi.n	810a236 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a1b4:	68fb      	ldr	r3, [r7, #12]
 810a1b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a1b8:	699b      	ldr	r3, [r3, #24]
 810a1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a1be:	d109      	bne.n	810a1d4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a1c0:	68fb      	ldr	r3, [r7, #12]
 810a1c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a1c6:	b29b      	uxth	r3, r3
 810a1c8:	3301      	adds	r3, #1
 810a1ca:	105b      	asrs	r3, r3, #1
 810a1cc:	b29a      	uxth	r2, r3
 810a1ce:	68fb      	ldr	r3, [r7, #12]
 810a1d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a1d4:	68fb      	ldr	r3, [r7, #12]
 810a1d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a1d8:	699b      	ldr	r3, [r3, #24]
 810a1da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a1de:	d109      	bne.n	810a1f4 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 810a1e0:	68fb      	ldr	r3, [r7, #12]
 810a1e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a1e6:	b29b      	uxth	r3, r3
 810a1e8:	3303      	adds	r3, #3
 810a1ea:	109b      	asrs	r3, r3, #2
 810a1ec:	b29a      	uxth	r2, r3
 810a1ee:	68fb      	ldr	r3, [r7, #12]
 810a1f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810a1f4:	68fb      	ldr	r3, [r7, #12]
 810a1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a1f8:	699b      	ldr	r3, [r3, #24]
 810a1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a1fe:	d109      	bne.n	810a214 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a200:	68fb      	ldr	r3, [r7, #12]
 810a202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a206:	b29b      	uxth	r3, r3
 810a208:	3301      	adds	r3, #1
 810a20a:	105b      	asrs	r3, r3, #1
 810a20c:	b29a      	uxth	r2, r3
 810a20e:	68fb      	ldr	r3, [r7, #12]
 810a210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a214:	68fb      	ldr	r3, [r7, #12]
 810a216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a218:	699b      	ldr	r3, [r3, #24]
 810a21a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a21e:	d12e      	bne.n	810a27e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 810a220:	68fb      	ldr	r3, [r7, #12]
 810a222:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a226:	b29b      	uxth	r3, r3
 810a228:	3303      	adds	r3, #3
 810a22a:	109b      	asrs	r3, r3, #2
 810a22c:	b29a      	uxth	r2, r3
 810a22e:	68fb      	ldr	r3, [r7, #12]
 810a230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810a234:	e023      	b.n	810a27e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 810a236:	68fb      	ldr	r3, [r7, #12]
 810a238:	68db      	ldr	r3, [r3, #12]
 810a23a:	2b0f      	cmp	r3, #15
 810a23c:	d81f      	bhi.n	810a27e <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a23e:	68fb      	ldr	r3, [r7, #12]
 810a240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a242:	699b      	ldr	r3, [r3, #24]
 810a244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a248:	d109      	bne.n	810a25e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 810a24a:	68fb      	ldr	r3, [r7, #12]
 810a24c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a250:	b29b      	uxth	r3, r3
 810a252:	3301      	adds	r3, #1
 810a254:	105b      	asrs	r3, r3, #1
 810a256:	b29a      	uxth	r2, r3
 810a258:	68fb      	ldr	r3, [r7, #12]
 810a25a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 810a25e:	68fb      	ldr	r3, [r7, #12]
 810a260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a262:	699b      	ldr	r3, [r3, #24]
 810a264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a268:	d109      	bne.n	810a27e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 810a26a:	68fb      	ldr	r3, [r7, #12]
 810a26c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a270:	b29b      	uxth	r3, r3
 810a272:	3301      	adds	r3, #1
 810a274:	105b      	asrs	r3, r3, #1
 810a276:	b29a      	uxth	r2, r3
 810a278:	68fb      	ldr	r3, [r7, #12]
 810a27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 810a27e:	68fb      	ldr	r3, [r7, #12]
 810a280:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a284:	b2db      	uxtb	r3, r3
 810a286:	2b04      	cmp	r3, #4
 810a288:	d108      	bne.n	810a29c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 810a28a:	68fb      	ldr	r3, [r7, #12]
 810a28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a28e:	4a5d      	ldr	r2, [pc, #372]	; (810a404 <HAL_SPI_TransmitReceive_DMA+0x384>)
 810a290:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 810a292:	68fb      	ldr	r3, [r7, #12]
 810a294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a296:	4a5c      	ldr	r2, [pc, #368]	; (810a408 <HAL_SPI_TransmitReceive_DMA+0x388>)
 810a298:	63da      	str	r2, [r3, #60]	; 0x3c
 810a29a:	e007      	b.n	810a2ac <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 810a29c:	68fb      	ldr	r3, [r7, #12]
 810a29e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a2a0:	4a5a      	ldr	r2, [pc, #360]	; (810a40c <HAL_SPI_TransmitReceive_DMA+0x38c>)
 810a2a2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 810a2a4:	68fb      	ldr	r3, [r7, #12]
 810a2a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a2a8:	4a59      	ldr	r2, [pc, #356]	; (810a410 <HAL_SPI_TransmitReceive_DMA+0x390>)
 810a2aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 810a2ac:	68fb      	ldr	r3, [r7, #12]
 810a2ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a2b0:	4a58      	ldr	r2, [pc, #352]	; (810a414 <HAL_SPI_TransmitReceive_DMA+0x394>)
 810a2b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 810a2b4:	68fb      	ldr	r3, [r7, #12]
 810a2b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a2b8:	2200      	movs	r2, #0
 810a2ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 810a2bc:	68fb      	ldr	r3, [r7, #12]
 810a2be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810a2c0:	68fb      	ldr	r3, [r7, #12]
 810a2c2:	681b      	ldr	r3, [r3, #0]
 810a2c4:	3330      	adds	r3, #48	; 0x30
 810a2c6:	4619      	mov	r1, r3
 810a2c8:	68fb      	ldr	r3, [r7, #12]
 810a2ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a2cc:	461a      	mov	r2, r3
 810a2ce:	68fb      	ldr	r3, [r7, #12]
 810a2d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a2d4:	b29b      	uxth	r3, r3
 810a2d6:	f7f9 ff39 	bl	810414c <HAL_DMA_Start_IT>
 810a2da:	4603      	mov	r3, r0
 810a2dc:	2b00      	cmp	r3, #0
 810a2de:	d00f      	beq.n	810a300 <HAL_SPI_TransmitReceive_DMA+0x280>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a2e0:	68fb      	ldr	r3, [r7, #12]
 810a2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a2e6:	f043 0210 	orr.w	r2, r3, #16
 810a2ea:	68fb      	ldr	r3, [r7, #12]
 810a2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a2f0:	2301      	movs	r3, #1
 810a2f2:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a2f4:	68fb      	ldr	r3, [r7, #12]
 810a2f6:	2201      	movs	r2, #1
 810a2f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a2fc:	7dfb      	ldrb	r3, [r7, #23]
 810a2fe:	e07c      	b.n	810a3fa <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 810a300:	68fb      	ldr	r3, [r7, #12]
 810a302:	681b      	ldr	r3, [r3, #0]
 810a304:	689a      	ldr	r2, [r3, #8]
 810a306:	68fb      	ldr	r3, [r7, #12]
 810a308:	681b      	ldr	r3, [r3, #0]
 810a30a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810a30e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 810a310:	68fb      	ldr	r3, [r7, #12]
 810a312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a314:	2200      	movs	r2, #0
 810a316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 810a318:	68fb      	ldr	r3, [r7, #12]
 810a31a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a31c:	2200      	movs	r2, #0
 810a31e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 810a320:	68fb      	ldr	r3, [r7, #12]
 810a322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a324:	2200      	movs	r2, #0
 810a326:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 810a328:	68fb      	ldr	r3, [r7, #12]
 810a32a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a32c:	2200      	movs	r2, #0
 810a32e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 810a330:	68fb      	ldr	r3, [r7, #12]
 810a332:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810a334:	68fb      	ldr	r3, [r7, #12]
 810a336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a338:	4619      	mov	r1, r3
 810a33a:	68fb      	ldr	r3, [r7, #12]
 810a33c:	681b      	ldr	r3, [r3, #0]
 810a33e:	3320      	adds	r3, #32
 810a340:	461a      	mov	r2, r3
 810a342:	68fb      	ldr	r3, [r7, #12]
 810a344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810a348:	b29b      	uxth	r3, r3
 810a34a:	f7f9 feff 	bl	810414c <HAL_DMA_Start_IT>
 810a34e:	4603      	mov	r3, r0
 810a350:	2b00      	cmp	r3, #0
 810a352:	d00f      	beq.n	810a374 <HAL_SPI_TransmitReceive_DMA+0x2f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a354:	68fb      	ldr	r3, [r7, #12]
 810a356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a35a:	f043 0210 	orr.w	r2, r3, #16
 810a35e:	68fb      	ldr	r3, [r7, #12]
 810a360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    errorcode = HAL_ERROR;
 810a364:	2301      	movs	r3, #1
 810a366:	75fb      	strb	r3, [r7, #23]
    hspi->State = HAL_SPI_STATE_READY;
 810a368:	68fb      	ldr	r3, [r7, #12]
 810a36a:	2201      	movs	r2, #1
 810a36c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return errorcode;
 810a370:	7dfb      	ldrb	r3, [r7, #23]
 810a372:	e042      	b.n	810a3fa <HAL_SPI_TransmitReceive_DMA+0x37a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a374:	68fb      	ldr	r3, [r7, #12]
 810a376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a378:	69db      	ldr	r3, [r3, #28]
 810a37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a37e:	d108      	bne.n	810a392 <HAL_SPI_TransmitReceive_DMA+0x312>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 810a380:	68fb      	ldr	r3, [r7, #12]
 810a382:	681b      	ldr	r3, [r3, #0]
 810a384:	685b      	ldr	r3, [r3, #4]
 810a386:	68fa      	ldr	r2, [r7, #12]
 810a388:	6812      	ldr	r2, [r2, #0]
 810a38a:	0c1b      	lsrs	r3, r3, #16
 810a38c:	041b      	lsls	r3, r3, #16
 810a38e:	6053      	str	r3, [r2, #4]
 810a390:	e009      	b.n	810a3a6 <HAL_SPI_TransmitReceive_DMA+0x326>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810a392:	68fb      	ldr	r3, [r7, #12]
 810a394:	681b      	ldr	r3, [r3, #0]
 810a396:	685b      	ldr	r3, [r3, #4]
 810a398:	0c1b      	lsrs	r3, r3, #16
 810a39a:	041b      	lsls	r3, r3, #16
 810a39c:	8879      	ldrh	r1, [r7, #2]
 810a39e:	68fa      	ldr	r2, [r7, #12]
 810a3a0:	6812      	ldr	r2, [r2, #0]
 810a3a2:	430b      	orrs	r3, r1
 810a3a4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 810a3a6:	68fb      	ldr	r3, [r7, #12]
 810a3a8:	681b      	ldr	r3, [r3, #0]
 810a3aa:	689a      	ldr	r2, [r3, #8]
 810a3ac:	68fb      	ldr	r3, [r7, #12]
 810a3ae:	681b      	ldr	r3, [r3, #0]
 810a3b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810a3b4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 810a3b6:	68fb      	ldr	r3, [r7, #12]
 810a3b8:	681b      	ldr	r3, [r3, #0]
 810a3ba:	691a      	ldr	r2, [r3, #16]
 810a3bc:	68fb      	ldr	r3, [r7, #12]
 810a3be:	681b      	ldr	r3, [r3, #0]
 810a3c0:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 810a3c4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810a3c6:	68fb      	ldr	r3, [r7, #12]
 810a3c8:	681b      	ldr	r3, [r3, #0]
 810a3ca:	681a      	ldr	r2, [r3, #0]
 810a3cc:	68fb      	ldr	r3, [r7, #12]
 810a3ce:	681b      	ldr	r3, [r3, #0]
 810a3d0:	f042 0201 	orr.w	r2, r2, #1
 810a3d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810a3d6:	68fb      	ldr	r3, [r7, #12]
 810a3d8:	685b      	ldr	r3, [r3, #4]
 810a3da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a3de:	d107      	bne.n	810a3f0 <HAL_SPI_TransmitReceive_DMA+0x370>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810a3e0:	68fb      	ldr	r3, [r7, #12]
 810a3e2:	681b      	ldr	r3, [r3, #0]
 810a3e4:	681a      	ldr	r2, [r3, #0]
 810a3e6:	68fb      	ldr	r3, [r7, #12]
 810a3e8:	681b      	ldr	r3, [r3, #0]
 810a3ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a3ee:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810a3f0:	68fb      	ldr	r3, [r7, #12]
 810a3f2:	2200      	movs	r2, #0
 810a3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 810a3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 810a3fa:	4618      	mov	r0, r3
 810a3fc:	3718      	adds	r7, #24
 810a3fe:	46bd      	mov	sp, r7
 810a400:	bd80      	pop	{r7, pc}
 810a402:	bf00      	nop
 810a404:	0810a8c9 	.word	0x0810a8c9
 810a408:	0810a83d 	.word	0x0810a83d
 810a40c:	0810a8e5 	.word	0x0810a8e5
 810a410:	0810a883 	.word	0x0810a883
 810a414:	0810a901 	.word	0x0810a901

0810a418 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810a418:	b580      	push	{r7, lr}
 810a41a:	b08a      	sub	sp, #40	; 0x28
 810a41c:	af00      	add	r7, sp, #0
 810a41e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810a420:	687b      	ldr	r3, [r7, #4]
 810a422:	681b      	ldr	r3, [r3, #0]
 810a424:	691b      	ldr	r3, [r3, #16]
 810a426:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810a428:	687b      	ldr	r3, [r7, #4]
 810a42a:	681b      	ldr	r3, [r3, #0]
 810a42c:	695b      	ldr	r3, [r3, #20]
 810a42e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810a430:	6a3a      	ldr	r2, [r7, #32]
 810a432:	69fb      	ldr	r3, [r7, #28]
 810a434:	4013      	ands	r3, r2
 810a436:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	681b      	ldr	r3, [r3, #0]
 810a43c:	689b      	ldr	r3, [r3, #8]
 810a43e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810a440:	2300      	movs	r3, #0
 810a442:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a44a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810a44c:	687b      	ldr	r3, [r7, #4]
 810a44e:	681b      	ldr	r3, [r3, #0]
 810a450:	3330      	adds	r3, #48	; 0x30
 810a452:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810a454:	69bb      	ldr	r3, [r7, #24]
 810a456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a45a:	2b00      	cmp	r3, #0
 810a45c:	d113      	bne.n	810a486 <HAL_SPI_IRQHandler+0x6e>
 810a45e:	69bb      	ldr	r3, [r7, #24]
 810a460:	f003 0320 	and.w	r3, r3, #32
 810a464:	2b00      	cmp	r3, #0
 810a466:	d10e      	bne.n	810a486 <HAL_SPI_IRQHandler+0x6e>
 810a468:	69bb      	ldr	r3, [r7, #24]
 810a46a:	f003 0304 	and.w	r3, r3, #4
 810a46e:	2b00      	cmp	r3, #0
 810a470:	d009      	beq.n	810a486 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a476:	6878      	ldr	r0, [r7, #4]
 810a478:	4798      	blx	r3
    hspi->RxISR(hspi);
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a47e:	6878      	ldr	r0, [r7, #4]
 810a480:	4798      	blx	r3
    handled = 1UL;
 810a482:	2301      	movs	r3, #1
 810a484:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a486:	69bb      	ldr	r3, [r7, #24]
 810a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a48c:	2b00      	cmp	r3, #0
 810a48e:	d10f      	bne.n	810a4b0 <HAL_SPI_IRQHandler+0x98>
 810a490:	69bb      	ldr	r3, [r7, #24]
 810a492:	f003 0301 	and.w	r3, r3, #1
 810a496:	2b00      	cmp	r3, #0
 810a498:	d00a      	beq.n	810a4b0 <HAL_SPI_IRQHandler+0x98>
 810a49a:	69bb      	ldr	r3, [r7, #24]
 810a49c:	f003 0304 	and.w	r3, r3, #4
 810a4a0:	2b00      	cmp	r3, #0
 810a4a2:	d105      	bne.n	810a4b0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810a4a4:	687b      	ldr	r3, [r7, #4]
 810a4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a4a8:	6878      	ldr	r0, [r7, #4]
 810a4aa:	4798      	blx	r3
    handled = 1UL;
 810a4ac:	2301      	movs	r3, #1
 810a4ae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a4b0:	69bb      	ldr	r3, [r7, #24]
 810a4b2:	f003 0320 	and.w	r3, r3, #32
 810a4b6:	2b00      	cmp	r3, #0
 810a4b8:	d10f      	bne.n	810a4da <HAL_SPI_IRQHandler+0xc2>
 810a4ba:	69bb      	ldr	r3, [r7, #24]
 810a4bc:	f003 0302 	and.w	r3, r3, #2
 810a4c0:	2b00      	cmp	r3, #0
 810a4c2:	d00a      	beq.n	810a4da <HAL_SPI_IRQHandler+0xc2>
 810a4c4:	69bb      	ldr	r3, [r7, #24]
 810a4c6:	f003 0304 	and.w	r3, r3, #4
 810a4ca:	2b00      	cmp	r3, #0
 810a4cc:	d105      	bne.n	810a4da <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a4d2:	6878      	ldr	r0, [r7, #4]
 810a4d4:	4798      	blx	r3
    handled = 1UL;
 810a4d6:	2301      	movs	r3, #1
 810a4d8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a4dc:	2b00      	cmp	r3, #0
 810a4de:	f040 8171 	bne.w	810a7c4 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810a4e2:	69bb      	ldr	r3, [r7, #24]
 810a4e4:	f003 0308 	and.w	r3, r3, #8
 810a4e8:	2b00      	cmp	r3, #0
 810a4ea:	f000 80a0 	beq.w	810a62e <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a4ee:	687b      	ldr	r3, [r7, #4]
 810a4f0:	681b      	ldr	r3, [r3, #0]
 810a4f2:	699a      	ldr	r2, [r3, #24]
 810a4f4:	687b      	ldr	r3, [r7, #4]
 810a4f6:	681b      	ldr	r3, [r3, #0]
 810a4f8:	f042 0208 	orr.w	r2, r2, #8
 810a4fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a4fe:	687b      	ldr	r3, [r7, #4]
 810a500:	681b      	ldr	r3, [r3, #0]
 810a502:	699a      	ldr	r2, [r3, #24]
 810a504:	687b      	ldr	r3, [r7, #4]
 810a506:	681b      	ldr	r3, [r3, #0]
 810a508:	f042 0210 	orr.w	r2, r2, #16
 810a50c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a50e:	687b      	ldr	r3, [r7, #4]
 810a510:	681b      	ldr	r3, [r3, #0]
 810a512:	699a      	ldr	r2, [r3, #24]
 810a514:	687b      	ldr	r3, [r7, #4]
 810a516:	681b      	ldr	r3, [r3, #0]
 810a518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a51c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810a51e:	687b      	ldr	r3, [r7, #4]
 810a520:	681b      	ldr	r3, [r3, #0]
 810a522:	691a      	ldr	r2, [r3, #16]
 810a524:	687b      	ldr	r3, [r7, #4]
 810a526:	681b      	ldr	r3, [r3, #0]
 810a528:	f022 0208 	bic.w	r2, r2, #8
 810a52c:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810a52e:	697b      	ldr	r3, [r7, #20]
 810a530:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a534:	2b00      	cmp	r3, #0
 810a536:	d00f      	beq.n	810a558 <HAL_SPI_IRQHandler+0x140>
 810a538:	7cfb      	ldrb	r3, [r7, #19]
 810a53a:	2b04      	cmp	r3, #4
 810a53c:	d004      	beq.n	810a548 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810a53e:	687b      	ldr	r3, [r7, #4]
 810a540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a542:	69db      	ldr	r3, [r3, #28]
 810a544:	2b00      	cmp	r3, #0
 810a546:	d007      	beq.n	810a558 <HAL_SPI_IRQHandler+0x140>
 810a548:	7cfb      	ldrb	r3, [r7, #19]
 810a54a:	2b03      	cmp	r3, #3
 810a54c:	d059      	beq.n	810a602 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810a54e:	687b      	ldr	r3, [r7, #4]
 810a550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a552:	69db      	ldr	r3, [r3, #28]
 810a554:	2b00      	cmp	r3, #0
 810a556:	d154      	bne.n	810a602 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	681b      	ldr	r3, [r3, #0]
 810a55c:	689b      	ldr	r3, [r3, #8]
 810a55e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a562:	2b00      	cmp	r3, #0
 810a564:	d13d      	bne.n	810a5e2 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810a566:	e036      	b.n	810a5d6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	68db      	ldr	r3, [r3, #12]
 810a56c:	2b0f      	cmp	r3, #15
 810a56e:	d90b      	bls.n	810a588 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810a570:	687b      	ldr	r3, [r7, #4]
 810a572:	681a      	ldr	r2, [r3, #0]
 810a574:	687b      	ldr	r3, [r7, #4]
 810a576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810a57a:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a580:	1d1a      	adds	r2, r3, #4
 810a582:	687b      	ldr	r3, [r7, #4]
 810a584:	665a      	str	r2, [r3, #100]	; 0x64
 810a586:	e01d      	b.n	810a5c4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810a588:	687b      	ldr	r3, [r7, #4]
 810a58a:	68db      	ldr	r3, [r3, #12]
 810a58c:	2b07      	cmp	r3, #7
 810a58e:	d90b      	bls.n	810a5a8 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810a590:	687b      	ldr	r3, [r7, #4]
 810a592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a594:	68fa      	ldr	r2, [r7, #12]
 810a596:	8812      	ldrh	r2, [r2, #0]
 810a598:	b292      	uxth	r2, r2
 810a59a:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810a59c:	687b      	ldr	r3, [r7, #4]
 810a59e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5a0:	1c9a      	adds	r2, r3, #2
 810a5a2:	687b      	ldr	r3, [r7, #4]
 810a5a4:	665a      	str	r2, [r3, #100]	; 0x64
 810a5a6:	e00d      	b.n	810a5c4 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810a5b0:	687b      	ldr	r3, [r7, #4]
 810a5b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5b4:	7812      	ldrb	r2, [r2, #0]
 810a5b6:	b2d2      	uxtb	r2, r2
 810a5b8:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810a5ba:	687b      	ldr	r3, [r7, #4]
 810a5bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5be:	1c5a      	adds	r2, r3, #1
 810a5c0:	687b      	ldr	r3, [r7, #4]
 810a5c2:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810a5c4:	687b      	ldr	r3, [r7, #4]
 810a5c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a5ca:	b29b      	uxth	r3, r3
 810a5cc:	3b01      	subs	r3, #1
 810a5ce:	b29a      	uxth	r2, r3
 810a5d0:	687b      	ldr	r3, [r7, #4]
 810a5d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810a5d6:	687b      	ldr	r3, [r7, #4]
 810a5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a5dc:	b29b      	uxth	r3, r3
 810a5de:	2b00      	cmp	r3, #0
 810a5e0:	d1c2      	bne.n	810a568 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810a5e2:	6878      	ldr	r0, [r7, #4]
 810a5e4:	f000 f9c9 	bl	810a97a <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810a5e8:	687b      	ldr	r3, [r7, #4]
 810a5ea:	2201      	movs	r2, #1
 810a5ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a5f6:	2b00      	cmp	r3, #0
 810a5f8:	d003      	beq.n	810a602 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810a5fa:	6878      	ldr	r0, [r7, #4]
 810a5fc:	f000 f914 	bl	810a828 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810a600:	e0e5      	b.n	810a7ce <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810a602:	7cfb      	ldrb	r3, [r7, #19]
 810a604:	2b05      	cmp	r3, #5
 810a606:	d103      	bne.n	810a610 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810a608:	6878      	ldr	r0, [r7, #4]
 810a60a:	f7f7 fa4d 	bl	8101aa8 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810a60e:	e0db      	b.n	810a7c8 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810a610:	7cfb      	ldrb	r3, [r7, #19]
 810a612:	2b04      	cmp	r3, #4
 810a614:	d103      	bne.n	810a61e <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810a616:	6878      	ldr	r0, [r7, #4]
 810a618:	f000 f8e8 	bl	810a7ec <HAL_SPI_RxCpltCallback>
    return;
 810a61c:	e0d4      	b.n	810a7c8 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810a61e:	7cfb      	ldrb	r3, [r7, #19]
 810a620:	2b03      	cmp	r3, #3
 810a622:	f040 80d1 	bne.w	810a7c8 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810a626:	6878      	ldr	r0, [r7, #4]
 810a628:	f000 f8d6 	bl	810a7d8 <HAL_SPI_TxCpltCallback>
    return;
 810a62c:	e0cc      	b.n	810a7c8 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810a62e:	69fb      	ldr	r3, [r7, #28]
 810a630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a634:	2b00      	cmp	r3, #0
 810a636:	d00d      	beq.n	810a654 <HAL_SPI_IRQHandler+0x23c>
 810a638:	6a3b      	ldr	r3, [r7, #32]
 810a63a:	f003 0308 	and.w	r3, r3, #8
 810a63e:	2b00      	cmp	r3, #0
 810a640:	d008      	beq.n	810a654 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a642:	687b      	ldr	r3, [r7, #4]
 810a644:	681b      	ldr	r3, [r3, #0]
 810a646:	699a      	ldr	r2, [r3, #24]
 810a648:	687b      	ldr	r3, [r7, #4]
 810a64a:	681b      	ldr	r3, [r3, #0]
 810a64c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a650:	619a      	str	r2, [r3, #24]

    return;
 810a652:	e0bc      	b.n	810a7ce <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810a654:	69bb      	ldr	r3, [r7, #24]
 810a656:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810a65a:	2b00      	cmp	r3, #0
 810a65c:	f000 80b7 	beq.w	810a7ce <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810a660:	69bb      	ldr	r3, [r7, #24]
 810a662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a666:	2b00      	cmp	r3, #0
 810a668:	d00f      	beq.n	810a68a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a66a:	687b      	ldr	r3, [r7, #4]
 810a66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a670:	f043 0204 	orr.w	r2, r3, #4
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a67a:	687b      	ldr	r3, [r7, #4]
 810a67c:	681b      	ldr	r3, [r3, #0]
 810a67e:	699a      	ldr	r2, [r3, #24]
 810a680:	687b      	ldr	r3, [r7, #4]
 810a682:	681b      	ldr	r3, [r3, #0]
 810a684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a688:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810a68a:	69bb      	ldr	r3, [r7, #24]
 810a68c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a690:	2b00      	cmp	r3, #0
 810a692:	d00f      	beq.n	810a6b4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a69a:	f043 0201 	orr.w	r2, r3, #1
 810a69e:	687b      	ldr	r3, [r7, #4]
 810a6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a6a4:	687b      	ldr	r3, [r7, #4]
 810a6a6:	681b      	ldr	r3, [r3, #0]
 810a6a8:	699a      	ldr	r2, [r3, #24]
 810a6aa:	687b      	ldr	r3, [r7, #4]
 810a6ac:	681b      	ldr	r3, [r3, #0]
 810a6ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a6b2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810a6b4:	69bb      	ldr	r3, [r7, #24]
 810a6b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a6ba:	2b00      	cmp	r3, #0
 810a6bc:	d00f      	beq.n	810a6de <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a6be:	687b      	ldr	r3, [r7, #4]
 810a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a6c4:	f043 0208 	orr.w	r2, r3, #8
 810a6c8:	687b      	ldr	r3, [r7, #4]
 810a6ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	681b      	ldr	r3, [r3, #0]
 810a6d2:	699a      	ldr	r2, [r3, #24]
 810a6d4:	687b      	ldr	r3, [r7, #4]
 810a6d6:	681b      	ldr	r3, [r3, #0]
 810a6d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a6dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810a6de:	69bb      	ldr	r3, [r7, #24]
 810a6e0:	f003 0320 	and.w	r3, r3, #32
 810a6e4:	2b00      	cmp	r3, #0
 810a6e6:	d00f      	beq.n	810a708 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a6e8:	687b      	ldr	r3, [r7, #4]
 810a6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a6ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a6f2:	687b      	ldr	r3, [r7, #4]
 810a6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a6f8:	687b      	ldr	r3, [r7, #4]
 810a6fa:	681b      	ldr	r3, [r3, #0]
 810a6fc:	699a      	ldr	r2, [r3, #24]
 810a6fe:	687b      	ldr	r3, [r7, #4]
 810a700:	681b      	ldr	r3, [r3, #0]
 810a702:	f042 0220 	orr.w	r2, r2, #32
 810a706:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a70e:	2b00      	cmp	r3, #0
 810a710:	d05c      	beq.n	810a7cc <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810a712:	687b      	ldr	r3, [r7, #4]
 810a714:	681b      	ldr	r3, [r3, #0]
 810a716:	681a      	ldr	r2, [r3, #0]
 810a718:	687b      	ldr	r3, [r7, #4]
 810a71a:	681b      	ldr	r3, [r3, #0]
 810a71c:	f022 0201 	bic.w	r2, r2, #1
 810a720:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810a722:	687b      	ldr	r3, [r7, #4]
 810a724:	681b      	ldr	r3, [r3, #0]
 810a726:	691b      	ldr	r3, [r3, #16]
 810a728:	687a      	ldr	r2, [r7, #4]
 810a72a:	6812      	ldr	r2, [r2, #0]
 810a72c:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810a730:	f023 0303 	bic.w	r3, r3, #3
 810a734:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a736:	697b      	ldr	r3, [r7, #20]
 810a738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a73c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810a740:	d138      	bne.n	810a7b4 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a742:	687b      	ldr	r3, [r7, #4]
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	689a      	ldr	r2, [r3, #8]
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	681b      	ldr	r3, [r3, #0]
 810a74c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a750:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810a752:	687b      	ldr	r3, [r7, #4]
 810a754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a756:	2b00      	cmp	r3, #0
 810a758:	d013      	beq.n	810a782 <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810a75a:	687b      	ldr	r3, [r7, #4]
 810a75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a75e:	4a1d      	ldr	r2, [pc, #116]	; (810a7d4 <HAL_SPI_IRQHandler+0x3bc>)
 810a760:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810a762:	687b      	ldr	r3, [r7, #4]
 810a764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a766:	4618      	mov	r0, r3
 810a768:	f7fa fa78 	bl	8104c5c <HAL_DMA_Abort_IT>
 810a76c:	4603      	mov	r3, r0
 810a76e:	2b00      	cmp	r3, #0
 810a770:	d007      	beq.n	810a782 <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a772:	687b      	ldr	r3, [r7, #4]
 810a774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a77c:	687b      	ldr	r3, [r7, #4]
 810a77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810a782:	687b      	ldr	r3, [r7, #4]
 810a784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a786:	2b00      	cmp	r3, #0
 810a788:	d020      	beq.n	810a7cc <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810a78a:	687b      	ldr	r3, [r7, #4]
 810a78c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a78e:	4a11      	ldr	r2, [pc, #68]	; (810a7d4 <HAL_SPI_IRQHandler+0x3bc>)
 810a790:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810a792:	687b      	ldr	r3, [r7, #4]
 810a794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a796:	4618      	mov	r0, r3
 810a798:	f7fa fa60 	bl	8104c5c <HAL_DMA_Abort_IT>
 810a79c:	4603      	mov	r3, r0
 810a79e:	2b00      	cmp	r3, #0
 810a7a0:	d014      	beq.n	810a7cc <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a7a2:	687b      	ldr	r3, [r7, #4]
 810a7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a7a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a7ac:	687b      	ldr	r3, [r7, #4]
 810a7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810a7b2:	e00b      	b.n	810a7cc <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810a7b4:	687b      	ldr	r3, [r7, #4]
 810a7b6:	2201      	movs	r2, #1
 810a7b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810a7bc:	6878      	ldr	r0, [r7, #4]
 810a7be:	f000 f833 	bl	810a828 <HAL_SPI_ErrorCallback>
    return;
 810a7c2:	e003      	b.n	810a7cc <HAL_SPI_IRQHandler+0x3b4>
    return;
 810a7c4:	bf00      	nop
 810a7c6:	e002      	b.n	810a7ce <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a7c8:	bf00      	nop
 810a7ca:	e000      	b.n	810a7ce <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a7cc:	bf00      	nop
  }
}
 810a7ce:	3728      	adds	r7, #40	; 0x28
 810a7d0:	46bd      	mov	sp, r7
 810a7d2:	bd80      	pop	{r7, pc}
 810a7d4:	0810a947 	.word	0x0810a947

0810a7d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a7d8:	b480      	push	{r7}
 810a7da:	b083      	sub	sp, #12
 810a7dc:	af00      	add	r7, sp, #0
 810a7de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810a7e0:	bf00      	nop
 810a7e2:	370c      	adds	r7, #12
 810a7e4:	46bd      	mov	sp, r7
 810a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7ea:	4770      	bx	lr

0810a7ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a7ec:	b480      	push	{r7}
 810a7ee:	b083      	sub	sp, #12
 810a7f0:	af00      	add	r7, sp, #0
 810a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810a7f4:	bf00      	nop
 810a7f6:	370c      	adds	r7, #12
 810a7f8:	46bd      	mov	sp, r7
 810a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7fe:	4770      	bx	lr

0810a800 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a800:	b480      	push	{r7}
 810a802:	b083      	sub	sp, #12
 810a804:	af00      	add	r7, sp, #0
 810a806:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 810a808:	bf00      	nop
 810a80a:	370c      	adds	r7, #12
 810a80c:	46bd      	mov	sp, r7
 810a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a812:	4770      	bx	lr

0810a814 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a814:	b480      	push	{r7}
 810a816:	b083      	sub	sp, #12
 810a818:	af00      	add	r7, sp, #0
 810a81a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 810a81c:	bf00      	nop
 810a81e:	370c      	adds	r7, #12
 810a820:	46bd      	mov	sp, r7
 810a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a826:	4770      	bx	lr

0810a828 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810a828:	b480      	push	{r7}
 810a82a:	b083      	sub	sp, #12
 810a82c:	af00      	add	r7, sp, #0
 810a82e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810a830:	bf00      	nop
 810a832:	370c      	adds	r7, #12
 810a834:	46bd      	mov	sp, r7
 810a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a83a:	4770      	bx	lr

0810a83c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a83c:	b580      	push	{r7, lr}
 810a83e:	b084      	sub	sp, #16
 810a840:	af00      	add	r7, sp, #0
 810a842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a848:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810a84a:	68fb      	ldr	r3, [r7, #12]
 810a84c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a850:	b2db      	uxtb	r3, r3
 810a852:	2b07      	cmp	r3, #7
 810a854:	d011      	beq.n	810a87a <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 810a856:	68fb      	ldr	r3, [r7, #12]
 810a858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a85a:	69db      	ldr	r3, [r3, #28]
 810a85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a860:	d103      	bne.n	810a86a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 810a862:	68f8      	ldr	r0, [r7, #12]
 810a864:	f7ff ffc2 	bl	810a7ec <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810a868:	e007      	b.n	810a87a <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810a86a:	68fb      	ldr	r3, [r7, #12]
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	691a      	ldr	r2, [r3, #16]
 810a870:	68fb      	ldr	r3, [r7, #12]
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	f042 0208 	orr.w	r2, r2, #8
 810a878:	611a      	str	r2, [r3, #16]
}
 810a87a:	bf00      	nop
 810a87c:	3710      	adds	r7, #16
 810a87e:	46bd      	mov	sp, r7
 810a880:	bd80      	pop	{r7, pc}

0810a882 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a882:	b580      	push	{r7, lr}
 810a884:	b084      	sub	sp, #16
 810a886:	af00      	add	r7, sp, #0
 810a888:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a88a:	687b      	ldr	r3, [r7, #4]
 810a88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a88e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 810a890:	68fb      	ldr	r3, [r7, #12]
 810a892:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a896:	b2db      	uxtb	r3, r3
 810a898:	2b07      	cmp	r3, #7
 810a89a:	d011      	beq.n	810a8c0 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 810a89c:	68fb      	ldr	r3, [r7, #12]
 810a89e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a8a0:	69db      	ldr	r3, [r3, #28]
 810a8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a8a6:	d103      	bne.n	810a8b0 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 810a8a8:	68f8      	ldr	r0, [r7, #12]
 810a8aa:	f7f7 f8fd 	bl	8101aa8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 810a8ae:	e007      	b.n	810a8c0 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 810a8b0:	68fb      	ldr	r3, [r7, #12]
 810a8b2:	681b      	ldr	r3, [r3, #0]
 810a8b4:	691a      	ldr	r2, [r3, #16]
 810a8b6:	68fb      	ldr	r3, [r7, #12]
 810a8b8:	681b      	ldr	r3, [r3, #0]
 810a8ba:	f042 0208 	orr.w	r2, r2, #8
 810a8be:	611a      	str	r2, [r3, #16]
}
 810a8c0:	bf00      	nop
 810a8c2:	3710      	adds	r7, #16
 810a8c4:	46bd      	mov	sp, r7
 810a8c6:	bd80      	pop	{r7, pc}

0810a8c8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a8c8:	b580      	push	{r7, lr}
 810a8ca:	b084      	sub	sp, #16
 810a8cc:	af00      	add	r7, sp, #0
 810a8ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a8d0:	687b      	ldr	r3, [r7, #4]
 810a8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a8d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 810a8d6:	68f8      	ldr	r0, [r7, #12]
 810a8d8:	f7ff ff92 	bl	810a800 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a8dc:	bf00      	nop
 810a8de:	3710      	adds	r7, #16
 810a8e0:	46bd      	mov	sp, r7
 810a8e2:	bd80      	pop	{r7, pc}

0810a8e4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810a8e4:	b580      	push	{r7, lr}
 810a8e6:	b084      	sub	sp, #16
 810a8e8:	af00      	add	r7, sp, #0
 810a8ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a8ec:	687b      	ldr	r3, [r7, #4]
 810a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a8f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 810a8f2:	68f8      	ldr	r0, [r7, #12]
 810a8f4:	f7ff ff8e 	bl	810a814 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a8f8:	bf00      	nop
 810a8fa:	3710      	adds	r7, #16
 810a8fc:	46bd      	mov	sp, r7
 810a8fe:	bd80      	pop	{r7, pc}

0810a900 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 810a900:	b580      	push	{r7, lr}
 810a902:	b084      	sub	sp, #16
 810a904:	af00      	add	r7, sp, #0
 810a906:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a90c:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 810a90e:	6878      	ldr	r0, [r7, #4]
 810a910:	f7fb fb20 	bl	8105f54 <HAL_DMA_GetError>
 810a914:	4603      	mov	r3, r0
 810a916:	2b02      	cmp	r3, #2
 810a918:	d011      	beq.n	810a93e <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 810a91a:	68f8      	ldr	r0, [r7, #12]
 810a91c:	f000 f82d 	bl	810a97a <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 810a920:	68fb      	ldr	r3, [r7, #12]
 810a922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a926:	f043 0210 	orr.w	r2, r3, #16
 810a92a:	68fb      	ldr	r3, [r7, #12]
 810a92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 810a930:	68fb      	ldr	r3, [r7, #12]
 810a932:	2201      	movs	r2, #1
 810a934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 810a938:	68f8      	ldr	r0, [r7, #12]
 810a93a:	f7ff ff75 	bl	810a828 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 810a93e:	bf00      	nop
 810a940:	3710      	adds	r7, #16
 810a942:	46bd      	mov	sp, r7
 810a944:	bd80      	pop	{r7, pc}

0810a946 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a946:	b580      	push	{r7, lr}
 810a948:	b084      	sub	sp, #16
 810a94a:	af00      	add	r7, sp, #0
 810a94c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a94e:	687b      	ldr	r3, [r7, #4]
 810a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a952:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810a954:	68fb      	ldr	r3, [r7, #12]
 810a956:	2200      	movs	r2, #0
 810a958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810a95c:	68fb      	ldr	r3, [r7, #12]
 810a95e:	2200      	movs	r2, #0
 810a960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810a964:	68fb      	ldr	r3, [r7, #12]
 810a966:	2201      	movs	r2, #1
 810a968:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810a96c:	68f8      	ldr	r0, [r7, #12]
 810a96e:	f7ff ff5b 	bl	810a828 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a972:	bf00      	nop
 810a974:	3710      	adds	r7, #16
 810a976:	46bd      	mov	sp, r7
 810a978:	bd80      	pop	{r7, pc}

0810a97a <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810a97a:	b480      	push	{r7}
 810a97c:	b085      	sub	sp, #20
 810a97e:	af00      	add	r7, sp, #0
 810a980:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810a982:	687b      	ldr	r3, [r7, #4]
 810a984:	681b      	ldr	r3, [r3, #0]
 810a986:	695b      	ldr	r3, [r3, #20]
 810a988:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	681b      	ldr	r3, [r3, #0]
 810a98e:	699a      	ldr	r2, [r3, #24]
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	681b      	ldr	r3, [r3, #0]
 810a994:	f042 0208 	orr.w	r2, r2, #8
 810a998:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	681b      	ldr	r3, [r3, #0]
 810a99e:	699a      	ldr	r2, [r3, #24]
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	681b      	ldr	r3, [r3, #0]
 810a9a4:	f042 0210 	orr.w	r2, r2, #16
 810a9a8:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a9aa:	687b      	ldr	r3, [r7, #4]
 810a9ac:	681b      	ldr	r3, [r3, #0]
 810a9ae:	681a      	ldr	r2, [r3, #0]
 810a9b0:	687b      	ldr	r3, [r7, #4]
 810a9b2:	681b      	ldr	r3, [r3, #0]
 810a9b4:	f022 0201 	bic.w	r2, r2, #1
 810a9b8:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810a9ba:	687b      	ldr	r3, [r7, #4]
 810a9bc:	681b      	ldr	r3, [r3, #0]
 810a9be:	691b      	ldr	r3, [r3, #16]
 810a9c0:	687a      	ldr	r2, [r7, #4]
 810a9c2:	6812      	ldr	r2, [r2, #0]
 810a9c4:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810a9c8:	f023 0303 	bic.w	r3, r3, #3
 810a9cc:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a9ce:	687b      	ldr	r3, [r7, #4]
 810a9d0:	681b      	ldr	r3, [r3, #0]
 810a9d2:	689a      	ldr	r2, [r3, #8]
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	681b      	ldr	r3, [r3, #0]
 810a9d8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a9dc:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a9de:	687b      	ldr	r3, [r7, #4]
 810a9e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a9e4:	b2db      	uxtb	r3, r3
 810a9e6:	2b04      	cmp	r3, #4
 810a9e8:	d014      	beq.n	810aa14 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810a9ea:	68fb      	ldr	r3, [r7, #12]
 810a9ec:	f003 0320 	and.w	r3, r3, #32
 810a9f0:	2b00      	cmp	r3, #0
 810a9f2:	d00f      	beq.n	810aa14 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a9fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a9fe:	687b      	ldr	r3, [r7, #4]
 810aa00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810aa04:	687b      	ldr	r3, [r7, #4]
 810aa06:	681b      	ldr	r3, [r3, #0]
 810aa08:	699a      	ldr	r2, [r3, #24]
 810aa0a:	687b      	ldr	r3, [r7, #4]
 810aa0c:	681b      	ldr	r3, [r3, #0]
 810aa0e:	f042 0220 	orr.w	r2, r2, #32
 810aa12:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810aa1a:	b2db      	uxtb	r3, r3
 810aa1c:	2b03      	cmp	r3, #3
 810aa1e:	d014      	beq.n	810aa4a <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810aa20:	68fb      	ldr	r3, [r7, #12]
 810aa22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aa26:	2b00      	cmp	r3, #0
 810aa28:	d00f      	beq.n	810aa4a <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810aa2a:	687b      	ldr	r3, [r7, #4]
 810aa2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aa30:	f043 0204 	orr.w	r2, r3, #4
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810aa3a:	687b      	ldr	r3, [r7, #4]
 810aa3c:	681b      	ldr	r3, [r3, #0]
 810aa3e:	699a      	ldr	r2, [r3, #24]
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	681b      	ldr	r3, [r3, #0]
 810aa44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810aa48:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810aa4a:	68fb      	ldr	r3, [r7, #12]
 810aa4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810aa50:	2b00      	cmp	r3, #0
 810aa52:	d00f      	beq.n	810aa74 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aa5a:	f043 0201 	orr.w	r2, r3, #1
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	699a      	ldr	r2, [r3, #24]
 810aa6a:	687b      	ldr	r3, [r7, #4]
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810aa72:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810aa74:	68fb      	ldr	r3, [r7, #12]
 810aa76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810aa7a:	2b00      	cmp	r3, #0
 810aa7c:	d00f      	beq.n	810aa9e <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810aa7e:	687b      	ldr	r3, [r7, #4]
 810aa80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aa84:	f043 0208 	orr.w	r2, r3, #8
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810aa8e:	687b      	ldr	r3, [r7, #4]
 810aa90:	681b      	ldr	r3, [r3, #0]
 810aa92:	699a      	ldr	r2, [r3, #24]
 810aa94:	687b      	ldr	r3, [r7, #4]
 810aa96:	681b      	ldr	r3, [r3, #0]
 810aa98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810aa9c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810aa9e:	687b      	ldr	r3, [r7, #4]
 810aaa0:	2200      	movs	r2, #0
 810aaa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	2200      	movs	r2, #0
 810aaaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810aaae:	bf00      	nop
 810aab0:	3714      	adds	r7, #20
 810aab2:	46bd      	mov	sp, r7
 810aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aab8:	4770      	bx	lr

0810aaba <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810aaba:	b480      	push	{r7}
 810aabc:	b085      	sub	sp, #20
 810aabe:	af00      	add	r7, sp, #0
 810aac0:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810aac6:	095b      	lsrs	r3, r3, #5
 810aac8:	3301      	adds	r3, #1
 810aaca:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	68db      	ldr	r3, [r3, #12]
 810aad0:	3301      	adds	r3, #1
 810aad2:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810aad4:	68bb      	ldr	r3, [r7, #8]
 810aad6:	3307      	adds	r3, #7
 810aad8:	08db      	lsrs	r3, r3, #3
 810aada:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810aadc:	68bb      	ldr	r3, [r7, #8]
 810aade:	68fa      	ldr	r2, [r7, #12]
 810aae0:	fb02 f303 	mul.w	r3, r2, r3
}
 810aae4:	4618      	mov	r0, r3
 810aae6:	3714      	adds	r7, #20
 810aae8:	46bd      	mov	sp, r7
 810aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aaee:	4770      	bx	lr

0810aaf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810aaf0:	b580      	push	{r7, lr}
 810aaf2:	b082      	sub	sp, #8
 810aaf4:	af00      	add	r7, sp, #0
 810aaf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810aaf8:	687b      	ldr	r3, [r7, #4]
 810aafa:	2b00      	cmp	r3, #0
 810aafc:	d101      	bne.n	810ab02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810aafe:	2301      	movs	r3, #1
 810ab00:	e042      	b.n	810ab88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810ab02:	687b      	ldr	r3, [r7, #4]
 810ab04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ab08:	2b00      	cmp	r3, #0
 810ab0a:	d106      	bne.n	810ab1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810ab0c:	687b      	ldr	r3, [r7, #4]
 810ab0e:	2200      	movs	r2, #0
 810ab10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810ab14:	6878      	ldr	r0, [r7, #4]
 810ab16:	f7f8 fcc7 	bl	81034a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810ab1a:	687b      	ldr	r3, [r7, #4]
 810ab1c:	2224      	movs	r2, #36	; 0x24
 810ab1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810ab22:	687b      	ldr	r3, [r7, #4]
 810ab24:	681b      	ldr	r3, [r3, #0]
 810ab26:	681a      	ldr	r2, [r3, #0]
 810ab28:	687b      	ldr	r3, [r7, #4]
 810ab2a:	681b      	ldr	r3, [r3, #0]
 810ab2c:	f022 0201 	bic.w	r2, r2, #1
 810ab30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810ab32:	6878      	ldr	r0, [r7, #4]
 810ab34:	f000 fbd6 	bl	810b2e4 <UART_SetConfig>
 810ab38:	4603      	mov	r3, r0
 810ab3a:	2b01      	cmp	r3, #1
 810ab3c:	d101      	bne.n	810ab42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810ab3e:	2301      	movs	r3, #1
 810ab40:	e022      	b.n	810ab88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810ab42:	687b      	ldr	r3, [r7, #4]
 810ab44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ab46:	2b00      	cmp	r3, #0
 810ab48:	d002      	beq.n	810ab50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810ab4a:	6878      	ldr	r0, [r7, #4]
 810ab4c:	f001 f92a 	bl	810bda4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810ab50:	687b      	ldr	r3, [r7, #4]
 810ab52:	681b      	ldr	r3, [r3, #0]
 810ab54:	685a      	ldr	r2, [r3, #4]
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	681b      	ldr	r3, [r3, #0]
 810ab5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810ab5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810ab60:	687b      	ldr	r3, [r7, #4]
 810ab62:	681b      	ldr	r3, [r3, #0]
 810ab64:	689a      	ldr	r2, [r3, #8]
 810ab66:	687b      	ldr	r3, [r7, #4]
 810ab68:	681b      	ldr	r3, [r3, #0]
 810ab6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810ab6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810ab70:	687b      	ldr	r3, [r7, #4]
 810ab72:	681b      	ldr	r3, [r3, #0]
 810ab74:	681a      	ldr	r2, [r3, #0]
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	681b      	ldr	r3, [r3, #0]
 810ab7a:	f042 0201 	orr.w	r2, r2, #1
 810ab7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810ab80:	6878      	ldr	r0, [r7, #4]
 810ab82:	f001 f9b1 	bl	810bee8 <UART_CheckIdleState>
 810ab86:	4603      	mov	r3, r0
}
 810ab88:	4618      	mov	r0, r3
 810ab8a:	3708      	adds	r7, #8
 810ab8c:	46bd      	mov	sp, r7
 810ab8e:	bd80      	pop	{r7, pc}

0810ab90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810ab90:	b580      	push	{r7, lr}
 810ab92:	b084      	sub	sp, #16
 810ab94:	af00      	add	r7, sp, #0
 810ab96:	60f8      	str	r0, [r7, #12]
 810ab98:	60b9      	str	r1, [r7, #8]
 810ab9a:	4613      	mov	r3, r2
 810ab9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810ab9e:	68fb      	ldr	r3, [r7, #12]
 810aba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aba4:	2b20      	cmp	r3, #32
 810aba6:	d168      	bne.n	810ac7a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810aba8:	68bb      	ldr	r3, [r7, #8]
 810abaa:	2b00      	cmp	r3, #0
 810abac:	d002      	beq.n	810abb4 <HAL_UART_Transmit_DMA+0x24>
 810abae:	88fb      	ldrh	r3, [r7, #6]
 810abb0:	2b00      	cmp	r3, #0
 810abb2:	d101      	bne.n	810abb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810abb4:	2301      	movs	r3, #1
 810abb6:	e061      	b.n	810ac7c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810abb8:	68fb      	ldr	r3, [r7, #12]
 810abba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810abbe:	2b01      	cmp	r3, #1
 810abc0:	d101      	bne.n	810abc6 <HAL_UART_Transmit_DMA+0x36>
 810abc2:	2302      	movs	r3, #2
 810abc4:	e05a      	b.n	810ac7c <HAL_UART_Transmit_DMA+0xec>
 810abc6:	68fb      	ldr	r3, [r7, #12]
 810abc8:	2201      	movs	r2, #1
 810abca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810abce:	68fb      	ldr	r3, [r7, #12]
 810abd0:	68ba      	ldr	r2, [r7, #8]
 810abd2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810abd4:	68fb      	ldr	r3, [r7, #12]
 810abd6:	88fa      	ldrh	r2, [r7, #6]
 810abd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810abdc:	68fb      	ldr	r3, [r7, #12]
 810abde:	88fa      	ldrh	r2, [r7, #6]
 810abe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810abe4:	68fb      	ldr	r3, [r7, #12]
 810abe6:	2200      	movs	r2, #0
 810abe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810abec:	68fb      	ldr	r3, [r7, #12]
 810abee:	2221      	movs	r2, #33	; 0x21
 810abf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810abf4:	68fb      	ldr	r3, [r7, #12]
 810abf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810abf8:	2b00      	cmp	r3, #0
 810abfa:	d02c      	beq.n	810ac56 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810abfc:	68fb      	ldr	r3, [r7, #12]
 810abfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ac00:	4a20      	ldr	r2, [pc, #128]	; (810ac84 <HAL_UART_Transmit_DMA+0xf4>)
 810ac02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810ac04:	68fb      	ldr	r3, [r7, #12]
 810ac06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ac08:	4a1f      	ldr	r2, [pc, #124]	; (810ac88 <HAL_UART_Transmit_DMA+0xf8>)
 810ac0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810ac0c:	68fb      	ldr	r3, [r7, #12]
 810ac0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ac10:	4a1e      	ldr	r2, [pc, #120]	; (810ac8c <HAL_UART_Transmit_DMA+0xfc>)
 810ac12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810ac14:	68fb      	ldr	r3, [r7, #12]
 810ac16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ac18:	2200      	movs	r2, #0
 810ac1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810ac1c:	68fb      	ldr	r3, [r7, #12]
 810ac1e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810ac20:	68fb      	ldr	r3, [r7, #12]
 810ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810ac24:	4619      	mov	r1, r3
 810ac26:	68fb      	ldr	r3, [r7, #12]
 810ac28:	681b      	ldr	r3, [r3, #0]
 810ac2a:	3328      	adds	r3, #40	; 0x28
 810ac2c:	461a      	mov	r2, r3
 810ac2e:	88fb      	ldrh	r3, [r7, #6]
 810ac30:	f7f9 fa8c 	bl	810414c <HAL_DMA_Start_IT>
 810ac34:	4603      	mov	r3, r0
 810ac36:	2b00      	cmp	r3, #0
 810ac38:	d00d      	beq.n	810ac56 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810ac3a:	68fb      	ldr	r3, [r7, #12]
 810ac3c:	2210      	movs	r2, #16
 810ac3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810ac42:	68fb      	ldr	r3, [r7, #12]
 810ac44:	2200      	movs	r2, #0
 810ac46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810ac4a:	68fb      	ldr	r3, [r7, #12]
 810ac4c:	2220      	movs	r2, #32
 810ac4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810ac52:	2301      	movs	r3, #1
 810ac54:	e012      	b.n	810ac7c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810ac56:	68fb      	ldr	r3, [r7, #12]
 810ac58:	681b      	ldr	r3, [r3, #0]
 810ac5a:	2240      	movs	r2, #64	; 0x40
 810ac5c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810ac5e:	68fb      	ldr	r3, [r7, #12]
 810ac60:	2200      	movs	r2, #0
 810ac62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810ac66:	68fb      	ldr	r3, [r7, #12]
 810ac68:	681b      	ldr	r3, [r3, #0]
 810ac6a:	689a      	ldr	r2, [r3, #8]
 810ac6c:	68fb      	ldr	r3, [r7, #12]
 810ac6e:	681b      	ldr	r3, [r3, #0]
 810ac70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810ac74:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810ac76:	2300      	movs	r3, #0
 810ac78:	e000      	b.n	810ac7c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810ac7a:	2302      	movs	r3, #2
  }
}
 810ac7c:	4618      	mov	r0, r3
 810ac7e:	3710      	adds	r7, #16
 810ac80:	46bd      	mov	sp, r7
 810ac82:	bd80      	pop	{r7, pc}
 810ac84:	0810c1fd 	.word	0x0810c1fd
 810ac88:	0810c24d 	.word	0x0810c24d
 810ac8c:	0810c337 	.word	0x0810c337

0810ac90 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810ac90:	b580      	push	{r7, lr}
 810ac92:	b084      	sub	sp, #16
 810ac94:	af00      	add	r7, sp, #0
 810ac96:	60f8      	str	r0, [r7, #12]
 810ac98:	60b9      	str	r1, [r7, #8]
 810ac9a:	4613      	mov	r3, r2
 810ac9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810ac9e:	68fb      	ldr	r3, [r7, #12]
 810aca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810aca4:	2b20      	cmp	r3, #32
 810aca6:	d131      	bne.n	810ad0c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810aca8:	68bb      	ldr	r3, [r7, #8]
 810acaa:	2b00      	cmp	r3, #0
 810acac:	d002      	beq.n	810acb4 <HAL_UART_Receive_DMA+0x24>
 810acae:	88fb      	ldrh	r3, [r7, #6]
 810acb0:	2b00      	cmp	r3, #0
 810acb2:	d101      	bne.n	810acb8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810acb4:	2301      	movs	r3, #1
 810acb6:	e02a      	b.n	810ad0e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810acb8:	68fb      	ldr	r3, [r7, #12]
 810acba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810acbe:	2b01      	cmp	r3, #1
 810acc0:	d101      	bne.n	810acc6 <HAL_UART_Receive_DMA+0x36>
 810acc2:	2302      	movs	r3, #2
 810acc4:	e023      	b.n	810ad0e <HAL_UART_Receive_DMA+0x7e>
 810acc6:	68fb      	ldr	r3, [r7, #12]
 810acc8:	2201      	movs	r2, #1
 810acca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810acce:	68fb      	ldr	r3, [r7, #12]
 810acd0:	2200      	movs	r2, #0
 810acd2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810acd4:	68fb      	ldr	r3, [r7, #12]
 810acd6:	681b      	ldr	r3, [r3, #0]
 810acd8:	4a0f      	ldr	r2, [pc, #60]	; (810ad18 <HAL_UART_Receive_DMA+0x88>)
 810acda:	4293      	cmp	r3, r2
 810acdc:	d00e      	beq.n	810acfc <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810acde:	68fb      	ldr	r3, [r7, #12]
 810ace0:	681b      	ldr	r3, [r3, #0]
 810ace2:	685b      	ldr	r3, [r3, #4]
 810ace4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810ace8:	2b00      	cmp	r3, #0
 810acea:	d007      	beq.n	810acfc <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810acec:	68fb      	ldr	r3, [r7, #12]
 810acee:	681b      	ldr	r3, [r3, #0]
 810acf0:	681a      	ldr	r2, [r3, #0]
 810acf2:	68fb      	ldr	r3, [r7, #12]
 810acf4:	681b      	ldr	r3, [r3, #0]
 810acf6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810acfa:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810acfc:	88fb      	ldrh	r3, [r7, #6]
 810acfe:	461a      	mov	r2, r3
 810ad00:	68b9      	ldr	r1, [r7, #8]
 810ad02:	68f8      	ldr	r0, [r7, #12]
 810ad04:	f001 f9bc 	bl	810c080 <UART_Start_Receive_DMA>
 810ad08:	4603      	mov	r3, r0
 810ad0a:	e000      	b.n	810ad0e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810ad0c:	2302      	movs	r3, #2
  }
}
 810ad0e:	4618      	mov	r0, r3
 810ad10:	3710      	adds	r7, #16
 810ad12:	46bd      	mov	sp, r7
 810ad14:	bd80      	pop	{r7, pc}
 810ad16:	bf00      	nop
 810ad18:	58000c00 	.word	0x58000c00

0810ad1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810ad1c:	b580      	push	{r7, lr}
 810ad1e:	b088      	sub	sp, #32
 810ad20:	af00      	add	r7, sp, #0
 810ad22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	681b      	ldr	r3, [r3, #0]
 810ad28:	69db      	ldr	r3, [r3, #28]
 810ad2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810ad2c:	687b      	ldr	r3, [r7, #4]
 810ad2e:	681b      	ldr	r3, [r3, #0]
 810ad30:	681b      	ldr	r3, [r3, #0]
 810ad32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	681b      	ldr	r3, [r3, #0]
 810ad38:	689b      	ldr	r3, [r3, #8]
 810ad3a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810ad3c:	69fa      	ldr	r2, [r7, #28]
 810ad3e:	f640 030f 	movw	r3, #2063	; 0x80f
 810ad42:	4013      	ands	r3, r2
 810ad44:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810ad46:	693b      	ldr	r3, [r7, #16]
 810ad48:	2b00      	cmp	r3, #0
 810ad4a:	d118      	bne.n	810ad7e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810ad4c:	69fb      	ldr	r3, [r7, #28]
 810ad4e:	f003 0320 	and.w	r3, r3, #32
 810ad52:	2b00      	cmp	r3, #0
 810ad54:	d013      	beq.n	810ad7e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810ad56:	69bb      	ldr	r3, [r7, #24]
 810ad58:	f003 0320 	and.w	r3, r3, #32
 810ad5c:	2b00      	cmp	r3, #0
 810ad5e:	d104      	bne.n	810ad6a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810ad60:	697b      	ldr	r3, [r7, #20]
 810ad62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810ad66:	2b00      	cmp	r3, #0
 810ad68:	d009      	beq.n	810ad7e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810ad6a:	687b      	ldr	r3, [r7, #4]
 810ad6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810ad6e:	2b00      	cmp	r3, #0
 810ad70:	f000 8282 	beq.w	810b278 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810ad74:	687b      	ldr	r3, [r7, #4]
 810ad76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810ad78:	6878      	ldr	r0, [r7, #4]
 810ad7a:	4798      	blx	r3
      }
      return;
 810ad7c:	e27c      	b.n	810b278 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810ad7e:	693b      	ldr	r3, [r7, #16]
 810ad80:	2b00      	cmp	r3, #0
 810ad82:	f000 80ef 	beq.w	810af64 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810ad86:	697a      	ldr	r2, [r7, #20]
 810ad88:	4b73      	ldr	r3, [pc, #460]	; (810af58 <HAL_UART_IRQHandler+0x23c>)
 810ad8a:	4013      	ands	r3, r2
 810ad8c:	2b00      	cmp	r3, #0
 810ad8e:	d105      	bne.n	810ad9c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810ad90:	69ba      	ldr	r2, [r7, #24]
 810ad92:	4b72      	ldr	r3, [pc, #456]	; (810af5c <HAL_UART_IRQHandler+0x240>)
 810ad94:	4013      	ands	r3, r2
 810ad96:	2b00      	cmp	r3, #0
 810ad98:	f000 80e4 	beq.w	810af64 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810ad9c:	69fb      	ldr	r3, [r7, #28]
 810ad9e:	f003 0301 	and.w	r3, r3, #1
 810ada2:	2b00      	cmp	r3, #0
 810ada4:	d010      	beq.n	810adc8 <HAL_UART_IRQHandler+0xac>
 810ada6:	69bb      	ldr	r3, [r7, #24]
 810ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810adac:	2b00      	cmp	r3, #0
 810adae:	d00b      	beq.n	810adc8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	2201      	movs	r2, #1
 810adb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810adb8:	687b      	ldr	r3, [r7, #4]
 810adba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810adbe:	f043 0201 	orr.w	r2, r3, #1
 810adc2:	687b      	ldr	r3, [r7, #4]
 810adc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810adc8:	69fb      	ldr	r3, [r7, #28]
 810adca:	f003 0302 	and.w	r3, r3, #2
 810adce:	2b00      	cmp	r3, #0
 810add0:	d010      	beq.n	810adf4 <HAL_UART_IRQHandler+0xd8>
 810add2:	697b      	ldr	r3, [r7, #20]
 810add4:	f003 0301 	and.w	r3, r3, #1
 810add8:	2b00      	cmp	r3, #0
 810adda:	d00b      	beq.n	810adf4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810addc:	687b      	ldr	r3, [r7, #4]
 810adde:	681b      	ldr	r3, [r3, #0]
 810ade0:	2202      	movs	r2, #2
 810ade2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810ade4:	687b      	ldr	r3, [r7, #4]
 810ade6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810adea:	f043 0204 	orr.w	r2, r3, #4
 810adee:	687b      	ldr	r3, [r7, #4]
 810adf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810adf4:	69fb      	ldr	r3, [r7, #28]
 810adf6:	f003 0304 	and.w	r3, r3, #4
 810adfa:	2b00      	cmp	r3, #0
 810adfc:	d010      	beq.n	810ae20 <HAL_UART_IRQHandler+0x104>
 810adfe:	697b      	ldr	r3, [r7, #20]
 810ae00:	f003 0301 	and.w	r3, r3, #1
 810ae04:	2b00      	cmp	r3, #0
 810ae06:	d00b      	beq.n	810ae20 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	681b      	ldr	r3, [r3, #0]
 810ae0c:	2204      	movs	r2, #4
 810ae0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ae16:	f043 0202 	orr.w	r2, r3, #2
 810ae1a:	687b      	ldr	r3, [r7, #4]
 810ae1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810ae20:	69fb      	ldr	r3, [r7, #28]
 810ae22:	f003 0308 	and.w	r3, r3, #8
 810ae26:	2b00      	cmp	r3, #0
 810ae28:	d015      	beq.n	810ae56 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810ae2a:	69bb      	ldr	r3, [r7, #24]
 810ae2c:	f003 0320 	and.w	r3, r3, #32
 810ae30:	2b00      	cmp	r3, #0
 810ae32:	d104      	bne.n	810ae3e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810ae34:	697a      	ldr	r2, [r7, #20]
 810ae36:	4b48      	ldr	r3, [pc, #288]	; (810af58 <HAL_UART_IRQHandler+0x23c>)
 810ae38:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810ae3a:	2b00      	cmp	r3, #0
 810ae3c:	d00b      	beq.n	810ae56 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	681b      	ldr	r3, [r3, #0]
 810ae42:	2208      	movs	r2, #8
 810ae44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810ae46:	687b      	ldr	r3, [r7, #4]
 810ae48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ae4c:	f043 0208 	orr.w	r2, r3, #8
 810ae50:	687b      	ldr	r3, [r7, #4]
 810ae52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810ae56:	69fb      	ldr	r3, [r7, #28]
 810ae58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810ae5c:	2b00      	cmp	r3, #0
 810ae5e:	d011      	beq.n	810ae84 <HAL_UART_IRQHandler+0x168>
 810ae60:	69bb      	ldr	r3, [r7, #24]
 810ae62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810ae66:	2b00      	cmp	r3, #0
 810ae68:	d00c      	beq.n	810ae84 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810ae6a:	687b      	ldr	r3, [r7, #4]
 810ae6c:	681b      	ldr	r3, [r3, #0]
 810ae6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810ae72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810ae74:	687b      	ldr	r3, [r7, #4]
 810ae76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ae7a:	f043 0220 	orr.w	r2, r3, #32
 810ae7e:	687b      	ldr	r3, [r7, #4]
 810ae80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810ae84:	687b      	ldr	r3, [r7, #4]
 810ae86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810ae8a:	2b00      	cmp	r3, #0
 810ae8c:	f000 81f6 	beq.w	810b27c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810ae90:	69fb      	ldr	r3, [r7, #28]
 810ae92:	f003 0320 	and.w	r3, r3, #32
 810ae96:	2b00      	cmp	r3, #0
 810ae98:	d011      	beq.n	810aebe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810ae9a:	69bb      	ldr	r3, [r7, #24]
 810ae9c:	f003 0320 	and.w	r3, r3, #32
 810aea0:	2b00      	cmp	r3, #0
 810aea2:	d104      	bne.n	810aeae <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810aea4:	697b      	ldr	r3, [r7, #20]
 810aea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810aeaa:	2b00      	cmp	r3, #0
 810aeac:	d007      	beq.n	810aebe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810aeae:	687b      	ldr	r3, [r7, #4]
 810aeb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aeb2:	2b00      	cmp	r3, #0
 810aeb4:	d003      	beq.n	810aebe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810aeb6:	687b      	ldr	r3, [r7, #4]
 810aeb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aeba:	6878      	ldr	r0, [r7, #4]
 810aebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810aebe:	687b      	ldr	r3, [r7, #4]
 810aec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810aec4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810aec6:	687b      	ldr	r3, [r7, #4]
 810aec8:	681b      	ldr	r3, [r3, #0]
 810aeca:	689b      	ldr	r3, [r3, #8]
 810aecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aed0:	2b40      	cmp	r3, #64	; 0x40
 810aed2:	d004      	beq.n	810aede <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810aed4:	68fb      	ldr	r3, [r7, #12]
 810aed6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810aeda:	2b00      	cmp	r3, #0
 810aedc:	d031      	beq.n	810af42 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810aede:	6878      	ldr	r0, [r7, #4]
 810aee0:	f001 f95a 	bl	810c198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810aee4:	687b      	ldr	r3, [r7, #4]
 810aee6:	681b      	ldr	r3, [r3, #0]
 810aee8:	689b      	ldr	r3, [r3, #8]
 810aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810aeee:	2b40      	cmp	r3, #64	; 0x40
 810aef0:	d123      	bne.n	810af3a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810aef2:	687b      	ldr	r3, [r7, #4]
 810aef4:	681b      	ldr	r3, [r3, #0]
 810aef6:	689a      	ldr	r2, [r3, #8]
 810aef8:	687b      	ldr	r3, [r7, #4]
 810aefa:	681b      	ldr	r3, [r3, #0]
 810aefc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810af00:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810af02:	687b      	ldr	r3, [r7, #4]
 810af04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af06:	2b00      	cmp	r3, #0
 810af08:	d013      	beq.n	810af32 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810af0a:	687b      	ldr	r3, [r7, #4]
 810af0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af0e:	4a14      	ldr	r2, [pc, #80]	; (810af60 <HAL_UART_IRQHandler+0x244>)
 810af10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810af12:	687b      	ldr	r3, [r7, #4]
 810af14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af16:	4618      	mov	r0, r3
 810af18:	f7f9 fea0 	bl	8104c5c <HAL_DMA_Abort_IT>
 810af1c:	4603      	mov	r3, r0
 810af1e:	2b00      	cmp	r3, #0
 810af20:	d017      	beq.n	810af52 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810af22:	687b      	ldr	r3, [r7, #4]
 810af24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810af26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810af28:	687a      	ldr	r2, [r7, #4]
 810af2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810af2c:	4610      	mov	r0, r2
 810af2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810af30:	e00f      	b.n	810af52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810af32:	6878      	ldr	r0, [r7, #4]
 810af34:	f000 f9c0 	bl	810b2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810af38:	e00b      	b.n	810af52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810af3a:	6878      	ldr	r0, [r7, #4]
 810af3c:	f000 f9bc 	bl	810b2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810af40:	e007      	b.n	810af52 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810af42:	6878      	ldr	r0, [r7, #4]
 810af44:	f000 f9b8 	bl	810b2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810af48:	687b      	ldr	r3, [r7, #4]
 810af4a:	2200      	movs	r2, #0
 810af4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810af50:	e194      	b.n	810b27c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810af52:	bf00      	nop
    return;
 810af54:	e192      	b.n	810b27c <HAL_UART_IRQHandler+0x560>
 810af56:	bf00      	nop
 810af58:	10000001 	.word	0x10000001
 810af5c:	04000120 	.word	0x04000120
 810af60:	0810c3b7 	.word	0x0810c3b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810af64:	687b      	ldr	r3, [r7, #4]
 810af66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810af68:	2b01      	cmp	r3, #1
 810af6a:	f040 8111 	bne.w	810b190 <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810af6e:	69fb      	ldr	r3, [r7, #28]
 810af70:	f003 0310 	and.w	r3, r3, #16
 810af74:	2b00      	cmp	r3, #0
 810af76:	f000 810b 	beq.w	810b190 <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810af7a:	69bb      	ldr	r3, [r7, #24]
 810af7c:	f003 0310 	and.w	r3, r3, #16
 810af80:	2b00      	cmp	r3, #0
 810af82:	f000 8105 	beq.w	810b190 <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810af86:	687b      	ldr	r3, [r7, #4]
 810af88:	681b      	ldr	r3, [r3, #0]
 810af8a:	2210      	movs	r2, #16
 810af8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810af8e:	687b      	ldr	r3, [r7, #4]
 810af90:	681b      	ldr	r3, [r3, #0]
 810af92:	689b      	ldr	r3, [r3, #8]
 810af94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810af98:	2b40      	cmp	r3, #64	; 0x40
 810af9a:	f040 80bb 	bne.w	810b114 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810af9e:	687b      	ldr	r3, [r7, #4]
 810afa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afa2:	681b      	ldr	r3, [r3, #0]
 810afa4:	4a97      	ldr	r2, [pc, #604]	; (810b204 <HAL_UART_IRQHandler+0x4e8>)
 810afa6:	4293      	cmp	r3, r2
 810afa8:	d059      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810afaa:	687b      	ldr	r3, [r7, #4]
 810afac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afae:	681b      	ldr	r3, [r3, #0]
 810afb0:	4a95      	ldr	r2, [pc, #596]	; (810b208 <HAL_UART_IRQHandler+0x4ec>)
 810afb2:	4293      	cmp	r3, r2
 810afb4:	d053      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afba:	681b      	ldr	r3, [r3, #0]
 810afbc:	4a93      	ldr	r2, [pc, #588]	; (810b20c <HAL_UART_IRQHandler+0x4f0>)
 810afbe:	4293      	cmp	r3, r2
 810afc0:	d04d      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810afc2:	687b      	ldr	r3, [r7, #4]
 810afc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afc6:	681b      	ldr	r3, [r3, #0]
 810afc8:	4a91      	ldr	r2, [pc, #580]	; (810b210 <HAL_UART_IRQHandler+0x4f4>)
 810afca:	4293      	cmp	r3, r2
 810afcc:	d047      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afd2:	681b      	ldr	r3, [r3, #0]
 810afd4:	4a8f      	ldr	r2, [pc, #572]	; (810b214 <HAL_UART_IRQHandler+0x4f8>)
 810afd6:	4293      	cmp	r3, r2
 810afd8:	d041      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810afda:	687b      	ldr	r3, [r7, #4]
 810afdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afde:	681b      	ldr	r3, [r3, #0]
 810afe0:	4a8d      	ldr	r2, [pc, #564]	; (810b218 <HAL_UART_IRQHandler+0x4fc>)
 810afe2:	4293      	cmp	r3, r2
 810afe4:	d03b      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810afe6:	687b      	ldr	r3, [r7, #4]
 810afe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810afea:	681b      	ldr	r3, [r3, #0]
 810afec:	4a8b      	ldr	r2, [pc, #556]	; (810b21c <HAL_UART_IRQHandler+0x500>)
 810afee:	4293      	cmp	r3, r2
 810aff0:	d035      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810aff2:	687b      	ldr	r3, [r7, #4]
 810aff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810aff6:	681b      	ldr	r3, [r3, #0]
 810aff8:	4a89      	ldr	r2, [pc, #548]	; (810b220 <HAL_UART_IRQHandler+0x504>)
 810affa:	4293      	cmp	r3, r2
 810affc:	d02f      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810affe:	687b      	ldr	r3, [r7, #4]
 810b000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b002:	681b      	ldr	r3, [r3, #0]
 810b004:	4a87      	ldr	r2, [pc, #540]	; (810b224 <HAL_UART_IRQHandler+0x508>)
 810b006:	4293      	cmp	r3, r2
 810b008:	d029      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b00a:	687b      	ldr	r3, [r7, #4]
 810b00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b00e:	681b      	ldr	r3, [r3, #0]
 810b010:	4a85      	ldr	r2, [pc, #532]	; (810b228 <HAL_UART_IRQHandler+0x50c>)
 810b012:	4293      	cmp	r3, r2
 810b014:	d023      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b016:	687b      	ldr	r3, [r7, #4]
 810b018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b01a:	681b      	ldr	r3, [r3, #0]
 810b01c:	4a83      	ldr	r2, [pc, #524]	; (810b22c <HAL_UART_IRQHandler+0x510>)
 810b01e:	4293      	cmp	r3, r2
 810b020:	d01d      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b022:	687b      	ldr	r3, [r7, #4]
 810b024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b026:	681b      	ldr	r3, [r3, #0]
 810b028:	4a81      	ldr	r2, [pc, #516]	; (810b230 <HAL_UART_IRQHandler+0x514>)
 810b02a:	4293      	cmp	r3, r2
 810b02c:	d017      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b02e:	687b      	ldr	r3, [r7, #4]
 810b030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b032:	681b      	ldr	r3, [r3, #0]
 810b034:	4a7f      	ldr	r2, [pc, #508]	; (810b234 <HAL_UART_IRQHandler+0x518>)
 810b036:	4293      	cmp	r3, r2
 810b038:	d011      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b03a:	687b      	ldr	r3, [r7, #4]
 810b03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b03e:	681b      	ldr	r3, [r3, #0]
 810b040:	4a7d      	ldr	r2, [pc, #500]	; (810b238 <HAL_UART_IRQHandler+0x51c>)
 810b042:	4293      	cmp	r3, r2
 810b044:	d00b      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b046:	687b      	ldr	r3, [r7, #4]
 810b048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b04a:	681b      	ldr	r3, [r3, #0]
 810b04c:	4a7b      	ldr	r2, [pc, #492]	; (810b23c <HAL_UART_IRQHandler+0x520>)
 810b04e:	4293      	cmp	r3, r2
 810b050:	d005      	beq.n	810b05e <HAL_UART_IRQHandler+0x342>
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b056:	681b      	ldr	r3, [r3, #0]
 810b058:	4a79      	ldr	r2, [pc, #484]	; (810b240 <HAL_UART_IRQHandler+0x524>)
 810b05a:	4293      	cmp	r3, r2
 810b05c:	d105      	bne.n	810b06a <HAL_UART_IRQHandler+0x34e>
 810b05e:	687b      	ldr	r3, [r7, #4]
 810b060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b062:	681b      	ldr	r3, [r3, #0]
 810b064:	685b      	ldr	r3, [r3, #4]
 810b066:	b29b      	uxth	r3, r3
 810b068:	e004      	b.n	810b074 <HAL_UART_IRQHandler+0x358>
 810b06a:	687b      	ldr	r3, [r7, #4]
 810b06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b06e:	681b      	ldr	r3, [r3, #0]
 810b070:	685b      	ldr	r3, [r3, #4]
 810b072:	b29b      	uxth	r3, r3
 810b074:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810b076:	893b      	ldrh	r3, [r7, #8]
 810b078:	2b00      	cmp	r3, #0
 810b07a:	f000 8101 	beq.w	810b280 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810b07e:	687b      	ldr	r3, [r7, #4]
 810b080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810b084:	893a      	ldrh	r2, [r7, #8]
 810b086:	429a      	cmp	r2, r3
 810b088:	f080 80fa 	bcs.w	810b280 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810b08c:	687b      	ldr	r3, [r7, #4]
 810b08e:	893a      	ldrh	r2, [r7, #8]
 810b090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810b094:	687b      	ldr	r3, [r7, #4]
 810b096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b098:	69db      	ldr	r3, [r3, #28]
 810b09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b09e:	d02b      	beq.n	810b0f8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b0a0:	687b      	ldr	r3, [r7, #4]
 810b0a2:	681b      	ldr	r3, [r3, #0]
 810b0a4:	681a      	ldr	r2, [r3, #0]
 810b0a6:	687b      	ldr	r3, [r7, #4]
 810b0a8:	681b      	ldr	r3, [r3, #0]
 810b0aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810b0ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b0b0:	687b      	ldr	r3, [r7, #4]
 810b0b2:	681b      	ldr	r3, [r3, #0]
 810b0b4:	689a      	ldr	r2, [r3, #8]
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	681b      	ldr	r3, [r3, #0]
 810b0ba:	f022 0201 	bic.w	r2, r2, #1
 810b0be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b0c0:	687b      	ldr	r3, [r7, #4]
 810b0c2:	681b      	ldr	r3, [r3, #0]
 810b0c4:	689a      	ldr	r2, [r3, #8]
 810b0c6:	687b      	ldr	r3, [r7, #4]
 810b0c8:	681b      	ldr	r3, [r3, #0]
 810b0ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810b0ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810b0d0:	687b      	ldr	r3, [r7, #4]
 810b0d2:	2220      	movs	r2, #32
 810b0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b0d8:	687b      	ldr	r3, [r7, #4]
 810b0da:	2200      	movs	r2, #0
 810b0dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b0de:	687b      	ldr	r3, [r7, #4]
 810b0e0:	681b      	ldr	r3, [r3, #0]
 810b0e2:	681a      	ldr	r2, [r3, #0]
 810b0e4:	687b      	ldr	r3, [r7, #4]
 810b0e6:	681b      	ldr	r3, [r3, #0]
 810b0e8:	f022 0210 	bic.w	r2, r2, #16
 810b0ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810b0ee:	687b      	ldr	r3, [r7, #4]
 810b0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810b0f2:	4618      	mov	r0, r3
 810b0f4:	f7f9 fa94 	bl	8104620 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810b0f8:	687b      	ldr	r3, [r7, #4]
 810b0fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b104:	b29b      	uxth	r3, r3
 810b106:	1ad3      	subs	r3, r2, r3
 810b108:	b29b      	uxth	r3, r3
 810b10a:	4619      	mov	r1, r3
 810b10c:	6878      	ldr	r0, [r7, #4]
 810b10e:	f000 f8dd 	bl	810b2cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b112:	e0b5      	b.n	810b280 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810b114:	687b      	ldr	r3, [r7, #4]
 810b116:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810b11a:	687b      	ldr	r3, [r7, #4]
 810b11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b120:	b29b      	uxth	r3, r3
 810b122:	1ad3      	subs	r3, r2, r3
 810b124:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810b126:	687b      	ldr	r3, [r7, #4]
 810b128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810b12c:	b29b      	uxth	r3, r3
 810b12e:	2b00      	cmp	r3, #0
 810b130:	f000 80a8 	beq.w	810b284 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810b134:	897b      	ldrh	r3, [r7, #10]
 810b136:	2b00      	cmp	r3, #0
 810b138:	f000 80a4 	beq.w	810b284 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b13c:	687b      	ldr	r3, [r7, #4]
 810b13e:	681b      	ldr	r3, [r3, #0]
 810b140:	681a      	ldr	r2, [r3, #0]
 810b142:	687b      	ldr	r3, [r7, #4]
 810b144:	681b      	ldr	r3, [r3, #0]
 810b146:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810b14a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b14c:	687b      	ldr	r3, [r7, #4]
 810b14e:	681b      	ldr	r3, [r3, #0]
 810b150:	689b      	ldr	r3, [r3, #8]
 810b152:	687a      	ldr	r2, [r7, #4]
 810b154:	6812      	ldr	r2, [r2, #0]
 810b156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b15a:	f023 0301 	bic.w	r3, r3, #1
 810b15e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b160:	687b      	ldr	r3, [r7, #4]
 810b162:	2220      	movs	r2, #32
 810b164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b168:	687b      	ldr	r3, [r7, #4]
 810b16a:	2200      	movs	r2, #0
 810b16c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b16e:	687b      	ldr	r3, [r7, #4]
 810b170:	2200      	movs	r2, #0
 810b172:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b174:	687b      	ldr	r3, [r7, #4]
 810b176:	681b      	ldr	r3, [r3, #0]
 810b178:	681a      	ldr	r2, [r3, #0]
 810b17a:	687b      	ldr	r3, [r7, #4]
 810b17c:	681b      	ldr	r3, [r3, #0]
 810b17e:	f022 0210 	bic.w	r2, r2, #16
 810b182:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810b184:	897b      	ldrh	r3, [r7, #10]
 810b186:	4619      	mov	r1, r3
 810b188:	6878      	ldr	r0, [r7, #4]
 810b18a:	f000 f89f 	bl	810b2cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810b18e:	e079      	b.n	810b284 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810b190:	69fb      	ldr	r3, [r7, #28]
 810b192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810b196:	2b00      	cmp	r3, #0
 810b198:	d00d      	beq.n	810b1b6 <HAL_UART_IRQHandler+0x49a>
 810b19a:	697b      	ldr	r3, [r7, #20]
 810b19c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810b1a0:	2b00      	cmp	r3, #0
 810b1a2:	d008      	beq.n	810b1b6 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810b1a4:	687b      	ldr	r3, [r7, #4]
 810b1a6:	681b      	ldr	r3, [r3, #0]
 810b1a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810b1ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810b1ae:	6878      	ldr	r0, [r7, #4]
 810b1b0:	f001 f931 	bl	810c416 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b1b4:	e069      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810b1b6:	69fb      	ldr	r3, [r7, #28]
 810b1b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b1bc:	2b00      	cmp	r3, #0
 810b1be:	d012      	beq.n	810b1e6 <HAL_UART_IRQHandler+0x4ca>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810b1c0:	69bb      	ldr	r3, [r7, #24]
 810b1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b1c6:	2b00      	cmp	r3, #0
 810b1c8:	d104      	bne.n	810b1d4 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810b1ca:	697b      	ldr	r3, [r7, #20]
 810b1cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b1d0:	2b00      	cmp	r3, #0
 810b1d2:	d008      	beq.n	810b1e6 <HAL_UART_IRQHandler+0x4ca>
  {
    if (huart->TxISR != NULL)
 810b1d4:	687b      	ldr	r3, [r7, #4]
 810b1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b1d8:	2b00      	cmp	r3, #0
 810b1da:	d055      	beq.n	810b288 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b1e0:	6878      	ldr	r0, [r7, #4]
 810b1e2:	4798      	blx	r3
    }
    return;
 810b1e4:	e050      	b.n	810b288 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810b1e6:	69fb      	ldr	r3, [r7, #28]
 810b1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b1ec:	2b00      	cmp	r3, #0
 810b1ee:	d029      	beq.n	810b244 <HAL_UART_IRQHandler+0x528>
 810b1f0:	69bb      	ldr	r3, [r7, #24]
 810b1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b1f6:	2b00      	cmp	r3, #0
 810b1f8:	d024      	beq.n	810b244 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810b1fa:	6878      	ldr	r0, [r7, #4]
 810b1fc:	f001 f8f1 	bl	810c3e2 <UART_EndTransmit_IT>
    return;
 810b200:	e043      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
 810b202:	bf00      	nop
 810b204:	40020010 	.word	0x40020010
 810b208:	40020028 	.word	0x40020028
 810b20c:	40020040 	.word	0x40020040
 810b210:	40020058 	.word	0x40020058
 810b214:	40020070 	.word	0x40020070
 810b218:	40020088 	.word	0x40020088
 810b21c:	400200a0 	.word	0x400200a0
 810b220:	400200b8 	.word	0x400200b8
 810b224:	40020410 	.word	0x40020410
 810b228:	40020428 	.word	0x40020428
 810b22c:	40020440 	.word	0x40020440
 810b230:	40020458 	.word	0x40020458
 810b234:	40020470 	.word	0x40020470
 810b238:	40020488 	.word	0x40020488
 810b23c:	400204a0 	.word	0x400204a0
 810b240:	400204b8 	.word	0x400204b8
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810b244:	69fb      	ldr	r3, [r7, #28]
 810b246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810b24a:	2b00      	cmp	r3, #0
 810b24c:	d008      	beq.n	810b260 <HAL_UART_IRQHandler+0x544>
 810b24e:	69bb      	ldr	r3, [r7, #24]
 810b250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810b254:	2b00      	cmp	r3, #0
 810b256:	d003      	beq.n	810b260 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810b258:	6878      	ldr	r0, [r7, #4]
 810b25a:	f001 f8f0 	bl	810c43e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b25e:	e014      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810b260:	69fb      	ldr	r3, [r7, #28]
 810b262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810b266:	2b00      	cmp	r3, #0
 810b268:	d00f      	beq.n	810b28a <HAL_UART_IRQHandler+0x56e>
 810b26a:	69bb      	ldr	r3, [r7, #24]
 810b26c:	2b00      	cmp	r3, #0
 810b26e:	da0c      	bge.n	810b28a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810b270:	6878      	ldr	r0, [r7, #4]
 810b272:	f001 f8da 	bl	810c42a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810b276:	e008      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
      return;
 810b278:	bf00      	nop
 810b27a:	e006      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
    return;
 810b27c:	bf00      	nop
 810b27e:	e004      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
      return;
 810b280:	bf00      	nop
 810b282:	e002      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
      return;
 810b284:	bf00      	nop
 810b286:	e000      	b.n	810b28a <HAL_UART_IRQHandler+0x56e>
    return;
 810b288:	bf00      	nop
  }
}
 810b28a:	3720      	adds	r7, #32
 810b28c:	46bd      	mov	sp, r7
 810b28e:	bd80      	pop	{r7, pc}

0810b290 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b290:	b480      	push	{r7}
 810b292:	b083      	sub	sp, #12
 810b294:	af00      	add	r7, sp, #0
 810b296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810b298:	bf00      	nop
 810b29a:	370c      	adds	r7, #12
 810b29c:	46bd      	mov	sp, r7
 810b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2a2:	4770      	bx	lr

0810b2a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b2a4:	b480      	push	{r7}
 810b2a6:	b083      	sub	sp, #12
 810b2a8:	af00      	add	r7, sp, #0
 810b2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810b2ac:	bf00      	nop
 810b2ae:	370c      	adds	r7, #12
 810b2b0:	46bd      	mov	sp, r7
 810b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2b6:	4770      	bx	lr

0810b2b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810b2b8:	b480      	push	{r7}
 810b2ba:	b083      	sub	sp, #12
 810b2bc:	af00      	add	r7, sp, #0
 810b2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810b2c0:	bf00      	nop
 810b2c2:	370c      	adds	r7, #12
 810b2c4:	46bd      	mov	sp, r7
 810b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2ca:	4770      	bx	lr

0810b2cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810b2cc:	b480      	push	{r7}
 810b2ce:	b083      	sub	sp, #12
 810b2d0:	af00      	add	r7, sp, #0
 810b2d2:	6078      	str	r0, [r7, #4]
 810b2d4:	460b      	mov	r3, r1
 810b2d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810b2d8:	bf00      	nop
 810b2da:	370c      	adds	r7, #12
 810b2dc:	46bd      	mov	sp, r7
 810b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2e2:	4770      	bx	lr

0810b2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b2e4:	b5b0      	push	{r4, r5, r7, lr}
 810b2e6:	b08e      	sub	sp, #56	; 0x38
 810b2e8:	af00      	add	r7, sp, #0
 810b2ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b2ec:	2300      	movs	r3, #0
 810b2ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b2f2:	687b      	ldr	r3, [r7, #4]
 810b2f4:	689a      	ldr	r2, [r3, #8]
 810b2f6:	687b      	ldr	r3, [r7, #4]
 810b2f8:	691b      	ldr	r3, [r3, #16]
 810b2fa:	431a      	orrs	r2, r3
 810b2fc:	687b      	ldr	r3, [r7, #4]
 810b2fe:	695b      	ldr	r3, [r3, #20]
 810b300:	431a      	orrs	r2, r3
 810b302:	687b      	ldr	r3, [r7, #4]
 810b304:	69db      	ldr	r3, [r3, #28]
 810b306:	4313      	orrs	r3, r2
 810b308:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b30a:	687b      	ldr	r3, [r7, #4]
 810b30c:	681b      	ldr	r3, [r3, #0]
 810b30e:	681a      	ldr	r2, [r3, #0]
 810b310:	4bc0      	ldr	r3, [pc, #768]	; (810b614 <UART_SetConfig+0x330>)
 810b312:	4013      	ands	r3, r2
 810b314:	687a      	ldr	r2, [r7, #4]
 810b316:	6812      	ldr	r2, [r2, #0]
 810b318:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b31a:	430b      	orrs	r3, r1
 810b31c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b31e:	687b      	ldr	r3, [r7, #4]
 810b320:	681b      	ldr	r3, [r3, #0]
 810b322:	685b      	ldr	r3, [r3, #4]
 810b324:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810b328:	687b      	ldr	r3, [r7, #4]
 810b32a:	68da      	ldr	r2, [r3, #12]
 810b32c:	687b      	ldr	r3, [r7, #4]
 810b32e:	681b      	ldr	r3, [r3, #0]
 810b330:	430a      	orrs	r2, r1
 810b332:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b334:	687b      	ldr	r3, [r7, #4]
 810b336:	699b      	ldr	r3, [r3, #24]
 810b338:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b33a:	687b      	ldr	r3, [r7, #4]
 810b33c:	681b      	ldr	r3, [r3, #0]
 810b33e:	4ab6      	ldr	r2, [pc, #728]	; (810b618 <UART_SetConfig+0x334>)
 810b340:	4293      	cmp	r3, r2
 810b342:	d004      	beq.n	810b34e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b344:	687b      	ldr	r3, [r7, #4]
 810b346:	6a1b      	ldr	r3, [r3, #32]
 810b348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b34a:	4313      	orrs	r3, r2
 810b34c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b34e:	687b      	ldr	r3, [r7, #4]
 810b350:	681b      	ldr	r3, [r3, #0]
 810b352:	689b      	ldr	r3, [r3, #8]
 810b354:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810b358:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810b35c:	687a      	ldr	r2, [r7, #4]
 810b35e:	6812      	ldr	r2, [r2, #0]
 810b360:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810b362:	430b      	orrs	r3, r1
 810b364:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b366:	687b      	ldr	r3, [r7, #4]
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b36c:	f023 010f 	bic.w	r1, r3, #15
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810b374:	687b      	ldr	r3, [r7, #4]
 810b376:	681b      	ldr	r3, [r3, #0]
 810b378:	430a      	orrs	r2, r1
 810b37a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b37c:	687b      	ldr	r3, [r7, #4]
 810b37e:	681b      	ldr	r3, [r3, #0]
 810b380:	4aa6      	ldr	r2, [pc, #664]	; (810b61c <UART_SetConfig+0x338>)
 810b382:	4293      	cmp	r3, r2
 810b384:	d176      	bne.n	810b474 <UART_SetConfig+0x190>
 810b386:	4ba6      	ldr	r3, [pc, #664]	; (810b620 <UART_SetConfig+0x33c>)
 810b388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b38a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b38e:	2b28      	cmp	r3, #40	; 0x28
 810b390:	d86c      	bhi.n	810b46c <UART_SetConfig+0x188>
 810b392:	a201      	add	r2, pc, #4	; (adr r2, 810b398 <UART_SetConfig+0xb4>)
 810b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b398:	0810b43d 	.word	0x0810b43d
 810b39c:	0810b46d 	.word	0x0810b46d
 810b3a0:	0810b46d 	.word	0x0810b46d
 810b3a4:	0810b46d 	.word	0x0810b46d
 810b3a8:	0810b46d 	.word	0x0810b46d
 810b3ac:	0810b46d 	.word	0x0810b46d
 810b3b0:	0810b46d 	.word	0x0810b46d
 810b3b4:	0810b46d 	.word	0x0810b46d
 810b3b8:	0810b445 	.word	0x0810b445
 810b3bc:	0810b46d 	.word	0x0810b46d
 810b3c0:	0810b46d 	.word	0x0810b46d
 810b3c4:	0810b46d 	.word	0x0810b46d
 810b3c8:	0810b46d 	.word	0x0810b46d
 810b3cc:	0810b46d 	.word	0x0810b46d
 810b3d0:	0810b46d 	.word	0x0810b46d
 810b3d4:	0810b46d 	.word	0x0810b46d
 810b3d8:	0810b44d 	.word	0x0810b44d
 810b3dc:	0810b46d 	.word	0x0810b46d
 810b3e0:	0810b46d 	.word	0x0810b46d
 810b3e4:	0810b46d 	.word	0x0810b46d
 810b3e8:	0810b46d 	.word	0x0810b46d
 810b3ec:	0810b46d 	.word	0x0810b46d
 810b3f0:	0810b46d 	.word	0x0810b46d
 810b3f4:	0810b46d 	.word	0x0810b46d
 810b3f8:	0810b455 	.word	0x0810b455
 810b3fc:	0810b46d 	.word	0x0810b46d
 810b400:	0810b46d 	.word	0x0810b46d
 810b404:	0810b46d 	.word	0x0810b46d
 810b408:	0810b46d 	.word	0x0810b46d
 810b40c:	0810b46d 	.word	0x0810b46d
 810b410:	0810b46d 	.word	0x0810b46d
 810b414:	0810b46d 	.word	0x0810b46d
 810b418:	0810b45d 	.word	0x0810b45d
 810b41c:	0810b46d 	.word	0x0810b46d
 810b420:	0810b46d 	.word	0x0810b46d
 810b424:	0810b46d 	.word	0x0810b46d
 810b428:	0810b46d 	.word	0x0810b46d
 810b42c:	0810b46d 	.word	0x0810b46d
 810b430:	0810b46d 	.word	0x0810b46d
 810b434:	0810b46d 	.word	0x0810b46d
 810b438:	0810b465 	.word	0x0810b465
 810b43c:	2301      	movs	r3, #1
 810b43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b442:	e220      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b444:	2304      	movs	r3, #4
 810b446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b44a:	e21c      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b44c:	2308      	movs	r3, #8
 810b44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b452:	e218      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b454:	2310      	movs	r3, #16
 810b456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b45a:	e214      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b45c:	2320      	movs	r3, #32
 810b45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b462:	e210      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b464:	2340      	movs	r3, #64	; 0x40
 810b466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b46a:	e20c      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b46c:	2380      	movs	r3, #128	; 0x80
 810b46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b472:	e208      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b474:	687b      	ldr	r3, [r7, #4]
 810b476:	681b      	ldr	r3, [r3, #0]
 810b478:	4a6a      	ldr	r2, [pc, #424]	; (810b624 <UART_SetConfig+0x340>)
 810b47a:	4293      	cmp	r3, r2
 810b47c:	d130      	bne.n	810b4e0 <UART_SetConfig+0x1fc>
 810b47e:	4b68      	ldr	r3, [pc, #416]	; (810b620 <UART_SetConfig+0x33c>)
 810b480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b482:	f003 0307 	and.w	r3, r3, #7
 810b486:	2b05      	cmp	r3, #5
 810b488:	d826      	bhi.n	810b4d8 <UART_SetConfig+0x1f4>
 810b48a:	a201      	add	r2, pc, #4	; (adr r2, 810b490 <UART_SetConfig+0x1ac>)
 810b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b490:	0810b4a9 	.word	0x0810b4a9
 810b494:	0810b4b1 	.word	0x0810b4b1
 810b498:	0810b4b9 	.word	0x0810b4b9
 810b49c:	0810b4c1 	.word	0x0810b4c1
 810b4a0:	0810b4c9 	.word	0x0810b4c9
 810b4a4:	0810b4d1 	.word	0x0810b4d1
 810b4a8:	2300      	movs	r3, #0
 810b4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4ae:	e1ea      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4b0:	2304      	movs	r3, #4
 810b4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4b6:	e1e6      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4b8:	2308      	movs	r3, #8
 810b4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4be:	e1e2      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4c0:	2310      	movs	r3, #16
 810b4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4c6:	e1de      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4c8:	2320      	movs	r3, #32
 810b4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4ce:	e1da      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4d0:	2340      	movs	r3, #64	; 0x40
 810b4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4d6:	e1d6      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4d8:	2380      	movs	r3, #128	; 0x80
 810b4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b4de:	e1d2      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b4e0:	687b      	ldr	r3, [r7, #4]
 810b4e2:	681b      	ldr	r3, [r3, #0]
 810b4e4:	4a50      	ldr	r2, [pc, #320]	; (810b628 <UART_SetConfig+0x344>)
 810b4e6:	4293      	cmp	r3, r2
 810b4e8:	d130      	bne.n	810b54c <UART_SetConfig+0x268>
 810b4ea:	4b4d      	ldr	r3, [pc, #308]	; (810b620 <UART_SetConfig+0x33c>)
 810b4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b4ee:	f003 0307 	and.w	r3, r3, #7
 810b4f2:	2b05      	cmp	r3, #5
 810b4f4:	d826      	bhi.n	810b544 <UART_SetConfig+0x260>
 810b4f6:	a201      	add	r2, pc, #4	; (adr r2, 810b4fc <UART_SetConfig+0x218>)
 810b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b4fc:	0810b515 	.word	0x0810b515
 810b500:	0810b51d 	.word	0x0810b51d
 810b504:	0810b525 	.word	0x0810b525
 810b508:	0810b52d 	.word	0x0810b52d
 810b50c:	0810b535 	.word	0x0810b535
 810b510:	0810b53d 	.word	0x0810b53d
 810b514:	2300      	movs	r3, #0
 810b516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b51a:	e1b4      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b51c:	2304      	movs	r3, #4
 810b51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b522:	e1b0      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b524:	2308      	movs	r3, #8
 810b526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b52a:	e1ac      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b52c:	2310      	movs	r3, #16
 810b52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b532:	e1a8      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b534:	2320      	movs	r3, #32
 810b536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b53a:	e1a4      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b53c:	2340      	movs	r3, #64	; 0x40
 810b53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b542:	e1a0      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b544:	2380      	movs	r3, #128	; 0x80
 810b546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b54a:	e19c      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b54c:	687b      	ldr	r3, [r7, #4]
 810b54e:	681b      	ldr	r3, [r3, #0]
 810b550:	4a36      	ldr	r2, [pc, #216]	; (810b62c <UART_SetConfig+0x348>)
 810b552:	4293      	cmp	r3, r2
 810b554:	d130      	bne.n	810b5b8 <UART_SetConfig+0x2d4>
 810b556:	4b32      	ldr	r3, [pc, #200]	; (810b620 <UART_SetConfig+0x33c>)
 810b558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b55a:	f003 0307 	and.w	r3, r3, #7
 810b55e:	2b05      	cmp	r3, #5
 810b560:	d826      	bhi.n	810b5b0 <UART_SetConfig+0x2cc>
 810b562:	a201      	add	r2, pc, #4	; (adr r2, 810b568 <UART_SetConfig+0x284>)
 810b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b568:	0810b581 	.word	0x0810b581
 810b56c:	0810b589 	.word	0x0810b589
 810b570:	0810b591 	.word	0x0810b591
 810b574:	0810b599 	.word	0x0810b599
 810b578:	0810b5a1 	.word	0x0810b5a1
 810b57c:	0810b5a9 	.word	0x0810b5a9
 810b580:	2300      	movs	r3, #0
 810b582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b586:	e17e      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b588:	2304      	movs	r3, #4
 810b58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b58e:	e17a      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b590:	2308      	movs	r3, #8
 810b592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b596:	e176      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b598:	2310      	movs	r3, #16
 810b59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b59e:	e172      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b5a0:	2320      	movs	r3, #32
 810b5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5a6:	e16e      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b5a8:	2340      	movs	r3, #64	; 0x40
 810b5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5ae:	e16a      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b5b0:	2380      	movs	r3, #128	; 0x80
 810b5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5b6:	e166      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b5b8:	687b      	ldr	r3, [r7, #4]
 810b5ba:	681b      	ldr	r3, [r3, #0]
 810b5bc:	4a1c      	ldr	r2, [pc, #112]	; (810b630 <UART_SetConfig+0x34c>)
 810b5be:	4293      	cmp	r3, r2
 810b5c0:	d140      	bne.n	810b644 <UART_SetConfig+0x360>
 810b5c2:	4b17      	ldr	r3, [pc, #92]	; (810b620 <UART_SetConfig+0x33c>)
 810b5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b5c6:	f003 0307 	and.w	r3, r3, #7
 810b5ca:	2b05      	cmp	r3, #5
 810b5cc:	d836      	bhi.n	810b63c <UART_SetConfig+0x358>
 810b5ce:	a201      	add	r2, pc, #4	; (adr r2, 810b5d4 <UART_SetConfig+0x2f0>)
 810b5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b5d4:	0810b5ed 	.word	0x0810b5ed
 810b5d8:	0810b5f5 	.word	0x0810b5f5
 810b5dc:	0810b5fd 	.word	0x0810b5fd
 810b5e0:	0810b605 	.word	0x0810b605
 810b5e4:	0810b60d 	.word	0x0810b60d
 810b5e8:	0810b635 	.word	0x0810b635
 810b5ec:	2300      	movs	r3, #0
 810b5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5f2:	e148      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b5f4:	2304      	movs	r3, #4
 810b5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b5fa:	e144      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b5fc:	2308      	movs	r3, #8
 810b5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b602:	e140      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b604:	2310      	movs	r3, #16
 810b606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b60a:	e13c      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b60c:	2320      	movs	r3, #32
 810b60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b612:	e138      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b614:	cfff69f3 	.word	0xcfff69f3
 810b618:	58000c00 	.word	0x58000c00
 810b61c:	40011000 	.word	0x40011000
 810b620:	58024400 	.word	0x58024400
 810b624:	40004400 	.word	0x40004400
 810b628:	40004800 	.word	0x40004800
 810b62c:	40004c00 	.word	0x40004c00
 810b630:	40005000 	.word	0x40005000
 810b634:	2340      	movs	r3, #64	; 0x40
 810b636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b63a:	e124      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b63c:	2380      	movs	r3, #128	; 0x80
 810b63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b642:	e120      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b644:	687b      	ldr	r3, [r7, #4]
 810b646:	681b      	ldr	r3, [r3, #0]
 810b648:	4acc      	ldr	r2, [pc, #816]	; (810b97c <UART_SetConfig+0x698>)
 810b64a:	4293      	cmp	r3, r2
 810b64c:	d176      	bne.n	810b73c <UART_SetConfig+0x458>
 810b64e:	4bcc      	ldr	r3, [pc, #816]	; (810b980 <UART_SetConfig+0x69c>)
 810b650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810b656:	2b28      	cmp	r3, #40	; 0x28
 810b658:	d86c      	bhi.n	810b734 <UART_SetConfig+0x450>
 810b65a:	a201      	add	r2, pc, #4	; (adr r2, 810b660 <UART_SetConfig+0x37c>)
 810b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b660:	0810b705 	.word	0x0810b705
 810b664:	0810b735 	.word	0x0810b735
 810b668:	0810b735 	.word	0x0810b735
 810b66c:	0810b735 	.word	0x0810b735
 810b670:	0810b735 	.word	0x0810b735
 810b674:	0810b735 	.word	0x0810b735
 810b678:	0810b735 	.word	0x0810b735
 810b67c:	0810b735 	.word	0x0810b735
 810b680:	0810b70d 	.word	0x0810b70d
 810b684:	0810b735 	.word	0x0810b735
 810b688:	0810b735 	.word	0x0810b735
 810b68c:	0810b735 	.word	0x0810b735
 810b690:	0810b735 	.word	0x0810b735
 810b694:	0810b735 	.word	0x0810b735
 810b698:	0810b735 	.word	0x0810b735
 810b69c:	0810b735 	.word	0x0810b735
 810b6a0:	0810b715 	.word	0x0810b715
 810b6a4:	0810b735 	.word	0x0810b735
 810b6a8:	0810b735 	.word	0x0810b735
 810b6ac:	0810b735 	.word	0x0810b735
 810b6b0:	0810b735 	.word	0x0810b735
 810b6b4:	0810b735 	.word	0x0810b735
 810b6b8:	0810b735 	.word	0x0810b735
 810b6bc:	0810b735 	.word	0x0810b735
 810b6c0:	0810b71d 	.word	0x0810b71d
 810b6c4:	0810b735 	.word	0x0810b735
 810b6c8:	0810b735 	.word	0x0810b735
 810b6cc:	0810b735 	.word	0x0810b735
 810b6d0:	0810b735 	.word	0x0810b735
 810b6d4:	0810b735 	.word	0x0810b735
 810b6d8:	0810b735 	.word	0x0810b735
 810b6dc:	0810b735 	.word	0x0810b735
 810b6e0:	0810b725 	.word	0x0810b725
 810b6e4:	0810b735 	.word	0x0810b735
 810b6e8:	0810b735 	.word	0x0810b735
 810b6ec:	0810b735 	.word	0x0810b735
 810b6f0:	0810b735 	.word	0x0810b735
 810b6f4:	0810b735 	.word	0x0810b735
 810b6f8:	0810b735 	.word	0x0810b735
 810b6fc:	0810b735 	.word	0x0810b735
 810b700:	0810b72d 	.word	0x0810b72d
 810b704:	2301      	movs	r3, #1
 810b706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b70a:	e0bc      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b70c:	2304      	movs	r3, #4
 810b70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b712:	e0b8      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b714:	2308      	movs	r3, #8
 810b716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b71a:	e0b4      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b71c:	2310      	movs	r3, #16
 810b71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b722:	e0b0      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b724:	2320      	movs	r3, #32
 810b726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b72a:	e0ac      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b72c:	2340      	movs	r3, #64	; 0x40
 810b72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b732:	e0a8      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b734:	2380      	movs	r3, #128	; 0x80
 810b736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b73a:	e0a4      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b73c:	687b      	ldr	r3, [r7, #4]
 810b73e:	681b      	ldr	r3, [r3, #0]
 810b740:	4a90      	ldr	r2, [pc, #576]	; (810b984 <UART_SetConfig+0x6a0>)
 810b742:	4293      	cmp	r3, r2
 810b744:	d130      	bne.n	810b7a8 <UART_SetConfig+0x4c4>
 810b746:	4b8e      	ldr	r3, [pc, #568]	; (810b980 <UART_SetConfig+0x69c>)
 810b748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b74a:	f003 0307 	and.w	r3, r3, #7
 810b74e:	2b05      	cmp	r3, #5
 810b750:	d826      	bhi.n	810b7a0 <UART_SetConfig+0x4bc>
 810b752:	a201      	add	r2, pc, #4	; (adr r2, 810b758 <UART_SetConfig+0x474>)
 810b754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b758:	0810b771 	.word	0x0810b771
 810b75c:	0810b779 	.word	0x0810b779
 810b760:	0810b781 	.word	0x0810b781
 810b764:	0810b789 	.word	0x0810b789
 810b768:	0810b791 	.word	0x0810b791
 810b76c:	0810b799 	.word	0x0810b799
 810b770:	2300      	movs	r3, #0
 810b772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b776:	e086      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b778:	2304      	movs	r3, #4
 810b77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b77e:	e082      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b780:	2308      	movs	r3, #8
 810b782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b786:	e07e      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b788:	2310      	movs	r3, #16
 810b78a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b78e:	e07a      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b790:	2320      	movs	r3, #32
 810b792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b796:	e076      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b798:	2340      	movs	r3, #64	; 0x40
 810b79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b79e:	e072      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b7a0:	2380      	movs	r3, #128	; 0x80
 810b7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7a6:	e06e      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b7a8:	687b      	ldr	r3, [r7, #4]
 810b7aa:	681b      	ldr	r3, [r3, #0]
 810b7ac:	4a76      	ldr	r2, [pc, #472]	; (810b988 <UART_SetConfig+0x6a4>)
 810b7ae:	4293      	cmp	r3, r2
 810b7b0:	d130      	bne.n	810b814 <UART_SetConfig+0x530>
 810b7b2:	4b73      	ldr	r3, [pc, #460]	; (810b980 <UART_SetConfig+0x69c>)
 810b7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b7b6:	f003 0307 	and.w	r3, r3, #7
 810b7ba:	2b05      	cmp	r3, #5
 810b7bc:	d826      	bhi.n	810b80c <UART_SetConfig+0x528>
 810b7be:	a201      	add	r2, pc, #4	; (adr r2, 810b7c4 <UART_SetConfig+0x4e0>)
 810b7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b7c4:	0810b7dd 	.word	0x0810b7dd
 810b7c8:	0810b7e5 	.word	0x0810b7e5
 810b7cc:	0810b7ed 	.word	0x0810b7ed
 810b7d0:	0810b7f5 	.word	0x0810b7f5
 810b7d4:	0810b7fd 	.word	0x0810b7fd
 810b7d8:	0810b805 	.word	0x0810b805
 810b7dc:	2300      	movs	r3, #0
 810b7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7e2:	e050      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b7e4:	2304      	movs	r3, #4
 810b7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7ea:	e04c      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b7ec:	2308      	movs	r3, #8
 810b7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7f2:	e048      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b7f4:	2310      	movs	r3, #16
 810b7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b7fa:	e044      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b7fc:	2320      	movs	r3, #32
 810b7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b802:	e040      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b804:	2340      	movs	r3, #64	; 0x40
 810b806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b80a:	e03c      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b80c:	2380      	movs	r3, #128	; 0x80
 810b80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b812:	e038      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b814:	687b      	ldr	r3, [r7, #4]
 810b816:	681b      	ldr	r3, [r3, #0]
 810b818:	4a5c      	ldr	r2, [pc, #368]	; (810b98c <UART_SetConfig+0x6a8>)
 810b81a:	4293      	cmp	r3, r2
 810b81c:	d130      	bne.n	810b880 <UART_SetConfig+0x59c>
 810b81e:	4b58      	ldr	r3, [pc, #352]	; (810b980 <UART_SetConfig+0x69c>)
 810b820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b822:	f003 0307 	and.w	r3, r3, #7
 810b826:	2b05      	cmp	r3, #5
 810b828:	d826      	bhi.n	810b878 <UART_SetConfig+0x594>
 810b82a:	a201      	add	r2, pc, #4	; (adr r2, 810b830 <UART_SetConfig+0x54c>)
 810b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b830:	0810b849 	.word	0x0810b849
 810b834:	0810b851 	.word	0x0810b851
 810b838:	0810b859 	.word	0x0810b859
 810b83c:	0810b861 	.word	0x0810b861
 810b840:	0810b869 	.word	0x0810b869
 810b844:	0810b871 	.word	0x0810b871
 810b848:	2302      	movs	r3, #2
 810b84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b84e:	e01a      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b850:	2304      	movs	r3, #4
 810b852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b856:	e016      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b858:	2308      	movs	r3, #8
 810b85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b85e:	e012      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b860:	2310      	movs	r3, #16
 810b862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b866:	e00e      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b868:	2320      	movs	r3, #32
 810b86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b86e:	e00a      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b870:	2340      	movs	r3, #64	; 0x40
 810b872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b876:	e006      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b878:	2380      	movs	r3, #128	; 0x80
 810b87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810b87e:	e002      	b.n	810b886 <UART_SetConfig+0x5a2>
 810b880:	2380      	movs	r3, #128	; 0x80
 810b882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b886:	687b      	ldr	r3, [r7, #4]
 810b888:	681b      	ldr	r3, [r3, #0]
 810b88a:	4a40      	ldr	r2, [pc, #256]	; (810b98c <UART_SetConfig+0x6a8>)
 810b88c:	4293      	cmp	r3, r2
 810b88e:	f040 80ef 	bne.w	810ba70 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810b896:	2b20      	cmp	r3, #32
 810b898:	dc46      	bgt.n	810b928 <UART_SetConfig+0x644>
 810b89a:	2b02      	cmp	r3, #2
 810b89c:	f2c0 8081 	blt.w	810b9a2 <UART_SetConfig+0x6be>
 810b8a0:	3b02      	subs	r3, #2
 810b8a2:	2b1e      	cmp	r3, #30
 810b8a4:	d87d      	bhi.n	810b9a2 <UART_SetConfig+0x6be>
 810b8a6:	a201      	add	r2, pc, #4	; (adr r2, 810b8ac <UART_SetConfig+0x5c8>)
 810b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b8ac:	0810b92f 	.word	0x0810b92f
 810b8b0:	0810b9a3 	.word	0x0810b9a3
 810b8b4:	0810b937 	.word	0x0810b937
 810b8b8:	0810b9a3 	.word	0x0810b9a3
 810b8bc:	0810b9a3 	.word	0x0810b9a3
 810b8c0:	0810b9a3 	.word	0x0810b9a3
 810b8c4:	0810b947 	.word	0x0810b947
 810b8c8:	0810b9a3 	.word	0x0810b9a3
 810b8cc:	0810b9a3 	.word	0x0810b9a3
 810b8d0:	0810b9a3 	.word	0x0810b9a3
 810b8d4:	0810b9a3 	.word	0x0810b9a3
 810b8d8:	0810b9a3 	.word	0x0810b9a3
 810b8dc:	0810b9a3 	.word	0x0810b9a3
 810b8e0:	0810b9a3 	.word	0x0810b9a3
 810b8e4:	0810b957 	.word	0x0810b957
 810b8e8:	0810b9a3 	.word	0x0810b9a3
 810b8ec:	0810b9a3 	.word	0x0810b9a3
 810b8f0:	0810b9a3 	.word	0x0810b9a3
 810b8f4:	0810b9a3 	.word	0x0810b9a3
 810b8f8:	0810b9a3 	.word	0x0810b9a3
 810b8fc:	0810b9a3 	.word	0x0810b9a3
 810b900:	0810b9a3 	.word	0x0810b9a3
 810b904:	0810b9a3 	.word	0x0810b9a3
 810b908:	0810b9a3 	.word	0x0810b9a3
 810b90c:	0810b9a3 	.word	0x0810b9a3
 810b910:	0810b9a3 	.word	0x0810b9a3
 810b914:	0810b9a3 	.word	0x0810b9a3
 810b918:	0810b9a3 	.word	0x0810b9a3
 810b91c:	0810b9a3 	.word	0x0810b9a3
 810b920:	0810b9a3 	.word	0x0810b9a3
 810b924:	0810b995 	.word	0x0810b995
 810b928:	2b40      	cmp	r3, #64	; 0x40
 810b92a:	d036      	beq.n	810b99a <UART_SetConfig+0x6b6>
 810b92c:	e039      	b.n	810b9a2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b92e:	f7fd fe83 	bl	8109638 <HAL_RCCEx_GetD3PCLK1Freq>
 810b932:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810b934:	e03b      	b.n	810b9ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b936:	f107 0314 	add.w	r3, r7, #20
 810b93a:	4618      	mov	r0, r3
 810b93c:	f7fd fe92 	bl	8109664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b940:	69bb      	ldr	r3, [r7, #24]
 810b942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b944:	e033      	b.n	810b9ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b946:	f107 0308 	add.w	r3, r7, #8
 810b94a:	4618      	mov	r0, r3
 810b94c:	f7fd ffde 	bl	810990c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b950:	68fb      	ldr	r3, [r7, #12]
 810b952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b954:	e02b      	b.n	810b9ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b956:	4b0a      	ldr	r3, [pc, #40]	; (810b980 <UART_SetConfig+0x69c>)
 810b958:	681b      	ldr	r3, [r3, #0]
 810b95a:	f003 0320 	and.w	r3, r3, #32
 810b95e:	2b00      	cmp	r3, #0
 810b960:	d009      	beq.n	810b976 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b962:	4b07      	ldr	r3, [pc, #28]	; (810b980 <UART_SetConfig+0x69c>)
 810b964:	681b      	ldr	r3, [r3, #0]
 810b966:	08db      	lsrs	r3, r3, #3
 810b968:	f003 0303 	and.w	r3, r3, #3
 810b96c:	4a08      	ldr	r2, [pc, #32]	; (810b990 <UART_SetConfig+0x6ac>)
 810b96e:	fa22 f303 	lsr.w	r3, r2, r3
 810b972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b974:	e01b      	b.n	810b9ae <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810b976:	4b06      	ldr	r3, [pc, #24]	; (810b990 <UART_SetConfig+0x6ac>)
 810b978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b97a:	e018      	b.n	810b9ae <UART_SetConfig+0x6ca>
 810b97c:	40011400 	.word	0x40011400
 810b980:	58024400 	.word	0x58024400
 810b984:	40007800 	.word	0x40007800
 810b988:	40007c00 	.word	0x40007c00
 810b98c:	58000c00 	.word	0x58000c00
 810b990:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b994:	4bc4      	ldr	r3, [pc, #784]	; (810bca8 <UART_SetConfig+0x9c4>)
 810b996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b998:	e009      	b.n	810b9ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810b9a0:	e005      	b.n	810b9ae <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810b9a2:	2300      	movs	r3, #0
 810b9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810b9a6:	2301      	movs	r3, #1
 810b9a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810b9ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b9b0:	2b00      	cmp	r3, #0
 810b9b2:	f000 81da 	beq.w	810bd6a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b9b6:	687b      	ldr	r3, [r7, #4]
 810b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b9ba:	4abc      	ldr	r2, [pc, #752]	; (810bcac <UART_SetConfig+0x9c8>)
 810b9bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b9c0:	461a      	mov	r2, r3
 810b9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b9c4:	fbb3 f3f2 	udiv	r3, r3, r2
 810b9c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b9ca:	687b      	ldr	r3, [r7, #4]
 810b9cc:	685a      	ldr	r2, [r3, #4]
 810b9ce:	4613      	mov	r3, r2
 810b9d0:	005b      	lsls	r3, r3, #1
 810b9d2:	4413      	add	r3, r2
 810b9d4:	6a3a      	ldr	r2, [r7, #32]
 810b9d6:	429a      	cmp	r2, r3
 810b9d8:	d305      	bcc.n	810b9e6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b9da:	687b      	ldr	r3, [r7, #4]
 810b9dc:	685b      	ldr	r3, [r3, #4]
 810b9de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b9e0:	6a3a      	ldr	r2, [r7, #32]
 810b9e2:	429a      	cmp	r2, r3
 810b9e4:	d903      	bls.n	810b9ee <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810b9e6:	2301      	movs	r3, #1
 810b9e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810b9ec:	e1bd      	b.n	810bd6a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b9f0:	4618      	mov	r0, r3
 810b9f2:	f04f 0100 	mov.w	r1, #0
 810b9f6:	687b      	ldr	r3, [r7, #4]
 810b9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b9fa:	4aac      	ldr	r2, [pc, #688]	; (810bcac <UART_SetConfig+0x9c8>)
 810b9fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ba00:	b29a      	uxth	r2, r3
 810ba02:	f04f 0300 	mov.w	r3, #0
 810ba06:	f7f5 fa81 	bl	8100f0c <__aeabi_uldivmod>
 810ba0a:	4602      	mov	r2, r0
 810ba0c:	460b      	mov	r3, r1
 810ba0e:	4610      	mov	r0, r2
 810ba10:	4619      	mov	r1, r3
 810ba12:	f04f 0200 	mov.w	r2, #0
 810ba16:	f04f 0300 	mov.w	r3, #0
 810ba1a:	020b      	lsls	r3, r1, #8
 810ba1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810ba20:	0202      	lsls	r2, r0, #8
 810ba22:	6879      	ldr	r1, [r7, #4]
 810ba24:	6849      	ldr	r1, [r1, #4]
 810ba26:	0849      	lsrs	r1, r1, #1
 810ba28:	4608      	mov	r0, r1
 810ba2a:	f04f 0100 	mov.w	r1, #0
 810ba2e:	1814      	adds	r4, r2, r0
 810ba30:	eb43 0501 	adc.w	r5, r3, r1
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	685b      	ldr	r3, [r3, #4]
 810ba38:	461a      	mov	r2, r3
 810ba3a:	f04f 0300 	mov.w	r3, #0
 810ba3e:	4620      	mov	r0, r4
 810ba40:	4629      	mov	r1, r5
 810ba42:	f7f5 fa63 	bl	8100f0c <__aeabi_uldivmod>
 810ba46:	4602      	mov	r2, r0
 810ba48:	460b      	mov	r3, r1
 810ba4a:	4613      	mov	r3, r2
 810ba4c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810ba54:	d308      	bcc.n	810ba68 <UART_SetConfig+0x784>
 810ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ba58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ba5c:	d204      	bcs.n	810ba68 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	681b      	ldr	r3, [r3, #0]
 810ba62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ba64:	60da      	str	r2, [r3, #12]
 810ba66:	e180      	b.n	810bd6a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810ba68:	2301      	movs	r3, #1
 810ba6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810ba6e:	e17c      	b.n	810bd6a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810ba70:	687b      	ldr	r3, [r7, #4]
 810ba72:	69db      	ldr	r3, [r3, #28]
 810ba74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810ba78:	f040 80bf 	bne.w	810bbfa <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810ba7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810ba80:	2b20      	cmp	r3, #32
 810ba82:	dc49      	bgt.n	810bb18 <UART_SetConfig+0x834>
 810ba84:	2b00      	cmp	r3, #0
 810ba86:	db7c      	blt.n	810bb82 <UART_SetConfig+0x89e>
 810ba88:	2b20      	cmp	r3, #32
 810ba8a:	d87a      	bhi.n	810bb82 <UART_SetConfig+0x89e>
 810ba8c:	a201      	add	r2, pc, #4	; (adr r2, 810ba94 <UART_SetConfig+0x7b0>)
 810ba8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ba92:	bf00      	nop
 810ba94:	0810bb1f 	.word	0x0810bb1f
 810ba98:	0810bb27 	.word	0x0810bb27
 810ba9c:	0810bb83 	.word	0x0810bb83
 810baa0:	0810bb83 	.word	0x0810bb83
 810baa4:	0810bb2f 	.word	0x0810bb2f
 810baa8:	0810bb83 	.word	0x0810bb83
 810baac:	0810bb83 	.word	0x0810bb83
 810bab0:	0810bb83 	.word	0x0810bb83
 810bab4:	0810bb3f 	.word	0x0810bb3f
 810bab8:	0810bb83 	.word	0x0810bb83
 810babc:	0810bb83 	.word	0x0810bb83
 810bac0:	0810bb83 	.word	0x0810bb83
 810bac4:	0810bb83 	.word	0x0810bb83
 810bac8:	0810bb83 	.word	0x0810bb83
 810bacc:	0810bb83 	.word	0x0810bb83
 810bad0:	0810bb83 	.word	0x0810bb83
 810bad4:	0810bb4f 	.word	0x0810bb4f
 810bad8:	0810bb83 	.word	0x0810bb83
 810badc:	0810bb83 	.word	0x0810bb83
 810bae0:	0810bb83 	.word	0x0810bb83
 810bae4:	0810bb83 	.word	0x0810bb83
 810bae8:	0810bb83 	.word	0x0810bb83
 810baec:	0810bb83 	.word	0x0810bb83
 810baf0:	0810bb83 	.word	0x0810bb83
 810baf4:	0810bb83 	.word	0x0810bb83
 810baf8:	0810bb83 	.word	0x0810bb83
 810bafc:	0810bb83 	.word	0x0810bb83
 810bb00:	0810bb83 	.word	0x0810bb83
 810bb04:	0810bb83 	.word	0x0810bb83
 810bb08:	0810bb83 	.word	0x0810bb83
 810bb0c:	0810bb83 	.word	0x0810bb83
 810bb10:	0810bb83 	.word	0x0810bb83
 810bb14:	0810bb75 	.word	0x0810bb75
 810bb18:	2b40      	cmp	r3, #64	; 0x40
 810bb1a:	d02e      	beq.n	810bb7a <UART_SetConfig+0x896>
 810bb1c:	e031      	b.n	810bb82 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bb1e:	f7fc fe1f 	bl	8108760 <HAL_RCC_GetPCLK1Freq>
 810bb22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bb24:	e033      	b.n	810bb8e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bb26:	f7fc fe31 	bl	810878c <HAL_RCC_GetPCLK2Freq>
 810bb2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bb2c:	e02f      	b.n	810bb8e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb2e:	f107 0314 	add.w	r3, r7, #20
 810bb32:	4618      	mov	r0, r3
 810bb34:	f7fd fd96 	bl	8109664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bb38:	69bb      	ldr	r3, [r7, #24]
 810bb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb3c:	e027      	b.n	810bb8e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb3e:	f107 0308 	add.w	r3, r7, #8
 810bb42:	4618      	mov	r0, r3
 810bb44:	f7fd fee2 	bl	810990c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bb48:	68fb      	ldr	r3, [r7, #12]
 810bb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb4c:	e01f      	b.n	810bb8e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bb4e:	4b58      	ldr	r3, [pc, #352]	; (810bcb0 <UART_SetConfig+0x9cc>)
 810bb50:	681b      	ldr	r3, [r3, #0]
 810bb52:	f003 0320 	and.w	r3, r3, #32
 810bb56:	2b00      	cmp	r3, #0
 810bb58:	d009      	beq.n	810bb6e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bb5a:	4b55      	ldr	r3, [pc, #340]	; (810bcb0 <UART_SetConfig+0x9cc>)
 810bb5c:	681b      	ldr	r3, [r3, #0]
 810bb5e:	08db      	lsrs	r3, r3, #3
 810bb60:	f003 0303 	and.w	r3, r3, #3
 810bb64:	4a53      	ldr	r2, [pc, #332]	; (810bcb4 <UART_SetConfig+0x9d0>)
 810bb66:	fa22 f303 	lsr.w	r3, r2, r3
 810bb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bb6c:	e00f      	b.n	810bb8e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810bb6e:	4b51      	ldr	r3, [pc, #324]	; (810bcb4 <UART_SetConfig+0x9d0>)
 810bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb72:	e00c      	b.n	810bb8e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bb74:	4b4c      	ldr	r3, [pc, #304]	; (810bca8 <UART_SetConfig+0x9c4>)
 810bb76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb78:	e009      	b.n	810bb8e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bb7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bb80:	e005      	b.n	810bb8e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810bb82:	2300      	movs	r3, #0
 810bb84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bb86:	2301      	movs	r3, #1
 810bb88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bb8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bb90:	2b00      	cmp	r3, #0
 810bb92:	f000 80ea 	beq.w	810bd6a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bb96:	687b      	ldr	r3, [r7, #4]
 810bb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bb9a:	4a44      	ldr	r2, [pc, #272]	; (810bcac <UART_SetConfig+0x9c8>)
 810bb9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bba0:	461a      	mov	r2, r3
 810bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bba4:	fbb3 f3f2 	udiv	r3, r3, r2
 810bba8:	005a      	lsls	r2, r3, #1
 810bbaa:	687b      	ldr	r3, [r7, #4]
 810bbac:	685b      	ldr	r3, [r3, #4]
 810bbae:	085b      	lsrs	r3, r3, #1
 810bbb0:	441a      	add	r2, r3
 810bbb2:	687b      	ldr	r3, [r7, #4]
 810bbb4:	685b      	ldr	r3, [r3, #4]
 810bbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 810bbba:	b29b      	uxth	r3, r3
 810bbbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bbc0:	2b0f      	cmp	r3, #15
 810bbc2:	d916      	bls.n	810bbf2 <UART_SetConfig+0x90e>
 810bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bbc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bbca:	d212      	bcs.n	810bbf2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bbce:	b29b      	uxth	r3, r3
 810bbd0:	f023 030f 	bic.w	r3, r3, #15
 810bbd4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bbd8:	085b      	lsrs	r3, r3, #1
 810bbda:	b29b      	uxth	r3, r3
 810bbdc:	f003 0307 	and.w	r3, r3, #7
 810bbe0:	b29a      	uxth	r2, r3
 810bbe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810bbe4:	4313      	orrs	r3, r2
 810bbe6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810bbe8:	687b      	ldr	r3, [r7, #4]
 810bbea:	681b      	ldr	r3, [r3, #0]
 810bbec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810bbee:	60da      	str	r2, [r3, #12]
 810bbf0:	e0bb      	b.n	810bd6a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810bbf2:	2301      	movs	r3, #1
 810bbf4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810bbf8:	e0b7      	b.n	810bd6a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810bbfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810bbfe:	2b20      	cmp	r3, #32
 810bc00:	dc4a      	bgt.n	810bc98 <UART_SetConfig+0x9b4>
 810bc02:	2b00      	cmp	r3, #0
 810bc04:	f2c0 8086 	blt.w	810bd14 <UART_SetConfig+0xa30>
 810bc08:	2b20      	cmp	r3, #32
 810bc0a:	f200 8083 	bhi.w	810bd14 <UART_SetConfig+0xa30>
 810bc0e:	a201      	add	r2, pc, #4	; (adr r2, 810bc14 <UART_SetConfig+0x930>)
 810bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bc14:	0810bc9f 	.word	0x0810bc9f
 810bc18:	0810bcb9 	.word	0x0810bcb9
 810bc1c:	0810bd15 	.word	0x0810bd15
 810bc20:	0810bd15 	.word	0x0810bd15
 810bc24:	0810bcc1 	.word	0x0810bcc1
 810bc28:	0810bd15 	.word	0x0810bd15
 810bc2c:	0810bd15 	.word	0x0810bd15
 810bc30:	0810bd15 	.word	0x0810bd15
 810bc34:	0810bcd1 	.word	0x0810bcd1
 810bc38:	0810bd15 	.word	0x0810bd15
 810bc3c:	0810bd15 	.word	0x0810bd15
 810bc40:	0810bd15 	.word	0x0810bd15
 810bc44:	0810bd15 	.word	0x0810bd15
 810bc48:	0810bd15 	.word	0x0810bd15
 810bc4c:	0810bd15 	.word	0x0810bd15
 810bc50:	0810bd15 	.word	0x0810bd15
 810bc54:	0810bce1 	.word	0x0810bce1
 810bc58:	0810bd15 	.word	0x0810bd15
 810bc5c:	0810bd15 	.word	0x0810bd15
 810bc60:	0810bd15 	.word	0x0810bd15
 810bc64:	0810bd15 	.word	0x0810bd15
 810bc68:	0810bd15 	.word	0x0810bd15
 810bc6c:	0810bd15 	.word	0x0810bd15
 810bc70:	0810bd15 	.word	0x0810bd15
 810bc74:	0810bd15 	.word	0x0810bd15
 810bc78:	0810bd15 	.word	0x0810bd15
 810bc7c:	0810bd15 	.word	0x0810bd15
 810bc80:	0810bd15 	.word	0x0810bd15
 810bc84:	0810bd15 	.word	0x0810bd15
 810bc88:	0810bd15 	.word	0x0810bd15
 810bc8c:	0810bd15 	.word	0x0810bd15
 810bc90:	0810bd15 	.word	0x0810bd15
 810bc94:	0810bd07 	.word	0x0810bd07
 810bc98:	2b40      	cmp	r3, #64	; 0x40
 810bc9a:	d037      	beq.n	810bd0c <UART_SetConfig+0xa28>
 810bc9c:	e03a      	b.n	810bd14 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bc9e:	f7fc fd5f 	bl	8108760 <HAL_RCC_GetPCLK1Freq>
 810bca2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bca4:	e03c      	b.n	810bd20 <UART_SetConfig+0xa3c>
 810bca6:	bf00      	nop
 810bca8:	003d0900 	.word	0x003d0900
 810bcac:	0810d6e4 	.word	0x0810d6e4
 810bcb0:	58024400 	.word	0x58024400
 810bcb4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bcb8:	f7fc fd68 	bl	810878c <HAL_RCC_GetPCLK2Freq>
 810bcbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810bcbe:	e02f      	b.n	810bd20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bcc0:	f107 0314 	add.w	r3, r7, #20
 810bcc4:	4618      	mov	r0, r3
 810bcc6:	f7fd fccd 	bl	8109664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bcca:	69bb      	ldr	r3, [r7, #24]
 810bccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bcce:	e027      	b.n	810bd20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bcd0:	f107 0308 	add.w	r3, r7, #8
 810bcd4:	4618      	mov	r0, r3
 810bcd6:	f7fd fe19 	bl	810990c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bcda:	68fb      	ldr	r3, [r7, #12]
 810bcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bcde:	e01f      	b.n	810bd20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bce0:	4b2c      	ldr	r3, [pc, #176]	; (810bd94 <UART_SetConfig+0xab0>)
 810bce2:	681b      	ldr	r3, [r3, #0]
 810bce4:	f003 0320 	and.w	r3, r3, #32
 810bce8:	2b00      	cmp	r3, #0
 810bcea:	d009      	beq.n	810bd00 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bcec:	4b29      	ldr	r3, [pc, #164]	; (810bd94 <UART_SetConfig+0xab0>)
 810bcee:	681b      	ldr	r3, [r3, #0]
 810bcf0:	08db      	lsrs	r3, r3, #3
 810bcf2:	f003 0303 	and.w	r3, r3, #3
 810bcf6:	4a28      	ldr	r2, [pc, #160]	; (810bd98 <UART_SetConfig+0xab4>)
 810bcf8:	fa22 f303 	lsr.w	r3, r2, r3
 810bcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bcfe:	e00f      	b.n	810bd20 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810bd00:	4b25      	ldr	r3, [pc, #148]	; (810bd98 <UART_SetConfig+0xab4>)
 810bd02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd04:	e00c      	b.n	810bd20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bd06:	4b25      	ldr	r3, [pc, #148]	; (810bd9c <UART_SetConfig+0xab8>)
 810bd08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd0a:	e009      	b.n	810bd20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bd0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810bd10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810bd12:	e005      	b.n	810bd20 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810bd14:	2300      	movs	r3, #0
 810bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810bd18:	2301      	movs	r3, #1
 810bd1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810bd1e:	bf00      	nop
    }

    if (pclk != 0U)
 810bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bd22:	2b00      	cmp	r3, #0
 810bd24:	d021      	beq.n	810bd6a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bd26:	687b      	ldr	r3, [r7, #4]
 810bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bd2a:	4a1d      	ldr	r2, [pc, #116]	; (810bda0 <UART_SetConfig+0xabc>)
 810bd2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bd30:	461a      	mov	r2, r3
 810bd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bd34:	fbb3 f2f2 	udiv	r2, r3, r2
 810bd38:	687b      	ldr	r3, [r7, #4]
 810bd3a:	685b      	ldr	r3, [r3, #4]
 810bd3c:	085b      	lsrs	r3, r3, #1
 810bd3e:	441a      	add	r2, r3
 810bd40:	687b      	ldr	r3, [r7, #4]
 810bd42:	685b      	ldr	r3, [r3, #4]
 810bd44:	fbb2 f3f3 	udiv	r3, r2, r3
 810bd48:	b29b      	uxth	r3, r3
 810bd4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bd4e:	2b0f      	cmp	r3, #15
 810bd50:	d908      	bls.n	810bd64 <UART_SetConfig+0xa80>
 810bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bd58:	d204      	bcs.n	810bd64 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810bd5a:	687b      	ldr	r3, [r7, #4]
 810bd5c:	681b      	ldr	r3, [r3, #0]
 810bd5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810bd60:	60da      	str	r2, [r3, #12]
 810bd62:	e002      	b.n	810bd6a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810bd64:	2301      	movs	r3, #1
 810bd66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810bd6a:	687b      	ldr	r3, [r7, #4]
 810bd6c:	2201      	movs	r2, #1
 810bd6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810bd72:	687b      	ldr	r3, [r7, #4]
 810bd74:	2201      	movs	r2, #1
 810bd76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810bd7a:	687b      	ldr	r3, [r7, #4]
 810bd7c:	2200      	movs	r2, #0
 810bd7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810bd80:	687b      	ldr	r3, [r7, #4]
 810bd82:	2200      	movs	r2, #0
 810bd84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810bd86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810bd8a:	4618      	mov	r0, r3
 810bd8c:	3738      	adds	r7, #56	; 0x38
 810bd8e:	46bd      	mov	sp, r7
 810bd90:	bdb0      	pop	{r4, r5, r7, pc}
 810bd92:	bf00      	nop
 810bd94:	58024400 	.word	0x58024400
 810bd98:	03d09000 	.word	0x03d09000
 810bd9c:	003d0900 	.word	0x003d0900
 810bda0:	0810d6e4 	.word	0x0810d6e4

0810bda4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810bda4:	b480      	push	{r7}
 810bda6:	b083      	sub	sp, #12
 810bda8:	af00      	add	r7, sp, #0
 810bdaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810bdac:	687b      	ldr	r3, [r7, #4]
 810bdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bdb0:	f003 0301 	and.w	r3, r3, #1
 810bdb4:	2b00      	cmp	r3, #0
 810bdb6:	d00a      	beq.n	810bdce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810bdb8:	687b      	ldr	r3, [r7, #4]
 810bdba:	681b      	ldr	r3, [r3, #0]
 810bdbc:	685b      	ldr	r3, [r3, #4]
 810bdbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810bdc2:	687b      	ldr	r3, [r7, #4]
 810bdc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810bdc6:	687b      	ldr	r3, [r7, #4]
 810bdc8:	681b      	ldr	r3, [r3, #0]
 810bdca:	430a      	orrs	r2, r1
 810bdcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810bdce:	687b      	ldr	r3, [r7, #4]
 810bdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bdd2:	f003 0302 	and.w	r3, r3, #2
 810bdd6:	2b00      	cmp	r3, #0
 810bdd8:	d00a      	beq.n	810bdf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	681b      	ldr	r3, [r3, #0]
 810bdde:	685b      	ldr	r3, [r3, #4]
 810bde0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810bde4:	687b      	ldr	r3, [r7, #4]
 810bde6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810bde8:	687b      	ldr	r3, [r7, #4]
 810bdea:	681b      	ldr	r3, [r3, #0]
 810bdec:	430a      	orrs	r2, r1
 810bdee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810bdf0:	687b      	ldr	r3, [r7, #4]
 810bdf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bdf4:	f003 0304 	and.w	r3, r3, #4
 810bdf8:	2b00      	cmp	r3, #0
 810bdfa:	d00a      	beq.n	810be12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810bdfc:	687b      	ldr	r3, [r7, #4]
 810bdfe:	681b      	ldr	r3, [r3, #0]
 810be00:	685b      	ldr	r3, [r3, #4]
 810be02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810be06:	687b      	ldr	r3, [r7, #4]
 810be08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810be0a:	687b      	ldr	r3, [r7, #4]
 810be0c:	681b      	ldr	r3, [r3, #0]
 810be0e:	430a      	orrs	r2, r1
 810be10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810be12:	687b      	ldr	r3, [r7, #4]
 810be14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810be16:	f003 0308 	and.w	r3, r3, #8
 810be1a:	2b00      	cmp	r3, #0
 810be1c:	d00a      	beq.n	810be34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810be1e:	687b      	ldr	r3, [r7, #4]
 810be20:	681b      	ldr	r3, [r3, #0]
 810be22:	685b      	ldr	r3, [r3, #4]
 810be24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810be28:	687b      	ldr	r3, [r7, #4]
 810be2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810be2c:	687b      	ldr	r3, [r7, #4]
 810be2e:	681b      	ldr	r3, [r3, #0]
 810be30:	430a      	orrs	r2, r1
 810be32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810be34:	687b      	ldr	r3, [r7, #4]
 810be36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810be38:	f003 0310 	and.w	r3, r3, #16
 810be3c:	2b00      	cmp	r3, #0
 810be3e:	d00a      	beq.n	810be56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810be40:	687b      	ldr	r3, [r7, #4]
 810be42:	681b      	ldr	r3, [r3, #0]
 810be44:	689b      	ldr	r3, [r3, #8]
 810be46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810be4a:	687b      	ldr	r3, [r7, #4]
 810be4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810be4e:	687b      	ldr	r3, [r7, #4]
 810be50:	681b      	ldr	r3, [r3, #0]
 810be52:	430a      	orrs	r2, r1
 810be54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810be56:	687b      	ldr	r3, [r7, #4]
 810be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810be5a:	f003 0320 	and.w	r3, r3, #32
 810be5e:	2b00      	cmp	r3, #0
 810be60:	d00a      	beq.n	810be78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810be62:	687b      	ldr	r3, [r7, #4]
 810be64:	681b      	ldr	r3, [r3, #0]
 810be66:	689b      	ldr	r3, [r3, #8]
 810be68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810be6c:	687b      	ldr	r3, [r7, #4]
 810be6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810be70:	687b      	ldr	r3, [r7, #4]
 810be72:	681b      	ldr	r3, [r3, #0]
 810be74:	430a      	orrs	r2, r1
 810be76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810be78:	687b      	ldr	r3, [r7, #4]
 810be7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810be7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810be80:	2b00      	cmp	r3, #0
 810be82:	d01a      	beq.n	810beba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810be84:	687b      	ldr	r3, [r7, #4]
 810be86:	681b      	ldr	r3, [r3, #0]
 810be88:	685b      	ldr	r3, [r3, #4]
 810be8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810be8e:	687b      	ldr	r3, [r7, #4]
 810be90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810be92:	687b      	ldr	r3, [r7, #4]
 810be94:	681b      	ldr	r3, [r3, #0]
 810be96:	430a      	orrs	r2, r1
 810be98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810be9a:	687b      	ldr	r3, [r7, #4]
 810be9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810be9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810bea2:	d10a      	bne.n	810beba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810bea4:	687b      	ldr	r3, [r7, #4]
 810bea6:	681b      	ldr	r3, [r3, #0]
 810bea8:	685b      	ldr	r3, [r3, #4]
 810beaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810beae:	687b      	ldr	r3, [r7, #4]
 810beb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810beb2:	687b      	ldr	r3, [r7, #4]
 810beb4:	681b      	ldr	r3, [r3, #0]
 810beb6:	430a      	orrs	r2, r1
 810beb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810beba:	687b      	ldr	r3, [r7, #4]
 810bebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810bec2:	2b00      	cmp	r3, #0
 810bec4:	d00a      	beq.n	810bedc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810bec6:	687b      	ldr	r3, [r7, #4]
 810bec8:	681b      	ldr	r3, [r3, #0]
 810beca:	685b      	ldr	r3, [r3, #4]
 810becc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810bed0:	687b      	ldr	r3, [r7, #4]
 810bed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810bed4:	687b      	ldr	r3, [r7, #4]
 810bed6:	681b      	ldr	r3, [r3, #0]
 810bed8:	430a      	orrs	r2, r1
 810beda:	605a      	str	r2, [r3, #4]
  }
}
 810bedc:	bf00      	nop
 810bede:	370c      	adds	r7, #12
 810bee0:	46bd      	mov	sp, r7
 810bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bee6:	4770      	bx	lr

0810bee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810bee8:	b580      	push	{r7, lr}
 810beea:	b086      	sub	sp, #24
 810beec:	af02      	add	r7, sp, #8
 810beee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bef0:	687b      	ldr	r3, [r7, #4]
 810bef2:	2200      	movs	r2, #0
 810bef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810bef8:	f7f7 fc7a 	bl	81037f0 <HAL_GetTick>
 810befc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810befe:	687b      	ldr	r3, [r7, #4]
 810bf00:	681b      	ldr	r3, [r3, #0]
 810bf02:	681b      	ldr	r3, [r3, #0]
 810bf04:	f003 0308 	and.w	r3, r3, #8
 810bf08:	2b08      	cmp	r3, #8
 810bf0a:	d10e      	bne.n	810bf2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bf0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810bf10:	9300      	str	r3, [sp, #0]
 810bf12:	68fb      	ldr	r3, [r7, #12]
 810bf14:	2200      	movs	r2, #0
 810bf16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810bf1a:	6878      	ldr	r0, [r7, #4]
 810bf1c:	f000 f82f 	bl	810bf7e <UART_WaitOnFlagUntilTimeout>
 810bf20:	4603      	mov	r3, r0
 810bf22:	2b00      	cmp	r3, #0
 810bf24:	d001      	beq.n	810bf2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bf26:	2303      	movs	r3, #3
 810bf28:	e025      	b.n	810bf76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810bf2a:	687b      	ldr	r3, [r7, #4]
 810bf2c:	681b      	ldr	r3, [r3, #0]
 810bf2e:	681b      	ldr	r3, [r3, #0]
 810bf30:	f003 0304 	and.w	r3, r3, #4
 810bf34:	2b04      	cmp	r3, #4
 810bf36:	d10e      	bne.n	810bf56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bf38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810bf3c:	9300      	str	r3, [sp, #0]
 810bf3e:	68fb      	ldr	r3, [r7, #12]
 810bf40:	2200      	movs	r2, #0
 810bf42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810bf46:	6878      	ldr	r0, [r7, #4]
 810bf48:	f000 f819 	bl	810bf7e <UART_WaitOnFlagUntilTimeout>
 810bf4c:	4603      	mov	r3, r0
 810bf4e:	2b00      	cmp	r3, #0
 810bf50:	d001      	beq.n	810bf56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bf52:	2303      	movs	r3, #3
 810bf54:	e00f      	b.n	810bf76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810bf56:	687b      	ldr	r3, [r7, #4]
 810bf58:	2220      	movs	r2, #32
 810bf5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810bf5e:	687b      	ldr	r3, [r7, #4]
 810bf60:	2220      	movs	r2, #32
 810bf62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810bf66:	687b      	ldr	r3, [r7, #4]
 810bf68:	2200      	movs	r2, #0
 810bf6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810bf6c:	687b      	ldr	r3, [r7, #4]
 810bf6e:	2200      	movs	r2, #0
 810bf70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810bf74:	2300      	movs	r3, #0
}
 810bf76:	4618      	mov	r0, r3
 810bf78:	3710      	adds	r7, #16
 810bf7a:	46bd      	mov	sp, r7
 810bf7c:	bd80      	pop	{r7, pc}

0810bf7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810bf7e:	b580      	push	{r7, lr}
 810bf80:	b084      	sub	sp, #16
 810bf82:	af00      	add	r7, sp, #0
 810bf84:	60f8      	str	r0, [r7, #12]
 810bf86:	60b9      	str	r1, [r7, #8]
 810bf88:	603b      	str	r3, [r7, #0]
 810bf8a:	4613      	mov	r3, r2
 810bf8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810bf8e:	e062      	b.n	810c056 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810bf90:	69bb      	ldr	r3, [r7, #24]
 810bf92:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bf96:	d05e      	beq.n	810c056 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810bf98:	f7f7 fc2a 	bl	81037f0 <HAL_GetTick>
 810bf9c:	4602      	mov	r2, r0
 810bf9e:	683b      	ldr	r3, [r7, #0]
 810bfa0:	1ad3      	subs	r3, r2, r3
 810bfa2:	69ba      	ldr	r2, [r7, #24]
 810bfa4:	429a      	cmp	r2, r3
 810bfa6:	d302      	bcc.n	810bfae <UART_WaitOnFlagUntilTimeout+0x30>
 810bfa8:	69bb      	ldr	r3, [r7, #24]
 810bfaa:	2b00      	cmp	r3, #0
 810bfac:	d11d      	bne.n	810bfea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810bfae:	68fb      	ldr	r3, [r7, #12]
 810bfb0:	681b      	ldr	r3, [r3, #0]
 810bfb2:	681a      	ldr	r2, [r3, #0]
 810bfb4:	68fb      	ldr	r3, [r7, #12]
 810bfb6:	681b      	ldr	r3, [r3, #0]
 810bfb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810bfbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bfbe:	68fb      	ldr	r3, [r7, #12]
 810bfc0:	681b      	ldr	r3, [r3, #0]
 810bfc2:	689a      	ldr	r2, [r3, #8]
 810bfc4:	68fb      	ldr	r3, [r7, #12]
 810bfc6:	681b      	ldr	r3, [r3, #0]
 810bfc8:	f022 0201 	bic.w	r2, r2, #1
 810bfcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810bfce:	68fb      	ldr	r3, [r7, #12]
 810bfd0:	2220      	movs	r2, #32
 810bfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810bfd6:	68fb      	ldr	r3, [r7, #12]
 810bfd8:	2220      	movs	r2, #32
 810bfda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810bfde:	68fb      	ldr	r3, [r7, #12]
 810bfe0:	2200      	movs	r2, #0
 810bfe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810bfe6:	2303      	movs	r3, #3
 810bfe8:	e045      	b.n	810c076 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810bfea:	68fb      	ldr	r3, [r7, #12]
 810bfec:	681b      	ldr	r3, [r3, #0]
 810bfee:	681b      	ldr	r3, [r3, #0]
 810bff0:	f003 0304 	and.w	r3, r3, #4
 810bff4:	2b00      	cmp	r3, #0
 810bff6:	d02e      	beq.n	810c056 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810bff8:	68fb      	ldr	r3, [r7, #12]
 810bffa:	681b      	ldr	r3, [r3, #0]
 810bffc:	69db      	ldr	r3, [r3, #28]
 810bffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810c002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810c006:	d126      	bne.n	810c056 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c008:	68fb      	ldr	r3, [r7, #12]
 810c00a:	681b      	ldr	r3, [r3, #0]
 810c00c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c010:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810c012:	68fb      	ldr	r3, [r7, #12]
 810c014:	681b      	ldr	r3, [r3, #0]
 810c016:	681a      	ldr	r2, [r3, #0]
 810c018:	68fb      	ldr	r3, [r7, #12]
 810c01a:	681b      	ldr	r3, [r3, #0]
 810c01c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810c020:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c022:	68fb      	ldr	r3, [r7, #12]
 810c024:	681b      	ldr	r3, [r3, #0]
 810c026:	689a      	ldr	r2, [r3, #8]
 810c028:	68fb      	ldr	r3, [r7, #12]
 810c02a:	681b      	ldr	r3, [r3, #0]
 810c02c:	f022 0201 	bic.w	r2, r2, #1
 810c030:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810c032:	68fb      	ldr	r3, [r7, #12]
 810c034:	2220      	movs	r2, #32
 810c036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810c03a:	68fb      	ldr	r3, [r7, #12]
 810c03c:	2220      	movs	r2, #32
 810c03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c042:	68fb      	ldr	r3, [r7, #12]
 810c044:	2220      	movs	r2, #32
 810c046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c04a:	68fb      	ldr	r3, [r7, #12]
 810c04c:	2200      	movs	r2, #0
 810c04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810c052:	2303      	movs	r3, #3
 810c054:	e00f      	b.n	810c076 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c056:	68fb      	ldr	r3, [r7, #12]
 810c058:	681b      	ldr	r3, [r3, #0]
 810c05a:	69da      	ldr	r2, [r3, #28]
 810c05c:	68bb      	ldr	r3, [r7, #8]
 810c05e:	4013      	ands	r3, r2
 810c060:	68ba      	ldr	r2, [r7, #8]
 810c062:	429a      	cmp	r2, r3
 810c064:	bf0c      	ite	eq
 810c066:	2301      	moveq	r3, #1
 810c068:	2300      	movne	r3, #0
 810c06a:	b2db      	uxtb	r3, r3
 810c06c:	461a      	mov	r2, r3
 810c06e:	79fb      	ldrb	r3, [r7, #7]
 810c070:	429a      	cmp	r2, r3
 810c072:	d08d      	beq.n	810bf90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c074:	2300      	movs	r3, #0
}
 810c076:	4618      	mov	r0, r3
 810c078:	3710      	adds	r7, #16
 810c07a:	46bd      	mov	sp, r7
 810c07c:	bd80      	pop	{r7, pc}
	...

0810c080 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c080:	b580      	push	{r7, lr}
 810c082:	b084      	sub	sp, #16
 810c084:	af00      	add	r7, sp, #0
 810c086:	60f8      	str	r0, [r7, #12]
 810c088:	60b9      	str	r1, [r7, #8]
 810c08a:	4613      	mov	r3, r2
 810c08c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810c08e:	68fb      	ldr	r3, [r7, #12]
 810c090:	68ba      	ldr	r2, [r7, #8]
 810c092:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810c094:	68fb      	ldr	r3, [r7, #12]
 810c096:	88fa      	ldrh	r2, [r7, #6]
 810c098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c09c:	68fb      	ldr	r3, [r7, #12]
 810c09e:	2200      	movs	r2, #0
 810c0a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810c0a4:	68fb      	ldr	r3, [r7, #12]
 810c0a6:	2222      	movs	r2, #34	; 0x22
 810c0a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810c0ac:	68fb      	ldr	r3, [r7, #12]
 810c0ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c0b0:	2b00      	cmp	r3, #0
 810c0b2:	d02c      	beq.n	810c10e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810c0b4:	68fb      	ldr	r3, [r7, #12]
 810c0b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c0b8:	4a25      	ldr	r2, [pc, #148]	; (810c150 <UART_Start_Receive_DMA+0xd0>)
 810c0ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810c0bc:	68fb      	ldr	r3, [r7, #12]
 810c0be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c0c0:	4a24      	ldr	r2, [pc, #144]	; (810c154 <UART_Start_Receive_DMA+0xd4>)
 810c0c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810c0c4:	68fb      	ldr	r3, [r7, #12]
 810c0c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c0c8:	4a23      	ldr	r2, [pc, #140]	; (810c158 <UART_Start_Receive_DMA+0xd8>)
 810c0ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810c0cc:	68fb      	ldr	r3, [r7, #12]
 810c0ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c0d0:	2200      	movs	r2, #0
 810c0d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810c0d4:	68fb      	ldr	r3, [r7, #12]
 810c0d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810c0d8:	68fb      	ldr	r3, [r7, #12]
 810c0da:	681b      	ldr	r3, [r3, #0]
 810c0dc:	3324      	adds	r3, #36	; 0x24
 810c0de:	4619      	mov	r1, r3
 810c0e0:	68fb      	ldr	r3, [r7, #12]
 810c0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810c0e4:	461a      	mov	r2, r3
 810c0e6:	88fb      	ldrh	r3, [r7, #6]
 810c0e8:	f7f8 f830 	bl	810414c <HAL_DMA_Start_IT>
 810c0ec:	4603      	mov	r3, r0
 810c0ee:	2b00      	cmp	r3, #0
 810c0f0:	d00d      	beq.n	810c10e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810c0f2:	68fb      	ldr	r3, [r7, #12]
 810c0f4:	2210      	movs	r2, #16
 810c0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810c0fa:	68fb      	ldr	r3, [r7, #12]
 810c0fc:	2200      	movs	r2, #0
 810c0fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810c102:	68fb      	ldr	r3, [r7, #12]
 810c104:	2220      	movs	r2, #32
 810c106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810c10a:	2301      	movs	r3, #1
 810c10c:	e01c      	b.n	810c148 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810c10e:	68fb      	ldr	r3, [r7, #12]
 810c110:	2200      	movs	r2, #0
 810c112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c116:	68fb      	ldr	r3, [r7, #12]
 810c118:	681b      	ldr	r3, [r3, #0]
 810c11a:	681a      	ldr	r2, [r3, #0]
 810c11c:	68fb      	ldr	r3, [r7, #12]
 810c11e:	681b      	ldr	r3, [r3, #0]
 810c120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810c124:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c126:	68fb      	ldr	r3, [r7, #12]
 810c128:	681b      	ldr	r3, [r3, #0]
 810c12a:	689a      	ldr	r2, [r3, #8]
 810c12c:	68fb      	ldr	r3, [r7, #12]
 810c12e:	681b      	ldr	r3, [r3, #0]
 810c130:	f042 0201 	orr.w	r2, r2, #1
 810c134:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c136:	68fb      	ldr	r3, [r7, #12]
 810c138:	681b      	ldr	r3, [r3, #0]
 810c13a:	689a      	ldr	r2, [r3, #8]
 810c13c:	68fb      	ldr	r3, [r7, #12]
 810c13e:	681b      	ldr	r3, [r3, #0]
 810c140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c144:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810c146:	2300      	movs	r3, #0
}
 810c148:	4618      	mov	r0, r3
 810c14a:	3710      	adds	r7, #16
 810c14c:	46bd      	mov	sp, r7
 810c14e:	bd80      	pop	{r7, pc}
 810c150:	0810c269 	.word	0x0810c269
 810c154:	0810c2ff 	.word	0x0810c2ff
 810c158:	0810c337 	.word	0x0810c337

0810c15c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810c15c:	b480      	push	{r7}
 810c15e:	b083      	sub	sp, #12
 810c160:	af00      	add	r7, sp, #0
 810c162:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810c164:	687b      	ldr	r3, [r7, #4]
 810c166:	681b      	ldr	r3, [r3, #0]
 810c168:	681a      	ldr	r2, [r3, #0]
 810c16a:	687b      	ldr	r3, [r7, #4]
 810c16c:	681b      	ldr	r3, [r3, #0]
 810c16e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810c172:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810c174:	687b      	ldr	r3, [r7, #4]
 810c176:	681b      	ldr	r3, [r3, #0]
 810c178:	689a      	ldr	r2, [r3, #8]
 810c17a:	687b      	ldr	r3, [r7, #4]
 810c17c:	681b      	ldr	r3, [r3, #0]
 810c17e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810c182:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c184:	687b      	ldr	r3, [r7, #4]
 810c186:	2220      	movs	r2, #32
 810c188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810c18c:	bf00      	nop
 810c18e:	370c      	adds	r7, #12
 810c190:	46bd      	mov	sp, r7
 810c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c196:	4770      	bx	lr

0810c198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c198:	b480      	push	{r7}
 810c19a:	b083      	sub	sp, #12
 810c19c:	af00      	add	r7, sp, #0
 810c19e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c1a0:	687b      	ldr	r3, [r7, #4]
 810c1a2:	681b      	ldr	r3, [r3, #0]
 810c1a4:	681a      	ldr	r2, [r3, #0]
 810c1a6:	687b      	ldr	r3, [r7, #4]
 810c1a8:	681b      	ldr	r3, [r3, #0]
 810c1aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810c1ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c1b0:	687b      	ldr	r3, [r7, #4]
 810c1b2:	681b      	ldr	r3, [r3, #0]
 810c1b4:	689b      	ldr	r3, [r3, #8]
 810c1b6:	687a      	ldr	r2, [r7, #4]
 810c1b8:	6812      	ldr	r2, [r2, #0]
 810c1ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c1be:	f023 0301 	bic.w	r3, r3, #1
 810c1c2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c1c4:	687b      	ldr	r3, [r7, #4]
 810c1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c1c8:	2b01      	cmp	r3, #1
 810c1ca:	d107      	bne.n	810c1dc <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c1cc:	687b      	ldr	r3, [r7, #4]
 810c1ce:	681b      	ldr	r3, [r3, #0]
 810c1d0:	681a      	ldr	r2, [r3, #0]
 810c1d2:	687b      	ldr	r3, [r7, #4]
 810c1d4:	681b      	ldr	r3, [r3, #0]
 810c1d6:	f022 0210 	bic.w	r2, r2, #16
 810c1da:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c1dc:	687b      	ldr	r3, [r7, #4]
 810c1de:	2220      	movs	r2, #32
 810c1e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c1e4:	687b      	ldr	r3, [r7, #4]
 810c1e6:	2200      	movs	r2, #0
 810c1e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c1ea:	687b      	ldr	r3, [r7, #4]
 810c1ec:	2200      	movs	r2, #0
 810c1ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 810c1f0:	bf00      	nop
 810c1f2:	370c      	adds	r7, #12
 810c1f4:	46bd      	mov	sp, r7
 810c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1fa:	4770      	bx	lr

0810c1fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810c1fc:	b580      	push	{r7, lr}
 810c1fe:	b084      	sub	sp, #16
 810c200:	af00      	add	r7, sp, #0
 810c202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c204:	687b      	ldr	r3, [r7, #4]
 810c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c208:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c20a:	687b      	ldr	r3, [r7, #4]
 810c20c:	69db      	ldr	r3, [r3, #28]
 810c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c212:	d014      	beq.n	810c23e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810c214:	68fb      	ldr	r3, [r7, #12]
 810c216:	2200      	movs	r2, #0
 810c218:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810c21c:	68fb      	ldr	r3, [r7, #12]
 810c21e:	681b      	ldr	r3, [r3, #0]
 810c220:	689a      	ldr	r2, [r3, #8]
 810c222:	68fb      	ldr	r3, [r7, #12]
 810c224:	681b      	ldr	r3, [r3, #0]
 810c226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810c22a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c22c:	68fb      	ldr	r3, [r7, #12]
 810c22e:	681b      	ldr	r3, [r3, #0]
 810c230:	681a      	ldr	r2, [r3, #0]
 810c232:	68fb      	ldr	r3, [r7, #12]
 810c234:	681b      	ldr	r3, [r3, #0]
 810c236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810c23a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c23c:	e002      	b.n	810c244 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810c23e:	68f8      	ldr	r0, [r7, #12]
 810c240:	f7f7 f866 	bl	8103310 <HAL_UART_TxCpltCallback>
}
 810c244:	bf00      	nop
 810c246:	3710      	adds	r7, #16
 810c248:	46bd      	mov	sp, r7
 810c24a:	bd80      	pop	{r7, pc}

0810c24c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c24c:	b580      	push	{r7, lr}
 810c24e:	b084      	sub	sp, #16
 810c250:	af00      	add	r7, sp, #0
 810c252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c254:	687b      	ldr	r3, [r7, #4]
 810c256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c258:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810c25a:	68f8      	ldr	r0, [r7, #12]
 810c25c:	f7ff f818 	bl	810b290 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c260:	bf00      	nop
 810c262:	3710      	adds	r7, #16
 810c264:	46bd      	mov	sp, r7
 810c266:	bd80      	pop	{r7, pc}

0810c268 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810c268:	b580      	push	{r7, lr}
 810c26a:	b084      	sub	sp, #16
 810c26c:	af00      	add	r7, sp, #0
 810c26e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c270:	687b      	ldr	r3, [r7, #4]
 810c272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c274:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810c276:	687b      	ldr	r3, [r7, #4]
 810c278:	69db      	ldr	r3, [r3, #28]
 810c27a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c27e:	d02b      	beq.n	810c2d8 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810c280:	68fb      	ldr	r3, [r7, #12]
 810c282:	2200      	movs	r2, #0
 810c284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c288:	68fb      	ldr	r3, [r7, #12]
 810c28a:	681b      	ldr	r3, [r3, #0]
 810c28c:	681a      	ldr	r2, [r3, #0]
 810c28e:	68fb      	ldr	r3, [r7, #12]
 810c290:	681b      	ldr	r3, [r3, #0]
 810c292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810c296:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c298:	68fb      	ldr	r3, [r7, #12]
 810c29a:	681b      	ldr	r3, [r3, #0]
 810c29c:	689a      	ldr	r2, [r3, #8]
 810c29e:	68fb      	ldr	r3, [r7, #12]
 810c2a0:	681b      	ldr	r3, [r3, #0]
 810c2a2:	f022 0201 	bic.w	r2, r2, #1
 810c2a6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c2a8:	68fb      	ldr	r3, [r7, #12]
 810c2aa:	681b      	ldr	r3, [r3, #0]
 810c2ac:	689a      	ldr	r2, [r3, #8]
 810c2ae:	68fb      	ldr	r3, [r7, #12]
 810c2b0:	681b      	ldr	r3, [r3, #0]
 810c2b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c2b6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810c2b8:	68fb      	ldr	r3, [r7, #12]
 810c2ba:	2220      	movs	r2, #32
 810c2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c2c0:	68fb      	ldr	r3, [r7, #12]
 810c2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c2c4:	2b01      	cmp	r3, #1
 810c2c6:	d107      	bne.n	810c2d8 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c2c8:	68fb      	ldr	r3, [r7, #12]
 810c2ca:	681b      	ldr	r3, [r3, #0]
 810c2cc:	681a      	ldr	r2, [r3, #0]
 810c2ce:	68fb      	ldr	r3, [r7, #12]
 810c2d0:	681b      	ldr	r3, [r3, #0]
 810c2d2:	f022 0210 	bic.w	r2, r2, #16
 810c2d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c2d8:	68fb      	ldr	r3, [r7, #12]
 810c2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c2dc:	2b01      	cmp	r3, #1
 810c2de:	d107      	bne.n	810c2f0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810c2e0:	68fb      	ldr	r3, [r7, #12]
 810c2e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c2e6:	4619      	mov	r1, r3
 810c2e8:	68f8      	ldr	r0, [r7, #12]
 810c2ea:	f7fe ffef 	bl	810b2cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c2ee:	e002      	b.n	810c2f6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810c2f0:	68f8      	ldr	r0, [r7, #12]
 810c2f2:	f7f7 f817 	bl	8103324 <HAL_UART_RxCpltCallback>
}
 810c2f6:	bf00      	nop
 810c2f8:	3710      	adds	r7, #16
 810c2fa:	46bd      	mov	sp, r7
 810c2fc:	bd80      	pop	{r7, pc}

0810c2fe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810c2fe:	b580      	push	{r7, lr}
 810c300:	b084      	sub	sp, #16
 810c302:	af00      	add	r7, sp, #0
 810c304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c306:	687b      	ldr	r3, [r7, #4]
 810c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c30a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c30c:	68fb      	ldr	r3, [r7, #12]
 810c30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c310:	2b01      	cmp	r3, #1
 810c312:	d109      	bne.n	810c328 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810c314:	68fb      	ldr	r3, [r7, #12]
 810c316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c31a:	085b      	lsrs	r3, r3, #1
 810c31c:	b29b      	uxth	r3, r3
 810c31e:	4619      	mov	r1, r3
 810c320:	68f8      	ldr	r0, [r7, #12]
 810c322:	f7fe ffd3 	bl	810b2cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810c326:	e002      	b.n	810c32e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810c328:	68f8      	ldr	r0, [r7, #12]
 810c32a:	f7fe ffbb 	bl	810b2a4 <HAL_UART_RxHalfCpltCallback>
}
 810c32e:	bf00      	nop
 810c330:	3710      	adds	r7, #16
 810c332:	46bd      	mov	sp, r7
 810c334:	bd80      	pop	{r7, pc}

0810c336 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810c336:	b580      	push	{r7, lr}
 810c338:	b086      	sub	sp, #24
 810c33a:	af00      	add	r7, sp, #0
 810c33c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c33e:	687b      	ldr	r3, [r7, #4]
 810c340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c342:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810c344:	697b      	ldr	r3, [r7, #20]
 810c346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810c34a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810c34c:	697b      	ldr	r3, [r7, #20]
 810c34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810c352:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810c354:	697b      	ldr	r3, [r7, #20]
 810c356:	681b      	ldr	r3, [r3, #0]
 810c358:	689b      	ldr	r3, [r3, #8]
 810c35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c35e:	2b80      	cmp	r3, #128	; 0x80
 810c360:	d109      	bne.n	810c376 <UART_DMAError+0x40>
 810c362:	693b      	ldr	r3, [r7, #16]
 810c364:	2b21      	cmp	r3, #33	; 0x21
 810c366:	d106      	bne.n	810c376 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810c368:	697b      	ldr	r3, [r7, #20]
 810c36a:	2200      	movs	r2, #0
 810c36c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810c370:	6978      	ldr	r0, [r7, #20]
 810c372:	f7ff fef3 	bl	810c15c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810c376:	697b      	ldr	r3, [r7, #20]
 810c378:	681b      	ldr	r3, [r3, #0]
 810c37a:	689b      	ldr	r3, [r3, #8]
 810c37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c380:	2b40      	cmp	r3, #64	; 0x40
 810c382:	d109      	bne.n	810c398 <UART_DMAError+0x62>
 810c384:	68fb      	ldr	r3, [r7, #12]
 810c386:	2b22      	cmp	r3, #34	; 0x22
 810c388:	d106      	bne.n	810c398 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810c38a:	697b      	ldr	r3, [r7, #20]
 810c38c:	2200      	movs	r2, #0
 810c38e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810c392:	6978      	ldr	r0, [r7, #20]
 810c394:	f7ff ff00 	bl	810c198 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810c398:	697b      	ldr	r3, [r7, #20]
 810c39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c39e:	f043 0210 	orr.w	r2, r3, #16
 810c3a2:	697b      	ldr	r3, [r7, #20]
 810c3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c3a8:	6978      	ldr	r0, [r7, #20]
 810c3aa:	f7fe ff85 	bl	810b2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c3ae:	bf00      	nop
 810c3b0:	3718      	adds	r7, #24
 810c3b2:	46bd      	mov	sp, r7
 810c3b4:	bd80      	pop	{r7, pc}

0810c3b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810c3b6:	b580      	push	{r7, lr}
 810c3b8:	b084      	sub	sp, #16
 810c3ba:	af00      	add	r7, sp, #0
 810c3bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810c3be:	687b      	ldr	r3, [r7, #4]
 810c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c3c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810c3c4:	68fb      	ldr	r3, [r7, #12]
 810c3c6:	2200      	movs	r2, #0
 810c3c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810c3cc:	68fb      	ldr	r3, [r7, #12]
 810c3ce:	2200      	movs	r2, #0
 810c3d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810c3d4:	68f8      	ldr	r0, [r7, #12]
 810c3d6:	f7fe ff6f 	bl	810b2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c3da:	bf00      	nop
 810c3dc:	3710      	adds	r7, #16
 810c3de:	46bd      	mov	sp, r7
 810c3e0:	bd80      	pop	{r7, pc}

0810c3e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810c3e2:	b580      	push	{r7, lr}
 810c3e4:	b082      	sub	sp, #8
 810c3e6:	af00      	add	r7, sp, #0
 810c3e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810c3ea:	687b      	ldr	r3, [r7, #4]
 810c3ec:	681b      	ldr	r3, [r3, #0]
 810c3ee:	681a      	ldr	r2, [r3, #0]
 810c3f0:	687b      	ldr	r3, [r7, #4]
 810c3f2:	681b      	ldr	r3, [r3, #0]
 810c3f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c3f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810c3fa:	687b      	ldr	r3, [r7, #4]
 810c3fc:	2220      	movs	r2, #32
 810c3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810c402:	687b      	ldr	r3, [r7, #4]
 810c404:	2200      	movs	r2, #0
 810c406:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810c408:	6878      	ldr	r0, [r7, #4]
 810c40a:	f7f6 ff81 	bl	8103310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810c40e:	bf00      	nop
 810c410:	3708      	adds	r7, #8
 810c412:	46bd      	mov	sp, r7
 810c414:	bd80      	pop	{r7, pc}

0810c416 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810c416:	b480      	push	{r7}
 810c418:	b083      	sub	sp, #12
 810c41a:	af00      	add	r7, sp, #0
 810c41c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810c41e:	bf00      	nop
 810c420:	370c      	adds	r7, #12
 810c422:	46bd      	mov	sp, r7
 810c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c428:	4770      	bx	lr

0810c42a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810c42a:	b480      	push	{r7}
 810c42c:	b083      	sub	sp, #12
 810c42e:	af00      	add	r7, sp, #0
 810c430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810c432:	bf00      	nop
 810c434:	370c      	adds	r7, #12
 810c436:	46bd      	mov	sp, r7
 810c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c43c:	4770      	bx	lr

0810c43e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810c43e:	b480      	push	{r7}
 810c440:	b083      	sub	sp, #12
 810c442:	af00      	add	r7, sp, #0
 810c444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810c446:	bf00      	nop
 810c448:	370c      	adds	r7, #12
 810c44a:	46bd      	mov	sp, r7
 810c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c450:	4770      	bx	lr

0810c452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c452:	b480      	push	{r7}
 810c454:	b085      	sub	sp, #20
 810c456:	af00      	add	r7, sp, #0
 810c458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c45a:	687b      	ldr	r3, [r7, #4]
 810c45c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c460:	2b01      	cmp	r3, #1
 810c462:	d101      	bne.n	810c468 <HAL_UARTEx_DisableFifoMode+0x16>
 810c464:	2302      	movs	r3, #2
 810c466:	e027      	b.n	810c4b8 <HAL_UARTEx_DisableFifoMode+0x66>
 810c468:	687b      	ldr	r3, [r7, #4]
 810c46a:	2201      	movs	r2, #1
 810c46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	2224      	movs	r2, #36	; 0x24
 810c474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c478:	687b      	ldr	r3, [r7, #4]
 810c47a:	681b      	ldr	r3, [r3, #0]
 810c47c:	681b      	ldr	r3, [r3, #0]
 810c47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c480:	687b      	ldr	r3, [r7, #4]
 810c482:	681b      	ldr	r3, [r3, #0]
 810c484:	681a      	ldr	r2, [r3, #0]
 810c486:	687b      	ldr	r3, [r7, #4]
 810c488:	681b      	ldr	r3, [r3, #0]
 810c48a:	f022 0201 	bic.w	r2, r2, #1
 810c48e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c490:	68fb      	ldr	r3, [r7, #12]
 810c492:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810c496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c498:	687b      	ldr	r3, [r7, #4]
 810c49a:	2200      	movs	r2, #0
 810c49c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c49e:	687b      	ldr	r3, [r7, #4]
 810c4a0:	681b      	ldr	r3, [r3, #0]
 810c4a2:	68fa      	ldr	r2, [r7, #12]
 810c4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c4a6:	687b      	ldr	r3, [r7, #4]
 810c4a8:	2220      	movs	r2, #32
 810c4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c4ae:	687b      	ldr	r3, [r7, #4]
 810c4b0:	2200      	movs	r2, #0
 810c4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c4b6:	2300      	movs	r3, #0
}
 810c4b8:	4618      	mov	r0, r3
 810c4ba:	3714      	adds	r7, #20
 810c4bc:	46bd      	mov	sp, r7
 810c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4c2:	4770      	bx	lr

0810c4c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c4c4:	b580      	push	{r7, lr}
 810c4c6:	b084      	sub	sp, #16
 810c4c8:	af00      	add	r7, sp, #0
 810c4ca:	6078      	str	r0, [r7, #4]
 810c4cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c4ce:	687b      	ldr	r3, [r7, #4]
 810c4d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c4d4:	2b01      	cmp	r3, #1
 810c4d6:	d101      	bne.n	810c4dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c4d8:	2302      	movs	r3, #2
 810c4da:	e02d      	b.n	810c538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c4dc:	687b      	ldr	r3, [r7, #4]
 810c4de:	2201      	movs	r2, #1
 810c4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c4e4:	687b      	ldr	r3, [r7, #4]
 810c4e6:	2224      	movs	r2, #36	; 0x24
 810c4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c4ec:	687b      	ldr	r3, [r7, #4]
 810c4ee:	681b      	ldr	r3, [r3, #0]
 810c4f0:	681b      	ldr	r3, [r3, #0]
 810c4f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c4f4:	687b      	ldr	r3, [r7, #4]
 810c4f6:	681b      	ldr	r3, [r3, #0]
 810c4f8:	681a      	ldr	r2, [r3, #0]
 810c4fa:	687b      	ldr	r3, [r7, #4]
 810c4fc:	681b      	ldr	r3, [r3, #0]
 810c4fe:	f022 0201 	bic.w	r2, r2, #1
 810c502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c504:	687b      	ldr	r3, [r7, #4]
 810c506:	681b      	ldr	r3, [r3, #0]
 810c508:	689b      	ldr	r3, [r3, #8]
 810c50a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	681b      	ldr	r3, [r3, #0]
 810c512:	683a      	ldr	r2, [r7, #0]
 810c514:	430a      	orrs	r2, r1
 810c516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c518:	6878      	ldr	r0, [r7, #4]
 810c51a:	f000 f84f 	bl	810c5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c51e:	687b      	ldr	r3, [r7, #4]
 810c520:	681b      	ldr	r3, [r3, #0]
 810c522:	68fa      	ldr	r2, [r7, #12]
 810c524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c526:	687b      	ldr	r3, [r7, #4]
 810c528:	2220      	movs	r2, #32
 810c52a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c52e:	687b      	ldr	r3, [r7, #4]
 810c530:	2200      	movs	r2, #0
 810c532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c536:	2300      	movs	r3, #0
}
 810c538:	4618      	mov	r0, r3
 810c53a:	3710      	adds	r7, #16
 810c53c:	46bd      	mov	sp, r7
 810c53e:	bd80      	pop	{r7, pc}

0810c540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c540:	b580      	push	{r7, lr}
 810c542:	b084      	sub	sp, #16
 810c544:	af00      	add	r7, sp, #0
 810c546:	6078      	str	r0, [r7, #4]
 810c548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c54a:	687b      	ldr	r3, [r7, #4]
 810c54c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c550:	2b01      	cmp	r3, #1
 810c552:	d101      	bne.n	810c558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c554:	2302      	movs	r3, #2
 810c556:	e02d      	b.n	810c5b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c558:	687b      	ldr	r3, [r7, #4]
 810c55a:	2201      	movs	r2, #1
 810c55c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810c560:	687b      	ldr	r3, [r7, #4]
 810c562:	2224      	movs	r2, #36	; 0x24
 810c564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c568:	687b      	ldr	r3, [r7, #4]
 810c56a:	681b      	ldr	r3, [r3, #0]
 810c56c:	681b      	ldr	r3, [r3, #0]
 810c56e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c570:	687b      	ldr	r3, [r7, #4]
 810c572:	681b      	ldr	r3, [r3, #0]
 810c574:	681a      	ldr	r2, [r3, #0]
 810c576:	687b      	ldr	r3, [r7, #4]
 810c578:	681b      	ldr	r3, [r3, #0]
 810c57a:	f022 0201 	bic.w	r2, r2, #1
 810c57e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c580:	687b      	ldr	r3, [r7, #4]
 810c582:	681b      	ldr	r3, [r3, #0]
 810c584:	689b      	ldr	r3, [r3, #8]
 810c586:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810c58a:	687b      	ldr	r3, [r7, #4]
 810c58c:	681b      	ldr	r3, [r3, #0]
 810c58e:	683a      	ldr	r2, [r7, #0]
 810c590:	430a      	orrs	r2, r1
 810c592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c594:	6878      	ldr	r0, [r7, #4]
 810c596:	f000 f811 	bl	810c5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c59a:	687b      	ldr	r3, [r7, #4]
 810c59c:	681b      	ldr	r3, [r3, #0]
 810c59e:	68fa      	ldr	r2, [r7, #12]
 810c5a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c5a2:	687b      	ldr	r3, [r7, #4]
 810c5a4:	2220      	movs	r2, #32
 810c5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c5aa:	687b      	ldr	r3, [r7, #4]
 810c5ac:	2200      	movs	r2, #0
 810c5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810c5b2:	2300      	movs	r3, #0
}
 810c5b4:	4618      	mov	r0, r3
 810c5b6:	3710      	adds	r7, #16
 810c5b8:	46bd      	mov	sp, r7
 810c5ba:	bd80      	pop	{r7, pc}

0810c5bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c5bc:	b480      	push	{r7}
 810c5be:	b085      	sub	sp, #20
 810c5c0:	af00      	add	r7, sp, #0
 810c5c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c5c4:	687b      	ldr	r3, [r7, #4]
 810c5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810c5c8:	2b00      	cmp	r3, #0
 810c5ca:	d108      	bne.n	810c5de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c5cc:	687b      	ldr	r3, [r7, #4]
 810c5ce:	2201      	movs	r2, #1
 810c5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810c5d4:	687b      	ldr	r3, [r7, #4]
 810c5d6:	2201      	movs	r2, #1
 810c5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c5dc:	e031      	b.n	810c642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c5de:	2310      	movs	r3, #16
 810c5e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c5e2:	2310      	movs	r3, #16
 810c5e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c5e6:	687b      	ldr	r3, [r7, #4]
 810c5e8:	681b      	ldr	r3, [r3, #0]
 810c5ea:	689b      	ldr	r3, [r3, #8]
 810c5ec:	0e5b      	lsrs	r3, r3, #25
 810c5ee:	b2db      	uxtb	r3, r3
 810c5f0:	f003 0307 	and.w	r3, r3, #7
 810c5f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c5f6:	687b      	ldr	r3, [r7, #4]
 810c5f8:	681b      	ldr	r3, [r3, #0]
 810c5fa:	689b      	ldr	r3, [r3, #8]
 810c5fc:	0f5b      	lsrs	r3, r3, #29
 810c5fe:	b2db      	uxtb	r3, r3
 810c600:	f003 0307 	and.w	r3, r3, #7
 810c604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c606:	7bbb      	ldrb	r3, [r7, #14]
 810c608:	7b3a      	ldrb	r2, [r7, #12]
 810c60a:	4911      	ldr	r1, [pc, #68]	; (810c650 <UARTEx_SetNbDataToProcess+0x94>)
 810c60c:	5c8a      	ldrb	r2, [r1, r2]
 810c60e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c612:	7b3a      	ldrb	r2, [r7, #12]
 810c614:	490f      	ldr	r1, [pc, #60]	; (810c654 <UARTEx_SetNbDataToProcess+0x98>)
 810c616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c618:	fb93 f3f2 	sdiv	r3, r3, r2
 810c61c:	b29a      	uxth	r2, r3
 810c61e:	687b      	ldr	r3, [r7, #4]
 810c620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c624:	7bfb      	ldrb	r3, [r7, #15]
 810c626:	7b7a      	ldrb	r2, [r7, #13]
 810c628:	4909      	ldr	r1, [pc, #36]	; (810c650 <UARTEx_SetNbDataToProcess+0x94>)
 810c62a:	5c8a      	ldrb	r2, [r1, r2]
 810c62c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c630:	7b7a      	ldrb	r2, [r7, #13]
 810c632:	4908      	ldr	r1, [pc, #32]	; (810c654 <UARTEx_SetNbDataToProcess+0x98>)
 810c634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c636:	fb93 f3f2 	sdiv	r3, r3, r2
 810c63a:	b29a      	uxth	r2, r3
 810c63c:	687b      	ldr	r3, [r7, #4]
 810c63e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810c642:	bf00      	nop
 810c644:	3714      	adds	r7, #20
 810c646:	46bd      	mov	sp, r7
 810c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c64c:	4770      	bx	lr
 810c64e:	bf00      	nop
 810c650:	0810d6fc 	.word	0x0810d6fc
 810c654:	0810d704 	.word	0x0810d704

0810c658 <__errno>:
 810c658:	4b01      	ldr	r3, [pc, #4]	; (810c660 <__errno+0x8>)
 810c65a:	6818      	ldr	r0, [r3, #0]
 810c65c:	4770      	bx	lr
 810c65e:	bf00      	nop
 810c660:	10000024 	.word	0x10000024

0810c664 <__libc_init_array>:
 810c664:	b570      	push	{r4, r5, r6, lr}
 810c666:	4d0d      	ldr	r5, [pc, #52]	; (810c69c <__libc_init_array+0x38>)
 810c668:	4c0d      	ldr	r4, [pc, #52]	; (810c6a0 <__libc_init_array+0x3c>)
 810c66a:	1b64      	subs	r4, r4, r5
 810c66c:	10a4      	asrs	r4, r4, #2
 810c66e:	2600      	movs	r6, #0
 810c670:	42a6      	cmp	r6, r4
 810c672:	d109      	bne.n	810c688 <__libc_init_array+0x24>
 810c674:	4d0b      	ldr	r5, [pc, #44]	; (810c6a4 <__libc_init_array+0x40>)
 810c676:	4c0c      	ldr	r4, [pc, #48]	; (810c6a8 <__libc_init_array+0x44>)
 810c678:	f000 ffd4 	bl	810d624 <_init>
 810c67c:	1b64      	subs	r4, r4, r5
 810c67e:	10a4      	asrs	r4, r4, #2
 810c680:	2600      	movs	r6, #0
 810c682:	42a6      	cmp	r6, r4
 810c684:	d105      	bne.n	810c692 <__libc_init_array+0x2e>
 810c686:	bd70      	pop	{r4, r5, r6, pc}
 810c688:	f855 3b04 	ldr.w	r3, [r5], #4
 810c68c:	4798      	blx	r3
 810c68e:	3601      	adds	r6, #1
 810c690:	e7ee      	b.n	810c670 <__libc_init_array+0xc>
 810c692:	f855 3b04 	ldr.w	r3, [r5], #4
 810c696:	4798      	blx	r3
 810c698:	3601      	adds	r6, #1
 810c69a:	e7f2      	b.n	810c682 <__libc_init_array+0x1e>
 810c69c:	0810d758 	.word	0x0810d758
 810c6a0:	0810d758 	.word	0x0810d758
 810c6a4:	0810d758 	.word	0x0810d758
 810c6a8:	0810d75c 	.word	0x0810d75c

0810c6ac <memset>:
 810c6ac:	4402      	add	r2, r0
 810c6ae:	4603      	mov	r3, r0
 810c6b0:	4293      	cmp	r3, r2
 810c6b2:	d100      	bne.n	810c6b6 <memset+0xa>
 810c6b4:	4770      	bx	lr
 810c6b6:	f803 1b01 	strb.w	r1, [r3], #1
 810c6ba:	e7f9      	b.n	810c6b0 <memset+0x4>

0810c6bc <pow>:
 810c6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c6c0:	ec59 8b10 	vmov	r8, r9, d0
 810c6c4:	ec57 6b11 	vmov	r6, r7, d1
 810c6c8:	f000 f8a6 	bl	810c818 <__ieee754_pow>
 810c6cc:	4b4e      	ldr	r3, [pc, #312]	; (810c808 <pow+0x14c>)
 810c6ce:	f993 3000 	ldrsb.w	r3, [r3]
 810c6d2:	3301      	adds	r3, #1
 810c6d4:	ec55 4b10 	vmov	r4, r5, d0
 810c6d8:	d015      	beq.n	810c706 <pow+0x4a>
 810c6da:	4632      	mov	r2, r6
 810c6dc:	463b      	mov	r3, r7
 810c6de:	4630      	mov	r0, r6
 810c6e0:	4639      	mov	r1, r7
 810c6e2:	f7f4 fa4f 	bl	8100b84 <__aeabi_dcmpun>
 810c6e6:	b970      	cbnz	r0, 810c706 <pow+0x4a>
 810c6e8:	4642      	mov	r2, r8
 810c6ea:	464b      	mov	r3, r9
 810c6ec:	4640      	mov	r0, r8
 810c6ee:	4649      	mov	r1, r9
 810c6f0:	f7f4 fa48 	bl	8100b84 <__aeabi_dcmpun>
 810c6f4:	2200      	movs	r2, #0
 810c6f6:	2300      	movs	r3, #0
 810c6f8:	b148      	cbz	r0, 810c70e <pow+0x52>
 810c6fa:	4630      	mov	r0, r6
 810c6fc:	4639      	mov	r1, r7
 810c6fe:	f7f4 fa0f 	bl	8100b20 <__aeabi_dcmpeq>
 810c702:	2800      	cmp	r0, #0
 810c704:	d17d      	bne.n	810c802 <pow+0x146>
 810c706:	ec45 4b10 	vmov	d0, r4, r5
 810c70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c70e:	4640      	mov	r0, r8
 810c710:	4649      	mov	r1, r9
 810c712:	f7f4 fa05 	bl	8100b20 <__aeabi_dcmpeq>
 810c716:	b1e0      	cbz	r0, 810c752 <pow+0x96>
 810c718:	2200      	movs	r2, #0
 810c71a:	2300      	movs	r3, #0
 810c71c:	4630      	mov	r0, r6
 810c71e:	4639      	mov	r1, r7
 810c720:	f7f4 f9fe 	bl	8100b20 <__aeabi_dcmpeq>
 810c724:	2800      	cmp	r0, #0
 810c726:	d16c      	bne.n	810c802 <pow+0x146>
 810c728:	ec47 6b10 	vmov	d0, r6, r7
 810c72c:	f000 fe53 	bl	810d3d6 <finite>
 810c730:	2800      	cmp	r0, #0
 810c732:	d0e8      	beq.n	810c706 <pow+0x4a>
 810c734:	2200      	movs	r2, #0
 810c736:	2300      	movs	r3, #0
 810c738:	4630      	mov	r0, r6
 810c73a:	4639      	mov	r1, r7
 810c73c:	f7f4 f9fa 	bl	8100b34 <__aeabi_dcmplt>
 810c740:	2800      	cmp	r0, #0
 810c742:	d0e0      	beq.n	810c706 <pow+0x4a>
 810c744:	f7ff ff88 	bl	810c658 <__errno>
 810c748:	2321      	movs	r3, #33	; 0x21
 810c74a:	6003      	str	r3, [r0, #0]
 810c74c:	2400      	movs	r4, #0
 810c74e:	4d2f      	ldr	r5, [pc, #188]	; (810c80c <pow+0x150>)
 810c750:	e7d9      	b.n	810c706 <pow+0x4a>
 810c752:	ec45 4b10 	vmov	d0, r4, r5
 810c756:	f000 fe3e 	bl	810d3d6 <finite>
 810c75a:	bbb8      	cbnz	r0, 810c7cc <pow+0x110>
 810c75c:	ec49 8b10 	vmov	d0, r8, r9
 810c760:	f000 fe39 	bl	810d3d6 <finite>
 810c764:	b390      	cbz	r0, 810c7cc <pow+0x110>
 810c766:	ec47 6b10 	vmov	d0, r6, r7
 810c76a:	f000 fe34 	bl	810d3d6 <finite>
 810c76e:	b368      	cbz	r0, 810c7cc <pow+0x110>
 810c770:	4622      	mov	r2, r4
 810c772:	462b      	mov	r3, r5
 810c774:	4620      	mov	r0, r4
 810c776:	4629      	mov	r1, r5
 810c778:	f7f4 fa04 	bl	8100b84 <__aeabi_dcmpun>
 810c77c:	b160      	cbz	r0, 810c798 <pow+0xdc>
 810c77e:	f7ff ff6b 	bl	810c658 <__errno>
 810c782:	2321      	movs	r3, #33	; 0x21
 810c784:	6003      	str	r3, [r0, #0]
 810c786:	2200      	movs	r2, #0
 810c788:	2300      	movs	r3, #0
 810c78a:	4610      	mov	r0, r2
 810c78c:	4619      	mov	r1, r3
 810c78e:	f7f4 f889 	bl	81008a4 <__aeabi_ddiv>
 810c792:	4604      	mov	r4, r0
 810c794:	460d      	mov	r5, r1
 810c796:	e7b6      	b.n	810c706 <pow+0x4a>
 810c798:	f7ff ff5e 	bl	810c658 <__errno>
 810c79c:	2322      	movs	r3, #34	; 0x22
 810c79e:	6003      	str	r3, [r0, #0]
 810c7a0:	2200      	movs	r2, #0
 810c7a2:	2300      	movs	r3, #0
 810c7a4:	4640      	mov	r0, r8
 810c7a6:	4649      	mov	r1, r9
 810c7a8:	f7f4 f9c4 	bl	8100b34 <__aeabi_dcmplt>
 810c7ac:	2400      	movs	r4, #0
 810c7ae:	b158      	cbz	r0, 810c7c8 <pow+0x10c>
 810c7b0:	ec47 6b10 	vmov	d0, r6, r7
 810c7b4:	f000 fe24 	bl	810d400 <rint>
 810c7b8:	4632      	mov	r2, r6
 810c7ba:	ec51 0b10 	vmov	r0, r1, d0
 810c7be:	463b      	mov	r3, r7
 810c7c0:	f7f4 f9ae 	bl	8100b20 <__aeabi_dcmpeq>
 810c7c4:	2800      	cmp	r0, #0
 810c7c6:	d0c2      	beq.n	810c74e <pow+0x92>
 810c7c8:	4d11      	ldr	r5, [pc, #68]	; (810c810 <pow+0x154>)
 810c7ca:	e79c      	b.n	810c706 <pow+0x4a>
 810c7cc:	2200      	movs	r2, #0
 810c7ce:	2300      	movs	r3, #0
 810c7d0:	4620      	mov	r0, r4
 810c7d2:	4629      	mov	r1, r5
 810c7d4:	f7f4 f9a4 	bl	8100b20 <__aeabi_dcmpeq>
 810c7d8:	2800      	cmp	r0, #0
 810c7da:	d094      	beq.n	810c706 <pow+0x4a>
 810c7dc:	ec49 8b10 	vmov	d0, r8, r9
 810c7e0:	f000 fdf9 	bl	810d3d6 <finite>
 810c7e4:	2800      	cmp	r0, #0
 810c7e6:	d08e      	beq.n	810c706 <pow+0x4a>
 810c7e8:	ec47 6b10 	vmov	d0, r6, r7
 810c7ec:	f000 fdf3 	bl	810d3d6 <finite>
 810c7f0:	2800      	cmp	r0, #0
 810c7f2:	d088      	beq.n	810c706 <pow+0x4a>
 810c7f4:	f7ff ff30 	bl	810c658 <__errno>
 810c7f8:	2322      	movs	r3, #34	; 0x22
 810c7fa:	6003      	str	r3, [r0, #0]
 810c7fc:	2400      	movs	r4, #0
 810c7fe:	2500      	movs	r5, #0
 810c800:	e781      	b.n	810c706 <pow+0x4a>
 810c802:	4d04      	ldr	r5, [pc, #16]	; (810c814 <pow+0x158>)
 810c804:	2400      	movs	r4, #0
 810c806:	e77e      	b.n	810c706 <pow+0x4a>
 810c808:	10000088 	.word	0x10000088
 810c80c:	fff00000 	.word	0xfff00000
 810c810:	7ff00000 	.word	0x7ff00000
 810c814:	3ff00000 	.word	0x3ff00000

0810c818 <__ieee754_pow>:
 810c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c81c:	ed2d 8b06 	vpush	{d8-d10}
 810c820:	b08d      	sub	sp, #52	; 0x34
 810c822:	ed8d 1b02 	vstr	d1, [sp, #8]
 810c826:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810c82a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810c82e:	ea56 0100 	orrs.w	r1, r6, r0
 810c832:	ec53 2b10 	vmov	r2, r3, d0
 810c836:	f000 84d1 	beq.w	810d1dc <__ieee754_pow+0x9c4>
 810c83a:	497f      	ldr	r1, [pc, #508]	; (810ca38 <__ieee754_pow+0x220>)
 810c83c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810c840:	428c      	cmp	r4, r1
 810c842:	ee10 8a10 	vmov	r8, s0
 810c846:	4699      	mov	r9, r3
 810c848:	dc09      	bgt.n	810c85e <__ieee754_pow+0x46>
 810c84a:	d103      	bne.n	810c854 <__ieee754_pow+0x3c>
 810c84c:	b97a      	cbnz	r2, 810c86e <__ieee754_pow+0x56>
 810c84e:	42a6      	cmp	r6, r4
 810c850:	dd02      	ble.n	810c858 <__ieee754_pow+0x40>
 810c852:	e00c      	b.n	810c86e <__ieee754_pow+0x56>
 810c854:	428e      	cmp	r6, r1
 810c856:	dc02      	bgt.n	810c85e <__ieee754_pow+0x46>
 810c858:	428e      	cmp	r6, r1
 810c85a:	d110      	bne.n	810c87e <__ieee754_pow+0x66>
 810c85c:	b178      	cbz	r0, 810c87e <__ieee754_pow+0x66>
 810c85e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c862:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c866:	ea54 0308 	orrs.w	r3, r4, r8
 810c86a:	f000 84b7 	beq.w	810d1dc <__ieee754_pow+0x9c4>
 810c86e:	4873      	ldr	r0, [pc, #460]	; (810ca3c <__ieee754_pow+0x224>)
 810c870:	b00d      	add	sp, #52	; 0x34
 810c872:	ecbd 8b06 	vpop	{d8-d10}
 810c876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c87a:	f000 bdb9 	b.w	810d3f0 <nan>
 810c87e:	f1b9 0f00 	cmp.w	r9, #0
 810c882:	da36      	bge.n	810c8f2 <__ieee754_pow+0xda>
 810c884:	496e      	ldr	r1, [pc, #440]	; (810ca40 <__ieee754_pow+0x228>)
 810c886:	428e      	cmp	r6, r1
 810c888:	dc51      	bgt.n	810c92e <__ieee754_pow+0x116>
 810c88a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810c88e:	428e      	cmp	r6, r1
 810c890:	f340 84af 	ble.w	810d1f2 <__ieee754_pow+0x9da>
 810c894:	1531      	asrs	r1, r6, #20
 810c896:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810c89a:	2914      	cmp	r1, #20
 810c89c:	dd0f      	ble.n	810c8be <__ieee754_pow+0xa6>
 810c89e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810c8a2:	fa20 fc01 	lsr.w	ip, r0, r1
 810c8a6:	fa0c f101 	lsl.w	r1, ip, r1
 810c8aa:	4281      	cmp	r1, r0
 810c8ac:	f040 84a1 	bne.w	810d1f2 <__ieee754_pow+0x9da>
 810c8b0:	f00c 0c01 	and.w	ip, ip, #1
 810c8b4:	f1cc 0102 	rsb	r1, ip, #2
 810c8b8:	9100      	str	r1, [sp, #0]
 810c8ba:	b180      	cbz	r0, 810c8de <__ieee754_pow+0xc6>
 810c8bc:	e059      	b.n	810c972 <__ieee754_pow+0x15a>
 810c8be:	2800      	cmp	r0, #0
 810c8c0:	d155      	bne.n	810c96e <__ieee754_pow+0x156>
 810c8c2:	f1c1 0114 	rsb	r1, r1, #20
 810c8c6:	fa46 fc01 	asr.w	ip, r6, r1
 810c8ca:	fa0c f101 	lsl.w	r1, ip, r1
 810c8ce:	42b1      	cmp	r1, r6
 810c8d0:	f040 848c 	bne.w	810d1ec <__ieee754_pow+0x9d4>
 810c8d4:	f00c 0c01 	and.w	ip, ip, #1
 810c8d8:	f1cc 0102 	rsb	r1, ip, #2
 810c8dc:	9100      	str	r1, [sp, #0]
 810c8de:	4959      	ldr	r1, [pc, #356]	; (810ca44 <__ieee754_pow+0x22c>)
 810c8e0:	428e      	cmp	r6, r1
 810c8e2:	d12d      	bne.n	810c940 <__ieee754_pow+0x128>
 810c8e4:	2f00      	cmp	r7, #0
 810c8e6:	da79      	bge.n	810c9dc <__ieee754_pow+0x1c4>
 810c8e8:	4956      	ldr	r1, [pc, #344]	; (810ca44 <__ieee754_pow+0x22c>)
 810c8ea:	2000      	movs	r0, #0
 810c8ec:	f7f3 ffda 	bl	81008a4 <__aeabi_ddiv>
 810c8f0:	e016      	b.n	810c920 <__ieee754_pow+0x108>
 810c8f2:	2100      	movs	r1, #0
 810c8f4:	9100      	str	r1, [sp, #0]
 810c8f6:	2800      	cmp	r0, #0
 810c8f8:	d13b      	bne.n	810c972 <__ieee754_pow+0x15a>
 810c8fa:	494f      	ldr	r1, [pc, #316]	; (810ca38 <__ieee754_pow+0x220>)
 810c8fc:	428e      	cmp	r6, r1
 810c8fe:	d1ee      	bne.n	810c8de <__ieee754_pow+0xc6>
 810c900:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810c904:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810c908:	ea53 0308 	orrs.w	r3, r3, r8
 810c90c:	f000 8466 	beq.w	810d1dc <__ieee754_pow+0x9c4>
 810c910:	4b4d      	ldr	r3, [pc, #308]	; (810ca48 <__ieee754_pow+0x230>)
 810c912:	429c      	cmp	r4, r3
 810c914:	dd0d      	ble.n	810c932 <__ieee754_pow+0x11a>
 810c916:	2f00      	cmp	r7, #0
 810c918:	f280 8464 	bge.w	810d1e4 <__ieee754_pow+0x9cc>
 810c91c:	2000      	movs	r0, #0
 810c91e:	2100      	movs	r1, #0
 810c920:	ec41 0b10 	vmov	d0, r0, r1
 810c924:	b00d      	add	sp, #52	; 0x34
 810c926:	ecbd 8b06 	vpop	{d8-d10}
 810c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c92e:	2102      	movs	r1, #2
 810c930:	e7e0      	b.n	810c8f4 <__ieee754_pow+0xdc>
 810c932:	2f00      	cmp	r7, #0
 810c934:	daf2      	bge.n	810c91c <__ieee754_pow+0x104>
 810c936:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810c93a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810c93e:	e7ef      	b.n	810c920 <__ieee754_pow+0x108>
 810c940:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810c944:	d104      	bne.n	810c950 <__ieee754_pow+0x138>
 810c946:	4610      	mov	r0, r2
 810c948:	4619      	mov	r1, r3
 810c94a:	f7f3 fe81 	bl	8100650 <__aeabi_dmul>
 810c94e:	e7e7      	b.n	810c920 <__ieee754_pow+0x108>
 810c950:	493e      	ldr	r1, [pc, #248]	; (810ca4c <__ieee754_pow+0x234>)
 810c952:	428f      	cmp	r7, r1
 810c954:	d10d      	bne.n	810c972 <__ieee754_pow+0x15a>
 810c956:	f1b9 0f00 	cmp.w	r9, #0
 810c95a:	db0a      	blt.n	810c972 <__ieee754_pow+0x15a>
 810c95c:	ec43 2b10 	vmov	d0, r2, r3
 810c960:	b00d      	add	sp, #52	; 0x34
 810c962:	ecbd 8b06 	vpop	{d8-d10}
 810c966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c96a:	f000 bc77 	b.w	810d25c <__ieee754_sqrt>
 810c96e:	2100      	movs	r1, #0
 810c970:	9100      	str	r1, [sp, #0]
 810c972:	ec43 2b10 	vmov	d0, r2, r3
 810c976:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c97a:	f000 fd23 	bl	810d3c4 <fabs>
 810c97e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c982:	ec51 0b10 	vmov	r0, r1, d0
 810c986:	f1b8 0f00 	cmp.w	r8, #0
 810c98a:	d12a      	bne.n	810c9e2 <__ieee754_pow+0x1ca>
 810c98c:	b12c      	cbz	r4, 810c99a <__ieee754_pow+0x182>
 810c98e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810ca44 <__ieee754_pow+0x22c>
 810c992:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810c996:	45e6      	cmp	lr, ip
 810c998:	d123      	bne.n	810c9e2 <__ieee754_pow+0x1ca>
 810c99a:	2f00      	cmp	r7, #0
 810c99c:	da05      	bge.n	810c9aa <__ieee754_pow+0x192>
 810c99e:	4602      	mov	r2, r0
 810c9a0:	460b      	mov	r3, r1
 810c9a2:	2000      	movs	r0, #0
 810c9a4:	4927      	ldr	r1, [pc, #156]	; (810ca44 <__ieee754_pow+0x22c>)
 810c9a6:	f7f3 ff7d 	bl	81008a4 <__aeabi_ddiv>
 810c9aa:	f1b9 0f00 	cmp.w	r9, #0
 810c9ae:	dab7      	bge.n	810c920 <__ieee754_pow+0x108>
 810c9b0:	9b00      	ldr	r3, [sp, #0]
 810c9b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c9b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c9ba:	4323      	orrs	r3, r4
 810c9bc:	d108      	bne.n	810c9d0 <__ieee754_pow+0x1b8>
 810c9be:	4602      	mov	r2, r0
 810c9c0:	460b      	mov	r3, r1
 810c9c2:	4610      	mov	r0, r2
 810c9c4:	4619      	mov	r1, r3
 810c9c6:	f7f3 fc8b 	bl	81002e0 <__aeabi_dsub>
 810c9ca:	4602      	mov	r2, r0
 810c9cc:	460b      	mov	r3, r1
 810c9ce:	e78d      	b.n	810c8ec <__ieee754_pow+0xd4>
 810c9d0:	9b00      	ldr	r3, [sp, #0]
 810c9d2:	2b01      	cmp	r3, #1
 810c9d4:	d1a4      	bne.n	810c920 <__ieee754_pow+0x108>
 810c9d6:	4602      	mov	r2, r0
 810c9d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c9dc:	4610      	mov	r0, r2
 810c9de:	4619      	mov	r1, r3
 810c9e0:	e79e      	b.n	810c920 <__ieee754_pow+0x108>
 810c9e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810c9e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 810c9ea:	950a      	str	r5, [sp, #40]	; 0x28
 810c9ec:	9d00      	ldr	r5, [sp, #0]
 810c9ee:	46ac      	mov	ip, r5
 810c9f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810c9f2:	ea5c 0505 	orrs.w	r5, ip, r5
 810c9f6:	d0e4      	beq.n	810c9c2 <__ieee754_pow+0x1aa>
 810c9f8:	4b15      	ldr	r3, [pc, #84]	; (810ca50 <__ieee754_pow+0x238>)
 810c9fa:	429e      	cmp	r6, r3
 810c9fc:	f340 80fc 	ble.w	810cbf8 <__ieee754_pow+0x3e0>
 810ca00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810ca04:	429e      	cmp	r6, r3
 810ca06:	4b10      	ldr	r3, [pc, #64]	; (810ca48 <__ieee754_pow+0x230>)
 810ca08:	dd07      	ble.n	810ca1a <__ieee754_pow+0x202>
 810ca0a:	429c      	cmp	r4, r3
 810ca0c:	dc0a      	bgt.n	810ca24 <__ieee754_pow+0x20c>
 810ca0e:	2f00      	cmp	r7, #0
 810ca10:	da84      	bge.n	810c91c <__ieee754_pow+0x104>
 810ca12:	a307      	add	r3, pc, #28	; (adr r3, 810ca30 <__ieee754_pow+0x218>)
 810ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca18:	e795      	b.n	810c946 <__ieee754_pow+0x12e>
 810ca1a:	429c      	cmp	r4, r3
 810ca1c:	dbf7      	blt.n	810ca0e <__ieee754_pow+0x1f6>
 810ca1e:	4b09      	ldr	r3, [pc, #36]	; (810ca44 <__ieee754_pow+0x22c>)
 810ca20:	429c      	cmp	r4, r3
 810ca22:	dd17      	ble.n	810ca54 <__ieee754_pow+0x23c>
 810ca24:	2f00      	cmp	r7, #0
 810ca26:	dcf4      	bgt.n	810ca12 <__ieee754_pow+0x1fa>
 810ca28:	e778      	b.n	810c91c <__ieee754_pow+0x104>
 810ca2a:	bf00      	nop
 810ca2c:	f3af 8000 	nop.w
 810ca30:	8800759c 	.word	0x8800759c
 810ca34:	7e37e43c 	.word	0x7e37e43c
 810ca38:	7ff00000 	.word	0x7ff00000
 810ca3c:	0810d70c 	.word	0x0810d70c
 810ca40:	433fffff 	.word	0x433fffff
 810ca44:	3ff00000 	.word	0x3ff00000
 810ca48:	3fefffff 	.word	0x3fefffff
 810ca4c:	3fe00000 	.word	0x3fe00000
 810ca50:	41e00000 	.word	0x41e00000
 810ca54:	4b64      	ldr	r3, [pc, #400]	; (810cbe8 <__ieee754_pow+0x3d0>)
 810ca56:	2200      	movs	r2, #0
 810ca58:	f7f3 fc42 	bl	81002e0 <__aeabi_dsub>
 810ca5c:	a356      	add	r3, pc, #344	; (adr r3, 810cbb8 <__ieee754_pow+0x3a0>)
 810ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca62:	4604      	mov	r4, r0
 810ca64:	460d      	mov	r5, r1
 810ca66:	f7f3 fdf3 	bl	8100650 <__aeabi_dmul>
 810ca6a:	a355      	add	r3, pc, #340	; (adr r3, 810cbc0 <__ieee754_pow+0x3a8>)
 810ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca70:	4606      	mov	r6, r0
 810ca72:	460f      	mov	r7, r1
 810ca74:	4620      	mov	r0, r4
 810ca76:	4629      	mov	r1, r5
 810ca78:	f7f3 fdea 	bl	8100650 <__aeabi_dmul>
 810ca7c:	4b5b      	ldr	r3, [pc, #364]	; (810cbec <__ieee754_pow+0x3d4>)
 810ca7e:	4682      	mov	sl, r0
 810ca80:	468b      	mov	fp, r1
 810ca82:	2200      	movs	r2, #0
 810ca84:	4620      	mov	r0, r4
 810ca86:	4629      	mov	r1, r5
 810ca88:	f7f3 fde2 	bl	8100650 <__aeabi_dmul>
 810ca8c:	4602      	mov	r2, r0
 810ca8e:	460b      	mov	r3, r1
 810ca90:	a14d      	add	r1, pc, #308	; (adr r1, 810cbc8 <__ieee754_pow+0x3b0>)
 810ca92:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ca96:	f7f3 fc23 	bl	81002e0 <__aeabi_dsub>
 810ca9a:	4622      	mov	r2, r4
 810ca9c:	462b      	mov	r3, r5
 810ca9e:	f7f3 fdd7 	bl	8100650 <__aeabi_dmul>
 810caa2:	4602      	mov	r2, r0
 810caa4:	460b      	mov	r3, r1
 810caa6:	2000      	movs	r0, #0
 810caa8:	4951      	ldr	r1, [pc, #324]	; (810cbf0 <__ieee754_pow+0x3d8>)
 810caaa:	f7f3 fc19 	bl	81002e0 <__aeabi_dsub>
 810caae:	4622      	mov	r2, r4
 810cab0:	4680      	mov	r8, r0
 810cab2:	4689      	mov	r9, r1
 810cab4:	462b      	mov	r3, r5
 810cab6:	4620      	mov	r0, r4
 810cab8:	4629      	mov	r1, r5
 810caba:	f7f3 fdc9 	bl	8100650 <__aeabi_dmul>
 810cabe:	4602      	mov	r2, r0
 810cac0:	460b      	mov	r3, r1
 810cac2:	4640      	mov	r0, r8
 810cac4:	4649      	mov	r1, r9
 810cac6:	f7f3 fdc3 	bl	8100650 <__aeabi_dmul>
 810caca:	a341      	add	r3, pc, #260	; (adr r3, 810cbd0 <__ieee754_pow+0x3b8>)
 810cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cad0:	f7f3 fdbe 	bl	8100650 <__aeabi_dmul>
 810cad4:	4602      	mov	r2, r0
 810cad6:	460b      	mov	r3, r1
 810cad8:	4650      	mov	r0, sl
 810cada:	4659      	mov	r1, fp
 810cadc:	f7f3 fc00 	bl	81002e0 <__aeabi_dsub>
 810cae0:	4602      	mov	r2, r0
 810cae2:	460b      	mov	r3, r1
 810cae4:	4680      	mov	r8, r0
 810cae6:	4689      	mov	r9, r1
 810cae8:	4630      	mov	r0, r6
 810caea:	4639      	mov	r1, r7
 810caec:	f7f3 fbfa 	bl	81002e4 <__adddf3>
 810caf0:	2400      	movs	r4, #0
 810caf2:	4632      	mov	r2, r6
 810caf4:	463b      	mov	r3, r7
 810caf6:	4620      	mov	r0, r4
 810caf8:	460d      	mov	r5, r1
 810cafa:	f7f3 fbf1 	bl	81002e0 <__aeabi_dsub>
 810cafe:	4602      	mov	r2, r0
 810cb00:	460b      	mov	r3, r1
 810cb02:	4640      	mov	r0, r8
 810cb04:	4649      	mov	r1, r9
 810cb06:	f7f3 fbeb 	bl	81002e0 <__aeabi_dsub>
 810cb0a:	9b00      	ldr	r3, [sp, #0]
 810cb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810cb0e:	3b01      	subs	r3, #1
 810cb10:	4313      	orrs	r3, r2
 810cb12:	4682      	mov	sl, r0
 810cb14:	468b      	mov	fp, r1
 810cb16:	f040 81f1 	bne.w	810cefc <__ieee754_pow+0x6e4>
 810cb1a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810cbd8 <__ieee754_pow+0x3c0>
 810cb1e:	eeb0 8a47 	vmov.f32	s16, s14
 810cb22:	eef0 8a67 	vmov.f32	s17, s15
 810cb26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810cb2a:	2600      	movs	r6, #0
 810cb2c:	4632      	mov	r2, r6
 810cb2e:	463b      	mov	r3, r7
 810cb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810cb34:	f7f3 fbd4 	bl	81002e0 <__aeabi_dsub>
 810cb38:	4622      	mov	r2, r4
 810cb3a:	462b      	mov	r3, r5
 810cb3c:	f7f3 fd88 	bl	8100650 <__aeabi_dmul>
 810cb40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810cb44:	4680      	mov	r8, r0
 810cb46:	4689      	mov	r9, r1
 810cb48:	4650      	mov	r0, sl
 810cb4a:	4659      	mov	r1, fp
 810cb4c:	f7f3 fd80 	bl	8100650 <__aeabi_dmul>
 810cb50:	4602      	mov	r2, r0
 810cb52:	460b      	mov	r3, r1
 810cb54:	4640      	mov	r0, r8
 810cb56:	4649      	mov	r1, r9
 810cb58:	f7f3 fbc4 	bl	81002e4 <__adddf3>
 810cb5c:	4632      	mov	r2, r6
 810cb5e:	463b      	mov	r3, r7
 810cb60:	4680      	mov	r8, r0
 810cb62:	4689      	mov	r9, r1
 810cb64:	4620      	mov	r0, r4
 810cb66:	4629      	mov	r1, r5
 810cb68:	f7f3 fd72 	bl	8100650 <__aeabi_dmul>
 810cb6c:	460b      	mov	r3, r1
 810cb6e:	4604      	mov	r4, r0
 810cb70:	460d      	mov	r5, r1
 810cb72:	4602      	mov	r2, r0
 810cb74:	4649      	mov	r1, r9
 810cb76:	4640      	mov	r0, r8
 810cb78:	f7f3 fbb4 	bl	81002e4 <__adddf3>
 810cb7c:	4b1d      	ldr	r3, [pc, #116]	; (810cbf4 <__ieee754_pow+0x3dc>)
 810cb7e:	4299      	cmp	r1, r3
 810cb80:	ec45 4b19 	vmov	d9, r4, r5
 810cb84:	4606      	mov	r6, r0
 810cb86:	460f      	mov	r7, r1
 810cb88:	468b      	mov	fp, r1
 810cb8a:	f340 82fe 	ble.w	810d18a <__ieee754_pow+0x972>
 810cb8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810cb92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810cb96:	4303      	orrs	r3, r0
 810cb98:	f000 81f0 	beq.w	810cf7c <__ieee754_pow+0x764>
 810cb9c:	a310      	add	r3, pc, #64	; (adr r3, 810cbe0 <__ieee754_pow+0x3c8>)
 810cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cba2:	ec51 0b18 	vmov	r0, r1, d8
 810cba6:	f7f3 fd53 	bl	8100650 <__aeabi_dmul>
 810cbaa:	a30d      	add	r3, pc, #52	; (adr r3, 810cbe0 <__ieee754_pow+0x3c8>)
 810cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbb0:	e6cb      	b.n	810c94a <__ieee754_pow+0x132>
 810cbb2:	bf00      	nop
 810cbb4:	f3af 8000 	nop.w
 810cbb8:	60000000 	.word	0x60000000
 810cbbc:	3ff71547 	.word	0x3ff71547
 810cbc0:	f85ddf44 	.word	0xf85ddf44
 810cbc4:	3e54ae0b 	.word	0x3e54ae0b
 810cbc8:	55555555 	.word	0x55555555
 810cbcc:	3fd55555 	.word	0x3fd55555
 810cbd0:	652b82fe 	.word	0x652b82fe
 810cbd4:	3ff71547 	.word	0x3ff71547
 810cbd8:	00000000 	.word	0x00000000
 810cbdc:	bff00000 	.word	0xbff00000
 810cbe0:	8800759c 	.word	0x8800759c
 810cbe4:	7e37e43c 	.word	0x7e37e43c
 810cbe8:	3ff00000 	.word	0x3ff00000
 810cbec:	3fd00000 	.word	0x3fd00000
 810cbf0:	3fe00000 	.word	0x3fe00000
 810cbf4:	408fffff 	.word	0x408fffff
 810cbf8:	4bd7      	ldr	r3, [pc, #860]	; (810cf58 <__ieee754_pow+0x740>)
 810cbfa:	ea03 0309 	and.w	r3, r3, r9
 810cbfe:	2200      	movs	r2, #0
 810cc00:	b92b      	cbnz	r3, 810cc0e <__ieee754_pow+0x3f6>
 810cc02:	4bd6      	ldr	r3, [pc, #856]	; (810cf5c <__ieee754_pow+0x744>)
 810cc04:	f7f3 fd24 	bl	8100650 <__aeabi_dmul>
 810cc08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810cc0c:	460c      	mov	r4, r1
 810cc0e:	1523      	asrs	r3, r4, #20
 810cc10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810cc14:	4413      	add	r3, r2
 810cc16:	9309      	str	r3, [sp, #36]	; 0x24
 810cc18:	4bd1      	ldr	r3, [pc, #836]	; (810cf60 <__ieee754_pow+0x748>)
 810cc1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810cc1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810cc22:	429c      	cmp	r4, r3
 810cc24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810cc28:	dd08      	ble.n	810cc3c <__ieee754_pow+0x424>
 810cc2a:	4bce      	ldr	r3, [pc, #824]	; (810cf64 <__ieee754_pow+0x74c>)
 810cc2c:	429c      	cmp	r4, r3
 810cc2e:	f340 8163 	ble.w	810cef8 <__ieee754_pow+0x6e0>
 810cc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cc34:	3301      	adds	r3, #1
 810cc36:	9309      	str	r3, [sp, #36]	; 0x24
 810cc38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810cc3c:	2400      	movs	r4, #0
 810cc3e:	00e3      	lsls	r3, r4, #3
 810cc40:	930b      	str	r3, [sp, #44]	; 0x2c
 810cc42:	4bc9      	ldr	r3, [pc, #804]	; (810cf68 <__ieee754_pow+0x750>)
 810cc44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810cc48:	ed93 7b00 	vldr	d7, [r3]
 810cc4c:	4629      	mov	r1, r5
 810cc4e:	ec53 2b17 	vmov	r2, r3, d7
 810cc52:	eeb0 8a47 	vmov.f32	s16, s14
 810cc56:	eef0 8a67 	vmov.f32	s17, s15
 810cc5a:	4682      	mov	sl, r0
 810cc5c:	f7f3 fb40 	bl	81002e0 <__aeabi_dsub>
 810cc60:	4652      	mov	r2, sl
 810cc62:	4606      	mov	r6, r0
 810cc64:	460f      	mov	r7, r1
 810cc66:	462b      	mov	r3, r5
 810cc68:	ec51 0b18 	vmov	r0, r1, d8
 810cc6c:	f7f3 fb3a 	bl	81002e4 <__adddf3>
 810cc70:	4602      	mov	r2, r0
 810cc72:	460b      	mov	r3, r1
 810cc74:	2000      	movs	r0, #0
 810cc76:	49bd      	ldr	r1, [pc, #756]	; (810cf6c <__ieee754_pow+0x754>)
 810cc78:	f7f3 fe14 	bl	81008a4 <__aeabi_ddiv>
 810cc7c:	ec41 0b19 	vmov	d9, r0, r1
 810cc80:	4602      	mov	r2, r0
 810cc82:	460b      	mov	r3, r1
 810cc84:	4630      	mov	r0, r6
 810cc86:	4639      	mov	r1, r7
 810cc88:	f7f3 fce2 	bl	8100650 <__aeabi_dmul>
 810cc8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810cc90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cc94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810cc98:	2300      	movs	r3, #0
 810cc9a:	9304      	str	r3, [sp, #16]
 810cc9c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810cca0:	46ab      	mov	fp, r5
 810cca2:	106d      	asrs	r5, r5, #1
 810cca4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810cca8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810ccac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810ccb0:	2200      	movs	r2, #0
 810ccb2:	4640      	mov	r0, r8
 810ccb4:	4649      	mov	r1, r9
 810ccb6:	4614      	mov	r4, r2
 810ccb8:	461d      	mov	r5, r3
 810ccba:	f7f3 fcc9 	bl	8100650 <__aeabi_dmul>
 810ccbe:	4602      	mov	r2, r0
 810ccc0:	460b      	mov	r3, r1
 810ccc2:	4630      	mov	r0, r6
 810ccc4:	4639      	mov	r1, r7
 810ccc6:	f7f3 fb0b 	bl	81002e0 <__aeabi_dsub>
 810ccca:	ec53 2b18 	vmov	r2, r3, d8
 810ccce:	4606      	mov	r6, r0
 810ccd0:	460f      	mov	r7, r1
 810ccd2:	4620      	mov	r0, r4
 810ccd4:	4629      	mov	r1, r5
 810ccd6:	f7f3 fb03 	bl	81002e0 <__aeabi_dsub>
 810ccda:	4602      	mov	r2, r0
 810ccdc:	460b      	mov	r3, r1
 810ccde:	4650      	mov	r0, sl
 810cce0:	4659      	mov	r1, fp
 810cce2:	f7f3 fafd 	bl	81002e0 <__aeabi_dsub>
 810cce6:	4642      	mov	r2, r8
 810cce8:	464b      	mov	r3, r9
 810ccea:	f7f3 fcb1 	bl	8100650 <__aeabi_dmul>
 810ccee:	4602      	mov	r2, r0
 810ccf0:	460b      	mov	r3, r1
 810ccf2:	4630      	mov	r0, r6
 810ccf4:	4639      	mov	r1, r7
 810ccf6:	f7f3 faf3 	bl	81002e0 <__aeabi_dsub>
 810ccfa:	ec53 2b19 	vmov	r2, r3, d9
 810ccfe:	f7f3 fca7 	bl	8100650 <__aeabi_dmul>
 810cd02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cd06:	ec41 0b18 	vmov	d8, r0, r1
 810cd0a:	4610      	mov	r0, r2
 810cd0c:	4619      	mov	r1, r3
 810cd0e:	f7f3 fc9f 	bl	8100650 <__aeabi_dmul>
 810cd12:	a37d      	add	r3, pc, #500	; (adr r3, 810cf08 <__ieee754_pow+0x6f0>)
 810cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd18:	4604      	mov	r4, r0
 810cd1a:	460d      	mov	r5, r1
 810cd1c:	f7f3 fc98 	bl	8100650 <__aeabi_dmul>
 810cd20:	a37b      	add	r3, pc, #492	; (adr r3, 810cf10 <__ieee754_pow+0x6f8>)
 810cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd26:	f7f3 fadd 	bl	81002e4 <__adddf3>
 810cd2a:	4622      	mov	r2, r4
 810cd2c:	462b      	mov	r3, r5
 810cd2e:	f7f3 fc8f 	bl	8100650 <__aeabi_dmul>
 810cd32:	a379      	add	r3, pc, #484	; (adr r3, 810cf18 <__ieee754_pow+0x700>)
 810cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd38:	f7f3 fad4 	bl	81002e4 <__adddf3>
 810cd3c:	4622      	mov	r2, r4
 810cd3e:	462b      	mov	r3, r5
 810cd40:	f7f3 fc86 	bl	8100650 <__aeabi_dmul>
 810cd44:	a376      	add	r3, pc, #472	; (adr r3, 810cf20 <__ieee754_pow+0x708>)
 810cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd4a:	f7f3 facb 	bl	81002e4 <__adddf3>
 810cd4e:	4622      	mov	r2, r4
 810cd50:	462b      	mov	r3, r5
 810cd52:	f7f3 fc7d 	bl	8100650 <__aeabi_dmul>
 810cd56:	a374      	add	r3, pc, #464	; (adr r3, 810cf28 <__ieee754_pow+0x710>)
 810cd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd5c:	f7f3 fac2 	bl	81002e4 <__adddf3>
 810cd60:	4622      	mov	r2, r4
 810cd62:	462b      	mov	r3, r5
 810cd64:	f7f3 fc74 	bl	8100650 <__aeabi_dmul>
 810cd68:	a371      	add	r3, pc, #452	; (adr r3, 810cf30 <__ieee754_pow+0x718>)
 810cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd6e:	f7f3 fab9 	bl	81002e4 <__adddf3>
 810cd72:	4622      	mov	r2, r4
 810cd74:	4606      	mov	r6, r0
 810cd76:	460f      	mov	r7, r1
 810cd78:	462b      	mov	r3, r5
 810cd7a:	4620      	mov	r0, r4
 810cd7c:	4629      	mov	r1, r5
 810cd7e:	f7f3 fc67 	bl	8100650 <__aeabi_dmul>
 810cd82:	4602      	mov	r2, r0
 810cd84:	460b      	mov	r3, r1
 810cd86:	4630      	mov	r0, r6
 810cd88:	4639      	mov	r1, r7
 810cd8a:	f7f3 fc61 	bl	8100650 <__aeabi_dmul>
 810cd8e:	4642      	mov	r2, r8
 810cd90:	4604      	mov	r4, r0
 810cd92:	460d      	mov	r5, r1
 810cd94:	464b      	mov	r3, r9
 810cd96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810cd9a:	f7f3 faa3 	bl	81002e4 <__adddf3>
 810cd9e:	ec53 2b18 	vmov	r2, r3, d8
 810cda2:	f7f3 fc55 	bl	8100650 <__aeabi_dmul>
 810cda6:	4622      	mov	r2, r4
 810cda8:	462b      	mov	r3, r5
 810cdaa:	f7f3 fa9b 	bl	81002e4 <__adddf3>
 810cdae:	4642      	mov	r2, r8
 810cdb0:	4682      	mov	sl, r0
 810cdb2:	468b      	mov	fp, r1
 810cdb4:	464b      	mov	r3, r9
 810cdb6:	4640      	mov	r0, r8
 810cdb8:	4649      	mov	r1, r9
 810cdba:	f7f3 fc49 	bl	8100650 <__aeabi_dmul>
 810cdbe:	4b6c      	ldr	r3, [pc, #432]	; (810cf70 <__ieee754_pow+0x758>)
 810cdc0:	2200      	movs	r2, #0
 810cdc2:	4606      	mov	r6, r0
 810cdc4:	460f      	mov	r7, r1
 810cdc6:	f7f3 fa8d 	bl	81002e4 <__adddf3>
 810cdca:	4652      	mov	r2, sl
 810cdcc:	465b      	mov	r3, fp
 810cdce:	f7f3 fa89 	bl	81002e4 <__adddf3>
 810cdd2:	9c04      	ldr	r4, [sp, #16]
 810cdd4:	460d      	mov	r5, r1
 810cdd6:	4622      	mov	r2, r4
 810cdd8:	460b      	mov	r3, r1
 810cdda:	4640      	mov	r0, r8
 810cddc:	4649      	mov	r1, r9
 810cdde:	f7f3 fc37 	bl	8100650 <__aeabi_dmul>
 810cde2:	4b63      	ldr	r3, [pc, #396]	; (810cf70 <__ieee754_pow+0x758>)
 810cde4:	4680      	mov	r8, r0
 810cde6:	4689      	mov	r9, r1
 810cde8:	2200      	movs	r2, #0
 810cdea:	4620      	mov	r0, r4
 810cdec:	4629      	mov	r1, r5
 810cdee:	f7f3 fa77 	bl	81002e0 <__aeabi_dsub>
 810cdf2:	4632      	mov	r2, r6
 810cdf4:	463b      	mov	r3, r7
 810cdf6:	f7f3 fa73 	bl	81002e0 <__aeabi_dsub>
 810cdfa:	4602      	mov	r2, r0
 810cdfc:	460b      	mov	r3, r1
 810cdfe:	4650      	mov	r0, sl
 810ce00:	4659      	mov	r1, fp
 810ce02:	f7f3 fa6d 	bl	81002e0 <__aeabi_dsub>
 810ce06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ce0a:	f7f3 fc21 	bl	8100650 <__aeabi_dmul>
 810ce0e:	4622      	mov	r2, r4
 810ce10:	4606      	mov	r6, r0
 810ce12:	460f      	mov	r7, r1
 810ce14:	462b      	mov	r3, r5
 810ce16:	ec51 0b18 	vmov	r0, r1, d8
 810ce1a:	f7f3 fc19 	bl	8100650 <__aeabi_dmul>
 810ce1e:	4602      	mov	r2, r0
 810ce20:	460b      	mov	r3, r1
 810ce22:	4630      	mov	r0, r6
 810ce24:	4639      	mov	r1, r7
 810ce26:	f7f3 fa5d 	bl	81002e4 <__adddf3>
 810ce2a:	4606      	mov	r6, r0
 810ce2c:	460f      	mov	r7, r1
 810ce2e:	4602      	mov	r2, r0
 810ce30:	460b      	mov	r3, r1
 810ce32:	4640      	mov	r0, r8
 810ce34:	4649      	mov	r1, r9
 810ce36:	f7f3 fa55 	bl	81002e4 <__adddf3>
 810ce3a:	9c04      	ldr	r4, [sp, #16]
 810ce3c:	a33e      	add	r3, pc, #248	; (adr r3, 810cf38 <__ieee754_pow+0x720>)
 810ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce42:	4620      	mov	r0, r4
 810ce44:	460d      	mov	r5, r1
 810ce46:	f7f3 fc03 	bl	8100650 <__aeabi_dmul>
 810ce4a:	4642      	mov	r2, r8
 810ce4c:	ec41 0b18 	vmov	d8, r0, r1
 810ce50:	464b      	mov	r3, r9
 810ce52:	4620      	mov	r0, r4
 810ce54:	4629      	mov	r1, r5
 810ce56:	f7f3 fa43 	bl	81002e0 <__aeabi_dsub>
 810ce5a:	4602      	mov	r2, r0
 810ce5c:	460b      	mov	r3, r1
 810ce5e:	4630      	mov	r0, r6
 810ce60:	4639      	mov	r1, r7
 810ce62:	f7f3 fa3d 	bl	81002e0 <__aeabi_dsub>
 810ce66:	a336      	add	r3, pc, #216	; (adr r3, 810cf40 <__ieee754_pow+0x728>)
 810ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce6c:	f7f3 fbf0 	bl	8100650 <__aeabi_dmul>
 810ce70:	a335      	add	r3, pc, #212	; (adr r3, 810cf48 <__ieee754_pow+0x730>)
 810ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce76:	4606      	mov	r6, r0
 810ce78:	460f      	mov	r7, r1
 810ce7a:	4620      	mov	r0, r4
 810ce7c:	4629      	mov	r1, r5
 810ce7e:	f7f3 fbe7 	bl	8100650 <__aeabi_dmul>
 810ce82:	4602      	mov	r2, r0
 810ce84:	460b      	mov	r3, r1
 810ce86:	4630      	mov	r0, r6
 810ce88:	4639      	mov	r1, r7
 810ce8a:	f7f3 fa2b 	bl	81002e4 <__adddf3>
 810ce8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810ce90:	4b38      	ldr	r3, [pc, #224]	; (810cf74 <__ieee754_pow+0x75c>)
 810ce92:	4413      	add	r3, r2
 810ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce98:	f7f3 fa24 	bl	81002e4 <__adddf3>
 810ce9c:	4682      	mov	sl, r0
 810ce9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cea0:	468b      	mov	fp, r1
 810cea2:	f7f3 fb6b 	bl	810057c <__aeabi_i2d>
 810cea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cea8:	4b33      	ldr	r3, [pc, #204]	; (810cf78 <__ieee754_pow+0x760>)
 810ceaa:	4413      	add	r3, r2
 810ceac:	e9d3 8900 	ldrd	r8, r9, [r3]
 810ceb0:	4606      	mov	r6, r0
 810ceb2:	460f      	mov	r7, r1
 810ceb4:	4652      	mov	r2, sl
 810ceb6:	465b      	mov	r3, fp
 810ceb8:	ec51 0b18 	vmov	r0, r1, d8
 810cebc:	f7f3 fa12 	bl	81002e4 <__adddf3>
 810cec0:	4642      	mov	r2, r8
 810cec2:	464b      	mov	r3, r9
 810cec4:	f7f3 fa0e 	bl	81002e4 <__adddf3>
 810cec8:	4632      	mov	r2, r6
 810ceca:	463b      	mov	r3, r7
 810cecc:	f7f3 fa0a 	bl	81002e4 <__adddf3>
 810ced0:	9c04      	ldr	r4, [sp, #16]
 810ced2:	4632      	mov	r2, r6
 810ced4:	463b      	mov	r3, r7
 810ced6:	4620      	mov	r0, r4
 810ced8:	460d      	mov	r5, r1
 810ceda:	f7f3 fa01 	bl	81002e0 <__aeabi_dsub>
 810cede:	4642      	mov	r2, r8
 810cee0:	464b      	mov	r3, r9
 810cee2:	f7f3 f9fd 	bl	81002e0 <__aeabi_dsub>
 810cee6:	ec53 2b18 	vmov	r2, r3, d8
 810ceea:	f7f3 f9f9 	bl	81002e0 <__aeabi_dsub>
 810ceee:	4602      	mov	r2, r0
 810cef0:	460b      	mov	r3, r1
 810cef2:	4650      	mov	r0, sl
 810cef4:	4659      	mov	r1, fp
 810cef6:	e606      	b.n	810cb06 <__ieee754_pow+0x2ee>
 810cef8:	2401      	movs	r4, #1
 810cefa:	e6a0      	b.n	810cc3e <__ieee754_pow+0x426>
 810cefc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810cf50 <__ieee754_pow+0x738>
 810cf00:	e60d      	b.n	810cb1e <__ieee754_pow+0x306>
 810cf02:	bf00      	nop
 810cf04:	f3af 8000 	nop.w
 810cf08:	4a454eef 	.word	0x4a454eef
 810cf0c:	3fca7e28 	.word	0x3fca7e28
 810cf10:	93c9db65 	.word	0x93c9db65
 810cf14:	3fcd864a 	.word	0x3fcd864a
 810cf18:	a91d4101 	.word	0xa91d4101
 810cf1c:	3fd17460 	.word	0x3fd17460
 810cf20:	518f264d 	.word	0x518f264d
 810cf24:	3fd55555 	.word	0x3fd55555
 810cf28:	db6fabff 	.word	0xdb6fabff
 810cf2c:	3fdb6db6 	.word	0x3fdb6db6
 810cf30:	33333303 	.word	0x33333303
 810cf34:	3fe33333 	.word	0x3fe33333
 810cf38:	e0000000 	.word	0xe0000000
 810cf3c:	3feec709 	.word	0x3feec709
 810cf40:	dc3a03fd 	.word	0xdc3a03fd
 810cf44:	3feec709 	.word	0x3feec709
 810cf48:	145b01f5 	.word	0x145b01f5
 810cf4c:	be3e2fe0 	.word	0xbe3e2fe0
 810cf50:	00000000 	.word	0x00000000
 810cf54:	3ff00000 	.word	0x3ff00000
 810cf58:	7ff00000 	.word	0x7ff00000
 810cf5c:	43400000 	.word	0x43400000
 810cf60:	0003988e 	.word	0x0003988e
 810cf64:	000bb679 	.word	0x000bb679
 810cf68:	0810d710 	.word	0x0810d710
 810cf6c:	3ff00000 	.word	0x3ff00000
 810cf70:	40080000 	.word	0x40080000
 810cf74:	0810d730 	.word	0x0810d730
 810cf78:	0810d720 	.word	0x0810d720
 810cf7c:	a3b5      	add	r3, pc, #724	; (adr r3, 810d254 <__ieee754_pow+0xa3c>)
 810cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf82:	4640      	mov	r0, r8
 810cf84:	4649      	mov	r1, r9
 810cf86:	f7f3 f9ad 	bl	81002e4 <__adddf3>
 810cf8a:	4622      	mov	r2, r4
 810cf8c:	ec41 0b1a 	vmov	d10, r0, r1
 810cf90:	462b      	mov	r3, r5
 810cf92:	4630      	mov	r0, r6
 810cf94:	4639      	mov	r1, r7
 810cf96:	f7f3 f9a3 	bl	81002e0 <__aeabi_dsub>
 810cf9a:	4602      	mov	r2, r0
 810cf9c:	460b      	mov	r3, r1
 810cf9e:	ec51 0b1a 	vmov	r0, r1, d10
 810cfa2:	f7f3 fde5 	bl	8100b70 <__aeabi_dcmpgt>
 810cfa6:	2800      	cmp	r0, #0
 810cfa8:	f47f adf8 	bne.w	810cb9c <__ieee754_pow+0x384>
 810cfac:	4aa4      	ldr	r2, [pc, #656]	; (810d240 <__ieee754_pow+0xa28>)
 810cfae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810cfb2:	4293      	cmp	r3, r2
 810cfb4:	f340 810b 	ble.w	810d1ce <__ieee754_pow+0x9b6>
 810cfb8:	151b      	asrs	r3, r3, #20
 810cfba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810cfbe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810cfc2:	fa4a f303 	asr.w	r3, sl, r3
 810cfc6:	445b      	add	r3, fp
 810cfc8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810cfcc:	4e9d      	ldr	r6, [pc, #628]	; (810d244 <__ieee754_pow+0xa2c>)
 810cfce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810cfd2:	4116      	asrs	r6, r2
 810cfd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810cfd8:	2000      	movs	r0, #0
 810cfda:	ea23 0106 	bic.w	r1, r3, r6
 810cfde:	f1c2 0214 	rsb	r2, r2, #20
 810cfe2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810cfe6:	fa4a fa02 	asr.w	sl, sl, r2
 810cfea:	f1bb 0f00 	cmp.w	fp, #0
 810cfee:	4602      	mov	r2, r0
 810cff0:	460b      	mov	r3, r1
 810cff2:	4620      	mov	r0, r4
 810cff4:	4629      	mov	r1, r5
 810cff6:	bfb8      	it	lt
 810cff8:	f1ca 0a00 	rsblt	sl, sl, #0
 810cffc:	f7f3 f970 	bl	81002e0 <__aeabi_dsub>
 810d000:	ec41 0b19 	vmov	d9, r0, r1
 810d004:	4642      	mov	r2, r8
 810d006:	464b      	mov	r3, r9
 810d008:	ec51 0b19 	vmov	r0, r1, d9
 810d00c:	f7f3 f96a 	bl	81002e4 <__adddf3>
 810d010:	2400      	movs	r4, #0
 810d012:	a379      	add	r3, pc, #484	; (adr r3, 810d1f8 <__ieee754_pow+0x9e0>)
 810d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d018:	4620      	mov	r0, r4
 810d01a:	460d      	mov	r5, r1
 810d01c:	f7f3 fb18 	bl	8100650 <__aeabi_dmul>
 810d020:	ec53 2b19 	vmov	r2, r3, d9
 810d024:	4606      	mov	r6, r0
 810d026:	460f      	mov	r7, r1
 810d028:	4620      	mov	r0, r4
 810d02a:	4629      	mov	r1, r5
 810d02c:	f7f3 f958 	bl	81002e0 <__aeabi_dsub>
 810d030:	4602      	mov	r2, r0
 810d032:	460b      	mov	r3, r1
 810d034:	4640      	mov	r0, r8
 810d036:	4649      	mov	r1, r9
 810d038:	f7f3 f952 	bl	81002e0 <__aeabi_dsub>
 810d03c:	a370      	add	r3, pc, #448	; (adr r3, 810d200 <__ieee754_pow+0x9e8>)
 810d03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d042:	f7f3 fb05 	bl	8100650 <__aeabi_dmul>
 810d046:	a370      	add	r3, pc, #448	; (adr r3, 810d208 <__ieee754_pow+0x9f0>)
 810d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d04c:	4680      	mov	r8, r0
 810d04e:	4689      	mov	r9, r1
 810d050:	4620      	mov	r0, r4
 810d052:	4629      	mov	r1, r5
 810d054:	f7f3 fafc 	bl	8100650 <__aeabi_dmul>
 810d058:	4602      	mov	r2, r0
 810d05a:	460b      	mov	r3, r1
 810d05c:	4640      	mov	r0, r8
 810d05e:	4649      	mov	r1, r9
 810d060:	f7f3 f940 	bl	81002e4 <__adddf3>
 810d064:	4604      	mov	r4, r0
 810d066:	460d      	mov	r5, r1
 810d068:	4602      	mov	r2, r0
 810d06a:	460b      	mov	r3, r1
 810d06c:	4630      	mov	r0, r6
 810d06e:	4639      	mov	r1, r7
 810d070:	f7f3 f938 	bl	81002e4 <__adddf3>
 810d074:	4632      	mov	r2, r6
 810d076:	463b      	mov	r3, r7
 810d078:	4680      	mov	r8, r0
 810d07a:	4689      	mov	r9, r1
 810d07c:	f7f3 f930 	bl	81002e0 <__aeabi_dsub>
 810d080:	4602      	mov	r2, r0
 810d082:	460b      	mov	r3, r1
 810d084:	4620      	mov	r0, r4
 810d086:	4629      	mov	r1, r5
 810d088:	f7f3 f92a 	bl	81002e0 <__aeabi_dsub>
 810d08c:	4642      	mov	r2, r8
 810d08e:	4606      	mov	r6, r0
 810d090:	460f      	mov	r7, r1
 810d092:	464b      	mov	r3, r9
 810d094:	4640      	mov	r0, r8
 810d096:	4649      	mov	r1, r9
 810d098:	f7f3 fada 	bl	8100650 <__aeabi_dmul>
 810d09c:	a35c      	add	r3, pc, #368	; (adr r3, 810d210 <__ieee754_pow+0x9f8>)
 810d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0a2:	4604      	mov	r4, r0
 810d0a4:	460d      	mov	r5, r1
 810d0a6:	f7f3 fad3 	bl	8100650 <__aeabi_dmul>
 810d0aa:	a35b      	add	r3, pc, #364	; (adr r3, 810d218 <__ieee754_pow+0xa00>)
 810d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0b0:	f7f3 f916 	bl	81002e0 <__aeabi_dsub>
 810d0b4:	4622      	mov	r2, r4
 810d0b6:	462b      	mov	r3, r5
 810d0b8:	f7f3 faca 	bl	8100650 <__aeabi_dmul>
 810d0bc:	a358      	add	r3, pc, #352	; (adr r3, 810d220 <__ieee754_pow+0xa08>)
 810d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0c2:	f7f3 f90f 	bl	81002e4 <__adddf3>
 810d0c6:	4622      	mov	r2, r4
 810d0c8:	462b      	mov	r3, r5
 810d0ca:	f7f3 fac1 	bl	8100650 <__aeabi_dmul>
 810d0ce:	a356      	add	r3, pc, #344	; (adr r3, 810d228 <__ieee754_pow+0xa10>)
 810d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0d4:	f7f3 f904 	bl	81002e0 <__aeabi_dsub>
 810d0d8:	4622      	mov	r2, r4
 810d0da:	462b      	mov	r3, r5
 810d0dc:	f7f3 fab8 	bl	8100650 <__aeabi_dmul>
 810d0e0:	a353      	add	r3, pc, #332	; (adr r3, 810d230 <__ieee754_pow+0xa18>)
 810d0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0e6:	f7f3 f8fd 	bl	81002e4 <__adddf3>
 810d0ea:	4622      	mov	r2, r4
 810d0ec:	462b      	mov	r3, r5
 810d0ee:	f7f3 faaf 	bl	8100650 <__aeabi_dmul>
 810d0f2:	4602      	mov	r2, r0
 810d0f4:	460b      	mov	r3, r1
 810d0f6:	4640      	mov	r0, r8
 810d0f8:	4649      	mov	r1, r9
 810d0fa:	f7f3 f8f1 	bl	81002e0 <__aeabi_dsub>
 810d0fe:	4604      	mov	r4, r0
 810d100:	460d      	mov	r5, r1
 810d102:	4602      	mov	r2, r0
 810d104:	460b      	mov	r3, r1
 810d106:	4640      	mov	r0, r8
 810d108:	4649      	mov	r1, r9
 810d10a:	f7f3 faa1 	bl	8100650 <__aeabi_dmul>
 810d10e:	2200      	movs	r2, #0
 810d110:	ec41 0b19 	vmov	d9, r0, r1
 810d114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810d118:	4620      	mov	r0, r4
 810d11a:	4629      	mov	r1, r5
 810d11c:	f7f3 f8e0 	bl	81002e0 <__aeabi_dsub>
 810d120:	4602      	mov	r2, r0
 810d122:	460b      	mov	r3, r1
 810d124:	ec51 0b19 	vmov	r0, r1, d9
 810d128:	f7f3 fbbc 	bl	81008a4 <__aeabi_ddiv>
 810d12c:	4632      	mov	r2, r6
 810d12e:	4604      	mov	r4, r0
 810d130:	460d      	mov	r5, r1
 810d132:	463b      	mov	r3, r7
 810d134:	4640      	mov	r0, r8
 810d136:	4649      	mov	r1, r9
 810d138:	f7f3 fa8a 	bl	8100650 <__aeabi_dmul>
 810d13c:	4632      	mov	r2, r6
 810d13e:	463b      	mov	r3, r7
 810d140:	f7f3 f8d0 	bl	81002e4 <__adddf3>
 810d144:	4602      	mov	r2, r0
 810d146:	460b      	mov	r3, r1
 810d148:	4620      	mov	r0, r4
 810d14a:	4629      	mov	r1, r5
 810d14c:	f7f3 f8c8 	bl	81002e0 <__aeabi_dsub>
 810d150:	4642      	mov	r2, r8
 810d152:	464b      	mov	r3, r9
 810d154:	f7f3 f8c4 	bl	81002e0 <__aeabi_dsub>
 810d158:	460b      	mov	r3, r1
 810d15a:	4602      	mov	r2, r0
 810d15c:	493a      	ldr	r1, [pc, #232]	; (810d248 <__ieee754_pow+0xa30>)
 810d15e:	2000      	movs	r0, #0
 810d160:	f7f3 f8be 	bl	81002e0 <__aeabi_dsub>
 810d164:	e9cd 0100 	strd	r0, r1, [sp]
 810d168:	9b01      	ldr	r3, [sp, #4]
 810d16a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810d16e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d172:	da2f      	bge.n	810d1d4 <__ieee754_pow+0x9bc>
 810d174:	4650      	mov	r0, sl
 810d176:	ed9d 0b00 	vldr	d0, [sp]
 810d17a:	f000 f9cd 	bl	810d518 <scalbn>
 810d17e:	ec51 0b10 	vmov	r0, r1, d0
 810d182:	ec53 2b18 	vmov	r2, r3, d8
 810d186:	f7ff bbe0 	b.w	810c94a <__ieee754_pow+0x132>
 810d18a:	4b30      	ldr	r3, [pc, #192]	; (810d24c <__ieee754_pow+0xa34>)
 810d18c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810d190:	429e      	cmp	r6, r3
 810d192:	f77f af0b 	ble.w	810cfac <__ieee754_pow+0x794>
 810d196:	4b2e      	ldr	r3, [pc, #184]	; (810d250 <__ieee754_pow+0xa38>)
 810d198:	440b      	add	r3, r1
 810d19a:	4303      	orrs	r3, r0
 810d19c:	d00b      	beq.n	810d1b6 <__ieee754_pow+0x99e>
 810d19e:	a326      	add	r3, pc, #152	; (adr r3, 810d238 <__ieee754_pow+0xa20>)
 810d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1a4:	ec51 0b18 	vmov	r0, r1, d8
 810d1a8:	f7f3 fa52 	bl	8100650 <__aeabi_dmul>
 810d1ac:	a322      	add	r3, pc, #136	; (adr r3, 810d238 <__ieee754_pow+0xa20>)
 810d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1b2:	f7ff bbca 	b.w	810c94a <__ieee754_pow+0x132>
 810d1b6:	4622      	mov	r2, r4
 810d1b8:	462b      	mov	r3, r5
 810d1ba:	f7f3 f891 	bl	81002e0 <__aeabi_dsub>
 810d1be:	4642      	mov	r2, r8
 810d1c0:	464b      	mov	r3, r9
 810d1c2:	f7f3 fccb 	bl	8100b5c <__aeabi_dcmpge>
 810d1c6:	2800      	cmp	r0, #0
 810d1c8:	f43f aef0 	beq.w	810cfac <__ieee754_pow+0x794>
 810d1cc:	e7e7      	b.n	810d19e <__ieee754_pow+0x986>
 810d1ce:	f04f 0a00 	mov.w	sl, #0
 810d1d2:	e717      	b.n	810d004 <__ieee754_pow+0x7ec>
 810d1d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d1d8:	4619      	mov	r1, r3
 810d1da:	e7d2      	b.n	810d182 <__ieee754_pow+0x96a>
 810d1dc:	491a      	ldr	r1, [pc, #104]	; (810d248 <__ieee754_pow+0xa30>)
 810d1de:	2000      	movs	r0, #0
 810d1e0:	f7ff bb9e 	b.w	810c920 <__ieee754_pow+0x108>
 810d1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d1e8:	f7ff bb9a 	b.w	810c920 <__ieee754_pow+0x108>
 810d1ec:	9000      	str	r0, [sp, #0]
 810d1ee:	f7ff bb76 	b.w	810c8de <__ieee754_pow+0xc6>
 810d1f2:	2100      	movs	r1, #0
 810d1f4:	f7ff bb60 	b.w	810c8b8 <__ieee754_pow+0xa0>
 810d1f8:	00000000 	.word	0x00000000
 810d1fc:	3fe62e43 	.word	0x3fe62e43
 810d200:	fefa39ef 	.word	0xfefa39ef
 810d204:	3fe62e42 	.word	0x3fe62e42
 810d208:	0ca86c39 	.word	0x0ca86c39
 810d20c:	be205c61 	.word	0xbe205c61
 810d210:	72bea4d0 	.word	0x72bea4d0
 810d214:	3e663769 	.word	0x3e663769
 810d218:	c5d26bf1 	.word	0xc5d26bf1
 810d21c:	3ebbbd41 	.word	0x3ebbbd41
 810d220:	af25de2c 	.word	0xaf25de2c
 810d224:	3f11566a 	.word	0x3f11566a
 810d228:	16bebd93 	.word	0x16bebd93
 810d22c:	3f66c16c 	.word	0x3f66c16c
 810d230:	5555553e 	.word	0x5555553e
 810d234:	3fc55555 	.word	0x3fc55555
 810d238:	c2f8f359 	.word	0xc2f8f359
 810d23c:	01a56e1f 	.word	0x01a56e1f
 810d240:	3fe00000 	.word	0x3fe00000
 810d244:	000fffff 	.word	0x000fffff
 810d248:	3ff00000 	.word	0x3ff00000
 810d24c:	4090cbff 	.word	0x4090cbff
 810d250:	3f6f3400 	.word	0x3f6f3400
 810d254:	652b82fe 	.word	0x652b82fe
 810d258:	3c971547 	.word	0x3c971547

0810d25c <__ieee754_sqrt>:
 810d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d260:	ec55 4b10 	vmov	r4, r5, d0
 810d264:	4e56      	ldr	r6, [pc, #344]	; (810d3c0 <__ieee754_sqrt+0x164>)
 810d266:	43ae      	bics	r6, r5
 810d268:	ee10 0a10 	vmov	r0, s0
 810d26c:	ee10 3a10 	vmov	r3, s0
 810d270:	4629      	mov	r1, r5
 810d272:	462a      	mov	r2, r5
 810d274:	d110      	bne.n	810d298 <__ieee754_sqrt+0x3c>
 810d276:	ee10 2a10 	vmov	r2, s0
 810d27a:	462b      	mov	r3, r5
 810d27c:	f7f3 f9e8 	bl	8100650 <__aeabi_dmul>
 810d280:	4602      	mov	r2, r0
 810d282:	460b      	mov	r3, r1
 810d284:	4620      	mov	r0, r4
 810d286:	4629      	mov	r1, r5
 810d288:	f7f3 f82c 	bl	81002e4 <__adddf3>
 810d28c:	4604      	mov	r4, r0
 810d28e:	460d      	mov	r5, r1
 810d290:	ec45 4b10 	vmov	d0, r4, r5
 810d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d298:	2d00      	cmp	r5, #0
 810d29a:	dc10      	bgt.n	810d2be <__ieee754_sqrt+0x62>
 810d29c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d2a0:	4330      	orrs	r0, r6
 810d2a2:	d0f5      	beq.n	810d290 <__ieee754_sqrt+0x34>
 810d2a4:	b15d      	cbz	r5, 810d2be <__ieee754_sqrt+0x62>
 810d2a6:	ee10 2a10 	vmov	r2, s0
 810d2aa:	462b      	mov	r3, r5
 810d2ac:	ee10 0a10 	vmov	r0, s0
 810d2b0:	f7f3 f816 	bl	81002e0 <__aeabi_dsub>
 810d2b4:	4602      	mov	r2, r0
 810d2b6:	460b      	mov	r3, r1
 810d2b8:	f7f3 faf4 	bl	81008a4 <__aeabi_ddiv>
 810d2bc:	e7e6      	b.n	810d28c <__ieee754_sqrt+0x30>
 810d2be:	1509      	asrs	r1, r1, #20
 810d2c0:	d076      	beq.n	810d3b0 <__ieee754_sqrt+0x154>
 810d2c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810d2c6:	07ce      	lsls	r6, r1, #31
 810d2c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810d2cc:	bf5e      	ittt	pl
 810d2ce:	0fda      	lsrpl	r2, r3, #31
 810d2d0:	005b      	lslpl	r3, r3, #1
 810d2d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810d2d6:	0fda      	lsrs	r2, r3, #31
 810d2d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810d2dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810d2e0:	2000      	movs	r0, #0
 810d2e2:	106d      	asrs	r5, r5, #1
 810d2e4:	005b      	lsls	r3, r3, #1
 810d2e6:	f04f 0e16 	mov.w	lr, #22
 810d2ea:	4684      	mov	ip, r0
 810d2ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d2f0:	eb0c 0401 	add.w	r4, ip, r1
 810d2f4:	4294      	cmp	r4, r2
 810d2f6:	bfde      	ittt	le
 810d2f8:	1b12      	suble	r2, r2, r4
 810d2fa:	eb04 0c01 	addle.w	ip, r4, r1
 810d2fe:	1840      	addle	r0, r0, r1
 810d300:	0052      	lsls	r2, r2, #1
 810d302:	f1be 0e01 	subs.w	lr, lr, #1
 810d306:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d30a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810d30e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d312:	d1ed      	bne.n	810d2f0 <__ieee754_sqrt+0x94>
 810d314:	4671      	mov	r1, lr
 810d316:	2720      	movs	r7, #32
 810d318:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810d31c:	4562      	cmp	r2, ip
 810d31e:	eb04 060e 	add.w	r6, r4, lr
 810d322:	dc02      	bgt.n	810d32a <__ieee754_sqrt+0xce>
 810d324:	d113      	bne.n	810d34e <__ieee754_sqrt+0xf2>
 810d326:	429e      	cmp	r6, r3
 810d328:	d811      	bhi.n	810d34e <__ieee754_sqrt+0xf2>
 810d32a:	2e00      	cmp	r6, #0
 810d32c:	eb06 0e04 	add.w	lr, r6, r4
 810d330:	da43      	bge.n	810d3ba <__ieee754_sqrt+0x15e>
 810d332:	f1be 0f00 	cmp.w	lr, #0
 810d336:	db40      	blt.n	810d3ba <__ieee754_sqrt+0x15e>
 810d338:	f10c 0801 	add.w	r8, ip, #1
 810d33c:	eba2 020c 	sub.w	r2, r2, ip
 810d340:	429e      	cmp	r6, r3
 810d342:	bf88      	it	hi
 810d344:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810d348:	1b9b      	subs	r3, r3, r6
 810d34a:	4421      	add	r1, r4
 810d34c:	46c4      	mov	ip, r8
 810d34e:	0052      	lsls	r2, r2, #1
 810d350:	3f01      	subs	r7, #1
 810d352:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d356:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810d35a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d35e:	d1dd      	bne.n	810d31c <__ieee754_sqrt+0xc0>
 810d360:	4313      	orrs	r3, r2
 810d362:	d006      	beq.n	810d372 <__ieee754_sqrt+0x116>
 810d364:	1c4c      	adds	r4, r1, #1
 810d366:	bf13      	iteet	ne
 810d368:	3101      	addne	r1, #1
 810d36a:	3001      	addeq	r0, #1
 810d36c:	4639      	moveq	r1, r7
 810d36e:	f021 0101 	bicne.w	r1, r1, #1
 810d372:	1043      	asrs	r3, r0, #1
 810d374:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810d378:	0849      	lsrs	r1, r1, #1
 810d37a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810d37e:	07c2      	lsls	r2, r0, #31
 810d380:	bf48      	it	mi
 810d382:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810d386:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810d38a:	460c      	mov	r4, r1
 810d38c:	463d      	mov	r5, r7
 810d38e:	e77f      	b.n	810d290 <__ieee754_sqrt+0x34>
 810d390:	0ada      	lsrs	r2, r3, #11
 810d392:	3815      	subs	r0, #21
 810d394:	055b      	lsls	r3, r3, #21
 810d396:	2a00      	cmp	r2, #0
 810d398:	d0fa      	beq.n	810d390 <__ieee754_sqrt+0x134>
 810d39a:	02d7      	lsls	r7, r2, #11
 810d39c:	d50a      	bpl.n	810d3b4 <__ieee754_sqrt+0x158>
 810d39e:	f1c1 0420 	rsb	r4, r1, #32
 810d3a2:	fa23 f404 	lsr.w	r4, r3, r4
 810d3a6:	1e4d      	subs	r5, r1, #1
 810d3a8:	408b      	lsls	r3, r1
 810d3aa:	4322      	orrs	r2, r4
 810d3ac:	1b41      	subs	r1, r0, r5
 810d3ae:	e788      	b.n	810d2c2 <__ieee754_sqrt+0x66>
 810d3b0:	4608      	mov	r0, r1
 810d3b2:	e7f0      	b.n	810d396 <__ieee754_sqrt+0x13a>
 810d3b4:	0052      	lsls	r2, r2, #1
 810d3b6:	3101      	adds	r1, #1
 810d3b8:	e7ef      	b.n	810d39a <__ieee754_sqrt+0x13e>
 810d3ba:	46e0      	mov	r8, ip
 810d3bc:	e7be      	b.n	810d33c <__ieee754_sqrt+0xe0>
 810d3be:	bf00      	nop
 810d3c0:	7ff00000 	.word	0x7ff00000

0810d3c4 <fabs>:
 810d3c4:	ec51 0b10 	vmov	r0, r1, d0
 810d3c8:	ee10 2a10 	vmov	r2, s0
 810d3cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d3d0:	ec43 2b10 	vmov	d0, r2, r3
 810d3d4:	4770      	bx	lr

0810d3d6 <finite>:
 810d3d6:	b082      	sub	sp, #8
 810d3d8:	ed8d 0b00 	vstr	d0, [sp]
 810d3dc:	9801      	ldr	r0, [sp, #4]
 810d3de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810d3e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810d3e6:	0fc0      	lsrs	r0, r0, #31
 810d3e8:	b002      	add	sp, #8
 810d3ea:	4770      	bx	lr
 810d3ec:	0000      	movs	r0, r0
	...

0810d3f0 <nan>:
 810d3f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810d3f8 <nan+0x8>
 810d3f4:	4770      	bx	lr
 810d3f6:	bf00      	nop
 810d3f8:	00000000 	.word	0x00000000
 810d3fc:	7ff80000 	.word	0x7ff80000

0810d400 <rint>:
 810d400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d402:	ec51 0b10 	vmov	r0, r1, d0
 810d406:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d40a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810d40e:	2e13      	cmp	r6, #19
 810d410:	ee10 4a10 	vmov	r4, s0
 810d414:	460b      	mov	r3, r1
 810d416:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810d41a:	dc58      	bgt.n	810d4ce <rint+0xce>
 810d41c:	2e00      	cmp	r6, #0
 810d41e:	da2b      	bge.n	810d478 <rint+0x78>
 810d420:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810d424:	4302      	orrs	r2, r0
 810d426:	d023      	beq.n	810d470 <rint+0x70>
 810d428:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810d42c:	4302      	orrs	r2, r0
 810d42e:	4254      	negs	r4, r2
 810d430:	4314      	orrs	r4, r2
 810d432:	0c4b      	lsrs	r3, r1, #17
 810d434:	0b24      	lsrs	r4, r4, #12
 810d436:	045b      	lsls	r3, r3, #17
 810d438:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810d43c:	ea44 0103 	orr.w	r1, r4, r3
 810d440:	4b32      	ldr	r3, [pc, #200]	; (810d50c <rint+0x10c>)
 810d442:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d446:	e9d3 6700 	ldrd	r6, r7, [r3]
 810d44a:	4602      	mov	r2, r0
 810d44c:	460b      	mov	r3, r1
 810d44e:	4630      	mov	r0, r6
 810d450:	4639      	mov	r1, r7
 810d452:	f7f2 ff47 	bl	81002e4 <__adddf3>
 810d456:	e9cd 0100 	strd	r0, r1, [sp]
 810d45a:	463b      	mov	r3, r7
 810d45c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d460:	4632      	mov	r2, r6
 810d462:	f7f2 ff3d 	bl	81002e0 <__aeabi_dsub>
 810d466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810d46a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810d46e:	4639      	mov	r1, r7
 810d470:	ec41 0b10 	vmov	d0, r0, r1
 810d474:	b003      	add	sp, #12
 810d476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d478:	4a25      	ldr	r2, [pc, #148]	; (810d510 <rint+0x110>)
 810d47a:	4132      	asrs	r2, r6
 810d47c:	ea01 0702 	and.w	r7, r1, r2
 810d480:	4307      	orrs	r7, r0
 810d482:	d0f5      	beq.n	810d470 <rint+0x70>
 810d484:	0851      	lsrs	r1, r2, #1
 810d486:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810d48a:	4314      	orrs	r4, r2
 810d48c:	d00c      	beq.n	810d4a8 <rint+0xa8>
 810d48e:	ea23 0201 	bic.w	r2, r3, r1
 810d492:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810d496:	2e13      	cmp	r6, #19
 810d498:	fa43 f606 	asr.w	r6, r3, r6
 810d49c:	bf0c      	ite	eq
 810d49e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810d4a2:	2400      	movne	r4, #0
 810d4a4:	ea42 0306 	orr.w	r3, r2, r6
 810d4a8:	4918      	ldr	r1, [pc, #96]	; (810d50c <rint+0x10c>)
 810d4aa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810d4ae:	4622      	mov	r2, r4
 810d4b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 810d4b4:	4620      	mov	r0, r4
 810d4b6:	4629      	mov	r1, r5
 810d4b8:	f7f2 ff14 	bl	81002e4 <__adddf3>
 810d4bc:	e9cd 0100 	strd	r0, r1, [sp]
 810d4c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810d4c4:	4622      	mov	r2, r4
 810d4c6:	462b      	mov	r3, r5
 810d4c8:	f7f2 ff0a 	bl	81002e0 <__aeabi_dsub>
 810d4cc:	e7d0      	b.n	810d470 <rint+0x70>
 810d4ce:	2e33      	cmp	r6, #51	; 0x33
 810d4d0:	dd07      	ble.n	810d4e2 <rint+0xe2>
 810d4d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810d4d6:	d1cb      	bne.n	810d470 <rint+0x70>
 810d4d8:	ee10 2a10 	vmov	r2, s0
 810d4dc:	f7f2 ff02 	bl	81002e4 <__adddf3>
 810d4e0:	e7c6      	b.n	810d470 <rint+0x70>
 810d4e2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810d4e6:	f04f 36ff 	mov.w	r6, #4294967295
 810d4ea:	40d6      	lsrs	r6, r2
 810d4ec:	4230      	tst	r0, r6
 810d4ee:	d0bf      	beq.n	810d470 <rint+0x70>
 810d4f0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810d4f4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810d4f8:	bf1f      	itttt	ne
 810d4fa:	ea24 0101 	bicne.w	r1, r4, r1
 810d4fe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810d502:	fa44 f202 	asrne.w	r2, r4, r2
 810d506:	ea41 0402 	orrne.w	r4, r1, r2
 810d50a:	e7cd      	b.n	810d4a8 <rint+0xa8>
 810d50c:	0810d740 	.word	0x0810d740
 810d510:	000fffff 	.word	0x000fffff
 810d514:	00000000 	.word	0x00000000

0810d518 <scalbn>:
 810d518:	b570      	push	{r4, r5, r6, lr}
 810d51a:	ec55 4b10 	vmov	r4, r5, d0
 810d51e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810d522:	4606      	mov	r6, r0
 810d524:	462b      	mov	r3, r5
 810d526:	b99a      	cbnz	r2, 810d550 <scalbn+0x38>
 810d528:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810d52c:	4323      	orrs	r3, r4
 810d52e:	d036      	beq.n	810d59e <scalbn+0x86>
 810d530:	4b39      	ldr	r3, [pc, #228]	; (810d618 <scalbn+0x100>)
 810d532:	4629      	mov	r1, r5
 810d534:	ee10 0a10 	vmov	r0, s0
 810d538:	2200      	movs	r2, #0
 810d53a:	f7f3 f889 	bl	8100650 <__aeabi_dmul>
 810d53e:	4b37      	ldr	r3, [pc, #220]	; (810d61c <scalbn+0x104>)
 810d540:	429e      	cmp	r6, r3
 810d542:	4604      	mov	r4, r0
 810d544:	460d      	mov	r5, r1
 810d546:	da10      	bge.n	810d56a <scalbn+0x52>
 810d548:	a32b      	add	r3, pc, #172	; (adr r3, 810d5f8 <scalbn+0xe0>)
 810d54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d54e:	e03a      	b.n	810d5c6 <scalbn+0xae>
 810d550:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810d554:	428a      	cmp	r2, r1
 810d556:	d10c      	bne.n	810d572 <scalbn+0x5a>
 810d558:	ee10 2a10 	vmov	r2, s0
 810d55c:	4620      	mov	r0, r4
 810d55e:	4629      	mov	r1, r5
 810d560:	f7f2 fec0 	bl	81002e4 <__adddf3>
 810d564:	4604      	mov	r4, r0
 810d566:	460d      	mov	r5, r1
 810d568:	e019      	b.n	810d59e <scalbn+0x86>
 810d56a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810d56e:	460b      	mov	r3, r1
 810d570:	3a36      	subs	r2, #54	; 0x36
 810d572:	4432      	add	r2, r6
 810d574:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810d578:	428a      	cmp	r2, r1
 810d57a:	dd08      	ble.n	810d58e <scalbn+0x76>
 810d57c:	2d00      	cmp	r5, #0
 810d57e:	a120      	add	r1, pc, #128	; (adr r1, 810d600 <scalbn+0xe8>)
 810d580:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d584:	da1c      	bge.n	810d5c0 <scalbn+0xa8>
 810d586:	a120      	add	r1, pc, #128	; (adr r1, 810d608 <scalbn+0xf0>)
 810d588:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d58c:	e018      	b.n	810d5c0 <scalbn+0xa8>
 810d58e:	2a00      	cmp	r2, #0
 810d590:	dd08      	ble.n	810d5a4 <scalbn+0x8c>
 810d592:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d596:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d59a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810d59e:	ec45 4b10 	vmov	d0, r4, r5
 810d5a2:	bd70      	pop	{r4, r5, r6, pc}
 810d5a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810d5a8:	da19      	bge.n	810d5de <scalbn+0xc6>
 810d5aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 810d5ae:	429e      	cmp	r6, r3
 810d5b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810d5b4:	dd0a      	ble.n	810d5cc <scalbn+0xb4>
 810d5b6:	a112      	add	r1, pc, #72	; (adr r1, 810d600 <scalbn+0xe8>)
 810d5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5bc:	2b00      	cmp	r3, #0
 810d5be:	d1e2      	bne.n	810d586 <scalbn+0x6e>
 810d5c0:	a30f      	add	r3, pc, #60	; (adr r3, 810d600 <scalbn+0xe8>)
 810d5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d5c6:	f7f3 f843 	bl	8100650 <__aeabi_dmul>
 810d5ca:	e7cb      	b.n	810d564 <scalbn+0x4c>
 810d5cc:	a10a      	add	r1, pc, #40	; (adr r1, 810d5f8 <scalbn+0xe0>)
 810d5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5d2:	2b00      	cmp	r3, #0
 810d5d4:	d0b8      	beq.n	810d548 <scalbn+0x30>
 810d5d6:	a10e      	add	r1, pc, #56	; (adr r1, 810d610 <scalbn+0xf8>)
 810d5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5dc:	e7b4      	b.n	810d548 <scalbn+0x30>
 810d5de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810d5e2:	3236      	adds	r2, #54	; 0x36
 810d5e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810d5e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810d5ec:	4620      	mov	r0, r4
 810d5ee:	4b0c      	ldr	r3, [pc, #48]	; (810d620 <scalbn+0x108>)
 810d5f0:	2200      	movs	r2, #0
 810d5f2:	e7e8      	b.n	810d5c6 <scalbn+0xae>
 810d5f4:	f3af 8000 	nop.w
 810d5f8:	c2f8f359 	.word	0xc2f8f359
 810d5fc:	01a56e1f 	.word	0x01a56e1f
 810d600:	8800759c 	.word	0x8800759c
 810d604:	7e37e43c 	.word	0x7e37e43c
 810d608:	8800759c 	.word	0x8800759c
 810d60c:	fe37e43c 	.word	0xfe37e43c
 810d610:	c2f8f359 	.word	0xc2f8f359
 810d614:	81a56e1f 	.word	0x81a56e1f
 810d618:	43500000 	.word	0x43500000
 810d61c:	ffff3cb0 	.word	0xffff3cb0
 810d620:	3c900000 	.word	0x3c900000

0810d624 <_init>:
 810d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d626:	bf00      	nop
 810d628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d62a:	bc08      	pop	{r3}
 810d62c:	469e      	mov	lr, r3
 810d62e:	4770      	bx	lr

0810d630 <_fini>:
 810d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d632:	bf00      	nop
 810d634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d636:	bc08      	pop	{r3}
 810d638:	469e      	mov	lr, r3
 810d63a:	4770      	bx	lr
